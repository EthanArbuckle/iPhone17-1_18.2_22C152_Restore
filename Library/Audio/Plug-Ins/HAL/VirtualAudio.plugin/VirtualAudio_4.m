BOOL sub_2355A0(uint64_t a1)
{
  CFRange v2;
  BOOL v3;
  CFStringRef v5[2];
  CFStringRef theString[2];

  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1 + 128))(theString);
  v2 = CFStringFind(theString[0], @"Studio Display", 0);
  if (v2.location == -1)
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t, CFIndex))(*(void *)a1 + 128))(v5, a1, v2.length);
    v3 = CFStringFind(v5[0], @"AppleDisplay", 0).location != -1;
    sub_72924((uint64_t)v5);
  }
  else
  {
    v3 = 1;
  }
  sub_72924((uint64_t)theString);
  return v3;
}

void sub_235670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_235698(std::mutex *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(std::mutex *))(a1->__m_.__sig + 120))(a1);
  sub_1050A0((uint64_t)v65, 0x706D7769u, v2);
  v3 = (int *)operator new(4uLL);
  int *v3 = 1701669219;
  sub_456EFC((uint64_t *)&v62, v3, v3 + 1);
  operator delete(v3);
  sub_4389A8((uint64_t *)&v68, a1, 1768845428);
  v5 = v68;
  v4 = v69;
  if ((char *)v69 - (char *)v68 < 1) {
    goto LABEL_44;
  }
  uint64_t v6 = ((char *)v69 - (char *)v68) >> 4;
  long long v7 = v62;
  uint64_t v8 = (uint64_t)(*((void *)&v62 + 1) - v62) >> 4;
  v9 = (void *)(v62 + ((*((void *)&v62 + 1) - v62) & 0xFFFFFFFFFFFFFFF0));
  if (v6 > (v63 - *((void *)&v62 + 1)) >> 4)
  {
    unint64_t v10 = v8 + v6;
    if ((unint64_t)(v8 + v6) >> 60) {
      sub_60548();
    }
    uint64_t v11 = v63 - v62;
    if ((v63 - (uint64_t)v62) >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    *(void *)&buf[32] = &v63;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_10724(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    v20 = (void *)(v12 + 16 * v8);
    *(void *)buf = v12;
    *(void *)&buf[8] = v20;
    *(void *)&buf[24] = v12 + 16 * v13;
    v21 = &v20[2 * v6];
    do
    {
      void *v20 = *v5;
      uint64_t v22 = v5[1];
      v20[1] = v22;
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      v20 += 2;
      v5 += 2;
    }
    while (v20 != v21);
    *(void *)&buf[16] = v21;
    *(void *)&buf[8] = sub_98E84((uint64_t)&v63, (uint64_t)v9, v9, v62, (void *)v62, *(uint64_t *)&buf[8], *(uint64_t *)&buf[8]);
    v23 = (void *)*((void *)&v62 + 1);
    v24 = *(_OWORD **)&buf[16];
    uint64_t v74 = *(void *)&buf[16];
    v75 = *(_OWORD **)&buf[16];
    v70 = (char *)&v63;
    v71 = &v74;
    v72 = &v75;
    if (v9 != *((void **)&v62 + 1))
    {
      do
      {
        *v24++ = *(_OWORD *)v9;
        void *v9 = 0;
        v9[1] = 0;
        v9 += 2;
      }
      while (v9 != v23);
      v75 = v24;
    }
    char v73 = 1;
    sub_67EB4((uint64_t)&v70);
    long long v25 = v62;
    *(void *)&long long v62 = *(void *)&buf[8];
    *((void *)&v62 + 1) = v24;
    *(_OWORD *)&buf[8] = v25;
    uint64_t v26 = v63;
    uint64_t v63 = *(void *)&buf[24];
    *(void *)&buf[24] = v26;
    *(void *)buf = v25;
    sub_98E24((uint64_t)buf);
    goto LABEL_44;
  }
  uint64_t v14 = *((void *)&v62 + 1) - (void)v9;
  uint64_t v15 = (uint64_t)(*((void *)&v62 + 1) - (void)v9) >> 4;
  if (v15 >= v6)
  {
    v16 = &v68[2 * v6];
    v17 = (char *)*((void *)&v62 + 1);
LABEL_30:
    v27 = (char *)&v9[2 * v6];
    v28 = &v17[-16 * v6];
    v29 = v17;
    if ((unint64_t)v28 < *((void *)&v7 + 1))
    {
      v29 = v17;
      do
      {
        *(_OWORD *)v29 = *(_OWORD *)v28;
        v29 += 16;
        *(void *)v28 = 0;
        *((void *)v28 + 1) = 0;
        v28 += 16;
      }
      while ((unint64_t)v28 < *((void *)&v7 + 1));
    }
    *((void *)&v62 + 1) = v29;
    if (v17 != v27)
    {
      uint64_t v30 = (v17 - v27) >> 4;
      v31 = (std::__shared_weak_count **)(v17 - 8);
      uint64_t v32 = 16 * v30;
      uint64_t v33 = v7 + 16 * v8 - 16;
      do
      {
        v34 = (void *)(v33 + v32);
        long long v35 = *(_OWORD *)(v33 + v32);
        void *v34 = 0;
        v34[1] = 0;
        v36 = *v31;
        *(_OWORD *)(v31 - 1) = v35;
        if (v36) {
          sub_4636C(v36);
        }
        v31 -= 2;
        v32 -= 16;
      }
      while (v32);
    }
    for (; v5 != v16; v9 += 2)
    {
      uint64_t v38 = *v5;
      uint64_t v37 = v5[1];
      if (v37) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
      }
      v39 = (std::__shared_weak_count *)v9[1];
      void *v9 = v38;
      v9[1] = v37;
      if (v39) {
        sub_4636C(v39);
      }
      v5 += 2;
    }
    goto LABEL_44;
  }
  v70 = (char *)*((void *)&v62 + 1);
  v16 = &v68[2 * v15];
  v75 = (_OWORD *)*((void *)&v62 + 1);
  *(void *)buf = &v63;
  *(void *)&buf[8] = &v75;
  *(void *)&buf[16] = &v70;
  if (v16 == v69)
  {
    v17 = (char *)*((void *)&v62 + 1);
  }
  else
  {
    v17 = (char *)*((void *)&v62 + 1);
    v18 = &v68[2 * v15];
    do
    {
      *(void *)v17 = *v18;
      uint64_t v19 = v18[1];
      *((void *)v17 + 1) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      v17 += 16;
      v18 += 2;
    }
    while (v18 != v4);
    v70 = v17;
  }
  buf[24] = 1;
  sub_67EB4((uint64_t)buf);
  *((void *)&v62 + 1) = v17;
  if (v14 >= 1) {
    goto LABEL_30;
  }
LABEL_44:
  *(void *)buf = &v68;
  sub_74004((void ***)buf);
  (*(void (**)(char **__return_ptr, std::mutex *))(a1->__m_.__sig + 128))(&v70, a1);
  v40 = (std::__shared_weak_count *)operator new(0x228uLL);
  *(_OWORD *)&v40->__shared_owners_ = 0u;
  v40->__vftable = (std::__shared_weak_count_vtbl *)off_640B60;
  v41 = (char *)&v40[1];
  memset(buf, 0, 24);
  sub_17301C(&v40[1].__vftable, &qword_64BFC8, (uint64_t)a1, (uint64_t)buf, (uint64_t)v65, (uint64_t)&v70, (uint64_t)&v62);
  v40[1].__vftable = (std::__shared_weak_count_vtbl *)off_623D38;
  LOBYTE(v40[22].__shared_weak_owners_) = 0;
  v64[0] = v40 + 1;
  v64[1] = v40;
  sub_56E64((uint64_t)v64, &v40[4].__shared_owners_, (uint64_t)&v40[1]);
  sub_72924((uint64_t)&v70);
  *(void *)buf = &v62;
  sub_74004((void ***)buf);
  sub_234BEC((uint64_t)buf, (uint64_t)a1, COERCE_DOUBLE(1735159650));
  if (!buf[16]) {
    goto LABEL_48;
  }
  CFDictionaryRef v42 = sub_234C80(*(const __CFDictionary **)&buf[8]);
  if (buf[16]) {
    sub_49A90(buf);
  }
  if (!v42)
  {
LABEL_48:
    v43 = (os_log_t *)sub_32A48(17);
    v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 622;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_INFO, "%25s:%-5d SetPortSubType(MicrophoneWired) to USB Default device", buf, 0x12u);
    }
    (*(void (**)(char *, uint64_t))(*(void *)v41 + 104))(v41, 1970496068);
  }
  if (sub_2355A0((uint64_t)a1))
  {
    v45 = (os_log_t *)sub_32A48(17);
    v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 628;
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_INFO, "%25s:%-5d SetPortSubType(MicrophoneWired) to USB display device", buf, 0x12u);
    }
    (*(void (**)(char *, uint64_t))(*(void *)v41 + 104))(v41, 1781740087);
  }
  v60 = (void **)&v40[1].__vftable;
  v61 = v40;
  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_436484((uint64_t)a1, &v60);
  if (v61) {
    sub_4636C(v61);
  }
  v47 = (os_log_t *)sub_32A48(17);
  v48 = *v47;
  if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v49 = v67;
    uint64_t v50 = v66;
    uint64_t v51 = v65[0];
    (*(void (**)(char **__return_ptr, std::mutex *))(a1->__m_.__sig + 128))(&v70, a1);
    if (v50) {
      uint64_t v52 = v50;
    }
    else {
      uint64_t v52 = v51;
    }
    if (v49) {
      uint64_t v52 = v49;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&buf[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 635;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = v52;
    *(_WORD *)&buf[28] = 2112;
    *(void *)&buf[30] = v70;
    _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a USB headset input port with name \"%@\" and UID \"%@\"", buf, 0x26u);
    sub_72924((uint64_t)&v70);
  }
  v53 = operator new(4uLL);
  _DWORD *v53 = 1886222185;
  *(void *)buf = v53;
  *(void *)&buf[8] = v53 + 1;
  *(void *)&buf[16] = v53 + 1;
  strcpy(&buf[24], "cwdv");
  buf[32] = 0;
  int v77 = 3;
  v79[0] = 0;
  v79[1] = 0;
  v78 = v79;
  int v80 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C((uint64_t *)&v70, (uint64_t)a1, (uint64_t)buf);
  v54 = v71;
  v55 = (std::__shared_weak_count *)v71[3];
  if (v55)
  {
    v56 = std::__shared_weak_count::lock(v55);
    if (v56) {
      uint64_t v57 = v54[2];
    }
    else {
      uint64_t v57 = 0;
    }
  }
  else
  {
    uint64_t v57 = 0;
    v56 = 0;
  }
  sub_8108((uint64_t *)&v70);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v79[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v57)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v57 + 544))(v57, 1, 1, 0);
    sub_236CDC(0x696E7074u, v57, (uint64_t)a1);
    v58 = (_DWORD *)sub_10FBF0();
    *(void *)buf = v57;
    *(void *)&buf[8] = v56;
    if (v56) {
      atomic_fetch_add_explicit(&v56->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1106D8(v58, (uint64_t *)buf);
    if (v56) {
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v56) {
    sub_4636C(v56);
  }
  sub_4636C(v40);
  sub_72924((uint64_t)&v67);
  sub_72924((uint64_t)&v66);
  return sub_72924((uint64_t)v65);
}

void sub_235F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4636C(v8);
  sub_78FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_236060(void ***a1, std::mutex *a2)
{
  unsigned int v4 = qword_64E348;
  AudioObjectID v5 = (*(uint64_t (**)(std::mutex *))(a2->__m_.__sig + 120))(a2);
  sub_1050A0((uint64_t)v22, v4, v5);
  uint64_t v6 = (os_log_t *)sub_32A48(17);
  long long v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = v24;
    uint64_t v9 = v23;
    uint64_t v10 = v22[0];
    (*(void (**)(uint64_t *__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(v25, a2);
    if (v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    *(void *)&buf[4] = "Device_USB_Aspen.cpp";
    *(_DWORD *)buf = 136315906;
    if (v8) {
      uint64_t v11 = v8;
    }
    __int16 v29 = 1024;
    int v30 = 679;
    __int16 v31 = 2112;
    uint64_t v32 = v11;
    __int16 v33 = 2112;
    uint64_t v34 = v25[0];
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a USB output port with name \"%@\" and UID \"%@\"", buf, 0x26u);
    sub_72924((uint64_t)v25);
  }
  if (sub_164944() & 1) != 0 || (sub_20A744())
  {
    unint64_t v12 = 0;
    uint64_t v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    unint64_t v12 = (char *)operator new(0xCuLL);
    v20 = v12 + 12;
    v21 = v12 + 12;
    qmemcpy(v12, "gcrvmorvtshv", 12);
    uint64_t v19 = v12;
  }
  if (sub_20ACA4())
  {
    (*(void (**)(void ***__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(v26, a2);
    sub_4389A8(v25, a2, 1869968496);
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x298uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)off_63C060;
    sub_21C8C(buf, "");
    uint64_t v14 = (void **)&v13[1].__vftable;
    sub_1066F4((uint64_t)&v13[1], &qword_64E348, (uint64_t)a2, (uint64_t)&v19, (uint64_t)v22, (uint64_t)v26, (uint64_t)v25, (long long *)buf, 0, 1);
    if (SBYTE3(v32) < 0) {
      operator delete(*(void **)buf);
    }
    v27[0] = v13 + 1;
    v27[1] = v13;
    sub_56E64((uint64_t)v27, &v13[4].__shared_owners_, (uint64_t)&v13[1]);
    *(void *)buf = v25;
    sub_74004((void ***)buf);
    sub_72924((uint64_t)v26);
    BOOL v15 = 0;
    v17 = (void **)&v13[1].__vftable;
    v18 = v13;
  }
  else
  {
    (*(void (**)(void *__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(v27, a2);
    sub_4389A8((uint64_t *)buf, a2, 1869968496);
    sub_236B98(v25, &qword_64E348, (uint64_t)a2, (uint64_t)&v19, (uint64_t)v22, (uint64_t)v27, (uint64_t)buf);
    uint64_t v14 = (void **)v25[0];
    uint64_t v13 = (std::__shared_weak_count *)v25[1];
    v26[0] = (void **)buf;
    sub_74004(v26);
    sub_72924((uint64_t)v27);
    v17 = v14;
    v18 = v13;
    BOOL v15 = v13 == 0;
    if (!v13) {
      goto LABEL_19;
    }
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_19:
  sub_436484((uint64_t)a2, &v17);
  if (v18) {
    sub_4636C(v18);
  }
  sub_236CDC(0x6F757470u, (uint64_t)v14, (uint64_t)a2);
  *a1 = v14;
  a1[1] = (void **)&v13->__vftable;
  if (!v15)
  {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v13);
  }
  if (v12) {
    operator delete(v12);
  }
  sub_72924((uint64_t)&v24);
  sub_72924((uint64_t)&v23);
  return sub_72924((uint64_t)v22);
}

void sub_236444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_78FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_236534(void *a1, std::mutex *a2)
{
  unsigned int v4 = qword_64E3A8;
  AudioObjectID v5 = (*(uint64_t (**)(std::mutex *))(a2->__m_.__sig + 120))(a2);
  sub_1050A0((uint64_t)v24, v4, v5);
  uint64_t v6 = (os_log_t *)sub_32A48(17);
  long long v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v8 = v25;
    if (!v25) {
      CFStringRef v8 = (const __CFString *)v24[0];
    }
    if (v26) {
      CFStringRef v9 = v26;
    }
    else {
      CFStringRef v9 = v8;
    }
    uint64_t v10 = v22;
    sub_21B7C(v22, v9);
    if (v23 < 0) {
      uint64_t v10 = (void **)v22[0];
    }
    (*(void (**)(CFStringRef *__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(theString, a2);
    sub_21B7C(&__p, theString[0]);
    if (v21 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&buf[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 725;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v10;
    __int16 v29 = 2080;
    int v30 = p_p;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a USB tap input port with name \"%s\" and UID \"%s\"", buf, 0x26u);
    if (v21 < 0) {
      operator delete(__p);
    }
    sub_72924((uint64_t)theString);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }
  if ((sub_161B44() & 1) != 0 || sub_20A744())
  {
    unint64_t v12 = 0;
    memset(buf, 0, 24);
  }
  else
  {
    unint64_t v12 = (char *)operator new(0xCuLL);
    *(void *)&buf[8] = v12 + 12;
    *(void *)&buf[16] = v12 + 12;
    qmemcpy(v12, "gcrvmorvtshv", 12);
    *(void *)buf = v12;
  }
  (*(void (**)(CFStringRef *__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(theString, a2);
  sub_4389A8((uint64_t *)v22, a2, 1768845428);
  sub_236B98(&__p, &qword_64E3A8, (uint64_t)a2, (uint64_t)buf, (uint64_t)v24, (uint64_t)theString, (uint64_t)v22);
  v27 = v22;
  sub_74004(&v27);
  sub_72924((uint64_t)theString);
  uint64_t v14 = __p;
  uint64_t v13 = v20;
  v16 = (void **)__p;
  v17 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_436484((uint64_t)a2, &v16);
  if (v17) {
    sub_4636C(v17);
  }
  sub_236CDC(0x696E7074u, (uint64_t)v14, (uint64_t)a2);
  *a1 = v14;
  a1[1] = v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v13);
  }
  if (v12) {
    operator delete(v12);
  }
  sub_72924((uint64_t)&v26);
  sub_72924((uint64_t)&v25);
  return sub_72924((uint64_t)v24);
}

void sub_236860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
}

CFArrayRef sub_236924(uint64_t a1)
{
  uint64_t v13 = 0x7074727561736573;
  int v14 = 0;
  CFArrayRef result = (const __CFArray *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v13);
  if (result)
  {
    CFArrayRef theArray = 0;
    int v10 = 1;
    int v11 = 8;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFArrayRef *))(*(void *)a1 + 40))(a1, &v13, 0, 0, &v11, &theArray);
    CFArrayRef result = theArray;
    if (theArray)
    {
      unsigned int v3 = 0;
      CFArrayRef v8 = theArray;
      __int16 v9 = 1;
LABEL_4:
      LODWORD(result) = CFArrayGetCount(result);
      while (v3 < result)
      {
        int v7 = 0;
        if ((sub_1D1B30(&v8, v3, &v7) & 1) == 0)
        {
          unsigned int v4 = (os_log_t *)sub_32A48(13);
          AudioObjectID v5 = *v4;
          if (*v4)
          {
            if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = "Device_USB_Aspen.cpp";
              __int16 v16 = 1024;
              int v17 = 1384;
              _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Channels CFArray contained a non-UInt32 value.\"", buf, 0x12u);
            }
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_6414D8;
          exception[2] = 2003329396;
        }
        *(void *)buf = 0x707472756D757465;
        *(_DWORD *)&buf[8] = v7;
        (*(void (**)(uint64_t, unsigned char *, void, void, uint64_t, int *))(*(void *)a1 + 48))(a1, buf, 0, 0, 4, &v10);
        ++v3;
        CFArrayRef result = v8;
        if (v8) {
          goto LABEL_4;
        }
      }
      return (const __CFArray *)sub_3D61C((uint64_t)&v8);
    }
  }
  return result;
}

void sub_236B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_236B98(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = operator new(0x228uLL);
  v14[1] = 0;
  v14[2] = 0;
  *int v14 = off_640AB8;
  sub_21C8C(__p, "");
  sub_105158((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (long long *)__p);
  v14[3] = &off_621AD0;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;

  sub_56E64((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_236CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_236CDC(unsigned int a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)inAddress = 1936941859;
  *(_DWORD *)&inAddress[4] = a1;
  *(_DWORD *)&inAddress[8] = 0;
  sub_50848((std::mutex *)a3);
  if (AudioObjectHasProperty(*(_DWORD *)(a3 + 268), (const AudioObjectPropertyAddress *)inAddress))
  {
    *(_DWORD *)inAddress = 1936945763;
    *(_DWORD *)&inAddress[4] = a1;
    *(_DWORD *)&inAddress[8] = 0;
    LODWORD(v20[0]) = 4;
    LODWORD(v18[0]) = 0;
    (*(void (**)(uint64_t, unsigned char *, void, void, void **, void **))(*(void *)a3 + 40))(a3, inAddress, 0, 0, v20, v18);
    uint64_t v6 = LODWORD(v18[0]);
    int v7 = (os_log_t *)sub_32A48(17);
    CFArrayRef v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = v20;
      sub_4F64((uint64_t)v20, (os_unfair_lock_t)(a2 + 8));
      if (v21 < 0) {
        __int16 v9 = (void **)v20[0];
      }
      sub_4F64((uint64_t)v18, (os_unfair_lock_t)(a3 + 8));
      int v10 = v19;
      int v11 = (void **)v18[0];
      sub_2417C(__p, a1);
      unint64_t v12 = v18;
      if (v10 < 0) {
        unint64_t v12 = v11;
      }
      if (v17 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)inAddress = 136316418;
      *(void *)&inAddress[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 149;
      __int16 v23 = 2048;
      uint64_t v24 = v6;
      __int16 v25 = 2080;
      CFStringRef v26 = v9;
      __int16 v27 = 2080;
      v28 = v12;
      __int16 v29 = 2080;
      int v30 = v13;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Activating sub-port for active data source with ID: %lu for port: '%s' on USB device: '%s'. Scope: '%s'.", inAddress, 0x3Au);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
    LODWORD(v18[0]) = v6;
    sub_72300(inAddress, (__int32 *)v18, 1);
    int v14 = *(void **)(a2 + 80);
    BOOL v15 = *(std::__shared_weak_count **)(a2 + 88);
    v20[0] = v14;
    v20[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1F3044((unsigned int **)inAddress, (uint64_t *)v20, (os_unfair_lock_s *)a3);
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
    if (*(void *)inAddress)
    {
      *(void *)&inAddress[8] = *(void *)inAddress;
      operator delete(*(void **)inAddress);
    }
  }
}

void sub_236F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_236FB0(uint64_t a1)
{
  AudioObjectID v2 = operator new(4uLL);
  *(void *)__p = v2;
  *AudioObjectID v2 = 1885892727;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(v18, "cwdv");
  v18[8] = 0;
  int v19 = 3;
  v21[0] = 0;
  v21[1] = 0;
  v20 = v21;
  int v22 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C((uint64_t *)v12, a1, (uint64_t)__p);
  sub_FB288(&v14, v12);
  sub_8108((uint64_t *)v12);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v21[0]);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v16 == 1) {
    goto LABEL_14;
  }
  unsigned int v3 = (os_log_t *)sub_32A48(13);
  unsigned int v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = v16;
    sub_2417C(v12, 0x70687077u);
    uint64_t v6 = v13 >= 0 ? v12 : (void **)v12[0];
    *(_DWORD *)__p = 136315906;
    *(void *)&__p[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 1349;
    *(_WORD *)&__p[18] = 1024;
    *(_DWORD *)&__p[20] = v5;
    *(_WORD *)v18 = 2080;
    *(void *)&v18[2] = v6;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Found %u ports of type '%s' (expected 1)\"", __p, 0x22u);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
  if (v16 == 1)
  {
LABEL_14:
    uint64_t v7 = sub_2372E4(1, a1);
    if (sub_2355A0(a1))
    {
      CFArrayRef v8 = (os_log_t *)sub_32A48(17);
      __int16 v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__p = 136315394;
          *(void *)&__p[4] = "Device_USB_Aspen.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1355;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Detected a USB display device (speaker)", __p, 0x12u);
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v15 + 16) + 544))(*(void *)(v15 + 16), 1, 1, v7);
    int v10 = (_DWORD *)sub_10FBF0();
    int v11 = *(std::__shared_weak_count **)(v15 + 24);
    *(void *)__p = *(void *)(v15 + 16);
    *(void *)&__p[8] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1106D8(v10, (uint64_t *)__p);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_B8E4(&v14);
}

void sub_237280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2372E4(uint64_t a1, uint64_t a2)
{
  if (sub_2355A0(a2)) {
    return 1781740087;
  }
  uint64_t v4 = sub_171DAC(a1, 1, a2);
  uint64_t v5 = v4;
  if (v4 && v4 != 1784965235 && v4 != 1784965232) {
    return v5;
  }
  uint64_t v6 = sub_231E4C(a2);
  uint64_t v7 = v6;
  if (v6)
  {
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v6 + 448))(&v31, v6);
    if (v31)
    {
      sub_87458();
      __int16 v8 = (*(uint64_t (**)(void))(qword_64A1C8 + 32))();
      int v9 = v8;
      int v10 = HIBYTE(v8);
      goto LABEL_12;
    }
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    CFTypeRef v31 = 0;
  }
  int v10 = 1;
LABEL_12:
  unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 440))(a2, 1);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1);
  if (v11 > 2 || v12 != 1)
  {
    if (v31)
    {
      uint64_t v14 = (os_log_t *)sub_32A48(17);
      uint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v33 = "Device_USB_Aspen.cpp";
        __int16 v34 = 1024;
        int v35 = 1510;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Checking USB input for parity", buf, 0x12u);
      }
      a1 = 1784965235;
      if (sub_235180(1768845428, v7) == 1 && v10 && v9)
      {
        uint64_t v16 = (os_log_t *)sub_32A48(17);
        char v17 = *v16;
        if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v33 = "Device_USB_Aspen.cpp";
          __int16 v34 = 1024;
          int v35 = 1520;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_INFO, "%25s:%-5d Partner device meets Parity Guidelines for Input - Forcing input to Headset sub type", buf, 0x12u);
        }
LABEL_56:
        char v18 = 0;
        goto LABEL_57;
      }
    }
    goto LABEL_49;
  }
  if (sub_234CA0(a2))
  {
    char v18 = 0;
    if (a1) {
      a1 = 1784965235;
    }
    else {
      a1 = 1784965232;
    }
    goto LABEL_57;
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)a2 + 448))(&cf, a2);
  sub_87458();
  unsigned __int16 v19 = (*(uint64_t (**)(void))(qword_64A1C8 + 32))();
  unsigned __int8 v20 = v19;
  if (v19 < 0x100u)
  {
    if (MGGetSInt32Answer() == 1) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = 0;
    }
    goto LABEL_45;
  }
  char v21 = (os_log_t *)sub_32A48(17);
  int v22 = v20;
  __int16 v23 = *v21;
  if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = "is";
    __int16 v33 = "Device_USB_Aspen.cpp";
    __int16 v34 = 1024;
    *(_DWORD *)buf = 136315906;
    if (!v22) {
      uint64_t v24 = "is not";
    }
    int v35 = 1483;
    __int16 v36 = 2112;
    CFTypeRef v37 = cf;
    __int16 v38 = 2080;
    v39 = v24;
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d According to ADAM, device %@ %s headphones", buf, 0x26u);
  }
  if (!v22)
  {
    uint64_t v5 = 0;
LABEL_45:
    char v25 = 1;
    goto LABEL_46;
  }
  char v25 = 0;
  if (a1) {
    a1 = 1784965235;
  }
  else {
    a1 = 1784965232;
  }
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  if ((v25 & 1) == 0) {
    goto LABEL_56;
  }
LABEL_49:
  int v26 = sub_20A744() ^ 1;
  if (!v5) {
    LOBYTE(v26) = 0;
  }
  if ((v26 & 1) != 0 || (v27 = (os_log_t *)sub_32A48(17), uint64_t v5 = 1786082146, (v28 = *v27) == 0))
  {
    char v18 = 1;
  }
  else
  {
    char v18 = 1;
    if (os_log_type_enabled(*v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v33 = "Device_USB_Aspen.cpp";
      __int16 v34 = 1024;
      int v35 = 1532;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_INFO, "%25s:%-5d Forcing USB Default sub type", buf, 0x12u);
    }
  }
LABEL_57:
  if (v31) {
    CFRelease(v31);
  }
  if (v18) {
    return v5;
  }
  return a1;
}

void sub_237810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_237870(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_237894(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6283B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2378E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6283B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_23790C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_237930(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63C060;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_237984(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63C060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_2379A4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_FE748(a2);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t result = sub_FE7BC(a2);
    int v8 = result;
    if (result)
    {
      uint64_t v7 = 0;
      uint64_t result = sub_FE830(a2);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        uint64_t v5 = v7;
        v6[0] = off_63E5A8;
        v6[1] = 0;
        *(void *)(a1 + 8) = off_63E5A8;
        *(void *)(a1 + 16) = v5;
        *(unsigned char *)(a1 + 24) = 1;
        return (uint64_t)sub_49A90(v6);
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_237ABC(int a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 88))(a2, a1 != 1768845428))
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, BOOL, void))(*(void *)a2 + 96))(a2, a1 != 1768845428, 0);
    uint64_t v8 = sub_99A40(v4);
    *((void *)&v10 + 1) = v9;
    *(void *)&long long v10 = v8;
    uint64_t v6 = v10 >> 32;
    if ((v6 & 0xFF00000000) != 0 && ((v6 - 769) < 2 || v6 == 1026 || v6 == 513))
    {
      uint64_t v7 = v6 & 0xFFFFFF00;
      uint64_t v6 = v6;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v5 = 0x100000000;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  return v6 | v5 | v7;
}

uint64_t sub_237BEC(const __CFNumber *a1, CFNumberType a2)
{
  float valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    int v3 = 0;
  }
  return v3 | ((Value != 0) << 8);
}

uint64_t sub_237C2C(const __CFNumber *a1, CFNumberType a2)
{
  double valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    int v3 = 0;
  }
  return v3 | ((Value != 0) << 8);
}

uint64_t sub_237C6C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_FE748(a2);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t result = sub_FE7BC(a2);
    int v8 = result;
    if (result)
    {
      uint64_t v7 = 0;
      uint64_t result = sub_FE830(a2);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        uint64_t v5 = v7;
        v6[0] = &off_6412B0;
        v6[1] = 0;
        *(void *)(a1 + 8) = &off_6412B0;
        *(void *)(a1 + 16) = v5;
        *(unsigned char *)(a1 + 24) = 1;
        return (uint64_t)sub_49A90(v6);
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_237D84(unsigned char *a1)
{
  __p = 0;
  CFTypeRef v31 = 0;
  uint64_t v32 = 0;
  strcpy(v33, "cwdv");
  v33[8] = 0;
  int v34 = 3;
  v36[0] = 0;
  v36[1] = 0;
  int v35 = v36;
  CFTypeRef cf = 0;
  int v37 = 44739226;
  sub_43637C(&v27, (uint64_t)a1, (uint64_t)&__p);
  if (v29)
  {
    uint64_t v2 = v28;
    int v3 = *(std::__shared_weak_count **)(v28 + 24);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        uint64_t v5 = *(_DWORD **)(v2 + 16);
        if (v5)
        {
          BOOL v6 = sub_235388((uint64_t)a1);
          int v7 = v5[36];
          char v8 = sub_20A744();
          if (v7 == 1885892727) {
            char v9 = v8;
          }
          else {
            char v9 = 1;
          }
          if (v9)
          {
            long long v10 = (os_log_t *)sub_32A48(17);
            unsigned int v11 = *v10;
            if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 858;
              __int16 v40 = 1024;
              BOOL v41 = v7 == 1885892727;
              __int16 v42 = 1024;
              BOOL v43 = v6;
              _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d USB Device Currently headphones? %u. Should be headphones? %u", buf, 0x1Eu);
            }
            if (v6 != (v7 == 1885892727))
            {
              char v25 = 0;
              uint64_t v26 = 0;
              int v12 = (_DWORD *)sub_10FBF0();
              *(void *)buf = v12;
              buf[8] = (*(uint64_t (**)(_DWORD *))(*(void *)v12 + 16))(v12);
              ++v12[114];
              sub_3BCAC(buf);
              char v13 = (os_log_t *)sub_32A48(17);
              uint64_t v14 = *v13;
              if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 865;
                _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_INFO, "%25s:%-5d USB Device- tearing down current output port", buf, 0x12u);
              }
              if (v7 == 1885892727)
              {
                (*(void (**)(_DWORD *, void, void, void))(*(void *)v5 + 544))(v5, 0, 0, 0);
                uint64_t v15 = (_DWORD *)sub_10FBF0();
                *(void *)buf = v5;
                *(void *)&buf[8] = v4;
                atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                sub_1106D8(v15, (uint64_t *)buf);
                std::__shared_weak_count::__release_weak(v4);
              }
              if (v6) {
                (*(void (**)(unsigned char *))(*(void *)a1 + 368))(a1);
              }
              v24[0] = (unint64_t)v5;
              v24[1] = (unint64_t)v4;
              atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_431020((uint64_t)a1, v24);
              sub_4636C(v4);
              a1[492] = 0;
              sub_231FD8(a1);
              *(void *)buf = 0;
              sub_10FBF0();
              sub_10BA10();
            }
          }
          else
          {
            int v18 = v5[66];
            unsigned __int16 v19 = (os_log_t *)sub_32A48(17);
            unsigned int v20 = v18 & 0xDFFFFFFF;
            char v21 = *v19;
            if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 847;
              __int16 v40 = 1024;
              BOOL v41 = v20 == 1214539380;
              __int16 v42 = 1024;
              BOOL v43 = v6;
              _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_INFO, "%25s:%-5d USB Device- Currently headphones? %u. Should be headphones? %u", buf, 0x1Eu);
            }
            if (v6 != (v20 == 1214539380))
            {
              int v22 = (os_log_t *)sub_32A48(17);
              __int16 v23 = *v22;
              if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 851;
                _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_INFO, "%25s:%-5d Updating subport type on headphones port", buf, 0x12u);
              }
              sub_236FB0((uint64_t)a1);
            }
          }
LABEL_26:
          sub_4636C(v4);
          goto LABEL_27;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v16 = (os_log_t *)sub_32A48(17);
    char v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 827;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d USB Device - port expired", buf, 0x12u);
    }
    if (v4) {
      goto LABEL_26;
    }
  }
LABEL_27:
  sub_8108(&v27);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v36[0]);
  if (__p)
  {
    CFTypeRef v31 = __p;
    operator delete(__p);
  }
}

void sub_2382AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__shared_weak_count::__release_weak(v16);
  sub_F69B4((uint64_t)&a11);
}

void sub_23835C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  AudioObjectPropertyScope v5 = 1768845428;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2 > 1886740851)
  {
    if (a2 != 1886745455)
    {
      if (a2 == 1886745449) {
        goto LABEL_12;
      }
      if (a2 != 1886740852) {
        goto LABEL_15;
      }
    }
    goto LABEL_9;
  }
  if (a2 == 1885892727)
  {
LABEL_9:
    if (a2 == 1886740852) {
      AudioObjectPropertyScope v5 = 1768845428;
    }
    else {
      AudioObjectPropertyScope v5 = 1869968496;
    }
    goto LABEL_12;
  }
  if (a2 != 1885894516 && a2 != 1886222185)
  {
LABEL_15:
    int v7 = (os_log_t *)sub_32A48(13);
    char v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        inAddress.mSelector = 136315650;
        *(void *)&inAddress.mScope = "Device_USB_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 1268;
        __int16 v16 = 1024;
        int v17 = a2;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Request for default sub-ports for invalid port type: %u\"", (uint8_t *)&inAddress, 0x18u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Request for default sub-ports for invalid port type: %u");
  }
LABEL_12:
  inAddress.mSelector = 1936945763;
  inAddress.mScope = v5;
  inAddress.mElement = 0;
  sub_50848((std::mutex *)a1);
  if (AudioObjectHasProperty(*(_DWORD *)(a1 + 268), &inAddress))
  {
    inAddress.mSelector = 1936945763;
    inAddress.mScope = v5;
    inAddress.mElement = 0;
    __int32 v11 = 0;
    int v12 = 4;
    (*(void (**)(uint64_t, AudioObjectPropertyAddress *, void, void, int *, __int32 *))(*(void *)a1 + 40))(a1, &inAddress, 0, 0, &v12, &v11);
    __int32 v10 = v11;
    sub_72D08((uint64_t)a3, &v10);
  }
}

void sub_238594(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2385C8(uint64_t a1, signed int a2)
{
  if (a2 > 1886740851)
  {
    if (a2 == 1886740852 || a2 == 1886745455) {
      return 0;
    }
    int v2 = 1886745449;
  }
  else
  {
    if (a2 == 1885892727 || a2 == 1885894516) {
      return 0;
    }
    int v2 = 1886222185;
  }
  if (a2 != v2)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(17);
    AudioObjectPropertyScope v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      BOOL v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int16 v14 = "Device_USB_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 1196;
      __int16 v17 = 2080;
      int v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    int v7 = (os_log_t *)sub_32A48(13);
    char v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v14 = "Device_USB_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 1197;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_2387DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2387F8(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  char v4 = 0;
  uint64_t v5 = 0;
  __p = (void *)sub_10FBF0();
  LOBYTE(v3) = (*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
  ++*((_DWORD *)__p + 114);
  sub_3BCAC(&__p);
  sub_231FD8(a1);
  __p = 0;
  sub_10FBF0();
  sub_10BA10();
}

void sub_238A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_238A5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_E13D0((unsigned char **)va);
  sub_564E4(a1);
}

void sub_238A70(os_unfair_lock_s **a1)
{
  v1 = *a1;
  int v2 = sub_437750(*a1);
  sub_238D74(v1, v2);
  sub_238E38(v1);
  operator delete();
}

void sub_238B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      unsigned __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unsigned int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v23 = v22;
      uint64_t v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        unsigned __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unsigned int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        unsigned __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unsigned int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x238ABCLL);
}

unsigned char *sub_238D74(unsigned char *result, int a2)
{
  if (a2 == 1)
  {
    int v2 = result;
    uint64_t v3 = (_DWORD *)sub_10FBF0();
    char v4 = (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    ++v3[114];
    sub_3BCAC(&v3);
    sub_231FD8(v2);
    uint64_t v3 = 0;
    sub_10FBF0();
    sub_10BA10();
  }
  return result;
}

void sub_238E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_238E24(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_E13D0((unsigned char **)va);
  sub_564E4(a1);
}

uint64_t sub_238E38(unsigned char *a1)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    uint64_t v6 = 0x676C6F626869646ELL;
    int v7 = 0;
    int v4 = 0;
    int v5 = 4;
    (*(void (**)(unsigned char *, uint64_t *, void, void, int *, int *))(*(void *)a1 + 40))(a1, &v6, 0, 0, &v5, &v4);
    if (!v4)
    {
      uint64_t v3 = (_DWORD *)sub_10FBF0();
      char v8 = v3;
      char v9 = (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 16))(v3);
      ++v3[114];
      sub_3BCAC(&v8);
      sub_231FD8(a1);
      char v8 = 0;
      sub_10FBF0();
      sub_10BA10();
    }
    return (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 432))(a1);
  }
  return result;
}

void sub_238F70(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_F69B4((uint64_t)va);
}

void sub_238F88(void *a1)
{
  sub_E13D0((unsigned char **)(v1 - 32));
  sub_564E4(a1);
}

uint64_t sub_238F9C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (!a4)
  {
    int v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      char v9 = "Device_USB_Aspen.cpp";
      __int16 v10 = 1024;
      int v11 = 525;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_238E38(a4);
  return 0;
}

void sub_2390A4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2390C0(uint64_t a1, uint64_t a2, uint64_t a3, os_unfair_lock_s *a4)
{
  if (!a4)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "Device_USB_Aspen.cpp";
      __int16 v12 = 1024;
      int v13 = 558;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v5 = sub_437750(a4);
  sub_238D74(a4, v5);
  return 0;
}

void sub_2391D8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2391F4(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 432);

  return v2(a1);
}

uint64_t sub_23927C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      int v18 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      int v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 461;
      __int16 v40 = 2080;
      BOOL v41 = (const char *)v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    unsigned int v20 = (os_log_t *)sub_32A48(13);
    uint32_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      int v22 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      int v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 462;
      __int16 v40 = 2080;
      BOOL v41 = (const char *)v22;
      __int16 v42 = 1024;
      LODWORD(v43[0]) = a3;
      WORD2(v43[0]) = 2048;
      *(void *)((char *)v43 + 6) = a4;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v23 = &off_6414D8;
    v23[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    os_log_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      uint64_t v26 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      int v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 463;
      __int16 v40 = 2080;
      BOOL v41 = "inData";
      __int16 v42 = 2080;
      v43[0] = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v27 = &off_6414D8;
    v27[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    os_log_t v28 = (os_log_t *)sub_32A48(13);
    uint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      int v30 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      int v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 464;
      __int16 v40 = 2080;
      BOOL v41 = (const char *)v30;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    CFTypeRef v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFTypeRef v31 = &off_6414D8;
    v31[2] = 1852797029;
  }
  if (a2->mSelector == 1684304756)
  {
    CFNumberRef v12 = *(const __CFNumber **)a6;
    uint64_t v13 = a1;
    unsigned int v14 = 1869968496;
    goto LABEL_9;
  }
  if (a2->mSelector == 1685287523)
  {
    CFNumberRef v12 = *(const __CFNumber **)a6;
    uint64_t v13 = a1;
    unsigned int v14 = 1768845428;
LABEL_9:
    return sub_4387BC(v13, v14, v12);
  }

  return sub_4321A0(a1, a2, a3, a4, a5, a6);
}

float sub_239878(uint64_t a1, int *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    os_log_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(void *)ioDataSize = *(void *)a2;
      int v47 = a2[2];
      sub_16C9C4((uint64_t)&inAddress, ioDataSize);
      uint64_t v26 = v49 >= 0 ? &inAddress : *(AudioObjectPropertyAddress **)&inAddress.mSelector;
      *(_DWORD *)outData = 136315650;
      *(void *)&outData[4] = "Device_USB_Aspen.cpp";
      __int16 v51 = 1024;
      int v52 = 385;
      __int16 v53 = 2080;
      v54 = (const char *)v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", outData, 0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)&inAddress.mSelector);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    os_log_t v28 = (os_log_t *)sub_32A48(13);
    uint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(void *)ioDataSize = *(void *)a2;
      int v47 = a2[2];
      sub_16C9C4((uint64_t)&inAddress, ioDataSize);
      int v30 = v49 >= 0 ? &inAddress : *(AudioObjectPropertyAddress **)&inAddress.mSelector;
      *(_DWORD *)outData = 136316162;
      *(void *)&outData[4] = "Device_USB_Aspen.cpp";
      __int16 v51 = 1024;
      int v52 = 386;
      __int16 v53 = 2080;
      v54 = (const char *)v30;
      __int16 v55 = 1024;
      LODWORD(v56[0]) = a3;
      WORD2(v56[0]) = 2048;
      *(void *)((char *)v56 + 6) = a4;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        outData,
        0x2Cu);
      if (v49 < 0) {
        operator delete(*(void **)&inAddress.mSelector);
      }
    }
    CFTypeRef v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFTypeRef v31 = &off_6414D8;
    v31[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v32 = (os_log_t *)sub_32A48(13);
    __int16 v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(void *)ioDataSize = *(void *)a2;
      int v47 = a2[2];
      sub_16C9C4((uint64_t)&inAddress, ioDataSize);
      int v34 = v49 >= 0 ? &inAddress : *(AudioObjectPropertyAddress **)&inAddress.mSelector;
      *(_DWORD *)outData = 136315906;
      *(void *)&outData[4] = "Device_USB_Aspen.cpp";
      __int16 v51 = 1024;
      int v52 = 387;
      __int16 v53 = 2080;
      v54 = "outData";
      __int16 v55 = 2080;
      v56[0] = v34;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", outData, 0x26u);
      if (v49 < 0) {
        operator delete(*(void **)&inAddress.mSelector);
      }
    }
    char v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v35 = &off_6414D8;
    v35[2] = 561211770;
  }
  int v12 = *a2;
  if (*a2 <= 1818446147)
  {
    switch(v12)
    {
      case 1684304756:
        uint64_t v17 = a1;
        unsigned int v18 = 1869968496;
        break;
      case 1685287523:
        uint64_t v17 = a1;
        unsigned int v18 = 1768845428;
        break;
      case 1685288051:
        uint64_t v13 = a1;
        int v14 = 1869968496;
LABEL_13:
        __int16 v15 = sub_438204(v13, v14);
LABEL_22:
        *(void *)a6 = v15;
        return result;
      default:
LABEL_17:
        sub_432AE8(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
        return result;
    }
    __int16 v15 = sub_438610(v17, v18);
    goto LABEL_22;
  }
  if (v12 != 1818446148)
  {
    if (v12 == 1835103844)
    {
      UInt32 v21 = *a5;
      if (v21 != (*(unsigned int (**)(uint64_t, int *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        __int16 v36 = (os_log_t *)sub_32A48(13);
        int v37 = *v36;
        if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
        {
          *(void *)ioDataSize = *(void *)a2;
          int v47 = a2[2];
          sub_16C9C4((uint64_t)&inAddress, ioDataSize);
          int v38 = v49;
          int v39 = *(AudioObjectPropertyAddress **)&inAddress.mSelector;
          UInt32 v40 = *a5;
          int v41 = (*(uint64_t (**)(uint64_t, int *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          p_AudioObjectPropertyAddress inAddress = &inAddress;
          *(_DWORD *)outData = 136316162;
          *(void *)&outData[4] = "Device_USB_Aspen.cpp";
          if (v38 < 0) {
            p_AudioObjectPropertyAddress inAddress = v39;
          }
          __int16 v51 = 1024;
          int v52 = 405;
          __int16 v53 = 2080;
          v54 = (const char *)p_inAddress;
          __int16 v55 = 1024;
          LODWORD(v56[0]) = v40;
          WORD2(v56[0]) = 1024;
          *(_DWORD *)((char *)v56 + 6) = v41;
          _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            outData,
            0x28u);
          if (v49 < 0) {
            operator delete(*(void **)&inAddress.mSelector);
          }
        }
        BOOL v43 = __cxa_allocate_exception(0x10uLL);
        *(void *)BOOL v43 = &off_6414D8;
        v43[2] = 561211770;
      }
      AudioObjectID v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      inAddress.mSelector = 1986290211;
      *(void *)&inAddress.mScope = *(void *)(a2 + 1);
      if (AudioObjectHasProperty(v22, &inAddress))
      {
        ioDataSize[0] = sub_26E94(v22, &inAddress, 0, 0);
        if (ioDataSize[0])
        {
          OSStatus PropertyData = AudioObjectGetPropertyData(v22, &inAddress, 0, 0, ioDataSize, outData);
          if (!PropertyData)
          {
            float result = *(double *)outData;
            *a6 = result;
            return result;
          }
        }
        else
        {
          OSStatus PropertyData = 2003329396;
        }
      }
      else
      {
        OSStatus PropertyData = 2003332927;
      }
      v45 = __cxa_allocate_exception(0x10uLL);
      *(void *)v45 = &off_6414D8;
      v45[2] = PropertyData;
    }
    if (v12 == 1936876403)
    {
      uint64_t v13 = a1;
      int v14 = 1768845428;
      goto LABEL_13;
    }
    goto LABEL_17;
  }
  AudioObjectID v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  sub_23A124((CFTypeRef *)outData, v19, COERCE_DOUBLE(1735159650));
  unsigned int v20 = *(const void **)outData;
  if (!*(void *)outData)
  {
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Could not construct");
  }
  *(_DWORD *)a6 = sub_7E85C(*(const __CFNumber **)outData);
  CFRelease(v20);
  return result;
}

void sub_23A0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23A124(CFTypeRef *a1, AudioObjectID inObjectID, double a3)
{
  inAddress.mSelector = 1818446148;
  *(double *)&inAddress.mScope = a3;
  if (!AudioObjectHasProperty(inObjectID, &inAddress))
  {
    LOBYTE(outData) = 0;
    char v16 = 0;
    OSStatus PropertyData = 2003332927;
    LOBYTE(cf) = 0;
    char v10 = 0;
    sub_15EF88((uint64_t)&outData);
    goto LABEL_10;
  }
  LOBYTE(outData) = 0;
  char v16 = 0;
  OSStatus PropertyData = 2003329396;
  LOBYTE(cf) = 0;
  char v10 = 0;
  sub_15EF88((uint64_t)&outData);
  UInt32 ioDataSize = sub_26E94(inObjectID, &inAddress, 0, 0);
  if (!ioDataSize
    || (outData = 0,
        (OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData)) != 0))
  {
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = PropertyData;
  }
  int v5 = outData;
  uint64_t v13 = outData;
  sub_1707BC(&v12, &v13);
  char v10 = 1;
  CFTypeRef cf = v12;
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return sub_15EF88((uint64_t)&cf);
}

void sub_23A2CC(_Unwind_Exception *a1)
{
  sub_15EF88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23A2E0(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      int v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int16 v23 = "Device_USB_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 436;
      __int16 v26 = 2080;
      uint64_t v27 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v14 = (os_log_t *)sub_32A48(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      char v16 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      __int16 v23 = "Device_USB_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 437;
      __int16 v26 = 2080;
      uint64_t v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      CFTypeRef v31 = a4;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v17 = &off_6414D8;
    v17[2] = 561211770;
  }
  if (a2->mSelector == 1818446148 || a2->mSelector == 1835103844) {
    return 4;
  }

  return sub_433254(a1, a2, a3, a4);
}

BOOL sub_23A620(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v2 = 0;
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1818446147)
  {
    if (mSelector > 1936876402)
    {
      BOOL v4 = mSelector == 1936876403;
      int v5 = 2020898165;
    }
    else
    {
      BOOL v4 = mSelector == 1818446148;
      int v5 = 1835103844;
    }
    if (!v4 && mSelector != v5) {
      goto LABEL_18;
    }
    return v2;
  }
  if (mSelector == 1684304756 || mSelector == 1685287523)
  {
    AudioObjectPropertyScope mScope = a2->mScope;
    v10.int mSelector = 1936945763;
    v10.AudioObjectPropertyScope mScope = mScope;
    v10.AudioObjectPropertyElement mElement = 0;
    return sub_43356C(a1, &v10);
  }
  if (mSelector == 1685288051) {
    return v2;
  }
LABEL_18:

  return sub_43356C(a1, a2);
}

uint64_t sub_23A708(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1818446147)
  {
    if (mSelector == 1818446148 || mSelector == 1835103844) {
      return 1;
    }
    int v10 = 1936876403;
  }
  else
  {
    if (mSelector == 1684304756 || mSelector == 1685287523)
    {
      AudioObjectPropertyScope mScope = a2->mScope;
      AudioObjectPropertySelector v7 = 1936945763;
      goto LABEL_16;
    }
    int v10 = 1685288051;
  }
  if (mSelector != v10)
  {
    sub_50848((std::mutex *)a1);
    AudioObjectID v11 = *(_DWORD *)(a1 + 268);
    p_AudioObjectPropertyAddress inAddress = a2;
    return AudioObjectHasProperty(v11, p_inAddress) != 0;
  }
  AudioObjectPropertyScope mScope = a2->mScope;
  AudioObjectPropertySelector v7 = 1936941859;
LABEL_16:
  inAddress.int mSelector = v7;
  inAddress.AudioObjectPropertyScope mScope = mScope;
  inAddress.AudioObjectPropertyElement mElement = 0;
  sub_50848((std::mutex *)a1);
  AudioObjectID v11 = *(_DWORD *)(a1 + 268);
  p_AudioObjectPropertyAddress inAddress = &inAddress;
  return AudioObjectHasProperty(v11, p_inAddress) != 0;
}

void sub_23A7FC(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

void *sub_23A838(uint64_t a1, AudioObjectID a2, double a3)
{
  AudioObjectID v11 = a2;
  inAddress.int mSelector = 1836411236;
  *(double *)&inAddress.AudioObjectPropertyScope mScope = a3;
  float result = (void *)sub_CDE9C((uint64_t)&v6, &v11, &inAddress, 0, 0);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    *(void *)a1 = off_63E5A8;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = 1;
    return sub_49A90(&v7);
  }
  return result;
}

uint64_t sub_23A8D4(uint64_t a1, AudioObjectID a2, const __CFString *cf)
{
  if (!cf)
  {
    *(void *)cfa = 0;
LABEL_176:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(cf);
  sub_14E44(cfa, cf);
  if (!*(void *)cfa) {
    goto LABEL_176;
  }
  sub_20C54((uint64_t)&v91, *(const __CFString **)cfa);
  if (*(void *)cfa) {
    CFRelease(*(CFTypeRef *)cfa);
  }
  sub_23A124(&v87, a2, COERCE_DOUBLE(1735159650));
  sub_21C8C(&__str, ":");
  sub_23A838((uint64_t)v88, a2, COERCE_DOUBLE(1735159650));
  if ((_BYTE)v89)
  {
    CFTypeRef v6 = v88[1];
    if (v88[1]) {
      CFRetain(v88[1]);
    }
    sub_14E44(&v92, v6);
    if (!v92.__r_.__value_.__r.__words[0])
    {
      v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v82, "Could not construct");
    }
    sub_21C8C(__p, "");
    CFStringRef v7 = (const __CFString *)v92.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v85) < 0)
    {
      sub_21E8C(cfa, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)cfa = *(_OWORD *)__p;
      *(void *)&cfa[16] = v85;
    }
    if (v7 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v7)))
    {
      sub_65FBC((uint64_t)&v86, v7);
      if ((cfa[23] & 0x80000000) != 0) {
        operator delete(*(void **)cfa);
      }
    }
    else
    {
      std::string v86 = *(std::string *)cfa;
    }
    if (SHIBYTE(v85) < 0) {
      operator delete(__p[0]);
    }
    if (v92.__r_.__value_.__r.__words[0]) {
      CFRelease(v92.__r_.__value_.__l.__data_);
    }
    std::operator+<char>();
    char v9 = std::string::append((std::string *)cfa, ":", 1uLL);
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
    v92.__r_.__value_.__r.__words[0] = v9->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = v10;
    __str.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v11;
    if ((cfa[23] & 0x80000000) != 0) {
      operator delete(*(void **)cfa);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if ((_BYTE)v89) {
      sub_49A90(v88);
    }
  }
  CFNumberRef v12 = (const __CFNumber *)v87;
  if (v87) {
    CFRetain(v87);
  }
  sub_2440C((uint64_t)cfa);
  *(_DWORD *)&cfa[*(void *)(*(void *)&cfa[16] - 24) + 24] = *(_DWORD *)&cfa[*(void *)(*(void *)&cfa[16] - 24)
                                                                                + 24] & 0xFFFFFFB5 | 8;
  if (!v12)
  {
    v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v81, "Could not construct");
  }
  sub_7E85C(v12);
  std::ostream::operator<<();
  sub_246E4(&v92, (uint64_t)&cfa[24]);
  *(void *)&cfa[16] = v13;
  if (v97 < 0) {
    operator delete(v96);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  int v14 = std::string::insert(&v92, 0, ":", 1uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  char v16 = std::string::append(&v86, ":", 1uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t v89 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v88 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  CFRelease(v12);
  uint64_t v18 = &v91;
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::string::size_type size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string::size_type size = v91.__r_.__value_.__l.__size_;
    uint64_t v18 = (std::string *)v91.__r_.__value_.__r.__words[0];
  }
  CFTypeRef v20 = (CFTypeRef)HIBYTE(v89);
  char v21 = (CFTypeRef *)v88[0];
  if (v89 < 0) {
    CFTypeRef v20 = v88[1];
  }
  else {
    char v21 = v88;
  }
  AudioObjectID v22 = (unsigned __int8 *)v18 + size;
  if (size && v20)
  {
    __int16 v23 = v18;
    __int16 v24 = (std::string *)((char *)v18 + size);
    do
    {
      if (v23->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
      {
        uint64_t v25 = 1;
        while (v20 != (CFTypeRef)v25)
        {
          if ((unsigned __int8 *)((char *)v23 + v25) == v22) {
            goto LABEL_57;
          }
          int v26 = v23->__r_.__value_.__s.__data_[v25];
          int v27 = *((unsigned __int8 *)v21 + v25++);
          if (v26 != v27) {
            goto LABEL_48;
          }
        }
        __int16 v24 = v23;
      }
LABEL_48:
      __int16 v23 = (std::string *)((char *)v23 + 1);
    }
    while (v23 != (std::string *)v22);
  }
  else
  {
    __int16 v24 = (std::string *)((char *)v18 + size);
  }
LABEL_57:
  std::string::size_type v28 = (char *)v24 - (char *)v18;
  if (v24 != (std::string *)v22 || v20 == 0) {
    std::string::size_type v30 = v28;
  }
  else {
    std::string::size_type v30 = -1;
  }
  CFTypeRef v31 = (os_log_t *)sub_32A48(17);
  uint64_t v32 = *v31;
  if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v33 = &v91;
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v33 = (std::string *)v91.__r_.__value_.__r.__words[0];
    }
    int v34 = v88;
    if (v89 < 0) {
      int v34 = (CFTypeRef *)v88[0];
    }
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)cfa = 136316162;
    *(void *)&cfa[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&cfa[12] = 1024;
    *(_DWORD *)&cfa[14] = 262;
    *(_WORD *)&cfa[18] = 2080;
    *(void *)&cfa[20] = v33;
    *(_WORD *)&cfa[28] = 2080;
    *(void *)&cfa[30] = v34;
    __int16 v94 = 2080;
    v95 = p_str;
    _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d UID is %s will search for last occurrence of %s, and replace it with %s", cfa, 0x30u);
  }
  CFStringRef v36 = cf;
  if (v30 != -1)
  {
    if (v89 >= 0) {
      std::string::size_type v37 = HIBYTE(v89);
    }
    else {
      std::string::size_type v37 = (std::string::size_type)v88[1];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v38 = &__str;
    }
    else {
      int v38 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = __str.__r_.__value_.__l.__size_;
    }
    std::string::replace(&v91, v30, v37, (const std::string::value_type *)v38, v39);
    UInt32 v40 = (os_log_t *)sub_32A48(17);
    int v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v42 = &v91;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v42 = (std::string *)v91.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)cfa = 136315650;
      *(void *)&cfa[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&cfa[12] = 1024;
      *(_DWORD *)&cfa[14] = 269;
      *(_WORD *)&cfa[18] = 2080;
      *(void *)&cfa[20] = v42;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Updated USB UID is %s", cfa, 0x1Cu);
    }
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v43 = &v91;
    }
    else {
      BOOL v43 = (std::string *)v91.__r_.__value_.__r.__words[0];
    }
    if (v43)
    {
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v44 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v44 = v91.__r_.__value_.__l.__size_;
      }
      CFStringRef v36 = CFStringCreateWithBytes(0, (const UInt8 *)v43, v44, 0x8000100u, 0);
      if (!v36)
      {
        v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v45, "Could not construct");
      }
    }
    else
    {
      CFStringRef v36 = 0;
    }
  }
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  CFRelease(v12);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  sub_23A838((uint64_t)&v91, a2, COERCE_DOUBLE(1735159650));
  if (!v91.__r_.__value_.__s.__data_[16])
  {
    uint64_t v48 = 0;
    goto LABEL_160;
  }
  v46 = (const void *)v91.__r_.__value_.__l.__size_;
  if (v91.__r_.__value_.__l.__size_) {
    CFRetain((CFTypeRef)v91.__r_.__value_.__l.__size_);
  }
  sub_14E44(&v86, v46);
  if (!v86.__r_.__value_.__r.__words[0])
  {
    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
  }
  sub_21C8C(v88, "");
  CFStringRef v47 = (const __CFString *)v86.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v89) < 0)
  {
    sub_21E8C(cfa, (void *)v88[0], (unint64_t)v88[1]);
  }
  else
  {
    *(_OWORD *)cfa = *(_OWORD *)v88;
    *(void *)&cfa[16] = v89;
  }
  if (v47 && (CFTypeID v49 = CFStringGetTypeID(), v49 == CFGetTypeID(v47)))
  {
    sub_65FBC((uint64_t)&__str, v47);
    if ((cfa[23] & 0x80000000) != 0) {
      operator delete(*(void **)cfa);
    }
  }
  else
  {
    std::string __str = *(std::string *)cfa;
  }
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88[0]);
  }
  if (v86.__r_.__value_.__r.__words[0]) {
    CFRelease(v86.__r_.__value_.__l.__data_);
  }
  std::string::size_type v51 = __str.__r_.__value_.__l.__size_;
  uint64_t v50 = (std::string *)__str.__r_.__value_.__r.__words[0];
  int v52 = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::string::size_type v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string::size_type v53 = __str.__r_.__value_.__l.__size_;
    int v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (!v53) {
    goto LABEL_154;
  }
  v54 = (unsigned __int8 *)v52 + v53;
  __int16 v55 = v52;
  v56 = (std::string *)v54;
  do
  {
    uint64_t v57 = v55;
    v58 = (unsigned __int8 *)v55;
    while (1)
    {
      int v59 = *v58++;
      if (v59 == 58) {
        break;
      }
      uint64_t v57 = (std::string *)v58;
      if (v58 == v54)
      {
        uint64_t v57 = v56;
        goto LABEL_130;
      }
    }
    __int16 v55 = (std::string *)((char *)&v57->__r_.__value_.__l.__data_ + 1);
    v56 = v57;
  }
  while (v58 != v54);
LABEL_130:
  uint64_t v60 = (char *)v57 - (char *)v52;
  if (v57 == (std::string *)v54) {
    uint64_t v60 = -1;
  }
  std::string::size_type v61 = v60 + 1;
  if ((unint64_t)(v60 + 1) < 2) {
    goto LABEL_154;
  }
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (v60 != HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1)
    {
      uint64_t v50 = &__str;
      std::string::size_type v51 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      goto LABEL_137;
    }
LABEL_154:
    std::string::size_type v51 = 0;
LABEL_155:
    unint64_t v70 = 0;
    goto LABEL_156;
  }
  if (v60 == __str.__r_.__value_.__l.__size_ - 1) {
    goto LABEL_154;
  }
LABEL_137:
  if (v51 >= v60 - 1) {
    std::string::size_type v62 = v60 - 1;
  }
  else {
    std::string::size_type v62 = v51;
  }
  if (v51 - v62 > 1) {
    std::string::size_type v51 = v62 + 1;
  }
  if (!v51) {
    goto LABEL_155;
  }
  uint64_t v63 = (unsigned __int8 *)v50 + v51;
  v64 = v50;
  v65 = (std::string *)((char *)v50 + v51);
  do
  {
    uint64_t v66 = v64;
    uint64_t v67 = (unsigned __int8 *)v64;
    while (1)
    {
      int v68 = *v67++;
      if (v68 == 58) {
        break;
      }
      uint64_t v66 = (std::string *)v67;
      if (v67 == v63)
      {
        uint64_t v66 = v65;
        goto LABEL_149;
      }
    }
    v64 = (std::string *)((char *)&v66->__r_.__value_.__l.__data_ + 1);
    v65 = v66;
  }
  while (v67 != v63);
LABEL_149:
  std::string::size_type v51 = 0;
  if (v66 == (std::string *)v63)
  {
    unint64_t v70 = 0;
    goto LABEL_156;
  }
  int64_t v69 = (char *)v66 - (char *)v50;
  unint64_t v70 = 0;
  if (v69 != -1)
  {
    unint64_t v71 = v69 - v60;
    if (v69 - v60 < 0) {
      unint64_t v71 = v60 - v69;
    }
    if (v71 >= 2)
    {
      std::string::basic_string((std::string *)cfa, &__str, v69 + 1, v60 - 1, (std::allocator<char> *)&v86);
      unsigned int v78 = std::stoul((const std::string *)cfa, 0, 16);
      if ((cfa[23] & 0x80000000) != 0) {
        operator delete(*(void **)cfa);
      }
      std::string::basic_string((std::string *)cfa, &__str, v61, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v86);
      unint64_t v79 = std::stoul((const std::string *)cfa, 0, 16);
      if ((cfa[23] & 0x80000000) != 0) {
        operator delete(*(void **)cfa);
      }
      unint64_t v70 = v79 << 32;
      std::string::size_type v51 = v78;
      goto LABEL_156;
    }
    goto LABEL_154;
  }
LABEL_156:
  uint64_t v48 = v70 | v51;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v91.__r_.__value_.__s.__data_[16]) {
    sub_49A90(&v91);
  }
LABEL_160:
  sub_433710(a1, a2, cf, v36, v48);
  *(void *)a1 = &off_6281D0;
  *(_WORD *)(a1 + 492) = 0;
  *(unsigned char *)(a1 + 494) = 0;
  BOOL v72 = sub_2355A0(a1);
  AudioObjectID v73 = *(_DWORD *)(a1 + 268);
  if (v72)
  {
    strcpy(cfa, "#mtsptuo");
    cfa[9] = 0;
    *(_WORD *)&cfa[10] = 0;
    LODWORD(v91.__r_.__value_.__l.__data_) = 0;
    AudioObjectGetPropertyDataSize(v73, (const AudioObjectPropertyAddress *)cfa, 0, 0, (UInt32 *)&v91);
    BOOL v74 = LODWORD(v91.__r_.__value_.__l.__data_) == 0;
    if (LODWORD(v91.__r_.__value_.__l.__data_)) {
      unsigned int v75 = 1869968496;
    }
    else {
      unsigned int v75 = 1768845428;
    }
    int v76 = 1;
    goto LABEL_167;
  }
  strcpy(cfa, "#mtsptuo");
  cfa[9] = 0;
  *(_WORD *)&cfa[10] = 0;
  LODWORD(v91.__r_.__value_.__l.__data_) = 0;
  AudioObjectGetPropertyDataSize(v73, (const AudioObjectPropertyAddress *)cfa, 0, 0, (UInt32 *)&v91);
  if (LODWORD(v91.__r_.__value_.__l.__data_))
  {
    int v76 = 0;
    BOOL v74 = 0;
    unsigned int v75 = 1869968496;
LABEL_167:
    sub_436AD8(a1, v76, v75, v74);
  }
  return a1;
}

void sub_23B4F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, CFTypeRef cf, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,CFTypeRef a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2)
  {
    if (a36 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x23B224);
  }
  _Unwind_Resume(a1);
}

void sub_23B86C(uint64_t a1, unsigned int a2)
{
  sub_21C8C(__p, "");
  sub_23B8E4(a1, a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23B8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23B8E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CFBundleRef bundle = CFBundleGetBundleWithIdentifier(@"com.apple.audio.CoreAudio.VirtualAudio");
  char v31 = 0;
  if (!bundle)
  {
    __int16 v23 = (os_log_t *)sub_32A48(13);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Localization.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 29;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CFBundleGetBundleWithIdentifier() returned NULL.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CFBundleGetBundleWithIdentifier() returned NULL.");
  }
  sub_2417C(&v32, a2);
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    CFStringRef v7 = (const std::string::value_type *)a3;
  }
  else {
    CFStringRef v7 = *(const std::string::value_type **)a3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a3 + 8);
  }
  char v9 = std::string::insert(&v32, 0, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)&buf[16] = *((void *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (buf[23] >= 0) {
    char v11 = buf;
  }
  else {
    char v11 = *(const char **)buf;
  }
  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x600u);
  CFStringRef key = v12;
  char v29 = 1;
  if (!v12 || !CFStringGetLength(v12))
  {
    long long v17 = (os_log_t *)sub_32A48(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v32.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Localization.cpp";
      WORD2(v32.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = 34;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CFStringCreateWithCString() returned NULL for our key\"", (uint8_t *)&v32, 0x12u);
    }
    AudioObjectID v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v19, "CFStringCreateWithCString() returned NULL for our key");
  }
  CFStringRef v13 = CFBundleCopyLocalizedString(bundle, key, 0, @"Localizable");
  CFStringRef theString1 = v13;
  unsigned __int8 v27 = 1;
  if (!v13 || !CFStringGetLength(v13))
  {
    CFTypeRef v20 = (os_log_t *)sub_32A48(13);
    char v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v32.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Localization.cpp";
      WORD2(v32.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = 38;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CFBundleCopyLocalizedString returned NULL.\"", (uint8_t *)&v32, 0x12u);
    }
    AudioObjectID v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "CFBundleCopyLocalizedString returned NULL.");
  }
  if (CFStringCompare(theString1, key, 0))
  {
    CFStringRef v14 = theString1;
    *(void *)a1 = theString1;
    int v15 = v27;
    *(unsigned char *)(a1 + 8) = v27;
    if (v15 && v14) {
      CFRetain(v14);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  sub_72924((uint64_t)&theString1);
  sub_72924((uint64_t)&key);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  return sub_23BD2C((uint64_t)&bundle);
}

void sub_23BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_23BD2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23BD2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
  }
  return a1;
}

void sub_23BD6C(void *a1, unsigned int a2)
{
  sub_21C8C(__p, "specific-");
  sub_23B8E4((uint64_t)a1, a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (!*a1)
  {
    sub_23B86C((uint64_t)__p, a2);
    sub_8B9E0((uint64_t)a1, (uint64_t)__p);
    sub_72924((uint64_t)__p);
  }
}

void sub_23BDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_72924((uint64_t)&__p);
  sub_72924(v15);
  _Unwind_Resume(a1);
}

void sub_23BE2C(uint64_t a1)
{
  uint64_t v1 = sub_32A48(11);
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v2 = *(NSObject **)v1;
    if (*(void *)v1)
    {
      if (os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 505;
        HIWORD(buf[4]) = 2048;
        *(void *)&buf[5] = a1;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager[%p]::UpdateState()", (uint8_t *)buf, 0x1Cu);
      }
    }
  }
  uint64_t v3 = pthread_self();
  if (pthread_equal(v3, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
  {
    BOOL v4 = (os_log_t *)sub_32A48(13);
    char v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 508;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Mutex is held during state update. This should not happen.\"", (uint8_t *)buf, 0x12u);
      }
    }
  }
  v224[0] = 0;
  v224[1] = 0;
  v223 = v224;
  int v222 = 0;
  CFArrayRef theArray = (CFArrayRef)IAPAudioCopyDeviceStates();
  LOWORD(v215) = 1;
  uint64_t v6 = sub_32A48(11);
  if (*(unsigned char *)(v6 + 8))
  {
    CFStringRef v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int Count = (int)theArray;
        if (theArray) {
          int Count = CFArrayGetCount(theArray);
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 81;
        HIWORD(buf[4]) = 1024;
        buf[5] = Count;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d iapd IAPAudioCopyDeviceStates() dictionary contains %u items.", (uint8_t *)buf, 0x18u);
      }
    }
  }
  unsigned int v9 = 0;
  uint64_t v221 = 0;
  v219 = (uint64_t *)&v220;
  v220 = 0;
  v207 = (const void *)IAPAudioTransportUSBAudioStateKey;
  v209 = (const void *)IAPAudioTransportLineoutStateKey;
  v212 = (const void *)IAPAudioTransportNameKey;
  while (1)
  {
    unsigned int v10 = theArray;
    if (theArray) {
      unsigned int v10 = CFArrayGetCount(theArray);
    }
    if (v9 >= v10) {
      break;
    }
    CFDictionaryRef v217 = 0;
    if ((sub_1D1C44(&theArray, v9, &v217) & 1) == 0)
    {
      v198 = (os_log_t *)sub_32A48(13);
      v199 = *v198;
      if (*v198 && os_log_type_enabled(*v198, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 88;
        _os_log_impl(&def_1E50E8, v199, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"IAPAudioGetDeviceStates() returned a CFArray item that is not a CFDictionaryRef.\"", (uint8_t *)buf, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "IAPAudioGetDeviceStates() returned a CFArray item that is not a CFDictionaryRef.");
    }
    CFDictionaryRef v11 = v217;
    CFDictionaryRef v227 = v217;
    __int16 v228 = 0;
    uint64_t v12 = sub_32A48(11);
    if (*(unsigned char *)(v12 + 8))
    {
      CFStringRef v13 = *(NSObject **)v12;
      if (*(void *)v12)
      {
        if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
        {
          CFIndex v14 = CFDictionaryGetCount(v11);
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 90;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = v14;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d iapd state dictionary contains %ld items.", (uint8_t *)buf, 0x1Cu);
        }
      }
    }
    LODWORD(v229) = -1;
    if ((sub_1D4800(v227, v212, &v229) & 1) == 0)
    {
      v201 = (os_log_t *)sub_32A48(13);
      v202 = *v201;
      if (*v201 && os_log_type_enabled(*v201, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 70;
        _os_log_impl(&def_1E50E8, v202, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"IAPAudioGetDeviceStates() returned a CFDictionaryRef item that does not contain key IAPAudioTransportNameKey.\"", (uint8_t *)buf, 0x12u);
      }
      v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v203, "IAPAudioGetDeviceStates() returned a CFDictionaryRef item that does not contain key IAPAudioTransportNameKey.");
LABEL_411:
    }
    if (v229 >= 2)
    {
      v204 = (os_log_t *)sub_32A48(13);
      v205 = *v204;
      if (*v204 && os_log_type_enabled(*v204, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 71;
        HIWORD(buf[4]) = 1024;
        buf[5] = v229;
        _os_log_impl(&def_1E50E8, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"IAPAudioGetDeviceStates() returned a CFDictionaryRef item with an invalid value for IAPAudioTransportNameKey: %d.\"", (uint8_t *)buf, 0x18u);
      }
      v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v203, "IAPAudioGetDeviceStates() returned a CFDictionaryRef item with an invalid value for IAPAudioTransportNameKey: %d.");
      goto LABEL_411;
    }
    uint64_t v15 = sub_32A48(11);
    if (*(unsigned char *)(v15 + 8))
    {
      char v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 72;
          HIWORD(buf[4]) = 1024;
          buf[5] = v229;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current transport is: %d.", (uint8_t *)buf, 0x18u);
        }
      }
    }
    int v17 = (int)v229;
    v230 = 0;
    uint64_t v231 = 0;
    v229 = (CFArrayRef *)&v230;
    int v226 = 0;
    sub_1D4800(v227, v209, &v226);
    if ((v226 & 2) != 0)
    {
      LODWORD(v18) = 2;
      HIDWORD(v18) = v226;
      sub_23DD0C((uint64_t *)&v229, 2, v18);
      uint64_t v19 = sub_32A48(11);
      if (*(unsigned char *)(v19 + 8))
      {
        CFTypeRef v20 = *(NSObject **)v19;
        if (*(void *)v19)
        {
          if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315906;
            *(void *)&buf[1] = "IAPManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 100;
            HIWORD(buf[4]) = 1024;
            buf[5] = v226;
            LOWORD(buf[6]) = 1024;
            *(_DWORD *)((char *)&buf[6] + 2) = v17;
            _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added line-out to DeviceStateMap with state %d for transport %u.", (uint8_t *)buf, 0x1Eu);
          }
        }
      }
    }
    int v225 = 0;
    sub_1D4800(v227, v207, &v225);
    if ((v225 & 2) != 0)
    {
      LODWORD(v21) = 4;
      HIDWORD(v21) = v225;
      sub_23DD0C((uint64_t *)&v229, 4, v21);
      uint64_t v22 = sub_32A48(11);
      if (*(unsigned char *)(v22 + 8))
      {
        __int16 v23 = *(NSObject **)v22;
        if (*(void *)v22)
        {
          if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315906;
            *(void *)&buf[1] = "IAPManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 108;
            HIWORD(buf[4]) = 1024;
            buf[5] = v225;
            LOWORD(buf[6]) = 1024;
            *(_DWORD *)((char *)&buf[6] + 2) = v17;
            _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added USB to DeviceStateMap with state %d for transport %u.", (uint8_t *)buf, 0x1Eu);
          }
        }
      }
    }
    if (v231)
    {
      buf[0] = v17;
      *(void *)&uint8_t buf[4] = 0;
      *(void *)&buf[6] = 0;
      *(void *)&buf[2] = &buf[4];
      __int16 v24 = (uint64_t *)v229;
      if (v229 == (CFArrayRef *)&v230)
      {
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        while (1)
        {
          unsigned __int8 v27 = &buf[4];
          if (*(_DWORD **)&buf[2] == &buf[4]) {
            goto LABEL_49;
          }
          std::string::size_type v28 = v25;
          char v29 = &buf[4];
          if (v25)
          {
            do
            {
              unsigned __int8 v27 = v28;
              std::string::size_type v28 = (_DWORD *)*((void *)v28 + 1);
            }
            while (v28);
          }
          else
          {
            do
            {
              unsigned __int8 v27 = (_DWORD *)*((void *)v29 + 2);
              BOOL v70 = *(void *)v27 == (void)v29;
              char v29 = v27;
            }
            while (v70);
          }
          int v30 = *((_DWORD *)v24 + 7);
          if (v27[7] < v30)
          {
LABEL_49:
            char v31 = v25 ? v27 : &buf[4];
            std::string v32 = v25 ? v27 + 2 : &buf[4];
          }
          else
          {
            char v31 = &buf[4];
            std::string v32 = &buf[4];
            if (v25)
            {
              CFStringRef v36 = v25;
              std::string v32 = &buf[4];
              while (1)
              {
                while (1)
                {
                  char v31 = v36;
                  int v37 = v36[7];
                  if (v30 >= v37) {
                    break;
                  }
                  CFStringRef v36 = *(_DWORD **)v31;
                  std::string v32 = v31;
                  if (!*(void *)v31) {
                    goto LABEL_56;
                  }
                }
                if (v37 >= v30) {
                  break;
                }
                std::string v32 = v31 + 2;
                CFStringRef v36 = (_DWORD *)*((void *)v31 + 1);
                if (!v36) {
                  goto LABEL_56;
                }
              }
            }
          }
          if (!*(void *)v32)
          {
LABEL_56:
            __int16 v33 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v33 + 28) = *(uint64_t *)((char *)v24 + 28);
            *__int16 v33 = 0;
            v33[1] = 0;
            v33[2] = (uint64_t)v31;
            *(void *)std::string v32 = v33;
            if (**(void **)&buf[2])
            {
              *(void *)&buf[2] = **(void **)&buf[2];
              __int16 v33 = *(uint64_t **)v32;
            }
            sub_46D00(*(uint64_t **)&buf[4], v33);
            uint64_t v26 = ++*(void *)&buf[6];
          }
          int v34 = (uint64_t *)v24[1];
          if (v34)
          {
            do
            {
              char v35 = (uint64_t **)v34;
              int v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              char v35 = (uint64_t **)v24[2];
              BOOL v70 = *v35 == v24;
              __int16 v24 = (uint64_t *)v35;
            }
            while (!v70);
          }
          if (v35 == &v230) {
            break;
          }
          uint64_t v25 = *(_DWORD **)&buf[4];
          __int16 v24 = (uint64_t *)v35;
        }
      }
      int v38 = v220;
      std::string::size_type v39 = &v220;
      UInt32 v40 = &v220;
      if (v220)
      {
        while (1)
        {
          while (1)
          {
            UInt32 v40 = (uint64_t **)v38;
            int v41 = *((_DWORD *)v38 + 8);
            if (buf[0] >= v41) {
              break;
            }
            int v38 = *v40;
            std::string::size_type v39 = v40;
            if (!*v40) {
              goto LABEL_82;
            }
          }
          if (v41 >= buf[0]) {
            break;
          }
          int v38 = v40[1];
          if (!v38)
          {
            std::string::size_type v39 = v40 + 1;
            goto LABEL_82;
          }
        }
      }
      else
      {
LABEL_82:
        __int16 v42 = (uint64_t *)operator new(0x40uLL);
        BOOL v43 = v42;
        int v44 = buf[0];
        uint64_t v46 = *(void *)&buf[2];
        uint64_t v45 = *(void *)&buf[4];
        v42[6] = *(void *)&buf[4];
        CFStringRef v47 = (char *)(v42 + 6);
        *((_DWORD *)v42 + 8) = v44;
        v42[5] = v46;
        v42[7] = v26;
        if (v26)
        {
          *(void *)(v45 + 16) = v47;
          *(void *)&buf[2] = &buf[4];
          *(void *)&uint8_t buf[4] = 0;
          *(void *)&buf[6] = 0;
        }
        else
        {
          v42[5] = (uint64_t)v47;
        }
        *__int16 v42 = 0;
        v42[1] = 0;
        v42[2] = (uint64_t)v40;
        AudioObjectPropertyAddress *v39 = v42;
        if (*v219)
        {
          v219 = (uint64_t *)*v219;
          BOOL v43 = *v39;
        }
        sub_46D00(v220, v43);
        ++v221;
      }
      sub_463E0(*(void **)&buf[4]);
      uint64_t v48 = sub_32A48(11);
      if (*(unsigned char *)(v48 + 8))
      {
        CFTypeID v49 = *(NSObject **)v48;
        if (*(void *)v48)
        {
          if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315906;
            *(void *)&buf[1] = "IAPManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 114;
            HIWORD(buf[4]) = 2048;
            *(void *)&buf[5] = v231;
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = v17;
            _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added DeviceStateMap with %lu items for transport %u.", (uint8_t *)buf, 0x22u);
          }
        }
      }
    }
    sub_463E0(v230);
    sub_80594((uint64_t)&v227);
    ++v9;
  }
  sub_3D61C((uint64_t)&theArray);
  if (v219 == (uint64_t *)&v220) {
    int v50 = 0;
  }
  else {
    int v50 = *((_DWORD *)v219 + 8);
  }
  std::string::size_type v51 = (os_log_t *)sub_32A48(11);
  int v52 = *v51;
  if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315650;
    *(void *)&buf[1] = "IAPManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 517;
    HIWORD(buf[4]) = 1024;
    buf[5] = v50;
    _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current transport is %d.", (uint8_t *)buf, 0x18u);
  }
  if (v50)
  {
    v54 = v219 + 6;
    uint64_t v53 = v219[6];
    if (!v53) {
      goto LABEL_110;
    }
    __int16 v55 = v219 + 6;
    do
    {
      int v56 = *(_DWORD *)(v53 + 28);
      BOOL v57 = v56 < 2;
      if (v56 >= 2) {
        v58 = (uint64_t *)v53;
      }
      else {
        v58 = (uint64_t *)(v53 + 8);
      }
      if (!v57) {
        __int16 v55 = (uint64_t *)v53;
      }
      uint64_t v53 = *v58;
    }
    while (*v58);
    if (v55 != v54 && *((int *)v55 + 7) <= 2) {
      unsigned int v59 = *((_DWORD *)v55 + 8);
    }
    else {
LABEL_110:
    }
      unsigned int v59 = 0;
    uint64_t v60 = (os_log_t *)sub_32A48(11);
    std::string::size_type v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 526;
      HIWORD(buf[4]) = 1024;
      buf[5] = v59;
      LOWORD(buf[6]) = 1024;
      *(_DWORD *)((char *)&buf[6] + 2) = (v59 & 2) >> 1;
      _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Line-out state = %u, connected = %d", (uint8_t *)buf, 0x1Eu);
    }
    if ((v59 & 2) != 0)
    {
      sub_178A88((uint64_t *)&v223, 1819176821, 1819176821);
      IAPAudioGetVolumeForTransport();
    }
    uint64_t v62 = *v54;
    if (!*v54) {
      goto LABEL_126;
    }
    uint64_t v63 = v54;
    do
    {
      int v64 = *(_DWORD *)(v62 + 28);
      BOOL v65 = v64 < 4;
      if (v64 >= 4) {
        uint64_t v66 = (uint64_t *)v62;
      }
      else {
        uint64_t v66 = (uint64_t *)(v62 + 8);
      }
      if (!v65) {
        uint64_t v63 = (uint64_t *)v62;
      }
      uint64_t v62 = *v66;
    }
    while (*v66);
    if (v63 != v54 && *((int *)v63 + 7) <= 4) {
      int v67 = *((_DWORD *)v63 + 8);
    }
    else {
LABEL_126:
    }
      int v67 = 0;
    int v68 = (os_log_t *)sub_32A48(11);
    int64_t v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 536;
      HIWORD(buf[4]) = 1024;
      buf[5] = v67;
      LOWORD(buf[6]) = 1024;
      *(_DWORD *)((char *)&buf[6] + 2) = (v67 & 2) >> 1;
      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d USB audio state = %u, connected = %d", (uint8_t *)buf, 0x1Eu);
    }
    if ((v67 & 2) != 0) {
      sub_178A88((uint64_t *)&v223, 1684500341, 1684500341);
    }
    LOBYTE(buf[0]) = 0;
    BOOL v70 = IAPAudioIsVolumeControlSupportedForTransport() == 1 && LOBYTE(buf[0]) == 1;
    int v71 = v70;
    int v213 = v71;
    BOOL v72 = *(NSObject **)sub_32A48(11);
    int v208 = (v59 >> 1) & 1;
    if (v72 && os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 544;
      HIWORD(buf[4]) = 1024;
      buf[5] = v213;
      _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d Accessory supports volume control = %u", (uint8_t *)buf, 0x18u);
    }
  }
  else
  {
    int v208 = 0;
    int v213 = 0;
  }
  CFDictionaryRef v217 = (const __CFDictionary *)a1;
  char v218 = 0;
  char v218 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  p_CFArrayRef theArray = &theArray;
  v215 = 0;
  uint64_t v216 = 0;
  BOOL v74 = (uint64_t **)(a1 + 96);
  unsigned int v75 = *(uint64_t **)(a1 + 96);
  CFArrayRef theArray = (CFArrayRef)&v215;
  int v76 = (uint64_t *)(a1 + 104);
  uint64_t v77 = (uint64_t)v223;
  v229 = &theArray;
  v230 = (uint64_t *)&v215;
  int v210 = v50;
  if (v75 == (uint64_t *)(a1 + 104))
  {
    std::string v86 = (uint64_t *)&v215;
LABEL_164:
    sub_23E200((uint64_t)buf, (void *)v77, v224, (uint64_t)p_theArray, (uint64_t)v86);
  }
  else
  {
    while ((void **)v77 != v224)
    {
      int v78 = *((_DWORD *)v75 + 7);
      int v79 = *(_DWORD *)(v77 + 28);
      if (v78 >= v79)
      {
        if (v79 >= v78)
        {
          v82 = (uint64_t *)v75[1];
          v83 = v75;
          if (v82)
          {
            do
            {
              unsigned int v75 = v82;
              v82 = (uint64_t *)*v82;
            }
            while (v82);
          }
          else
          {
            do
            {
              unsigned int v75 = (uint64_t *)v83[2];
              BOOL v70 = *v75 == (void)v83;
              v83 = v75;
            }
            while (!v70);
          }
        }
        else
        {
          sub_14CE28((uint64_t)&v229, v79);
        }
        v84 = *(void **)(v77 + 8);
        if (v84)
        {
          do
          {
            uint64_t v77 = (uint64_t)v84;
            v84 = (void *)*v84;
          }
          while (v84);
        }
        else
        {
          do
          {
            uint64_t v85 = v77;
            uint64_t v77 = *(void *)(v77 + 16);
          }
          while (*(void *)v77 != v85);
        }
      }
      else
      {
        sub_14CE28((uint64_t)&v229, *((_DWORD *)v75 + 7));
        int v80 = (uint64_t *)v75[1];
        if (v80)
        {
          do
          {
            unsigned int v75 = v80;
            int v80 = (uint64_t *)*v80;
          }
          while (v80);
        }
        else
        {
          do
          {
            v81 = v75;
            unsigned int v75 = (uint64_t *)v75[2];
          }
          while ((uint64_t *)*v75 != v81);
        }
      }
      if (v75 == v76)
      {
        p_CFArrayRef theArray = v229;
        std::string v86 = v230;
        goto LABEL_164;
      }
    }
    sub_23E200((uint64_t)buf, v75, (void *)(a1 + 104), (uint64_t)v229, (uint64_t)v230);
  }
  CFArrayRef v87 = theArray;
  if (theArray != (CFArrayRef)&v215)
  {
    do
    {
      signed int v88 = *((_DWORD *)v87 + 7);
      int64_t v89 = (os_log_t *)sub_32A48(11);
      v90 = *v89;
      if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&v229, v88);
        std::string v91 = (void **)&v229;
        if (v231 < 0) {
          std::string v91 = (void **)v229;
        }
        std::string v92 = v224[0];
        if (!v224[0]) {
          goto LABEL_181;
        }
        v93 = v224;
        do
        {
          __int16 v94 = v92;
          v95 = v93;
          signed int v96 = *((_DWORD *)v92 + 7);
          if (v96 >= v88) {
            v93 = (void **)v92;
          }
          else {
            ++v92;
          }
          std::string v92 = (void *)*v92;
        }
        while (v92);
        if (v93 == v224) {
          goto LABEL_181;
        }
        if (v96 < v88) {
          __int16 v94 = v95;
        }
        if (v88 < *((_DWORD *)v94 + 7)) {
LABEL_181:
        }
          v93 = v224;
        BOOL v70 = v93 == v224;
        buf[0] = 136315906;
        char v97 = "";
        if (v70) {
          char v97 = "dis";
        }
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 556;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v91;
        LOWORD(buf[7]) = 2080;
        *(void *)((char *)&buf[7] + 2) = v97;
        _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d iAP reports that port type %s was %sconnected.", (uint8_t *)buf, 0x26u);
        if (SHIBYTE(v231) < 0) {
          operator delete(v229);
        }
      }
      v98 = (void *)*((void *)v87 + 1);
      if (v98)
      {
        do
        {
          v99 = (CFArrayRef *)v98;
          v98 = (void *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (CFArrayRef *)*((void *)v87 + 2);
          BOOL v70 = *v99 == v87;
          CFArrayRef v87 = (CFArrayRef)v99;
        }
        while (!v70);
      }
      CFArrayRef v87 = (CFArrayRef)v99;
    }
    while (v99 != (CFArrayRef *)&v215);
  }
  if (!v216 && *(unsigned __int8 *)(a1 + 120) == v213)
  {
    v100 = (os_log_t *)sub_32A48(11);
    v101 = *v100;
    if (*v100)
    {
      if (os_log_type_enabled(*v100, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 557;
        _os_log_impl(&def_1E50E8, v101, OS_LOG_TYPE_DEBUG, "%25s:%-5d Redundant iAP notification", (uint8_t *)buf, 0x12u);
      }
    }
  }
  *(_DWORD *)(a1 + 88) = v210;
  if (v74 != (uint64_t **)&v223)
  {
    v102 = v223;
    if (*(void *)(a1 + 112))
    {
      v103 = *v74;
      *BOOL v74 = v76;
      *(void *)(*v76 + 16) = 0;
      *int v76 = 0;
      *(void *)(a1 + 112) = 0;
      if (v103[1]) {
        uint64_t v104 = v103[1];
      }
      else {
        uint64_t v104 = (uint64_t)v103;
      }
      if (v104)
      {
        v105 = sub_6CA9C(v104);
        if (v102 == v224)
        {
          v107 = (void *)v104;
          v102 = v224;
        }
        else
        {
          v106 = v102;
          do
          {
            v107 = v105;
            int v108 = *((_DWORD *)v106 + 7);
            *(_DWORD *)(v104 + 28) = v108;
            uint64_t v109 = *v76;
            v110 = (uint64_t **)(a1 + 104);
            v111 = (uint64_t **)(a1 + 104);
            if (*v76)
            {
              do
              {
                while (1)
                {
                  v110 = (uint64_t **)v109;
                  if (v108 >= *(_DWORD *)(v109 + 28)) {
                    break;
                  }
                  uint64_t v109 = *(void *)v109;
                  v111 = v110;
                  if (!*v110) {
                    goto LABEL_211;
                  }
                }
                uint64_t v109 = *(void *)(v109 + 8);
              }
              while (v109);
              v111 = v110 + 1;
            }
LABEL_211:
            sub_46CA8(v74, (uint64_t)v110, v111, (uint64_t *)v104);
            if (v105) {
              v105 = sub_6CA9C((uint64_t)v105);
            }
            else {
              v105 = 0;
            }
            v112 = v106[1];
            if (v112)
            {
              do
              {
                v102 = (void **)v112;
                v112 = (void *)*v112;
              }
              while (v112);
            }
            else
            {
              do
              {
                v102 = (void **)v106[2];
                BOOL v70 = *v102 == v106;
                v106 = v102;
              }
              while (!v70);
            }
            if (!v107) {
              break;
            }
            uint64_t v104 = (uint64_t)v107;
            v106 = v102;
          }
          while (v102 != v224);
        }
        sub_463E0(v107);
        if (v105)
        {
          for (i = (void *)v105[2]; i; i = (void *)i[2])
            v105 = i;
          sub_463E0(v105);
        }
      }
      else
      {
        sub_463E0(0);
      }
    }
    if (v102 != v224)
    {
      do
      {
        v114 = (uint64_t *)operator new(0x20uLL);
        int v115 = *((_DWORD *)v102 + 7);
        *((_DWORD *)v114 + 7) = v115;
        uint64_t v116 = *v76;
        v117 = (uint64_t **)(a1 + 104);
        v118 = (uint64_t **)(a1 + 104);
        if (*v76)
        {
          do
          {
            while (1)
            {
              v117 = (uint64_t **)v116;
              if (v115 >= *(_DWORD *)(v116 + 28)) {
                break;
              }
              uint64_t v116 = *(void *)v116;
              v118 = v117;
              if (!*v117) {
                goto LABEL_237;
              }
            }
            uint64_t v116 = *(void *)(v116 + 8);
          }
          while (v116);
          v118 = v117 + 1;
        }
LABEL_237:
        sub_46CA8(v74, (uint64_t)v117, v118, v114);
        v119 = v102[1];
        if (v119)
        {
          do
          {
            v120 = (void **)v119;
            v119 = (void *)*v119;
          }
          while (v119);
        }
        else
        {
          do
          {
            v120 = (void **)v102[2];
            BOOL v70 = *v120 == v102;
            v102 = v120;
          }
          while (!v70);
        }
        v102 = v120;
      }
      while (v120 != v224);
    }
  }
  int v211 = *(unsigned __int8 *)(a1 + 120);
  *(unsigned char *)(a1 + 120) = v213;
  if (v208)
  {
    v121 = *v74;
    if (*v74 == v76) {
      goto LABEL_254;
    }
    while (*((_DWORD *)v121 + 7) != 1819176821)
    {
      v122 = (uint64_t *)v121[1];
      if (v122)
      {
        do
        {
          v123 = v122;
          v122 = (uint64_t *)*v122;
        }
        while (v122);
      }
      else
      {
        do
        {
          v123 = (uint64_t *)v121[2];
          BOOL v70 = *v123 == (void)v121;
          v121 = v123;
        }
        while (!v70);
      }
      v121 = v123;
      if (v123 == v76) {
        goto LABEL_254;
      }
    }
    if (v76 == v121) {
LABEL_254:
    }
      *(_DWORD *)(a1 + 124) = v222;
  }
  if (v216)
  {
    uint64_t v124 = sub_32A48(11);
    if (*(unsigned char *)(v124 + 8))
    {
      v125 = *(NSObject **)v124;
      if (*(void *)v124)
      {
        if (os_log_type_enabled(*(os_log_t *)v124, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315906;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 588;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          LOWORD(buf[7]) = 2048;
          *(void *)((char *)&buf[7] + 2) = &theArray;
          _os_log_impl(&def_1E50E8, v125, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager[%p]::NotifyConnectionListeners(changedPorts %p)", (uint8_t *)buf, 0x26u);
        }
      }
    }
    v126 = pthread_self();
    if (!pthread_equal(v126, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
    {
      v172 = (os_log_t *)sub_32A48(13);
      v173 = *v172;
      if (*v172)
      {
        if (os_log_type_enabled(*v172, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 592;
          _os_log_impl(&def_1E50E8, v173, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"called while mutex is not held by the current thread.\"", (uint8_t *)buf, 0x12u);
        }
      }
    }
    if (v216 && *(void *)(a1 + 152))
    {
      CFArrayRef v127 = theArray;
      if (theArray != (CFArrayRef)&v215)
      {
        do
        {
          v128 = (os_log_t *)sub_32A48(11);
          v129 = *v128;
          if (*v128 && os_log_type_enabled(*v128, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(&v229, *((_DWORD *)v127 + 7));
            int v130 = SHIBYTE(v231);
            v131 = (void **)v229;
            BOOL v132 = sub_23DF48((void *)a1, *((_DWORD *)v127 + 7));
            buf[0] = 136315906;
            v133 = (void **)&v229;
            if (v130 < 0) {
              v133 = v131;
            }
            *(void *)&buf[1] = "IAPManager.cpp";
            v134 = "disconnected";
            if (v132) {
              v134 = "connected";
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 598;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v133;
            LOWORD(buf[7]) = 2080;
            *(void *)((char *)&buf[7] + 2) = v134;
            _os_log_impl(&def_1E50E8, v129, OS_LOG_TYPE_DEBUG, "%25s:%-5d iAP Port (type '%s') was %s", (uint8_t *)buf, 0x26u);
            if (SHIBYTE(v231) < 0) {
              operator delete(v229);
            }
          }
          v135 = (void *)*((void *)v127 + 1);
          if (v135)
          {
            do
            {
              v136 = (CFArrayRef *)v135;
              v135 = (void *)*v135;
            }
            while (v135);
          }
          else
          {
            do
            {
              v136 = (CFArrayRef *)*((void *)v127 + 2);
              BOOL v70 = *v136 == v127;
              CFArrayRef v127 = (CFArrayRef)v136;
            }
            while (!v70);
          }
          CFArrayRef v127 = (CFArrayRef)v136;
        }
        while (v136 != (CFArrayRef *)&v215);
      }
      sub_23DDC4((uint64_t)buf, (void *)(a1 + 136));
      sub_523D8(&v229, a1);
      CFArrayRef v137 = theArray;
      if (theArray != (CFArrayRef)&v215)
      {
        do
        {
          v138 = *(_DWORD **)buf;
          if (*(_DWORD **)buf != &buf[2])
          {
            do
            {
              (*((void (**)(void, void))v138 + 4))(*((unsigned int *)v137 + 7), *((void *)v138 + 5));
              v139 = (void *)*((void *)v138 + 1);
              if (v139)
              {
                do
                {
                  v140 = v139;
                  v139 = (void *)*v139;
                }
                while (v139);
              }
              else
              {
                do
                {
                  v140 = (_DWORD *)*((void *)v138 + 2);
                  BOOL v70 = *(void *)v140 == (void)v138;
                  v138 = v140;
                }
                while (!v70);
              }
              v138 = v140;
            }
            while (v140 != &buf[2]);
          }
          v141 = (void *)*((void *)v137 + 1);
          if (v141)
          {
            do
            {
              v142 = (CFArrayRef *)v141;
              v141 = (void *)*v141;
            }
            while (v141);
          }
          else
          {
            do
            {
              v142 = (CFArrayRef *)*((void *)v137 + 2);
              BOOL v70 = *v142 == v137;
              CFArrayRef v137 = (CFArrayRef)v142;
            }
            while (!v70);
          }
          CFArrayRef v137 = (CFArrayRef)v142;
        }
        while (v142 != (CFArrayRef *)&v215);
      }
      sub_52380(&v229);
      sub_463E0(*(void **)&buf[2]);
    }
    uint64_t v143 = sub_32A48(11);
    if (*(unsigned char *)(v143 + 8))
    {
      v144 = *(NSObject **)v143;
      if (*(void *)v143)
      {
        if (os_log_type_enabled(*(os_log_t *)v143, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315906;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 614;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          LOWORD(buf[7]) = 2048;
          *(void *)((char *)&buf[7] + 2) = &theArray;
          _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager[%p]::NotifyConnectionListeners(changedPorts %p)", (uint8_t *)buf, 0x26u);
        }
      }
    }
  }
  if (v211 != v213)
  {
    uint64_t v145 = sub_32A48(11);
    uint64_t v146 = sub_32A48(38);
    char v147 = 0;
    uint64_t v148 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v149 = *(void *)(v145 + 8);
    while (1)
    {
      uint64_t v150 = (int)buf[v148];
      char v151 = v147;
      if (((v149 & v150) != 0) != ((*(void *)(v146 + 8) & v150) != 0)) {
        break;
      }
      char v147 = 1;
      uint64_t v148 = 1;
      if (v151) {
        goto LABEL_304;
      }
    }
    if ((v149 & v150) == 0) {
      uint64_t v145 = v146;
    }
LABEL_304:
    v152 = *(NSObject **)v145;
    if (v152 && os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
    {
      int v153 = *(unsigned __int8 *)(a1 + 120);
      buf[0] = 136315650;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 578;
      HIWORD(buf[4]) = 1024;
      buf[5] = v153;
      _os_log_impl(&def_1E50E8, v152, OS_LOG_TYPE_DEBUG, "%25s:%-5d Volume control support state changed to %u. Updated cache and will notify listeners.", (uint8_t *)buf, 0x18u);
    }
    uint64_t v154 = sub_32A48(11);
    if (*(unsigned char *)(v154 + 8))
    {
      v155 = *(NSObject **)v154;
      if (*(void *)v154)
      {
        if (os_log_type_enabled(*(os_log_t *)v154, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 620;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          _os_log_impl(&def_1E50E8, v155, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager[%p]::VolumeControlSupport()", (uint8_t *)buf, 0x1Cu);
        }
      }
    }
    v156 = pthread_self();
    if (!pthread_equal(v156, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
    {
      v196 = (os_log_t *)sub_32A48(13);
      v197 = *v196;
      if (*v196)
      {
        if (os_log_type_enabled(*v196, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 624;
          _os_log_impl(&def_1E50E8, v197, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"called while mutex is not held by the current thread.\"", (uint8_t *)buf, 0x12u);
        }
      }
    }
    if (*(void *)(a1 + 112) && *(void *)(a1 + 176))
    {
      *(void *)&buf[2] = 0;
      *(void *)&uint8_t buf[4] = 0;
      *(void *)buf = &buf[2];
      v157 = *(uint64_t **)(a1 + 96);
      if (v157 != v76)
      {
        do
        {
          sub_14CC60((uint64_t **)buf, (uint64_t *)&buf[2], *((_DWORD *)v157 + 7), *((_DWORD *)v157 + 7));
          v158 = (uint64_t *)v157[1];
          if (v158)
          {
            do
            {
              v159 = v158;
              v158 = (uint64_t *)*v158;
            }
            while (v158);
          }
          else
          {
            do
            {
              v159 = (uint64_t *)v157[2];
              BOOL v70 = *v159 == (void)v157;
              v157 = v159;
            }
            while (!v70);
          }
          v157 = v159;
        }
        while (v159 != v76);
      }
      v230 = 0;
      uint64_t v231 = 0;
      v229 = (CFArrayRef *)&v230;
      v160 = *(void **)(a1 + 160);
      if (v160 != (void *)(a1 + 168))
      {
        do
        {
          v161 = v230;
          v162 = &v230;
          if (v229 == (CFArrayRef *)&v230) {
            goto LABEL_328;
          }
          v163 = v230;
          v164 = &v230;
          if (v230)
          {
            do
            {
              v162 = (uint64_t **)v163;
              v163 = (uint64_t *)v163[1];
            }
            while (v163);
          }
          else
          {
            do
            {
              v162 = (uint64_t **)v164[2];
              BOOL v70 = *v162 == (uint64_t *)v164;
              v164 = v162;
            }
            while (v70);
          }
          int v165 = *((_DWORD *)v160 + 8);
          if (*((_DWORD *)v162 + 8) < v165)
          {
LABEL_328:
            if (v230) {
              v166 = v162;
            }
            else {
              v166 = &v230;
            }
            if (v230) {
              v167 = v162 + 1;
            }
            else {
              v167 = &v230;
            }
          }
          else
          {
            v166 = &v230;
            v167 = &v230;
            if (v230)
            {
              v167 = &v230;
              while (1)
              {
                while (1)
                {
                  v166 = (uint64_t **)v161;
                  int v171 = *((_DWORD *)v161 + 8);
                  if (v165 >= v171) {
                    break;
                  }
                  v161 = *v166;
                  v167 = v166;
                  if (!*v166) {
                    goto LABEL_335;
                  }
                }
                if (v171 >= v165) {
                  break;
                }
                v167 = v166 + 1;
                v161 = v166[1];
                if (!v161) {
                  goto LABEL_335;
                }
              }
            }
          }
          if (!*v167)
          {
LABEL_335:
            v168 = operator new(0x40uLL);
            v168[8] = *((_DWORD *)v160 + 8);
            sub_23DDC4((uint64_t)(v168 + 10), v160 + 5);
            *(void *)v168 = 0;
            *((void *)v168 + 1) = 0;
            *((void *)v168 + 2) = v166;
            *v167 = (uint64_t *)v168;
            if (*v229)
            {
              v229 = (CFArrayRef *)*v229;
              v168 = *v167;
            }
            sub_46D00(v230, (uint64_t *)v168);
            ++v231;
          }
          v169 = (void *)v160[1];
          if (v169)
          {
            do
            {
              v170 = v169;
              v169 = (void *)*v169;
            }
            while (v169);
          }
          else
          {
            do
            {
              v170 = (void *)v160[2];
              BOOL v70 = *v170 == (void)v160;
              v160 = v170;
            }
            while (!v70);
          }
          v160 = v170;
        }
        while (v170 != (void *)(a1 + 168));
      }
      sub_523D8(&v227, a1);
      v174 = *(_DWORD **)buf;
      if (*(_DWORD **)buf != &buf[2])
      {
        do
        {
          v175 = v230;
          if (v230)
          {
            int v176 = v174[7];
            v177 = &v230;
            do
            {
              v178 = v175;
              v179 = v177;
              int v180 = *((_DWORD *)v175 + 8);
              v181 = (uint64_t **)(v175 + 1);
              if (v180 >= v176)
              {
                v181 = (uint64_t **)v178;
                v177 = (uint64_t **)v178;
              }
              v175 = *v181;
            }
            while (v175);
            if (v177 != &v230)
            {
              v182 = v180 >= v176 ? v178 : (uint64_t *)v179;
              if (v176 >= *((_DWORD *)v182 + 8))
              {
                BOOL v183 = v180 < v176;
                v184 = v180 >= v176 ? v178 : (uint64_t *)v179;
                v185 = (void *)v184[5];
                v186 = v178 + 6;
                uint64_t v187 = v183 ? (uint64_t)(v179 + 6) : (uint64_t)v186;
                if (v185 != (void *)v187)
                {
                  do
                  {
                    ((void (*)(void, void))v185[4])(v174[7], v185[5]);
                    v188 = (void *)v185[1];
                    if (v188)
                    {
                      do
                      {
                        v189 = v188;
                        v188 = (void *)*v188;
                      }
                      while (v188);
                    }
                    else
                    {
                      do
                      {
                        v189 = (void *)v185[2];
                        BOOL v70 = *v189 == (void)v185;
                        v185 = v189;
                      }
                      while (!v70);
                    }
                    v185 = v189;
                  }
                  while (v189 != (void *)v187);
                }
              }
            }
          }
          v190 = (void *)*((void *)v174 + 1);
          if (v190)
          {
            do
            {
              v191 = v190;
              v190 = (void *)*v190;
            }
            while (v190);
          }
          else
          {
            do
            {
              v191 = (_DWORD *)*((void *)v174 + 2);
              BOOL v70 = *(void *)v191 == (void)v174;
              v174 = v191;
            }
            while (!v70);
          }
          v174 = v191;
        }
        while (v191 != &buf[2]);
      }
      sub_52380(&v227);
      sub_FCC40(v230);
      sub_463E0(*(void **)&buf[2]);
    }
    uint64_t v192 = sub_32A48(11);
    if (*(unsigned char *)(v192 + 8))
    {
      v193 = *(NSObject **)v192;
      if (*(void *)v192)
      {
        if (os_log_type_enabled(*(os_log_t *)v192, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 647;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          _os_log_impl(&def_1E50E8, v193, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager[%p]::VolumeControlSupport()", (uint8_t *)buf, 0x1Cu);
        }
      }
    }
  }
  uint64_t v194 = sub_32A48(11);
  if (*(unsigned char *)(v194 + 8))
  {
    v195 = *(NSObject **)v194;
    if (*(void *)v194)
    {
      if (os_log_type_enabled(*(os_log_t *)v194, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 582;
        HIWORD(buf[4]) = 2048;
        *(void *)&buf[5] = a1;
        _os_log_impl(&def_1E50E8, v195, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager[%p]::UpdateState()", (uint8_t *)buf, 0x1Cu);
      }
    }
  }
  sub_463E0(v215);
  sub_3BCAC(&v217);
  sub_FCC40(v220);
  sub_463E0(v224[0]);
}

void sub_23DB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

uint64_t *sub_23DD0C(uint64_t *result, int a2, double a3)
{
  BOOL v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  char v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        CFStringRef v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        char v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      char v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    CFStringRef v7 = (uint64_t **)(result + 1);
LABEL_9:
    unsigned int v9 = (char *)operator new(0x28uLL);
    *(double *)(v9 + 28) = a3;
    return sub_46CA8(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t sub_23DDC4(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  BOOL v4 = a2 + 1;
  char v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = v5 + 4;
      CFStringRef v7 = *(uint64_t **)(a1 + 8);
      int v8 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      unsigned int v9 = *(void **)(a1 + 8);
      unsigned int v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = v9;
          unsigned int v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          int v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          unsigned int v10 = v8;
        }
        while (v11);
      }
      unint64_t v12 = *v6;
      if (v8[4] < *v6)
      {
LABEL_8:
        if (v7) {
          CFStringRef v13 = (uint64_t **)v8;
        }
        else {
          CFStringRef v13 = (uint64_t **)v3;
        }
        if (v7) {
          CFIndex v14 = (uint64_t **)(v8 + 1);
        }
        else {
          CFIndex v14 = (uint64_t **)v3;
        }
      }
      else
      {
        CFStringRef v13 = (uint64_t **)v3;
        CFIndex v14 = (uint64_t **)v3;
        if (v7)
        {
          CFIndex v14 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              CFStringRef v13 = (uint64_t **)v7;
              unint64_t v18 = v7[4];
              if (v12 >= v18) {
                break;
              }
              CFStringRef v7 = *v13;
              CFIndex v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }
            if (v18 >= v12) {
              break;
            }
            CFIndex v14 = v13 + 1;
            CFStringRef v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_15:
        uint64_t v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_46CA8((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }
      char v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          char v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          char v5 = v17;
        }
        while (!v11);
      }
      char v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_23DF34(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

BOOL sub_23DF48(void *a1, unsigned int a2)
{
  uint64_t v19 = a1;
  char v20 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v4 = sub_32A48(11);
  if (*(unsigned char *)(v4 + 8))
  {
    char v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, a2);
        uint64_t v6 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        uint64_t v22 = "IAPManager.cpp";
        __int16 v23 = 1024;
        int v24 = 217;
        __int16 v25 = 2048;
        uint64_t v26 = a1;
        __int16 v27 = 2080;
        std::string::size_type v28 = v6;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager[%p]::IsPortConnected(portType '%s')", buf, 0x26u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  CFStringRef v7 = (void *)a1[12];
  int v8 = a1 + 13;
  if (v7 != a1 + 13)
  {
    while (*((_DWORD *)v7 + 7) != a2)
    {
      unsigned int v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = v9;
          unsigned int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unsigned int v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          CFStringRef v7 = v10;
        }
        while (!v11);
      }
      CFStringRef v7 = v10;
      if (v10 == v8)
      {
        CFStringRef v7 = a1 + 13;
        break;
      }
    }
  }
  uint64_t v12 = sub_32A48(11);
  if (*(unsigned char *)(v12 + 8))
  {
    CFStringRef v13 = *(NSObject **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, a2);
        if (v18 >= 0) {
          CFIndex v14 = __p;
        }
        else {
          CFIndex v14 = (void **)__p[0];
        }
        uint64_t v15 = "false";
        uint64_t v22 = "IAPManager.cpp";
        __int16 v23 = 1024;
        *(_DWORD *)buf = 136316162;
        if (v7 != v8) {
          uint64_t v15 = "true";
        }
        int v24 = 224;
        __int16 v25 = 2048;
        uint64_t v26 = a1;
        __int16 v27 = 2080;
        std::string::size_type v28 = v14;
        __int16 v29 = 2080;
        int v30 = v15;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManagerIAPManager[%p]::SetIAPUpdateListener(portType '%s') returns %s", buf, 0x30u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_3BCAC(&v19);
  return v7 != v8;
}

void sub_23E1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

double sub_23E200(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  char v5 = a2;
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      sub_14CE28((uint64_t)&v12, *((_DWORD *)v5 + 7));
      int v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          char v5 = v9;
        }
        while (!v10);
      }
      char v5 = v9;
    }
    while (v9 != a3);
    char v5 = a3;
  }
  *(void *)a1 = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 8) = v12;
  return result;
}

void sub_23E298(uint64_t a1)
{
  uint64_t v2 = sub_32A48(11);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)char v16 = 136315650;
        *(void *)&v16[4] = "IAPManager.cpp";
        __int16 v17 = 1024;
        int v18 = 479;
        __int16 v19 = 2048;
        uint64_t v20 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager::IAPVolumeControlSupportChangeListener(context %p)", v16, 0x1Cu);
      }
    }
  }
  uint64_t v4 = sub_32A48(11);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)char v16 = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v16[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_11;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_11:
  BOOL v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)char v16 = 136315394;
    *(void *)&v16[4] = "IAPManager.cpp";
    __int16 v17 = 1024;
    int v18 = 481;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Received callback from iapd for volume control support changed.", v16, 0x12u);
  }
  if (!a1)
  {
    CFIndex v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)char v16 = 136315394;
        *(void *)&v16[4] = "IAPManager.cpp";
        __int16 v17 = 1024;
        int v18 = 483;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"iAP passed context as NULL.\"", v16, 0x12u);
      }
    }
  }
  sub_23E538(a1);
  uint64_t v12 = sub_32A48(11);
  if (*(unsigned char *)(v12 + 8))
  {
    CFStringRef v13 = *(NSObject **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)char v16 = 136315650;
        *(void *)&v16[4] = "IAPManager.cpp";
        __int16 v17 = 1024;
        int v18 = 488;
        __int16 v19 = 2048;
        uint64_t v20 = a1;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager::IAPVolumeControlSupportChangeListener(context %p)", v16, 0x1Cu);
      }
    }
  }
}

void sub_23E538(uint64_t a1)
{
  uint64_t v2 = sub_32A48(11);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 494;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager[%p]::HandleIAPStateChange()", buf, 0x1Cu);
      }
    }
  }
  uint64_t v7 = a1;
  uint64_t v4 = sub_13910();
  if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
  {
    sub_23BE2C(a1);
  }
  else
  {
    uint64_t v8 = &v7;
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_23E97C;
    *(void *)&unsigned char buf[24] = &unk_6283E0;
    char v10 = &v8;
    dispatch_sync(v4, buf);
  }
  uint64_t v5 = sub_32A48(11);
  if (*(unsigned char *)(v5 + 8))
  {
    char v6 = *(NSObject **)v5;
    if (*(void *)v5)
    {
      if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 500;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = a1;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager[%p]::HandleIAPStateChange()", buf, 0x1Cu);
      }
    }
  }
}

void sub_23E724(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    __int16 v17 = __cxa_begin_catch(a1);
    int v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      double v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    int v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v25 = v24;
      uint64_t v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        double v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      __int16 v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        double v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x23E674);
}

void sub_23E97C(uint64_t a1)
{
}

void sub_23E9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    char v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    uint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      int v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x23E9B4);
}

void sub_23EC3C(uint64_t a1)
{
  uint64_t v2 = sub_32A48(11);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        BOOL v11 = "IAPManager.cpp";
        __int16 v12 = 1024;
        int v13 = 464;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager::IAPStateChangeListener(context %p)", (uint8_t *)&v10, 0x1Cu);
      }
    }
  }
  uint64_t v4 = (os_log_t *)sub_32A48(11);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315394;
    BOOL v11 = "IAPManager.cpp";
    __int16 v12 = 1024;
    int v13 = 466;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d IAP executed the callback registered with IAPAudioRegisterDeviceStateChangedCallback().", (uint8_t *)&v10, 0x12u);
  }
  if (!a1)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        BOOL v11 = "IAPManager.cpp";
        __int16 v12 = 1024;
        int v13 = 468;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"iAP passed context as NULL.\"", (uint8_t *)&v10, 0x12u);
      }
    }
  }
  sub_23E538(a1);
  uint64_t v6 = sub_32A48(11);
  if (*(unsigned char *)(v6 + 8))
  {
    uint64_t v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        BOOL v11 = "IAPManager.cpp";
        __int16 v12 = 1024;
        int v13 = 473;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager::IAPStateChangeListener(context %p)", (uint8_t *)&v10, 0x1Cu);
      }
    }
  }
}

uint64_t sub_23EE78()
{
  uint64_t result = qword_64E3D8;
  if (!qword_64E3D8)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "IAPManager.cpp";
        __int16 v6 = 1024;
        int v7 = 158;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [sIAPManager is NULL]: \"sIAPManager is NULL!\"", (uint8_t *)&v4, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sIAPManager is NULL!");
  }
  return result;
}

void sub_23EF7C(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_23EF98(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  if (!a2)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      os_log_t v17 = "IAPManager.cpp";
      __int16 v18 = 1024;
      int v19 = 244;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: \"inProc is NULL.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inProc is NULL.");
  }
  __int16 v14 = a1;
  uint64_t v5 = a1 + 17;
  char v15 = ((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
  v6.n128_u64[0] = a2;
  v6.n128_u64[1] = a3;
  if ((sub_23F1E0(v5, a2, v6) & 1) == 0)
  {
    BOOL v11 = (os_log_t *)sub_32A48(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      os_log_t v17 = "IAPManager.cpp";
      __int16 v18 = 1024;
      int v19 = 249;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to add a listener for which the proc has already been added.\"", buf, 0x12u);
    }
    int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Attempt to add a listener for which the proc has already been added.");
  }
  return sub_3BCAC(&v14);
}

void sub_23F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_23F1E0(uint64_t **a1, unint64_t a2, __n128 a3)
{
  uint64_t v5 = a1 + 1;
  int v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        __n128 v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= a2) {
          break;
        }
        int v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        return 0;
      }
      int v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    __n128 v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = (__n128 *)operator new(0x30uLL);
    v8[2] = a3;
    sub_46CA8(a1, (uint64_t)v6, v5, (uint64_t *)v8);
    return 1;
  }
}

unsigned char *sub_23F288(uint64_t **a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    __n128 v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v14 = "IAPManager.cpp";
      __int16 v15 = 1024;
      int v16 = 255;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: \"inProc is NULL.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inProc is NULL.");
  }
  BOOL v11 = a1;
  uint64_t v3 = a1 + 17;
  char v12 = ((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
  if (!sub_23F4B8(v3, a2))
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v14 = "IAPManager.cpp";
      __int16 v15 = 1024;
      int v16 = 260;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to remove a listener that does not exist in mPortConnectionListenerMap.\"", buf, 0x12u);
    }
    int v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v10, "Attempt to remove a listener that does not exist in mPortConnectionListenerMap.");
  }
  return sub_3BCAC(&v11);
}

void sub_23F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t *sub_23F4B8(uint64_t **a1, unint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 1);
  uint64_t result = a1[1];
  if (result)
  {
    uint64_t v5 = v4;
    __n128 v6 = result;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      __n128 v6 = *v9;
    }
    while (*v9);
    if (v5 == v4 || v5[4] > a2)
    {
      return 0;
    }
    else
    {
      int v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        char v12 = v5;
        do
        {
          BOOL v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          char v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_89144(result, v5);
      operator delete(v5);
      return (void *)(&def_1E50E8 + 1);
    }
  }
  return result;
}

unsigned char *sub_23F584(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  if (!a3)
  {
    char v31 = (os_log_t *)sub_32A48(13);
    std::string v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)std::string::size_type v39 = "IAPManager.cpp";
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = 266;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: \"inProc is NULL.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inProc is NULL.");
  }
  uint64_t v36 = a1;
  char v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v9 = (uint64_t **)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 168);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v10 = a1 + 168;
  do
  {
    int v11 = *(_DWORD *)(v8 + 32);
    BOOL v12 = v11 < a2;
    if (v11 >= a2) {
      BOOL v13 = (uint64_t *)v8;
    }
    else {
      BOOL v13 = (uint64_t *)(v8 + 8);
    }
    if (!v12) {
      uint64_t v10 = v8;
    }
    uint64_t v8 = *v13;
  }
  while (*v13);
  if ((uint64_t **)v10 != v9 && *(_DWORD *)(v10 + 32) <= a2)
  {
    v27.n128_u64[0] = a3;
    v27.n128_u64[1] = a4;
    if ((sub_23F1E0((uint64_t **)(v10 + 40), a3, v27) & 1) == 0)
    {
      os_log_t v28 = (os_log_t *)sub_32A48(13);
      __int16 v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)std::string::size_type v39 = "IAPManager.cpp";
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)&v39[10] = 274;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to add a listener for which the proc has already been added.\"", buf, 0x12u);
      }
      os_log_t v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v30, "Attempt to add a listener for which the proc has already been added.");
    }
  }
  else
  {
LABEL_12:
    v35[0] = 0;
    v35[1] = 0;
    int v34 = (uint64_t *)v35;
    v14.n128_u64[0] = a3;
    v14.n128_u64[1] = a4;
    sub_23F1E0(&v34, a3, v14);
    *(_DWORD *)buf = a2;
    sub_23DDC4((uint64_t)&v39[4], &v34);
    __int16 v15 = *v9;
    int v16 = (uint64_t **)(a1 + 168);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          int v16 = (uint64_t **)v15;
          int v17 = *((_DWORD *)v15 + 8);
          if (*(int *)buf >= v17) {
            break;
          }
          __int16 v15 = *v16;
          uint64_t v9 = v16;
          if (!*v16) {
            goto LABEL_19;
          }
        }
        if (v17 >= *(int *)buf) {
          break;
        }
        __int16 v15 = v16[1];
        if (!v15)
        {
          uint64_t v9 = v16 + 1;
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      __int16 v18 = (uint64_t *)operator new(0x40uLL);
      int v19 = v18;
      int v20 = *(_DWORD *)buf;
      uint64_t v22 = *(void *)&v39[4];
      uint64_t v21 = *(void *)&v39[12];
      v18[6] = *(void *)&v39[12];
      uint32_t v23 = (char *)(v18 + 6);
      *((_DWORD *)v18 + 8) = v20;
      v18[5] = v22;
      uint64_t v24 = v40;
      v18[7] = v40;
      if (v24)
      {
        *(void *)(v21 + 16) = v23;
        *(void *)&v39[4] = &v39[12];
        *(void *)&v39[12] = 0;
        uint64_t v40 = 0;
      }
      else
      {
        v18[5] = (uint64_t)v23;
      }
      uint64_t *v18 = 0;
      v18[1] = 0;
      v18[2] = (uint64_t)v16;
      NSObject *v9 = v18;
      uint64_t v25 = **(void **)(a1 + 160);
      if (v25)
      {
        *(void *)(a1 + 160) = v25;
        int v19 = *v9;
      }
      sub_46D00(*(uint64_t **)(a1 + 168), v19);
      ++*(void *)(a1 + 176);
    }
    sub_463E0(*(void **)&v39[12]);
    sub_463E0(v35[0]);
  }
  return sub_3BCAC(&v36);
}

void sub_23F8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_23F948(void *a1, int a2, unint64_t a3)
{
  if (!a3)
  {
    int v17 = (os_log_t *)sub_32A48(13);
    __int16 v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = "IAPManager.cpp";
      __int16 v27 = 1024;
      int v28 = 287;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: \"inProc is NULL.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inProc is NULL.");
  }
  uint32_t v23 = a1;
  char v24 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v8 = a1[21];
  unint64_t v7 = a1 + 21;
  uint64_t v6 = v8;
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = v7;
  do
  {
    int v10 = *(_DWORD *)(v6 + 32);
    BOOL v11 = v10 < a2;
    if (v10 >= a2) {
      BOOL v12 = (uint64_t *)v6;
    }
    else {
      BOOL v12 = (uint64_t *)(v6 + 8);
    }
    if (!v11) {
      uint64_t v9 = (void *)v6;
    }
    uint64_t v6 = *v12;
  }
  while (*v12);
  if (v9 == v7 || *((_DWORD *)v9 + 8) > a2)
  {
LABEL_14:
    __n128 v14 = (os_log_t *)sub_32A48(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = "IAPManager.cpp";
      __int16 v27 = 1024;
      int v28 = 292;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to remove a listener for an IAPPortType that has never received a listener.\"", buf, 0x12u);
    }
    int v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Attempt to remove a listener for an IAPPortType that has never received a listener.");
  }
  if (!sub_23F4B8((uint64_t **)v9 + 5, a3))
  {
    int v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = "IAPManager.cpp";
      __int16 v27 = 1024;
      int v28 = 294;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to remove a listener that does not exist in mVolumeSupportListenerMap.\"", buf, 0x12u);
    }
    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Attempt to remove a listener that does not exist in mVolumeSupportListenerMap.");
  }
  return sub_3BCAC(&v23);
}

void sub_23FC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_23FC74(uint64_t a1)
{
  uint64_t v2 = sub_32A48(11);
  uint64_t v3 = sub_32A48(38);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)BOOL v12 = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&v12[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_7;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  uint64_t v9 = *(NSObject **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(unsigned __int8 *)(a1 + 120);
    *(_DWORD *)BOOL v12 = 136315650;
    *(void *)&v12[4] = "IAPManager.cpp";
    __int16 v13 = 1024;
    int v14 = 320;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get volume control support value of %u. Value is cached -- did not call iapd.", v12, 0x18u);
  }
  return *(unsigned __int8 *)(a1 + 120);
}

float sub_23FDA8(float *a1)
{
  uint64_t v2 = sub_32A48(11);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        __int16 v21 = 1024;
        int v22 = 327;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager::GetVolume()", buf, 0x12u);
      }
    }
  }
  __int16 v18 = a1;
  char v19 = (*(uint64_t (**)(float *))(*(void *)a1 + 16))(a1);
  uint64_t v4 = sub_32A48(11);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_11;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_11:
  BOOL v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    double v12 = a1[31];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "IAPManager.cpp";
    __int16 v21 = 1024;
    int v22 = 331;
    __int16 v23 = 2048;
    double v24 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get volume value of %f (cached).", buf, 0x1Cu);
  }
  uint64_t v13 = sub_32A48(11);
  if (*(unsigned char *)(v13 + 8))
  {
    int v14 = *(NSObject **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        double v15 = a1[31];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        __int16 v21 = 1024;
        int v22 = 333;
        __int16 v23 = 2048;
        double v24 = v15;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager::GetVolume() returned %f", buf, 0x1Cu);
      }
    }
  }
  float v16 = a1[31];
  sub_3BCAC(&v18);
  return v16;
}

void sub_240028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

unsigned char *sub_240048(uint64_t a1, float a2)
{
  uint64_t v4 = sub_32A48(11);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        __int16 v32 = 1024;
        int v33 = 341;
        __int16 v34 = 2048;
        double v35 = a2;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager::SetVolume(inVolume: %f)", buf, 0x1Cu);
      }
    }
  }
  if (sub_2404BC((unsigned __int8 *)a1))
  {
    uint64_t v6 = sub_32A48(11);
    uint64_t v7 = sub_32A48(38);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_16;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_16:
    __int16 v21 = *(NSObject **)v6;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "IAPManager.cpp";
      __int16 v32 = 1024;
      int v33 = 351;
      __int16 v34 = 2048;
      double v35 = a2;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring call to set volume value of %f on iapd (muted).", buf, 0x1Cu);
    }
  }
  else
  {
    int v13 = IAPAudioSetVolumeForTransport();
    uint64_t v14 = sub_32A48(11);
    uint64_t v15 = sub_32A48(38);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20) {
        goto LABEL_21;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_21:
    int v22 = *(NSObject **)v14;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "IAPManager.cpp";
      __int16 v32 = 1024;
      int v33 = 346;
      __int16 v34 = 2048;
      double v35 = a2;
      __int16 v36 = 1024;
      int v37 = v13;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set volume value of %f on iapd (status: %u).", buf, 0x22u);
    }
    if (v13 != 1)
    {
      uint64_t v26 = (os_log_t *)sub_32A48(13);
      __int16 v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        __int16 v32 = 1024;
        int v33 = 347;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"IAPAudioSetVolumeForTransport() returned FALSE.\"", buf, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "IAPAudioSetVolumeForTransport() returned FALSE.");
    }
  }
  uint64_t v29 = a1;
  char v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  *(float *)(a1 + 124) = a2;
  uint64_t v23 = sub_32A48(11);
  if (*(unsigned char *)(v23 + 8))
  {
    double v24 = *(NSObject **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        __int16 v32 = 1024;
        int v33 = 357;
        __int16 v34 = 2048;
        double v35 = a2;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager::SetVolume(inVolume: %f)", buf, 0x1Cu);
      }
    }
  }
  return sub_3BCAC(&v29);
}

void sub_240490(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2404BC(unsigned __int8 *a1)
{
  int v13 = a1;
  char v14 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16))(a1);
  uint64_t v2 = sub_32A48(11);
  uint64_t v3 = sub_32A48(38);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_7;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  uint64_t v9 = *(NSObject **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v10 = a1[128];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "IAPManager.cpp";
    __int16 v16 = 1024;
    int v17 = 365;
    __int16 v18 = 1024;
    int v19 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get mute value of %u (cached).", buf, 0x18u);
  }
  uint64_t v11 = a1[128];
  sub_3BCAC(&v13);
  return v11;
}

void sub_240628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_24063C(uint64_t a1, int a2)
{
  if (sub_2404BC((unsigned __int8 *)a1) == a2)
  {
    uint64_t v13 = sub_32A48(11);
    uint64_t v14 = sub_32A48(38);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)int v22 = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&v22[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v19) {
        goto LABEL_20;
      }
    }
    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_20:
    __int16 v21 = *(NSObject **)v13;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v22 = 136315394;
      *(void *)&v22[4] = "IAPManager.cpp";
      __int16 v23 = 1024;
      int v24 = 384;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring call to set mute (cached value identical to parameter value).", v22, 0x12u);
    }
  }
  else
  {
    float v4 = 0.0;
    if ((a2 & 1) == 0) {
      float v4 = sub_23FDA8((float *)a1);
    }
    int v5 = IAPAudioSetVolumeForTransport();
    uint64_t v6 = sub_32A48(11);
    uint64_t v7 = sub_32A48(38);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)int v22 = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&v22[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_14;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_14:
    char v20 = *(NSObject **)v6;
    if (v20)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v22 = 136316162;
        *(void *)&v22[4] = "IAPManager.cpp";
        __int16 v23 = 1024;
        int v24 = 377;
        __int16 v25 = 1024;
        int v26 = a2;
        __int16 v27 = 2048;
        double v28 = v4;
        __int16 v29 = 1024;
        int v30 = v5;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set mute value of %u. Set volume value of %f on iapd (status: %u).", v22, 0x28u);
      }
    }
    *(void *)int v22 = a1;
    v22[8] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    *(unsigned char *)(a1 + 128) = a2;
    sub_3BCAC(v22);
  }
}

BOOL sub_2408D4(int a1)
{
  uint64_t v2 = sub_32A48(11);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        uint64_t v9 = "IAPManager.cpp";
        __int16 v10 = 1024;
        int v11 = 391;
        __int16 v12 = 1024;
        int v13 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d +- IAPManager::SetSampleRateForUSB(inSampleRate: %u)", (uint8_t *)&v8, 0x18u);
      }
    }
  }
  int v4 = IAPDigitalAudioSetSampleRate();
  int v5 = (os_log_t *)sub_32A48(11);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315906;
    uint64_t v9 = "IAPManager.cpp";
    __int16 v10 = 1024;
    int v11 = 394;
    __int16 v12 = 1024;
    int v13 = a1;
    __int16 v14 = 1024;
    int v15 = v4;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d IAPDigitalAudioSetSampleRate(%u) returned status %u.", (uint8_t *)&v8, 0x1Eu);
  }
  return v4 == 1;
}

uint64_t sub_240A3C(uint64_t a1)
{
  uint64_t v2 = sub_32A48(11);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        char v19 = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 411;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d +- IAPManager::GetSupportedSampleRatesForUSB()", buf, 0x12u);
      }
    }
  }
  int v4 = (os_log_t *)sub_32A48(11);
  int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    char v19 = "IAPManager.cpp";
    __int16 v20 = 1024;
    int v21 = 413;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling IAPDigitalAudioCopySupportSampleRates().", buf, 0x12u);
  }
  CFArrayRef v6 = (const __CFArray *)IAPDigitalAudioCopySupportSampleRates();
  CFArrayRef v16 = v6;
  __int16 v17 = 1;
  if (!v6 || (int Count = CFArrayGetCount(v6)) == 0)
  {
LABEL_16:
    __int16 v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        char v19 = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 435;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to find a sample rate!\"", buf, 0x12u);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find a sample rate!");
  }
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  do
  {
    *(_DWORD *)buf = 0;
    sub_1D1B30(&v16, v8, buf);
    if (*(_DWORD *)buf == 44100)
    {
      unsigned int v9 = 44100;
      goto LABEL_21;
    }
    if (v9 <= *(_DWORD *)buf) {
      unsigned int v9 = *(_DWORD *)buf;
    }
    ++v8;
  }
  while (Count != v8);
  if (!v9) {
    goto LABEL_16;
  }
LABEL_21:
  int v13 = (os_log_t *)sub_32A48(11);
  __int16 v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    char v19 = "IAPManager.cpp";
    __int16 v20 = 1024;
    int v21 = 436;
    __int16 v22 = 1024;
    unsigned int v23 = v9;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning sample rate: %u", buf, 0x18u);
  }
  *(void *)a1 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  *(_WORD *)(a1 + 8) = 257;
  sub_451D0(a1, v9);
  return sub_3D61C((uint64_t)&v16);
}

void sub_240D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_3D61C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_240D84(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_240DB0(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = HIDWORD(a2);
  if (sub_1056F4(a1 + 24, SHIDWORD(a2)))
  {
    sub_24F2E4();
    int v5 = (&def_1E50E8 + 1);
    if (v2 > 1668313714)
    {
      if (v2 > 1668576376)
      {
        if (v2 != 1668576377 && v2 != 1668703084) {
          return (uint64_t)v5;
        }
        goto LABEL_39;
      }
      if (v2 == 1668313715)
      {
LABEL_23:
        if ((int)v4 > 1919776354)
        {
          if ((int)v4 > 1987081832)
          {
            if (v4 == 1987081833) {
              goto LABEL_39;
            }
            unsigned __int16 v13 = 30319;
          }
          else
          {
            if (v4 == 1919776355) {
              goto LABEL_39;
            }
            unsigned __int16 v13 = 26467;
          }
          int v12 = v13 | 0x76700000;
        }
        else
        {
          if ((int)v4 <= 1768779618)
          {
            if (v4 != 1735222132)
            {
              int v12 = 1768057203;
              goto LABEL_38;
            }
LABEL_39:
            __int16 v14 = (int *)qword_64E4D0[0];
            if (qword_64E4D0[0] == unk_64E4D8) {
              return 1;
            }
            while (1)
            {
              if (*(void *)(a1 + 8) != a1)
              {
                int v15 = *v14;
                uint64_t v16 = *(void *)(a1 + 8);
                do
                {
                  BOOL v17 = *(_DWORD *)(v16 + 16) == v15 || *(_DWORD *)(v16 + 20) == v15;
                  char v18 = v17;
                  if (v17) {
                    break;
                  }
                  uint64_t v16 = *(void *)(v16 + 8);
                }
                while (v16 != a1);
                if (v18) {
                  break;
                }
              }
              if (++v14 == (int *)unk_64E4D8) {
                return 1;
              }
            }
            uint64_t v19 = *(void *)sub_298DA4();
            if (v5) {
              int v20 = (*(uint64_t (**)(void))(v19 + 104))();
            }
            else {
              int v20 = (*(uint64_t (**)(void))(v19 + 112))();
            }
            int v21 = *(_DWORD *)(a1 + 56);
            __int16 v22 = *(void **)(a1 + 64);
            unsigned int v23 = (void *)(a1 + 72);
            if (v22 != (void *)(a1 + 72))
            {
              while (*((_DWORD *)v22 + 7) != v20)
              {
                int v24 = (void *)v22[1];
                if (v24)
                {
                  do
                  {
                    __int16 v25 = v24;
                    int v24 = (void *)*v24;
                  }
                  while (v24);
                }
                else
                {
                  do
                  {
                    __int16 v25 = (void *)v22[2];
                    BOOL v17 = *v25 == (void)v22;
                    __int16 v22 = v25;
                  }
                  while (!v17);
                }
                __int16 v22 = v25;
                if (v25 == v23)
                {
                  if (v21 == 3) {
                    return 1;
                  }
                  goto LABEL_67;
                }
              }
            }
            if ((v21 != 3) != (v22 == v23)) {
              return 1;
            }
LABEL_67:
            uint64_t v26 = sub_32A48(8);
            if ((*(unsigned char *)(v26 + 8) & 1) == 0) {
              return 0;
            }
            int v5 = *(NSObject **)v26;
            if (*(void *)v26)
            {
              if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
              {
                sub_382CA8(&v30, a1);
                if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  __int16 v27 = &v30;
                }
                else {
                  __int16 v27 = (std::string *)v30.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136315650;
                __int16 v32 = "RouteUtilities.cpp";
                __int16 v33 = 1024;
                int v34 = 856;
                __int16 v35 = 2080;
                __int16 v36 = v27;
                _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d System settings disallow BTLE ports in abstract route %s.", buf, 0x1Cu);
LABEL_74:
                if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v30.__r_.__value_.__l.__data_);
                }
                return 0;
              }
              return 0;
            }
            return (uint64_t)v5;
          }
          if (v4 == 1768779619) {
            goto LABEL_39;
          }
          int v12 = 1768781411;
        }
LABEL_38:
        if (v4 != v12) {
          return (uint64_t)v5;
        }
        goto LABEL_39;
      }
      if (v2 != 1668505974) {
        return (uint64_t)v5;
      }
    }
    else
    {
      if (v2 > 1668309361)
      {
        if (v2 == 1668309362) {
          goto LABEL_23;
        }
        unsigned __int16 v6 = 29250;
        goto LABEL_22;
      }
      if (v2 != 1668182896)
      {
        unsigned __int16 v6 = 17011;
LABEL_22:
        if (v2 != (v6 | 0x63700000)) {
          return (uint64_t)v5;
        }
        goto LABEL_23;
      }
    }
    LODWORD(v5) = 0;
    goto LABEL_39;
  }
  uint64_t v7 = sub_32A48(8);
  if ((*(unsigned char *)(v7 + 8) & 1) == 0) {
    return 0;
  }
  int v5 = *(NSObject **)v7;
  if (*(void *)v7)
  {
    if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(&v30, v4);
      int v8 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = v30.__r_.__value_.__r.__words[0];
      sub_382CA8(&__p, a1);
      __int16 v10 = &v30;
      if (v8 < 0) {
        __int16 v10 = (std::string *)v9;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      __int16 v32 = "RouteUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 843;
      __int16 v35 = 2080;
      __int16 v36 = v10;
      __int16 v37 = 2080;
      int v38 = p_p;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Mode %s is disallowed in abstract route %s.", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_74;
    }
    return 0;
  }
  return (uint64_t)v5;
}

void sub_24124C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_241270(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v19 = a3 == 1668510820;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  v18[0] = a2;
  v18[1] = a6;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v7 = sub_12E380(v18);
  uint64_t v9 = v18[0];
  if (v18[0] == v7) {
    return 0;
  }
  uint64_t v10 = v7;
  int v11 = v8;
  uint64_t v12 = (uint64_t)(v8 + 1);
  while (1)
  {
    uint64_t v13 = *(void *)(v10 + 24);
    if (v13 != v10 + 16)
    {
      do
      {
        BOOL v14 = *(_DWORD *)(v13 + 16) == a1 || *(_DWORD *)(v13 + 20) == a1;
        char v15 = v14;
        if (v14) {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != v10 + 16);
      if (v15) {
        return 1;
      }
    }
    uint64_t v10 = *(void *)(v10 + 8);
    uint64_t v16 = *v11;
    if (v10 != *v11)
    {
      while ((sub_12EA98(v12, v10 + 16) & 1) == 0)
      {
        uint64_t v10 = *(void *)(v10 + 8);
        if (v10 == v16)
        {
          uint64_t v10 = v16;
          break;
        }
      }
    }
    if (v10 == v9) {
      return 0;
    }
  }
}

BOOL sub_241364(int a1, uint64_t *a2)
{
  sub_43F38(&v8, a2, "", 878);
  if (*(_DWORD *)(v8 + 144) == a1)
  {
    BOOL v4 = 1;
  }
  else
  {
    sub_43F38(&v6, a2 + 2, "", 879);
    BOOL v4 = *(_DWORD *)(v6 + 144) == a1;
    if (v7) {
      sub_4636C(v7);
    }
  }
  if (v9) {
    sub_4636C(v9);
  }
  return v4;
}

void sub_2413FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_241414(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *a1;
    if (!*(_DWORD *)(*a1 + 4) && *(_DWORD *)v2 == 1986291046) {
      break;
    }
    if (++a1 == a2) {
      return 0;
    }
  }
  v6[0] = off_6284A0;
  v6[3] = v6;
  sub_241504((uint64_t)v5, (void *)(v2 + 16), (uint64_t)v6);
  sub_6AFD4(v6);
  BOOL v3 = v5[2] != 0;
  sub_10E118(v5[1]);
  return v3;
}

void sub_2414F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_6AFD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_241504(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  for (i = (void *)a2[1]; i != a2; i = (void *)i[1])
  {
    uint64_t v7 = (std::__shared_weak_count *)i[5];
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        if (i[4])
        {
          uint64_t v10 = *(void *)(a3 + 24);
          if (!v10) {
            sub_56964();
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 48))(v10))
          {
            unint64_t v21 = 0;
            uint64_t v22 = 0;
            int v11 = (std::__shared_weak_count *)i[5];
            if (v11)
            {
              uint64_t v12 = std::__shared_weak_count::lock(v11);
              if (v12)
              {
                unint64_t v13 = i[4];
                atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                unint64_t v21 = v13;
                uint64_t v22 = v12;
                sub_4636C(v12);
              }
              else
              {
                unint64_t v21 = 0;
                uint64_t v22 = 0;
              }
            }
            sub_144D44((uint64_t **)a1, &v21, (uint64_t)&v21);
            if (v22) {
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        sub_4636C(v9);
      }
    }
    BOOL v14 = (std::__shared_weak_count *)i[3];
    if (v14)
    {
      char v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        uint64_t v16 = v15;
        if (i[2])
        {
          uint64_t v17 = *(void *)(a3 + 24);
          if (!v17) {
            sub_56964();
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 48))(v17))
          {
            unint64_t v21 = 0;
            uint64_t v22 = 0;
            char v18 = (std::__shared_weak_count *)i[3];
            if (v18)
            {
              BOOL v19 = std::__shared_weak_count::lock(v18);
              if (v19)
              {
                unint64_t v20 = i[2];
                atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                unint64_t v21 = v20;
                uint64_t v22 = v19;
                sub_4636C(v19);
              }
              else
              {
                unint64_t v21 = 0;
                uint64_t v22 = 0;
              }
            }
            sub_144D44((uint64_t **)a1, &v21, (uint64_t)&v21);
            if (v22) {
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        sub_4636C(v16);
      }
    }
  }
}

void sub_2416C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  sub_4636C(v10);
  sub_10E118(*v11);
  _Unwind_Resume(a1);
}

BOOL sub_241708(uint64_t a1, uint64_t a2)
{
  sub_21C8C(__p, "kBluetoothAudioDeviceFeatureSiriUseDeviceMic");
  BOOL v3 = sub_250638(a2, (const UInt8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_24176C(uint64_t a1, void *a2)
{
  *a2 = off_6284A0;
}

void *sub_24178C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6284A0;
  return result;
}

void sub_2417C4()
{
}

BOOL sub_2417DC(void *a1, void *a2, char a3)
{
  if (a1 == a2) {
    return 0;
  }
  while (1)
  {
    BOOL v3 = (_DWORD *)*a1;
    if (*(_DWORD *)*a1 == 1986291046) {
      break;
    }
    if (++a1 == a2) {
      return 0;
    }
  }
  uint64_t v7 = off_6284E8;
  char v8 = a3;
  uint64_t v9 = &v7;
  sub_241504((uint64_t)v6, (void *)v3 + 2, (uint64_t)&v7);
  sub_6AFD4(&v7);
  BOOL v4 = v6[2] != 0;
  sub_10E118(v6[1]);
  return v4;
}

void sub_2418B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_6AFD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2418C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_24B314((void *)a2);
  if (result)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      if (*(void *)(a2 + 192))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
        if (result)
        {
          if (*(_DWORD *)(a2 + 144) == 1885892674)
          {
            int v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 424);
            return v5(a2);
          }
          else
          {
            return sub_24F5F4(a2);
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_2419C4(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_6284E8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *sub_2419EC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = off_6284E8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void sub_241A38()
{
}

BOOL sub_241A50(int a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 == a3) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = *a2;
    if (!*(_DWORD *)(*a2 + 4) && *(_DWORD *)v4 == 1986291046) {
      break;
    }
    if (++a2 == a3) {
      return 0;
    }
  }
  uint64_t v6 = v4 + 16;
  uint64_t v7 = *(void *)(v4 + 24);
  if (v7 == v4 + 16) {
    return 0;
  }
  do
  {
    BOOL result = sub_241364(a1, (uint64_t *)(v7 + 16));
    if (result) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != v6);
  return result;
}

BOOL sub_241AEC(int a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 == a3) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = *a2;
    if (!*(_DWORD *)(*a2 + 4) && *(_DWORD *)v4 == 1986291046) {
      break;
    }
    if (++a2 == a3) {
      return 0;
    }
  }
  uint64_t v7 = (void *)(v4 + 16);
  char v8 = *(void **)(v4 + 24);
  if (v8 == (void *)(v4 + 16)) {
    return 0;
  }
  do
  {
    sub_43F38(&v15, v8 + 2, "", 948);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 112))(v15);
    if ((v9 & 0xFF00000000) != 0) {
      int v10 = v9;
    }
    else {
      int v10 = 1701868910;
    }
    if (v10 == a1)
    {
      BOOL v5 = 1;
    }
    else
    {
      sub_43F38(&v13, v8 + 4, "", 950);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 112))(v13);
      if ((v11 & 0xFF00000000) != 0) {
        int v12 = v11;
      }
      else {
        int v12 = 1701868910;
      }
      BOOL v5 = v12 == a1;
      if (v14) {
        sub_4636C(v14);
      }
    }
    if (v16) {
      sub_4636C(v16);
    }
    if (v5) {
      break;
    }
    char v8 = (void *)v8[1];
  }
  while (v8 != v7);
  return v5;
}

void sub_241C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_4636C(a10);
  }
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_241C7C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_241CD0((uint64_t *)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void sub_241CD0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_241D1C(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 0;
  }
  while (*(_DWORD *)(*a1 + 4) || *(_DWORD *)*a1 != 1986291046)
  {
    if (++a1 == a2) {
      return 0;
    }
  }
  return sub_241D60(*a1);
}

uint64_t sub_241D60(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  sub_241E30((uint64_t)v12, (void *)(a1 + 16));
  BOOL v3 = *(void **)(a1 + 24);
  if (v14 < 2 || v3 == v2)
  {
LABEL_12:
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  while (1)
  {
    BOOL v5 = (std::__shared_weak_count *)v3[5];
    if (!v5) {
      goto LABEL_11;
    }
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (!v6) {
      goto LABEL_11;
    }
    uint64_t v7 = v6;
    uint64_t v8 = v3[4];
    if (!v8)
    {
      sub_4636C(v7);
      goto LABEL_11;
    }
    BOOL v9 = sub_24EC98(v8);
    sub_4636C(v7);
    if (v9) {
      break;
    }
LABEL_11:
    BOOL v3 = (void *)v3[1];
    if (v3 == v2) {
      goto LABEL_12;
    }
  }
  uint64_t v11 = 1;
LABEL_13:
  sub_10E118(v13);
  return v11;
}

void sub_241E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  sub_4636C(v11);
  sub_10E118(a11);
  _Unwind_Resume(a1);
}

void *sub_241E30(uint64_t a1, void *a2)
{
  v3[0] = off_628608;
  v3[3] = v3;
  sub_241504(a1, a2, (uint64_t)v3);
  return sub_6AFD4(v3);
}

void sub_241EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6AFD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_241EC8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 144) == 1885892674;
}

void sub_241EE8(uint64_t a1, void *a2)
{
  *a2 = off_628608;
}

void *sub_241F08()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_628608;
  return result;
}

void sub_241F40()
{
}

uint64_t sub_241F58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 416))(a2);
}

void sub_241F90(uint64_t a1, void *a2)
{
  *a2 = off_628530;
}

void *sub_241FB0()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_628530;
  return result;
}

void sub_241FE8()
{
}

BOOL sub_242000(uint64_t a1, uint64_t a2)
{
  return (*(_WORD *)(a2 + 184) & 1) == 0 && *(_DWORD *)(a2 + 144) != 1885433888;
}

void sub_242028(uint64_t a1, void *a2)
{
  *a2 = off_628578;
}

void *sub_242048()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_628578;
  return result;
}

void sub_242080()
{
}

BOOL sub_242098(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    BOOL v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *a2 == a1)
    {
      BOOL v6 = 1;
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[3];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      BOOL v6 = a2[2] == a1;
      sub_4636C(v8);
      if (!v5) {
        return v6;
      }
      goto LABEL_11;
    }
  }
  BOOL v6 = 0;
  if (v5) {
LABEL_11:
  }
    sub_4636C(v5);
  return v6;
}

BOOL sub_24212C(uint64_t a1)
{
  sub_43F38(&v3, (uint64_t *)(a1 + 16), "", 1069);
  int v1 = (*(uint64_t (**)(void))(*(void *)v3 + 400))();
  if (v4) {
    sub_4636C(v4);
  }
  return v1 == 1;
}

void sub_2421BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2421D4()
{
  return 1;
}

void sub_2421E4(uint64_t a1, void *a2)
{
  *a2 = off_6285C0;
}

void *sub_242204()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_6285C0;
  return result;
}

void sub_24223C()
{
}

uint64_t sub_242254(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = a1;
  do
  {
    uint64_t v4 = *v3;
    if (!*(_DWORD *)(*v3 + 4) && *(_DWORD *)v4 == 1986291046)
    {
      uint64_t v5 = v4 + 16;
      for (uint64_t i = *(void *)(v4 + 24); i != v5; uint64_t i = *(void *)(i + 8))
      {
        if (sub_24212C(i + 16)) {
          return 1;
        }
      }
    }
    ++v3;
  }
  while (v3 != a2);
  return 0;
}

uint64_t sub_2422F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  if (!v2 || !sub_24FF4C(v2)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 192);
  strcpy((char *)v13, "diabbolg");
  BYTE1(v13[2]) = 0;
  HIWORD(v13[2]) = 0;
  uint64_t v4 = sub_99A40(v3);
  *((void *)&v7 + 1) = v5;
  *(void *)&long long v7 = v4;
  uint64_t v6 = v7 >> 32;
  if ((v6 & 0xFF00000000) == 0) {
    LODWORD(v6) = 0;
  }
  if (v6 != 8223 && v6 != 8202) {
    return 1;
  }
  uint64_t v12 = sub_3DEA5C();
  BOOL v9 = (os_log_t *)sub_32A48(20);
  int v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    v13[0] = 136315650;
    *(void *)&v13[1] = "RouteUtilities.cpp";
    __int16 v14 = 1024;
    int v15 = 1107;
    __int16 v16 = 1024;
    int v17 = v12;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device changes based on PME: %u", (uint8_t *)v13, 0x18u);
  }
  return v12;
}

BOOL sub_242430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    while (*(_DWORD *)(*(void *)a2 + 4) || **(_DWORD **)a2 != 1986291046)
    {
      a2 += 8;
      if (a2 == a3) {
        return 0;
      }
    }
  }
  if (a2 == a3) {
    return 0;
  }
  uint64_t v4 = *(void *)a2 + 16;
  uint64_t v5 = *(void *)(*(void *)a2 + 24);
  if (v5 == v4) {
    return 0;
  }
  do
  {
    BOOL result = sub_242098(a1, (void *)(v5 + 16));
    if (result) {
      break;
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != v4);
  return result;
}

uint64_t sub_2424D0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v7 = a2 + 40;
  if (a5) {
    sub_37CB44(v27, v7, a3);
  }
  else {
    sub_37C964(v27, v7, a3);
  }
  if (!v28) {
    return 1;
  }
  sub_46A4C((uint64_t *)&v25, (uint64_t)v27);
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v23 = v24;
  sub_242658((uint64_t)v29, *(void **)a1, (void *)(a1 + 8), v25, &v26, (uint64_t)&v23, (uint64_t)v24);
  uint64_t v8 = v23;
  if (v23 == v24)
  {
LABEL_23:
    uint64_t v21 = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(a4 + 8);
    uint64_t v10 = a4 + 8;
    uint64_t v9 = v11;
    if (v11)
    {
      while (1)
      {
        unsigned int v12 = *((_DWORD *)v8 + 7);
        uint64_t v13 = v10;
        uint64_t v14 = v9;
        do
        {
          unsigned int v15 = *(_DWORD *)(v14 + 28);
          BOOL v16 = v15 >= v12;
          if (v15 >= v12) {
            int v17 = (uint64_t *)v14;
          }
          else {
            int v17 = (uint64_t *)(v14 + 8);
          }
          if (v16) {
            uint64_t v13 = v14;
          }
          uint64_t v14 = *v17;
        }
        while (*v17);
        if (v13 == v10 || *(_DWORD *)(v13 + 28) > v12) {
          break;
        }
        char v18 = v8[1];
        if (v18)
        {
          do
          {
            BOOL v19 = (void **)v18;
            char v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            BOOL v19 = (void **)v8[2];
            BOOL v20 = *v19 == v8;
            uint64_t v8 = v19;
          }
          while (!v20);
        }
        uint64_t v8 = v19;
        if (v19 == v24) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v21 = 0;
  }
  sub_463E0(v24[0]);
  sub_463E0(v26);
  if (v28) {
    sub_463E0((void *)v27[1]);
  }
  return v21;
}

void sub_242624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, char a18)
{
  if (a18) {
    sub_463E0(a16);
  }
  _Unwind_Resume(a1);
}

double sub_242658(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v22 = a6;
  *((void *)&v22 + 1) = a7;
  if (a2 != a3)
  {
    uint64_t v10 = a4;
    if (a4 != a5)
    {
      uint64_t v11 = a2;
      do
      {
        unsigned int v12 = *((_DWORD *)v11 + 7);
        unsigned int v13 = *((_DWORD *)v10 + 7);
        if (v12 >= v13)
        {
          if (v13 >= v12)
          {
            sub_12A5C4((uint64_t)&v22, (unsigned int *)v11 + 7);
            int v17 = (void *)v11[1];
            if (v17)
            {
              do
              {
                BOOL v16 = v17;
                int v17 = (void *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                BOOL v16 = (void *)v11[2];
                BOOL v18 = *v16 == (void)v11;
                uint64_t v11 = v16;
              }
              while (!v18);
            }
          }
          else
          {
            BOOL v16 = v11;
          }
          BOOL v19 = (void *)v10[1];
          if (v19)
          {
            do
            {
              uint64_t v10 = v19;
              BOOL v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              BOOL v20 = v10;
              uint64_t v10 = (void *)v10[2];
            }
            while ((void *)*v10 != v20);
          }
          uint64_t v11 = v16;
        }
        else
        {
          uint64_t v14 = (void *)v11[1];
          if (v14)
          {
            do
            {
              uint64_t v11 = v14;
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              unsigned int v15 = v11;
              uint64_t v11 = (void *)v11[2];
            }
            while ((void *)*v11 != v15);
          }
        }
      }
      while (v11 != a3 && v10 != a5);
    }
  }
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a5;
  double result = *(double *)&v22;
  *(_OWORD *)(a1 + 16) = v22;
  return result;
}

void sub_242788(uint64_t a1, unsigned int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5 == 1)
  {
    sub_549A4(&v13, (uint64_t *)(a4 + 16), "", 1274);
    int v12 = *(_DWORD *)(v13 + 264);
    if (v14) {
      sub_4636C(v14);
    }
  }
  else
  {
    int v12 = 0;
  }
  sub_19C2F8((uint64_t)&v13, a2, a3, v12);
  sub_380BF8(&v17, a6, (int *)&v13);
  if (__p)
  {
    BOOL v16 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    *(_OWORD *)a1 = v17;
    *(void *)(a1 + 16) = v18;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    sub_3781C8((unsigned char *)a1, a7, a2);
  }
}

void sub_242870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24288C(uint64_t *a1, unsigned int a2, _OWORD *a3, void *a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t *a8)
{
  unsigned int v43 = a2;
  *a1 = 0;
  a1[1] = 0;
  sub_242788((uint64_t)&__p, a2, a3, a4[1], a4[2], a5, a6);
  if (!v42) {
    return;
  }
  __int16 v37 = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  sub_E46E0(&v37, __p, (uint64_t)v41, (v41 - (unsigned char *)__p) >> 3);
  int v12 = v37;
  if (v37 == v38)
  {
    uint64_t v21 = sub_32A48(20);
    uint64_t v22 = sub_32A48(24);
    char v23 = 0;
    uint64_t v24 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v25 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v26 = *(int *)&buf[4 * v24];
      char v27 = v23;
      if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
        break;
      }
      char v23 = 1;
      uint64_t v24 = 1;
      if (v27) {
        goto LABEL_14;
      }
    }
    if ((v25 & v26) == 0) {
      uint64_t v21 = v22;
    }
LABEL_14:
    char v28 = *(NSObject **)v21;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1340;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Empty DSPChainConfigVector (expected during bringup)", buf, 0x12u);
    }
    if (!v12) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v13 = (char *)v38 - (char *)v37;
    if ((unint64_t)((char *)v38 - (char *)v37) >= 0x11)
    {
      uint64_t v14 = sub_32A48(20);
      uint64_t v15 = sub_32A48(24);
      char v16 = 0;
      uint64_t v17 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v18 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v19 = *(int *)&buf[4 * v17];
        char v20 = v16;
        if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
          break;
        }
        char v16 = 1;
        uint64_t v17 = 1;
        if (v20) {
          goto LABEL_21;
        }
      }
      if ((v18 & v19) == 0) {
        uint64_t v14 = v15;
      }
LABEL_21:
      __int16 v29 = *(NSObject **)v14;
      if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1309;
        __int16 v45 = 2048;
        uint64_t v46 = v13 >> 3;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_INFO, "%25s:%-5d Get DSP properties returned a list of %lu entries. We currently base DSP on the first entry only.", buf, 0x1Cu);
      }
    }
    uint64_t v30 = *v12;
    if (*v12)
    {
      *a8 = v30;
      if (*(unsigned char *)(v30 + 52))
      {
        v36[0] = *(void *)a7;
        v36[1] = v30;
        sub_242CF8();
        sub_88BF8((uint64_t)buf, (uint64_t)v36);
        if (buf[16])
        {
          uint64_t v31 = *(void *)buf;
          uint64_t v32 = *(void *)&buf[8];
          if (*(void *)&buf[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          }
          *a1 = v31;
          a1[1] = v32;
          if (v31) {
            sub_1BAD7C(v31, 1);
          }
          if (*(void *)&buf[8]) {
            sub_4636C(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        else
        {
          sub_242D7C(&v35, &v37, a4, a7, (int *)&v43);
          *(_OWORD *)a1 = v35;
          sub_242CF8();
          sub_88E9C((uint64_t)v36, a1);
        }
      }
      else
      {
        __int16 v33 = (os_log_t *)sub_32A48(24);
        int v34 = *v33;
        if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1333;
          _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_INFO, "%25s:%-5d Creating output DSP Chain, not caching.", buf, 0x12u);
        }
        sub_242D7C(buf, &v37, a4, a7, (int *)&v43);
        *(_OWORD *)a1 = *(_OWORD *)buf;
      }
    }
  }
  operator delete(v12);
LABEL_39:
  if (v42)
  {
    if (__p)
    {
      int v41 = __p;
      operator delete(__p);
    }
  }
}

void sub_242C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  operator delete(v24);
  if (a21 && __p) {
    operator delete(__p);
  }
  if (v25) {
    sub_4636C(v25);
  }
  _Unwind_Resume(a1);
}

void sub_242CF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658940))
  {
    qword_6588F0 = 0;
    qword_6588E8 = (uint64_t)&qword_6588F0;
    qword_6588F8 = 0;
    unk_658900 = 850045863;
    xmmword_658908 = 0u;
    unk_658918 = 0u;
    xmmword_658928 = 0u;
    qword_658938 = 0;
    __cxa_guard_release(&qword_658940);
  }
}

void sub_242D7C(void *a1, uint64_t **a2, void *a3, unsigned int *a4, int *a5)
{
  v432 = a4;
  v452 = a3;
  uint64_t v5 = *a2;
  if (*a2 == a2[1])
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v437 = a1;
  if (!*v5 || (sub_209B38() & 1) == 0 && *(void *)**a2 == *(void *)(**a2 + 8))
  {
    int v12 = v437;
    void *v437 = 0;
    v12[1] = 0;
    return;
  }
  uint64_t v428 = **a2;
  v423 = a5;
  uint64_t v8 = (os_log_t *)sub_32A48(24);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_375514(&v496[0].__pn_, v428);
    uint64_t v10 = (v496[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? v496
        : (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)v506 = 136315650;
    *(void *)&v506[4] = "RouteUtilities.cpp";
    *(_WORD *)&v506[12] = 1024;
    *(_DWORD *)&v506[14] = 455;
    *(_WORD *)&v506[18] = 2080;
    *(void *)&v506[20] = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChainConfig: %s", v506, 0x1Cu);
    if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v11 = (void **)(v428 + 24);
  if (*(char *)(v428 + 47) < 0)
  {
    unint64_t v13 = *(void *)(v428 + 32);
    if (v13)
    {
      sub_21E8C(&v467, *v11, v13);
      goto LABEL_20;
    }
  }
  else if (*(unsigned char *)(v428 + 47))
  {
    *(_OWORD *)&v467.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    v467.__r_.__value_.__r.__words[2] = *(void *)(v428 + 40);
    goto LABEL_20;
  }
  sub_24ABB0(&v467, (uint64_t)v452);
LABEL_20:
  if (sub_209B38())
  {
    BOOL v14 = 1;
  }
  else
  {
    uint64_t v15 = (void *)sub_D719C(*(void **)v428, *(void **)(v428 + 8));
    char v16 = sub_D7374(v15, 1685090932);
    if (v16)
    {
      int v18 = *((_DWORD *)v16 + 6);
      uint64_t v17 = (int *)(v16 + 3);
      if (v18 != 7)
      {
        v414 = (os_log_t *)sub_32A48(13);
        v415 = *v414;
        if (*v414 && os_log_type_enabled(*v414, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v506 = 136315394;
          *(void *)&v506[4] = "DSPChainUtilities.cpp";
          *(_WORD *)&v506[12] = 1024;
          *(_DWORD *)&v506[14] = 180;
          _os_log_impl(&def_1E50E8, v415, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v506, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      BOOL v14 = sub_384FB4(v17) == 1685287015;
    }
    else
    {
      BOOL v14 = 0;
    }
  }
  uint64_t v19 = (os_log_t *)sub_32A48(24);
  char v20 = *v19;
  if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = &v467;
    if ((v467.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)v467.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v506 = 136315906;
    *(void *)&v506[4] = "RouteUtilities.cpp";
    *(_WORD *)&v506[12] = 1024;
    *(_DWORD *)&v506[14] = 460;
    *(_WORD *)&v506[18] = 2080;
    *(void *)&v506[20] = v21;
    *(_WORD *)&v506[28] = 1024;
    *(_DWORD *)&v506[30] = v14;
    _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d dspchain name is %s, graph-based: %d", v506, 0x22u);
  }
  signed int v22 = *(_DWORD *)(v428 + 48);
  if (!v14) {
    sub_1B7178(v437, (uint64_t)&v467, *(_DWORD *)(v428 + 48));
  }
  char v23 = (os_log_t *)sub_32A48(24);
  uint64_t v24 = *v23;
  if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = SHIBYTE(v467.__r_.__value_.__r.__words[2]);
    std::string::size_type v26 = v467.__r_.__value_.__r.__words[0];
    sub_2417C(v496, v22);
    char v27 = &v467;
    if (v25 < 0) {
      char v27 = (std::string *)v26;
    }
    if ((v496[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v28 = v496;
    }
    else {
      char v28 = (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v506 = 136315906;
    *(void *)&v506[4] = "DSPGraphChain.cpp";
    *(_WORD *)&v506[12] = 1024;
    *(_DWORD *)&v506[14] = 28;
    *(_WORD *)&v506[18] = 2080;
    *(void *)&v506[20] = v27;
    *(_WORD *)&v506[28] = 2080;
    *(void *)&v506[30] = v28;
    _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating DSP Graph Chain %s, chain type: %s", v506, 0x26u);
    if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (v22 > 1684434035)
  {
    if (v22 != 1936749172)
    {
      if (v22 != 1869375603)
      {
        if (v22 == 1684434036) {
          operator new();
        }
        goto LABEL_51;
      }
LABEL_50:
      operator new();
    }
    goto LABEL_49;
  }
  if (v22 == 1668049011) {
    goto LABEL_50;
  }
  if (v22 == 1668051824) {
LABEL_49:
  }
    operator new();
LABEL_51:
  __int16 v29 = (os_log_t *)sub_32A48(24);
  uint64_t v30 = *v29;
  long long v31 = 0uLL;
  if (*v29)
  {
    if (os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(v496, v22);
      uint64_t v32 = (v496[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? v496
          : (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)v506 = 136315650;
      *(void *)&v506[4] = "DSPGraphChain.cpp";
      *(_WORD *)&v506[12] = 1024;
      *(_DWORD *)&v506[14] = 51;
      *(_WORD *)&v506[18] = 2080;
      *(void *)&v506[20] = v32;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unsupported DSP Chain Type: %s", v506, 0x1Cu);
      if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
      }
    }
    long long v31 = 0uLL;
  }
  *(_OWORD *)v437 = v31;
  sub_26F17C();
  LOBYTE(v464[0]) = 0;
  char v466 = 0;
  CFTypeRef v463 = 0;
  int v34 = *(void ****)v428;
  v433 = *(void ****)(v428 + 8);
  if (v34 == v433)
  {
    v453 = 0;
    uint64_t v310 = *v437;
    if (*v437) {
      goto LABEL_722;
    }
    goto LABEL_760;
  }
  v453 = 0;
  long long v35 = 0;
  int v427 = 0;
  v442 = (int *)&v506[16];
  unint64_t v449 = 0;
  v450 = (int *)&v496[0].__pn_.__r_.__value_.__r.__words[2];
  v446 = (int *)&v502.__r_.__value_.__r.__words[2];
  v443 = &v508;
  v441 = &v498[8];
  v424 = (std::string::size_type *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 2);
  p_std::string::size_type size = &v496[0].__pn_.__r_.__value_.__l.__size_;
  v422 = &v506[32];
  v421 = v509;
  v420 = v512;
  v419 = v513;
  v418 = v515;
  v417 = v516;
  uint64_t v425 = v428 + 80;
  v426 = (const void **)&v474;
  *(void *)&long long v33 = 136315650;
  long long v435 = v33;
  *(void *)&long long v33 = 136315394;
  long long v436 = v33;
  *(void *)&long long v33 = 136316162;
  long long v440 = v33;
  *(void *)&long long v33 = 136315906;
  long long v429 = v33;
  v434 = &v470;
  do
  {
    v438 = v34;
    v447 = **v34;
    __int16 v36 = sub_D7374(v447, 1685090932);
    if (!v36)
    {
      v400 = (os_log_t *)sub_32A48(13);
      v401 = *v400;
      if (*v400 && os_log_type_enabled(*v400, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v506 = v436;
        *(void *)&v506[4] = "RouteUtilities.cpp";
        *(_WORD *)&v506[12] = 1024;
        *(_DWORD *)&v506[14] = 483;
        _os_log_impl(&def_1E50E8, v401, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Routing database error: Unable to locate kDSP_Processor_Type within a DSP processor map entry.\"", v506, 0x12u);
      }
      v402 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v402, "Routing database error: Unable to locate kDSP_Processor_Type within a DSP processor map entry.");
    }
    unsigned int v448 = sub_384FB4((int *)v36 + 6);
    uint64_t v37 = sub_32A48(24);
    if (*(unsigned char *)(v37 + 8))
    {
      int v38 = *(NSObject **)v37;
      if (*(void *)v37)
      {
        if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v496, v448);
          uint64_t v39 = v496;
          if ((v496[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v39 = (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v506 = v435;
          *(void *)&v506[4] = "RouteUtilities.cpp";
          *(_WORD *)&v506[12] = 1024;
          *(_DWORD *)&v506[14] = 486;
          *(_WORD *)&v506[18] = 2080;
          *(void *)&v506[20] = v39;
          _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found DSP Processor type %s", v506, 0x1Cu);
          if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    uint64_t v40 = sub_D7374(v447, 1701736511);
    if (v40) {
      sub_384FB4((int *)v40 + 6);
    }
    (*(void (**)(uint64_t *__return_ptr))(qword_64E880 + 40))(&v461);
    if (!v461)
    {
      v397 = (os_log_t *)sub_32A48(13);
      v398 = *v397;
      if (*v397 && os_log_type_enabled(*v397, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v506 = v436;
        *(void *)&v506[4] = "RouteUtilities.cpp";
        *(_WORD *)&v506[12] = 1024;
        *(_DWORD *)&v506[14] = 493;
        _os_log_impl(&def_1E50E8, v398, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [inst.get() is NULL]: \"Unable to instantiate DSPProcessor.\"", v506, 0x12u);
      }
      v399 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v399, "Unable to instantiate DSPProcessor.");
    }
    int v41 = (os_log_t *)sub_32A48(24);
    char v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v461 + 152))(v461);
      sub_2417C(v496, v43);
      int v44 = SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]);
      std::string::size_type v45 = v496[0].__pn_.__r_.__value_.__r.__words[0];
      int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v461 + 144))(v461);
      uint64_t v47 = *v437;
      uint64_t v48 = v496;
      if (v44 < 0) {
        uint64_t v48 = (std::__fs::filesystem::path *)v45;
      }
      *(_DWORD *)v506 = v440;
      *(void *)&v506[4] = "RouteUtilities.cpp";
      *(_WORD *)&v506[12] = 1024;
      *(_DWORD *)&v506[14] = 494;
      *(_WORD *)&v506[18] = 2080;
      *(void *)&v506[20] = v48;
      *(_WORD *)&v506[28] = 1024;
      *(_DWORD *)&v506[30] = v46;
      *(_WORD *)&v506[34] = 2048;
      *(void *)&v506[36] = v47;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiated DSP Processor type '%s', instanceID: %u dspchain: %p", v506, 0x2Cu);
      if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
      }
    }
    CFTypeID v49 = sub_D7374(v447, 1685091188);
    if (v49)
    {
      uint64_t v50 = sub_384EAC((int *)v49 + 6);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v461 + 88))(v461, v50);
    }
    std::string::size_type v51 = sub_D7374(v447, 1685090928);
    if (v51)
    {
      uint64_t v52 = sub_3855E4((int *)v51 + 6);
      sub_2488A0(v52, v461);
    }
    uint64_t v53 = sub_D7374(v447, 1768907891);
    if (v53)
    {
      uint64_t v54 = sub_3858FC((int *)v53 + 6);
      sub_24955C((uint64_t)v506, v54);
      int v427 = sub_384FB4((int *)v506);
      uint64_t v55 = sub_3857F4(v442);
      uint64_t v56 = *(void *)(v55 + 8);
      while (v56 != v55)
      {
        sub_3847B8((uint64_t)&v502, (int *)(v56 + 16));
        uint64_t v57 = sub_3858FC((int *)&v502);
        sub_24955C((uint64_t)v496, v57);
        unsigned int v58 = sub_384FB4((int *)v496);
        unint64_t v59 = v58 | (unint64_t)(sub_384FB4(v450) << 32);
        if ((unint64_t)v35 >= v449)
        {
          uint64_t v61 = v35 - v453;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v63 = v449 - (void)v453;
          if ((uint64_t)(v449 - (void)v453) >> 2 > v62) {
            unint64_t v62 = v63 >> 2;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64) {
            unint64_t v64 = (unint64_t)sub_106EC(v64);
          }
          else {
            uint64_t v65 = 0;
          }
          uint64_t v66 = (unint64_t *)(v64 + 8 * v61);
          *uint64_t v66 = v59;
          uint64_t v60 = v66 + 1;
          while (v35 != v453)
          {
            unint64_t v67 = *--v35;
            *--uint64_t v66 = v67;
          }
          unint64_t v449 = v64 + 8 * v65;
          if (v453) {
            operator delete(v453);
          }
          v453 = v66;
        }
        else
        {
          *long long v35 = v59;
          uint64_t v60 = v35 + 1;
        }
        sub_3840C4((uint64_t)v450);
        sub_3840C4((uint64_t)v496);
        sub_3840C4((uint64_t)&v502);
        uint64_t v56 = *(void *)(v56 + 8);
        long long v35 = v60;
      }
      sub_3840C4((uint64_t)v442);
      sub_3840C4((uint64_t)v506);
    }
    int v68 = v447;
    int v69 = sub_2495A8(v447, 1936746861);
    sub_2495A8(v68, 1886610801);
    int v70 = sub_2495A8(v68, 1835235437);
    int v71 = sub_D7374(v68, 1886352244);
    if (v71)
    {
      BOOL v72 = (const void *)sub_3853D4((int *)v71 + 6);
      AudioObjectID v73 = v72;
      if (v72) {
        CFRetain(v72);
      }
      sub_22084(v506, v73);
      CFTypeRef v74 = v463;
      CFTypeRef v463 = *(CFTypeRef *)v506;
      *(void *)v506 = v74;
      if (v74) {
        CFRelease(v74);
      }
    }
    int v430 = v70;
    int v431 = v69;
    unsigned int v75 = sub_D7374(v447, 1835233903);
    int v76 = (uint64_t *)*v437;
    if (v75)
    {
      uint64_t v77 = (const void *)sub_3853D4((int *)v75 + 6);
      int v78 = v77;
      if (v77) {
        CFRetain(v77);
      }
      sub_22084(v506, v78);
      int v79 = (const void *)v76[141];
      int v80 = *(const void **)v506;
      v76[141] = *(void *)v506;
      if (v80) {
        CFRetain(v80);
      }
      if (v79) {
        CFRelease(v79);
      }
      if (*(void *)v506) {
        CFRelease(*(CFTypeRef *)v506);
      }
    }
    else if (!v76)
    {
      goto LABEL_314;
    }
    sub_2495DC(0, 1701737068, 1635087216, v447, v76);
    sub_2495DC(1, 1818326117, 1635087216, v447, v76);
    sub_2495DC(2, 1701080167, 1635087216, v447, v76);
    sub_2495DC(3, 1633972835, 1600941675, v447, v76);
    unsigned int v81 = *v432;
    if (sub_89FA8() != 2 && sub_89FA8() != 3 && sub_89FA8() != 5) {
      goto LABEL_134;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_661670, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_661670))
    {
      sub_400DEC();
      __cxa_guard_release(&qword_661670);
    }
    uint64_t v82 = qword_661660;
    if (!qword_661660) {
      goto LABEL_134;
    }
    v83 = &qword_661660;
    uint64_t v84 = qword_661660;
    do
    {
      unsigned int v85 = *(_DWORD *)(v84 + 32);
      BOOL v86 = v85 >= v81;
      if (v85 >= v81) {
        CFArrayRef v87 = (uint64_t *)v84;
      }
      else {
        CFArrayRef v87 = (uint64_t *)(v84 + 8);
      }
      if (v86) {
        v83 = (uint64_t *)v84;
      }
      uint64_t v84 = *v87;
    }
    while (*v87);
    if (v83 != &qword_661660 && *((_DWORD *)v83 + 8) <= v81)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v137 = *(_DWORD *)(v82 + 32);
          if (v137 <= v81) {
            break;
          }
          uint64_t v82 = *(void *)v82;
          if (!v82) {
            goto LABEL_779;
          }
        }
        if (v137 >= v81) {
          break;
        }
        uint64_t v82 = *(void *)(v82 + 8);
        if (!v82) {
LABEL_779:
        }
          sub_8251C("map::at:  key not found");
      }
      memset(v506, 0, 24);
      uint64_t v298 = *(void *)(v82 + 40);
      uint64_t v299 = *(void *)(v82 + 48);
      v496[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
      v496[0].__pn_.__r_.__value_.__s.__data_[8] = 0;
      if (v299 != v298)
      {
        unint64_t v300 = 0xF0F0F0F0F0F0F0F1 * ((v299 - v298) >> 3);
        if (v300 > 0x1E1E1E1E1E1E1E1) {
          sub_60548();
        }
        v301 = (char *)sub_249EB8(v300);
        uint64_t v302 = 0;
        *(void *)v506 = v301;
        *(void *)&v506[8] = v301;
        *(void *)&v506[16] = &v301[136 * v303];
        do
        {
          uint64_t v304 = v298 + v302;
          *(void *)&v301[v302] = *(void *)(v298 + v302);
          sub_1BABE0((uint64_t)&v301[v302 + 16], v298 + v302 + 16);
          *(_DWORD *)&v301[v302 + 104] = *(_DWORD *)(v298 + v302 + 104);
          v305 = &v301[v302 + 112];
          v306 = (void **)(v298 + v302 + 112);
          if (*(char *)(v298 + v302 + 135) < 0)
          {
            sub_21E8C(v305, *v306, *(void *)(v298 + v302 + 120));
          }
          else
          {
            long long v307 = *(_OWORD *)v306;
            *(void *)&v301[v302 + 128] = *(void *)(v304 + 128);
            *(_OWORD *)v305 = v307;
          }
          v302 += 136;
        }
        while (v304 + 136 != v299);
        v308 = &v301[v302];
        uint64_t v309 = *(void *)v506;
        for (*(void *)&v506[8] = v308; (char *)v309 != v308; v309 += 136)
          sub_2498C8(v76, v309);
      }
    }
    else
    {
LABEL_134:
      memset(v506, 0, 24);
    }
    v496[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
    sub_1B6E74((void ***)v496);
    if (sub_D7374(v447, 1668248691) && *(unsigned char *)(v428 + 128))
    {
      signed int v88 = sub_D7374(v447, 1668248691);
      if (!v88) {
        sub_8251C("unordered_map::at: key not found");
      }
      int64_t v89 = (const void *)sub_3853D4((int *)v88 + 6);
      v90 = v89;
      if (v89) {
        CFRetain(v89);
      }
      sub_22084(&v460, v90);
      std::string v91 = (uint64_t *)*v437;
      unint64_t v469 = 0;
      unint64_t v470 = 0;
      uint64_t v468 = 0;
      sub_27EA8C((uint64_t)&v502, v460);
      sub_27EA8C((uint64_t)v498, v460);
      *(void *)&v498[8] = (v499 - *(void *)&v498[16]) >> 3;
      while (1)
      {
        if (v502.__r_.__value_.__r.__words[0]
          && v502.__r_.__value_.__l.__size_ != (uint64_t)((uint64_t)v503 - v502.__r_.__value_.__r.__words[2]) >> 3)
        {
          unint64_t v92 = *(void *)v498;
        }
        else
        {
          unint64_t v92 = *(void *)v498;
          if (!*(void *)v498 || *(void *)&v498[8] == (v499 - *(void *)&v498[16]) >> 3)
          {
LABEL_301:
            if (v500)
            {
              v501 = v500;
              operator delete(v500);
            }
            if (*(void *)&v498[16])
            {
              uint64_t v499 = *(void *)&v498[16];
              operator delete(*(void **)&v498[16]);
            }
            if (v504)
            {
              v505 = v504;
              operator delete(v504);
            }
            if (v502.__r_.__value_.__r.__words[2])
            {
              v503 = (std::string *)v502.__r_.__value_.__r.__words[2];
              operator delete((void *)v502.__r_.__value_.__r.__words[2]);
            }
            uint64_t v139 = v468;
            unint64_t v138 = v469;
            while (v139 != v138)
            {
              sub_2498C8(v91, v139);
              v139 += 136;
            }
            *(void *)v506 = &v468;
            sub_1B6E74((void ***)v506);
            if (v460) {
              CFRelease(v460);
            }
            break;
          }
        }
        if (*(_OWORD *)&v502.__r_.__value_.__l.__data_ == __PAIR128__(*(unint64_t *)&v498[8], v92)) {
          goto LABEL_301;
        }
        sub_27EB10((uint64_t)v489, &v502);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64EBD0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_64EBD0))
        {
          sub_21C8C(v506, "wind");
          *(void *)&v506[24] = 5;
          sub_21C8C(v422, "wind_and_dynamics");
          v508 = (void *)(&dword_4 + 2);
          sub_21C8C(v421, "enrollment");
          uint64_t v511 = 0;
          sub_21C8C(v420, "late_night_mode");
          v512[3] = &def_1E50E8 + 1;
          sub_21C8C(v419, "enhance_dialog");
          uint64_t v514 = 2;
          sub_21C8C(v418, "auto_drc");
          v515[3] = 3;
          sub_21C8C(v417, "enhance_dialog_with_levels");
          uint64_t v517 = 7;
          sub_27EC08((uint64_t)v506, 7);
          for (uint64_t i = 0; i != -224; i -= 32)
          {
            if ((char)v516[i + 23] < 0) {
              operator delete(*(void **)&v516[i]);
            }
          }
          __cxa_guard_release(&qword_64EBD0);
        }
        unint64_t v93 = sub_6789C((uint64_t)v489);
        unint64_t v94 = *((void *)&xmmword_64EBA8 + 1);
        if (!*((void *)&xmmword_64EBA8 + 1)) {
          goto LABEL_284;
        }
        unint64_t v95 = v93;
        uint8x8_t v96 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_64EBA8 + 8));
        v96.i16[0] = vaddlv_u8(v96);
        unint64_t v97 = v96.u32[0];
        if (v96.u32[0] > 1uLL)
        {
          unint64_t v98 = v93;
          if (v93 >= *((void *)&xmmword_64EBA8 + 1)) {
            unint64_t v98 = v93 % *((void *)&xmmword_64EBA8 + 1);
          }
        }
        else
        {
          unint64_t v98 = (*((void *)&xmmword_64EBA8 + 1) - 1) & v93;
        }
        v99 = *(unsigned __int8 ***)(xmmword_64EBA8 + 8 * v98);
        if (!v99) {
          goto LABEL_284;
        }
        v100 = *v99;
        if (!*v99) {
          goto LABEL_284;
        }
        while (1)
        {
          unint64_t v101 = *((void *)v100 + 1);
          if (v95 == v101) {
            break;
          }
          if (v97 > 1)
          {
            if (v101 >= v94) {
              v101 %= v94;
            }
          }
          else
          {
            v101 &= v94 - 1;
          }
          if (v101 != v98) {
            goto LABEL_284;
          }
LABEL_164:
          v100 = *(unsigned __int8 **)v100;
          if (!v100) {
            goto LABEL_284;
          }
        }
        if (!sub_67CEC(v100 + 16, (unsigned __int8 *)v489)) {
          goto LABEL_164;
        }
        uint64_t v102 = *((void *)v100 + 5);
        CFDictionaryRef v103 = v491;
        if (v491) {
          CFRetain(v491);
        }
        CFDictionaryRef v488 = v103;
        sub_21C8C(v506, "propertyID");
        LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = 1635087216;
        int v104 = sub_170A5C(&v488, v506, (unsigned int *)v496);
        if ((v506[23] & 0x80000000) != 0) {
          operator delete(*(void **)v506);
        }
        uint64_t v105 = v425;
        if (!v103)
        {
          v406 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v406, "Could not construct");
        }
        CFRelease(v103);
        sub_27F0C0(&v486, v103, (const UInt8 *)"tunings");
        if (v487)
        {
          sub_27F148((uint64_t)&v481, v486);
          sub_27F148((uint64_t)&v475, v486);
          uint64_t v476 = (v478 - v477) >> 3;
          while (1)
          {
            if ((void)v481 && (unint64_t v106 = *((void *)&v481 + 1), *((void *)&v481 + 1) != (v483 - v482) >> 3))
            {
              uint64_t v107 = v475;
            }
            else
            {
              uint64_t v107 = v475;
              if (!v475 || v476 == (v478 - v477) >> 3) {
                goto LABEL_275;
              }
              unint64_t v106 = *((void *)&v481 + 1);
            }
            if ((void)v481 == v107 && v106 == v476)
            {
LABEL_275:
              if (v479)
              {
                v480 = v479;
                operator delete(v479);
              }
              if (v477)
              {
                v478 = v477;
                operator delete(v477);
              }
              if (v484)
              {
                v485 = v484;
                operator delete(v484);
              }
              if (v482)
              {
                v483 = v482;
                operator delete(v482);
              }
              goto LABEL_283;
            }
            if ((v106 & 0x8000000000000000) != 0 || v106 >= (v483 - v482) >> 3)
            {
              v396 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v396, "DictionaryRef_iterator iterator out of range.");
            }
            sub_20C54((uint64_t)v506, *(const __CFString **)&v482[8 * v106]);
            CFNumberRef v109 = (const __CFNumber *)*((void *)v484 + *((void *)&v481 + 1));
            if (v109) {
              CFRetain(*((CFTypeRef *)v484 + *((void *)&v481 + 1)));
            }
            std::string v473 = *(std::string *)v506;
            CFNumberRef v474 = v109;
            sub_6D838(&v496[0].__pn_, &v473);
            sub_6D8A0((std::__fs::filesystem::path *)v506, v105, v496);
            if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
            }
            if ((v506[23] & 0x80000000) != 0) {
              sub_21E8C(v496, *(void **)v506, *(unint64_t *)&v506[8]);
            }
            else {
              v496[0] = *(std::__fs::filesystem::path *)v506;
            }
            std::__fs::filesystem::path::__string_view v110 = std::__fs::filesystem::path::__extension(v496);
            if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
              if (v110.__size_) {
                goto LABEL_215;
              }
            }
            else if (v110.__size_)
            {
              goto LABEL_215;
            }
            sub_21C8C(v496, "");
            if (v104 == 1635087216) {
              break;
            }
            if (v104 == 1886548848)
            {
              if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                v496[0].__pn_.__r_.__value_.__l.__size_ = 10;
                v111 = (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
                v112 = (std::string::size_type *)(v496[0].__pn_.__r_.__value_.__r.__words[0] + 10);
              }
              else
              {
                *((unsigned char *)&v496[0].__pn_.__r_.__value_.__s + 23) = 10;
                v111 = v496;
                v112 = v424;
              }
              LOWORD(v111->__pn_.__r_.__value_.__r.__words[1]) = 28777;
              uint64_t v113 = *(void *)".propstrip";
LABEL_206:
              v111->__pn_.__r_.__value_.__r.__words[0] = v113;
              *(unsigned char *)v112 = 0;
            }
            std::string::size_type size = HIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]);
            char v115 = HIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]);
            if ((v496[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v496[0].__pn_.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              sub_6D838(&v493, &v496[0].__pn_);
              std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)v506, (const std::__fs::filesystem::path *)&v493);
              if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v493.__r_.__value_.__l.__data_);
              }
              char v115 = HIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]);
            }
            if (v115 < 0) {
              operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
            }
LABEL_215:
            if ((v506[23] & 0x80000000) != 0)
            {
              sub_21E8C(&v471, *(void **)v506, *(unint64_t *)&v506[8]);
              if ((v506[23] & 0x80000000) != 0) {
                operator delete(*(void **)v506);
              }
            }
            else
            {
              long long v471 = *(_OWORD *)v506;
              uint64_t v472 = *(void *)&v506[16];
            }
            if (v102 == 7)
            {
              if (!v474 || (CFTypeID v119 = CFGetTypeID(v474), v119 != CFNumberGetTypeID()))
              {
LABEL_249:
                v496[0].__pn_.__r_.__value_.__s.__data_[8] = 0;
                int v497 = 0;
                goto LABEL_250;
              }
              sub_1707BC(&v493, v426);
              v120 = (const void *)v493.__r_.__value_.__r.__words[0];
              if (!v493.__r_.__value_.__r.__words[0])
              {
                v407 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v407, "Could not construct");
              }
              CFTypeID TypeID = CFNumberGetTypeID();
              if (TypeID != CFGetTypeID(v120)
                || (int v492 = 0, !CFNumberGetValue((CFNumberRef)v120, kCFNumberIntType, &v492)))
              {
                v403 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v403, "Could not convert");
              }
              LODWORD(v496[0].__pn_.__r_.__value_.__r.__words[1]) = v492;
              int v497 = 4;
              CFRelease(v120);
            }
            else if (v102 == 6)
            {
              if (!v474) {
                goto LABEL_249;
              }
              CFTypeID v116 = CFGetTypeID(v474);
              if (v116 == CFNumberGetTypeID())
              {
                if (!v474)
                {
                  v408 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v408, "Could not construct");
                }
                CFNumberRef v117 = sub_22314(v474);
                std::string::size_type v118 = v117 & 3;
                if (!((unint64_t)v117 >> 32)) {
                  std::string::size_type v118 = 0;
                }
                v496[0].__pn_.__r_.__value_.__l.__size_ = v118;
                int v497 = 3;
              }
              else
              {
                if (!v474) {
                  goto LABEL_249;
                }
                CFTypeID v125 = CFGetTypeID(v474);
                if (v125 != CFDictionaryGetTypeID()) {
                  goto LABEL_249;
                }
                sub_688E8(&v493, v426);
                if (!v493.__r_.__value_.__r.__words[0])
                {
                  v412 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v412, "Could not construct");
                }
                unsigned __int16 v126 = sub_27F1CC((const __CFDictionary *)v493.__r_.__value_.__l.__data_, (const UInt8 *)"wind");
                if (!v493.__r_.__value_.__r.__words[0])
                {
                  v411 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v411, "Could not construct");
                }
                v496[0].__pn_.__r_.__value_.__l.__size_ = ((unsigned __int16)sub_27F1CC((const __CFDictionary *)v493.__r_.__value_.__l.__data_, (const UInt8 *)"dynamics") > 0x100u) | (2 * (v126 > 0x100u));
                int v497 = 3;
                CFArrayRef v127 = (const void *)v493.__r_.__value_.__r.__words[0];
                if (v493.__r_.__value_.__r.__words[0]) {
                  goto LABEL_244;
                }
              }
            }
            else
            {
              if (!v474) {
                goto LABEL_249;
              }
              CFTypeID v122 = CFGetTypeID(v474);
              if (v122 == CFBooleanGetTypeID())
              {
                if (v474)
                {
                  CFTypeID v123 = CFGetTypeID(v474);
                  if (v123 != CFBooleanGetTypeID())
                  {
                    v410 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v410, "Could not construct");
                  }
                  CFNumberRef v124 = v474;
                  if (v474) {
                    CFRetain(v474);
                  }
                }
                else
                {
                  CFNumberRef v124 = 0;
                }
                sub_208054(&v493, v124);
                if (!v493.__r_.__value_.__r.__words[0])
                {
                  v409 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v409, "Could not construct");
                }
                v496[0].__pn_.__r_.__value_.__s.__data_[8] = sub_157378((const __CFNumber *)v493.__r_.__value_.__l.__data_);
                int v497 = 0;
                CFArrayRef v127 = (const void *)v493.__r_.__value_.__r.__words[0];
                if (v493.__r_.__value_.__r.__words[0]) {
LABEL_244:
                }
                  CFRelease(v127);
              }
              else
              {
                if (!v474) {
                  goto LABEL_249;
                }
                CFTypeID v128 = CFGetTypeID(v474);
                if (v128 != CFNumberGetTypeID()) {
                  goto LABEL_249;
                }
                sub_1707BC(&v493, v426);
                v129 = (const void *)v493.__r_.__value_.__r.__words[0];
                if (!v493.__r_.__value_.__r.__words[0])
                {
                  v413 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v413, "Could not construct");
                }
                v496[0].__pn_.__r_.__value_.__s.__data_[8] = sub_7E85C((const __CFNumber *)v493.__r_.__value_.__l.__data_) != 0;
                int v497 = 0;
                CFRelease(v129);
              }
            }
LABEL_250:
            sub_24A024((uint64_t)v506, v102, v104, &v471, (uint64_t)v496);
            unint64_t v130 = v469;
            if (v469 >= v470)
            {
              unint64_t v132 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v469 - v468) >> 3);
              unint64_t v133 = v132 + 1;
              if (v132 + 1 > 0x1E1E1E1E1E1E1E1) {
                sub_60548();
              }
              if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v470 - v468) >> 3) > v133) {
                unint64_t v133 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v470 - v468) >> 3);
              }
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v470 - v468) >> 3) >= 0xF0F0F0F0F0F0F0) {
                unint64_t v134 = 0x1E1E1E1E1E1E1E1;
              }
              else {
                unint64_t v134 = v133;
              }
              v495 = v434;
              if (v134) {
                unint64_t v134 = (unint64_t)sub_249EB8(v134);
              }
              else {
                uint64_t v135 = 0;
              }
              v493.__r_.__value_.__r.__words[0] = v134;
              v493.__r_.__value_.__l.__size_ = v134 + 136 * v132;
              v493.__r_.__value_.__r.__words[2] = v493.__r_.__value_.__l.__size_;
              unint64_t v494 = v134 + 136 * v135;
              sub_27F200(v493.__r_.__value_.__l.__size_, (uint64_t)v506);
              v493.__r_.__value_.__r.__words[2] += 136;
              sub_249F00(&v468, &v493);
              unint64_t v131 = v469;
              sub_249FD4((uint64_t)&v493);
            }
            else
            {
              sub_27F200(v469, (uint64_t)v506);
              unint64_t v131 = v130 + 136;
            }
            unint64_t v469 = v131;
            if ((v513[7] & 0x80000000) != 0) {
              operator delete(v512[2]);
            }
            sub_8C710((uint64_t)v442);
            sub_8C710((uint64_t)p_size);
            if (SHIBYTE(v472) < 0) {
              operator delete((void *)v471);
            }
            if (v474) {
              CFRelease(v474);
            }
            if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v473.__r_.__value_.__l.__data_);
            }
            ++*((void *)&v481 + 1);
          }
          if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            v496[0].__pn_.__r_.__value_.__l.__size_ = 8;
            v111 = (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
            v112 = (std::string::size_type *)(v496[0].__pn_.__r_.__value_.__r.__words[0] + 8);
          }
          else
          {
            *((unsigned char *)&v496[0].__pn_.__r_.__value_.__s + 23) = 8;
            v111 = v496;
            v112 = p_size;
          }
          uint64_t v113 = 0x706972747375612ELL;
          goto LABEL_206;
        }
LABEL_283:
        sub_7E2E8((uint64_t)&v486);
LABEL_284:
        if (v491) {
          CFRelease(v491);
        }
        if (v490 < 0) {
          operator delete(v489[0]);
        }
        ++v502.__r_.__value_.__l.__size_;
      }
    }
LABEL_314:
    v140 = sub_D7374(v447, 1684303986);
    if (v140)
    {
      uint64_t v141 = sub_3857F4((int *)v140 + 6);
      uint64_t v142 = v141;
      uint64_t v143 = *(void *)(v141 + 8);
      if (v141 != v143)
      {
        uint64_t v444 = v448;
        uint64_t v445 = v141;
        while (1)
        {
          v144 = (int *)(v143 + 16);
          if (*(_DWORD *)(v143 + 16) != 17)
          {
            uint64_t v150 = sub_384FB4(v144);
            *(void *)v498 = v444 | (v150 << 32);
            LODWORD(v481) = 0;
            uint64_t v458 = 0x676C6F6264667070;
            int v459 = 0;
            char v151 = (void *)v452[1];
            if (v151 == v452) {
              goto LABEL_346;
            }
            do
            {
              sub_549A4((uint64_t *)v506, v151 + 2, "", 79);
              if (*(void *)v506
                && (uint64_t v152 = *(void *)(*(void *)v506 + 192),
                    (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v152 + 16))(v152, &v458)))
              {
                LODWORD(v481) = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, unsigned char *))(*(void *)v152 + 32))(v152, &v458, 8, v498);
                if (v481) {
                  uint64_t v153 = v152;
                }
                else {
                  uint64_t v153 = 0;
                }
              }
              else
              {
                uint64_t v153 = 0;
              }
              uint64_t v154 = *(void *)&v506[8];
              if (*(void *)&v506[8]) {
                sub_4636C(*(std::__shared_weak_count **)&v506[8]);
              }
              if (v153) {
                break;
              }
              char v151 = (void *)v151[1];
            }
            while (v151 != v452);
            if (!v153)
            {
LABEL_346:
              v164 = (os_log_t *)sub_32A48(20);
              int v165 = *v164;
              if (*v164 && os_log_type_enabled(*v164, OS_LOG_TYPE_INFO))
              {
                sub_2417C(v496, v448);
                int v166 = SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]);
                std::string::size_type v167 = v496[0].__pn_.__r_.__value_.__r.__words[0];
                sub_2417C(&v502, v150);
                v168 = v496;
                if (v166 < 0) {
                  v168 = (std::__fs::filesystem::path *)v167;
                }
                v169 = &v502;
                if ((v502.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v169 = (std::string *)v502.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)v506 = v440;
                *(void *)&v506[4] = "RouteUtilities.cpp";
                *(_WORD *)&v506[12] = 1024;
                *(_DWORD *)&v506[14] = 611;
                *(_WORD *)&v506[18] = 2080;
                *(void *)&v506[20] = v168;
                *(_WORD *)&v506[28] = 2080;
                *(void *)&v506[30] = v169;
                *(_WORD *)&v506[38] = 1024;
                *(_DWORD *)&v506[40] = v150;
                _os_log_impl(&def_1E50E8, v165, OS_LOG_TYPE_INFO, "%25s:%-5d Unable to find a physical device that provides device-specific data for DSP processor %s, property '%s' (%u)", v506, 0x2Cu);
                if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v502.__r_.__value_.__l.__data_);
                }
                uint64_t v142 = v445;
                if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
                }
              }
            }
            else if (v481)
            {
              __n128 v155 = __chkstk_darwin(v154);
              v157 = (char *)&v417 - ((v156 + 15) & 0x1FFFFFFF0);
              uint64_t v456 = 0x676C6F6264667070;
              int v457 = 0;
              (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char *, long long *, char *, __n128))(*(void *)v153 + 40))(v153, &v456, 8, v498, &v481, v157, v155);
              uint64_t v158 = sub_32A48(24);
              if (*(unsigned char *)(v158 + 8))
              {
                v159 = *(NSObject **)v158;
                if (*(void *)v158)
                {
                  if (os_log_type_enabled(*(os_log_t *)v158, OS_LOG_TYPE_DEBUG))
                  {
                    sub_2417C(v496, v150);
                    int v160 = SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]);
                    std::string::size_type v161 = v496[0].__pn_.__r_.__value_.__r.__words[0];
                    sub_2417C(&v502, v448);
                    v162 = v496;
                    if (v160 < 0) {
                      v162 = (std::__fs::filesystem::path *)v161;
                    }
                    v163 = &v502;
                    if ((v502.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      v163 = (std::string *)v502.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)v506 = v440;
                    *(void *)&v506[4] = "RouteUtilities.cpp";
                    *(_WORD *)&v506[12] = 1024;
                    *(_DWORD *)&v506[14] = 617;
                    *(_WORD *)&v506[18] = 2080;
                    *(void *)&v506[20] = v162;
                    *(_WORD *)&v506[28] = 1024;
                    *(_DWORD *)&v506[30] = v150;
                    *(_WORD *)&v506[34] = 2080;
                    *(void *)&v506[36] = v163;
                    _os_log_impl(&def_1E50E8, v159, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting device-specific property '%s' (%u) on DSP processor with type '%s'", v506, 0x2Cu);
                    if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v502.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
                    }
                  }
                }
              }
              (*(void (**)(uint64_t, uint64_t, char *, void, void, void))(*(void *)v461 + 56))(v461, v150, v157, v481, 0, 0);
              uint64_t v142 = v445;
            }
            goto LABEL_561;
          }
          uint64_t v145 = sub_3858FC(v144);
          sub_24955C((uint64_t)&v502, v145);
          std::string::size_type v475 = (std::string::size_type)&v475;
          uint64_t v476 = (uint64_t)&v475;
          v477 = 0;
          signed int v146 = sub_384FB4(v446);
          signed int v451 = v146;
          if (LODWORD(v502.__r_.__value_.__l.__data_) == 16)
          {
            uint64_t v170 = sub_3857F4((int *)&v502);
            sub_2499FC((uint64_t *)v506, v170);
            uint64_t v171 = *(void *)&v506[8];
            if (*(unsigned char **)&v506[8] == v506)
            {
              uint64_t v148 = 0;
              uint64_t v149 = 0;
            }
            else
            {
              uint64_t v148 = 0;
              v172 = 0;
              unint64_t v173 = 0;
              do
              {
                sub_3847B8((uint64_t)v496, (int *)(v171 + 16));
                int v174 = sub_384FB4((int *)v496);
                int v175 = v174;
                if ((unint64_t)v172 >= v173)
                {
                  uint64_t v176 = v172 - v148;
                  unint64_t v177 = v176 + 1;
                  if ((unint64_t)(v176 + 1) >> 62) {
                    sub_60548();
                  }
                  if ((uint64_t)(v173 - (void)v148) >> 1 > v177) {
                    unint64_t v177 = (uint64_t)(v173 - (void)v148) >> 1;
                  }
                  if (v173 - (unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v178 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v178 = v177;
                  }
                  if (v178) {
                    unint64_t v178 = (unint64_t)sub_46BF4(v178);
                  }
                  else {
                    uint64_t v179 = 0;
                  }
                  int v180 = (_DWORD *)(v178 + 4 * v176);
                  *int v180 = v175;
                  uint64_t v149 = (uint64_t)(v180 + 1);
                  while (v172 != v148)
                  {
                    int v181 = *--v172;
                    *--int v180 = v181;
                  }
                  unint64_t v173 = v178 + 4 * v179;
                  if (v148) {
                    operator delete(v148);
                  }
                  uint64_t v148 = v180;
                  signed int v146 = v451;
                }
                else
                {
                  _DWORD *v172 = v174;
                  uint64_t v149 = (uint64_t)(v172 + 1);
                }
                sub_3840C4((uint64_t)v496);
                uint64_t v171 = *(void *)(v171 + 8);
                v172 = (_DWORD *)v149;
              }
              while ((unsigned char *)v171 != v506);
            }
            sub_15AD5C((uint64_t *)v506);
            uint64_t v142 = v445;
          }
          else if (LODWORD(v502.__r_.__value_.__l.__data_) == 7)
          {
            int v147 = sub_384FB4((int *)&v502);
            uint64_t v148 = sub_46BF4(1uLL);
            *uint64_t v148 = v147;
            uint64_t v149 = (uint64_t)(v148 + 1);
          }
          else
          {
            uint64_t v148 = 0;
            uint64_t v149 = 0;
          }
          memset(v506, 0, 24);
          sub_46B38(v506, v148, v149, (v149 - (uint64_t)v148) >> 2);
          strcpy(&v506[24], "cwdv");
          v506[32] = 0;
          *(_DWORD *)&v506[40] = 3;
          v182 = v443;
          void *v443 = 0;
          v182[1] = 0;
          v507 = v182;
          v509[2] = 44739242;
          CFTypeRef v510 = 0;
          sub_3F33D0((uint64_t *)v496, v452, (uint64_t)v506);
          sub_8108((uint64_t *)&v475);
          std::string::size_type v183 = v496[0].__pn_.__r_.__value_.__r.__words[2];
          if (v496[0].__pn_.__r_.__value_.__r.__words[2])
          {
            v184 = (void *)v496[0].__pn_.__r_.__value_.__l.__size_;
            std::string::size_type v185 = v496[0].__pn_.__r_.__value_.__r.__words[0];
            uint64_t v186 = *(void *)v496[0].__pn_.__r_.__value_.__l.__size_;
            *(void *)(v186 + 8) = *(void *)(v496[0].__pn_.__r_.__value_.__r.__words[0] + 8);
            **(void **)(v185 + 8) = v186;
            uint64_t v187 = v475;
            *(void *)(v475 + 8) = v184;
            void *v184 = v187;
            *(void *)(v185 + 8) = &v475;
            std::string::size_type v475 = v185;
            v477 += v183;
            v496[0].__pn_.__r_.__value_.__r.__words[2] = 0;
          }
          sub_8108((uint64_t *)v496);
          if (v477) {
            break;
          }
          v188 = (os_log_t *)sub_32A48(13);
          v189 = *v188;
          if (*v188 && os_log_type_enabled(*v188, OS_LOG_TYPE_ERROR))
          {
            v493.__r_.__value_.__r.__words[0] = (std::string::size_type)&v493;
            v493.__r_.__value_.__l.__size_ = (std::string::size_type)&v493;
            v493.__r_.__value_.__r.__words[2] = 0;
            if (v148 != (_DWORD *)v149)
            {
              v190 = v148;
              do
              {
                sub_2417C(v498, *v190);
                v191 = operator new(0x28uLL);
                v191[1] = *(_OWORD *)v498;
                *((void *)v191 + 4) = *(void *)&v498[16];
                std::string::size_type v192 = v493.__r_.__value_.__r.__words[0];
                *(void *)v191 = v493.__r_.__value_.__r.__words[0];
                *((void *)v191 + 1) = &v493;
                *(void *)(v192 + 8) = v191;
                v493.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
                ++v493.__r_.__value_.__r.__words[2];
                ++v190;
              }
              while (v190 != (unsigned int *)v149);
            }
            sub_21C8C(v498, ",");
            sub_1688BC(&v481, (uint64_t)&v493, (uint64_t)v498);
            int v193 = SHIBYTE(v482);
            uint64_t v194 = (long long *)v481;
            sub_2417C(v489, v451);
            v195 = &v481;
            if (v193 < 0) {
              v195 = v194;
            }
            v196 = v489;
            if (v490 < 0) {
              v196 = (void **)v489[0];
            }
            LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v429;
            *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
            WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 596;
            WORD1(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v195;
            WORD2(v496[1].__pn_.__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)v496[1].__pn_.__r_.__value_.__r.__words + 6) = (std::string::size_type)v196;
            _os_log_impl(&def_1E50E8, v189, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"No ports found that match any of the ones requested (%s) for property %s, skipping it\"", (uint8_t *)v496, 0x26u);
            if (v490 < 0) {
              operator delete(v489[0]);
            }
            uint64_t v142 = v445;
            signed int v146 = v451;
            if (SHIBYTE(v482) < 0) {
              operator delete((void *)v481);
            }
            if ((v498[23] & 0x80000000) != 0) {
              operator delete(*(void **)v498);
            }
            sub_16A560(&v493);
          }
          if (v477) {
            break;
          }
LABEL_554:
          if (v510) {
            CFRelease(v510);
          }
          sub_463E0(v508);
          if (*(void *)v506)
          {
            *(void *)&v506[8] = *(void *)v506;
            operator delete(*(void **)v506);
          }
          if (v148) {
            operator delete(v148);
          }
          sub_8108((uint64_t *)&v475);
          sub_3840C4((uint64_t)v446);
          sub_3840C4((uint64_t)&v502);
LABEL_561:
          uint64_t v143 = *(void *)(v143 + 8);
          if (v142 == v143) {
            goto LABEL_562;
          }
        }
        sub_549A4((uint64_t *)&v493, (uint64_t *)(v476 + 16), "", 601);
        uint64_t v198 = v493.__r_.__value_.__r.__words[0];
        LODWORD(v471) = v146;
        v489[0] = 0;
        if (v146 > 1751937132)
        {
          if (v146 <= 1936749412)
          {
            if (v146 == 1751937133)
            {
              (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v461 + 72))(v461, 1751937133, 0, 0, 1.0);
              goto LABEL_552;
            }
            if (v146 != 1936745841)
            {
              if (v146 != 1936746611) {
                goto LABEL_500;
              }
              goto LABEL_442;
            }
            v214 = (os_log_t *)sub_32A48(20);
            v215 = *v214;
            if (*v214 && os_log_type_enabled(*v214, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v436;
              *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
              WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 361;
              _os_log_impl(&def_1E50E8, v215, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting SpEQ data from FDR", (uint8_t *)v496, 0x12u);
            }
            sub_1B24D8((uint64_t)v496, *(void *)(v198 + 192), COERCE_DOUBLE(1869968496));
            v482 = 0;
            long long v481 = 0u;
            int v216 = v496[1].__pn_.__r_.__value_.__s.__data_[0];
            CFDictionaryRef v217 = v496;
            if (!v496[1].__pn_.__r_.__value_.__s.__data_[0]) {
              CFDictionaryRef v217 = (std::__fs::filesystem::path *)&v481;
            }
            std::string::size_type v218 = v217->__pn_.__r_.__value_.__r.__words[0];
            int32x2_t v219 = vdup_n_s32(v496[1].__pn_.__r_.__value_.__s.__data_[0] == 0);
            v220.i64[0] = v219.u32[0];
            v220.i64[1] = v219.u32[1];
            int8x16_t v221 = vandq_s8(*(int8x16_t *)&v496[0].__pn_.__r_.__value_.__r.__words[1], (int8x16_t)vcgezq_s64(vshlq_n_s64(v220, 0x3FuLL)));
            *(_OWORD *)&v217->__pn_.__r_.__value_.__r.__words[1] = 0uLL;
            v217->__pn_.__r_.__value_.__r.__words[0] = 0;
            *(void *)v498 = v218;
            *(int8x16_t *)&v498[8] = v221;
            if ((void)v481) {
              operator delete((void *)v481);
            }
            if (v216 && v496[0].__pn_.__r_.__value_.__r.__words[0]) {
              operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
            }
            sub_44AE4C((uint64_t *)&v473, (uint64_t)v498);
            int v222 = (const void *)v473.__r_.__value_.__r.__words[0];
            signed int v146 = v451;
            if (v473.__r_.__value_.__r.__words[0])
            {
              v223 = (os_log_t *)sub_32A48(20);
              v224 = *v223;
              if (*v223 && os_log_type_enabled(*v223, OS_LOG_TYPE_DEFAULT))
              {
                CFStringRef v225 = CFCopyDescription(v222);
                sub_20B40((uint64_t)&v481, v225);
                if (v225) {
                  CFRelease(v225);
                }
                int v226 = &v481;
                if (SHIBYTE(v482) < 0) {
                  int v226 = (long long *)v481;
                }
                LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v435;
                *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 368;
                WORD1(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v226;
                _os_log_impl(&def_1E50E8, v224, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR Speaker EQ data: %s", (uint8_t *)v496, 0x1Cu);
                if (SHIBYTE(v482) < 0) {
                  operator delete((void *)v481);
                }
              }
              sub_249A84((uint64_t)v496, (int *)&v471);
              sub_249BAC((uint64_t)v450, (const void **)&v473.__r_.__value_.__l.__data_);
              *(void *)&long long v481 = v496;
              *((void *)&v481 + 1) = 2;
              CFDictionaryRef v202 = sub_4D3D8((uint64_t)&v481);
              uint64_t v227 = 0;
              v489[0] = v202;
              do
              {
                __int16 v228 = *(std::string::pointer *)((char *)&v496[1].__pn_.__r_.__value_.__l.__data_ + v227 * 8);
                if (v228) {
                  CFRelease(v228);
                }
                v229 = (const void *)v496[0].__pn_.__r_.__value_.__r.__words[v227 + 2];
                if (v229) {
                  CFRelease(v229);
                }
                v227 -= 2;
              }
              while (v227 != -4);
              if (v222) {
                CFRelease(v222);
              }
              uint64_t v142 = v445;
              signed int v146 = v451;
            }
            else
            {
              v258 = (os_log_t *)sub_32A48(20);
              v259 = *v258;
              if (*v258 && os_log_type_enabled(*v258, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v436;
                *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 373;
                _os_log_impl(&def_1E50E8, v259, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR doesn't have Speaker EQ data", (uint8_t *)v496, 0x12u);
              }
              CFDictionaryRef v202 = 0;
            }
            v206 = *(void **)v498;
            if (!*(void *)v498) {
              goto LABEL_541;
            }
            *(void *)&v498[8] = *(void *)v498;
            goto LABEL_540;
          }
          switch(v146)
          {
            case 1936749413:
              float v240 = sub_24C904((uint64_t)v493.__r_.__value_.__l.__data_);
              (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v461 + 72))(v461, 1936749413, 0, 0, v240);
              goto LABEL_552;
            case 1936749683:
              v230 = (os_log_t *)sub_32A48(20);
              uint64_t v231 = *v230;
              if (*v230 && os_log_type_enabled(*v230, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v436;
                *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 347;
                _os_log_impl(&def_1E50E8, v231, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting Speaker Thiele-Small data From FDR", (uint8_t *)v496, 0x12u);
              }
              sub_44A7E8((uint64_t *)&v481);
              v232 = (const void *)v481;
              if (!(void)v481)
              {
                v260 = (os_log_t *)sub_32A48(20);
                v261 = *v260;
                if (*v260 && os_log_type_enabled(*v260, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v436;
                  *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                  WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 355;
                  _os_log_impl(&def_1E50E8, v261, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR doesn't have Speaker Thiele-Small data", (uint8_t *)v496, 0x12u);
                }
                goto LABEL_447;
              }
              v233 = (os_log_t *)sub_32A48(20);
              v234 = *v233;
              if (*v233 && os_log_type_enabled(*v233, OS_LOG_TYPE_DEFAULT))
              {
                CFStringRef v235 = CFCopyDescription(v232);
                sub_20B40((uint64_t)v498, v235);
                if (v235) {
                  CFRelease(v235);
                }
                v236 = v498;
                if (v498[23] < 0) {
                  v236 = *(unsigned char **)v498;
                }
                LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v435;
                *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 350;
                WORD1(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v236;
                _os_log_impl(&def_1E50E8, v234, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR Speaker Thiele-Small data: %s", (uint8_t *)v496, 0x1Cu);
                if ((v498[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v498);
                }
              }
              sub_249A84((uint64_t)v496, (int *)&v471);
              sub_22210((CFStringRef *)v450, "cfobject");
              CFRetain(v232);
              v496[1].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v232;
              *(void *)v498 = v496;
              *(void *)&v498[8] = 2;
              CFDictionaryRef v202 = sub_4D3D8((uint64_t)v498);
              uint64_t v237 = 0;
              v489[0] = v202;
              do
              {
                v238 = *(std::string::pointer *)((char *)&v496[1].__pn_.__r_.__value_.__l.__data_ + v237 * 8);
                if (v238) {
                  CFRelease(v238);
                }
                v239 = (const void *)v496[0].__pn_.__r_.__value_.__r.__words[v237 + 2];
                if (v239) {
                  CFRelease(v239);
                }
                v237 -= 2;
              }
              while (v237 != -4);
              if (v232)
              {
                CFRelease(v232);
                uint64_t v142 = v445;
                signed int v146 = v451;
                goto LABEL_541;
              }
              goto LABEL_514;
            case 1953655149:
              sub_24FB5C((uint64_t)v498, (uint64_t)v493.__r_.__value_.__l.__data_);
              v200 = *(void **)v498;
              CFDataRef v201 = CFDataCreate(0, *(const UInt8 **)v498, *(void *)&v498[8] - *(void *)v498);
              if (!v201)
              {
                v404 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v404, "Could not construct");
              }
              sub_1534E8(&v473, v201);
              sub_249A84((uint64_t)v496, (int *)&v471);
              sub_249B60((uint64_t)v450, (const void **)&v473.__r_.__value_.__l.__data_);
              *(void *)&long long v481 = v496;
              *((void *)&v481 + 1) = 2;
              CFDictionaryRef v202 = sub_4D3D8((uint64_t)&v481);
              uint64_t v203 = 0;
              v489[0] = v202;
              do
              {
                v204 = *(std::string::pointer *)((char *)&v496[1].__pn_.__r_.__value_.__l.__data_ + v203 * 8);
                if (v204) {
                  CFRelease(v204);
                }
                v205 = (const void *)v496[0].__pn_.__r_.__value_.__r.__words[v203 + 2];
                if (v205) {
                  CFRelease(v205);
                }
                v203 -= 2;
              }
              while (v203 != -4);
              if (v473.__r_.__value_.__r.__words[0]) {
                CFRelease(v473.__r_.__value_.__l.__data_);
              }
              uint64_t v142 = v445;
              signed int v146 = v451;
              if (!v200) {
                goto LABEL_541;
              }
              v206 = v200;
LABEL_540:
              operator delete(v206);
              goto LABEL_541;
          }
LABEL_500:
          v241 = (os_log_t *)sub_32A48(24);
          os_log_t v242 = *v241;
          if (*v241 && os_log_type_enabled(*v241, OS_LOG_TYPE_ERROR))
          {
            sub_2417C(v498, v146);
            v243 = v498;
            if (v498[23] < 0) {
              v243 = *(unsigned char **)v498;
            }
            LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v435;
            *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
            WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 378;
            WORD1(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v243;
            v244 = v242;
            v245 = "%25s:%-5d Unsupported device specific property: %s";
            uint32_t v246 = 28;
LABEL_528:
            _os_log_impl(&def_1E50E8, v244, OS_LOG_TYPE_ERROR, v245, (uint8_t *)v496, v246);
            if ((v498[23] & 0x80000000) != 0) {
              operator delete(*(void **)v498);
            }
            goto LABEL_552;
          }
          goto LABEL_552;
        }
        if (v146 <= 64002)
        {
          if (v146 == 1)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v461 + 152))(v461) == 1936747629)
            {
              float v213 = sub_24C904(v198);
              (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v461 + 72))(v461, 1, 0, 0, v213);
            }
            else
            {
              v254 = (os_log_t *)sub_32A48(20);
              os_log_t v255 = *v254;
              if (*v254 && os_log_type_enabled(*v254, OS_LOG_TYPE_ERROR))
              {
                unsigned int v256 = (*(uint64_t (**)(uint64_t))(*(void *)v461 + 152))(v461);
                sub_2417C(v498, v256);
                v257 = v498;
                if (v498[23] < 0) {
                  v257 = *(unsigned char **)v498;
                }
                LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v429;
                *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 255;
                WORD1(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 1;
                LOWORD(v496[1].__pn_.__r_.__value_.__l.__data_) = 2080;
                *(std::string::size_type *)((char *)v496[1].__pn_.__r_.__value_.__r.__words + 2) = (std::string::size_type)v257;
                v244 = v255;
                v245 = "%25s:%-5d No known process for collecting port specific data for parameter %d on processor type %s";
                uint32_t v246 = 34;
                goto LABEL_528;
              }
            }
LABEL_552:
            if (v493.__r_.__value_.__l.__size_) {
              sub_4636C((std::__shared_weak_count *)v493.__r_.__value_.__l.__size_);
            }
            goto LABEL_554;
          }
          if (v146 != 64001) {
            goto LABEL_500;
          }
        }
        else
        {
          if (v146 == 64003)
          {
LABEL_442:
            LODWORD(v473.__r_.__value_.__l.__data_) = 0;
            if (*(_DWORD *)(v493.__r_.__value_.__r.__words[0] + 148) == 1885544823)
            {
              unint64_t v212 = sub_249BF8(1885544823, *(void *)(v493.__r_.__value_.__r.__words[0] + 192));
              if (HIDWORD(v212)) {
                LODWORD(v473.__r_.__value_.__l.__data_) = v212;
              }
            }
            if (v146 == 64003)
            {
              (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, void, void))(*(void *)v461 + 56))(v461, 64003, &v473, 4, 0, 0);
LABEL_447:
              CFDictionaryRef v202 = 0;
              goto LABEL_541;
            }
            CFDataRef v247 = CFDataCreate(0, (const UInt8 *)&v473, 4);
            if (!v247)
            {
              v405 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v405, "Could not construct");
            }
            sub_1534E8(&v481, v247);
            sub_249A84((uint64_t)v496, (int *)&v471);
            sub_249B60((uint64_t)v450, (const void **)&v481);
            *(void *)v498 = v496;
            *(void *)&v498[8] = 2;
            CFDictionaryRef v202 = sub_4D3D8((uint64_t)v498);
            uint64_t v248 = 0;
            v489[0] = v202;
            do
            {
              v249 = *(std::string::pointer *)((char *)&v496[1].__pn_.__r_.__value_.__l.__data_ + v248 * 8);
              if (v249) {
                CFRelease(v249);
              }
              v250 = (const void *)v496[0].__pn_.__r_.__value_.__r.__words[v248 + 2];
              if (v250) {
                CFRelease(v250);
              }
              v248 -= 2;
            }
            while (v248 != -4);
            if ((void)v481) {
              CFRelease((CFTypeRef)v481);
            }
LABEL_514:
            uint64_t v142 = v445;
            signed int v146 = v451;
            goto LABEL_541;
          }
          if (v146 != 1668641398)
          {
            if (v146 == 1751935092)
            {
              v197.n128_u32[0] = 1174423552;
              if (*(_DWORD *)(v493.__r_.__value_.__r.__words[0] + 148) == 1885544823)
              {
                unint64_t v199 = sub_249BF8(1885544823, *(void *)(v493.__r_.__value_.__r.__words[0] + 192));
                if (!HIDWORD(v199) || !v199) {
                  goto LABEL_552;
                }
                v197.n128_f32[0] = (float)v199;
              }
              (*(void (**)(uint64_t, uint64_t, void, void, __n128))(*(void *)v461 + 72))(v461, 1751935092, 0, 0, v197);
              goto LABEL_552;
            }
            goto LABEL_500;
          }
        }
        sub_24CF5C((CFDictionaryRef *)&v481, (uint64_t)v493.__r_.__value_.__l.__data_);
        sub_24CB94(v198);
        v207 = (os_log_t *)sub_32A48(20);
        int v208 = *v207;
        if (*v207 && os_log_type_enabled(*v207, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v209 = CFCopyDescription((CFTypeRef)v481);
          sub_20B40((uint64_t)v498, v209);
          if (v209) {
            CFRelease(v209);
          }
          int v210 = v498;
          if (v498[23] < 0) {
            int v210 = *(unsigned char **)v498;
          }
          LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v435;
          *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
          WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 279;
          WORD1(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v210;
          _os_log_impl(&def_1E50E8, v208, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Headset volume curve: %s", (uint8_t *)v496, 0x1Cu);
          if ((v498[23] & 0x80000000) != 0) {
            operator delete(*(void **)v498);
          }
        }
        if (v146 == 64001)
        {
          int v211 = (const void *)v481;
          v496[0].__pn_.__r_.__value_.__r.__words[0] = v481;
          (*(void (**)(uint64_t, uint64_t, std::__fs::filesystem::path *, uint64_t, void, void))(*(void *)v461 + 56))(v461, 64001, v496, 8, 0, 0);
          CFDictionaryRef v202 = 0;
          if (!v211)
          {
LABEL_541:
            if (v202)
            {
              v262 = (os_log_t *)sub_32A48(20);
              v263 = *v262;
              if (*v262 && os_log_type_enabled(*v262, OS_LOG_TYPE_DEFAULT))
              {
                sub_2417C(v498, v146);
                v264 = v498;
                if (v498[23] < 0) {
                  v264 = *(unsigned char **)v498;
                }
                LODWORD(v496[0].__pn_.__r_.__value_.__l.__data_) = v435;
                *(std::string::size_type *)((char *)v496[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v496[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 384;
                WORD1(v496[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v496[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v264;
                _os_log_impl(&def_1E50E8, v263, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property %s on the DSP Processor instance", (uint8_t *)v496, 0x1Cu);
                if ((v498[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v498);
                }
              }
              sub_384254((uint64_t)&v481, v202);
              *(_DWORD *)v498 = 1735553138;
              sub_3847B8((uint64_t)v441, (int *)&v481);
              sub_15A1EC((uint64_t)v496, (int *)v498, 1);
              sub_3840C4((uint64_t)v441);
              sub_3840C4((uint64_t)&v481);
              sub_2488A0((uint64_t)v496, v461);
              sub_D7EFC((void *)v496[0].__pn_.__r_.__value_.__r.__words[2]);
              v265 = (void *)v496[0].__pn_.__r_.__value_.__r.__words[0];
              v496[0].__pn_.__r_.__value_.__r.__words[0] = 0;
              if (v265) {
                operator delete(v265);
              }
              if (v489[0]) {
                CFRelease(v489[0]);
              }
            }
            goto LABEL_552;
          }
        }
        else
        {
          sub_249A84((uint64_t)v496, (int *)&v471);
          sub_249BAC((uint64_t)v450, (const void **)&v481);
          *(void *)v498 = v496;
          *(void *)&v498[8] = 2;
          CFDictionaryRef v202 = sub_4D3D8((uint64_t)v498);
          uint64_t v251 = 0;
          v489[0] = v202;
          do
          {
            v252 = *(std::string::pointer *)((char *)&v496[1].__pn_.__r_.__value_.__l.__data_ + v251 * 8);
            if (v252) {
              CFRelease(v252);
            }
            v253 = (const void *)v496[0].__pn_.__r_.__value_.__r.__words[v251 + 2];
            if (v253) {
              CFRelease(v253);
            }
            v251 -= 2;
          }
          while (v251 != -4);
          int v211 = (const void *)v481;
          uint64_t v142 = v445;
          signed int v146 = v451;
          if (!(void)v481) {
            goto LABEL_541;
          }
        }
        CFRelease(v211);
        goto LABEL_541;
      }
    }
LABEL_562:
    v266 = (void **)*v438;
    v267 = (void **)v438[1];
    while (v266 != v267)
    {
      v268 = *v266;
      if (!*v266)
      {
        v392 = (os_log_t *)sub_32A48(13);
        v393 = *v392;
        if (*v392 && os_log_type_enabled(*v392, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v496, v448);
          v394 = (v496[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? v496
               : (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
          *(_DWORD *)v506 = v435;
          *(void *)&v506[4] = "RouteUtilities.cpp";
          *(_WORD *)&v506[12] = 1024;
          *(_DWORD *)&v506[14] = 628;
          *(_WORD *)&v506[18] = 2080;
          *(void *)&v506[20] = v394;
          _os_log_impl(&def_1E50E8, v393, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [config is NULL]: \"Routing database error: NULL configuration in list of configs for processor of type '%s'\"", v506, 0x1Cu);
          if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
          }
        }
        v395 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v395, "Routing database error: NULL configuration in list of configs for processor of type '%s'");
      }
      v269 = sub_D7374(*v266, 1685090932);
      if (v269)
      {
        unsigned int v270 = sub_384FB4((int *)v269 + 6);
        if (v448 != v270)
        {
          v271 = (os_log_t *)sub_32A48(13);
          v272 = *v271;
          if (*v271)
          {
            if (os_log_type_enabled(*v271, OS_LOG_TYPE_ERROR))
            {
              sub_2417C(v496, v270);
              int v273 = SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]);
              std::string::size_type v274 = v496[0].__pn_.__r_.__value_.__r.__words[0];
              sub_2417C(&v502, v448);
              v275 = v496;
              if (v273 < 0) {
                v275 = (std::__fs::filesystem::path *)v274;
              }
              v276 = &v502;
              if ((v502.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v276 = (std::string *)v502.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v506 = v440;
              *(void *)&v506[4] = "RouteUtilities.cpp";
              *(_WORD *)&v506[12] = 1024;
              *(_DWORD *)&v506[14] = 636;
              *(_WORD *)&v506[18] = 2048;
              *(void *)&v506[20] = v268;
              *(_WORD *)&v506[28] = 2080;
              *(void *)&v506[30] = v275;
              *(_WORD *)&v506[38] = 2080;
              *(void *)&v506[40] = v276;
              _os_log_impl(&def_1E50E8, v272, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Type for config at %p ('%s') does not match master config's type ('%s')\"", v506, 0x30u);
              if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v502.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
              }
            }
          }
        }
      }
      v277 = sub_D7374(v268, 1685086576);
      if (v277)
      {
        int v280 = *((_DWORD *)v277 + 6);
        v278 = (int *)(v277 + 3);
        int v279 = v280;
        if (v280 == 15)
        {
          for (j = *(float **)(sub_3855E4(v278) + 16); j; j = *(float **)j)
          {
            uint64_t v282 = *((unsigned int *)j + 4);
            float v283 = sub_3850BC(j + 6);
            (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v461 + 72))(v461, v282, 0, 0, v283);
          }
        }
        else if (v279 == 13)
        {
          *(void *)v506 = 0;
          *(void *)v506 = sub_3853D4(v278);
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v461 + 96))(v461, v506);
        }
      }
      ++v266;
    }
    v284 = sub_D7374(v447, 1684171107);
    if (v284)
    {
      uint64_t v285 = sub_384FB4((int *)v284 + 6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v461 + 232))(v461, 1, v285);
    }
    v286 = sub_D7374(v447, 1684172643);
    if (v286)
    {
      uint64_t v287 = sub_384FB4((int *)v286 + 6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v461 + 232))(v461, 2, v287);
    }
    v288 = sub_D7374(v447, 1685088623);
    if (v288)
    {
      for (k = *(int **)(sub_3855E4((int *)v288 + 6) + 16); k; k = *(int **)k)
      {
        uint64_t v290 = k[4];
        v291 = (void *)sub_3857F4(k + 6);
        if (v291[2] != 2)
        {
          v292 = (os_log_t *)sub_32A48(13);
          v293 = *v292;
          if (*v292)
          {
            if (os_log_type_enabled(*v292, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v506 = v436;
              *(void *)&v506[4] = "RouteUtilities.cpp";
              *(_WORD *)&v506[12] = 1024;
              *(_DWORD *)&v506[14] = 694;
              _os_log_impl(&def_1E50E8, v293, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid channel list size\"", v506, 0x12u);
            }
          }
        }
        uint64_t v294 = sub_384FB4((int *)(v291[1] + 16));
        uint64_t v295 = sub_384FB4((int *)(*v291 + 16));
        if (v294) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v461 + 240))(v461, 1, v290, v294);
        }
        if (v295) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v461 + 240))(v461, 2, v290, v295);
        }
      }
    }
    v296 = sub_D7374(v447, 1970496883);
    if (v296)
    {
      uint64_t v297 = sub_3852CC((int *)v296 + 6);
      if (v297)
      {
        if (v466)
        {
          if (v464 != (void *)v297)
          {
            int v465 = *(_DWORD *)(v297 + 32);
            sub_6EFDC(v464, *(uint64_t **)(v297 + 16));
          }
        }
        else
        {
          sub_6E644((uint64_t)v464, v297);
          char v466 = 1;
        }
      }
    }
    uint64_t v310 = *v437;
    if (*v437)
    {
      uint64_t v454 = v461;
      v455 = v462;
      if (v462) {
        atomic_fetch_add_explicit(&v462->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v311 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v310 + 24))(v310, &v454);
      if (v455) {
        sub_4636C(v455);
      }
      if (v311)
      {
        v312 = (os_log_t *)sub_32A48(20);
        v313 = *v312;
        if (*v312)
        {
          if (os_log_type_enabled(*v312, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v506 = v435;
            *(void *)&v506[4] = "RouteUtilities.cpp";
            *(_WORD *)&v506[12] = 1024;
            *(_DWORD *)&v506[14] = 727;
            *(_WORD *)&v506[18] = 1024;
            *(_DWORD *)&v506[20] = v311;
            _os_log_impl(&def_1E50E8, v313, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %u adding DSP processor", v506, 0x18u);
          }
        }
      }
    }
    if (v462) {
      sub_4636C(v462);
    }
    int v34 = (void ***)(v438 + 3);
  }
  while (v438 + 3 != v433);
  if (!v310) {
    goto LABEL_760;
  }
  if (v453 == v35)
  {
    if ((unsigned __int16)v431 >= 0x101u) {
      goto LABEL_669;
    }
LABEL_646:
    if ((unsigned __int16)v430 >= 0x101u) {
      goto LABEL_689;
    }
    goto LABEL_722;
  }
  memset(v498, 0, sizeof(v498));
  sub_6E5D0(v498, (uint64_t *)v453, (uint64_t *)v35, v35 - v453);
  std::string::size_type v314 = *(void *)(v310 + 16);
  v496[0].__pn_.__r_.__value_.__r.__words[0] = *(void *)(v310 + 8);
  v496[0].__pn_.__r_.__value_.__l.__size_ = v314;
  if (v314) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v314 + 16), 1uLL, memory_order_relaxed);
  }
  memset(&v496[0].__pn_.__r_.__value_.__r.__words[2], 0, sizeof(std::__fs::filesystem::path));
  sub_6E5D0(&v496[0].__pn_.__r_.__value_.__s.__data_[16], *(uint64_t **)v498, *(uint64_t **)&v498[8], (uint64_t)(*(void *)&v498[8] - *(void *)v498) >> 3);
  v503 = 0;
  v315 = (char *)operator new(0x30uLL);
  long long v316 = *(_OWORD *)&v496[0].__pn_.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v315 + 8) = *(_OWORD *)&v496[0].__pn_.__r_.__value_.__l.__data_;
  *(void *)v315 = off_626418;
  *(_OWORD *)&v496[0].__pn_.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v315 + 24) = v316;
  *((void *)v315 + 5) = v496[1].__pn_.__r_.__value_.__l.__size_;
  memset(&v496[0].__pn_.__r_.__value_.__r.__words[2], 0, sizeof(std::__fs::filesystem::path));
  v503 = (std::string *)v315;
  v317 = (char *)operator new(0x88uLL);
  *(_OWORD *)(v317 + 8) = 0u;
  *(void *)v317 = off_634A60;
  v318 = v317 + 24;
  *((_OWORD *)v317 + 2) = 0u;
  *((void *)v317 + 3) = off_6349B0;
  v319 = v317 + 48;
  if ((*(char *)(v310 + 735) & 0x80000000) == 0)
  {
    long long v320 = *(_OWORD *)(v310 + 712);
    *((void *)v317 + 8) = *(void *)(v310 + 728);
    *(_OWORD *)v319 = v320;
    v321 = v317 + 96;
    goto LABEL_636;
  }
  sub_21E8C(v319, *(void **)(v310 + 712), *(void *)(v310 + 720));
  v315 = (char *)v503;
  if (!v503)
  {
    v322 = (std::string **)(v317 + 96);
    goto LABEL_637;
  }
  v321 = v317 + 96;
  if (v503 != &v502)
  {
LABEL_636:
    v322 = &v503;
    void *v321 = v315;
LABEL_637:
    *v322 = 0;
    goto LABEL_638;
  }
  void *v321 = v317 + 72;
  (*(void (**)(std::string *))(v502.__r_.__value_.__r.__words[0] + 24))(&v502);
LABEL_638:
  *((_DWORD *)v317 + 26) = 0;
  v323 = &off_634A08;
  if (!v427) {
    v323 = &off_6349F0;
  }
  *((_OWORD *)v317 + 7) = *(_OWORD *)v323;
  *((void *)v317 + 16) = v323[2];
  v324 = (std::__shared_weak_count *)*((void *)v317 + 5);
  if (v324)
  {
    if (v324->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v317 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v317 + 2, 1uLL, memory_order_relaxed);
      *((void *)v317 + 4) = v318;
      *((void *)v317 + 5) = v317;
      std::__shared_weak_count::__release_weak(v324);
      goto LABEL_652;
    }
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v317 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v317 + 2, 1uLL, memory_order_relaxed);
    *((void *)v317 + 4) = v318;
    *((void *)v317 + 5) = v317;
LABEL_652:
    sub_4636C((std::__shared_weak_count *)v317);
  }
  v326 = *(void **)(v310 + 344);
  unint64_t v325 = *(void *)(v310 + 352);
  if ((unint64_t)v326 >= v325)
  {
    uint64_t v328 = *(void *)(v310 + 336);
    uint64_t v329 = ((uint64_t)v326 - v328) >> 4;
    unint64_t v330 = v329 + 1;
    if ((unint64_t)(v329 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v331 = v325 - v328;
    if (v331 >> 3 > v330) {
      unint64_t v330 = v331 >> 3;
    }
    if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v332 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v332 = v330;
    }
    *(void *)&v506[32] = v310 + 352;
    v333 = (char *)sub_10724(v332);
    *(void *)&long long v334 = v317 + 24;
    *((void *)&v334 + 1) = v317;
    v335 = &v333[16 * v329];
    *(void *)v506 = v333;
    *(void *)&v506[8] = v335;
    *(void *)&v506[24] = &v333[16 * v336];
    *(_OWORD *)v335 = v334;
    *(void *)&v506[16] = v335 + 16;
    sub_FBB48((uint64_t *)(v310 + 336), v506);
    v327 = *(void **)(v310 + 344);
    sub_98E24((uint64_t)v506);
  }
  else
  {
    void *v326 = v318;
    v326[1] = v317;
    v327 = v326 + 2;
  }
  *(void *)(v310 + 344) = v327;
  sub_1BA75C(&v502);
  if (v496[0].__pn_.__r_.__value_.__r.__words[2]) {
    operator delete((void *)v496[0].__pn_.__r_.__value_.__r.__words[2]);
  }
  unsigned __int16 v337 = v431;
  if (v496[0].__pn_.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v496[0].__pn_.__r_.__value_.__l.__size_);
  }
  if (*(void *)v498) {
    operator delete(*(void **)v498);
  }
  uint64_t v310 = *v437;
  if (v337 <= 0x100u) {
    goto LABEL_646;
  }
LABEL_669:
  std::string::size_type v339 = *(void *)(v310 + 8);
  std::string::size_type v338 = *(void *)(v310 + 16);
  if (v338) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v338 + 16), 1uLL, memory_order_relaxed);
  }
  v496[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)off_626460;
  v496[0].__pn_.__r_.__value_.__l.__size_ = v339;
  v496[0].__pn_.__r_.__value_.__r.__words[2] = v338;
  v496[1].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v496;
  v340 = (char *)operator new(0x80uLL);
  v341 = (std::__shared_weak_count *)v340;
  *(_OWORD *)(v340 + 8) = 0u;
  *(void *)v340 = off_61FC08;
  v342 = v340 + 24;
  *((_OWORD *)v340 + 2) = 0u;
  *((void *)v340 + 3) = &off_61FB80;
  if (*(char *)(v310 + 735) < 0)
  {
    sub_21E8C(v340 + 48, *(void **)(v310 + 712), *(void *)(v310 + 720));
  }
  else
  {
    long long v343 = *(_OWORD *)(v310 + 712);
    *((void *)v340 + 8) = *(void *)(v310 + 728);
    *((_OWORD *)v340 + 3) = v343;
  }
  sub_AA384((uint64_t)&v341[3], (uint64_t)v496);
  v341[4].__shared_owners_ = 0;
  sub_54050(&v341[4].__shared_weak_owners_);
  shared_weak_owners = (std::__shared_weak_count *)v341[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v341->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v341->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v341[1].__shared_owners_ = (uint64_t)v342;
      v341[1].__shared_weak_owners_ = (uint64_t)v341;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      goto LABEL_678;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v341->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v341->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v341[1].__shared_owners_ = (uint64_t)v342;
    v341[1].__shared_weak_owners_ = (uint64_t)v341;
LABEL_678:
    sub_4636C(v341);
  }
  v346 = *(void **)(v310 + 344);
  unint64_t v345 = *(void *)(v310 + 352);
  if ((unint64_t)v346 >= v345)
  {
    uint64_t v348 = *(void *)(v310 + 336);
    uint64_t v349 = ((uint64_t)v346 - v348) >> 4;
    unint64_t v350 = v349 + 1;
    if ((unint64_t)(v349 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v351 = v345 - v348;
    if (v351 >> 3 > v350) {
      unint64_t v350 = v351 >> 3;
    }
    if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v352 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v352 = v350;
    }
    *(void *)&v506[32] = v310 + 352;
    v353 = (char *)sub_10724(v352);
    *(void *)&long long v354 = v342;
    *((void *)&v354 + 1) = v341;
    v355 = &v353[16 * v349];
    *(void *)v506 = v353;
    *(void *)&v506[8] = v355;
    *(void *)&v506[24] = &v353[16 * v356];
    *(_OWORD *)v355 = v354;
    *(void *)&v506[16] = v355 + 16;
    sub_FBB48((uint64_t *)(v310 + 336), v506);
    v347 = *(void **)(v310 + 344);
    sub_98E24((uint64_t)v506);
  }
  else
  {
    void *v346 = v342;
    v346[1] = v341;
    v347 = v346 + 2;
  }
  unsigned int v357 = (unsigned __int16)v430;
  *(void *)(v310 + 344) = v347;
  sub_56A54(v496);
  uint64_t v310 = *v437;
  if (v357 > 0x100)
  {
LABEL_689:
    if (*(char *)(v310 + 735) < 0) {
      sub_21E8C(v496, *(void **)(v310 + 712), *(void *)(v310 + 720));
    }
    else {
      v496[0] = *(std::__fs::filesystem::path *)(v310 + 712);
    }
    v358 = *(std::__shared_weak_count_vtbl **)(v310 + 8);
    v359 = *(std::__shared_weak_count **)(v310 + 16);
    if (v359) {
      atomic_fetch_add_explicit(&v359->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v360 = (std::__shared_weak_count *)operator new(0x68uLL);
    v361 = v360;
    v360->__shared_owners_ = 0;
    v360->__shared_weak_owners_ = 0;
    v360->__vftable = (std::__shared_weak_count_vtbl *)off_62B060;
    v362 = v360 + 1;
    if (v359) {
      atomic_fetch_add_explicit(&v359->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v360[1].__shared_owners_ = 0;
    v360[1].__shared_weak_owners_ = 0;
    v360[1].__vftable = (std::__shared_weak_count_vtbl *)off_62AFD8;
    if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      sub_21E8C(&v360[2], v496[0].__pn_.__r_.__value_.__l.__data_, v496[0].__pn_.__r_.__value_.__l.__size_);
    }
    else {
      v360[2] = (std::__shared_weak_count)v496[0];
    }
    v361[3].__vftable = v358;
    v361[3].__shared_owners_ = (uint64_t)v359;
    if (v359) {
      atomic_fetch_add_explicit(&v359->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_294118(&v361[3].__shared_weak_owners_);
    if (v359) {
      std::__shared_weak_count::__release_weak(v359);
    }
    v363 = (std::__shared_weak_count *)v361[1].__shared_weak_owners_;
    if (v363)
    {
      if (v363->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit(&v361->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v361->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v361[1].__shared_owners_ = (uint64_t)v362;
        v361[1].__shared_weak_owners_ = (uint64_t)v361;
        std::__shared_weak_count::__release_weak(v363);
        goto LABEL_707;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v361->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v361->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v361[1].__shared_owners_ = (uint64_t)v362;
      v361[1].__shared_weak_owners_ = (uint64_t)v361;
LABEL_707:
      sub_4636C(v361);
    }
    v365 = *(std::__shared_weak_count ***)(v310 + 344);
    unint64_t v364 = *(void *)(v310 + 352);
    if ((unint64_t)v365 >= v364)
    {
      uint64_t v367 = *(void *)(v310 + 336);
      uint64_t v368 = ((uint64_t)v365 - v367) >> 4;
      unint64_t v369 = v368 + 1;
      if ((unint64_t)(v368 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v370 = v364 - v367;
      if (v370 >> 3 > v369) {
        unint64_t v369 = v370 >> 3;
      }
      if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v371 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v371 = v369;
      }
      *(void *)&v506[32] = v310 + 352;
      v372 = (char *)sub_10724(v371);
      *(void *)&long long v373 = v362;
      *((void *)&v373 + 1) = v361;
      v374 = &v372[16 * v368];
      *(void *)v506 = v372;
      *(void *)&v506[8] = v374;
      *(void *)&v506[24] = &v372[16 * v375];
      *(_OWORD *)v374 = v373;
      *(void *)&v506[16] = v374 + 16;
      sub_FBB48((uint64_t *)(v310 + 336), v506);
      v366 = *(void **)(v310 + 344);
      sub_98E24((uint64_t)v506);
    }
    else
    {
      *v365 = v362;
      v365[1] = v361;
      v366 = v365 + 2;
    }
    *(void *)(v310 + 344) = v366;
    if (v359) {
      std::__shared_weak_count::__release_weak(v359);
    }
    if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
    }
    uint64_t v310 = *v437;
  }
LABEL_722:
  CFTypeRef v376 = v463;
  if (v463)
  {
    v377 = *(const void **)(v310 + 1072);
    *(void *)(v310 + 1072) = v463;
    CFRetain(v376);
    if (v377) {
      CFRelease(v377);
    }
  }
  std::string::operator=((std::string *)(v310 + 744), (const std::string *)(v428 + 144));
  uint64_t v378 = *v437;
  if ((void *)(*v437 + 768) != v452) {
    sub_249D54((uint64_t *)(*v437 + 768), (void *)v452[1], v452);
  }
  if (v466 && (void *)(v378 + 1000) != v464)
  {
    *(_DWORD *)(v378 + 1032) = v465;
    sub_6EFDC((void *)(v378 + 1000), (uint64_t *)v464[2]);
  }
  char v379 = 0;
  int v380 = *v423;
  if (*v423 > 1919776354)
  {
    if (v380 > 1987081832)
    {
      if (v380 == 1987081833) {
        goto LABEL_744;
      }
      unsigned __int16 v382 = 30319;
    }
    else
    {
      if (v380 == 1919776355) {
        goto LABEL_744;
      }
      unsigned __int16 v382 = 26467;
    }
    int v381 = v382 | 0x76700000;
    goto LABEL_742;
  }
  if (v380 > 1768779618)
  {
    if (v380 != 1768779619)
    {
      int v381 = 1768781411;
      goto LABEL_742;
    }
  }
  else if (v380 != 1735222132)
  {
    int v381 = 1768057203;
LABEL_742:
    if (v380 != v381) {
      char v379 = 1;
    }
  }
LABEL_744:
  *(unsigned char *)(v378 + 798) = v379;
  uint64_t v383 = sub_32A48(24);
  if (*(unsigned char *)(v383 + 8))
  {
    v384 = *(NSObject **)v383;
    if (*(void *)v383)
    {
      if (os_log_type_enabled(*(os_log_t *)v383, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v385 = sub_D304(v378);
        v386 = v496;
        sub_259A4(&v496[0].__pn_, v385);
        if ((v496[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v386 = (std::__fs::filesystem::path *)v496[0].__pn_.__r_.__value_.__r.__words[0];
        }
        uint64_t v387 = sub_F20C(v378);
        sub_259A4(&v502, v387);
        int v388 = SHIBYTE(v502.__r_.__value_.__r.__words[2]);
        std::string::size_type v389 = v502.__r_.__value_.__r.__words[0];
        sub_247DC(v498, v378);
        v390 = &v502;
        if (v388 < 0) {
          v390 = (std::string *)v389;
        }
        if (v498[23] >= 0) {
          v391 = v498;
        }
        else {
          v391 = *(unsigned char **)v498;
        }
        *(_DWORD *)v506 = 136316162;
        *(void *)&v506[4] = "RouteUtilities.cpp";
        *(_WORD *)&v506[12] = 1024;
        *(_DWORD *)&v506[14] = 771;
        *(_WORD *)&v506[18] = 2080;
        *(void *)&v506[20] = v386;
        *(_WORD *)&v506[28] = 2080;
        *(void *)&v506[30] = v390;
        *(_WORD *)&v506[38] = 2080;
        *(void *)&v506[40] = v391;
        _os_log_impl(&def_1E50E8, v384, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created a DSP chain with input format: %s and output format: %s \n %s", v506, 0x30u);
        if ((v498[23] & 0x80000000) != 0) {
          operator delete(*(void **)v498);
        }
        if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v502.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v496[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v496[0].__pn_.__r_.__value_.__l.__data_);
        }
      }
    }
  }
LABEL_760:
  if (v463) {
    CFRelease(v463);
  }
  if (v466) {
    sub_6C954((uint64_t)v464);
  }
  if (v453) {
    operator delete(v453);
  }
  if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v467.__r_.__value_.__l.__data_);
  }
}

void sub_247B2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_661670);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 400);
  if (v3) {
    sub_4636C(v3);
  }
  sub_60394((const void **)(v1 + 408));
  if (*(unsigned char *)(v1 + 456)) {
    sub_6C954(v1 + 416);
  }
  uint64_t v4 = *(void **)(v1 + 320);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)(v1 + 184) + 8);
  if (v5) {
    sub_4636C(v5);
  }
  if (*(char *)(v1 + 487) < 0) {
    operator delete(*(void **)(v1 + 464));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2488A0(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(int **)(result + 16); i; uint64_t i = *(int **)i)
  {
    uint64_t v4 = i[4];
    sub_3847B8((uint64_t)v52, i + 6);
    int v5 = v52[0];
    uint64_t v6 = (os_log_t *)sub_32A48(24);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v60, v4);
      int v8 = SHIBYTE(v61);
      uint64_t v9 = (void **)v60[0];
      sub_1690D0(&__p, (uint64_t)v52);
      uint64_t v10 = v60;
      if (v8 < 0) {
        uint64_t v10 = v9;
      }
      p_p = &__p;
      if (v58 < 0) {
        p_p = (void **)__p;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
      __int16 v63 = 1024;
      *(_DWORD *)unint64_t v64 = 125;
      *(_WORD *)&v64[4] = 2080;
      *(void *)&v64[6] = v10;
      __int16 v65 = 2080;
      uint64_t v66 = p_p;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property %s = %s", buf, 0x26u);
      if (SHIBYTE(v58) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v61) < 0) {
        operator delete(v60[0]);
      }
    }
    switch(v5)
    {
      case 7:
        *(_DWORD *)buf = 0;
        *(_DWORD *)buf = sub_384FB4(v52);
        (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, void, void))(*(void *)a2 + 56))(a2, v4, buf, 4, 0, 0);
        break;
      case 13:
        *(void *)buf = 0;
        *(void *)buf = sub_3853D4(v52);
        (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, void, void))(*(void *)a2 + 56))(a2, v4, buf, 8, 0, 0);
        break;
      case 14:
        *(void *)buf = 0;
        *(void *)buf = sub_3854DC(v52);
        (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, void, void))(*(void *)a2 + 56))(a2, v4, buf, 8, 0, 0);
        break;
      case 16:
        uint64_t v14 = sub_3857F4(v52);
        sub_2499FC(&v49, v14);
        if (v51)
        {
          sub_3847B8((uint64_t)v48, (int *)(v50 + 16));
          int v15 = v48[0];
          switch(v48[0])
          {
            case 7:
              v67[0] = off_628458;
              int v68 = v67;
              std::string __p = 0;
              uint64_t v57 = 0;
              uint64_t v58 = 0;
              uint64_t v29 = v50;
              uint64_t v30 = &v49;
              if ((uint64_t *)v50 != &v49)
              {
                do
                {
                  sub_3847B8((uint64_t)buf, (int *)(v29 + 16));
                  if (!v68) {
                    sub_56964();
                  }
                  (*(void (**)(void *, unsigned char *, void **))(*v68 + 48))(v68, buf, &__p);
                  sub_3840C4((uint64_t)buf);
                  uint64_t v29 = *(void *)(v29 + 8);
                }
                while ((uint64_t *)v29 != &v49);
                uint64_t v30 = (uint64_t *)v50;
              }
              sub_21C8C(v53, "valuelist: ");
              while (v30 != &v49)
              {
                *(_OWORD *)uint64_t v60 = *(_OWORD *)v53;
                uint64_t v61 = v53[2];
                memset(v53, 0, sizeof(v53));
                sub_3847B8((uint64_t)v59, (int *)v30 + 4);
                sub_1690D0(buf, (uint64_t)v59);
                if (SHIBYTE(v61) >= 0) {
                  long long v31 = v60;
                }
                else {
                  long long v31 = (void **)v60[0];
                }
                if (SHIBYTE(v61) >= 0) {
                  std::string::size_type v32 = HIBYTE(v61);
                }
                else {
                  std::string::size_type v32 = (std::string::size_type)v60[1];
                }
                long long v33 = std::string::insert((std::string *)buf, 0, (const std::string::value_type *)v31, v32);
                int v34 = (void *)v33->__r_.__value_.__r.__words[0];
                v71[0] = v33->__r_.__value_.__l.__size_;
                *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
                char v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
                v33->__r_.__value_.__l.__size_ = 0;
                v33->__r_.__value_.__r.__words[2] = 0;
                v33->__r_.__value_.__r.__words[0] = 0;
                if ((v64[9] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                if (SHIBYTE(v53[2]) < 0) {
                  operator delete(v53[0]);
                }
                v53[0] = v34;
                v53[1] = (void *)v71[0];
                *(void **)((char *)&v53[1] + 7) = *(void **)((char *)v71 + 7);
                HIBYTE(v53[2]) = v35;
                sub_3840C4((uint64_t)v59);
                if (SHIBYTE(v61) < 0) {
                  operator delete(v60[0]);
                }
                uint64_t v30 = (uint64_t *)v30[1];
              }
              *(_OWORD *)uint64_t v54 = *(_OWORD *)v53;
              uint64_t v55 = v53[2];
              memset(v53, 0, sizeof(v53));
              int v38 = (os_log_t *)sub_32A48(24);
              uint64_t v39 = *v38;
              if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v40 = "unknown";
                if (v4 <= 6) {
                  uint64_t v40 = off_623840[v4];
                }
                sub_21C8C(v60, v40);
                if (SHIBYTE(v61) >= 0) {
                  int v41 = v60;
                }
                else {
                  int v41 = (void **)v60[0];
                }
                char v42 = v54;
                if (SHIBYTE(v55) < 0) {
                  char v42 = (void **)v54[0];
                }
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
                __int16 v63 = 1024;
                *(_DWORD *)unint64_t v64 = 113;
                *(_WORD *)&v64[4] = 2080;
                *(void *)&v64[6] = v41;
                __int16 v65 = 2080;
                uint64_t v66 = v42;
                _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting property %s = %s", buf, 0x26u);
                if (SHIBYTE(v61) < 0) {
                  operator delete(v60[0]);
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v4);
              if (SHIBYTE(v55) < 0) {
                operator delete(v54[0]);
              }
              if (__p)
              {
                uint64_t v57 = __p;
                operator delete(__p);
              }
              sub_24A16C(v67);
              break;
            case 0xF:
              for (uint64_t j = v50; (uint64_t *)j != &v49; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v28 = sub_3855E4((int *)(j + 16));
                sub_2488A0(v28, a2);
              }
              break;
            case 9:
              v69[0] = off_628410;
              int v70 = v69;
              std::string __p = 0;
              uint64_t v57 = 0;
              uint64_t v58 = 0;
              uint64_t v16 = v50;
              uint64_t v17 = &v49;
              if ((uint64_t *)v50 != &v49)
              {
                do
                {
                  sub_3847B8((uint64_t)buf, (int *)(v16 + 16));
                  if (!v70) {
                    sub_56964();
                  }
                  (*(void (**)(void *, unsigned char *, void **))(*v70 + 48))(v70, buf, &__p);
                  sub_3840C4((uint64_t)buf);
                  uint64_t v16 = *(void *)(v16 + 8);
                }
                while ((uint64_t *)v16 != &v49);
                uint64_t v17 = (uint64_t *)v50;
              }
              sub_21C8C(v53, "valuelist: ");
              while (v17 != &v49)
              {
                *(_OWORD *)uint64_t v60 = *(_OWORD *)v53;
                uint64_t v61 = v53[2];
                memset(v53, 0, sizeof(v53));
                sub_3847B8((uint64_t)v59, (int *)v17 + 4);
                sub_1690D0(buf, (uint64_t)v59);
                if (SHIBYTE(v61) >= 0) {
                  int v18 = v60;
                }
                else {
                  int v18 = (void **)v60[0];
                }
                if (SHIBYTE(v61) >= 0) {
                  std::string::size_type v19 = HIBYTE(v61);
                }
                else {
                  std::string::size_type v19 = (std::string::size_type)v60[1];
                }
                char v20 = std::string::insert((std::string *)buf, 0, (const std::string::value_type *)v18, v19);
                uint64_t v21 = (void *)v20->__r_.__value_.__r.__words[0];
                v71[0] = v20->__r_.__value_.__l.__size_;
                *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
                char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
                v20->__r_.__value_.__l.__size_ = 0;
                v20->__r_.__value_.__r.__words[2] = 0;
                v20->__r_.__value_.__r.__words[0] = 0;
                if ((v64[9] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                if (SHIBYTE(v53[2]) < 0) {
                  operator delete(v53[0]);
                }
                v53[0] = v21;
                v53[1] = (void *)v71[0];
                *(void **)((char *)&v53[1] + 7) = *(void **)((char *)v71 + 7);
                HIBYTE(v53[2]) = v22;
                sub_3840C4((uint64_t)v59);
                if (SHIBYTE(v61) < 0) {
                  operator delete(v60[0]);
                }
                uint64_t v17 = (uint64_t *)v17[1];
              }
              *(_OWORD *)uint64_t v54 = *(_OWORD *)v53;
              uint64_t v55 = v53[2];
              memset(v53, 0, sizeof(v53));
              unsigned int v43 = (os_log_t *)sub_32A48(24);
              int v44 = *v43;
              if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_DEBUG))
              {
                std::string::size_type v45 = "unknown";
                if (v4 <= 6) {
                  std::string::size_type v45 = off_623840[v4];
                }
                sub_21C8C(v60, v45);
                if (SHIBYTE(v61) >= 0) {
                  int v46 = v60;
                }
                else {
                  int v46 = (void **)v60[0];
                }
                uint64_t v47 = v54;
                if (SHIBYTE(v55) < 0) {
                  uint64_t v47 = (void **)v54[0];
                }
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
                __int16 v63 = 1024;
                *(_DWORD *)unint64_t v64 = 113;
                *(_WORD *)&v64[4] = 2080;
                *(void *)&v64[6] = v46;
                __int16 v65 = 2080;
                uint64_t v66 = v47;
                _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting property %s = %s", buf, 0x26u);
                if (SHIBYTE(v61) < 0) {
                  operator delete(v60[0]);
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v4);
              if (SHIBYTE(v55) < 0) {
                operator delete(v54[0]);
              }
              if (__p)
              {
                uint64_t v57 = __p;
                operator delete(__p);
              }
              sub_24A0E8(v69);
              break;
            default:
              __int16 v36 = (os_log_t *)sub_32A48(24);
              uint64_t v37 = *v36;
              if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
                __int16 v63 = 1024;
                *(_DWORD *)unint64_t v64 = 181;
                *(_WORD *)&v64[4] = 1024;
                *(_DWORD *)&v64[6] = v15;
                _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP property list item type (%d) is not supported.", buf, 0x18u);
              }
              break;
          }
          sub_3840C4((uint64_t)v48);
        }
        else
        {
          int v25 = (os_log_t *)sub_32A48(24);
          std::string::size_type v26 = *v25;
          if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
            __int16 v63 = 1024;
            *(_DWORD *)unint64_t v64 = 186;
            _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP property list is empty.", buf, 0x12u);
          }
        }
        sub_15AD5C(&v49);
        break;
      case 18:
        uint64_t v23 = *(void *)(sub_3846B0(v52) + 24);
        if (!v23) {
          sub_56964();
        }
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v23 + 48))(buf);
        sub_2488A0(buf, a2);
        sub_D7EFC(*(void **)&v64[2]);
        uint64_t v24 = *(void **)buf;
        *(void *)buf = 0;
        if (v24) {
          operator delete(v24);
        }
        break;
      default:
        int v12 = (os_log_t *)sub_32A48(24);
        unint64_t v13 = *v12;
        if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
          __int16 v63 = 1024;
          *(_DWORD *)unint64_t v64 = 199;
          *(_WORD *)&v64[4] = 1024;
          *(_DWORD *)&v64[6] = v5;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP property type (%d) is not supported.", buf, 0x18u);
        }
        break;
    }
    double result = sub_3840C4((uint64_t)v52);
  }
  return result;
}

void sub_249358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  sub_24A16C((void *)(v51 - 184));
  sub_3840C4((uint64_t)&a15);
  sub_15AD5C(&a17);
  sub_3840C4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_24955C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ((uint64_t (*)(void))sub_3847B8)();
  sub_3847B8(v4 + 16, a2 + 16);
  return a1;
}

void sub_249594(_Unwind_Exception *a1)
{
  sub_3840C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2495A8(void *a1, int a2)
{
  uint64_t v2 = sub_D7374(a1, a2);
  if (v2)
  {
    LODWORD(v2) = sub_384DA8((int *)v2 + 6);
    int v3 = 1;
  }
  else
  {
    int v3 = 0;
  }
  return v2 | (v3 << 8);
}

void sub_2495DC(uint64_t a1, int a2, int a3, void *a4, uint64_t *a5)
{
  int v8 = sub_D7374(a4, a2);
  if (v8)
  {
    uint64_t v9 = sub_3855E4((int *)v8 + 6);
    sub_D854C((uint64_t)&v21, v9);
    uint64_t v10 = v22;
    if (v22)
    {
      do
      {
        uint64_t v11 = (const void *)sub_3854DC(v10 + 6);
        int v12 = v11;
        if (v11) {
          CFRetain(v11);
        }
        sub_14E44(cf, v12);
        if (!*(void *)cf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        sub_20C54((uint64_t)v19, *(const __CFString **)cf);
        if (*(void *)cf) {
          CFRelease(*(CFTypeRef *)cf);
        }
        unint64_t v13 = (os_log_t *)sub_32A48(24);
        uint64_t v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = v19;
          if (v20 < 0) {
            int v15 = (void **)v19[0];
          }
          *(_DWORD *)CFTypeRef cf = 136315650;
          *(void *)&cf[4] = "RouteUtilities.cpp";
          __int16 v27 = 1024;
          int v28 = 405;
          __int16 v29 = 2080;
          uint64_t v30 = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding conditional overlay tuning %s", cf, 0x1Cu);
        }
        v24[0] = v10[4] != 0;
        int v25 = 0;
        sub_24A024((uint64_t)cf, a1, a3, (long long *)v19, (uint64_t)v23);
        sub_2498C8(a5, (uint64_t)cf);
        if (v32 < 0) {
          operator delete(__p);
        }
        sub_8C710((uint64_t)&v28 + 2);
        sub_8C710((uint64_t)v24);
        if (v20 < 0) {
          operator delete(v19[0]);
        }
        uint64_t v10 = *(int **)v10;
      }
      while (v10);
      uint64_t v16 = v22;
    }
    else
    {
      uint64_t v16 = 0;
    }
    sub_D7EFC(v16);
    uint64_t v17 = v21;
    uint64_t v21 = 0;
    if (v17) {
      operator delete(v17);
    }
  }
}

void sub_24983C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t sub_2498C8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[136];
  unint64_t v5 = a1[137];
  if (v4 >= v5)
  {
    uint64_t v8 = a1[135];
    unint64_t v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - v8) >> 3);
    if (v9 + 1 > 0x1E1E1E1E1E1E1E1) {
      sub_60548();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v8) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v12 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v12 = v11;
    }
    int v18 = a1 + 137;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_249EB8(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 136 * v9;
    unint64_t v17 = v12 + 136 * v13;
    sub_249E2C(v15, a2);
    uint64_t v16 = v15 + 136;
    sub_249F00(a1 + 135, &v14);
    uint64_t v7 = a1[136];
    uint64_t result = sub_249FD4((uint64_t)&v14);
  }
  else
  {
    uint64_t result = sub_249E2C(a1[136], a2);
    uint64_t v7 = v4 + 136;
    a1[136] = v4 + 136;
  }
  a1[136] = v7;
  return result;
}

void sub_2499DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 1088) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2499FC(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    unint64_t v5 = sub_15AC84(i + 16);
    uint64_t v6 = *a1;
    void *v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_249A70(_Unwind_Exception *a1)
{
  sub_15AD5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_249A84(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "ID");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_249B24(_Unwind_Exception *a1)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_249B60(uint64_t a1, const void **a2)
{
  sub_22210((CFStringRef *)a1, "data");
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_249BAC(uint64_t a1, const void **a2)
{
  sub_22210((CFStringRef *)a1, "cfobject");
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_249BF8(int a1, uint64_t a2)
{
  if (a1 != 1885544823 || a2 == 0) {
    goto LABEL_10;
  }
  AudioObjectID v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  strcpy((char *)&buf, "diabbolg");
  BYTE1(buf.mElement) = 0;
  HIWORD(buf.mElement) = 0;
  unint64_t v3 = sub_26DAC(&v13, &buf, 0, 0);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 32;
  if ((v5 & 0xFF00000000) == 0)
  {
LABEL_10:
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = (os_log_t *)sub_32A48(24);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "RouteUtilities.cpp";
      __int16 v15 = 1024;
      int v16 = 227;
      __int16 v17 = 1024;
      int v18 = v5;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth Headset Type: %u", (uint8_t *)&buf, 0x18u);
    }
    uint64_t v9 = v5 & 0xFFFFFF00;
    uint64_t v10 = v5;
    uint64_t v11 = 0x100000000;
  }
  return v10 | v11 | v9;
}

void *sub_249D54(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  long long v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      uint64_t v8 = v4[2];
      uint64_t v7 = v4[3];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)v6[3];
      void v6[2] = v8;
      v6[3] = v7;
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      uint64_t v4 = (void *)v4[1];
      long long v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
  {
    return sub_146750(a1, a1, v4, a3);
  }
  else
  {
    return sub_12CDFC((uint64_t)a1, v6, a1);
  }
}

uint64_t sub_249E2C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_1BABE0(a1 + 16, a2 + 16);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v4 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_21E8C(v4, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_249EA4(_Unwind_Exception *a1)
{
  sub_8C710(v1);
  _Unwind_Resume(a1);
}

void *sub_249EB8(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2) {
    sub_60560();
  }
  return operator new(136 * a1);
}

uint64_t *sub_249F00(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 136; ; i -= 136)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 136 == v5) {
      break;
    }
    uint64_t v9 = v4 + i - 272;
    uint64_t result = (uint64_t *)sub_249E2C(v8 - 272, v9);
  }
  uint64_t v10 = v8 - 136;
  a2[1] = v10;
  uint64_t v11 = *v3;
  uint64_t *v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_249FD4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    sub_1B7014(i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_24A024(uint64_t a1, uint64_t a2, int a3, long long *a4, uint64_t a5)
{
  *(void *)a1 = a2;
  sub_1BABE0(a1 + 16, a5 + 8);
  *(_DWORD *)(a1 + 104) = a3;
  uint64_t v8 = (unsigned char *)(a1 + 112);
  if (*((char *)a4 + 23) < 0)
  {
    sub_21E8C(v8, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 128) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }
  return a1;
}

void sub_24A098(_Unwind_Exception *a1)
{
  sub_8C710(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24A0AC(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  sub_8C710(a1 + 16);
  return a1;
}

void *sub_24A0E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_24A16C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_24A1F0(uint64_t a1, int *a2, uint64_t a3)
{
  sub_3847B8((uint64_t)v20, a2);
  int v4 = sub_384FB4(v20);
  int v5 = v4;
  uint64_t v7 = *(_DWORD **)(a3 + 8);
  unint64_t v6 = *(void *)(a3 + 16);
  if ((unint64_t)v7 >= v6)
  {
    long long v9 = *(_DWORD **)a3;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a3) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      sub_60548();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)sub_46BF4(v14);
      long long v9 = *(_DWORD **)a3;
      uint64_t v7 = *(_DWORD **)(a3 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    int v16 = (_DWORD *)(v14 + 4 * v10);
    unint64_t v17 = v14 + 4 * v15;
    _DWORD *v16 = v5;
    uint64_t v8 = v16 + 1;
    while (v7 != v9)
    {
      int v18 = *--v7;
      *--int v16 = v18;
    }
    *(void *)a3 = v16;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = v4;
    uint64_t v8 = v7 + 1;
  }
  *(void *)(a3 + 8) = v8;
  return sub_3840C4((uint64_t)v20);
}

void sub_24A2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24A304(uint64_t a1, void *a2)
{
  *a2 = off_628458;
}

void *sub_24A324()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_628458;
  return result;
}

void sub_24A35C()
{
}

uint64_t sub_24A374(uint64_t a1, int *a2, uint64_t a3)
{
  sub_3847B8((uint64_t)v20, a2);
  float v4 = sub_3850BC(v20);
  float v5 = v4;
  uint64_t v7 = *(float **)(a3 + 8);
  unint64_t v6 = *(void *)(a3 + 16);
  if ((unint64_t)v7 >= v6)
  {
    long long v9 = *(float **)a3;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a3) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      sub_60548();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)sub_46BF4(v14);
      long long v9 = *(float **)a3;
      uint64_t v7 = *(float **)(a3 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    int v16 = (float *)(v14 + 4 * v10);
    unint64_t v17 = v14 + 4 * v15;
    float *v16 = v5;
    uint64_t v8 = v16 + 1;
    while (v7 != v9)
    {
      int v18 = *((_DWORD *)v7-- - 1);
      *((_DWORD *)v16-- - 1) = v18;
    }
    *(void *)a3 = v16;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = v4;
    uint64_t v8 = v7 + 1;
  }
  *(void *)(a3 + 8) = v8;
  return sub_3840C4((uint64_t)v20);
}

void sub_24A46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24A488(uint64_t a1, void *a2)
{
  *a2 = off_628410;
}

void *sub_24A4A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_628410;
  return result;
}

void sub_24A4E0()
{
}

void sub_24A4F8(unsigned char *a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6 == 1)
  {
    sub_549A4(&v13, (uint64_t *)(a5 + 16), "", 1350);
    int v12 = *(_DWORD *)(v13 + 264);
    if (v14) {
      sub_4636C(v14);
    }
  }
  else
  {
    int v12 = 0;
  }
  sub_24A5D0((uint64_t)&v13, 0, a2, a3, v12, a7);
  sub_380BF8(a1, a4, (int *)&v13);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
}

void sub_24A5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24A5D0(uint64_t a1, int a2, int a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_OWORD *)(a1 + 8) = *a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_46B38((void *)(a1 + 32), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  sub_374BB4((_DWORD *)a1);
  return a1;
}

void sub_24A634(_Unwind_Exception *exception_object)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24A650(_DWORD *a1, char a2)
{
  if ((sub_207A20() & 0xFFFFFFFE) == 0x6A)
  {
    if (a2) {
      return 1;
    }
    if (*a1 == 1987011684) {
      return 0;
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D1F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64D1F8))
    {
      unsigned int v15 = sub_207A20();
      int32x4_t v16 = vdupq_n_s32(v15);
      char v17 = 1;
      if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v16, (int32x4_t)xmmword_4E79B0), (int16x8_t)vceqq_s32(v16, (int32x4_t)xmmword_4E79C0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v16, (int32x4_t)xmmword_4E79D0), (int16x8_t)vceqq_s32(v16, (int32x4_t)xmmword_4E79E0)))) & 1) == 0&& !vaddvq_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v16, (int32x4_t)xmmword_4E7A00), (int16x8_t)vceqq_s32(v16, (int32x4_t)xmmword_4E79F0)), (int8x16_t)xmmword_4E7A10))&& (v15 & 0xFFFFFFFB) - 73 >= 2)
      {
        unsigned int v19 = sub_207A20();
        char v17 = 1;
        if ((v19 > 0x2E || ((1 << v19) & 0x43FF9F1E0600) == 0) && v19 != 125) {
          char v17 = 0;
        }
      }
      byte_64D1F0 = v17;
      __cxa_guard_release(&qword_64D1F8);
    }
    if (!byte_64D1F0) {
      return 0;
    }
  }
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  strcpy(v25, "cwdv");
  v25[8] = 0;
  int v26 = 3;
  v28[0] = 0;
  v28[1] = 0;
  __int16 v27 = v28;
  CFTypeRef v30 = 0;
  int v29 = 44739210;
  sub_125ECC((unint64_t *)v21, (uint64_t)a1, (uint64_t)&v22);
  float v5 = (os_log_t *)sub_32A48(20);
  unint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_9264(&__p, (uint64_t)v21, 1);
    uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    int buf = 136315650;
    char v32 = "RouteUtilities.cpp";
    __int16 v33 = 1024;
    int v34 = 1486;
    __int16 v35 = 2080;
    __int16 v36 = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reference stream port ? in %s", (uint8_t *)&buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t i = (uint64_t *)v21[1]; i != v21; uint64_t i = (uint64_t *)i[1])
  {
    long long v9 = (std::__shared_weak_count *)i[3];
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        unint64_t v11 = v10;
        uint64_t v12 = i[2];
        if (v12)
        {
          BOOL v13 = sub_25009C(*(_DWORD *)(v12 + 144));
          sub_4636C(v11);
          if (v13)
          {
            uint64_t v4 = 1;
            goto LABEL_23;
          }
        }
        else
        {
          sub_4636C(v10);
        }
      }
    }
  }
  uint64_t v4 = 0;
LABEL_23:
  sub_8108(v21);
  if (v30) {
    CFRelease(v30);
  }
  sub_463E0(v28[0]);
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  return v4;
}

void sub_24A9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
}

BOOL sub_24AA28(int a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (*(void *)(a2 + 8) != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    while (1)
    {
      sub_549A4(&v7, (uint64_t *)(v3 + 16), "", 554);
      int v5 = *(_DWORD *)(v7 + 144);
      if (v8) {
        sub_4636C(v8);
      }
      if (v5 == a1) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == a2)
      {
        uint64_t v3 = a2;
        return v3 != a2;
      }
    }
  }
  return v3 != a2;
}

BOOL sub_24AAC4(uint64_t a1)
{
  uint64_t v2 = a1;
  if (*(void *)(a1 + 8) != a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    while (1)
    {
      sub_549A4(&v6, (uint64_t *)(v2 + 16), "", 562);
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6);
      if (v7) {
        sub_4636C(v7);
      }
      if ((v3 & 0xFF00000000) != 0 && v3 == 1701869160) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a1)
      {
        uint64_t v2 = a1;
        return v2 != a1;
      }
    }
  }
  return v2 != a1;
}

void sub_24AB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_24ABB0(std::string *a1, uint64_t a2)
{
  sub_21C8C(a1, "VAD - ");
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      sub_549A4(&v16, (uint64_t *)(v4 + 16), "", 672);
      int v5 = *(_DWORD *)(v16 + 144);
      memset(__s, 0, 24);
      if (v5 <= 1886222184)
      {
        if (v5 > 1885892705)
        {
          if (v5 <= 1886152046)
          {
            switch(v5)
            {
              case 1885892706:
                __s[23] = 20;
                qmemcpy(__s, "Bluetooth HFP Output", 20);
                std::string::size_type v7 = 20;
                goto LABEL_79;
              case 1885892727:
                __s[23] = 16;
                BOOL v13 = "Wired Headphones";
                goto LABEL_67;
              case 1886152041:
                __s[23] = 18;
                *(_WORD *)&__s[16] = 29813;
                uint64_t v10 = "Bluetooth LE Input";
LABEL_48:
                *(_OWORD *)__s = *(_OWORD *)v10;
                std::string::size_type v7 = 18;
                goto LABEL_79;
            }
          }
          else if (v5 > 1886216808)
          {
            if (v5 == 1886216809)
            {
              __s[23] = 19;
              *(_DWORD *)&__s[15] = 1701736296;
              uint64_t v12 = "Built-in Microphone";
              goto LABEL_74;
            }
            if (v5 == 1886216820)
            {
              __s[23] = 19;
              *(_DWORD *)&__s[15] = 1953853550;
              uint64_t v12 = "Bluetooth HFP Input";
LABEL_74:
              *(_OWORD *)__s = *(_OWORD *)v12;
              std::string::size_type v7 = 19;
              goto LABEL_79;
            }
          }
          else
          {
            if (v5 == 1886152047)
            {
              __s[23] = 19;
              *(_DWORD *)&__s[15] = 1953853556;
              uint64_t v12 = "Bluetooth LE Output";
              goto LABEL_74;
            }
            if (v5 == 1886154613)
            {
              __s[23] = 8;
              uint64_t v9 = 0x74754F20656E694CLL;
LABEL_57:
              *(void *)__s = v9;
              std::string::size_type v7 = 8;
              goto LABEL_79;
            }
          }
        }
        else if (v5 <= 1885631343)
        {
          switch(v5)
          {
            case 1885433953:
              __s[23] = 12;
              *(_DWORD *)&__s[8] = 1869177973;
              unint64_t v14 = "AirPlayAudio";
              goto LABEL_61;
            case 1885433971:
              __s[23] = 13;
              qmemcpy(__s, "AirPlayScreen", 13);
              std::string::size_type v7 = 13;
              goto LABEL_79;
            case 1885629550:
              __s[23] = 8;
              uint64_t v9 = 0x6B6E696C6E776F44;
              goto LABEL_57;
          }
        }
        else if (v5 > 1885889644)
        {
          if (v5 == 1885889645)
          {
            __s[23] = 4;
            *(_DWORD *)__s = 1229800520;
            std::string::size_type v7 = 4;
            goto LABEL_79;
          }
          if (v5 == 1885892674)
          {
            __s[23] = 14;
            unint64_t v11 = "Bluetooth A2DP";
            goto LABEL_44;
          }
        }
        else
        {
          if (v5 == 1885631344)
          {
            __s[23] = 12;
            *(_DWORD *)&__s[8] = 1953656656;
            unint64_t v14 = "Display Port";
LABEL_61:
            *(void *)__s = *(void *)v14;
            std::string::size_type v7 = 12;
            goto LABEL_79;
          }
          if (v5 == 1885888867)
          {
            __s[23] = 10;
            *(_WORD *)&__s[8] = 29813;
            uint64_t v6 = "HAC Output";
LABEL_70:
            *(void *)__s = *(void *)v6;
            std::string::size_type v7 = 10;
            goto LABEL_79;
          }
        }
        goto LABEL_77;
      }
      if (v5 > 1886680168)
      {
        if (v5 <= 1886742894)
        {
          switch(v5)
          {
            case 1886680169:
              __s[23] = 9;
              qmemcpy(__s, "TTY Input", 9);
              std::string::size_type v7 = 9;
              goto LABEL_79;
            case 1886680175:
              __s[23] = 10;
              *(_WORD *)&__s[8] = 29813;
              uint64_t v6 = "TTY Output";
              goto LABEL_70;
            case 1886742889:
              __s[23] = 14;
              unint64_t v11 = "USB IDAM Input";
LABEL_44:
              *(void *)__s = *(void *)v11;
              *(void *)&__s[6] = *(void *)(v11 + 6);
              std::string::size_type v7 = 14;
              goto LABEL_79;
          }
        }
        else if (v5 > 1886745448)
        {
          if (v5 == 1886745449)
          {
            __s[23] = 15;
            unsigned int v15 = "USB Audio Input";
            goto LABEL_76;
          }
          if (v5 == 1886745455)
          {
            __s[23] = 16;
            BOOL v13 = "USB Audio Output";
LABEL_67:
            *(_OWORD *)__s = *(_OWORD *)v13;
            std::string::size_type v7 = 16;
            goto LABEL_79;
          }
        }
        else
        {
          if (v5 == 1886742895)
          {
            __s[23] = 15;
            unsigned int v15 = "USB IDAM Output";
LABEL_76:
            *(void *)__s = *(void *)v15;
            *(void *)&__s[7] = *(void *)(v15 + 7);
            std::string::size_type v7 = 15;
            goto LABEL_79;
          }
          if (v5 == 1886743662)
          {
            __s[23] = 6;
            qmemcpy(__s, "Uplink", 6);
            std::string::size_type v7 = 6;
            goto LABEL_79;
          }
        }
        goto LABEL_77;
      }
      if (v5 <= 1886545250) {
        break;
      }
      if (v5 > 1886675560)
      {
        if (v5 == 1886675561)
        {
          __s[23] = 17;
          qmemcpy(__s, "Thunderbolt Input", 17);
          std::string::size_type v7 = 17;
          goto LABEL_79;
        }
        if (v5 == 1886675567)
        {
          __s[23] = 18;
          *(_WORD *)&__s[16] = 29813;
          uint64_t v10 = "Thunderbolt Output";
          goto LABEL_48;
        }
        goto LABEL_77;
      }
      if (v5 == 1886545251)
      {
        __s[23] = 8;
        uint64_t v9 = 0x7265766965636552;
        goto LABEL_57;
      }
      if (v5 != 1886613611) {
        goto LABEL_77;
      }
      __s[23] = 7;
      *(_DWORD *)__s = 1634037843;
      std::string::size_type v7 = 7;
      int v8 = 1919249249;
LABEL_78:
      *(_DWORD *)&__s[3] = v8;
LABEL_79:
      std::string::append(a1, __s, v7);
      if (__s[23] < 0) {
        operator delete(*(void **)__s);
      }
      if (v17) {
        sub_4636C(v17);
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2) {
        return;
      }
      std::string::append(a1, ", ", 2uLL);
    }
    switch(v5)
    {
      case 1886222185:
        __s[23] = 16;
        BOOL v13 = "Wired Microphone";
        goto LABEL_67;
      case 1886284905:
        __s[23] = 10;
        *(_WORD *)&__s[8] = 29813;
        uint64_t v6 = "NULL Input";
        goto LABEL_70;
      case 1886287212:
        __s[23] = 11;
        qmemcpy(__s, "NULL Output", 11);
        std::string::size_type v7 = 11;
        goto LABEL_79;
    }
LABEL_77:
    __s[23] = 7;
    *(_DWORD *)__s = 1852534357;
    std::string::size_type v7 = 7;
    int v8 = 1853321070;
    goto LABEL_78;
  }
}

void sub_24B2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24B314(void *a1)
{
  if (!a1[24]) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
  if (result)
  {
    uint64_t v3 = a1[24];
    if (!v3)
    {
      uint64_t v4 = (os_log_t *)sub_32A48(13);
      int v5 = *v4;
      if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "PortUtilities.cpp";
        __int16 v10 = 1024;
        int v11 = 94;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    strcpy(buf, "paaibolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, buf);
    if (result)
    {
      int v7 = 4;
      int v8 = 0;
      strcpy(buf, "paaibolg");
      buf[9] = 0;
      *(_WORD *)&_DWORD buf[10] = 0;
      (*(void (**)(uint64_t, unsigned char *, void, void, int *, int *))(*(void *)v3 + 40))(v3, buf, 0, 0, &v7, &v8);
      return v8 != 0;
    }
  }
  return result;
}

void sub_24B4F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24B50C(void *a1, int a2, float *a3)
{
  uint64_t v3 = a1[24];
  *a3 = 100.0;
  if (!v3) {
    return 0;
  }
  strcpy((char *)buf, "esodbolg");
  BYTE1(buf[0].mElement) = 0;
  HIWORD(buf[0].mElement) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v3 + 16))(v3, buf);
  if (!result) {
    return result;
  }
  int v42 = 0;
  strcpy((char *)buf, "esodbolg");
  BYTE1(buf[0].mElement) = 0;
  HIWORD(buf[0].mElement) = 0;
  int v8 = (*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *, void, void))(*(void *)v3 + 32))(v3, buf, 0, 0);
  int v41 = 0;
  int v42 = v8;
  uint64_t v40 = 0x676C6F62646F7365;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v3 + 40))(v3, &v40, 0, 0, &v42, a3);
  if (*a3 < 50.0 || *a3 > 150.0)
  {
    if (a2)
    {
      BOOL v13 = (os_log_t *)sub_32A48(24);
      unint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        AudioObjectPropertyElement v15 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
        double v16 = *a3;
        buf[0].int mSelector = 136315906;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 530;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v15;
        LOWORD(cf[0]) = 2048;
        *(CFTypeRef *)((char *)cf + 2) = *(CFTypeRef *)&v16;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : Fetched invalid sensitivity from device [%u]: %f", (uint8_t *)buf, 0x22u);
      }
      char v17 = (os_log_t *)sub_32A48(24);
      int v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        buf[0].int mSelector = 136315394;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 208;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : Reporting sensitivity to metrics.", (uint8_t *)buf, 0x12u);
      }
      int v46 = 0;
      unint64_t v47 = 0;
      std::string::size_type v45 = (uint64_t *)&v46;
      std::to_string(&v43, *a3);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v19 = &v43;
      }
      else {
        unsigned int v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if (v19)
      {
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v43.__r_.__value_.__l.__size_;
        }
        uint64_t v21 = (char *)CFStringCreateWithBytes(0, (const UInt8 *)v19, size, 0x8000100u, 0);
        int v44 = (std::string *)v21;
        if (!v21)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
      }
      else
      {
        uint64_t v21 = 0;
        int v44 = 0;
      }
      sub_21C8C(buf, "headphone_sensitivity");
      if (v21) {
        CFRetain(v21);
      }
      cf[0] = v21;
      sub_24BF88(&v45, (void **)buf, (long long *)buf);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (SHIBYTE(buf[1].mElement) < 0) {
        operator delete(*(void **)&buf[0].mSelector);
      }
      if (v21) {
        CFRelease(v21);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (sub_24B314(a1))
      {
        unsigned int v23 = sub_24C024((uint64_t)a1);
        std::to_string(&v43, v23);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v24 = &v43;
        }
        else {
          uint64_t v24 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if (v24)
        {
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v25 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v25 = v43.__r_.__value_.__l.__size_;
          }
          int v26 = (char *)CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
          int v44 = (std::string *)v26;
          if (!v26)
          {
            __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v27, "Could not construct");
          }
        }
        else
        {
          int v26 = 0;
          int v44 = 0;
        }
        sub_24C154(buf, "bluetooth_product_id", (const void **)&v44);
        sub_24BF88(&v45, (void **)buf, (long long *)buf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (SHIBYTE(buf[1].mElement) < 0) {
          operator delete(*(void **)&buf[0].mSelector);
        }
        if (v26) {
          CFRelease(v26);
        }
      }
      else
      {
        uint64_t v28 = a1[24];
        if (!v28)
        {
LABEL_66:
          memset(buf, 0, sizeof(buf));
          sub_162D4(buf, v47);
          __int16 v35 = v45;
          if (v45 != (uint64_t *)&v46)
          {
            do
            {
              sub_24C238(buf, (const UInt8 *)v35 + 32, (const void **)v35 + 7);
              __int16 v36 = (uint64_t *)v35[1];
              if (v36)
              {
                do
                {
                  uint64_t v37 = v36;
                  __int16 v36 = (uint64_t *)*v36;
                }
                while (v36);
              }
              else
              {
                do
                {
                  uint64_t v37 = (uint64_t *)v35[2];
                  BOOL v38 = *v37 == (void)v35;
                  __int16 v35 = v37;
                }
                while (!v38);
              }
              __int16 v35 = v37;
            }
            while (v37 != (uint64_t *)&v46);
          }
          CFDictionaryRef v39 = sub_4D69C((void ***)buf);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          sub_14F84((void ***)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          sub_F2254((uint64_t)v39, 1, 6);
          if (v39) {
            CFRelease(v39);
          }
          sub_24C358(v46);
          return 0;
        }
        LODWORD(v43.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 120))(v28);
        strcpy((char *)buf, "diabbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        unint64_t v29 = sub_26DAC((AudioObjectID *)&v43, buf, 0, 0);
        *((void *)&v32 + 1) = v30;
        *(void *)&long long v32 = v29;
        uint64_t v31 = v32 >> 32;
        if ((v31 & 0xFF00000000) != 0) {
          unsigned int v33 = v31;
        }
        else {
          unsigned int v33 = 0;
        }
        sub_2417C(&v43, v33);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v34 = &v43;
        }
        else {
          int v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        int v44 = v34;
        sub_24C1DC(buf, (char **)&v44);
        sub_24BF88(&v45, (void **)buf, (long long *)buf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (SHIBYTE(buf[1].mElement) < 0) {
          operator delete(*(void **)&buf[0].mSelector);
        }
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      goto LABEL_66;
    }
    return 0;
  }
  uint64_t v9 = (os_log_t *)sub_32A48(24);
  __int16 v10 = *v9;
  if (*v9)
  {
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      AudioObjectPropertyElement v11 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
      double v12 = *a3;
      buf[0].int mSelector = 136315906;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 525;
      HIWORD(buf[1].mScope) = 1024;
      buf[1].AudioObjectPropertyElement mElement = v11;
      LOWORD(cf[0]) = 2048;
      *(CFTypeRef *)((char *)cf + 2) = *(CFTypeRef *)&v12;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Fetched sensitivity from device [%u]: %f", (uint8_t *)buf, 0x22u);
    }
  }
  return 1;
}

void sub_24BBD0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,long long buf,long long a23)
{
  if (a2)
  {
    if (a17 < 0) {
      operator delete(__p);
    }
    sub_24C358(a20);
    if (a2 == 3)
    {
      std::string::size_type v25 = __cxa_begin_catch(a1);
      int v26 = (os_log_t *)sub_32A48(24);
      __int16 v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = v25[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "PortUtilities.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 534;
        WORD1(a23) = 1024;
        DWORD1(a23) = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Failed to fetch sensitivity from device, fallback to default: %u", (uint8_t *)&buf, 0x18u);
      }
    }
    else
    {
      unint64_t v29 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v30 = v29;
        uint64_t v31 = (os_log_t *)sub_32A48(24);
        long long v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "PortUtilities.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 536;
          WORD1(a23) = 2080;
          *(void *)((char *)&a23 + 4) = v33;
          _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Failed to fetch sensitivity from device, fallback to default: %s", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        int v34 = (os_log_t *)sub_32A48(24);
        __int16 v35 = *v34;
        if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "PortUtilities.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 538;
          _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Failed to fetch sensitivity from device, fallback to default", (uint8_t *)&buf, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x24BB98);
  }
  _Unwind_Resume(a1);
}

void sub_24BF88(uint64_t **a1, void **a2, long long *a3)
{
  int v5 = (uint64_t **)sub_15DF8((uint64_t)a1, &v13, a2);
  if (!*v5)
  {
    uint64_t v6 = v5;
    int v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    long long v8 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v9 = *((void *)a3 + 2);
    uint64_t v10 = *((void *)a3 + 3);
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    v7[2] = v8;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = v10;
    char v12 = 1;
    sub_46CA8(a1, v13, v6, (uint64_t *)v7);
    v11[0] = 0;
    sub_24C4E8((uint64_t)v11);
  }
}

uint64_t sub_24C024(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 144);
  BOOL v3 = v1 == 1885892674 || v1 == 1886216820 || v1 == 1885892706;
  if (!v3 || !*(void *)(a1 + 192)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (result)
  {
    uint64_t v9 = 0x676C6F6262616964;
    int v10 = 0;
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v9);
    uint64_t result = 0;
    if (v6)
    {
      int v7 = 4;
      unsigned int v8 = 0;
      uint64_t v9 = 0x676C6F6262616964;
      int v10 = 0;
      (*(void (**)(uint64_t, uint64_t *, void, void, int *, unsigned int *))(*(void *)a1 + 40))(a1, &v9, 0, 0, &v7, &v8);
      return v8;
    }
  }
  return result;
}

void *sub_24C154(void *a1, char *a2, const void **a3)
{
  sub_21C8C(a1, a2);
  int v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  a1[3] = v5;
  return a1;
}

uint64_t sub_24C198(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_24C1DC(void *a1, char **a2)
{
  uint64_t v4 = (CFStringRef *)sub_21C8C(a1, "bluetooth_product_id");
  sub_22210(v4 + 3, *a2);
  return a1;
}

void sub_24C21C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C238(void *a1, const UInt8 *a2, const void **a3)
{
  int v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    char v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_10724(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v14;
    char v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_24C404(v17, a2, a3);
    int v18 = v17 + 2;
    sub_163A8(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_16358((uint64_t)&v16);
  }
  else
  {
    uint64_t result = (uint64_t)sub_24C404((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_24C338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_16358((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C358(void *a1)
{
  if (a1)
  {
    sub_24C358(*a1);
    sub_24C358(a1[1]);
    sub_24C3AC((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_24C3AC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    BOOL v3 = *(void **)a1;
    operator delete(v3);
  }
}

CFStringRef *sub_24C404(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_24C4B8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C4E8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_24C3AC((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

double sub_24C540(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  if (a2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(&v20, a2, 1, a1);
    if (v21)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v21);
      if (v4 && v20)
      {
        double v5 = (*(double (**)(uint64_t))(*(void *)v20 + 96))(v20);
        double v7 = v6;
        *a3 = 1;
        CFStringRef v8 = (os_log_t *)sub_32A48(24);
        float v9 = v5;
        float v10 = v7;
        uint64_t v11 = *v8;
        if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315906;
          unsigned int v23 = "PortUtilities.cpp";
          __int16 v24 = 1024;
          int v25 = 261;
          __int16 v26 = 2048;
          double v27 = v10;
          __int16 v28 = 2048;
          double v29 = v9;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : volume range = %f -> %f", buf, 0x26u);
        }
        if (v9 > v10)
        {
          uint64_t v12 = (os_log_t *)sub_32A48(13);
          uint64_t v13 = *v12;
          if (*v12)
          {
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315906;
              unsigned int v23 = "PortUtilities.cpp";
              __int16 v24 = 1024;
              int v25 = 262;
              __int16 v26 = 2048;
              double v27 = v9;
              __int16 v28 = 2048;
              double v29 = v10;
              _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Min volume is greater than max volume: %f > %f\"", buf, 0x26u);
            }
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Min volume is greater than max volume: %f > %f");
        }
LABEL_22:
        sub_4636C(v4);
LABEL_23:
        if (v21) {
          std::__shared_weak_count::__release_weak(v21);
        }
        return v5;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    char v17 = (os_log_t *)sub_32A48(24);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      unsigned int v23 = "PortUtilities.cpp";
      __int16 v24 = 1024;
      int v25 = 266;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Failed to fetch volume range from device.", buf, 0x12u);
    }
    double v5 = -40.0;
    if (!v4) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v15 = (os_log_t *)sub_32A48(24);
  unint64_t v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315394;
    unsigned int v23 = "PortUtilities.cpp";
    __int16 v24 = 1024;
    int v25 = 271;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : No device available.", buf, 0x12u);
  }
  return -40.0;
}

void sub_24C8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  sub_4636C(v10);
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(a1);
}

float sub_24C904(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  unsigned int v3 = *(_DWORD *)(a1 + 264);
  float v15 = 0.0;
  if (sub_24B50C((void *)a1, 1, &v15)) {
    return v15;
  }
  int v4 = *(_DWORD *)(a1 + 264);
  if (v4 <= 1647521841)
  {
    if (v4 > 1634231919)
    {
      if (v4 == 1634231920 || v4 == 1635085420) {
        goto LABEL_21;
      }
      int v5 = 1647393080;
    }
    else
    {
      if (v4 == 1214329654 || v4 == 1214394677) {
        goto LABEL_21;
      }
      int v5 = 1633759844;
    }
    if (v4 != v5) {
      goto LABEL_31;
    }
LABEL_21:
    int v7 = 1120403456;
LABEL_22:
    int v6 = v7;
    goto LABEL_23;
  }
  if (v4 > 1647718502)
  {
    if (v4 == 2003068262 || v4 == 1752709424) {
      goto LABEL_21;
    }
    if (v4 == 1647718503)
    {
      int v6 = 1121045709;
      goto LABEL_23;
    }
LABEL_31:
    int v7 = 1121058816;
    goto LABEL_22;
  }
  if (v4 == 1647521842) {
    goto LABEL_31;
  }
  if (v4 == 1647522096) {
    goto LABEL_21;
  }
  if (v4 != 1647718502) {
    goto LABEL_31;
  }
  int v6 = 1120980173;
LABEL_23:
  float v15 = *(float *)&v6;
  CFStringRef v8 = (os_log_t *)sub_32A48(24);
  float v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v2);
    sub_2417C(__p, v3);
    if (v14 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136316162;
    char v17 = "PortUtilities.cpp";
    __int16 v18 = 1024;
    int v19 = 749;
    __int16 v20 = 1024;
    int v21 = v10;
    __int16 v22 = 2080;
    unsigned int v23 = v11;
    __int16 v24 = 2048;
    double v25 = v15;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Using default sensitivity value for device [%u - %s]: %.2f", buf, 0x2Cu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return v15;
}

void sub_24CB94(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 144);
  unsigned int v3 = *(_DWORD *)(a1 + 264);
  uint64_t v4 = *(void *)(a1 + 192);
  int v5 = (os_log_t *)sub_32A48(24);
  int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(&v28, v2);
    int v7 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
    std::string::size_type v8 = v28.__r_.__value_.__r.__words[0];
    sub_2417C(__p, v3);
    float v9 = &v28;
    if (v7 < 0) {
      float v9 = (std::string *)v8;
    }
    if (v27 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    buf.int mSelector = 136315906;
    *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
    __int16 v30 = 1024;
    int v31 = 762;
    __int16 v32 = 2080;
    std::string::size_type v33 = (std::string::size_type)v9;
    __int16 v34 = 2080;
    __int16 v35 = v10;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry: Port type/subtype = %s/%s", (uint8_t *)&buf, 0x26u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  int v11 = sub_24B314((void *)a1);
  uint64_t v12 = (os_log_t *)sub_32A48(24);
  uint64_t v13 = *v12;
  if (v11)
  {
    if (v13 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v14 = sub_24C024(a1);
      std::to_string(&v28, v14);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v15 = &v28;
      }
      else {
        float v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      __int16 v30 = 1024;
      int v31 = 765;
      __int16 v32 = 2080;
      std::string::size_type v33 = (std::string::size_type)v15;
      unint64_t v16 = "%25s:%-5d PlaybackDosimetry: Port Apple bluetooth product = %s";
      char v17 = v13;
LABEL_31:
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, v16, (uint8_t *)&buf, 0x1Cu);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    if (v13 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v28, a1);
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      __int16 v30 = 1024;
      int v31 = 769;
      __int16 v32 = 2112;
      std::string::size_type v33 = v28.__r_.__value_.__r.__words[0];
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry: Port bluetooth product name = %@", (uint8_t *)&buf, 0x1Cu);
      sub_72924((uint64_t)&v28);
    }
    LODWORD(v28.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120))(v4);
    strcpy((char *)&buf, "diabbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v18 = sub_26DAC((AudioObjectID *)&v28, &buf, 0, 0);
    *((void *)&v21 + 1) = v19;
    *(void *)&long long v21 = v18;
    uint64_t v20 = v21 >> 32;
    if ((v20 & 0xFF00000000) != 0) {
      unsigned int v22 = v20;
    }
    else {
      unsigned int v22 = 0;
    }
    unsigned int v23 = (os_log_t *)sub_32A48(24);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(&v28, v22);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v25 = &v28;
      }
      else {
        double v25 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      __int16 v30 = 1024;
      int v31 = 775;
      __int16 v32 = 2080;
      std::string::size_type v33 = (std::string::size_type)v25;
      unint64_t v16 = "%25s:%-5d PlaybackDosimetry: Port bluetooth product ID = %s";
      char v17 = v24;
      goto LABEL_31;
    }
  }
}

void sub_24CF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24CF5C(CFDictionaryRef *a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 144);
  memset(v93, 0, 24);
  std::string __p = 0;
  long long v92 = 0uLL;
  BOOL v5 = v4 == 1885892674 || v4 == 1885892706;
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 192);
    if (v6)
    {
      strcpy((char *)buf, "cvodbolg");
      BYTE1(buf[0].mElement) = 0;
      HIWORD(buf[0].mElement) = 0;
      if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v6 + 16))(v6, buf))
      {
        CFArrayRef theArray = 0;
        int v95 = 0;
        int v96 = 8;
        uint64_t v94 = 0x676C6F62646F7663;
        (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFArrayRef *))(*(void *)v6 + 40))(v6, &v94, 0, 0, &v96, &theArray);
        CFArrayRef v7 = theArray;
        if (!theArray)
        {
          std::string::size_type v8 = (os_log_t *)sub_32A48(24);
          float v9 = *v8;
          if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
          {
            AudioObjectPropertyElement v10 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
            buf[0].int mSelector = 136315650;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 315;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].AudioObjectPropertyElement mElement = v10;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : device [%u] does not have volume curve data.", (uint8_t *)buf, 0x18u);
          }
          CFArrayRef v7 = theArray;
          if (!theArray) {
            goto LABEL_154;
          }
        }
        AudioObjectPropertyElement Count = CFArrayGetCount(v7);
        if (!theArray)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        AudioObjectPropertyElement v12 = Count;
        sub_156EDC((uint64_t)buf, theArray);
        uint64_t v13 = *(float **)&buf[0].mSelector;
        std::string __p = *(void **)&buf[0].mSelector;
        long long v92 = *(_OWORD *)&buf[0].mElement;
        if (*(void *)&buf[0].mElement != *(void *)&buf[0].mSelector
          && *(void *)&buf[0].mElement - *(void *)&buf[0].mSelector >= 5uLL)
        {
          while (*v13 == 0.0)
          {
            if (++v13 == *(float **)&buf[0].mElement) {
              goto LABEL_18;
            }
          }
          uint64_t v66 = (os_log_t *)sub_32A48(24);
          unint64_t v67 = *v66;
          if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_DEBUG))
          {
            buf[0].int mSelector = 136315650;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 328;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].AudioObjectPropertyElement mElement = v12;
            _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : number of volume map steps: %u", (uint8_t *)buf, 0x18u);
          }
          int v68 = (os_log_t *)sub_32A48(24);
          int v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEBUG))
          {
            AudioObjectPropertyElement v70 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
            sub_24E758(&v100, (float *)__p, (float *)v92);
            int v71 = (v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v100
                : (std::string *)v100.__r_.__value_.__r.__words[0];
            buf[0].int mSelector = 136315906;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 330;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].AudioObjectPropertyElement mElement = v70;
            LOWORD(buf[2].mSelector) = 2080;
            *(void *)((char *)&buf[2].mSelector + 2) = v71;
            _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : fetched volume map from device [%u]: %s", (uint8_t *)buf, 0x22u);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v100.__r_.__value_.__l.__data_);
            }
          }
          int v72 = 1;
LABEL_149:
          if (theArray) {
            CFRelease(theArray);
          }
          if (v4 == 1885892674 && v72)
          {
            LODWORD(v100.__r_.__value_.__l.__data_) = ((void)v92 - (void)__p) >> 2;
            sub_24E870(buf, 1885892674, v6, (unsigned int *)&v100);
            goto LABEL_161;
          }
LABEL_154:
          uint64_t v77 = *(void *)(a2 + 192);
          uint64_t v78 = *(unsigned int *)(a2 + 144);
          int v79 = sub_24B314((void *)a2);
          if (v78 == 1885892674) {
            int v80 = v79;
          }
          else {
            int v80 = 0;
          }
          if (v80 != 1)
          {
            LODWORD(v100.__r_.__value_.__l.__data_) = 17;
            sub_24E870(buf, v78, v77, (unsigned int *)&v100);
            v93[0] = *(void **)&buf[0].mSelector;
            *(_OWORD *)&v93[1] = *(_OWORD *)&buf[0].mElement;
            sub_6720C((char *)&__p, *(char **)&buf[0].mSelector, *(uint64_t *)&buf[0].mElement, (uint64_t)(*(void *)&buf[0].mElement - *(void *)&buf[0].mSelector) >> 2);
LABEL_165:
            uint64_t v82 = (os_log_t *)sub_32A48(24);
            unint64_t v18 = *v82;
            if (!*v82 || !os_log_type_enabled(*v82, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_178;
            }
            sub_24E758(&v100, (float *)v93[0], (float *)v93[1]);
            int v83 = SHIBYTE(v100.__r_.__value_.__r.__words[2]);
            std::string::size_type v84 = v100.__r_.__value_.__r.__words[0];
            sub_24E758(&v99, (float *)__p, (float *)v92);
            unsigned int v85 = &v100;
            if (v83 < 0) {
              unsigned int v85 = (std::string *)v84;
            }
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v86 = &v99;
            }
            else {
              BOOL v86 = (std::string *)v99.__r_.__value_.__r.__words[0];
            }
            buf[0].int mSelector = 136315906;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 795;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].AudioObjectPropertyElement mElement = v85;
            LOWORD(buf[2].mScope) = 2080;
            *(void *)((char *)&buf[2].mScope + 2) = v86;
            unsigned int v23 = "%25s:%-5d PlaybackDosimetry : volume curve for wireless headset. In: %s -> Out: %s";
            goto LABEL_173;
          }
          unsigned int v81 = sub_24C024(a2) - 8195;
          if (v81 <= 6 && ((1 << v81) & 0x4D) != 0)
          {
            int v103 = 0;
            *(_OWORD *)&buf[0].int mSelector = *(_OWORD *)"";
            *(_OWORD *)&buf[1].AudioObjectPropertyScope mScope = unk_4E87E8;
            *(_OWORD *)&buf[2].AudioObjectPropertyElement mElement = xmmword_4E87F8;
            long long v102 = unk_4E8808;
            sub_8732C((char *)&__p, (char *)buf, (uint64_t)v104, 0x11uLL);
            LODWORD(v100.__r_.__value_.__l.__data_) = ((void)v92 - (void)__p) >> 2;
            sub_24E870(buf, 1885892674, v77, (unsigned int *)&v100);
          }
          else
          {
            int v103 = 0;
            *(_OWORD *)&buf[0].int mSelector = *(_OWORD *)"";
            *(_OWORD *)&buf[1].AudioObjectPropertyScope mScope = unk_573314;
            *(_OWORD *)&buf[2].AudioObjectPropertyElement mElement = xmmword_573324;
            long long v102 = unk_573334;
            sub_8732C((char *)&__p, (char *)buf, (uint64_t)v104, 0x11uLL);
            LODWORD(v100.__r_.__value_.__l.__data_) = ((void)v92 - (void)__p) >> 2;
            sub_24E870(buf, 1885892674, v77, (unsigned int *)&v100);
          }
LABEL_161:
          if (v93[0])
          {
            v93[1] = v93[0];
            operator delete(v93[0]);
          }
          *(_OWORD *)unint64_t v93 = *(_OWORD *)&buf[0].mSelector;
          v93[2] = *(void **)&buf[1].mScope;
          goto LABEL_165;
        }
LABEL_18:
        if (v12 <= 1)
        {
          unsigned int v14 = (os_log_t *)sub_32A48(24);
          float v15 = *v14;
          if (*v14)
          {
            if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
            {
              buf[0].int mSelector = 136315650;
              *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 334;
              HIWORD(buf[1].mScope) = 1024;
              buf[1].AudioObjectPropertyElement mElement = v12;
              _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : Volume map has invalid number of steps: %u < 2, fallback to default", (uint8_t *)buf, 0x18u);
            }
          }
        }
        for (uint64_t i = (float *)__p; i != (float *)v92; ++i)
        {
          if (*i != 0.0) {
            goto LABEL_57;
          }
        }
        CFDictionaryRef v39 = (os_log_t *)sub_32A48(24);
        uint64_t v40 = *v39;
        if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
        {
          buf[0].int mSelector = 136315394;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 336;
          _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : Volume map contains all zeroes, fallback to default", (uint8_t *)buf, 0x12u);
        }
LABEL_57:
        int v41 = (os_log_t *)sub_32A48(24);
        int v42 = *v41;
        if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
        {
          AudioObjectPropertyElement v43 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
          sub_24E758(&v100, (float *)__p, (float *)v92);
          int v44 = (v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v100
              : (std::string *)v100.__r_.__value_.__r.__words[0];
          buf[0].int mSelector = 136315906;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 339;
          HIWORD(buf[1].mScope) = 1024;
          buf[1].AudioObjectPropertyElement mElement = v43;
          LOWORD(buf[2].mSelector) = 2080;
          *(void *)((char *)&buf[2].mSelector + 2) = v44;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : fetched volume map from device [%u]: %s", (uint8_t *)buf, 0x22u);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
        }
        std::string::size_type v45 = (os_log_t *)sub_32A48(24);
        int v46 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEBUG))
        {
          buf[0].int mSelector = 136315394;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 184;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : Reporting volume map to metrics.", (uint8_t *)buf, 0x12u);
        }
        *(_OWORD *)&v99.__r_.__value_.__r.__words[1] = 0uLL;
        v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99.__r_.__value_.__l.__size_;
        unint64_t v47 = (float *)__p;
        memset(&v98, 0, sizeof(v98));
        std::string::append(&v98, "{ ", 2uLL);
        if (__p != (void *)v92)
        {
          while (1)
          {
            std::to_string(&v100, *v47);
            if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v48 = &v100;
            }
            else {
              uint64_t v48 = (std::string *)v100.__r_.__value_.__r.__words[0];
            }
            if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v100.__r_.__value_.__l.__size_;
            }
            std::string::append(&v98, (const std::string::value_type *)v48, size);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v100.__r_.__value_.__l.__data_);
            }
            if (++v47 == (float *)v92) {
              break;
            }
            std::string::append(&v98, ", ", 2uLL);
          }
        }
        std::string::append(&v98, " }", 2uLL);
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v50 = &v98;
        }
        else {
          uint64_t v50 = (std::string *)v98.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v51 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v51 = v98.__r_.__value_.__l.__size_;
          }
          CFStringRef v52 = CFStringCreateWithBytes(0, (const UInt8 *)v50, v51, 0x8000100u, 0);
          if (!v52)
          {
            uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v53, "Could not construct");
          }
        }
        else
        {
          CFStringRef v52 = 0;
        }
        sub_21C8C(buf, "volume_map");
        if (v52) {
          CFRetain(v52);
        }
        *(void *)&buf[2].int mSelector = v52;
        sub_24BF88((uint64_t **)&v99, (void **)buf, (long long *)buf);
        if (*(void *)&buf[2].mSelector) {
          CFRelease(*(CFTypeRef *)&buf[2].mSelector);
        }
        if (SHIBYTE(buf[1].mElement) < 0) {
          operator delete(*(void **)&buf[0].mSelector);
        }
        if (v52) {
          CFRelease(v52);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if (sub_24B314((void *)a2))
        {
          unsigned int v54 = sub_24C024(a2);
          std::to_string(&v100, v54);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v55 = &v100;
          }
          else {
            uint64_t v55 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if (v55)
          {
            if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v56 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v56 = v100.__r_.__value_.__l.__size_;
            }
            CFStringRef v57 = CFStringCreateWithBytes(0, (const UInt8 *)v55, v56, 0x8000100u, 0);
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
            if (!v57)
            {
              uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v58, "Could not construct");
            }
          }
          else
          {
            CFStringRef v57 = 0;
            v98.__r_.__value_.__r.__words[0] = 0;
          }
          sub_24C154(buf, "bluetooth_product_id", (const void **)&v98.__r_.__value_.__l.__data_);
          sub_24BF88((uint64_t **)&v99, (void **)buf, (long long *)buf);
          if (*(void *)&buf[2].mSelector) {
            CFRelease(*(CFTypeRef *)&buf[2].mSelector);
          }
          if (SHIBYTE(buf[1].mElement) < 0) {
            operator delete(*(void **)&buf[0].mSelector);
          }
          if (v57) {
            CFRelease(v57);
          }
        }
        else
        {
          uint64_t v59 = *(void *)(a2 + 192);
          if (!v59)
          {
LABEL_139:
            memset(buf, 0, 24);
            sub_162D4(buf, v99.__r_.__value_.__r.__words[2]);
            std::string::size_type v73 = v99.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v99.__r_.__value_.__l.__data_ != &v99.__r_.__value_.__r.__words[1])
            {
              do
              {
                sub_24C238(buf, (const UInt8 *)(v73 + 32), (const void **)(v73 + 56));
                CFTypeRef v74 = *(std::string **)(v73 + 8);
                if (v74)
                {
                  do
                  {
                    unsigned int v75 = v74;
                    CFTypeRef v74 = (std::string *)v74->__r_.__value_.__r.__words[0];
                  }
                  while (v74);
                }
                else
                {
                  do
                  {
                    unsigned int v75 = *(std::string **)(v73 + 16);
                    BOOL v5 = v75->__r_.__value_.__r.__words[0] == v73;
                    std::string::size_type v73 = (std::string::size_type)v75;
                  }
                  while (!v5);
                }
                std::string::size_type v73 = (std::string::size_type)v75;
              }
              while (v75 != (std::string *)&v99.__r_.__value_.__r.__words[1]);
            }
            CFDictionaryRef v76 = sub_4D69C((void ***)buf);
            v100.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
            sub_14F84((void ***)&v100);
            sub_F2254((uint64_t)v76, 1, 6);
            if (v76) {
              CFRelease(v76);
            }
            sub_24C358((void *)v99.__r_.__value_.__l.__size_);
            int v72 = 0;
            goto LABEL_149;
          }
          LODWORD(v100.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 120))(v59);
          strcpy((char *)buf, "diabbolg");
          BYTE1(buf[0].mElement) = 0;
          HIWORD(buf[0].mElement) = 0;
          unint64_t v60 = sub_26DAC((AudioObjectID *)&v100, buf, 0, 0);
          *((void *)&v63 + 1) = v61;
          *(void *)&long long v63 = v60;
          uint64_t v62 = v63 >> 32;
          if ((v62 & 0xFF00000000) != 0) {
            unsigned int v64 = v62;
          }
          else {
            unsigned int v64 = 0;
          }
          sub_2417C(&v100, v64);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v65 = &v100;
          }
          else {
            __int16 v65 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
          sub_24C1DC(buf, &v98.__r_.__value_.__l.__data_);
          sub_24BF88((uint64_t **)&v99, (void **)buf, (long long *)buf);
          if (*(void *)&buf[2].mSelector) {
            CFRelease(*(CFTypeRef *)&buf[2].mSelector);
          }
          if (SHIBYTE(buf[1].mElement) < 0) {
            operator delete(*(void **)&buf[0].mSelector);
          }
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        goto LABEL_139;
      }
      __int16 v36 = (os_log_t *)sub_32A48(24);
      os_log_t v37 = *v36;
      if (!*v36 || !os_log_type_enabled(*v36, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_154;
      }
      AudioObjectPropertyElement v38 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
      buf[0].int mSelector = 136315650;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 351;
      HIWORD(buf[1].mScope) = 1024;
      buf[1].AudioObjectPropertyElement mElement = v38;
      std::string::size_type v33 = "%25s:%-5d PlaybackDosimetry : device [%u] does not have a volume map.";
      __int16 v34 = v37;
      uint32_t v35 = 24;
    }
    else
    {
      int v31 = (os_log_t *)sub_32A48(24);
      os_log_t v32 = *v31;
      if (!*v31 || !os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_154;
      }
      buf[0].int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 356;
      std::string::size_type v33 = "%25s:%-5d PlaybackDosimetry : no device to fetch volume map from.";
      __int16 v34 = v32;
      uint32_t v35 = 18;
    }
    _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEBUG, v33, (uint8_t *)buf, v35);
    goto LABEL_154;
  }
  if (v4 != 1885892727)
  {
    sub_24E5A4(a2, (uint64_t)v93, (char *)&__p);
    os_log_t v24 = (os_log_t *)sub_32A48(24);
    double v25 = *v24;
    if (!*v24 || !os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_178;
    }
    sub_2417C(&v100, v4);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v26 = &v100;
    }
    else {
      __int16 v26 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    sub_24E758(&v99, (float *)v93[0], (float *)v93[1]);
    int v27 = SHIBYTE(v99.__r_.__value_.__r.__words[2]);
    std::string::size_type v28 = v99.__r_.__value_.__r.__words[0];
    sub_24E758(&v98, (float *)__p, (float *)v92);
    double v29 = &v99;
    if (v27 < 0) {
      double v29 = (std::string *)v28;
    }
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v30 = &v98;
    }
    else {
      __int16 v30 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    buf[0].int mSelector = 136316162;
    *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 802;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].AudioObjectPropertyElement mElement = v26;
    LOWORD(buf[2].mScope) = 2080;
    *(void *)((char *)&buf[2].mScope + 2) = v29;
    HIWORD(buf[3].mSelector) = 2080;
    *(void *)&buf[3].AudioObjectPropertyScope mScope = v30;
    _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Unsupported port type: %s. Returning volume curve for wired headset. In: %s -> Out: %s", (uint8_t *)buf, 0x30u);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    goto LABEL_174;
  }
  sub_24E5A4(a2, (uint64_t)v93, (char *)&__p);
  char v17 = (os_log_t *)sub_32A48(24);
  unint64_t v18 = *v17;
  if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_178;
  }
  sub_24E758(&v100, (float *)v93[0], (float *)v93[1]);
  int v19 = SHIBYTE(v100.__r_.__value_.__r.__words[2]);
  std::string::size_type v20 = v100.__r_.__value_.__r.__words[0];
  sub_24E758(&v99, (float *)__p, (float *)v92);
  long long v21 = &v100;
  if (v19 < 0) {
    long long v21 = (std::string *)v20;
  }
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v22 = &v99;
  }
  else {
    unsigned int v22 = (std::string *)v99.__r_.__value_.__r.__words[0];
  }
  buf[0].int mSelector = 136315906;
  *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
  LOWORD(buf[1].mSelector) = 1024;
  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 790;
  HIWORD(buf[1].mScope) = 2080;
  *(void *)&buf[1].AudioObjectPropertyElement mElement = v21;
  LOWORD(buf[2].mScope) = 2080;
  *(void *)((char *)&buf[2].mScope + 2) = v22;
  unsigned int v23 = "%25s:%-5d PlaybackDosimetry : volume curve for wired headset. In: %s -> Out: %s";
LABEL_173:
  _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)buf, 0x26u);
LABEL_174:
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
LABEL_178:
  sub_22210((CFStringRef *)buf, "InputMap");
  *(void *)&buf[0].AudioObjectPropertyElement mElement = sub_A26C8((float **)v93);
  sub_22210((CFStringRef *)&buf[1].mScope, "OutputMap");
  *(void *)&buf[2].int mSelector = sub_A26C8((float **)&__p);
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v100.__r_.__value_.__l.__size_ = 2;
  uint64_t v87 = 0;
  *a1 = sub_4D3D8((uint64_t)&v100);
  do
  {
    signed int v88 = *(const void **)((char *)&buf[2].mSelector + v87);
    if (v88) {
      CFRelease(v88);
    }
    int64_t v89 = *(const void **)((char *)&buf[1].mScope + v87);
    if (v89) {
      CFRelease(v89);
    }
    v87 -= 16;
  }
  while (v87 != -32);
  if (__p)
  {
    *(void *)&long long v92 = __p;
    operator delete(__p);
  }
  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }
}

void sub_24DFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t buf,int a39,__int16 a40,__int16 a41,__int16 a42,__int16 a43,int a44,CFTypeRef a45)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a2 == 3)
  {
    uint64_t v48 = __cxa_begin_catch(exception_object);
    uint64_t v49 = (os_log_t *)sub_32A48(24);
    os_log_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
    {
      int v51 = v48[2];
      LODWORD(buf) = 136315650;
      *(void *)(v45 + 4) = "PortUtilities.cpp";
      a40 = 1024;
      *(_DWORD *)(v45 + 14) = 343;
      a43 = 1024;
      a44 = v51;
      CFStringRef v52 = "%25s:%-5d PlaybackDosimetry : Failed to fetch volume map from device, fallback to default: %u";
      uint64_t v53 = v50;
      uint32_t v54 = 24;
LABEL_15:
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, v52, (uint8_t *)&buf, v54);
    }
  }
  else
  {
    uint64_t v55 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      std::string::size_type v56 = v55;
      CFStringRef v57 = (os_log_t *)sub_32A48(24);
      os_log_t v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v59 = (*(uint64_t (**)(void *))(*(void *)v56 + 16))(v56);
        LODWORD(buf) = 136315650;
        *(void *)(v45 + 4) = "PortUtilities.cpp";
        a40 = 1024;
        *(_DWORD *)(v45 + 14) = 345;
        a43 = 2080;
        *(void *)(v45 + 20) = v59;
        CFStringRef v52 = "%25s:%-5d PlaybackDosimetry : Failed to fetch volume map from device, fallback to default: %s";
        uint64_t v53 = v58;
        uint32_t v54 = 28;
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v60 = (os_log_t *)sub_32A48(24);
      os_log_t v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315394;
        *(void *)(v45 + 4) = "PortUtilities.cpp";
        a40 = 1024;
        *(_DWORD *)(v45 + 14) = 347;
        CFStringRef v52 = "%25s:%-5d PlaybackDosimetry : Failed to fetch volume map from device, fallback to default";
        uint64_t v53 = v61;
        uint32_t v54 = 18;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x24DC20);
}

void sub_24E5A4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(unsigned int *)(a1 + 144);
  int v7 = *(_DWORD *)(a1 + 264);
  if (v7 == 1214539380 || v7 == 1751410292)
  {
    if ((sub_207DFC() & 1) != 0 || MGGetBoolAnswer() && MGGetBoolAnswer()) {
      goto LABEL_9;
    }
  }
  else if (v7 == 1752709424)
  {
LABEL_9:
    unsigned int v12 = 2;
    sub_24E870(&__src, v6, v5, &v12);
    float v9 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v9;
      operator delete(v9);
    }
    AudioObjectPropertyElement v10 = (char *)__src;
    *(void *)a2 = __src;
    uint64_t v11 = v14;
    *(_OWORD *)(a2 + 8) = v14;
    if (a3 != (char *)a2)
    {
      sub_6720C(a3, v10, v11, (v11 - (uint64_t)v10) >> 2);
    }
    return;
  }
  __src = (void *)0x40000000C2980000;
  sub_8732C((char *)a2, (char *)&__src, (uint64_t)&v14, 2uLL);
  if (a3 != (char *)a2) {
    sub_6720C(a3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
}

std::string *sub_24E758(std::string *a1, float *a2, float *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      uint64_t v6 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v9
         : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(v9.__r_.__value_.__r.__words[2])
         : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_24E834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_24E870(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v6 = a2;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v48 = 0;
  double v8 = sub_24C540(a2, a3, &v48);
  if (!v48)
  {
    CFDictionaryRef v39 = (os_log_t *)sub_32A48(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      int v41 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
      sub_2417C(v46, v6);
      int v42 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      os_log_t v50 = "PortUtilities.cpp";
      __int16 v51 = 1024;
      int v52 = 284;
      __int16 v53 = 1024;
      int v54 = v41;
      __int16 v55 = 2080;
      std::string::size_type v56 = v42;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Device [%u - %s] does not have volume range.\"", buf, 0x22u);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Device [%u - %s] does not have volume range.");
  }
  uint64_t v10 = *a4;
  if (v10)
  {
    double v11 = v8;
    double v12 = v9;
    uint64_t v13 = (char *)sub_46BF4(*a4);
    uint64_t v15 = &v13[4 * v14];
    bzero(v13, 4 * v10);
    *(void *)&long long v18 = &v13[4 * v10];
    *((void *)&v18 + 1) = v15;
    uint64_t v19 = *a4;
    if (v19)
    {
      uint64_t v20 = 0;
      *(float *)v17.i32 = v11;
      float v21 = v12;
      float v22 = v21 - *(float *)v17.i32;
      uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(v19 - 1);
      *(float *)v16.i32 = v22 / (float)(v10 - 1);
      int64x2_t v24 = (int64x2_t)xmmword_4E7990;
      int64x2_t v25 = vdupq_n_s64(2uLL);
      uint64_t v26 = (v19 + 1) & 0x1FFFFFFFELL;
      float32x2_t v27 = (float32x2_t)vdup_lane_s32(v16, 0);
      float32x2_t v28 = (float32x2_t)vdup_lane_s32(v17, 0);
      do
      {
        int32x2_t v29 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v24));
        v30.i32[0] = v20;
        v30.i32[1] = v20 + 1;
        float32x2_t v31 = vmla_f32(v28, v27, vcvt_f32_u32(v30));
        if (v29.i8[0]) {
          *(_DWORD *)&v13[4 * v20] = v31.i32[0];
        }
        if (v29.i8[4]) {
          *(_DWORD *)&v13[4 * v20 + 4] = v31.i32[1];
        }
        v20 += 2;
        int64x2_t v24 = vaddq_s64(v24, v25);
      }
      while (v26 != v20);
    }
  }
  else
  {
    uint64_t v13 = 0;
    long long v18 = 0uLL;
  }
  *a1 = v13;
  int v44 = (float *)v18;
  *(_OWORD *)(a1 + 1) = v18;
  os_log_t v32 = (os_log_t *)sub_32A48(24);
  std::string::size_type v33 = *v32;
  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEBUG))
  {
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
    sub_2417C(v46, v6);
    int v35 = v47;
    __int16 v36 = (void **)v46[0];
    sub_24E758(&__p, (float *)v13, v44);
    os_log_t v37 = v46;
    if (v35 < 0) {
      os_log_t v37 = v36;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    os_log_t v50 = "PortUtilities.cpp";
    __int16 v51 = 1024;
    int v52 = 288;
    __int16 v53 = 1024;
    int v54 = v34;
    __int16 v55 = 2080;
    std::string::size_type v56 = v37;
    __int16 v57 = 2080;
    os_log_t v58 = p_p;
    _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : created input volume map for device [%u - %s]: %s", buf, 0x2Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
  }
}

void sub_24EC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

BOOL sub_24EC98(uint64_t a1)
{
  if (!*(void *)(a1 + 192)) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 152))(a1) || *(_DWORD *)(a1 + 144) != 1885892674) {
    return 0;
  }
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 192) + 304))(&cf);
  if (!cf) {
    return 0;
  }
  CFRelease(cf);
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 192) + 304))(&cf);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BOOL v3 = (unint64_t)CFArrayGetCount((CFArrayRef)cf) > 1;
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

void sub_24EDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_63908((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24EE10()
{
  return 1;
}

void sub_24EE20(uint64_t a1, void *a2)
{
  *a2 = off_628650;
}

void *sub_24EE40()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_628650;
  return result;
}

void sub_24EE78()
{
}

void *sub_24EE90(uint64_t *a1, void *a2)
{
  uint64_t v4 = sub_10FBF0();
  v6[0] = off_628698;
  v6[3] = v6;
  sub_10EA24(a1, v4, a2, (uint64_t)v6);
  return sub_6AFD4(v6);
}

void sub_24EF2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6AFD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_24EF40(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a2 + 400))(a2) == 1;
}

void sub_24EF94(uint64_t a1, void *a2)
{
  *a2 = off_628698;
}

void *sub_24EFB4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_628698;
  return result;
}

void sub_24EFEC()
{
}

BOOL sub_24F004()
{
  std::string __p = 0;
  int64x2_t v25 = 0;
  uint64_t v26 = 0;
  strcpy(v27, "cwdv");
  v27[8] = 0;
  int v28 = 3;
  v30[0] = 0;
  v30[1] = 0;
  int32x2_t v29 = v30;
  CFTypeRef cf = 0;
  int v31 = 44722848;
  uint64_t v0 = sub_10FBF0();
  v33[0] = (uint64_t)off_628650;
  int v35 = v33;
  sub_10EA24(v20, v0, &__p, (uint64_t)v33);
  sub_8E4B8(&v21, v20);
  sub_8108(v20);
  sub_6AFD4(v33);
  sub_24F2E4();
  v33[0] = (uint64_t)v33;
  v33[1] = (uint64_t)v33;
  uint64_t v34 = 0;
  uint64_t v1 = v22;
  if (v22 != &v21)
  {
    uint64_t v2 = 0;
    uint64_t v3 = qword_64E4D0[0];
    uint64_t v4 = (_DWORD *)unk_64E4D8;
    uint64_t v5 = v23;
    do
    {
      uint64_t v6 = v1[2];
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 144);
      }
      std::string::size_type v7 = (_DWORD *)v3;
      if ((_DWORD *)v3 == v4)
      {
LABEL_8:
        double v8 = v1;
      }
      else
      {
        while (v6 != *v7)
        {
          if (++v7 == v4) {
            goto LABEL_8;
          }
        }
        double v8 = &v21;
        if ((uint64_t *)v1[1] == &v21)
        {
          char v11 = 1;
        }
        else
        {
          double v8 = (uint64_t *)v1[1];
          do
          {
            uint64_t v9 = v8[2];
            if (v9) {
              LODWORD(v9) = *(_DWORD *)(v9 + 144);
            }
            uint64_t v10 = (_DWORD *)v3;
            while (v9 != *v10)
            {
              if (++v10 == v4)
              {
                char v11 = 0;
                goto LABEL_23;
              }
            }
            double v8 = (uint64_t *)v8[1];
          }
          while (v8 != &v21);
          char v11 = 1;
          double v8 = &v21;
        }
LABEL_23:
        if (v1 != v8)
        {
          uint64_t v12 = *v8;
          if ((uint64_t *)*v8 == v1)
          {
            uint64_t v15 = 1;
          }
          else
          {
            uint64_t v13 = -1;
            uint64_t v14 = v1;
            do
            {
              uint64_t v14 = (uint64_t *)v14[1];
              ++v13;
            }
            while (v14 != (uint64_t *)v12);
            uint64_t v15 = v13 + 2;
          }
          v5 -= v15;
          uint64_t v23 = v5;
          v2 += v15;
          uint64_t v34 = v2;
          uint64_t v16 = *v1;
          *(void *)(v16 + 8) = *(void *)(v12 + 8);
          **(void **)(v12 + 8) = v16;
          uint64_t v17 = v33[0];
          *(void *)(v33[0] + 8) = v1;
          uint64_t *v1 = v17;
          v33[0] = v12;
          *(void *)(v12 + 8) = v33;
        }
        if (v11) {
          goto LABEL_10;
        }
      }
      double v8 = (uint64_t *)v8[1];
LABEL_10:
      uint64_t v1 = v8;
    }
    while (v8 != &v21);
  }
  sub_B8E4(v33);
  uint64_t v18 = v23;
  sub_B8E4(&v21);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v30[0]);
  if (__p)
  {
    int64x2_t v25 = __p;
    operator delete(__p);
  }
  return v18 != 0;
}

void sub_24F290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24F2E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64E4E8, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_64E4E8))
    {
      long long v0 = xmmword_4E7A20;
      sub_1A2E28(qword_64E4D0, &v0, 4uLL);
      __cxa_guard_release(&qword_64E4E8);
    }
  }
}

void sub_24F384(_Unwind_Exception *a1)
{
}

uint64_t sub_24F39C(uint64_t a1)
{
  if (*(void *)(a1 + 192) && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 152))(a1))
  {
    int v2 = *(_DWORD *)(a1 + 144);
    if (v2 == 1886216820 || v2 == 1885892706)
    {
      sub_10653C(v15, a1);
      if (!v15[2])
      {
        uint64_t v11 = 0;
LABEL_32:
        sub_8108(v15);
        return v11;
      }
      sub_549A4((uint64_t *)&v13, (uint64_t *)(v15[1] + 16), "", 905);
      uint64_t v4 = v13;
      if (v13[24])
      {
        int v5 = (*(uint64_t (**)(void *))(*v13 + 152))(v13);
        int v6 = v4[36] == 1885892674 ? v5 : 0;
        if (v6 == 1)
        {
          (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(void *)v4 + 272))(v16, v4);
          sub_FB288(&v17, v16);
          sub_8108(v16);
          if (v19)
          {
            std::string::size_type v7 = v18;
            if (v18 == &v17) {
              goto LABEL_34;
            }
            while (1)
            {
              double v8 = (std::__shared_weak_count *)v7[3];
              if (v8)
              {
                uint64_t v9 = (_DWORD *)v7[2];
                atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v10 = std::__shared_weak_count::lock(v8);
                if (v10) {
                  sub_4636C(v10);
                }
                else {
                  uint64_t v9 = 0;
                }
                std::__shared_weak_count::__release_weak(v8);
                if (v9 == v4) {
                  break;
                }
              }
              std::string::size_type v7 = (uint64_t *)v7[1];
              if (v7 == &v17)
              {
                std::string::size_type v7 = &v17;
                break;
              }
            }
            if (v18 == v7)
            {
LABEL_34:
              uint64_t v11 = 1;
              goto LABEL_35;
            }
            if (&v17 != v7)
            {
              uint64_t v11 = 2;
LABEL_35:
              sub_B8E4(&v17);
LABEL_30:
              if (v14) {
                sub_4636C(v14);
              }
              goto LABEL_32;
            }
          }
          sub_B8E4(&v17);
        }
      }
      uint64_t v11 = 0;
      goto LABEL_30;
    }
  }
  return 0;
}

void sub_24F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_8108((uint64_t *)va1);
  if (a4) {
    sub_4636C(a4);
  }
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24F5F4(uint64_t a1)
{
  if (!*(void *)(a1 + 192)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (!result) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 144);
  if (v3 != 1886216820 && v3 != 1885892706) {
    return 0;
  }
  uint64_t v5 = &v8;
  sub_10653C(&v8, a1);
  uint64_t v6 = v10;
  if (v10)
  {
    uint64_t v7 = v9;
    if (v9 == &v8)
    {
      LOBYTE(v5) = 0;
    }
    else
    {
      do
      {
        sub_549A4(&v11, v7 + 2, "", 923);
        LOBYTE(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 424))(v11);
        if (v12) {
          sub_4636C(v12);
        }
        if (v5) {
          break;
        }
        uint64_t v7 = (uint64_t *)v7[1];
      }
      while (v7 != &v8);
    }
  }
  sub_8108(&v8);
  return (v6 != 0) & v5;
}

void sub_24F738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  sub_8108(&a10);
  _Unwind_Resume(a1);
}

void sub_24F760(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 144);
  *a1 = 0;
  if (v4 == 1886216809) {
    int v5 = 1768845428;
  }
  else {
    int v5 = 1735159650;
  }
  if (v4 == 1886613611 || v4 == 1886545251) {
    AudioObjectPropertyScope v7 = 1869968496;
  }
  else {
    AudioObjectPropertyScope v7 = v5;
  }
  uint64_t v8 = *(void *)(a2 + 192);
  LODWORD(block) = 1936945763;
  HIDWORD(block) = v7;
  LODWORD(v20) = 0;
  if ((*(unsigned int (**)(uint64_t, void ***))(*(void *)v8 + 16))(v8, &block))
  {
    AudioObjectID v9 = (*(uint64_t (**)(void))(**(void **)(a2 + 192) + 120))(*(void *)(a2 + 192));
    inAddress.AudioObjectPropertyElement mElement = 0;
    AudioObjectID v18 = v9;
    inAddress.int mSelector = 1936945763;
    inAddress.AudioObjectPropertyScope mScope = v7;
    sub_869C8((uint64_t)&block, &v18, &inAddress, 0, 0);
    int v10 = (int)block;
    if (block || !(_BYTE)p_p)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v10;
    }
    std::string __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = (void *)v20;
    sub_46B38(&__p, (const void *)v20, (uint64_t)v21, ((uint64_t)v21 - v20) >> 2);
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    std::string __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  switch(v4)
  {
    case 1886216809:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_668E98, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_668E98))
      {
        __cxa_guard_release(&qword_668E98);
      }
      block = _NSConcreteStackBlock;
      uint64_t v20 = 0x40000000;
      uint64_t v21 = sub_449304;
      float v22 = &unk_63F690;
      p_p = &__p;
      if (qword_668EA0 != -1) {
        dispatch_once(&qword_668EA0, &block);
      }
      uint64_t v12 = qword_668E90;
      if (qword_668E90) {
        CFRetain((CFTypeRef)qword_668E90);
      }
      break;
    case 1886545251:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_668E80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_668E80))
      {
        __cxa_guard_release(&qword_668E80);
      }
      if (qword_668E88 != -1) {
        dispatch_once(&qword_668E88, &stru_63F610);
      }
      uint64_t v12 = qword_668E78;
      if (qword_668E78) {
        CFRetain((CFTypeRef)qword_668E78);
      }
      break;
    case 1886613611:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_668E68, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_668E68))
      {
        __cxa_guard_release(&qword_668E68);
      }
      block = _NSConcreteStackBlock;
      uint64_t v20 = 0x40000000;
      uint64_t v21 = sub_4479CC;
      float v22 = &unk_63F5D0;
      p_p = &__p;
      if (qword_668E70 != -1) {
        dispatch_once(&qword_668E70, &block);
      }
      uint64_t v12 = qword_668E60;
      if (qword_668E60) {
        CFRetain((CFTypeRef)qword_668E60);
      }
      break;
    default:
      goto LABEL_35;
  }
  *a1 = v12;
LABEL_35:
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_24FB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  sub_63908(v18);
  _Unwind_Resume(a1);
}

void sub_24FB5C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 192) + 288))(&v29);
  int v4 = v30;
  if (v29 != v30)
  {
    *(void *)a1 = v29;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v31;
    return;
  }
  sub_24F760((uint64_t *)&theArray, a2);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  CFArrayRef v5 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v7 = Count;
    CFArrayRef v8 = theArray;
    if (theArray)
    {
      CFIndex v28 = CFArrayGetCount(theArray);
      if (v7) {
        goto LABEL_6;
      }
    }
    else
    {
      CFIndex v28 = 0;
      if (Count)
      {
LABEL_6:
        AudioObjectID v9 = 0;
        unint64_t v10 = 0;
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        CFIndex v27 = v7;
        do
        {
          if (v5 == v8 && v12 == v28) {
            break;
          }
          sub_36FD1C(cf, v5, v12);
          if (!*(void *)cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          uint64_t v13 = sub_7E430(*(const __CFDictionary **)cf, "trim_gain_db");
          if (v13)
          {
            unint64_t v14 = sub_9976C((uint64_t)v13);
            if (HIDWORD(v14)) {
              continue;
            }
          }
          sub_7F218();
          int v15 = v14;
          if ((unint64_t)v11 >= v10)
          {
            uint64_t v16 = v11 - v9;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62) {
              sub_60548();
            }
            if ((uint64_t)(v10 - (void)v9) >> 1 > v17) {
              unint64_t v17 = (uint64_t)(v10 - (void)v9) >> 1;
            }
            if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18) {
              unint64_t v18 = (unint64_t)sub_46BF4(v18);
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = (float *)(v18 + 4 * v16);
            *(_DWORD *)uint64_t v20 = v15;
            uint64_t v21 = v20 + 1;
            while (v11 != v9)
            {
              int v22 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v20-- - 1) = v22;
            }
            unint64_t v10 = v18 + 4 * v19;
            *(void *)a1 = v20;
            *(void *)(a1 + 8) = v21;
            *(void *)(a1 + 16) = v10;
            if (v9) {
              operator delete(v9);
            }
            AudioObjectID v9 = v20;
            uint64_t v11 = v21;
            CFIndex v7 = v27;
          }
          else
          {
            *(_DWORD *)v11++ = v14;
          }
          *(void *)(a1 + 8) = v11;
          if (*(void *)cf) {
            CFRelease(*(CFTypeRef *)cf);
          }
          ++v12;
        }
        while (v12 != v7);
        goto LABEL_35;
      }
    }
  }
  uint64_t v11 = 0;
LABEL_35:
  uint64_t v23 = sub_32A48(13);
  if (*(unsigned char *)(v23 + 8))
  {
    int64x2_t v24 = *(NSObject **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        sub_24E758(&__p, *(float **)a1, v11);
        int64x2_t v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)CFTypeRef cf = 136315650;
        *(void *)&cf[4] = "PortUtilities.cpp";
        __int16 v35 = 1024;
        int v36 = 164;
        __int16 v37 = 2080;
        AudioObjectPropertyElement v38 = v25;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d FDR Sorted TrimGains Vector: %s", cf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v29)
  {
    uint32x2_t v30 = v29;
    operator delete(v29);
  }
}

void sub_24FEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18, __int16 a19, char a20,char a21)
{
  if (v22)
  {
    *(void *)(v21 + 8) = v22;
    operator delete(v22);
  }
  sub_63908(&a18);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_24FF4C(uint64_t a1)
{
  if (!a1)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    CFArrayRef v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      CFArrayRef v8 = "PortUtilities.cpp";
      __int16 v9 = 1024;
      int v10 = 1060;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376))(a1);
  return (v1 & 0xFF00000000) != 0 && v1 != 0;
}

void sub_250080(_Unwind_Exception *exception_object)
{
}

BOOL sub_25009C(int a1)
{
  sub_250108();
  uint64_t v2 = qword_64E4F0;
  sub_250108();
  if (v2 == qword_64E4F8) {
    return 0;
  }
  uint64_t v3 = v2 + 4;
  do
  {
    int v4 = *(_DWORD *)(v3 - 4);
    BOOL result = v4 == a1;
    BOOL v6 = v4 == a1 || v3 == qword_64E4F8;
    v3 += 4;
  }
  while (!v6);
  return result;
}

void sub_250108()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64E508, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_64E508))
    {
      qmemcpy(v0, "ptspptrpt2aptfhptelptwhptbtptpcptsaptlaptmaptaaptdhptaup", sizeof(v0));
      sub_1A2E28(&qword_64E4F0, v0, 0xEuLL);
      __cxa_guard_release(&qword_64E508);
    }
  }
}

void sub_2501BC(_Unwind_Exception *a1)
{
}

void sub_2501D4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_105F14(v8, a2);
  CFArrayRef v5 = (uint64_t *)v8[1];
  sub_6BA78((uint64_t)v11, a3);
  if (v5 == v8)
  {
LABEL_7:
    sub_6AFD4(v11);
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_9;
  }
  while (1)
  {
    sub_549A4(&v9, v5 + 2, "", 1102);
    if (!v12) {
      sub_56964();
    }
    char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v9);
    if (v10) {
      sub_4636C(v10);
    }
    if (v6) {
      break;
    }
    CFArrayRef v5 = (uint64_t *)v5[1];
    if (v5 == v8) {
      goto LABEL_7;
    }
  }
  sub_6AFD4(v11);
  if (v5 == v8) {
    goto LABEL_8;
  }
  uint64_t v7 = v5[3];
  *a1 = v5[2];
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
LABEL_9:
  sub_8108(v8);
}

void sub_250318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_25035C(uint64_t a1, uint64_t a2)
{
  return (*(_WORD *)(a2 + 184) & 1) == 0;
}

void sub_250374(uint64_t a1, void *a2)
{
  *a2 = off_6286E0;
}

void *sub_250394()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_6286E0;
  return result;
}

void sub_2503CC()
{
}

void *sub_2503E4(void *a1, uint64_t a2)
{
  v3[0] = off_628728;
  v3[3] = v3;
  sub_2501D4(a1, a2, (uint64_t)v3);
  return sub_6AFD4(v3);
}

void sub_250468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6AFD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_25047C(uint64_t a1, uint64_t a2)
{
  return sub_25009C(*(_DWORD *)(a2 + 144));
}

void sub_25048C(uint64_t a1, void *a2)
{
  *a2 = off_628728;
}

void *sub_2504AC()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_628728;
  return result;
}

void sub_2504E4()
{
}

uint64_t sub_2504FC(unsigned char *a1, uint64_t a2, double a3)
{
  int v9 = 1651798886;
  double v10 = a3;
  if ((sub_FE748(a2) & 1) == 0)
  {
    LOBYTE(v14) = 0;
    char v15 = 0;
    LOBYTE(v7) = 0;
    char v8 = 0;
    sub_7E2E8((uint64_t)&v14);
LABEL_8:
    *a1 = 0;
    a1[8] = 0;
    return sub_7E2E8((uint64_t)&v7);
  }
  LOBYTE(v14) = 0;
  char v15 = 0;
  LOBYTE(v7) = 0;
  char v8 = 0;
  sub_7E2E8((uint64_t)&v14);
  if (!sub_FE7BC(a2)) {
    goto LABEL_8;
  }
  unint64_t v14 = 0;
  if (sub_FE830(a2)) {
    goto LABEL_8;
  }
  CFArrayRef v5 = v14;
  CFTypeRef v12 = v14;
  sub_688E8(&v11, &v12);
  char v8 = 1;
  uint64_t v7 = v11;
  if (v5) {
    CFRelease(v5);
  }
  *(void *)a1 = v7;
  uint64_t v7 = 0;
  a1[8] = 1;
  return sub_7E2E8((uint64_t)&v7);
}

BOOL sub_250638(uint64_t a1, const UInt8 *a2)
{
  sub_2504FC(&v6, a1, COERCE_DOUBLE(1735159650));
  if (!v7)
  {
    sub_7E2E8((uint64_t)&v6);
    return 0;
  }
  CFDictionaryRef v3 = v6;
  CFDictionaryRef v6 = 0;
  sub_7E2E8((uint64_t)&v6);
  if (!v3) {
    return 0;
  }
  BOOL v4 = (unsigned __int16)sub_156140(v3, a2) > 0x100u;
  CFRelease(v3);
  return v4;
}

BOOL sub_2506C8(uint64_t a1)
{
  sub_21C8C(__p, "kBluetoothAudioDeviceFeatureHearingAssistCapability");
  BOOL v2 = sub_250638(a1, (const UInt8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

uint64_t sub_250724(uint64_t a1, int a2)
{
  if (!a2 || *(_DWORD *)(a1 + 144) != 1886216809 || !sub_20A008()) {
    return *(void *)(a1 + 192);
  }
  CFDictionaryRef v3 = (void *)sub_F820C();
  *(void *)char v8 = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
  v8[8] = 1;
  uint64_t v4 = sub_F832C(v3, (CFStringRef *)v8);
  sub_72924((uint64_t)v8);
  if (!v4)
  {
    char v5 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v8 = 136315394;
      *(void *)&v8[4] = "PortUtilities.cpp";
      __int16 v9 = 1024;
      int v10 = 1207;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Low power microphone device is expected but not available.", v8, 0x12u);
    }
    return *(void *)(a1 + 192);
  }
  return v4;
}

void sub_250850(_Unwind_Exception *exception_object)
{
}

BOOL sub_25086C(int a1, uint64_t a2)
{
  if (a1 != 1885892727 || a2 == 0) {
    return 0;
  }
  LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  uint64_t inAddress = 0x676C6F6268656164;
  LODWORD(inAddress_8) = 0;
  sub_CAD1C((uint64_t)&v20, (AudioObjectID *)&v15, (AudioObjectPropertyAddress *)&inAddress);
  if (!v23) {
    return 0;
  }
  CFDictionaryRef v3 = v22;
  CFDictionaryRef v22 = 0;
  unint64_t v17 = &off_6412B0;
  CFDictionaryRef theDict = v3;
  char v19 = 1;
  sub_49A90(&v21);
  if (!v19) {
    return 0;
  }
  if ((sub_1FE074(theDict, @"hasAudioJack") & 1) == 0)
  {
    if (v19) {
      sub_49A90(&v17);
    }
    return 0;
  }
  char v15 = &off_628770;
  CFBooleanRef BOOLean = 0;
  if (!theDict) {
    goto LABEL_34;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(theDict, @"hasAudioJack", (const void **)&value))
  {
    if (value) {
      CFTypeID v4 = CFGetTypeID(value);
    }
    else {
      CFTypeID v4 = 0;
    }
    CFTypeID TypeID = CFBooleanGetTypeID();
    CFTypeID v8 = (CFTypeID)value;
    if (v4 == TypeID)
    {
      if (value)
      {
        CFRetain(value);
        uint64_t v9 = v8;
      }
      else
      {
        uint64_t v9 = 0;
      }
      sub_89E18((uint64_t)&v15, v9);
    }
    else
    {
      if (value) {
        CFTypeID v8 = CFGetTypeID(value);
      }
      if (v8 == CFNumberGetTypeID())
      {
        CFNumberRef v10 = (const __CFNumber *)value;
        if (value) {
          CFRetain(value);
        }
        uint64_t v20 = &off_637B18;
        CFNumberRef v21 = v10;
        unsigned int v11 = sub_250B08(v10);
        CFTypeRef v12 = (CFTypeRef *)&kCFBooleanTrue;
        if (!v11) {
          CFTypeRef v12 = (CFTypeRef *)&kCFBooleanFalse;
        }
        CFBooleanRef v13 = (const __CFBoolean *)*v12;
        if (*v12) {
          CFRetain(*v12);
        }
        CFBooleanRef v14 = BOOLean;
        CFBooleanRef BOOLean = v13;
        uint64_t inAddress = (uint64_t)&off_628770;
        CFBooleanRef inAddress_8 = v14;
        sub_49A90(&inAddress);
        sub_49A90(&v20);
      }
    }
  }
  if (BOOLean) {
    BOOL v5 = CFBooleanGetValue(BOOLean) != 0;
  }
  else {
LABEL_34:
  }
    BOOL v5 = 0;
  sub_49A90(&v15);
  if (v19) {
    sub_49A90(&v17);
  }
  return v5;
}

CFNumberRef sub_250B08(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

void sub_250B40(void *a1)
{
  sub_49A90(a1);

  operator delete();
}

uint64_t sub_250B7C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      BOOL v2 = "unkn";
      goto LABEL_3;
    case 1:
      unsigned int v4 = 4362;
      goto LABEL_6;
    case 2:
      unsigned int v4 = 5904;
      goto LABEL_6;
    case 3:
      BOOL v2 = "dlit";
      goto LABEL_3;
    case 4:
      BOOL v2 = "hlit";
      goto LABEL_3;
    case 5:
      unsigned int v4 = 4363;
LABEL_6:
      uint64_t result = sub_2417C(a1, v4);
      break;
    default:
      BOOL v2 = "";
LABEL_3:
      uint64_t result = (uint64_t)sub_21C8C(a1, v2);
      break;
  }
  return result;
}

void sub_250C08(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(std::__shared_weak_count **)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 80);
  CFTypeID v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_105D50(a1, &v7);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  CFDictionaryRef v6 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v7 = v5;
  CFTypeID v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_105D50(a2, &v7);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_250CBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_250CE4(int a1)
{
  sub_250D50();
  uint64_t v2 = qword_64E530;
  sub_250D50();
  if (v2 == qword_64E538) {
    return 1;
  }
  uint64_t v3 = v2 + 4;
  do
  {
    int v4 = *(_DWORD *)(v3 - 4);
    BOOL result = v4 != a1;
    BOOL v6 = v4 == a1 || v3 == qword_64E538;
    v3 += 4;
  }
  while (!v6);
  return result;
}

void sub_250D50()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64E528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64E528))
  {
    qmemcpy(v0, " papibdhcnapcahplunpilnpnlupnldpmfbpferp", sizeof(v0));
    sub_1A2E28(qword_64E510, v0, 0xAuLL);
    __cxa_guard_release(&qword_64E528);
  }
  if (qword_64E530 == qword_64E538)
  {
    sub_250E6C((char *)qword_64E530, (char *)qword_64E510[0], unk_64E518, (unk_64E518 - qword_64E510[0]) >> 2);
    sub_250108();
    sub_250E6C((char *)qword_64E538, (char *)qword_64E4F0, (char *)qword_64E4F8, (qword_64E4F8 - qword_64E4F0) >> 2);
  }
}

void sub_250E4C(_Unwind_Exception *a1)
{
}

void sub_250E6C(char *__dst, char *__src, char *a3, uint64_t a4)
{
  if (a4 < 1) {
    return;
  }
  uint64_t v5 = __src;
  unint64_t v7 = qword_64E538;
  if (a4 > (qword_64E540 - qword_64E538) >> 2)
  {
    unint64_t v8 = a4 + ((qword_64E538 - qword_64E530) >> 2);
    if (v8 >> 62) {
      sub_60548();
    }
    uint64_t v9 = (uint64_t)&__dst[-qword_64E530] >> 2;
    uint64_t v10 = qword_64E540 - qword_64E530;
    if ((qword_64E540 - qword_64E530) >> 1 > v8) {
      unint64_t v8 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    __p[4] = &qword_64E540;
    if (v11) {
      unint64_t v11 = (unint64_t)sub_46BF4(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    CFDictionaryRef v22 = (_DWORD *)(v11 + 4 * v9);
    __p[0] = (void *)v11;
    __p[1] = v22;
    __p[3] = (void *)(v11 + 4 * v12);
    uint64_t v23 = 4 * a4;
    int64x2_t v24 = &v22[a4];
    do
    {
      int v25 = *(_DWORD *)v5;
      v5 += 4;
      *v22++ = v25;
      v23 -= 4;
    }
    while (v23);
    __p[2] = v24;
    sub_1A310C((void **)&qword_64E530, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v13 = qword_64E538 - (void)__dst;
  uint64_t v14 = (qword_64E538 - (uint64_t)__dst) >> 2;
  if (v14 >= a4)
  {
    char v15 = &__src[4 * a4];
    uint64_t v17 = qword_64E538;
LABEL_17:
    unint64_t v18 = &__dst[4 * a4];
    char v19 = (int *)(v17 - 4 * a4);
    uint64_t v20 = (_DWORD *)v17;
    if ((unint64_t)v19 < v7)
    {
      uint64_t v20 = (_DWORD *)v17;
      do
      {
        int v21 = *v19++;
        *v20++ = v21;
      }
      while ((unint64_t)v19 < v7);
    }
    qword_64E538 = (uint64_t)v20;
    if ((char *)v17 != v18) {
      memmove((void *)(v17 - 4 * ((v17 - (uint64_t)v18) >> 2)), __dst, v17 - (void)v18);
    }
    if (v15 != v5)
    {
      memmove(__dst, v5, v15 - v5);
    }
    return;
  }
  char v15 = &__src[4 * v14];
  int64_t v16 = a3 - v15;
  if (a3 != v15) {
    memmove((void *)qword_64E538, &__src[4 * v14], a3 - v15);
  }
  uint64_t v17 = v7 + v16;
  qword_64E538 = v7 + v16;
  if (v13 >= 1) {
    goto LABEL_17;
  }
}

BOOL sub_251050(uint64_t a1, int *a2)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 480))(a1)) {
    return 0;
  }
  int v4 = *(const void **)(a1 + 248);
  uint64_t v13 = v4;
  if (*(unsigned char *)(a1 + 256)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    CFRetain(v4);
  }
  sub_170B38(&cf, v4);
  sub_72924((uint64_t)&v13);
  int v7 = *a2;
  int v6 = a2[1];
  if (*a2 > 1668313714)
  {
    int v10 = 2;
    if (v7 == 1668703084 || v7 == 1668576377) {
      goto LABEL_35;
    }
    unsigned __int16 v8 = 29299;
  }
  else
  {
    if (v7 == 1668301427 || v7 == 1668309362) {
      goto LABEL_16;
    }
    unsigned __int16 v8 = 29250;
  }
  if (v7 != (v8 | 0x63700000))
  {
    if (v6 != 1751212899 && *(_DWORD *)(a1 + 144) == 1885892706)
    {
      int v10 = 2;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_16:
  int v10 = 2;
  if (v6 <= 1768781410)
  {
    if (v6 > 1768057202)
    {
      if (v6 == 1768057203) {
        goto LABEL_35;
      }
      int v11 = 1768779619;
LABEL_32:
      if (v6 == v11) {
        goto LABEL_35;
      }
LABEL_33:
      if (*(_DWORD *)(a1 + 144) == 1885892706) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    if (v6 == 1735222132) {
      goto LABEL_35;
    }
    if (v6 != 1751212899) {
      goto LABEL_33;
    }
LABEL_34:
    int v10 = 4;
    goto LABEL_35;
  }
  if (v6 <= 1987077986)
  {
    if (v6 == 1768781411) {
      goto LABEL_35;
    }
    int v11 = 1919776355;
    goto LABEL_32;
  }
  if (v6 != 1987077987 && v6 != 1987081833)
  {
    int v11 = 1987081839;
    goto LABEL_32;
  }
LABEL_35:
  BOOL v9 = sub_3DE70C(&cf, v10);
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

void sub_251288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_6393C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_2512AC()
{
  uint64_t v0 = sub_10FBF0();
  uint64_t v1 = operator new(4uLL);
  std::string __p = v1;
  _DWORD *v1 = 1886216809;
  int v4 = v1 + 1;
  BOOL v5 = v1 + 1;
  strcpy(v6, "cwdv");
  v6[8] = 0;
  int v7 = 3;
  v9[0] = 0;
  v9[1] = 0;
  unsigned __int16 v8 = v9;
  int v10 = 44739242;
  CFTypeRef cf = 0;
  v13[0] = off_628650;
  _DWORD v13[3] = v13;
  sub_10E1E8(v12, v0, &__p, (uint64_t)v13);
  sub_6AFD4(v13);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v9[0]);
  if (__p)
  {
    int v4 = __p;
    operator delete(__p);
  }
  if (v12[2])
  {
    uint64_t v2 = (_DWORD *)sub_10FBF0();
    sub_110788(v2, 0x70707570u, (uint64_t *)(v12[1] + 16), 0);
  }
  sub_8108(v12);
}

void sub_2513EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_251428(uint64_t a1, unsigned int a2)
{
  if (a2 != 1819306350)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      BOOL v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 46;
      __int16 v16 = 2080;
      uint64_t v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 47;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_2515E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2515FC(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(17);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 20;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d initializing Device_HAL_Common", (uint8_t *)&v12, 0x12u);
  }
  sub_42E5FC(a1);
  int v4 = (os_log_t *)sub_32A48(17);
  BOOL v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315650;
    uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 22;
    __int16 v16 = 1024;
    int v17 = 1;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d initialized Device_HAL_Common: %u", (uint8_t *)&v12, 0x18u);
  }
  int v6 = (os_log_t *)sub_32A48(17);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 26;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating controls and ports", (uint8_t *)&v12, 0x12u);
  }
  if (!(*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 1))
  {
    BOOL v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 27;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"LPMic-Injector output device has no output streams.\"", (uint8_t *)&v12, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "LPMic-Injector output device has no output streams.");
  }
  sub_4391DC((uint64_t)a1, (uint64_t)&qword_64E590, 1);
  return 1;
}

void sub_251898(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2518B4(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_2518F0(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886609775 && a2 != 1886614639 && a2 != 1886614625)
  {
    BOOL v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      if (v11 >= 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_CarPlay_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 347;
      __int16 v16 = 2080;
      int v17 = v7;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType: %s.\"", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
  }
  return 0;
}

void sub_251A54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_251A70(uint64_t a1)
{
  sub_42E5FC((os_unfair_lock_s *)a1);
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1);
  int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88))(a1, 0);
  int v4 = *(_DWORD *)(a1 + 492);
  if (v4 == 1937010030 && v3 == 0)
  {
    os_log_t v50 = (os_log_t *)sub_32A48(13);
    __int16 v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      buf[0].int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 181;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CarPlay main audio device lacks an input stream.\"", (uint8_t *)buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CarPlay main audio device lacks an input stream.");
  }
  if (v4 == 1937010030 && v2 == 0)
  {
    __int16 v53 = (os_log_t *)sub_32A48(13);
    int v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      buf[0].int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 182;
      _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CarPlay main audio device lacks an output stream.\"", (uint8_t *)buf, 0x12u);
    }
    __int16 v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "CarPlay main audio device lacks an output stream.");
  }
  if (v4 == 1937006956 && v3 != 0)
  {
    std::string::size_type v56 = (os_log_t *)sub_32A48(13);
    __int16 v57 = *v56;
    if (*v56)
    {
      if (os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        buf[0].int mSelector = 136315394;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 183;
        _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CarPlay alternate audio device incorrectly has an input stream.\"", (uint8_t *)buf, 0x12u);
      }
    }
    os_log_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "CarPlay alternate audio device incorrectly has an input stream.");
  }
  if (v4 == 1937006956 && !v2)
  {
    uint64_t v59 = (os_log_t *)sub_32A48(13);
    unint64_t v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      buf[0].int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 184;
      _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CarPlay alternate audio device lacks an output stream.\"", (uint8_t *)buf, 0x12u);
    }
    os_log_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "CarPlay alternate audio device lacks an output stream.");
  }
  if (v4 == 1937006968 && (v2 != 0) == (v3 != 0))
  {
    uint64_t v62 = (os_log_t *)sub_32A48(13);
    long long v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
    {
      buf[0].int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 185;
      _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CarPlay aux audio device has incorrect streams\"", (uint8_t *)buf, 0x12u);
    }
    unsigned int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v64, "CarPlay aux audio device has incorrect streams");
  }
  if (v2) {
    operator new();
  }
  if (v3) {
    operator new();
  }
  LODWORD(v68[0]) = *(_DWORD *)(a1 + 268);
  strcpy((char *)buf, "tttsbolg");
  BYTE1(buf[0].mElement) = 0;
  HIWORD(buf[0].mElement) = 0;
  int v9 = sub_26DAC((AudioObjectID *)v68, buf, 0, 0);
  if (v9 || !v8)
  {
    __int16 v65 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v65 = &off_6414D8;
    void v65[2] = v9;
  }
  if (*(_DWORD *)(a1 + 492) == 1937010030)
  {
    uint64_t v10 = sub_32A48(17);
    uint64_t v11 = sub_32A48(29);
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)&buf[0].int mSelector = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *((int *)&buf[0].mSelector + v13);
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_31;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_31:
    int v17 = *(NSObject **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      buf[0].int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 217;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Main audio device does not support input and output.", (uint8_t *)buf, 0x12u);
    }
  }
  sub_1050A0((uint64_t)v68, 0x70737469u, *(_DWORD *)(a1 + 268));
  if (*(_DWORD *)(a1 + 492) == 1937010030) {
    sub_250C08(0, 0);
  }
  strcpy((char *)v71, "dcvsbolg");
  HIBYTE(v71[4]) = 0;
  v71[5] = 0;
  if ((*(unsigned int (**)(uint64_t, _WORD *))(*(void *)a1 + 16))(a1, v71))
  {
    *(void *)&buf[0].int mSelector = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    LOWORD(buf[0].mElement) = 257;
    sub_1D4C04((uint64_t)buf, @"vocoder sample rate", 0.0);
    sub_1D4AF4((uint64_t)buf, @"vocoder type", 0);
    (*(void (**)(uint64_t, _WORD *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 48))(a1, v71, 0, 0, 8, buf);
    sub_80594((uint64_t)buf);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &qword_64E638))
  {
    AudioObjectID v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    *(unsigned char *)(a1 + 504) = sub_253820(v18);
    char v19 = operator new(0xCuLL);
    *(void *)&buf[0].AudioObjectPropertyElement mElement = v19 + 3;
    *(void *)&buf[1].AudioObjectPropertyScope mScope = v19 + 3;
    *(void *)char v19 = qword_64E638;
    v19[2] = dword_64E640;
    *(void *)&buf[0].int mSelector = v19;
    (*(void (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 408))(a1, buf);
    if (*(void *)&buf[0].mSelector)
    {
      *(void *)&buf[0].AudioObjectPropertyElement mElement = *(void *)&buf[0].mSelector;
      operator delete(*(void **)&buf[0].mSelector);
    }
    uint64_t v66 = qword_64E638;
    int v67 = dword_64E640;
    (*(void (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t, unsigned int, unsigned int *, unsigned char *), uint64_t))(*(void *)a1 + 336))(a1, &v66, sub_2539B8, a1);
  }
  sub_72924((uint64_t)&v70);
  sub_72924((uint64_t)&v69);
  sub_72924((uint64_t)v68);
  uint64_t v20 = sub_32A48(17);
  uint64_t v21 = sub_32A48(29);
  char v22 = 0;
  uint64_t v23 = 0;
  *(void *)&buf[0].int mSelector = 0x100000002;
  uint64_t v24 = *(void *)(v20 + 8);
  while (1)
  {
    uint64_t v25 = *((int *)&buf[0].mSelector + v23);
    char v26 = v22;
    if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
      break;
    }
    char v22 = 1;
    uint64_t v23 = 1;
    if (v26) {
      goto LABEL_48;
    }
  }
  if ((v24 & v25) == 0) {
    uint64_t v20 = v21;
  }
LABEL_48:
  CFIndex v27 = *(NSObject **)v20;
  if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    sub_4F64((uint64_t)v68, (os_unfair_lock_t)(a1 + 8));
    CFIndex v28 = v69 >= 0 ? v68 : (void **)v68[0];
    buf[0].int mSelector = 136315650;
    *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 319;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].AudioObjectPropertyElement mElement = v28;
    _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created CarPlay device: %s.", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(v69) < 0) {
      operator delete(v68[0]);
    }
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 88))(a1, 0))
  {
    uint64_t v29 = sub_32A48(17);
    uint64_t v30 = sub_32A48(29);
    char v31 = 0;
    uint64_t v32 = 0;
    *(void *)&buf[0].int mSelector = 0x100000002;
    uint64_t v33 = *(void *)(v29 + 8);
    while (1)
    {
      uint64_t v34 = *((int *)&buf[0].mSelector + v32);
      char v35 = v31;
      if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
        break;
      }
      char v31 = 1;
      uint64_t v32 = 1;
      if (v35) {
        goto LABEL_62;
      }
    }
    if ((v33 & v34) == 0) {
      uint64_t v29 = v30;
    }
LABEL_62:
    int v36 = *(NSObject **)v29;
    if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      __int16 v37 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 96))(a1, 0, 0);
      sub_4F64((uint64_t)v68, v37 + 2);
      AudioObjectPropertyElement v38 = v69 >= 0 ? v68 : (void **)v68[0];
      buf[0].int mSelector = 136315650;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 320;
      HIWORD(buf[1].mScope) = 2080;
      *(void *)&buf[1].AudioObjectPropertyElement mElement = v38;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created CarPlay input stream: %s.", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v69) < 0) {
        operator delete(v68[0]);
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1))
  {
    uint64_t v39 = sub_32A48(17);
    uint64_t v40 = sub_32A48(29);
    char v41 = 0;
    uint64_t v42 = 0;
    *(void *)&buf[0].int mSelector = 0x100000002;
    uint64_t v43 = *(void *)(v39 + 8);
    while (1)
    {
      uint64_t v44 = *((int *)&buf[0].mSelector + v42);
      char v45 = v41;
      if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
        break;
      }
      char v41 = 1;
      uint64_t v42 = 1;
      if (v45) {
        goto LABEL_76;
      }
    }
    if ((v43 & v44) == 0) {
      uint64_t v39 = v40;
    }
LABEL_76:
    int v46 = *(NSObject **)v39;
    if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      char v47 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 96))(a1, 1, 0);
      sub_4F64((uint64_t)v68, v47 + 2);
      char v48 = v69 >= 0 ? v68 : (void **)v68[0];
      buf[0].int mSelector = 136315650;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 321;
      HIWORD(buf[1].mScope) = 2080;
      *(void *)&buf[1].AudioObjectPropertyElement mElement = v48;
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created CarPlay output stream: %s.", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v69) < 0) {
        operator delete(v68[0]);
      }
    }
  }
  return 1;
}

void sub_25354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_72924((uint64_t)&a25);
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_78FF8(v46 - 176);
  sub_4636C(v45);
  sub_78FF8((uint64_t)&a19);
  if (v44) {
    sub_4636C(v44);
  }
  _Unwind_Resume(a1);
}

BOOL sub_253820(AudioObjectID a1)
{
  AudioObjectID v17 = a1;
  strcpy((char *)&buf, "tvtsbolg");
  BYTE1(buf.mElement) = 0;
  HIWORD(buf.mElement) = 0;
  unint64_t v2 = sub_26DAC(&v17, &buf, 0, 0);
  *((void *)&v5 + 1) = v3;
  *(void *)&long long v5 = v2;
  uint64_t v4 = v5 >> 32;
  if ((v4 & 0xFF00000000) != 0) {
    int v6 = v4;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = sub_32A48(28);
  uint64_t v8 = sub_32A48(23);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)&buf.int mSelector = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *((int *)&buf.mSelector + v10);
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_10;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_10:
  uint64_t v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = "yes";
    buf.int mSelector = 136315906;
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
    int v20 = 70;
    __int16 v19 = 1024;
    if (!v6) {
      uint64_t v15 = "no";
    }
    __int16 v21 = 1024;
    AudioObjectID v22 = a1;
    __int16 v23 = 2080;
    uint64_t v24 = v15;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u supports voice trigger: %s.", (uint8_t *)&buf, 0x22u);
  }
  return v6 != 0;
}

uint64_t sub_2539B8(uint64_t a1, unsigned int a2, unsigned int *a3, unsigned char *a4)
{
  if (a2)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = (os_log_t *)sub_32A48(17);
      uint64_t v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&v26, *a3);
        if (v28 >= 0) {
          char v9 = &v26;
        }
        else {
          char v9 = v26;
        }
        (*(void (**)(CFStringRef *__return_ptr, unsigned char *))(*(void *)a4 + 128))(theString, a4);
        sub_21B7C(__p, theString[0]);
        uint64_t v10 = __p;
        if (v25 < 0) {
          uint64_t v10 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 130;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v9;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&buf[30] = v10;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received notification (%s) from audio device with UID \"%s\"", buf, 0x26u);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)theString);
        if (SHIBYTE(v28) < 0) {
          operator delete(v26);
        }
      }
      if (*a3 == 1937012340)
      {
        AudioObjectID v11 = (*(uint64_t (**)(unsigned char *))(*(void *)a4 + 120))(a4);
        int v12 = sub_253820(v11);
        char v13 = (os_log_t *)sub_32A48(17);
        uint64_t v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a4 + 128))(__p, a4);
          sub_21B7C(&v26, (CFStringRef)__p[0]);
          uint64_t v15 = &v26;
          if (v28 < 0) {
            uint64_t v15 = v26;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 149;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v12;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Voice trigger support changed to %u for audio device with UID \"%s\"", buf, 0x22u);
          if (SHIBYTE(v28) < 0) {
            operator delete(v26);
          }
          sub_72924((uint64_t)__p);
        }
        if (a4[504] != v12)
        {
          a4[504] = v12;
          CFIndex v27 = 0;
          uint64_t v28 = 0;
          char v26 = &v27;
          char v16 = operator new(4uLL);
          _DWORD *v16 = 1886609775;
          *(void *)AudioObjectPropertyAddress buf = v16;
          *(void *)&buf[8] = v16 + 1;
          *(void *)&buf[16] = v16 + 1;
          strcpy(&buf[24], "cwdv");
          unsigned char buf[32] = 0;
          int v30 = 3;
          v32[0] = 0;
          v32[1] = 0;
          char v31 = v32;
          int v33 = 44739242;
          CFTypeRef cf = 0;
          sub_43637C((uint64_t *)__p, (uint64_t)a4, (uint64_t)buf);
          if (cf) {
            CFRelease(cf);
          }
          sub_463E0(v32[0]);
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 1886418288;
          sub_FB720((uint64_t *)&buf[8], __p);
          sub_110A6C((uint64_t **)&v26, *(unsigned int *)buf, (int *)buf);
          sub_8108((uint64_t *)&buf[8]);
          AudioObjectID v17 = (_DWORD *)sub_10FBF0();
          sub_110B44(v17, &v26, 0);
          sub_8108((uint64_t *)__p);
          sub_FB43C(v27);
        }
      }
      else
      {
        AudioObjectID v18 = (os_log_t *)sub_32A48(17);
        __int16 v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(&v26, *a3);
          if (v28 >= 0) {
            int v20 = &v26;
          }
          else {
            int v20 = v26;
          }
          (*(void (**)(CFStringRef *__return_ptr, unsigned char *))(*(void *)a4 + 128))(theString, a4);
          sub_21B7C(__p, theString[0]);
          __int16 v21 = __p;
          if (v25 < 0) {
            __int16 v21 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 137;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v20;
          *(_WORD *)&unsigned char buf[28] = 2080;
          *(void *)&buf[30] = v21;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled notification (%s) from bluetooth audio device with UID \"%s\"", buf, 0x26u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          sub_72924((uint64_t)theString);
          if (SHIBYTE(v28) < 0) {
            operator delete(v26);
          }
        }
      }
      a3 += 3;
      --v6;
    }
    while (v6);
  }
  return 0;
}

void sub_253E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_253F3C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_253F60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_628B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_253FB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_628B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_253FD8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_253FFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_628BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_254050(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_628BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_254074(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_254098(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_628B98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2540EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_628B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_25410C(uint64_t a1)
{
  unint64_t v2 = operator new(0xCuLL);
  uint64_t v4 = v2 + 3;
  long long v5 = (char *)(v2 + 3);
  *(void *)unint64_t v2 = qword_64E638;
  v2[2] = dword_64E640;
  std::string __p = v2;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 424))(a1, &__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
  sub_430D98(a1);
}

void sub_2541B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2541D4(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    os_log_t v50 = (os_log_t *)sub_32A48(13);
    __int16 v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_16C9C4((uint64_t)&__lk, (unsigned int *)&__p);
      int v52 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 439;
      __int16 v88 = 2080;
      int64_t v89 = (const char *)v52;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)&buf, 0x1Cu);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v54 = (os_log_t *)sub_32A48(13);
    __int16 v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_16C9C4((uint64_t)&__lk, (unsigned int *)&__p);
      std::string::size_type v56 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 440;
      __int16 v88 = 2080;
      int64_t v89 = (const char *)v56;
      __int16 v90 = 1024;
      LODWORD(v91[0]) = a3;
      WORD2(v91[0]) = 2048;
      *(void *)((char *)v91 + 6) = a4;
      _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }
    __int16 v57 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v57 = &off_6414D8;
    v57[2] = 561211770;
  }
  if (!a6)
  {
    os_log_t v58 = (os_log_t *)sub_32A48(13);
    uint64_t v59 = *v58;
    if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_16C9C4((uint64_t)&__lk, (unsigned int *)&__p);
      unint64_t v60 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 441;
      __int16 v88 = 2080;
      int64_t v89 = "inData";
      __int16 v90 = 2080;
      v91[0] = v60;
      _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)&buf, 0x26u);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }
    os_log_t v61 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v61 = &off_6414D8;
    v61[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    uint64_t v62 = (os_log_t *)sub_32A48(13);
    long long v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_16C9C4((uint64_t)&__lk, (unsigned int *)&__p);
      unsigned int v64 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 442;
      __int16 v88 = 2080;
      int64_t v89 = (const char *)v64;
      _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", (uint8_t *)&buf, 0x1Cu);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }
    __int16 v65 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v65 = &off_6414D8;
    void v65[2] = 1852797029;
  }
  if (a2->mSelector != 1937138532)
  {
    if (a2->mSelector != 1937006964)
    {
      return sub_4321A0(a1, a2, a3, a4, a5, a6);
    }
    int v12 = *(_DWORD *)(a1 + 492);
    if (v12 != 1937006968 && v12 != 1937010030)
    {
      unsigned int v75 = (os_log_t *)sub_32A48(13);
      CFDictionaryRef v76 = *v75;
      if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
        __int16 v86 = 1024;
        int v87 = 448;
        _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
      }
      uint64_t v77 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v77, "Precondition failure.");
    }
    LODWORD(v78) = *a6;
    uint64_t v13 = sub_32A48(17);
    uint64_t v14 = sub_32A48(29);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)&buf.int mSelector = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    do
    {
      uint64_t v18 = *((int *)&buf.mSelector + v16);
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0))
      {
        if ((v17 & v18) == 0) {
          uint64_t v13 = v14;
        }
        if (*(void *)(v13 + 8)) {
          goto LABEL_26;
        }
        goto LABEL_37;
      }
      char v15 = 1;
      uint64_t v16 = 1;
    }
    while ((v19 & 1) == 0);
    if ((v17 & 1) == 0) {
      goto LABEL_37;
    }
LABEL_26:
    uint64_t v28 = *(NSObject **)v13;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      CFDictionaryRef v80 = *(const __CFDictionary **)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v80);
      int v29 = v84;
      m = __lk.__m_;
      sub_2417C(&__p, v78);
      p_lk = &__lk;
      if (v29 < 0) {
        p_lk = (std::unique_lock<std::mutex> *)m;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 452;
      __int16 v88 = 2080;
      int64_t v89 = (const char *)p_lk;
      __int16 v90 = 2080;
      v91[0] = p_p;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property %s to %s.", (uint8_t *)&buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }
LABEL_37:
    std::mutex::lock((std::mutex *)(a1 + 512));
    *(unsigned char *)(a1 + 624) = 0;
    std::mutex::unlock((std::mutex *)(a1 + 512));
    AudioObjectID v33 = *(_DWORD *)(a1 + 268);
    strcpy((char *)&buf, "tatsbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    OSStatus v34 = AudioObjectSetPropertyData(v33, &buf, 0, 0, 4u, &v78);
    if (v34)
    {
      uint64_t v69 = (os_log_t *)sub_32A48(13);
      uint64_t v70 = *v69;
      if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
        __int16 v86 = 1024;
        int v87 = 463;
        _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error attempting to set kAudioDevicePropertyStarkStreamAudioType.\"", (uint8_t *)&buf, 0x12u);
      }
      int v71 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v71 = &off_6414D8;
      void v71[2] = v34;
    }
    char v35 = (os_log_t *)sub_32A48(17);
    int v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      buf.int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 465;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CarPlay Device is waiting on the Config Change to end.", (uint8_t *)&buf, 0x12u);
    }
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 512);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 512));
    v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (1)
    {
      if (*(unsigned char *)(a1 + 624))
      {
LABEL_59:
        uint64_t v42 = (os_log_t *)sub_32A48(17);
        uint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
        {
          buf.int mSelector = 136315394;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
          __int16 v86 = 1024;
          int v87 = 473;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CarPlay Device is done waiting for the Config Change to complete.", (uint8_t *)&buf, 0x12u);
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)0x676C6F6273766364;
        *(_DWORD *)&__lk.__owns_ = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, std::unique_lock<std::mutex> *))(*(void *)a1 + 16))(a1, &__lk);
        if (result)
        {
          *(void *)&buf.int mSelector = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          LOWORD(buf.mElement) = 257;
          sub_1D4C04((uint64_t)&buf, @"vocoder sample rate", 0.0);
          sub_1D4AF4((uint64_t)&buf, @"vocoder type", 0);
          (*(void (**)(uint64_t, std::unique_lock<std::mutex> *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 48))(a1, &__lk, 0, 0, 8, &buf);
          p_AudioObjectPropertyAddress buf = (const __CFDictionary **)&buf;
          return sub_80594((uint64_t)p_buf);
        }
        return result;
      }
      if (v37.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_) {
        goto LABEL_58;
      }
      v38.__d_.__rep_ = v37.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v38.__d_.__rep_ >= 1) {
        break;
      }
LABEL_57:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v37.__d_.__rep_)
      {
LABEL_58:
        if (!*(unsigned char *)(a1 + 624))
        {
          int v72 = (os_log_t *)sub_32A48(13);
          std::string::size_type v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            buf.int mSelector = 136315394;
            *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
            __int16 v86 = 1024;
            int v87 = 477;
            _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"CarPlay Device failed to receive the Config Change completion event.\"", (uint8_t *)&buf, 0x12u);
          }
          CFTypeRef v74 = __cxa_allocate_exception(0x10uLL);
          *(void *)CFTypeRef v74 = &off_6414D8;
          v74[2] = 2003329396;
        }
        goto LABEL_59;
      }
    }
    std::chrono::steady_clock::now();
    v39.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v39.__d_.__rep_)
    {
      if (v39.__d_.__rep_ < 1)
      {
        if ((unint64_t)v39.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = 0x8000000000000000;
          goto LABEL_55;
        }
      }
      else if ((unint64_t)v39.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_53;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = 1000 * v39.__d_.__rep_;
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = 0;
    }
LABEL_53:
    if (v40 > (v38.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v41.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_56:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 576), &__lk, v41);
      std::chrono::steady_clock::now();
      goto LABEL_57;
    }
LABEL_55:
    v41.__d_.__rep_ = v40 + v38.__d_.__rep_;
    goto LABEL_56;
  }
  if (*(_DWORD *)(a1 + 492) != 1937010030)
  {
    uint64_t v66 = (os_log_t *)sub_32A48(13);
    int v67 = *v66;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
    {
      buf.int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 500;
      _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
    }
    int v68 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v68, "Precondition failure.");
  }
  CFDictionaryRef v80 = (const __CFDictionary *)a6;
  LOWORD(mElement) = 0;
  uint64_t v20 = sub_32A48(17);
  uint64_t v21 = sub_32A48(29);
  char v22 = 0;
  uint64_t v23 = 0;
  *(void *)&buf.int mSelector = 0x100000002;
  uint64_t v24 = *(void *)(v20 + 8);
  while (1)
  {
    uint64_t v25 = *((int *)&buf.mSelector + v23);
    char v26 = v22;
    if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
      break;
    }
    char v22 = 1;
    uint64_t v23 = 1;
    if (v26)
    {
      if ((v24 & 1) == 0) {
        goto LABEL_80;
      }
      goto LABEL_69;
    }
  }
  if ((v24 & v25) == 0) {
    uint64_t v20 = v21;
  }
  if (*(void *)(v20 + 8))
  {
LABEL_69:
    char v45 = *(NSObject **)v20;
    if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v78 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement v79 = a2->mElement;
      sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v78);
      int v46 = v84;
      char v47 = __lk.__m_;
      sub_168E34(&__p, v80);
      char v48 = &__lk;
      if (v46 < 0) {
        char v48 = (std::unique_lock<std::mutex> *)v47;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v49 = &__p;
      }
      else {
        uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 502;
      __int16 v88 = 2080;
      int64_t v89 = (const char *)v48;
      __int16 v90 = 2080;
      v91[0] = v49;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property %s with vocoder dictionary %s", (uint8_t *)&buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }
  }
LABEL_80:
  sub_4321A0(a1, a2, a3, a4, a5, a6);
  p_AudioObjectPropertyAddress buf = &v80;
  return sub_80594((uint64_t)p_buf);
}

void sub_25507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, char a17, int a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_80594((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_255120(_DWORD *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      uint64_t v18 = v35 >= 0 ? __p : (void **)__p[0];
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 419;
      __int16 v39 = 2080;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = (const char *)v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)&buf, 0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      char v22 = v35 >= 0 ? __p : (void **)__p[0];
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 420;
      __int16 v39 = 2080;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = (const char *)v22;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = a3;
      WORD2(v42[0]) = 2048;
      *(void *)((char *)v42 + 6) = a4;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v23 = &off_6414D8;
    v23[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      char v26 = v35 >= 0 ? __p : (void **)__p[0];
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 421;
      __int16 v39 = 2080;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = "outData";
      __int16 v41 = 2080;
      v42[0] = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)&buf, 0x26u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    CFIndex v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFIndex v27 = &off_6414D8;
    v27[2] = 561211770;
  }
  if (a2->mSelector == 1937006964)
  {
    int v12 = a1[123];
    if (v12 != 1937006968 && v12 != 1937010030)
    {
      int v29 = (os_log_t *)sub_32A48(13);
      int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
        __int16 v37 = 1024;
        int v38 = 426;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
      }
      char v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v31, "Precondition failure.");
    }
    LODWORD(__p[0]) = a1[67];
    strcpy((char *)&buf, "tatsbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v13 = sub_26DAC((AudioObjectID *)__p, &buf, 0, 0);
    int v15 = v13;
    if (v13 || !v14)
    {
      uint64_t v28 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v28 = &off_6414D8;
      v28[2] = v15;
    }
    sub_9EC7C(SHIDWORD(v13), a5, a6);
  }
  else
  {
    sub_432AE8((uint64_t)a1, a2, a3, a4, a5, a6);
  }
}

void sub_2556E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_255700(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      AudioObjectID v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v22 = "Device_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 397;
      __int16 v25 = 2080;
      char v26 = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    unint64_t v13 = (os_log_t *)sub_32A48(13);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      int v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v22 = "Device_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 398;
      __int16 v25 = 2080;
      char v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      int v30 = a4;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v16 = &off_6414D8;
    v16[2] = 561211770;
  }
  if (a2->mSelector == 1937006964) {
    return 4;
  }

  return sub_433254(a1, a2, a3, a4);
}

BOOL sub_255A34(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector == 1937006964 || sub_43356C(a1, a2);
}

BOOL sub_255A54(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1937006964) {
    return 1;
  }
  sub_50848((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

void sub_255AAC(uint64_t a1)
{
  sub_255AE4(a1);

  operator delete();
}

uint64_t sub_255AE4(uint64_t a1)
{
  *(void *)a1 = off_628978;
  sub_6651C(a1 + 640);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 576));
  std::mutex::~mutex((std::mutex *)(a1 + 512));
  unint64_t v2 = *(const void **)(a1 + 496);
  if (v2) {
    CFRelease(v2);
  }

  return sub_43456C(a1);
}

BOOL sub_255B60(const __CFString *a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  sub_20C54((uint64_t)v4, a1);
  if ((v5 & 0x80000000) == 0) {
    return v5 != 0;
  }
  BOOL v1 = v4[1] != 0;
  operator delete(v4[0]);
  return v1;
}

void sub_255BEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_255C00(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  uint64_t v4 = sub_433710(a1, a2, a3, a3, 0);
  *(void *)uint64_t v4 = off_628978;
  AudioObjectPropertySelector v5 = *(_DWORD *)(v4 + 268);
  __p.int mSelector = v5;
  strcpy(buf, "tstsbolg");
  buf[9] = 0;
  *(_WORD *)&_DWORD buf[10] = 0;
  unint64_t v6 = sub_26DAC(&__p.mSelector, (const AudioObjectPropertyAddress *)buf, 0, 0);
  int v8 = v6;
  if (v6 || !v7)
  {
    __int16 v23 = (os_log_t *)sub_32A48(17);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      __int16 v32 = 1024;
      AudioObjectPropertySelector v33 = v5;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to retrieve CarPlay stream type for object %u.", buf, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v8;
  }
  *(_DWORD *)(a1 + 492) = HIDWORD(v6);
  AudioObjectID v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  if (!v10)
  {
    char v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
  }
  AudioObjectID v11 = (const __CFString **)(a1 + 496);
  AudioObjectID v30 = v9;
  *(void *)&__p.int mSelector = 0x676C6F6273747575;
  __p.AudioObjectPropertyElement mElement = 0;
  sub_1732FC((uint64_t)buf, &v30, &__p);
  LOBYTE(__p.mSelector) = 0;
  LOBYTE(__p.mElement) = 0;
  if (buf[16])
  {
    *(void *)&__p.int mSelector = *(void *)&buf[8];
    *(void *)&buf[8] = 0;
    LOBYTE(__p.mElement) = 1;
  }
  sub_E2A90((uint64_t)&buf[8]);
  sub_173418((void *)(a1 + 496), (uint64_t)&__p, v10);
  sub_E2A90((uint64_t)&__p);
  CFRelease(v10);
  *(unsigned char *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 850045863;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 576) = 1018212795;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 609) = 0u;
  strcpy((char *)(a1 + 628), "egfcbolg");
  *(unsigned char *)(a1 + 637) = 0;
  *(_WORD *)(a1 + 638) = 0;
  sub_662FC((void *)(a1 + 640), *(_DWORD *)(a1 + 268), (AudioObjectPropertyAddress *)(a1 + 628), a1 + 576, a1 + 512, a1 + 624);
  if (*(_DWORD *)(a1 + 492) == 1937010030) {
    sub_436AD8(a1, 0, 0x6F757470u, 0);
  }
  uint64_t v12 = sub_32A48(28);
  uint64_t v13 = sub_32A48(23);
  char v14 = 0;
  uint64_t v15 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1;
    if (v18) {
      goto LABEL_14;
    }
  }
  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_14:
  char v19 = *(NSObject **)v12;
  if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    AudioObjectPropertySelector v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (sub_255B60(*v11))
    {
      if (!*v11)
      {
        __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v27, "Could not construct");
      }
      sub_20C54((uint64_t)&__p, *v11);
      if (v29 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = *(AudioObjectPropertyAddress **)&__p.mSelector;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 93;
      __int16 v32 = 1024;
      AudioObjectPropertySelector v33 = v20;
      __int16 v34 = 2080;
      char v35 = (const char *)p_p;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
      if (v29 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 93;
      __int16 v32 = 1024;
      AudioObjectPropertySelector v33 = v20;
      __int16 v34 = 2080;
      char v35 = "not supported";
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
    }
  }
  return a1;
}

void sub_256140(_Unwind_Exception *a1)
{
  __cxa_free_exception(v6);
  sub_6651C(v5);
  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  if (*v2) {
    CFRelease(*v2);
  }
  sub_43456C(v1);
  _Unwind_Resume(a1);
}

void sub_2561D0(void *a1)
{
  sub_256208(a1);

  operator delete();
}

void *sub_256208(void *a1)
{
  *a1 = off_628C08;
  unint64_t v2 = (std::__shared_weak_count *)a1[35];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[33];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[31];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[29];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_AEF0C((uint64_t)(a1 + 17));
  sub_172650((uint64_t)(a1 + 1));
  return a1;
}

void sub_25628C(void *a1)
{
  if (!a1[29] && !a1[31] && !a1[33] && !a1[35])
  {
    __int16 v25 = (os_log_t *)sub_32A48(21);
    char v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        int v36 = 136315394;
        __int16 v37 = "HeadsetJackHandler.cpp";
        __int16 v38 = 1024;
        int v39 = 230;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d All port types are NULL...", (uint8_t *)&v36, 0x12u);
      }
    }
  }
  if (a1[31])
  {
    if (!a1[29])
    {
      char v7 = (os_log_t *)sub_32A48(21);
      int v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          AudioObjectID v9 = (std::__shared_weak_count *)a1[31];
          if (v9)
          {
            CFStringRef v10 = std::__shared_weak_count::lock(v9);
            if (v10) {
              uint64_t v11 = a1[30];
            }
            else {
              uint64_t v11 = 0;
            }
          }
          else
          {
            uint64_t v11 = 0;
            CFStringRef v10 = 0;
          }
          __int16 v27 = (std::__shared_weak_count *)a1[29];
          if (v27)
          {
            UInt32 v28 = std::__shared_weak_count::lock(v27);
            if (v28) {
              uint64_t v29 = a1[28];
            }
            else {
              uint64_t v29 = 0;
            }
          }
          else
          {
            uint64_t v29 = 0;
            UInt32 v28 = 0;
          }
          int v36 = 136315906;
          __int16 v37 = "HeadsetJackHandler.cpp";
          __int16 v38 = 1024;
          int v39 = 241;
          __int16 v40 = 2048;
          uint64_t v41 = v11;
          __int16 v42 = 2048;
          uint64_t v43 = v29;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Wired microphone Port is non-NULL but wired headphones Port is NULL... mWiredMicrophonePort: %p; m"
            "WiredHeadphonesPort: %p.",
            (uint8_t *)&v36,
            0x26u);
          if (v28) {
            sub_4636C(v28);
          }
          if (v10) {
            sub_4636C(v10);
          }
        }
      }
    }
  }
  if ((a1[33] == 0) != (a1[35] == 0))
  {
    unint64_t v2 = (os_log_t *)sub_32A48(21);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = (std::__shared_weak_count *)a1[33];
        if (v4)
        {
          uint64_t v5 = std::__shared_weak_count::lock(v4);
          if (v5) {
            uint64_t v6 = a1[32];
          }
          else {
            uint64_t v6 = 0;
          }
        }
        else
        {
          uint64_t v6 = 0;
          uint64_t v5 = 0;
        }
        uint64_t v12 = (std::__shared_weak_count *)a1[35];
        if (v12)
        {
          uint64_t v13 = std::__shared_weak_count::lock(v12);
          if (v13) {
            uint64_t v14 = a1[34];
          }
          else {
            uint64_t v14 = 0;
          }
        }
        else
        {
          uint64_t v14 = 0;
          uint64_t v13 = 0;
        }
        int v36 = 136315906;
        __int16 v37 = "HeadsetJackHandler.cpp";
        __int16 v38 = 1024;
        int v39 = 252;
        __int16 v40 = 2048;
        uint64_t v41 = v6;
        __int16 v42 = 2048;
        uint64_t v43 = v14;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d TTY output and input are mismatched... mTTYOutputPort: %p; mTTYInputPort: %p.",
          (uint8_t *)&v36,
          0x26u);
        if (v13) {
          sub_4636C(v13);
        }
        if (v5) {
          sub_4636C(v5);
        }
      }
    }
  }
  if (a1[33])
  {
    if (!a1[29])
    {
      uint64_t v15 = (os_log_t *)sub_32A48(21);
      uint64_t v16 = *v15;
      if (*v15)
      {
        if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = (std::__shared_weak_count *)a1[33];
          if (v17)
          {
            char v18 = std::__shared_weak_count::lock(v17);
            if (v18) {
              uint64_t v19 = a1[32];
            }
            else {
              uint64_t v19 = 0;
            }
          }
          else
          {
            uint64_t v19 = 0;
            char v18 = 0;
          }
          AudioObjectID v30 = (std::__shared_weak_count *)a1[29];
          if (v30)
          {
            char v31 = std::__shared_weak_count::lock(v30);
            if (v31) {
              uint64_t v32 = a1[28];
            }
            else {
              uint64_t v32 = 0;
            }
          }
          else
          {
            uint64_t v32 = 0;
            char v31 = 0;
          }
          int v36 = 136315906;
          __int16 v37 = "HeadsetJackHandler.cpp";
          __int16 v38 = 1024;
          int v39 = 263;
          __int16 v40 = 2048;
          uint64_t v41 = v19;
          __int16 v42 = 2048;
          uint64_t v43 = v32;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d TTY output is non-NULL, but wired headphones is NULL... mTTYOutputPort: %p; mWiredHeadphonesPort: %p.",
            (uint8_t *)&v36,
            0x26u);
          if (v31) {
            sub_4636C(v31);
          }
          if (v18) {
            sub_4636C(v18);
          }
        }
      }
    }
  }
  if (a1[35])
  {
    if (!a1[31])
    {
      AudioObjectPropertySelector v20 = (os_log_t *)sub_32A48(21);
      uint64_t v21 = *v20;
      if (*v20)
      {
        if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          char v22 = (std::__shared_weak_count *)a1[35];
          if (v22)
          {
            __int16 v23 = std::__shared_weak_count::lock(v22);
            if (v23) {
              uint64_t v24 = a1[34];
            }
            else {
              uint64_t v24 = 0;
            }
          }
          else
          {
            uint64_t v24 = 0;
            __int16 v23 = 0;
          }
          AudioObjectPropertySelector v33 = (std::__shared_weak_count *)a1[31];
          if (v33)
          {
            __int16 v34 = std::__shared_weak_count::lock(v33);
            if (v34) {
              uint64_t v35 = a1[30];
            }
            else {
              uint64_t v35 = 0;
            }
          }
          else
          {
            uint64_t v35 = 0;
            __int16 v34 = 0;
          }
          int v36 = 136315906;
          __int16 v37 = "HeadsetJackHandler.cpp";
          __int16 v38 = 1024;
          int v39 = 274;
          __int16 v40 = 2048;
          uint64_t v41 = v24;
          __int16 v42 = 2048;
          uint64_t v43 = v35;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d TTY input is non-NULL, but wired microphone is NULL... mTTYInputPort: %p; mWiredMicrophonePort: %p.",
            (uint8_t *)&v36,
            0x26u);
          if (v34) {
            sub_4636C(v34);
          }
          if (v23) {
            sub_4636C(v23);
          }
        }
      }
    }
  }
}

unsigned char *sub_25679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a4)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      AudioObjectID v9 = "HeadsetJackHandler.cpp";
      __int16 v10 = 1024;
      int v11 = 100;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [clientData is NULL]: \"clientData was NULL\"", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "clientData was NULL");
  }

  return sub_2568D8(a4, a1, a2, a3);
}

void sub_2568BC(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_2568D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[17];
  uint64_t v43 = a1 + 17;
  char v44 = (*(uint64_t (**)(void))(v8 + 16))();
  sub_25628C(a1);
  if (a1[29])
  {
    sub_43F38((uint64_t *)buf, a1 + 28, "", 114);
    int v9 = (*(uint64_t (**)(void))(**(void **)buf + 152))(*(void *)buf);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    int v9 = 0;
  }
  if (a1[31])
  {
    sub_43F38((uint64_t *)buf, a1 + 30, "", 116);
    int v34 = (*(uint64_t (**)(void))(**(void **)buf + 152))(*(void *)buf);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    int v34 = 0;
  }
  if (a1[35] && a1[33])
  {
    sub_43F38((uint64_t *)buf, a1 + 34, "", 119);
    if ((*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf))
    {
      sub_43F38(&v40, a1 + 32, "", 119);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40);
      if (v41) {
        sub_4636C(v41);
      }
    }
    else
    {
      int v10 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    int v10 = 0;
  }
  if (a1[29])
  {
    sub_43F38((uint64_t *)buf, a1 + 28, "", 124);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544))(*(void *)buf, a2, a3, a4);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (a1[31])
  {
    sub_43F38((uint64_t *)buf, a1 + 30, "", 127);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544))(*(void *)buf, a2, a3, a4);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (a1[35] && a1[33])
  {
    sub_43F38((uint64_t *)buf, a1 + 34, "", 131);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544))(*(void *)buf, a2, a3, a4);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    sub_43F38((uint64_t *)buf, a1 + 32, "", 132);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544))(*(void *)buf, a2, a3, a4);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (a1[29])
  {
    int v11 = (os_log_t *)sub_32A48(21);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
      {
        sub_43F38(&v40, a1 + 28, "", 140);
        int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 140;
        __int16 v46 = 1024;
        *(_DWORD *)char v47 = v13;
        *(_WORD *)&v47[4] = 1024;
        *(_DWORD *)&v47[6] = v9;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Wired headphones state: %u; headphones cached state: %u.",
          buf,
          0x1Eu);
        if (v41) {
          sub_4636C(v41);
        }
      }
    }
  }
  if (a1[31])
  {
    uint64_t v14 = (os_log_t *)sub_32A48(21);
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
      {
        sub_43F38(&v40, a1 + 30, "", 146);
        int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 146;
        __int16 v46 = 1024;
        *(_DWORD *)char v47 = v16;
        *(_WORD *)&v47[4] = 1024;
        *(_DWORD *)&v47[6] = v34;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Wired microphone state: %u; wire microphone cached state: %u.",
          buf,
          0x1Eu);
        if (v41) {
          sub_4636C(v41);
        }
      }
    }
  }
  if (a1[35])
  {
    if (a1[33])
    {
      uint64_t v17 = (os_log_t *)sub_32A48(21);
      char v18 = *v17;
      if (*v17)
      {
        if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 151;
          __int16 v46 = 1024;
          *(_DWORD *)char v47 = v10;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d TTY cached state (all connected): %u.", buf, 0x18u);
        }
      }
    }
    uint64_t v19 = a1[35];
    uint64_t v40 = (uint64_t)&v40;
    uint64_t v41 = (std::__shared_weak_count *)&v40;
    uint64_t v42 = 0;
    if (v19 && a1[33])
    {
      sub_43F38((uint64_t *)buf, a1 + 34, "", 161);
      if ((*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf))
      {
        sub_43F38(&v37, a1 + 32, "", 161);
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 152))(v37);
        if (v38) {
          sub_4636C(v38);
        }
      }
      else
      {
        int v20 = 0;
      }
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v10 != v20)
      {
        uint64_t v19 = a1[35];
        goto LABEL_58;
      }
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v40 = (uint64_t)&v40;
    uint64_t v41 = (std::__shared_weak_count *)&v40;
    uint64_t v42 = 0;
  }
  if (v10)
  {
LABEL_58:
    sub_3590(&v40, a1[34], v19);
    sub_3590(&v40, a1[32], a1[33]);
  }
LABEL_59:
  if (a1[31])
  {
    sub_43F38((uint64_t *)buf, a1 + 30, "", 169);
    int v21 = v34 ^ (*(uint64_t (**)(void))(**(void **)buf + 152))(*(void *)buf);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v21) {
      sub_3590(&v40, a1[30], a1[31]);
    }
  }
  if (a1[29])
  {
    sub_43F38((uint64_t *)buf, a1 + 28, "", 174);
    int v22 = v9 ^ (*(uint64_t (**)(void))(**(void **)buf + 152))(*(void *)buf);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v22) {
      sub_3590(&v40, a1[28], a1[29]);
    }
    uint64_t v23 = a1[29];
    uint64_t v37 = (uint64_t)&v37;
    __int16 v38 = (std::__shared_weak_count *)&v37;
    uint64_t v39 = 0;
    if (v23)
    {
      int v24 = a1[31] ? v9 : 0;
      if (v24 == 1)
      {
        sub_43F38((uint64_t *)buf, a1 + 28, "", 184);
        if ((*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf))
        {
          sub_43F38((uint64_t *)&__p, a1 + 30, "", 185);
          int v25 = v34 ^ (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_
                                                                        + 152))(__p.__r_.__value_.__r.__words[0]);
          if (__p.__r_.__value_.__l.__size_) {
            sub_4636C((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        else
        {
          int v25 = 0;
        }
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v25) {
          sub_3590(&v37, a1[28], a1[29]);
        }
      }
    }
  }
  else
  {
    uint64_t v37 = (uint64_t)&v37;
    __int16 v38 = (std::__shared_weak_count *)&v37;
    uint64_t v39 = 0;
  }
  char v26 = (os_log_t *)sub_32A48(21);
  __int16 v27 = *v26;
  if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEBUG))
  {
    sub_1466B4(v35, (uint64_t)v41, (uint64_t)&v40);
    sub_9264(&__p, (uint64_t)v35, 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 195;
    __int16 v46 = 2080;
    *(void *)char v47 = p_p;
    _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d fullCachePortList: %s.", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_8108(v35);
  }
  uint64_t v29 = (os_log_t *)sub_32A48(21);
  AudioObjectID v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEBUG))
  {
    sub_1466B4(v35, (uint64_t)v38, (uint64_t)&v37);
    sub_9264(&__p, (uint64_t)v35, 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v31 = &__p;
    }
    else {
      char v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 199;
    __int16 v46 = 2080;
    *(void *)char v47 = v31;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d portPropertyUpdatePortList: %s.", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_8108(v35);
  }
  if (v42)
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_DWORD *)AudioObjectPropertyAddress buf = 1717793397;
    sub_FB720((uint64_t *)&buf[8], &v40);
    sub_110A6C((uint64_t **)&__p, *(unsigned int *)buf, (int *)buf);
    sub_8108((uint64_t *)&buf[8]);
    if (!v39) {
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  if (v39)
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
LABEL_104:
    *(_DWORD *)AudioObjectPropertyAddress buf = 1886418288;
    sub_FB720((uint64_t *)&buf[8], &v37);
    sub_110A6C((uint64_t **)&__p, *(unsigned int *)buf, (int *)buf);
    sub_8108((uint64_t *)&buf[8]);
LABEL_105:
    uint64_t v32 = (_DWORD *)sub_10FBF0();
    sub_110B44(v32, &__p, 0);
    sub_FB43C((void *)__p.__r_.__value_.__l.__size_);
  }
  sub_25628C(a1);
  sub_8108(&v37);
  sub_8108(&v40);
  return sub_3BCAC(&v43);
}

void sub_25741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a15) {
    sub_4636C(a15);
  }
  if (a26) {
    sub_4636C(a26);
  }
  sub_8108(&a17);
  sub_8108(&a20);
  sub_3BCAC(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_257598(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  *(void *)a1 = off_628C08;
  uint64_t v12 = a1 + 8;
  sub_AEF58(a1 + 8, (uint64_t)"HALJackStateHandler mutex");
  *(void *)(a1 + 96) = a6;
  *(unsigned char *)(a1 + 104) = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a6 + 16))(a6, "kcajtpni");
  int v13 = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), "kcajptuo");
  *(unsigned char *)(a1 + 105) = v13;
  *(void *)(a1 + 112) = a1 + 112;
  *(void *)(a1 + 120) = a1 + 112;
  *(void *)(a1 + 128) = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    if (sub_FEAC0(*(void *)(a1 + 96), "kcajtpni", (uint64_t)sub_170EA0, v12))
    {
      char v26 = (os_log_t *)sub_32A48(13);
      __int16 v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v32 = 136315394;
        *(void *)&v32[4] = "HALJackStateHandler.cpp";
        __int16 v33 = 1024;
        int v34 = 115;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to add an input jack state change listener with the HAL.\"", v32, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to add an input jack state change listener with the HAL.");
    }
    int v13 = *(unsigned __int8 *)(a1 + 105);
  }
  if (v13 && sub_FEAC0(*(void *)(a1 + 96), "kcajptuo", (uint64_t)sub_170EA0, v12))
  {
    uint64_t v29 = (os_log_t *)sub_32A48(13);
    AudioObjectID v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v32 = 136315394;
      *(void *)&v32[4] = "HALJackStateHandler.cpp";
      __int16 v33 = 1024;
      int v34 = 121;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to add an output jack state change listener with the HAL.\"", v32, 0x12u);
    }
    char v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Unable to add an output jack state change listener with the HAL.");
  }
  sub_AEF58(a1 + 136, (uint64_t)"HeadsetJackHandler mutex");
  *(void *)(a1 + 224) = *a2;
  uint64_t v14 = a2[1];
  *(void *)(a1 + 232) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 240) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 248) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 256) = *a5;
  uint64_t v16 = a5[1];
  *(void *)(a1 + 264) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 272) = *a4;
  uint64_t v17 = a4[1];
  *(void *)(a1 + 280) = v17;
  if (!v17)
  {
    if (!*(void *)(a1 + 264)) {
      goto LABEL_14;
    }
LABEL_20:
    int v21 = (os_log_t *)sub_32A48(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v32 = 136315394;
      *(void *)&v32[4] = "HeadsetJackHandler.cpp";
      __int16 v33 = 1024;
      int v34 = 65;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inTTYInputPort and inTTYOutputPort must both be NULL or non-NULL\"", v32, 0x12u);
    }
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "inTTYInputPort and inTTYOutputPort must both be NULL or non-NULL");
LABEL_28:
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
  if ((*(void *)(a1 + 280) == 0) != (*(void *)(a1 + 264) == 0)) {
    goto LABEL_20;
  }
LABEL_14:
  if (!a2[1] && !a3[1] && !a4[1] && !a5[1])
  {
    int v24 = (os_log_t *)sub_32A48(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v32 = 136315394;
      *(void *)&v32[4] = "HeadsetJackHandler.cpp";
      __int16 v33 = 1024;
      int v34 = 69;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"All input Ports are NULL.\"", v32, 0x12u);
    }
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "All input Ports are NULL.");
    goto LABEL_28;
  }
  *(void *)uint64_t v32 = v12;
  v32[8] = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  char v18 = operator new(0x20uLL);
  uint64_t v18[2] = sub_25679C;
  v18[3] = a1;
  uint64_t v19 = *(void *)(a1 + 112);
  void *v18 = v19;
  v18[1] = a1 + 112;
  *(void *)(v19 + 8) = v18;
  *(void *)(a1 + 112) = v18;
  ++*(void *)(a1 + 128);
  sub_1717EC(v12, (void (*)(BOOL, BOOL, uint64_t, uint64_t))sub_25679C, a1);
  sub_3BCAC(v32);
  sub_25628C((void *)a1);
  return a1;
}

void sub_257B0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_45F50(v3);
  sub_AEF0C(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_257BD0(uint64_t *a1)
{
  uint64_t v2 = a1[17];
  int v13 = a1 + 17;
  char v14 = (*(uint64_t (**)(uint64_t *))(v2 + 16))(a1 + 17);
  sub_25628C(a1);
  uint64_t v3 = a1[1];
  uint64_t v15 = a1 + 1;
  char v16 = (*(uint64_t (**)(void))(v3 + 16))();
  uint64_t v4 = a1 + 14;
  for (uint64_t i = (uint64_t *)a1[15]; i != v4; uint64_t i = (uint64_t *)i[1])
  {
    if ((unsigned char *(*)(uint64_t, uint64_t, uint64_t, uint64_t *))i[2] == sub_25679C && i[3] == (void)a1)
    {
      if (i != v4)
      {
        uint64_t v7 = *i;
        *(void *)(v7 + 8) = i[1];
        *(void *)i[1] = v7;
        --a1[16];
        operator delete(i);
      }
      break;
    }
  }
  sub_3BCAC(&v15);
  sub_2568D8(a1, 0, 0, 0);
  uint64_t v8 = (std::__shared_weak_count *)a1[29];
  a1[28] = 0;
  a1[29] = 0;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = (std::__shared_weak_count *)a1[31];
  a1[30] = 0;
  a1[31] = 0;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  int v10 = (std::__shared_weak_count *)a1[35];
  a1[34] = 0;
  a1[35] = 0;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = (std::__shared_weak_count *)a1[33];
  a1[32] = 0;
  a1[33] = 0;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  return sub_3BCAC(&v13);
}

void sub_257D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_257D30(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  memset(__p, 0, sizeof(__p));
  sub_115434(v10, *(_DWORD *)(a1 + 8), a2, (unsigned int **)__p);
  sub_1F2A88(a3);
  sub_23AC0();
  if (*(unsigned char *)(a1 + 12))
  {
    for (uint64_t i = *(void **)(a3 + 8); i != (void *)a3; uint64_t i = (void *)i[1])
    {
      uint64_t v6 = (void *)i[6];
      uint64_t v7 = (void *)i[7];
      while (v6 != v7)
      {
        sub_8E4B8((uint64_t *)buf, v6);
        for (uint64_t j = v12; (uint8_t *)j != buf; uint64_t j = *(void *)(j + 8))
        {
          if (*(_DWORD *)(*(void *)(j + 16) + 144) == 1886613611)
          {
            sub_B8E4((uint64_t *)buf);
            operator new();
          }
        }
        sub_B8E4((uint64_t *)buf);
        v6 += 3;
      }
    }
  }
  operator new();
}

void sub_258A3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  __cxa_free_exception(v45);
  operator delete();
}

void sub_258CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = 0;
  __int16 v65 = 0;
  unint64_t v66 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  for (uint64_t i = *(void **)(*(void *)a2 + 24); i != (void *)(*(void *)a2 + 16); uint64_t i = (void *)i[1])
  {
    sub_43F38(&v59, i + 4, "", 106);
    uint64_t v8 = (unsigned int *)v59;
    uint64_t v9 = *(void *)(v59 + 192);
    if (!v9)
    {
      uint64_t v43 = (os_log_t *)sub_32A48(13);
      char v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v8 + 144))(&v58, v8);
        uint64_t v45 = v58;
        sub_2417C(&__p, v8[36]);
        if (v57 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 112;
        *(_WORD *)&unsigned char buf[18] = 2112;
        *(void *)&buf[20] = v45;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&buf[30] = p_p;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [controlDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
        if (v57 < 0) {
          operator delete(__p);
        }
        sub_72924((uint64_t)&v58);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 2003329396;
    }
    __int32 v10 = *(_DWORD *)(v59 + 144);
    int v11 = *(_DWORD *)(v59 + 264);
    (*(void (**)(void **__return_ptr))(*(void *)v9 + 248))(&__p);
    if (!v56 || v56->__shared_owners_ == -1)
    {
      uint64_t v40 = (os_log_t *)sub_32A48(13);
      uint64_t v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 115;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate mute control.\"", buf, 0x12u);
      }
      uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v42, "Unable to locate mute control.");
    }
    sub_166D40(&v58, (uint64_t)__p, v56);
    uint64_t v12 = v65;
    if ((unint64_t)v65 >= v66)
    {
      uint64_t v14 = ((uint64_t)v65 - v64) >> 4;
      if ((unint64_t)(v14 + 1) >> 60) {
        sub_60548();
      }
      unint64_t v15 = (uint64_t)(v66 - v64) >> 3;
      if (v15 <= v14 + 1) {
        unint64_t v15 = v14 + 1;
      }
      if (v66 - v64 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      *(void *)&unsigned char buf[32] = &v66;
      uint64_t v17 = (char *)sub_10724(v16);
      char v18 = &v17[16 * v14];
      *(void *)AudioObjectPropertyAddress buf = v17;
      *(void *)&uint8_t buf[8] = v18;
      *(void *)&unsigned char buf[24] = &v17[16 * v19];
      *(_OWORD *)char v18 = v58;
      *(void *)&buf[16] = v18 + 16;
      sub_D2658(&v64, buf);
      int v13 = v65;
      sub_98E24((uint64_t)buf);
    }
    else
    {
      _OWORD *v65 = v58;
      int v13 = v12 + 1;
    }
    __int16 v65 = v13;
    if (sub_1ECF1C(*(void *)(a2 + 112), *(_DWORD *)(a2 + 12), v10, v11))
    {
      if ((sub_1F2D6C(a2, (uint64_t)(i + 2), 1) & 0xFF00000000) != 0 && sub_2422F8((uint64_t)v8))
      {
        sub_1E9A5C(&v58, a2, *(void *)(a3 + 16), (uint64_t)v8, i[9]);
        if (!(void)v58)
        {
          __int16 v51 = (os_log_t *)sub_32A48(13);
          int v52 = *v51;
          if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 126;
            _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate volume control.\"", buf, 0x12u);
          }
          __int16 v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Unable to locate volume control.");
        }
        int v20 = v62;
        if ((unint64_t)v62 >= v63)
        {
          uint64_t v32 = ((uint64_t)v62 - v61) >> 4;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60) {
            sub_60548();
          }
          uint64_t v34 = v63 - v61;
          if ((uint64_t)(v63 - v61) >> 3 > v33) {
            unint64_t v33 = v34 >> 3;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          *(void *)&unsigned char buf[32] = &v63;
          int v36 = (char *)sub_10724(v35);
          uint64_t v37 = &v36[16 * v32];
          *(void *)AudioObjectPropertyAddress buf = v36;
          *(void *)&uint8_t buf[8] = v37;
          *(void *)&unsigned char buf[24] = &v36[16 * v38];
          uint64_t v39 = (std::__shared_weak_count *)*((void *)&v58 + 1);
          *(_OWORD *)uint64_t v37 = v58;
          int v21 = v39;
          if (v39)
          {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            int v21 = (std::__shared_weak_count *)*((void *)&v58 + 1);
          }
          *(void *)&buf[16] = v37 + 16;
          sub_FBB48(&v61, buf);
          int v22 = v62;
          sub_98E24((uint64_t)buf);
        }
        else
        {
          *uint64_t v62 = v58;
          int v21 = (std::__shared_weak_count *)*((void *)&v58 + 1);
          v20[1] = *((void *)&v58 + 1);
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v22 = v20 + 2;
        }
        uint64_t v62 = v22;
        if (v21) {
          sub_4636C(v21);
        }
      }
      else
      {
        sub_1EA8F4((uint64_t *)&v58, a2, *(void *)(a3 + 16), (uint64_t)v8, i[9], a4, 0);
        uint64_t v23 = (std::__shared_weak_count *)*((void *)&v58 + 1);
        if (!*((void *)&v58 + 1) || *(void *)(*((void *)&v58 + 1) + 8) == -1)
        {
          char v48 = (os_log_t *)sub_32A48(13);
          uint64_t v49 = *v48;
          if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 133;
            _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate volume control.\"", buf, 0x12u);
          }
          os_log_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Unable to locate volume control.");
        }
        sub_D14FC(&v54, v58, *((std::__shared_weak_count **)&v58 + 1));
        int v24 = v62;
        if ((unint64_t)v62 >= v63)
        {
          uint64_t v26 = ((uint64_t)v62 - v61) >> 4;
          if ((unint64_t)(v26 + 1) >> 60) {
            sub_60548();
          }
          unint64_t v27 = (uint64_t)(v63 - v61) >> 3;
          if (v27 <= v26 + 1) {
            unint64_t v27 = v26 + 1;
          }
          if (v63 - v61 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          *(void *)&unsigned char buf[32] = &v63;
          uint64_t v29 = (char *)sub_10724(v28);
          AudioObjectID v30 = &v29[16 * v26];
          *(void *)AudioObjectPropertyAddress buf = v29;
          *(void *)&uint8_t buf[8] = v30;
          *(void *)&unsigned char buf[24] = &v29[16 * v31];
          *(_OWORD *)AudioObjectID v30 = v54;
          *(void *)&buf[16] = v30 + 16;
          sub_FBB48(&v61, buf);
          int v25 = v62;
          sub_98E24((uint64_t)buf);
        }
        else
        {
          *(_OWORD *)uint64_t v62 = v54;
          int v25 = v24 + 2;
        }
        uint64_t v62 = v25;
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v56) {
      std::__shared_weak_count::__release_weak(v56);
    }
    if (v60) {
      sub_4636C(v60);
    }
  }
  operator new();
}

void sub_259510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char **a18, std::__shared_weak_count *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char *a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a24) {
    sub_4636C(a24);
  }
  a18 = &a25;
  sub_74004((void ***)&a18);
  a25 = &a28;
  sub_638B4((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_259674(uint64_t a1, char **a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  uint64_t v3 = (void *)(a1 + 80);
  *(void *)a1 = off_63F128;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    sub_D126C((uint64_t *)&v22);
    unint64_t v10 = *(void *)(a1 + 96);
    int v11 = *(_OWORD **)(a1 + 88);
    if ((unint64_t)v11 >= v10)
    {
      long long v21 = v22;
      uint64_t v13 = ((uint64_t)v11 - *v3) >> 4;
      if ((unint64_t)(v13 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v14 = v10 - *v3;
      uint64_t v15 = v14 >> 3;
      if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      v23[4] = a1 + 96;
      uint64_t v17 = (char *)sub_10724(v16);
      char v18 = &v17[16 * v13];
      v23[0] = v17;
      v23[1] = v18;
      v23[3] = &v17[16 * v19];
      *(_OWORD *)char v18 = v21;
      v23[2] = v18 + 16;
      sub_D2658(v3, v23);
      uint64_t v12 = *(_OWORD **)(a1 + 88);
      sub_98E24((uint64_t)v23);
    }
    else
    {
      *int v11 = v22;
      uint64_t v12 = v11 + 1;
    }
    *(void *)(a1 + 88) = v12;
  }
  else
  {
    uint64_t v6 = v5 - v4;
    sub_17CE38((uint64_t *)(a1 + 80));
    if (v5 - v4 < 0) {
      sub_60548();
    }
    uint64_t v7 = v6 >> 4;
    uint64_t v8 = *(void *)(a1 + 96) - *v3;
    if (v8 >> 3 > (unint64_t)(v6 >> 4)) {
      uint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    sub_6E988(v3, v9);
    *(void *)(a1 + 88) = sub_67E24(a1 + 96, v4, v5, *(void **)(a1 + 88));
  }
  sub_D26B4(a1);
  return a1;
}

void sub_259820(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_4636C(a3);
  }
  sub_638B4((void ***)va);
  sub_FE920(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_25985C(uint64_t a1, char **a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  uint64_t v3 = (void *)(a1 + 80);
  *(void *)a1 = off_63F128;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    sub_D126C((uint64_t *)&v22);
    unint64_t v10 = *(void *)(a1 + 96);
    int v11 = *(_OWORD **)(a1 + 88);
    if ((unint64_t)v11 >= v10)
    {
      long long v21 = v22;
      uint64_t v13 = ((uint64_t)v11 - *v3) >> 4;
      if ((unint64_t)(v13 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v14 = v10 - *v3;
      uint64_t v15 = v14 >> 3;
      if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      v23[4] = a1 + 96;
      uint64_t v17 = (char *)sub_10724(v16);
      char v18 = &v17[16 * v13];
      v23[0] = v17;
      v23[1] = v18;
      v23[3] = &v17[16 * v19];
      *(_OWORD *)char v18 = v21;
      v23[2] = v18 + 16;
      sub_D2658(v3, v23);
      uint64_t v12 = *(_OWORD **)(a1 + 88);
      sub_98E24((uint64_t)v23);
    }
    else
    {
      *int v11 = v22;
      uint64_t v12 = v11 + 1;
    }
    *(void *)(a1 + 88) = v12;
  }
  else
  {
    uint64_t v6 = v5 - v4;
    sub_17CE38((uint64_t *)(a1 + 80));
    if (v5 - v4 < 0) {
      sub_60548();
    }
    uint64_t v7 = v6 >> 4;
    uint64_t v8 = *(void *)(a1 + 96) - *v3;
    if (v8 >> 3 > (unint64_t)(v6 >> 4)) {
      uint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    sub_6E988(v3, v9);
    *(void *)(a1 + 88) = sub_67E24(a1 + 96, v4, v5, *(void **)(a1 + 88));
  }
  sub_D26B4(a1);
  return a1;
}

void sub_259A08(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_4636C(a3);
  }
  sub_638B4((void ***)va);
  sub_FE920(v3);
  _Unwind_Resume(a1);
}

void sub_259A44(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *(void *)a1 + 16;
  for (uint64_t i = *(void **)(*(void *)a1 + 24); i != (void *)v3; uint64_t i = (void *)i[1])
  {
    sub_43F38(&v7, i + 2, "", 269);
    int v5 = *(_DWORD *)(v7 + 144);
    if (v8) {
      sub_4636C(v8);
    }
    if (v5 == 1885433888)
    {
      sub_43F38(&v7, i + 4, "", 271);
      int v6 = *(_DWORD *)(v7 + 144);
      if (v8) {
        sub_4636C(v8);
      }
      if (v6 == 1886613611) {
        sub_113910((uint64_t **)a2, 8, (uint64_t)(i + 2));
      }
      sub_113910((uint64_t **)a2, 1, (uint64_t)(i + 2));
    }
  }
}

void sub_259B50(_Unwind_Exception *a1)
{
  sub_7F264(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_259B6C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_259BE8(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2, a4, a3);
  return v9;
}

uint64_t sub_259BE8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a2;
  uint64_t v64 = &v64;
  __int16 v65 = (uint64_t *)&v64;
  uint64_t v66 = 0;
  v63[0] = 0;
  v63[1] = 0;
  uint64_t v62 = v63;
  int v8 = a2[3];
  uint64_t v9 = (os_log_t *)sub_32A48(20);
  uint64_t v56 = a1;
  int v55 = v8;
  unint64_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
    __int16 v68 = 1024;
    int v69 = 161;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configuring broadcast route controls", buf, 0x12u);
  }
  int v11 = *(void **)(*(void *)v6 + 24);
  if (v11 != (void *)(*(void *)v6 + 16))
  {
    uint64_t v12 = (void **)((char *)v73 + 2);
    uint64_t v13 = (void **)&buf[8];
    uint64_t v14 = "";
    uint64_t v57 = a3;
    do
    {
      sub_43F38(&v60, v11 + 4, v14, 165);
      uint64_t v15 = (unsigned int *)v60;
      unint64_t v16 = *(os_unfair_lock_s **)(v60 + 192);
      if (!v16)
      {
        uint64_t v45 = (os_log_t *)sub_32A48(13);
        __int16 v46 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(void ***__return_ptr, unsigned int *))(*(void *)v15 + 144))(v59, v15);
          char v47 = v59[0];
          sub_2417C(&__p, v15[36]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
          __int16 v68 = 1024;
          int v69 = 170;
          __int16 v70 = 2112;
          int v71 = (std::string *)v47;
          __int16 v72 = 2080;
          v73[0] = p_p;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_72924((uint64_t)v59);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 2003329396;
      }
      int v17 = (*(uint64_t (**)(void, void))(*(void *)&v16->_os_unfair_lock_opaque + 240))(*(void *)(v60 + 192), *(unsigned int *)(v60 + 144));
      __p.__r_.__value_.__r.__words[0] = 0x6F7574706D757465;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v17;
      if ((*(unsigned int (**)(os_unfair_lock_s *, std::string *))(*(void *)&v16->_os_unfair_lock_opaque
                                                                             + 16))(v16, &__p))
      {
        operator new();
      }
      sub_6CB40((uint64_t *)&v62, v15[36], v15[36]);
      char v18 = v65;
      if (v65 == (uint64_t *)&v64) {
        goto LABEL_13;
      }
      do
      {
        uint64_t v19 = v18;
        long long v21 = v18 + 1;
        char v18 = (uint64_t *)v18[1];
        int v20 = (os_unfair_lock_s *)v21[1];
      }
      while (v20 != v16 && v18 != (uint64_t *)&v64);
      if (v20 == v16)
      {
        int v24 = v6;
        int v25 = v13;
        uint64_t v26 = v12;
        unint64_t v27 = v14;
        unint64_t v28 = (uint64_t *)v19[6];
        uint64_t v29 = (std::__shared_weak_count *)v11[5];
        if (v29)
        {
          AudioObjectID v30 = std::__shared_weak_count::lock(v29);
          uint64_t v31 = v30;
          if (v30)
          {
            uint64_t v32 = v11[4];
            atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_4636C(v30);
          }
          else
          {
            uint64_t v32 = 0;
          }
        }
        else
        {
          uint64_t v32 = 0;
          uint64_t v31 = 0;
        }
        unint64_t v33 = operator new(0x20uLL);
        uint64_t v33[2] = v32;
        v33[3] = v31;
        v33[1] = v28;
        uint64_t v34 = *v28;
        *unint64_t v33 = *v28;
        *(void *)(v34 + 8) = v33;
        uint64_t *v28 = (uint64_t)v33;
        ++v28[2];
        uint64_t v14 = v27;
        uint64_t v12 = v26;
        uint64_t v13 = v25;
        int v6 = v24;
        a3 = v57;
      }
      else
      {
LABEL_13:
        sub_2109D0(buf, (uint64_t)v16, (uint64_t)v15);
        long long v22 = operator new(0x78uLL);
        *long long v22 = 0;
        v22[1] = 0;
        sub_25A610(v22 + 2, (uint64_t)buf);
        uint64_t v23 = (uint64_t)v64;
        *long long v22 = v64;
        v22[1] = &v64;
        *(void *)(v23 + 8) = v22;
        uint64_t v64 = v22;
        ++v66;
        sub_73038(*(void **)((char *)&v73[7] + 2));
        sub_73038(*(void **)((char *)&v73[4] + 2));
        v59[0] = v12;
        sub_7308C(v59);
        v59[0] = v13;
        sub_7308C(v59);
      }
      sub_1EE408(v16, 1, v6[3], v11[9]);
      if (v61) {
        sub_4636C(v61);
      }
      int v11 = (void *)v11[1];
    }
    while (v11 != (void *)(*(void *)v6 + 16));
  }
  if (!v66)
  {
    os_log_t v50 = (os_log_t *)sub_32A48(13);
    __int16 v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
      __int16 v68 = 1024;
      int v69 = 200;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"could not get any IO devices for broadcast route\"", buf, 0x12u);
    }
    int v52 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v52 = &off_6414D8;
    v52[2] = 2003329396;
  }
  if (v65 != (uint64_t *)&v64)
  {
    sub_731B8(buf, v65 + 2);
    operator new();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 48))(&v60);
  if (v55 == 1918990112) {
    int v35 = sub_16414C();
  }
  else {
    int v35 = 0;
  }
  int v36 = sub_1F5F34(&v62, &v60);
  if (v35)
  {
    if (v36)
    {
      uint64_t v37 = (os_log_t *)sub_32A48(2);
      uint64_t v38 = *v37;
      if (*v37)
      {
        if (os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
          __int16 v68 = 1024;
          int v69 = 219;
          _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d RawModeDisablesSpeakerProcessing is active, but Speaker Protection is also active in HAL", buf, 0x12u);
        }
      }
    }
    goto LABEL_35;
  }
  if (v36)
  {
LABEL_35:
    sub_1F4724((uint64_t)v6);
    sub_1F4C24(v60, a3, a5, v55);
    uint64_t v39 = 0;
    *(void *)(a4 + 16) = v60;
    *(void *)(a4 + 24) = 0;
    goto LABEL_46;
  }
  uint64_t v40 = (os_log_t *)sub_32A48(19);
  uint64_t v41 = *v40;
  if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEFAULT))
  {
    sub_1E26F0(&__p, (uint64_t)v6);
    uint64_t v42 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
    __int16 v68 = 1024;
    int v69 = 224;
    __int16 v70 = 2080;
    int v71 = v42;
    _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAL Speaker Protection is missing. Failing route %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v43 = v60;
  uint64_t v60 = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v39 = 1;
LABEL_46:
  sub_463E0(v63[0]);
  sub_72F6C((uint64_t *)&v64);
  return v39;
}

void sub_25A4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  sub_463E0(a26);
  sub_72F6C(&a28);
  _Unwind_Resume(a1);
}

void *sub_25A610(void *result, uint64_t a2)
{
  *uint64_t result = *(void *)a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  result[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
  result[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  result[7] = *(void *)(a2 + 56);
  uint64_t v2 = (void *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 64);
  result[8] = v3;
  uint64_t v4 = result + 8;
  uint64_t v5 = *(void *)(a2 + 72);
  result[9] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 56) = v2;
    *uint64_t v2 = 0;
    *(void *)(a2 + 72) = 0;
  }
  else
  {
    result[7] = v4;
  }
  result[10] = *(void *)(a2 + 80);
  int v6 = (void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 88);
  result[11] = v7;
  int v8 = result + 11;
  uint64_t v9 = *(void *)(a2 + 96);
  result[12] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a2 + 80) = v6;
    *int v6 = 0;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    result[10] = v8;
  }
  return result;
}

void sub_25A6C8()
{
}

void sub_25A6E0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)(*(void *)a2 + 24);
  sub_43F38(&v52, v7 + 4, "", 84);
  uint64_t v46 = a5;
  int v8 = (unsigned int *)v52;
  uint64_t v9 = *(os_unfair_lock_s **)(v52 + 192);
  if (!v9)
  {
    uint64_t v29 = (os_log_t *)sub_32A48(13);
    AudioObjectID v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(uint64_t *__return_ptr, unsigned int *))(*(void *)v8 + 144))(&v53, v8);
      uint64_t v31 = v53;
      sub_2417C(v54, v8[36]);
      if (v55 >= 0) {
        uint64_t v32 = v54;
      }
      else {
        uint64_t v32 = *(uint8_t **)v54;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 93;
      __int16 v57 = 2112;
      uint64_t v58 = v31;
      __int16 v59 = 2080;
      uint64_t v60 = v32;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
      if (v55 < 0) {
        operator delete(*(void **)v54);
      }
      sub_72924((uint64_t)&v53);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  unsigned int v10 = *(_DWORD *)(v52 + 144);
  int v11 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v9->_os_unfair_lock_opaque + 240))(v9, v10);
  uint64_t v50 = 0x6F7574706D757465;
  int v51 = v11;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&v9->_os_unfair_lock_opaque + 24))(v9, &v50))
  {
    operator new();
  }
  sub_1EE408(v9, 1, a2[3], v7[9]);
  if (v10 == 1886545251)
  {
    uint64_t v12 = (void *)sub_F820C();
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0, "Speaker", 0x600u);
    uint8_t buf[8] = 1;
    uint64_t v13 = sub_F832C(v12, (CFStringRef *)buf);
    sub_72924((uint64_t)buf);
    if (v13)
    {
      if (sub_36B52C(v13)) {
        operator new();
      }
    }
  }
  if (sub_1151A0(*(uint64_t **)(v46 + 8), 3))
  {
    uint64_t v14 = sub_115244(v46, 3);
    sub_43F38((uint64_t *)v54, (uint64_t *)(v14 + 16), "", 119);
    if (v10 == 1886545251)
    {
      if (*(os_unfair_lock_s **)(*(void *)v54 + 192) == v9)
      {
        if (*(_DWORD *)(*(void *)v54 + 144) == 1885888867)
        {
          if (!sub_1151A0(*(uint64_t **)(v46 + 8), 2))
          {
            (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v9->_os_unfair_lock_opaque + 240))(v9, 1885888867);
            operator new();
          }
          char v44 = (os_log_t *)sub_32A48(13);
          uint64_t v45 = *v44;
          if (*v44)
          {
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 132;
              _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: both HAC and ANC are present in route. Database error?\"", buf, 0x12u);
            }
          }
          uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v39, "Illegal route: both HAC and ANC are present in route. Database error?");
        }
        else
        {
          uint64_t v42 = (os_log_t *)sub_32A48(13);
          uint64_t v43 = *v42;
          if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 129;
            _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: HAC connection's destination port type is not HAC. Database error?\"", buf, 0x12u);
          }
          uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v39, "Illegal route: HAC connection's destination port type is not HAC. Database error?");
        }
      }
      else
      {
        uint64_t v40 = (os_log_t *)sub_32A48(13);
        uint64_t v41 = *v40;
        if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 126;
          _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: HAC and downlink connections' destination devices do not match. Database error?\"", buf, 0x12u);
        }
        uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v39, "Illegal route: HAC and downlink connections' destination devices do not match. Database error?");
      }
    }
    else
    {
      uint64_t v37 = (os_log_t *)sub_32A48(13);
      uint64_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 123;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Detected presence of HAC connection in a non-Receiver route. Database error?\"", buf, 0x12u);
      }
      uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v39, "Detected presence of HAC connection in a non-Receiver route. Database error?");
    }
  }
  if (v8[66] == 1752709424) {
    sub_1F2870(a2[3], (uint64_t)v9);
  }
  if ((sub_1151A0(*(uint64_t **)(v46 + 8), 1) & 1) == 0)
  {
    uint64_t v34 = (os_log_t *)sub_32A48(13);
    int v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 144;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v36, "Precondition failure.");
  }
  uint64_t v15 = sub_115244(v46, 1);
  sub_1EE2CC(&v49, (uint64_t)v9, (uint64_t)v8, (uint64_t)a2, *(void *)(v15 + 56), a2[3]);
  sub_1F3044((unsigned int **)&v49, (uint64_t *)(v15 + 16), v9);
  *(void *)AudioObjectPropertyAddress buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  unint64_t v16 = (std::__shared_weak_count *)v7[5];
  if (v16)
  {
    int v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      char v18 = v17;
      uint64_t v19 = v7[4];
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v20 = *(std::__shared_weak_count **)&buf[8];
      *(void *)AudioObjectPropertyAddress buf = v19;
      *(void *)&uint8_t buf[8] = v18;
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      sub_4636C(v18);
    }
    else
    {
      long long v21 = *(std::__shared_weak_count **)&buf[8];
      *(void *)AudioObjectPropertyAddress buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      if (v21) {
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  sub_D1200(v47, (uint64_t *)buf, 1);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!sub_1151A0(*(uint64_t **)(v46 + 8), 3))
  {
LABEL_33:
    sub_1F2704(a2[3]);
    operator new();
  }
  uint64_t v22 = sub_115244(v46, 3);
  uint64_t v23 = *(std::__shared_weak_count **)(v22 + 24);
  if (v23)
  {
    int v24 = std::__shared_weak_count::lock(v23);
    int v25 = v24;
    if (v24)
    {
      uint64_t v26 = *(void *)(v22 + 16);
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v24);
LABEL_32:
      unint64_t v27 = operator new(0x20uLL);
      v27[2] = v26;
      uint64_t v27[3] = v25;
      uint64_t v28 = v47[0];
      void *v27 = v47[0];
      v27[1] = v47;
      *(void *)(v28 + 8) = v27;
      v47[0] = (uint64_t)v27;
      ++v48;
      goto LABEL_33;
    }
  }
  else
  {
    int v25 = 0;
  }
  uint64_t v26 = 0;
  goto LABEL_32;
}

void sub_25CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,std::__shared_weak_count *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_free_exception(v69);
  a51 = &a55;
  sub_74004((void ***)&a51);
  a55 = (uint64_t)&STACK[0x210];
  sub_74004((void ***)&a55);
  uint64_t v71 = a58;
  a58 = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  sub_463E0((void *)a60);
  sub_8108(&a65);
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  if (STACK[0x208]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x208]);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_25D434(uint64_t *a1, void *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 104 * a3;
    do
    {
      int v6 = sub_73164(a2);
      uint64_t v7 = *a1;
      *int v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 13;
      v5 -= 104;
    }
    while (v5);
  }
  return a1;
}

void sub_25D4A8(_Unwind_Exception *a1)
{
  sub_72F6C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25D4C0(uint64_t a1)
{
  return sub_1E09A0(a1 + 24);
}

void sub_25D4C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F330;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_25D51C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_25D53C()
{
}

uint64_t sub_25D554()
{
  return 0;
}

void sub_25D55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (os_log_t *)sub_32A48(19);
  int v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_1E26F0(&__p, a2);
    uint64_t v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 164;
    __int16 v85 = 2080;
    __int16 v86 = v9;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Activating route %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((sub_1151A0(*(uint64_t **)(a5 + 8), 0) & 1) == 0)
  {
    uint64_t v40 = (os_log_t *)sub_32A48(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 165;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((sub_1151A0(*(uint64_t **)(a5 + 8), 1) & 1) == 0)
  {
    uint64_t v43 = (os_log_t *)sub_32A48(13);
    char v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 166;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v45, "Precondition failure.");
  }
  unsigned int v10 = (uint64_t *)sub_115244(a5, 0);
  uint64_t v67 = sub_115244(a5, 1);
  sub_43F38(&v81, v10, "", 172);
  sub_43F38(&v79, (uint64_t *)(v67 + 16), "", 173);
  uint64_t v11 = v81;
  unsigned int v12 = *(_DWORD *)(v81 + 144);
  uint64_t v13 = v79;
  uint64_t v14 = *(unsigned int *)(v79 + 144);
  CFDictionaryRef v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(v81 + 192) + 128))(buf);
  CFComparisonResult v15 = CFStringCompare(*(CFStringRef *)buf, @"Codec", 0);
  sub_72924((uint64_t)buf);
  if (v15)
  {
    unint64_t v16 = *(os_unfair_lock_s **)(v11 + 192);
    if (!v16)
    {
      int v17 = (os_log_t *)sub_32A48(13);
      char v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v11 + 144))(v89, v11);
        uint64_t v19 = *(std::string **)v89;
        sub_2417C(&__p, *(_DWORD *)(v11 + 144));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 211;
        __int16 v85 = 2112;
        __int16 v86 = v19;
        __int16 v87 = 2080;
        __int16 v88 = p_p;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputIODevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_72924((uint64_t)v89);
      }
      goto LABEL_91;
    }
  }
  else
  {
    long long v21 = (void *)sub_F820C();
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0, "Codec", 0x600u);
    uint8_t buf[8] = 1;
    uint64_t v22 = sub_F832C(v21, (CFStringRef *)buf);
    uint64_t v23 = v13;
    sub_72924((uint64_t)buf);
    if (!v22)
    {
      int v51 = (os_log_t *)sub_32A48(13);
      uint64_t v52 = *v51;
      if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 186;
        _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputControlDevice is NULL]: \"could not get codec device\"", buf, 0x12u);
      }
LABEL_91:
      uint64_t v53 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v53 = &off_6414D8;
      v53[2] = 2003329396;
    }
    int v24 = (os_unfair_lock_s *)v22;
    sub_1EE03C((uint64_t)buf, v22, v11, a2, v10[7], *(_DWORD *)(a2 + 12));
    int v25 = v82;
    *(void *)int64_t v89 = v11;
    __int16 v90 = v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1F4188((uint64_t)&__p, (uint64_t)buf, (uint64_t *)v89);
    sub_6720C((char *)&v76, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v25) {
      std::__shared_weak_count::__release_weak(v25);
    }
    if (v24[171]._os_unfair_lock_opaque < (unint64_t)((v77 - (uint64_t)v76) >> 2))
    {
      long long v54 = (os_log_t *)sub_32A48(13);
      char v55 = *v54;
      if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 203;
        _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputIODevice is NULL]: \"could not get input device\"", (uint8_t *)&__p, 0x12u);
      }
      uint64_t v56 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v56 = &off_6414D8;
      v56[2] = 2003329396;
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    unint64_t v16 = v24;
    uint64_t v13 = v23;
  }
  __int16 v68 = v16;
  if (v12 == 1885629550 && v14 == 1886743662)
  {
    strcpy(buf, "crscbolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    sub_1F4340((uint64_t)buf);
    strcpy(buf, "sddmurtp");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    sub_1F4340((uint64_t)buf);
    unint64_t v16 = v68;
  }
  sub_1EE408(v16, 0, *(_DWORD *)(a2 + 12), v10[7]);
  sub_85F24();
  if (byte_64A0E0)
  {
    BOOL v26 = (unsigned __int16)sub_376E5C(*(void *)(a2 + 104), *(_DWORD *)(a2 + 12), v12) > 0x100u;
    sub_1F28E8(v26, *(void *)(v11 + 192));
  }
  sub_1EE03C((uint64_t)&v75, (uint64_t)v68, v11, a2, v10[7], *(_DWORD *)(a2 + 12));
  unint64_t v27 = v82;
  *(void *)AudioObjectPropertyAddress buf = v11;
  *(void *)&uint8_t buf[8] = v82;
  if (v82) {
    atomic_fetch_add_explicit(&v82->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1F3044((unsigned int **)&v75, (uint64_t *)buf, v68);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = *(os_unfair_lock_s **)(v13 + 192);
  if (!v28)
  {
    uint64_t v46 = (os_log_t *)sub_32A48(13);
    char v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v13 + 144))(v89, v13);
      uint64_t v48 = *(std::string **)v89;
      sub_2417C(&__p, *(_DWORD *)(v13 + 144));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v49 = &__p;
      }
      else {
        uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 241;
      __int16 v85 = 2112;
      __int16 v86 = v48;
      __int16 v87 = 2080;
      __int16 v88 = v49;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [outputIODevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_72924((uint64_t)v89);
    }
    uint64_t v50 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v50 = &off_6414D8;
    v50[2] = 2003329396;
  }
  if (v14 == 1886545251)
  {
    uint64_t v29 = (void *)sub_F820C();
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0, "Speaker", 0x600u);
    uint8_t buf[8] = 1;
    uint64_t v30 = sub_F832C(v29, (CFStringRef *)buf);
    sub_72924((uint64_t)buf);
    strcpy(buf, "shCSptuo");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    if (v30)
    {
      if ((*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v30 + 16))(v30, buf)
        && sub_36B52C(v30))
      {
        operator new();
      }
    }
  }
  int v31 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v28->_os_unfair_lock_opaque + 240))(v28, v14);
  uint64_t v73 = 0x6F7574706D757465;
  int v74 = v31;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&v28->_os_unfair_lock_opaque + 24))(v28, &v73))
  {
    operator new();
  }
  sub_1EE408(v28, 1, *(_DWORD *)(a2 + 12), *(void *)(v67 + 56));
  if (!sub_1151A0(*(uint64_t **)(a5 + 8), 3)) {
    goto LABEL_59;
  }
  uint64_t v32 = sub_115244(a5, 3);
  uint64_t v71 = 0;
  __int16 v72 = 0;
  unint64_t v33 = *(std::__shared_weak_count **)(v32 + 24);
  if (!v33) {
    goto LABEL_60;
  }
  uint64_t v34 = std::__shared_weak_count::lock(v33);
  if (v34)
  {
    int v35 = v34;
    uint64_t v36 = *(void *)(v32 + 16);
    atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v71 = v36;
    __int16 v72 = v34;
    sub_4636C(v34);
    uint64_t v37 = std::__shared_weak_count::lock(v35);
    if (v37)
    {
      if (v36)
      {
        if (v14 == 1886545251)
        {
          if (*(os_unfair_lock_s **)(v36 + 192) == v28)
          {
            if (*(_DWORD *)(v36 + 144) == 1885888867)
            {
              if (!sub_1151A0(*(uint64_t **)(a5 + 8), 2))
              {
                (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v28->_os_unfair_lock_opaque + 240))(v28, 1885888867);
                operator new();
              }
              uint64_t v64 = (os_log_t *)sub_32A48(13);
              __int16 v65 = *v64;
              if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 284;
                _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: both HAC and ANC are present in route. Database error\"", buf, 0x12u);
              }
              __int16 v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v59, "Illegal route: both HAC and ANC are present in route. Database error");
            }
            else
            {
              uint64_t v62 = (os_log_t *)sub_32A48(13);
              unint64_t v63 = *v62;
              if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 282;
                _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: HAC connection's destination port type is not HAC. Database error?\"", buf, 0x12u);
              }
              __int16 v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v59, "Illegal route: HAC connection's destination port type is not HAC. Database error?");
            }
          }
          else
          {
            uint64_t v60 = (os_log_t *)sub_32A48(13);
            uint64_t v61 = *v60;
            if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 280;
              _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: HAC and downlink connections' destination devices do not match. Database error?\"", buf, 0x12u);
            }
            __int16 v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v59, "Illegal route: HAC and downlink connections' destination devices do not match. Database error?");
          }
        }
        else
        {
          __int16 v57 = (os_log_t *)sub_32A48(13);
          uint64_t v58 = *v57;
          if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 278;
            _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Detected presence of HAC connection in a non-Receiver route. Database error?\"", buf, 0x12u);
          }
          __int16 v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v59, "Detected presence of HAC connection in a non-Receiver route. Database error?");
        }
      }
      sub_4636C(v37);
    }
  }
  else
  {
LABEL_59:
    uint64_t v71 = 0;
    __int16 v72 = 0;
  }
LABEL_60:
  int v38 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(v13 + 264) == 1752709424)
  {
    sub_1F2870(*(_DWORD *)(a2 + 12), (uint64_t)v28);
    int v38 = *(_DWORD *)(a2 + 12);
  }
  sub_1EE2CC(&v70, (uint64_t)v28, v13, a2, *(void *)(v67 + 56), v38);
  uint64_t v39 = v80;
  *(void *)AudioObjectPropertyAddress buf = v13;
  *(void *)&uint8_t buf[8] = v80;
  if (v80) {
    atomic_fetch_add_explicit(&v80->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1F3044((unsigned int **)&v70, (uint64_t *)buf, v28);
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  *(void *)AudioObjectPropertyAddress buf = v11;
  *(void *)&uint8_t buf[8] = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  __p.__r_.__value_.__r.__words[0] = v13;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_25FF38(&v69, a1, (uint64_t)v68, (uint64_t)v28, (uint64_t *)buf, (uint64_t *)&__p, (uint64_t)&v75, a2, (uint64_t)&v76, a5);
}

void sub_25F8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  __cxa_free_exception(v70);
  sub_4636C(v71);
  std::__shared_weak_count::__release_weak(v72);
  if (__p) {
    operator delete(__p);
  }
  if (a64) {
    operator delete(a64);
  }
  if (a68) {
    sub_4636C(a68);
  }
  if (a70) {
    sub_4636C(a70);
  }
  _Unwind_Resume(a1);
}

void sub_25FF30()
{
}

void sub_25FF38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_43F38(&v81, a5, "", 470);
  sub_43F38(&v80, a6, "", 471);
  uint64_t v65 = v80;
  int v14 = *(_DWORD *)(v80 + 144);
  unsigned int v15 = sub_1151A0(*(uint64_t **)(a10 + 8), 4);
  if (v14 == 1886613611) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }
  if (v16 == 1)
  {
    int v17 = (uint64_t *)sub_115244(a10, 4);
    char v18 = (std::__shared_weak_count *)v17[1];
    uint64_t v63 = *v17;
    uint64_t v78 = *v17;
    uint64_t v79 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v63 = 0;
    char v18 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
  }
  if (sub_1151A0(*(uint64_t **)(a10 + 8), 3))
  {
    uint64_t v19 = sub_115244(a10, 3);
    int v20 = *(std::__shared_weak_count **)(v19 + 24);
    uint64_t v62 = *(void *)(v19 + 16);
    uint64_t v76 = v62;
    uint64_t v77 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v62 = 0;
    int v20 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
  }
  if (sub_1151A0(*(uint64_t **)(a10 + 8), 9))
  {
    long long v21 = (uint64_t *)sub_115244(a10, 9);
    uint64_t v22 = (std::__shared_weak_count *)v21[1];
    uint64_t v74 = *v21;
    unsigned int v75 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v74 = 0;
    unsigned int v75 = 0;
  }
  if (*(_DWORD *)(a8 + 12) != 1768057203) {
    goto LABEL_25;
  }
  if (*(unsigned char *)(a8 + 200))
  {
    uint64_t v23 = (os_log_t *)sub_32A48(19);
    int v24 = *v23;
    if (*v23)
    {
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = a8 + 176;
        if (*(char *)(a8 + 199) < 0) {
          uint64_t v25 = *(void *)(a8 + 176);
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 489;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v25;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&buf[30] = "NetworkUplinkClock_UID";
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Conflict: Multiple clock devices present for Ibis. Route-defined clock %s, network uplink clock %s", buf, 0x26u);
      }
    }
  }
  if (*(_DWORD *)(a8 + 12) == 1768057203)
  {
    sub_21C8C(buf, "NetworkUplinkClock_UID");
    *(_OWORD *)uint64_t v71 = *(_OWORD *)buf;
    uint64_t v72 = *(void *)&buf[16];
    char v73 = 1;
  }
  else
  {
LABEL_25:
    sub_CAE80(v71, (long long *)(a8 + 176));
  }
  BOOL v26 = (os_log_t *)sub_32A48(19);
  unint64_t v27 = *v26;
  if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
  {
    sub_21C8C(__p, "none");
    if (v73)
    {
      if (SHIBYTE(v72) < 0)
      {
        sub_21E8C(__dst, v71[0], (unint64_t)v71[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v71;
        *(void *)&long long v86 = v72;
      }
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__p;
      *(void *)&long long v86 = v84;
      *(void *)&long long v84 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    uint64_t v28 = __dst;
    if (SBYTE7(v86) < 0) {
      uint64_t v28 = *(uint8_t **)__dst;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 495;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v28;
    _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Clock UID is %s", buf, 0x1Cu);
    if (SBYTE7(v86) < 0) {
      operator delete(*(void **)__dst);
    }
    if (SBYTE7(v84) < 0) {
      operator delete(__p[0]);
    }
  }
  *a1 = 0;
  if (a3 != a4)
  {
    if (v18) {
      std::__shared_weak_count::lock(v18);
    }
    *(void *)&uint8_t buf[8] = 0;
    *(void *)AudioObjectPropertyAddress buf = 0;
    uint64_t v34 = (std::__shared_weak_count *)a5[1];
    if (v34)
    {
      int v35 = std::__shared_weak_count::lock(v34);
      if (v35)
      {
        uint64_t v36 = v35;
        uint64_t v37 = *a5;
        atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        int v38 = *(std::__shared_weak_count **)&buf[8];
        *(void *)AudioObjectPropertyAddress buf = v37;
        *(void *)&uint8_t buf[8] = v36;
        if (v38) {
          std::__shared_weak_count::__release_weak(v38);
        }
        sub_4636C(v36);
      }
      else
      {
        uint64_t v39 = *(std::__shared_weak_count **)&buf[8];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)AudioObjectPropertyAddress buf = 0;
        if (v39) {
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    *(void *)&unsigned char buf[24] = 0;
    *(void *)&buf[16] = 0;
    if (v18)
    {
      uint64_t v40 = std::__shared_weak_count::lock(v18);
      if (v40)
      {
        uint64_t v41 = v40;
        atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v42 = *(std::__shared_weak_count **)&buf[24];
        *(void *)&buf[16] = v63;
        *(void *)&unsigned char buf[24] = v41;
        if (v42) {
          std::__shared_weak_count::__release_weak(v42);
        }
        sub_4636C(v41);
      }
      else
      {
        uint64_t v43 = *(std::__shared_weak_count **)&buf[24];
        *(void *)&buf[16] = 0;
        *(void *)&unsigned char buf[24] = 0;
        if (v43) {
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    sub_D1200(v70, (uint64_t *)buf, 2);
    uint64_t v44 = 24;
    while (1)
    {
      uint64_t v45 = *(std::__shared_weak_count **)&buf[v44];
      if (v45) {
        std::__shared_weak_count::__release_weak(v45);
      }
      v44 -= 16;
      if (v44 == -8)
      {
        *(void *)&uint8_t buf[8] = 0;
        *(void *)AudioObjectPropertyAddress buf = 0;
        sub_264480(v70, buf);
        sub_1F2704(*(_DWORD *)(a8 + 12));
        operator new();
      }
    }
  }
  if (v18)
  {
    __int16 v59 = (os_log_t *)sub_32A48(13);
    uint64_t v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 503;
      _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v29 = *(_DWORD *)(v65 + 144);
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(v81 + 144);
  *(_DWORD *)&uint8_t buf[4] = v29;
  sub_6367C((uint64_t)theString, (unsigned int *)buf, 2);
  v67[0] = (std::__shared_weak_count *)v67;
  v67[1] = (std::__shared_weak_count *)v67;
  *(void *)&long long v68 = 0;
  uint64_t v30 = (std::__shared_weak_count *)a5[1];
  if (v30)
  {
    int v31 = std::__shared_weak_count::lock(v30);
    uint64_t v32 = v31;
    if (v31)
    {
      uint64_t v33 = *a5;
      atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v31);
      goto LABEL_67;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  uint64_t v33 = 0;
LABEL_67:
  uint64_t v46 = (std::__shared_weak_count *)operator new(0x20uLL);
  v46->__shared_weak_owners_ = v33;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)v32;
  char v47 = v67[0];
  v46->__vftable = (std::__shared_weak_count_vtbl *)v67[0];
  v46->__shared_owners_ = (uint64_t)v67;
  v47->__shared_owners_ = (uint64_t)v46;
  v67[0] = v46;
  *(void *)&long long v68 = v68 + 1;
  uint64_t v48 = (std::__shared_weak_count *)a6[1];
  if (v48)
  {
    uint64_t v49 = std::__shared_weak_count::lock(v48);
    uint64_t v50 = v49;
    if (v49)
    {
      uint64_t v51 = *a6;
      atomic_fetch_add_explicit(&v49->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v49);
LABEL_72:
      uint64_t v52 = (std::__shared_weak_count *)operator new(0x20uLL);
      v52->__shared_weak_owners_ = v51;
      v52[1].__vftable = (std::__shared_weak_count_vtbl *)v50;
      uint64_t v53 = v67[0];
      v52->__vftable = (std::__shared_weak_count_vtbl *)v67[0];
      v52->__shared_owners_ = (uint64_t)v67;
      v53->__shared_owners_ = (uint64_t)v52;
      v67[0] = v52;
      *(void *)&long long v68 = v68 + 1;
      if (v20)
      {
        long long v54 = std::__shared_weak_count::lock(v20);
        char v55 = v54;
        if (v54)
        {
          atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v54);
          uint64_t v56 = v62;
        }
        else
        {
          uint64_t v56 = 0;
        }
        __int16 v57 = (std::__shared_weak_count *)operator new(0x20uLL);
        v57->__shared_weak_owners_ = v56;
        v57[1].__vftable = (std::__shared_weak_count_vtbl *)v55;
        uint64_t v58 = v67[0];
        v57->__vftable = (std::__shared_weak_count_vtbl *)v67[0];
        v57->__shared_owners_ = (uint64_t)v67;
        v58->__shared_owners_ = (uint64_t)v57;
        v67[0] = v57;
        *(void *)&long long v68 = v68 + 1;
        sub_43F38((uint64_t *)buf, &v76, "", 513);
        sub_6CB40((uint64_t *)theString, *(_DWORD *)(*(void *)buf + 144), *(_DWORD *)(*(void *)buf + 144));
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      sub_1F2704(*(_DWORD *)(a8 + 12));
      operator new();
    }
  }
  else
  {
    uint64_t v50 = 0;
  }
  uint64_t v51 = 0;
  goto LABEL_72;
}

void sub_26348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (a34) {
    std::__shared_weak_count::__release_weak(a34);
  }
  sub_1199BC((uint64_t)&STACK[0x430]);
  sub_1199BC(v73 - 208);
  sub_463E0(a46);
  sub_8108(&a51);
  sub_8108(&a57);
  if (a12) {
    sub_4636C(a12);
  }
  uint64_t v75 = *a22;
  *a22 = 0;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  if (a69 && a68 < 0) {
    operator delete(__p);
  }
  if (a72) {
    std::__shared_weak_count::__release_weak(a72);
  }
  if (a73) {
    std::__shared_weak_count::__release_weak(a73);
  }
  if (STACK[0x200]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x200]);
  }
  if (STACK[0x210]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x210]);
  }
  if (STACK[0x220]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x220]);
  }
  _Unwind_Resume(a1);
}

void sub_263E04(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  int v6 = operator new(0x88uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  void v6[2] = 0;
  *int v6 = off_63F1F8;
  int v8 = v6 + 3;
  v9[0] = a2;
  v9[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_D15C0((uint64_t)(v6 + 3), v9);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_263EA4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void *sub_263EC8(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = 0;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  return a1;
}

void *sub_263F50(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unsigned int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unsigned int v10 = operator new(0x28uLL);
  *unsigned int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  uint64_t v10[3] = 0;
  v10[4] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_6DEC4(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unsigned int v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *unsigned int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_264154(_Unwind_Exception *a1)
{
  sub_73B3C(1, v1);
  _Unwind_Resume(a1);
}

void sub_26416C(uint64_t a1, uint64_t a2)
{
  if (sub_1151A0(*(uint64_t **)(a2 + 8), 3))
  {
    uint64_t v4 = sub_115244(a2, 3);
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 24);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v7 = (void *)sub_F820C();
    *(void *)unint64_t v27 = CFStringCreateWithCString(0, "Codec", 0x600u);
    v27[8] = 1;
    uint64_t v8 = sub_F832C(v7, (CFStringRef *)v27);
    sub_72924((uint64_t)v27);
    if (!v8)
    {
      uint64_t v23 = (os_log_t *)sub_32A48(13);
      int v24 = *v23;
      if (*v23)
      {
        if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v27 = 136315394;
          *(void *)&v27[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
          __int16 v28 = 1024;
          int v29 = 74;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Could not locate codec device\"", v27, 0x12u);
        }
      }
    }
    uint64_t v9 = *(uint64_t **)(a1 + 32);
    unsigned int v10 = *(uint64_t **)(a1 + 40);
    if (v9 == v10) {
      goto LABEL_18;
    }
    do
    {
      if (v9[2])
      {
        uint64_t v11 = v9[1];
        float v12 = *(std::__shared_weak_count **)(v11 + 24);
        if (v12)
        {
          float v13 = std::__shared_weak_count::lock(v12);
          if (v13)
          {
            uint64_t v14 = *(void *)(v11 + 16);
            sub_4636C(v13);
            if (v14)
            {
              uint64_t v15 = v9[1];
              unint64_t v16 = *(std::__shared_weak_count **)(v15 + 24);
              if (v16 && (size_t v17 = std::__shared_weak_count::lock(v16)) != 0)
              {
                uint64_t v18 = *(void *)(*(void *)(v15 + 16) + 192);
                sub_4636C(v17);
                if (v18 == v8) {
                  goto LABEL_17;
                }
              }
              else if (v8 == 1935832436)
              {
                goto LABEL_17;
              }
            }
          }
        }
      }
      v9 += 3;
    }
    while (v9 != v10);
    uint64_t v9 = v10;
LABEL_17:
    if (*(uint64_t **)(a1 + 40) == v9)
    {
LABEL_18:
      uint64_t v19 = (os_log_t *)sub_32A48(13);
      unint64_t v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v27 = 136315394;
        *(void *)&v27[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        __int16 v28 = 1024;
        int v29 = 83;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Could not locate codec device's port list in the provided device description\"", v27, 0x12u);
      }
    }
    if (*(uint64_t **)(a1 + 40) != v9)
    {
      if (v5)
      {
        long long v21 = std::__shared_weak_count::lock(v5);
        uint64_t v22 = v21;
        if (v21)
        {
          atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v21);
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v22 = 0;
      }
      uint64_t v25 = operator new(0x20uLL);
      v25[2] = v6;
      uint64_t v25[3] = v22;
      v25[1] = v9;
      uint64_t v26 = *v9;
      *uint64_t v25 = *v9;
      *(void *)(v26 + 8) = v25;
      uint64_t *v9 = (uint64_t)v25;
      ++v9[2];
    }
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_264438(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_264480(void *a1, void *a2)
{
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  uint64_t v18[2] = 0;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1)
  {
    while (1)
    {
      uint64_t v5 = (std::__shared_weak_count *)v2[3];
      if (v5)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v5);
        uint64_t v7 = v6 ? v2[2] : 0;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v6 = 0;
      }
      uint64_t v8 = (std::__shared_weak_count *)a2[1];
      if (!v8) {
        break;
      }
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (!v9) {
        break;
      }
      BOOL v10 = v7 == *a2;
      sub_4636C(v9);
      if (v6) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t v11 = (void *)v2[1];
      if (v10)
      {
        while (1)
        {
          if (v11 == a1)
          {
            sub_1277D8((uint64_t)v18, v18, (uint64_t)a1, v2, a1);
            goto LABEL_32;
          }
          float v12 = (std::__shared_weak_count *)v11[3];
          if (v12)
          {
            float v13 = std::__shared_weak_count::lock(v12);
            uint64_t v14 = v13 ? v11[2] : 0;
          }
          else
          {
            uint64_t v14 = 0;
            float v13 = 0;
          }
          uint64_t v15 = (std::__shared_weak_count *)a2[1];
          if (!v15) {
            break;
          }
          unint64_t v16 = std::__shared_weak_count::lock(v15);
          if (!v16) {
            break;
          }
          BOOL v17 = v14 == *a2;
          sub_4636C(v16);
          if (v13) {
            goto LABEL_25;
          }
LABEL_26:
          if (!v17)
          {
            sub_1277D8((uint64_t)v18, v18, (uint64_t)a1, v2, v11);
            uint64_t v11 = (void *)v11[1];
            goto LABEL_29;
          }
          uint64_t v11 = (void *)v11[1];
        }
        BOOL v17 = v14 == 0;
        if (!v13) {
          goto LABEL_26;
        }
LABEL_25:
        sub_4636C(v13);
        goto LABEL_26;
      }
LABEL_29:
      uint64_t v2 = v11;
      if (v11 == a1) {
        goto LABEL_32;
      }
    }
    BOOL v10 = v7 == 0;
    if (!v6) {
      goto LABEL_13;
    }
LABEL_12:
    sub_4636C(v6);
    goto LABEL_13;
  }
LABEL_32:
  sub_8108(v18);
}

void sub_264604(uint64_t **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        sub_8108(v3);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_26466C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long *a10)
{
  sub_CAE80(&__dst, a10);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(a4 + 4);
  sub_329CBC((uint64_t)&v12, (uint64_t *)buf);
  operator new();
}

void sub_2660CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  __cxa_free_exception(v63);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  sub_119EBC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

double sub_26625C(uint64_t a1, int a2)
{
  double v25 = 0.0;
  if (*(void *)(a1 + 440) != 2)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    os_log_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v27 = "AggregateDevice_Duplex.h";
      __int16 v28 = 1024;
      int v29 = 366;
      float v13 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError): \"Duplex aggregate device configured with incorrect number of devices\"";
LABEL_28:
      BOOL v17 = v12;
      uint32_t v18 = 18;
LABEL_29:
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, v13, buf, v18);
    }
LABEL_30:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 560227702;
  }
  uint64_t v2 = 432;
  if (a2) {
    uint64_t v2 = 424;
  }
  uint64_t v3 = *(void *)(a1 + v2);
  if (*(void *)(v3 + 32) != 1)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    os_log_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      unint64_t v27 = "AggregateDevice_Duplex.h";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (a2) {
        unint64_t v16 = "output";
      }
      else {
        unint64_t v16 = "input";
      }
      __int16 v28 = 1024;
      int v29 = 369;
      __int16 v30 = 2080;
      int v31 = v16;
      float v13 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError): \"Aggregate's %s device list contains incorrect number of devices\"";
      BOOL v17 = v15;
      uint32_t v18 = 28;
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  uint64_t v4 = *(void *)(*(void *)(v3 + 24) + 16);
  if (!v4)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    os_log_t v12 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v27 = "AggregateDevice_Duplex.h";
      __int16 v28 = 1024;
      int v29 = 346;
      float v13 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"NULL device\"";
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  uint64_t v23 = 0x676C6F626E737274;
  int v24 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v4 + 16))(v4, &v23))
  {
    int v22 = 8;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)v4 + 40))(v4, &v23, 0, 0, &v22, &v25);
    if (v22 != 8)
    {
      uint64_t v5 = (os_log_t *)sub_32A48(13);
      uint64_t v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unint64_t v27 = "AggregateDevice_Duplex.h";
          __int16 v28 = 1024;
          int v29 = 353;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected device sample rate data size\"", buf, 0x12u);
        }
      }
    }
    return v25;
  }
  else
  {
    uint64_t v8 = (os_log_t *)sub_32A48(16);
    uint64_t v9 = *v8;
    double v7 = 0.0;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v27 = "AggregateDevice_Duplex.h";
      __int16 v28 = 1024;
      int v29 = 357;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get sample rate from device because sample rate property does not exist on device", buf, 0x12u);
    }
  }
  return v7;
}

void sub_266614(void *a1)
{
  *a1 = off_637E10;
  sub_2699DC(a1);

  operator delete();
}

uint64_t sub_266668(void *a1)
{
  *a1 = off_637E10;
  return sub_2699DC(a1);
}

void *sub_266688(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    sub_60560();
  }
  return operator new(104 * a1);
}

void sub_2666D4()
{
}

uint64_t sub_2666EC()
{
  return 0;
}

uint64_t sub_2666F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 48 || v2[1] - *v2 < 0x408uLL || v2[4] - v2[3] < 0x408uLL) {
    return 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      double v7 = v6;
      uint64_t v8 = *(void *)(a1 + 16);
      if (v8)
      {
        uint64_t v9 = *(NSObject **)(v8 + 72);
        int v10 = *(_DWORD *)(a1 + 88);
        int v11 = *(_DWORD *)(a1 + 84) + 1;
        *(_DWORD *)(a1 + 84) = v11;
        float v12 = (float)((float)*(unsigned int *)(a1 + 68) / *(float *)(a1 + 64)) * (float)(v11 - v10);
        if (v12 >= *(float *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 88) = v11;
          *(unsigned char *)(a1 + 80) = 0;
        }
        else if (v12 >= *(float *)(a1 + 76) && !*(unsigned char *)(a1 + 80))
        {
          *(unsigned char *)(a1 + 80) = 1;
          float v13 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v13 || (uint64_t v14 = *(void *)(a1 + 32), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
            sub_5CABC();
          }
          unint64_t v16 = v15;
          p_shared_weak_owners = &v15->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v15);
          block[0] = _NSConcreteStackBlock;
          block[1] = 1174405120;
          block[2] = sub_26699C;
          block[3] = &unk_628D60;
          block[4] = a1;
          block[5] = v14;
          uint64_t v36 = v16;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          uint64_t v37 = v8;
          int v38 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          dispatch_async(v9, block);
          if (v38) {
            sub_4636C(v38);
          }
          if (v36) {
            std::__shared_weak_count::__release_weak(v36);
          }
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      sub_4636C(v7);
    }
  }
  float v18 = *(float *)(a1 + 144);
  if (*(float *)(a1 + 148) == v18) {
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if (!v20 || *(void *)(a1 + 128) == *(void *)(a1 + 120)) {
    return 0;
  }
  *(float *)(a1 + 148) = v18;
  long long v21 = **(_DWORD ***)a2;
  int v22 = *(_DWORD **)(*(void *)a2 + 24);
  if (v20 >= 0x800) {
    uint64_t v23 = 256;
  }
  else {
    uint64_t v23 = (v20 >> 3);
  }
  v21[1] = 4 * v23;
  int v24 = (float *)(v21 + 2);
  bzero(v21 + 2, 0x400uLL);
  if (v23)
  {
    double v25 = *(double **)(a1 + 96);
    do
    {
      double v26 = *v25++;
      float v27 = v26;
      *v24++ = v27;
      --v23;
    }
    while (v23);
  }
  int v28 = *(_DWORD *)(a1 + 144);
  *int v22 = v28;
  _DWORD *v21 = v28;
  unint64_t v29 = *(void *)(a1 + 128) - *(void *)(a1 + 120);
  if (v29 >= 0x800) {
    uint64_t v30 = 256;
  }
  else {
    uint64_t v30 = (v29 >> 3);
  }
  v22[1] = 4 * v30;
  int v31 = (float *)(v22 + 2);
  bzero(v22 + 2, 0x400uLL);
  if (!v30) {
    return 2064;
  }
  uint64_t v32 = *(double **)(a1 + 120);
  uint64_t result = 2064;
  do
  {
    double v33 = *v32++;
    float v34 = v33;
    *v31++ = v34;
    --v30;
  }
  while (v30);
  return result;
}

void sub_266988(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_26699C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = a1[5];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 24);
  if (v6)
  {
    double v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      if (v5 && *(void *)(v2 + 16))
      {
        uint64_t v9 = a1[7];
        *(void *)(v2 + 104) = *(void *)(v2 + 96);
        *(void *)(v2 + 128) = *(void *)(v2 + 120);
        unsigned int v10 = *(_DWORD *)(v2 + 84);
        float v12 = *(float *)(v2 + 64);
        unsigned int v11 = *(_DWORD *)(v2 + 68);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 176))(v9, 3508);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 176))(v9, 3520, v2 + 120);
        *(float *)(v2 + 144) = (float)((float)v11 / v12) * (float)v10;
      }
      sub_4636C(v8);
    }
  }
  if (v4) {
    sub_4636C(v4);
  }
}

void sub_266B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10)
{
  if (a2)
  {
    if (a2 == 3)
    {
      unsigned int v11 = __cxa_begin_catch(exception_object);
      float v12 = (os_log_t *)sub_32A48(25);
      float v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
        LODWORD(a9) = 136315650;
        *(void *)((char *)&a9 + 4) = "AncFilterLoggerV3.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 172;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&a9, 0x1Cu);
      }
    }
    else
    {
      os_log_t v15 = (void **)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        unint64_t v16 = v15;
        BOOL v17 = (os_log_t *)sub_32A48(25);
        float v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v16 + 23) < 0) {
            unint64_t v16 = (void **)*v16;
          }
          LODWORD(a9) = 136315650;
          *(void *)((char *)&a9 + 4) = "AncFilterLoggerV3.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 173;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v16;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&a9, 0x1Cu);
        }
      }
      else
      {
        uint64_t v19 = (os_log_t *)sub_32A48(25);
        unint64_t v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315394;
          *(void *)((char *)&a9 + 4) = "AncFilterLoggerV3.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 174;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown.", (uint8_t *)&a9, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x266AB8);
  }
  _Unwind_Resume(exception_object);
}

void sub_266D40(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_4636C(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_266D90(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_266DC4(uint64_t result, float a2)
{
  *(float *)(result + 72) = a2;
  *(float *)(result + 76) = fmaxf(a2 + -0.1, 0.0);
  return result;
}

uint64_t sub_266DE0(uint64_t a1, int a2, float a3, float a4)
{
  *(float *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 68) = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)a1 + 64))(a1, a4);
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  return result;
}

BOOL sub_266E34(uint64_t a1)
{
  return *(void *)(a1 + 56) != 0;
}

void sub_266E44(uint64_t a1)
{
  if (sub_5CCA0(a1, 0x64u))
  {
    uint64_t v2 = *(FILE **)(a1 + 48);
    if (v2) {
      fclose(v2);
    }
    uint64_t v3 = *(FILE **)(a1 + 56);
    if (v3) {
      fclose(v3);
    }
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    atomic_store(0, (unsigned __int8 *)(a1 + 8));
  }
  else
  {
    uint64_t v4 = (os_log_t *)sub_32A48(25);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315906;
      double v7 = "AncFilterLoggerV3.cpp";
      __int16 v8 = 1024;
      int v9 = 130;
      __int16 v10 = 2080;
      unsigned int v11 = "CloseFile";
      __int16 v12 = 1024;
      int v13 = 100;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed to aquire lock after %u ms", (uint8_t *)&v6, 0x22u);
    }
  }
}

BOOL sub_266F5C(void *a1, const char **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (!a1[2]) {
    goto LABEL_14;
  }
  double v7 = *a2;
  if (a2[1] - *a2 != 48) {
    goto LABEL_14;
  }
  __int16 v8 = *a2;
  if (v7[23] < 0) {
    __int16 v8 = *(const char **)v7;
  }
  int v9 = v7 + 24;
  if (v7[47] < 0) {
    int v9 = *(const char **)v9;
  }
  if ((!a1[6] || !a1[7]) && (__int16 v10 = fopen(v8, "w"), (a1[6] = v10) != 0))
  {
    unsigned int v11 = fopen(v9, "w");
    a1[7] = v11;
    BOOL v12 = v11 != 0;
  }
  else
  {
LABEL_14:
    BOOL v12 = 0;
  }
  sub_4636C(v6);
  return v12;
}

void sub_267030(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_267044()
{
  return 1032;
}

uint64_t sub_26704C()
{
  return 1032;
}

void sub_267054(void *a1)
{
  sub_26708C(a1);

  operator delete();
}

void *sub_26708C(void *a1)
{
  *a1 = off_628D08;
  sub_266E44((uint64_t)a1);
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *a1 = off_633588;
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

__n128 sub_26712C(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  int v6 = (char *)operator new(0xB0uLL);
  double v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_628DA0;
  unint64_t v8 = (unint64_t)(v6 + 24);
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v6 + 120) = 0u;
  v6[32] = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((void *)v6 + 3) = off_628D08;
  *(void *)(v6 + 108) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  v6[104] = 0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *((void *)v6 + 21) = 0;
  if (!a3 || (int v9 = std::__shared_weak_count::lock(a3)) == 0 || !a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(exception, "ancManager expired");
  }
  if (*(_DWORD *)(a2 + 12) != 3)
  {
    uint64_t v14 = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(v14, "ancManager is not V3");
  }
  atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  __int16 v10 = (std::__shared_weak_count *)v7[2].__vftable;
  v7[1].__shared_weak_owners_ = a2;
  v7[2].__vftable = (std::__shared_weak_count_vtbl *)a3;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_4636C(v9);
  std::__shared_weak_count::__release_weak(a3);
  shared_weak_owners = (std::__shared_weak_count *)v7[2].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[2].__shared_owners_ = v8;
    v7[2].__shared_weak_owners_ = (uint64_t)v7;
    goto LABEL_13;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[2].__shared_owners_ = v8;
    v7[2].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_13:
    sub_4636C(v7);
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a1 = result;
  return result;
}

void sub_267338(_Unwind_Exception *a1)
{
  __cxa_free_exception(v5);
  sub_4636C(v4);
  unint64_t v8 = v1[6].__vftable;
  if (v8)
  {
    v1[6].__shared_owners_ = (uint64_t)v8;
    operator delete(v8);
  }
  int v9 = *v6;
  if (*v6)
  {
    v1[5].__shared_owners_ = (uint64_t)v9;
    operator delete(v9);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  v1[1].__vftable = v3;
  unsigned int v11 = (std::__shared_weak_count *)v1[2].__vftable;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_2673C8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2673EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_628DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_267440(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_628DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_267460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (os_log_t *)sub_32A48(19);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    sub_1E26F0(&__p, a2);
    uint64_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_Record_GenericConfig1.cpp";
    __int16 v28 = 1024;
    int v29 = 75;
    __int16 v30 = 2080;
    int v31 = v5;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Activating route: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  int v6 = *(uint64_t **)(*(void *)a2 + 24);
  uint64_t v23 = v6 + 2;
  sub_43F38(&v24, v6 + 2, "", 78);
  uint64_t v7 = v24;
  unsigned int v8 = *(_DWORD *)(v24 + 144);
  int v9 = (void *)sub_F820C();
  *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
  uint8_t buf[8] = 1;
  __int16 v10 = (os_unfair_lock_s *)sub_F832C(v9, (CFStringRef *)buf);
  sub_72924((uint64_t)buf);
  uint64_t v11 = *(void *)(v7 + 192);
  unsigned int v12 = *(_DWORD *)(a2 + 12);
  if ((v12 == 1986556788 || v12 == 1987208039 || v12 == 1987211117) && v10 && v8 == 1886216809)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = dword_64E7E8;
    strcpy(buf, "meoabolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    sub_4581B0((uint64_t)v10, (uint64_t)buf, 4, (uint64_t)&__p);
    LODWORD(__p.__r_.__value_.__l.__data_) = 1;
    strcpy(buf, "maoabolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    sub_4581B0((uint64_t)v10, (uint64_t)buf, 4, (uint64_t)&__p);
    sub_1F4E88((uint64_t)v10);
  }
  else
  {
    __int16 v10 = *(os_unfair_lock_s **)(v7 + 192);
    if (!v11)
    {
      float v18 = (os_log_t *)sub_32A48(13);
      uint64_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v7 + 144))(v26, v7);
        unint64_t v20 = (std::string *)v26[0];
        sub_2417C(&__p, *(_DWORD *)(v7 + 144));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Record_GenericConfig1.cpp";
        __int16 v28 = 1024;
        int v29 = 100;
        __int16 v30 = 2112;
        int v31 = v20;
        __int16 v32 = 2080;
        double v33 = p_p;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_72924((uint64_t)v26);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 2003329396;
    }
  }
  sub_1EE408(v10, 0, v12, v6[9]);
  if (*(_DWORD *)(v7 + 264) == 2004367664) {
    sub_1F2870(v12, (uint64_t)v10);
  }
  sub_85F24();
  if (byte_64A0E0)
  {
    BOOL v13 = (unsigned __int16)sub_376E5C(*(void *)(a2 + 104), v12, v8) > 0x100u;
    sub_1F28E8(v13, v11);
  }
  sub_1EE03C((uint64_t)buf, (uint64_t)v10, v7, a2, v6[9], v12);
  sub_1F3044((unsigned int **)buf, v23, v10);
  memset(v26, 0, 16);
  uint64_t v14 = (std::__shared_weak_count *)v6[3];
  if (v14)
  {
    os_log_t v15 = std::__shared_weak_count::lock(v14);
    unint64_t v16 = v15;
    if (v15)
    {
      uint64_t v17 = *v23;
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v26[0] = v17;
      v26[1] = (uint64_t)v15;
      sub_4636C(v15);
    }
    else
    {
      memset(v26, 0, 16);
    }
  }
  else
  {
    unint64_t v16 = 0;
  }
  sub_1F4188((uint64_t)&__p, (uint64_t)buf, v26);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_1F2704(*(_DWORD *)(a2 + 12));
  operator new();
}

void sub_267E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *__p,uint64_t a35)
{
  sub_72924(v35 - 176);
  if (a33) {
    sub_4636C(a33);
  }
  _Unwind_Resume(a1);
}

void sub_268020()
{
}

uint64_t sub_268048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(a1 + 768) & 0xFFFFFFFELL) != 2)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    float v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 696;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 776) + 88))(*(void *)(a1 + 776), 0) <= *(_DWORD *)(*(void *)(a1 + 808) + 4))
  {
    unint64_t v20 = (os_log_t *)sub_32A48(13);
    long long v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 697;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Precondition failure.");
  }
  uint64_t v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 776) + 96))(*(void *)(a1 + 776), 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 112))(v8, *(void *)(a1 + 832) + 40);
  *(double *)(*(void *)(a1 + 832) + 40) = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
  double v9 = sub_4FF1C(a1, 0);
  long long v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a4;
  *(_OWORD *)&uint8_t buf[16] = v10;
  *(void *)float v27 = *(void *)(a4 + 32);
  uint64_t v11 = *(void *)(a1 + 832);
  *(_OWORD *)&v27[8] = *(_OWORD *)(v11 + 40);
  *(_OWORD *)&v27[24] = *(_OWORD *)(v11 + 56);
  *(void *)&v27[40] = *(void *)(v11 + 72);
  unsigned int v12 = operator new(0x50uLL);
  uint64_t v24 = v12 + 5;
  double v25 = v12 + 5;
  long long v13 = *(_OWORD *)&v27[16];
  v12[2] = *(_OWORD *)v27;
  uint64_t v12[3] = v13;
  v12[4] = *(_OWORD *)&v27[32];
  long long v14 = *(_OWORD *)&buf[16];
  *unsigned int v12 = *(_OWORD *)buf;
  v12[1] = v14;
  std::string __p = v12;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a2 + 136))(a2, a3, &__p, a4, v9);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_268394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_2683CC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, double *a5, _DWORD *a6, double *a7, uint64_t a8)
{
  if (!*(void *)(a1 + 456))
  {
    uint64_t v45 = (os_log_t *)sub_32A48(13);
    uint64_t v46 = *v45;
    if (*v45)
    {
      if (os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 376;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The client IO proc must exist for IO to run.\"", buf, 0x12u);
      }
    }
  }
  uint64_t v176 = a1 + 688;
  long long v14 = *(unsigned char **)(a1 + 640);
  uint64_t v15 = *(unsigned char **)(a1 + 648);
  uint64_t v168 = a3;
  uint64_t v169 = a8;
  unint64_t v16 = v14;
  if (v14 != v15)
  {
    while (*v16 != 1)
    {
      if (++v16 == v15)
      {
        unint64_t v16 = *(unsigned char **)(a1 + 648);
        break;
      }
    }
  }
  unsigned int v17 = v16 - v14;
  if (v15 == v16) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  if (*(void *)(a1 + 696) != *(void *)(a1 + 688) && *a4 && *(void *)&a4[4 * v18 + 4])
  {
    uint64_t v19 = sub_4CD70(v176, 0, 0);
    uint64_t v20 = *(void *)(v19 + 192);
    BOOL v21 = (*(unsigned char *)(v20 + 448) || *(void *)(v20 + 584) || *(void *)(v20 + 672))
       && *(_DWORD *)(v19 + 8) == 1819304813;
    int v22 = 1;
    uint64_t v23 = (a4[4 * v18 + 3] / *(_DWORD *)(sub_4CD70(v176, 0, 0) + 64));
  }
  else
  {
    BOOL v21 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
  }
  unint64_t v24 = *(void *)(a1 + 664);
  double v25 = *(unsigned char **)(a1 + 672);
  double v26 = (unsigned char *)v24;
  if ((unsigned char *)v24 != v25)
  {
    while (*v26 != 1)
    {
      if (++v26 == v25)
      {
        double v26 = *(unsigned char **)(a1 + 672);
        break;
      }
    }
  }
  LODWORD(v24) = v26 - v24;
  if (v25 == v26) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v24;
  }
  uint64_t v171 = a4;
  unint64_t v172 = v24;
  if (*(void *)(a1 + 720) != *(void *)(a1 + 712) && *a6 && *(void *)&a6[4 * v24 + 4])
  {
    uint64_t v27 = sub_4CD70(v176, 1, 0);
    uint64_t v28 = *(void *)(v27 + 192);
    BOOL v29 = (*(unsigned char *)(v28 + 448) || *(void *)(v28 + 584) || *(void *)(v28 + 672))
       && *(_DWORD *)(v27 + 8) == 1819304813;
    int v175 = 1;
    UInt32 v173 = a6[4 * v172 + 3] / *(_DWORD *)(sub_4CD70(v176, 1, 0) + 64);
  }
  else
  {
    BOOL v29 = 0;
    int v175 = 0;
    UInt32 v173 = 0;
  }
  if (*(unsigned char *)(a1 + 104))
  {
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    *(unsigned char *)(a1 + 104) = 0;
  }
  __int16 v30 = 0;
  inInputData = 0;
  outOutputData = 0;
  if (v22)
  {
    int v31 = (_DWORD *)sub_4CD70(v176, 0, 0);
    __int16 v32 = v31;
    __int16 v30 = *(unsigned int **)(a1 + 736);
    uint64_t v33 = *(void *)(a1 + 688);
    float v34 = *(AudioBufferList **)(v33 + 160);
    uint64_t v35 = *(AudioBufferList **)(v33 + 176);
    inInputData = v35;
    outOutputData = v34;
    if (v21)
    {
      uint64_t v36 = *v30;
      if (v36)
      {
        int v37 = v31[6] * v23;
        int v38 = v30 + 3;
        do
        {
          *int v38 = v37;
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      uint64_t mNumberBuffers = v34->mNumberBuffers;
      if (mNumberBuffers)
      {
        UInt32 v40 = v31[26] * v23;
        p_UInt32 mDataByteSize = &v34->mBuffers[0].mDataByteSize;
        do
        {
          UInt32 *p_mDataByteSize = v40;
          p_mDataByteSize += 4;
          --mNumberBuffers;
        }
        while (mNumberBuffers);
      }
      uint64_t v42 = v35->mNumberBuffers;
      if (v42)
      {
        UInt32 v43 = v31[36] * v23;
        uint64_t v44 = &v35->mBuffers[0].mDataByteSize;
        do
        {
          UInt32 *v44 = v43;
          v44 += 4;
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      char v47 = &a4[4 * v18];
      *((void *)v30 + 2) = *((void *)v47 + 2);
      v30[3] = v47[3];
    }
    if (v31[2] == 1819304813)
    {
      *(void *)AudioObjectPropertyAddress buf = 1;
      uint64_t v48 = &a4[4 * v18];
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(v48 + 2);
      uint64_t v49 = *(void *)(a1 + 88);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_4E7990;
      if (v49) {
        sub_3FACA0(v49, &__p, (long long *)(v48 + 2), v23);
      }
      sub_269720(a1 + 144, v32[50], (uint64_t)buf, v23, (uint64_t)a5);
    }
  }
  if (v21)
  {
    uint64_t v50 = sub_4CD70(v176, 0, 0);
    uint64_t v51 = *(OpaqueAudioConverter ***)(v50 + 192);
    *(void *)AudioObjectPropertyAddress buf = 1;
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&a4[4 * v18 + 2];
    sub_5586C(v51[73], v23, (AudioBufferList *)buf, outOutputData);
    if ((*(void *)(a1 + 768) & 0xFFFFFFFELL) == 2)
    {
      if (*(void *)(a1 + 768) == 2) {
        int v52 = 0;
      }
      else {
        int v52 = *(_DWORD *)(*(void *)(a1 + 808) + 4);
      }
      int v53 = sub_287DA0(*(unsigned char **)(a1 + 640), *(unsigned char **)(a1 + 648), v52);
      __p.__r_.__value_.__r.__words[0] = 1;
      long long v54 = &a4[4 * v53];
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)(v54 + 2);
      v181[0] = outOutputData;
      v181[1] = (AudioBufferList *)&__p;
      (*((void (**)(OpaqueAudioConverter **, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v51
       + 18))(v51, a5, v23, 2, v181, 1, &inInputData);
      uint64_t v55 = *(void *)(a1 + 832);
      if (*(_DWORD *)(v55 + 48) == 1819304813)
      {
        unsigned int v56 = *(_DWORD *)(v55 + 64);
        if (!v56)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v182 = 136315394;
            *(void *)&v182[4] = "CAStreamBasicDescription.h";
            LOWORD(v183[0]) = 1024;
            *(_DWORD *)((char *)v183 + 2) = 273;
            _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  bytesPerFrame must be > 0 in BytesToFrames", v182, 0x12u);
          }
          __break(1u);
          return;
        }
        unsigned int v57 = v171[4 * v53 + 3];
        uint64_t v58 = *(void *)(a1 + 88);
        int v59 = *(_DWORD *)(*(void *)(a1 + 808) + 4);
        *(void *)v182 = 0x100000000;
        *(_DWORD *)&v182[8] = 0;
        v183[0] = v59;
        if (v58) {
          sub_3FACA0(v58, v182, (long long *)(v54 + 2), v57 / v56);
        }
      }
    }
    else
    {
      (*((void (**)(OpaqueAudioConverter **, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v51
       + 18))(v51, a5, v23, 1, &outOutputData, 1, &inInputData);
    }
    sub_5586C(v51[84], v23, inInputData, (AudioBufferList *)v30);
    uint64_t v60 = *(void *)(a1 + 88);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_4E7A30;
    if (v60) {
      sub_3FAE68(v60, &__p, (uint64_t)v30, v23, (uint64_t)*a5);
    }
    sub_269720(a1 + 144, *(unsigned int *)(v50 + 204), (uint64_t)v30, v23, (uint64_t)a5);
  }
  *(void *)v182 = 0;
  v181[0] = 0;
  if (v175)
  {
    uint64_t v61 = *(AudioBufferList **)(a1 + 752);
    uint64_t v62 = *(void *)(a1 + 712);
    uint64_t v63 = *(AudioBufferList **)(v62 + 160);
    *(void *)v182 = v63;
    uint64_t v64 = *(AudioBufferList **)(v62 + 176);
    v181[0] = v64;
    if (v29)
    {
      uint64_t v65 = sub_4CD70(v176, 1, 0);
      uint64_t v66 = v61->mNumberBuffers;
      if (v66)
      {
        int v67 = *(_DWORD *)(v65 + 24) * v173;
        long long v68 = &v61->mBuffers[0].mDataByteSize;
        do
        {
          _DWORD *v68 = v67;
          v68 += 4;
          --v66;
        }
        while (v66);
      }
      uint64_t v69 = sub_4CD70(v176, 1, 0);
      uint64_t v70 = v63->mNumberBuffers;
      if (v70)
      {
        int v71 = *(_DWORD *)(v69 + 104) * v173;
        uint64_t v72 = &v63->mBuffers[0].mDataByteSize;
        do
        {
          _DWORD *v72 = v71;
          v72 += 4;
          --v70;
        }
        while (v70);
      }
      uint64_t v73 = sub_4CD70(v176, 1, 0);
      uint64_t v74 = v64->mNumberBuffers;
      if (v74)
      {
        int v75 = *(_DWORD *)(v73 + 104) * v173;
        uint64_t v76 = &v64->mBuffers[0].mDataByteSize;
        do
        {
          *uint64_t v76 = v75;
          v76 += 4;
          --v74;
        }
        while (v74);
      }
      UInt32 mDataByteSize = v61->mBuffers[0].mDataByteSize;
    }
    else
    {
      uint64_t v78 = &a6[4 * v172];
      v61->mBuffers[0].mData = (void *)*((void *)v78 + 2);
      UInt32 mDataByteSize = v78[3];
      v61->mBuffers[0].UInt32 mDataByteSize = mDataByteSize;
    }
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v61 = 0;
    UInt32 mDataByteSize = 0;
  }
  if (*(unsigned char *)(a1 + 364)) {
    BOOL v79 = v30 == 0;
  }
  else {
    BOOL v79 = 1;
  }
  if (!v79 && *v30)
  {
    unint64_t v80 = 0;
    uint64_t v81 = (void **)(v30 + 4);
    do
    {
      bzero(*v81, *((unsigned int *)v81 - 1));
      ++v80;
      v81 += 2;
    }
    while (v80 < *v30);
  }
  (*(void (**)(uint64_t, uint64_t, unsigned int *, double *, AudioBufferList *, double *, void))(a1 + 456))(v169, v168, v30, a5, v61, a7, *(void *)(a1 + 464));
  if (v29)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 448))(a1))
    {
      uint64_t v82 = sub_4CD70(v176, 1, 0);
      uint64_t v83 = *(void *)(v82 + 192);
      if (v83)
      {
        char v84 = (*(uint64_t (**)(void))(*(void *)v83 + 80))(*(void *)(v82 + 192));
        char v170 = 0;
      }
      else
      {
        char v84 = 0;
        char v170 = 1;
      }
      int v85 = 1;
      goto LABEL_98;
    }
    bzero(*(void **)&a6[4 * v172 + 4], a6[4 * v172 + 3]);
  }
  uint64_t v83 = 0;
  int v85 = 0;
  char v84 = 0;
  char v170 = 1;
LABEL_98:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 448))(a1))
  {
    if (*(unsigned char *)(a1 + 637)) {
      int v86 = 3;
    }
    else {
      int v86 = 2;
    }
    if (*(unsigned char *)(a1 + 636)) {
      int v87 = v86;
    }
    else {
      int v87 = *(unsigned __int8 *)(a1 + 637);
    }
  }
  else
  {
    int v87 = 0;
  }
  if ((v175 & (*(unsigned int (**)(uint64_t))(*(void *)a1 + 448))(a1)) != 1
    || v61->mBuffers[0].mDataByteSize)
  {
    *(_DWORD *)(a1 + 632) = 0;
    goto LABEL_109;
  }
  if (v84)
  {
    if ((v85 & 1) == 0) {
      goto LABEL_166;
    }
  }
  else
  {
    unsigned int v108 = *(_DWORD *)(a1 + 632);
    if (v108 >> 6 >= 0x177)
    {
      if (v108 <= v173 + 24000)
      {
        if ((v170 & 1) == 0)
        {
          sub_6330(v83);
          unsigned int v108 = *(_DWORD *)(a1 + 632);
        }
        *(_DWORD *)(a1 + 632) = v108 + 2 * v173;
      }
LABEL_166:
      int v85 = 0;
      if ((*(unsigned char *)(a1 + 80) & 4) == 0) {
        goto LABEL_174;
      }
      goto LABEL_167;
    }
    *(_DWORD *)(a1 + 632) = v108 + v173;
    if ((v85 & 1) == 0) {
      goto LABEL_166;
    }
  }
  int v85 = 1;
LABEL_167:
  unint64_t v111 = v61->mNumberBuffers;
  if (v111)
  {
    for (uint64_t i = 0; i != v111; ++i)
      v61->mBuffers[i].UInt32 mDataByteSize = mDataByteSize;
    unint64_t v113 = 0;
    p_mData = &v61->mBuffers[0].mData;
    do
    {
      if (*p_mData)
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        unint64_t v111 = v61->mNumberBuffers;
      }
      ++v113;
      p_mData += 2;
    }
    while (v113 < v111);
  }
LABEL_174:
  if ((v85 & 1) == 0 && v87 != 3)
  {
    bzero(*(void **)&a6[4 * v172 + 4], a6[4 * v172 + 3]);
    LOBYTE(v85) = 0;
    goto LABEL_110;
  }
LABEL_109:
  if ((v175 & 1) == 0)
  {
    if (!v85) {
      return;
    }
    goto LABEL_118;
  }
LABEL_110:
  uint64_t v88 = sub_4CD70(v176, 1, 0);
  if (*(_DWORD *)(v88 + 8) == 1819304813)
  {
    uint64_t v89 = *(void *)(a1 + 88);
    *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7A40;
    if (v89) {
      sub_3FAE68(v89, buf, (uint64_t)v61, v173, (uint64_t)*a7);
    }
    sub_269720(a1 + 144, *(unsigned int *)(v88 + 200), (uint64_t)v61, v173, (uint64_t)a7);
  }
  if ((v85 & 1) == 0)
  {
    __int16 v90 = (double *)sub_4CD70(v176, 1, 0);
    int v91 = 0;
    if (!v87) {
      goto LABEL_258;
    }
LABEL_128:
    if (v87 - 1 >= 2)
    {
      if (v87 == 3)
      {
        unint64_t v105 = v61->mNumberBuffers;
        if (v105)
        {
          unint64_t v106 = 0;
          uint64_t v107 = &v61->mBuffers[0].mData;
          do
          {
            if (*v107)
            {
              bzero(*v107, *((unsigned int *)v107 - 1));
              unint64_t v105 = v61->mNumberBuffers;
            }
            ++v106;
            v107 += 2;
          }
          while (v106 < v105);
        }
      }
      else
      {
        CFNumberRef v109 = (os_log_t *)sub_32A48(13);
        std::__fs::filesystem::path::__string_view v110 = *v109;
        if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 949;
          _os_log_impl(&def_1E50E8, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected policy mute action\"", buf, 0x12u);
        }
      }
    }
    else
    {
      int v180 = 0;
      BOOL v179 = 0;
      if (!sub_5C2E0(v90, &v180, &v179))
      {
LABEL_200:
        *(unsigned char *)(a1 + 637) = v87 != 1;
        if (v87 != 1)
        {
          unint64_t v128 = v61->mNumberBuffers;
          if (v128)
          {
            unint64_t v129 = 0;
            unint64_t v130 = &v61->mBuffers[0].mData;
            do
            {
              if (*v130)
              {
                bzero(*v130, *((unsigned int *)v130 - 1));
                unint64_t v128 = v61->mNumberBuffers;
              }
              ++v129;
              v130 += 2;
            }
            while (v129 < v128);
          }
        }
        goto LABEL_258;
      }
      if (v180 != 1)
      {
        if (v180 == 3)
        {
          int v124 = *((_DWORD *)v90 + 7);
          if (v179 || v124 == 1)
          {
            mData = (int *)v61->mBuffers[0].mData;
            unsigned int v132 = (*v90 * 0.03);
            if (v132 >= v173) {
              unsigned int v133 = v173;
            }
            else {
              unsigned int v133 = (*v90 * 0.03);
            }
            signed int v134 = 0x1000000 / v133;
            int v135 = *(unsigned __int8 *)(a1 + 637);
            unsigned int v136 = (*(unsigned char *)(a1 + 637) == 0) << 24;
            if (!*(unsigned char *)(a1 + 637)) {
              signed int v134 = -v134;
            }
            if (v124 == 1)
            {
              unint64_t v157 = v134 + (unint64_t)v136;
              unsigned int v158 = v133;
              v159 = mData;
              do
              {
                int *v159 = (v157 * *v159) >> 24;
                ++v159;
                v157 += v134;
                --v158;
              }
              while (v158);
            }
            else if (v124 == 2)
            {
              unint64_t v137 = v134 + (unint64_t)v136;
              unsigned int v138 = v133;
              uint64_t v139 = mData;
              do
              {
                unint64_t v140 = (v137 * v139[1]) >> 24;
                int *v139 = (v137 * *v139) >> 24;
                v139[1] = v140;
                v139 += 2;
                v137 += v134;
                --v138;
              }
              while (v138);
            }
            else
            {
              int v160 = (os_log_t *)sub_32A48(13);
              std::string::size_type v161 = *v160;
              if (*v160 && os_log_type_enabled(*v160, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1294;
                _os_log_impl(&def_1E50E8, v161, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected number of channels\"", buf, 0x12u);
              }
            }
            if (!v135)
            {
              if (v173 > v132)
              {
                size_t v146 = 4 * v124 * (v173 - v133);
                int v147 = (__int16 *)&mData[v133 * v124];
                goto LABEL_255;
              }
LABEL_256:
              char v162 = 1;
              goto LABEL_257;
            }
LABEL_252:
            char v162 = 0;
LABEL_257:
            *(unsigned char *)(a1 + 637) = v162;
            goto LABEL_258;
          }
        }
        else if (v180 == 2)
        {
          int v95 = *((_DWORD *)v90 + 7);
          if (v179 || v95 == 1)
          {
            int v96 = (__int16 *)v61->mBuffers[0].mData;
            unsigned int v97 = (*v90 * 0.03);
            if (v97 >= v173) {
              unsigned int v98 = v173;
            }
            else {
              unsigned int v98 = (*v90 * 0.03);
            }
            LODWORD(v99) = 0x8000 / v98;
            int v100 = *(unsigned __int8 *)(a1 + 637);
            uint64_t v101 = (*(unsigned char *)(a1 + 637) == 0) << 15;
            if (*(unsigned char *)(a1 + 637)) {
              uint64_t v99 = v99;
            }
            else {
              uint64_t v99 = -(int)v99;
            }
            if (v95 == 1)
            {
              uint64_t v141 = v101 + v99;
              unsigned int v142 = v98;
              uint64_t v143 = v96;
              do
              {
                *uint64_t v143 = (v141 * *v143) >> 15;
                ++v143;
                v141 += v99;
                --v142;
              }
              while (v142);
            }
            else if (v95 == 2)
            {
              uint64_t v102 = v101 + v99;
              unsigned int v103 = v98;
              int v104 = v96;
              do
              {
                *int v104 = (v102 * *v104) >> 15;
                v104[1] = (v102 * v104[1]) >> 15;
                v102 += v99;
                v104 += 2;
                --v103;
              }
              while (v103);
            }
            else
            {
              v144 = (os_log_t *)sub_32A48(13);
              uint64_t v145 = *v144;
              if (*v144 && os_log_type_enabled(*v144, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1294;
                _os_log_impl(&def_1E50E8, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected number of channels\"", buf, 0x12u);
              }
            }
            if (!v100)
            {
              if (v173 > v97)
              {
                size_t v146 = 2 * v95 * (v173 - v98);
                int v147 = &v96[v98 * v95];
LABEL_255:
                bzero(v147, v146);
                goto LABEL_256;
              }
              goto LABEL_256;
            }
            goto LABEL_252;
          }
        }
        goto LABEL_193;
      }
      if (v179 && *((_DWORD *)v90 + 7) != 1)
      {
LABEL_193:
        CFTypeID v125 = (os_log_t *)sub_32A48(16);
        unsigned __int16 v126 = *v125;
        if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_DEFAULT))
        {
          sub_259A4(&__p, (uint64_t)v90);
          CFArrayRef v127 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &__p
               : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 923;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v127;
          _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Policy mute ramping unsupported for given stream format: %s", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_200;
      }
      unsigned int v115 = (*v90 * 0.03);
      if (v115 >= v173) {
        uint64_t v116 = v173;
      }
      else {
        uint64_t v116 = v115;
      }
      float v117 = 1.0;
      float v118 = 1.0 / (float)v116;
      int v119 = *(unsigned __int8 *)(a1 + 637);
      if (*(unsigned char *)(a1 + 637)) {
        float v117 = 0.0;
      }
      else {
        float v118 = -v118;
      }
      uint64_t v120 = v61->mNumberBuffers;
      if (v120 == 1)
      {
        if (v116)
        {
          uint64_t v148 = (float *)v61->mBuffers[0].mData;
          uint64_t v149 = v116;
          do
          {
            float v117 = v118 + v117;
            *uint64_t v148 = v117 * *v148;
            ++v148;
            --v149;
          }
          while (v149);
        }
      }
      else if (v120 == 2)
      {
        if (v116)
        {
          v121 = (float *)v61->mBuffers[0].mData;
          CFTypeID v122 = *(float **)&v61[1].mBuffers[0].mNumberChannels;
          uint64_t v123 = v116;
          do
          {
            float v117 = v118 + v117;
            float *v121 = v117 * *v121;
            ++v121;
            float *v122 = v117 * *v122;
            ++v122;
            --v123;
          }
          while (v123);
        }
      }
      else if (v116)
      {
        for (uint64_t j = 0; j != v116; ++j)
        {
          float v117 = v118 + v117;
          char v151 = &v61->mBuffers[0].mData;
          uint64_t v152 = v120;
          if (v120)
          {
            do
            {
              uint64_t v153 = (float *)*v151;
              v151 += 2;
              v153[j] = v117 * v153[j];
              --v152;
            }
            while (v152);
          }
        }
      }
      if (v119)
      {
        char v154 = 0;
      }
      else
      {
        char v154 = 1;
        if (v173 > v115 && v120)
        {
          unint64_t v155 = 0;
          uint64_t v156 = 16;
          do
          {
            bzero((void *)(*(void *)((char *)&v61->mNumberBuffers + v156) + 4 * v116), 4 * (v173 - v116));
            ++v155;
            v156 += 16;
          }
          while (v155 < v61->mNumberBuffers);
          char v154 = 1;
        }
      }
      *(unsigned char *)(a1 + 637) = v154;
    }
LABEL_258:
    if (!v91)
    {
LABEL_262:
      if (*(_DWORD *)(sub_4CD70(v176, 1, 0) + 8) == 1819304813)
      {
        uint64_t v164 = *(void *)(a1 + 88);
        *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7A50;
        if (v164) {
          sub_3FACA0(v164, buf, (long long *)&a6[4 * v172 + 2], v173);
        }
      }
      char v165 = v175 ^ 1;
      if (!*(unsigned char *)(a1 + 364)) {
        char v165 = 1;
      }
      if ((v165 & 1) == 0 && *a6)
      {
        unint64_t v166 = 0;
        std::string::size_type v167 = (void **)(a6 + 4);
        do
        {
          bzero(*v167, *((unsigned int *)v167 - 1));
          ++v166;
          v167 += 2;
        }
        while (v166 < *a6);
      }
      return;
    }
    goto LABEL_259;
  }
LABEL_118:
  sub_5586C(*(OpaqueAudioConverter **)(v83 + 584), v173, v61, v63);
  unint64_t v92 = *(void *)(a1 + 768);
  int v93 = sub_23AC0() ^ 1;
  if (!HIDWORD(v92)) {
    int v93 = 1;
  }
  if (v93 == 1 && (v92 & 0xFFFFFFFD) == 1)
  {
    int v94 = sub_287DA0(*(unsigned char **)(a1 + 640), *(unsigned char **)(a1 + 648), 0);
    *(void *)AudioObjectPropertyAddress buf = 1;
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&v171[4 * v94 + 2];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)buf;
    (*(void (**)(uint64_t, double *, void, uint64_t, std::string *, uint64_t, AudioBufferList **))(*(void *)v83 + 144))(v83, a7, v173, 2, &__p, 1, v181);
  }
  else
  {
    (*(void (**)(uint64_t, double *, void, uint64_t, unsigned char *, uint64_t, AudioBufferList **))(*(void *)v83 + 144))(v83, a7, v173, 1, v182, 1, v181);
  }
  if (*(_DWORD *)(a1 + 268) != 1987277417) {
    (*(void (**)(uint64_t, double *))(*(void *)v83 + 152))(v83, a7);
  }
  sub_1B8D38(*(void *)(v83 + 376), (uint64_t)a7);
  if (v175)
  {
    uint64_t v61 = v181[0];
    __int16 v90 = (double *)(sub_4CD70(v176, 1, 0) + 120);
    int v91 = 1;
    if (!v87) {
      goto LABEL_258;
    }
    goto LABEL_128;
  }
LABEL_259:
  *(void *)AudioObjectPropertyAddress buf = 1;
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&a6[4 * v172 + 2];
  uint64_t v163 = sub_4CD70(v176, 1, 0);
  if ((v170 & 1) == 0) {
    sub_5586C(*(OpaqueAudioConverter **)(v83 + 672), v173, v181[0], (AudioBufferList *)buf);
  }
  sub_269720(a1 + 144, *(unsigned int *)(v163 + 204), (uint64_t)buf, v173, (uint64_t)a7);
  if (v175) {
    goto LABEL_262;
  }
}

void sub_269720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    int v10 = *(unsigned __int8 *)(a1 + 32);
    if (qword_65D920 != -1) {
      dispatch_once(&qword_65D920, &stru_6290A0);
    }
    if (off_65D958)
    {
      uint64_t v11 = (void (*)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t))off_65D958;
      v11(v9, a2, v10 != 0, a3, a4, a5);
    }
  }
}

void sub_2697E0(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    off_65D928 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorCreate");
    off_65D930 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorInitialize");
    off_65D938 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorDispose");
    qword_65D940 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_65D948 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_65D950 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_65D958 = dlsym(v1, "AudioIssueDetectorAnalyzeBuffer");
    off_65D960 = (uint64_t (*)(void, void))dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_65D968 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_65D970 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_65D978 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_65D980 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_65D988 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    uint64_t v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3)
    {
      v3();
    }
  }
}

void sub_2699A4(void *a1)
{
  sub_2699DC(a1);

  operator delete();
}

uint64_t sub_2699DC(void *a1)
{
  *a1 = off_628E10;
  uint64_t v2 = (void *)a1[104];
  if (v2)
  {
    a1[105] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[101];
  if (v3)
  {
    a1[102] = v3;
    operator delete(v3);
  }
  sub_8108(a1 + 98);

  return sub_2876BC((uint64_t)a1);
}

void *sub_269A58(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, long long *a6, void **a7, uint64_t a8, uint64_t a9, long long *a10)
{
  if (a3)
  {
    sub_119F84(v25, a3);
    if (a4)
    {
LABEL_3:
      sub_119F84(v24, a4);
      goto LABEL_6;
    }
  }
  else
  {
    v25[0] = v25;
    v25[1] = v25;
    v25[2] = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  v24[0] = v24;
  v24[1] = v24;
  unint64_t v24[2] = 0;
LABEL_6:
  sub_269F30((uint64_t *)__p, a3, a4, a8);
  uint64_t v18 = (os_unfair_lock_s *)sub_329FA4(a2);
  sub_2860EC(a1, a2, (uint64_t)v25, (uint64_t)v24, (uint64_t)__p, a5, a6, 1, a7, v18, a9, a10);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  sub_45F50(v24);
  sub_45F50(v25);
  *a1 = off_628E10;
  a1[96] = a8;
  if (!a4)
  {
    uint64_t v19 = 0;
    a1[97] = 0;
    uint64_t v20 = a1 + 98;
    BOOL v21 = a8 == 0;
LABEL_13:
    a1[98] = a1 + 98;
    a1[99] = v20;
    a1[100] = 0;
    goto LABEL_14;
  }
  uint64_t v19 = *a4;
  a1[97] = *a4;
  uint64_t v20 = a1 + 98;
  if (!a8)
  {
    BOOL v21 = 1;
    goto LABEL_13;
  }
  sub_26AB84(a1 + 98, a4, a8);
  BOOL v21 = 0;
  uint64_t v19 = a1[97];
LABEL_14:
  if (!v19 || v21)
  {
    a1[101] = 0;
    a1[102] = 0;
    a1[103] = 0;
  }
  else
  {
    sub_26AF44(a1 + 101, v19);
  }
  sub_26AFF0(a1 + 104);
  return a1;
}

void sub_269C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_2876BC(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_269C7C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, int *a5, long long *a6, uint64_t a7)
{
  sub_28742C(a1);
  uint64_t v22 = 0;
  if (a2) {
    sub_3207CC((uint64_t)a1, a5[4], a6, 0, 0, a2, a4);
  }
  uint64_t v21 = 0;
  if (a3)
  {
    if (a5[6]) {
      int v14 = a5[5];
    }
    else {
      int v14 = a5[4];
    }
    if (*(unsigned char *)(a7 + 16)) {
      BOOL v15 = a5[6] == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      unint64_t v16 = a6;
    }
    else {
      unint64_t v16 = (long long *)a7;
    }
    long long v19 = *v16;
    sub_3207CC((uint64_t)a1, v14, &v19, 1, 0, a3, a4);
  }
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  memset(v18, 0, sizeof(v18));
  sub_28776C(a1, (uint64_t **)&v19, (uint64_t **)v18);
  uint64_t v23 = v18;
  sub_638B4((void ***)&v23);
  v18[0] = (void **)&v19;
  sub_638B4(v18);
  return (*(uint64_t (**)(uint64_t *))(*a1 + 600))(a1);
}

void sub_269EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void **);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  long long v13 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  sub_4636C(v5);
  va_copy((va_list)v8, va1);
  sub_638B4((void ***)va);
  if (v4)
  {
    if (v13) {
      sub_4636C(v13);
    }
  }
  sub_72E94((void **)va2);
  sub_72E94((void **)(v6 - 80));
  _Unwind_Resume(a1);
}

void sub_269F30(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (!a4)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (!a2)
  {
    uint64_t v8 = 0;
    if (a3) {
      goto LABEL_4;
    }
LABEL_26:
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v66 = "AggregateDevice_Simple.cpp";
      __int16 v67 = 1024;
      int v68 = 90;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v8 = *a2;
  if (!a3) {
    goto LABEL_26;
  }
LABEL_4:
  uint64_t v9 = *a3;
  if (v8 && v9 && v8 == v9)
  {
    if (!a2)
    {
      uint64_t v44 = (os_log_t *)sub_32A48(13);
      uint64_t v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v66 = "AggregateDevice_Simple.cpp";
        __int16 v67 = 1024;
        int v68 = 57;
        _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      uint64_t v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v46, "Precondition failure.");
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 88))(*a2, 0);
    if (v10)
    {
      uint64_t v11 = operator new(1uLL);
      *uint64_t v11 = 1;
      *a1 = (uint64_t)v11;
      a1[1] = (uint64_t)(v11 + 1);
      a1[2] = (uint64_t)(v11 + 1);
      buf[0] = 0;
      sub_26B0C4((uint64_t)a1, v11 + 1, (v10 - 1), buf);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 312))(*a2);
      uint64_t v14 = *a1;
      uint64_t v13 = a1[1];
      if (a4 == 2 && (v12 & 0xFF00000000) != 0)
      {
        if (v13 - v14 != v12 + 1)
        {
          uint64_t v49 = (os_log_t *)sub_32A48(13);
          uint64_t v50 = *v49;
          if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v66 = "AggregateDevice_Simple.cpp";
            __int16 v67 = 1024;
            int v68 = 74;
            _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          uint64_t v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v51, "Precondition failure.");
        }
        *(unsigned char *)(v14 + v12) = 2;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v24 = v13 - v14;
    if (v13 - v14 != v10)
    {
      double v25 = (os_log_t *)sub_32A48(16);
      double v26 = *v25;
      if (*v25)
      {
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 81;
          __int16 v69 = 2048;
          uint64_t v70 = v24;
          __int16 v71 = 1024;
          int v72 = v10;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Input stream usage mask size (%lu) doesn't match input stream count (%u)", buf, 0x22u);
        }
      }
    }
    return;
  }
  if (!v9)
  {
    uint64_t v41 = (os_log_t *)sub_32A48(13);
    uint64_t v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v66 = "AggregateDevice_Simple.cpp";
      __int16 v67 = 1024;
      int v68 = 91;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    UInt32 v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v43, "Precondition failure.");
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned int v15 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 88))(v9, 0);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 312))(*a3);
  if (a2)
  {
    unsigned int v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 88))(*a2, 0);
    if (v17)
    {
      uint64_t v18 = operator new(1uLL);
      unsigned char *v18 = 1;
      *a1 = (uint64_t)v18;
      a1[1] = (uint64_t)(v18 + 1);
      a1[2] = (uint64_t)(v18 + 1);
      if (v17 >= 2)
      {
        buf[0] = 0;
        sub_26B0C4((uint64_t)a1, v18 + 1, v17 - 1, buf);
      }
    }
  }
  switch(a4)
  {
    case 3:
      if (!sub_213B20(*a3))
      {
        unsigned int v56 = (os_log_t *)sub_32A48(13);
        unsigned int v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 138;
          _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_108;
      }
      if (v15 < 2) {
        goto LABEL_80;
      }
      if (!BYTE4(v16)) {
        sub_7F218();
      }
      if (v16 != 1)
      {
LABEL_80:
        char v47 = (os_log_t *)sub_32A48(13);
        uint64_t v48 = *v47;
        if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 139;
          _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_108;
      }
      __int16 v30 = (char *)a1[1];
      buf[0] = 2;
      sub_26B0C4((uint64_t)a1, v30, 1uLL, buf);
      int v31 = (char *)a1[1];
      buf[0] = 2;
      sub_26B0C4((uint64_t)a1, v31, 1uLL, buf);
      break;
    case 2:
      if (!BYTE4(v16))
      {
        int v52 = (os_log_t *)sub_32A48(13);
        int v53 = *v52;
        if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 123;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_108;
      }
      if (v16)
      {
        if (v15 < 2 || v16 != 1)
        {
          uint64_t v60 = (os_log_t *)sub_32A48(13);
          uint64_t v61 = *v60;
          if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v66 = "AggregateDevice_Simple.cpp";
            __int16 v67 = 1024;
            int v68 = 131;
            _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          goto LABEL_108;
        }
        uint64_t v28 = (char *)a1[1];
        buf[0] = 0;
        sub_26B0C4((uint64_t)a1, v28, 1uLL, buf);
        BOOL v29 = (char *)a1[1];
        buf[0] = 2;
        sub_26B0C4((uint64_t)a1, v29, 1uLL, buf);
      }
      else
      {
        __int16 v32 = (char *)a1[1];
        buf[0] = 2;
        sub_26B0C4((uint64_t)a1, v32, 1uLL, buf);
      }
      break;
    case 1:
      if (sub_213B20(*a3))
      {
        if (v15)
        {
          long long v19 = (char *)a1[1];
          buf[0] = 2;
          sub_26B0C4((uint64_t)a1, v19, 1uLL, buf);
          uint64_t v20 = (char *)a1[1];
          buf[0] = 0;
          sub_26B0C4((uint64_t)a1, v20, v15 - 1, buf);
          break;
        }
        uint64_t v58 = (os_log_t *)sub_32A48(13);
        int v59 = *v58;
        if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 117;
          _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
      else
      {
        long long v54 = (os_log_t *)sub_32A48(13);
        uint64_t v55 = *v54;
        if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v66 = "AggregateDevice_Simple.cpp";
          __int16 v67 = 1024;
          int v68 = 116;
          _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
LABEL_108:
      uint64_t v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v62, "Precondition failure.");
    default:
      break;
  }
  if (a2) {
    int v33 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 88))(*a2, 0);
  }
  else {
    int v33 = 0;
  }
  if (a2 == a3) {
    unsigned int v34 = 0;
  }
  else {
    unsigned int v34 = v15;
  }
  uint64_t v35 = v33 + v34;
  uint64_t v36 = a1[1] - *a1;
  if (v36 != v35)
  {
    int v37 = (os_log_t *)sub_32A48(16);
    int v38 = *v37;
    if (*v37)
    {
      if (os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        if (a2)
        {
          uint64_t v39 = &v64;
          sub_21340C(&v64, (uint64_t)a2);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v39 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
        }
        else
        {
          uint64_t v39 = (std::string *)"none";
        }
        sub_21340C(&__p, (uint64_t)a3);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        uint64_t v66 = "AggregateDevice_Simple.cpp";
        __int16 v67 = 1024;
        int v68 = 149;
        __int16 v69 = 2048;
        uint64_t v70 = v36;
        __int16 v71 = 1024;
        int v72 = v35;
        __int16 v73 = 2080;
        uint64_t v74 = v39;
        __int16 v75 = 2080;
        uint64_t v76 = p_p;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d InputStreamUsage mask size (%zu) does not match the number of input streams (%u). Device Descriptions {input: %s, output: %s}", buf, 0x36u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (a2 && SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_26AA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v18);
  uint64_t v20 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_26AB84(uint64_t *a1, void *a2, int a3)
{
  if (!*a2)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "AggregateDevice_Simple.cpp";
      __int16 v21 = 1024;
      int v22 = 174;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v19, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 == 1)
  {
    uint64_t v5 = (void *)a2[1];
LABEL_8:
    sub_3524(a1, v5);
    return;
  }
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 312))(*a2);
    if ((v6 & 0xFF00000000) == 0)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(13);
      uint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        uint64_t v20 = "AggregateDevice_Simple.cpp";
        __int16 v21 = 1024;
        int v22 = 183;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v19, 0x12u);
      }
      unsigned int v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v15, "Precondition failure.");
    }
    uint64_t v7 = a2[1];
    if (0xAAAAAAAAAAAAAAABLL * ((a2[2] - v7) >> 3) <= v6)
    {
      uint64_t v16 = (os_log_t *)sub_32A48(13);
      uint64_t v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        uint64_t v20 = "AggregateDevice_Simple.cpp";
        __int16 v21 = 1024;
        int v22 = 184;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v19, 0x12u);
      }
      uint64_t v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v18, "Precondition failure.");
    }
    uint64_t v5 = (void *)(v7 + 24 * v6);
    goto LABEL_8;
  }
  uint64_t v8 = (os_log_t *)sub_32A48(13);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
  {
    int v19 = 136315394;
    uint64_t v20 = "AggregateDevice_Simple.cpp";
    __int16 v21 = 1024;
    int v22 = 189;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unsupported speaker input\"", (uint8_t *)&v19, 0x12u);
  }
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
}

void sub_26AF20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_26AF44(void *a1, uint64_t a2)
{
  int v6 = 0;
  *(_DWORD *)*sub_26B048(a1, 2uLL, &v6) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 312))(a2);
  if ((result & 0xFF00000000) != 0) {
    int v5 = result;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(*a1 + 4) = v5;
  return result;
}

void sub_26AFD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_26AFF0(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(0x50uLL);
  a1[1] = v2 + 5;
  a1[2] = v2 + 5;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *(_OWORD *)((char *)v2 + 40) = 0u;
  *(_OWORD *)((char *)v2 + 56) = 0u;
  *((void *)v2 + 9) = 0;
  *a1 = v2;
  return a1;
}

void *sub_26B048(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_46BB4(a1, a2);
  int v6 = (_DWORD *)a1[1];
  uint64_t v7 = &v6[a2];
  uint64_t v8 = 4 * a2;
  do
  {
    *v6++ = *a3;
    v8 -= 4;
  }
  while (v8);
  a1[1] = v7;
  return a1;
}

void sub_26B0A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_26B0C4(uint64_t a1, char *__src, unint64_t a3, unsigned char *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    unint64_t v5 = a3;
    int v6 = __src;
    uint64_t v9 = *(char **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 - (uint64_t)v9 >= a3)
    {
      unint64_t v16 = v9 - __src;
      unint64_t v17 = a3 - (v9 - __src);
      if (a3 <= v9 - __src)
      {
        uint64_t v18 = *(char **)(a1 + 8);
        unint64_t v20 = a3;
      }
      else
      {
        uint64_t v18 = &__src[a3];
        int v19 = *(unsigned char **)(a1 + 8);
        do
        {
          *v19++ = *a4;
          --v17;
        }
        while (v17);
        *(void *)(a1 + 8) = v18;
        if (!v16) {
          return;
        }
        unint64_t v20 = v9 - __src;
      }
      __int16 v21 = &__src[a3];
      int v22 = v18;
      if (&v18[-a3] < v9)
      {
        if (a3 <= v16) {
          unint64_t v23 = v9 - __src;
        }
        else {
          unint64_t v23 = a3;
        }
        uint64_t v24 = &__src[-a3];
        double v25 = __src;
        double v26 = __src;
        do
        {
          v25[v23] = v24[v23];
          ++v26;
          ++v24;
          ++v25;
        }
        while (&v26[v23 - (void)v9 - a3]);
        if (a3 > v16) {
          unint64_t v16 = a3;
        }
        int v22 = &v25[v16];
      }
      *(void *)(a1 + 8) = v22;
      if (v18 != v21) {
        memmove(&__src[a3], __src, v18 - v21);
      }
      if (v6 <= v4)
      {
        if (*(void *)(a1 + 8) <= (unint64_t)v4) {
          unint64_t v27 = 0;
        }
        else {
          unint64_t v27 = v5;
        }
        v4 += v27;
      }
      do
      {
        *v6++ = *v4;
        --v20;
      }
      while (v20);
    }
    else
    {
      int v10 = *(unsigned char **)a1;
      uint64_t v11 = (uint64_t)&v9[a3 - *(void *)a1];
      if (v11 < 0) {
        sub_60548();
      }
      uint64_t v12 = (char *)(__src - v10);
      unint64_t v13 = v8 - (void)v10;
      if (2 * v13 > v11) {
        uint64_t v11 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v11;
      }
      if (v14) {
        unsigned int v15 = operator new(v14);
      }
      else {
        unsigned int v15 = 0;
      }
      uint64_t v28 = &v12[(void)v15];
      BOOL v29 = &v12[(void)v15 + v5];
      int64_t v30 = (unsigned char *)v15 - v10;
      do
      {
        v6[v30++] = *v4;
        --v5;
      }
      while (v5);
      if (v10 != v6)
      {
        do
        {
          v12[(void)v15 - 1] = v12[(void)(v10 - 1)];
          --v12;
        }
        while (v12);
        uint64_t v28 = (char *)v15;
      }
      int v31 = (char *)v15 + v14;
      if (v9 != v6) {
        memmove(v29, v6, v9 - v6);
      }
      *(void *)a1 = v28;
      *(void *)(a1 + 8) = &v29[v9 - v6];
      *(void *)(a1 + 16) = v31;
      if (v10)
      {
        operator delete(v10);
      }
    }
  }
}

void *sub_26B2EC(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, long long *a6, void **a7, uint64_t a8, long long *a9)
{
  sub_119F84(v21, a3);
  v20[0] = v20;
  v20[1] = v20;
  v20[2] = 0;
  sub_269F30((uint64_t *)__p, a3, a4, 2);
  unint64_t v17 = (os_unfair_lock_s *)sub_329FA4(a2);
  sub_2860EC(a1, a2, (uint64_t)v21, (uint64_t)v20, (uint64_t)__p, a5, a6, 1, a7, v17, a8, a9);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  sub_45F50(v20);
  sub_45F50(v21);
  *a1 = off_628E10;
  a1[96] = 2;
  a1[97] = *a4;
  sub_26AB84(a1 + 98, a4, 2);
  sub_26AF44(a1 + 101, a1[97]);
  sub_26AFF0(a1 + 104);
  return a1;
}

void sub_26B428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v24 = *v22;
  if (*v22)
  {
    *(void *)(v20 + 816) = v24;
    operator delete(v24);
  }
  sub_8108(v21);
  sub_2876BC(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_26B490(void *a1, unsigned int a2)
{
  uint64_t v2 = (uint64_t *)a1[5];
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a1[5];
  do
  {
    unsigned int v5 = *(_DWORD *)(v4 + 32);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      uint64_t v7 = (uint64_t *)v4;
    }
    else {
      uint64_t v7 = (uint64_t *)(v4 + 8);
    }
    if (v6) {
      uint64_t v3 = (void *)v4;
    }
    uint64_t v4 = *v7;
  }
  while (*v7);
  if (v3 != a1 + 5 && *((_DWORD *)v3 + 8) <= a2)
  {
    int v10 = (void *)v3[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        int v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      uint64_t v12 = v3;
      do
      {
        uint64_t v11 = (void *)v12[2];
        BOOL v13 = *v11 == (void)v12;
        uint64_t v12 = v11;
      }
      while (!v13);
    }
    if ((void *)a1[4] == v3) {
      a1[4] = v11;
    }
    --a1[6];
    sub_89144(v2, v3);
    size_t v14 = (std::__shared_weak_count *)v3[6];
    if (v14) {
      sub_4636C(v14);
    }
    operator delete(v3);
  }
  else
  {
LABEL_12:
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      unint64_t v17 = "DSPProcessorManager.cpp";
      __int16 v18 = 1024;
      int v19 = 191;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Tried to remove an instance that is not in the map\"", (uint8_t *)&v16, 0x12u);
    }
  }
  return 0;
}

uint64_t sub_26B604(uint64_t a1, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v2 = sub_26B754((uint64_t **)(a1 + 32), a2, &v7)[5];
  if (!v2)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    unsigned int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v9 = "DSPProcessorManager.cpp";
      __int16 v10 = 1024;
      int v11 = 264;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: \"Unable to find instance.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }
  return (*(uint64_t (**)(uint64_t *))(*v2 + 184))(v2);
}

void sub_26B738(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_26B754(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    v7[6] = 0;
    *unsigned int v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *BOOL v6 = (uint64_t *)v7;
    __int16 v10 = (uint64_t *)**a1;
    int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      int v11 = *v6;
    }
    sub_46D00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_26B824(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v9 = a2;
  uint64_t v4 = sub_26B754((uint64_t **)(a1 + 32), a2, &v9)[5];
  if (!v4)
  {
    BOOL v6 = (os_log_t *)sub_32A48(13);
    unsigned int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v11 = "DSPProcessorManager.cpp";
      __int16 v12 = 1024;
      int v13 = 254;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: \"Unable to find instance.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*v4 + 176))(v4, a3);
}

void sub_26B960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_26B97C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v17 = a2;
  __int16 v12 = sub_26B754((uint64_t **)(a1 + 32), a2, &v17)[5];
  if (!v12)
  {
    size_t v14 = (os_log_t *)sub_32A48(13);
    unsigned int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v19 = "DSPProcessorManager.cpp";
      __int16 v20 = 1024;
      int v21 = 244;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: \"Unable to find instance.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + 48))(v12, a3, a4, a5, a6, a7);
}

void sub_26BAE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_26BB04(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v13 = a2;
  unsigned int v8 = sub_26B754((uint64_t **)(a1 + 32), a2, &v13)[5];
  if (!v8)
  {
    __int16 v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v15 = "DSPProcessorManager.cpp";
      __int16 v16 = 1024;
      int v17 = 234;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: \"Unable to find instance.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void, void))(*v8 + 56))(v8, a3, a4, a5, 0, 0);
}

void sub_26BC60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_26BC7C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v15 = a2;
  __int16 v10 = sub_26B754((uint64_t **)(a1 + 32), a2, &v15)[5];
  if (!v10)
  {
    __int16 v12 = (os_log_t *)sub_32A48(13);
    unsigned int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v17 = "DSPProcessorManager.cpp";
      __int16 v18 = 1024;
      int v19 = 224;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: \"Unable to find instance.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + 64))(v10, a3, a4, a5, a6);
}

void sub_26BDD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_26BDF4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  unsigned int v15 = a2;
  __int16 v10 = sub_26B754((uint64_t **)(a1 + 32), a2, &v15)[5];
  if (!v10)
  {
    __int16 v12 = (os_log_t *)sub_32A48(13);
    unsigned int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v17 = "DSPProcessorManager.cpp";
      __int16 v18 = 1024;
      int v19 = 214;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: \"Unable to find instance.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, float))(*v10 + 72))(v10, a3, a4, a5, a6);
}

void sub_26BF58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_26BF74(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v9 = a2;
  uint64_t v4 = sub_26B754((uint64_t **)(a1 + 32), a2, &v9)[5];
  if (!v4)
  {
    BOOL v6 = (os_log_t *)sub_32A48(13);
    unsigned int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v11 = "DSPProcessorManager.cpp";
      __int16 v12 = 1024;
      int v13 = 201;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: \"Unable to find instance.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }
  *a3 = *((_DWORD *)v4 + 7);
  return 0;
}

void sub_26C094(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_26C0B0(uint64_t a1, unsigned int a2)
{
  unsigned int v18 = a2;
  uint64_t v3 = sub_26CB5C((uint64_t **)(a1 + 8), a2, &v18)[5];
  if (v3)
  {
    v13[0] = 0;
    v13[1] = 0;
    int v15 = 0;
    uint64_t v14 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    memset(&v9, 0, sizeof(v9));
    std::string __p = v3;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = 0;
    AudioComponentGetDescription((AudioComponent)v3, &v9);
    memset(inComponent, 0, 28);
    memset(&inComponent[4], 0, 24);
    sub_3DD5E8((uint64_t)inComponent, (uint64_t)&__p);
    operator new();
  }
  uint64_t v4 = (os_log_t *)sub_32A48(13);
  unsigned int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(v13, a2);
    if (v14 >= 0) {
      BOOL v6 = v13;
    }
    else {
      BOOL v6 = (void **)v13[0];
    }
    LODWORD(inComponent[0]) = 136315650;
    *(AudioComponent *)((char *)inComponent + 4) = (AudioComponent)"DSPProcessorManager.cpp";
    WORD2(inComponent[1]) = 1024;
    *(_DWORD *)((char *)&inComponent[1] + 6) = 168;
    WORD1(inComponent[2]) = 2080;
    *(AudioComponent *)((char *)&inComponent[2] + 4) = (AudioComponent)v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [component is NULL]: \"Unable to instantiate DSPProcessor. Type ID %s not found.\"", (uint8_t *)inComponent, 0x1Cu);
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unable to instantiate DSPProcessor. Type ID %s not found.");
}

void sub_26C9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v8[5].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v8[6].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  int v13 = (std::__shared_weak_count_vtbl *)*v10;
  if (*v10)
  {
    v8[5].__vftable = v13;
    operator delete(v13);
  }
  sub_3E54AC(v9);
  std::__shared_weak_count::~__shared_weak_count(v8);
  operator delete(v14);
  sub_3E54AC(va);
  _Unwind_Resume(a1);
}

void sub_26CAE8()
{
}

void sub_26CAF0(uint64_t a1, int a2)
{
  if (a2) {
    operator delete();
  }
  JUMPOUT(0x26CAE0);
}

void sub_26CB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **sub_26CB5C(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    AudioComponentDescription v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *unsigned int v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *BOOL v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_46D00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_26CC2C(uint64_t a1, AudioUnitScope inScope)
{
  if (inScope == 1) {
    uint64_t v4 = 88;
  }
  else {
    uint64_t v4 = 112;
  }
  if (inScope == 1) {
    uint64_t v5 = a1 + 88;
  }
  else {
    uint64_t v5 = a1 + 112;
  }
  AudioUnitElement outData = 0;
  ioDataSize[0] = 4;
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    unsigned int v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    unsigned int v7 = 0;
  }
  if (AudioUnitGetProperty(v7, 0xBu, inScope, 0, &outData, ioDataSize))
  {
    unsigned int v8 = (os_log_t *)sub_32A48(13);
    AudioComponentDescription v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315394;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 785;
      uint64_t v10 = (uint8_t *)ioDataSize;
LABEL_14:
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", v10, 0x12u);
    }
  }
  else
  {
    *(void *)(v5 + 8) = *(void *)(a1 + v4);
    if (!outData) {
      return;
    }
    AudioUnitElement v14 = 0;
    while (1)
    {
      uint64_t v42 = 0;
      memset(ioDataSize, 0, sizeof(ioDataSize));
      UInt32 v37 = 40;
      uint64_t v15 = *(void *)(a1 + 72);
      long long v16 = v15 ? *(OpaqueAudioComponentInstance **)(v15 + 16) : 0;
      if (AudioUnitGetProperty(v16, 8u, inScope, v14, ioDataSize, &v37)) {
        break;
      }
      long long v17 = *(char **)(v5 + 8);
      unint64_t v18 = *(void *)(v5 + 16);
      if ((unint64_t)v17 >= v18)
      {
        int v22 = *(char **)(a1 + v4);
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v22) >> 4);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0x555555555555555) {
          sub_60548();
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v22) >> 4);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v26 = 0x555555555555555;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 > 0x555555555555555) {
            sub_60560();
          }
          unint64_t v27 = (char *)operator new(48 * v26);
          long long v17 = *(char **)(v5 + 8);
        }
        else
        {
          unint64_t v27 = 0;
        }
        uint64_t v28 = &v27[48 * v23];
        long long v29 = *(_OWORD *)&ioDataSize[4];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)ioDataSize;
        *((_OWORD *)v28 + 1) = v29;
        *((void *)v28 + 4) = v42;
        v28[40] = 0;
        if (v17 == v22)
        {
          int v33 = &v27[48 * v23];
        }
        else
        {
          int64_t v30 = &v27[48 * v23];
          do
          {
            long long v31 = *((_OWORD *)v17 - 3);
            long long v32 = *((_OWORD *)v17 - 2);
            int v33 = v30 - 48;
            *(_OWORD *)(v30 - 23) = *(_OWORD *)(v17 - 23);
            *((_OWORD *)v30 - 3) = v31;
            *((_OWORD *)v30 - 2) = v32;
            v17 -= 48;
            v30 -= 48;
          }
          while (v17 != v22);
        }
        unsigned int v34 = &v27[48 * v26];
        *(void *)(a1 + v4) = v33;
        int v21 = v28 + 48;
        *(void *)(v5 + 8) = v28 + 48;
        *(void *)(v5 + 16) = v34;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)ioDataSize;
        long long v20 = *(_OWORD *)&ioDataSize[4];
        *((void *)v17 + 4) = v42;
        *(_OWORD *)long long v17 = v19;
        *((_OWORD *)v17 + 1) = v20;
        v17[40] = 0;
        int v21 = v17 + 48;
      }
      *(void *)(v5 + 8) = v21;
      if (++v14 >= outData) {
        return;
      }
    }
    uint64_t v35 = (os_log_t *)sub_32A48(13);
    AudioComponentDescription v9 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      UInt32 v37 = 136315394;
      int v38 = "DSPProcessorManager.cpp";
      __int16 v39 = 1024;
      int v40 = 792;
      uint64_t v10 = (uint8_t *)&v37;
      goto LABEL_14;
    }
  }
  uint64_t v11 = (os_log_t *)sub_32A48(24);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    int v13 = "output";
    *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
    ioDataSize[0] = 136315650;
    if (inScope == 1) {
      int v13 = "input";
    }
    LOWORD(ioDataSize[3]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[3] + 2) = 797;
    HIWORD(ioDataSize[4]) = 2080;
    *(void *)&ioDataSize[5] = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Error while updating DSP instance bus %s formats", (uint8_t *)ioDataSize, 0x1Cu);
  }
}

uint64_t sub_26CFF4(void *a1, AudioUnitScope inScope, unsigned int a3, int *a4)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    unint64_t v24 = (os_log_t *)sub_32A48(13);
    unint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      uint64_t v36 = "DSPProcessorManager.cpp";
      __int16 v37 = 1024;
      int v38 = 704;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input\"", (uint8_t *)&ioDataSize, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }
  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  uint64_t v8 = a1[9];
  if (v8) {
    AudioComponentDescription v9 = *(OpaqueAudioComponentInstance **)(v8 + 16);
  }
  else {
    AudioComponentDescription v9 = 0;
  }
  uint64_t Property = AudioUnitGetProperty(v9, 0xBu, inScope, 0, &outData, &ioDataSize);
  if (Property)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      uint64_t v36 = "DSPProcessorManager.cpp";
      __int16 v37 = 1024;
      int v38 = 707;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&ioDataSize, 0x12u);
    }
    int v13 = (os_log_t *)sub_32A48(24);
    AudioUnitElement v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      unsigned int v15 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
      sub_2417C(v32, v15);
      int v16 = v33;
      long long v17 = (void **)v32[0];
      sub_2417C(__p, Property);
      unint64_t v18 = v32;
      if (v16 < 0) {
        unint64_t v18 = v17;
      }
      if (v31 >= 0) {
        long long v19 = __p;
      }
      else {
        long long v19 = (void **)__p[0];
      }
      UInt32 ioDataSize = 136316162;
      uint64_t v36 = "DSPProcessorManager.cpp";
      __int16 v37 = 1024;
      int v38 = 718;
      __int16 v39 = 2080;
      int v40 = v18;
      __int16 v41 = 1024;
      int v42 = Property;
      __int16 v43 = 2080;
      uint64_t v44 = v19;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP (%s) static channel setup failed with error: (%d) %s", (uint8_t *)&ioDataSize, 0x2Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    if (outData <= a3)
    {
      unint64_t v27 = (os_log_t *)sub_32A48(13);
      uint64_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        UInt32 ioDataSize = 136315650;
        uint64_t v36 = "DSPProcessorManager.cpp";
        __int16 v37 = 1024;
        int v38 = 708;
        __int16 v39 = 1024;
        LODWORD(v40) = inScope;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"inElement cannot exceed bus count for scope: %u\"", (uint8_t *)&ioDataSize, 0x18u);
      }
      long long v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_82578(v29, "inElement cannot exceed bus count for scope: %u");
    }
    uint64_t v20 = 14;
    if (inScope == 1) {
      uint64_t v20 = 11;
    }
    uint64_t v21 = a1[v20] + 48 * a3;
    if ((*(unsigned char *)(v21 + 12) & 0x20) != 0) {
      int v22 = *(_DWORD *)(v21 + 28);
    }
    else {
      int v22 = 1;
    }
    *a4 = v22;
  }
  return Property;
}

void sub_26D3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_26D400(void *a1, AudioUnitScope inScope, AudioUnitElement a3, int a4)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    int64_t v30 = (os_log_t *)sub_32A48(13);
    char v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315394;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 645;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input\"", (uint8_t *)ioDataSize, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }
  AudioUnitElement outData = 0;
  ioDataSize[0] = 4;
  uint64_t v8 = a1[9];
  if (v8) {
    AudioComponentDescription v9 = *(OpaqueAudioComponentInstance **)(v8 + 16);
  }
  else {
    AudioComponentDescription v9 = 0;
  }
  uint64_t Property = AudioUnitGetProperty(v9, 0xBu, inScope, 0, &outData, ioDataSize);
  if (Property)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315394;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 648;
LABEL_29:
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)ioDataSize, 0x12u);
      goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (outData <= a3)
  {
    char v33 = (os_log_t *)sub_32A48(13);
    unsigned int v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315650;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 649;
      HIWORD(ioDataSize[4]) = 1024;
      ioDataSize[5] = inScope;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"inElement cannot exceed bus count for scope: %u\"", (uint8_t *)ioDataSize, 0x18u);
    }
    uint64_t v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(v35, "inElement cannot exceed bus count for scope: %u");
  }
  int v13 = a1 + 14;
  if (inScope == 1) {
    uint64_t v14 = 11;
  }
  else {
    uint64_t v14 = 14;
  }
  if (inScope == 1) {
    int v13 = a1 + 11;
  }
  uint64_t v15 = a1[v14];
  if (0xAAAAAAAAAAAAAAABLL * ((v13[1] - v15) >> 4) <= a3)
  {
    uint64_t v36 = (os_log_t *)sub_32A48(13);
    __int16 v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      ioDataSize[0] = 136315650;
      *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
      LOWORD(ioDataSize[3]) = 1024;
      *(UInt32 *)((char *)&ioDataSize[3] + 2) = 654;
      HIWORD(ioDataSize[4]) = 1024;
      ioDataSize[5] = inScope;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"inElement cannot exceed bus count for scope: %u\"", (uint8_t *)ioDataSize, 0x18u);
    }
    int v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(v38, "inElement cannot exceed bus count for scope: %u");
  }
  uint64_t v16 = v15 + 48 * a3;
  if (*(_DWORD *)(v16 + 28) == a4)
  {
LABEL_17:
    uint64_t Property = 0;
    *(unsigned char *)(v15 + 48 * a3 + 40) = 1;
    return Property;
  }
  memset(ioDataSize, 0, 40);
  v41[0] = 40;
  uint64_t v17 = a1[9];
  if (v17) {
    unint64_t v18 = *(OpaqueAudioComponentInstance **)(v17 + 16);
  }
  else {
    unint64_t v18 = 0;
  }
  uint64_t Property = AudioUnitGetProperty(v18, 8u, inScope, a3, ioDataSize, v41);
  if (!Property)
  {
    sub_1AADCC((uint64_t)ioDataSize, a4, (ioDataSize[3] & 0x20) == 0);
    uint64_t v19 = a1[9];
    uint64_t v20 = v19 ? *(OpaqueAudioComponentInstance **)(v19 + 16) : 0;
    uint64_t Property = AudioUnitSetProperty(v20, 8u, inScope, a3, ioDataSize, 0x28u);
    if (!Property)
    {
      sub_1AADCC(v16, a4, (*(_DWORD *)(v16 + 12) & 0x20) == 0);
      uint64_t v15 = a1[v14];
      goto LABEL_17;
    }
  }
  uint64_t v21 = (os_log_t *)sub_32A48(13);
  uint64_t v12 = *v21;
  if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
  {
    ioDataSize[0] = 136315394;
    *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
    LOWORD(ioDataSize[3]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[3] + 2) = 661;
    goto LABEL_29;
  }
LABEL_30:
  int v22 = (os_log_t *)sub_32A48(24);
  unint64_t v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
  {
    unsigned int v24 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
    sub_2417C(v41, v24);
    int v25 = v42;
    unint64_t v26 = *(UInt32 **)v41;
    sub_2417C(__p, Property);
    unint64_t v27 = v41;
    if (v25 < 0) {
      unint64_t v27 = v26;
    }
    if (v40 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    ioDataSize[0] = 136316162;
    *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
    LOWORD(ioDataSize[3]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[3] + 2) = 672;
    HIWORD(ioDataSize[4]) = 2080;
    *(void *)&ioDataSize[5] = v27;
    LOWORD(ioDataSize[7]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[7] + 2) = Property;
    HIWORD(ioDataSize[8]) = 2080;
    *(void *)&ioDataSize[9] = v28;
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP (%s) static channel setup failed with error: (%d) %s", (uint8_t *)ioDataSize, 0x2Cu);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(*(void **)v41);
    }
  }
  return Property;
}

void sub_26D9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_26DA10(uint64_t a1, AudioUnitScope inScope, UInt32 a3)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      UInt32 outDataSize = 136315394;
      uint64_t v20 = "DSPProcessorManager.cpp";
      __int16 v21 = 1024;
      int v22 = 625;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input\"", (uint8_t *)&outDataSize, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    unsigned int v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    unsigned int v7 = 0;
  }
  Boolean outWritable = 0;
  UInt32 outDataSize = 0;
  uint64_t PropertyInfo = AudioUnitGetPropertyInfo(v7, 0xBu, inScope, 0, &outDataSize, &outWritable);
  if (!PropertyInfo
    && outWritable
    && ((outDataSize = a3, (uint64_t v11 = *(void *)(a1 + 72)) == 0)
      ? (uint64_t v12 = 0)
      : (uint64_t v12 = *(OpaqueAudioComponentInstance **)(v11 + 16)),
        uint64_t v9 = AudioUnitSetProperty(v12, 0xBu, inScope, 0, &outDataSize, 4u),
        v9))
  {
    int v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      UInt32 outDataSize = 136315394;
      uint64_t v20 = "DSPProcessorManager.cpp";
      __int16 v21 = 1024;
      int v22 = 630;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&outDataSize, 0x12u);
    }
  }
  else
  {
    sub_26CC2C(a1, inScope);
    return PropertyInfo;
  }
  return v9;
}

void sub_26DC28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_26DC44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 140);
}

unsigned int sub_26DC4C(uint64_t a1)
{
  double v2 = sub_51CE0(*(OpaqueAudioComponentInstance **)(a1 + 72));
  double outData = 0.0;
  UInt32 ioDataSize = 8;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    uint64_t v4 = *(OpaqueAudioComponentInstance **)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  if (!AudioUnitGetProperty(v4, 2u, 1u, 0, &outData, &ioDataSize)) {
    return vcvtpd_u64_f64(v2 * outData);
  }
  uint64_t v5 = (os_log_t *)sub_32A48(13);
  uint64_t v6 = *v5;
  if (*v5)
  {
    unsigned int result = os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    UInt32 ioDataSize = 136315394;
    uint64_t v10 = "DSPProcessorManager.cpp";
    __int16 v11 = 1024;
    int v12 = 748;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&ioDataSize, 0x12u);
  }
  return 0;
}

uint64_t sub_26DD70(uint64_t a1, int a2)
{
  int inData = a2 ^ 1;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return AudioUnitSetProperty(v3, 0x15u, 0, 0, &inData, 4u);
}

uint64_t sub_26DDC0(uint64_t a1)
{
  return a1 + 24;
}

CFStringRef sub_26DDC8(uint64_t a1)
{
  if (!*(void *)(a1 + 64))
  {
    CFStringRef outName = 0;
    if (!AudioComponentCopyName(*(AudioComponent *)(a1 + 16), &outName))
    {
      CFStringRef v2 = outName;
      *(void *)(a1 + 64) = outName;
      if (v2)
      {
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v2, @":");
        ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
        *(void *)(a1 + 48) = ValueAtIndex;
        CFRetain(ValueAtIndex);
        MutableCopy = 0;
        if (CFArrayGetCount(ArrayBySeparatingStrings) >= 2)
        {
          CFStringRef v6 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
          CFIndex Length = CFStringGetLength(v6);
          MutableCopy = CFStringCreateMutableCopy(0, Length, v6);
          CFStringTrimWhitespace(MutableCopy);
        }
        *(void *)(a1 + 56) = MutableCopy;
        CFRelease(ArrayBySeparatingStrings);
      }
    }
  }
  uint64_t v8 = *(const void **)(a1 + 56);
  if (v8 || (uint64_t v8 = *(const void **)(a1 + 64)) != 0)
  {
    return (CFStringRef)CFRetain(v8);
  }
  else
  {
    return CFStringCreateWithCString(0, "unknown", 0x600u);
  }
}

uint64_t sub_26DEE0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 136) == a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    CFStringRef v6 = *(OpaqueAudioComponentInstance **)(v5 + 16);
  }
  else {
    CFStringRef v6 = 0;
  }
  uint64_t v7 = AudioUnitUninitialize(v6);
  if (v7)
  {
    uint64_t v2 = v7;
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "DSPProcessorManager.cpp";
      __int16 v18 = 1024;
      int v19 = 605;
LABEL_21:
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&v16, 0x12u);
    }
  }
  else
  {
    uint64_t v10 = sub_3E5524(*(OpaqueAudioComponentInstance **)(a1 + 72), a2);
    if (v10)
    {
      uint64_t v2 = v10;
      __int16 v11 = (os_log_t *)sub_32A48(13);
      uint64_t v9 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        uint64_t v17 = "DSPProcessorManager.cpp";
        __int16 v18 = 1024;
        int v19 = 607;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 72);
      if (v12) {
        int v13 = *(OpaqueAudioComponentInstance **)(v12 + 16);
      }
      else {
        int v13 = 0;
      }
      uint64_t v2 = AudioUnitInitialize(v13);
      if (!v2)
      {
        *(_DWORD *)(a1 + 136) = a2;
        return v2;
      }
      uint64_t v14 = (os_log_t *)sub_32A48(13);
      uint64_t v9 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        uint64_t v17 = "DSPProcessorManager.cpp";
        __int16 v18 = 1024;
        int v19 = 609;
        goto LABEL_21;
      }
    }
  }
  return v2;
}

uint64_t sub_26E0D8(void *a1, AudioUnitScope a2, AudioUnitElement a3, long long *a4)
{
  if (a2 - 3 <= 0xFFFFFFFD)
  {
    char v33 = (os_log_t *)sub_32A48(13);
    unsigned int v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 577;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }
  if (a2 == 1) {
    uint64_t v7 = 11;
  }
  else {
    uint64_t v7 = 14;
  }
  if (a2 == 1) {
    uint64_t v8 = a1 + 11;
  }
  else {
    uint64_t v8 = a1 + 14;
  }
  uint64_t v9 = a1[v7];
  if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - v9) >> 4) <= a3)
  {
    uint64_t v36 = (os_log_t *)sub_32A48(13);
    __int16 v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = (v8[1] - a1[v7]) >> 4;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 581;
      __int16 v49 = 1024;
      *(_DWORD *)uint64_t v50 = a3;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = -1431655765 * v38;
      *(_WORD *)uint64_t v51 = 1024;
      *(_DWORD *)&v51[2] = a2;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"inElement (%u) cannot exceed bus count (%u) for scope: %u\"", buf, 0x24u);
    }
    __int16 v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(v39, "inElement (%u) cannot exceed bus count (%u) for scope: %u");
  }
  uint64_t v12 = v9 + 48 * a3;
  if (*(unsigned char *)(v12 + 40))
  {
    if (*(double *)v12 != *(double *)a4
      || *(_DWORD *)(v12 + 8) != *((_DWORD *)a4 + 2)
      || *(_DWORD *)(v12 + 12) != *((_DWORD *)a4 + 3))
    {
      uint64_t v13 = v9 + 48 * a3;
LABEL_14:
      int v14 = *(_DWORD *)(v13 + 28);
      long long v16 = *a4;
      long long v15 = a4[1];
      *(void *)(v13 + 32) = *((void *)a4 + 4);
      *(_OWORD *)uint64_t v13 = v16;
      *(_OWORD *)(v13 + 16) = v15;
      sub_1AADCC(v13, v14, (*(_DWORD *)(v13 + 12) & 0x20) == 0);
      goto LABEL_15;
    }
    return 0;
  }
  if (sub_A6DD8((_DWORD *)v12, a4, 3u)) {
    return 0;
  }
  uint64_t v13 = a1[v7] + 48 * a3;
  if (*(unsigned char *)(v13 + 40)) {
    goto LABEL_14;
  }
  long long v31 = *a4;
  long long v32 = a4[1];
  *(void *)(v13 + 32) = *((void *)a4 + 4);
  *(_OWORD *)uint64_t v13 = v31;
  *(_OWORD *)(v13 + 16) = v32;
LABEL_15:
  uint64_t v17 = a1[9];
  if (v17) {
    __int16 v18 = *(OpaqueAudioComponentInstance **)(v17 + 16);
  }
  else {
    __int16 v18 = 0;
  }
  uint64_t v19 = AudioUnitSetProperty(v18, 8u, a2, a3, (const void *)(a1[v7] + 48 * a3), 0x28u);
  if (v19)
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    __int16 v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 587;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
    }
    int v22 = (os_log_t *)sub_32A48(24);
    unint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      unsigned int v24 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
      int v25 = v43;
      sub_2417C(v43, v24);
      if (v44 < 0) {
        int v25 = (void **)v43[0];
      }
      sub_2417C(v41, v19);
      int v26 = v42;
      unint64_t v27 = (void **)v41[0];
      sub_259A4(&__p, a1[v7] + 48 * a3);
      uint64_t v28 = v41;
      if (v26 < 0) {
        uint64_t v28 = v27;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      uint64_t v46 = "DSPProcessorManager.cpp";
      __int16 v47 = 1024;
      int v48 = 592;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = v25;
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)uint64_t v51 = v19;
      *(_WORD *)&v51[4] = 2080;
      int v52 = v28;
      __int16 v53 = 2080;
      long long v54 = p_p;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP (%s) format setup failed with error: (%d) %s, format: %s", buf, 0x36u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v42 < 0) {
        operator delete(v41[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
    }
  }
  return v19;
}

void sub_26E5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_26E61C(uint64_t a1, AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  AudioUnitRenderActionFlags ioActionFlags = 512;
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    uint64_t v5 = *(OpaqueAudioComponentInstance **)(v4 + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  return AudioUnitProcess(v5, &ioActionFlags, inTimeStamp, inNumberFrames, ioData);
}

uint64_t sub_26E668(uint64_t a1, uint64_t *a2)
{
  uint64_t inData = *a2;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return AudioUnitSetProperty(v3, 0, 0, 0, &inData, 8u);
}

uint64_t sub_26E6B8(uint64_t a1, unsigned int a2)
{
  v5[1] = 0;
  v5[0] = a2;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return AudioUnitSetProperty(v3, 0x24u, 0, 0, v5, 0x10u);
}

uint64_t sub_26E708(uint64_t a1, _DWORD *a2)
{
  uint64_t outData = 0;
  CFTypeRef cf = 0;
  UInt32 ioDataSize = 16;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    uint64_t v4 = *(OpaqueAudioComponentInstance **)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t Property = AudioUnitGetProperty(v4, 0x24u, 0, 0, &outData, &ioDataSize);
  if (cf) {
    CFRelease(cf);
  }
  if (!Property) {
    *a2 = outData;
  }
  return Property;
}

uint64_t sub_26E788(uint64_t a1, AudioUnitPropertyID a2, void *inData, UInt32 inDataSize, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    uint64_t v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    uint64_t v7 = 0;
  }
  return AudioUnitSetProperty(v7, a2, inScope, inElement, inData, inDataSize);
}

NSObject *sub_26E7B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 142))
  {
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2) {
      uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = AudioUnitUninitialize(v3);
    if (v5)
    {
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        long long v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 419;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
      }
      uint64_t v8 = (os_log_t *)sub_32A48(24);
      uint64_t v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
        sub_2417C(__p, v10);
        if (v14 >= 0) {
          __int16 v11 = __p;
        }
        else {
          __int16 v11 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        long long v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 423;
        __int16 v19 = 2080;
        uint64_t v20 = v11;
        __int16 v21 = 1024;
        int v22 = (int)v5;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Processor un-initialization of type '%s' failed with error: %d", buf, 0x22u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(unsigned char *)(a1 + 142) = 0;
    }
  }
  else
  {
    uint64_t v4 = (os_log_t *)sub_32A48(24);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        long long v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 414;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Skipping uninitialization because the AU is already uninitialized.", buf, 0x12u);
      }
      return 0;
    }
  }
  return v5;
}

NSObject *sub_26EA04(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 142))
  {
    uint64_t v1 = (os_log_t *)sub_32A48(24);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        long long v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 396;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Skipping initialization because the AU is already initialized.", buf, 0x12u);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4) {
      uint64_t v5 = *(OpaqueAudioComponentInstance **)(v4 + 16);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v2 = AudioUnitInitialize(v5);
    if (v2)
    {
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        long long v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 400;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
      }
      uint64_t v8 = (os_log_t *)sub_32A48(24);
      uint64_t v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
        sub_2417C(__p, v10);
        __int16 v11 = v14 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        long long v16 = "DSPProcessorManager.cpp";
        __int16 v17 = 1024;
        int v18 = 404;
        __int16 v19 = 2080;
        uint64_t v20 = v11;
        __int16 v21 = 1024;
        int v22 = (int)v2;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Processor initialization of type '%s' failed with error: %d", buf, 0x22u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(unsigned char *)(a1 + 142) = 1;
    }
  }
  return v2;
}

void sub_26EC54(void *a1)
{
  sub_26EC8C(a1);

  operator delete();
}

void *sub_26EC8C(void *a1)
{
  *a1 = off_629150;
  a1[12] = a1[11];
  a1[15] = a1[14];
  uint64_t v2 = a1[9];
  if (v2) {
    uint64_t v3 = *(OpaqueAudioComponentInstance **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  AudioUnitUninitialize(v3);
  uint64_t v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }
  sub_3E54AC(a1 + 2);
  return a1;
}

uint64_t sub_26ED28(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_26ED4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629268;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_26EDA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_26EDC0(uint64_t a1, unint64_t a2, AudioComponentDescription *a3)
{
  if (*(void *)(a1 + 24) <= a2)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)&v9[4] = "DSPProcessorManager.cpp";
      __int16 v10 = 1024;
      int v11 = 153;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"Bad index into DSPProcessorType map.\"", v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(exception, "Bad index into DSPProcessorType map.");
  }
  *(void *)uint64_t v9 = *(void *)(a1 + 8);
  sub_79218((void **)v9, a2);
  uint64_t v4 = *(OpaqueAudioComponent **)(*(void *)v9 + 40);

  return AudioComponentGetDescription(v4, a3);
}

void sub_26EEF4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_26EF10(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (*(void *)(a1 + 24) <= a2)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)&v8[4] = "DSPProcessorManager.cpp";
      __int16 v9 = 1024;
      int v10 = 139;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"Bad index into DSPProcessorType map.\"", v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(exception, "Bad index into DSPProcessorType map.");
  }
  *(void *)uint64_t v8 = *(void *)(a1 + 8);
  sub_79218((void **)v8, a2);
  *a3 = *(_DWORD *)(*(void *)v8 + 32);
  return 0;
}

void sub_26F038(_Unwind_Exception *exception_object)
{
}

uint64_t sub_26F054(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 24);
  return 0;
}

void sub_26F064(uint64_t a1)
{
  *(void *)a1 = off_6290D0;
  sub_26F0D4(*(void **)(a1 + 40));
  sub_463E0(*(void **)(a1 + 16));

  operator delete();
}

void sub_26F0D4(void *a1)
{
  if (a1)
  {
    sub_26F0D4(*a1);
    sub_26F0D4(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      sub_4636C(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_26F12C(uint64_t a1)
{
  *(void *)a1 = off_6290D0;
  sub_26F0D4(*(void **)(a1 + 40));
  sub_463E0(*(void **)(a1 + 16));
  return a1;
}

void sub_26F17C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64E8C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64E8C0))
  {
    qword_64E890 = 0;
    qword_64E880 = (uint64_t)off_6290D0;
    qword_64E888 = &qword_64E890;
    qword_64E8B0 = 0;
    qword_64E8A8 = 0;
    qword_64E898 = 0;
    unk_64E8A0 = &qword_64E8A8;
    dword_64E8B8 = 1;
    char v42 = (void **)&v42;
    __int16 v43 = (void **)&v42;
    uint64_t v44 = 0;
    uint64_t v0 = (void **)operator new(0x18uLL);
    *((_DWORD *)v0 + 4) = 1668051820;
    *uint64_t v0 = &v42;
    v0[1] = &v42;
    char v42 = v0;
    __int16 v43 = v0;
    uint64_t v44 = 1;
    uint64_t v1 = operator new(0x18uLL);
    v1[4] = 1818521197;
    *(void *)uint64_t v1 = v0;
    *((void *)v1 + 1) = &v42;
    v0[1] = v1;
    char v42 = (void **)v1;
    uint64_t v44 = 2;
    uint64_t v2 = operator new(0x18uLL);
    v2[4] = 1851942257;
    *(void *)uint64_t v2 = v1;
    *((void *)v2 + 1) = &v42;
    *((void *)v1 + 1) = v2;
    char v42 = (void **)v2;
    uint64_t v44 = 3;
    uint64_t v3 = operator new(0x18uLL);
    void v3[4] = 1936748595;
    *(void *)uint64_t v3 = v2;
    *((void *)v3 + 1) = &v42;
    *((void *)v2 + 1) = v3;
    char v42 = (void **)v3;
    uint64_t v44 = 4;
    uint64_t v4 = operator new(0x18uLL);
    v4[4] = 1987013737;
    *(void *)uint64_t v4 = v3;
    *((void *)v4 + 1) = &v42;
    *((void *)v3 + 1) = v4;
    char v42 = (void **)v4;
    uint64_t v44 = 5;
    uint64_t v5 = operator new(0x18uLL);
    v5[4] = 1936089964;
    *(void *)uint64_t v5 = v4;
    *((void *)v5 + 1) = &v42;
    *((void *)v4 + 1) = v5;
    char v42 = (void **)v5;
    uint64_t v44 = 6;
    uint64_t v6 = operator new(0x18uLL);
    void v6[4] = 1650814258;
    *(void *)uint64_t v6 = v5;
    *((void *)v6 + 1) = &v42;
    *((void *)v5 + 1) = v6;
    char v42 = (void **)v6;
    uint64_t v44 = 7;
    uint64_t v7 = operator new(0x18uLL);
    v7[4] = 1835298866;
    *(void *)uint64_t v7 = v6;
    *((void *)v7 + 1) = &v42;
    *((void *)v6 + 1) = v7;
    char v42 = (void **)v7;
    uint64_t v44 = 8;
    uint64_t v8 = operator new(0x18uLL);
    v8[4] = 1634165554;
    *(void *)uint64_t v8 = v7;
    *((void *)v8 + 1) = &v42;
    *((void *)v7 + 1) = v8;
    char v42 = (void **)v8;
    uint64_t v44 = 9;
    __int16 v9 = operator new(0x18uLL);
    v9[4] = 1987211570;
    *(void *)__int16 v9 = v8;
    *((void *)v9 + 1) = &v42;
    *((void *)v8 + 1) = v9;
    char v42 = (void **)v9;
    uint64_t v44 = 10;
    int v10 = operator new(0x18uLL);
    v10[4] = 1718186598;
    *(void *)int v10 = v9;
    *((void *)v10 + 1) = &v42;
    *((void *)v9 + 1) = v10;
    char v42 = (void **)v10;
    uint64_t v44 = 11;
    int v11 = operator new(0x18uLL);
    v11[4] = 1868787315;
    *(void *)int v11 = v10;
    *((void *)v11 + 1) = &v42;
    *((void *)v10 + 1) = v11;
    char v42 = (void **)v11;
    uint64_t v44 = 12;
    uint64_t v12 = operator new(0x18uLL);
    v12[4] = 1919906664;
    *(void *)uint64_t v12 = v11;
    *((void *)v12 + 1) = &v42;
    *((void *)v11 + 1) = v12;
    char v42 = (void **)v12;
    uint64_t v44 = 13;
    uint64_t v13 = operator new(0x18uLL);
    void v13[4] = 1836282987;
    *(void *)uint64_t v13 = v12;
    *((void *)v13 + 1) = &v42;
    *((void *)v12 + 1) = v13;
    char v42 = (void **)v13;
    uint64_t v44 = 14;
    char v14 = operator new(0x18uLL);
    v14[4] = 1835165041;
    *(void *)char v14 = v13;
    *((void *)v14 + 1) = &v42;
    *((void *)v13 + 1) = v14;
    char v42 = (void **)v14;
    uint64_t v44 = 15;
    long long v15 = operator new(0x18uLL);
    v15[4] = 1836022387;
    *(void *)long long v15 = v14;
    *((void *)v15 + 1) = &v42;
    *((void *)v14 + 1) = v15;
    char v42 = (void **)v15;
    uint64_t v44 = 16;
    long long v16 = operator new(0x18uLL);
    v16[4] = 1667658347;
    *(void *)long long v16 = v15;
    *((void *)v16 + 1) = &v42;
    *((void *)v15 + 1) = v16;
    char v42 = (void **)v16;
    uint64_t v44 = 17;
    __int16 v17 = operator new(0x18uLL);
    v17[4] = 1886156135;
    *(void *)__int16 v17 = v16;
    *((void *)v17 + 1) = &v42;
    *((void *)v16 + 1) = v17;
    char v42 = (void **)v17;
    uint64_t v44 = 18;
    int v18 = operator new(0x18uLL);
    v18[4] = 1684235106;
    *(void *)int v18 = v17;
    *((void *)v18 + 1) = &v42;
    *((void *)v17 + 1) = v18;
    char v42 = (void **)v18;
    uint64_t v44 = 19;
    __int16 v19 = operator new(0x18uLL);
    v19[4] = 1667525753;
    *(void *)__int16 v19 = v18;
    *((void *)v19 + 1) = &v42;
    *((void *)v18 + 1) = v19;
    char v42 = (void **)v19;
    uint64_t v44 = 20;
    uint64_t v20 = operator new(0x18uLL);
    float v20[4] = 1719166830;
    *(void *)uint64_t v20 = v19;
    *((void *)v20 + 1) = &v42;
    *((void *)v19 + 1) = v20;
    char v42 = (void **)v20;
    uint64_t v44 = 21;
    __int16 v21 = operator new(0x18uLL);
    v21[4] = 1986159982;
    *(void *)__int16 v21 = v20;
    *((void *)v21 + 1) = &v42;
    *((void *)v20 + 1) = v21;
    char v42 = (void **)v21;
    uint64_t v44 = 22;
    int v22 = operator new(0x18uLL);
    v22[4] = 1685287015;
    *(void *)int v22 = v21;
    *((void *)v22 + 1) = &v42;
    *((void *)v21 + 1) = v22;
    char v42 = (void **)v22;
    uint64_t v44 = 23;
    unint64_t v23 = operator new(0x18uLL);
    v23[4] = 1953330036;
    *(void *)unint64_t v23 = v22;
    *((void *)v23 + 1) = &v42;
    *((void *)v22 + 1) = v23;
    char v42 = (void **)v23;
    uint64_t v44 = 24;
    unsigned int v24 = operator new(0x18uLL);
    v24[4] = 1651866219;
    *(void *)unsigned int v24 = v23;
    *((void *)v24 + 1) = &v42;
    *((void *)v23 + 1) = v24;
    char v42 = (void **)v24;
    uint64_t v44 = 25;
    int v25 = operator new(0x18uLL);
    v25[4] = 1635284067;
    *(void *)int v25 = v24;
    *((void *)v25 + 1) = &v42;
    *((void *)v24 + 1) = v25;
    char v42 = (void **)v25;
    uint64_t v44 = 26;
    int v26 = operator new(0x18uLL);
    uint64_t v26[4] = 1936027251;
    *(void *)int v26 = v25;
    *((void *)v26 + 1) = &v42;
    *((void *)v25 + 1) = v26;
    char v42 = (void **)v26;
    uint64_t v44 = 27;
    unint64_t v27 = operator new(0x18uLL);
    v27[4] = 1751216240;
    *(void *)unint64_t v27 = v26;
    *((void *)v27 + 1) = &v42;
    *((void *)v26 + 1) = v27;
    char v42 = (void **)v27;
    uint64_t v44 = 28;
    uint64_t v28 = operator new(0x18uLL);
    v28[4] = 1668312369;
    *(void *)uint64_t v28 = v27;
    *((void *)v28 + 1) = &v42;
    *((void *)v27 + 1) = v28;
    char v42 = (void **)v28;
    uint64_t v44 = 29;
    long long v29 = operator new(0x18uLL);
    v29[4] = 1936747629;
    *(void *)long long v29 = v28;
    *((void *)v29 + 1) = &v42;
    *((void *)v28 + 1) = v29;
    char v42 = (void **)v29;
    uint64_t v44 = 30;
    do
    {
      OSType v30 = *((_DWORD *)v0 + 4);
      OSType v40 = v30;
      inDesc.componentType = 1635083896;
      inDesc.componentSubType = v30;
      *(void *)&inDesc.componentManufacturer = 1634758764;
      inDesc.componentFlagsMask = 0;
      Next = (uint64_t *)AudioComponentFindNext(0, &inDesc);
      if (Next)
      {
        uint64_t v32 = sub_32A48(24);
        if (*(unsigned char *)(v32 + 8))
        {
          char v33 = *(NSObject **)v32;
          if (*(void *)v32)
          {
            if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
            {
              sub_2417C(__p, v30);
              unsigned int v34 = __p;
              if (v39 < 0) {
                unsigned int v34 = (void **)__p[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              uint64_t v46 = "DSPProcessorManager.cpp";
              __int16 v47 = 1024;
              int v48 = 115;
              __int16 v49 = 2080;
              uint64_t v50 = v34;
              _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found an AudioComponent of sub-type %s.", buf, 0x1Cu);
              if (v39 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }
        sub_26CB5C(&qword_64E888, v30, &v40)[5] = Next;
      }
      else
      {
        uint64_t v35 = (os_log_t *)sub_32A48(24);
        uint64_t v36 = *v35;
        if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(__p, v30);
          __int16 v37 = __p;
          if (v39 < 0) {
            __int16 v37 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v46 = "DSPProcessorManager.cpp";
          __int16 v47 = 1024;
          int v48 = 116;
          __int16 v49 = 2080;
          uint64_t v50 = v37;
          _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to find an AudioComponent of sub-type %s.", buf, 0x1Cu);
          if (v39 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      uint64_t v0 = (void **)v0[1];
    }
    while (v0 != (void **)&v42);
    sub_45F50(&v42);
    __cxa_guard_release(&qword_64E8C0);
  }
}

void sub_26F9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_45F50((uint64_t *)va);
  sub_26F0D4((void *)qword_64E8A8);
  sub_463E0((void *)qword_64E890);
  __cxa_guard_abort(&qword_64E8C0);
  _Unwind_Resume(a1);
}

BOOL sub_26FA90(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)(a1 + 92);
  uint64_t v11 = *(void *)(a1 + 92);
  int v12 = *(_DWORD *)(a1 + 100);
  BOOL result = sub_1A1BE4((void *)(a1 + 112), (uint64_t)&v11);
  if (result)
  {
    uint64_t v10 = *v8;
    uint64_t v14 = a4;
    uint64_t v15 = v10;
    int v16 = *(_DWORD *)(a1 + 100);
    uint64_t v11 = *a2;
    int v12 = *((_DWORD *)a2 + 2);
    uint64_t v13 = a3;
    sub_1A4260((void *)(a1 + 112), (unsigned int *)&v15, (uint64_t)&v11);
    uint64_t v11 = *v8;
    int v12 = *(_DWORD *)(a1 + 100);
    return sub_1A1BE4((void *)(a1 + 112), (uint64_t)&v11)
        || sub_FEEF8(*(void *)(a1 + 104), (_DWORD *)(a1 + 92), (uint64_t)sub_26FBB0, a1) == 0;
  }
  return result;
}

void *sub_26FBB0(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*(void **)(a4 + 104) == result && a2 != 0)
  {
    uint64_t v5 = (_DWORD *)(a4 + 92);
    uint64_t v6 = a2;
    for (uint64_t i = (_DWORD *)(a3 + 8); *(i - 1) != *(_DWORD *)(a4 + 96) || *(i - 2) != *v5 || *i != *(_DWORD *)(a4 + 100); i += 3)
    {
      if (!--v6) {
        return result;
      }
    }
    uint64_t v8 = *(void *)v5;
    int v9 = *(_DWORD *)(a4 + 100);
    return sub_1A1D20((void *)(a4 + 112), (unsigned int *)&v8);
  }
  return result;
}

uint64_t sub_26FC44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 92);
  int v14 = *(_DWORD *)(a1 + 100);
  BOOL v8 = sub_1A1BE4((void *)(a1 + 112), (uint64_t)&v13);
  uint64_t v9 = *(void *)(a1 + 92);
  uint64_t v16 = a4;
  uint64_t v17 = v9;
  int v18 = *(_DWORD *)(a1 + 100);
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a3;
  sub_1A4AA0((void *)(a1 + 112), (unsigned int *)&v17, (uint64_t)&v13);
  if (!v8)
  {
    uint64_t v10 = 1;
    if (!sub_FEAC0(*(void *)(a1 + 104), (_DWORD *)(a1 + 92), (uint64_t)sub_26FBB0, a1)) {
      return v10;
    }
    uint64_t v11 = *(void *)(a1 + 92);
    uint64_t v16 = a4;
    uint64_t v17 = v11;
    int v18 = *(_DWORD *)(a1 + 100);
    uint64_t v13 = *a2;
    int v14 = *((_DWORD *)a2 + 2);
    uint64_t v15 = a3;
    sub_1A4260((void *)(a1 + 112), (unsigned int *)&v17, (uint64_t)&v13);
    return 0;
  }
  return 1;
}

std::string *sub_26FD88@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_21C8C(&v28, __str);
  uint64_t v4 = std::string::insert(&v28, 0, "addr: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v29, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v31 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    BOOL v8 = __p;
  }
  else {
    BOOL v8 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v9 = HIBYTE(v31);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  *(void *)std::string __str = *(void *)(a1 + 80);
  int v33 = *(_DWORD *)(a1 + 88);
  sub_16C9C4((uint64_t)&v28, (unsigned int *)__str);
  uint64_t v10 = std::string::insert(&v28, 0, "client addr: ", 0xDuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = std::string::append(&v29, "; ", 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v31 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    int v14 = __p;
  }
  else {
    int v14 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v15 = HIBYTE(v31);
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  *(void *)std::string __str = *(void *)(a1 + 92);
  int v33 = *(_DWORD *)(a1 + 100);
  sub_16C9C4((uint64_t)&v28, (unsigned int *)__str);
  uint64_t v16 = std::string::insert(&v28, 0, "target addr: ", 0xDuLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = std::string::append(&v29, "; ", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v31 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v21 = HIBYTE(v31);
  }
  else {
    std::string::size_type v21 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v20, v21);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  int v22 = *(os_unfair_lock_s **)(a1 + 104);
  if (v22)
  {
    sub_4F64((uint64_t)&v29, v22 + 2);
    unint64_t v23 = std::string::insert(&v29, 0, "; target obj: ", 0xEuLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v31 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0) {
      int v25 = __p;
    }
    else {
      int v25 = (void **)__p[0];
    }
    if (v31 >= 0) {
      std::string::size_type v26 = HIBYTE(v31);
    }
    else {
      std::string::size_type v26 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_270104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2701BC(void **a1, uint64_t *a2)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    long long v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *a2;
      int v15 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v14);
      BOOL v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      long long v19 = "RelayObject.cpp";
      __int16 v20 = 1024;
      int v21 = 60;
      __int16 v22 = 2080;
      unint64_t v23 = v8;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"invalid property address %s\"", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((((uint64_t (*)(void **, uint64_t *))(*a1)[3])(a1, a2) & 1) == 0)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    long long v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *a2;
      int v15 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v14);
      int v12 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      long long v19 = "RelayObject.cpp";
      __int16 v20 = 1024;
      int v21 = 61;
      __int16 v22 = 2080;
      unint64_t v23 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"property %s is read-only\"", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    long long v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v13 = &off_6414D8;
    v13[2] = 1970171760;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*a1[13] + 48);

  return v4();
}

uint64_t sub_2704E8(void **a1, uint64_t *a2)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    long long v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *a2;
      int v11 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v10);
      BOOL v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v15 = "RelayObject.cpp";
      __int16 v16 = 1024;
      int v17 = 54;
      __int16 v18 = 2080;
      long long v19 = v8;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"invalid property address %s\"", buf, 0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*a1[13] + 40);

  return v4();
}

uint64_t sub_2706DC(void **a1)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[2])(a1);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*a1[13] + 32);
    return v3();
  }
  return result;
}

uint64_t sub_270784(void **a1)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[2])(a1);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*a1[13] + 24);
    return v3();
  }
  return result;
}

BOOL sub_270810(_DWORD *a1, _DWORD *a2)
{
  return a2[1] == a1[21] && *a2 == a1[20] && a2[2] == a1[22];
}

void sub_27084C(void *a1)
{
  *a1 = off_6292A0;
  sub_1A97C8((uint64_t)(a1 + 14));
  sub_FE920((uint64_t)a1);

  operator delete();
}

uint64_t sub_2708B4(void *a1)
{
  *a1 = off_6292A0;
  sub_1A97C8((uint64_t)(a1 + 14));

  return sub_FE920((uint64_t)a1);
}

uint64_t sub_270908(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_6292A0;
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 80) = v5;
  LODWORD(v5) = *(_DWORD *)(a3 + 8);
  *(void *)(a1 + 92) = *(void *)a3;
  uint64_t v6 = a1 + 92;
  *(_DWORD *)(a1 + 100) = v5;
  *(void *)(a1 + 104) = a4;
  sub_1A9860(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 104);
  if (!v7 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6) & 1) == 0)
  {
    BOOL v8 = (os_log_t *)sub_32A48(13);
    std::string::size_type v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a1 + 104);
        sub_2417C(__p, *(_DWORD *)(a1 + 92));
        if (v14 >= 0) {
          int v11 = __p;
        }
        else {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v16 = "RelayObject.cpp";
        __int16 v17 = 1024;
        int v18 = 28;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        __int16 v21 = 2080;
        __int16 v22 = v11;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"invalid relay object target. target: %p; property: %s\"",
          buf,
          0x26u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_D26B4(a1);
  return a1;
}

void sub_270AD0(_Unwind_Exception *a1)
{
  sub_1A97C8(v2);
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

void sub_270AFC()
{
  sub_FE37C((uint64_t)v0);
  if (!v1) {
    char v1 = 1;
  }
  v0[2] = 1;
  if (!v3) {
    char v3 = 1;
  }
  int v2 = 2;
  sub_8732C((char *)v4, 0, 0, 0);
  sub_8732C((char *)v5, 0, 0, 0);
  __int16 v6 = 256;
  __int16 v7 = 256;
  __int16 v8 = 256;
  if (!v11) {
    char v11 = 1;
  }
  v10[66] = 0;
  if (!v13) {
    char v13 = 1;
  }
  int v12 = 2;
  if (!v15) {
    char v15 = 1;
  }
  int v14 = 0;
  sub_208140(&v19, 194);
  if (v18)
  {
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v19;
    uint64_t v17 = v20;
    HIBYTE(v20) = 0;
    LOBYTE(v19) = 0;
  }
  else
  {
    long long __p = v19;
    uint64_t v17 = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    char v18 = 1;
  }
  sub_402E04(v0);
  sub_6C690((uint64_t)v10);
  sub_463E0(v9);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
}

void sub_270C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_270C9C()
{
  return 0;
}

uint64_t sub_270CA4(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885564781)
  {
    char v3 = (os_log_t *)sub_32A48(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v13 = "Device_ContinuityCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 100;
      __int16 v16 = 2080;
      uint64_t v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v6 = (os_log_t *)sub_32A48(13);
    __int16 v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v13 = "Device_ContinuityCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 101;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_270E5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_270E78(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 0))
  {
    operator new();
  }
  int v2 = (os_log_t *)sub_32A48(13);
  char v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "Device_ContinuityCapture_Aspen.cpp";
      __int16 v7 = 1024;
      int v8 = 55;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Continuity capture device has no input streams.\"", (uint8_t *)&buf, 0x12u);
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Continuity capture device has no input streams.");
}

void sub_2713B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  if (a26) {
    sub_49A90(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_2714B0(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_2714EC()
{
  return 0;
}

uint64_t sub_2714F4(uint64_t a1, int a2, int **a3, uint64_t a4, uint64_t a5)
{
  int v83 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (a4)
  {
    BOOL v80 = *(unsigned char *)a4 == 0;
    BOOL v7 = *(unsigned char *)(a4 + 3) != 0;
    BOOL v77 = *(unsigned char *)(a4 + 1) != 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v77 = 0;
    BOOL v80 = 1;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    unsigned int v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, *(void *)(a1 + 8), a5);
    *(_DWORD *)(a1 + 16) = v8;
  }
  if (!v80 && v77)
  {
    std::string::size_type v9 = (os_log_t *)sub_32A48(25);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      int v85 = "L75Device.cpp";
      __int16 v86 = 1024;
      int v87 = 222;
      __int16 v88 = 2080;
      uint64_t v89 = "SetDataBlockWithOptions";
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s cannot write memory asynchronously with verifyWrite enabled.", buf, 0x1Cu);
    }
    return 5;
  }
  if (a3[1] == *a3)
  {
    uint64_t v11 = 0;
    if (v7) {
      *(_DWORD *)(a4 + 4) = 0;
    }
    return v11;
  }
  if (a4 && *(unsigned char *)(a4 + 3))
  {
    uint64_t v64 = mach_absolute_time();
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    uint64_t v64 = 0;
  }
  if (v83) {
    char v12 = 2;
  }
  else {
    char v12 = 0;
  }
  char v68 = v12;
  if (v77) {
    uint64_t v82 = malloc_type_calloc(v8, 4uLL, 0x100004052888210uLL);
  }
  else {
    uint64_t v82 = 0;
  }
  __int16 v14 = *a3;
  char v13 = a3[1];
  if (v83)
  {
    int v15 = 0;
  }
  else
  {
    if (v14 == v13)
    {
      int v15 = 0;
      goto LABEL_118;
    }
    BOOL v65 = v7;
    int v15 = 0;
    __int16 v16 = 0;
    uint64_t v17 = 0;
    do
    {
      int v18 = *v14;
      if (v17 >= v16)
      {
        uint64_t v20 = v15;
        uint64_t v21 = v17 - v15;
        unint64_t v22 = v21 + 1;
        unint64_t __p = (unint64_t)v20;
        if (v21 + 1 < 0) {
          sub_60548();
        }
        unint64_t v23 = v16 - v20;
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = v22;
        }
        if (v24) {
          int v25 = operator new(v24);
        }
        else {
          int v25 = 0;
        }
        int v15 = &v25[v21];
        *int v15 = v18;
        long long v19 = v15 + 1;
        if (v17 != (char *)__p)
        {
          std::string::size_type v26 = &v17[~__p];
          do
          {
            char v27 = *--v17;
            (v26--)[(void)v25] = v27;
          }
          while (v17 != (char *)__p);
          int v15 = v25;
        }
        __int16 v16 = &v25[v24];
        if (__p) {
          operator delete((void *)__p);
        }
      }
      else
      {
        char *v17 = v18;
        long long v19 = v17 + 1;
      }
      ++v14;
      uint64_t v17 = v19;
    }
    while (v14 != v13);
    __int16 v14 = *a3;
    char v13 = a3[1];
    BOOL v7 = v65;
  }
  if (v13 == v14)
  {
LABEL_118:
    uint64_t v11 = 0;
    goto LABEL_130;
  }
  BOOL v66 = v7;
  int v74 = 0;
  unint64_t v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = v8 >> v68;
  unint64_t v31 = v13 - v14;
  uint64_t v79 = a1 + 24;
  uint64_t v70 = a4;
  __pa = v15;
  unint64_t v72 = v8 >> v68;
  while (1)
  {
    unsigned int v73 = v29;
    unint64_t v32 = v30 >= v31 - v29 ? v31 - v29 : v30;
    int v33 = (int *)&v15[v28];
    unsigned int v34 = &v14[v28];
    uint64_t v35 = v83 ? v34 : v33;
    uint64_t v36 = v83 ? (unsigned int *)v34 : 0;
    __int16 v37 = v83 ? 0 : (unsigned __int8 *)v33;
    if (*(_DWORD *)(a1 + 16))
    {
      if (!a4) {
        break;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, *(void *)(a1 + 8), a5);
      if (!a4) {
        break;
      }
    }
    if (!*(unsigned char *)(v70 + 2)) {
      break;
    }
    if (v83)
    {
      if (!v32) {
        goto LABEL_115;
      }
      uint64_t v38 = 0;
      unint64_t v39 = (v74 + v31);
      if (v72 < v39) {
        unint64_t v39 = v72;
      }
      do
      {
        unsigned int v40 = *v36++;
        v38 |= v40;
        --v39;
      }
      while (v39);
    }
    else
    {
      if (!v32) {
        goto LABEL_115;
      }
      uint64_t v38 = 0;
      unint64_t v41 = (v74 + v31);
      if (v72 < v41) {
        unint64_t v41 = v72;
      }
      do
      {
        unsigned int v42 = *v37++;
        v38 |= v42;
        --v41;
      }
      while (v41);
    }
    if (v38) {
      break;
    }
LABEL_115:
    unsigned int v30 = v72;
    unint64_t v28 = v73 + v72;
    a4 = v70;
    __int16 v14 = *a3;
    unint64_t v31 = a3[1] - *a3;
    v74 -= v72;
    unsigned int v29 = v73 + v72;
    int v15 = __pa;
    if (v31 <= v28)
    {
      uint64_t v11 = 0;
      BOOL v7 = v66;
      goto LABEL_130;
    }
  }
  uint64_t v43 = v73 + a2;
  uint64_t v44 = (v32 << v68);
  if (v72 >= (v74 + v31)) {
    unint64_t v45 = (v74 + v31);
  }
  else {
    unint64_t v45 = v72;
  }
  uint64_t v78 = &v14[v73];
  char v46 = 1;
  int v47 = 5;
  while (2)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t, BOOL, uint64_t, unint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 56))(a1, *(void *)(a1 + 8), v79, v80, v43, v32, v44, v35, a5);
    if (v11)
    {
      int v48 = (os_log_t *)sub_32A48(25);
      __int16 v49 = *v48;
      if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        int v85 = "L75Device.cpp";
        __int16 v86 = 1024;
        int v87 = 284;
        __int16 v88 = 2080;
        uint64_t v89 = "SetDataBlockWithOptions";
        __int16 v90 = 1024;
        int v91 = v73 + a2;
        __int16 v92 = 1024;
        int v93 = v32;
        __int16 v94 = 1024;
        int v95 = v11;
        __int16 v96 = 1024;
        int v97 = v47 - 1;
        _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s _SetRegister( addr=0x%x, len=%d) failed, status = %d. Tries remaining = %d", buf, 0x34u);
      }
LABEL_89:
      if (--v47) {
        continue;
      }
      if (v11) {
        goto LABEL_122;
      }
      if (v46) {
        goto LABEL_115;
      }
      uint64_t v61 = (os_log_t *)sub_32A48(25);
      uint64_t v62 = *v61;
      BOOL v7 = v66;
      if (!*v61)
      {
        uint64_t v11 = 0xFFFFFFFFLL;
        a4 = v70;
        int v15 = __pa;
        goto LABEL_130;
      }
      int v15 = __pa;
      if (os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        int v85 = "L75Device.cpp";
        __int16 v86 = 1024;
        int v87 = 330;
        __int16 v88 = 2080;
        uint64_t v89 = "SetDataBlockWithOptions";
        _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s verification failed", buf, 0x1Cu);
      }
      uint64_t v11 = 0xFFFFFFFFLL;
LABEL_129:
      a4 = v70;
      goto LABEL_130;
    }
    break;
  }
  if (!v77 || sub_271EC0(a1, v43))
  {
    if (v46) {
      goto LABEL_115;
    }
LABEL_88:
    uint64_t v11 = 0;
    char v46 = 0;
    goto LABEL_89;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *, uint64_t))(*(void *)a1 + 48))(a1, *(void *)(a1 + 8), v79, v43, v32, v44, v82, a5);
  if (!v11)
  {
    if (!v32) {
      goto LABEL_115;
    }
    uint64_t v50 = 0;
    BOOL v51 = 1;
    while (1)
    {
      if (v83)
      {
        int v52 = v78[v50];
        unsigned int v53 = v82[v50];
      }
      else
      {
        int v52 = __pa[v73 + v50];
        unsigned int v53 = *((unsigned __int8 *)v82 + v50);
      }
      if (v52 != v53) {
        BOOL v51 = ((v53 ^ v52) & 0xFFFFFF) == 0 && (v52 & 0xFF800000) == 0x800000 && HIBYTE(v53) == 255;
      }
      if (!v51) {
        break;
      }
      if (v45 == ++v50) {
        goto LABEL_115;
      }
    }
    unsigned int v56 = *(NSObject **)sub_32A48(25);
    if (v56)
    {
      log = v56;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        int v85 = "L75Device.cpp";
        __int16 v86 = 1024;
        int v87 = 315;
        __int16 v88 = 2080;
        uint64_t v89 = "SetDataBlockWithOptions";
        __int16 v90 = 1024;
        int v91 = v52;
        __int16 v92 = 1024;
        int v93 = v53;
        __int16 v94 = 1024;
        int v95 = v43 + v50;
        __int16 v96 = 1024;
        int v97 = v47;
        _os_log_impl(&def_1E50E8, log, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s verify failed (0x%x != 0x%x), addr=0x%x. Tries remaining = %u", buf, 0x34u);
      }
    }
    goto LABEL_88;
  }
  unsigned int v57 = (os_log_t *)sub_32A48(25);
  uint64_t v58 = *v57;
  if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136316418;
    int v85 = "L75Device.cpp";
    __int16 v86 = 1024;
    int v87 = 291;
    __int16 v88 = 2080;
    uint64_t v89 = "SetDataBlockWithOptions";
    __int16 v90 = 1024;
    int v91 = v73 + a2;
    __int16 v92 = 1024;
    int v93 = v32;
    __int16 v94 = 1024;
    int v95 = v11;
    _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s _GetRegister( addr=0x%x, len=%d) failed, status = %d", buf, 0x2Eu);
  }
LABEL_122:
  int v59 = (os_log_t *)sub_32A48(25);
  uint64_t v60 = *v59;
  BOOL v7 = v66;
  int v15 = __pa;
  if (!*v59) {
    goto LABEL_129;
  }
  a4 = v70;
  if (os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315650;
    int v85 = "L75Device.cpp";
    __int16 v86 = 1024;
    int v87 = 325;
    __int16 v88 = 2080;
    uint64_t v89 = "SetDataBlockWithOptions";
    _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s Failed", buf, 0x1Cu);
  }
LABEL_130:
  if (v77) {
    free(v82);
  }
  if (v7) {
    *(_DWORD *)(a4 + 4) = sub_2969F8(v64);
  }
  if (v15) {
    operator delete(v15);
  }
  return v11;
}

void sub_271E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_271EC0(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 5) <= a2
      && *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 5) + 4) >= a2
      || *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 4) <= a2
      && *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 4) + 4) >= a2;
}

uint64_t sub_271FCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  int v5 = sub_3D42D8(a2, 1935831628, (uint64_t)v27, a3);
  if (v5 || (int v5 = sub_3D42D8(a2, 1935832908, (uint64_t)v25, a3)) != 0)
  {
    std::string::size_type v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_21C8C(&v19, "GetPropertyRange failed, status=");
    std::to_string(&v18, v5);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v18;
    }
    else {
      uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    char v12 = std::string::append(&v19, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)&v20[16] = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v20 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v9, (const std::string *)v20);
  }
  unsigned int v6 = v28;
  int v7 = v26;
  if (!v28 || v28 != v26)
  {
    int v15 = (os_log_t *)sub_32A48(25);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v20 = 136316162;
      *(void *)&float v20[4] = "L75Device.cpp";
      *(_DWORD *)&v20[14] = 51;
      *(_WORD *)&v20[18] = 2080;
      *(_WORD *)&v20[12] = 1024;
      *(void *)&v20[20] = "GetBufferSize";
      __int16 v21 = 1024;
      unsigned int v22 = v6;
      __int16 v23 = 1024;
      int v24 = v7;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s ERROR: Audio driver returned invalid buffer lengths (read=%u, write=%u)", v20, 0x28u);
    }
    uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Audio driver returned invalid buffer lengths");
  }
  return v28;
}

void sub_27222C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_2722B0(int a1, uint64_t a2, NSObject **a3, uint64_t a4, int a5, int a6, size_t size, void *buffer, uint64_t a9)
{
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = -1;
  if (!a9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  if (a6)
  {
    uint64_t v9 = a4;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000;
    v14[2] = sub_272440;
    v14[3] = &unk_6294E0;
    int v15 = size;
    int v16 = a5;
    v14[6] = a2;
    v14[7] = a9;
    int v17 = a6;
    char v18 = a4;
    v14[4] = &v19;
    v14[5] = dispatch_data_create(buffer, size, 0, 0);
    uint64_t v11 = *a3;
    if (v9)
    {
      dispatch_sync(v11, v14);
      uint64_t v9 = *((unsigned int *)v20 + 6);
    }
    else
    {
      dispatch_async(v11, v14);
      *((_DWORD *)v20 + 6) = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  _Block_object_dispose(&v19, 8);
  return v9;
}

void sub_272418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_272440(uint64_t a1)
{
  size_t v11 = 0;
  buffer_ptr = 0;
  int v2 = dispatch_data_create_map(*(dispatch_data_t *)(a1 + 40), (const void **)&buffer_ptr, &v11);
  if (v11 >= *(unsigned int *)(a1 + 64))
  {
    int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x73627761u, 0, 0, 4, (float *)(a1 + 68), *(void *)(a1 + 56));
    if (!v6)
    {
      int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x7362776Cu, 0, 0, 4, (float *)(a1 + 72), *(void *)(a1 + 56));
      if (!v6)
      {
        *(_DWORD *)int buf = 0;
        int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x63616E63u, 4, (uint64_t)buf, *(unsigned int *)(a1 + 64), (float *)buffer_ptr, *(void *)(a1 + 56));
      }
    }
  }
  else
  {
    char v3 = (os_log_t *)sub_32A48(25);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)int buf = 136316162;
      __int16 v14 = "L75Device.cpp";
      __int16 v15 = 1024;
      int v16 = 75;
      __int16 v17 = 2080;
      char v18 = "SetRegister_block_invoke";
      __int16 v19 = 2048;
      *(void *)uint64_t v20 = v11;
      *(_WORD *)&v20[8] = 1024;
      v21[0] = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s Invalid data buffer size (%lu != %u)", buf, 0x2Cu);
    }
    int v6 = -2;
  }
  dispatch_release(v2);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  if (v6)
  {
    int v7 = (os_log_t *)sub_32A48(25);
    unsigned int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = *(_DWORD *)(a1 + 68);
        int v10 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)int buf = 136316418;
        __int16 v14 = "L75Device.cpp";
        __int16 v15 = 1024;
        int v16 = 89;
        __int16 v17 = 2080;
        char v18 = "SetRegister_block_invoke";
        __int16 v19 = 1024;
        *(_DWORD *)uint64_t v20 = v9;
        *(_WORD *)&float v20[4] = 1024;
        *(_DWORD *)&v20[6] = v10;
        LOWORD(v21[0]) = 1024;
        *(_DWORD *)((char *)v21 + 2) = v6;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s failed, addr=0x%x, length=0x%x, status = 0x%x", buf, 0x2Eu);
      }
    }
  }
  if (*(unsigned char *)(a1 + 76)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
  }
}

uint64_t sub_2726A8(uint64_t a1, uint64_t a2, NSObject **a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  int v23 = -1;
  if (!a8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  uint64_t v8 = a5;
  if (a5)
  {
    int v10 = *a3;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000;
    v16[2] = sub_2728C0;
    uint64_t v16[3] = &unk_629530;
    v16[4] = &v20;
    v16[5] = a2;
    int v17 = a4;
    int v18 = a5;
    int v19 = a6;
    v16[6] = a8;
    v16[7] = a7;
    dispatch_sync(v10, v16);
    if (*((_DWORD *)v21 + 6))
    {
      size_t v11 = (os_log_t *)sub_32A48(25);
      char v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          int v13 = *((_DWORD *)v21 + 6);
          *(_DWORD *)int buf = 136316418;
          int v25 = "L75Device.cpp";
          __int16 v26 = 1024;
          int v27 = 128;
          __int16 v28 = 2080;
          unsigned int v29 = "GetRegister";
          __int16 v30 = 1024;
          int v31 = a4;
          __int16 v32 = 1024;
          int v33 = v8;
          __int16 v34 = 1024;
          int v35 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d L75Device::%s failed, addr=0x%x, length=0x%x, status = 0x%x", buf, 0x2Eu);
        }
      }
    }
    uint64_t v8 = *((unsigned int *)v21 + 6);
  }
  _Block_object_dispose(&v20, 8);
  return v8;
}

void sub_272894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2728C0(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_27294C;
  v3[3] = &unk_629508;
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 72);
  long long v1 = *(_OWORD *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = v1;
  return sub_61CCC((uint64_t)v3);
}

uint64_t sub_27294C(uint64_t a1)
{
  uint64_t result = sub_3D3C98(*(uint64_t **)(a1 + 40), 0x73627261u, 0, 0, 4, (float *)(a1 + 64), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!result)
  {
    uint64_t result = sub_3D3C98(*(uint64_t **)(a1 + 40), 0x7362726Cu, 0, 0, 4, (float *)(a1 + 68), *(void *)(a1 + 48));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (!result)
    {
      int v3 = *(_DWORD *)(a1 + 72);
      int v4 = 0;
      uint64_t result = sub_3D3FC8(*(uint64_t **)(a1 + 40), 0x63616E63u, 4, (uint64_t)&v4, &v3, *(float **)(a1 + 56), *(void *)(a1 + 48));
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

BOOL sub_272A10(uint64_t a1, int a2)
{
  return (a2 & 0xFFF00000) == 0x800000;
}

char *sub_272A20(uint64_t a1, int a2)
{
  return &aPtspptrpt2aptf[8 * a2 + 96];
}

void sub_272A30(uint64_t a1)
{
  sub_633DC(a1);

  operator delete();
}

void sub_272A6C()
{
  v0[0] = 0;
  v0[4] = 0;
  v0[8] = 0;
  v0[12] = 0;
  sub_20A0D0();
  char v2 = 1;
  *(_OWORD *)int v3 = 0u;
  *(_OWORD *)int v4 = 0u;
  long long v5 = 0u;
  sub_6CBEC();
  uint64_t v8 = 0x101010101010000;
  __int16 v9 = 0;
  int v10 = 16777473;
  v12[0] = 0;
  v12[1] = 0;
  size_t v11 = (uint64_t *)v12;
  __int16 v13 = 0;
  char v14 = 0;
  int v15 = -1044381696;
  char v16 = 1;
  int v17 = -1044381696;
  char v18 = 1;
  int v19 = 0;
  char v20 = 1;
  int v21 = -1056964608;
  char v22 = 1;
  int v23 = -1033371648;
  char v24 = 1;
  int v25 = 0;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1044381696;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1033371648;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = -1055916032;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = 0;
  char v46 = 1;
  int v47 = -1055916032;
  char v48 = 1;
  int v49 = -1033371648;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = 0;
  char v56 = 1;
  int v57 = -1055916032;
  char v58 = 1;
  int v59 = -1043333120;
  char v60 = 1;
  int v61 = 0x40000000;
  char v62 = 1;
  int v63 = 16777472;
  int v64 = 0;
  char v65 = 1;
  int v66 = 0;
  char v67 = 1;
  int v68 = 1103626240;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1094713344;
  char v73 = 1;
  int v74 = 1094713344;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = -1061158912;
  char v79 = 1;
  int v80 = 1107296256;
  char v81 = 1;
  int v82 = 1107296256;
  char v83 = 1;
  int v84 = 1092616192;
  char v85 = 1;
  int v86 = 0;
  char v87 = 1;
  int v88 = 0;
  char v89 = 1;
  int v90 = 16777472;
  v91[0] = 0;
  v91[72] = 0;
  v91[80] = 0;
  v91[120] = 0;
  v91[128] = 0;
  v91[200] = 0;
  v91[208] = 0;
  v91[248] = 0;
  v91[256] = 0;
  v91[260] = 0;
  v91[264] = 0;
  v91[268] = 0;
  LOBYTE(v92) = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  LOBYTE(v104) = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 1;
  char v123 = 0;
  char v124 = 0;
  LOBYTE(v125) = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 0;
  char v132 = 0;
  __int16 v133 = 0;
  char v134 = 0;
  char v135 = 0;
  char v136 = 0;
  char v137 = 0;
  char v138 = 0;
  char v139 = 0;
  char v140 = 0;
  char v141 = 0;
  char v142 = 0;
  char v143 = 0;
  LOBYTE(v144) = 0;
  char v145 = 0;
  LOBYTE(v146) = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  char v152 = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(__p) = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  char v164 = 0;
  int v165 = 256;
  char v166 = 0;
  char v167 = 0;
  char v168 = 0;
  char v169 = 0;
  char v170 = 0;
  char v171 = 0;
  __int16 v172 = 0;
  int v6 = 16843009;
  __int16 v7 = 257;
  int v1 = 4;
  *(void *)&long long __src = 0x300000002;
  sub_8732C((char *)&v4[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  LODWORD(__src) = 3;
  sub_8732C((char *)v3, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  LODWORD(__src) = 1768776806;
  sub_6C4EC(&v11, (unsigned int *)&__src, (unsigned int *)&__src + 1);
  int v88 = 1090519040;
  char v89 = 1;
  int v84 = 1077936128;
  char v85 = 1;
  HIWORD(v63) = 257;
  int v146 = 39;
  char v147 = 1;
  int v125 = 36;
  char v126 = 1;
  int v144 = 14;
  char v145 = 1;
  int v98 = 7;
  char v99 = 1;
  int v100 = 25;
  char v101 = 1;
  int v102 = 32;
  char v103 = 1;
  int v104 = 7;
  char v105 = 1;
  int v106 = 5;
  char v107 = 1;
  int v110 = 5;
  char v111 = 1;
  if (!v155) {
    char v155 = 1;
  }
  int v154 = 2;
  if (!v93) {
    char v93 = 1;
  }
  int v92 = 2;
  sub_208140(&__src, 25);
  if (v158)
  {
    if (SHIBYTE(v157) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v157 = v174;
  }
  else
  {
    long long __p = __src;
    uint64_t v157 = v174;
    char v158 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)v91);
  sub_463E0(v12[0]);
  if (v4[1])
  {
    *(void **)&long long v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_272FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_273004()
{
  qword_64EA30 = IOHIDEventSystemClientCreate();
  qword_64EA38 = 0;
  qword_64EA58 = 0;
  if (!qword_64EA30)
  {
    long long v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int v15 = "HIDEventSystemClient.cpp";
      __int16 v16 = 1024;
      v17[0] = 31;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  LODWORD(v10) = 11;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &v10);
  if (!cf)
  {
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }
  sub_C9C94((uint64_t)buf, "PrimaryUsagePage", &cf);
  int valuePtr = 1;
  CFNumberRef v0 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v10 = v0;
  if (!v0)
  {
    __int16 v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  sub_C9CD8((uint64_t)v17 + 2, "PrimaryUsage", (const void **)&v10);
  v12[0] = buf;
  v12[1] = 2;
  CFDictionaryRef v1 = sub_4D3D8((uint64_t)v12);
  uint64_t v2 = 0;
  v12[2] = v1;
  do
  {
    int v3 = *(const void **)((char *)&v17[v2 + 2] + 2);
    if (v3) {
      CFRelease(v3);
    }
    int v4 = *(const void **)((char *)&v17[v2] + 2);
    if (v4) {
      CFRelease(v4);
    }
    v2 -= 4;
  }
  while (v2 != -8);
  CFRelease(v0);
  if (cf) {
    CFRelease(cf);
  }
  IOHIDEventSystemClientSetMatching();
  IOHIDEventSystemClientRegisterDeviceMatchingCallback();
  IOHIDEventSystemClientRegisterEventCallback();
  sub_13910();
  IOHIDEventSystemClientSetDispatchQueue();
  IOHIDEventSystemClientActivate();
  sub_273424((uint64_t)&qword_64EA30);
  sub_27347C((uint64_t)&qword_64EA30);
  CFRelease(v1);
}

void sub_273304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
}

void sub_273424(uint64_t a1)
{
  CFArrayRef v2 = IOHIDEventSystemClientCopyServices(*(IOHIDEventSystemClientRef *)a1);
  sub_68780(&v4, v2);
  int v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  int v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t sub_27347C(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    int v3 = sub_273510(result);
    uint64_t v2 = *(void *)(v1 + 40);
    if (!v2) {
      sub_56964();
    }
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

void sub_2734E8()
{
  if (qword_64EA30) {
    CFRelease((CFTypeRef)qword_64EA30);
  }
}

uint64_t sub_273510(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    size_t v11 = (os_log_t *)sub_32A48(16);
    char v12 = *v11;
    if (*v11)
    {
      uint64_t v4 = 0;
      if (!os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT)) {
        return v4;
      }
      *(_DWORD *)int buf = 136315394;
      int v19 = "HIDEventSystemClient.cpp";
      __int16 v20 = 1024;
      int v21 = 85;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d IOHIDEventSystemClientCopyServices(mHidSystemClient) returned null", buf, 0x12u);
    }
    return 0;
  }
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v17 = 0x200000001;
  do
  {
    char v5 = v2;
    uint64_t v6 = *(unsigned int *)&buf[4 * v3 - 8];
    KeyboardEvent = (const void *)IOHIDEventCreateKeyboardEvent();
    for (CFIndex i = 0; i < CFArrayGetCount(*(CFArrayRef *)(a1 + 8)); ++i)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
      __int16 v9 = (const void *)IOHIDServiceClientCopyEvent();
      if (v9)
      {
        if (IOHIDEventGetIntegerValue())
        {
          if (v6 > 0x20) {
            goto LABEL_25;
          }
          int v10 = v6;
          if (((1 << v6) & 0x100010006) == 0)
          {
            if (v6 == 3)
            {
              int v10 = 4;
            }
            else
            {
              if (v6 != 4)
              {
LABEL_25:
                char v14 = (os_log_t *)sub_32A48(13);
                int v15 = *v14;
                if (*v14)
                {
                  if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136315394;
                    int v19 = "HIDEventSystemClient.cpp";
                    __int16 v20 = 1024;
                    int v21 = 102;
                    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"SmartCoverState::Unknown usage\"", buf, 0x12u);
                  }
                }
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "SmartCoverState::Unknown usage");
              }
              int v10 = 8;
            }
          }
          uint64_t v4 = v10 | v4;
        }
        CFRelease(v9);
      }
    }
    if (KeyboardEvent) {
      CFRelease(KeyboardEvent);
    }
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) == 0);
  return v4;
}

void sub_2737C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11)
{
  __cxa_free_exception(v11);
  sub_27381C(&a10);
  sub_27381C(&a11);
  _Unwind_Resume(a1);
}

const void **sub_27381C(const void **a1)
{
  char v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_273850(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = IOHIDEventGetIntegerValue();
    if (result == 65289)
    {
      return sub_27347C(v1);
    }
  }
  return result;
}

uint64_t sub_2738AC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    IOHIDServiceClientRegisterRemovalCallback();
    sub_273424(v1);
    return sub_27347C(v1);
  }
  return result;
}

uint64_t sub_273910(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_273424(result);
    return sub_27347C(v1);
  }
  return result;
}

void sub_273950()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64EA60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64EA60))
  {
    sub_273004();
    __cxa_guard_release(&qword_64EA60);
  }
}

void sub_2739B4(_Unwind_Exception *a1)
{
}

void sub_2739CC(uint64_t a1)
{
  if (!atomic_load((unsigned int *)(a1 + 16)))
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    __int16 v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "AggregateDevice_IODelegate.cpp";
      __int16 v11 = 1024;
      int v12 = 39;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v3 = sub_32A48(31);
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v5 = atomic_load((unsigned int *)(a1 + 16));
        int v9 = 136315650;
        int v10 = "AggregateDevice_IODelegate.cpp";
        __int16 v11 = 1024;
        int v12 = 40;
        __int16 v13 = 1024;
        unsigned int v14 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informed to Handle IO Stop, current start count %u", (uint8_t *)&v9, 0x18u);
      }
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 0xFFFFFFFF) == 1 && !sub_273E0C(a1)) {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  }
}

void sub_273B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (a2)
  {
    __cxa_free_exception(v14);
    if (a2 == 3)
    {
      uint64_t v17 = __cxa_begin_catch(exception_object);
      char v18 = (os_log_t *)sub_32A48(13);
      int v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        int v20 = v17[2];
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 429;
        WORD1(a10) = 1024;
        DWORD1(a10) = v20;
        WORD4(a10) = 2080;
        *(void *)((char *)&a10 + 10) = "";
        a12 = 1024;
        a13 = 48;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).", (uint8_t *)&a9, 0x28u);
      }
    }
    else
    {
      int v21 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        char v22 = v21;
        int v23 = (os_log_t *)sub_32A48(13);
        char v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
          LODWORD(a9) = 136316162;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 430;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v25;
          WORD6(a10) = 2080;
          *(void *)((char *)&a10 + 14) = "";
          HIWORD(a13) = 1024;
          a14 = 48;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).", (uint8_t *)&a9, 0x2Cu);
        }
      }
      else
      {
        char v26 = (os_log_t *)sub_32A48(13);
        int v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315906;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 431;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = "";
          WORD6(a10) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = 48;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).", (uint8_t *)&a9, 0x22u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x273AB4);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_273E0C(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    __int16 v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int v20 = "AggregateDevice_IODelegate.cpp";
      __int16 v21 = 1024;
      int v22 = 71;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(void *)(a1 + 24))
  {
    unsigned int v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int v20 = "AggregateDevice_IODelegate.cpp";
      __int16 v21 = 1024;
      int v22 = 72;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    __int16 v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }
  char v2 = (os_log_t *)sub_32A48(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v4 = atomic_load((unsigned int *)(a1 + 16));
    *(_DWORD *)int buf = 136315650;
    int v20 = "AggregateDevice_IODelegate.cpp";
    __int16 v21 = 1024;
    int v22 = 74;
    __int16 v23 = 1024;
    LODWORD(v24) = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d hardstop called: mStart = %d", buf, 0x18u);
  }
  unsigned int v5 = sub_3D6EF8(*(AudioObjectID **)(a1 + 24), **(OSStatus (__cdecl ***)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 8));
  if (v5)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(16);
    __int16 v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, v5);
      if (v18 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      int v20 = "AggregateDevice_IODelegate.cpp";
      __int16 v21 = 1024;
      int v22 = 80;
      __int16 v23 = 2080;
      char v24 = v8;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stop failed with status %s on AggregateDevice IO Delegate", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    int v9 = 1;
  }
  else
  {
    int v9 = 0;
  }
  return v9 == 0;
}

void sub_274124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2743A0(uint64_t a1)
{
  uint64_t v2 = sub_32A48(31);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v4 = atomic_load((unsigned int *)(a1 + 16));
        int v5 = 136315650;
        uint64_t v6 = "AggregateDevice_IODelegate.cpp";
        __int16 v7 = 1024;
        int v8 = 23;
        __int16 v9 = 1024;
        unsigned int v10 = v4;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informed to Handle IO Start, current start count is %u", (uint8_t *)&v5, 0x18u);
      }
    }
  }
  if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u) && !sub_2744A0(a1)) {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 0xFFFFFFFF);
  }
}

BOOL sub_2744A0(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    unsigned int v10 = (os_log_t *)sub_32A48(13);
    __int16 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int v19 = "AggregateDevice_IODelegate.cpp";
      __int16 v20 = 1024;
      int v21 = 54;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(void *)(a1 + 24))
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    unsigned int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int v19 = "AggregateDevice_IODelegate.cpp";
      __int16 v20 = 1024;
      int v21 = 55;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Precondition failure.");
  }
  uint64_t v2 = (os_log_t *)sub_32A48(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v4 = atomic_load((unsigned int *)(a1 + 16));
    *(_DWORD *)int buf = 136315650;
    int v19 = "AggregateDevice_IODelegate.cpp";
    __int16 v20 = 1024;
    int v21 = 57;
    __int16 v22 = 1024;
    LODWORD(v23) = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d hardstart called: mStart = %d", buf, 0x18u);
  }
  unsigned int v5 = sub_3D6DA4(*(AudioObjectID **)(a1 + 24), **(OSStatus (__cdecl ***)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 8));
  if (v5)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(16);
    __int16 v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, v5);
        if (v17 >= 0) {
          int v8 = __p;
        }
        else {
          int v8 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315650;
        int v19 = "AggregateDevice_IODelegate.cpp";
        __int16 v20 = 1024;
        int v21 = 62;
        __int16 v22 = 2080;
        __int16 v23 = v8;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Start failed with status %s on AggregateDevice IO Delegate", buf, 0x1Cu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v5 == 0;
}

void sub_2747A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2747C0(void *a1)
{
  *a1 = off_63C9A0;
  uint64_t v1 = a1 + 1;
  sub_86524(a1 + 3);
  sub_864D4(v1);

  operator delete();
}

void *sub_274834(void *a1)
{
  *a1 = off_63C9A0;
  uint64_t v2 = a1 + 1;
  sub_86524(a1 + 3);
  sub_864D4(v2);
  return a1;
}

uint64_t sub_274888()
{
  return 0;
}

void sub_274890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(17);
  uint64_t v7 = sub_32A48(28);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_7;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  __int16 v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v14 = *(const __CFString **)(a1 + 248);
    CFStringRef v36 = v14;
    char v37 = *(unsigned char *)(a1 + 256);
    if (v37 && v14) {
      CFRetain(v14);
    }
    sub_21B7C(v38, v14);
    int v15 = v39;
    __int16 v16 = v38[0];
    sub_104C68(&__p, a3);
    char v17 = v38;
    if (v15 < 0) {
      char v17 = (std::__shared_weak_count **)v16;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
    __int16 v41 = 1024;
    int v42 = 473;
    __int16 v43 = 2080;
    char v44 = v17;
    __int16 v45 = 2080;
    char v46 = p_p;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio port with UID \"%s\": headset status %s", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    sub_72924((uint64_t)&v36);
  }
  if (*(unsigned char *)(a3 + 12))
  {
    if (*(_DWORD *)a3 != *(_DWORD *)a2)
    {
      LODWORD(v38[0]) = 1651796336;
      sub_81364(buf, (uint64_t)v38, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
    if (*(_DWORD *)(a3 + 4) != *(_DWORD *)(a2 + 4))
    {
      LODWORD(v38[0]) = 1651796339;
      sub_81364(buf, (uint64_t)v38, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
    if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a2 + 8))
    {
      LODWORD(v38[0]) = 1651798131;
      sub_81364(buf, (uint64_t)v38, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
    int v19 = *(unsigned __int8 *)(a3 + 12);
    int v20 = -1;
    if (*(_DWORD *)a3 != -1)
    {
      if (*(unsigned char *)(a3 + 12))
      {
        int v20 = 1;
        if (*(_DWORD *)a3 != 1)
        {
          if (*(_DWORD *)(a3 + 4) == 1) {
            int v20 = 1;
          }
          else {
            int v20 = 2;
          }
        }
      }
    }
    int v21 = *(unsigned __int8 *)(a2 + 12);
    int v22 = -1;
    if (*(_DWORD *)a2 != -1)
    {
      if (*(unsigned char *)(a2 + 12))
      {
        int v22 = 1;
        if (*(_DWORD *)a2 != 1)
        {
          if (*(_DWORD *)(a2 + 4) == 1) {
            int v22 = 1;
          }
          else {
            int v22 = 2;
          }
        }
      }
    }
    if (v20 != v22)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1)
        || *(_DWORD *)a3 != -1 && *(unsigned char *)(a3 + 12) && (*(_DWORD *)a3 == 1 || *(_DWORD *)(a3 + 4) == 1))
      {
        uint64_t v25 = sub_32A48(17);
        uint64_t v26 = sub_32A48(28);
        char v27 = 0;
        uint64_t v28 = 0;
        *(void *)int buf = 0x100000002;
        uint64_t v29 = *(void *)(v25 + 8);
        while (1)
        {
          uint64_t v30 = *(int *)&buf[4 * v28];
          char v31 = v27;
          if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
            break;
          }
          char v27 = 1;
          uint64_t v28 = 1;
          if (v31) {
            goto LABEL_68;
          }
        }
        if ((v29 & v30) == 0) {
          uint64_t v25 = v26;
        }
LABEL_68:
        char v32 = *(NSObject **)v25;
        if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v33 = *(const __CFString **)(a1 + 248);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
          __p.__r_.__value_.__s.__data_[8] = *(unsigned char *)(a1 + 256);
          if (__p.__r_.__value_.__s.__data_[8] && v33) {
            CFRetain(v33);
          }
          sub_21B7C(v38, v33);
          if (v39 >= 0) {
            char v34 = v38;
          }
          else {
            char v34 = (std::__shared_weak_count **)v38[0];
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
          __int16 v41 = 1024;
          int v42 = 500;
          __int16 v43 = 2080;
          char v44 = v34;
          _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio device with UID \"%s\": routability unchanged due to negative ownership status", buf, 0x1Cu);
          if (v39 < 0) {
            operator delete(v38[0]);
          }
          sub_72924((uint64_t)&__p);
        }
      }
      else
      {
        __int16 v23 = *(std::__shared_weak_count **)(a1 + 88);
        v38[0] = *(std::__shared_weak_count **)(a1 + 80);
        v38[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_DD9D0((uint64_t *)buf, (uint64_t *)v38, 1);
        sub_275074(a1, (uint64_t)buf, 0);
        sub_8108((uint64_t *)buf);
        if (v38[1]) {
          std::__shared_weak_count::__release_weak(v38[1]);
        }
      }
      LODWORD(v38[0]) = 1651796325;
      sub_81364(buf, (uint64_t)v38, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
      int v19 = *(unsigned __int8 *)(a3 + 12);
      int v21 = *(unsigned __int8 *)(a2 + 12);
    }
    if (v19 != v21)
    {
      *(_OWORD *)char v38 = xmmword_4E7A60;
      sub_81364(buf, (uint64_t)v38, 4);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
  }
  else if (*(unsigned char *)(a2 + 12))
  {
    *(_OWORD *)char v38 = xmmword_4E7A60;
    sub_81364(buf, (uint64_t)v38, 4);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
    sub_45F50(buf);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1))
    {
      if (*(_DWORD *)a3 == -1
        || !*(unsigned char *)(a3 + 12)
        || *(_DWORD *)a3 != 1 && *(_DWORD *)(a3 + 4) != 1
        || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1))
      {
        char v24 = *(std::__shared_weak_count **)(a1 + 88);
        v38[0] = *(std::__shared_weak_count **)(a1 + 80);
        v38[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_DD9D0((uint64_t *)buf, (uint64_t *)v38, 1);
        sub_275074(a1, (uint64_t)buf, 1);
        sub_8108((uint64_t *)buf);
        if (v38[1]) {
          std::__shared_weak_count::__release_weak(v38[1]);
        }
      }
    }
  }
}

void sub_274FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
}

unsigned char *sub_275074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(17);
  uint64_t v7 = sub_32A48(28);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_7;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  __int16 v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v14 = *(const void **)(a1 + 248);
    int v20 = v14;
    char v21 = *(unsigned char *)(a1 + 256);
    if (v21 && v14) {
      CFRetain(v14);
    }
    sub_38200C(&__p, a2);
    int v15 = "false";
    if (a3) {
      int v15 = "true";
    }
    *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136316162;
    __int16 v23 = 1024;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    int v24 = 461;
    __int16 v25 = 2112;
    uint64_t v26 = v14;
    __int16 v27 = 2080;
    uint64_t v28 = v15;
    __int16 v29 = 2080;
    uint64_t v30 = p_p;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio device with UID \"%@\": setting routability to %s for ports %s", buf, 0x30u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_72924((uint64_t)&v20);
  }
  char v17 = (_DWORD *)sub_10FBF0();
  return sub_112F90(v17, a2, a3, 0);
}

void sub_275254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_275270(uint64_t a1)
{
  uint64_t v1 = sub_99A40(a1);
  *((void *)&v4 + 1) = v2;
  *(void *)&long long v4 = v1;
  uint64_t v3 = v4 >> 32;
  if ((v3 & 0xFF00000000) != 0) {
    return v3;
  }
  else {
    return 0;
  }
}

BOOL sub_2752B8(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return (v1 & 0xFF00000000) == 0 || v1 != 1701869160;
}

uint64_t sub_275304(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 664);
}

uint64_t sub_27530C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 524);
}

unsigned char *sub_275318(unsigned char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return result;
  }
  long long v4 = result;
  do
  {
    unsigned int v5 = (uint64_t *)*((void *)v4 + 81);
    if (!v5)
    {
LABEL_32:
      char v21 = (os_log_t *)sub_32A48(13);
      int v22 = *v21;
      if (*v21)
      {
        if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
          __int16 v32 = 1024;
          int v33 = 448;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    unsigned int v6 = *(_DWORD *)(v2 + 16);
    while (1)
    {
      unsigned int v7 = *((_DWORD *)v5 + 8);
      if (v7 <= v6) {
        break;
      }
LABEL_8:
      unsigned int v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_32;
      }
    }
    if (v7 < v6)
    {
      ++v5;
      goto LABEL_8;
    }
    uint64_t v8 = sub_32A48(23);
    uint64_t v9 = sub_32A48(28);
    char v10 = 0;
    uint64_t v11 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1;
      if (v14) {
        goto LABEL_16;
      }
    }
    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_16:
    int v15 = *(NSObject **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(v29, v6);
      if (v30 >= 0) {
        __int16 v16 = v29;
      }
      else {
        __int16 v16 = (void **)v29[0];
      }
      (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)v4 + 144))(v28, v4);
      uint64_t v17 = v28[0];
      char v18 = (const void *)*((void *)v4 + 31);
      uint64_t v26 = v18;
      char v27 = v4[256];
      if (v27 && v18) {
        CFRetain(v18);
      }
      sub_2417C(__p, *((_DWORD *)v4 + 36));
      int v19 = __p;
      if (v25 < 0) {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 452;
      __int16 v34 = 2080;
      int v35 = v16;
      __int16 v36 = 2112;
      uint64_t v37 = v17;
      __int16 v38 = 2112;
      char v39 = v18;
      __int16 v40 = 2080;
      __int16 v41 = v19;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Notifying listeners: changed property %s for port with name \"%@\", UID \"%@\", and type '%s'", buf, 0x3Au);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)&v26);
      sub_72924((uint64_t)v28);
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    int v20 = sub_112658(*((uint64_t **)v4 + 81), v6);
    uint64_t result = sub_354DB8((uint64_t)v20);
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != a2);
  return result;
}

void sub_275654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2756A8(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)(a1 + 192) + 528));
  return v1 != 2;
}

uint64_t sub_2756C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  int v2 = *(_DWORD *)(v1 + 500);
  if (v2 == -1 || !*(unsigned char *)(v1 + 512)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 1;
  if (v2 != 1)
  {
    if (*(_DWORD *)(v1 + 504) == 1) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t sub_2756FC(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 497);
}

unsigned char *sub_275708(uint64_t a1, uint64_t a2)
{
  sub_101D4C(a1, a2);
  uint64_t v3 = sub_112658(*(uint64_t **)(a1 + 648), 0x706E616Du);

  return sub_354DB8((uint64_t)v3);
}

uint64_t sub_27574C(uint64_t a1)
{
  uint64_t v1 = atomic_load((unsigned int *)(*(void *)(a1 + 192) + 492));
  return v1 | 0x100000000;
}

NSObject *sub_275760(uint64_t a1, int *a2, unint64_t a3, unint64_t a4)
{
  if (!*(void *)(a1 + 648))
  {
LABEL_7:
    return sub_104850((void *)a1, a2, a3, a4);
  }
  unsigned int v6 = *a2;
  unsigned int v7 = *(uint64_t **)(a1 + 648);
  while (1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v6 >= v8) {
      break;
    }
LABEL_6:
    unsigned int v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (v8 < v6)
  {
    ++v7;
    goto LABEL_6;
  }
  char v10 = sub_112658(*(uint64_t **)(a1 + 648), *a2);
  uint64_t v11 = v10[5];
  char v25 = v10 + 5;
  char v26 = (*(uint64_t (**)(void))(v11 + 16))();
  uint64_t v12 = (void *)v10[3];
  if (!v12) {
    goto LABEL_25;
  }
  uint64_t v13 = v10 + 3;
  do
  {
    unint64_t v14 = v12[4];
    BOOL v16 = v14 == a3;
    BOOL v15 = v14 < a3;
    if (v16) {
      BOOL v15 = v12[5] < a4;
    }
    BOOL v16 = !v15;
    if (v15) {
      uint64_t v17 = v12 + 1;
    }
    else {
      uint64_t v17 = v12;
    }
    if (v16) {
      uint64_t v13 = v12;
    }
    uint64_t v12 = (void *)*v17;
  }
  while (*v17);
  if (v13 == v10 + 3) {
    goto LABEL_25;
  }
  unint64_t v18 = v13[4];
  BOOL v16 = v18 == a3;
  BOOL v19 = v18 > a3;
  if (v16) {
    BOOL v19 = v13[5] > a4;
  }
  if (v19)
  {
LABEL_25:
    int v20 = (os_log_t *)sub_32A48(23);
    char v21 = *v20;
    if (*v20)
    {
      if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, *((_DWORD *)v10 + 2));
        int v22 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)int buf = 136315650;
        uint64_t v28 = "Port_PropertyListener_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 48;
        __int16 v31 = 2080;
        __int16 v32 = v22;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified listener for %s does not exist", buf, 0x1Cu);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      char v21 = 0;
    }
  }
  else
  {
    sub_20DBD0((uint64_t **)v10 + 2, v13);
    operator delete(v13);
    char v21 = (&def_1E50E8 + 1);
  }
  sub_3BCAC(&v25);
  return v21;
}

void sub_2759A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

NSObject *sub_2759C0(uint64_t a1, int *a2, unint64_t a3, unint64_t a4)
{
  if (!*(void *)(a1 + 648))
  {
LABEL_7:
    return sub_104A08((void *)a1, a2, a3, a4);
  }
  unsigned int v6 = *a2;
  unsigned int v7 = *(uint64_t **)(a1 + 648);
  while (1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v6 >= v8) {
      break;
    }
LABEL_6:
    unsigned int v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (v8 < v6)
  {
    ++v7;
    goto LABEL_6;
  }
  char v10 = sub_112658(*(uint64_t **)(a1 + 648), *a2);
  uint64_t v11 = v10[5];
  char v21 = v10 + 5;
  char v22 = (*(uint64_t (**)(void))(v11 + 16))();
  uint64_t v12 = (uint64_t **)sub_20E9A0((uint64_t)(v10 + 2), buf, a3, a4);
  uint64_t v13 = *v12;
  if (*v12)
  {
    unint64_t v14 = (os_log_t *)sub_32A48(23);
    BOOL v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, *((_DWORD *)v10 + 2));
      BOOL v16 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_PropertyListener_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 39;
      __int16 v26 = 2080;
      char v27 = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified listener for %s already exists", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v17 = v12;
    unint64_t v18 = (uint64_t *)operator new(0x30uLL);
    v18[4] = a3;
    v18[5] = a4;
    sub_46CA8((uint64_t **)v10 + 2, *(uint64_t *)buf, v17, v18);
  }
  sub_3BCAC(&v21);
  return (v13 == 0);
}

void sub_275BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_275BFC(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    unint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      BOOL v19 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 361;
      __int16 v41 = 2080;
      int v42 = (const char *)v19;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v21 = (os_log_t *)sub_32A48(13);
    char v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      __int16 v23 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 362;
      __int16 v41 = 2080;
      int v42 = (const char *)v23;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v24 = &off_6414D8;
    unint64_t v24[2] = 561211770;
  }
  if (!a6)
  {
    int v25 = (os_log_t *)sub_32A48(13);
    __int16 v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      char v27 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 363;
      __int16 v41 = 2080;
      int v42 = "inData";
      __int16 v43 = 2080;
      v44[0] = v27;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v28 = &off_6414D8;
    void v28[2] = 561211770;
  }
  if ((((uint64_t (*)(void **, uint64_t))(*a1)[3])(a1, a2) & 1) == 0)
  {
    __int16 v29 = (os_log_t *)sub_32A48(13);
    int v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)a2;
      int v34 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      __int16 v31 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      __int16 v38 = "Port_Bluetooth_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 364;
      __int16 v41 = 2080;
      int v42 = (const char *)v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v32 = &off_6414D8;
    v32[2] = 1852797029;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 > 1936221549)
  {
    if (v12 > 1936747875)
    {
      if ((v12 - 1936747876) < 2 || v12 == 2004050279) {
        goto LABEL_28;
      }
      int v13 = 1937204590;
    }
    else
    {
      if (v12 > 1936745837)
      {
        if (v12 == 1936745838) {
          goto LABEL_28;
        }
        unsigned __int16 v14 = 26739;
      }
      else
      {
        if (v12 == 1936221550) {
          goto LABEL_28;
        }
        unsigned __int16 v14 = 25446;
      }
      int v13 = v14 | 0x73700000;
    }
  }
  else if (v12 > 1752462194)
  {
    if (v12 > 1819505772)
    {
      if (v12 == 1819505773) {
        goto LABEL_28;
      }
      int v13 = 1869832547;
    }
    else
    {
      if (v12 == 1752462195) {
        goto LABEL_28;
      }
      int v13 = 1767989616;
    }
  }
  else
  {
    if (v12 <= 1668051826)
    {
      if (v12 != 1651797100)
      {
        int v13 = 1651798886;
        goto LABEL_27;
      }
LABEL_28:
      BOOL v15 = *(uint64_t (**)(void))(*a1[24] + 48);
      return v15();
    }
    if (v12 == 1668051827) {
      goto LABEL_28;
    }
    int v13 = 1752327777;
  }
LABEL_27:
  if (v12 == v13) {
    goto LABEL_28;
  }

  return sub_102AAC((uint64_t)a1, (uint64_t *)a2, a3, a4, v11, a6);
}

uint64_t sub_276308(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[2])(a1);
  if ((result & 1) == 0)
  {
    unint64_t v18 = (os_log_t *)sub_32A48(13);
    BOOL v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
      char v20 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      int v35 = "Port_Bluetooth_Aspen.cpp";
      __int16 v36 = 1024;
      int v37 = 296;
      __int16 v38 = 2080;
      __int16 v39 = (const char *)v20;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v22 = (os_log_t *)sub_32A48(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
      __int16 v24 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      int v35 = "Port_Bluetooth_Aspen.cpp";
      __int16 v36 = 1024;
      int v37 = 297;
      __int16 v38 = 2080;
      __int16 v39 = (const char *)v24;
      __int16 v40 = 1024;
      LODWORD(v41[0]) = a3;
      WORD2(v41[0]) = 2048;
      *(void *)((char *)v41 + 6) = a4;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }
    int v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v25 = &off_6414D8;
    v25[2] = 561211770;
  }
  if (!a6)
  {
    __int16 v26 = (os_log_t *)sub_32A48(13);
    char v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
      uint64_t v28 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      int v35 = "Port_Bluetooth_Aspen.cpp";
      __int16 v36 = 1024;
      int v37 = 298;
      __int16 v38 = 2080;
      __int16 v39 = "outData";
      __int16 v40 = 2080;
      v41[0] = v28;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v29 = &off_6414D8;
    v29[2] = 561211770;
  }
  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 > 1819505772)
  {
    if (v13 > 1936746610)
    {
      if (v13 > 1970496629)
      {
        if (v13 > 2004050278)
        {
          if (v13 != 2004050279)
          {
            if (v13 == 2004054901)
            {
              *a6 = 0;
              return result;
            }
            goto LABEL_65;
          }
          goto LABEL_60;
        }
        if (v13 == 1970496630) {
          goto LABEL_60;
        }
        int v14 = 1986947428;
        goto LABEL_59;
      }
      if (v13 > 1937204589)
      {
        if (v13 == 1937204590) {
          goto LABEL_60;
        }
        int v14 = 1970040164;
        goto LABEL_59;
      }
      if ((v13 - 1936747876) < 2) {
        goto LABEL_60;
      }
      unsigned __int16 v15 = 26739;
    }
    else
    {
      if (v13 <= 1936221549)
      {
        if (v13 > 1885955427)
        {
          if (v13 == 1885955428)
          {
            uint64_t result = ((uint64_t (*)(void **))(*a1)[49])(a1);
            *a6 = result;
            return result;
          }
          int v14 = 1935762278;
        }
        else
        {
          if (v13 == 1819505773) {
            goto LABEL_60;
          }
          int v14 = 1869832547;
        }
        goto LABEL_59;
      }
      if (v13 <= 1936744815)
      {
        if (v13 == 1936221550) {
          goto LABEL_60;
        }
        int v14 = 1936225136;
        goto LABEL_59;
      }
      if (v13 == 1936744816 || v13 == 1936745318) {
        goto LABEL_60;
      }
      unsigned __int16 v15 = 25966;
    }
    int v14 = v15 | 0x73700000;
    goto LABEL_59;
  }
  if (v13 <= 1668051826)
  {
    if (v13 <= 1651796335)
    {
      if (v13 > 1651794289)
      {
        if (v13 != 1651794290)
        {
          if (v13 == 1651796325)
          {
            uint64_t result = ((uint64_t (*)(void **))(*a1)[50])(a1);
            *a6 = result == 1;
            return result;
          }
          goto LABEL_65;
        }
        goto LABEL_60;
      }
      if (v13 == 1650551140) {
        goto LABEL_60;
      }
      int v14 = 1651271025;
    }
    else
    {
      if (v13 <= 1651797099)
      {
        if (v13 == 1651796336) {
          goto LABEL_60;
        }
        unsigned __int16 v16 = 26995;
      }
      else
      {
        if (v13 == 1651797100 || v13 == 1651798131) {
          goto LABEL_60;
        }
        unsigned __int16 v16 = 29542;
      }
      int v14 = v16 | 0x62740000;
    }
  }
  else if (v13 > 1752462194)
  {
    if (v13 <= 1768382831)
    {
      if (v13 == 1752462195) {
        goto LABEL_60;
      }
      int v14 = 1767989616;
    }
    else
    {
      if (v13 == 1768382832 || v13 == 1819046768) {
        goto LABEL_60;
      }
      int v14 = 1819503987;
    }
  }
  else
  {
    if (v13 > 1685021039)
    {
      if (v13 != 1685021040 && v13 != 1685484390)
      {
        int v14 = 1752327777;
        goto LABEL_59;
      }
LABEL_60:
      uint64_t v17 = *(uint64_t (**)(void))(*a1[24] + 40);
      return v17();
    }
    if (v13 == 1668051827) {
      goto LABEL_60;
    }
    int v14 = 1684826732;
  }
LABEL_59:
  if (v13 == v14) {
    goto LABEL_60;
  }
LABEL_65:

  return sub_102FDC((uint64_t)a1, (uint64_t *)a2, a3, a4, v12, (uint64_t)a6);
}

uint64_t sub_276B48(void **a1, int *a2, int a3, uint64_t a4)
{
  char v8 = (a3 != 0) ^ (a4 == 0);
  while (1)
  {
    if ((((uint64_t (*)(void **, int *))(*a1)[2])(a1, a2) & 1) == 0)
    {
      int v14 = (os_log_t *)sub_32A48(13);
      unsigned __int16 v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)a2;
        int v23 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v22);
        unsigned __int16 v16 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)int buf = 136315650;
        char v27 = "Port_Bluetooth_Aspen.cpp";
        __int16 v28 = 1024;
        int v29 = 237;
        __int16 v30 = 2080;
        int v31 = v16;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 2003332927;
    }
    if ((v8 & 1) == 0)
    {
      unint64_t v18 = (os_log_t *)sub_32A48(13);
      BOOL v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)a2;
        int v23 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v22);
        char v20 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)int buf = 136316162;
        char v27 = "Port_Bluetooth_Aspen.cpp";
        __int16 v28 = 1024;
        int v29 = 238;
        __int16 v30 = 2080;
        int v31 = v20;
        __int16 v32 = 1024;
        int v33 = a3;
        __int16 v34 = 2048;
        uint64_t v35 = a4;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x2Cu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      char v21 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v21 = &off_6414D8;
      v21[2] = 561211770;
    }
    int v9 = *a2;
    if (*a2 <= 1819505772) {
      break;
    }
    if (v9 > 1936746610)
    {
      if (v9 > 1970040163)
      {
        if (v9 > 1986947427)
        {
          if (v9 == 2004050279) {
            goto LABEL_50;
          }
          int v10 = 1986947428;
        }
        else
        {
          if (v9 == 1970040164) {
            goto LABEL_50;
          }
          int v10 = 1970496630;
        }
      }
      else
      {
        if ((v9 - 1936747876) < 2 || v9 == 1936746611) {
          goto LABEL_50;
        }
        int v10 = 1937204590;
      }
    }
    else if (v9 <= 1936221549)
    {
      if (v9 > 1885955427)
      {
        if (v9 == 1885955428) {
          return 4;
        }
        int v10 = 1935762278;
      }
      else
      {
        if (v9 == 1819505773) {
          goto LABEL_50;
        }
        int v10 = 1869832547;
      }
    }
    else if (v9 <= 1936744815)
    {
      if (v9 == 1936221550) {
        goto LABEL_50;
      }
      int v10 = 1936225136;
    }
    else
    {
      if (v9 == 1936744816 || v9 == 1936745318) {
        goto LABEL_50;
      }
      int v10 = 1936745838;
    }
LABEL_49:
    if (v9 == v10) {
      goto LABEL_50;
    }
  }
  if (v9 > 1651798885)
  {
    if (v9 <= 1752327776)
    {
      if (v9 > 1684826731)
      {
        if (v9 == 1684826732) {
          goto LABEL_50;
        }
        int v10 = 1685021040;
      }
      else
      {
        if (v9 == 1651798886) {
          goto LABEL_50;
        }
        int v10 = 1668051827;
      }
    }
    else if (v9 <= 1767989615)
    {
      if (v9 == 1752327777) {
        goto LABEL_50;
      }
      int v10 = 1752462195;
    }
    else
    {
      if (v9 == 1767989616 || v9 == 1768382832) {
        goto LABEL_50;
      }
      int v10 = 1819503987;
    }
    goto LABEL_49;
  }
  if (v9 <= 1651796324)
  {
    if (v9 == 1650551140 || v9 == 1651271025) {
      goto LABEL_50;
    }
    unsigned __int16 v11 = 24946;
    goto LABEL_38;
  }
  if (((v9 - 1651796325) > 0xE || ((1 << (v9 - 101)) & 0x4801) == 0) && v9 != 1651797100)
  {
    unsigned __int16 v11 = 28787;
LABEL_38:
    int v10 = v11 | 0x62740000;
    goto LABEL_49;
  }
LABEL_50:
  uint64_t v12 = *(uint64_t (**)(void))(*a1[24] + 32);

  return v12();
}

uint64_t sub_277150(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1869832546)
  {
    if (v2 > 1936746610)
    {
      if (v2 <= 1937204589)
      {
        if ((v2 - 1936747876) >= 2 && v2 != 1936746611) {
          return 0;
        }
        return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))();
      }
      BOOL v4 = v2 == 1937204590 || v2 == 2004050279;
      int v5 = 1986947428;
    }
    else if (v2 > 1936744815)
    {
      BOOL v4 = v2 == 1936744816 || v2 == 1936745318;
      int v5 = 1936745838;
    }
    else
    {
      BOOL v4 = v2 == 1869832547 || v2 == 1936221550;
      int v5 = 1936225136;
    }
    goto LABEL_40;
  }
  if (v2 <= 1684826731)
  {
    if (v2 > 1651797099)
    {
      BOOL v4 = v2 == 1651797100 || v2 == 1651798886;
      int v5 = 1668051827;
    }
    else
    {
      BOOL v4 = v2 == 1650551140 || v2 == 1651271025;
      int v5 = 1651794290;
    }
LABEL_40:
    if (!v4 && v2 != v5) {
      return 0;
    }
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))();
  }
  if (v2 <= 1752462194)
  {
    BOOL v4 = v2 == 1684826732 || v2 == 1685021040;
    int v5 = 1752327777;
    goto LABEL_40;
  }
  if (v2 > 1819503986)
  {
    if (v2 == 1819503987) {
      return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))();
    }
    int v3 = 1819505773;
  }
  else
  {
    if (v2 == 1752462195) {
      return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))();
    }
    int v3 = 1767989616;
  }
  if (v2 != v3) {
    return 0;
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))();
}

uint64_t sub_277340(void **a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1819505772)
  {
    if (v2 > 1936746610)
    {
      if (v2 > 1970496629)
      {
        if (v2 > 2004050278)
        {
          if (v2 == 2004050279) {
            goto LABEL_56;
          }
          int v3 = 2004054901;
        }
        else
        {
          if (v2 == 1970496630) {
            goto LABEL_56;
          }
          int v3 = 1986947428;
        }
        goto LABEL_55;
      }
      if (v2 > 1937204589)
      {
        if (v2 == 1937204590) {
          goto LABEL_56;
        }
        int v3 = 1970040164;
        goto LABEL_55;
      }
      if ((v2 - 1936747876) < 2) {
        goto LABEL_56;
      }
      unsigned __int16 v4 = 26739;
    }
    else
    {
      if (v2 <= 1936221549)
      {
        if (v2 > 1885955427)
        {
          if (v2 == 1885955428) {
            return 1;
          }
          int v3 = 1935762278;
        }
        else
        {
          if (v2 == 1819505773) {
            goto LABEL_56;
          }
          int v3 = 1869832547;
        }
        goto LABEL_55;
      }
      if (v2 <= 1936744815)
      {
        if (v2 == 1936221550) {
          goto LABEL_56;
        }
        int v3 = 1936225136;
        goto LABEL_55;
      }
      if (v2 == 1936744816 || v2 == 1936745318) {
        goto LABEL_56;
      }
      unsigned __int16 v4 = 25966;
    }
    int v3 = v4 | 0x73700000;
    goto LABEL_55;
  }
  if (v2 <= 1668051826)
  {
    if (v2 <= 1651796335)
    {
      if (v2 > 1651794289)
      {
        if (v2 != 1651794290)
        {
          if (v2 == 1651796325) {
            return ((unsigned int (*)(void **))(*a1)[50])(a1) != -1;
          }
          return 0;
        }
        goto LABEL_56;
      }
      if (v2 == 1650551140) {
        goto LABEL_56;
      }
      int v3 = 1651271025;
    }
    else
    {
      if (v2 <= 1651797099)
      {
        if (v2 == 1651796336) {
          goto LABEL_56;
        }
        unsigned __int16 v5 = 26995;
      }
      else
      {
        if (v2 == 1651797100 || v2 == 1651798131) {
          goto LABEL_56;
        }
        unsigned __int16 v5 = 29542;
      }
      int v3 = v5 | 0x62740000;
    }
LABEL_55:
    if (v2 == v3) {
      goto LABEL_56;
    }
    return 0;
  }
  if (v2 > 1752462194)
  {
    if (v2 <= 1768382831)
    {
      if (v2 == 1752462195) {
        goto LABEL_56;
      }
      int v3 = 1767989616;
    }
    else
    {
      if (v2 == 1768382832 || v2 == 1819046768) {
        goto LABEL_56;
      }
      int v3 = 1819503987;
    }
    goto LABEL_55;
  }
  if (v2 <= 1685021039)
  {
    if (v2 == 1668051827) {
      goto LABEL_56;
    }
    int v3 = 1684826732;
    goto LABEL_55;
  }
  if (v2 != 1685021040 && v2 != 1685484390)
  {
    int v3 = 1752327777;
    goto LABEL_55;
  }
LABEL_56:
  unsigned int v7 = *(uint64_t (**)(void))(*a1[24] + 16);

  return v7();
}

uint64_t sub_2776CC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, CFStringRef theString, char a8)
{
  memset(buf, 0, 24);
  sub_21B7C(__p, theString);
  sub_1066F4(a1, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)buf, (long long *)__p, a8, 1);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = buf;
  sub_74004((void ***)__p);
  *(void *)a1 = &off_629710;
  unsigned __int16 v15 = (uint64_t *)(a1 + 648);
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = a1 + 648;
  if (!a3) {
    goto LABEL_11;
  }
  strcpy(buf, "paaibolg");
  buf[9] = 0;
  *(_WORD *)&_DWORD buf[10] = 0;
  uint64_t v16 = sub_99A40(a3);
  BOOL v17 = 0;
  *((void *)&v20 + 1) = v18;
  *(void *)&long long v20 = v16;
  uint64_t v19 = v20 >> 32;
  if ((v19 & 0xFF00000000) == 0 || !v19) {
    goto LABEL_21;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 376))(a3);
  BOOL v22 = (v21 & 0xFF00000000) == 0 || v21 == 0;
  if (v22)
  {
LABEL_11:
    BOOL v17 = 0;
  }
  else
  {
    LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
    strcpy(buf, "diabbolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    unint64_t v23 = sub_26DAC((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0);
    *((void *)&v26 + 1) = v24;
    *(void *)&long long v26 = v23;
    uint64_t v25 = v26 >> 32;
    BOOL v28 = HIDWORD(v23) > 0x2009 && v25 != 8208;
    BOOL v17 = (v25 & 0xFF00000000) != 0 && v28;
  }
LABEL_21:
  *(unsigned char *)(a1 + 664) = v17;
  int v29 = (os_log_t *)sub_32A48(23);
  __int16 v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *a6;
    __int16 v32 = "yes";
    BOOL v22 = *(unsigned char *)(a1 + 664) == 0;
    *(_DWORD *)int buf = 136315906;
    if (v22) {
      __int16 v32 = "no";
    }
    *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 103;
    *(_WORD *)&unsigned char buf[18] = 2112;
    *(void *)&buf[20] = v31;
    __int16 v46 = 2080;
    int v47 = v32;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Port %@ supports PME: %s", buf, 0x26u);
  }
  int v33 = "eitbpitbsitbsptbcasofcasmtslgaswmanpnepsnehsshpsvdsudmpsfcpsfstbafrhssthsslcemps";
  do
  {
    uint64_t v34 = *v15;
    uint64_t v35 = (void *)(a1 + 648);
    __int16 v36 = (void *)(a1 + 648);
    if (*v15)
    {
      unsigned int v37 = *(_DWORD *)v33;
      while (1)
      {
        while (1)
        {
          __int16 v36 = (void *)v34;
          unsigned int v38 = *(_DWORD *)(v34 + 32);
          if (v37 >= v38) {
            break;
          }
          uint64_t v34 = *v36;
          uint64_t v35 = v36;
          if (!*v36) {
            goto LABEL_35;
          }
        }
        if (v38 >= v37) {
          break;
        }
        uint64_t v34 = v36[1];
        if (!v34)
        {
          uint64_t v35 = v36 + 1;
          goto LABEL_35;
        }
      }
    }
    else
    {
LABEL_35:
      __int16 v39 = operator new(0xA8uLL);
      unsigned int v40 = *(_DWORD *)v33;
      v39[8] = 0;
      *((_DWORD *)v39 + 8) = v40;
      v39[5] = off_6351F8;
      *((_DWORD *)v39 + 12) = v40;
      v39[9] = 0;
      v39[7] = v39 + 8;
      sub_AEF58((uint64_t)(v39 + 10), (uint64_t)"Property Listener Mutex");
      void *v39 = 0;
      v39[1] = 0;
      v39[2] = v36;
      *uint64_t v35 = v39;
      uint64_t v41 = **(void **)(a1 + 640);
      if (v41)
      {
        *(void *)(a1 + 640) = v41;
        __int16 v39 = (void *)*v35;
      }
      sub_46D00(*(uint64_t **)(a1 + 648), v39);
      ++*(void *)(a1 + 656);
    }
    v33 += 4;
  }
  while (v33 != "");
  return a1;
}

void sub_277A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_277AEC(*(void **)(v16 + 648));
  sub_104C04((void *)v16);
  _Unwind_Resume(a1);
}

void sub_277AEC(void *a1)
{
  if (a1)
  {
    sub_277AEC(*a1);
    sub_277AEC(a1[1]);
    a1[5] = off_6351F8;
    sub_AEF0C((uint64_t)(a1 + 10));
    sub_463E0((void *)a1[8]);
    operator delete(a1);
  }
}

void sub_277B68(uint64_t a1)
{
  *(void *)a1 = off_6351F8;
  sub_AEF0C(a1 + 40);
  sub_463E0(*(void **)(a1 + 24));

  operator delete();
}

uint64_t sub_277BD4(uint64_t a1)
{
  *(void *)a1 = off_6351F8;
  sub_AEF0C(a1 + 40);
  sub_463E0(*(void **)(a1 + 24));
  return a1;
}

void sub_277C20(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));
  sub_104C04((void *)a1);

  operator delete();
}

uint64_t sub_277C8C(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));

  return sub_104C04((void *)a1);
}

void *sub_277CE4(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, CFStringRef *a6, char a7, int a8)
{
  sub_166AC4((uint64_t)v16, a3, a8);
  memset(v15, 0, sizeof(v15));
  sub_2776CC((uint64_t)a1, v16, a2, (uint64_t)v15, a4, a5, *a6, a7);
  sub_463E0((void *)v16[3]);
  *a1 = off_629950;
  return a1;
}

void sub_277D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_277DA8(uint64_t a1, int *a2, char a3)
{
  int v6 = *a2;
  if (*a2 <= 1836414052)
  {
    if (v6 <= 1684103986)
    {
      if (v6 <= 1634692198)
      {
        if (v6 > 1633973867)
        {
          if (v6 != 1633973868)
          {
            if (v6 != 1634689389)
            {
              int v7 = 1634690413;
              goto LABEL_14;
            }
LABEL_83:
            sub_278758(buf, a1, (uint64_t *)a2, a3);
            goto LABEL_80;
          }
LABEL_79:
          sub_278670(buf, a1, (uint64_t *)a2, a3);
LABEL_80:
          long long v25 = *(_OWORD *)buf;
          goto LABEL_88;
        }
        if (v6 == 1064725619) {
          goto LABEL_79;
        }
        if (v6 != 1165513555) {
          goto LABEL_95;
        }
        goto LABEL_84;
      }
      if ((v6 - 1635152993) <= 0xE && ((1 << (v6 - 97)) & 0x4015) != 0
        || v6 == 1634692199
        || v6 == 1634694002)
      {
        goto LABEL_83;
      }
LABEL_95:
      int v33 = (os_log_t *)sub_32A48(1);
      uint64_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, *a2);
        if (v39 >= 0) {
          uint64_t v35 = __p;
        }
        else {
          uint64_t v35 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 218;
        __int16 v41 = 2080;
        int v42 = v35;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Unhandled selector: '%s'", buf, 0x1Cu);
        if (v39 < 0) {
          operator delete(__p[0]);
        }
      }
      return;
    }
    if (v6 <= 1685288050)
    {
      if ((v6 - 1685278561) <= 0x11 && ((1 << (v6 - 97)) & 0x20003) != 0
        || v6 == 1684103987
        || v6 == 1684633187)
      {
        goto LABEL_79;
      }
      goto LABEL_95;
    }
    if (v6 <= 1735354733)
    {
      if (v6 != 1685288051)
      {
        if (v6 == 1718839674) {
          goto LABEL_79;
        }
        int v8 = 1718843939;
        goto LABEL_26;
      }
LABEL_84:
      int v9 = (char *)operator new(0x60uLL);
      long long v19 = 0uLL;
      *(_OWORD *)(v9 + 8) = 0u;
      int v10 = (atomic_ullong *)(v9 + 8);
      *(void *)int v9 = off_629DC0;
      unsigned __int16 v11 = v9 + 24;
      *((_OWORD *)v9 + 2) = 0u;
      uint64_t v26 = *(void *)a2;
      *((void *)v9 + 6) = a1;
      *((void *)v9 + 7) = v26;
      *((_DWORD *)v9 + 16) = a2[2];
      v9[68] = a3 & 1;
      v9[69] = (a3 & 2) != 0;
      v9[70] = (a3 & 4) != 0;
      v9[71] = (a3 & 8) != 0;
      v9[72] = 0;
      uint64_t v21 = off_629DF8;
      goto LABEL_85;
    }
    if (v6 == 1735354734 || v6 == 1752657012) {
      goto LABEL_79;
    }
    int v22 = 1819569763;
LABEL_67:
    if (v6 != v22) {
      goto LABEL_95;
    }
    goto LABEL_79;
  }
  if (v6 <= 1936876402)
  {
    if (v6 > 1886807153)
    {
      if (v6 <= 1935763059)
      {
        if (v6 != 1886807154 && v6 != 1919774835)
        {
          int v7 = 1935762281;
LABEL_14:
          if (v6 != v7) {
            goto LABEL_95;
          }
          goto LABEL_83;
        }
        goto LABEL_79;
      }
      if (v6 == 1935763060) {
        goto LABEL_79;
      }
      if (v6 != 1936092532)
      {
        int v22 = 1936482676;
        goto LABEL_67;
      }
LABEL_86:
      int v9 = (char *)operator new(0xA0uLL);
      *(_OWORD *)(v9 + 8) = 0u;
      int v10 = (atomic_ullong *)(v9 + 8);
      *(void *)int v9 = off_629D50;
      unsigned __int16 v11 = v9 + 24;
      *((_OWORD *)v9 + 2) = 0u;
      uint64_t v27 = *(void *)a2;
      *((void *)v9 + 6) = a1;
      *((void *)v9 + 7) = v27;
      *((_DWORD *)v9 + 16) = a2[2];
      v9[68] = a3 & 1;
      v9[69] = (a3 & 2) != 0;
      v9[70] = (a3 & 4) != 0;
      v9[71] = (a3 & 8) != 0;
      v9[72] = 0;
      *((void *)v9 + 3) = off_629D88;
      *((void *)v9 + 10) = 0x7FEFFFFFFFFFFFFFLL;
      *(void *)&long long v28 = -1;
      *((void *)&v28 + 1) = -1;
      *(_OWORD *)(v9 + 104) = v28;
      *(_OWORD *)(v9 + 88) = v28;
      *((void *)v9 + 15) = 0x7FEFFFFFFFFFFFFFLL;
      *((_OWORD *)v9 + 8) = v28;
      *((_OWORD *)v9 + 9) = v28;
      goto LABEL_87;
    }
    if (v6 > 1853059699)
    {
      if (v6 != 1853059700)
      {
        if (v6 == 1870030194) {
          goto LABEL_79;
        }
        if (v6 != 1885762592) {
          goto LABEL_95;
        }
        goto LABEL_86;
      }
LABEL_60:
      int v9 = (char *)operator new(0x60uLL);
      long long v19 = 0uLL;
      *(_OWORD *)(v9 + 8) = 0u;
      int v10 = (atomic_ullong *)(v9 + 8);
      *(void *)int v9 = off_629C70;
      unsigned __int16 v11 = v9 + 24;
      *((_OWORD *)v9 + 2) = 0u;
      uint64_t v20 = *(void *)a2;
      *((void *)v9 + 6) = a1;
      *((void *)v9 + 7) = v20;
      *((_DWORD *)v9 + 16) = a2[2];
      v9[68] = a3 & 1;
      v9[69] = (a3 & 2) != 0;
      v9[70] = (a3 & 4) != 0;
      v9[71] = (a3 & 8) != 0;
      v9[72] = 0;
      uint64_t v21 = off_629CA8;
LABEL_85:
      *((void *)v9 + 3) = v21;
      *((_OWORD *)v9 + 5) = v19;
      goto LABEL_87;
    }
    if (v6 == 1836414053) {
      goto LABEL_79;
    }
    int v23 = 1852012899;
    goto LABEL_77;
  }
  if (v6 <= 1986225267)
  {
    if (v6 <= 1953002353)
    {
      if (v6 != 1936876403)
      {
        if (v6 == 1952997988) {
          goto LABEL_83;
        }
        goto LABEL_95;
      }
      goto LABEL_84;
    }
    if (v6 != 1953002354)
    {
      if (v6 == 1983997011) {
        goto LABEL_79;
      }
      if (v6 != 1986225266) {
        goto LABEL_95;
      }
    }
    goto LABEL_60;
  }
  if (v6 > 1986817376)
  {
    if (v6 == 1986817377 || v6 == 1987013732)
    {
LABEL_78:
      int v9 = (char *)operator new(0x58uLL);
      *(_OWORD *)(v9 + 8) = 0u;
      int v10 = (atomic_ullong *)(v9 + 8);
      *(void *)int v9 = off_629C00;
      unsigned __int16 v11 = v9 + 24;
      *((_OWORD *)v9 + 2) = 0u;
      uint64_t v24 = *(void *)a2;
      *((void *)v9 + 6) = a1;
      *((void *)v9 + 7) = v24;
      *((_DWORD *)v9 + 16) = a2[2];
      v9[68] = a3 & 1;
      v9[69] = (a3 & 2) != 0;
      v9[70] = (a3 & 4) != 0;
      v9[71] = (a3 & 8) != 0;
      v9[72] = 0;
      *((void *)v9 + 3) = off_629C38;
      *((_DWORD *)v9 + 19) = 0;
      *((_DWORD *)v9 + 20) = 0;
      goto LABEL_87;
    }
    int v23 = 1987013741;
LABEL_77:
    if (v6 != v23) {
      goto LABEL_95;
    }
    goto LABEL_78;
  }
  if (v6 == 1986225268 || v6 == 1986229104) {
    goto LABEL_79;
  }
  int v8 = 1986290211;
LABEL_26:
  if (v6 != v8) {
    goto LABEL_95;
  }
  int v9 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  int v10 = (atomic_ullong *)(v9 + 8);
  *(void *)int v9 = off_629CE0;
  unsigned __int16 v11 = v9 + 24;
  *((_OWORD *)v9 + 2) = 0u;
  uint64_t v12 = *(void *)a2;
  *((void *)v9 + 6) = a1;
  *((void *)v9 + 7) = v12;
  *((_DWORD *)v9 + 16) = a2[2];
  v9[68] = a3 & 1;
  v9[69] = (a3 & 2) != 0;
  v9[70] = (a3 & 4) != 0;
  v9[71] = (a3 & 8) != 0;
  v9[72] = 0;
  *((void *)v9 + 3) = off_629D18;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
LABEL_87:
  *(void *)&long long v29 = v11;
  *((void *)&v29 + 1) = v9;
  long long v36 = v29;
  atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 2, 1uLL, memory_order_relaxed);
  *((void *)v9 + 4) = v11;
  *((void *)v9 + 5) = v9;
  sub_4636C((std::__shared_weak_count *)v9);
  long long v25 = v36;
LABEL_88:
  if ((void)v25)
  {
    long long v37 = v25;
    *(void *)int buf = *(void *)(a1 + 8);
    uint8_t buf[8] = (*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
    __int16 v30 = operator new(0x20uLL);
    v30[1] = v37;
    uint64_t v32 = *(void *)(a1 + 24);
    uint64_t v31 = (void *)(a1 + 24);
    *(void *)__int16 v30 = v32;
    *((void *)v30 + 1) = v31;
    *(void *)(v32 + 8) = v30;
    *uint64_t v31 = v30;
    ++v31[2];
    sub_3BCAC(buf);
  }
  else if (*((void *)&v25 + 1))
  {
    sub_4636C(*((std::__shared_weak_count **)&v25 + 1));
  }
}

void sub_27863C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_278670(void *a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8 = (char *)operator new(0x58uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)int v8 = off_629B90;
  *((_OWORD *)v8 + 2) = 0u;
  uint64_t v9 = *a3;
  *((void *)v8 + 6) = a2;
  *((void *)v8 + 7) = v9;
  *((_DWORD *)v8 + 16) = *((_DWORD *)a3 + 2);
  v8[68] = a4 & 1;
  v8[69] = (a4 & 2) != 0;
  v8[70] = (a4 & 4) != 0;
  v8[71] = (a4 & 8) != 0;
  v8[72] = 0;
  *((void *)v8 + 3) = off_629BC8;
  *((void *)v8 + 4) = v8 + 24;
  *((_DWORD *)v8 + 19) = 0;
  *((_DWORD *)v8 + 20) = 0;
  *a1 = v8 + 24;
  a1[1] = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
  *((void *)v8 + 5) = v8;

  sub_4636C((std::__shared_weak_count *)v8);
}

void sub_278758(void *a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)int v8 = off_629E30;
  *((_OWORD *)v8 + 2) = 0u;
  uint64_t v9 = *a3;
  *((void *)v8 + 6) = a2;
  *((void *)v8 + 7) = v9;
  *((_DWORD *)v8 + 16) = *((_DWORD *)a3 + 2);
  v8[68] = a4 & 1;
  v8[69] = (a4 & 2) != 0;
  v8[70] = (a4 & 4) != 0;
  v8[71] = (a4 & 8) != 0;
  v8[72] = 0;
  *((void *)v8 + 3) = off_629E68;
  *((void *)v8 + 4) = v8 + 24;
  *((_OWORD *)v8 + 5) = 0u;
  *a1 = v8 + 24;
  a1[1] = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
  *((void *)v8 + 5) = v8;

  sub_4636C((std::__shared_weak_count *)v8);
}

uint64_t sub_278840(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (sub_278AF8(a1, a2, &v5)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 45)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24))(a2, &v6);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v6, 0, 0, 8, a1 + 56);
    return 1;
  }
  return result;
}

void sub_278ABC(_Unwind_Exception *a1)
{
}

void sub_278ADC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_278AF8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, void *))(*(void *)a2 + 40))(a2, &v6, 0, 0, v8, a3);
  return *(void *)(a1 + 56) == *a3;
}

void sub_278BBC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, long long buf, long long a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v21 = v20;
      int v22 = (os_log_t *)sub_32A48(1);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_16C9C4((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.", (uint8_t *)&buf, 0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    else
    {
      uint64_t v26 = (os_log_t *)sub_32A48(1);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&__p, &a16);
        long long v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal exception trying to read property '%s'.", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    JUMPOUT(0x278B8CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_278D88(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  BOOL v4 = sub_278AF8(a1, a2, &v5);
  if (!v4) {
    *(void *)(a1 + 56) = v5;
  }
  return !v4;
}

uint64_t sub_278DE0(uint64_t result, int a2, void *a3)
{
  if (a2 != 8)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v8 = 1024;
      int v9 = 38;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Incorrect data size.\"", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }
  *(void *)(result + 56) = *a3;
  return result;
}

void sub_278EE8(_Unwind_Exception *exception_object)
{
}

void sub_278F04(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_278F54(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_278F88(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_278FAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629E30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_279000(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_279020(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (sub_2792D8(a1, a2, &v5)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 45)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24))(a2, &v6);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v6, 0, 0, 8, a1 + 56);
    return 1;
  }
  return result;
}

void sub_27929C(_Unwind_Exception *a1)
{
}

void sub_2792BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2792D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, void *))(*(void *)a2 + 40))(a2, &v6, 0, 0, v8, a3);
  return *(void *)(a1 + 56) == *a3;
}

void sub_27939C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, long long buf, long long a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v21 = v20;
      int v22 = (os_log_t *)sub_32A48(1);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_16C9C4((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.", (uint8_t *)&buf, 0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    else
    {
      uint64_t v26 = (os_log_t *)sub_32A48(1);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&__p, &a16);
        long long v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal exception trying to read property '%s'.", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    JUMPOUT(0x27936CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_279568(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  BOOL v4 = sub_2792D8(a1, a2, &v5);
  if (!v4) {
    *(void *)(a1 + 56) = v5;
  }
  return !v4;
}

uint64_t sub_2795C0(uint64_t result, int a2, void *a3)
{
  if (a2 != 8)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v8 = 1024;
      int v9 = 38;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Incorrect data size.\"", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }
  *(void *)(result + 56) = *a3;
  return result;
}

void sub_2796C8(_Unwind_Exception *exception_object)
{
}

void sub_2796E4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_279734(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_279768(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_27978C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2797E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_279800(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  long long v4 = *(_OWORD *)(a1 + 112);
  v6[0] = *(_OWORD *)(a1 + 96);
  v6[1] = v4;
  uint64_t v7 = *(void *)(a1 + 128);
  if (sub_279AC0(a1, a2, (uint64_t)v6)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 45)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24))(a2, &v8);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v8, 0, 0, 40, a1 + 56);
    return 1;
  }
  return result;
}

void sub_279A84(_Unwind_Exception *a1)
{
}

void sub_279AA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_279AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *(void *)(a1 + 32);
  int v21 = *(_DWORD *)(a1 + 40);
  v22[0] = 40;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, uint64_t))(*(void *)a2 + 40))(a2, &v20, 0, 0, v22, a3);
  double v5 = *(double *)(a1 + 56);
  if (v5 != 0.0 && *(double *)a3 != 0.0 && v5 != *(double *)a3) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 64);
  if (v7)
  {
    int v8 = *(_DWORD *)(a3 + 8);
    if (v8)
    {
      if (v7 != v8) {
        return 0;
      }
    }
  }
  int v9 = *(_DWORD *)(a1 + 72);
  if (v9)
  {
    int v10 = *(_DWORD *)(a3 + 16);
    if (v10)
    {
      if (v9 != v10) {
        return 0;
      }
    }
  }
  int v11 = *(_DWORD *)(a1 + 76);
  if (v11)
  {
    int v12 = *(_DWORD *)(a3 + 20);
    if (v12)
    {
      if (v11 != v12) {
        return 0;
      }
    }
  }
  int v13 = *(_DWORD *)(a1 + 80);
  if (v13)
  {
    int v14 = *(_DWORD *)(a3 + 24);
    if (v14)
    {
      if (v13 != v14) {
        return 0;
      }
    }
  }
  int v15 = *(_DWORD *)(a1 + 84);
  if (v15)
  {
    int v16 = *(_DWORD *)(a3 + 28);
    if (v16)
    {
      if (v15 != v16) {
        return 0;
      }
    }
  }
  int v17 = *(_DWORD *)(a1 + 88);
  if (v17 && (int v18 = *(_DWORD *)(a3 + 32)) != 0 && v17 != v18) {
    return 0;
  }
  else {
    return sub_EBDC(a1 + 56, a3);
  }
}

void sub_279C34(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, long long buf, long long a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      int v22 = (os_log_t *)sub_32A48(1);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_16C9C4((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.", (uint8_t *)&buf, 0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      uint64_t v26 = (os_log_t *)sub_32A48(1);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&__p, &a16);
        long long v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal exception trying to read property '%s'.", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x279BF4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_279DFC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  long long v4 = *(_OWORD *)(a1 + 112);
  long long v7 = *(_OWORD *)(a1 + 96);
  long long v8 = v4;
  uint64_t v9 = *(void *)(a1 + 128);
  int v5 = sub_279AC0(a1, a2, (uint64_t)&v7);
  if ((v5 & 1) == 0)
  {
    long long v6 = v8;
    *(_OWORD *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(void *)(a1 + 88) = v9;
  }
  return v5 ^ 1u;
}

__n128 sub_279E68(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 != 40)
  {
    int v5 = (os_log_t *)sub_32A48(13);
    long long v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v10 = 1024;
      int v11 = 38;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Incorrect data size.\"", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 88) = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 72) = v4;
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void sub_279F7C(_Unwind_Exception *exception_object)
{
}

void sub_279F98(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_279FE8(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_27A01C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_27A040(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629D50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_27A094(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_27A0B4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  *(_OWORD *)int v5 = *(_OWORD *)(a1 + 72);
  if (sub_27A36C(a1, a2, v5)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 45)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24))(a2, &v6);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v6, 0, 0, 16, a1 + 56);
    return 1;
  }
  return result;
}

void sub_27A330(_Unwind_Exception *a1)
{
}

void sub_27A350(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_27A36C(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v13 = *(void *)(a1 + 32);
  int v14 = *(_DWORD *)(a1 + 40);
  int v15 = 16;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a2 + 40))(a2, &v13, 0, 0, &v15, a3);
  double v5 = *(double *)(a1 + 64);
  double v6 = *a3;
  if (v5 < *a3) {
    return 0;
  }
  double v7 = *(double *)(a1 + 56);
  double v8 = a3[1];
  if (v7 < v6 && v5 <= v8) {
    return 0;
  }
  BOOL v10 = v7 == v6;
  if (v5 != v8) {
    BOOL v10 = 0;
  }
  return (v7 >= v6 || v5 <= v8) && v10;
}

void sub_27A5F4(_Unwind_Exception *a1)
{
}

void sub_27A614(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_27A630(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  long long v5 = *(_OWORD *)(a1 + 72);
  BOOL v4 = sub_27A36C(a1, a2, (double *)&v5);
  if (!v4) {
    *(_OWORD *)(a1 + 56) = v5;
  }
  return !v4;
}

__n128 sub_27A688(uint64_t a1, int a2, __n128 *a3)
{
  if (a2 != 16)
  {
    BOOL v4 = (os_log_t *)sub_32A48(13);
    long long v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      double v8 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v9 = 1024;
      int v10 = 38;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Incorrect data size.\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }
  __n128 result = *a3;
  *(__n128 *)(a1 + 56) = *a3;
  return result;
}

void sub_27A790(_Unwind_Exception *exception_object)
{
}

void sub_27A7AC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_27A7FC(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_27A830(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_27A854(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_27A8A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_27A8C8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (sub_27AB80(a1, a2, (double *)&v5)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 45)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24))(a2, &v6);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v6, 0, 0, 8, a1 + 56);
    return 1;
  }
  return result;
}

void sub_27AB44(_Unwind_Exception *a1)
{
}

void sub_27AB64(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_27AB80(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a2 + 40))(a2, &v6, 0, 0, v8, a3);
  return *(double *)(a1 + 56) == *a3;
}

void sub_27AC44(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, long long buf, long long a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      int v22 = (os_log_t *)sub_32A48(1);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_16C9C4((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.", (uint8_t *)&buf, 0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    else
    {
      uint64_t v26 = (os_log_t *)sub_32A48(1);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&__p, &a16);
        long long v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal exception trying to read property '%s'.", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    JUMPOUT(0x27AC14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_27AE10(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  BOOL v4 = sub_27AB80(a1, a2, (double *)&v5);
  if (!v4) {
    *(void *)(a1 + 56) = v5;
  }
  return !v4;
}

double sub_27AE68(uint64_t a1, int a2, double *a3)
{
  if (a2 != 8)
  {
    BOOL v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      double v8 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v9 = 1024;
      int v10 = 38;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Incorrect data size.\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }
  double result = *a3;
  *(double *)(a1 + 56) = *a3;
  return result;
}

void sub_27AF70(_Unwind_Exception *exception_object)
{
}

void sub_27AF8C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_27AFDC(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_27B010(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_27B034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629C70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_27B088(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_27B0A8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  if (sub_27B360(a1, a2, (float *)&v5)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 45)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24))(a2, &v6);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v6, 0, 0, 4, a1 + 52);
    return 1;
  }
  return result;
}

void sub_27B324(_Unwind_Exception *a1)
{
}

void sub_27B344(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_27B360(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 4;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)a2 + 40))(a2, &v6, 0, 0, v8, a3);
  return *(float *)(a1 + 52) == *a3;
}

void sub_27B424(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, long long buf, long long a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      int v22 = (os_log_t *)sub_32A48(1);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_16C9C4((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.", (uint8_t *)&buf, 0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    else
    {
      uint64_t v26 = (os_log_t *)sub_32A48(1);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&__p, &a16);
        long long v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal exception trying to read property '%s'.", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    JUMPOUT(0x27B3F4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_27B5F0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  BOOL v4 = sub_27B360(a1, a2, (float *)&v5);
  if (!v4) {
    *(_DWORD *)(a1 + 52) = v5;
  }
  return !v4;
}

float sub_27B648(uint64_t a1, int a2, float *a3)
{
  if (a2 != 4)
  {
    BOOL v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      double v8 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v9 = 1024;
      int v10 = 38;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Incorrect data size.\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }
  float result = *a3;
  *(float *)(a1 + 52) = *a3;
  return result;
}

void sub_27B750(_Unwind_Exception *exception_object)
{
}

void sub_27B76C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_27B7BC(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_27B7F0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_27B814(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629C00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_27B868(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_27B888(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  if (sub_27BB40(a1, a2, &v5)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 45)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 24))(a2, &v6);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v6, 0, 0, 4, a1 + 52);
    return 1;
  }
  return result;
}

void sub_27BB04(_Unwind_Exception *a1)
{
}

void sub_27BB24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_27BB40(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  v8[0] = 4;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, _DWORD *))(*(void *)a2 + 40))(a2, &v6, 0, 0, v8, a3);
  return *(_DWORD *)(a1 + 52) == *a3;
}

void sub_27BC04(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned int a16, uint64_t a17, long long buf, long long a19)
{
  if (a2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v21 = v20;
      int v22 = (os_log_t *)sub_32A48(1);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = v21[2];
        sub_16C9C4((uint64_t)&__p, &a16);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 91;
        WORD1(a19) = 1024;
        DWORD1(a19) = v24;
        WORD4(a19) = 2080;
        *(void *)((char *)&a19 + 10) = p_p;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d CAException (error = 0x%.08X) trying to read property '%s'.", (uint8_t *)&buf, 0x22u);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    else
    {
      uint64_t v26 = (os_log_t *)sub_32A48(1);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&__p, &a16);
        long long v28 = a15 >= 0 ? &__p : (void **)__p;
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 96;
        WORD1(a19) = 2080;
        *(void *)((char *)&a19 + 4) = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal exception trying to read property '%s'.", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
      __cxa_end_catch();
    }
    JUMPOUT(0x27BBD4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_27BDD0(uint64_t result, int a2, _DWORD *a3)
{
  if (a2 != 4)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v8 = 1024;
      int v9 = 38;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Incorrect data size.\"", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Incorrect data size.");
  }
  *(_DWORD *)(result + 52) = *a3;
  return result;
}

void sub_27BED8(_Unwind_Exception *exception_object)
{
}

void sub_27BEF4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_27BF44(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_27BF78(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_27BF9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_629B90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_27BFF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_629B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unsigned char *sub_27C010(uint64_t *a1)
{
  uint64_t v7 = a1[1];
  char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  if (a1[2])
  {
    int v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        int v10 = "VirtualAudio_DevicePropertyCache.cpp";
        __int16 v11 = 1024;
        int v12 = 291;
        __int16 v13 = 2048;
        int v14 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Property cache at %p is being torn down while an active object is selected.\"", buf, 0x1Cu);
      }
    }
  }
  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))())
  {
    BOOL v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        int v10 = "VirtualAudio_DevicePropertyCache.cpp";
        __int16 v11 = 1024;
        int v12 = 293;
        __int16 v13 = 2048;
        int v14 = a1;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Property cache at %p is being torn down while the routing mutex is held.\"", buf, 0x1Cu);
      }
    }
  }
  sub_27C1F4((uint64_t)a1);
  sub_27C2AC(a1);
  return sub_3BCAC(&v7);
}

void sub_27C1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

unsigned char *sub_27C1F4(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  if (*(void *)(a1 + 16))
  {
    memset(v3, 0, sizeof(v3));
    *(unsigned char *)(a1 + 48) = 1;
    sub_27C5AC(a1, 0, v3);
    int v6 = (void **)v3;
    sub_EE3E4(&v6);
  }
  return sub_3BCAC(&v4);
}

void sub_27C28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v5 - 24) = v4;
  sub_EE3E4((void ***)(v5 - 24));
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_27C2AC(uint64_t *a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]) & 1) == 0)
  {
    int v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 464;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Cache mutex not held by current thread.\"", buf, 0x12u);
      }
    }
  }
  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))())
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 465;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is held by the current thread.\"", buf, 0x12u);
      }
    }
  }
  if (a1[13])
  {
    uint64_t v6 = 0;
    *(void *)int buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    uint64_t v7 = buf;
    char v8 = a1 + 11;
    while (1)
    {
      *(void *)&uint8_t buf[16] = v6;
      char v8 = (uint64_t *)v8[1];
      if (v8 == a1 + 11) {
        break;
      }
      int v9 = operator new(0x28uLL);
      void v9[2] = v8[2];
      uint64_t v10 = v8[3];
      v9[3] = v10;
      if (v10)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
        uint64_t v6 = *(void *)&buf[16];
      }
      v9[4] = v8[4];
      void *v9 = v7;
      v9[1] = buf;
      *((void *)v7 + 1) = v9;
      *(void *)int buf = v9;
      ++v6;
      uint64_t v7 = v9;
    }
    sub_8108(a1 + 11);
    sub_523D8(v17, a1[1]);
    for (uint64_t i = *(void *)&buf[8]; (unsigned char *)i != buf; uint64_t i = *(void *)(i + 8))
    {
      int v12 = *(std::__shared_weak_count **)(i + 24);
      if (v12)
      {
        uint64_t v13 = *(void *)(i + 16);
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v14 = *(void *)(i + 32);
        int v15 = std::__shared_weak_count::lock(v12);
        if (v15)
        {
          int v16 = v15;
          if (v13) {
            sub_FEEF8(v14, (_DWORD *)(v13 + 32), (uint64_t)sub_559F8, v13);
          }
          sub_4636C(v16);
        }
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_52380(v17);
    sub_8108((uint64_t *)buf);
  }
}

void sub_27C56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_27C5AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v30 = *(void *)(a1 + 8);
  char v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30);
  if (*(void *)(a1 + 16) != a2)
  {
    if (!*(unsigned char *)(a1 + 48))
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      long long v28 = *v27;
      if (*v27)
      {
        if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          long long v37 = "VirtualAudio_DevicePropertyCache.cpp";
          __int16 v38 = 1024;
          int v39 = 318;
          _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Notifications must be queued during swap.\"", buf, 0x12u);
        }
      }
    }
    uint64_t v5 = (void *)(a1 + 24);
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6 != (void *)(a1 + 24))
    {
      uint64_t v7 = a1 + 88;
      while (1)
      {
        uint64_t v9 = v6[2];
        char v8 = (std::__shared_weak_count *)v6[3];
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v10 = *(unsigned __int8 *)(v9 + 48);
        if (*(unsigned char *)(v9 + 48))
        {
          if (!*(void *)(a1 + 16))
          {
            int v17 = (os_log_t *)sub_32A48(13);
            int v18 = *v17;
            if (*v17)
            {
              if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315394;
                long long v37 = "VirtualAudio_DevicePropertyCache.cpp";
                __int16 v38 = 1024;
                int v39 = 328;
                _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mCurrentVAObject is nullptr but there is an active property.\"", buf, 0x12u);
              }
            }
          }
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v11 = *(void *)(a1 + 16);
          int v12 = operator new(0x28uLL);
          v12[2] = v9;
          void v12[3] = v8;
          v12[4] = v11;
          uint64_t v13 = *(void *)(a1 + 88);
          *int v12 = v13;
          v12[1] = v7;
          *(void *)(v13 + 8) = v12;
          *(void *)(a1 + 88) = v12;
          ++*(void *)(a1 + 104);
        }
        if (!a2) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v9 + 32))
        {
          uint64_t v14 = *(void *)v9;
          if (v10)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v9, a2) & 1) == 0)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2);
              if (!*(unsigned char *)(v9 + 46))
              {
                int v15 = (unint64_t *)sub_EE470(a3, *(_DWORD *)(*(void *)a1 + 8));
                sub_74758(v15, (int *)(v9 + 32));
              }
            }
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v9, a2);
          }
          unsigned int v19 = sub_FEAC0(a2, (_DWORD *)(v9 + 32), (uint64_t)sub_559F8, v9);
          if (v19)
          {
            uint64_t v20 = (os_log_t *)sub_32A48(1);
            int v21 = *v20;
            if (*v20)
            {
              if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
              {
                sub_2417C(v34, v19);
                int v22 = v35;
                int v23 = (void **)v34[0];
                sub_16C9C4((uint64_t)__p, (unsigned int *)(v9 + 32));
                int v24 = v34;
                if (v22 < 0) {
                  int v24 = v23;
                }
                long long v25 = __p;
                if (v33 < 0) {
                  long long v25 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136316162;
                long long v37 = "VirtualAudio_DevicePropertyCache.cpp";
                __int16 v38 = 1024;
                int v39 = 255;
                __int16 v40 = 2080;
                __int16 v41 = v24;
                __int16 v42 = 1024;
                unsigned int v43 = v19;
                __int16 v44 = 2080;
                __int16 v45 = v25;
                _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' (%d) adding listener for property '%s'.", buf, 0x2Cu);
                if (v33 < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v7 = a1 + 88;
                uint64_t v5 = (void *)(a1 + 24);
                if (v35 < 0) {
                  operator delete(v34[0]);
                }
              }
            }
          }
          char v16 = 1;
          goto LABEL_35;
        }
LABEL_36:
        if (v8) {
          sub_4636C(v8);
        }
        uint64_t v6 = (void *)v6[1];
        if (v6 == v5) {
          goto LABEL_39;
        }
      }
      char v16 = 0;
LABEL_35:
      *(unsigned char *)(v9 + 48) = v16;
      goto LABEL_36;
    }
LABEL_39:
    *(void *)(a1 + 16) = a2;
  }
  return sub_3BCAC(&v30);
}

void sub_27CA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void sub_27CA6C(uint64_t a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8)) & 1) == 0)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "VirtualAudio_DevicePropertyCache.cpp";
        __int16 v8 = 1024;
        int v9 = 407;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Cache mutex not held by current thread.\"", (uint8_t *)&v6, 0x12u);
      }
    }
  }
  sub_EE798(a2, *(_DWORD *)(*(void *)a1 + 8), -1431655765 * ((*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2), *(int **)(a1 + 56));
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
}

uint64_t sub_27CBA0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[97];
  if (v10)
  {
    uint64_t v24 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v10 + 96))(v10, 0, 0);
    (*(void (**)(uint64_t, long long *))(*(void *)v11 + 112))(v11, &v22);
    *(void *)&long long v22 = (*(double (**)(void *))(*a1 + 104))(a1);
    double v12 = sub_4FF1C((uint64_t)a1, a2);
    long long v13 = *(_OWORD *)(a5 + 16);
    long long v25 = *(_OWORD *)a5;
    long long v26 = v13;
    *(void *)uint64_t v27 = *(void *)(a5 + 32);
    *(_OWORD *)&v27[8] = v22;
    *(_OWORD *)&v27[24] = v23;
    *(void *)&v27[40] = v24;
    uint64_t v14 = operator new(0x50uLL);
    std::string __p = v14;
    int v21 = v14 + 5;
    long long v15 = *(_OWORD *)&v27[16];
    v14[2] = *(_OWORD *)v27;
    v14[3] = v15;
    v14[4] = *(_OWORD *)&v27[32];
    long long v16 = v26;
    *uint64_t v14 = v25;
    v14[1] = v16;
    uint64_t v20 = v14 + 5;
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a3 + 136))(a3, a5, &__p, a4, v12);
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
    return v17;
  }
  else
  {
    return sub_28195C((uint64_t)a1, a2, a3, a4, a5);
  }
}

void sub_27CDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_27CDE8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, double *a7, uint64_t a8)
{
  if (!*(void *)(a1 + 456))
  {
    __int16 v40 = (os_log_t *)sub_32A48(13);
    __int16 v41 = *v40;
    if (*v40)
    {
      if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Broadcast.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 334;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The client IO proc must exist for IO to run.\"", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  uint64_t v11 = *(unsigned char **)(a1 + 664);
  double v12 = *(unsigned char **)(a1 + 672);
  long long v13 = v11;
  if (v11 != v12)
  {
    while (*v13 != 1)
    {
      if (++v13 == v12)
      {
        long long v13 = *(unsigned char **)(a1 + 672);
        break;
      }
    }
  }
  uint64_t v14 = sub_4CD70(a1 + 688, 1, 0);
  uint64_t v15 = v14;
  uint64_t v16 = (v13 - v11);
  uint64_t v17 = *(void *)(v14 + 192);
  BOOL v18 = (*(unsigned char *)(v17 + 448) || *(void *)(v17 + 584) || *(void *)(v17 + 672))
     && *(_DWORD *)(v14 + 8) == 1819304813;
  if (v12 == v13) {
    uint64_t v16 = 0;
  }
  uint64_t v58 = v16;
  unsigned int v19 = &a6[4 * v16];
  int v21 = v19 + 3;
  unsigned int v20 = v19[3];
  UInt32 v64 = v20 / *(_DWORD *)(v14 + 64);
  long long v22 = *(unsigned int **)(a1 + 752);
  uint64_t v23 = *(void *)(a1 + 712);
  outOutputData = *(AudioBufferList **)(v23 + 160);
  uint64_t v24 = *(AudioBufferList **)(v23 + 176);
  inInputData = v24;
  int v66 = outOutputData;
  if (v18)
  {
    uint64_t v25 = *v22;
    if (v25)
    {
      int v26 = *(_DWORD *)(v14 + 24) * v64;
      uint64_t v27 = (int *)(v22 + 3);
      do
      {
        int *v27 = v26;
        v27 += 4;
        --v25;
      }
      while (v25);
    }
    uint64_t v28 = sub_4CD70(a1 + 688, 1, 0);
    uint64_t mNumberBuffers = outOutputData->mNumberBuffers;
    if (mNumberBuffers)
    {
      int v30 = *(_DWORD *)(v28 + 104) * v64;
      p_UInt32 mDataByteSize = &outOutputData->mBuffers[0].mDataByteSize;
      do
      {
        _DWORD *p_mDataByteSize = v30;
        p_mDataByteSize += 4;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    uint64_t v32 = sub_4CD70(a1 + 688, 1, 0);
    uint64_t v33 = v24->mNumberBuffers;
    if (v33)
    {
      int v34 = *(_DWORD *)(v32 + 144) * v64;
      char v35 = &v24->mBuffers[0].mDataByteSize;
      do
      {
        *char v35 = v34;
        v35 += 4;
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    *((void *)v22 + 2) = *((void *)v19 + 2);
    v22[3] = v20;
  }
  if (*(unsigned char *)(a1 + 104))
  {
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    *(unsigned char *)(a1 + 104) = 0;
  }
  unsigned int v36 = v22[3];
  if (a4 && *(unsigned char *)(a1 + 364) && *a4)
  {
    unint64_t v37 = 0;
    __int16 v38 = (void **)(a4 + 4);
    do
    {
      bzero(*v38, *((unsigned int *)v38 - 1));
      ++v37;
      v38 += 2;
    }
    while (v37 < *a4);
  }
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, unsigned int *, double *, void))(a1 + 456))(a8, a3, a4, a5, v22, a7, *(void *)(a1 + 464));
  if (v18)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 448))(a1))
    {
      int v39 = 1;
    }
    else
    {
      bzero(*(void **)&a6[4 * v58 + 4], *v21);
      int v39 = 0;
    }
  }
  else
  {
    int v39 = 0;
  }
  __int16 v42 = *(OpaqueAudioConverter ***)(v15 + 192);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 448))(a1) || v22[3])
  {
    *(_DWORD *)(a1 + 632) = 0;
    goto LABEL_42;
  }
  unsigned int v45 = *(_DWORD *)(a1 + 632);
  if (v45 >> 6 >= 0x177)
  {
    if (v45 <= v64 + 24000)
    {
      sub_6330((uint64_t)v42);
      *(_DWORD *)(a1 + 632) += 2 * v64;
    }
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 632) = v45 + v64;
  if ((v39 & 1) == 0)
  {
LABEL_72:
    if ((*(unsigned char *)(a1 + 80) & 4) != 0)
    {
      unint64_t v54 = *v22;
      if (v54)
      {
        uint64_t v55 = 0;
        do
        {
          v22[v55 + 3] = v36;
          v55 += 4;
        }
        while (4 * v54 != v55);
        unint64_t v56 = 0;
        int v57 = (void **)(v22 + 4);
        do
        {
          if (*v57)
          {
            bzero(*v57, *((unsigned int *)v57 - 1));
            unint64_t v54 = *v22;
          }
          ++v56;
          v57 += 2;
        }
        while (v56 < v54);
      }
    }
    bzero(*(void **)&a6[4 * v58 + 4], *v21);
    int v39 = 0;
    goto LABEL_42;
  }
  unint64_t v50 = *v22;
  if (v50)
  {
    uint64_t v51 = 0;
    do
    {
      v22[v51 + 3] = v36;
      v51 += 4;
    }
    while (4 * v50 != v51);
    unint64_t v52 = 0;
    int v53 = (void **)(v22 + 4);
    int v39 = 1;
    do
    {
      if (*v53)
      {
        bzero(*v53, *((unsigned int *)v53 - 1));
        unint64_t v50 = *v22;
      }
      ++v52;
      v53 += 2;
    }
    while (v52 < v50);
  }
  else
  {
    int v39 = 1;
  }
LABEL_42:
  if (*(_DWORD *)(v15 + 8) == 1819304813)
  {
    uint64_t v43 = *(void *)(a1 + 88);
    *(_OWORD *)&buf.uint64_t mNumberBuffers = xmmword_4E7A40;
    if (v43) {
      sub_3FAE68(v43, &buf, (uint64_t)v22, v64, (uint64_t)*a7);
    }
    sub_269720(a1 + 144, *(unsigned int *)(v15 + 200), (uint64_t)v22, v64, (uint64_t)a7);
  }
  if (v39)
  {
    if (*(void *)(a1 + 776))
    {
      int v44 = sub_287DA0(*(unsigned char **)(a1 + 640), *(unsigned char **)(a1 + 648), 0);
      *(void *)&buf.uint64_t mNumberBuffers = 1;
      buf.mBuffers[0] = *(AudioBuffer *)&a4[4 * v44 + 2];
      sub_5586C(v42[73], v64, (AudioBufferList *)v22, outOutputData);
      v67[0] = outOutputData;
      v67[1] = &buf;
      (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, void *, uint64_t, AudioBufferList **))*v42
       + 18))(v42, a7, v64, 2, v67, 1, &inInputData);
    }
    else
    {
      sub_5586C(v42[73], v64, (AudioBufferList *)v22, outOutputData);
      (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v42
       + 18))(v42, a7, v64, 1, &v66, 1, &inInputData);
    }
    *(void *)&buf.uint64_t mNumberBuffers = 1;
    buf.mBuffers[0] = *(AudioBuffer *)(v21 - 1);
    sub_5586C(v42[84], v64, inInputData, &buf);
    sub_269720(a1 + 144, *(unsigned int *)(v15 + 204), (uint64_t)&buf, v64, (uint64_t)a7);
  }
  if (*(_DWORD *)(v15 + 8) == 1819304813)
  {
    uint64_t v46 = *(void *)(a1 + 88);
    *(_OWORD *)&buf.uint64_t mNumberBuffers = xmmword_4E7A50;
    if (v46) {
      sub_3FACA0(v46, &buf, (long long *)(v21 - 1), v64);
    }
  }
  if (a6 && *(unsigned char *)(a1 + 364) && *a6)
  {
    unint64_t v47 = 0;
    char v48 = (void **)(a6 + 4);
    do
    {
      bzero(*v48, *((unsigned int *)v48 - 1));
      ++v47;
      v48 += 2;
    }
    while (v47 < *a6);
  }
  return 0;
}

uint64_t sub_27D490(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 208);
  if (!result) {
    return *(void *)(*(void *)(*(void *)(a1 + 432) + 24) + 16);
  }
  return result;
}

uint64_t sub_27D4B0(os_unfair_lock_s *a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void))(*(void *)&a1->_os_unfair_lock_opaque + 96))(a1, 1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 112))(v4, v6);
  if (!result)
  {
    uint64_t result = sub_91290(a1, a2);
    if (!result)
    {
      *(double *)int v6 = a2;
      return (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 144))(v4, v6);
    }
  }
  return result;
}

void sub_27D580(void *a1)
{
  sub_27D5B8(a1);

  operator delete();
}

uint64_t sub_27D5B8(void *a1)
{
  *a1 = off_629EA0;
  int v2 = (std::__shared_weak_count *)a1[99];
  if (v2) {
    sub_4636C(v2);
  }

  return sub_2876BC((uint64_t)a1);
}

uint64_t sub_27D618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, void **a6, int a7, uint64_t a8)
{
  *(void *)int v106 = v106;
  *(void *)&v106[8] = v106;
  *(void *)&v106[16] = 0;
  sub_27E66C(&v103, a3);
  if (a7)
  {
    int v100 = 0;
    char v101 = 0;
    int v102 = 0;
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = v11 + 16;
    uint64_t v13 = *(void *)(v11 + 24);
    if (v13 != v11 + 16)
    {
      do
      {
        BOOL v14 = sub_36B4A4(*(void *)(v13 + 16));
        uint64_t v15 = *(unsigned int (**)(void))(**(void **)(v13 + 16) + 88);
        if (v14)
        {
          if (!v15())
          {
            char v85 = (os_log_t *)sub_32A48(13);
            int v86 = *v85;
            if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioBufferList buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Broadcast.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 136;
              _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Precondition failure.");
          }
          uint64_t v16 = v101;
          if (v101 >= v102)
          {
            unint64_t v20 = (unint64_t)v100;
            int64_t v21 = v101 - (unsigned char *)v100;
            uint64_t v22 = v101 - (unsigned char *)v100 + 1;
            if (v22 < 0) {
              sub_60548();
            }
            unint64_t v23 = v102 - (unsigned char *)v100;
            if (2 * (v102 - (unsigned char *)v100) > (unint64_t)v22) {
              uint64_t v22 = 2 * v23;
            }
            if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v24 = v22;
            }
            if (v24) {
              uint64_t v25 = (char *)operator new(v24);
            }
            else {
              uint64_t v25 = 0;
            }
            int v26 = &v25[v21];
            uint64_t v27 = &v25[v21];
            char *v27 = 2;
            uint64_t v17 = v27 + 1;
            if (v16 != (char *)v20)
            {
              uint64_t v28 = &v16[~v20];
              do
              {
                char v29 = *--v16;
                (v28--)[(void)v25] = v29;
              }
              while (v16 != (char *)v20);
              int v26 = v25;
            }
            int v100 = v26;
            int v102 = &v25[v24];
            if (v20) {
              operator delete((void *)v20);
            }
          }
          else
          {
            char *v101 = 2;
            uint64_t v17 = v16 + 1;
          }
          char v101 = v17;
          int v30 = (*(uint64_t (**)(void, void))(**(void **)(v13 + 16) + 88))(*(void *)(v13 + 16), 0);
          buf[0] = 0;
          sub_26B0C4((uint64_t)&v100, v17, (v30 - 1), buf);
        }
        else if (v15())
        {
          BOOL v18 = v101;
          unsigned int v19 = (*(uint64_t (**)(void, void))(**(void **)(v13 + 16) + 88))(*(void *)(v13 + 16), 0);
          buf[0] = 0;
          sub_26B0C4((uint64_t)&v100, v18, v19, buf);
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != v12);
    }
  }
  else
  {
    int v100 = 0;
    char v101 = 0;
    int v102 = 0;
  }
  uint64_t v31 = *(void *)(a3 + 8);
  uint64_t v32 = *(os_unfair_lock_s **)(v31 + 16);
  if (v31 != a3)
  {
    double v33 = 0.0;
    do
    {
      memset(buf, 0, 24);
      uint64_t v34 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v31 + 16) + 96))(*(void *)(v31 + 16), 1, 0);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v34 + 96))(v34, buf);
      for (uint64_t i = *(void *)buf; i != *(void *)&buf[8]; i += 56)
      {
        if (v33 == 0.0 || *(double *)(i + 48) > v33)
        {
          uint64_t v32 = *(os_unfair_lock_s **)(v31 + 16);
          double v33 = *(double *)(i + 48);
        }
      }
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      uint64_t v31 = *(void *)(v31 + 8);
    }
    while (v31 != a3);
  }
  buf[0] = 0;
  unsigned char buf[24] = 0;
  unsigned char buf[32] = 0;
  char v105 = 0;
  sub_2860EC((void *)a1, a2, (uint64_t)v106, (uint64_t)&v103, (uint64_t)&v100, a4, a5, 0, a6, v32, a8, (long long *)buf);
  if (v105 && (char)buf[55] < 0) {
    operator delete(*(void **)&buf[32]);
  }
  if (buf[24] && (char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (v100) {
    operator delete(v100);
  }
  sub_45F50(&v103);
  sub_45F50(v106);
  uint64_t v37 = 0;
  *(void *)a1 = off_629EA0;
  *(unsigned char *)(a1 + 768) = a7;
  if (a7)
  {
    uint64_t v38 = *(void *)(a3 + 8);
    if (v38 != a3)
    {
      uint64_t v37 = 0;
      do
      {
        BOOL v39 = sub_36B4A4(*(void *)(v38 + 16));
        uint64_t v41 = v38 + 8;
        uint64_t v38 = *(void *)(v38 + 8);
        uint64_t v40 = *(void *)(v41 + 8);
        if (v39) {
          uint64_t v37 = v40;
        }
      }
      while (v38 != a3);
    }
  }
  *(void *)(a1 + 776) = v37;
  sub_27E66C(&v100, a3);
  __int16 v42 = (char *)operator new(0xF0uLL);
  uint64_t v43 = v42;
  *((void *)v42 + 1) = 0;
  *((void *)v42 + 2) = 0;
  *(void *)__int16 v42 = off_62A128;
  *((_OWORD *)v42 + 2) = 0u;
  int v44 = (os_unfair_lock_s *)(v42 + 32);
  *((void *)v42 + 12) = 0;
  *((_OWORD *)v42 + 3) = 0u;
  *((_OWORD *)v42 + 4) = 0u;
  *((_OWORD *)v42 + 5) = 0u;
  *((_DWORD *)v42 + 24) = 1065353216;
  uint64_t v97 = (uint64_t)(v42 + 24);
  *((void *)v42 + 3) = off_63CFB0;
  if (!v102)
  {
    int v88 = (os_log_t *)sub_32A48(13);
    char v89 = *v88;
    if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 201;
      _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inPhysicalDeviceList is empty.\"", buf, 0x12u);
    }
    int v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v90, "inPhysicalDeviceList is empty.");
  }
  *((void *)v42 + 13) = v42 + 104;
  *((void *)v42 + 14) = v42 + 104;
  *((void *)v42 + 15) = 0;
  unsigned int v45 = (os_log_t *)sub_32A48(22);
  uint64_t v46 = *v45;
  if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 205;
    _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Building StreamList for AggregateStream_Broadcast:", buf, 0x12u);
  }
  for (uint64_t j = v101; j != (char *)&v100; uint64_t j = (char *)*((void *)j + 1))
  {
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)j + 2) + 88))(*((void *)j + 2), 1) != 1)
    {
      char v79 = (os_log_t *)sub_32A48(13);
      int v80 = *v79;
      if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
      {
        int v81 = (*(uint64_t (**)(void))(**((void **)j + 2) + 120))(*((void *)j + 2));
        (*(void (**)(unsigned char *__return_ptr))(**((void **)j + 2) + 128))(v106);
        uint64_t v82 = *(void *)v106;
        int v83 = (*(uint64_t (**)(void, uint64_t))(**((void **)j + 2) + 88))(*((void *)j + 2), 1);
        *(_DWORD *)AudioBufferList buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 212;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v81;
        *(_WORD *)&unsigned char buf[24] = 2112;
        *(void *)&buf[26] = v82;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v83;
        _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"AggregateStream_Broadcasts support only PhysicalDevices with a single output stream. PhysicalDevice ID %u (uid: \" \"\\\"%@\\\") has %u streams.\"", buf, 0x28u);
        sub_72924((uint64_t)v106);
      }
      int v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v84, "AggregateStream_Broadcasts support only PhysicalDevices with a single output stream. PhysicalDevice ID %u (uid: \"%@\") has %u streams.");
    }
    uint64_t v48 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)j + 2) + 96))(*((void *)j + 2), 1, 0);
    int v49 = operator new(0x18uLL);
    v49[1] = v43 + 104;
    v49[2] = v48;
    uint64_t v50 = *((void *)v43 + 13);
    *int v49 = v50;
    *(void *)(v50 + 8) = v49;
    *((void *)v43 + 13) = v49;
    ++*((void *)v43 + 15);
    uint64_t v51 = (os_log_t *)sub_32A48(22);
    unint64_t v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v53 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)j + 2) + 96))(*((void *)j + 2), 1, 0);
      int v54 = (*(uint64_t (**)(void))(**((void **)j + 2) + 120))(*((void *)j + 2));
      (*(void (**)(unsigned char *__return_ptr))(**((void **)j + 2) + 128))(v106);
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 215;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v53;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v54;
      *(_WORD *)&buf[34] = 2112;
      *(void *)&buf[36] = *(void *)v106;
      _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added stream %p from PhysicalDevice ID %u (uid: \"%@\").", buf, 0x2Cu);
      sub_72924((uint64_t)v106);
    }
  }
  sub_3F9454((void **)v43 + 16, a1, 0, 0x70667461u);
  sub_3F9454((void **)v43 + 19, a1, 0, 0x73666D61u);
  sub_86438((void *)v43 + 22, (uint64_t)&v100);
  *((void *)v43 + 25) = 0;
  *((void *)v43 + 26) = 0;
  *((void *)v43 + 27) = 0;
  *((void *)v43 + 28) = a1;
  *((_DWORD *)v43 + 58) = sub_3FA01C(a1, 0);
  uint64_t v55 = *((void *)v43 + 16);
  uint64_t v56 = *((void *)v43 + 17);
  if (v55 == v56)
  {
    int v91 = (os_log_t *)sub_32A48(13);
    int v92 = *v91;
    if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v106 = 136315394;
      *(void *)&v106[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 90;
      _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inAggregateStream_BroadcastFormatList is empty.\"", v106, 0x12u);
    }
    char v93 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v93, "inAggregateStream_BroadcastFormatList is empty.");
  }
  int v57 = 0;
  double v58 = *(double *)(v55 + 48);
  uint64_t v59 = *(void *)(v55 + 32);
  long long v60 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)AudioBufferList buf = *(_OWORD *)v55;
  *(_OWORD *)&uint8_t buf[16] = v60;
  *(void *)&unsigned char buf[32] = v59;
  int v61 = (_OWORD *)((unint64_t)buf | 0xC);
  unsigned int v62 = HIDWORD(v60);
  int v63 = *(_DWORD *)&buf[8];
  while (1)
  {
    int v64 = *(_DWORD *)(v55 + 8);
    *(_OWORD *)int v106 = *(_OWORD *)(v55 + 12);
    unsigned int v65 = *(_DWORD *)(v55 + 28);
    uint64_t v66 = *(void *)(v55 + 32);
    double v68 = *(double *)(v55 + 40);
    double v67 = *(double *)(v55 + 48);
    if (v67 >= v58)
    {
      BOOL v69 = v65 >= v62 && v64 == 1819304813;
      BOOL v70 = !v69;
      if (((v70 | v57) & 1) == 0)
      {
        _OWORD *v61 = *(_OWORD *)(v55 + 12);
        double v58 = v67;
        uint64_t v59 = v66;
        unsigned int v62 = v65;
        int v63 = 1819304813;
      }
    }
    if (v68 > 44100.0) {
      goto LABEL_83;
    }
    if (v67 < 44100.0 || v64 != 1819304813) {
      goto LABEL_83;
    }
    _OWORD *v61 = *(_OWORD *)v106;
    if (v65 == 2) {
      break;
    }
    int v57 = 1;
    double v58 = 44100.0;
    uint64_t v59 = v66;
    unsigned int v62 = v65;
    int v63 = 1819304813;
LABEL_83:
    v55 += 56;
    if (v55 == v56)
    {
      *(_DWORD *)&uint8_t buf[8] = v63;
      *(_DWORD *)&unsigned char buf[28] = v62;
      *(void *)&unsigned char buf[32] = v59;
      *(double *)AudioBufferList buf = v58;
      goto LABEL_86;
    }
  }
  *(_DWORD *)&uint8_t buf[8] = 1819304813;
  *(_DWORD *)&unsigned char buf[28] = 2;
  *(void *)&unsigned char buf[32] = v66;
  *(void *)AudioBufferList buf = 0x40E5888000000000;
LABEL_86:
  uint64_t v72 = sub_32A48(22);
  if (*(unsigned char *)(v72 + 8))
  {
    char v73 = *(NSObject **)v72;
    if (*(void *)v72)
    {
      if (os_log_type_enabled(*(os_log_t *)v72, OS_LOG_TYPE_DEBUG))
      {
        sub_259A4(&v103, (uint64_t)buf);
        int v74 = (v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v103
            : (std::string *)v103.__r_.__value_.__r.__words[0];
        *(_DWORD *)int v106 = 136315650;
        *(void *)&v106[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&v106[12] = 1024;
        *(_DWORD *)&v106[14] = 136;
        *(_WORD *)&v106[18] = 2080;
        *(void *)&v106[20] = v74;
        _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d AggregateStream_Broadcast::InitializeCurrentPhysicalFormat format is:%s", v106, 0x1Cu);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v97 + 152))(v97, buf, 1885762592);
  sub_D26B4(v97);
  char v75 = (os_log_t *)sub_32A48(22);
  int v76 = *v75;
  if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_DEBUG))
  {
    sub_4F64((uint64_t)&v103, v44);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v77 = &v103;
    }
    else {
      char v77 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v106 = 136315650;
    *(void *)&v106[4] = "AggregateStream_Broadcast.cpp";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 182;
    *(_WORD *)&v106[18] = 2080;
    *(void *)&v106[20] = v77;
    _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_DEBUG, "%25s:%-5d AggregateStream created: %s.", v106, 0x1Cu);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
  }
  *(void *)(a1 + 784) = v97;
  *(void *)(a1 + 792) = v43;
  sub_45F50(&v100);
  return a1;
}

void sub_27E398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  __cxa_free_exception(v31);
  uint64_t v34 = *v32;
  *uint64_t v32 = 0;
  if (v34) {
    operator delete();
  }
  sub_45F50(v30);
  char v35 = *v29;
  if (*v29)
  {
    v26[6].__shared_weak_owners_ = (uint64_t)v35;
    operator delete(v35);
  }
  unsigned int v36 = *v28;
  if (*v28)
  {
    v26[5].__shared_weak_owners_ = (uint64_t)v36;
    operator delete(v36);
  }
  sub_45F50(v27);
  sub_FE920(a15);
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v37);
  sub_45F50(&__p);
  sub_2876BC(a16);
  _Unwind_Resume(a1);
}

void sub_27E54C()
{
}

void sub_27E63C()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

void *sub_27E66C(void *result, uint64_t a2)
{
  *uint64_t result = result;
  result[1] = result;
  result[2] = 0;
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 1;
    int v6 = result;
    do
    {
      uint64_t result = operator new(0x18uLL);
      uint64_t v7 = *(void *)(v2 + 16);
      result[1] = v4;
      result[2] = v7;
      *uint64_t result = v6;
      v6[1] = result;
      void *v4 = result;
      v4[2] = v5;
      uint64_t v2 = *(void *)(v2 + 8);
      ++v5;
      int v6 = result;
    }
    while (v2 != a2);
  }
  return result;
}

void sub_27E6F0(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_27E708(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_27E72C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62A128;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_27E780(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62A128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

std::string *sub_27E7A0(std::string **a1, const void **a2, uint64_t a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  sub_5E220((uint64_t)__p, v6 + 2);
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      __int16 v8 = a2;
    }
    else {
      __int16 v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ": ");
  if ((v16 & 0x80u) == 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v10 = v16;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  std::string::append(*a1, (const std::string::value_type *)v9, v10);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a3 + 24))
  {
    int v11 = *(char *)(a3 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a3;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a3 + 8);
    }
  }
  else
  {
    uint64_t v12 = "unspecified";
    std::string::size_type v13 = 11;
  }
  return std::string::append(*a1, v12, v13);
}

void sub_27E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_27E8C8(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      if (*((char *)a2 + 55) >= 0) {
        size_t v6 = (char *)(a2 + 4);
      }
      else {
        size_t v6 = (char *)a2[4];
      }
      sub_5834(v13, v6);
      sub_21B7C(__p, v13[1]);
      if ((v15 & 0x80u) == 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        std::string::size_type v8 = v15;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      sub_49A90(v13);
      int v9 = (void *)a2[1];
      if (v9)
      {
        do
        {
          std::string::size_type v10 = v9;
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          std::string::size_type v10 = (void *)a2[2];
          BOOL v11 = *v10 == (void)a2;
          a2 = v10;
        }
        while (!v11);
      }
      if (v10 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v10;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_27E9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_27EA3C()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_27EA8C(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  int v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_158984((char **)(a1 + 16), Count);
    sub_158984(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

double sub_27EB10(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x8000000000000000) != 0 || (uint64_t v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(exception, "DictionaryRef_iterator iterator out of range.");
  }
  sub_20C54((uint64_t)&v13, *(const __CFString **)(v4 + 8 * v2));
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[5];
  std::string::size_type v8 = *(const void **)(v7 + 8 * v6);
  if (v8)
  {
    CFRetain(*(CFTypeRef *)(v7 + 8 * v6));
    sub_22084(&v12, v8);
    uint64_t v9 = v12;
  }
  else
  {
    uint64_t v9 = 0;
  }
  double result = *(double *)&v13;
  *(_OWORD *)a1 = v13;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v9;
  return result;
}

void sub_27EBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_27EC08(uint64_t a1, uint64_t a2)
{
  xmmword_64EBA8 = 0u;
  *(_OWORD *)&qword_64EBB8 = 0u;
  dword_64EBC8 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 32 * a2;
    uint64_t v6 = &unk_64E000;
    uint64_t v7 = (void *)&unk_64E000;
    while (1)
    {
      unint64_t v8 = sub_6789C(v3);
      unint64_t v9 = v8;
      unint64_t v10 = *((void *)v6 + 374);
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v8;
          if (v8 >= v10) {
            unint64_t v2 = v8 % v10;
          }
        }
        else
        {
          unint64_t v2 = (v10 - 1) & v8;
        }
        long long v13 = *(unsigned __int8 ***)(xmmword_64EBA8 + 8 * v2);
        if (v13)
        {
          uint64_t v14 = *v13;
          if (*v13)
          {
            while (1)
            {
              unint64_t v15 = *((void *)v14 + 1);
              if (v15 == v9)
              {
                if (sub_67CEC(v14 + 16, (unsigned __int8 *)v3))
                {
                  uint64_t v6 = &unk_64E000;
                  uint64_t v7 = (void *)&unk_64E000;
                  goto LABEL_80;
                }
              }
              else
              {
                if (v12 > 1)
                {
                  if (v15 >= v10) {
                    v15 %= v10;
                  }
                }
                else
                {
                  v15 &= v10 - 1;
                }
                if (v15 != v2)
                {
LABEL_19:
                  uint64_t v6 = &unk_64E000;
                  break;
                }
              }
              uint64_t v14 = *(unsigned __int8 **)v14;
              if (!v14) {
                goto LABEL_19;
              }
            }
          }
        }
        uint64_t v7 = &unk_64E000;
      }
      unsigned __int8 v16 = operator new(0x30uLL);
      void *v16 = 0;
      v16[1] = v9;
      uint64_t v17 = v16 + 2;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_21E8C(v17, *(void **)v3, *(void *)(v3 + 8));
        uint64_t v4 = v7[376];
      }
      else
      {
        long long v18 = *(_OWORD *)v3;
        v16[4] = *(void *)(v3 + 16);
        *(_OWORD *)uint64_t v17 = v18;
      }
      v16[5] = *(void *)(v3 + 24);
      float v19 = (float)(unint64_t)(v4 + 1);
      if (!v10 || (float)(*(float *)&dword_64EBC8 * (float)v10) < v19) {
        break;
      }
LABEL_70:
      uint64_t v35 = xmmword_64EBA8;
      unsigned int v36 = *(void **)(xmmword_64EBA8 + 8 * v2);
      if (v36)
      {
        void *v16 = *v36;
      }
      else
      {
        void *v16 = qword_64EBB8;
        qword_64EBB8 = (uint64_t)v16;
        *(void *)(v35 + 8 * v2) = &qword_64EBB8;
        if (!*v16) {
          goto LABEL_79;
        }
        unint64_t v37 = *(void *)(*v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v37 >= v10) {
            v37 %= v10;
          }
        }
        else
        {
          v37 &= v10 - 1;
        }
        unsigned int v36 = (void *)(xmmword_64EBA8 + 8 * v37);
      }
      void *v36 = v16;
LABEL_79:
      uint64_t v4 = v7[376] + 1;
      v7[376] = v4;
LABEL_80:
      v3 += 32;
      if (v3 == v5) {
        return;
      }
    }
    BOOL v20 = (v10 & (v10 - 1)) != 0;
    if (v10 < 3) {
      BOOL v20 = 1;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v19 / *(float *)&dword_64EBC8);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *((void *)v6 + 374);
    if (*(void *)&prime > v10) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)qword_64EBC0 / *(float *)&dword_64EBC8);
      if (v10 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)v6 + 374);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          size_t v24 = operator new(8 * *(void *)&prime);
          uint64_t v25 = (void *)xmmword_64EBA8;
          *(void *)&xmmword_64EBA8 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *((int8x8_t *)v6 + 374) = prime;
          do
            *(void *)(xmmword_64EBA8 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = (void **)qword_64EBB8;
          if (qword_64EBB8)
          {
            unint64_t v28 = *(void *)(qword_64EBB8 + 8);
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_64EBA8 + 8 * v28) = &qword_64EBB8;
            for (i = *v27; i; unint64_t v28 = v34)
            {
              unint64_t v34 = i[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(void *)&prime) {
                  v34 %= *(void *)&prime;
                }
              }
              else
              {
                v34 &= *(void *)&prime - 1;
              }
              if (v34 != v28)
              {
                if (!*(void *)(xmmword_64EBA8 + 8 * v34))
                {
                  *(void *)(xmmword_64EBA8 + 8 * v34) = v27;
                  goto LABEL_61;
                }
                void *v27 = (void *)*i;
                void *i = **(void **)(xmmword_64EBA8 + 8 * v34);
                **(void **)(xmmword_64EBA8 + 8 * v34) = i;
                uint64_t i = v27;
              }
              unint64_t v34 = v28;
LABEL_61:
              uint64_t v27 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_65;
        }
        uint64_t v38 = (void *)xmmword_64EBA8;
        *(void *)&xmmword_64EBA8 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0;
        *((void *)v6 + 374) = 0;
      }
    }
LABEL_65:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v2 = v9 % v10;
      }
      else {
        unint64_t v2 = v9;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
    goto LABEL_70;
  }
}

void sub_27F08C(_Unwind_Exception *a1)
{
  sub_175DBC(1, v1);
  sub_27F2D0();
  _Unwind_Resume(a1);
}

void sub_27F0C0(unsigned char *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  uint64_t v4 = sub_D86AC(a2, __s);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t sub_27F148(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_158984((char **)(a1 + 16), Count);
    sub_158984(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

uint64_t sub_27F1CC(const __CFDictionary *a1, const UInt8 *a2)
{
  CFBooleanRef v2 = (const __CFBoolean *)sub_D86AC(a1, a2);
  if (v2)
  {
    LOWORD(v2) = sub_20610(v2);
    int v3 = BYTE1(v2);
  }
  else
  {
    int v3 = 0;
  }
  return v2 | (v3 << 8);
}

uint64_t sub_27F200(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_1BABE0(a1 + 16, a2 + 16);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v4 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_21E8C(v4, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_27F278(_Unwind_Exception *a1)
{
  sub_8C710(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_27F28C(uint64_t a1)
{
  CFBooleanRef v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_27F2D0()
{
  CFNumberRef v0 = (void **)qword_64EBB8;
  if (qword_64EBB8)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      CFNumberRef v0 = v1;
    }
    while (v1);
  }
  CFBooleanRef v2 = (void *)xmmword_64EBA8;
  *(void *)&xmmword_64EBA8 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_27F348()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)CFTypeID v6 = 0u;
  *(_OWORD *)char v7 = 0u;
  long long v8 = 0u;
  int v9 = 0;
  BOOL v10 = (unsigned __int16)sub_6CBEC() > 0x100u;
  char v11 = 1;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  unint64_t v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v95[80] = 0;
  v95[120] = 0;
  v95[128] = 0;
  v95[200] = 0;
  v95[208] = 0;
  v95[248] = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  LOBYTE(v108) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  LOBYTE(v116) = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 1;
  char v131 = 0;
  char v132 = 0;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  LOBYTE(v137) = 0;
  char v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  __int16 v141 = 0;
  char v142 = 0;
  char v143 = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  LOBYTE(v152) = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(v156) = 0;
  char v157 = 0;
  LOBYTE(v158) = 0;
  char v159 = 0;
  LOBYTE(v160) = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  LOBYTE(__p) = 0;
  char v166 = 0;
  v167.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  v169.__r_.__value_.__s.__data_[0] = 0;
  char v170 = 0;
  v171.__r_.__value_.__s.__data_[0] = 0;
  char v172 = 0;
  int v173 = 256;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  __int16 v180 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 1;
  int v4 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  int v9 = 16777472;
  LOWORD(v12) = 257;
  HIWORD(v12) = 257;
  LOWORD(v14) = 256;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 1090519040;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  int v94 = 16843009;
  if (!v97) {
    char v97 = 1;
  }
  int v96 = 1836282987;
  if (!v99) {
    char v99 = 1;
  }
  int v98 = 2;
  if (!v101) {
    char v101 = 1;
  }
  int v100 = 2;
  if (!v103) {
    char v103 = 1;
  }
  int v102 = 4;
  int v106 = 36;
  char v107 = 1;
  int v108 = 36;
  char v109 = 1;
  int v110 = 36;
  char v111 = 1;
  int v116 = 36;
  char v117 = 1;
  int v133 = 41;
  char v134 = 1;
  int v135 = 3;
  char v136 = 1;
  int v137 = 25;
  char v138 = 1;
  int v139 = 41;
  char v140 = 1;
  __int16 v141 = 256;
  int v152 = 13;
  char v153 = 1;
  int v154 = 41;
  char v155 = 1;
  int v156 = 23;
  char v157 = 1;
  int v158 = 7;
  char v159 = 1;
  int v160 = 1;
  char v161 = 1;
  sub_208140(&__src, 77);
  if (v166)
  {
    if (SHIBYTE(v165) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v165 = v182;
  }
  else
  {
    long long __p = __src;
    uint64_t v165 = v182;
    char v166 = 1;
  }
  sub_87428(&v167, "_top_mic_general");
  sub_87428(&v169, "_top_mic_measurement");
  sub_87428(&v171, "_top_mic_hearing_accessibility");
  sub_402E04(&v0);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_27F9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_27F9C8(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_27FA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_27FAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_27FB64(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_27FBE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v6 = 0;
  int v4 = (*(uint64_t (**)(uint64_t, char *))(a1 + 8))(v3, &v6);
  if (!v6) {
    return 0;
  }
  sub_170E50(*(void *)(a1 + 40), v4);
  return v6 != 0;
}

void sub_27FC4C(void *a1)
{
  sub_27F9C8(a1 + 2);

  operator delete(a1);
}

void *sub_27FC88(uint64_t a1)
{
  return sub_27F9C8((void *)(a1 + 16));
}

uint64_t sub_27FC90(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_63FB78;
  a2[1] = v2;
  return sub_27FA4C((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_27FCC0(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_63FB78;
  v2[1] = v3;
  sub_27FA4C((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_27FD18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_27FD2C(void *a1)
{
  *a1 = off_63FB78;
  sub_27F9C8(a1 + 2);

  operator delete();
}

void *sub_27FD90(void *a1)
{
  *a1 = off_63FB78;
  sub_27F9C8(a1 + 2);
  return a1;
}

void sub_27FDD4()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)char v6 = 0u;
  *(_OWORD *)char v7 = 0u;
  long long v8 = 0u;
  int v9 = 0;
  BOOL v10 = (unsigned __int16)sub_6CBEC() > 0x100u;
  char v11 = 1;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  unint64_t v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v95[80] = 0;
  v95[120] = 0;
  v95[128] = 0;
  v95[200] = 0;
  v95[208] = 0;
  v95[248] = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  LOBYTE(v108) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  LOBYTE(v116) = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 1;
  char v131 = 0;
  char v132 = 0;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  LOBYTE(v137) = 0;
  char v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  __int16 v141 = 0;
  char v142 = 0;
  char v143 = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  LOBYTE(v152) = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(v156) = 0;
  char v157 = 0;
  LOBYTE(v158) = 0;
  char v159 = 0;
  LOBYTE(v160) = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  LOBYTE(__p) = 0;
  char v166 = 0;
  v167.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  v169.__r_.__value_.__s.__data_[0] = 0;
  char v170 = 0;
  v171.__r_.__value_.__s.__data_[0] = 0;
  char v172 = 0;
  int v173 = 256;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  __int16 v180 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 1;
  int v4 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  int v9 = 16777472;
  LOWORD(v12) = 257;
  HIWORD(v12) = 257;
  LOWORD(v14) = 256;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 1090519040;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  int v94 = 16843009;
  if (!v97) {
    char v97 = 1;
  }
  int v96 = 1836282987;
  if (!v99) {
    char v99 = 1;
  }
  int v98 = 2;
  if (!v101) {
    char v101 = 1;
  }
  int v100 = 2;
  if (!v103) {
    char v103 = 1;
  }
  int v102 = 4;
  int v106 = 36;
  char v107 = 1;
  int v108 = 36;
  char v109 = 1;
  int v110 = 36;
  char v111 = 1;
  int v116 = 36;
  char v117 = 1;
  int v133 = 41;
  char v134 = 1;
  int v135 = 3;
  char v136 = 1;
  int v137 = 25;
  char v138 = 1;
  int v139 = 41;
  char v140 = 1;
  __int16 v141 = 256;
  int v152 = 13;
  char v153 = 1;
  int v154 = 41;
  char v155 = 1;
  int v156 = 23;
  char v157 = 1;
  int v158 = 7;
  char v159 = 1;
  int v160 = 1;
  char v161 = 1;
  sub_208140(&__src, 78);
  if (v166)
  {
    if (SHIBYTE(v165) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v165 = v182;
  }
  else
  {
    long long __p = __src;
    uint64_t v165 = v182;
    char v166 = 1;
  }
  sub_87428(&v167, "_top_mic_general");
  sub_87428(&v169, "_top_mic_measurement");
  sub_87428(&v171, "_top_mic_hearing_accessibility");
  sub_402E04(&v0);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_280430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_280454(uint64_t a1)
{
  *(unsigned char *)(a1 + 4) = 1;
  *(_DWORD *)a1 = 1;
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2804B8(std::string *a1, uint64_t a2)
{
  sub_21C8C(v40, "INACTIVE");
  sub_21C8C(v41, "INITIAL_ROUTE");
  sub_21C8C(v42, "PARTNER_ROUTE");
  std::operator+<char>();
  int v4 = std::string::append(&v33, ", ApplyNonStereoHFPCulling: ", 0x1CuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v32, *(unsigned __int8 *)(a2 + 4));
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v6 = &v32;
  }
  else {
    char v6 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  long long v8 = std::string::append(&v34, (const std::string::value_type *)v6, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  BOOL v10 = std::string::append(&v35, ", Disallowed port: ", 0x13uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 16);
  if (v12)
  {
    __int16 v13 = std::__shared_weak_count::lock(v12);
    if (v13) {
      int v14 = *(const void **)(a2 + 8);
    }
    else {
      int v14 = 0;
    }
  }
  else
  {
    int v14 = 0;
    __int16 v13 = 0;
  }
  snprintf(__str, 0x13uLL, "%p", v14);
  sub_21C8C(__p, __str);
  if ((v31 & 0x80u) == 0) {
    unint64_t v15 = __p;
  }
  else {
    unint64_t v15 = (void **)__p[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v16 = v31;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  __int16 v17 = std::string::append(&v36, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = std::string::append(&v37, ", Allowed port: ", 0x10uLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = *(std::__shared_weak_count **)(a2 + 32);
  if (v21)
  {
    char v22 = std::__shared_weak_count::lock(v21);
    if (v22) {
      int v23 = *(const void **)(a2 + 24);
    }
    else {
      int v23 = 0;
    }
  }
  else
  {
    int v23 = 0;
    char v22 = 0;
  }
  snprintf(__s, 0x13uLL, "%p", v23);
  sub_21C8C(__str, __s);
  if ((v45 & 0x80u) == 0) {
    char v24 = __str;
  }
  else {
    char v24 = *(char **)__str;
  }
  if ((v45 & 0x80u) == 0) {
    std::string::size_type v25 = v45;
  }
  else {
    std::string::size_type v25 = v44;
  }
  char v26 = std::string::append(&v38, v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  char v28 = std::string::append(&v39, "}", 1uLL);
  *a1 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if ((char)v45 < 0) {
    operator delete(*(void **)__str);
  }
  if (v22) {
    sub_4636C(v22);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if ((char)v31 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    sub_4636C(v13);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v42[i + 2]) < 0) {
      operator delete((void *)v42[i]);
    }
  }
}

void sub_280870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v63 - 185) < 0) {
    operator delete(*(void **)(v63 - 208));
  }
  if (*(char *)(v63 - 81) < 0) {
    operator delete(*(void **)(v63 - 104));
  }
  if (v62) {
    sub_4636C(v62);
  }
  if (a61 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v61) {
    sub_4636C(v61);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  uint64_t v65 = 0;
  uint64_t v66 = v63 - 176;
  while (1)
  {
    if (*(char *)(v66 + v65 + 71) < 0) {
      operator delete(*(void **)(v66 + v65 + 48));
    }
    v65 -= 24;
    if (v65 == -72) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_28099C()
{
}

void sub_2809A4()
{
}

void sub_2809AC()
{
}

void sub_2809B4()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1 - 176) {
      JUMPOUT(0x280994);
    }
  }
}

void sub_2809DC(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_280A18(uint64_t a1, uint64_t a2)
{
  memset(v13, 0, sizeof(v13));
  sub_105048((uint64_t)v10, qword_64ED70);
  CFStringRef v8 = CFStringCreateWithCString(0, "Speaker Tap Stream Input", 0x600u);
  char v9 = 1;
  memset(v7, 0, sizeof(v7));
  sub_21C8C(__p, "");
  sub_105158(a1, &qword_64ED70, a2, (uint64_t)v13, (uint64_t)v10, (uint64_t)&v8, (uint64_t)v7, (long long *)__p);
  *(void *)a1 = &off_621AD0;
  *(_WORD *)(a1 + 520) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v7;
  sub_74004((void ***)__p);
  sub_72924((uint64_t)&v8);
  sub_72924((uint64_t)&v12);
  sub_72924((uint64_t)&v11);
  sub_72924((uint64_t)v10);
  *(void *)a1 = &off_62A160;
  return a1;
}

void sub_280B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  long long __p = &a16;
  sub_74004((void ***)&__p);
  sub_72924((uint64_t)&a19);
  sub_72924((uint64_t)&a25);
  sub_72924((uint64_t)&a23);
  sub_72924((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_280B9C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886610288)
  {
    char v3 = (os_log_t *)sub_32A48(17);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      long long v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v13 = "Device_SystemCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 103;
      __int16 v16 = 2080;
      __int16 v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    char v6 = (os_log_t *)sub_32A48(13);
    char v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int16 v13 = "Device_SystemCapture_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 104;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_280D54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_280D70(os_unfair_lock_s *a1)
{
}

void sub_2810A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_78FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_281170(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

void sub_2811AC(uint64_t *a1, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      sub_12240((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x13B13B13B13B13BLL) {
      sub_60548();
    }
    unint64_t v11 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x9D89D89D89D89DLL) {
      unint64_t v13 = 0x13B13B13B13B13BLL;
    }
    else {
      unint64_t v13 = v12;
    }
    sub_4ED64(a1, v13);
    uint64_t v14 = sub_10BB4(v9, a2, a3, a1[1]);
    goto LABEL_13;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - v10) >> 4) < a4)
  {
    int v15 = &a2[(a1[1] - v10) >> 4];
    sub_2813A0(a2, v15, v10);
    uint64_t v14 = sub_10BB4(v9, v15, a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }
  uint64_t v16 = sub_2813A0(a2, a3, v10);

  sub_12240((uint64_t)a1, v16);
}

void sub_281338(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_281340(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_281348(uint64_t a1)
{
  sub_1216C((unsigned int **)(a1 + 64));
  sub_1216C((unsigned int **)(a1 + 48));
  char v3 = (void **)(a1 + 24);
  sub_121EC(&v3);
  char v3 = (void **)a1;
  sub_121EC(&v3);
  return a1;
}

uint64_t sub_2813A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[1];
      *(_OWORD *)a3 = *v5;
      *(_OWORD *)(a3 + 16) = v6;
      long long v7 = v5[2];
      long long v8 = v5[3];
      long long v9 = v5[5];
      *(_OWORD *)(a3 + 64) = v5[4];
      *(_OWORD *)(a3 + 80) = v9;
      *(_OWORD *)(a3 + 32) = v7;
      *(_OWORD *)(a3 + 48) = v8;
      long long v10 = v5[6];
      long long v11 = v5[7];
      long long v12 = v5[9];
      *(_OWORD *)(a3 + 128) = v5[8];
      *(_OWORD *)(a3 + 144) = v12;
      *(_OWORD *)(a3 + 96) = v10;
      *(_OWORD *)(a3 + 112) = v11;
      sub_10CBC((unsigned int **)(a3 + 160), (uint64_t)(v5 + 10));
      sub_10CBC((unsigned int **)(a3 + 176), (uint64_t)(v5 + 11));
      *(_OWORD *)(a3 + 192) = v5[12];
      a3 += 208;
      v5 += 13;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_281434(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    off_65D928 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorCreate");
    off_65D930 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorInitialize");
    off_65D938 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorDispose");
    qword_65D940 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_65D948 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_65D950 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_65D958 = dlsym(v1, "AudioIssueDetectorAnalyzeBuffer");
    off_65D960 = (uint64_t (*)(void, void))dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_65D968 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_65D970 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_65D978 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_65D980 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_65D988 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    char v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3)
    {
      v3();
    }
  }
}

std::runtime_error *sub_2815F8(std::runtime_error *a1, const char *a2)
{
  double result = std::runtime_error::runtime_error(a1, a2);
  return result;
}

uint64_t sub_28162C(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 88))(a1, 0) >= 2)
  {
    long long v6 = (os_log_t *)sub_32A48(13);
    long long v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88))(a1, 0);
      int v14 = 136315650;
      int v15 = "AggregateDevice_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 806;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u input streams. Implement stream initialization in the derived class.\"", (uint8_t *)&v14, 0x18u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(exception, "The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u input streams. Implement stream initialization in the derived class.");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1) >= 2)
  {
    long long v10 = (os_log_t *)sub_32A48(13);
    long long v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1);
      int v14 = 136315650;
      int v15 = "AggregateDevice_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 807;
      __int16 v18 = 1024;
      int v19 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u output streams. Implement stream initialization in the derived class.\"", (uint8_t *)&v14, 0x18u);
    }
    unint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(v13, "The helper function InitializeStreamUsage() handles only single-stream AggregateDevice_Common instances, and this one has %u output streams. Implement stream initialization in the derived class.");
  }
  uint64_t v2 = 0;
  LOWORD(v14) = 256;
  do
  {
    uint64_t v3 = *((unsigned __int8 *)&v14 + v2);
    BOOL v4 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v3) != 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, BOOL))(*(void *)a1 + 584))(a1, v3, 0, v4);
    ++v2;
  }
  while (v2 != 2);
  return result;
}

void sub_28193C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_28195C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8 = a2;
  double v9 = sub_4FF1C(a1, a2);
  long long v10 = operator new(0x28uLL);
  __int16 v16 = (char *)v10 + 40;
  int v17 = (char *)v10 + 40;
  long long v11 = *(_OWORD *)(a5 + 16);
  *long long v10 = *(_OWORD *)a5;
  v10[1] = v11;
  *((void *)v10 + 4) = *(void *)(a5 + 32);
  long long __p = v10;
  if (v8) {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a3 + 136))(a3, a5, &__p, a4, v9);
  }
  else {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a3 + 136))(a3, a4, &__p, a5, v9);
  }
  uint64_t v13 = v12;
  if (__p)
  {
    __int16 v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_281A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_281AA8(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  sub_50020((uint64_t)a1);
  if (a3)
  {
    int v68 = (os_log_t *)sub_32A48(13);
    char v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 289;
      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"The default implementation of SetStreamIsUsed() handles only single-stream AggregateDevice_Common instances. Override the function in the derived class.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(exception, "The default implementation of SetStreamIsUsed() handles only single-stream AggregateDevice_Common instances. Override the function in the derived class.");
  }
  uint64_t v8 = sub_32A48(16);
  uint64_t v9 = sub_32A48(22);
  char v10 = 0;
  uint64_t v11 = 0;
  *(void *)AudioBufferList buf = 0x100000002;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1;
    if (v14) {
      goto LABEL_8;
    }
  }
  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
LABEL_8:
  int v15 = *(NSObject **)v8;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    __int16 v16 = a4 ? "En" : "Dis";
    int v17 = a2 ? "output" : "input";
    sub_21C8C(__p, v17);
    __int16 v18 = SHIBYTE(v89) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 291;
    __int16 v91 = 2080;
    int v92 = (std::string *)v16;
    __int16 v93 = 2080;
    int v94 = v18;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d %sabling %s stream on aggregate.", buf, 0x26u);
    if (SHIBYTE(v89) < 0) {
      operator delete(__p[0]);
    }
  }
  AudioObjectID v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)__p, a2, v19, a1[52]);
  if (a2) {
    uint64_t v20 = 83;
  }
  else {
    uint64_t v20 = 80;
  }
  if (a2) {
    int v21 = a1 + 83;
  }
  else {
    int v21 = a1 + 80;
  }
  if (v21[1] - a1[v20] != *((_DWORD *)v89 + 2))
  {
    char v22 = (os_log_t *)sub_32A48(16);
    int v23 = *v22;
    if (*v22)
    {
      if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        sub_16D6C0(&v87, (uint64_t)__p);
        char v24 = (v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v87
            : (std::string *)v87.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 296;
        __int16 v91 = 2080;
        int v92 = v24;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d streamUsage: %s.", buf, 0x1Cu);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (v21[1] - a1[v20] != *((_DWORD *)v89 + 2))
  {
    std::string::size_type v25 = (os_log_t *)sub_32A48(16);
    char v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        sub_282968(&v87, (char *)a1[v20], (char *)v21[1]);
        long long v27 = (v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v87
            : (std::string *)v87.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 297;
        __int16 v91 = 2080;
        int v92 = v27;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d usageMask: %s.", buf, 0x1Cu);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v28 = *((unsigned int *)v89 + 2);
  if (v21[1] - a1[v20] != v28)
  {
    char v71 = (os_log_t *)sub_32A48(13);
    int v72 = *v71;
    if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 298;
      __int16 v91 = 1024;
      LODWORD(v92) = a2;
      _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL aggregate device reported a different number of streams than our internal usage template for direction %d.\"", buf, 0x18u);
    }
    char v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "The HAL aggregate device reported a different number of streams than our internal usage template for direction %d.");
LABEL_133:
  }
  if (v28) {
    goto LABEL_48;
  }
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 88))(a1, a2))
  {
    char v77 = (os_log_t *)sub_32A48(13);
    int v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 299;
      _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL aggregate device reported no streams, yet we have one.\"", buf, 0x12u);
    }
    char v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "The HAL aggregate device reported no streams, yet we have one.");
    goto LABEL_133;
  }
  if (!*((_DWORD *)v89 + 2) && a4)
  {
    char v79 = (os_log_t *)sub_32A48(13);
    int v80 = *v79;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 300;
      _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Attempt to enable stream when there aren't any.\"", buf, 0x12u);
    }
    char v81 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v81 = &off_6414D8;
    v81[2] = 1852797029;
  }
LABEL_48:
  uint64_t v29 = sub_32A48(16);
  if (*(unsigned char *)(v29 + 8))
  {
    char v30 = *(NSObject **)v29;
    if (*(void *)v29)
    {
      if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 302;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Before modifying our stream usage data structure:", buf, 0x12u);
      }
    }
  }
  uint64_t v31 = sub_32A48(16);
  if (*(unsigned char *)(v31 + 8))
  {
    std::string v32 = *(NSObject **)v31;
    if (*(void *)v31)
    {
      if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
      {
        int v33 = *((_DWORD *)v89 + 2);
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 303;
        __int16 v91 = 1024;
        LODWORD(v92) = v33;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mNumberStreams: %u.", buf, 0x18u);
      }
    }
  }
  if (*((_DWORD *)v89 + 2))
  {
    uint64_t v34 = sub_32A48(16);
    if (*(unsigned char *)(v34 + 8))
    {
      std::string v35 = *(NSObject **)v34;
      if (*(void *)v34)
      {
        if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
        {
          int v36 = *((_DWORD *)v89 + 3);
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 304;
          __int16 v91 = 1024;
          LODWORD(v92) = v36;
          _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[0]: %u", buf, 0x18u);
        }
      }
    }
  }
  if (*((_DWORD *)v89 + 2) >= 2u)
  {
    uint64_t v37 = sub_32A48(16);
    if (*(unsigned char *)(v37 + 8))
    {
      std::string v38 = *(NSObject **)v37;
      if (*(void *)v37)
      {
        if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
        {
          int v39 = *((_DWORD *)v89 + 4);
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 305;
          __int16 v91 = 1024;
          LODWORD(v92) = v39;
          _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[1]: %u", buf, 0x18u);
        }
      }
    }
  }
  if (*((_DWORD *)v89 + 2) >= 3u)
  {
    uint64_t v40 = sub_32A48(16);
    if (*(unsigned char *)(v40 + 8))
    {
      int v41 = *(NSObject **)v40;
      if (*(void *)v40)
      {
        if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
        {
          int v42 = *((_DWORD *)v89 + 5);
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 306;
          __int16 v91 = 1024;
          LODWORD(v92) = v42;
          _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[2]: %u", buf, 0x18u);
        }
      }
    }
  }
  if (*((_DWORD *)v89 + 2))
  {
    uint64_t v43 = a1[v20];
    unint64_t v44 = v21[1] - v43;
    if (v44)
    {
      uint64_t v45 = 0;
      char v46 = v89 + 12;
      do
      {
        int v47 = *(unsigned __int8 *)(v43 + v45);
        if (v47 == 1) {
          unsigned int v48 = a4;
        }
        else {
          unsigned int v48 = 0;
        }
        if (v47 == 2) {
          int v49 = 1;
        }
        else {
          int v49 = v48;
        }
        *(_DWORD *)&v46[4 * v45++] = v49;
      }
      while (v44 > v45);
    }
    char v50 = (os_log_t *)sub_32A48(16);
    int v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v86 = *(uint64_t *)((char *)a1 + 268);
      char v52 = &v87;
      sub_4D60(&v87, (unsigned int *)&v86);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v52 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      sub_16D6C0(v84, (uint64_t)__p);
      int v53 = v85;
      char v54 = (void **)v84[0];
      if (a2) {
        int v55 = "output";
      }
      else {
        int v55 = "input";
      }
      sub_21C8C(v82, v55);
      char v56 = v84;
      if (v53 < 0) {
        char v56 = v54;
      }
      int v57 = v82;
      if (v83 < 0) {
        int v57 = (void **)v82[0];
      }
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 323;
      __int16 v91 = 2080;
      int v92 = v52;
      __int16 v93 = 2080;
      int v94 = v56;
      __int16 v95 = 2080;
      int v96 = v57;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VA Stream usage for %s is %s for direction %s", buf, 0x30u);
      if (v83 < 0) {
        operator delete(v82[0]);
      }
      if (v85 < 0) {
        operator delete(v84[0]);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
    }
    if (*((_DWORD *)v89 + 2))
    {
      uint64_t v58 = sub_32A48(16);
      if (*(unsigned char *)(v58 + 8))
      {
        int v59 = *(NSObject **)v58;
        if (*(void *)v58)
        {
          if (os_log_type_enabled(*(os_log_t *)v58, OS_LOG_TYPE_DEBUG))
          {
            int v60 = *((_DWORD *)v89 + 3);
            *(_DWORD *)AudioBufferList buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 324;
            __int16 v91 = 1024;
            LODWORD(v92) = v60;
            _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[0]: %u", buf, 0x18u);
          }
        }
      }
    }
    if (*((_DWORD *)v89 + 2) >= 2u)
    {
      uint64_t v61 = sub_32A48(16);
      if (*(unsigned char *)(v61 + 8))
      {
        char v62 = *(NSObject **)v61;
        if (*(void *)v61)
        {
          if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
          {
            int v63 = *((_DWORD *)v89 + 4);
            *(_DWORD *)AudioBufferList buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 325;
            __int16 v91 = 1024;
            LODWORD(v92) = v63;
            _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[1]: %u", buf, 0x18u);
          }
        }
      }
    }
    if (*((_DWORD *)v89 + 2) >= 3u)
    {
      uint64_t v64 = sub_32A48(16);
      if (*(unsigned char *)(v64 + 8))
      {
        uint64_t v65 = *(NSObject **)v64;
        if (*(void *)v64)
        {
          if (os_log_type_enabled(*(os_log_t *)v64, OS_LOG_TYPE_DEBUG))
          {
            int v66 = *((_DWORD *)v89 + 5);
            *(_DWORD *)AudioBufferList buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 326;
            __int16 v91 = 1024;
            LODWORD(v92) = v66;
            _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[2]: %u", buf, 0x18u);
          }
        }
      }
    }
    sub_282A80((uint64_t)a1, a2, a4, (unsigned char *)a1[v20], (unsigned char *)v21[1]);
    int v67 = sub_16D560((uint64_t)__p);
    if (v67)
    {
      int v74 = (os_log_t *)sub_32A48(13);
      char v75 = *v74;
      if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 331;
        _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"VAStreamUsage::Set() failed.\"", buf, 0x12u);
      }
      int v76 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v76 = &off_6414D8;
      v76[2] = v67;
    }
    sub_282CAC((uint64_t)a1, a2, a4, (unsigned char *)a1[v20], (unsigned char *)v21[1]);
    if ((sub_23AC0() & (a2 ^ 1)) == 1)
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 472))(buf, a1);
      sub_A6748(a1, (uint64_t)(a1 + 53), (uint64_t)__p, (uint64_t)buf);
      sub_463E0(*(void **)&buf[8]);
    }
  }
  free(v89);
}

void sub_282898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  __cxa_free_exception(v30);
  free(a28);
  _Unwind_Resume(a1);
}

void sub_282960()
{
}

std::string *sub_282968(std::string *a1, char *a2, char *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      long long v6 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v9
         : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(v9.__r_.__value_.__r.__words[2])
         : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_282A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_282A80(uint64_t result, uint64_t a2, unsigned int a3, unsigned char *a4, unsigned char *a5)
{
  v23[0] = a2;
  uint64_t v24 = result + 424;
  int v25 = 0;
  if (a4 != a5)
  {
    long long v6 = a4;
    int v9 = 0;
    if (a2) {
      char v10 = "output";
    }
    else {
      char v10 = "input";
    }
    do
    {
      uint64_t v11 = sub_32A48(16);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_21C8C(__p, v10);
            int v13 = v22;
            char v14 = (void **)__p[0];
            int v15 = *v6;
            uint64_t v16 = sub_329E34((uint64_t)v23);
            int v17 = __p;
            if (v13 < 0) {
              int v17 = v14;
            }
            *(_DWORD *)AudioBufferList buf = 136316162;
            long long v27 = "AggregateDevice_Common.cpp";
            __int16 v28 = 1024;
            __int16 v18 = "false";
            if (((v15 != 0) & a3) != 0) {
              __int16 v18 = "true";
            }
            int v29 = 992;
            __int16 v30 = 2080;
            uint64_t v31 = v17;
            __int16 v32 = 2080;
            int v33 = v18;
            __int16 v34 = 2048;
            uint64_t v35 = v16;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will call WillSetStreamIsUsed(%s, %s) on %p", buf, 0x30u);
            if (v22 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t result = sub_329E34((uint64_t)v23);
      if (result)
      {
        uint64_t v19 = sub_329E34((uint64_t)v23);
        if (*v6 == 1) {
          uint64_t v20 = a3;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 176))(v19, a2, v20);
        int v25 = ++v9;
      }
      ++v6;
    }
    while (v6 != a5);
  }
  return result;
}

void sub_282C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_282CAC(uint64_t result, uint64_t a2, unsigned int a3, unsigned char *a4, unsigned char *a5)
{
  v23[0] = a2;
  uint64_t v24 = result + 424;
  int v25 = 0;
  if (a4 != a5)
  {
    long long v6 = a4;
    int v9 = 0;
    if (a2) {
      char v10 = "output";
    }
    else {
      char v10 = "input";
    }
    do
    {
      uint64_t v11 = sub_32A48(16);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_21C8C(__p, v10);
            int v13 = v22;
            char v14 = (void **)__p[0];
            int v15 = *v6;
            uint64_t v16 = sub_329E34((uint64_t)v23);
            int v17 = __p;
            if (v13 < 0) {
              int v17 = v14;
            }
            *(_DWORD *)AudioBufferList buf = 136316162;
            long long v27 = "AggregateDevice_Common.cpp";
            __int16 v28 = 1024;
            __int16 v18 = "false";
            if (((v15 != 0) & a3) != 0) {
              __int16 v18 = "true";
            }
            int v29 = 1009;
            __int16 v30 = 2080;
            uint64_t v31 = v17;
            __int16 v32 = 2080;
            int v33 = v18;
            __int16 v34 = 2048;
            uint64_t v35 = v16;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will call DidSetStreamIsUsed(%s, %s) on %p", buf, 0x30u);
            if (v22 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t result = sub_329E34((uint64_t)v23);
      if (result)
      {
        uint64_t v19 = sub_329E34((uint64_t)v23);
        if (*v6) {
          uint64_t v20 = a3;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 184))(v19, a2, v20);
        int v25 = ++v9;
      }
      ++v6;
    }
    while (v6 != a5);
  }
  return result;
}

void sub_282EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_282ED8(uint64_t a1, int a2)
{
  uint64_t v2 = 696;
  if (a2) {
    uint64_t v2 = 720;
  }
  uint64_t v3 = 688;
  if (a2) {
    uint64_t v3 = 712;
  }
  int v4 = -991146299 * ((*(void *)(a1 + v2) - *(void *)(a1 + v3)) >> 4);
  if (!v4) {
    return 0;
  }
  unsigned int v6 = 0;
  LODWORD(v7) = 0;
  uint64_t v8 = a1 + 688;
  do
  {
    uint64_t v9 = sub_4CD70(v8, a2, v6);
    unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(v9 + 192) + 128))(*(void *)(v9 + 192));
    if (v10 <= v7) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v10;
    }
    ++v6;
  }
  while (v4 != v6);
  return v7;
}

uint64_t sub_282FA8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 544);
  uint64_t v2 = *(void *)(result + 552);
  while (v1 != v2)
  {
    uint64_t v3 = *(void *)(*(void *)v1 + 136);
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(v3 + 360) + 16));
    if (v4) {
      uint64_t result = sub_A7F4C(*(void *)(v3 + 360));
    }
    v1 += 16;
  }
  return result;
}

void sub_282FFC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(uint64_t **)(a1 + 544);
  uint64_t v3 = *(uint64_t **)(a1 + 552);
  if (v2 != v3)
  {
    long long v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (*v2 && !sub_513F8(*v2, (uint64_t)&v19))
      {
        if ((unint64_t)v7 >= v6)
        {
          unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - v5) >> 3) + 1;
          if (v10 > 0x666666666666666) {
            sub_60548();
          }
          if (0x999999999999999ALL * ((uint64_t)(v6 - (void)v5) >> 3) > v10) {
            unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(v6 - (void)v5) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 3) >= 0x333333333333333) {
            unint64_t v11 = 0x666666666666666;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unint64_t v11 = (unint64_t)sub_2831B8(v11);
          }
          else {
            uint64_t v12 = 0;
          }
          unint64_t v13 = v11 + 8 * (((char *)v7 - v5) >> 3);
          long long v14 = v20;
          *(_OWORD *)unint64_t v13 = v19;
          *(_OWORD *)(v13 + 16) = v14;
          *(void *)(v13 + 32) = v21;
          if (v7 == (_OWORD *)v5)
          {
            __int16 v18 = (unsigned char *)(v11 + 8 * (((char *)v7 - v5) >> 3));
          }
          else
          {
            unint64_t v15 = v11 + 8 * (((char *)v7 - v5) >> 3);
            do
            {
              long long v16 = *(_OWORD *)((char *)v7 - 40);
              long long v17 = *(_OWORD *)((char *)v7 - 24);
              __int16 v18 = (unsigned char *)(v15 - 40);
              *(void *)(v15 - 8) = *((void *)v7 - 1);
              *(_OWORD *)(v15 - 24) = v17;
              *(_OWORD *)(v15 - 40) = v16;
              uint64_t v7 = (_OWORD *)((char *)v7 - 40);
              v15 -= 40;
            }
            while (v7 != (_OWORD *)v5);
          }
          unint64_t v6 = v11 + 40 * v12;
          uint64_t v7 = (_OWORD *)(v13 + 40);
          *a2 = v18;
          a2[1] = v13 + 40;
          a2[2] = v6;
          if (v5) {
            operator delete(v5);
          }
          long long v5 = v18;
        }
        else
        {
          long long v8 = v19;
          long long v9 = v20;
          *((void *)v7 + 4) = v21;
          *uint64_t v7 = v8;
          v7[1] = v9;
          uint64_t v7 = (_OWORD *)((char *)v7 + 40);
        }
        a2[1] = v7;
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_283198(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2831B8(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    sub_60560();
  }
  return operator new(40 * a1);
}

void sub_283200(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v48 = 0x676C6F6273666D61;
  int v49 = 0;
  uint64_t v2 = *(uint64_t **)(a1 + 544);
  uint64_t v3 = *(uint64_t **)(a1 + 552);
  if (v2 != v3)
  {
    uint64_t v43 = a2 + 2;
    unint64_t v44 = v3;
    uint64_t v45 = a2;
    do
    {
      if (*v2 && sub_31F1F4(*v2, (int *)&v48))
      {
        unsigned int v47 = 0;
        uint64_t v4 = sub_31E63C(*v2, (int *)&v48, 0, 0);
        unsigned int v5 = v4;
        char v46 = &v42;
        unsigned int v47 = v4;
        LODWORD(v6) = v4 / 0x38;
        __chkstk_darwin(v4);
        long long v8 = (char *)&v42 - v7;
        sub_31E880(*v2, (int *)&v48, 0, 0, &v47, (unsigned int *)((char *)&v42 - v7));
        if (v5 >= 0x38)
        {
          long long v9 = 0;
          unint64_t v10 = 0;
          unint64_t v11 = 0;
          uint64_t v12 = 0;
          if (v6 <= 1) {
            uint64_t v6 = 1;
          }
          else {
            uint64_t v6 = v6;
          }
          do
          {
            unint64_t v13 = &v8[56 * v12];
            if (v10 >= v11)
            {
              unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v9) >> 3) + 1;
              if (v16 > 0x666666666666666) {
                sub_60548();
              }
              if (0x999999999999999ALL * ((uint64_t)(v11 - (void)v9) >> 3) > v16) {
                unint64_t v16 = 0x999999999999999ALL * ((uint64_t)(v11 - (void)v9) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (void)v9) >> 3) >= 0x333333333333333) {
                unint64_t v17 = 0x666666666666666;
              }
              else {
                unint64_t v17 = v16;
              }
              if (v17) {
                unint64_t v17 = (unint64_t)sub_2831B8(v17);
              }
              else {
                uint64_t v18 = 0;
              }
              unint64_t v19 = v17 + 8 * ((uint64_t)(v10 - (void)v9) >> 3);
              long long v20 = *(_OWORD *)v13;
              long long v21 = *((_OWORD *)v13 + 1);
              *(void *)(v19 + 32) = *((void *)v13 + 4);
              *(_OWORD *)unint64_t v19 = v20;
              *(_OWORD *)(v19 + 16) = v21;
              if ((void *)v10 == v9)
              {
                int v25 = (void *)(v17 + 8 * ((uint64_t)(v10 - (void)v9) >> 3));
              }
              else
              {
                unint64_t v22 = v17 + 8 * ((uint64_t)(v10 - (void)v9) >> 3);
                do
                {
                  long long v23 = *(_OWORD *)(v10 - 40);
                  long long v24 = *(_OWORD *)(v10 - 24);
                  int v25 = (void *)(v22 - 40);
                  *(void *)(v22 - 8) = *(void *)(v10 - 8);
                  *(_OWORD *)(v22 - 24) = v24;
                  *(_OWORD *)(v22 - 40) = v23;
                  v10 -= 40;
                  v22 -= 40;
                }
                while ((void *)v10 != v9);
              }
              unint64_t v11 = v17 + 40 * v18;
              unint64_t v10 = v19 + 40;
              if (v9) {
                operator delete(v9);
              }
              long long v9 = v25;
            }
            else
            {
              long long v14 = *(_OWORD *)v13;
              long long v15 = *((_OWORD *)v13 + 1);
              *(void *)(v10 + 32) = *((void *)v13 + 4);
              *(_OWORD *)unint64_t v10 = v14;
              *(_OWORD *)(v10 + 16) = v15;
              v10 += 40;
            }
            ++v12;
          }
          while (v12 != v6);
        }
        else
        {
          long long v9 = 0;
          unint64_t v10 = 0;
        }
        char v26 = v45;
        __int16 v28 = (void *)v45[1];
        unint64_t v27 = v45[2];
        if ((unint64_t)v28 >= v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *v45) >> 3);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v45) >> 3);
          if (2 * v32 > v31) {
            unint64_t v31 = 2 * v32;
          }
          if (v32 >= 0x555555555555555) {
            unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v33 = v31;
          }
          uint64_t v3 = v44;
          int v53 = v43;
          if (v33)
          {
            if (v33 > 0xAAAAAAAAAAAAAAALL) {
              sub_60560();
            }
            __int16 v34 = (char *)operator new(24 * v33);
          }
          else
          {
            __int16 v34 = 0;
          }
          uint64_t v35 = &v34[24 * v30];
          char v50 = v34;
          v51.i64[0] = (uint64_t)v35;
          v51.i64[1] = (uint64_t)v35;
          char v52 = &v34[24 * v33];
          *((void *)v35 + 1) = 0;
          *((void *)v35 + 2) = 0;
          *(void *)uint64_t v35 = 0;
          sub_2836A0(v35, v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v9) >> 3));
          uint64_t v36 = v51.i64[0];
          uint64_t v29 = v51.i64[1] + 24;
          v51.i64[1] += 24;
          std::string v38 = (void *)*v26;
          uint64_t v37 = (void *)v26[1];
          if (v37 == (void *)*v26)
          {
            int64x2_t v40 = vdupq_n_s64((unint64_t)v37);
          }
          else
          {
            do
            {
              *(void *)(v36 - 24) = 0;
              *(void *)(v36 - 16) = 0;
              v36 -= 24;
              *(void *)(v36 + 16) = 0;
              long long v39 = *(_OWORD *)(v37 - 3);
              v37 -= 3;
              *(_OWORD *)uint64_t v36 = v39;
              *(void *)(v36 + 16) = v37[2];
              *uint64_t v37 = 0;
              v37[1] = 0;
              v37[2] = 0;
            }
            while (v37 != v38);
            int64x2_t v40 = *(int64x2_t *)v26;
            uint64_t v29 = v51.i64[1];
          }
          *char v26 = v36;
          v26[1] = v29;
          int64x2_t v51 = v40;
          int v41 = (char *)v26[2];
          v26[2] = (uint64_t)v52;
          char v52 = v41;
          char v50 = (char *)v40.i64[0];
          sub_15BCFC((uint64_t)&v50);
        }
        else
        {
          void *v28 = 0;
          v28[1] = 0;
          void v28[2] = 0;
          sub_2836A0(v28, v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v9) >> 3));
          uint64_t v29 = (uint64_t)(v28 + 3);
          v26[1] = (uint64_t)(v28 + 3);
          uint64_t v3 = v44;
        }
        v26[1] = v29;
        if (v9) {
          operator delete(v9);
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_283640(_Unwind_Exception *a1)
{
  *(void *)(v3 + 8) = v2;
  if (v1) {
    operator delete(v1);
  }
  *(void *)(v4 - 144) = *(void *)(v4 - 168);
  sub_15B944((void ***)(v4 - 144));
  _Unwind_Resume(a1);
}

void *sub_2836A0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x666666666666667) {
      sub_60548();
    }
    uint64_t result = sub_2831B8(a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[5 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_28372C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_283748(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    uint64_t v4 = dlerror();
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_64EE98 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_64EEA0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_64EEA8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_64EEB0 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_64EEB8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_64EEC0 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_64EEC8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_64EED0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_64EED8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_64EEE0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_64EEE8 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_64EEF0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_64EEF8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_64EF00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_64EF08 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_64EF10 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    off_64EF18 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    off_64EF20 = (uint64_t (*)(void, void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_64EF28 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_64EF30 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_64EF38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    uint64_t v4 = v2;
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_283A68(uint64_t a1)
{
  unint64_t v16 = sub_2205E8(a1 + 264);
  uint64_t v2 = (unint64_t *)(a1 + 80);
  if ((sub_283CF0(&v16, 0, (uint64_t)&v16, 8u, (void *)(a1 + 80)) & 1) == 0)
  {
    int v3 = (os_log_t *)sub_32A48(16);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = 0;
      char v15 = 8;
      strcpy((char *)__p, "00000000");
      uint64_t v6 = 7;
      do
      {
        if ((v16 >> v5))
        {
          if (v15 >= 0) {
            uint64_t v7 = __p;
          }
          else {
            uint64_t v7 = (void **)__p[0];
          }
          *((unsigned char *)v7 + v6) = 49;
        }
        ++v5;
        --v6;
      }
      while (v5 != 8);
      uint64_t v8 = __p;
      if (v15 < 0) {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      __int16 v18 = 1024;
      int v19 = 730;
      __int16 v20 = 2080;
      long long v21 = v8;
      __int16 v22 = 2080;
      long long v23 = "anc|tel|sec|pri|hal";
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags have changed to %s (%s)", buf, 0x26u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t, unint64_t *))(*(void *)a1 + 608))(buf, a1, &v16);
    uint64_t v9 = *(void *)buf;
    *(void *)AudioBufferList buf = 0;
    uint64_t v10 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      uint64_t v11 = *(void *)buf;
      *(void *)AudioBufferList buf = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
    unint64_t v12 = v16;
    unint64_t v13 = *v2;
    if (((v16 ^ *v2) & 1) != 0
      || ((v16 >> 5) & 1) != ((v13 >> 5) & 1)
      || ((v16 >> 6) & 1) != ((v13 >> 6) & 1)
      || ((v16 >> 7) & 1) != ((v13 >> 7) & 1))
    {
      sub_9468(a1, v16);
      unint64_t v12 = v16;
    }
    *(void *)(a1 + 80) = v12;
    *(unsigned char *)(a1 + 104) = 1;
  }
}

uint64_t sub_283CF0(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_283DBC(uint64_t a1, int a2)
{
  sub_50020(a1);
  uint64_t v4 = 696;
  if (a2) {
    uint64_t v4 = 720;
  }
  uint64_t v5 = 688;
  if (a2) {
    uint64_t v5 = 712;
  }
  return *(void *)(a1 + v4) != *(void *)(a1 + v5)
      && *(unsigned char *)(*(void *)(sub_4CD70(a1 + 688, a2, 0) + 192) + 449) != 0;
}

uint64_t sub_283E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_50020(a1);
  uint64_t v6 = 696;
  if (a2) {
    uint64_t v6 = 720;
  }
  uint64_t v7 = 688;
  if (a2) {
    uint64_t v7 = 712;
  }
  int v8 = -991146299 * ((*(void *)(a1 + v6) - *(void *)(a1 + v7)) >> 4);
  if (v8 < 1) {
    return 0;
  }
  uint64_t v9 = a1 + 688;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 328))(a1, a2);
  int v11 = 1;
  do
  {
    int v12 = v11;
    uint64_t v13 = sub_4CD70(v9, a2, v11 - 1);
    int v14 = sub_1B88A4(*(void *)(v13 + 192), a3);
    ++v11;
    if (v14) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v12 < v8;
    }
  }
  while (v15);
  uint64_t v16 = v14 ? 2003329396 : 0;
  if (!v14) {
    return 0;
  }
  do
  {
    uint64_t v17 = sub_4CD70(v9, a2, v11 - 2);
    sub_1B88A4(*(void *)(v17 + 192), v10);
    --v11;
  }
  while (v11 > 1);
  return v16;
}

int **sub_283F78(uint64_t a1, int a2)
{
  unsigned int v100 = a2;
  sub_50020(a1);
  if (!*(void *)(a1 + 416))
  {
    int v80 = (os_log_t *)sub_32A48(13);
    char v81 = *v80;
    if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 557;
      _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: \"No HAL IO Proc has been set.\"", __p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No HAL IO Proc has been set.");
  }
  if (!*(void *)(a1 + 456))
  {
    char v83 = (os_log_t *)sub_32A48(13);
    int v84 = *v83;
    if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 558;
      _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mClientIOProc is NULL]: \"No client IO Proc has been set.\"", __p, 0x12u);
    }
    char v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v85, "No client IO Proc has been set.");
  }
  v99[0] = (int *)&v100;
  v99[1] = (int *)a1;
  char v4 = sub_7A50((unsigned int *)a1, a2, 0);
  char v5 = v4;
  if ((v4 & 3) != 3)
  {
    if ((v4 & 3) == 0)
    {
      uint64_t v6 = sub_32A48(16);
      sub_6974(2, v6, (uint64_t)"", 577, (uint64_t)"", "Stop is called on an already stopped device");
    }
    if (v100 == 1)
    {
      if ((v5 & 1) == 0) {
        return sub_285308(v99);
      }
    }
    else if (v100 || (v5 & 2) == 0)
    {
      return sub_285308(v99);
    }
    int v14 = sub_A6520(a1);
    uint64_t v15 = *(void *)(a1 + 240);
    uint64_t v16 = *(void *)(a1 + 248);
    while (v15 != v16)
    {
      (*(void (**)(void))(**(void **)v15 + 32))();
      v15 += 16;
    }
    uint64_t v17 = sub_32A48(16);
    uint64_t v18 = sub_32A48(31);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)long long __p = 0x100000002;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *(int *)&__p[4 * v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23) {
        goto LABEL_47;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_47:
    sub_2417C(__p, v100);
    int v38 = v111[3];
    long long v39 = *(const char **)__p;
    int v40 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    int v41 = __p;
    if (v38 < 0) {
      int v41 = v39;
    }
    sub_6974(3, v17, (uint64_t)"", 596, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v41, v40);
    if ((v111[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    kdebug_trace();
    if (v100 == 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    OSStatus v43 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v42);
    kdebug_trace();
    if (v43)
    {
      uint64_t v44 = sub_32A48(16);
      sub_2417C(__p, v43);
      int v45 = v111[3];
      char v46 = *(const char **)__p;
      sub_4F64((uint64_t)&v121, (os_unfair_lock_t)(a1 + 8));
      unsigned int v47 = __p;
      if (v45 < 0) {
        unsigned int v47 = v46;
      }
      if (v121.__m_.__opaque[15] >= 0) {
        sig = (const char *)&v121;
      }
      else {
        sig = (const char *)v121.__m_.__sig;
      }
      sub_6974(1, v44, (uint64_t)"", 601, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v47, sig);
      if (v121.__m_.__opaque[15] < 0) {
        operator delete((void *)v121.__m_.__sig);
      }
      if ((v111[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    int v49 = *(uint64_t ***)(a1 + 136);
    if (v49) {
      sub_2065D4(v49);
    }
    int v50 = sub_A6634(a1);
    if (sub_2212D0(a1))
    {
      sub_221318((void *)a1, 0);
      LODWORD(v51) = 0;
      goto LABEL_130;
    }
    AudioObjectID v52 = *(_DWORD *)(a1 + 128);
    *(void *)&inAddress.int mSelector = 0x676C6F62676F696ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    uint64_t v53 = sub_32A48(13);
    if (*(unsigned char *)(v53 + 8))
    {
      char v54 = *(NSObject **)v53;
      if (*(void *)v53)
      {
        if (os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG))
        {
          v120.__cv_.__sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v120.__cv_.__opaque = inAddress.mElement;
          sub_16C9C4((uint64_t)&v121, (unsigned int *)&v120);
          int v55 = v121.__m_.__opaque[15] >= 0 ? &v121 : (std::mutex *)v121.__m_.__sig;
          *(_DWORD *)long long __p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 166;
          *(_WORD *)&__p[18] = 2080;
          *(void *)char v111 = v55;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)&v111[10] = v52;
          _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", __p, 0x22u);
          if (v121.__m_.__opaque[15] < 0) {
            operator delete((void *)v121.__m_.__sig);
          }
        }
      }
    }
    AudioObjectPropertyAddress v107 = inAddress;
    AudioObjectID v106 = v52;
    int v108 = 0;
    uint64_t v109 = 0;
    if (sub_285138((uint64_t)&v106))
    {
      OSStatus v96 = v43;
      int v97 = v14;
      memset(v121.__m_.__opaque, 0, sizeof(v121.__m_.__opaque));
      v121.__m_.__sig = 850045863;
      memset(v120.__cv_.__opaque, 0, sizeof(v120.__cv_.__opaque));
      v120.__cv_.__sig = 1018212795;
      char v105 = 0;
      sub_662FC(inClientData, v52, &inAddress, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v105);
      for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v58.__d_.__rep_) / -1000)
      {
        unint64_t v57 = sub_285138((uint64_t)&v106);
        int64x2_t v51 = HIDWORD(v57);
        if (HIDWORD(v57)) {
          goto LABEL_128;
        }
        if (!v57) {
          break;
        }
        if (i <= 0)
        {
          int v70 = (os_log_t *)sub_32A48(13);
          LODWORD(v51) = 2003329396;
          char v71 = *v70;
          if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
          {
            AudioObjectPropertyAddress v101 = inAddress;
            sub_16C9C4((uint64_t)&__lk, &v101.mSelector);
            int v72 = v103 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            *(_DWORD *)long long __p = 136316930;
            *(void *)&__p[4] = "HALPropertySynchronizer.h";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 248;
            *(_WORD *)&__p[18] = 2080;
            *(void *)char v111 = "updated";
            *(_WORD *)&v111[8] = 2080;
            *(void *)&v111[10] = v72;
            __int16 v112 = 2080;
            char v113 = "updated";
            __int16 v114 = 1024;
            int v115 = 0;
            __int16 v116 = 1024;
            int v117 = 0;
            __int16 v118 = 1024;
            AudioObjectID v119 = v52;
            _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", __p, 0x42u);
            if (v103 < 0) {
              operator delete(__lk.__m_);
            }
          }
          goto LABEL_128;
        }
        v58.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        uint64_t v59 = sub_32A48(13);
        if (*(unsigned char *)(v59 + 8))
        {
          int v60 = *(NSObject **)v59;
          if (*(void *)v59)
          {
            if (os_log_type_enabled(*(os_log_t *)v59, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long __p = 136315906;
              *(void *)&__p[4] = "HALPropertySynchronizer.h";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 257;
              *(_WORD *)&__p[18] = 2080;
              *(void *)char v111 = "with timeout";
              *(_WORD *)&v111[8] = 1024;
              *(_DWORD *)&v111[10] = v52;
              _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", __p, 0x22u);
            }
          }
        }
        sub_3B7EC();
        *(void *)long long __p = &qword_64CC40;
        __p[8] = 0;
        __p[8] = sub_1D4024();
        __lk.__m_ = &v121;
        __lk.__owns_ = 1;
        std::mutex::lock(&v121);
        v61.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (!v105)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v62 = v61.__d_.__rep_ + 1000000 * i;
          while (1)
          {
            if (v62 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_86;
            }
            v63.__d_.__rep_ = v62 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v63.__d_.__rep_ >= 1) {
              break;
            }
LABEL_104:
            if (std::chrono::steady_clock::now().__d_.__rep_ >= v62 || v105) {
              goto LABEL_86;
            }
          }
          std::chrono::steady_clock::now();
          v64.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          if (!v64.__d_.__rep_)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v65 = 0;
            goto LABEL_100;
          }
          if (v64.__d_.__rep_ < 1)
          {
            if ((unint64_t)v64.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
              goto LABEL_99;
            }
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v65 = 0x8000000000000000;
          }
          else
          {
            if ((unint64_t)v64.__d_.__rep_ > 0x20C49BA5E353F7)
            {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v65 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_100;
            }
LABEL_99:
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v65 = 1000 * v64.__d_.__rep_;
LABEL_100:
            if (v65 > (v63.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
            {
              v66.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_103:
              std::condition_variable::__do_timed_wait(&v120, &__lk, v66);
              std::chrono::steady_clock::now();
              goto LABEL_104;
            }
          }
          v66.__d_.__rep_ = v65 + v63.__d_.__rep_;
          goto LABEL_103;
        }
LABEL_86:
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_66410((uint64_t)__p);
      }
      uint64_t v68 = sub_32A48(13);
      if (*(unsigned char *)(v68 + 8))
      {
        int64x2_t v51 = *(NSObject **)v68;
        if (!*(void *)v68) {
          goto LABEL_128;
        }
        if (os_log_type_enabled(*(os_log_t *)v68, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyAddress v101 = inAddress;
          sub_16C9C4((uint64_t)&__lk, &v101.mSelector);
          char v69 = v103 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          *(_DWORD *)long long __p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 288;
          *(_WORD *)&__p[18] = 2080;
          *(void *)char v111 = v69;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)&v111[10] = v52;
          _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", __p, 0x22u);
          if (v103 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
      LODWORD(v51) = 0;
LABEL_128:
      sub_6651C((uint64_t)inClientData);
      std::condition_variable::~condition_variable(&v120);
      std::mutex::~mutex(&v121);
      OSStatus v43 = v96;
      int v14 = v97;
LABEL_129:
      sub_221318((void *)a1, v51 == 0);
LABEL_130:
      uint64_t v73 = *(void *)(a1 + 112);
      uint64_t v74 = *(void *)(a1 + 88);
      if (v73)
      {
        if (v74)
        {
          *(void *)(a1 + 88) = 0;
          *(_DWORD *)&__p[16] = 0;
          *(void *)long long __p = off_6351D0;
          *(void *)&__p[8] = 0;
          *(void *)&v111[4] = 0;
          uint64_t v75 = *(void *)(v73 + 24);
          *(void *)(v73 + 24) = v74;
          if (v75) {
            (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
          }
          uint64_t v76 = *(void *)&v111[4];
          *(void *)long long __p = off_6351D0;
          *(void *)&v111[4] = 0;
          if (v76) {
            (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
          }
          caulk::concurrent::message::~message((caulk::concurrent::message *)__p);
          char v77 = *(caulk::concurrent::message **)(a1 + 112);
          sub_54694();
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, v77);
          *(void *)(a1 + 112) = 0;
        }
      }
      else if (v74)
      {
        uint64_t v78 = sub_32A48(16);
        sub_6974(1, v78, (uint64_t)"", 637, (uint64_t)"", "AudioIOMonitor is valid, but IOMonitorCloseMsg is null. Not closing capture");
      }
      *(unsigned char *)(a1 + 104) = 0;
      if (v14)
      {
        uint64_t v86 = (os_log_t *)sub_32A48(13);
        std::string v87 = *v86;
        if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 646;
          _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (willStopResult): \"Error calling WillStopIO on physical devices.\"", __p, 0x12u);
        }
        LODWORD(v51) = v14;
      }
      else if (v43)
      {
        int v88 = (os_log_t *)sub_32A48(13);
        char v89 = *v88;
        if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 650;
          _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stopResult): \"Unable to stop IO.\"", __p, 0x12u);
        }
        LODWORD(v51) = v43;
      }
      else if (v51)
      {
        int v90 = (os_log_t *)sub_32A48(13);
        __int16 v91 = *v90;
        if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v121, v51);
          int v92 = v121.__m_.__opaque[15] >= 0 ? &v121 : (std::mutex *)v121.__m_.__sig;
          *(_DWORD *)long long __p = 136315650;
          *(void *)&__p[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 654;
          *(_WORD *)&__p[18] = 2080;
          *(void *)char v111 = v92;
          _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (isRunningResult): \"Error waiting to receive kAudioDevicePropertyDeviceIsRunning property notification while stopping I/O proc: %s\"", __p, 0x1Cu);
          if (v121.__m_.__opaque[15] < 0) {
            operator delete((void *)v121.__m_.__sig);
          }
        }
      }
      else
      {
        if (!v50) {
          return sub_285308(v99);
        }
        __int16 v93 = (os_log_t *)sub_32A48(13);
        int v94 = *v93;
        if (*v93 && os_log_type_enabled(*v93, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 658;
          _os_log_impl(&def_1E50E8, v94, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (didStopResult): \"Error calling DidStopIO on physical devices.\"", __p, 0x12u);
        }
        LODWORD(v51) = v50;
      }
      __int16 v95 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v95 = &off_6414D8;
      v95[2] = v51;
    }
    uint64_t v67 = sub_32A48(13);
    if (*(unsigned char *)(v67 + 8))
    {
      int64x2_t v51 = *(NSObject **)v67;
      if (!*(void *)v67) {
        goto LABEL_129;
      }
      if (os_log_type_enabled(*(os_log_t *)v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 219;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)char v111 = v52;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", __p, 0x18u);
      }
    }
    LODWORD(v51) = 0;
    goto LABEL_129;
  }
  uint64_t v7 = sub_32A48(16);
  uint64_t v8 = sub_32A48(31);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)long long __p = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&__p[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_24;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_24:
  sub_2417C(__p, v100);
  int v24 = v111[3];
  int v25 = *(const char **)__p;
  int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  unint64_t v27 = __p;
  if (v24 < 0) {
    unint64_t v27 = v25;
  }
  sub_6974(3, v7, (uint64_t)"", 580, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v27, v26);
  if ((v111[3] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  kdebug_trace();
  if (v100 == 1) {
    __int16 v28 = 0;
  }
  else {
    __int16 v28 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
  }
  OSStatus v29 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v28);
  kdebug_trace();
  if (v29)
  {
    uint64_t v30 = sub_32A48(16);
    sub_2417C(__p, v29);
    int v31 = v111[3];
    unint64_t v32 = *(const char **)__p;
    sub_4F64((uint64_t)&v121, (os_unfair_lock_t)(a1 + 8));
    unint64_t v33 = __p;
    if (v31 < 0) {
      unint64_t v33 = v32;
    }
    if (v121.__m_.__opaque[15] >= 0) {
      __int16 v34 = (const char *)&v121;
    }
    else {
      __int16 v34 = (const char *)v121.__m_.__sig;
    }
    sub_6974(1, v30, (uint64_t)"", 585, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v33, v34);
    if (v121.__m_.__opaque[15] < 0) {
      operator delete((void *)v121.__m_.__sig);
    }
    if ((v111[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v35 = (os_log_t *)sub_32A48(13);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 588;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stopResult): \"Unable to stop IO.\"", __p, 0x12u);
    }
    uint64_t v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v37 = &off_6414D8;
    v37[2] = v29;
  }
  return sub_285308(v99);
}

void sub_285034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_6651C((uint64_t)&a27);
  std::condition_variable::~condition_variable((std::condition_variable *)(v42 - 216));
  std::mutex::~mutex((std::mutex *)(v42 - 168));
  sub_285308(&a19);
  _Unwind_Resume(a1);
}

unint64_t sub_285138(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.int mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_1E0594((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.int mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        __int16 v28 = v11;
        __int16 v29 = 2080;
        uint64_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_2852E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int **sub_285308(int **a1)
{
  int v2 = **a1;
  if (!v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = a1[1];
    __int16 v11 = 256;
    do
    {
      char v5 = v2;
      if (*((unsigned char *)&v11 + v3)) {
        uint64_t v6 = 136;
      }
      else {
        uint64_t v6 = 130;
      }
      if (*((unsigned char *)&v11 + v3)) {
        uint64_t v7 = v4 + 136;
      }
      else {
        uint64_t v7 = v4 + 130;
      }
      uint64_t v8 = *(void *)&v4[v6];
      uint64_t v9 = *((void *)v7 + 1);
      while (v8 != v9)
      {
        sub_6330(*(void *)(*(void *)v8 + 136));
        v8 += 16;
      }
      LOBYTE(v2) = 1;
      uint64_t v3 = 1;
    }
    while ((v5 & 1) == 0);
  }
  return a1;
}

void sub_2853CC(uint64_t a1, _OWORD *a2, UInt32 a3, unsigned int a4)
{
  sub_50020(a1);
  if (!*(void *)(a1 + 416))
  {
    __int16 v34 = (os_log_t *)sub_32A48(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 471;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: \"No HAL IO Proc has been set.\"", (uint8_t *)&buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No HAL IO Proc has been set.");
  }
  if (!*(void *)(a1 + 456))
  {
    uint64_t v37 = (os_log_t *)sub_32A48(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 472;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mClientIOProc is NULL]: \"No client IO Proc has been set.\"", (uint8_t *)&buf, 0x12u);
    }
    long long v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "No client IO Proc has been set.");
  }
  char v8 = sub_7A50((unsigned int *)a1, a4, 1);
  if ((v8 & 3) == 0)
  {
    int v17 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v17) {
      caulk::concurrent::messenger::drain(v17);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 616))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
    sub_7E84(a1);
  }
  char v9 = v8;
  uint64_t v10 = sub_32A48(16);
  uint64_t v11 = sub_32A48(31);
  if (a4 == 1 && (v9 & 1) != 0)
  {
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)&buf.mSampleTime = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *((int *)&buf.mSampleTime + v13);
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_30;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_30:
    __int16 v31 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        LODWORD(buf.mSampleTime) = 136315650;
        *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 535;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v32;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.", (uint8_t *)&buf, 0x18u);
      }
    }
  }
  else
  {
    char v18 = 0;
    uint64_t v19 = 0;
    *(void *)&buf.mSampleTime = 0x100000002;
    uint64_t v20 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v21 = *((int *)&buf.mSampleTime + v19);
      char v22 = v18;
      if (((v20 & v21) != 0) != ((*(void *)(v11 + 8) & v21) != 0)) {
        break;
      }
      char v18 = 1;
      uint64_t v19 = 1;
      if (v22) {
        goto LABEL_19;
      }
    }
    if ((v20 & v21) == 0) {
      uint64_t v10 = v11;
    }
LABEL_19:
    __int16 v23 = *(NSObject **)v10;
    if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a4);
      int v24 = SBYTE3(v57);
      __int16 v25 = *(unsigned char **)__p;
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common.cpp";
      __int16 v27 = v24 >= 0 ? __p : v25;
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 540;
      WORD1(buf.mRateScalar) = 2080;
      *(void *)((char *)&buf.mRateScalar + 4) = v27;
      WORD2(buf.mWordClockTime) = 1024;
      *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v26;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting IO type %s on AggregateDevice %u.", (uint8_t *)&buf, 0x22u);
      if (SBYTE3(v57) < 0) {
        operator delete(*(void **)__p);
      }
    }
    long long v28 = a2[1];
    *(_OWORD *)&buf.mSampleTime = *a2;
    *(_OWORD *)&buf.mRateScalar = v28;
    long long v29 = a2[3];
    *(_OWORD *)&buf.mSMPTETime.mSubframes = a2[2];
    *(_OWORD *)&buf.mSMPTETime.mHours = v29;
    if (a4 == 1) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    OSStatus v33 = AudioDeviceStartAtTime(*(_DWORD *)(a1 + 128), v30, &buf, a3);
    if (v33)
    {
      sub_7A50((unsigned int *)a1, a4, 0);
      int v40 = (os_log_t *)sub_32A48(16);
      int v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v51, v33);
        int v42 = v52;
        OSStatus v43 = (void **)v51[0];
        sub_4F64((uint64_t)v49, (os_unfair_lock_t)(a1 + 8));
        uint64_t v44 = v51;
        if (v42 < 0) {
          uint64_t v44 = v43;
        }
        if (v50 >= 0) {
          int v45 = v49;
        }
        else {
          int v45 = (void **)v49[0];
        }
        *(_DWORD *)long long __p = 136315906;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        __int16 v54 = 1024;
        int v55 = 546;
        __int16 v56 = 2080;
        unint64_t v57 = v44;
        __int16 v58 = 2080;
        uint64_t v59 = v45;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", __p, 0x26u);
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        if (v52 < 0) {
          operator delete(v51[0]);
        }
      }
      char v46 = (os_log_t *)sub_32A48(13);
      unsigned int v47 = *v46;
      if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        __int16 v54 = 1024;
        int v55 = 547;
        _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (startResult): \"Unable to start IO.\"", __p, 0x12u);
      }
      uint64_t v48 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v48 = &off_6414D8;
      v48[2] = v33;
    }
  }
}

void sub_285FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_286010(uint64_t result, char a2)
{
  *(unsigned char *)(result + 636) = a2;
  return result;
}

uint64_t sub_286018(uint64_t a1, int a2, unsigned int a3)
{
  sub_50020(a1);
  uint64_t v6 = a1 + 544;
  uint64_t v7 = 520;
  if (a2) {
    uint64_t v7 = 544;
  }
  else {
    uint64_t v6 = a1 + 520;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v9 = *(void *)(a1 + v7);
  if (a3 >= (unint64_t)((v8 - v9) >> 4)) {
    return 0;
  }
  else {
    return *(void *)(v9 + 16 * a3);
  }
}

unint64_t sub_286090(uint64_t a1, int a2)
{
  sub_50020(a1);
  uint64_t v4 = 528;
  if (a2) {
    uint64_t v4 = 552;
  }
  uint64_t v5 = 520;
  uint64_t v6 = *(void *)(a1 + v4);
  if (a2) {
    uint64_t v5 = 544;
  }
  return (unint64_t)(v6 - *(void *)(a1 + v5)) >> 4;
}

void *sub_2860EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, void **a9, os_unfair_lock_s *a10, uint64_t a11, long long *a12)
{
  *a1 = off_62A578;
  uint64_t v18 = *(void *)(a3 + 8);
  if (v18 == a3)
  {
    unsigned int v19 = 0;
  }
  else
  {
    unsigned int v19 = 0;
    do
    {
      uint64_t v20 = *(void *)(v18 + 16);
      if (v20) {
        v19 += (*(uint64_t (**)(uint64_t, void))(*(void *)v20 + 88))(v20, 0);
      }
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18 != a3);
  }
  uint64_t v21 = *(void *)(a4 + 8);
  if (v21 == a4)
  {
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)(v21 + 16);
      if (v23) {
        uint64_t v22 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v23 + 88))(v23, 1) + v22;
      }
      uint64_t v21 = *(void *)(v21 + 8);
    }
    while (v21 != a4);
  }
  uint64_t v24 = *(void *)(a6 + 40);
  unint64_t v51 = v19 | (unint64_t)(v22 << 32);
  if (v24)
  {
    uint64_t v25 = sub_3783A8(v24, *((_DWORD *)a7 + 4));
    if ((v25 & 0xFF00000000) != 0) {
      int v26 = v25;
    }
    else {
      int v26 = 0;
    }
    int v50 = v26;
    uint64_t v27 = *(void *)(a6 + 40);
    unsigned int v28 = 64;
    if (v27)
    {
      uint64_t v29 = sub_378560(v27, *((_DWORD *)a7 + 4));
      if ((v29 & 0xFF00000000) != 0) {
        unsigned int v28 = v29;
      }
      else {
        unsigned int v28 = 64;
      }
    }
  }
  else
  {
    int v50 = 0;
    unsigned int v28 = 64;
  }
  int v30 = *((_DWORD *)a7 + 4);
  int v31 = 1;
  if (v30 <= 1987077986)
  {
    int v32 = a12;
    if (v30 == 1768057203) {
      goto LABEL_32;
    }
    int v33 = 1919776355;
  }
  else
  {
    int v32 = a12;
    if (v30 == 1987077987 || v30 == 1987081833) {
      goto LABEL_32;
    }
    int v33 = 1987081839;
  }
  if (v30 != v33) {
    int v31 = 0;
  }
LABEL_32:
  uint64_t v34 = *(void *)((char *)a7 + 28);
  BOOL v35 = v30 == 1987208039 || v30 == 1987211117;
  char v36 = v30 == 1986556788 || v35;
  int v37 = sub_24A650((_DWORD *)a6, v36);
  *(_DWORD *)AudioTimeStamp buf = sub_327934(a2, (unsigned int *)a6, v51, a10, v50, v28, a8, v31, (uint64_t)v32, v34, v37);
  *(void *)&v55[4] = sub_329868(*(AudioObjectID *)buf, (OSStatus (__cdecl *)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))sub_287004, a1);
  sub_A603C((uint64_t *)&v55[12], a2);
  memset(v56, 0, sizeof(v56));
  sub_67D90(v56, *a9, a9[1], ((char *)a9[1] - (char *)*a9) >> 4);
  long long v38 = a7[1];
  long long v57 = *a7;
  long long v58 = v38;
  long long v59 = a7[2];
  v60[0] = (uint64_t)v60;
  v60[1] = (uint64_t)v60;
  v60[2] = 0;
  for (uint64_t i = a2; ; sub_286734(v60, v60, *(void *)(i + 24), i + 16))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == a2) {
      break;
    }
  }
  v60[3] = (uint64_t)a10;
  sub_46A4C(v61, a11);
  sub_CAE80(&v62, v32);
  sub_CAE80(&__p, v32 + 2);
  sub_A5F28((uint64_t)a1, (uint64_t)buf);
  if (v67 && v66 < 0) {
    operator delete(__p);
  }
  if (v64 && v63 < 0) {
    operator delete(v62);
  }
  sub_463E0((void *)v61[1]);
  sub_45F50(v60);
  uint64_t v53 = (void **)v56;
  sub_638B4(&v53);
  sub_A60C4((uint64_t *)&v55[12]);
  *a1 = off_62A578;
  *((_DWORD *)a1 + 158) = 0;
  *((_WORD *)a1 + 318) = 0;
  if (*(void *)a5 == *(void *)(a5 + 8))
  {
    sub_286834((uint64_t)(a1 + 80), 0, a1 + 53, a3);
  }
  else
  {
    a1[80] = 0;
    a1[81] = 0;
    a1[82] = 0;
    int v41 = *(const void **)a5;
    uint64_t v40 = *(void *)(a5 + 8);
    size_t v42 = v40 - *(void *)a5;
    if (v40 != *(void *)a5)
    {
      if ((v42 & 0x8000000000000000) != 0) {
        sub_60548();
      }
      OSStatus v43 = (char *)operator new(v40 - *(void *)a5);
      a1[80] = v43;
      a1[81] = v43;
      uint64_t v44 = &v43[v42];
      a1[82] = &v43[v42];
      memmove(v43, v41, v42);
      a1[81] = v44;
    }
  }
  sub_286834((uint64_t)(a1 + 83), 1, a1 + 53, a4);
  a1[94] = 0;
  *((_DWORD *)a1 + 190) = 0;
  *((_OWORD *)a1 + 43) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  *(_OWORD *)((char *)a1 + 732) = 0u;
  if (!*(void *)(a2 + 16))
  {
    char v46 = (os_log_t *)sub_32A48(13);
    unsigned int v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)int v55 = "AggregateDevice_Common.cpp";
      *(_WORD *)&v55[8] = 1024;
      *(_DWORD *)&v55[10] = 209;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inAggregateTopology is empty.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inAggregateTopology is empty.");
  }
  if (a1 + 59 != (void *)a3) {
    sub_286E30(a1 + 59, *(void *)(a3 + 8), a3);
  }
  if (a1 + 62 != (void *)a4) {
    sub_286E30(a1 + 62, *(void *)(a4 + 8), a4);
  }
  return a1;
}

void sub_286658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  __cxa_free_exception(v47);
  sub_281348(v50);
  char v52 = *v48;
  if (*v48)
  {
    *(void *)(v46 + 672) = v52;
    operator delete(v52);
  }
  uint64_t v53 = *v49;
  if (*v49)
  {
    *(void *)(v46 + 648) = v53;
    operator delete(v53);
  }
  sub_A618C(v46);
  _Unwind_Resume(a1);
}

void *sub_286734(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x18uLL);
    uint64_t v8 = result;
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = 1;
    if (v9 != a4)
    {
      uint64_t v11 = result;
      do
      {
        uint64_t result = operator new(0x18uLL);
        *uint64_t result = v11;
        result[1] = 0;
        result[2] = *(void *)(v9 + 16);
        v11[1] = result;
        ++v10;
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v11 = result;
      }
      while (v9 != a4);
    }
    uint64_t v12 = *a2;
    *(void *)(v12 + 8) = v8;
    *uint64_t v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }
  return result;
}

void sub_286800(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_286820(_Unwind_Exception *a1)
{
}

void sub_286834(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = (os_log_t *)sub_32A48(16);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = "input";
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    uint64_t v40 = "AggregateDevice_Common.cpp";
    if (a2) {
      uint64_t v10 = "output";
    }
    __int16 v41 = 1024;
    int v42 = 91;
    __int16 v43 = 2080;
    *(void *)uint64_t v44 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Building StreamUsageMask for %s.", buf, 0x1Cu);
  }
  int v11 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  LOBYTE(v36[0]) = a2;
  v36[1] = a3;
  while (1)
  {
    int v37 = v11;
    if (!sub_329E34((uint64_t)v36)) {
      break;
    }
    uint64_t v12 = sub_329E34((uint64_t)v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 88))(v12, a2))
    {
      uint64_t v13 = a4;
      if (*(void *)(a4 + 8) != a4)
      {
        uint64_t v13 = *(void *)(a4 + 8);
        while (*(void *)(v13 + 16) != v12)
        {
          uint64_t v13 = *(void *)(v13 + 8);
          if (v13 == a4)
          {
            uint64_t v13 = a4;
            break;
          }
        }
      }
      uint64_t v14 = *(char **)(a1 + 8);
      buf[0] = v13 != a4;
      sub_26B0C4(a1, v14, 1uLL, buf);
      uint64_t v15 = *(char **)(a1 + 8);
      int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 88))(v12, a2);
      buf[0] = 0;
      sub_26B0C4(a1, v15, (v16 - 1), buf);
      int v17 = (os_log_t *)sub_32A48(16);
      os_log_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 120))(v12);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v12 + 128))(&__p, v12);
        std::string::size_type v20 = __p.__r_.__value_.__r.__words[0];
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v12 + 96))(v12, a2, 0);
        *(_DWORD *)AudioTimeStamp buf = 136316162;
        uint64_t v40 = "AggregateDevice_Common.cpp";
        __int16 v41 = 1024;
        int v42 = 106;
        __int16 v43 = 1024;
        *(_DWORD *)uint64_t v44 = v19;
        *(_WORD *)&v44[4] = 2112;
        *(void *)&v44[6] = v20;
        *(_WORD *)&v44[14] = 2048;
        *(void *)&v44[16] = v21;
        uint64_t v22 = v18;
        uint64_t v23 = "%25s:%-5d Adding element for PhysicalDevice ID %u (uid \"%@\"), (first) stream %p.";
        uint32_t v24 = 44;
LABEL_20:
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, v23, buf, v24);
        sub_72924((uint64_t)&__p);
      }
    }
    else
    {
      uint64_t v25 = (os_log_t *)sub_32A48(16);
      os_log_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
      {
        int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 120))(v12);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v12 + 128))(&__p, v12);
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        uint64_t v40 = "AggregateDevice_Common.cpp";
        __int16 v41 = 1024;
        int v42 = 111;
        __int16 v43 = 1024;
        *(_DWORD *)uint64_t v44 = v27;
        *(_WORD *)&v44[4] = 2112;
        *(void *)&v44[6] = __p.__r_.__value_.__r.__words[0];
        uint64_t v22 = v26;
        uint64_t v23 = "%25s:%-5d Bypassing PhysicalDevice ID %u (uid \"%@\").";
        uint32_t v24 = 34;
        goto LABEL_20;
      }
    }
    ++v11;
  }
  unsigned int v28 = (os_log_t *)sub_32A48(16);
  uint64_t v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
  {
    if (a2) {
      int v30 = "output";
    }
    else {
      int v30 = "input";
    }
    sub_21C8C(v36, v30);
    int v31 = v38;
    int v32 = (void **)v36[0];
    sub_286EEC(&__p, *(char **)a1, *(char **)(a1 + 8));
    int v33 = v36;
    if (v31 < 0) {
      int v33 = v32;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    uint64_t v40 = "AggregateDevice_Common.cpp";
    __int16 v41 = 1024;
    int v42 = 115;
    __int16 v43 = 2080;
    *(void *)uint64_t v44 = v33;
    *(_WORD *)&v44[8] = 2080;
    *(void *)&v44[10] = p_p;
    _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built StreamUsageMask for %s: %s.", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v38 < 0) {
      operator delete(v36[0]);
    }
  }
}

void sub_286D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_286DAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 224) && *(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(unsigned char *)(a1 + 192) && *(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  sub_463E0(*(void **)(a1 + 152));
  sub_45F50((void *)(a1 + 112));
  uint64_t v3 = (void **)(a1 + 40);
  sub_638B4(&v3);
  sub_A60C4((uint64_t *)(a1 + 16));
  return a1;
}

uint64_t *sub_286E30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t result = (uint64_t *)a1[1];
  if (a2 != a3 && result != a1)
  {
    do
    {
      result[2] = *(void *)(v4 + 16);
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t result = (uint64_t *)result[1];
    }
    while (v4 != a3 && result != a1);
  }
  if (result == a1)
  {
    return sub_286734(a1, a1, v4, a3);
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *result;
    *(void *)(v9 + 8) = *(void *)(*a1 + 8);
    **(void **)(v8 + 8) = v9;
    do
    {
      uint64_t v10 = (uint64_t *)result[1];
      --a1[2];
      operator delete(result);
      uint64_t result = v10;
    }
    while (v10 != a1);
  }
  return result;
}

std::string *sub_286EEC(std::string *a1, char *a2, char *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      uint64_t v6 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v9
         : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(v9.__r_.__value_.__r.__words[2])
         : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_286FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_287004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::string::size_type v7 = (void *)a7;
  sub_287344(v16, a7);
  if (v7)
  {
    if (v7[57]) {
      std::string::size_type v7 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*v7 + 576))(v7, a1, a2, a3, a4, a5, a6, v7);
    }
    else {
      std::string::size_type v7 = 0;
    }
  }
  uint64_t v14 = v16[0];
  if (v16[0])
  {
    *(unsigned char *)(v16[0] + 320) = 0;
    *(void *)(v14 + 328) = 0;
  }
  return v7;
}

void sub_28710C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v13 = __cxa_begin_catch(a1);
      uint64_t v14 = (os_log_t *)sub_32A48(16);
      uint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = v13[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AggregateDevice_Common.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1211;
        WORD1(a12) = 1024;
        DWORD1(a12) = v16;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown during HandleHALIOProc(): %d.", (uint8_t *)&buf, 0x18u);
      }
    }
    else
    {
      int v17 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        os_log_t v18 = v17;
        int v19 = (os_log_t *)sub_32A48(16);
        std::string::size_type v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1216;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v21;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception thrown HandleHALIOProc(): %s.", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v22 = (os_log_t *)sub_32A48(16);
        uint64_t v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1221;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown HandleHALIOProc().", (uint8_t *)&buf, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x2870C0);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_287344(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  if (a2) {
    goto LABEL_6;
  }
  uint64_t v3 = (os_log_t *)sub_32A48(13);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315394;
    std::string v9 = "AggregateDevice.h";
    __int16 v10 = 1024;
    int v11 = 525;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid aggregate device\"", (uint8_t *)&v8, 0x12u);
  }
  if (*a1)
  {
LABEL_6:
    pthread_t v5 = pthread_self();
    uint64_t v6 = *a1;
    *(void *)(v6 + 328) = v5;
    *(unsigned char *)(v6 + 320) = 1;
  }
  return a1;
}

void sub_28742C(uint64_t *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)v24, 0, v2, a1[52]);
  if (*((_DWORD *)v25 + 2))
  {
    uint64_t v3 = a1[80];
    unint64_t v4 = a1[81] - v3;
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (char *)v25 + 12;
      do
      {
        *(_DWORD *)&v6[4 * v5] = *(char *)(v3 + v5);
        ++v5;
      }
      while (v4 > v5);
    }
    sub_16D560((uint64_t)v24);
  }
  AudioObjectID v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)v22, 1, v7, a1[52]);
  if (*((_DWORD *)v23 + 2))
  {
    uint64_t v8 = a1[83];
    unint64_t v9 = a1[84] - v8;
    if (v9)
    {
      uint64_t v10 = 0;
      int v11 = (char *)v23 + 12;
      do
      {
        *(_DWORD *)&v11[4 * v10] = *(char *)(v8 + v10);
        ++v10;
      }
      while (v9 > v10);
    }
    sub_16D560((uint64_t)v22);
  }
  uint64_t v12 = (os_log_t *)sub_32A48(16);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_16D6C0(v20, (uint64_t)v24);
    int v14 = v21;
    uint64_t v15 = (void **)v20[0];
    sub_16D6C0(__p, (uint64_t)v22);
    int v16 = v20;
    if (v14 < 0) {
      int v16 = v15;
    }
    if (v19 >= 0) {
      int v17 = __p;
    }
    else {
      int v17 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v27 = "AggregateDevice_Common.cpp";
    __int16 v28 = 1024;
    int v29 = 245;
    __int16 v30 = 2080;
    int v31 = v16;
    __int16 v32 = 2080;
    int v33 = v17;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting VA input stream usage to %s, output stream usage to %s", buf, 0x26u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
  free(v23);
  free(v25);
}

void sub_28766C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  free(a20);
  free(a23);
  _Unwind_Resume(a1);
}

uint64_t sub_2876BC(uint64_t a1)
{
  *(void *)a1 = off_62A578;
  sub_50020(a1);
  sub_1216C((unsigned int **)(a1 + 752));
  sub_1216C((unsigned int **)(a1 + 736));
  uint64_t v5 = (void **)(a1 + 712);
  sub_121EC(&v5);
  uint64_t v5 = (void **)(a1 + 688);
  sub_121EC(&v5);
  AudioObjectID v2 = *(void **)(a1 + 664);
  if (v2)
  {
    *(void *)(a1 + 672) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 640);
  if (v3)
  {
    *(void *)(a1 + 648) = v3;
    operator delete(v3);
  }

  return sub_A618C(a1);
}

void sub_28776C(uint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v5 = a1 + 65;
  if (v5 != (uint64_t *)a2) {
    sub_28792C(v5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
  if (a1 + 68 != (uint64_t *)a3) {
    sub_28792C(a1 + 68, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  }
  uint64_t v6 = a1[65];
  for (uint64_t i = a1[66]; v6 != i; v6 += 16)
  {
    (*(void (**)(uint64_t **__return_ptr))(**(void **)(*(void *)v6 + 136) + 168))(&v10);
    sub_287A5C(a1 + 30, a1[31], v10, v11, (v11 - (char *)v10) >> 4);
    uint64_t v12 = (void **)&v10;
    sub_638B4(&v12);
  }
  uint64_t v8 = a1[68];
  for (uint64_t j = a1[69]; v8 != j; v8 += 16)
  {
    (*(void (**)(uint64_t **__return_ptr))(**(void **)(*(void *)v8 + 136) + 168))(&v10);
    sub_287A5C(a1 + 30, a1[31], v10, v11, (v11 - (char *)v10) >> 4);
    uint64_t v12 = (void **)&v10;
    sub_638B4(&v12);
  }
  (*(void (**)(uint64_t *))(*a1 + 616))(a1);
  sub_D26B4((uint64_t)a1);
}

void sub_28790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_638B4(&a12);
  _Unwind_Resume(a1);
}

void sub_28792C(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 2;
  unint64_t v9 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    sub_17CE38(a1);
    if (a4 >> 60) {
      goto LABEL_18;
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 60) {
LABEL_18:
    }
      sub_60548();
    uint64_t v13 = sub_10724(v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)&v13[2 * v14];
    uint64_t v15 = (uint64_t)v8;
    int v16 = a2;
    goto LABEL_12;
  }
  unint64_t v17 = (a1[1] - (uint64_t)v9) >> 4;
  if (v17 < a4)
  {
    os_log_t v18 = &a2[2 * v17];
    sub_287CF8(a2, v18, v9);
    uint64_t v13 = (void *)a1[1];
    uint64_t v15 = (uint64_t)v8;
    int v16 = v18;
LABEL_12:
    a1[1] = (uint64_t)sub_287D68(v15, v16, a3, v13);
    return;
  }
  char v19 = sub_287CF8(a2, a3, v9);
  for (uint64_t i = (void *)a1[1]; i != v19; i -= 2)
  {
    char v21 = (std::__shared_weak_count *)*(i - 1);
    if (v21) {
      sub_4636C(v21);
    }
  }
  a1[1] = (uint64_t)v19;
}

void sub_287A5C(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v8 = *a1;
    uint64_t v9 = a2 - *a1;
    uint64_t v10 = v9 >> 4;
    uint64_t v11 = (char *)(*a1 + (v9 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v13 = (uint64_t)(a1 + 2);
    uint64_t v12 = a1[2];
    uint64_t v14 = (char *)a1[1];
    if (a5 <= (v12 - (uint64_t)v14) >> 4)
    {
      uint64_t v19 = (v14 - v11) >> 4;
      if (v19 >= a5)
      {
        std::string::size_type v20 = &a3[2 * a5];
        char v21 = (char *)a1[1];
      }
      else
      {
        std::string::size_type v20 = &a3[2 * v19];
        char v21 = (char *)sub_67E24((uint64_t)(a1 + 2), v20, a4, v14);
        a1[1] = (uint64_t)v21;
        if (v14 - v11 < 1) {
          return;
        }
      }
      uint64_t v22 = &v11[16 * a5];
      uint64_t v23 = &v21[-16 * a5];
      uint32_t v24 = v21;
      if (v23 < v14)
      {
        uint32_t v24 = v21;
        do
        {
          *(_OWORD *)uint32_t v24 = *(_OWORD *)v23;
          v24 += 16;
          *(void *)uint64_t v23 = 0;
          *((void *)v23 + 1) = 0;
          v23 += 16;
        }
        while (v23 < v14);
      }
      a1[1] = (uint64_t)v24;
      if (v21 != v22)
      {
        uint64_t v25 = (std::__shared_weak_count **)(v21 - 8);
        uint64_t v26 = 16 * ((v21 - v22) >> 4);
        uint64_t v27 = v8 + 16 * v10 - 16;
        do
        {
          __int16 v28 = (void *)(v27 + v26);
          long long v29 = *(_OWORD *)(v27 + v26);
          void *v28 = 0;
          v28[1] = 0;
          __int16 v30 = *v25;
          *(_OWORD *)(v25 - 1) = v29;
          if (v30) {
            sub_4636C(v30);
          }
          v25 -= 2;
          v26 -= 16;
        }
        while (v26);
      }
      for (; v6 != v20; v11 += 16)
      {
        uint64_t v32 = *v6;
        uint64_t v31 = v6[1];
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
        int v33 = (std::__shared_weak_count *)*((void *)v11 + 1);
        *(void *)uint64_t v11 = v32;
        *((void *)v11 + 1) = v31;
        if (v33) {
          sub_4636C(v33);
        }
        v6 += 2;
      }
    }
    else
    {
      unint64_t v15 = a5 + ((uint64_t)&v14[-v8] >> 4);
      if (v15 >> 60) {
        sub_60548();
      }
      uint64_t v16 = v12 - v8;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v45 = v13;
      if (v17) {
        unint64_t v17 = (unint64_t)sub_10724(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v34 = v17 + 16 * v10;
      unint64_t v42 = v17;
      *(void *)&long long v43 = v34;
      unint64_t v44 = v17 + 16 * v18;
      BOOL v35 = (_OWORD *)(v34 + 16 * a5);
      char v36 = (void *)v34;
      do
      {
        void *v36 = *v6;
        uint64_t v37 = v6[1];
        v36[1] = v37;
        if (v37) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
        }
        v36 += 2;
        v6 += 2;
      }
      while (v36 != (void *)v35);
      uint64_t v38 = sub_98E84(v13, (uint64_t)v11, v11, *a1, (void *)*a1, v34, v34);
      long long v39 = (char *)a1[1];
      uint64_t v48 = v35;
      int v49 = v35;
      v46[0] = v13;
      v46[1] = &v48;
      v46[2] = &v49;
      if (v11 != v39)
      {
        do
        {
          *v35++ = *(_OWORD *)v11;
          *(void *)uint64_t v11 = 0;
          *((void *)v11 + 1) = 0;
          v11 += 16;
        }
        while (v11 != v39);
        int v49 = v35;
      }
      char v47 = 1;
      sub_67EB4((uint64_t)v46);
      long long v40 = *(_OWORD *)a1;
      *a1 = v38;
      a1[1] = (uint64_t)v35;
      long long v43 = v40;
      uint64_t v41 = a1[2];
      a1[2] = v44;
      unint64_t v44 = v41;
      unint64_t v42 = v40;
      sub_98E24((uint64_t)&v42);
    }
  }
}

void *sub_287CF8(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        sub_4636C(v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void *sub_287D68(uint64_t a1, void *a2, void *a3, void *a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 2)
  {
    uint64_t v5 = a2[1];
    *uint64_t result = *a2;
    result[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    result += 2;
  }
  return result;
}

uint64_t sub_287DA0(unsigned char *a1, unsigned char *a2, int a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    int v4 = 0;
    uint64_t v3 = a1;
    do
    {
      if (*v3 == 2)
      {
        if (v4 == a3) {
          goto LABEL_8;
        }
        ++v4;
      }
      ++v3;
    }
    while (v3 != a2);
    uint64_t v3 = a2;
  }
LABEL_8:
  if (v3 == a2)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      uint64_t v10 = "AggregateDevice_Common.cpp";
      __int16 v11 = 1024;
      int v12 = 843;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"No speaker input stream found\"", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No speaker input stream found");
  }
  return (v3 - a1);
}

void sub_287EE0(_Unwind_Exception *exception_object)
{
}

char *sub_287EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t result = (char *)(a1 + 56);
  *((void *)result + 1) = v3;
  if (result != (char *)a2) {
    return sub_4D2CC(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

uint64_t sub_287F24(uint64_t a1)
{
  sub_54694();
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 40, 8);
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)uint64_t v2 = &off_62A978;
  *(void *)(v2 + 8) = 0;

  return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v2);
}

uint64_t sub_287FC0(caulk::concurrent::message *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  if (v3) {
    sub_4636C(v3);
  }
  caulk::concurrent::message::~message(this);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                           + 24))(caulk::alloc::realtime_safe_resource, this, 40, 8);
}

void sub_28803C(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  operator delete();
}

void sub_288078(uint64_t a1)
{
  uint64_t v3 = a1;
  sub_13910();
  uint64_t v2 = (id)objc_claimAutoreleasedReturnValue();
  if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
  {
    sub_288404(a1);
  }
  else
  {
    int v4 = &v3;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_288738;
    block[3] = &unk_632EB8;
    block[4] = &v4;
    dispatch_sync(v2, block);
  }
}

void sub_288174(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    unint64_t v17 = __cxa_begin_catch(a1);
    id v18 = *(id *)sub_32A48(13);
    if (v18)
    {
      uint64_t v19 = v18;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = v17[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a12) = 1024;
        DWORD1(a12) = v20;
        WORD4(a12) = 2080;
        *(void *)((char *)&a12 + 10) = "";
        a14 = 1024;
        a15 = 35;
        char v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v22 = v19;
        uint32_t v23 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint32_t v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v25 = v24;
      id v26 = *(id *)sub_32A48(13);
      if (v26)
      {
        uint64_t v19 = v26;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v27;
          WORD6(a12) = 2080;
          *(void *)((char *)&a12 + 14) = "";
          HIWORD(a15) = 1024;
          a16 = 35;
          char v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v22 = v19;
          uint32_t v23 = 44;
          goto LABEL_13;
        }
LABEL_14:

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x28813CLL);
      }
    }
    else
    {
      id v28 = *(id *)sub_32A48(13);
      if (v28)
      {
        uint64_t v19 = v28;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = "";
          WORD6(a12) = 1024;
          *(_DWORD *)((char *)&a12 + 14) = 35;
          char v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v22 = v19;
          uint32_t v23 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }
  uint64_t v19 = 0;
  goto LABEL_16;
}

void sub_288404(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_62A8F8;
  v22[0] = off_62A930;
  v22[1] = a1;
  *((void *)v2 + 3) = 0;
  uint64_t v3 = (uint64_t)(v2 + 24);
  v22[3] = v22;
  *((void *)v2 + 6) = v2 + 24;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  int v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_weak_owners_ = 0;
  v4->__shared_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_62A9A0;
  v4[1].__vftable = 0;
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = (uint64_t)(v2 + 48);
  *((void *)v2 + 7) = v4 + 1;
  *((void *)v2 + 8) = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
  v4[1].__shared_owners_ = (uint64_t)v4;
  sub_4636C(v4);
  v2[72] = 0;
  v2[88] = 0;
  sub_AA384((uint64_t)(v2 + 96), (uint64_t)v22);
  id v5 = objc_alloc_init((Class)STMediaStatusDomain);
  uint64_t v6 = (void *)*((void *)v2 + 5);
  *((void *)v2 + 5) = v5;

  uint64_t v7 = *((void *)v2 + 6);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v8);
  }
  int v9 = (void *)*((void *)v2 + 5);
  unint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3321888768;
  unint64_t v17 = sub_288AB4;
  id v18 = &unk_62A8B8;
  uint64_t v19 = v2 + 24;
  uint64_t v20 = v7;
  char v21 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v9 observeDataWithBlock:&v15];
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_56A54(v22);
  *(void *)&long long v10 = v2 + 24;
  *((void *)&v10 + 1) = v2;
  __int16 v11 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v11)
  {
    if (v11->__shared_owners_ != -1) {
      goto LABEL_14;
    }
    long long v14 = v10;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 2, 1uLL, memory_order_relaxed);
    *((void *)v2 + 3) = v2 + 24;
    *((void *)v2 + 4) = v2;
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    long long v14 = v10;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 2, 1uLL, memory_order_relaxed);
    *((void *)v2 + 3) = v2 + 24;
    *((void *)v2 + 4) = v2;
  }
  sub_4636C((std::__shared_weak_count *)v2);
  long long v10 = v14;
LABEL_14:
  int v12 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v10;
  if (v12)
  {
    sub_4636C(v12);
    uint64_t v3 = *(void *)(a1 + 40);
  }
  uint64_t v13 = objc_msgSend(*(id *)(v3 + 16), "data", v14, v15, v16, v17, v18, v19, v20);
  sub_288A20(v3, v13);
}

void sub_2886B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_288738(uint64_t a1)
{
}

void sub_2887A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    id v16 = *(id *)sub_32A48(13);
    if (v16)
    {
      unint64_t v17 = v16;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v18 = v15[2];
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 429;
        WORD1(a10) = 1024;
        DWORD1(a10) = v18;
        WORD4(a10) = 2080;
        *(void *)((char *)&a10 + 10) = "";
        a12 = 1024;
        a13 = 47;
        uint64_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v20 = v17;
        uint32_t v21 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      id v24 = *(id *)sub_32A48(13);
      if (v24)
      {
        unint64_t v17 = v24;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
          LODWORD(a9) = 136316162;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 430;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v25;
          WORD6(a10) = 2080;
          *(void *)((char *)&a10 + 14) = "";
          HIWORD(a13) = 1024;
          a14 = 47;
          uint64_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v20 = v17;
          uint32_t v21 = 44;
          goto LABEL_13;
        }
LABEL_14:

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x288770);
      }
    }
    else
    {
      id v26 = *(id *)sub_32A48(13);
      if (v26)
      {
        unint64_t v17 = v26;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315906;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 431;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = "";
          WORD6(a10) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = 47;
          uint64_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v20 = v17;
          uint32_t v21 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }
  unint64_t v17 = 0;
  goto LABEL_16;
}

void sub_288A20(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 cameraAttributions];
  char v4 = [v3 count] != 0;

  sub_4F86C(a1 + 72, v4);
}

void sub_288A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_288AB4(void *a1, void *a2)
{
  id v7 = a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v4 = a1[4];
    id v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[5]) {
        sub_288A20(v4, v7);
      }
      sub_4636C(v6);
    }
  }
}

void sub_288B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  sub_4636C(v10);

  _Unwind_Resume(a1);
}

uint64_t sub_288B50(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      caulk::semaphore::~semaphore((caulk::semaphore *)(a1 + 24));
    }
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2) {
      sub_4636C(v2);
    }
    return a1;
  }
  return result;
}

void sub_288BAC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_288BBC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_288BDC(uint64_t a1)
{
  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(void *)(a1 + 40) + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_288C34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62A9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_288C88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62A9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_288CA8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
  if (v3)
  {
    int v4 = *a2;
    id v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v2 + 24);
      if (v7)
      {
        if (v4) {
          float v8 = 1.0;
        }
        else {
          float v8 = 0.0;
        }
        id v9 = *(id *)sub_32A48(17);
        long long v10 = v9;
        if (v9)
        {
          __int16 v11 = v9;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(v7 + 735) < 0)
            {
              sub_21E8C(__p, *(void **)(v7 + 712), *(void *)(v7 + 720));
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)(v7 + 712);
              uint64_t v18 = *(void *)(v7 + 728);
            }
            int v12 = __p;
            if (v18 < 0) {
              int v12 = (void **)__p[0];
            }
            double v13 = 0.0;
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "CameraCoexIODelegate.mm";
            if (v4) {
              double v13 = 1.0;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 52;
            __int16 v20 = 2080;
            uint32_t v21 = v12;
            __int16 v22 = 2048;
            double v23 = v13;
            _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Graph %s: Setting camera state param to %f", buf, 0x26u);
            if (SHIBYTE(v18) < 0) {
              operator delete(__p[0]);
            }
          }
        }
        sub_22210((CFStringRef *)__p, "camera_mic2_running");
        long long v14 = &kCFBooleanTrue;
        if (!v4) {
          long long v14 = &kCFBooleanFalse;
        }
        __p[1] = *(void **)v14;
        *(void *)AudioTimeStamp buf = __p;
        *(void *)&uint8_t buf[8] = 1;
        CFDictionaryRef v15 = sub_4D3D8((uint64_t)buf);
        if (__p[1]) {
          CFRelease(__p[1]);
        }
        if (__p[0]) {
          CFRelease(__p[0]);
        }
        CFRetain(v15);
        *(void *)AudioTimeStamp buf = v15;
        if (v4) {
          uint64_t v16 = 3;
        }
        else {
          uint64_t v16 = 4;
        }
        sub_F3FF0((uint64_t *)buf, *(uint64_t **)(v2 + 56), *(uint64_t **)(v2 + 64), 8, v16);
        if (v15) {
          CFRelease(v15);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v7 + 72))(v7, 1685287015, 1832018808, 0, v8);
        CFRelease(v15);
      }
      sub_4636C(v6);
    }
  }
}

void sub_288F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  sub_4636C(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_288FD0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_62A930;
  a2[1] = v2;
  return result;
}

void *sub_288FF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_62A930;
  result[1] = v3;
  return result;
}

void sub_28903C()
{
}

void sub_289058(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    sub_1B3350((caulk::semaphore *)(a1 + 72));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    if (v2) {
      sub_4636C(v2);
    }
    caulk::semaphore::timed_wait((caulk::semaphore *)(a1 + 72), -1.0);
    __dmb(9u);
  }
  [*(id *)(a1 + 40) invalidate];
  sub_56A54((void *)(a1 + 96));
  sub_288B50(a1 + 48);

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2890F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62A8F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_28914C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62A8F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_28916C(void *a1)
{
  sub_2891A4(a1);

  operator delete();
}

void *sub_2891A4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (v2) {
    sub_4636C(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_4636C(v4);
  }
  id v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_289210(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_289630(v1 + 5);
    }
    operator delete(v1);
  }
}

uint64_t *sub_289268(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  id v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        unsigned int v9 = *((_DWORD *)v7 + 9);
        BOOL v10 = v9 > a4;
        if (v8 != a3) {
          BOOL v10 = v8 > a3;
        }
        if (!v10) {
          break;
        }
        id v5 = (uint64_t *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }
      BOOL v11 = v9 < a4;
      BOOL v12 = v8 == a3;
      BOOL v13 = v8 < a3;
      if (v12) {
        BOOL v13 = v11;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v7 + 1;
      id v5 = (uint64_t *)v7[1];
    }
    while (v5);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_13:
  *a2 = v7;
  return result;
}

void sub_2892E0(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(19);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    double v23 = "RoutingHandlerDispatcher.cpp";
    __int16 v24 = 1024;
    int v25 = 118;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Undoing local action map", buf, 0x12u);
  }
  int v4 = *(void **)(a1 + 8);
  uint64_t v7 = (void *)*v4;
  id v5 = v4 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      uint64_t v8 = sub_32A48(19);
      if (*(unsigned char *)(v8 + 8))
      {
        unsigned int v9 = *(NSObject **)v8;
        if (*(void *)v8)
        {
          if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
          {
            sub_4D60(&__p, (unsigned int *)v6 + 8);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            double v23 = "RoutingHandlerDispatcher.cpp";
            __int16 v24 = 1024;
            int v25 = 123;
            __int16 v26 = 2080;
            uint64_t v27 = p_p;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Undoing routing actions for %s", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      sub_28973C(v6 + 5);
      BOOL v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          uint64_t v6 = v12;
        }
        while (!v13);
      }
      uint64_t v6 = v12;
    }
    while (v12 != v5);
  }
  long long v14 = *(void **)(a1 + 16);
  CFDictionaryRef v15 = (void *)*v14;
  uint64_t v16 = (void *)v14[1];
  while (v15 != v16)
  {
    uint64_t v17 = v15[7];
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = v15[6];
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = v15[5];
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = v15[4];
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    v15 += 15;
  }
}

__n128 sub_2895A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_62A9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_2895CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_62A9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_289618()
{
}

void sub_289630(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    while (v3 != a1)
    {
      uint64_t v6 = (uint64_t *)v3[1];
      uint64_t v5 = v3[2];
      v3[2] = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      operator delete(v3);
      uint64_t v3 = v6;
    }
  }
}

uint64_t sub_2896C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  void *v4 = a1;
  v4[1] = v5;
  void *v5 = v4;
  v4[2] = a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6 + 1;
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 16);

  return v7(a2);
}

void sub_28973C(uint64_t *a1)
{
  for (uint64_t i = a1[1]; (uint64_t *)i != a1; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void))(**(void **)(i + 16) + 24))(*(void *)(i + 16));
  sub_289630(a1);
}

void sub_289A30(_Unwind_Exception *a1)
{
}

void sub_289A38(_Unwind_Exception *a1)
{
}

void sub_289A44(_Unwind_Exception *a1)
{
}

void sub_289A50(_Unwind_Exception *a1)
{
}

void sub_289A5C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x289A64);
  }
  sub_564E4(a1);
}

uint64_t sub_289A74()
{
  return 0;
}

void sub_289A84(uint64_t a1)
{
  sub_289AC0(a1 - 80);

  operator delete();
}

uint64_t sub_289AC0(uint64_t a1)
{
  *(void *)a1 = off_62AA20;
  *(void *)(a1 + 80) = off_62AAE8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (v2) {
    sub_4636C(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 264);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_463E0(*(void **)(a1 + 168));
  sub_45F50((void *)(a1 + 96));

  return sub_FE920(a1);
}

uint64_t sub_289B58(uint64_t a1)
{
  return sub_289AC0(a1 - 80);
}

uint64_t sub_289B60()
{
  return 0;
}

uint64_t sub_289B70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_289B78(uint64_t result)
{
  *(unsigned char *)(result + 208) = 0;
  return result;
}

uint64_t sub_289B80(uint64_t a1, float a2)
{
  double v3 = a2;
  if (*(double *)(a1 + 136) <= a2 && *(double *)(a1 + 144) >= v3)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 208) = 1;
    *(float *)(a1 + 204) = a2;
  }
  else
  {
    uint64_t v4 = (os_log_t *)sub_32A48(18);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 136);
        uint64_t v7 = *(void *)(a1 + 144);
        int v9 = 136316162;
        BOOL v10 = "InputVolumeControl_HAL_Common.cpp";
        __int16 v11 = 1024;
        int v12 = 706;
        __int16 v13 = 2048;
        double v14 = v3;
        __int16 v15 = 2048;
        uint64_t v16 = v6;
        __int16 v17 = 2048;
        uint64_t v18 = v7;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disabling default input volume due to inDefaultVolume (%f) being out of range of the valid hardware volume range [%f, %f]. Defaulting to driver initialized input gain", (uint8_t *)&v9, 0x30u);
      }
    }
    uint64_t result = 0;
    *(unsigned char *)(a1 + 208) = 0;
  }
  return result;
}

uint64_t sub_289C9C(uint64_t a1)
{
  return sub_35BFC4(*(void *)(a1 + 120), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132));
}

uint64_t sub_289CAC(uint64_t a1)
{
  return sub_35BFC4(*(void *)(a1 + 120), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132));
}

void sub_289CBC()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v5 = 1024;
      int v6 = 686;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Not implemented for input volume control\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented for input volume control");
}

void sub_289D88(_Unwind_Exception *exception_object)
{
}

void sub_289DA4(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if ((a3 & 0xFF00000000) == 0 || a3)
  {
    int v72 = (os_log_t *)sub_32A48(13);
    uint64_t v73 = *v72;
    if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v79 = 1024;
      int v80 = 605;
      _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inTransferFunction must be CAVolumeCurve::kLinearCurve for input Volume Controls.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inTransferFunction must be CAVolumeCurve::kLinearCurve for input Volume Controls.");
  }
  double v10 = v8;
  double v11 = v9;
  uint64_t v12 = sub_32A48(18);
  uint64_t v13 = sub_32A48(38);
  char v14 = 0;
  uint64_t v15 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1;
    if (v18)
    {
      if ((v16 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
  if (*(void *)(v12 + 8))
  {
LABEL_11:
    uint64_t v19 = *(NSObject **)v12;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      double v20 = *a2;
      double v21 = a2[1];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v79 = 1024;
      int v80 = 607;
      __int16 v81 = 2048;
      double v82 = v20;
      __int16 v83 = 2048;
      double v84 = v21;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Desired input volume range: %f dB to %f dB", buf, 0x26u);
    }
  }
LABEL_14:
  uint64_t v22 = sub_32A48(18);
  uint64_t v23 = sub_32A48(38);
  char v24 = 0;
  uint64_t v25 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v26 = *(void *)(v22 + 8);
  while (1)
  {
    uint64_t v27 = *(int *)&buf[4 * v25];
    char v28 = v24;
    if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
      break;
    }
    char v24 = 1;
    uint64_t v25 = 1;
    if (v28)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_22;
    }
  }
  if ((v26 & v27) == 0) {
    uint64_t v22 = v23;
  }
  if (*(void *)(v22 + 8))
  {
LABEL_22:
    long long v29 = *(NSObject **)v22;
    if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v79 = 1024;
      int v80 = 608;
      __int16 v81 = 2048;
      double v82 = v10;
      __int16 v83 = 2048;
      double v84 = v11;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d            HW volume range: %f dB to %f dB", buf, 0x26u);
    }
  }
LABEL_25:
  uint64_t v30 = sub_32A48(18);
  uint64_t v31 = sub_32A48(38);
  char v32 = 0;
  uint64_t v33 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v34 = *(void *)(v30 + 8);
  do
  {
    uint64_t v35 = *(int *)&buf[4 * v33];
    char v36 = v32;
    if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0))
    {
      if ((v34 & v35) == 0) {
        uint64_t v30 = v31;
      }
      if (*(void *)(v30 + 8)) {
        goto LABEL_33;
      }
      goto LABEL_39;
    }
    char v32 = 1;
    uint64_t v33 = 1;
  }
  while ((v36 & 1) == 0);
  if ((v34 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v37 = *(NSObject **)v30;
  if (!v37 || !os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_39;
  }
  sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8));
  if (v77 >= 0) {
    *(double *)&uint64_t v38 = COERCE_DOUBLE(__p);
  }
  else {
    uint64_t v38 = (void **)__p[0];
  }
  *(_DWORD *)AudioTimeStamp buf = 136315650;
  *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
  __int16 v79 = 1024;
  int v80 = 609;
  __int16 v81 = 2080;
  double v82 = *(double *)&v38;
  _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d  VAD '%s'", buf, 0x1Cu);
  if ((v77 & 0x80000000) == 0)
  {
LABEL_39:
    if (a4) {
      goto LABEL_40;
    }
LABEL_70:
    *(_DWORD *)(a1 + 248) = 0;
    goto LABEL_71;
  }
  operator delete(__p[0]);
  if (!a4) {
    goto LABEL_70;
  }
LABEL_40:
  int v39 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a1 + 248) = v39;
  if (v39)
  {
    double v40 = *a2;
    double v41 = a2[1];
    uint64_t v43 = *(void *)(a4 + 24);
    unint64_t v42 = *(std::__shared_weak_count **)(a4 + 32);
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v44 = *(std::__shared_weak_count **)(a1 + 264);
    *(void *)(a1 + 256) = v43;
    *(void *)(a1 + 264) = v42;
    if (v44)
    {
      std::__shared_weak_count::__release_weak(v44);
      unint64_t v42 = *(std::__shared_weak_count **)(a1 + 264);
    }
    *(unsigned char *)(a1 + 272) = 0;
    if (v42)
    {
      uint64_t v45 = std::__shared_weak_count::lock(v42);
      if (v45)
      {
        uint64_t v46 = *(void *)(a1 + 256);
        if (v46)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 144))(v46, 1);
LABEL_54:
          sub_4636C(v45);
LABEL_55:
          float v49 = v40;
          float v50 = v41;
          if (*(unsigned char *)(a1 + 210))
          {
            *(_DWORD *)AudioTimeStamp buf = 1835103844;
            *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
            float v51 = *(double *)(a1 + 216);
            *(float *)std::string __p = v51;
            if ((*(unsigned int (**)(void, unsigned char *))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), buf))
            {
              int v75 = 4;
              (*(void (**)(void, unsigned char *, void, void, int *, void **))(**(void **)(a1 + 120) + 40))(*(void *)(a1 + 120), buf, 0, 0, &v75, __p);
              float v51 = *(float *)__p;
            }
            float v52 = *(double *)a4;
            if (v51 > v52) {
              float v52 = v51;
            }
            *(float *)(a1 + 232) = v52;
            double v53 = *(double *)(a1 + 224);
            if (v53 >= *(double *)(a4 + 8)) {
              double v53 = *(double *)(a4 + 8);
            }
            float v54 = v53;
            *(float *)(a1 + 236) = v54;
          }
          else if (*(double *)a4 != 0.0 || *(double *)(a4 + 8) != 0.0)
          {
            int v55 = (os_log_t *)sub_32A48(13);
            __int16 v56 = *v55;
            if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
              __int16 v79 = 1024;
              int v80 = 664;
              _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Non-zero HW volume configured but physical device does not support HW volume\"", buf, 0x12u);
            }
            long long v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_1106A4(v57, "Non-zero HW volume configured but physical device does not support HW volume");
          }
          goto LABEL_77;
        }
      }
    }
    else
    {
      uint64_t v45 = 0;
    }
    char v47 = (os_log_t *)sub_32A48(13);
    uint64_t v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v79 = 1024;
      int v80 = 640;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Logic error: requested software volume, but given software volume command is NULL\"", buf, 0x12u);
    }
    *(_DWORD *)(a1 + 248) = 0;
    if (!v45) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_71:
  double v58 = *a2;
  if (*a2 < v10) {
    double v58 = v10;
  }
  float v49 = v58;
  if (v11 >= a2[1]) {
    double v59 = a2[1];
  }
  else {
    double v59 = v11;
  }
  float v50 = v59;
  *(float *)(a1 + 232) = v49;
  *(float *)(a1 + 236) = v50;
LABEL_77:
  *(_DWORD *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 192) = _D0;
  if (*(void *)(a1 + 176)) {
    signed int v64 = *(_DWORD *)(*(void *)(a1 + 160) + 28);
  }
  else {
    signed int v64 = 0;
  }
  signed int v65 = sub_791CC(a1 + 152);
  sub_463E0(*(void **)(a1 + 168));
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 168) = 0;
  *(float *)&double v66 = v49;
  sub_792F0(a1 + 152, v64, v65, v66, v50);
  float v67 = *(float *)(a1 + 200);
  uint64_t v68 = *(void *)(a1 + 176);
  if (v68)
  {
    if (v67 < *(float *)(*(void *)(a1 + 160) + 36)) {
      float v69 = 0.0;
    }
    else {
      float v69 = *(float *)(a1 + 200);
    }
    if (v67 < *(float *)(*(void *)(a1 + 160) + 36) && v68 != 0) {
      float v69 = *(float *)(*(void *)(a1 + 160) + 36);
    }
  }
  else if (v67 < 0.0)
  {
    float v69 = 0.0;
  }
  else
  {
    float v69 = *(float *)(a1 + 200);
  }
  *(float *)(a1 + 200) = v69;
  double v71 = sub_792A4(a1 + 152);
  if (v69 <= *(float *)&v71) {
    *(float *)&double v71 = v69;
  }
  *(_DWORD *)(a1 + 200) = LODWORD(v71);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a2;
}

void sub_28A594(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_28A5D0(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)double v20 = 509;
LABEL_22:
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
LABEL_26:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v8 = *a2;
  if (*a2 <= 1986229103)
  {
    if (v8 == 1064725619) {
      return 1;
    }
    if (v8 != 1836414053)
    {
      if (v8 != 1836478308) {
        goto LABEL_23;
      }
      return 1;
    }
  }
  else if (v8 > 1987013731)
  {
    if (v8 != 1987013732)
    {
      if (v8 != 1987013741) {
        goto LABEL_23;
      }
      int v16 = 1987013732;
      uint64_t v17 = a1[16];
      goto LABEL_17;
    }
  }
  else if (v8 != 1986229104 && v8 != 1986290211)
  {
LABEL_23:
    char v14 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)double v20 = 548;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  int v16 = *a2;
  uint64_t v17 = a1[16];
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)a1[15] + 16))(a1[15], &v16))
  {
LABEL_17:
    sub_FEEF8(a1[15], &v16, (uint64_t)sub_28A8AC, (uint64_t)a1);
    double v10 = (void *)a1[35];
    *(void *)AudioTimeStamp buf = *(void *)a2;
    *(_DWORD *)&uint8_t buf[8] = a2[2];
    *(void *)&v20[2] = a3;
    uint64_t v21 = a4;
    sub_1A4260(v10, (unsigned int *)&v16, (uint64_t)buf);
  }
  return 1;
}

void *sub_28A8AC(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  if (!a2)
  {
    char v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 559;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inNumberAddresses is 0.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }
  if (!a4)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    char v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 560;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: \"inClientData is NULL.\"", buf, 0x12u);
    }
    __int16 v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "inClientData is NULL.");
  }
  __int16 v5 = a3;
  if (!a3)
  {
    double v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 561;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: \"inAddresses is NULL.\"", buf, 0x12u);
    }
    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "inAddresses is NULL.");
  }
  if (a3[2] != *(_DWORD *)(a4 + 132))
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 565;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inAddresses[0].mElement != This->mElement.\"", buf, 0x12u);
    }
    uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "inAddresses[0].mElement != This->mElement.");
  }
  uint64_t v6 = a2;
  do
  {
    int v7 = *(_DWORD *)(a4 + 128);
    if (v5[1] == v7 && *v5 == 1987013732)
    {
      int v8 = *(_DWORD *)(a4 + 132);
      if (v5[2] == v8)
      {
        if (*(unsigned char *)(a4 + 210))
        {
          int v26 = 4;
          float v27 = 0.0;
          uint64_t v9 = *(void *)(a4 + 120);
          *(_DWORD *)AudioTimeStamp buf = 1987013732;
          *(_DWORD *)&uint8_t buf[4] = v7;
          *(_DWORD *)&uint8_t buf[8] = v8;
          (*(void (**)(uint64_t, unsigned char *, void, void, int *, float *))(*(void *)v9 + 40))(v9, buf, 0, 0, &v26, &v27);
          float v10 = v27;
          if (*(float *)(a4 + 200) != v27)
          {
            if (!*(_DWORD *)(a4 + 248))
            {
              *(double *)AudioTimeStamp buf = v27;
              float v11 = *sub_200410((double *)(a4 + 136), (double *)buf, (double *)(a4 + 144));
              *(float *)(a4 + 200) = v11;
              float v10 = v27;
            }
            *(float *)(a4 + 240) = v10;
          }
        }
      }
    }
    uint64_t v12 = *(void **)(a4 + 280);
    *(void *)AudioTimeStamp buf = *(void *)v5;
    *(_DWORD *)&uint8_t buf[8] = v5[2];
    uint64_t result = sub_1A1D20(v12, (unsigned int *)buf);
    v5 += 3;
    --v6;
  }
  while (v6);
  return result;
}

void sub_28ACD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_28AD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v36 = (os_log_t *)sub_32A48(13);
    uint64_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v41 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)v45, (unsigned int *)&__p);
      uint64_t v38 = v46 >= 0 ? v45 : (void **)v45[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v48 = 1024;
      *(_DWORD *)float v49 = 447;
      *(_WORD *)&v49[4] = 2080;
      *(void *)&v49[6] = v38;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported property: %s.\"", buf, 0x1Cu);
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v8 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1986229103)
  {
    float v10 = (&def_1E50E8 + 1);
    if (v8 == 1064725619) {
      return (uint64_t)v10;
    }
    if (v8 == 1836414053) {
      goto LABEL_27;
    }
    if (v8 != 1836478308) {
      goto LABEL_39;
    }
  }
  else
  {
    if (v8 <= 1987013731)
    {
      if (v8 != 1986229104 && v8 != 1986290211)
      {
LABEL_39:
        char v32 = (os_log_t *)sub_32A48(13);
        uint64_t v33 = *v32;
        if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v41 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v45, (unsigned int *)&__p);
          if (v46 >= 0) {
            uint64_t v34 = v45;
          }
          else {
            uint64_t v34 = (void **)v45[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
          __int16 v48 = 1024;
          *(_DWORD *)float v49 = 499;
          *(_WORD *)&v49[4] = 2080;
          *(void *)&v49[6] = v34;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty() returned true, but I do not know about property %s.\"", buf, 0x1Cu);
LABEL_45:
          if (v46 < 0) {
            operator delete(v45[0]);
          }
          return 0;
        }
        return 0;
      }
      goto LABEL_27;
    }
    if (v8 == 1987013732)
    {
LABEL_27:
      unsigned int v43 = *(_DWORD *)a2;
      uint64_t v44 = *(void *)(a1 + 128);
      if (!(*(unsigned int (**)(void, unsigned int *))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), &v43))return 1; {
      uint64_t v22 = *(void **)(a1 + 280);
      }
      *(void *)AudioTimeStamp buf = *(void *)a2;
      *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 8);
      *(void *)&v49[2] = a3;
      *(void *)&v49[10] = a4;
      sub_1A4AA0(v22, &v43, (uint64_t)buf);
      unsigned int v23 = sub_FEAC0(*(void *)(a1 + 120), &v43, (uint64_t)sub_28A8AC, a1);
      if (!v23) {
        return 1;
      }
      char v24 = (os_log_t *)sub_32A48(18);
      float v10 = *v24;
      if (*v24)
      {
        if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v45, v23);
          int v25 = v46;
          int v26 = (void **)v45[0];
          uint64_t v27 = *(void *)(a1 + 120);
          sub_2417C(&__p, *(_DWORD *)a2);
          char v28 = v45;
          if (v25 < 0) {
            char v28 = v26;
          }
          if (v42 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          int v30 = *(_DWORD *)(a1 + 128);
          int v31 = *(_DWORD *)(a1 + 132);
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
          __int16 v48 = 1024;
          *(_DWORD *)float v49 = 477;
          *(_WORD *)&v49[4] = 2080;
          *(void *)&v49[6] = v28;
          *(_WORD *)&v49[14] = 2048;
          *(void *)&v49[16] = v27;
          __int16 v50 = 2080;
          float v51 = p_p;
          __int16 v52 = 1024;
          int v53 = v30;
          __int16 v54 = 1024;
          int v55 = v31;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
            buf,
            0x3Cu);
          if (v42 < 0) {
            operator delete(__p);
          }
          goto LABEL_45;
        }
        return 0;
      }
      return (uint64_t)v10;
    }
    if (v8 != 1987013741) {
      goto LABEL_39;
    }
    unsigned int v43 = 1987013732;
    uint64_t v44 = *(void *)(a1 + 128);
    float v11 = *(void **)(a1 + 280);
    *(void *)AudioTimeStamp buf = *(void *)a2;
    *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 8);
    *(void *)&v49[2] = a3;
    *(void *)&v49[10] = a4;
    sub_1A4AA0(v11, &v43, (uint64_t)buf);
    unsigned int v12 = sub_FEAC0(*(void *)(a1 + 120), &v43, (uint64_t)sub_28A8AC, a1);
    float v10 = (v12 == 0);
    if (v12)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(18);
      char v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v45, v12);
          int v15 = v46;
          int v16 = (void **)v45[0];
          uint64_t v17 = *(void *)(a1 + 120);
          sub_2417C(&__p, 0x766F6C64u);
          char v18 = v45;
          if (v15 < 0) {
            char v18 = v16;
          }
          if (v42 >= 0) {
            __int16 v19 = &__p;
          }
          else {
            __int16 v19 = __p;
          }
          int v20 = *(_DWORD *)(a1 + 128);
          int v21 = *(_DWORD *)(a1 + 132);
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
          __int16 v48 = 1024;
          *(_DWORD *)float v49 = 461;
          *(_WORD *)&v49[4] = 2080;
          *(void *)&v49[6] = v18;
          *(_WORD *)&v49[14] = 2048;
          *(void *)&v49[16] = v17;
          __int16 v50 = 2080;
          float v51 = v19;
          __int16 v52 = 1024;
          int v53 = v20;
          __int16 v54 = 1024;
          int v55 = v21;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
            buf,
            0x3Cu);
          if (v42 < 0) {
            operator delete(__p);
          }
          if (v46 < 0) {
            operator delete(v45[0]);
          }
        }
      }
    }
  }
  return (uint64_t)v10;
}

void sub_28B308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_28B330(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    __int16 v52 = (os_log_t *)sub_32A48(13);
    int v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *a2;
      int v65 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v64);
      __int16 v54 = v67 >= 0 ? __p : (void **)__p[0];
      buf[0] = 4.8152e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 396;
      __int16 v71 = 2080;
      double v72 = *(double *)&v54;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported property: %s.\"", (uint8_t *)buf, 0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) > a5)
  {
    __int16 v56 = (os_log_t *)sub_32A48(13);
    long long v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *a2;
      int v65 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v64);
      double v58 = v67 >= 0 ? __p : (void **)__p[0];
      buf[0] = 4.8152e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 397;
      __int16 v71 = 2080;
      double v72 = *(double *)&v58;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient for property %s.\"", (uint8_t *)buf, 0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }
    double v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v59 = &off_6414D8;
    v59[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    int v60 = (os_log_t *)sub_32A48(13);
    std::chrono::steady_clock::time_point v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = *a2;
      int v65 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v64);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v62 = v67 >= 0 ? __p : (void **)__p[0];
      buf[0] = 4.8152e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 398;
      __int16 v71 = 2080;
      double v72 = *(double *)&v62;
      _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Property %s is not settable.\"", (uint8_t *)buf, 0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }
    char v63 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v63 = &off_6414D8;
    v63[2] = 1970171760;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 > 1987013731)
  {
    if (v12 == 1987013732)
    {
      LODWORD(__p[0]) = sub_1FC1C8(a5, (uint64_t)a6);
      float v32 = *(double *)(a1 + 136);
      buf[0] = v32;
      float v33 = *(double *)(a1 + 144);
      *(float *)&uint64_t v64 = v33;
      *(float *)(a1 + 200) = *sub_1F84A8(buf, (float *)__p, (float *)&v64);
      if (*(double *)(a1 + 144) < *(float *)__p)
      {
        uint64_t v34 = (os_log_t *)sub_32A48(18);
        uint64_t v35 = *v34;
        if (*v34)
        {
          if (os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
          {
            char v36 = *(void ***)(a1 + 144);
            buf[0] = 4.8154e-34;
            *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
            __int16 v69 = 1024;
            int v70 = 414;
            __int16 v71 = 2048;
            double v72 = *(float *)__p;
            __int16 v73 = 2048;
            uint64_t v74 = v36;
            __int16 v75 = 2048;
            uint64_t v76 = v36;
            _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d desiredVolume (%f) is greater than the maximum decibel volume of the device (%f). Clamping to mUserVolumeRangeDecibels.mMaximum (%f)", (uint8_t *)buf, 0x30u);
          }
        }
      }
      if (*(double *)(a1 + 136) > *(float *)__p)
      {
        uint64_t v37 = (os_log_t *)sub_32A48(18);
        uint64_t v38 = *v37;
        if (*v37)
        {
          if (os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
          {
            int v39 = *(void ***)(a1 + 136);
            buf[0] = 4.8154e-34;
            *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
            __int16 v69 = 1024;
            int v70 = 415;
            __int16 v71 = 2048;
            double v72 = *(float *)__p;
            __int16 v73 = 2048;
            uint64_t v74 = v39;
            __int16 v75 = 2048;
            uint64_t v76 = v39;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d desiredVolume (%f) is less than the minimum decibel volume of the device (%f). Clamping to mUserVolumeRangeDecibels.mMinimum (%f)", (uint8_t *)buf, 0x30u);
          }
        }
      }
      sub_28BD24(a1);
      return;
    }
    if (v12 == 1987013741)
    {
      float v20 = sub_1FC1C8(a5, (uint64_t)a6);
      float v21 = 1.0;
      if (v20 <= 1.0) {
        float v21 = v20;
      }
      BOOL v22 = v20 < 0.0;
      float v23 = 0.0;
      if (!v22) {
        float v23 = v21;
      }
      sub_796B4(a1 + 152, v23);
      *(_DWORD *)(a1 + 200) = v24;
      sub_28BD24(a1);
      return;
    }
    goto LABEL_21;
  }
  if (v12 == 1836414053)
  {
    *(unsigned char *)(a1 + 209) = sub_1FDEE0(a5, a6) != 0;
    uint64_t v31 = *(void *)(a1 + 120);
    buf[0] = 4.7478e27;
    *(void *)&buf[1] = *(void *)(a1 + 128);
    (*(void (**)(uint64_t, float *, void, void, uint64_t, unsigned int *))(*(void *)v31 + 48))(v31, buf, 0, 0, a5, a6);
    return;
  }
  if (v12 != 1836478308)
  {
LABEL_21:
    int v25 = (os_log_t *)sub_32A48(13);
    os_log_t v26 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v64 = *a2;
    int v65 = *((_DWORD *)a2 + 2);
    sub_16C9C4((uint64_t)__p, (unsigned int *)&v64);
    if (v67 >= 0) {
      uint64_t v27 = __p;
    }
    else {
      uint64_t v27 = (void **)__p[0];
    }
    buf[0] = 4.8152e-34;
    *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v69 = 1024;
    int v70 = 435;
    __int16 v71 = 2080;
    double v72 = *(double *)&v27;
    char v28 = "%25s:%-5d ASSERTION FAILURE: \"GetPropertyDataSize() is correct and IsPropertySettable() and HasProperty() ret"
          "urned true, but I do not know about property %s.\"";
    __int16 v29 = v26;
    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    goto LABEL_59;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a1 + 204);
    uint64_t v13 = sub_32A48(18);
    uint64_t v14 = sub_32A48(38);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = SLODWORD(buf[v16]);
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v19) {
        goto LABEL_43;
      }
    }
    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_43:
    char v47 = *(NSObject **)v13;
    if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      float v48 = *(float *)(a1 + 204);
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8));
      if (v67 >= 0) {
        float v49 = __p;
      }
      else {
        float v49 = (void **)__p[0];
      }
      buf[0] = 4.8153e-34;
      *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v69 = 1024;
      int v70 = 728;
      __int16 v71 = 2048;
      double v72 = v48;
      __int16 v73 = 2080;
      uint64_t v74 = v49;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applying default input gain of %f dB on VAD '%s'.", (uint8_t *)buf, 0x26u);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_28BD24(a1);
    return;
  }
  uint64_t v40 = sub_32A48(18);
  uint64_t v41 = sub_32A48(38);
  char v42 = 0;
  uint64_t v43 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v44 = *(void *)(v40 + 8);
  while (1)
  {
    uint64_t v45 = SLODWORD(buf[v43]);
    char v46 = v42;
    if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
      break;
    }
    char v42 = 1;
    uint64_t v43 = 1;
    if (v46) {
      goto LABEL_53;
    }
  }
  if ((v44 & v45) == 0) {
    uint64_t v40 = v41;
  }
LABEL_53:
  __int16 v50 = *(NSObject **)v40;
  if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8));
    if (v67 >= 0) {
      float v51 = __p;
    }
    else {
      float v51 = (void **)__p[0];
    }
    buf[0] = 4.8152e-34;
    *(void *)&buf[1] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v69 = 1024;
    int v70 = 734;
    __int16 v71 = 2080;
    double v72 = *(double *)&v51;
    char v28 = "%25s:%-5d Ignoring request to apply default volume. This control has no default volume on VAD '%s'. Defaulting"
          " to driver initialized input gain";
    __int16 v29 = v50;
    os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
LABEL_59:
    _os_log_impl(&def_1E50E8, v29, v30, v28, (uint8_t *)buf, 0x1Cu);
    if (v67 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_28BD24(uint64_t a1)
{
  float v2 = *(float *)(a1 + 200);
  float v81 = v2;
  if (*(_DWORD *)(a1 + 248) == 1)
  {
    float v3 = *(float *)(a1 + 232);
    if (v2 < v3 || (v3 = *(float *)(a1 + 236), float v4 = 0.0, v2 > v3))
    {
      float v4 = v2 - v3;
      float v81 = v3;
    }
  }
  else
  {
    *(double *)AudioTimeStamp buf = v2;
    float v5 = *sub_200410((double *)(a1 + 216), (double *)buf, (double *)(a1 + 224));
    float v81 = v5;
    float v4 = 0.0;
  }
  uint64_t v6 = sub_32A48(18);
  uint64_t v7 = sub_32A48(38);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_12;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_12:
  uint64_t v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    double v14 = *(float *)(a1 + 200);
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v83 = 1024;
    int v84 = 161;
    __int16 v85 = 2048;
    *(double *)uint64_t v86 = v14;
    *(_WORD *)&v86[8] = 2048;
    *(double *)&v86[10] = v81;
    __int16 v87 = 2048;
    double v88 = v4;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   Setting Input Volume: %f dB, Final HW Volume: %f dB, Final SW Volume: %f dB", buf, 0x30u);
  }
  uint64_t v15 = sub_32A48(18);
  uint64_t v16 = sub_32A48(38);
  char v17 = 0;
  uint64_t v18 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v21) {
      goto LABEL_21;
    }
  }
  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_21:
  BOOL v22 = *(NSObject **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8));
    float v23 = v80 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v83 = 1024;
    int v84 = 162;
    __int16 v85 = 2080;
    *(void *)uint64_t v86 = v23;
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   VAD '%s'", buf, 0x1Cu);
    if (v80 < 0) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v24 = sub_32A48(18);
  uint64_t v25 = sub_32A48(38);
  char v26 = 0;
  uint64_t v27 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v28 = *(void *)(v24 + 8);
  while (1)
  {
    uint64_t v29 = *(int *)&buf[4 * v27];
    char v30 = v26;
    if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
      break;
    }
    char v26 = 1;
    uint64_t v27 = 1;
    if (v30) {
      goto LABEL_34;
    }
  }
  if ((v28 & v29) == 0) {
    uint64_t v24 = v25;
  }
LABEL_34:
  uint64_t v31 = *(NSObject **)v24;
  if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 120) + 128))(__p);
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v83 = 1024;
    int v84 = 164;
    __int16 v85 = 2112;
    *(void *)uint64_t v86 = *(void *)__p;
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   PhysicalDevice UID = \"%@\"", buf, 0x1Cu);
    sub_72924((uint64_t)__p);
  }
  uint64_t v32 = sub_32A48(18);
  uint64_t v33 = sub_32A48(38);
  char v34 = 0;
  uint64_t v35 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v36 = *(void *)(v32 + 8);
  while (1)
  {
    uint64_t v37 = *(int *)&buf[4 * v35];
    char v38 = v34;
    if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
      break;
    }
    char v34 = 1;
    uint64_t v35 = 1;
    if (v38) {
      goto LABEL_43;
    }
  }
  if ((v36 & v37) == 0) {
    uint64_t v32 = v33;
  }
LABEL_43:
  int v39 = *(NSObject **)v32;
  if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v40 = *(_DWORD *)(a1 + 128);
    sub_2417C(__p, v40);
    uint64_t v41 = v80 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v83 = 1024;
    int v84 = 165;
    __int16 v85 = 1024;
    *(_DWORD *)uint64_t v86 = v40;
    *(_WORD *)&v86[4] = 2080;
    *(void *)&v86[6] = v41;
    _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   Scope = %u (\"%s\")", buf, 0x22u);
    if (v80 < 0) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v42 = sub_32A48(18);
  uint64_t v43 = sub_32A48(38);
  char v44 = 0;
  uint64_t v45 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v46 = *(void *)(v42 + 8);
  while (1)
  {
    uint64_t v47 = *(int *)&buf[4 * v45];
    char v48 = v44;
    if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
      break;
    }
    char v44 = 1;
    uint64_t v45 = 1;
    if (v48) {
      goto LABEL_56;
    }
  }
  if ((v46 & v47) == 0) {
    uint64_t v42 = v43;
  }
LABEL_56:
  float v49 = *(NSObject **)v42;
  if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v50 = *(_DWORD *)(a1 + 132);
    sub_2417C(__p, v50);
    float v51 = v80 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v83 = 1024;
    int v84 = 166;
    __int16 v85 = 1024;
    *(_DWORD *)uint64_t v86 = v50;
    *(_WORD *)&v86[4] = 2080;
    *(void *)&v86[6] = v51;
    _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   Element = %u (\"%s\")", buf, 0x22u);
    if (v80 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (!*(_DWORD *)(a1 + 248))
  {
    uint64_t v65 = sub_32A48(18);
    uint64_t v66 = sub_32A48(38);
    char v67 = 0;
    uint64_t v68 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v69 = *(void *)(v65 + 8);
    while (1)
    {
      uint64_t v70 = *(int *)&buf[4 * v68];
      char v71 = v67;
      if (((v69 & v70) != 0) != ((*(void *)(v66 + 8) & v70) != 0)) {
        break;
      }
      char v67 = 1;
      uint64_t v68 = 1;
      if (v71) {
        goto LABEL_95;
      }
    }
    if ((v69 & v70) == 0) {
      uint64_t v65 = v66;
    }
LABEL_95:
    uint64_t v76 = *(NSObject **)v65;
    if (v76 && os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v83 = 1024;
      int v84 = 167;
      _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_DEBUG, "%25s:%-5d   SW Volume: disabled", buf, 0x12u);
    }
  }
  uint64_t v52 = *(void *)(a1 + 128);
  *(_DWORD *)std::string __p = 1987013732;
  *(void *)&__p[4] = v52;
  if (!*(unsigned char *)(a1 + 210) || (*(float *)(a1 + 240) = v81, sub_1FE630(*(void *)(a1 + 120)) == *(float *)(a1 + 240)))
  {
    int v53 = 0;
  }
  else
  {
    (*(void (**)(void, unsigned char *, void, void, uint64_t, float *))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120), __p, 0, 0, 4, &v81);
    int v53 = 1;
  }
  if (*(_DWORD *)(a1 + 248))
  {
    __int16 v54 = *(std::__shared_weak_count **)(a1 + 264);
    if (v54)
    {
      int v55 = std::__shared_weak_count::lock(v54);
      if (v55)
      {
        uint64_t v56 = *(void *)(a1 + 256);
        if (v56)
        {
          int v57 = (*(uint64_t (**)(void))(*(void *)v56 + 136))(*(void *)(a1 + 256));
          if (v57 == 1935895666) {
            float v4 = sub_7953C(a1 + 152, v4);
          }
          uint64_t v58 = sub_32A48(18);
          uint64_t v59 = sub_32A48(38);
          char v60 = 0;
          uint64_t v61 = 0;
          *(void *)AudioTimeStamp buf = 0x100000002;
          uint64_t v62 = *(void *)(v58 + 8);
          while (1)
          {
            uint64_t v63 = *(int *)&buf[4 * v61];
            char v64 = v60;
            if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
              break;
            }
            char v60 = 1;
            uint64_t v61 = 1;
            if (v64) {
              goto LABEL_100;
            }
          }
          if ((v62 & v63) == 0) {
            uint64_t v58 = v59;
          }
LABEL_100:
          char v77 = *(NSObject **)v58;
          if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v78 = "dB";
            *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
            __int16 v83 = 1024;
            int v84 = 193;
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            if (v57 == 1935895666) {
              uint64_t v78 = "scalar";
            }
            __int16 v85 = 2048;
            *(double *)uint64_t v86 = v4;
            *(_WORD *)&v86[8] = 2080;
            *(void *)&v86[10] = v78;
            _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d   Input SW Volume: %f %s", buf, 0x26u);
          }
          if (v4 != *(float *)(a1 + 244) || !*(unsigned char *)(a1 + 272))
          {
            (*(void (**)(uint64_t, float))(*(void *)v56 + 16))(v56, v4);
            int v74 = 0;
            *(float *)(a1 + 244) = v4;
            *(unsigned char *)(a1 + 272) = 1;
LABEL_87:
            sub_4636C(v55);
LABEL_88:
            if (((v53 | v74) & 1) == 0)
            {
              uint64_t v75 = *(void *)(a1 + 288);
              if (v75)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 16), 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 16), 1uLL, memory_order_relaxed);
              }
              *(void *)AudioTimeStamp buf = *(void *)__p;
              *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)&__p[8];
              sub_13910();
              operator new();
            }
            return;
          }
LABEL_86:
          int v74 = 1;
          if (!v55) {
            goto LABEL_88;
          }
          goto LABEL_87;
        }
      }
    }
    else
    {
      int v55 = 0;
    }
    double v72 = (os_log_t *)sub_32A48(13);
    __int16 v73 = *v72;
    if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      __int16 v83 = 1024;
      int v84 = 205;
      _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"software volume is required but we have a NULL software volume command\"", buf, 0x12u);
    }
    goto LABEL_86;
  }
}

void sub_28C768(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_28C7C4(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    float v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_28C818(uint64_t a1)
{
  uint64_t v9 = a1;
  float v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    float v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      float v4 = *(void **)a1;
      if (*(void *)a1)
      {
        uint64_t v5 = a1 + 16;
        if (sub_1A1BE4(v4, v5))
        {
          *(void *)AudioTimeStamp buf = *(void *)v5;
          *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v5 + 8);
          sub_1A1D20(v4, (unsigned int *)buf);
        }
LABEL_11:
        sub_4636C(v3);
        return sub_28C7C4(&v9);
      }
    }
  }
  else
  {
    float v3 = 0;
  }
  uint64_t v6 = (os_log_t *)sub_32A48(18);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
    __int16 v11 = 1024;
    int v12 = 225;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Skipped notifying audio object property listener relay for input volume control, since it may be destructed.", buf, 0x12u);
  }
  if (v3) {
    goto LABEL_11;
  }
  return sub_28C7C4(&v9);
}

void sub_28C94C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_4636C(v16);
  if (a2 == 3)
  {
    uint64_t v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v22;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 98;
      float v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    char v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v27 = v26;
      uint64_t v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v30;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 98;
        float v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 98;
        float v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x28C914);
}

void sub_28CBD8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, _DWORD *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    os_log_t v29 = (os_log_t *)sub_32A48(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v40);
      uint64_t v31 = v43 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v45 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v46 = 1024;
      int v47 = 310;
      __int16 v48 = 2080;
      float v49 = v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported property: %s.\"", buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) > *a5)
  {
    uint64_t v33 = (os_log_t *)sub_32A48(13);
    char v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v40);
      uint64_t v35 = v43 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v45 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v46 = 1024;
      int v47 = 311;
      __int16 v48 = 2080;
      float v49 = v35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient for property %s.\"", buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v36 = &off_6414D8;
    void v36[2] = 561211770;
  }
  int v12 = *a2;
  if (*a2 <= 1986229103)
  {
    if (v12 > 1836414052)
    {
      if (v12 != 1836414053)
      {
        if (v12 == 1983013986)
        {
          sub_796B4(a1 + 152, *a6);
LABEL_28:
          sub_200258(a5, a6, v13);
          return;
        }
        if (v12 == 1836478308)
        {
          uint64_t v37 = (os_log_t *)sub_32A48(13);
          char v38 = *v37;
          if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            uint64_t v45 = "InputVolumeControl_HAL_Common.cpp";
            __int16 v46 = 1024;
            int v47 = 362;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Attempt to GetPropertyData for kVirtualAudioDevicePropertyApplyMasterVolumeDefault.  This property is write-only.\"", buf, 0x12u);
          }
          int v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Attempt to GetPropertyData for kVirtualAudioDevicePropertyApplyMasterVolumeDefault.  This property is write-only.");
        }
        goto LABEL_37;
      }
      int v18 = *(unsigned __int8 *)(a1 + 209);
      goto LABEL_24;
    }
    if (v12 != 1064725619)
    {
      if (v12 == 1684157046)
      {
        uint64_t v16 = a1 + 152;
        float v17 = *a6;
        goto LABEL_20;
      }
      goto LABEL_37;
    }
    *(_DWORD *)AudioTimeStamp buf = 1064725619;
    uint64_t v19 = *(void *)(a1 + 120);
    uint64_t v45 = *(const char **)(a1 + 128);
    int v20 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v19 + 16))(v19, buf);
    uint64_t v21 = *(void *)(a1 + 120);
    if (!v20)
    {
      *(_DWORD *)std::string __p = 1987013732;
      *(void *)&__p[4] = *(void *)(a1 + 128);
      int v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v21 + 16))(v21, __p);
      sub_9EC7C(v22, a5, a6);
      return;
    }
LABEL_32:
    (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, _DWORD *, float *))(*(void *)v21 + 40))(v21, buf, a3, a4, a5, a6);
    return;
  }
  if (v12 > 1987013731)
  {
    if (v12 == 1987013732)
    {
      float v13 = *(float *)(a1 + 200);
      goto LABEL_28;
    }
    if (v12 == 1987013741)
    {
      uint64_t v16 = a1 + 152;
      float v17 = *(float *)(a1 + 200);
LABEL_20:
      float v13 = sub_7953C(v16, v17);
      goto LABEL_28;
    }
LABEL_37:
    uint32_t v25 = (os_log_t *)sub_32A48(13);
    char v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v40);
      uint64_t v27 = v43 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v45 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v46 = 1024;
      int v47 = 388;
      __int16 v48 = 2080;
      float v49 = v27;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"GetPropertyDataSize() is correct and HasProperty() returned true, but I do not know about property %s.\"", buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
    }
    return;
  }
  if (v12 == 1986229104)
  {
    if (*(_DWORD *)(a1 + 248))
    {
      int v18 = 1;
LABEL_24:
      sub_9EC7C(v18, a5, a6);
      return;
    }
    *(_DWORD *)AudioTimeStamp buf = 1986229104;
    uint64_t v23 = *(void *)(a1 + 120);
    uint64_t v45 = *(const char **)(a1 + 128);
    int v24 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v23 + 16))(v23, buf);
    uint64_t v21 = *(void *)(a1 + 120);
    if (!v24)
    {
      *(_DWORD *)std::string __p = 1987013732;
      *(void *)&__p[4] = *(void *)(a1 + 128);
      int v28 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v21 + 16))(v21, __p);
      sub_9EC7C(v28, a5, a6);
      return;
    }
    goto LABEL_32;
  }
  if (v12 != 1986290211) {
    goto LABEL_37;
  }
  double v14 = *(double *)(a1 + 136);
  double v15 = *(double *)(a1 + 144);

  sub_A2CB4(a5, (double *)a6, v14, v15);
}

void sub_28D3CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_28D3E8(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    float v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)a2;
      int v17 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
      double v14 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v21 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v22 = 1024;
      int v23 = 276;
      __int16 v24 = 2080;
      uint32_t v25 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported property: %s.\"", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v3 = *a2;
  uint64_t result = 4;
  if (*a2 <= 1983013985)
  {
    if (v3 > 1836414052)
    {
      BOOL v6 = v3 == 1836414053;
      int v7 = 1836478308;
    }
    else
    {
      BOOL v6 = v3 == 1064725619;
      int v7 = 1684157046;
    }
    goto LABEL_14;
  }
  if (v3 <= 1986290210)
  {
    BOOL v6 = v3 == 1983013986;
    int v7 = 1986229104;
LABEL_14:
    if (v6 || v3 == v7) {
      return result;
    }
    goto LABEL_20;
  }
  if (v3 == 1987013741 || v3 == 1987013732) {
    return result;
  }
  if (v3 == 1986290211) {
    return 16;
  }
LABEL_20:
  uint64_t v9 = (os_log_t *)sub_32A48(13);
  uint64_t v10 = *v9;
  if (!*v9) {
    return 0;
  }
  uint64_t result = os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v16 = *(void *)a2;
    int v17 = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
    if (v19 >= 0) {
      __int16 v11 = __p;
    }
    else {
      __int16 v11 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    uint64_t v21 = "InputVolumeControl_HAL_Common.cpp";
    __int16 v22 = 1024;
    int v23 = 300;
    __int16 v24 = 2080;
    uint32_t v25 = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty() returned true, but I do not know about property %s.\"", buf, 0x1Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

BOOL sub_28D6E8(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    float v13 = (os_log_t *)sub_32A48(13);
    double v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)a2;
      int v18 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      double v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      __int16 v22 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 244;
      __int16 v25 = 2080;
      char v26 = v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported property: %s.\"", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v3 = *a2;
  BOOL result = 1;
  if (*a2 <= 1983013985)
  {
    if (v3 > 1836414052)
    {
      if (v3 == 1836414053 || v3 == 1836478308) {
        return result;
      }
      goto LABEL_25;
    }
    BOOL v6 = v3 == 1064725619;
    int v7 = 1684157046;
LABEL_18:
    if (v6 || v3 == v7) {
      return 0;
    }
    goto LABEL_25;
  }
  if (v3 <= 1986290210)
  {
    BOOL v6 = v3 == 1983013986;
    int v7 = 1986229104;
    goto LABEL_18;
  }
  if (v3 == 1987013741 || v3 == 1987013732) {
    return result;
  }
  if (v3 == 1986290211) {
    return 0;
  }
LABEL_25:
  uint64_t v10 = (os_log_t *)sub_32A48(13);
  __int16 v11 = *v10;
  if (!*v10) {
    return 0;
  }
  BOOL result = os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v17 = *(void *)a2;
    int v18 = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
    if (v20 >= 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v22 = "InputVolumeControl_HAL_Common.cpp";
    __int16 v23 = 1024;
    int v24 = 266;
    __int16 v25 = 2080;
    char v26 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty() returned true, but I do not know about property %s.\"", buf, 0x1Cu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

uint64_t sub_28D9EC(uint64_t a1, int *a2)
{
  return sub_15FFA8(a1 + 96, a2);
}

void sub_28D9F4(uint64_t a1)
{
  sub_289AC0(a1);

  operator delete();
}

uint64_t sub_28DA30(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  int v12 = (void *)sub_35BAC4(a1);
  *int v12 = off_62AA20;
  v12[10] = off_62AAE8;
  if (!a6)
  {
    char v38 = (os_log_t *)sub_32A48(13);
    int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(float *)AudioTimeStamp buf = 4.8151e-34;
      __int16 v46 = "InputVolumeControl_HAL_Common.cpp";
      __int16 v47 = 1024;
      int v48 = 34;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"propertyFlags has no flags.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "propertyFlags has no flags.");
  }
  float v13 = &v41;
  *(void *)&long long v41 = &v41;
  *((void *)&v41 + 1) = &v41;
  uint64_t v42 = 0;
  if ((a6 & 3) != 0)
  {
    double v14 = operator new(0x20uLL);
    v14[2] = 0x676C6F6276637370;
    *((_DWORD *)v14 + 6) = 0;
    *double v14 = &v41;
    v14[1] = &v41;
    *(void *)&long long v41 = v14;
    *((void *)&v41 + 1) = v14;
    uint64_t v42 = 1;
    double v15 = operator new(0x20uLL);
    v15[2] = 0x676C6F623F766C73;
    *((_DWORD *)v15 + 6) = 0;
    *double v15 = v14;
    v15[1] = &v41;
    v14[1] = v15;
    *(void *)&long long v41 = v15;
    uint64_t v42 = 2;
    uint64_t v16 = operator new(0x20uLL);
    v16[2] = 0x676C6F6276326462;
    *((_DWORD *)v16 + 6) = 0;
    void *v16 = v15;
    v16[1] = &v41;
    v15[1] = v16;
    *(void *)&long long v41 = v16;
    uint64_t v42 = 3;
    float v13 = (long long *)operator new(0x20uLL);
    *((void *)v13 + 2) = 0x676C6F6264623276;
    *((_DWORD *)v13 + 6) = 0;
    *(void *)float v13 = v16;
    *((void *)v13 + 1) = &v41;
    v16[1] = v13;
    uint64_t v17 = 4;
    *(void *)&long long v41 = v13;
    uint64_t v42 = 4;
    if ((a6 & 2) != 0)
    {
      int v18 = operator new(0x20uLL);
      uint64_t v18[2] = 0x676C6F62766F6C6DLL;
      *((_DWORD *)v18 + 6) = 0;
      void *v18 = v13;
      v18[1] = &v41;
      *((void *)v13 + 1) = v18;
      uint64_t v17 = 5;
      *(void *)&long long v41 = v18;
      uint64_t v42 = 5;
      float v13 = (long long *)v18;
    }
    if (a6)
    {
      char v19 = operator new(0x20uLL);
      v19[2] = 0x2A2A2A2A766F6C64;
      *((_DWORD *)v19 + 6) = 0;
      *char v19 = v13;
      v19[1] = &v41;
      *((void *)v13 + 1) = v19;
      ++v17;
      *(void *)&long long v41 = v19;
      uint64_t v42 = v17;
      float v13 = (long long *)v19;
    }
    if ((a6 & 8) == 0)
    {
LABEL_8:
      if ((a6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v17 = 0;
    if ((a6 & 8) == 0) {
      goto LABEL_8;
    }
  }
  char v20 = operator new(0x20uLL);
  v20[2] = 0x676C6F626D757465;
  *((_DWORD *)v20 + 6) = 0;
  void *v20 = v13;
  v20[1] = &v41;
  *((void *)v13 + 1) = v20;
  ++v17;
  *(void *)&long long v41 = v20;
  uint64_t v42 = v17;
  float v13 = (long long *)v20;
  if ((a6 & 0x10) == 0)
  {
LABEL_9:
    if ((a6 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v21 = operator new(0x20uLL);
  v21[2] = 0x676C6F6276646223;
  *((_DWORD *)v21 + 6) = 0;
  void *v21 = v13;
  v21[1] = &v41;
  *((void *)v13 + 1) = v21;
  ++v17;
  *(void *)&long long v41 = v21;
  uint64_t v42 = v17;
  float v13 = (long long *)v21;
  if ((a6 & 0x20) != 0)
  {
LABEL_14:
    __int16 v22 = operator new(0x20uLL);
    void v22[2] = 0x676C6F626D766F64;
    *((_DWORD *)v22 + 6) = 0;
    *__int16 v22 = v13;
    v22[1] = &v41;
    *((void *)v13 + 1) = v22;
    *(void *)&long long v41 = v22;
    uint64_t v42 = v17 + 1;
  }
LABEL_15:
  sub_15FF04((void *)(a1 + 96), (uint64_t)&v41);
  sub_45F50(&v41);
  *(void *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 132) = a4;
  sub_35BFC4(a2, a3, a4);
  *(double *)(a1 + 136) = v23;
  *(double *)(a1 + 144) = v24;
  float v25 = sub_16FEBC(a1 + 152, a5, v23, v24);
  uint64_t v26 = *(void *)(a1 + 120);
  unsigned int v27 = *(_DWORD *)(a1 + 128);
  unsigned int v28 = *(_DWORD *)(a1 + 132);
  LODWORD(v41) = 1987013732;
  *(void *)((char *)&v41 + 4) = __PAIR64__(v28, v27);
  int v29 = (*(uint64_t (**)(uint64_t, long long *, float))(*(void *)v26 + 16))(v26, &v41, v25);
  float v30 = 0.0;
  if (v29)
  {
    int v44 = 4;
    *(float *)AudioTimeStamp buf = 0.0;
    LODWORD(v41) = 1987013732;
    *(void *)((char *)&v41 + 4) = __PAIR64__(v28, v27);
    (*(void (**)(uint64_t, long long *, void, void, int *, uint8_t *, double))(*(void *)v26 + 40))(v26, &v41, 0, 0, &v44, buf, 0.0);
    double v31 = *(double *)(a1 + 144);
    float v32 = *(double *)(a1 + 136);
    *(float *)&long long v41 = v32;
    float v33 = v31;
    float v43 = v33;
    float v30 = *sub_1F84A8((float *)&v41, (float *)buf, &v43);
    float v43 = v30;
    if (v30 != *(float *)buf)
    {
      LODWORD(v41) = 1987013732;
      *(void *)((char *)&v41 + 4) = __PAIR64__(v28, v27);
      (*(void (**)(uint64_t, long long *, void, void, uint64_t, float *))(*(void *)v26 + 48))(v26, &v41, 0, 0, 4, &v43);
      float v30 = v43;
    }
  }
  *(float *)(a1 + 200) = v30;
  *(_DWORD *)(a1 + 204) = 0;
  *(_WORD *)(a1 + 208) = 0;
  uint64_t v34 = *(void *)(a1 + 120);
  LODWORD(v41) = 1987013732;
  *(void *)((char *)&v41 + 4) = *(void *)(a1 + 128);
  *(unsigned char *)(a1 + 210) = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v34 + 16))(v34, &v41);
  sub_35BFC4(*(void *)(a1 + 120), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132));
  *(void *)(a1 + 216) = v35;
  *(void *)(a1 + 224) = v36;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  sub_2014A4((uint64_t *)(a1 + 280));
  return a1;
}

void sub_28DF8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_28E018(uint64_t a1, char *name)
{
  *(void *)a1 = name;
  *(_DWORD *)(a1 + 8) = 0;
  uint32_t v3 = notify_register_check(name, (int *)(a1 + 8));
  *(unsigned char *)(a1 + 12) = v3 == 0;
  if (v3)
  {
    float v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)a1;
      int v8 = 136315650;
      uint64_t v9 = "SystemNotifier.cpp";
      __int16 v10 = 1024;
      int v11 = 45;
      __int16 v12 = 2080;
      uint64_t v13 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not get a token for the notification status.  There will be no notifications for %s", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    sub_D2B4(a1, 0);
  }
  return a1;
}

void *sub_28E124@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Require PME Enabled");
}

void sub_28E134()
{
}

BOOL sub_28E14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)(a3 + 248);
  uint64_t v9 = v5;
  if (*(unsigned char *)(a3 + 256)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    CFRetain(v5);
  }
  sub_170B38(&cf, v5);
  sub_72924((uint64_t)&v9);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a3 + 480))(a3) & 1) != 0
    && ((_os_feature_enabled_impl() & 1) != 0 || sub_2506C8(a3)))
  {
    BOOL v7 = (sub_3DEA5C() & 1) != 0 || sub_3DE70C(&cf, *(_DWORD *)(a1 + 8));
  }
  else
  {
    BOOL v7 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void sub_28E24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_28E270(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_28E290(uint64_t a1, void *a2)
{
  *a2 = off_62AD60;
}

void *sub_28E2B0()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_62AD60;
  return result;
}

void sub_28E2E8()
{
}

BOOL sub_28E300(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_28E320(uint64_t a1, void *a2)
{
  *a2 = off_62AD18;
}

void *sub_28E340()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_62AD18;
  return result;
}

void sub_28E378()
{
}

uint64_t sub_28E390(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_28E404(uint64_t a1, void *a2)
{
  *a2 = off_62ACD0;
}

void *sub_28E424()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_62ACD0;
  return result;
}

void sub_28E45C()
{
}

uint64_t sub_28E474(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_28E4AC(uint64_t a1, void *a2)
{
  *a2 = off_62AC88;
}

void *sub_28E4CC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_62AC88;
  return result;
}

void sub_28E504()
{
}

uint64_t sub_28E51C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_28E554(uint64_t a1, void *a2)
{
  *a2 = off_62AC40;
}

void *sub_28E574()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_62AC40;
  return result;
}

void sub_28E5AC()
{
}

BOOL sub_28E5C4(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_28E5EC(uint64_t a1, void *a2)
{
  *a2 = off_62ABF8;
}

void *sub_28E60C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_62ABF8;
  return result;
}

void sub_28E644()
{
}

uint64_t sub_28E65C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_28E694(uint64_t a1, void *a2)
{
  *a2 = off_62ABB0;
}

void *sub_28E6B4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_62ABB0;
  return result;
}

void sub_28E6EC()
{
}

void sub_28E704()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F648, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F648))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F658, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F658))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F668, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F668))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F678, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F678))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F688))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F698, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F698))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F6A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F6A8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F6B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F6B8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F6C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F6C8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F6D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F6D8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F6E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F6E8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F6F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F6F8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F748))
  {
    sub_28F54C();
    __cxa_guard_release(&qword_64F748);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F798, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F798))
  {
    sub_28F5A4();
    __cxa_guard_release(&qword_64F798);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F7E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F7E8))
  {
    sub_28F700();
    __cxa_guard_release(&qword_64F7E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F838, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F838))
  {
    sub_28F854();
    __cxa_guard_release(&qword_64F838);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F888))
  {
    sub_28FB90();
    __cxa_guard_release(&qword_64F888);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F8D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F8D8))
  {
    sub_28FBF0();
    __cxa_guard_release(&qword_64F8D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F928))
  {
    sub_28FC50();
    __cxa_guard_release(&qword_64F928);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F978, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F978))
  {
    sub_28FCD8();
    __cxa_guard_release(&qword_64F978);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F9C8, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_64F9C8))
    {
      sub_28FD60();
      __cxa_guard_release(&qword_64F9C8);
    }
  }
}

void sub_28F0F8(_Unwind_Exception *a1)
{
}

void *sub_28F430(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x666666666666667) {
      sub_60548();
    }
    uint64_t v5 = 5 * a3;
    BOOL v6 = (char *)operator new(40 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * v5];
    uint64_t v8 = a2 + 8 * v5;
    do
    {
      uint64_t v9 = a2 + v7;
      __int16 v10 = &v6[v7];
      uint64_t v11 = *(void *)(a2 + v7);
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + v7 + 8);
      *(void *)__int16 v10 = v11;
      sub_3847B8((uint64_t)&v6[v7 + 16], (int *)(a2 + v7 + 16));
      *((_WORD *)v10 + 16) = *(_WORD *)(a2 + v7 + 32);
      v7 += 40;
    }
    while (v9 + 40 != v8);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_28F510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_28F54C()
{
  uint64_t v0 = sub_37D6BC((uint64_t)&unk_64F700, (uint64_t)&qword_668D60, qword_64F6B0);
  return sub_37E990(v0, 2);
}

void sub_28F58C(_Unwind_Exception *a1)
{
}

uint64_t sub_28F5A4()
{
  qword_64F758 = 0;
  qword_64F750 = (uint64_t)&qword_64F758;
  qword_64F770 = 0;
  qword_64F760 = 0;
  unk_64F768 = &qword_64F770;
  qword_64F790 = 0;
  qword_64F788 = 0;
  qword_64F778 = 0;
  unk_64F780 = &qword_64F788;
  sub_37D10C((uint64_t **)&qword_64F750, (uint64_t)&qword_6680B8, qword_64F6C0);
  uint64_t v1 = 0x7672636700000000;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64F750, (uint64_t)&v1, qword_64F6C0);
  uint64_t v1 = 0x76726F6D00000000;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64F750, (uint64_t)&v1, qword_64F6C0);
  uint64_t v1 = 0x766D736700000000;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64F750, (uint64_t)&v1, qword_64F680);
  return sub_37EBCC((uint64_t)&qword_64F750, (int *)&qword_6680B8, 1);
}

void sub_28F6D0(_Unwind_Exception *a1)
{
}

uint64_t sub_28F700()
{
  qword_64F7A8 = 0;
  qword_64F7A0 = (uint64_t)&qword_64F7A8;
  qword_64F7C0 = 0;
  qword_64F7B0 = 0;
  unk_64F7B8 = &qword_64F7C0;
  qword_64F7E0 = 0;
  qword_64F7D8 = 0;
  qword_64F7C8 = 0;
  unk_64F7D0 = &qword_64F7D8;
  sub_37D10C((uint64_t **)&qword_64F7A0, (uint64_t)&qword_668D60, qword_64F680);
  uint64_t v1 = 0x696D646600000001;
  *(void *)&long long v2 = 1;
  DWORD2(v2) = 0;
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64F7A0, (uint64_t)&v1, qword_64F690);
  uint64_t v1 = 0x6D6F767000000001;
  *(void *)&long long v2 = 1;
  DWORD2(v2) = 0;
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37E084((uint64_t **)&qword_64F7A0, &v1, qword_64F6A0);
  uint64_t v1 = 0x73706B6E00000001;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64F7A0, (uint64_t)&v1, qword_64F6F0);
  return sub_37E990((uint64_t)&qword_64F7A0, 2);
}

void sub_28F82C(_Unwind_Exception *a1)
{
}

uint64_t sub_28F854()
{
  qword_64F7F8 = 0;
  qword_64F7F0 = (uint64_t)&qword_64F7F8;
  qword_64F810 = 0;
  qword_64F800 = 0;
  unk_64F808 = &qword_64F810;
  qword_64F830 = 0;
  qword_64F828 = 0;
  qword_64F818 = 0;
  unk_64F820 = &qword_64F828;
  sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&qword_668D60, qword_64F6C0);
  uint64_t v5 = 0x696D646600000001;
  *(void *)&long long v6 = 1;
  DWORD2(v6) = 0;
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6C0);
  uint64_t v5 = 0x6D6F767000000001;
  *(void *)&long long v6 = 1;
  DWORD2(v6) = 0;
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37E084((uint64_t **)&qword_64F7F0, &v5, qword_64F6C0);
  uint64_t v5 = 0x7672636700000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6C0);
  uint64_t v5 = 0x76726F6D00000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6C0);
  uint64_t v5 = 0x6D736D7400000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6C0);
  uint64_t v5 = 0x7261772000000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6C0);
  for (uint64_t i = 0; i != 20; i += 4)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv_1[i];
    LODWORD(v5) = 1;
    HIDWORD(v5) = v1;
    long long v6 = *(_OWORD *)sub_3AEE60();
    int v7 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6D0);
  }
  for (uint64_t j = 0; j != 12; j += 4)
  {
    int v3 = *(_DWORD *)&aOvpvivpvcgpvcv_1[j + 20];
    LODWORD(v5) = 1;
    HIDWORD(v5) = v3;
    long long v6 = *(_OWORD *)sub_3AEE60();
    int v7 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6D0);
  }
  uint64_t v5 = 0x766D736700000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64F7F0, (uint64_t)&v5, qword_64F6C0);
  return sub_37EBCC((uint64_t)&qword_64F7F0, (int *)&qword_668D60, 1);
}

void sub_28FB38(_Unwind_Exception *a1)
{
}

uint64_t sub_28FB90()
{
  uint64_t v0 = sub_37D6BC((uint64_t)&unk_64F840, (uint64_t)&qword_6680B8, qword_64F6D0);
  return sub_37EBCC(v0, (int *)&qword_6680B8, 1);
}

void sub_28FBD8(_Unwind_Exception *a1)
{
}

uint64_t sub_28FBF0()
{
  uint64_t v0 = sub_37D6BC((uint64_t)&unk_64F890, (uint64_t)&qword_668D60, qword_64F6D0);
  return sub_37EBCC(v0, (int *)&qword_668D60, 1);
}

void sub_28FC38(_Unwind_Exception *a1)
{
}

uint64_t sub_28FC50()
{
  qword_64F8E8 = 0;
  qword_64F8E0 = (uint64_t)&qword_64F8E8;
  qword_64F900 = 0;
  qword_64F8F0 = 0;
  unk_64F8F8 = &qword_64F900;
  qword_64F920 = 0;
  qword_64F918 = 0;
  qword_64F908 = 0;
  unk_64F910 = &qword_64F918;
  sub_37D10C((uint64_t **)&qword_64F8E0, (uint64_t)&qword_668D60, qword_64F6E0);
  return sub_37E990((uint64_t)&qword_64F8E0, 2);
}

void sub_28FCC0(_Unwind_Exception *a1)
{
}

uint64_t sub_28FCD8()
{
  qword_64F938 = 0;
  qword_64F930 = (uint64_t)&qword_64F938;
  qword_64F950 = 0;
  qword_64F940 = 0;
  unk_64F948 = &qword_64F950;
  qword_64F970 = 0;
  qword_64F968 = 0;
  qword_64F958 = 0;
  unk_64F960 = &qword_64F968;
  sub_37D10C((uint64_t **)&qword_64F930, (uint64_t)&qword_668D60, qword_64F6C0);
  return sub_37E990((uint64_t)&qword_64F930, 1);
}

void sub_28FD48(_Unwind_Exception *a1)
{
}

uint64_t sub_28FD60()
{
  qword_64F988 = 0;
  qword_64F980 = (uint64_t)&qword_64F988;
  qword_64F9A0 = 0;
  qword_64F990 = 0;
  unk_64F998 = &qword_64F9A0;
  qword_64F9C0 = 0;
  qword_64F9B8 = 0;
  qword_64F9A8 = 0;
  unk_64F9B0 = &qword_64F9B8;
  sub_37D10C((uint64_t **)&qword_64F980, (uint64_t)&qword_668D60, qword_64F680);
  return sub_37E990((uint64_t)&qword_64F980, 2);
}

void sub_28FDD0(_Unwind_Exception *a1)
{
}

void sub_28FDE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F9D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F9D8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F9E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F9E8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64F9F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64F9F8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA08))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA18))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA28))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA38))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA48))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA58))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA68))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA78))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA88))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FA98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FA98))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FAE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FAE8))
  {
    sub_290BE0();
    __cxa_guard_release(&qword_64FAE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FB38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FB38))
  {
    sub_290C38();
    __cxa_guard_release(&qword_64FB38);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FB88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FB88))
  {
    sub_290D94();
    __cxa_guard_release(&qword_64FB88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FBD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FBD8))
  {
    sub_290EE8();
    __cxa_guard_release(&qword_64FBD8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FC28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FC28))
  {
    sub_291224();
    __cxa_guard_release(&qword_64FC28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FC78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FC78))
  {
    sub_291284();
    __cxa_guard_release(&qword_64FC78);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FCC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FCC8))
  {
    sub_2912E4();
    __cxa_guard_release(&qword_64FCC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FD18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64FD18))
  {
    sub_29136C();
    __cxa_guard_release(&qword_64FD18);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64FD68, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_64FD68))
    {
      sub_2913F4();
      __cxa_guard_release(&qword_64FD68);
    }
  }
}

void sub_290878(_Unwind_Exception *a1)
{
}

uint64_t sub_290BE0()
{
  uint64_t v0 = sub_37D6BC((uint64_t)&unk_64FAA0, (uint64_t)&qword_668D60, qword_64FA40);
  return sub_37E990(v0, 2);
}

void sub_290C20(_Unwind_Exception *a1)
{
}

uint64_t sub_290C38()
{
  qword_64FAF8 = 0;
  qword_64FAF0 = (uint64_t)&qword_64FAF8;
  qword_64FB10 = 0;
  qword_64FB00 = 0;
  unk_64FB08 = &qword_64FB10;
  qword_64FB30 = 0;
  qword_64FB28 = 0;
  qword_64FB18 = 0;
  unk_64FB20 = &qword_64FB28;
  sub_37D10C((uint64_t **)&qword_64FAF0, (uint64_t)&qword_6680B8, qword_64FA80);
  uint64_t v1 = 0x7672636700000000;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64FAF0, (uint64_t)&v1, qword_64FA80);
  uint64_t v1 = 0x76726F6D00000000;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64FAF0, (uint64_t)&v1, qword_64FA80);
  uint64_t v1 = 0x766D736700000000;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64FAF0, (uint64_t)&v1, qword_64FA10);
  return sub_37EBCC((uint64_t)&qword_64FAF0, (int *)&qword_6680B8, 1);
}

void sub_290D64(_Unwind_Exception *a1)
{
}

uint64_t sub_290D94()
{
  qword_64FB48 = 0;
  qword_64FB40 = (uint64_t)&qword_64FB48;
  qword_64FB60 = 0;
  qword_64FB50 = 0;
  unk_64FB58 = &qword_64FB60;
  qword_64FB80 = 0;
  qword_64FB78 = 0;
  qword_64FB68 = 0;
  unk_64FB70 = &qword_64FB78;
  sub_37D10C((uint64_t **)&qword_64FB40, (uint64_t)&qword_668D60, qword_64FA10);
  uint64_t v1 = 0x696D646600000001;
  *(void *)&long long v2 = 1;
  DWORD2(v2) = 0;
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64FB40, (uint64_t)&v1, qword_64FA20);
  uint64_t v1 = 0x6D6F767000000001;
  *(void *)&long long v2 = 1;
  DWORD2(v2) = 0;
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37E084((uint64_t **)&qword_64FB40, &v1, qword_64FA30);
  uint64_t v1 = 0x73706B6E00000001;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_37D10C((uint64_t **)&qword_64FB40, (uint64_t)&v1, qword_64FA70);
  return sub_37E990((uint64_t)&qword_64FB40, 2);
}

void sub_290EC0(_Unwind_Exception *a1)
{
}

uint64_t sub_290EE8()
{
  qword_64FB98 = 0;
  qword_64FB90 = (uint64_t)&qword_64FB98;
  qword_64FBB0 = 0;
  qword_64FBA0 = 0;
  unk_64FBA8 = &qword_64FBB0;
  qword_64FBD0 = 0;
  qword_64FBC8 = 0;
  qword_64FBB8 = 0;
  unk_64FBC0 = &qword_64FBC8;
  sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&qword_668D60, qword_64FA80);
  uint64_t v5 = 0x696D646600000001;
  *(void *)&long long v6 = 1;
  DWORD2(v6) = 0;
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA80);
  uint64_t v5 = 0x6D6F767000000001;
  *(void *)&long long v6 = 1;
  DWORD2(v6) = 0;
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37E084((uint64_t **)&qword_64FB90, &v5, qword_64FA80);
  uint64_t v5 = 0x7672636700000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA80);
  uint64_t v5 = 0x76726F6D00000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA80);
  uint64_t v5 = 0x6D736D7400000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA80);
  uint64_t v5 = 0x7261772000000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA80);
  for (uint64_t i = 0; i != 20; i += 4)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv_1[i];
    LODWORD(v5) = 1;
    HIDWORD(v5) = v1;
    long long v6 = *(_OWORD *)sub_3AEE60();
    int v7 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA50);
  }
  for (uint64_t j = 0; j != 12; j += 4)
  {
    int v3 = *(_DWORD *)&aOvpvivpvcgpvcv_1[j + 20];
    LODWORD(v5) = 1;
    HIDWORD(v5) = v3;
    long long v6 = *(_OWORD *)sub_3AEE60();
    int v7 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA50);
  }
  uint64_t v5 = 0x766D736700000001;
  long long v6 = *(_OWORD *)sub_3AEE60();
  int v7 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_37D10C((uint64_t **)&qword_64FB90, (uint64_t)&v5, qword_64FA80);
  return sub_37EBCC((uint64_t)&qword_64FB90, (int *)&qword_668D60, 1);
}

void sub_2911CC(_Unwind_Exception *a1)
{
}

uint64_t sub_291224()
{
  uint64_t v0 = sub_37D6BC((uint64_t)&unk_64FBE0, (uint64_t)&qword_6680B8, qword_64FA50);
  return sub_37EBCC(v0, (int *)&qword_6680B8, 1);
}

void sub_29126C(_Unwind_Exception *a1)
{
}

uint64_t sub_291284()
{
  uint64_t v0 = sub_37D6BC((uint64_t)&unk_64FC30, (uint64_t)&qword_668D60, qword_64FA50);
  return sub_37EBCC(v0, (int *)&qword_668D60, 1);
}

void sub_2912CC(_Unwind_Exception *a1)
{
}

uint64_t sub_2912E4()
{
  qword_64FC88 = 0;
  qword_64FC80 = (uint64_t)&qword_64FC88;
  qword_64FCA0 = 0;
  qword_64FC90 = 0;
  unk_64FC98 = &qword_64FCA0;
  qword_64FCC0 = 0;
  qword_64FCB8 = 0;
  qword_64FCA8 = 0;
  unk_64FCB0 = &qword_64FCB8;
  sub_37D10C((uint64_t **)&qword_64FC80, (uint64_t)&qword_668D60, qword_64FA60);
  return sub_37E990((uint64_t)&qword_64FC80, 2);
}

void sub_291354(_Unwind_Exception *a1)
{
}

uint64_t sub_29136C()
{
  qword_64FCD8 = 0;
  qword_64FCD0 = (uint64_t)&qword_64FCD8;
  qword_64FCF0 = 0;
  qword_64FCE0 = 0;
  unk_64FCE8 = &qword_64FCF0;
  qword_64FD10 = 0;
  qword_64FD08 = 0;
  qword_64FCF8 = 0;
  unk_64FD00 = &qword_64FD08;
  sub_37D10C((uint64_t **)&qword_64FCD0, (uint64_t)&qword_668D60, qword_64FA80);
  return sub_37E990((uint64_t)&qword_64FCD0, 1);
}

void sub_2913DC(_Unwind_Exception *a1)
{
}

uint64_t sub_2913F4()
{
  qword_64FD28 = 0;
  qword_64FD20 = (uint64_t)&qword_64FD28;
  qword_64FD40 = 0;
  qword_64FD30 = 0;
  unk_64FD38 = &qword_64FD40;
  qword_64FD60 = 0;
  qword_64FD58 = 0;
  qword_64FD48 = 0;
  unk_64FD50 = &qword_64FD58;
  sub_37D10C((uint64_t **)&qword_64FD20, (uint64_t)&qword_668D60, qword_64FA90);
  return sub_37E990((uint64_t)&qword_64FD20, 2);
}

void sub_291464(_Unwind_Exception *a1)
{
}

void *sub_29147C(uint64_t *a1)
{
  strcpy((char *)&v13, " papwpap");
  double v14 = &qword_668DD0;
  LOBYTE(v15) = 0;
  LOBYTE(v16[0]) = 0;
  sub_29163C(v3, &v13, 1);
  int v4 = 3;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  int v7 = 3;
  v9[1] = 0;
  uint64_t v10 = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = v12;
  sub_FDA78(&v13, (uint64_t)v3);
  int v15 = v4;
  sub_46A4C(v16, (uint64_t)&v5);
  int v17 = v7;
  sub_FDB1C(v18, &v8);
  uint64_t v18[3] = v10;
  sub_FDBC8(v19, &v11);
  sub_2916E0(a1, (uint64_t)&v13, 1);
  sub_FD694((void *)v19[1]);
  sub_463E0((void *)v18[1]);
  sub_463E0((void *)v16[1]);
  sub_45F50(&v13);
  sub_FD694(v12[0]);
  sub_463E0(v9[0]);
  sub_463E0(v6[0]);
  return sub_45F50(v3);
}

void sub_2915E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_FD7AC((uint64_t)va1);
  sub_FD7AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_291634()
{
}

void *sub_29163C(void *a1, long long *a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    uint64_t v6 = 1;
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = operator new(0x38uLL);
      long long v9 = *a2;
      long long v10 = a2[1];
      v8[6] = *((void *)a2 + 4);
      *((_OWORD *)v8 + 1) = v9;
      *((_OWORD *)v8 + 2) = v10;
      *uint64_t v8 = v7;
      v8[1] = a1;
      v7[1] = v8;
      a1[2] = v6;
      a2 = (long long *)((char *)a2 + 40);
      ++v6;
      uint64_t v7 = v8;
      *a1 = v8;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_2916CC(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2916E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 120 * a3;
    do
    {
      uint64_t v6 = sub_FC7A0(a2);
      uint64_t v7 = *a1;
      *uint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 120;
      v5 -= 120;
    }
    while (v5);
  }
  return a1;
}

void sub_291754(_Unwind_Exception *a1)
{
  sub_FCCE8(v1);
  _Unwind_Resume(a1);
}

void *sub_291768(uint64_t *a1)
{
  strcpy((char *)&v13, " papapap");
  uint64_t v14 = &qword_668DD0;
  LOBYTE(v15) = 0;
  LOBYTE(v16[0]) = 0;
  sub_29163C(v3, &v13, 1);
  int v4 = 3;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  int v7 = 3;
  v9[1] = 0;
  uint64_t v10 = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = v12;
  sub_FDA78(&v13, (uint64_t)v3);
  int v15 = v4;
  sub_46A4C(v16, (uint64_t)&v5);
  int v17 = v7;
  sub_FDB1C(v18, &v8);
  uint64_t v18[3] = v10;
  sub_FDBC8(v19, &v11);
  sub_2916E0(a1, (uint64_t)&v13, 1);
  sub_FD694((void *)v19[1]);
  sub_463E0((void *)v18[1]);
  sub_463E0((void *)v16[1]);
  sub_45F50(&v13);
  sub_FD694(v12[0]);
  sub_463E0(v9[0]);
  sub_463E0(v6[0]);
  return sub_45F50(v3);
}

void sub_2918CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_FD7AC((uint64_t)va1);
  sub_FD7AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_291920()
{
}

void *sub_291928()
{
  char v138 = (char *)&v138;
  int v139 = (void **)&v138;
  uint64_t v140 = 0;
  int v141 = 3;
  v143[0] = 0;
  v143[1] = 0;
  char v142 = v143;
  int v144 = 3;
  char v145 = v146;
  memset(v146, 0, 24);
  v147[0] = 0;
  v147[1] = 0;
  v146[3] = v147;
  v136[0] = (uint64_t)v136;
  v136[1] = (uint64_t)v136;
  uint64_t v137 = 0;
  uint64_t v0 = (char *)operator new(0x38uLL);
  strcpy(v0 + 16, " papspap");
  *((void *)v0 + 4) = &qword_668DD0;
  unsigned char v0[40] = 0;
  v0[48] = 0;
  *(void *)uint64_t v0 = &v138;
  *((void *)v0 + 1) = &v138;
  char v138 = v0;
  int v139 = (void **)v0;
  uint64_t v140 = 1;
  int v1 = sub_FC7A0((uint64_t)&v138);
  uint64_t v2 = v136[0];
  void *v1 = v136[0];
  v1[1] = v136;
  *(void *)(v2 + 8) = v1;
  v136[0] = (uint64_t)v1;
  ++v137;
  sub_FC86C((uint64_t)&v138);
  uint64_t v3 = (char *)operator new(0x38uLL);
  strcpy(v3 + 16, " papapap");
  *((void *)v3 + 4) = &qword_668DD0;
  v3[40] = 0;
  v3[48] = 0;
  int v4 = v138;
  *(void *)uint64_t v3 = v138;
  *((void *)v3 + 1) = &v138;
  *((void *)v4 + 1) = v3;
  char v138 = v3;
  ++v140;
  uint64_t v5 = sub_FC7A0((uint64_t)&v138);
  uint64_t v6 = v136[0];
  void *v5 = v136[0];
  v5[1] = v136;
  *(void *)(v6 + 8) = v5;
  v136[0] = (uint64_t)v5;
  ++v137;
  sub_FC86C((uint64_t)&v138);
  uint64_t v7 = (char *)operator new(0x38uLL);
  strcpy(v7 + 16, " papmdhp");
  *((void *)v7 + 4) = &qword_668DD0;
  v7[40] = 0;
  v7[48] = 0;
  uint64_t v8 = v138;
  *(void *)uint64_t v7 = v138;
  *((void *)v7 + 1) = &v138;
  *((void *)v8 + 1) = v7;
  char v138 = v7;
  ++v140;
  uint64_t v9 = sub_FC7A0((uint64_t)&v138);
  uint64_t v10 = v136[0];
  void *v9 = v136[0];
  v9[1] = v136;
  *(void *)(v10 + 8) = v9;
  v136[0] = (uint64_t)v9;
  ++v137;
  sub_FC86C((uint64_t)&v138);
  uint64_t v11 = (char *)operator new(0x38uLL);
  strcpy(v11 + 16, " papBphp");
  *((void *)v11 + 4) = &qword_668DD0;
  v11[40] = 0;
  v11[48] = 0;
  uint64_t v12 = v138;
  *(void *)uint64_t v11 = v138;
  *((void *)v11 + 1) = &v138;
  *((void *)v12 + 1) = v11;
  char v138 = v11;
  ++v140;
  uint64_t v13 = sub_FC7A0((uint64_t)&v138);
  uint64_t v14 = v136[0];
  *uint64_t v13 = v136[0];
  v13[1] = v136;
  *(void *)(v14 + 8) = v13;
  v136[0] = (uint64_t)v13;
  ++v137;
  sub_FC86C((uint64_t)&v138);
  uint64_t v15 = (char *)operator new(0x38uLL);
  strcpy(v15 + 16, " papwphp");
  *((void *)v15 + 4) = &qword_668DD0;
  v15[40] = 0;
  v15[48] = 0;
  uint64_t v16 = v138;
  *(void *)uint64_t v15 = v138;
  *((void *)v15 + 1) = &v138;
  *((void *)v16 + 1) = v15;
  char v138 = v15;
  ++v140;
  uint64_t v17 = sub_FC7A0((uint64_t)&v138);
  uint64_t v18 = v136[0];
  void *v17 = v136[0];
  v17[1] = v136;
  *(void *)(v18 + 8) = v17;
  v136[0] = (uint64_t)v17;
  ++v137;
  sub_FC86C((uint64_t)&v138);
  char v19 = (char *)operator new(0x38uLL);
  strcpy(v19 + 16, " papkpsp");
  *((void *)v19 + 4) = &qword_668DD0;
  v19[40] = 0;
  v19[48] = 0;
  char v20 = v138;
  *(void *)char v19 = v138;
  *((void *)v19 + 1) = &v138;
  *((void *)v20 + 1) = v19;
  char v138 = v19;
  ++v140;
  uint64_t v21 = sub_FC7A0((uint64_t)&v138);
  uint64_t v22 = v136[0];
  void *v21 = v136[0];
  v21[1] = v136;
  *(void *)(v22 + 8) = v21;
  v136[0] = (uint64_t)v21;
  ++v137;
  sub_FC86C((uint64_t)&v138);
  double v23 = (char *)operator new(0x38uLL);
  strcpy(v23 + 16, " paplunp");
  *((void *)v23 + 4) = &qword_668DD0;
  v23[40] = 0;
  v23[48] = 0;
  double v24 = v138;
  *(void *)double v23 = v138;
  *((void *)v23 + 1) = &v138;
  *((void *)v24 + 1) = v23;
  char v138 = v23;
  ++v140;
  float v25 = sub_FC7A0((uint64_t)&v138);
  uint64_t v26 = v136[0];
  *float v25 = v136[0];
  v25[1] = v136;
  *(void *)(v26 + 8) = v25;
  v136[0] = (uint64_t)v25;
  ++v137;
  sub_FC86C((uint64_t)&v138);
  v134[0] = (uint64_t)v134;
  v134[1] = (uint64_t)v134;
  uint64_t v135 = 0;
  unsigned int v27 = (char *)operator new(0x38uLL);
  strcpy(v27 + 16, "iwmp pap");
  *((void *)v27 + 4) = &qword_668DD0;
  v27[40] = 0;
  unsigned char v27[48] = 0;
  unsigned int v28 = v138;
  *(void *)unsigned int v27 = v138;
  *((void *)v27 + 1) = &v138;
  *((void *)v28 + 1) = v27;
  char v138 = v27;
  ++v140;
  int v29 = sub_FC7A0((uint64_t)&v138);
  uint64_t v30 = v134[0];
  void *v29 = v134[0];
  v29[1] = v134;
  *(void *)(v30 + 8) = v29;
  v134[0] = (uint64_t)v29;
  ++v135;
  sub_FC86C((uint64_t)&v138);
  double v31 = (char *)operator new(0x38uLL);
  strcpy(v31 + 16, "ibmp pap");
  *((void *)v31 + 4) = &qword_668DD0;
  v31[40] = 0;
  v31[48] = 0;
  float v32 = v138;
  *(void *)double v31 = v138;
  *((void *)v31 + 1) = &v138;
  *((void *)v32 + 1) = v31;
  char v138 = v31;
  ++v140;
  float v33 = sub_FC7A0((uint64_t)&v138);
  uint64_t v34 = v134[0];
  *float v33 = v134[0];
  v33[1] = v134;
  *(void *)(v34 + 8) = v33;
  v134[0] = (uint64_t)v33;
  ++v135;
  sub_FC86C((uint64_t)&v138);
  uint64_t v35 = (char *)operator new(0x38uLL);
  qmemcpy(v124, "ilnp pap paplunp", sizeof(v124));
  strcpy(v35 + 16, "ilnp pap");
  *((void *)v35 + 4) = &qword_668DD0;
  v35[40] = 0;
  v35[48] = 0;
  uint64_t v36 = v138;
  *(void *)uint64_t v35 = v138;
  *((void *)v35 + 1) = &v138;
  *((void *)v36 + 1) = v35;
  char v138 = v35;
  ++v140;
  uint64_t v37 = sub_FC7A0((uint64_t)&v138);
  uint64_t v38 = v134[0];
  *uint64_t v37 = v134[0];
  v37[1] = v134;
  *(void *)(v38 + 8) = v37;
  v134[0] = (uint64_t)v37;
  ++v135;
  sub_FC86C((uint64_t)&v138);
  v132[0] = (uint64_t)v132;
  v132[1] = (uint64_t)v132;
  uint64_t v133 = 0;
  int v39 = (char *)operator new(0x38uLL);
  strcpy(v39 + 16, " papwphp");
  *((void *)v39 + 4) = &qword_668DD0;
  v39[40] = 0;
  v39[48] = 0;
  uint64_t v40 = v138;
  *(void *)int v39 = v138;
  *((void *)v39 + 1) = &v138;
  *((void *)v40 + 1) = v39;
  uint64_t v41 = v140;
  char v138 = v39;
  ++v140;
  uint64_t v42 = (char *)operator new(0x38uLL);
  strcpy(v42 + 16, "iwmp pap");
  *((void *)v42 + 4) = &qword_668DD0;
  v42[40] = 0;
  v42[48] = 0;
  *(void *)uint64_t v42 = v39;
  *((void *)v42 + 1) = &v138;
  *((void *)v39 + 1) = v42;
  char v138 = v42;
  uint64_t v140 = v41 + 2;
  float v43 = sub_FC7A0((uint64_t)&v138);
  uint64_t v44 = v132[0];
  void *v43 = v132[0];
  v43[1] = v132;
  *(void *)(v44 + 8) = v43;
  v132[0] = (uint64_t)v43;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  uint64_t v45 = (char *)operator new(0x38uLL);
  strcpy(v45 + 16, " papwphp");
  *((void *)v45 + 4) = &qword_668DD0;
  v45[40] = 0;
  v45[48] = 0;
  __int16 v46 = v138;
  *(void *)uint64_t v45 = v138;
  *((void *)v45 + 1) = &v138;
  *((void *)v46 + 1) = v45;
  uint64_t v47 = v140;
  char v138 = v45;
  ++v140;
  int v48 = (char *)operator new(0x38uLL);
  strcpy(v48 + 16, "ibmp pap");
  *((void *)v48 + 4) = &qword_668DD0;
  v48[40] = 0;
  v48[48] = 0;
  *(void *)int v48 = v45;
  *((void *)v48 + 1) = &v138;
  *((void *)v45 + 1) = v48;
  char v138 = v48;
  uint64_t v140 = v47 + 2;
  float v49 = sub_FC7A0((uint64_t)&v138);
  uint64_t v50 = v132[0];
  *float v49 = v132[0];
  v49[1] = v132;
  *(void *)(v50 + 8) = v49;
  v132[0] = (uint64_t)v49;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  float v51 = (char *)operator new(0x38uLL);
  strcpy(v51 + 16, " papcerp");
  *((void *)v51 + 4) = &qword_668DD0;
  v51[40] = 0;
  v51[48] = 0;
  uint64_t v52 = v138;
  *(void *)float v51 = v138;
  *((void *)v51 + 1) = &v138;
  *((void *)v52 + 1) = v51;
  uint64_t v53 = v140;
  char v138 = v51;
  ++v140;
  __int16 v54 = (char *)operator new(0x38uLL);
  strcpy(v54 + 16, "ibmp pap");
  *((void *)v54 + 4) = &qword_668DD0;
  v54[40] = 0;
  v54[48] = 0;
  *(void *)__int16 v54 = v51;
  *((void *)v54 + 1) = &v138;
  *((void *)v51 + 1) = v54;
  char v138 = v54;
  uint64_t v140 = v53 + 2;
  int v55 = sub_FC7A0((uint64_t)&v138);
  uint64_t v56 = v132[0];
  void *v55 = v132[0];
  v55[1] = v132;
  *(void *)(v56 + 8) = v55;
  v132[0] = (uint64_t)v55;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  int v57 = (char *)operator new(0x38uLL);
  strcpy(v57 + 16, " papkpsp");
  *((void *)v57 + 4) = &qword_668DD0;
  v57[40] = 0;
  v57[48] = 0;
  uint64_t v58 = v138;
  *(void *)int v57 = v138;
  *((void *)v57 + 1) = &v138;
  *((void *)v58 + 1) = v57;
  uint64_t v59 = v140;
  char v138 = v57;
  ++v140;
  char v60 = (char *)operator new(0x38uLL);
  strcpy(v60 + 16, "ibmp pap");
  *((void *)v60 + 4) = &qword_668DD0;
  v60[40] = 0;
  v60[48] = 0;
  *(void *)char v60 = v57;
  *((void *)v60 + 1) = &v138;
  *((void *)v57 + 1) = v60;
  char v138 = v60;
  uint64_t v140 = v59 + 2;
  uint64_t v61 = sub_FC7A0((uint64_t)&v138);
  uint64_t v62 = v132[0];
  void *v61 = v132[0];
  v61[1] = v132;
  *(void *)(v62 + 8) = v61;
  v132[0] = (uint64_t)v61;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  uint64_t v63 = (char *)operator new(0x38uLL);
  strcpy(v63 + 16, " papkpsp");
  *((void *)v63 + 4) = &qword_668DD0;
  v63[40] = 0;
  v63[48] = 0;
  char v64 = v138;
  *(void *)uint64_t v63 = v138;
  *((void *)v63 + 1) = &v138;
  *((void *)v64 + 1) = v63;
  uint64_t v65 = v140;
  char v138 = v63;
  ++v140;
  uint64_t v66 = (char *)operator new(0x38uLL);
  strcpy(v66 + 16, "iwmp pap");
  *((void *)v66 + 4) = &qword_668DD0;
  v66[40] = 0;
  v66[48] = 0;
  *(void *)uint64_t v66 = v63;
  *((void *)v66 + 1) = &v138;
  *((void *)v63 + 1) = v66;
  char v138 = v66;
  uint64_t v140 = v65 + 2;
  char v67 = sub_FC7A0((uint64_t)&v138);
  uint64_t v68 = v132[0];
  *char v67 = v132[0];
  v67[1] = v132;
  *(void *)(v68 + 8) = v67;
  v132[0] = (uint64_t)v67;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  uint64_t v69 = (char *)operator new(0x38uLL);
  strcpy(v69 + 16, " papBphp");
  *((void *)v69 + 4) = &qword_668DD0;
  v69[40] = 0;
  v69[48] = 0;
  uint64_t v70 = v138;
  *(void *)uint64_t v69 = v138;
  *((void *)v69 + 1) = &v138;
  *((void *)v70 + 1) = v69;
  uint64_t v71 = v140;
  char v138 = v69;
  ++v140;
  double v72 = (char *)operator new(0x38uLL);
  strcpy(v72 + 16, "ibmp pap");
  *((void *)v72 + 4) = &qword_668DD0;
  v72[40] = 0;
  v72[48] = 0;
  *(void *)double v72 = v69;
  *((void *)v72 + 1) = &v138;
  *((void *)v69 + 1) = v72;
  char v138 = v72;
  uint64_t v140 = v71 + 2;
  __int16 v73 = sub_FC7A0((uint64_t)&v138);
  uint64_t v74 = v132[0];
  *__int16 v73 = v132[0];
  v73[1] = v132;
  *(void *)(v74 + 8) = v73;
  v132[0] = (uint64_t)v73;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  uint64_t v75 = (char *)operator new(0x38uLL);
  strcpy(v75 + 16, " papBphp");
  *((void *)v75 + 4) = &qword_668DD0;
  v75[40] = 0;
  v75[48] = 0;
  uint64_t v76 = v138;
  *(void *)uint64_t v75 = v138;
  *((void *)v75 + 1) = &v138;
  *((void *)v76 + 1) = v75;
  uint64_t v77 = v140;
  char v138 = v75;
  ++v140;
  uint64_t v78 = (char *)operator new(0x38uLL);
  strcpy(v78 + 16, "iwmp pap");
  *((void *)v78 + 4) = &qword_668DD0;
  v78[40] = 0;
  v78[48] = 0;
  *(void *)uint64_t v78 = v75;
  *((void *)v78 + 1) = &v138;
  *((void *)v75 + 1) = v78;
  char v138 = v78;
  uint64_t v140 = v77 + 2;
  __int16 v79 = sub_FC7A0((uint64_t)&v138);
  uint64_t v80 = v132[0];
  *__int16 v79 = v132[0];
  v79[1] = v132;
  *(void *)(v80 + 8) = v79;
  v132[0] = (uint64_t)v79;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  float v81 = (char *)operator new(0x38uLL);
  strcpy(v81 + 16, " papspap");
  *((void *)v81 + 4) = &qword_668DD0;
  v81[40] = 0;
  v81[48] = 0;
  double v82 = v138;
  *(void *)float v81 = v138;
  *((void *)v81 + 1) = &v138;
  *((void *)v82 + 1) = v81;
  uint64_t v83 = v140;
  char v138 = v81;
  ++v140;
  int v84 = (char *)operator new(0x38uLL);
  strcpy(v84 + 16, "ibmp pap");
  *((void *)v84 + 4) = &qword_668DD0;
  v84[40] = 0;
  v84[48] = 0;
  *(void *)int v84 = v81;
  *((void *)v84 + 1) = &v138;
  *((void *)v81 + 1) = v84;
  char v138 = v84;
  uint64_t v140 = v83 + 2;
  __int16 v85 = sub_FC7A0((uint64_t)&v138);
  uint64_t v86 = v132[0];
  *__int16 v85 = v132[0];
  v85[1] = v132;
  *(void *)(v86 + 8) = v85;
  v132[0] = (uint64_t)v85;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  __int16 v87 = (char *)operator new(0x38uLL);
  strcpy(v87 + 16, " papspap");
  *((void *)v87 + 4) = &qword_668DD0;
  v87[40] = 0;
  v87[48] = 0;
  double v88 = v138;
  *(void *)__int16 v87 = v138;
  *((void *)v87 + 1) = &v138;
  *((void *)v88 + 1) = v87;
  uint64_t v89 = v140;
  char v138 = v87;
  ++v140;
  int v90 = (char *)operator new(0x38uLL);
  strcpy(v90 + 16, "iwmp pap");
  *((void *)v90 + 4) = &qword_668DD0;
  v90[40] = 0;
  v90[48] = 0;
  *(void *)int v90 = v87;
  *((void *)v90 + 1) = &v138;
  *((void *)v87 + 1) = v90;
  char v138 = v90;
  uint64_t v140 = v89 + 2;
  __int16 v91 = sub_FC7A0((uint64_t)&v138);
  uint64_t v92 = v132[0];
  *__int16 v91 = v132[0];
  v91[1] = v132;
  *(void *)(v92 + 8) = v91;
  v132[0] = (uint64_t)v91;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  __int16 v93 = (char *)operator new(0x38uLL);
  strcpy(v93 + 16, " papapap");
  *((void *)v93 + 4) = &qword_668DD0;
  v93[40] = 0;
  v93[48] = 0;
  int v94 = v138;
  *(void *)__int16 v93 = v138;
  *((void *)v93 + 1) = &v138;
  *((void *)v94 + 1) = v93;
  uint64_t v95 = v140;
  char v138 = v93;
  ++v140;
  OSStatus v96 = (char *)operator new(0x38uLL);
  strcpy(v96 + 16, "ibmp pap");
  *((void *)v96 + 4) = &qword_668DD0;
  v96[40] = 0;
  v96[48] = 0;
  *(void *)OSStatus v96 = v93;
  *((void *)v96 + 1) = &v138;
  *((void *)v93 + 1) = v96;
  char v138 = v96;
  uint64_t v140 = v95 + 2;
  int v97 = sub_FC7A0((uint64_t)&v138);
  uint64_t v98 = v132[0];
  *int v97 = v132[0];
  v97[1] = v132;
  *(void *)(v98 + 8) = v97;
  v132[0] = (uint64_t)v97;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  char v99 = (char *)operator new(0x38uLL);
  strcpy(v99 + 16, " papapap");
  *((void *)v99 + 4) = &qword_668DD0;
  v99[40] = 0;
  v99[48] = 0;
  unsigned int v100 = v138;
  *(void *)char v99 = v138;
  *((void *)v99 + 1) = &v138;
  *((void *)v100 + 1) = v99;
  uint64_t v101 = v140;
  char v138 = v99;
  ++v140;
  int v102 = (char *)operator new(0x38uLL);
  strcpy(v102 + 16, "iwmp pap");
  *((void *)v102 + 4) = &qword_668DD0;
  v102[40] = 0;
  v102[48] = 0;
  *(void *)int v102 = v99;
  *((void *)v102 + 1) = &v138;
  *((void *)v99 + 1) = v102;
  char v138 = v102;
  uint64_t v140 = v101 + 2;
  char v103 = sub_FC7A0((uint64_t)&v138);
  uint64_t v104 = v132[0];
  void *v103 = v132[0];
  v103[1] = v132;
  *(void *)(v104 + 8) = v103;
  v132[0] = (uint64_t)v103;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  char v105 = (char *)operator new(0x38uLL);
  strcpy(v105 + 16, " papmdhp");
  *((void *)v105 + 4) = &qword_668DD0;
  v105[40] = 0;
  v105[48] = 0;
  AudioObjectID v106 = v138;
  *(void *)char v105 = v138;
  *((void *)v105 + 1) = &v138;
  *((void *)v106 + 1) = v105;
  uint64_t v107 = v140;
  char v138 = v105;
  ++v140;
  int v108 = (char *)operator new(0x38uLL);
  strcpy(v108 + 16, "ibmp pap");
  *((void *)v108 + 4) = &qword_668DD0;
  v108[40] = 0;
  v108[48] = 0;
  *(void *)int v108 = v105;
  *((void *)v108 + 1) = &v138;
  *((void *)v105 + 1) = v108;
  char v138 = v108;
  uint64_t v140 = v107 + 2;
  uint64_t v109 = sub_FC7A0((uint64_t)&v138);
  uint64_t v110 = v132[0];
  *uint64_t v109 = v132[0];
  v109[1] = v132;
  *(void *)(v110 + 8) = v109;
  v132[0] = (uint64_t)v109;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  char v111 = (char *)operator new(0x38uLL);
  strcpy(v111 + 16, " papmdhp");
  *((void *)v111 + 4) = &qword_668DD0;
  v111[40] = 0;
  v111[48] = 0;
  __int16 v112 = v138;
  *(void *)char v111 = v138;
  *((void *)v111 + 1) = &v138;
  *((void *)v112 + 1) = v111;
  uint64_t v113 = v140;
  char v138 = v111;
  ++v140;
  __int16 v114 = (char *)operator new(0x38uLL);
  strcpy(v114 + 16, "iwmp pap");
  *((void *)v114 + 4) = &qword_668DD0;
  v114[40] = 0;
  v114[48] = 0;
  *(void *)__int16 v114 = v111;
  *((void *)v114 + 1) = &v138;
  *((void *)v111 + 1) = v114;
  char v138 = v114;
  uint64_t v140 = v113 + 2;
  int v115 = sub_FC7A0((uint64_t)&v138);
  uint64_t v116 = v132[0];
  *int v115 = v132[0];
  v115[1] = v132;
  *(void *)(v116 + 8) = v115;
  v132[0] = (uint64_t)v115;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  int v117 = operator new(0x38uLL);
  v117[2] = v124[1];
  *((unsigned char *)v117 + 24) = 0;
  v117[4] = &qword_668DD0;
  *((unsigned char *)v117 + 40) = 0;
  *((unsigned char *)v117 + 48) = 0;
  __int16 v118 = v138;
  *int v117 = v138;
  v117[1] = &v138;
  *((void *)v118 + 1) = v117;
  uint64_t v119 = v140;
  char v138 = (char *)v117;
  ++v140;
  std::condition_variable v120 = operator new(0x38uLL);
  v120[2] = v124[0];
  *((unsigned char *)v120 + 24) = 0;
  v120[4] = &qword_668DD0;
  *((unsigned char *)v120 + 40) = 0;
  *((unsigned char *)v120 + 48) = 0;
  void *v120 = v117;
  v120[1] = &v138;
  v117[1] = v120;
  char v138 = (char *)v120;
  uint64_t v140 = v119 + 2;
  std::mutex v121 = sub_FC7A0((uint64_t)&v138);
  uint64_t v122 = v132[0];
  void *v121 = v132[0];
  v121[1] = v132;
  *(void *)(v122 + 8) = v121;
  v132[0] = (uint64_t)v121;
  ++v133;
  sub_FC86C((uint64_t)&v138);
  char v129 = (uint64_t *)v130;
  v130[0] = 0;
  v131[0] = 0;
  v131[1] = 0;
  v130[1] = 0;
  v130[2] = v131;
  v148[0] = 0x7068704270617061;
  sub_6367C((uint64_t)&v125, (unsigned int *)v148, 2);
  sub_37BC4C(&v129, 0x696D6466u, (uint64_t)&v125);
  sub_463E0(v126[0]);
  LODWORD(v148[0]) = 1886222185;
  sub_6367C((uint64_t)&v125, (unsigned int *)v148, 1);
  sub_37BC4C(&v129, 0x696D6C70u, (uint64_t)&v125);
  sub_463E0(v126[0]);
  qword_64C4D0 = 0;
  qword_64C4D8 = 0;
  qword_64C4C8 = 0;
  qword_64C4C0 = (uint64_t)&qword_64C4C8;
  qword_64C4E0 = 0;
  qword_64C4E8 = 0;
  qword_64C4F8 = 0;
  qword_64C4F0 = (uint64_t)&qword_64C4F8;
  qword_64C510 = 0;
  qword_64C500 = 0;
  qword_64C508 = &qword_64C510;
  qword_64C530 = 0;
  qword_64C528 = 0;
  qword_64C518 = 0;
  unk_64C520 = &qword_64C528;
  qword_64C548 = 0;
  qword_64C540 = 0;
  qword_64C560 = 0;
  *(void *)algn_64C538 = &qword_64C540;
  LOBYTE(qword_64C550) = 0;
  BYTE4(qword_64C550) = 0;
  qword_64C568 = 0;
  *(void *)algn_64C558 = &qword_64C560;
  sub_3794EC(v148, (uint64_t)v136, 1668510820, 0, 0, 1, 1, 0, 0);
  sub_FCD78((uint64_t)&v125, 1668505974, (uint64_t)v148);
  sub_FCE44(v125, (int *)&v125);
  sub_FCC40(v128);
  sub_FCC94(v127);
  sub_FCCE8((uint64_t *)v126);
  sub_FCC40(v150);
  sub_FCC94(v149);
  sub_FCCE8(v148);
  sub_3794EC(v148, (uint64_t)v134, 1668510820, 0, 1, 0, 1, 1, 0);
  sub_FCD78((uint64_t)&v125, 1668441443, (uint64_t)v148);
  sub_FCE44(v125, (int *)&v125);
  sub_FCC40(v128);
  sub_FCC94(v127);
  sub_FCCE8((uint64_t *)v126);
  sub_FCC40(v150);
  sub_FCC94(v149);
  sub_FCCE8(v148);
  sub_3793A8(v148, (uint64_t)v132, &v129, 1668510820, 0, 1, 1, 1, 0, 0);
  sub_FCD78((uint64_t)&v125, 1668309362, (uint64_t)v148);
  sub_FCE44(v125, (int *)&v125);
  sub_FCC40(v128);
  sub_FCC94(v127);
  sub_FCCE8((uint64_t *)v126);
  sub_FCC40(v150);
  sub_FCC94(v149);
  sub_FCCE8(v148);
  sub_3AF458((uint64_t *)&v125);
  sub_C6650(&qword_64C508, v125, v126);
  sub_463E0(v126[0]);
  sub_FCFAC();
  sub_FCC40(v131[0]);
  sub_FCC94(v130[0]);
  sub_FCCE8(v132);
  sub_FCCE8(v134);
  sub_FCCE8(v136);
  sub_FD694(v147[0]);
  sub_463E0(v146[0]);
  sub_463E0(v143[0]);
  return sub_45F50(&v138);
}

void sub_292A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_292BD0()
{
  sub_20A0D0();
  char v8 = 1;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  *(_DWORD *)uint64_t v12 = 0;
  v12[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v12[5] = 1;
  *(void *)&v12[6] = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v96[0] = 0;
  v96[40] = 0;
  v96[48] = 0;
  v96[120] = 0;
  v96[128] = 0;
  v96[168] = 0;
  v96[176] = 0;
  v96[180] = 0;
  v96[184] = 0;
  v96[188] = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 1;
  char v128 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 0;
  char v132 = 0;
  char v133 = 0;
  char v134 = 0;
  char v135 = 0;
  char v136 = 0;
  char v137 = 0;
  __int16 v138 = 0;
  char v139 = 0;
  char v140 = 0;
  char v141 = 0;
  char v142 = 0;
  char v143 = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  char v152 = 0;
  char v153 = 0;
  char v154 = 0;
  char v155 = 0;
  char v156 = 0;
  char v157 = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  char v164 = 0;
  char v165 = 0;
  char v166 = 0;
  char v167 = 0;
  char v168 = 0;
  int v169 = 256;
  char v170 = 0;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  char v174 = 0;
  char v175 = 0;
  __int16 v176 = 0;
  char v4 = 1;
  int v3 = 1953460273;
  char v6 = 1;
  int v5 = 1;
  int v7 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v9, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v10[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(void *)uint64_t v12 = 0x101010101000101;
  *(_WORD *)&unsigned char v12[12] = 257;
  int v14 = 16843008;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 0;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  int v94 = 16843009;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 2;
  uint64_t v0 = operator new(4uLL);
  *uint64_t v0 = 1;
  v188 = v0 + 1;
  v189 = v0 + 1;
  uint64_t v187 = v0;
  int v1 = operator new(8uLL);
  void *v1 = 0x200000001;
  std::string::size_type v185 = v1 + 1;
  uint64_t v186 = v1 + 1;
  v184 = v1;
  sub_424954((uint64_t)&__src);
  sub_6D31C((uint64_t)v96, (uint64_t *)&__src);
  sub_6C7E4(v191);
  uint64_t v2 = (void *)__src;
  *(void *)&long long __src = 0;
  if (v2) {
    operator delete(v2);
  }
  operator delete(v1);
  operator delete(v0);
  sub_21C8C(&v182, "");
  sub_21C8C(v180, "");
  sub_21C8C(&v179, off_648B50);
  sub_21C8C(&v178, "AU");
  sub_21C8C(&__p, "VAD");
  sub_6D364((char *)&__src, &v182, (uint64_t)v180, &v179, &v178, &__p);
  sub_6D600((uint64_t)v95, &__src);
  if (v195 < 0) {
    operator delete(v194);
  }
  if (v193 < 0) {
    operator delete(v192);
  }
  if (SHIBYTE(v191) < 0) {
    operator delete((void *)__src);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v179.__r_.__value_.__l.__data_);
  }
  if (v181 < 0) {
    operator delete(v180[0]);
  }
  if (v183 < 0) {
    operator delete((void *)v182);
  }
  sub_402E04(&v3);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_293248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_293304(uint64_t a1)
{
  return (*(_WORD *)(a1 + 184) & 1) == 0;
}

void sub_293314(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_293350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(double *)a2 == 0.0 || (*(double *)a1 != 0.0 ? (BOOL v6 = *(double *)a2 == *(double *)a1) : (BOOL v6 = 1), v6))
  {
    int v7 = *(_DWORD *)(a2 + 8);
    if (!v7 || ((int v8 = *(_DWORD *)(a1 + 8)) != 0 ? (v9 = v7 == v8) : (v9 = 1), v9))
    {
      int v10 = *(_DWORD *)(a2 + 16);
      if (!v10 || (int v11 = *(_DWORD *)(a1 + 16)) == 0 || v10 == v11)
      {
        int v12 = *(_DWORD *)(a2 + 20);
        if (!v12 || (int v13 = *(_DWORD *)(a1 + 20)) == 0 || v12 == v13)
        {
          int v14 = *(_DWORD *)(a2 + 24);
          if (!v14 || (int v15 = *(_DWORD *)(a1 + 24)) == 0 || v14 == v15)
          {
            int v16 = *(_DWORD *)(a2 + 28);
            if (!v16 || (int v17 = *(_DWORD *)(a1 + 28)) == 0 || v16 == v17)
            {
              int v18 = *(_DWORD *)(a2 + 32);
              if (!v18 || (int v19 = *(_DWORD *)(a1 + 32)) == 0 || v18 == v19)
              {
                if (sub_EBDC(a2, a1))
                {
                  char v20 = (double *)(a1 + 40);
                  if (*(double *)a3 == 0.0 || *v20 == 0.0 || *(double *)a3 == *v20)
                  {
                    int v21 = *(_DWORD *)(a3 + 8);
                    if (!v21 || (int v22 = *(_DWORD *)(a1 + 48)) == 0 || v21 == v22)
                    {
                      int v23 = *(_DWORD *)(a3 + 16);
                      if (!v23 || (int v24 = *(_DWORD *)(a1 + 56)) == 0 || v23 == v24)
                      {
                        int v25 = *(_DWORD *)(a3 + 20);
                        if (!v25 || (int v26 = *(_DWORD *)(a1 + 60)) == 0 || v25 == v26)
                        {
                          int v27 = *(_DWORD *)(a3 + 24);
                          if (!v27 || (int v28 = *(_DWORD *)(a1 + 64)) == 0 || v27 == v28)
                          {
                            int v29 = *(_DWORD *)(a3 + 28);
                            if (!v29 || (int v30 = *(_DWORD *)(a1 + 68)) == 0 || v29 == v30)
                            {
                              int v31 = *(_DWORD *)(a3 + 32);
                              if ((!v31 || (int v32 = *(_DWORD *)(a1 + 72)) == 0 || v31 == v32)
                                && (sub_EBDC(a3, (uint64_t)v20) & 1) != 0)
                              {
                                return 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  long long v34 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&inSourceFormat.mSampleRate = *(_OWORD *)a2;
  *(_OWORD *)&inSourceFormat.mBytesPerPacket = v34;
  *(void *)&inSourceFormat.mBitsPerChannel = *(void *)(a2 + 32);
  long long v35 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v36.mSampleRate = *(_OWORD *)a3;
  *(_OWORD *)&v36.mBytesPerPacket = v35;
  *(void *)&v36.mBitsPerChannel = *(void *)(a3 + 32);
  return sub_5E28(a1, &inSourceFormat, &v36);
}

void sub_29353C(std::string *a1, unsigned int **a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  char v4 = *a2;
  while (v4 != a2[1])
  {
    unsigned int v5 = *v4++;
    std::to_string(&v11, v5);
    if (v4 == a2[1]) {
      BOOL v6 = " }";
    }
    else {
      BOOL v6 = ", ";
    }
    int v7 = std::string::append(&v11, v6, 2uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v13 >= 0) {
      BOOL v9 = __p;
    }
    else {
      BOOL v9 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v10 = HIBYTE(v13);
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    std::string::append(a1, (const std::string::value_type *)v9, v10);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
}

void sub_293638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

char *sub_293688(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  unsigned int v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *(char **)v7;
        BOOL v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        BOOL v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (char *)(a1 + 1);
LABEL_9:
    BOOL v9 = v7;
    int v7 = (char *)operator new(0x48uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 6) = v7 + 56;
    *(void *)int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *BOOL v6 = (uint64_t *)v7;
    std::string::size_type v10 = (uint64_t *)**a1;
    std::string v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      std::string v11 = *v6;
    }
    sub_46D00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **sub_293768(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    BOOL v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *int v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *BOOL v6 = (uint64_t *)v7;
    std::string::size_type v10 = (uint64_t *)**a1;
    std::string v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      std::string v11 = *v6;
    }
    sub_46D00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_293834(void *a1)
{
  if (a1)
  {
    sub_293834(*a1);
    sub_293834(a1[1]);
    sub_463E0((void *)a1[7]);
    operator delete(a1);
  }
}

id sub_293A9C(uint64_t a1)
{
  return [*(id *)(***(void ***)(a1 + 32) + 16) unregisterClient];
}

void sub_293D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_293D8C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 objectForKeyedSubscript:@"NRBand41Enabled"];
  unsigned int v3 = [v2 BOOLValue];

  char v4 = [v1 objectForKeyedSubscript:@"NRBand7xEnabled"];
  unsigned int v5 = [v4 BOOLValue];

  BOOL v6 = *(id *)sub_32A48(24);
  int v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = "false";
    *(void *)&uint8_t buf[4] = "MagneticCoexIODelegate.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 222;
    if (v3) {
      BOOL v9 = "true";
    }
    else {
      BOOL v9 = "false";
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&buf[20] = v9;
    *(_WORD *)&unsigned char buf[18] = 2080;
    if (v5) {
      unsigned int v8 = "true";
    }
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v8;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d The magnetic coex mitigation requirement was set to %s for NRBand41 and %s for NRBand7x", buf, 0x26u);
  }

  sub_294118(&v21);
  uint64_t v10 = v21;
  std::string v11 = *(id *)sub_32A48(24);
  int v12 = v11;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int64_t v13 = "false";
    *(void *)&uint8_t buf[4] = "MagneticCoexIODelegate.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 140;
    if (v3) {
      int v14 = "true";
    }
    else {
      int v14 = "false";
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&buf[20] = v14;
    *(_WORD *)&unsigned char buf[18] = 2080;
    if (v5) {
      int64_t v13 = "true";
    }
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d The magnetic coex mitigation requirement was set to %s for NRBand41 and %s for NRBand7x", buf, 0x26u);
  }

  std::mutex::lock((std::mutex *)v10);
  int v15 = *(void **)(v10 + 72);
  if (v15 != (void *)(v10 + 80))
  {
    do
    {
      if (*((char *)v15 + 55) < 0)
      {
        sub_21E8C(buf, (void *)v15[4], v15[5]);
      }
      else
      {
        *(_OWORD *)AudioTimeStamp buf = *((_OWORD *)v15 + 2);
        *(void *)&uint8_t buf[16] = v15[6];
      }
      uint64_t v16 = v15[8];
      *(void *)&unsigned char buf[24] = v15[7];
      *(void *)&unsigned char buf[32] = v16;
      if (v16)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
        if (*(void *)&buf[32])
        {
          int v17 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[32]);
          if (v17)
          {
            if (*(void *)&buf[24]) {
              sub_294664(*(void *)(*(void *)&buf[24] + 8), *(void *)(*(void *)&buf[24] + 16));
            }
            sub_4636C(v17);
          }
          if (*(void *)&buf[32]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[32]);
          }
        }
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      int v18 = (void *)v15[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          int v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v15[2];
          BOOL v20 = *v19 == (void)v15;
          int v15 = v19;
        }
        while (!v20);
      }
      int v15 = v19;
    }
    while (v19 != (void *)(v10 + 80));
  }
  std::mutex::unlock((std::mutex *)v10);
  if (v22) {
    sub_4636C(v22);
  }
}

void sub_2940A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_294118(void *a1)
{
  if (!qword_64FE68
    || (uint64_t result = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_64FE68)) == 0
    || !qword_64FE60)
  {
    unsigned int v3 = operator new(0x80uLL);
    v3[1] = 0;
    v3[2] = 0;
    void v3[3] = 850045863;
    void *v3 = off_62B028;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    v3[10] = 0;
    operator new();
  }
  *a1 = qword_64FE60;
  a1[1] = result;
  return result;
}

void sub_294328(_Unwind_Exception *a1)
{
  sub_A9A4C(*v5);
  sub_295114(v4);
  std::mutex::~mutex(v3);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v7);
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(a1);
}

void sub_294664(uint64_t a1, uint64_t a2)
{
  if (a2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2 + 16), 1uLL, memory_order_relaxed);
  }
  sub_13910();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  operator new();
}

void sub_29472C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_294744(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    id v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_294798(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  id v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v17 = a1;
  v18[0] = v1;
  v18[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v3 = *(unsigned __int8 *)(a1 + 16);
  char v19 = *(unsigned char *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 17);
  char v20 = *(unsigned char *)(a1 + 17);
  sub_294F68(&v23, v18, 286);
  uint64_t v5 = v23;
  if (v23)
  {
    id v6 = *(id *)sub_32A48(24);
    int v7 = v6;
    if (v6)
    {
      unsigned int v8 = v6;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(v5 + 47) < 0)
        {
          sub_21E8C(__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 24);
          uint64_t v22 = *(void *)(v5 + 40);
        }
        BOOL v9 = __p;
        if (v22 < 0) {
          BOOL v9 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        int v26 = "MagneticCoexIODelegate.mm";
        __int16 v27 = 1024;
        int v28 = 291;
        __int16 v29 = 2080;
        int v30 = v9;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Handling magnetic coex mitigation IO delegate for chain %s.", buf, 0x1Cu);
        if (SHIBYTE(v22) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v10 = *(std::__shared_weak_count **)(v5 + 56);
    if (v10)
    {
      std::string v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        int64_t v13 = v11;
        uint64_t v14 = *(void *)(v5 + 48);
        if (v14)
        {
          if (v3) {
            v12.n128_f32[0] = 1.0;
          }
          else {
            v12.n128_f32[0] = 0.0;
          }
          (*(void (**)(void, uint64_t, uint64_t, void, __n128))(*(void *)v14 + 72))(*(void *)(v5 + 48), 1685287015, 1919315055, 0, v12);
          if (v4) {
            v15.n128_f32[0] = 1.0;
          }
          else {
            v15.n128_f32[0] = 0.0;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)v14 + 72))(v14, 1685287015, 1919315060, 0, v15);
        }
        sub_4636C(v13);
      }
    }
  }
  if (v24) {
    sub_4636C(v24);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_294744(&v17);
}

void sub_2949F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, long long buf, long long a20,__int16 a21,__int16 a22,int a23,int a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }

  if (a18) {
    sub_4636C(a18);
  }
  if (a2 == 3)
  {
    __int16 v27 = __cxa_begin_catch(exception_object);
    id v28 = *(id *)sub_32A48(13);
    if (v28)
    {
      __int16 v29 = v28;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        int v30 = v27[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a20) = 1024;
        DWORD1(a20) = v30;
        WORD4(a20) = 2080;
        *(void *)((char *)&a20 + 10) = "";
        a22 = 1024;
        a23 = 304;
        int v31 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        int v32 = v29;
        uint32_t v33 = 40;
LABEL_15:
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v33);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
  }
  else
  {
    long long v34 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      long long v35 = v34;
      id v36 = *(id *)sub_32A48(13);
      if (v36)
      {
        __int16 v29 = v36;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a20) = 2080;
          *(void *)((char *)&a20 + 4) = v37;
          WORD6(a20) = 2080;
          *(void *)((char *)&a20 + 14) = "";
          HIWORD(a23) = 1024;
          a24 = 304;
          int v31 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          int v32 = v29;
          uint32_t v33 = 44;
          goto LABEL_15;
        }
LABEL_16:

        goto LABEL_18;
      }
    }
    else
    {
      id v38 = *(id *)sub_32A48(13);
      if (v38)
      {
        __int16 v29 = v38;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a20) = 2080;
          *(void *)((char *)&a20 + 4) = "";
          WORD6(a20) = 1024;
          *(_DWORD *)((char *)&a20 + 14) = 304;
          int v31 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          int v32 = v29;
          uint32_t v33 = 34;
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
  }
  __int16 v29 = 0;
LABEL_18:

  __cxa_end_catch();
  if (!a11) {
    JUMPOUT(0x2949B4);
  }
  JUMPOUT(0x2949ACLL);
}

std::__shared_weak_count *sub_294F68(uint64_t *a1, uint64_t *a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (!v5
    || (uint64_t result = std::__shared_weak_count::lock(v5), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v8 = *a2, *a1 = *a2, !v8))
  {
    uint64_t v9 = sub_32A48(13);
    uint64_t v10 = sub_7D5E8(1, *(void **)v9, *(void *)(v9 + 8));
    std::string v11 = v10;
    if (v10)
    {
      __n128 v12 = v10;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        __n128 v15 = "StandardUtilities.h";
        __int16 v16 = 1024;
        int v17 = 267;
        __int16 v18 = 2080;
        char v19 = "";
        __int16 v20 = 1024;
        int v21 = a3;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_2950DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_295114(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    [*(id *)(v1 + 16) stopObserving];

    id v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

void sub_295190(uint64_t a1)
{
  id v2 = (uint64_t *)(a1 + 88);
  [*(id *)(*(void *)(a1 + 88) + 16) stopObserving];
  int v3 = *(id *)sub_32A48(24);
  int v4 = v3;
  if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    id v6 = "MagneticCoexIODelegate.mm";
    __int16 v7 = 1024;
    int v8 = 202;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Central magnetic coex mitigation handler is destroyed", (uint8_t *)&v5, 0x12u);
  }

  sub_A9A4C(*(void **)(a1 + 104));
  sub_295114(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_295294(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_2952A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B028;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2952F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2953B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2953D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  sub_54694();
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 48, 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = v1;
  *(void *)uint64_t v3 = off_62B098;
  *(void *)(v3 + 8) = 0;

  return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v3);
}

void sub_29547C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_295494(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_2954DC((uint64_t)a1);
  return sub_29583C(&v2);
}

void sub_2954C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_29583C((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_2954DC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  v2[0] = *(void *)(a1 + 24);
  v2[1] = (uint64_t)v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_294F68(&v3, v2, 268);
  if (v3) {
    sub_2959A0(v3);
  }
  if (v4) {
    sub_4636C(v4);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_295580(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a12) {
    sub_4636C(a12);
  }
  if (a2 == 3)
  {
    __int16 v20 = __cxa_begin_catch(a1);
    id v21 = *(id *)sub_32A48(13);
    if (v21)
    {
      uint64_t v22 = v21;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v23 = v20[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a14) = 1024;
        DWORD1(a14) = v23;
        WORD4(a14) = 2080;
        *(void *)((char *)&a14 + 10) = "";
        a16 = 1024;
        a17 = 272;
        int v24 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        int v25 = v22;
        uint32_t v26 = 40;
LABEL_15:
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, v26);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
  }
  else
  {
    __int16 v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      id v28 = v27;
      id v29 = *(id *)sub_32A48(13);
      if (v29)
      {
        uint64_t v22 = v29;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = v30;
          WORD6(a14) = 2080;
          *(void *)((char *)&a14 + 14) = "";
          HIWORD(a17) = 1024;
          a18 = 272;
          int v24 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          int v25 = v22;
          uint32_t v26 = 44;
          goto LABEL_15;
        }
LABEL_16:

        goto LABEL_18;
      }
    }
    else
    {
      id v31 = *(id *)sub_32A48(13);
      if (v31)
      {
        uint64_t v22 = v31;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = "";
          WORD6(a14) = 1024;
          *(_DWORD *)((char *)&a14 + 14) = 272;
          int v24 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          int v25 = v22;
          uint32_t v26 = 34;
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
  }
  uint64_t v22 = 0;
LABEL_18:

  __cxa_end_catch();
  if (!a10) {
    JUMPOUT(0x295550);
  }
  JUMPOUT(0x295548);
}

caulk::concurrent::message **sub_29583C(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_62B0C0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 48, 8);
  return a1;
}

void sub_2958D4(caulk::concurrent::message *this)
{
  *(void *)this = off_62B0C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_295944(caulk::concurrent::message *this)
{
  *(void *)this = off_62B0C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_2959A0(uint64_t a1)
{
  sub_294118(&v14);
  uint64_t v2 = v14;
  std::mutex::lock(v14);
  uint64_t v3 = *(uint64_t **)&v2[1].__m_.__opaque[8];
  if (v3)
  {
    int v4 = (void **)(a1 + 24);
    int v5 = &v2[1].__m_.__opaque[8];
    id v6 = *(void **)&v2[1].__m_.__opaque[8];
    do
    {
      char v7 = sub_15E8C(v6 + 4, v4);
      if (v7 >= 0) {
        int v8 = v6;
      }
      else {
        int v8 = v6 + 1;
      }
      if (v7 >= 0) {
        int v5 = (char *)v6;
      }
      id v6 = (void *)*v8;
    }
    while (*v8);
    if (v5 != &v2[1].__m_.__opaque[8] && (sub_15E8C(v4, (void **)v5 + 4) & 0x80) == 0)
    {
      uint64_t v9 = (char *)*((void *)v5 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        std::string v11 = v5;
        do
        {
          uint64_t v10 = (char *)*((void *)v11 + 2);
          BOOL v12 = *(void *)v10 == (void)v11;
          std::string v11 = v10;
        }
        while (!v12);
      }
      if (*(char **)v2[1].__m_.__opaque == v5) {
        *(void *)v2[1].__m_.__opaque = v10;
      }
      --*(void *)&v2[1].__m_.__opaque[16];
      sub_89144(v3, (uint64_t *)v5);
      sub_A99F8((uint64_t)(v5 + 32));
      operator delete(v5);
    }
  }
  std::mutex::unlock(v2);
  int64_t v13 = v15;
  if (v15)
  {
    sub_4636C(v13);
  }
}

void sub_295AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_295B00(caulk::concurrent::message *this)
{
  *(void *)this = off_62B0C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_295B70(caulk::concurrent::message *this)
{
  *(void *)this = off_62B0C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_295BCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  sub_13910();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  operator new();
}

void sub_295C6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_295C84(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  uint64_t v37 = a1;
  uint64_t v38 = v2;
  int v39 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_294F68(&v40, &v38, 245);
  uint64_t v3 = v40;
  if (v40)
  {
    uint64_t v5 = *(void *)(v40 + 8);
    int v4 = *(std::__shared_weak_count **)(v40 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_294118(&v42);
    if (v4)
    {
      uint64_t v6 = v42;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      char v7 = std::__shared_weak_count::lock(v4);
      if (v7 && v5)
      {
        id v8 = *(id *)sub_32A48(24);
        uint64_t v9 = v8;
        if (v8)
        {
          uint64_t v10 = v8;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(v5 + 47) < 0)
            {
              sub_21E8C(__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 24);
              uint64_t v45 = *(void *)(v5 + 40);
            }
            __n128 v15 = __p;
            if (v45 < 0) {
              __n128 v15 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            int v49 = "MagneticCoexIODelegate.mm";
            __int16 v50 = 1024;
            int v51 = 158;
            __int16 v52 = 2080;
            int v53 = v15;
            _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding magnetic coex mitigation IO delegate %s", buf, 0x1Cu);
            if (SHIBYTE(v45) < 0) {
              operator delete(__p[0]);
            }
          }
        }
        std::mutex::lock((std::mutex *)v6);
        int v17 = (void **)(v6 + 80);
        __int16 v16 = *(void ***)(v6 + 80);
        id v36 = (void ***)(v6 + 72);
        if (v16)
        {
          __int16 v18 = (void **)(v6 + 80);
          char v19 = *(void **)(v6 + 80);
          do
          {
            char v20 = sub_15E8C(v19 + 4, (void **)(v3 + 24));
            if (v20 >= 0) {
              id v21 = v19;
            }
            else {
              id v21 = v19 + 1;
            }
            if (v20 >= 0) {
              __int16 v18 = (void **)v19;
            }
            char v19 = (void *)*v21;
          }
          while (*v21);
          if (v18 == v17)
          {
            int v23 = (void **)(v6 + 80);
          }
          else
          {
            if ((sub_15E8C((void *)(v3 + 24), v18 + 4) & 0x80) == 0)
            {
              atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              uint64_t v22 = (std::__shared_weak_count *)v18[8];
              v18[7] = (void *)v5;
              v18[8] = v4;
              if (v22) {
                std::__shared_weak_count::__release_weak(v22);
              }
              goto LABEL_89;
            }
            int v23 = (void **)(v6 + 80);
            if (v17 != v18)
            {
              if ((sub_15E8C((void *)(v3 + 24), v18 + 4) & 0x80) == 0)
              {
                if ((sub_15E8C(v18 + 4, (void **)(v3 + 24)) & 0x80) == 0)
                {
                  char v46 = v18;
                  int v47 = v18;
                  int v23 = (void **)&v46;
                  goto LABEL_82;
                }
                __int16 v27 = v18[1];
                if (v27)
                {
                  id v28 = (void **)v18[1];
                  do
                  {
                    int v23 = v28;
                    id v28 = (void **)*v28;
                  }
                  while (v28);
                }
                else
                {
                  id v29 = v18;
                  do
                  {
                    int v23 = (void **)v29[2];
                    BOOL v30 = *v23 == v29;
                    id v29 = v23;
                  }
                  while (!v30);
                }
                if (v23 == v17 || (sub_15E8C((void *)(v3 + 24), v23 + 4) & 0x80) != 0)
                {
                  if (!v27)
                  {
                    int v47 = v18;
                    int v23 = v18 + 1;
                    goto LABEL_81;
                  }
                  goto LABEL_80;
                }
                goto LABEL_61;
              }
              __int16 v16 = (void **)*v18;
              int v23 = v18;
            }
          }
          if (*v36 == v23)
          {
            int v25 = v23;
LABEL_67:
            if (v16)
            {
              int v47 = v25;
              int v23 = v25 + 1;
              goto LABEL_81;
            }
LABEL_80:
            int v47 = v23;
            goto LABEL_81;
          }
          if (v16)
          {
            int v24 = v16;
            do
            {
              int v25 = v24;
              int v24 = (void **)v24[1];
            }
            while (v24);
            goto LABEL_60;
          }
        }
        else
        {
          int v23 = (void **)(v6 + 80);
          if (*(void ***)(v6 + 72) == v17) {
            goto LABEL_80;
          }
          __int16 v16 = 0;
          int v23 = (void **)(v6 + 80);
        }
        int v25 = v23;
        do
        {
          uint32_t v26 = v25;
          int v25 = (void **)v25[2];
        }
        while (*v25 == v26);
LABEL_60:
        if ((sub_15E8C(v25 + 4, (void **)(v3 + 24)) & 0x80) == 0)
        {
LABEL_61:
          int v23 = (void **)sub_15DF8((uint64_t)v36, &v47, (void **)(v3 + 24));
LABEL_81:
          __int16 v18 = (void **)*v23;
LABEL_82:
          if (!v18)
          {
            id v31 = operator new(0x48uLL);
            __p[0] = v31;
            __p[1] = (void *)(v6 + 80);
            LOBYTE(v45) = 0;
            int v32 = v31 + 4;
            if (*(char *)(v3 + 47) < 0)
            {
              sub_21E8C(v32, *(void **)(v3 + 24), *(void *)(v3 + 32));
            }
            else
            {
              long long v33 = *(_OWORD *)(v3 + 24);
              v31[6] = *(void *)(v3 + 40);
              *(_OWORD *)int v32 = v33;
            }
            v31[7] = v5;
            v31[8] = v4;
            atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            LOBYTE(v45) = 1;
            long long v34 = v47;
            *id v31 = 0;
            v31[1] = 0;
            v31[2] = v34;
            char *v23 = v31;
            long long v35 = (void **)**v36;
            if (v35)
            {
              char *v36 = v35;
              id v31 = *v23;
            }
            sub_46D00(*(uint64_t **)(v6 + 80), v31);
            ++*(void *)(v6 + 88);
            __p[0] = 0;
            sub_4F650((uint64_t)__p);
          }
LABEL_89:
          std::mutex::unlock((std::mutex *)v6);
          sub_294664(*(void *)(v5 + 8), *(void *)(v5 + 16));
        }
        goto LABEL_67;
      }
    }
    else
    {
      char v7 = 0;
    }
    std::string v11 = *(id *)sub_32A48(24);
    BOOL v12 = v11;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 47) >= 0) {
        uint64_t v13 = v3 + 24;
      }
      else {
        uint64_t v13 = *(void *)(v3 + 24);
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v49 = "MagneticCoexIODelegate.mm";
      __int16 v50 = 1024;
      int v51 = 173;
      __int16 v52 = 2080;
      int v53 = (void **)v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add magnetic coex mitigation IO delegate for chain %s to central callback handler", buf, 0x1Cu);
    }

    if (v7)
    {
      sub_4636C(v7);
      if (!v4) {
        goto LABEL_23;
      }
    }
    else if (!v4)
    {
LABEL_23:
      if (v43) {
        sub_4636C(v43);
      }
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      goto LABEL_27;
    }
    std::__shared_weak_count::__release_weak(v4);
    goto LABEL_23;
  }
LABEL_27:
  if (v41) {
    sub_4636C(v41);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  return sub_8FEC((uint64_t *)&v37);
}

void sub_2961C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf,long long a26,__int16 a27,__int16 a28,int a29,int a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_4F650((uint64_t)&a19);
  std::mutex::unlock(v32);
  sub_4636C(v31);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (a18) {
    sub_4636C(a18);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (a16) {
    sub_4636C(a16);
  }
  if (a2 == 3)
  {
    long long v35 = __cxa_begin_catch(exception_object);
    id v36 = *(id *)sub_32A48(13);
    if (v36)
    {
      uint64_t v37 = v36;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        int v38 = v35[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a26) = 1024;
        DWORD1(a26) = v38;
        WORD4(a26) = 2080;
        *(void *)((char *)&a26 + 10) = "";
        a28 = 1024;
        a29 = 249;
        int v39 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v40 = v37;
        uint32_t v41 = 40;
LABEL_21:
        _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, v41);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v42 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v43 = v42;
      id v44 = *(id *)sub_32A48(13);
      if (v44)
      {
        uint64_t v37 = v44;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          uint64_t v45 = (*(uint64_t (**)(void *))(*(void *)v43 + 16))(v43);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a26) = 2080;
          *(void *)((char *)&a26 + 4) = v45;
          WORD6(a26) = 2080;
          *(void *)((char *)&a26 + 14) = "";
          HIWORD(a29) = 1024;
          a30 = 249;
          int v39 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v40 = v37;
          uint32_t v41 = 44;
          goto LABEL_21;
        }
LABEL_22:

LABEL_24:
        __cxa_end_catch();
        JUMPOUT(0x295E4CLL);
      }
    }
    else
    {
      id v46 = *(id *)sub_32A48(13);
      if (v46)
      {
        uint64_t v37 = v46;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a26) = 2080;
          *(void *)((char *)&a26 + 4) = "";
          WORD6(a26) = 1024;
          *(_DWORD *)((char *)&a26 + 14) = 249;
          int v39 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v40 = v37;
          uint32_t v41 = 34;
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
  }
  uint64_t v37 = 0;
  goto LABEL_24;
}

void sub_2967B8(uint64_t a1)
{
  sub_2967F0(a1);

  operator delete();
}

uint64_t sub_2967F0(uint64_t a1)
{
  uint64_t v2 = sub_32A48(24);
  if (*(unsigned char *)(v2 + 8))
  {
    id v3 = *(id *)v2;
    if (v3)
    {
      int v4 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a1 + 47) < 0)
        {
          sub_21E8C(__p, *(void **)(a1 + 24), *(void *)(a1 + 32));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 24);
          uint64_t v11 = *(void *)(a1 + 40);
        }
        uint64_t v5 = __p;
        if (v11 < 0) {
          uint64_t v5 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        uint64_t v13 = "MagneticCoexIODelegate.mm";
        __int16 v14 = 1024;
        int v15 = 278;
        __int16 v16 = 2080;
        int v17 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destroying magnetic coex mitigation IO delegate for chain %s", buf, 0x1Cu);
        if (SHIBYTE(v11) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_2959A0(a1);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 72);
  if (v6) {
    sub_4636C(v6);
  }
  char v7 = *(std::__shared_weak_count **)(a1 + 56);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  id v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

void sub_296968(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_29697C(uint64_t a1)
{
  return sub_2967F0(a1 + 24);
}

void sub_296984(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B060;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2969D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_2969F8(uint64_t a1)
{
  mach_timebase_info(&info);
  return ((double)((mach_absolute_time() - a1) * info.numer / info.denom) / 1000000.0);
}

void sub_296A50(void *a1, CFStringRef theString)
{
  CFIndex v4 = CFStringGetLength(theString) + 1;
  uint64_t v5 = (char *)malloc_type_malloc(v4, 0xE270EA0uLL);
  CFStringGetCString(theString, v5, v4, 0x8000100u);
  sub_21C8C(a1, v5);

  free(v5);
}

void sub_296AD4()
{
}

uint64_t sub_296AEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_296AF4()
{
  return 1987013737;
}

uint64_t sub_296B04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_296B28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638728;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_296B7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_296B9C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_650008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_650008))
  {
    uint64_t v0 = sub_207A20();
    sub_296C1C(v0);
    __cxa_guard_release(&qword_650008);
  }
}

void sub_296C04(_Unwind_Exception *a1)
{
}

uint64_t sub_296C1C(uint64_t result)
{
  switch((int)result)
  {
    case 125:
      goto LABEL_8;
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 136:
    case 137:
    case 142:
    case 143:
    case 144:
    case 145:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 178:
    case 181:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 194:
    case 195:
      goto LABEL_13;
    case 134:
    case 135:
    case 138:
    case 139:
    case 140:
    case 141:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 177:
    case 179:
    case 182:
    case 196:
      goto LABEL_2;
    case 180:
      goto LABEL_5;
    case 193:
      LODWORD(result) = 24;
      goto LABEL_8;
    default:
      if (result > 0x2E) {
        goto LABEL_12;
      }
      if (((1 << result) & 0x2FF0801E0600) != 0)
      {
LABEL_5:
        dword_64FF10 = 1;
        qword_64FF20 = 0;
        unk_64FF28 = 0;
        qword_64FF18 = 0;
        uint64_t v1 = operator new(8uLL);
        qword_64FF18 = (uint64_t)v1;
        void *v1 = 0;
        uint64_t result = (uint64_t)(v1 + 1);
        qword_64FF20 = result;
        unk_64FF28 = result;
        xmmword_64FF30 = 0u;
        unk_64FF40 = 0u;
        unk_64FF50 = 0u;
        strcpy((char *)&dword_64FF60, "tlfd");
        byte_64FF68 = 0;
        byte_64FFB0 = 0;
        xmmword_64FFC0 = 0u;
        unk_64FFD0 = 0u;
        xmmword_64FFE0 = 0u;
        unk_64FFF0 = 0u;
        qword_650000 = 0;
      }
      else
      {
        if (((1 << result) & 0x400F7F000000) != 0)
        {
LABEL_8:
          sub_296FE8(result);
        }
        if (result)
        {
LABEL_12:
          if ((result - 4014) >= 2)
          {
LABEL_13:
            uint64_t v2 = (os_log_t *)sub_32A48(13);
            id v3 = *v2;
            if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
            {
              int v5 = 136315394;
              uint64_t v6 = "ActuatorSettingsFactory_Aspen.cpp";
              __int16 v7 = 1024;
              int v8 = 159;
              _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Invalid Product Type\"", (uint8_t *)&v5, 0x12u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Invalid Product Type");
          }
        }
LABEL_2:
        dword_64FF10 = 1;
        *(_OWORD *)&qword_64FF18 = 0u;
        unk_64FF28 = 0u;
        *(long long *)((char *)&xmmword_64FF30 + 8) = 0u;
        unk_64FF48 = 0u;
        qword_64FF58 = 0;
        strcpy((char *)&dword_64FF60, "tlfd");
        byte_64FF68 = 0;
        byte_64FFB0 = 0;
        xmmword_64FFC0 = 0u;
        unk_64FFD0 = 0u;
        xmmword_64FFE0 = 0u;
        unk_64FFF0 = 0u;
        qword_650000 = 0;
      }
      return result;
  }
}

void sub_296EAC(_Unwind_Exception *exception_object)
{
}

void sub_296FE8(int a1)
{
  sub_2974FC((uint64_t)v15, off_648B50);
  sub_208140(v13, a1);
  if ((v14 & 0x80u) == 0) {
    size_t v2 = v14;
  }
  else {
    size_t v2 = v13[1];
  }
  id v3 = v11;
  sub_5E220((uint64_t)v11, v2 + 17);
  if (v12 < 0) {
    id v3 = (void **)v11[0];
  }
  if (v2)
  {
    if ((v14 & 0x80u) == 0) {
      CFIndex v4 = v13;
    }
    else {
      CFIndex v4 = (void *)v13[0];
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "_actuator_general");
  CFMutableStringRef v9 = sub_32DA5C();
  char v10 = 1;
  if (v12 >= 0) {
    int v5 = v11;
  }
  else {
    int v5 = (void **)v11[0];
  }
  sub_3AF82C(v15, (const char *)v5, (uint64_t *)&v9);
  if (v12 >= 0) {
    uint64_t v6 = (char *)v11;
  }
  else {
    uint64_t v6 = (char *)v11[0];
  }
  sub_2975A4((uint64_t)v8, v6);
  if (v12 >= 0) {
    __int16 v7 = v11;
  }
  else {
    __int16 v7 = (void **)v11[0];
  }
  sub_3AFE78((uint64_t)v16, (const char *)v7, 0, 0, (uint64_t)v15, 0x68617070u);
  sub_3B0A74((uint64_t)v16, 2u, 1u);
}

void sub_2973F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (qword_64FF18)
  {
    qword_64FF20 = qword_64FF18;
    operator delete((void *)qword_64FF18);
  }
  sub_297864((uint64_t)&a10);
  sub_72924((uint64_t)&a37);
  if (a44 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v44 - 225) < 0) {
    operator delete(*(void **)(v44 - 248));
  }
  sub_3FD6EC(v44 - 224, v46, v47, v48, v49, v50, v51, v52);
  _Unwind_Resume(a1);
}

uint64_t sub_2974FC(uint64_t a1, const char *a2)
{
  *(void *)a1 = CFStringCreateWithCString(0, a2, 0x600u);
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 48) = 0;
  for (uint64_t i = 16; i != 48; i += 8)
    *(void *)(a1 + i) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  return a1;
}

void sub_297590(_Unwind_Exception *a1)
{
  sub_72924(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2975A4(uint64_t a1, char *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_21C8C((void *)(a1 + 24), a2);
  strcpy((char *)(a1 + 48), "tlfd");
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  return a1;
}

void sub_297608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19518C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_297620(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 != *(void *)a2)
  {
    sub_21924((void *)a1, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
    *(void *)(a1 + 8) = sub_19982C(a1 + 16, v4, v5, *(void **)(a1 + 8));
  }
  if (*(char *)(a2 + 47) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v7;
  sub_2978E4((char *)(a1 + 56), a2 + 56);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  if (*(char *)(a2 + 167) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 144), *(void **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v8;
  }
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v9 = *(void *)(a2 + 168);
  uint64_t v10 = *(void *)(a2 + 176);
  if (v10 != v9)
  {
    sub_21924((void *)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
    *(void *)(a1 + 176) = sub_199588(a1 + 184, v9, v10, *(void *)(a1 + 176));
  }
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v12 = *(void *)(a2 + 192);
  uint64_t v11 = *(void *)(a2 + 200);
  if (v11 != v12)
  {
    sub_21924((void *)(a1 + 192), 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3));
    *(void *)(a1 + 200) = sub_199588(a1 + 208, v12, v11, *(void *)(a1 + 200));
  }
  return a1;
}

void sub_2977DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_6C788(v11);
  if (*(char *)(v9 + 47) < 0) {
    operator delete(*v10);
  }
  a9 = (void **)v9;
  sub_19518C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_297864(uint64_t a1)
{
  id v3 = (void **)(a1 + 192);
  sub_195138(&v3);
  id v3 = (void **)(a1 + 168);
  sub_195138(&v3);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  sub_6C788(a1 + 56);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  id v3 = (void **)a1;
  sub_19518C(&v3);
  return a1;
}

char *sub_2978E4(char *__dst, uint64_t a2)
{
  void *__dst = 0;
  __dst[72] = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    sub_1995C8(__dst, (long long *)a2);
    __dst[72] = 1;
  }
  return __dst;
}

void sub_297928(_Unwind_Exception *a1)
{
  sub_6C788(v1);
  _Unwind_Resume(a1);
}

void *sub_29793C(void *result, unsigned int a2)
{
  uint64_t v3 = result[3];
  uint64_t v2 = result[4];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) > a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3 + 24 * a2;
    uint64_t v6 = v2 - (v5 + 24);
    if (v2 != v5 + 24) {
      uint64_t result = memmove((void *)v5, (const void *)(v5 + 24), v2 - (v5 + 24));
    }
    v4[4] = v5 + v6;
  }
  return result;
}

uint64_t sub_2979B0(void *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = (char *)a1[4];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-v4] >> 3);
  if (v5 >= a2)
  {
    unint64_t v6 = a3;
    uint64_t v9 = a2;
    uint64_t v10 = (char *)(v4 + 24 * a2);
    unint64_t v11 = a1[5];
    if ((unint64_t)v3 >= v11)
    {
      unint64_t v16 = v5 + 1;
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v4) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        char v20 = (char *)sub_21974(v18);
      }
      else
      {
        char v20 = 0;
        uint64_t v19 = 0;
      }
      int v23 = &v20[24 * v9];
      int v24 = &v20[24 * v19];
      if (v19 == v9)
      {
        if (a2)
        {
          v23 -= 24 * ((unint64_t)(v9 + 1) >> 1);
        }
        else
        {
          int v23 = (char *)sub_21974(1uLL);
          int v24 = &v23[24 * v25];
          if (v20) {
            operator delete(v20);
          }
        }
      }
      long long v26 = *(_OWORD *)v6;
      *((void *)v23 + 2) = *(void *)(v6 + 16);
      *(_OWORD *)int v23 = v26;
      __int16 v27 = (char *)a1[3];
      id v28 = v23;
      if (v27 != v10)
      {
        id v29 = v10;
        BOOL v30 = v23;
        do
        {
          long long v31 = *(_OWORD *)(v29 - 24);
          id v28 = v30 - 24;
          *((void *)v30 - 1) = *((void *)v29 - 1);
          *(_OWORD *)(v30 - 24) = v31;
          v29 -= 24;
          v30 -= 24;
        }
        while (v29 != v27);
      }
      int v32 = v23 + 24;
      long long v33 = (char *)a1[4];
      int64_t v34 = v33 - v10;
      if (v33 != v10) {
        memmove(v32, v10, v33 - v10);
      }
      long long v35 = (void *)a1[3];
      a1[3] = v28;
      a1[4] = &v32[v34];
      a1[5] = v24;
      if (v35) {
        operator delete(v35);
      }
    }
    else if (v10 == v3)
    {
      long long v22 = *(_OWORD *)a3;
      *((void *)v3 + 2) = *(void *)(a3 + 16);
      *(_OWORD *)uint64_t v3 = v22;
      a1[4] = v3 + 24;
    }
    else
    {
      uint64_t v12 = v10 + 24;
      uint64_t v13 = v3 - 24;
      uint64_t v14 = a1[4];
      while (v13 < v3)
      {
        long long v15 = *(_OWORD *)v13;
        *(void *)(v14 + 16) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v14 = v15;
        v14 += 24;
        v13 += 24;
      }
      a1[4] = v14;
      if (v3 != v12) {
        memmove(v10 + 24, v10, v3 - v12);
      }
      if ((unint64_t)v10 <= v6) {
        v6 += 24 * (a1[4] > v6);
      }
      long long v21 = *(_OWORD *)v6;
      *((void *)v10 + 2) = *(void *)(v6 + 16);
      *(_OWORD *)uint64_t v10 = v21;
    }
  }
  return 0;
}

void sub_297BFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_297C14(void *a1, int a2, CFTypeRef cf)
{
  if (a2 != 1635087726) {
    return 1064333936;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFDataGetTypeID()) {
    return 1886806380;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  unint64_t Length = CFDataGetLength((CFDataRef)cf);
  uint64_t v9 = (unsigned char *)a1[3];
  long long v8 = (unsigned char *)a1[4];
  int64_t v10 = v8 - v9;
  if (v8 == v9)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_60548();
    }
    unint64_t v11 = (char *)sub_21974(0xAAAAAAAAAAAAAAABLL * (v10 >> 3));
    memmove(v11, v9, v10);
    uint64_t v12 = &v11[8 * (v10 >> 3)];
  }
  if (Length > 0x17 || v11 < v12)
  {
    uint64_t v14 = 0;
    long long v15 = &BytePtr[24 * (Length / 0x18)];
    unint64_t v16 = v11;
    while (1)
    {
      if (BytePtr >= v15)
      {
LABEL_16:
        (*(void (**)(void *, uint64_t))(*a1 + 88))(a1, v14);
        v16 += 24;
        goto LABEL_21;
      }
      if (v16 >= v12) {
        goto LABEL_17;
      }
      uint64_t v17 = *((void *)BytePtr + 2);
      if (*((void *)v16 + 2) != v17) {
        break;
      }
      BytePtr += 24;
      v16 += 24;
LABEL_20:
      uint64_t v14 = (v14 + 1);
LABEL_21:
      if (BytePtr >= v15 && v16 >= v12) {
        goto LABEL_23;
      }
    }
    if (v17) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, const UInt8 *))(*a1 + 80))(a1, v14, BytePtr);
    if (v13) {
      goto LABEL_24;
    }
    BytePtr += 24;
    goto LABEL_20;
  }
LABEL_23:
  uint64_t v13 = 0;
LABEL_24:
  if (v11) {
    operator delete(v11);
  }
  return v13;
}

void sub_297DF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_297E10(uint64_t a1, int a2, CFDataRef *a3)
{
  switch(a2)
  {
    case 1635087726:
      CFDataRef v6 = CFDataCreate(0, *(const UInt8 **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
      uint64_t result = 0;
      *a3 = v6;
      break;
    case 1635148149:
      std::string __p = 0;
      long long v8 = 0;
      uint64_t v9 = 0;
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, &__p);
      *a3 = CFDataCreate(0, (const UInt8 *)__p, v8 - (unsigned char *)__p);
      if (__p)
      {
        long long v8 = __p;
        operator delete(__p);
      }
      return 0;
    case 1851878757:
      CFDataRef v4 = *(const __CFData **)(a1 + 8);
      *a3 = v4;
      CFRetain(v4);
      return 0;
    default:
      return 1064333936;
  }
  return result;
}

void sub_297EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_297F20(void *a1)
{
  *a1 = off_62B0E8;
  AUPBUnregister();
  sub_297F88((uint64_t)a1, 0);
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_297F88(uint64_t a1, const __CFString *a2)
{
  CFDataRef v4 = *(const void **)(a1 + 8);
  if (v4) {
    CFRelease(v4);
  }
  if (a2) {
    CFStringRef v5 = a2;
  }
  else {
    CFStringRef v5 = &stru_642048;
  }
  *(void *)(a1 + 8) = v5;
  CFRetain(v5);
  return AUPBPropertiesChanged();
}

uint64_t sub_297FFC(uint64_t a1, const __CFString *a2)
{
  *(void *)a1 = off_62B0E8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  sub_297F88(a1, a2);
  AUPBRegister();
  return a1;
}

void sub_298064(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_298080(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t sub_2980A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t sub_2980C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t sub_2980EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t sub_298110(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t sub_298134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_298158(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void sub_29817C(uint64_t a1)
{
  sub_2981B4(a1);

  operator delete();
}

uint64_t sub_2981B4(uint64_t a1)
{
  *(void *)a1 = off_62B158;
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v30 = 136315650;
        long long v31 = "SystemSettingsManager_Aspen.cpp";
        __int16 v32 = 1024;
        int v33 = 1017;
        __int16 v34 = 2048;
        uint64_t v35 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d +- SystemSettingsManager_Aspen[%p]::~SystemSettingsManager_Aspen()", (uint8_t *)&v30, 0x1Cu);
      }
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 488));
  sub_45F50((void *)(a1 + 456));
  uint64_t v4 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_2987A4(*(void **)(a1 + 400));
  sub_2987A4(*(void **)(a1 + 376));
  sub_2987A4(*(void **)(a1 + 352));
  sub_2987A4(*(void **)(a1 + 328));
  sub_2987A4(*(void **)(a1 + 304));
  sub_2987A4(*(void **)(a1 + 280));
  uint64_t v5 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  return a1;
}

void sub_298798(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_2987A4(void *a1)
{
  if (a1)
  {
    sub_2987A4(*a1);
    sub_2987A4(a1[1]);
    uint64_t v2 = a1[5];
    a1[5] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_298824(uint64_t a1)
{
  uint64_t v1 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v2 = *(unsigned int *)(sub_3AEEEC() + 8);
  std::mutex::unlock(v1);
  return v2;
}

void sub_298860(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_298878(uint64_t a1)
{
  sub_161714((uint64_t)v16, @"MaggieDebugLevel", 0);
  if (v16[0])
  {
    *(void *)AudioTimeStamp buf = CFStringCreateWithCString(0, "IO", 0x600u);
    uint8_t buf[8] = 1;
    CFComparisonResult v2 = CFStringCompare(theString1[0], *(CFStringRef *)buf, 0);
    sub_72924((uint64_t)buf);
    if (v2)
    {
      *(void *)AudioTimeStamp buf = CFStringCreateWithCString(0, "Always", 0x600u);
      uint8_t buf[8] = 1;
      BOOL v3 = CFEqual(theString1[0], *(CFStringRef *)buf);
      sub_72924((uint64_t)buf);
      int v4 = 2 * v3;
    }
    else
    {
      int v4 = 1;
    }
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = (os_log_t *)sub_32A48(10);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_21C8C(__p, off_62B670[v4]);
    uint64_t v7 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v19 = 1024;
    int v20 = 579;
    __int16 v21 = 2080;
    uint64_t v22 = "MaggieDebugLevel";
    __int16 v23 = 2080;
    uint64_t v24 = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_72924((uint64_t)theString1);
  if (*(_DWORD *)(a1 + 48) != v4)
  {
    *(_DWORD *)(a1 + 48) = v4;
    uint64_t v9 = *(void **)(a1 + 344);
    uint64_t v10 = (void *)(a1 + 352);
    if (v9 != v10)
    {
      do
      {
        uint64_t result = (uint64_t)sub_298AF0(v9[5]);
        uint64_t v11 = (void *)v9[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v9[2];
            BOOL v13 = *v12 == (void)v9;
            uint64_t v9 = v12;
          }
          while (!v13);
        }
        uint64_t v9 = v12;
      }
      while (v12 != v10);
    }
  }
  return result;
}

void sub_298AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_298AF0(uint64_t a1)
{
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v8 = a1 + 24;
  char v9 = (*(uint64_t (**)(uint64_t))(v2 + 16))(a1 + 24);
  int v4 = *(void (**)(uint64_t))(v3 - 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    sub_523D8(v7, v3);
    v4(v5);
    sub_52380(v7);
  }
  return sub_3BCAC(&v8);
}

void sub_298B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, char a11)
{
}

void sub_298BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 448);
  uint64_t v7 = v4;
  if (v4) {
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  char v8 = v4;
  if (*(unsigned char *)(a1 + 480))
  {
    uint64_t v5 = operator new(0x18uLL);
    v5[1] = a1 + 456;
    void v5[2] = a2;
    uint64_t v6 = *(void *)(a1 + 456);
    void *v5 = v6;
    *(void *)(v6 + 8) = v5;
    *(void *)(a1 + 456) = v5;
    ++*(void *)(a1 + 472);
    sub_3BCAC(&v7);
  }
  else
  {
    sub_3BCAC(&v7);
    sub_298C6C(a2);
  }
}

void sub_298C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_298C6C(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 312))(&v5);
  if (v6)
  {
    v6(a1, v7);
  }
  else
  {
    uint64_t v3 = (os_log_t *)sub_32A48(15);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      char v9 = "SystemSettingsManager_Aspen.cpp";
      __int16 v10 = 1024;
      int v11 = 661;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot find valid serialization listener - abandoning command", buf, 0x12u);
    }
    if (a1) {
      (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
    }
  }
}

uint64_t sub_298DA4()
{
  uint64_t result = qword_650058;
  if (!qword_650058)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "SystemSettingsManager_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 1048;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [sSystemSettingsManager is NULL]: \"sSystemSettingsManager is NULL!\"", (uint8_t *)&v4, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sSystemSettingsManager is NULL!");
  }
  return result;
}

void sub_298EA8(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_298EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 448);
  *(void *)AudioTimeStamp buf = v8;
  if (v8) {
    LOBYTE(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  uint8_t buf[8] = v8;
  char v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
  *(void *)(a1 + 424) = a2;
  *(void *)(a1 + 432) = a3;
  *(void *)(a1 + 440) = a4;
  uint64_t result = sub_3BCAC(buf);
  if ((v9 & 1) == 0)
  {
    uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
    if (result)
    {
      uint64_t v11 = *(void *)(a1 + 448);
      uint64_t v24 = v11;
      if (v11) {
        LOBYTE(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
      }
      char v25 = v11;
      uint64_t v12 = (os_log_t *)sub_32A48(15);
      BOOL v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 472);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v27 = 1024;
        int v28 = 1756;
        __int16 v29 = 2048;
        uint64_t v30 = v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Dispatching %lu cached commands to the serializer (plus any others that come in before dispatching completes)", buf, 0x1Cu);
      }
      sub_3BCAC(&v24);
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
      if (!result)
      {
        __int16 v21 = (os_log_t *)sub_32A48(13);
        uint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
          __int16 v27 = 1024;
          int v28 = 1759;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The serialization context is invalid; cannot di"
            "spatch commands\"",
            buf,
            0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 1852797029;
      }
      while (*(unsigned char *)(a1 + 480))
      {
        uint64_t v15 = *(void *)(a1 + 448);
        *(void *)AudioTimeStamp buf = v15;
        uint8_t buf[8] = 0;
        if (v15) {
          LOBYTE(v15) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
        }
        uint8_t buf[8] = v15;
        uint64_t v16 = *(void *)(a1 + 472);
        if (v16)
        {
          uint64_t v17 = *(uint64_t **)(a1 + 464);
          uint64_t v18 = v17[2];
          uint64_t v19 = *v17;
          *(void *)(v19 + 8) = v17[1];
          *(void *)v17[1] = v19;
          *(void *)(a1 + 472) = v16 - 1;
          operator delete(v17);
          sub_3BCAC(buf);
          if (v18) {
            sub_298C6C(v18);
          }
        }
        else
        {
          sub_3BCAC(buf);
        }
        uint64_t v20 = *(void *)(a1 + 448);
        *(void *)AudioTimeStamp buf = v20;
        uint8_t buf[8] = 0;
        if (v20) {
          LOBYTE(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        }
        uint8_t buf[8] = v20;
        if (!*(void *)(a1 + 472)) {
          *(unsigned char *)(a1 + 480) = 0;
        }
        uint64_t result = sub_3BCAC(buf);
      }
    }
  }
  return result;
}

void sub_299268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

unsigned char *sub_299290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 448);
  uint64_t v6 = v4;
  if (v4) {
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  char v7 = v4;
  *(void *)(a2 + 16) = *(void *)(a1 + 440);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 424);
  return sub_3BCAC(&v6);
}

BOOL sub_29930C(void *a1)
{
  uint64_t v2 = a1[56];
  uint64_t v5 = v2;
  if (v2) {
    LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  char v6 = v2;
  if (a1[53]) {
    BOOL v3 = a1[54] != 0;
  }
  else {
    BOOL v3 = 0;
  }
  sub_3BCAC(&v5);
  return v3;
}

uint64_t sub_299390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t sub_299398(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void sub_2993A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1585;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetVibrationUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 232);
  uint64_t v9 = *(void *)(v8 + 24);
  v8 += 24;
  *(void *)uint64_t v12 = v8;
  unsigned char v12[8] = (*(uint64_t (**)(uint64_t))(v9 + 16))(v8);
  *(void *)(v8 - 16) = a2;
  *(void *)(v8 - 8) = a3;
  sub_3BCAC(v12);
  uint64_t v10 = sub_32A48(10);
  if (*(unsigned char *)(v10 + 8))
  {
    uint64_t v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1589;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetVibrationUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
}

uint64_t sub_299564(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_29956C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 417);
}

uint64_t sub_299574(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 416);
}

BOOL sub_29957C()
{
  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"Assistant Enabled", @"com.apple.assistant.support", &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat) {
    return 0;
  }
  int v1 = AppBooleanValue;
  uint64_t v2 = (os_log_t *)sub_32A48(10);
  BOOL v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      char v7 = "SystemSettingsManager_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 1678;
      __int16 v10 = 2080;
      uint64_t v11 = "com.apple.assistant.support/Assistant Enabled";
      __int16 v12 = 1024;
      int v13 = v1;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
    }
  }
  return v1 != 0;
}

void sub_299698(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_32A48(10);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136315650;
        __int16 v12 = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1655;
        __int16 v15 = 2048;
        unint64_t v16 = a2;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p", (uint8_t *)&v11, 0x1Cu);
      }
    }
  }
  uint64_t v6 = *(void **)(a1 + 376);
  if (v6)
  {
    char v7 = (uint64_t *)(a1 + 376);
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        __int16 v10 = v6;
      }
      else {
        __int16 v10 = v6 + 1;
      }
      if (v9) {
        char v7 = v6;
      }
      uint64_t v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 != (uint64_t *)(a1 + 376) && v7[4] <= a2) {
      sub_2997C0((uint64_t **)(a1 + 368), v7);
    }
  }
}

void sub_2997C0(uint64_t **a1, uint64_t *a2)
{
  BOOL v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      BOOL v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = a2;
    do
    {
      uint64_t v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  char v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_89144(v7, a2);
  uint64_t v8 = a2[5];
  a2[5] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }

  operator delete(a2);
}

void sub_29987C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1645;
        __int16 v19 = 2048;
        unint64_t v20 = a2;
        __int16 v21 = 2048;
        uint64_t v22 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p, inClientData %p", (uint8_t *)&v15, 0x26u);
      }
    }
  }
  uint64_t v8 = *(void **)(a1 + 376);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 376);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      uint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)(a1 + 376) && v9[4] <= a2)
    {
      __int16 v13 = (os_log_t *)sub_32A48(10);
      int v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315650;
          unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
          __int16 v17 = 1024;
          int v18 = 1647;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant registration for listener proc at %p will override previous listener", (uint8_t *)&v15, 0x1Cu);
        }
      }
    }
  }
  operator new();
}

void sub_299AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_299B54(uint64_t **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        char v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    char v7 = a1 + 1;
LABEL_9:
    BOOL v9 = (uint64_t *)v7;
    char v7 = (uint64_t **)operator new(0x30uLL);
    long long v10 = *a3;
    *((void *)a3 + 1) = 0;
    *((_OWORD *)v7 + 2) = v10;
    *char v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    BOOL v11 = (uint64_t *)**a1;
    __int16 v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      __int16 v12 = *v6;
    }
    sub_46D00(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_299C24(void *a1)
{
  *a1 = off_62B5D8;
  sub_AEF0C((uint64_t)(a1 + 3));

  operator delete();
}

void *sub_299C88(void *a1)
{
  *a1 = off_62B5D8;
  sub_AEF0C((uint64_t)(a1 + 3));
  return a1;
}

uint64_t sub_299CCC(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 68));
  return v1 & 1;
}

uint64_t sub_299CDC()
{
  return *(void *)sub_3AEEEC();
}

void sub_299CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1526;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetReduceBassUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 224);
  uint64_t v9 = *(void *)(v8 + 24);
  v8 += 24;
  *(void *)__int16 v12 = v8;
  unsigned char v12[8] = (*(uint64_t (**)(uint64_t))(v9 + 16))(v8);
  *(void *)(v8 - 16) = a2;
  *(void *)(v8 - 8) = a3;
  sub_3BCAC(v12);
  uint64_t v10 = sub_32A48(10);
  if (*(unsigned char *)(v10 + 8))
  {
    BOOL v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1531;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetReduceBassUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
}

uint64_t sub_299EC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

void sub_299EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1516;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetExternalPowerSourceUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 216);
  uint64_t v9 = *(void *)(v8 + 24);
  v8 += 24;
  *(void *)__int16 v12 = v8;
  unsigned char v12[8] = (*(uint64_t (**)(uint64_t))(v9 + 16))(v8);
  *(void *)(v8 - 16) = a2;
  *(void *)(v8 - 8) = a3;
  sub_3BCAC(v12);
  uint64_t v10 = sub_32A48(10);
  if (*(unsigned char *)(v10 + 8))
  {
    BOOL v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1520;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetExternalPowerSourceUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
}

uint64_t sub_29A08C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_29A094(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void sub_29A09C(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    BOOL v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        char v7 = "SystemSettingsManager_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1357;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateLowPowerModeState()", (uint8_t *)&v6, 0x1Cu);
      }
    }
  }
  uint64_t v4 = sub_32A48(10);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        char v7 = "SystemSettingsManager_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1368;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateLowPowerModeState()", (uint8_t *)&v6, 0x1Cu);
      }
    }
  }
}

void sub_29A1F0(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_32A48(10);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        uint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1201;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::RemoveLowPowerModeUpdateListener(inProc %p)", (uint8_t *)&v15, 0x26u);
      }
    }
  }
  int v6 = *(void **)(a1 + 400);
  if (!v6) {
    goto LABEL_16;
  }
  char v7 = (uint64_t *)(a1 + 400);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      __int16 v10 = v6;
    }
    else {
      __int16 v10 = v6 + 1;
    }
    if (v9) {
      char v7 = v6;
    }
    int v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (uint64_t *)(a1 + 400) && v7[4] <= a2)
  {
    sub_2997C0((uint64_t **)(a1 + 392), v7);
  }
  else
  {
LABEL_16:
    uint64_t v11 = sub_32A48(10);
    if (*(unsigned char *)(v11 + 8))
    {
      __int16 v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          int v15 = 136315650;
          uint64_t v16 = "SystemSettingsManager_Aspen.cpp";
          __int16 v17 = 1024;
          int v18 = 1211;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Proc at %p is not currently registered as an LPM listener. Ignoring.", (uint8_t *)&v15, 0x1Cu);
        }
      }
    }
  }
  uint64_t v13 = sub_32A48(10);
  if (*(unsigned char *)(v13 + 8))
  {
    int v14 = *(NSObject **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        uint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1215;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::RemoveLowPowerModeListener(inProc %p)", (uint8_t *)&v15, 0x26u);
      }
    }
  }
}

void sub_29A42C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136316162;
        uint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1187;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        __int16 v23 = 2048;
        uint64_t v24 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::AddLowPowerUpdateListener(inProc %p, inClientData %p)", (uint8_t *)&v15, 0x30u);
      }
    }
  }
  unint64_t v8 = *(void **)(a1 + 400);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 400);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)(a1 + 400) && v9[4] <= a2)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(10);
      int v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315650;
          uint64_t v16 = "SystemSettingsManager_Aspen.cpp";
          __int16 v17 = 1024;
          int v18 = 1190;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant registration for listener proc at %p will override previous listener", (uint8_t *)&v15, 0x1Cu);
        }
      }
    }
  }
  operator new();
}

void sub_29A73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29A79C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44);
}

void sub_29A7A4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_32A48(10);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 136315650;
        __int16 v12 = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1451;
        __int16 v15 = 2048;
        unint64_t v16 = a2;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p", (uint8_t *)&v11, 0x1Cu);
      }
    }
  }
  uint64_t v6 = *(void **)(a1 + 352);
  if (v6)
  {
    char v7 = (uint64_t *)(a1 + 352);
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = v6 + 1;
      }
      if (v9) {
        char v7 = v6;
      }
      uint64_t v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 != (uint64_t *)(a1 + 352) && v7[4] <= a2) {
      sub_2997C0((uint64_t **)(a1 + 344), v7);
    }
  }
}

void sub_29A8CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1441;
        __int16 v19 = 2048;
        unint64_t v20 = a2;
        __int16 v21 = 2048;
        uint64_t v22 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d inProc %p, inClientData %p", (uint8_t *)&v15, 0x26u);
      }
    }
  }
  unint64_t v8 = *(void **)(a1 + 352);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 352);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)(a1 + 352) && v9[4] <= a2)
    {
      __int16 v13 = (os_log_t *)sub_32A48(10);
      int v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315650;
          unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
          __int16 v17 = 1024;
          int v18 = 1443;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant registration for listener proc at %p will override previous listener", (uint8_t *)&v15, 0x1Cu);
        }
      }
    }
  }
  operator new();
}

void sub_29AB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29ABA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_29ABAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_29ABB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_29ABBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_29ABC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void sub_29ABCC(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_32A48(10);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1232;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::RemoveANCPreferenceUpdateListener(inProc %p)", (uint8_t *)&v15, 0x26u);
      }
    }
  }
  uint64_t v6 = *(void **)(a1 + 304);
  if (!v6) {
    goto LABEL_16;
  }
  char v7 = (uint64_t *)(a1 + 304);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      char v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (uint64_t *)(a1 + 304) && v7[4] <= a2)
  {
    sub_2997C0((uint64_t **)(a1 + 296), v7);
  }
  else
  {
LABEL_16:
    BOOL v11 = (os_log_t *)sub_32A48(10);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315650;
      unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 1241;
      __int16 v19 = 2048;
      unint64_t v20 = a2;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Proc at %p is not currently registered as a ANC listener. Ignoring.", (uint8_t *)&v15, 0x1Cu);
    }
  }
  uint64_t v13 = sub_32A48(10);
  if (*(unsigned char *)(v13 + 8))
  {
    int v14 = *(NSObject **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1244;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::RemoveANCPreferenceUpdateListener(inProc %p)", (uint8_t *)&v15, 0x26u);
      }
    }
  }
}

void sub_29AE00(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136316162;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1221;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        __int16 v23 = 2048;
        uint64_t v24 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::AddANCPreferenceUpdateListener(inProc %p, inClientData %p)", (uint8_t *)&v15, 0x30u);
      }
    }
  }
  unint64_t v8 = *(void **)(a1 + 304);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 304);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)(a1 + 304) && v9[4] <= a2)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(10);
      int v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315650;
          unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
          __int16 v17 = 1024;
          int v18 = 1223;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant registration for listener proc at %p will override previous listener", (uint8_t *)&v15, 0x1Cu);
        }
      }
    }
  }
  operator new();
}

void sub_29B110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29B170(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void sub_29B178(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_32A48(10);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1169;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::RemoveHearingAidCompliancePreferenceUpdateListener(inProc %p)", (uint8_t *)&v15, 0x26u);
      }
    }
  }
  uint64_t v6 = *(void **)(a1 + 280);
  if (!v6) {
    goto LABEL_16;
  }
  char v7 = (uint64_t *)(a1 + 280);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = v6 + 1;
    }
    if (v9) {
      char v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (uint64_t *)(a1 + 280) && v7[4] <= a2)
  {
    sub_2997C0((uint64_t **)(a1 + 272), v7);
  }
  else
  {
LABEL_16:
    BOOL v11 = (os_log_t *)sub_32A48(10);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315650;
      unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 1178;
      __int16 v19 = 2048;
      unint64_t v20 = a2;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Proc at %p is not currently registered as a HAC listener. Ignoring.", (uint8_t *)&v15, 0x1Cu);
    }
  }
  uint64_t v13 = sub_32A48(10);
  if (*(unsigned char *)(v13 + 8))
  {
    int v14 = *(NSObject **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136315906;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1181;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::RemoveHearingAidCompliancePreferenceUpdateListener(inProc %p)", (uint8_t *)&v15, 0x26u);
      }
    }
  }
}

void sub_29B3AC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136316162;
        unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1157;
        __int16 v19 = 2048;
        unint64_t v20 = a1;
        __int16 v21 = 2048;
        unint64_t v22 = a2;
        __int16 v23 = 2048;
        uint64_t v24 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::AddHearingAidCompliancePreferenceUpdateListener(inProc %p, inClientData %p)", (uint8_t *)&v15, 0x30u);
      }
    }
  }
  unint64_t v8 = *(void **)(a1 + 280);
  if (v8)
  {
    BOOL v9 = (void *)(a1 + 280);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        __int16 v12 = v8;
      }
      else {
        __int16 v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      unint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)(a1 + 280) && v9[4] <= a2)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(10);
      int v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315650;
          unint64_t v16 = "SystemSettingsManager_Aspen.cpp";
          __int16 v17 = 1024;
          int v18 = 1159;
          __int16 v19 = 2048;
          unint64_t v20 = a2;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant registration for listener proc at %p will override previous listener", (uint8_t *)&v15, 0x1Cu);
        }
      }
    }
  }
  operator new();
}

void sub_29B6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29B71C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_29B724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1124;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetHighQualityPCMPreferenceUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(v8 + 24);
  v8 += 24;
  *(void *)__int16 v12 = v8;
  unsigned char v12[8] = (*(uint64_t (**)(uint64_t))(v9 + 16))(v8);
  *(void *)(v8 - 16) = a2;
  *(void *)(v8 - 8) = a3;
  sub_3BCAC(v12);
  uint64_t v10 = sub_32A48(10);
  if (*(unsigned char *)(v10 + 8))
  {
    BOOL v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1128;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetHighQualityPCMPreferenceUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
}

uint64_t sub_29B8E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void sub_29B8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(10);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1070;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SetMultiChannelPreferenceUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(v8 + 24);
  v8 += 24;
  *(void *)__int16 v12 = v8;
  unsigned char v12[8] = (*(uint64_t (**)(uint64_t))(v9 + 16))(v8);
  *(void *)(v8 - 16) = a2;
  *(void *)(v8 - 8) = a3;
  sub_3BCAC(v12);
  uint64_t v10 = sub_32A48(10);
  if (*(unsigned char *)(v10 + 8))
  {
    BOOL v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v12 = 136316162;
        *(void *)&v12[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v13 = 1024;
        int v14 = 1074;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        uint64_t v20 = a3;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SetMultiChannelPreferenceUpdateListener(inProc %p, inClientData %p)", v12, 0x30u);
      }
    }
  }
}

uint64_t sub_29BAB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_29BABC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_29BAC4(uint64_t a1)
{
}

uint64_t sub_29BACC(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_62B5D8;
  sub_AEF58(a1 + 24, (uint64_t)"SettingListenerMutex");
  *(void *)a1 = off_62B5B8;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a2;
  *(void *)(a1 + 128) = _Block_copy(a3);
  return a1;
}

void sub_29BB70(_Unwind_Exception *a1)
{
  void *v1 = v2;
  sub_AEF0C(v3);
  _Unwind_Resume(a1);
}

void sub_29BB88(uint64_t a1)
{
}

void sub_29BB90(uint64_t a1)
{
}

void sub_29BB98(uint64_t a1)
{
}

void sub_29BBA0(uint64_t a1)
{
}

void sub_29BBA8(uint64_t a1)
{
}

void sub_29BBB0(uint64_t a1)
{
}

void sub_29BBB8(uint64_t a1)
{
}

void sub_29BBC0(uint64_t a1)
{
}

void sub_29BBC8(uint64_t a1)
{
}

void sub_29BBD0(uint64_t a1)
{
}

void sub_29BBD8(uint64_t a1)
{
}

void sub_29BBE0(uint64_t a1)
{
}

void sub_29BBE8(uint64_t a1)
{
}

void sub_29BBF0(uint64_t a1)
{
}

uint64_t sub_29BBF8(uint64_t a1)
{
  return sub_298878(*(void *)(a1 + 32));
}

void sub_29BC00()
{
}

void sub_29BC08(uint64_t a1)
{
}

void sub_29BC10(uint64_t a1)
{
}

void sub_29BC18(uint64_t a1)
{
}

void sub_29BC20(uint64_t a1)
{
}

void sub_29BC28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_t *)sub_32A48(10);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "SystemSettingsManager_Aspen.cpp";
    __int16 v6 = 1024;
    int v7 = 871;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating VolumeLimit state", (uint8_t *)&v4, 0x12u);
  }
  sub_29CDEC(v1);
}

void sub_29BCF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_t *)sub_32A48(10);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "SystemSettingsManager_Aspen.cpp";
    __int16 v6 = 1024;
    int v7 = 892;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating VolumeLimit state", (uint8_t *)&v4, 0x12u);
  }
  sub_29CDEC(v1);
}

BOOL sub_29BDB8(uint64_t a1)
{
  uint64_t v2 = *(const char **)(a1 + 120);
  uint64_t v3 = (int *)(a1 + 112);
  global_queue = dispatch_get_global_queue(0, 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_2A0368;
  handler[3] = &unk_62B608;
  handler[4] = a1;
  return notify_register_dispatch(v2, v3, global_queue, handler) == 0;
}

void sub_29BE60(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v19 = 136315650;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1079;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateSilentModeState()", v19, 0x1Cu);
      }
    }
  }
  uint64_t v4 = sub_29F780(*(_DWORD *)(*(void *)(a1 + 80) + 112));
  int v5 = v4 != 0;
  if (*(_DWORD *)(a1 + 8) != v5)
  {
    *(_DWORD *)(a1 + 8) = v5;
    if (v4) {
      __int16 v6 = "enabled";
    }
    else {
      __int16 v6 = "disabled";
    }
    int v7 = (os_log_t *)sub_32A48(10);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int16 v19 = 136315650;
      *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 1088;
      __int16 v22 = 2080;
      __int16 v23 = v6;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Silent mode state updated. State is %s.", v19, 0x1Cu);
    }
    uint64_t v9 = sub_32A48(10);
    uint64_t v10 = sub_32A48(15);
    char v11 = 0;
    uint64_t v12 = 0;
    *(void *)__int16 v19 = 0x100000002;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *(int *)&v19[4 * v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1;
      if (v15)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_20:
        uint64_t v16 = *(NSObject **)v9;
        if (v16)
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int16 v19 = 136315650;
            *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
            __int16 v20 = 1024;
            int v21 = 1092;
            __int16 v22 = 2080;
            __int16 v23 = v6;
            _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Queueing silent mode notification (%s).", v19, 0x1Cu);
          }
        }
LABEL_23:
        operator new();
      }
    }
    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
    if (*(void *)(v9 + 8)) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  uint64_t v17 = sub_32A48(10);
  if (*(unsigned char *)(v17 + 8))
  {
    uint64_t v18 = *(NSObject **)v17;
    if (*(void *)v17)
    {
      if (os_log_type_enabled(*(os_log_t *)v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v19 = 136315650;
        *(void *)&v19[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1096;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateSilentModeState()", v19, 0x1Cu);
      }
    }
  }
}

void sub_29C1C8(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1102;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateMultiChannelPreferenceState()", buf, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.preferences-sounds");
  if (MGGetSInt32Answer() == 4) {
    int v4 = 3;
  }
  else {
    int v4 = 0;
  }
  int v17 = -1;
  if (!sub_1614F4(@"surround_sound", @"com.apple.preferences-sounds", &v17))
  {
    uint64_t v11 = sub_32A48(10);
    if ((*(unsigned char *)(v11 + 8) & 1) == 0) {
      goto LABEL_18;
    }
    os_log_t v12 = *(os_log_t *)v11;
    if (!*(void *)v11 || !os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_18;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 294;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.preferences-sounds/surround_sound";
    uint64_t v8 = "%25s:%-5d No preference for %s. Using default.";
    uint64_t v9 = v12;
    os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
    goto LABEL_17;
  }
  int v5 = v17;
  if ((v17 - 3) >= 4)
  {
    __int16 v6 = (os_log_t *)sub_32A48(10);
    os_log_t v7 = *v6;
    if (!*v6 || !os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 288;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.preferences-sounds/surround_sound";
    uint64_t v8 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    uint64_t v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_17:
    _os_log_impl(&def_1E50E8, v9, v10, v8, buf, 0x1Cu);
LABEL_18:
    int v5 = v4;
  }
  uint64_t v13 = (os_log_t *)sub_32A48(10);
  uint64_t v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 297;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.preferences-sounds/surround_sound";
    __int16 v24 = 1024;
    int v25 = v5;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
  }
  if (*(_DWORD *)(a1 + 12) != v5)
  {
    *(_DWORD *)(a1 + 12) = v5;
    sub_298AF0(*(void *)(a1 + 88));
  }
  uint64_t v15 = sub_32A48(10);
  if (*(unsigned char *)(v15 + 8))
  {
    uint64_t v16 = *(NSObject **)v15;
    if (*(void *)v15)
    {
      if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1111;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateMultiChannelPreferenceState()", buf, 0x1Cu);
      }
    }
  }
}

void sub_29C528(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v24 = "SystemSettingsManager_Aspen.cpp";
        __int16 v25 = 1024;
        int v26 = 1134;
        __int16 v27 = 2048;
        int v28 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHighQualityPCMPreferenceState()", buf, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.preferences-sounds");
  int v22 = -1;
  if (!sub_1614F4(@"highQuality-enabled", @"com.apple.preferences-sounds", &v22))
  {
    uint64_t v10 = sub_32A48(10);
    unsigned int v4 = 1752260981;
    if ((*(unsigned char *)(v10 + 8) & 1) == 0) {
      goto LABEL_17;
    }
    os_log_t v11 = *(os_log_t *)v10;
    if (!*(void *)v10 || !os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 332;
    __int16 v27 = 2080;
    int v28 = "com.apple.preferences-sounds/highQuality-enabled";
    os_log_t v7 = "%25s:%-5d No preference for %s. Using default.";
    uint64_t v8 = v11;
    os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
LABEL_15:
    _os_log_impl(&def_1E50E8, v8, v9, v7, buf, 0x1Cu);
    goto LABEL_17;
  }
  unsigned int v4 = 1752260981;
  if (v22)
  {
    if (v22 == 1) {
      goto LABEL_17;
    }
    int v5 = (os_log_t *)sub_32A48(10);
    os_log_t v6 = *v5;
    if (!*v5 || !os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    __int16 v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 326;
    __int16 v27 = 2080;
    int v28 = "com.apple.preferences-sounds/highQuality-enabled";
    os_log_t v7 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    uint64_t v8 = v6;
    os_log_type_t v9 = OS_LOG_TYPE_ERROR;
    goto LABEL_15;
  }
  unsigned int v4 = 1752264550;
LABEL_17:
  os_log_t v12 = (os_log_t *)sub_32A48(10);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, v4);
    uint64_t v14 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 335;
    __int16 v27 = 2080;
    int v28 = "com.apple.preferences-sounds/highQuality-enabled";
    __int16 v29 = 2080;
    uint64_t v30 = v14;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(_DWORD *)(a1 + 16) != v4)
  {
    *(_DWORD *)(a1 + 16) = v4;
    sub_298AF0(*(void *)(a1 + 96));
    uint64_t v15 = sub_32A48(10);
    if (*(unsigned char *)(v15 + 8))
    {
      uint64_t v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, *(_DWORD *)(a1 + 16));
          int v17 = v21 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          __int16 v24 = "SystemSettingsManager_Aspen.cpp";
          __int16 v25 = 1024;
          int v26 = 1141;
          __int16 v27 = 2080;
          int v28 = (const char *)v17;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d mHighQualityPCMPrefState is now %s", buf, 0x1Cu);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  uint64_t v18 = sub_32A48(10);
  if (*(unsigned char *)(v18 + 8))
  {
    __int16 v19 = *(NSObject **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v24 = "SystemSettingsManager_Aspen.cpp";
        __int16 v25 = 1024;
        int v26 = 1144;
        __int16 v27 = 2048;
        int v28 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHighQualityPCMPreferenceState()", buf, 0x1Cu);
      }
    }
  }
}

void sub_29C964(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        int v28 = "SystemSettingsManager_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 1250;
        __int16 v31 = 2048;
        __int16 v32 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHearingAidCompliancePreferenceState()", buf, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  int v26 = -1;
  if (sub_1614F4(@"HearingAidCompliance", @"com.apple.Accessibility", &v26))
  {
    unsigned int v4 = 560488803;
    if (!v26) {
      goto LABEL_17;
    }
    if (v26 == 1)
    {
      unsigned int v4 = 543711587;
      goto LABEL_17;
    }
    uint64_t v10 = (os_log_t *)sub_32A48(10);
    os_log_t v11 = *v10;
    if (!*v10 || !os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    int v28 = "SystemSettingsManager_Aspen.cpp";
    __int16 v29 = 1024;
    int v30 = 364;
    __int16 v31 = 2080;
    __int16 v32 = "com.apple.Accessibility/HearingAidCompliance";
    os_log_t v7 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    uint64_t v8 = v11;
    os_log_type_t v9 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    uint64_t v5 = sub_32A48(10);
    unsigned int v4 = 560488803;
    if ((*(unsigned char *)(v5 + 8) & 1) == 0) {
      goto LABEL_17;
    }
    os_log_t v6 = *(os_log_t *)v5;
    if (!*(void *)v5 || !os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    int v28 = "SystemSettingsManager_Aspen.cpp";
    __int16 v29 = 1024;
    int v30 = 370;
    __int16 v31 = 2080;
    __int16 v32 = "com.apple.Accessibility/HearingAidCompliance";
    os_log_t v7 = "%25s:%-5d No preference for %s. Using default.";
    uint64_t v8 = v6;
    os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
  }
  _os_log_impl(&def_1E50E8, v8, v9, v7, buf, 0x1Cu);
LABEL_17:
  os_log_t v12 = (os_log_t *)sub_32A48(10);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, v4);
    uint64_t v14 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v28 = "SystemSettingsManager_Aspen.cpp";
    __int16 v29 = 1024;
    int v30 = 373;
    __int16 v31 = 2080;
    __int16 v32 = "com.apple.Accessibility/HearingAidCompliance";
    __int16 v33 = 2080;
    __int16 v34 = v14;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(_DWORD *)(a1 + 20) != v4)
  {
    *(_DWORD *)(a1 + 20) = v4;
    uint64_t v15 = *(void **)(a1 + 272);
    if (v15 != (void *)(a1 + 280))
    {
      do
      {
        sub_298AF0(v15[5]);
        uint64_t v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            int v17 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            int v17 = (void *)v15[2];
            BOOL v18 = *v17 == (void)v15;
            uint64_t v15 = v17;
          }
          while (!v18);
        }
        uint64_t v15 = v17;
      }
      while (v17 != (void *)(a1 + 280));
    }
    uint64_t v19 = sub_32A48(10);
    if (*(unsigned char *)(v19 + 8))
    {
      __int16 v20 = *(NSObject **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, *(_DWORD *)(a1 + 20));
          char v21 = v25 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          int v28 = "SystemSettingsManager_Aspen.cpp";
          __int16 v29 = 1024;
          int v30 = 1260;
          __int16 v31 = 2080;
          __int16 v32 = (const char *)v21;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d mHearingAidCompliancePrefState is now %s", buf, 0x1Cu);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  uint64_t v22 = sub_32A48(10);
  if (*(unsigned char *)(v22 + 8))
  {
    __int16 v23 = *(NSObject **)v22;
    if (*(void *)v22)
    {
      if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        int v28 = "SystemSettingsManager_Aspen.cpp";
        __int16 v29 = 1024;
        int v30 = 1263;
        __int16 v31 = 2048;
        __int16 v32 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHearingAidCompliancePreferenceState()", buf, 0x1Cu);
      }
    }
  }
}

void sub_29CDEC(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v63 = 1024;
        int v64 = 1373;
        __int16 v65 = 2048;
        *(void *)char v66 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateSystemAudioEffectsSettings()", buf, 0x1Cu);
      }
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  CFPreferencesAppSynchronize(@"com.apple.preferences-sounds");
  unsigned int v61 = -1;
  if (sub_1614F4(@"latenightmode", @"com.apple.preferences-sounds", &v61))
  {
    uint64_t v4 = v61;
    if (!v61)
    {
      LODWORD(v5) = 0;
      goto LABEL_20;
    }
    if (v61 == 1)
    {
      uint64_t v4 = 1;
      LODWORD(v5) = 1;
      goto LABEL_20;
    }
    uint64_t v10 = (os_log_t *)sub_32A48(10);
    os_log_t v5 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v63 = 1024;
        int v64 = 151;
        __int16 v65 = 2080;
        *(void *)char v66 = "com.apple.preferences-sounds/latenightmode";
        os_log_t v7 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
        uint64_t v8 = v5;
        os_log_type_t v9 = OS_LOG_TYPE_ERROR;
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v6 = sub_32A48(10);
    if ((*(unsigned char *)(v6 + 8) & 1) == 0) {
      goto LABEL_18;
    }
    os_log_t v5 = *(os_log_t *)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v63 = 1024;
        int v64 = 157;
        __int16 v65 = 2080;
        *(void *)char v66 = "com.apple.preferences-sounds/latenightmode";
        os_log_t v7 = "%25s:%-5d No preference for %s. Using default.";
        uint64_t v8 = v5;
        os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
LABEL_17:
        _os_log_impl(&def_1E50E8, v8, v9, v7, buf, 0x1Cu);
      }
LABEL_18:
      uint64_t v4 = 0;
      LODWORD(v5) = 0;
      goto LABEL_20;
    }
  }
  uint64_t v4 = 0;
LABEL_20:
  os_log_t v11 = (os_log_t *)sub_32A48(10);
  os_log_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(&__p, v5);
    uint64_t v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v63 = 1024;
    int v64 = 160;
    __int16 v65 = 2080;
    *(void *)char v66 = "com.apple.preferences-sounds/latenightmode";
    *(_WORD *)&v66[8] = 2080;
    int v67 = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  int v14 = sub_2A006C();
  if (!sub_20ADA4() || sub_2A006C() == 4)
  {
    uint64_t v15 = 0;
    goto LABEL_30;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v50 = sub_3E97E8(@"enhancedialoguelevel", @"com.apple.preferences-sounds", &__p);
  if (!__p.__r_.__value_.__s.__data_[0])
  {
    uint64_t v56 = sub_32A48(10);
    if ((*(unsigned char *)(v56 + 8) & 1) == 0) {
      goto LABEL_100;
    }
    os_log_t v57 = *(os_log_t *)v56;
    if (!*(void *)v56 || !os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_100;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v63 = 1024;
    int v64 = 256;
    __int16 v65 = 2080;
    *(void *)char v66 = "com.apple.preferences-sounds/enhancedialoguelevel";
    int v53 = "%25s:%-5d No preference for %s. Using default.";
    char v54 = v57;
    os_log_type_t v55 = OS_LOG_TYPE_DEBUG;
    goto LABEL_99;
  }
  uint64_t v15 = v50;
  if (v50 >= 4)
  {
    uint64_t v51 = (os_log_t *)sub_32A48(10);
    os_log_t v52 = *v51;
    if (!*v51 || !os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR)) {
      goto LABEL_100;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v63 = 1024;
    int v64 = 249;
    __int16 v65 = 2080;
    *(void *)char v66 = "com.apple.preferences-sounds/enhancedialog";
    int v53 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    char v54 = v52;
    os_log_type_t v55 = OS_LOG_TYPE_ERROR;
LABEL_99:
    _os_log_impl(&def_1E50E8, v54, v55, v53, buf, 0x1Cu);
LABEL_100:
    uint64_t v15 = 0;
  }
  char v58 = (os_log_t *)sub_32A48(10);
  int v59 = *v58;
  if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v63 = 1024;
    int v64 = 260;
    __int16 v65 = 2080;
    *(void *)char v66 = "com.apple.preferences-sounds/enhancedialoguelevel";
    *(_WORD *)&v66[8] = 1024;
    LODWORD(v67) = v15;
    _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
  }
LABEL_30:
  int v16 = *(_DWORD *)(a1 + 484);
  uint64_t v17 = sub_3AEEEC();
  sub_87458();
  int v18 = (*(uint64_t (**)(void))(qword_64A1C8 + 8))();
  *(_DWORD *)(a1 + 484) = v18;
  *(_DWORD *)(v17 + 8) = v18;
  char v19 = sub_3DE688();
  sub_3DEB58();
  if (byte_65FAF0) {
    char v20 = 1;
  }
  else {
    char v20 = v19;
  }
  byte_65FAF0 = v20;
  int v21 = sub_3DEA5C();
  uint64_t v22 = (os_log_t *)sub_32A48(24);
  __int16 v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = sub_3DE688();
    BOOL v25 = *(_DWORD *)(a1 + 484) != 0;
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v63 = 1024;
    int v64 = 1404;
    __int16 v65 = 1024;
    *(_DWORD *)char v66 = v24;
    *(_WORD *)&v66[4] = 1024;
    *(_DWORD *)&v66[6] = v25;
    LOWORD(v67) = 1024;
    *(_DWORD *)((char *)&v67 + 2) = v21;
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Current system wide PME state: %u, volume limit state: %u. PME Override state: %u", buf, 0x24u);
  }
  uint64_t v26 = *(void *)v17;
  if (v5 != (*(_DWORD *)v17 & 1) || v16 != *(_DWORD *)(v17 + 8)) {
    goto LABEL_47;
  }
  int v27 = (v26 & 4) != 0 ? 5 : 4;
  if (v14 != v27) {
    goto LABEL_47;
  }
  if (v15 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 288))(a1)) {
    int v28 = v21;
  }
  else {
    int v28 = 1;
  }
  if (v28 == 1)
  {
    uint64_t v26 = *(void *)v17;
LABEL_47:
    unint64_t v29 = v4 | (4 * (v14 == 5)) | v26 & 0xFFFFFFFFFFFFFFF8;
    if (*(_DWORD *)(a1 + 484)) {
      int v30 = 1;
    }
    else {
      int v30 = v21;
    }
    BOOL v31 = v30 == 0;
    uint64_t v32 = 2;
    if (v31) {
      uint64_t v32 = 0;
    }
    *(void *)uint64_t v17 = v32 | v29;
    if (sub_20ADA4()) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 296))(a1, v15);
    }
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "\n", 1uLL);
    std::string::append(&__p, "System Audio Effects Settings\n", 0x1EuLL);
    std::string::append(&__p, "    Late Night Mode: ", 0x15uLL);
    if (*(void *)v17) {
      __int16 v33 = "on\n";
    }
    else {
      __int16 v33 = "off\n";
    }
    if (*(void *)v17) {
      std::string::size_type v34 = 3;
    }
    else {
      std::string::size_type v34 = 4;
    }
    std::string::append(&__p, v33, v34);
    std::string::append(&__p, "    Volume Limit Mode: ", 0x17uLL);
    if ((*(void *)v17 & 2) != 0) {
      uint64_t v35 = "on\n";
    }
    else {
      uint64_t v35 = "off\n";
    }
    if ((*(void *)v17 & 2) != 0) {
      std::string::size_type v36 = 3;
    }
    else {
      std::string::size_type v36 = 4;
    }
    std::string::append(&__p, v35, v36);
    std::string::append(&__p, "    Enhanced Dialog: ", 0x15uLL);
    if ((*(void *)v17 & 4) != 0) {
      uint64_t v37 = "on\n";
    }
    else {
      uint64_t v37 = "off\n";
    }
    if ((*(void *)v17 & 4) != 0) {
      std::string::size_type v38 = 3;
    }
    else {
      std::string::size_type v38 = 4;
    }
    std::string::append(&__p, v37, v38);
    uint64_t v39 = sub_32A48(10);
    uint64_t v40 = sub_32A48(15);
    char v41 = 0;
    uint64_t v42 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v43 = *(void *)(v39 + 8);
    while (1)
    {
      uint64_t v44 = *(int *)&buf[4 * v42];
      char v45 = v41;
      if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
        break;
      }
      char v41 = 1;
      uint64_t v42 = 1;
      if (v45) {
        goto LABEL_79;
      }
    }
    if ((v43 & v44) == 0) {
      uint64_t v39 = v40;
    }
LABEL_79:
    uint64_t v46 = *(NSObject **)v39;
    if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
      __int16 v63 = 1024;
      int v64 = 1429;
      __int16 v65 = 2080;
      *(void *)char v66 = p_p;
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_INFO, "%25s:%-5d System Audio Effects Settings changed. Updated settings and queueing system audio effects notification: %s", buf, 0x1Cu);
    }
    operator new();
  }
  uint64_t v48 = sub_32A48(10);
  if (*(unsigned char *)(v48 + 8))
  {
    uint64_t v49 = *(NSObject **)v48;
    if (*(void *)v48)
    {
      if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v63 = 1024;
        int v64 = 1435;
        __int16 v65 = 2048;
        *(void *)char v66 = a1;
        _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateSystemAudioEffectsSettings()", buf, 0x1Cu);
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 488));
}

void sub_29D798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_29D7F4(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1269;
        __int16 v25 = 2048;
        uint64_t v26 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateANCPreferenceState()", (uint8_t *)&v21, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  LOBYTE(v21) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"EarpieceNoiseCancellationPreference", @"com.apple.Accessibility", (Boolean *)&v21);
  if ((_BYTE)v21)
  {
    int v5 = AppBooleanValue == 0;
  }
  else
  {
    uint64_t v6 = sub_32A48(10);
    if (*(unsigned char *)(v6 + 8))
    {
      os_log_t v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v21 = 136315650;
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          __int16 v23 = 1024;
          int v24 = 395;
          __int16 v25 = 2080;
          uint64_t v26 = "com.apple.Accessibility/EarpieceNoiseCancellationPreference";
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", (uint8_t *)&v21, 0x1Cu);
        }
      }
    }
    int v5 = 0;
  }
  uint64_t v8 = (os_log_t *)sub_32A48(10);
  os_log_type_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "Off";
    int v21 = 136315906;
    uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
    __int16 v23 = 1024;
    int v24 = 398;
    uint64_t v26 = "com.apple.Accessibility/EarpieceNoiseCancellationPreference";
    __int16 v25 = 2080;
    if (!v5) {
      uint64_t v10 = "On";
    }
    __int16 v27 = 2080;
    int v28 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", (uint8_t *)&v21, 0x26u);
  }
  if (*(_DWORD *)(a1 + 24) != v5)
  {
    *(_DWORD *)(a1 + 24) = v5;
    os_log_t v11 = *(void **)(a1 + 296);
    if (v11 != (void *)(a1 + 304))
    {
      do
      {
        sub_298AF0(v11[5]);
        os_log_t v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            os_log_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (void *)v11[2];
            BOOL v14 = *v13 == (void)v11;
            os_log_t v11 = v13;
          }
          while (!v14);
        }
        os_log_t v11 = v13;
      }
      while (v13 != (void *)(a1 + 304));
    }
    uint64_t v15 = sub_32A48(10);
    if (*(unsigned char *)(v15 + 8))
    {
      int v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = "Off";
          int v18 = *(_DWORD *)(a1 + 24);
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          int v21 = 136315650;
          if (!v18) {
            uint64_t v17 = "On";
          }
          __int16 v23 = 1024;
          int v24 = 1279;
          __int16 v25 = 2080;
          uint64_t v26 = v17;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d mANCPrefState is now %s", (uint8_t *)&v21, 0x1Cu);
        }
      }
    }
  }
  uint64_t v19 = sub_32A48(10);
  if (*(unsigned char *)(v19 + 8))
  {
    char v20 = *(NSObject **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1282;
        __int16 v25 = 2048;
        uint64_t v26 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateANCPreferenceState()", (uint8_t *)&v21, 0x1Cu);
      }
    }
  }
}

void sub_29DBB4(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1288;
        __int16 v25 = 2048;
        uint64_t v26 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidRingtonePreferenceState()", (uint8_t *)&v21, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  LOBYTE(v21) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"HearingAidRingtoneStreamingPreference", @"com.apple.Accessibility", (Boolean *)&v21);
  if ((_BYTE)v21)
  {
    int v5 = AppBooleanValue == 0;
  }
  else
  {
    uint64_t v6 = sub_32A48(10);
    if (*(unsigned char *)(v6 + 8))
    {
      os_log_t v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v21 = 136315650;
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          __int16 v23 = 1024;
          int v24 = 420;
          __int16 v25 = 2080;
          uint64_t v26 = "com.apple.Accessibility/HearingAidRingtoneStreamingPreference";
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", (uint8_t *)&v21, 0x1Cu);
        }
      }
    }
    int v5 = 0;
  }
  uint64_t v8 = (os_log_t *)sub_32A48(10);
  os_log_type_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "Do Not Play Ringtones To BTLE";
    int v21 = 136315906;
    uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
    __int16 v23 = 1024;
    int v24 = 423;
    uint64_t v26 = "com.apple.Accessibility/HearingAidRingtoneStreamingPreference";
    __int16 v25 = 2080;
    if (!v5) {
      uint64_t v10 = "Play Ringtones To BTLE";
    }
    __int16 v27 = 2080;
    int v28 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", (uint8_t *)&v21, 0x26u);
  }
  if (*(_DWORD *)(a1 + 28) != v5)
  {
    *(_DWORD *)(a1 + 28) = v5;
    os_log_t v11 = *(void **)(a1 + 320);
    if (v11 != (void *)(a1 + 328))
    {
      do
      {
        sub_298AF0(v11[5]);
        os_log_t v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            os_log_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (void *)v11[2];
            BOOL v14 = *v13 == (void)v11;
            os_log_t v11 = v13;
          }
          while (!v14);
        }
        os_log_t v11 = v13;
      }
      while (v13 != (void *)(a1 + 328));
    }
    uint64_t v15 = sub_32A48(10);
    if (*(unsigned char *)(v15 + 8))
    {
      int v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = "Do Not Play Ringtones To BTLE";
          int v18 = *(_DWORD *)(a1 + 28);
          uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
          int v21 = 136315650;
          if (!v18) {
            uint64_t v17 = "Play Ringtones To BTLE";
          }
          __int16 v23 = 1024;
          int v24 = 1298;
          __int16 v25 = 2080;
          uint64_t v26 = v17;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d mBTLEHearingAidRingtonePrefState is now %s", (uint8_t *)&v21, 0x1Cu);
        }
      }
    }
  }
  uint64_t v19 = sub_32A48(10);
  if (*(unsigned char *)(v19 + 8))
  {
    char v20 = *(NSObject **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 136315650;
        uint64_t v22 = "SystemSettingsManager_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 1301;
        __int16 v25 = 2048;
        uint64_t v26 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidRingtonePreferenceState()", (uint8_t *)&v21, 0x1Cu);
      }
    }
  }
}

void sub_29DF74(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 136315650;
        BOOL v14 = "SystemSettingsManager_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1307;
        __int16 v17 = 2048;
        int v18 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidSystemSoundsPreferenceState()", (uint8_t *)&v13, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.HearingAids");
  LOBYTE(v13) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"HearingAidSystemSoundsStream", @"com.apple.HearingAids", (Boolean *)&v13);
  if ((_BYTE)v13)
  {
    int v5 = AppBooleanValue == 0;
  }
  else
  {
    uint64_t v6 = sub_32A48(10);
    if (*(unsigned char *)(v6 + 8))
    {
      os_log_t v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v13 = 136315650;
          BOOL v14 = "SystemSettingsManager_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 445;
          __int16 v17 = 2080;
          int v18 = "com.apple.HearingAids/HearingAidSystemSoundsStream";
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", (uint8_t *)&v13, 0x1Cu);
        }
      }
    }
    int v5 = 1;
  }
  uint64_t v8 = (os_log_t *)sub_32A48(10);
  os_log_type_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "Do Not Play System Sounds To BTLE";
    int v13 = 136315906;
    BOOL v14 = "SystemSettingsManager_Aspen.cpp";
    __int16 v15 = 1024;
    int v16 = 448;
    int v18 = "com.apple.HearingAids/HearingAidSystemSoundsStream";
    __int16 v17 = 2080;
    if (!v5) {
      uint64_t v10 = "Play System Sounds To BTLE";
    }
    __int16 v19 = 2080;
    char v20 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", (uint8_t *)&v13, 0x26u);
  }
  if (*(_DWORD *)(a1 + 32) != v5)
  {
    *(_DWORD *)(a1 + 32) = v5;
    operator new();
  }
  uint64_t v11 = sub_32A48(10);
  if (*(unsigned char *)(v11 + 8))
  {
    os_log_t v12 = *(NSObject **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 136315650;
        BOOL v14 = "SystemSettingsManager_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1316;
        __int16 v17 = 2048;
        int v18 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateBTLEHearingAidSystemSoundsPreferenceState()", (uint8_t *)&v13, 0x1Cu);
      }
    }
  }
}

void sub_29E2B8(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1322;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHearingAidCallAudioRoutingPreferenceState()", buf, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.HearingAids");
  int v17 = 0;
  sub_21C8C(&__p, "Automatic");
  if (sub_1614F4(@"HearingAidsCallAudioRoute", @"com.apple.HearingAids", &v17))
  {
    if (v17)
    {
      if (v17 == 1)
      {
        if (v16 < 0)
        {
          uint64_t v15 = 5;
          p_p = (char *)__p;
        }
        else
        {
          char v16 = 5;
          p_p = (char *)&__p;
        }
        strcpy(p_p, "Never");
        int v7 = 1;
        goto LABEL_21;
      }
LABEL_14:
      int v7 = 2;
      goto LABEL_21;
    }
    if (v16 < 0)
    {
      uint64_t v15 = 6;
      uint64_t v8 = (char *)__p;
    }
    else
    {
      char v16 = 6;
      uint64_t v8 = (char *)&__p;
    }
    int v7 = 0;
    strcpy(v8, "Always");
  }
  else
  {
    uint64_t v5 = sub_32A48(10);
    if ((*(unsigned char *)(v5 + 8) & 1) == 0) {
      goto LABEL_14;
    }
    uint64_t v6 = *(NSObject **)v5;
    if (!*(void *)v5) {
      goto LABEL_14;
    }
    int v7 = 2;
    if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      __int16 v19 = "SystemSettingsManager_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 484;
      __int16 v22 = 2080;
      __int16 v23 = "com.apple.HearingAids/HearingAidsCallAudioRoute";
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", buf, 0x1Cu);
    }
  }
LABEL_21:
  os_log_type_t v9 = (os_log_t *)sub_32A48(10);
  uint64_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = &__p;
    if (v16 < 0) {
      uint64_t v11 = __p;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 487;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.HearingAids/HearingAidsCallAudioRoute";
    __int16 v24 = 2080;
    __int16 v25 = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
  if (*(_DWORD *)(a1 + 36) != v7)
  {
    *(_DWORD *)(a1 + 36) = v7;
    operator new();
  }
  uint64_t v12 = sub_32A48(10);
  if (*(unsigned char *)(v12 + 8))
  {
    int v13 = *(NSObject **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1331;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHearingAidCallAudioRoutingPreferenceState()", buf, 0x1Cu);
      }
    }
  }
}

void sub_29E6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_29E6CC(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1337;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateHearingAidMediaAudioRoutingPreferenceState()", buf, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.HearingAids");
  int v17 = 0;
  sub_21C8C(&__p, "Automatic");
  if (sub_1614F4(@"HearingAidsMediaAudioRoute", @"com.apple.HearingAids", &v17))
  {
    if (v17)
    {
      if (v17 == 1)
      {
        if (v16 < 0)
        {
          uint64_t v15 = 5;
          p_p = (char *)__p;
        }
        else
        {
          char v16 = 5;
          p_p = (char *)&__p;
        }
        strcpy(p_p, "Never");
        int v7 = 1;
        goto LABEL_21;
      }
LABEL_14:
      int v7 = 2;
      goto LABEL_21;
    }
    if (v16 < 0)
    {
      uint64_t v15 = 6;
      uint64_t v8 = (char *)__p;
    }
    else
    {
      char v16 = 6;
      uint64_t v8 = (char *)&__p;
    }
    int v7 = 0;
    strcpy(v8, "Always");
  }
  else
  {
    uint64_t v5 = sub_32A48(10);
    if ((*(unsigned char *)(v5 + 8) & 1) == 0) {
      goto LABEL_14;
    }
    uint64_t v6 = *(NSObject **)v5;
    if (!*(void *)v5) {
      goto LABEL_14;
    }
    int v7 = 2;
    if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      __int16 v19 = "SystemSettingsManager_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 523;
      __int16 v22 = 2080;
      __int16 v23 = "com.apple.HearingAids/HearingAidsMediaAudioRoute";
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", buf, 0x1Cu);
    }
  }
LABEL_21:
  os_log_type_t v9 = (os_log_t *)sub_32A48(10);
  uint64_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = &__p;
    if (v16 < 0) {
      uint64_t v11 = __p;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v19 = "SystemSettingsManager_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 526;
    __int16 v22 = 2080;
    __int16 v23 = "com.apple.HearingAids/HearingAidsMediaAudioRoute";
    __int16 v24 = 2080;
    __int16 v25 = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
  if (*(_DWORD *)(a1 + 40) != v7)
  {
    *(_DWORD *)(a1 + 40) = v7;
    operator new();
  }
  uint64_t v12 = sub_32A48(10);
  if (*(unsigned char *)(v12 + 8))
  {
    int v13 = *(NSObject **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = "SystemSettingsManager_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1346;
        __int16 v22 = 2048;
        __int16 v23 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHearingAidMediaAudioRoutingPreferenceState()", buf, 0x1Cu);
      }
    }
  }
}

void sub_29EAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_29EAE0()
{
}

void sub_29EB54(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v26 = 1024;
        int v27 = 1538;
        __int16 v28 = 2048;
        unint64_t v29 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateExternalPowerSourceState()", buf, 0x1Cu);
      }
    }
  }
  CFDictionaryRef v4 = IOPSCopyExternalPowerAdapterDetails();
  sub_22084(&cf, v4);
  if (!cf)
  {
    int v19 = 2;
    goto LABEL_32;
  }
  CFNumberRef v5 = (const __CFNumber *)sub_7E8C8((const __CFDictionary *)cf, "FamilyCode");
  if (!v5) {
    goto LABEL_13;
  }
  CFNumberRef v6 = sub_99440(v5);
  if (!((unint64_t)v6 >> 32)) {
    goto LABEL_13;
  }
  int v7 = (int)v6;
  uint64_t v8 = (os_log_t *)sub_32A48(10);
  os_log_type_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "IOPowerSourcesInterface.cpp";
    __int16 v26 = 1024;
    int v27 = 35;
    __int16 v28 = 1024;
    LODWORD(v29) = v7;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Details dictionary: familyCode %d", buf, 0x18u);
  }
  int v10 = 3;
  if (v7 != -536723450 && v7 != -536723448)
  {
LABEL_13:
    CFDictionaryRef v11 = (const __CFDictionary *)cf;
    if (!cf
      || (CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"IsWireless", 10, 0x8000100u, 0),
          (*(void *)AudioTimeStamp buf = v12) == 0))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    int v13 = CFDictionaryContainsKey(v11, v12);
    CFRelease(v12);
    if (v13)
    {
      if (cf)
      {
        CFNumberRef v14 = (const __CFNumber *)sub_7E8C8((const __CFDictionary *)cf, "IsWireless");
        if (v14)
        {
          BOOL v15 = sub_157378(v14);
          char v16 = (os_log_t *)sub_32A48(10);
          int v17 = *v16;
          if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
          {
            int v18 = "no";
            *(void *)&uint8_t buf[4] = "IOPowerSourcesInterface.cpp";
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            if (v15) {
              int v18 = "yes";
            }
            __int16 v26 = 1024;
            int v27 = 46;
            __int16 v28 = 2080;
            unint64_t v29 = v18;
            _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Details dictionary: IsWireless %s", buf, 0x1Cu);
          }
          if (v15) {
            int v10 = 2;
          }
          else {
            int v10 = 1;
          }
          goto LABEL_28;
        }
        __int16 v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v23, "Could not find item");
      }
      else
      {
        __int16 v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v23, "Could not construct");
      }
    }
    int v10 = 0;
  }
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
  int v19 = 2 * (v10 != 3);
  if (v10 == 2) {
    int v19 = 1;
  }
LABEL_32:
  if (*(_DWORD *)(a1 + 56) != v19)
  {
    *(_DWORD *)(a1 + 56) = v19;
    sub_298AF0(*(void *)(a1 + 216));
  }
  uint64_t v20 = sub_32A48(10);
  if (*(unsigned char *)(v20 + 8))
  {
    int v21 = *(NSObject **)v20;
    if (*(void *)v20)
    {
      if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        __int16 v26 = 1024;
        int v27 = 1562;
        __int16 v28 = 2048;
        unint64_t v29 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateExternalPowerSourceState()", buf, 0x1Cu);
      }
    }
  }
}

void sub_29EF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13)
{
  __cxa_free_exception(v13);
  sub_60394(&a10);
  _Unwind_Resume(a1);
}

void sub_29EFEC(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SystemSettingsManager_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 1595;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateVibrationState()", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  int v4 = sub_29F780(*(_DWORD *)(*(void *)(a1 + 232) + 112)) != 0;
  if (*(_DWORD *)(a1 + 64) != v4)
  {
    *(_DWORD *)(a1 + 64) = v4;
    sub_298AF0(*(void *)(a1 + 232));
  }
  uint64_t v5 = sub_32A48(10);
  if (*(unsigned char *)(v5 + 8))
  {
    CFNumberRef v6 = *(NSObject **)v5;
    if (*(void *)v5)
    {
      if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SystemSettingsManager_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 1604;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateVibrationState()", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
}

void sub_29F16C(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v24 = "SystemSettingsManager_Aspen.cpp";
        __int16 v25 = 1024;
        int v26 = 1626;
        __int16 v27 = 2048;
        __int16 v28 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateVoiceOverEnabledState()", buf, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.Accessibility");
  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"VoiceOverTouchEnabled", @"com.apple.Accessibility", &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat)
  {
    __int16 v9 = (unsigned __int8 *)(a1 + 68);
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(a1 + 68));
    if ((v11 & 1) == 0) {
      goto LABEL_25;
    }
    LOBYTE(v8) = 0;
    goto LABEL_13;
  }
  int v5 = AppBooleanValue;
  CFNumberRef v6 = (os_log_t *)sub_32A48(10);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v24 = "SystemSettingsManager_Aspen.cpp";
    __int16 v25 = 1024;
    int v26 = 607;
    __int16 v27 = 2080;
    __int16 v28 = "com.apple.Accessibility/VoiceOverTouchEnabled";
    __int16 v29 = 1024;
    int v30 = v5;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %u.", buf, 0x22u);
  }
  BOOL v8 = v5 != 0;
  __int16 v9 = (unsigned __int8 *)(a1 + 68);
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 68));
  if (v8 != (v10 & 1))
  {
LABEL_13:
    atomic_store(v8, (unsigned __int8 *)(a1 + 68));
    uint64_t v12 = *(void **)(a1 + 368);
    if (v12 != (void *)(a1 + 376))
    {
      do
      {
        sub_298AF0(v12[5]);
        int v13 = (void *)v12[1];
        if (v13)
        {
          do
          {
            CFNumberRef v14 = v13;
            int v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            CFNumberRef v14 = (void *)v12[2];
            BOOL v15 = *v14 == (void)v12;
            uint64_t v12 = v14;
          }
          while (!v15);
        }
        uint64_t v12 = v14;
      }
      while (v14 != (void *)(a1 + 376));
    }
    char v16 = (os_log_t *)sub_32A48(10);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = "Enabled";
      unsigned __int8 v19 = atomic_load(v9);
      __int16 v24 = "SystemSettingsManager_Aspen.cpp";
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      if ((v19 & 1) == 0) {
        int v18 = "Disabled";
      }
      __int16 v25 = 1024;
      int v26 = 1636;
      __int16 v27 = 2080;
      __int16 v28 = v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VoiceOver is now %s", buf, 0x1Cu);
    }
  }
LABEL_25:
  uint64_t v20 = sub_32A48(10);
  if (*(unsigned char *)(v20 + 8))
  {
    int v21 = *(NSObject **)v20;
    if (*(void *)v20)
    {
      if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v24 = "SystemSettingsManager_Aspen.cpp";
        __int16 v25 = 1024;
        int v26 = 1639;
        __int16 v27 = 2048;
        __int16 v28 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateVoiceOverEnabledState()", buf, 0x1Cu);
      }
    }
  }
}

void sub_29F4A0(uint64_t a1)
{
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        CFNumberRef v14 = "SystemSettingsManager_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1609;
        __int16 v17 = 2048;
        int v18 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateReduceBassState()", buf, 0x1Cu);
      }
    }
  }
  CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
  int v12 = 0;
  if (sub_1614F4(@"EnableBassReduction", @"com.apple.audio.virtualaudio", &v12))
  {
    int v4 = v12 != 1;
  }
  else
  {
    uint64_t v5 = sub_32A48(10);
    if (*(unsigned char *)(v5 + 8))
    {
      CFNumberRef v6 = *(NSObject **)v5;
      if (*(void *)v5)
      {
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          CFNumberRef v14 = "SystemSettingsManager_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 641;
          __int16 v17 = 2080;
          int v18 = "com.apple.audio.virtualaudio/EnableBassReduction";
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", buf, 0x1Cu);
        }
      }
    }
    int v4 = 1;
  }
  int v7 = (os_log_t *)sub_32A48(10);
  BOOL v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = "Enabled";
    CFNumberRef v14 = "SystemSettingsManager_Aspen.cpp";
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    if (!v12) {
      __int16 v9 = "Disabled";
    }
    __int16 v15 = 1024;
    int v16 = 645;
    __int16 v17 = 2080;
    int v18 = "com.apple.audio.virtualaudio/EnableBassReduction";
    __int16 v19 = 2080;
    uint64_t v20 = v9;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
  }
  if (*(_DWORD *)(a1 + 60) != v4)
  {
    *(_DWORD *)(a1 + 60) = v4;
    sub_298AF0(*(void *)(a1 + 224));
  }
  uint64_t v10 = sub_32A48(10);
  if (*(unsigned char *)(v10 + 8))
  {
    unsigned __int8 v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        CFNumberRef v14 = "SystemSettingsManager_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1618;
        __int16 v17 = 2048;
        int v18 = (const char *)a1;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateReduceBassState()", buf, 0x1Cu);
      }
    }
  }
}

uint64_t sub_29F780(int a1)
{
  uint64_t state64 = 0;
  if (notify_get_state(a1, &state64))
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v7 = "SystemSettingsManager_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 754;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"notify_get_state() failed.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "notify_get_state() failed.");
  }
  return state64;
}

void sub_29F88C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_29F8A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_650068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_650068))
  {
    qword_650060 = (uint64_t)dispatch_queue_create("VirtualAudioCarDNDAssertStateQueue", 0);
    __cxa_guard_release(&qword_650068);
  }
}

void sub_29F914(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = sub_32A48(10);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1497;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + SystemSettingsManager_Aspen[%p]::UpdateCarDNDAssertState()", buf, 0x1Cu);
      }
    }
  }
  sub_29F8A8();
  dispatch_assert_queue_V2((dispatch_queue_t)qword_650060);
  id v4 = objc_alloc_init((Class)CARAutomaticDNDStatus);
  *(void *)AudioTimeStamp buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4812000000;
  *(void *)&unsigned char buf[24] = sub_3A1418;
  uint64_t v35 = sub_3A1434;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v24 = 0;
  __int16 v25 = &v24;
  uint64_t v26 = 0x2020000000;
  char v27 = 0;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_3A1448;
  void v20[3] = &unk_637480;
  __int16 v22 = &v24;
  __int16 v23 = buf;
  uint64_t v5 = dispatch_semaphore_create(0);
  int v21 = v5;
  [v4 fetchAutomaticDNDAssertionWithReply:v20];
  dispatch_time_t v6 = dispatch_time(0, 1000000000);
  if (dispatch_semaphore_wait(v5, v6))
  {
    int v7 = *(id *)sub_32A48(10);
    __int16 v8 = v7;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int16 v28 = 136315394;
      __int16 v29 = "CarKitInterface.mm";
      __int16 v30 = 1024;
      int v31 = 44;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Timed out waiting for semaphore signal.", v28, 0x12u);
    }
  }
  int v9 = *(id *)sub_32A48(10);
  uint64_t v10 = v9;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v11 = (void *)(*(void *)&buf[8] + 48);
    if (*(char *)(*(void *)&buf[8] + 71) < 0) {
      unsigned __int8 v11 = (void *)*v11;
    }
    *(_DWORD *)__int16 v28 = 136315650;
    __int16 v29 = "CarKitInterface.mm";
    __int16 v30 = 1024;
    int v31 = 45;
    __int16 v32 = 2080;
    __int16 v33 = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", v28, 0x1Cu);
  }

  int v12 = *((unsigned __int8 *)v25 + 24);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(buf, 8);
  if (SHIBYTE(v37) < 0) {
    operator delete(*((void **)&v36 + 1));
  }

  int v13 = v12 == 0;
  if (*(_DWORD *)(v1 + 52) != v13)
  {
    *(_DWORD *)(v1 + 52) = v13;
    CFNumberRef v14 = (os_log_t *)sub_32A48(10);
    __int16 v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = "Not Active";
        int v17 = *(_DWORD *)(v1 + 52);
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        if (!v17) {
          int v16 = "Active";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1504;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v16;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mCarDNDAssertState is now %s", buf, 0x1Cu);
      }
    }
  }
  uint64_t v18 = sub_32A48(10);
  if (*(unsigned char *)(v18 + 8))
  {
    __int16 v19 = *(NSObject **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1508;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v1;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateCarDNDAssertState()", buf, 0x1Cu);
      }
    }
  }
  operator delete();
}

void sub_29FDA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf,__int16 a26,__int16 a27,int a28,__int16 a29,__int16 a30,__int16 a31,__int16 a32,__int16 a33,__int16 a34,int a35,int a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&buf, 8);
  if (a42 < 0) {
    operator delete(__p);
  }

  if (a2 == 3)
  {
    uint64_t v47 = __cxa_begin_catch(a1);
    uint64_t v48 = (os_log_t *)sub_32A48(13);
    os_log_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      int v50 = v47[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)(v44 + 14) = 429;
      a27 = 1024;
      a28 = v50;
      a29 = 2080;
      *(void *)(v44 + 26) = "";
      a34 = 1024;
      a35 = 1509;
      uint64_t v51 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      os_log_t v52 = v49;
      uint32_t v53 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, v51, (uint8_t *)&buf, v53);
    }
  }
  else
  {
    char v54 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_type_t v55 = v54;
      uint64_t v56 = (os_log_t *)sub_32A48(13);
      os_log_t v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        uint64_t v58 = (*(uint64_t (**)(void *))(*(void *)v55 + 16))(v55);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)(v44 + 14) = 430;
        a27 = 2080;
        *(void *)(v44 + 20) = v58;
        a31 = 2080;
        *(void *)(v44 + 30) = "";
        HIWORD(a35) = 1024;
        a36 = 1509;
        uint64_t v51 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        os_log_t v52 = v57;
        uint32_t v53 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      int v59 = (os_log_t *)sub_32A48(13);
      os_log_t v60 = *v59;
      if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)(v44 + 14) = 431;
        a27 = 2080;
        *(void *)(v44 + 20) = "";
        a31 = 1024;
        *(_DWORD *)(v44 + 30) = 1509;
        uint64_t v51 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        os_log_t v52 = v60;
        uint32_t v53 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x29FD54);
}

uint64_t sub_2A006C()
{
  CFPreferencesAppSynchronize(@"com.apple.preferences-sounds");
  int v14 = -1;
  if (!sub_1614F4(@"enhancedialog", @"com.apple.preferences-sounds", &v14))
  {
    uint64_t v1 = sub_32A48(10);
    if ((*(unsigned char *)(v1 + 8) & 1) == 0) {
      goto LABEL_13;
    }
    os_log_t v2 = *(os_log_t *)v1;
    if (!*(void *)v1 || !os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_13;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    int v16 = "SystemSettingsManager_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 197;
    __int16 v19 = 2080;
    uint64_t v20 = "com.apple.preferences-sounds/enhancedialog";
    uint64_t v3 = "%25s:%-5d No preference for %s. Using default.";
    id v4 = v2;
    os_log_type_t v5 = OS_LOG_TYPE_DEBUG;
LABEL_12:
    _os_log_impl(&def_1E50E8, v4, v5, v3, buf, 0x1Cu);
    goto LABEL_13;
  }
  if (!v14)
  {
LABEL_13:
    uint64_t v0 = 4;
    goto LABEL_14;
  }
  if (v14 != 1)
  {
    dispatch_time_t v6 = (os_log_t *)sub_32A48(10);
    os_log_t v7 = *v6;
    if (!*v6 || !os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    int v16 = "SystemSettingsManager_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 190;
    __int16 v19 = 2080;
    uint64_t v20 = "com.apple.preferences-sounds/enhancedialog";
    uint64_t v3 = "%25s:%-5d Raw preference value for %s is out-of-range. Using default.";
    id v4 = v7;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    goto LABEL_12;
  }
  uint64_t v0 = 5;
LABEL_14:
  __int16 v8 = (os_log_t *)sub_32A48(10);
  int v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, v0);
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v16 = "SystemSettingsManager_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 201;
    __int16 v19 = 2080;
    uint64_t v20 = "com.apple.preferences-sounds/enhancedialog";
    __int16 v21 = 2080;
    __int16 v22 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return v0;
}

void sub_2A02D4(uint64_t a1)
{
}

uint64_t sub_2A02E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_62B638;
  a2[1] = v2;
  return result;
}

void *sub_2A0308(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_62B638;
  result[1] = v3;
  return result;
}

void sub_2A0350()
{
}

uint64_t sub_2A0368(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_2A03E8;
  v4[3] = &unk_62B5E8;
  v4[4] = v2;
  int v5 = a2;
  return sub_61CCC((uint64_t)v4);
}

uint64_t sub_2A03E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(a1 + 32) + 128) + 16))(*(void *)(*(void *)(a1 + 32) + 128), *(unsigned int *)(a1 + 40));
}

void sub_2A0404(uint64_t a1)
{
  sub_2A043C(a1);

  operator delete();
}

uint64_t sub_2A043C(uint64_t a1)
{
  *(void *)a1 = off_62B5B8;
  if (notify_cancel(*(_DWORD *)(a1 + 112)))
  {
    uint64_t v2 = (os_log_t *)sub_32A48(10);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        dispatch_time_t v6 = "SystemSettingsManager_Aspen.cpp";
        __int16 v7 = 1024;
        int v8 = 746;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d notify_cancel() failed", (uint8_t *)&v5, 0x12u);
      }
    }
  }
  _Block_release(*(const void **)(a1 + 128));
  *(void *)a1 = off_62B5D8;
  sub_AEF0C(a1 + 24);
  return a1;
}

void sub_2A0554(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t *sub_2A0564()
{
  return &qword_6500E0;
}

void sub_2A0570(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 16);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    int v5 = &v3;
    id v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))sub_2A05CC);
  }
}

void sub_2A05CC(uint64_t ***a1)
{
}

void sub_2A05EC(uint64_t a1)
{
  strcpy((char *)buf, "dlovptuo");
  buf[9] = 0;
  __int16 v2 = 0;
  if ((*(unsigned int (**)(uint64_t, uint8_t *))(*(void *)a1 + 32))(a1, buf)) {
    operator new();
  }
  operator new();
}

void sub_2A08BC()
{
}

void sub_2A0918(uint64_t a1)
{
  sub_1F7088(a1 - 80);

  operator delete();
}

uint64_t sub_2A0954(uint64_t a1)
{
  return sub_1F7088(a1 - 80);
}

BOOL sub_2A095C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)(a1 + 96) + 536));
  return v1 == *(_DWORD *)(a1 + 480) && sub_1F8D48(a1);
}

void sub_2A0980(uint64_t a1)
{
  sub_1F7088(a1);

  operator delete();
}

uint64_t sub_2A09BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v1 + 96))(v1, 0, 0);
  if (!v2)
  {
    unsigned __int8 v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "BluetoothProfiles_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 63;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Bluetooth SCO device returned a NULL stream\"", buf, 0x12u);
      }
    }
  }
  int v18 = 0;
  __int16 v19 = 0;
  uint64_t v20 = 0;
  int v3 = (*(uint64_t (**)(uint64_t, double **))(*(void *)v2 + 96))(v2, &v18);
  if (v3)
  {
    uint64_t v4 = sub_32A48(17);
    uint64_t v5 = sub_32A48(28);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_12;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_12:
    char v13 = *(NSObject **)v4;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 128))(v17, v1);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "BluetoothProfiles_Aspen.cpp";
      __int16 v22 = 1024;
      int v23 = 68;
      __int16 v24 = 1024;
      int v25 = v3;
      __int16 v26 = 2112;
      uint64_t v27 = v17[0];
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d getting stream formats from Bluetooth SCO device with UID \"%@\"", buf, 0x22u);
      sub_72924((uint64_t)v17);
    }
  }
  if (v18 == v19)
  {
LABEL_19:
    uint64_t v15 = 0;
    if (!v18) {
      return v15;
    }
LABEL_20:
    __int16 v19 = v18;
    operator delete(v18);
    return v15;
  }
  int v14 = v18;
  while (v14[5] <= 8000.0)
  {
    v14 += 7;
    if (v14 == v19) {
      goto LABEL_19;
    }
  }
  uint64_t v15 = 0x100000000;
  if (v18) {
    goto LABEL_20;
  }
  return v15;
}

void sub_2A0C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A0C90(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_2A0C98(uint64_t *a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (*a2 == 1987013732)
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1) != a5)
    {
      int v25 = (os_log_t *)sub_32A48(13);
      __int16 v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
        __int16 v31 = 1024;
        int v32 = 757;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyVolumeDecibels\"", (uint8_t *)buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    float v8 = *(float *)a6;
    float v29 = *(float *)a6;
    uint64_t v9 = sub_32A48(17);
    uint64_t v10 = sub_32A48(28);
    char v11 = 0;
    uint64_t v12 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = (int)buf[v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1;
      if (v15) {
        goto LABEL_12;
      }
    }
    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
LABEL_12:
    uint64_t v18 = sub_32A48(38);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v21 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v22 = (int)buf[v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23) {
        goto LABEL_18;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v9 = v18;
    }
LABEL_18:
    __int16 v24 = *(NSObject **)v9;
    if (v24)
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void *__return_ptr))(*(void *)a1[1] + 128))(v28);
        buf[0] = 136315906;
        *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
        __int16 v31 = 1024;
        int v32 = 761;
        __int16 v33 = 2048;
        double v34 = v8;
        __int16 v35 = 2112;
        uint64_t v36 = v28[0];
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting volume to %f dB on SCO device with UID \"%@\"", (uint8_t *)buf, 0x26u);
        sub_72924((uint64_t)v28);
      }
    }
    strcpy((char *)buf, "dlovptuo");
    BYTE1(buf[2]) = 0;
    HIWORD(buf[2]) = 0;
    sub_1DB4C8(a1[1], buf, 0, 0, 4u, (unsigned int *)&v29);
    return sub_1A1D20((void *)(a1[1] + 632), (unsigned int *)&qword_6500B8);
  }
  else
  {
    uint64_t v16 = a1[1];
    return (void *)sub_1DB4C8(v16, a2, a3, a4, a5, a6);
  }
}

void sub_2A1018(uint64_t a1, int *a2, UInt32 a3, const void *a4, UInt32 *a5, uint64_t a6)
{
  int v8 = *a2;
  if (*a2 <= 1835103843)
  {
    if (v8 != 1064725619)
    {
      if (v8 != 1684633187)
      {
        if (v8 == 1819046768)
        {
          *(_DWORD *)a6 = *(unsigned __int8 *)(a1 + 24);
          return;
        }
        goto LABEL_16;
      }
LABEL_12:
      *(_DWORD *)a6 = 0;
      return;
    }
    UInt32 v11 = *a5;
    if (v11 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
      goto LABEL_12;
    }
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    uint64_t v18 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      buf.int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
      __int16 v27 = 1024;
      int v28 = 736;
      char v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kVirtualAudioDevicePropertyH"
            "asKnowableVolumeLevels\"";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  switch(v8)
  {
    case 1987013732:
      UInt32 v12 = *a5;
      if (v12 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        uint64_t v21 = (os_log_t *)sub_32A48(13);
        uint64_t v18 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          buf.int mSelector = 136315394;
          *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
          __int16 v27 = 1024;
          int v28 = 722;
          char v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyVolumeDecibels\"";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      uint64_t v13 = *(void *)(a1 + 8);
      strcpy((char *)&buf, "dlovptuo");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      UInt32 v24 = 4;
      float v25 = 0.0;
      sub_432AE8(v13, &buf, 0, 0, &v24, &v25);
      float v10 = v25;
      goto LABEL_15;
    case 1986290211:
      UInt32 v15 = *a5;
      if (v15 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        *(double *)a6 = sub_2A143C(*(void *)(a1 + 8));
        *(void *)(a6 + 8) = v16;
        return;
      }
      uint64_t v22 = (os_log_t *)sub_32A48(13);
      uint64_t v18 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
        __int16 v27 = 1024;
        int v28 = 727;
        char v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyVolumeRangeDecibels\"";
        goto LABEL_34;
      }
      goto LABEL_35;
    case 1835103844:
      UInt32 v9 = *a5;
      if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        __int16 v17 = (os_log_t *)sub_32A48(13);
        uint64_t v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          buf.int mSelector = 136315394;
          *(void *)&buf.AudioObjectPropertyScope mScope = "BluetoothProfiles_Aspen.cpp";
          __int16 v27 = 1024;
          int v28 = 717;
          char v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyMini"
                "mumAudibleVolumeDecibels\"";
LABEL_34:
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&buf, 0x12u);
        }
LABEL_35:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 561211770;
      }
      float v10 = sub_2A143C(*(void *)(a1 + 8));
LABEL_15:
      *(float *)a6 = v10;
      return;
  }
LABEL_16:
  uint64_t v14 = *(void *)(a1 + 8);

  sub_1DCE88(v14, (uint64_t)a2, a3, a4, a5, (int *)a6);
}

double sub_2A143C(uint64_t a1)
{
  *(void *)&v3.int mSelector = 0x6F75747076646223;
  v3.AudioObjectPropertyElement mElement = 0;
  UInt32 v2 = 16;
  sub_432AE8(a1, &v3, 0, 0, &v2, (float *)&v4);
  return v4;
}

uint64_t sub_2A148C(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  AudioObjectID v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
  *(void *)&v13.int mSelector = 0x6F757470766F6C64;
  v13.AudioObjectPropertyElement mElement = 0;
  Hasuint64_t Property = AudioObjectHasProperty(v8, &v13);
  int v10 = *a2;
  if (*a2 > 1835103843)
  {
    if (v10 != 1987013732)
    {
      if (v10 == 1986290211) {
        return 16 * (HasProperty != 0);
      }
      if (v10 != 1835103844) {
        return sub_1DD6F8(*(void *)(a1 + 8), a2, a3, a4);
      }
    }
    return 4 * (HasProperty != 0);
  }
  uint64_t v11 = 4;
  if (v10 == 1064725619) {
    return v11;
  }
  if (v10 == 1684633187) {
    return 4 * (HasProperty != 0);
  }
  if (v10 != 1701015154) {
    return sub_1DD6F8(*(void *)(a1 + 8), a2, a3, a4);
  }
  return v11;
}

BOOL sub_2A15C4(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a2;
  if (*a2 <= 1835103843)
  {
    if (v3 != 1064725619 && v3 != 1684633187 && v3 != 1701015154) {
      goto LABEL_17;
    }
    return v2;
  }
  if (v3 == 1835103844 || v3 == 1986290211) {
    return v2;
  }
  if (v3 == 1987013732)
  {
    AudioObjectID v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
    *(void *)&v10.int mSelector = 0x6F757470766F6C64;
    v10.AudioObjectPropertyElement mElement = 0;
    return AudioObjectHasProperty(v7, &v10) != 0;
  }
LABEL_17:
  uint64_t v9 = *(void *)(a1 + 8);

  return sub_1DDA4C(v9, a2);
}

uint64_t sub_2A16C0(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1835103843)
  {
    if (v2 != 1835103844 && v2 != 1987013732 && v2 != 1986290211) {
      goto LABEL_18;
    }
LABEL_14:
    AudioObjectID v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
    *(void *)&v10.int mSelector = 0x6F757470766F6C64;
    v10.AudioObjectPropertyElement mElement = 0;
    return AudioObjectHasProperty(v7, &v10) != 0;
  }
  switch(v2)
  {
    case 1064725619:
      int v3 = a2[1];
      int v4 = 1869968496;
      return v3 == v4;
    case 1684633187:
      goto LABEL_14;
    case 1701015154:
      int v3 = a2[1];
      int v4 = 1768845428;
      return v3 == v4;
  }
LABEL_18:
  uint64_t v9 = *(unsigned int **)(a1 + 8);

  return sub_1DDAE8(v9, a2);
}

void sub_2A17DC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  strcpy((char *)inAddress, "ocscbolg");
  BYTE9(inAddress[0]) = 0;
  WORD5(inAddress[0]) = 0;
  AudioObjectID v3 = (*(uint64_t (**)(void *))(*(void *)v2 + 120))(v2);
  AudioObjectRemovePropertyListener(v3, (const AudioObjectPropertyAddress *)inAddress, (AudioObjectPropertyListenerProc)sub_1D7354, v2);
  int v4 = *(void **)(a1 + 8);
  strcpy((char *)inAddress, "ocsdbolg");
  BYTE9(inAddress[0]) = 0;
  WORD5(inAddress[0]) = 0;
  AudioObjectID v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 120))(v4);
  AudioObjectRemovePropertyListener(v5, (const AudioObjectPropertyAddress *)inAddress, (AudioObjectPropertyListenerProc)sub_1D7354, v4);
  sub_2A19D0((uint64_t)inAddress, (uint64_t)&qword_6500E0);
  sub_43637C(v12, *(void *)(a1 + 8), (uint64_t)inAddress);
  sub_FB288(&v13, v12);
  sub_8108(v12);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v10);
  if (*(void *)&inAddress[0])
  {
    *((void *)&inAddress[0] + 1) = *(void *)&inAddress[0];
    operator delete(*(void **)&inAddress[0]);
  }
  for (uint64_t i = v14; i != &v13; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v7 = i[2];
    AudioObjectID v8 = (std::__shared_weak_count *)i[3];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&inAddress[0] = v7;
    *((void *)&inAddress[0] + 1) = v8;
    sub_2A1A4C(a1, (unint64_t *)inAddress);
    if (v8)
    {
      sub_4636C(v8);
      sub_4636C(v8);
    }
  }
  sub_B8E4(&v13);
}

void sub_2A1988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_8108((uint64_t *)va1);
  sub_470A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2A19D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_46B38((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  strcpy((char *)(a1 + 24), "cwdv");
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 3;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(_DWORD *)(a1 + 72) = 44739242;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void sub_2A1A4C(uint64_t a1, unint64_t *a2)
{
  if (!sub_2A1BF0(a1, *(_DWORD *)(*a2 + 144)))
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v12 = "BluetoothProfiles_Aspen.cpp";
      __int16 v13 = 1024;
      int v14 = 268;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  v10[0] = v5;
  v10[1] = (unint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_431020(v4, v10);
  if (v6)
  {
    sub_4636C(v6);
  }
}

void sub_2A1BC0(_Unwind_Exception *exception_object)
{
}

BOOL sub_2A1BF0(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  sub_46B38(&v9, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  if (v9 == v10)
  {
    BOOL v6 = 0;
    if (!v9) {
      return v6;
    }
    goto LABEL_9;
  }
  uint64_t v4 = v9 + 4;
  do
  {
    int v5 = *((_DWORD *)v4 - 1);
    BOOL v6 = v5 == a2;
    BOOL v7 = v5 == a2 || v4 == v10;
    v4 += 4;
  }
  while (!v7);
  if (v9) {
LABEL_9:
  }
    operator delete(v9);
  return v6;
}

uint64_t sub_2A1C98(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  AudioObjectID v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
  sub_1050A0((uint64_t)v97, 0x706D6274u, v3);
  (*(void (**)(unsigned char *__return_ptr))(**(void **)v2 + 128))(v108);
  std::string __p = (void *)CFStringCreateWithCString(0, "-btaudio", 0x600u);
  LOBYTE(v106) = 1;
  sub_1DEEA4((uint64_t)theString, (CFStringRef *)v108, (CFStringRef *)&__p);
  sub_72924((uint64_t)&__p);
  uint64_t v4 = (void *)sub_72924((uint64_t)v108);
  sub_21B7C(v4, theString[0]);
  sub_21C8C(&__p, "-tsco");
  if (v107 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v107 >= 0) {
    std::string::size_type v6 = HIBYTE(v107);
  }
  else {
    std::string::size_type v6 = (std::string::size_type)v106;
  }
  BOOL v7 = std::string::append((std::string *)v108, p_p, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v95 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v94 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v107) < 0) {
    operator delete(__p);
  }
  if ((v112[3] & 0x80000000) != 0) {
    operator delete(*(void **)v108);
  }
  if ((byte_64BB13 & 1) == 0)
  {
    LODWORD(__p) = 0;
    if (sub_1614F4(@"AutoRouteToBluetoothSCO", @"com.apple.audio.virtualaudio", &__p))
    {
      uint64_t v9 = (os_log_t *)sub_32A48(13);
      uint64_t v10 = *v9;
      if (*v9)
      {
        BOOL v11 = os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT);
        int v12 = (int)__p;
        if (v11)
        {
          *(_DWORD *)char v108 = 136315906;
          *(void *)&v108[4] = "RunTimeDefaults.cpp";
          __int16 v109 = 1024;
          int v110 = 303;
          __int16 v111 = 2080;
          *(void *)char v112 = "AutoRouteToBluetoothSCO";
          *(_WORD *)&v112[8] = 1024;
          *(_DWORD *)&v112[10] = __p;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", v108, 0x22u);
        }
      }
      else
      {
        int v12 = (int)__p;
      }
      byte_64BB12 = v12 != 0;
    }
    byte_64BB13 = 1;
  }
  int v13 = byte_64BB12;
  uint64_t v14 = sub_32A48(17);
  uint64_t v15 = sub_32A48(28);
  char v16 = 0;
  uint64_t v17 = 0;
  *(void *)char v108 = 0x100000002;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = *(int *)&v108[4 * v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1;
    if (v20) {
      goto LABEL_25;
    }
  }
  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
LABEL_25:
  uint64_t v21 = *(NSObject **)v14;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = v99;
    uint64_t v23 = v98;
    uint64_t v24 = v97[0];
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 128))(&__p);
    if (v23) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = v24;
    }
    if (v22) {
      uint64_t v25 = v22;
    }
    *(_DWORD *)char v108 = 136316162;
    *(void *)&v108[4] = "BluetoothProfiles_Aspen.cpp";
    __int16 v26 = "routable";
    __int16 v109 = 1024;
    int v110 = 567;
    *(void *)char v112 = v25;
    __int16 v111 = 2112;
    if (!v13) {
      __int16 v26 = "non-routable";
    }
    *(_WORD *)&v112[8] = 2112;
    *(void *)&v112[10] = __p;
    __int16 v113 = 2080;
    char v114 = v26;
    _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a bluetooth headset input port with name \"%@\" and UID \"%@\", %s", v108, 0x30u);
    sub_72924((uint64_t)&__p);
  }
  if (v95 >= 0) {
    __int16 v27 = v94;
  }
  else {
    __int16 v27 = (void **)v94[0];
  }
  CFStringRef v92 = CFStringCreateWithCString(0, (const char *)v27, 0x600u);
  char v93 = 1;
  int v28 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492));
  float v29 = (char *)operator new(0x2B8uLL);
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 2) = 0;
  *(void *)float v29 = off_62B900;
  uint64_t v30 = *(void *)(a1 + 8);
  sub_166AC4((uint64_t)v108, 1886216820, v28);
  __int16 v31 = v29 + 24;
  std::string __p = 0;
  char v106 = 0;
  uint64_t v107 = 0;
  sub_2776CC((uint64_t)(v29 + 24), (uint64_t *)v108, v30, (uint64_t)&__p, (uint64_t)v97, (uint64_t *)&v92, theString[0], v13 != 0);
  sub_463E0(*(void **)&v112[4]);
  *((void *)v29 + 3) = off_637698;
  uint64_t v32 = sub_3A1B38((uint64_t)(v29 + 24));
  if (v32)
  {
    uint64_t v33 = sub_32A48(23);
    uint64_t v34 = sub_32A48(28);
    char v35 = 0;
    uint64_t v36 = 0;
    *(void *)char v108 = 0x100000002;
    uint64_t v37 = *(void *)(v33 + 8);
    while (1)
    {
      uint64_t v38 = *(int *)&v108[4 * v36];
      char v39 = v35;
      if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
        break;
      }
      char v35 = 1;
      uint64_t v36 = 1;
      if (v39) {
        goto LABEL_45;
      }
    }
    if ((v37 & v38) == 0) {
      uint64_t v33 = v34;
    }
LABEL_45:
    uint64_t v40 = *(NSObject **)v33;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v41 = (const __CFString *)*((void *)v29 + 34);
      CFStringRef v103 = v41;
      char v104 = v29[280];
      if (v104 && v41)
      {
        CFRetain(v41);
        CFStringRef v41 = v103;
      }
      sub_21B7C(&__p, v41);
      int v42 = SHIBYTE(v107);
      uint64_t v43 = (void **)__p;
      sub_2417C(&v100, v32);
      uint64_t v44 = &__p;
      if (v42 < 0) {
        uint64_t v44 = v43;
      }
      if (v102 >= 0) {
        char v45 = &v100;
      }
      else {
        char v45 = v100;
      }
      *(_DWORD *)char v108 = 136315906;
      *(void *)&v108[4] = "Port_BluetoothHFPInput_Aspen.cpp";
      __int16 v109 = 1024;
      int v110 = 87;
      __int16 v111 = 2080;
      *(void *)char v112 = v44;
      *(_WORD *)&v112[8] = 2080;
      *(void *)&v112[10] = v45;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting sub port type for Bluetooth port \"%s\": %s", v108, 0x26u);
      if (v102 < 0) {
        operator delete(v100);
      }
      if (SHIBYTE(v107) < 0) {
        operator delete(__p);
      }
      sub_72924((uint64_t)&v103);
    }
    (*(void (**)(char *, uint64_t))(*(void *)v31 + 104))(v29 + 24, v32);
  }
  uint64_t v46 = (std::__shared_weak_count *)*((void *)v29 + 14);
  if (!v46)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 2, 1uLL, memory_order_relaxed);
    *((void *)v29 + 13) = v31;
    *((void *)v29 + 14) = v29;
    goto LABEL_65;
  }
  if (v46->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 2, 1uLL, memory_order_relaxed);
    *((void *)v29 + 13) = v31;
    *((void *)v29 + 14) = v29;
    std::__shared_weak_count::__release_weak(v46);
LABEL_65:
    sub_4636C((std::__shared_weak_count *)v29);
  }
  sub_72924((uint64_t)&v92);
  uint64_t v47 = sub_32A48(17);
  uint64_t v48 = sub_32A48(28);
  char v49 = 0;
  uint64_t v50 = 0;
  *(void *)char v108 = 0x100000002;
  uint64_t v51 = *(void *)(v47 + 8);
  while (1)
  {
    uint64_t v52 = *(int *)&v108[4 * v50];
    char v53 = v49;
    if (((v51 & v52) != 0) != ((*(void *)(v48 + 8) & v52) != 0)) {
      break;
    }
    char v49 = 1;
    uint64_t v50 = 1;
    if (v53) {
      goto LABEL_72;
    }
  }
  if ((v51 & v52) == 0) {
    uint64_t v47 = v48;
  }
LABEL_72:
  char v54 = *(NSObject **)v47;
  if (v54 && os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v55 = v99;
    uint64_t v56 = v98;
    uint64_t v57 = v97[0];
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 128))(&__p);
    if (v56) {
      uint64_t v58 = v56;
    }
    else {
      uint64_t v58 = v57;
    }
    if (v55) {
      uint64_t v58 = v55;
    }
    *(_DWORD *)char v108 = 136316162;
    *(void *)&v108[4] = "BluetoothProfiles_Aspen.cpp";
    int v59 = "routable";
    __int16 v109 = 1024;
    int v110 = 574;
    *(void *)char v112 = v58;
    __int16 v111 = 2112;
    if (!v13) {
      int v59 = "non-routable";
    }
    *(_WORD *)&v112[8] = 2112;
    *(void *)&v112[10] = __p;
    __int16 v113 = 2080;
    char v114 = v59;
    _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a bluetooth headset output port with name \"%@\" and UID \"%@\", %s", v108, 0x30u);
    sub_72924((uint64_t)&__p);
  }
  if (v95 >= 0) {
    os_log_t v60 = v94;
  }
  else {
    os_log_t v60 = (void **)v94[0];
  }
  CFStringRef v92 = CFStringCreateWithCString(0, (const char *)v60, 0x600u);
  char v93 = 1;
  int v61 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492));
  char v62 = (char *)operator new(0x2B8uLL);
  *((void *)v62 + 1) = 0;
  *((void *)v62 + 2) = 0;
  *(void *)char v62 = off_62B938;
  uint64_t v63 = *(void *)(a1 + 8);
  sub_166AC4((uint64_t)v108, 1885892706, v61);
  int v64 = v62 + 24;
  std::string __p = 0;
  char v106 = 0;
  uint64_t v107 = 0;
  sub_2776CC((uint64_t)(v62 + 24), (uint64_t *)v108, v63, (uint64_t)&__p, (uint64_t)v97, (uint64_t *)&v92, theString[0], v13 != 0);
  sub_463E0(*(void **)&v112[4]);
  *((void *)v62 + 3) = off_6378D8;
  uint64_t v65 = sub_3A20C8((uint64_t)(v62 + 24));
  uint64_t v66 = sub_32A48(23);
  uint64_t v67 = sub_32A48(28);
  char v68 = 0;
  uint64_t v69 = 0;
  *(void *)char v108 = 0x100000002;
  uint64_t v70 = *(void *)(v66 + 8);
  while (1)
  {
    uint64_t v71 = *(int *)&v108[4 * v69];
    char v72 = v68;
    if (((v70 & v71) != 0) != ((*(void *)(v67 + 8) & v71) != 0)) {
      break;
    }
    char v68 = 1;
    uint64_t v69 = 1;
    if (v72) {
      goto LABEL_91;
    }
  }
  if ((v70 & v71) == 0) {
    uint64_t v66 = v67;
  }
LABEL_91:
  char v73 = *(NSObject **)v66;
  if (v73 && os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v74 = (const __CFString *)*((void *)v62 + 34);
    CFStringRef v103 = v74;
    char v104 = v62[280];
    if (v104 && v74)
    {
      CFRetain(v74);
      CFStringRef v74 = v103;
    }
    sub_21B7C(&__p, v74);
    int v75 = SHIBYTE(v107);
    int v76 = (void **)__p;
    sub_2417C(&v100, v65);
    char v77 = &__p;
    if (v75 < 0) {
      char v77 = v76;
    }
    if (v102 >= 0) {
      int v78 = &v100;
    }
    else {
      int v78 = v100;
    }
    *(_DWORD *)char v108 = 136315906;
    *(void *)&v108[4] = "Port_BluetoothHFPOutput_Aspen.cpp";
    __int16 v109 = 1024;
    int v110 = 75;
    __int16 v111 = 2080;
    *(void *)char v112 = v77;
    *(_WORD *)&v112[8] = 2080;
    *(void *)&v112[10] = v78;
    _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting sub port type for Bluetooth port \"%s\": %s", v108, 0x26u);
    if (v102 < 0) {
      operator delete(v100);
    }
    if (SHIBYTE(v107) < 0) {
      operator delete(__p);
    }
    sub_72924((uint64_t)&v103);
  }
  (*(void (**)(char *, uint64_t))(*(void *)v64 + 104))(v62 + 24, v65);
  char v79 = (std::__shared_weak_count *)*((void *)v62 + 14);
  if (!v79)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 2, 1uLL, memory_order_relaxed);
    *((void *)v62 + 13) = v64;
    *((void *)v62 + 14) = v62;
    goto LABEL_110;
  }
  if (v79->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 2, 1uLL, memory_order_relaxed);
    *((void *)v62 + 13) = v64;
    *((void *)v62 + 14) = v62;
    std::__shared_weak_count::__release_weak(v79);
LABEL_110:
    sub_4636C((std::__shared_weak_count *)v62);
  }
  sub_72924((uint64_t)&v92);
  sub_250C08((uint64_t)(v29 + 24), (uint64_t)(v62 + 24));
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 312))(*(void *)(a1 + 8)) & 0xFF00000000) != 0)
  {
    uint64_t v80 = *(void *)(a1 + 8);
    strcpy(v108, "rncebolg");
    v108[9] = 0;
    *(_WORD *)&v108[10] = 0;
    if (((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v80 + 16))(v80, v108) & 1) == 0)
    {
      if (v95 >= 0) {
        size_t v81 = HIBYTE(v95);
      }
      else {
        size_t v81 = (size_t)v94[1];
      }
      int v82 = v108;
      sub_5E220((uint64_t)v108, v81 + 10);
      if (v112[3] < 0) {
        int v82 = *(unsigned char **)v108;
      }
      if (v81)
      {
        if (v95 >= 0) {
          char v83 = v94;
        }
        else {
          char v83 = (void **)v94[0];
        }
        memmove(v82, v83, v81);
      }
      strcpy(&v82[v81], "-reference");
      if (v112[3] >= 0) {
        int v84 = v108;
      }
      else {
        int v84 = *(const char **)v108;
      }
      char v100 = (void *)CFStringCreateWithCString(0, v84, 0x600u);
      char v101 = 1;
      int v85 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492));
      sub_2A2C3C(&__p, *(void *)(a1 + 8), 1885890164, (uint64_t)v97, (uint64_t *)&v100, theString, 1, v85);
      sub_72924((uint64_t)&v100);
      int v86 = __p;
      sub_250C08((uint64_t)(v62 + 24), (uint64_t)__p);
      char v87 = v106;
      v91[0] = v86;
      v91[1] = v106;
      if (v106) {
        atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2A2D28(a1, v91);
      if (v87)
      {
        sub_4636C(v87);
        sub_4636C(v87);
      }
      if ((v112[3] & 0x80000000) != 0) {
        operator delete(*(void **)v108);
      }
    }
  }
  v90[0] = v29 + 24;
  v90[1] = v29;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
  sub_2A2D28(a1, v90);
  sub_4636C((std::__shared_weak_count *)v29);
  v89[0] = v62 + 24;
  v89[1] = v62;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
  sub_2A2D28(a1, v89);
  sub_4636C((std::__shared_weak_count *)v62);
  sub_4636C((std::__shared_weak_count *)v62);
  sub_4636C((std::__shared_weak_count *)v29);
  if (SHIBYTE(v95) < 0) {
    operator delete(v94[0]);
  }
  sub_1D5F78(*(void **)(a1 + 8), 0x6373636Fu);
  sub_1D5F78(*(void **)(a1 + 8), 0x6473636Fu);
  sub_72924((uint64_t)theString);
  sub_72924((uint64_t)&v99);
  sub_72924((uint64_t)&v98);
  sub_72924((uint64_t)v97);
  return 1;
}

void sub_2A29CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_629710;
  sub_277AEC(&v42[28].~__shared_weak_count);
  sub_104C04(v43);
  std::__shared_weak_count::~__shared_weak_count(v42);
  operator delete(v45);
  sub_72924((uint64_t)&a15);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a24);
  sub_78FF8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2A2C3C(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, CFStringRef *a6, char a7, int a8)
{
  char v16 = operator new(0x2B8uLL);
  v16[1] = 0;
  void v16[2] = 0;
  void *v16 = off_62B890;
  sub_277CE4(v16 + 3, a2, a3, a4, a5, a6, a7 != 0, a8);
  *a1 = v16 + 3;
  a1[1] = v16;

  sub_56E64((uint64_t)a1, v16 + 13, (uint64_t)(v16 + 3));
}

void sub_2A2D10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2A2D28(uint64_t a1, void *a2)
{
  if (!sub_2A1BF0(a1, *(_DWORD *)(*a2 + 144)))
  {
    BOOL v7 = (os_log_t *)sub_32A48(13);
    long long v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v13 = "BluetoothProfiles_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 262;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = (void **)*a2;
  BOOL v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_436484(v4, &v10);
  std::string::size_type v6 = v11;
  if (v11)
  {
    sub_4636C(v6);
  }
}

void sub_2A2E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_2A2ED0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2A2EF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B890;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2A2F48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_2A2F6C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2A2F90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B938;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2A2FE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_2A3008(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2A302C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2A3080(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2A30A0()
{
}

uint64_t sub_2A30B8()
{
  return 0;
}

uint64_t *sub_2A30C0()
{
  return &qword_6500C8;
}

void sub_2A30CC(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 16);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    int v5 = &v3;
    uint64_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))sub_2A3128);
  }
}

void sub_2A3128(uint64_t ***a1)
{
}

void sub_2A3148(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  AudioObjectID v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));

  sub_2A31A8(v1, v2);
}

void sub_2A31A8(uint64_t a1, AudioObjectID a2)
{
  uint64_t v4 = (std::shared_timed_mutex *)(a1 + 16);
  std::shared_timed_mutex::lock((std::shared_timed_mutex *)(a1 + 16));
  uint64_t v10 = &off_637B38;
  CFTypeRef cf = 0;
  AudioObjectID v15 = a2;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6277736167;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  sub_58A0((uint64_t)buf, &v15, (AudioObjectPropertyAddress *)&__p);
  __p.__r_.__value_.__s.__data_[0] = 0;
  __p.__r_.__value_.__s.__data_[16] = 0;
  if (v19[10])
  {
    std::string::size_type v5 = *(void *)&v19[2];
    *(void *)&v19[2] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_637B38;
    __p.__r_.__value_.__l.__size_ = v5;
    __p.__r_.__value_.__s.__data_[16] = 1;
    sub_49A90((const char **)((char *)&v17 + 4));
    if (__p.__r_.__value_.__s.__data_[16])
    {
      std::string::size_type size = (const void *)__p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = 0;
      int v12 = &off_637B38;
      int v13 = size;
LABEL_5:
      sub_49A90(&__p);
      goto LABEL_6;
    }
  }
  sub_5505C(&v12, cf);
  int v12 = &off_637B38;
  if (__p.__r_.__value_.__s.__data_[16]) {
    goto LABEL_5;
  }
LABEL_6:
  sub_1D1CBC(a1, v13);
  sub_49A90(&v12);
  sub_49A90(&v10);
  BOOL v7 = (os_log_t *)sub_32A48(17);
  long long v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_168B00(&__p, *(const __CFArray **)a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v17 = "BluetoothProfiles_Aspen.cpp";
    __int16 v18 = 1024;
    *(_DWORD *)uint64_t v19 = 516;
    *(_WORD *)&v19[4] = 2080;
    *(void *)&v19[6] = p_p;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Updated aggregated devices: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::shared_timed_mutex::unlock(v4);
}

void sub_2A33E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_timed_mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_2A3428@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1 + 40;
  char v7 = 1;
  std::shared_timed_mutex::lock_shared((std::shared_timed_mutex *)(a1 + 40));
  uint64_t v4 = *(const void **)(a1 + 24);
  if (v4) {
    CFRetain(v4);
  }
  sub_68780(a2, v4);
  return sub_2A34A4((uint64_t)&v6);
}

void sub_2A3490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2A34A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::shared_timed_mutex::unlock_shared(*(std::shared_timed_mutex **)a1);
  }
  return a1;
}

void sub_2A34DC(uint64_t *a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  int v12 = *a2;
  if (*a2 == 1937204590)
  {
    if (sub_165200()) {
      return;
    }
LABEL_13:
    uint64_t v16 = a1[1];
    sub_1DB4C8(v16, a2, a3, a4, a5, a6);
    return;
  }
  if (v12 != 2004050279)
  {
    if (v12 == 1937208176)
    {
      int v13 = (os_log_t *)sub_32A48(17);
      __int16 v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, *a2);
        if (v19 >= 0) {
          AudioObjectID v15 = __p;
        }
        else {
          AudioObjectID v15 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v21 = "BluetoothProfiles_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 475;
        __int16 v24 = 2080;
        uint64_t v25 = v15;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property %s is read-only", buf, 0x1Cu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      return;
    }
    goto LABEL_13;
  }
  sub_1DB4C8(a1[1], a2, a3, a4, a5, a6);
  uint64_t v17 = *(void (**)(uint64_t *))(*a1 + 80);

  v17(a1);
}

void sub_2A3718(uint64_t a1, _DWORD *a2, UInt32 a3, const void *a4, UInt32 *a5, int *a6)
{
  BOOL v12 = *a2 == 1937208176 || *a2 == 1937204590;
  if (v12 && (sub_165200() & 1) != 0)
  {
    *a6 = 1;
    *a5 = 4;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 8);
    sub_1DCE88(v13, (uint64_t)a2, a3, a4, a5, a6);
  }
}

uint64_t sub_2A37D0(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  BOOL v8 = *a2 == 1937208176 || *a2 == 1937204590;
  if (v8 && (sub_165200() & 1) != 0) {
    return 4;
  }
  uint64_t v10 = *(void *)(a1 + 8);

  return sub_1DD6F8(v10, a2, a3, a4);
}

BOOL sub_2A3860(uint64_t a1, int *a2)
{
  if (*a2 == 1937204590)
  {
    if (sub_165200()) {
      return 1;
    }
  }
  else if (*a2 == 1937208176 && (sub_165200() & 1) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);

  return sub_1DDA4C(v5, a2);
}

uint64_t sub_2A38E8(uint64_t a1, int *a2)
{
  BOOL v4 = *a2 == 1937208176 || *a2 == 1937204590;
  if (v4 && (sub_165200() & 1) != 0) {
    return 1;
  }
  uint64_t v6 = *(unsigned int **)(a1 + 8);

  return sub_1DDAE8(v6, a2);
}

void sub_2A395C(uint64_t a1)
{
  sub_2A19D0((uint64_t)&__p, (uint64_t)&qword_6500C8);
  sub_43637C(v9, *(void *)(a1 + 8), (uint64_t)&__p);
  sub_FB288(&v10, v9);
  sub_8108(v9);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v7);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  for (uint64_t i = v11; i != &v10; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v3 = (void *)i[2];
    BOOL v4 = (std::__shared_weak_count *)i[3];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string __p = v3;
    uint64_t v6 = v4;
    sub_2A1A4C(a1, (unint64_t *)&__p);
    if (v4)
    {
      sub_4636C(v4);
      sub_4636C(v4);
    }
  }
  sub_B8E4(&v10);
}

void sub_2A3A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_8108((uint64_t *)va1);
  sub_470A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2A3A98(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  AudioObjectID v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
  sub_2A31A8(v2, v3);
  uint64_t v4 = *(void *)(a1 + 8);
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120))(v4);
  if (sub_165200())
  {
    uint64_t v6 = 0x100000001;
  }
  else
  {
    v111[0] = v5;
    strcpy(buf, "pswsbolg");
    buf[9] = 0;
    *(_WORD *)&uint8_t buf[10] = 0;
    unint64_t v7 = sub_26DAC(v111, (const AudioObjectPropertyAddress *)buf, 0, 0);
    *((void *)&v9 + 1) = v8;
    *(void *)&long long v9 = v7;
    uint64_t v6 = v9 >> 32;
  }
  *(_DWORD *)(v4 + 516) = v6;
  *(unsigned char *)(v4 + 520) = BYTE4(v6);
  uint64_t v10 = sub_32A48(17);
  uint64_t v11 = sub_32A48(28);
  char v12 = 0;
  uint64_t v13 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1;
    if (v16) {
      goto LABEL_10;
    }
  }
  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_10:
  uint64_t v17 = *(NSObject **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120))(v4);
    if (*(unsigned char *)(v4 + 520) && *(_DWORD *)(v4 + 516)) {
      char v19 = "yes";
    }
    else {
      char v19 = "no";
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 394;
    __int16 v123 = 1024;
    *(_DWORD *)char v124 = v18;
    *(_WORD *)&v124[4] = 2080;
    *(void *)&v124[6] = v19;
    _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software volume supported for Bluetooth device \"%u\": %s", buf, 0x22u);
  }
  AudioObjectID v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
  sub_1050A0((uint64_t)v111, 0x70687042u, v20);
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 8) + 128))(buf);
  std::string __p = (void *)CFStringCreateWithCString(0, "-btaudio", 0x600u);
  LOBYTE(v120) = 1;
  sub_1DEEA4((uint64_t)theString, (CFStringRef *)buf, (CFStringRef *)&__p);
  sub_72924((uint64_t)&__p);
  uint64_t v21 = (void *)sub_72924((uint64_t)buf);
  sub_21B7C(v21, theString[0]);
  sub_21C8C(&__p, "-tacl");
  if (v121 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v121 >= 0) {
    std::string::size_type v23 = HIBYTE(v121);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v120;
  }
  __int16 v24 = std::string::append((std::string *)buf, p_p, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  int64_t v109 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)char v108 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v121) < 0) {
    operator delete(__p);
  }
  if ((v124[3] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ((byte_64BB15 & 1) == 0)
  {
    LODWORD(__p) = 0;
    if (sub_1614F4(@"AutoRouteToBluetoothA2DP", @"com.apple.audio.virtualaudio", &__p))
    {
      __int16 v26 = (os_log_t *)sub_32A48(13);
      __int16 v27 = *v26;
      if (*v26)
      {
        BOOL v28 = os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT);
        int v29 = (int)__p;
        if (v28)
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 328;
          __int16 v123 = 2080;
          *(void *)char v124 = "AutoRouteToBluetoothA2DP";
          *(_WORD *)&v124[8] = 1024;
          *(_DWORD *)&v124[10] = __p;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }
      else
      {
        int v29 = (int)__p;
      }
      byte_64BB14 = v29 != 0;
    }
    byte_64BB15 = 1;
  }
  int v30 = byte_64BB14;
  uint64_t v31 = sub_32A48(17);
  uint64_t v32 = sub_32A48(28);
  char v33 = 0;
  uint64_t v34 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v35 = *(void *)(v31 + 8);
  while (1)
  {
    uint64_t v36 = *(int *)&buf[4 * v34];
    char v37 = v33;
    if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
      break;
    }
    char v33 = 1;
    uint64_t v34 = 1;
    if (v37) {
      goto LABEL_41;
    }
  }
  if ((v35 & v36) == 0) {
    uint64_t v31 = v32;
  }
LABEL_41:
  uint64_t v38 = *(NSObject **)v31;
  if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v39 = v113;
    uint64_t v40 = v112;
    uint64_t v41 = *(void *)v111;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 128))(&__p);
    if (v40) {
      uint64_t v42 = v40;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v39) {
      uint64_t v42 = v39;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "BluetoothProfiles_Aspen.cpp";
    uint64_t v43 = "routable";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 321;
    *(void *)char v124 = v42;
    __int16 v123 = 2112;
    if (!v30) {
      uint64_t v43 = "non-routable";
    }
    *(_WORD *)&v124[8] = 2112;
    *(void *)&v124[10] = __p;
    __int16 v125 = 2080;
    char v126 = v43;
    _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a bluetooth A2DP headphones port with name \"%@\" and UID \"%@\", %s", buf, 0x30u);
    sub_72924((uint64_t)&__p);
  }
  if (v109 >= 0) {
    uint64_t v44 = v108;
  }
  else {
    uint64_t v44 = (void **)v108[0];
  }
  CFStringRef v106 = CFStringCreateWithCString(0, (const char *)v44, 0x600u);
  char v107 = 1;
  int v45 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492));
  uint64_t v46 = (char *)operator new(0x2C8uLL);
  *((void *)v46 + 1) = 0;
  *((void *)v46 + 2) = 0;
  *(void *)uint64_t v46 = off_62B8C8;
  uint64_t v47 = *(void *)(a1 + 8);
  sub_166AC4((uint64_t)buf, 1885892674, v45);
  uint64_t v48 = v46 + 24;
  std::string __p = 0;
  char v120 = 0;
  uint64_t v121 = 0;
  sub_2776CC((uint64_t)(v46 + 24), (uint64_t *)buf, v47, (uint64_t)&__p, (uint64_t)v111, (uint64_t *)&v106, theString[0], v30 != 0);
  sub_463E0(*(void **)&v124[4]);
  *((void *)v46 + 3) = off_63DDC0;
  int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 120))(v47);
  CFStringRef v50 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  if (!v50)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  uint64_t v51 = (const __CFString **)(v46 + 696);
  LODWORD(v114) = v49;
  std::string __p = (void *)0x676C6F6264706964;
  LODWORD(v120) = 0;
  sub_1732FC((uint64_t)buf, (AudioObjectID *)&v114, (AudioObjectPropertyAddress *)&__p);
  LOBYTE(__p) = 0;
  LOBYTE(v120) = 0;
  if (buf[16])
  {
    std::string __p = *(void **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    LOBYTE(v120) = 1;
  }
  sub_E2A90((uint64_t)&buf[8]);
  sub_173418((void *)v46 + 87, (uint64_t)&__p, v50);
  sub_E2A90((uint64_t)&__p);
  CFRelease(v50);
  if (MGGetSInt32Answer() == 6) {
    char v52 = MGGetBoolAnswer();
  }
  else {
    char v52 = 1;
  }
  v46[704] = v52;
  v46[705] = 0;
  AudioObjectID v53 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 120))(v47);
  unint64_t v54 = sub_1D6C80(v53);
  BOOL v56 = (v55 & 0xFF00000000) == 0 || v54 == 0x100000001 || v54 == 1 || HIDWORD(v54) == 1;
  v46[706] = v56;
  uint64_t v58 = (*(uint64_t (**)(char *))(*((void *)v46 + 3) + 552))(v46 + 24);
  if (v58)
  {
    uint64_t v59 = sub_32A48(23);
    uint64_t v60 = sub_32A48(28);
    char v61 = 0;
    uint64_t v62 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v63 = *(void *)(v59 + 8);
    while (1)
    {
      uint64_t v64 = *(int *)&buf[4 * v62];
      char v65 = v61;
      if (((v63 & v64) != 0) != ((*(void *)(v60 + 8) & v64) != 0)) {
        break;
      }
      char v61 = 1;
      uint64_t v62 = 1;
      if (v65) {
        goto LABEL_76;
      }
    }
    if ((v63 & v64) == 0) {
      uint64_t v59 = v60;
    }
LABEL_76:
    uint64_t v66 = *(NSObject **)v59;
    if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v67 = (const __CFString *)*((void *)v46 + 34);
      CFStringRef v117 = v67;
      char v118 = v46[280];
      if (v118 && v67)
      {
        CFRetain(v67);
        CFStringRef v67 = v117;
      }
      sub_21B7C(&__p, v67);
      int v68 = SHIBYTE(v121);
      uint64_t v69 = (void **)__p;
      sub_2417C(&v114, v58);
      uint64_t v70 = &__p;
      if (v68 < 0) {
        uint64_t v70 = v69;
      }
      if (v116 >= 0) {
        uint64_t v71 = &v114;
      }
      else {
        uint64_t v71 = v114;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 112;
      __int16 v123 = 2080;
      *(void *)char v124 = v70;
      *(_WORD *)&v124[8] = 2080;
      *(void *)&v124[10] = v71;
      _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting sub port type for Bluetooth port \"%s\": %s", buf, 0x26u);
      if (v116 < 0) {
        operator delete(v114);
      }
      if (SHIBYTE(v121) < 0) {
        operator delete(__p);
      }
      sub_72924((uint64_t)&v117);
    }
    (*(void (**)(char *, uint64_t))(*(void *)v48 + 104))(v46 + 24, v58);
  }
  uint64_t v72 = sub_32A48(28);
  uint64_t v73 = sub_32A48(23);
  char v74 = 0;
  uint64_t v75 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v76 = *(void *)(v72 + 8);
  while (1)
  {
    uint64_t v77 = *(int *)&buf[4 * v75];
    char v78 = v74;
    if (((v76 & v77) != 0) != ((*(void *)(v73 + 8) & v77) != 0)) {
      break;
    }
    char v74 = 1;
    uint64_t v75 = 1;
    if (v78) {
      goto LABEL_98;
    }
  }
  if ((v76 & v77) == 0) {
    uint64_t v72 = v73;
  }
LABEL_98:
  char v79 = *(NSObject **)v72;
  if (v79 && os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    int v80 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 120))(v47);
    if ((*(unsigned int (**)(char *))(*(void *)v48 + 424))(v46 + 24))
    {
      if (!*v51)
      {
        CFStringRef v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v103, "Could not construct");
      }
      sub_20C54((uint64_t)&__p, *v51);
      if (v121 >= 0) {
        size_t v81 = &__p;
      }
      else {
        size_t v81 = __p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 116;
      __int16 v123 = 1024;
      *(_DWORD *)char v124 = v80;
      *(_WORD *)&v124[4] = 2080;
      *(void *)&v124[6] = v81;
      _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
      if (SHIBYTE(v121) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 116;
      __int16 v123 = 1024;
      *(_DWORD *)char v124 = v80;
      *(_WORD *)&v124[4] = 2080;
      *(void *)&v124[6] = "not supported";
      _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
    }
  }
  uint64_t v82 = sub_32A48(28);
  uint64_t v83 = sub_32A48(23);
  char v84 = 0;
  uint64_t v85 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v86 = *(void *)(v82 + 8);
  while (1)
  {
    uint64_t v87 = *(int *)&buf[4 * v85];
    char v88 = v84;
    if (((v86 & v87) != 0) != ((*(void *)(v83 + 8) & v87) != 0)) {
      break;
    }
    char v84 = 1;
    uint64_t v85 = 1;
    if (v88) {
      goto LABEL_114;
    }
  }
  if ((v86 & v87) == 0) {
    uint64_t v82 = v83;
  }
LABEL_114:
  char v89 = *(NSObject **)v82;
  if (v89 && os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    int v90 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 120))(v47);
    unsigned __int8 v91 = atomic_load((unsigned __int8 *)v46 + 706);
    CFStringRef v92 = "yes";
    *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
    *(_DWORD *)&buf[14] = 118;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(_WORD *)&unsigned char buf[12] = 1024;
    if ((v91 & 1) == 0) {
      CFStringRef v92 = "no";
    }
    __int16 v123 = 1024;
    *(_DWORD *)char v124 = v90;
    *(_WORD *)&v124[4] = 2080;
    *(void *)&v124[6] = v92;
    _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u is in ear: %s.", buf, 0x22u);
  }
  char v93 = (std::__shared_weak_count *)*((void *)v46 + 14);
  if (v93)
  {
    if (v93->__shared_owners_ != -1) {
      goto LABEL_124;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v46 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v46 + 2, 1uLL, memory_order_relaxed);
    *((void *)v46 + 13) = v48;
    *((void *)v46 + 14) = v46;
    std::__shared_weak_count::__release_weak(v93);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v46 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v46 + 2, 1uLL, memory_order_relaxed);
    *((void *)v46 + 13) = v48;
    *((void *)v46 + 14) = v46;
  }
  sub_4636C((std::__shared_weak_count *)v46);
LABEL_124:
  sub_72924((uint64_t)&v106);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 312))(*(void *)(a1 + 8)) & 0xFF00000000) != 0)
  {
    if (v109 >= 0) {
      size_t v94 = HIBYTE(v109);
    }
    else {
      size_t v94 = (size_t)v108[1];
    }
    int64_t v95 = buf;
    sub_5E220((uint64_t)buf, v94 + 10);
    if (v124[3] < 0) {
      int64_t v95 = *(unsigned char **)buf;
    }
    if (v94)
    {
      if (v109 >= 0) {
        OSStatus v96 = v108;
      }
      else {
        OSStatus v96 = (void **)v108[0];
      }
      memmove(v95, v96, v94);
    }
    strcpy(&v95[v94], "-reference");
    if (v124[3] >= 0) {
      int v97 = buf;
    }
    else {
      int v97 = *(const char **)buf;
    }
    char v114 = (void *)CFStringCreateWithCString(0, v97, 0x600u);
    char v115 = 1;
    int v98 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492));
    sub_2A2C3C(&__p, *(void *)(a1 + 8), 1885418100, (uint64_t)v111, (uint64_t *)&v114, theString, 1, v98);
    sub_72924((uint64_t)&v114);
    uint64_t v99 = __p;
    sub_250C08((uint64_t)(v46 + 24), (uint64_t)__p);
    char v100 = v120;
    v105[0] = v99;
    v105[1] = v120;
    sub_2A2D28(a1, v105);
    if (v100) {
      sub_4636C(v100);
    }
    if ((v124[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  v104[0] = v46 + 24;
  v104[1] = v46;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v46 + 1, 1uLL, memory_order_relaxed);
  sub_2A2D28(a1, v104);
  sub_4636C((std::__shared_weak_count *)v46);
  sub_4636C((std::__shared_weak_count *)v46);
  if (SHIBYTE(v109) < 0) {
    operator delete(v108[0]);
  }
  sub_72924((uint64_t)theString);
  sub_72924((uint64_t)&v113);
  sub_72924((uint64_t)&v112);
  sub_72924((uint64_t)v111);
  return 1;
}

void sub_2A49D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  __cxa_free_exception(v43);
  if (*v42) {
    CFRelease(*v42);
  }
  v40[1].__vftable = (std::__shared_weak_count_vtbl *)&off_629710;
  sub_277AEC(&v40[28].~__shared_weak_count);
  sub_104C04(v41);
  std::__shared_weak_count::~__shared_weak_count(v40);
  operator delete(v45);
  sub_72924((uint64_t)&a13);
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a22);
  sub_78FF8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_2A4BD4()
{
}

uint64_t sub_2A4BE0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2A4C04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B8C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2A4C58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B8C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2A4C78(uint64_t a1)
{
  sub_2A4CB0(a1);

  operator delete();
}

uint64_t sub_2A4CB0(uint64_t a1)
{
  *(void *)a1 = off_636D90;
  uint64_t v2 = (std::mutex *)(a1 + 40);
  uint64_t v3 = a1 + 24;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 152));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 104));
  std::mutex::~mutex(v2);
  sub_3D61C(v3);
  return a1;
}

uint64_t *sub_2A4D24()
{
  return &qword_6500F8;
}

void sub_2A4D30(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 16);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    AudioObjectID v5 = &v3;
    uint64_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))sub_2A4D8C);
  }
}

void sub_2A4D8C(uint64_t ***a1)
{
}

uint64_t sub_2A4DAC(void *a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32))(a1) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      int v18 = "BluetoothProfiles_Aspen.cpp";
      __int16 v19 = 1024;
      int v20 = 977;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"unknown property\"", (uint8_t *)&v17, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  uint64_t v12 = a1[1];

  return sub_1DB4C8(v12, a2, a3, a4, a5, a6);
}

void sub_2A4F2C(void *a1, _DWORD *a2, uint64_t a3, const void *a4, UInt32 *a5, int *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32))(a1) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      uint64_t v21 = "BluetoothProfiles_Aspen.cpp";
      __int16 v22 = 1024;
      int v23 = 959;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"unknown property\"", (uint8_t *)&v20, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v17 = 2003332927;
    goto LABEL_16;
  }
  if (*a2 == 1064725619)
  {
    UInt32 v12 = *a5;
    if (v12 == (*(unsigned int (**)(void *, _DWORD *, uint64_t, const void *))(*a1 + 48))(a1, a2, a3, a4))
    {
      *a6 = 0;
      return;
    }
    int v18 = (os_log_t *)sub_32A48(13);
    __int16 v19 = *v18;
    if (*v18)
    {
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        int v20 = 136315394;
        uint64_t v21 = "BluetoothProfiles_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 964;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kVirtualAudioDevicePropertyHasKnowableVolumeLevels\"", (uint8_t *)&v20, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v17 = 561211770;
LABEL_16:
    exception[2] = v17;
  }
  uint64_t v13 = a1[1];

  sub_1DCE88(v13, (uint64_t)a2, a3, a4, a5, a6);
}

uint64_t sub_2A51D0(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  if (*a2 == 1064725619) {
    return 4;
  }
  else {
    return sub_1DD6F8(*(void *)(a1 + 8), a2, a3, a4);
  }
}

BOOL sub_2A51F4(uint64_t a1, int *a2)
{
  return *a2 != 1064725619 && sub_1DDA4C(*(void *)(a1 + 8), a2);
}

uint64_t sub_2A5218(uint64_t a1, int *a2)
{
  if (*a2 == 1064725619) {
    return a2[1] == 1869968496;
  }
  else {
    return sub_1DDAE8(*(unsigned int **)(a1 + 8), a2);
  }
}

void sub_2A524C(uint64_t a1)
{
  sub_2A19D0((uint64_t)&__p, (uint64_t)&qword_6500F8);
  sub_43637C(v9, *(void *)(a1 + 8), (uint64_t)&__p);
  sub_FB288(&v10, v9);
  sub_8108(v9);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v7);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  for (uint64_t i = v11; i != &v10; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v3 = (void *)i[2];
    uint64_t v4 = (std::__shared_weak_count *)i[3];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string __p = v3;
    uint64_t v6 = v4;
    sub_2A1A4C(a1, (unint64_t *)&__p);
    if (v4)
    {
      sub_4636C(v4);
      sub_4636C(v4);
    }
  }
  sub_B8E4(&v10);
}

void sub_2A5340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_8108((uint64_t *)va1);
  sub_470A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2A5388(uint64_t *a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[1] + 88))(a1[1], 1);
  if (!v2)
  {
    uint64_t v11 = sub_32A48(17);
    uint64_t v12 = sub_32A48(28);
    char v13 = 0;
    uint64_t v14 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = (int)buf[v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_74;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_74:
    CFStringRef v67 = *(NSObject **)v11;
    if (v67 && os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v102 = 1024;
      *(_DWORD *)CFStringRef v103 = 805;
      _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth LE device has no output streams", (uint8_t *)buf, 0x12u);
    }
  }
  int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1[1] + 88))(a1[1], 0);
  if (v3)
  {
    uint64_t v4 = sub_32A48(17);
    uint64_t v5 = sub_32A48(28);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = (int)buf[v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    int v18 = *(NSObject **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v102 = 1024;
      *(_DWORD *)CFStringRef v103 = 808;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth LE device has input streams", (uint8_t *)buf, 0x12u);
    }
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 312))(a1[1]) & 0xFF00000000;
  if (v19)
  {
    uint64_t v20 = sub_32A48(17);
    uint64_t v21 = sub_32A48(28);
    char v22 = 0;
    uint64_t v23 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v24 = *(void *)(v20 + 8);
    while (1)
    {
      uint64_t v25 = (int)buf[v23];
      char v26 = v22;
      if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
        break;
      }
      char v22 = 1;
      uint64_t v23 = 1;
      if (v26) {
        goto LABEL_23;
      }
    }
    if ((v24 & v25) == 0) {
      uint64_t v20 = v21;
    }
LABEL_23:
    __int16 v27 = *(NSObject **)v20;
    if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v102 = 1024;
      *(_DWORD *)CFStringRef v103 = 811;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth LE device has tap input stream", (uint8_t *)buf, 0x12u);
    }
  }
  if (!v2)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_48;
  }
  AudioObjectID v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 120))(a1[1]);
  sub_1050A0((uint64_t)v98, 0x706C656Fu, v28);
  uint64_t v29 = sub_32A48(17);
  uint64_t v30 = sub_32A48(28);
  char v31 = 0;
  uint64_t v32 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v33 = *(void *)(v29 + 8);
  while (1)
  {
    uint64_t v34 = (int)buf[v32];
    char v35 = v31;
    if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
      break;
    }
    char v31 = 1;
    uint64_t v32 = 1;
    if (v35) {
      goto LABEL_34;
    }
  }
  if ((v33 & v34) == 0) {
    uint64_t v29 = v30;
  }
LABEL_34:
  uint64_t v38 = *(NSObject **)v29;
  if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v39 = *(void *)&v100[2];
    uint64_t v40 = *(void *)&v98[16];
    uint64_t v41 = *(void *)v98;
    (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 128))(__p);
    if (v40) {
      uint64_t v42 = v40;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v39) {
      uint64_t v42 = v39;
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
    __int16 v102 = 1024;
    *(_DWORD *)CFStringRef v103 = 821;
    *(_WORD *)&v103[4] = 2112;
    *(void *)&v103[6] = v42;
    *(_WORD *)&v103[14] = 2112;
    *(void **)&v103[16] = __p[0];
    _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating a bluetooth LE output port with name \"%@\" and UID \"%@\"", (uint8_t *)buf, 0x26u);
    sub_72924((uint64_t)__p);
  }
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128))(&v92);
  int v43 = atomic_load((unsigned int *)(a1[1] + 492));
  uint64_t v36 = (std::__shared_weak_count *)operator new(0x2B8uLL);
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)off_62B820;
  uint64_t v44 = a1[1];
  sub_166AC4((uint64_t)buf, 1886152047, v43);
  uint64_t v37 = (uint64_t)&v36[1];
  __p[0] = 0;
  __p[1] = 0;
  int64_t v97 = 0;
  CFStringRef theString = 0;
  char v95 = 1;
  sub_2776CC((uint64_t)&v36[1], (uint64_t *)buf, v44, (uint64_t)__p, (uint64_t)v98, (uint64_t *)&v92, 0, 1);
  sub_72924((uint64_t)&theString);
  sub_463E0(*(void **)&v103[10]);
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)off_63D070;
  shared_weak_owners = (std::__shared_weak_count *)v36[4].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v36[4].__shared_owners_ = v37;
    v36[4].__shared_weak_owners_ = (uint64_t)v36;
    goto LABEL_46;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v36[4].__shared_owners_ = v37;
    v36[4].__shared_weak_owners_ = (uint64_t)v36;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_46:
    sub_4636C(v36);
  }
  sub_72924((uint64_t)&v92);
  sub_72924((uint64_t)&v100[2]);
  sub_72924((uint64_t)&v98[16]);
  sub_72924((uint64_t)v98);
LABEL_48:
  unsigned int v46 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1[1] + 88))(a1[1], 0) - (v19 != 0);
  if (v46 >= 2)
  {
    uint64_t v86 = (os_log_t *)sub_32A48(13);
    uint64_t v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v102 = 1024;
      *(_DWORD *)CFStringRef v103 = 829;
      _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!v3)
  {
    uint64_t v55 = 0;
    BOOL v56 = 0;
    goto LABEL_116;
  }
  if (v46)
  {
    AudioObjectID v47 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 120))(a1[1]);
    sub_1050A0((uint64_t)v98, 0x706C6569u, v47);
    uint64_t v48 = sub_32A48(17);
    uint64_t v49 = sub_32A48(28);
    char v50 = 0;
    uint64_t v51 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v52 = *(void *)(v48 + 8);
    while (1)
    {
      uint64_t v53 = (int)buf[v51];
      char v54 = v50;
      if (((v52 & v53) != 0) != ((*(void *)(v49 + 8) & v53) != 0)) {
        break;
      }
      char v50 = 1;
      uint64_t v51 = 1;
      if (v54) {
        goto LABEL_61;
      }
    }
    if ((v52 & v53) == 0) {
      uint64_t v48 = v49;
    }
LABEL_61:
    uint64_t v59 = *(NSObject **)v48;
    if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v60 = *(void *)&v100[2];
      uint64_t v61 = *(void *)&v98[16];
      uint64_t v62 = *(void *)v98;
      (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 128))(__p);
      if (v61) {
        uint64_t v63 = v61;
      }
      else {
        uint64_t v63 = v62;
      }
      if (v60) {
        uint64_t v63 = v60;
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "BluetoothProfiles_Aspen.cpp";
      __int16 v102 = 1024;
      *(_DWORD *)CFStringRef v103 = 838;
      *(_WORD *)&v103[4] = 2112;
      *(void *)&v103[6] = v63;
      *(_WORD *)&v103[14] = 2112;
      *(void **)&v103[16] = __p[0];
      _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating a bluetooth LE input port with name \"%@\" and UID \"%@\"", (uint8_t *)buf, 0x26u);
      sub_72924((uint64_t)__p);
    }
    (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128))(&v92);
    int v64 = atomic_load((unsigned int *)(a1[1] + 492));
    uint64_t v55 = (std::__shared_weak_count *)operator new(0x2B8uLL);
    v55->__shared_owners_ = 0;
    v55->__shared_weak_owners_ = 0;
    v55->__vftable = (std::__shared_weak_count_vtbl *)off_62B858;
    uint64_t v65 = a1[1];
    sub_166AC4((uint64_t)buf, 1886152041, v64);
    uint64_t v57 = (uint64_t)&v55[1];
    __p[0] = 0;
    __p[1] = 0;
    int64_t v97 = 0;
    CFStringRef theString = 0;
    char v95 = 1;
    sub_2776CC((uint64_t)&v55[1], (uint64_t *)buf, v65, (uint64_t)__p, (uint64_t)v98, (uint64_t *)&v92, 0, 1);
    sub_72924((uint64_t)&theString);
    sub_463E0(*(void **)&v103[10]);
    v55[1].__vftable = (std::__shared_weak_count_vtbl *)off_6358C0;
    uint64_t v66 = (std::__shared_weak_count *)v55[4].__shared_weak_owners_;
    if (v66)
    {
      if (v66->__shared_owners_ != -1) {
        goto LABEL_79;
      }
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v55[4].__shared_owners_ = v57;
      v55[4].__shared_weak_owners_ = (uint64_t)v55;
      std::__shared_weak_count::__release_weak(v66);
    }
    else
    {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v55[4].__shared_owners_ = v57;
      v55[4].__shared_weak_owners_ = (uint64_t)v55;
    }
    sub_4636C(v55);
LABEL_79:
    sub_72924((uint64_t)&v92);
    sub_72924((uint64_t)&v100[2]);
    sub_72924((uint64_t)&v98[16]);
    sub_72924((uint64_t)v98);
    if (v19) {
      goto LABEL_80;
    }
    goto LABEL_57;
  }
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  if (v19)
  {
LABEL_80:
    AudioObjectID v68 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 120))(a1[1]);
    sub_1050A0((uint64_t)buf, 0x706C6574u, v68);
    (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128))(&theString);
    sub_21B7C(v98, theString);
    uint64_t v69 = std::string::append((std::string *)v98, "-reference", 0xAuLL);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    int64_t v97 = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if ((v98[23] & 0x80000000) != 0) {
      operator delete(*(void **)v98);
    }
    sub_72924((uint64_t)&theString);
    uint64_t v71 = sub_32A48(17);
    uint64_t v72 = sub_32A48(28);
    char v73 = 0;
    uint64_t v74 = 0;
    *(void *)int v98 = 0x100000002;
    uint64_t v75 = *(void *)(v71 + 8);
    while (1)
    {
      uint64_t v76 = *(int *)&v98[4 * v74];
      char v77 = v73;
      if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
        break;
      }
      char v73 = 1;
      uint64_t v74 = 1;
      if (v77) {
        goto LABEL_88;
      }
    }
    if ((v75 & v76) == 0) {
      uint64_t v71 = v72;
    }
LABEL_88:
    char v78 = *(NSObject **)v71;
    if (v78 && os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v79 = *(void *)&v103[18];
      uint64_t v80 = *(void *)&v103[2];
      uint64_t v81 = *(void *)buf;
      (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1[1] + 128))(&theString);
      if (v80) {
        uint64_t v82 = v80;
      }
      else {
        uint64_t v82 = v81;
      }
      if (v79) {
        uint64_t v82 = v79;
      }
      *(_DWORD *)int v98 = 136315906;
      *(void *)&v98[4] = "BluetoothProfiles_Aspen.cpp";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 852;
      *(_WORD *)&v98[18] = 2112;
      *(void *)&v98[20] = v82;
      __int16 v99 = 2112;
      *(void *)char v100 = theString;
      _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating a bluetooth LE Tap input port with name \"%@\" and UID \"%@\"", v98, 0x26u);
      sub_72924((uint64_t)&theString);
    }
    if (v97 >= 0) {
      uint64_t v83 = __p;
    }
    else {
      uint64_t v83 = (void **)__p[0];
    }
    CFStringRef theString = CFStringCreateWithCString(0, (const char *)v83, 0x600u);
    char v95 = 1;
    CFStringRef v92 = 0;
    char v93 = 1;
    int v84 = atomic_load((unsigned int *)(a1[1] + 492));
    BOOL v56 = (std::__shared_weak_count *)operator new(0x2B8uLL);
    v56->__shared_owners_ = 0;
    v56->__shared_weak_owners_ = 0;
    v56->__vftable = (std::__shared_weak_count_vtbl *)off_62B890;
    uint64_t v58 = (uint64_t)&v56[1];
    sub_277CE4(&v56[1].__vftable, a1[1], 1886152052, (uint64_t)buf, (uint64_t *)&theString, &v92, 1, v84);
    *(void *)int v98 = v56 + 1;
    *(void *)&v98[8] = v56;
    sub_56E64((uint64_t)v98, &v56[4].__shared_owners_, (uint64_t)&v56[1]);
    sub_72924((uint64_t)&v92);
    sub_72924((uint64_t)&theString);
    if (SHIBYTE(v97) < 0) {
      operator delete(__p[0]);
    }
    sub_72924((uint64_t)&v103[18]);
    sub_72924((uint64_t)&v103[2]);
    sub_72924((uint64_t)buf);
    if (!v2) {
      goto LABEL_104;
    }
    goto LABEL_102;
  }
LABEL_57:
  uint64_t v58 = 0;
  BOOL v56 = 0;
  if (v2)
  {
LABEL_102:
    if (v57) {
      sub_250C08(v37, v57);
    }
  }
LABEL_104:
  if (v58)
  {
    if (v37) {
      sub_250C08(v37, v58);
    }
    v91[0] = v58;
    v91[1] = v56;
    if (v56) {
      atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2A2D28((uint64_t)a1, v91);
    if (v56) {
      sub_4636C(v56);
    }
  }
  if (v57)
  {
    v90[0] = v57;
    v90[1] = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2A2D28((uint64_t)a1, v90);
    if (v55) {
      sub_4636C(v55);
    }
  }
LABEL_116:
  if (v37)
  {
    v89[0] = v37;
    v89[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2A2D28((uint64_t)a1, v89);
    if (v36) {
      sub_4636C(v36);
    }
  }
  *(_DWORD *)int v98 = 1;
  strcpy((char *)buf, "tcabbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  (*(void (**)(uint64_t *, _DWORD *, void, void, uint64_t, unsigned char *))(*a1 + 64))(a1, buf, 0, 0, 4, v98);
  if (v56) {
    sub_4636C(v56);
  }
  if (v55) {
    sub_4636C(v55);
  }
  if (v36) {
    sub_4636C(v36);
  }
  return 1;
}

void sub_2A61E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_78FF8((uint64_t)&a35);
  if (v39) {
    sub_4636C(v39);
  }
  if (v38) {
    sub_4636C(v38);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2A63AC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2A63D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B858;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2A6424(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_2A6448(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2A646C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_62B820;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_2A64C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_62B820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2A64E0()
{
}

uint64_t sub_2A64F8()
{
  if (dword_648A00 >= 5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid config");
  }
  return (uint64_t)*(&off_632810 + dword_648A00);
}

void sub_2A6568(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2A657C(void *a1, unsigned int a2)
{
  if (a2 < 0xDD6) {
    int v2 = off_62B960[a2];
  }
  else {
    int v2 = "NONAME";
  }
  return sub_21C8C(a1, v2);
}

uint64_t sub_2A65A0(unsigned int a1)
{
  if (a1 > 0xDD5 || *(_DWORD *)(sub_2A64F8() + 40 * a1) == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid ANC parameter id");
  }
  return sub_2A64F8() + 40 * a1;
}

void sub_2A6628(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2A663C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 1;
  }
  uint64_t v3 = v1 + 16;
  do
  {
    int v4 = (*(uint64_t (**)(void))(*(void *)(*(void *)(v3 - 16) + 80) + 32))();
    if (v4) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 16;
  }
  while (!v5);
  return v4 ^ 1u;
}

uint64_t sub_2A66B0(uint64_t a1)
{
  return sub_2A66B8(a1 - 80);
}

uint64_t sub_2A66B8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 96);
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  if (v1 == v2)
  {
    BOOL v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 213;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(v3 + 80) + 24))();
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_2A67FC(uint64_t a1)
{
  return sub_2A6804(a1 - 80);
}

uint64_t sub_2A6804(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 96);
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  if (v1 == v2)
  {
    BOOL v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 204;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(v3 + 80) + 16))();
  }
  while (v1 != v2);
  return result;
}

void sub_2A6948(uint64_t a1)
{
  sub_2A6984(a1 - 80);

  operator delete();
}

uint64_t sub_2A6984(uint64_t a1)
{
  *(void *)a1 = off_63E858;
  *(void *)(a1 + 80) = off_63E920;
  uint64_t v3 = (void **)(a1 + 96);
  sub_74004(&v3);

  return sub_FE920(a1);
}

uint64_t sub_2A6A0C(uint64_t a1)
{
  return sub_2A6984(a1 - 80);
}

uint64_t sub_2A6A14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v2 = *(void *)(a1 + 104);
  if (v1 == v2) {
    return 1;
  }
  uint64_t v3 = v1 + 16;
  do
  {
    int v4 = (*(uint64_t (**)(void))(*(void *)(*(void *)(v3 - 16) + 80) + 32))();
    if (v4) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 16;
  }
  while (!v5);
  return v4 ^ 1u;
}

void sub_2A6A88(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(long long **)(a1 + 96);
  uint64_t v3 = *(long long **)(a1 + 104);
  if (v2 != v3)
  {
    BOOL v5 = 0;
    do
    {
      long long v6 = *v2;
      uint64_t v7 = *((void *)v2 + 1);
      int v8 = v5;
      if (v7)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
        int v8 = a2[1];
      }
      unint64_t v9 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v9)
      {
        int v11 = *a2;
        uint64_t v12 = (v8 - *a2) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_60548();
        }
        long long v22 = v6;
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15 >> 60) {
          sub_60560();
        }
        uint64_t v16 = (char *)operator new(16 * v15);
        char v17 = &v16[16 * v12];
        int v18 = &v16[16 * v15];
        *(_OWORD *)char v17 = v22;
        BOOL v5 = v17 + 16;
        if (v8 == v11)
        {
          *a2 = v17;
          a2[1] = v5;
          a2[2] = v18;
          if (!v8) {
            goto LABEL_23;
          }
        }
        else
        {
          do
          {
            long long v19 = *((_OWORD *)v8 - 1);
            v8 -= 16;
            *((_OWORD *)v17 - 1) = v19;
            v17 -= 16;
            *(void *)int v8 = 0;
            *((void *)v8 + 1) = 0;
          }
          while (v8 != v11);
          uint64_t v20 = *a2;
          int v8 = a2[1];
          *a2 = v17;
          a2[1] = v5;
          a2[2] = v18;
          if (v8 != v20)
          {
            do
            {
              uint64_t v21 = (std::__shared_weak_count *)*((void *)v8 - 1);
              if (v21) {
                std::__shared_weak_count::__release_weak(v21);
              }
              v8 -= 16;
            }
            while (v8 != v20);
            int v8 = v20;
          }
          if (!v8) {
            goto LABEL_23;
          }
        }
        operator delete(v8);
      }
      else
      {
        *(_OWORD *)int v8 = v6;
        __int16 v10 = v8 + 16;
        a2[1] = v10;
        BOOL v5 = v10;
      }
LABEL_23:
      a2[1] = v5;
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_2A6C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_98D9C((void ***)&a12);
  _Unwind_Resume(a1);
}

void *sub_2A6C3C(void *result, void *a2)
{
  if (!*a2)
  {
    char v17 = (os_log_t *)sub_32A48(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)&void v20[4] = "MasterVolumeControl_HAL_Common.cpp";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 185;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inSubVolumeControl is NULL]: \"Argument inSubVolumeControl is NULL\"", v20, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "Argument inSubVolumeControl is NULL");
  }
  uint64_t v3 = result;
  int v4 = result + 14;
  unint64_t v5 = result[14];
  long long v6 = (_OWORD *)result[13];
  if ((unint64_t)v6 >= v5)
  {
    int v8 = result + 12;
    uint64_t v9 = result[12];
    uint64_t v10 = ((uint64_t)v6 - v9) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    long long v22 = v4;
    uint64_t v14 = (char *)sub_10724(v13);
    unint64_t v15 = &v14[16 * v10];
    *(void *)uint64_t v20 = v14;
    *(void *)&v20[8] = v15;
    uint64_t v21 = &v14[16 * v16];
    *(_OWORD *)unint64_t v15 = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    *(void *)&v20[16] = v15 + 16;
    sub_FBB48(v8, v20);
    uint64_t v7 = (_OWORD *)v3[13];
    uint64_t result = (void *)sub_98E24((uint64_t)v20);
  }
  else
  {
    *long long v6 = *(_OWORD *)a2;
    uint64_t v7 = v6 + 1;
    *a2 = 0;
    a2[1] = 0;
    result[13] = v7;
  }
  v3[13] = v7;
  return result;
}

void sub_2A6DF8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2A6E14(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 96);
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  if (v1 == v2)
  {
    unint64_t v5 = (os_log_t *)sub_32A48(13);
    long long v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 177;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
  }
  while (v1 != v2);
  return result;
}

BOOL sub_2A6F58(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v2 == v3)
  {
    unint64_t v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 159;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v5 = 1;
  do
  {
    if ((*(uint64_t (**)(float))(**(void **)v2 + 112))(a2)) {
      goto LABEL_14;
    }
    uint64_t v6 = sub_32A48(18);
    uint64_t v7 = sub_32A48(38);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_10;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_10:
    unint64_t v13 = *(NSObject **)v6;
    if (v13)
    {
      int v5 = 0;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 166;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d A call to StoreDefaultVolumeDecibels failed", buf, 0x12u);
    }
    int v5 = 0;
LABEL_14:
    v2 += 16;
  }
  while (v2 != v3);
  return v5 != 0;
}

uint64_t sub_2A71C8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_2A7214(a1, 0) + 104);

  return v1();
}

uint64_t sub_2A7214(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v2 == v3)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    char v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v12 = 1024;
      int v13 = 229;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  while ((*(unsigned int (**)(void))(**(void **)v2 + 152))() != a2)
  {
    v2 += 16;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *(void *)(a1 + 104)) {
    uint64_t v2 = *(void *)(a1 + 96);
  }
  return *(void *)v2;
}

uint64_t sub_2A738C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_2A7214(a1, 0) + 96);

  return v1();
}

void sub_2A73D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(uint64_t **)(a1 + 96);
  int v5 = *(uint64_t **)(a1 + 104);
  if (v4 == v5)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "MasterVolumeControl_HAL_Common.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 137;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", (uint8_t *)__p, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  do
  {
    uint64_t v9 = *v4;
    memset(__p, 0, sizeof(__p));
    sub_A2B64(__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v9 + 88))(v9, __p, a3, a4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v4 += 2;
  }
  while (v4 != v5);
}

void sub_2A757C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2A75A0(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2[1] <= *a2)
  {
    int v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      double v16 = *a2;
      uint64_t v15 = *((void *)a2 + 1);
      int v21 = 136315906;
      long long v22 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 124;
      __int16 v25 = 2048;
      uint64_t v26 = v15;
      __int16 v27 = 2048;
      double v28 = v16;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Argument desiredVolumeCurveRangeDB's mMaximum (%f) <= mMinimum (%f)\"", (uint8_t *)&v21, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) <= mMinimum (%f)");
  }
  uint64_t v6 = *(uint64_t **)(a1 + 96);
  uint64_t v7 = *(uint64_t **)(a1 + 104);
  if (v6 == v7)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    __int16 v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      long long v22 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 126;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", (uint8_t *)&v21, 0x12u);
    }
    int v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v20 = &off_6414D8;
    v20[2] = 2003332927;
  }
  do
  {
    uint64_t v11 = *v6;
    v6 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, double *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 80))(v11, a2, a3, a4, a5);
  }
  while (v6 != v7);
  return result;
}

void sub_2A77E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2A7800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(void **)(a1 + 96);
  int v5 = *(void **)(a1 + 104);
  if (v4 == v5)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 99;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v9 = 1;
  do
  {
    if ((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v4 + 72))(*v4, a2, a3, a4)) {
      goto LABEL_14;
    }
    uint64_t v10 = sub_32A48(18);
    uint64_t v11 = sub_32A48(38);
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_10;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_10:
    char v17 = *(NSObject **)v10;
    if (v17)
    {
      int v9 = 0;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 106;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d A call to UnregisterRelayedListener failed", buf, 0x12u);
    }
    int v9 = 0;
LABEL_14:
    v4 += 2;
  }
  while (v4 != v5);
  return v9 != 0;
}

BOOL sub_2A7A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(void **)(a1 + 96);
  int v5 = *(void **)(a1 + 104);
  if (v4 == v5)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 81;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v9 = 1;
  do
  {
    if ((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v4 + 64))(*v4, a2, a3, a4)) {
      goto LABEL_14;
    }
    uint64_t v10 = sub_32A48(18);
    uint64_t v11 = sub_32A48(38);
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_10;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_10:
    char v17 = *(NSObject **)v10;
    if (v17)
    {
      int v9 = 0;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v23 = 1024;
      int v24 = 88;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d A call to RegisterRelayedListener failed", buf, 0x12u);
    }
    int v9 = 0;
LABEL_14:
    v4 += 2;
  }
  while (v4 != v5);
  return v9 != 0;
}

uint64_t sub_2A7D00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    __int16 v19 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    int v28 = 136315394;
    uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
    __int16 v30 = 1024;
    int v31 = 58;
    int v20 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"";
LABEL_25:
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v28, 0x12u);
LABEL_26:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v24 = 2003332927;
    goto LABEL_27;
  }
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 32))(a1, a2, a3, a4) > a5)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    long long v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient.\"", (uint8_t *)&v28, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v24 = 561211770;
LABEL_27:
    exception[2] = v24;
  }
  if (((*(uint64_t (**)(void *, uint64_t))(*a1 + 24))(a1, a2) & 1) == 0)
  {
    __int16 v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 60;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Property is not settable.\"", (uint8_t *)&v28, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v24 = 1970171760;
    goto LABEL_27;
  }
  int v12 = *(_DWORD *)(a2 + 8);
  if ((v12 + 1) <= 1)
  {
    uint64_t v14 = (uint64_t *)a1[12];
    uint64_t v13 = (uint64_t *)a1[13];
    if (v14 != v13)
    {
      do
      {
        uint64_t v15 = *v14;
        v14 += 2;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, a2, a3, a4, a5, a6);
      }
      while (v14 != v13);
      return result;
    }
    __int16 v27 = (os_log_t *)sub_32A48(13);
    __int16 v19 = *v27;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    int v28 = 136315394;
    uint64_t v29 = "MasterVolumeControl_HAL_Common.cpp";
    __int16 v30 = 1024;
    int v31 = 66;
    int v20 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"volume control list is empty\"";
    goto LABEL_25;
  }
  char v17 = *(uint64_t (**)(void))(*(void *)sub_2A7214((uint64_t)a1, v12) + 48);

  return v17();
}

uint64_t sub_2A8140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      __int16 v19 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v20 = 1024;
      int v21 = 49;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v18, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v15 = 2003332927;
LABEL_14:
    exception[2] = v15;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) > *a5)
  {
    char v16 = (os_log_t *)sub_32A48(13);
    char v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      __int16 v19 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v20 = 1024;
      int v21 = 50;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient.\"", (uint8_t *)&v18, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v15 = 561211770;
    goto LABEL_14;
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)sub_2A7214(a1, *(_DWORD *)(a2 + 8)) + 40);

  return v10();
}

uint64_t sub_2A83C4(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      uint64_t v10 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v11 = 1024;
      int v12 = 41;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v4 = *(uint64_t (**)(void))(*(void *)sub_2A7214(a1, *(_DWORD *)(a2 + 8)) + 32);

  return v4();
}

uint64_t sub_2A8554(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      uint64_t v10 = "MasterVolumeControl_HAL_Common.cpp";
      __int16 v11 = 1024;
      int v12 = 33;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v4 = *(uint64_t (**)(void))(*(void *)sub_2A7214(a1, *(_DWORD *)(a2 + 8)) + 24);

  return v4();
}

uint64_t sub_2A86CC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104)) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_2A7214(a1, *(_DWORD *)(a2 + 8)) + 16);

  return v2();
}

void sub_2A8744(uint64_t a1)
{
  sub_2A6984(a1);

  operator delete();
}

BOOL sub_2A8780(uint64_t a1)
{
  return sub_2A8788(a1 - 80);
}

BOOL sub_2A8788(uint64_t a1)
{
  int v4 = 1836414053;
  uint64_t v5 = *(void *)(a1 + 96);
  int v2 = 4;
  int v3 = 0;
  (*(void (**)(void, int *, void, void, int *, int *))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), &v4, 0, 0, &v2, &v3);
  return v3 == 1;
}

uint64_t sub_2A8808(uint64_t a1)
{
  int v2 = 0;
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 16);
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), &v3, 0, 0, 4, &v2);
}

uint64_t sub_2A8874(uint64_t a1)
{
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 16);
  int v2 = 1;
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), &v3, 0, 0, 4, &v2);
}

void sub_2A88E8(uint64_t a1)
{
  sub_FE920(a1 - 80);

  operator delete();
}

uint64_t sub_2A8924(uint64_t a1)
{
  return sub_FE920(a1 - 80);
}

uint64_t sub_2A892C(uint64_t a1)
{
  int v2 = 0;
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 96);
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 88) + 48))(*(void *)(a1 + 88), &v3, 0, 0, 4, &v2);
}

uint64_t sub_2A8998(uint64_t a1)
{
  int v3 = 1836414053;
  uint64_t v4 = *(void *)(a1 + 96);
  int v2 = 1;
  return (*(uint64_t (**)(void, int *, void, void, uint64_t, int *))(**(void **)(a1 + 88) + 48))(*(void *)(a1 + 88), &v3, 0, 0, 4, &v2);
}

void sub_2A8A0C(uint64_t a1)
{
  sub_FE920(a1);

  operator delete();
}

BOOL sub_2A8A48(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_2A8A68(uint64_t a1, void *a2)
{
  *a2 = off_632B98;
}

void *sub_2A8A88()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_632B98;
  return result;
}

void sub_2A8AC0()
{
}

BOOL sub_2A8AD8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_2A8AF8(uint64_t a1, void *a2)
{
  *a2 = off_632B50;
}

void *sub_2A8B18()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_632B50;
  return result;
}

void sub_2A8B50()
{
}

uint64_t sub_2A8B68(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_2A8BDC(uint64_t a1, void *a2)
{
  *a2 = off_632B08;
}

void *sub_2A8BFC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_632B08;
  return result;
}

void sub_2A8C34()
{
}

uint64_t sub_2A8C4C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_2A8C84(uint64_t a1, void *a2)
{
  *a2 = off_632AC0;
}

void *sub_2A8CA4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_632AC0;
  return result;
}

void sub_2A8CDC()
{
}

uint64_t sub_2A8CF4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_2A8D2C(uint64_t a1, void *a2)
{
  *a2 = off_632A78;
}

void *sub_2A8D4C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_632A78;
  return result;
}

void sub_2A8D84()
{
}

BOOL sub_2A8D9C(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_2A8DC4(uint64_t a1, void *a2)
{
  *a2 = off_632A30;
}

void *sub_2A8DE4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_632A30;
  return result;
}

void sub_2A8E1C()
{
}

uint64_t sub_2A8E34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_2A8E6C(uint64_t a1, void *a2)
{
  *a2 = off_6329E8;
}

void *sub_2A8E8C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6329E8;
  return result;
}

void sub_2A8EC4()
{
}

#error "2A8EDC: too big function (funcsize=0)"

void sub_2CFE40()
{
}

uint64_t sub_2D3FB8(uint64_t a1, long long *a2)
{
  uint64_t v4 = sub_2978E4((char *)a1, (uint64_t)a2);
  sub_2D4420(v4 + 80, (uint64_t)(a2 + 5));
  sub_2978E4((char *)(a1 + 128), (uint64_t)(a2 + 8));
  sub_2D4420((unsigned char *)(a1 + 208), (uint64_t)(a2 + 13));
  memcpy((void *)(a1 + 256), a2 + 16, 0x10DuLL);
  sub_CAE80((unsigned char *)(a1 + 528), a2 + 33);
  sub_CAE80((unsigned char *)(a1 + 560), a2 + 35);
  sub_CAE80((unsigned char *)(a1 + 592), a2 + 37);
  sub_CAE80((unsigned char *)(a1 + 624), a2 + 39);
  long long v5 = a2[41];
  *(_OWORD *)(a1 + 665) = *(long long *)((char *)a2 + 665);
  *(_OWORD *)(a1 + 656) = v5;
  return a1;
}

void sub_2D4090(_Unwind_Exception *a1)
{
  if (v1[616] && (char)v1[615] < 0) {
    operator delete(*v7);
  }
  if (v1[584] && (char)v1[583] < 0) {
    operator delete(*v6);
  }
  if (v1[552] && (char)v1[551] < 0) {
    operator delete(*v5);
  }
  if (v1[248]) {
    sub_6C74C(v4);
  }
  sub_6C788(v3);
  if (v1[120]) {
    sub_6C74C(v2);
  }
  sub_6C788((uint64_t)v1);
  _Unwind_Resume(a1);
}

void *sub_2D4144(void *result, uint64_t a2, char *__s)
{
  if (!*(unsigned char *)(a2 + 24)) {
    return sub_21C8C(result, __s);
  }
  if (*(char *)(a2 + 23) < 0) {
    return sub_21E8C(result, *(void **)a2, *(void *)(a2 + 8));
  }
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  result[2] = *(void *)(a2 + 16);
  return result;
}

double sub_2D417C(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 6100);
  uint64_t v2 = sub_194A34(a1);
  double result = 0.0;
  *(_OWORD *)(v2 + 6080) = 0u;
  *(_OWORD *)(v2 + 6064) = 0u;
  *(_OWORD *)(v2 + 6048) = 0u;
  *(_DWORD *)(v2 + 6096) = 1684434036;
  unsigned char *v1 = 0;
  v1[4] = 0;
  v1[76] = 0;
  *(_OWORD *)(v2 + 6192) = 0u;
  *(_OWORD *)(v2 + 6208) = 0u;
  *(_OWORD *)(v2 + 6224) = 0u;
  *(_OWORD *)(v2 + 6240) = 0u;
  *(_OWORD *)(v2 + 6256) = 0u;
  *(_OWORD *)(v2 + 6272) = 0u;
  *(_OWORD *)(v2 + 6288) = 0u;
  *(void *)(v2 + 6304) = 0;
  *(_DWORD *)(v2 + 6312) = 1684434036;
  v1[216] = 0;
  v1[220] = 0;
  v1[292] = 0;
  *(void *)(v2 + 6472) = 0;
  *(_OWORD *)(v2 + 6440) = 0u;
  *(_OWORD *)(v2 + 6456) = 0u;
  *(_OWORD *)(v2 + 6408) = 0u;
  *(_OWORD *)(v2 + 6424) = 0u;
  return result;
}

double sub_2D4210(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 6536);
  uint64_t v2 = (unsigned char *)(a1 + 6100);
  uint64_t v3 = sub_194A34(a1);
  double result = 0.0;
  *(_OWORD *)(v3 + 6080) = 0u;
  *(_OWORD *)(v3 + 6064) = 0u;
  *(_OWORD *)(v3 + 6048) = 0u;
  *(_DWORD *)(v3 + 6096) = 1684434036;
  *uint64_t v2 = 0;
  v2[4] = 0;
  v2[76] = 0;
  *(_OWORD *)(v3 + 6192) = 0u;
  *(_OWORD *)(v3 + 6208) = 0u;
  *(_OWORD *)(v3 + 6224) = 0u;
  *(_OWORD *)(v3 + 6240) = 0u;
  *(_OWORD *)(v3 + 6256) = 0u;
  *(_OWORD *)(v3 + 6272) = 0u;
  *(_OWORD *)(v3 + 6288) = 0u;
  *(void *)(v3 + 6304) = 0;
  *(_DWORD *)(v3 + 6312) = 1684434036;
  v2[216] = 0;
  v2[220] = 0;
  v2[292] = 0;
  *(void *)(v3 + 6520) = 0;
  *(_OWORD *)(v3 + 6488) = 0u;
  *(_OWORD *)(v3 + 6504) = 0u;
  *(_OWORD *)(v3 + 6456) = 0u;
  *(_OWORD *)(v3 + 6472) = 0u;
  *(_OWORD *)(v3 + 6424) = 0u;
  *(_OWORD *)(v3 + 6440) = 0u;
  *(_OWORD *)(v3 + 6408) = 0u;
  *(_DWORD *)(v3 + 6528) = 1684434036;
  v2[432] = 0;
  unsigned char *v1 = 0;
  v1[72] = 0;
  *(_OWORD *)(v3 + 6624) = 0u;
  *(_OWORD *)(v3 + 6640) = 0u;
  *(_OWORD *)(v3 + 6656) = 0u;
  *(_OWORD *)(v3 + 6672) = 0u;
  *(void *)(v3 + 6688) = 0;
  return result;
}

char *sub_2D42D8(char *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  if (*(unsigned char *)(a2 + 72))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_21E8C(__dst, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      *((void *)__dst + 2) = *(void *)(a2 + 16);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      sub_21E8C(v3 + 24, *(void **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      *(_OWORD *)(v3 + 24) = *(_OWORD *)(a2 + 24);
      *((void *)v3 + 5) = *(void *)(a2 + 40);
    }
    __dst = v3 + 48;
    if (*(char *)(a2 + 71) < 0)
    {
      return (char *)sub_21E8C(__dst, *(void **)(a2 + 48), *(void *)(a2 + 56));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a2 + 48);
      *((void *)v3 + 8) = *(void *)(a2 + 64);
    }
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    *((void *)__dst + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    long long v5 = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(_OWORD *)(__dst + 24) = v5;
    *((void *)__dst + 5) = *(void *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *((void *)__dst + 8) = *(void *)(a3 + 64);
    *((_OWORD *)__dst + 3) = *(_OWORD *)(a3 + 48);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 48) = 0;
  }
  return __dst;
}

void sub_2D43D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D440C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a2 + 40)) {
    return sub_6E9C8(a1, a2);
  }
  else {
    return sub_6DBFC(a1, a3);
  }
}

unsigned char *sub_2D4420(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    sub_6E9C8((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_2D4464(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    sub_6C74C(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_2D4480(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_6789C((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (sub_67CEC(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t sub_2D457C(uint64_t a1, char *a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_21C8C((void *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 52) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  return a1;
}

void sub_2D45DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19518C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2D45F4(uint64_t a1)
{
  uint64_t v2 = 432;
  while (1)
  {
    uint64_t v3 = a1 + v2;
    unint64_t v4 = (void **)(a1 + v2 - 24);
    sub_195138(&v4);
    unint64_t v4 = (void **)(a1 + v2 - 48);
    sub_195138(&v4);
    if (*(char *)(a1 + v2 - 49) < 0) {
      operator delete(*(void **)(v3 - 72));
    }
    sub_6C788(v3 - 160);
    if (*(char *)(v3 - 169) < 0) {
      operator delete(*(void **)(a1 + v2 - 192));
    }
    unint64_t v4 = (void **)(v3 - 216);
    sub_19518C(&v4);
    v2 -= 216;
    if (!v2)
    {
      operator delete();
    }
  }
}

uint64_t sub_2D46B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_194F34(a1, a2);
  sub_194F34(v4 + 216, a2 + 216);
  sub_194F34(a1 + 432, a2 + 432);
  sub_194F34(a1 + 648, a2 + 648);
  sub_194F34(a1 + 864, a2 + 864);
  sub_194F34(a1 + 1080, a2 + 1080);
  sub_194F34(a1 + 1296, a2 + 1296);
  sub_194F34(a1 + 1512, a2 + 1512);
  sub_194F34(a1 + 1728, a2 + 1728);
  sub_194F34(a1 + 1944, a2 + 1944);
  sub_194F34(a1 + 2160, a2 + 2160);
  sub_194F34(a1 + 2376, a2 + 2376);
  sub_194F34(a1 + 2592, a2 + 2592);
  sub_194F34(a1 + 2808, a2 + 2808);
  sub_194F34(a1 + 3024, a2 + 3024);
  sub_194F34(a1 + 3240, a2 + 3240);
  sub_194F34(a1 + 3456, a2 + 3456);
  sub_194F34(a1 + 3672, a2 + 3672);
  sub_194F34(a1 + 3888, a2 + 3888);
  sub_194F34(a1 + 4104, a2 + 4104);
  sub_194F34(a1 + 4320, a2 + 4320);
  sub_194F34(a1 + 4536, a2 + 4536);
  sub_194F34(a1 + 4752, a2 + 4752);
  sub_194F34(a1 + 4968, a2 + 4968);
  sub_194F34(a1 + 5184, a2 + 5184);
  sub_194F34(a1 + 5400, a2 + 5400);
  sub_194F34(a1 + 5616, a2 + 5616);
  sub_194F34(a1 + 5832, a2 + 5832);
  return a1;
}

void sub_2D4848(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 192);
  sub_195138(&v2);
  uint64_t v2 = (void **)(a1 + 168);
  sub_195138(&v2);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  sub_6C788(a1 + 56);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = (void **)a1;
  sub_19518C(&v2);

  operator delete();
}

uint64_t **sub_2D48E8(uint64_t **a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    int8x8_t v5 = a2;
    unint64_t v6 = 0;
    uint8x8_t v7 = &a2[8 * a3];
    unint64_t v8 = a1 + 1;
    while (1)
    {
      unint64_t v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      uint64_t v10 = v6;
      __int16 v11 = v4;
      if (v6)
      {
        do
        {
          unint64_t v9 = v10;
          uint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          __int16 v11 = v9;
        }
        while (v12);
      }
      int v13 = *v5;
      if (*((_DWORD *)v9 + 8) < *v5)
      {
LABEL_9:
        uint64_t v14 = (char **)(v6 ? v9 : v4);
        int v15 = (char **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        uint64_t v14 = (char **)v4;
        int v15 = (char **)v4;
        if (v6)
        {
          int v15 = (char **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (char **)v6;
              int v19 = *((_DWORD *)v6 + 8);
              if (v13 >= v19) {
                break;
              }
              unint64_t v6 = (uint64_t *)*v14;
              int v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v19 >= v13) {
              break;
            }
            int v15 = v14 + 1;
            unint64_t v6 = (uint64_t *)v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        char v16 = (char *)operator new(0x40uLL);
        *((_DWORD *)v16 + 8) = *v5;
        char v17 = v16 + 40;
        if (*((char *)v5 + 31) < 0)
        {
          sub_21E8C(v17, *((void **)v5 + 1), *((void *)v5 + 2));
        }
        else
        {
          long long v18 = *(_OWORD *)(v5 + 2);
          *((void *)v16 + 7) = *((void *)v5 + 3);
          *(_OWORD *)char v17 = v18;
        }
        *(void *)char v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        *int v15 = v16;
        __int16 v20 = (uint64_t *)**a1;
        if (v20)
        {
          *a1 = v20;
          char v16 = *v15;
        }
        sub_46D00(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 8;
      if (v5 == v7) {
        break;
      }
      unint64_t v8 = (uint64_t **)*a1;
      unint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_2D4A80(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_2D4C0C(*v2);
  _Unwind_Resume(a1);
}

void *sub_2D4AA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_46B38(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_46B38(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_46B38(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  sub_46B38(a1 + 9, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  return a1;
}

void sub_2D4B5C(_Unwind_Exception *exception_object)
{
  int8x8_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  uint8x8_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D4BA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int8x8_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_2D4C0C(char *a1)
{
  if (a1)
  {
    sub_2D4C0C(*(void *)a1);
    sub_2D4C0C(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

uint64_t sub_2D4C68(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(20);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_N71.cpp";
      __int16 v10 = 1024;
      int v11 = 1108;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for spatial recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int8x8_t v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_N71.cpp";
        __int16 v10 = 1024;
        int v11 = 1109;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_2D4E60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D4E9C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(20);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_N71.cpp";
      __int16 v10 = 1024;
      int v11 = 1125;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for multicam recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int8x8_t v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_N71.cpp";
        __int16 v10 = 1024;
        int v11 = 1126;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_2D5094(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D50D0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(20);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_N71.cpp";
      __int16 v10 = 1024;
      int v11 = 1137;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for webcam recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int8x8_t v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_N71.cpp";
        __int16 v10 = 1024;
        int v11 = 1138;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_2D52C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D5304(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(20);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_N71.cpp";
      __int16 v10 = 1024;
      int v11 = 1149;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for webcam recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int8x8_t v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_N71.cpp";
        __int16 v10 = 1024;
        int v11 = 1150;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_2D54FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D5538(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(20);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_N71.cpp";
      __int16 v10 = 1024;
      int v11 = 1160;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for spatial recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int8x8_t v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_N71.cpp";
        __int16 v10 = 1024;
        int v11 = 1161;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_2D5730(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2D576C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = sub_66F48(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2D57CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2D57E8(uint64_t *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  int8x8_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_2DA7A4(a1, v3, *((_DWORD *)v5 + 8), (uint64_t)(v5 + 4));
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int8x8_t v5 = v7;
        }
        while (!v8);
      }
      int8x8_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_2D5880(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D5894@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  *a2 = a2 + 1;
  a2[4] = 0;
  a2[2] = 0;
  a2[3] = a2 + 4;
  a2[8] = 0;
  a2[7] = 0;
  a2[5] = 0;
  a2[6] = a2 + 7;
  uint64_t result = sub_37D740((uint64_t)a2, &qword_657018);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a1 + 33))
    {
      uint64_t v5 = 0x7370637000000000;
      long long v6 = *(_OWORD *)sub_3AEE60();
      int v7 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = 0;
      return sub_37EFEC((uint64_t)a2, (int *)&v5);
    }
  }
  return result;
}

void sub_2D5934(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D5950@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  *a2 = a2 + 1;
  a2[4] = 0;
  a2[2] = 0;
  a2[3] = a2 + 4;
  a2[8] = 0;
  a2[7] = 0;
  a2[5] = 0;
  a2[6] = a2 + 7;
  uint64_t result = sub_37D740((uint64_t)a2, &qword_656FF8);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a1 + 33))
    {
      uint64_t v5 = 0x7370637000000000;
      long long v6 = *(_OWORD *)sub_3AEE60();
      int v7 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = 0;
      return sub_37EFEC((uint64_t)a2, (int *)&v5);
    }
  }
  return result;
}

void sub_2D59F0(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D5A0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  *a2 = a2 + 1;
  a2[4] = 0;
  a2[2] = 0;
  a2[3] = a2 + 4;
  a2[8] = 0;
  a2[7] = 0;
  a2[5] = 0;
  a2[6] = a2 + 7;
  uint64_t result = sub_37D740((uint64_t)a2, &qword_656FD8);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a1 + 33))
    {
      uint64_t v5 = 0x7370637000000000;
      long long v6 = *(_OWORD *)sub_3AEE60();
      int v7 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = 0;
      return sub_37EFEC((uint64_t)a2, (int *)&v5);
    }
  }
  return result;
}

void sub_2D5AAC(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D5AC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  *a2 = a2 + 1;
  a2[4] = 0;
  a2[2] = 0;
  a2[3] = a2 + 4;
  a2[8] = 0;
  a2[7] = 0;
  a2[5] = 0;
  a2[6] = a2 + 7;
  uint64_t result = sub_37D740((uint64_t)a2, &qword_656F98);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a1 + 33))
    {
      uint64_t v5 = 0x7370637000000000;
      long long v6 = *(_OWORD *)sub_3AEE60();
      int v7 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = 0;
      return sub_37EFEC((uint64_t)a2, (int *)&v5);
    }
  }
  return result;
}

void sub_2D5B68(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D5B84()
{
  qword_657A98 = 0;
  qword_657A90 = (uint64_t)&qword_657A98;
  qword_657AB0 = 0;
  qword_657AA0 = 0;
  unk_657AA8 = &qword_657AB0;
  qword_657AD0 = 0;
  qword_657AC8 = 0;
  qword_657AB8 = 0;
  unk_657AC0 = &qword_657AC8;
  return sub_37D740((uint64_t)&qword_657A90, &qword_656FB8);
}

void sub_2D5BDC(_Unwind_Exception *a1)
{
}

void sub_2D5BF4()
{
  qword_657AE8 = 0;
  qword_657B00 = 0;
  qword_657AE0 = (uint64_t)&qword_657AE8;
  qword_657AF0 = 0;
  unk_657AF8 = &qword_657B00;
  qword_657B18 = 0;
  qword_657B20 = 0;
  qword_657B08 = 0;
  unk_657B10 = &qword_657B18;
  uint64_t v0 = 0x7672636700000000;
  long long v1 = *(_OWORD *)sub_3AEE60();
  int v2 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657AE0, (uint64_t)&v0, qword_657408);
  uint64_t v0 = 0x76726F6D00000000;
  long long v1 = *(_OWORD *)sub_3AEE60();
  int v2 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657AE0, (uint64_t)&v0, qword_657408);
  uint64_t v0 = 0x7668737400000000;
  long long v1 = *(_OWORD *)sub_3AEE60();
  int v2 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657AE0, (uint64_t)&v0, qword_657408);
  uint64_t v0 = 0x6563762000000000;
  long long v1 = *(_OWORD *)sub_3AEE60();
  int v2 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657AE0, (uint64_t)&v0, qword_657408);
  uint64_t v0 = 0x766D736700000000;
  long long v1 = *(_OWORD *)sub_3AEE60();
  int v2 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657AE0, (uint64_t)&v0, qword_657438);
  sub_E5310((uint64_t)&v0, 0, 1986884455, 2004367664);
  sub_37D10C((uint64_t **)&qword_657AE0, (uint64_t)&v0, qword_657448);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_2D5DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_657AE0);
  _Unwind_Resume(a1);
}

void sub_2D5E04()
{
  qword_657B38 = 0;
  qword_657B50 = 0;
  qword_657B30 = (uint64_t)&qword_657B38;
  qword_657B40 = 0;
  unk_657B48 = &qword_657B50;
  qword_657B68 = 0;
  qword_657B70 = 0;
  qword_657B58 = 0;
  unk_657B60 = &qword_657B68;
  uint64_t v2 = 0x696D766300000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_6573F8);
  uint64_t v2 = 0x696D6F6300000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_6573F8);
  uint64_t v2 = 0x676D637400000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_6573F8);
  for (uint64_t i = 0; i != 20; i += 4)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv_0[i];
    LODWORD(v2) = 0;
    HIDWORD(v2) = v1;
    long long v3 = *(_OWORD *)sub_3AEE60();
    int v4 = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    std::string __p = 0;
    sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_6573E8);
  }
  uint64_t v2 = 0x7672636700000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_657408);
  uint64_t v2 = 0x76726F6D00000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_657408);
  uint64_t v2 = 0x7668737400000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_657408);
  uint64_t v2 = 0x6563762000000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_657408);
  uint64_t v2 = 0x766D736700000000;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_657438);
  sub_E5310((uint64_t)&v2, 0, 1986884455, 2004367664);
  sub_37D10C((uint64_t **)&qword_657B30, (uint64_t)&v2, qword_657448);
  if (__p)
  {
    long long v6 = __p;
    operator delete(__p);
  }
}

void sub_2D60D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_657B30);
  _Unwind_Resume(a1);
}

void sub_2D6150()
{
  qword_657B88 = 0;
  qword_657B80 = (uint64_t)&qword_657B88;
  qword_657BA0 = 0;
  qword_657B90 = 0;
  unk_657B98 = &qword_657BA0;
  qword_657BC0 = 0;
  qword_657BB8 = 0;
  qword_657BA8 = 0;
  unk_657BB0 = &qword_657BB8;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&qword_668D60, qword_657458);
  uint64_t v2 = 0x696D646600000001;
  *(void *)&long long v3 = 1;
  DWORD2(v3) = 0;
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_657468);
  uint64_t v2 = 0x6D6F767000000001;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_657478);
  uint64_t v2 = 0x6D6F767000000001;
  *(void *)&long long v3 = 1;
  DWORD2(v3) = 0;
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_657488);
  uint64_t v2 = 0x6D736D7400000001;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_657498);
  uint64_t v2 = 0x7261772000000001;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_6574A8);
  uint64_t v2 = 0x696D766300000001;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_6574B8);
  uint64_t v2 = 0x696D6F6300000001;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_6574B8);
  uint64_t v2 = 0x676D637400000001;
  long long v3 = *(_OWORD *)sub_3AEE60();
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_6574B8);
  if (sub_20ADDC())
  {
    uint64_t v2 = 0x6563696D00000001;
    long long v3 = *(_OWORD *)sub_3AEE60();
    int v4 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_657590);
  }
  for (uint64_t i = 0; i != 20; i += 4)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv_0[i];
    LODWORD(v2) = 1;
    HIDWORD(v2) = v1;
    long long v3 = *(_OWORD *)sub_3AEE60();
    int v4 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    sub_37D10C((uint64_t **)&qword_657B80, (uint64_t)&v2, qword_6574C8);
    LODWORD(v2) = 1;
    HIDWORD(v2) = v1;
    long long v3 = *(_OWORD *)sub_3AEE60();
    int v4 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    sub_37E544((uint64_t)&qword_657B80, (int *)&v2, (uint64_t)&unk_572F80, 0);
  }
  sub_37E544((uint64_t)&qword_657B80, (int *)&qword_668D60, qword_656E68, dword_656E98);
  sub_3CD68C();
  if (!qword_65E370) {
    sub_37EBCC((uint64_t)&qword_657B80, (int *)&qword_668D60, 1);
  }
}

void sub_2D64DC(_Unwind_Exception *a1)
{
}

void sub_2D6544()
{
  qword_657BD8 = 0;
  qword_657BD0 = (uint64_t)&qword_657BD8;
  qword_657BF0 = 0;
  qword_657BE0 = 0;
  unk_657BE8 = &qword_657BF0;
  qword_657C10 = 0;
  qword_657C08 = 0;
  qword_657BF8 = 0;
  unk_657C00 = &qword_657C08;
  sub_37D10C((uint64_t **)&qword_657BD0, (uint64_t)&qword_668D60, qword_6574D8);
  sub_37E264((uint64_t)&qword_657BD0, 6);
  sub_3CD68C();
  if (HIDWORD(qword_65E378) == 1 || (sub_3CD68C(), HIDWORD(qword_65E378) == 2)) {
    sub_37E544((uint64_t)&qword_657BD0, (int *)&qword_668D60, qword_656E68, dword_656E98);
  }
}

void sub_2D65FC(_Unwind_Exception *a1)
{
}

void sub_2D6614()
{
  qword_657C28 = 0;
  qword_657C20 = (uint64_t)&qword_657C28;
  qword_657C40 = 0;
  qword_657C30 = 0;
  unk_657C38 = &qword_657C40;
  qword_657C60 = 0;
  qword_657C58 = 0;
  qword_657C48 = 0;
  unk_657C50 = &qword_657C58;
  sub_37D10C((uint64_t **)&qword_657C20, (uint64_t)&qword_668D60, qword_6574E8);
  sub_37E264((uint64_t)&qword_657C20, 6);
  sub_3CD68C();
  if (HIDWORD(qword_65E378) == 1 || (sub_3CD68C(), HIDWORD(qword_65E378) == 2)) {
    sub_37E544((uint64_t)&qword_657C20, (int *)&qword_668D60, qword_656E68, dword_656E98);
  }
}

void sub_2D66CC(_Unwind_Exception *a1)
{
}

uint64_t sub_2D66E4()
{
  qword_657C78 = 0;
  qword_657C70 = (uint64_t)&qword_657C78;
  qword_657C90 = 0;
  qword_657C80 = 0;
  unk_657C88 = &qword_657C90;
  qword_657CB0 = 0;
  qword_657CA8 = 0;
  qword_657C98 = 0;
  unk_657CA0 = &qword_657CA8;
  sub_37D10C((uint64_t **)&qword_657C70, (uint64_t)&qword_668D60, (uint64_t)&unk_657508);
  return sub_37E544((uint64_t)&qword_657C70, (int *)&qword_668D60, qword_656E68, dword_656E98);
}

void sub_2D6768(_Unwind_Exception *a1)
{
}

uint64_t sub_2D6780()
{
  qword_657CC8 = 0;
  qword_657CC0 = (uint64_t)&qword_657CC8;
  qword_657CE0 = 0;
  qword_657CD0 = 0;
  unk_657CD8 = &qword_657CE0;
  qword_657D00 = 0;
  qword_657CF8 = 0;
  qword_657CE8 = 0;
  unk_657CF0 = &qword_657CF8;
  uint64_t v1 = 0x696D646600000001;
  uint64_t v2 = 1;
  int v3 = 0;
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_37D10C((uint64_t **)&qword_657CC0, (uint64_t)&v1, qword_6575A0);
  uint64_t v1 = 0x6D6F767000000001;
  uint64_t v2 = 1;
  int v3 = 0;
  int v4 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  return sub_37E084((uint64_t **)&qword_657CC0, &v1, qword_6575B0);
}

void sub_2D6844(_Unwind_Exception *a1)
{
}

uint64_t sub_2D6860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = a2 + 32;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = a2 + 56;
  uint64_t result = sub_37D10C((uint64_t **)a2, (uint64_t)&qword_668D60, qword_6575C0);
  if (*(unsigned char *)(a1 + 556)) {
    return sub_37EBCC(a2, (int *)&qword_668D60, *(_DWORD *)(a1 + 552));
  }
  return result;
}

void sub_2D68DC(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D68F0()
{
  sub_37D6BC((uint64_t)&unk_657DB0, (uint64_t)&qword_668D60, qword_657800);
  uint64_t v1 = 0x696D646600000001;
  long long v2 = *(_OWORD *)sub_3AEE60();
  int v3 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  return sub_37E544((uint64_t)&unk_657DB0, (int *)&v1, qword_656E58, 0);
}

void sub_2D6970(_Unwind_Exception *a1)
{
}

uint64_t sub_2D698C()
{
  qword_657E08 = 0;
  qword_657E00 = (uint64_t)&qword_657E08;
  qword_657E20 = 0;
  qword_657E10 = 0;
  unk_657E18 = &qword_657E20;
  qword_657E40 = 0;
  qword_657E38 = 0;
  qword_657E28 = 0;
  unk_657E30 = &qword_657E38;
  sub_37D10C((uint64_t **)&qword_657E00, (uint64_t)&qword_668D60, qword_657600);
  return sub_37E544((uint64_t)&qword_657E00, (int *)&qword_668D60, (uint64_t)&unk_572FE0, 0);
}

void sub_2D6A0C(_Unwind_Exception *a1)
{
}

void sub_2D6A24()
{
  qword_657E58 = 0;
  qword_657E50 = (uint64_t)&qword_657E58;
  qword_657E70 = 0;
  qword_657E60 = 0;
  unk_657E68 = &qword_657E70;
  qword_657E90 = 0;
  qword_657E88 = 0;
  qword_657E78 = 0;
  unk_657E80 = &qword_657E88;
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)&qword_668D60, qword_6576D8);
  uint64_t v29 = 0x696D646600000001;
  uint64_t v30 = 2;
  int v31 = 0;
  int v32 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)&v29, qword_6575D0);
  sub_37E544((uint64_t)&qword_657E50, (int *)&qword_668D60, qword_656EA8, 0);
  uint64_t v29 = 0x696D646600000001;
  uint64_t v30 = 1;
  int v31 = 0;
  int v32 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)&v29, qword_6576E8);
  uint64_t v29 = 0x696D646600000001;
  uint64_t v30 = 3;
  int v31 = 0;
  int v32 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)&v29, qword_6575E0);
  uint64_t v29 = 0x6D6F767000000001;
  uint64_t v30 = 1;
  int v31 = 0;
  int v32 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  sub_37E084((uint64_t **)&qword_657E50, &v29, qword_6576F8);
  uint64_t v29 = 0x6D6F767000000001;
  uint64_t v30 = 3;
  int v31 = 0;
  int v32 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  sub_37E084((uint64_t **)&qword_657E50, &v29, qword_6575F0);
  sub_E5310((uint64_t)&v29, 1, 1768776806, 1633759844);
  DWORD2(v23[0]) = 0;
  *(void *)&v23[0] = 2;
  sub_19C2F8((uint64_t)v26, 1768776806, v23, 1633759844);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)&v29, qword_657708);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)v26, qword_657600);
  sub_37E544((uint64_t)&qword_657E50, (int *)&v29, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657E50, v26, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657E50, (int *)&v29, (uint64_t)&unk_572FB0, 1);
  sub_37E544((uint64_t)&qword_657E50, v26, (uint64_t)&unk_572FB0, 1);
  DWORD2(v20[0]) = 0;
  *(void *)&v20[0] = 1;
  sub_19C2F8((uint64_t)v23, 1768776806, v20, 1633759844);
  DWORD2(v17[0]) = 0;
  *(void *)&v17[0] = 3;
  sub_19C2F8((uint64_t)v20, 1768776806, v17, 1633759844);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)v23, qword_657710);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)v20, qword_657608);
  sub_37E544((uint64_t)&qword_657E50, (int *)v23, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657E50, (int *)v20, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657E50, (int *)v23, (uint64_t)&unk_572FB0, 1);
  sub_37E544((uint64_t)&qword_657E50, (int *)v20, (uint64_t)&unk_572FB0, 1);
  DWORD2(v14[0]) = 0;
  *(void *)&v14[0] = 1;
  sub_19C2F8((uint64_t)v17, 1836021360, v14, 1633759844);
  DWORD2(v11[0]) = 0;
  *(void *)&v11[0] = 3;
  sub_19C2F8((uint64_t)v14, 1836021360, v11, 1633759844);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)v17, qword_657718);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)v14, qword_657610);
  sub_37E544((uint64_t)&qword_657E50, (int *)v17, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657E50, (int *)v14, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657E50, (int *)v17, (uint64_t)&unk_572FB0, 1);
  sub_37E544((uint64_t)&qword_657E50, (int *)v14, (uint64_t)&unk_572FB0, 1);
  sub_E5310((uint64_t)v11, 1, 1751212899, 1634231920);
  LODWORD(v3) = 0;
  uint64_t v2 = 2;
  sub_19C2F8((uint64_t)v8, 1751212899, &v2, 1634231920);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)v11, qword_657708);
  sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)v8, qword_657600);
  sub_37E544((uint64_t)&qword_657E50, (int *)v11, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657E50, v8, (uint64_t)&unk_572FE0, 0);
  for (uint64_t i = 0; i != 20; i += 4)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv_0[i];
    LODWORD(v2) = 1;
    HIDWORD(v2) = v1;
    long long v3 = *(_OWORD *)sub_3AEE60();
    int v4 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    sub_37D10C((uint64_t **)&qword_657E50, (uint64_t)&v2, qword_657930);
    LODWORD(v2) = 1;
    HIDWORD(v2) = v1;
    long long v3 = *(_OWORD *)sub_3AEE60();
    int v4 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    sub_37E544((uint64_t)&qword_657E50, (int *)&v2, (uint64_t)&unk_572F80, 0);
  }
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    char v16 = v15;
    operator delete(v15);
  }
  if (v18)
  {
    int v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    long long v22 = v21;
    operator delete(v21);
  }
  if (v24)
  {
    __int16 v25 = v24;
    operator delete(v24);
  }
  if (v27)
  {
    int v28 = v27;
    operator delete(v27);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
}

void sub_2D706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a56) {
    operator delete(a56);
  }
  uint64_t v59 = *(void **)(v57 - 176);
  if (v59)
  {
    *(void *)(v57 - 168) = v59;
    operator delete(v59);
  }
  uint64_t v60 = *(void **)(v57 - 120);
  if (v60)
  {
    *(void *)(v57 - 112) = v60;
    operator delete(v60);
  }
  sub_FE10C((void **)&qword_657E50);
  _Unwind_Resume(a1);
}

void sub_2D7178()
{
  qword_657EA8 = 0;
  qword_657EA0 = (uint64_t)&qword_657EA8;
  qword_657EC0 = 0;
  qword_657EB0 = 0;
  unk_657EB8 = &qword_657EC0;
  qword_657EE0 = 0;
  qword_657ED8 = 0;
  qword_657EC8 = 0;
  unk_657ED0 = &qword_657ED8;
  sub_37D10C((uint64_t **)&qword_657EA0, (uint64_t)&qword_668D60, qword_6577C8);
  sub_37E544((uint64_t)&qword_657EA0, (int *)&qword_668D60, qword_656EA8, 0);
  sub_E5310((uint64_t)v4, 1, 1768776806, 1633759844);
  DWORD2(v0) = 0;
  *(void *)&long long v0 = 2;
  sub_19C2F8((uint64_t)v1, 1768776806, &v0, 1633759844);
  sub_37D10C((uint64_t **)&qword_657EA0, (uint64_t)v4, qword_6577C8);
  sub_37D10C((uint64_t **)&qword_657EA0, (uint64_t)v1, qword_657600);
  sub_37E544((uint64_t)&qword_657EA0, v4, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657EA0, v1, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657EA0, v4, (uint64_t)&unk_572FB0, 1);
  sub_37E544((uint64_t)&qword_657EA0, v1, (uint64_t)&unk_572FB0, 1);
  if (__p)
  {
    long long v3 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
}

void sub_2D7300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_657EA0);
  _Unwind_Resume(a1);
}

void sub_2D734C()
{
  qword_657EF8 = 0;
  qword_657EF0 = (uint64_t)&qword_657EF8;
  qword_657F10 = 0;
  qword_657F00 = 0;
  unk_657F08 = &qword_657F10;
  qword_657F30 = 0;
  qword_657F28 = 0;
  qword_657F18 = 0;
  unk_657F20 = &qword_657F28;
  sub_37D10C((uint64_t **)&qword_657EF0, (uint64_t)&qword_668D60, qword_657810);
  sub_37E264((uint64_t)&qword_657EF0, 6);
  sub_37E544((uint64_t)&qword_657EF0, (int *)&qword_668D60, qword_656E58, 0);
  sub_E5310((uint64_t)v6, 1, 1768776806, 1633759844);
  sub_37D10C((uint64_t **)&qword_657EF0, (uint64_t)v6, qword_6577D0);
  sub_37E544((uint64_t)&qword_657EF0, v6, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657EF0, v6, (uint64_t)&unk_572FB0, 1);
  sub_E5310((uint64_t)v3, 1, 1936683886, 1633759844);
  sub_37D10C((uint64_t **)&qword_657EF0, (uint64_t)v3, qword_6577D8);
  sub_37E544((uint64_t)&qword_657EF0, v3, (uint64_t)&unk_572FE0, 0);
  sub_37E544((uint64_t)&qword_657EF0, v3, (uint64_t)&unk_572FB0, 1);
  sub_E5310((uint64_t)v0, 1, 1768776806, 1634231920);
  sub_37D10C((uint64_t **)&qword_657EF0, (uint64_t)v0, qword_6577E0);
  if (__p)
  {
    uint64_t v2 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v0, 1, 1768776806, 1667982960);
  sub_37D10C((uint64_t **)&qword_657EF0, (uint64_t)v0, qword_6577F0);
  if (__p)
  {
    uint64_t v2 = __p;
    operator delete(__p);
  }
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
}

void sub_2D7564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  int v24 = *(void **)(v22 - 40);
  if (v24)
  {
    *(void *)(v22 - 32) = v24;
    operator delete(v24);
  }
  sub_FE10C((void **)&qword_657EF0);
  _Unwind_Resume(a1);
}

uint64_t sub_2D75D8()
{
  qword_657F48 = 0;
  qword_657F40 = (uint64_t)&qword_657F48;
  qword_657F60 = 0;
  qword_657F50 = 0;
  unk_657F58 = &qword_657F60;
  qword_657F80 = 0;
  qword_657F78 = 0;
  qword_657F68 = 0;
  unk_657F70 = &qword_657F78;
  return sub_37D10C((uint64_t **)&qword_657F40, (uint64_t)&qword_668D60, qword_657808);
}

void sub_2D7638(_Unwind_Exception *a1)
{
}

uint64_t sub_2D7650()
{
  qword_657F98 = 0;
  qword_657F90 = (uint64_t)&qword_657F98;
  qword_657FB0 = 0;
  qword_657FA0 = 0;
  unk_657FA8 = &qword_657FB0;
  qword_657FD0 = 0;
  qword_657FC8 = 0;
  qword_657FB8 = 0;
  unk_657FC0 = &qword_657FC8;
  sub_E5310((uint64_t)v1, 1, 1768776806, 1634231920);
  sub_37D10C((uint64_t **)&qword_657F90, (uint64_t)v1, qword_6577E8);
  if (__p)
  {
    long long v3 = __p;
    operator delete(__p);
  }
  return sub_37D10C((uint64_t **)&qword_657F90, (uint64_t)&qword_668D60, qword_6577E0);
}

void sub_2D7704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_2D7738()
{
  qword_657FE8 = 0;
  qword_657FE0 = (uint64_t)&qword_657FE8;
  qword_658000 = 0;
  qword_657FF0 = 0;
  unk_657FF8 = &qword_658000;
  qword_658020 = 0;
  qword_658018 = 0;
  qword_658008 = 0;
  unk_658010 = &qword_658018;
  sub_E5310((uint64_t)v0, 1, 1768776806, 1634231920);
  sub_37D10C((uint64_t **)&qword_657FE0, (uint64_t)v0, qword_6576C8);
  if (__p)
  {
    uint64_t v2 = __p;
    operator delete(__p);
  }
}

void sub_2D77D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_657FE0);
  _Unwind_Resume(a1);
}

void sub_2D7800()
{
  qword_658038 = 0;
  qword_658030 = (uint64_t)&qword_658038;
  qword_658050 = 0;
  qword_658040 = 0;
  unk_658048 = &qword_658050;
  qword_658070 = 0;
  qword_658068 = 0;
  qword_658058 = 0;
  unk_658060 = &qword_658068;
  sub_E5310((uint64_t)v0, 1, 1768776806, 1634231920);
  sub_37D10C((uint64_t **)&qword_658030, (uint64_t)v0, qword_6576C0);
  if (__p)
  {
    uint64_t v2 = __p;
    operator delete(__p);
  }
}

void sub_2D7898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_658030);
  _Unwind_Resume(a1);
}

uint64_t sub_2D78C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = a2 + 32;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = a2 + 56;
  uint64_t result = sub_37D10C((uint64_t **)a2, (uint64_t)&qword_668D60, qword_657890);
  if (*(unsigned char *)(a1 + 32)) {
    return sub_37E544(a2, (int *)&qword_668D60, qword_656E88, 0);
  }
  return result;
}

void sub_2D794C(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D7960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = a2 + 32;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = a2 + 56;
  sub_37D10C((uint64_t **)a2, (uint64_t)&qword_668D60, qword_6578A0);
  uint64_t v9 = 0x696D766300000001;
  long long v10 = *(_OWORD *)sub_3AEE60();
  int v11 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  sub_37D10C((uint64_t **)a2, (uint64_t)&v9, qword_6578B0);
  uint64_t v9 = 0x696D6F6300000001;
  long long v10 = *(_OWORD *)sub_3AEE60();
  int v11 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  sub_37D10C((uint64_t **)a2, (uint64_t)&v9, qword_6578B0);
  uint64_t v9 = 0x676D637400000001;
  long long v10 = *(_OWORD *)sub_3AEE60();
  int v11 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  sub_37D10C((uint64_t **)a2, (uint64_t)&v9, qword_6578B0);
  for (uint64_t i = 0; i != 20; i += 4)
  {
    int v5 = *(_DWORD *)&aOvpvivpvcgpvcv_0[i];
    LODWORD(v9) = 1;
    HIDWORD(v9) = v5;
    long long v10 = *(_OWORD *)sub_3AEE60();
    int v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    sub_37D10C((uint64_t **)a2, (uint64_t)&v9, qword_6578C0);
  }
  if (*(unsigned char *)(a1 + 32))
  {
    sub_37E544(a2, (int *)&qword_668D60, qword_656E88, 0);
    for (uint64_t j = 0; j != 20; j += 4)
    {
      int v7 = *(_DWORD *)&aOvpvivpvcgpvcv_0[j];
      LODWORD(v9) = 1;
      HIDWORD(v9) = v7;
      long long v10 = *(_OWORD *)sub_3AEE60();
      int v11 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      sub_37E544(a2, (int *)&v9, (uint64_t)&unk_572F80, 0);
    }
  }
  return sub_37EBCC(a2, (int *)&qword_668D60, 1);
}

void sub_2D7B70(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D7BAC()
{
  qword_658178 = 0;
  qword_658170 = (uint64_t)&qword_658178;
  qword_658190 = 0;
  qword_658180 = 0;
  unk_658188 = &qword_658190;
  qword_6581B0 = 0;
  qword_6581A8 = 0;
  qword_658198 = 0;
  unk_6581A0 = &qword_6581A8;
  sub_37D10C((uint64_t **)&qword_658170, (uint64_t)&qword_668D60, qword_6578F0);
  uint64_t v3 = 0x696D766300000001;
  long long v4 = *(_OWORD *)sub_3AEE60();
  int v5 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  sub_37D10C((uint64_t **)&qword_658170, (uint64_t)&v3, qword_657900);
  uint64_t v3 = 0x696D6F6300000001;
  long long v4 = *(_OWORD *)sub_3AEE60();
  int v5 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  sub_37D10C((uint64_t **)&qword_658170, (uint64_t)&v3, qword_657900);
  uint64_t v3 = 0x676D637400000001;
  long long v4 = *(_OWORD *)sub_3AEE60();
  int v5 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  sub_37D10C((uint64_t **)&qword_658170, (uint64_t)&v3, qword_657900);
  for (uint64_t i = 0; i != 20; i += 4)
  {
    int v1 = *(_DWORD *)&aOvpvivpvcgpvcv_0[i];
    LODWORD(v3) = 1;
    HIDWORD(v3) = v1;
    long long v4 = *(_OWORD *)sub_3AEE60();
    int v5 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    sub_37D10C((uint64_t **)&qword_658170, (uint64_t)&v3, qword_657910);
    LODWORD(v3) = 1;
    HIDWORD(v3) = v1;
    long long v4 = *(_OWORD *)sub_3AEE60();
    int v5 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    sub_37E544((uint64_t)&qword_658170, (int *)&v3, (uint64_t)&unk_572F80, 0);
  }
  return sub_37EBCC((uint64_t)&qword_658170, (int *)&qword_668D60, 1);
}

void sub_2D7D94(_Unwind_Exception *a1)
{
}

uint64_t sub_2D7DD4()
{
  qword_6581C8 = 0;
  qword_6581C0 = (uint64_t)&qword_6581C8;
  qword_6581E0 = 0;
  qword_6581D0 = 0;
  unk_6581D8 = &qword_6581E0;
  qword_658200 = 0;
  qword_6581F8 = 0;
  qword_6581E8 = 0;
  unk_6581F0 = &qword_6581F8;
  sub_37D10C((uint64_t **)&qword_6581C0, (uint64_t)&qword_668D60, qword_6578D0);
  sub_E5310((uint64_t)v1, 1, 1768776806, 1919443299);
  sub_37D10C((uint64_t **)&qword_6581C0, (uint64_t)v1, qword_6578D0);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_37E264((uint64_t)&qword_6581C0, 0);
  return sub_37EBCC((uint64_t)&qword_6581C0, (int *)&qword_668D60, 1);
}

void sub_2D7EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_6581C0);
  _Unwind_Resume(a1);
}

uint64_t sub_2D7ED8()
{
  qword_658218 = 0;
  qword_658210 = (uint64_t)&qword_658218;
  qword_658230 = 0;
  qword_658220 = 0;
  unk_658228 = &qword_658230;
  qword_658250 = 0;
  qword_658248 = 0;
  qword_658238 = 0;
  unk_658240 = &qword_658248;
  sub_37D10C((uint64_t **)&qword_658210, (uint64_t)&qword_668D60, qword_657920);
  sub_37E264((uint64_t)&qword_658210, 0);
  return sub_37EBCC((uint64_t)&qword_658210, (int *)&qword_668D60, 1);
}

void sub_2D7F60(_Unwind_Exception *a1)
{
}

void sub_2D7F78()
{
  qword_658268 = 0;
  qword_658260 = (uint64_t)&qword_658268;
  qword_658280 = 0;
  qword_658270 = 0;
  unk_658278 = &qword_658280;
  qword_6582A0 = 0;
  qword_658298 = 0;
  qword_658288 = 0;
  unk_658290 = &qword_658298;
  sub_37D10C((uint64_t **)&qword_658260, (uint64_t)&qword_668D60, qword_6574F8);
  sub_37E264((uint64_t)&qword_658260, 0);
  sub_3CD68C();
  if (!qword_65E370) {
    sub_37EBCC((uint64_t)&qword_658260, (int *)&qword_668D60, 1);
  }
}

void sub_2D8010(_Unwind_Exception *a1)
{
}

uint64_t sub_2D8028()
{
  qword_6582B8 = 0;
  qword_6582B0 = (uint64_t)&qword_6582B8;
  qword_6582D0 = 0;
  qword_6582C0 = 0;
  unk_6582C8 = &qword_6582D0;
  qword_6582F0 = 0;
  qword_6582E8 = 0;
  qword_6582D8 = 0;
  qword_6582E0 = (uint64_t)&qword_6582E8;
  sub_37D740((uint64_t)&qword_6582B0, &qword_657398);
  uint64_t v0 = qword_6582E8;
  if (qword_6582E8)
  {
    while (1)
    {
      while (1)
      {
        int v1 = (uint64_t *)v0;
        unsigned int v2 = *(_DWORD *)(v0 + 28);
        if (v2 <= 0x696D6466) {
          break;
        }
        uint64_t v0 = *v1;
        uint64_t v3 = v1;
        if (!*v1) {
          goto LABEL_9;
        }
      }
      if (v2 == 1768776806) {
        break;
      }
      uint64_t v0 = v1[1];
      if (!v0)
      {
        uint64_t v3 = v1 + 1;
        goto LABEL_9;
      }
    }
    long long v4 = v1;
  }
  else
  {
    uint64_t v3 = &qword_6582E8;
    int v1 = &qword_6582E8;
LABEL_9:
    long long v4 = operator new(0x30uLL);
    v4[7] = 1768776806;
    *((void *)v4 + 4) = 0;
    v4[10] = 0;
    *(void *)long long v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = v1;
    uint64_t *v3 = (uint64_t)v4;
    int v5 = (uint64_t *)v4;
    if (*(void *)qword_6582E0)
    {
      qword_6582E0 = *(void *)qword_6582E0;
      int v5 = (uint64_t *)*v3;
    }
    sub_46D00((uint64_t *)qword_6582E8, v5);
    ++qword_6582F0;
  }
  v4[10] = 1886216809;
  return sub_37D420((uint64_t)&qword_6582B0);
}

void sub_2D8158(_Unwind_Exception *a1)
{
}

uint64_t sub_2D8170()
{
  qword_658308 = 0;
  qword_658300 = (uint64_t)&qword_658308;
  qword_658320 = 0;
  qword_658310 = 0;
  unk_658318 = &qword_658320;
  qword_658340 = 0;
  qword_658338 = 0;
  qword_658328 = 0;
  unk_658330 = &qword_658338;
  return sub_37D740((uint64_t)&qword_658300, &qword_6573B8);
}

void sub_2D81C8(_Unwind_Exception *a1)
{
}

uint64_t sub_2D81E0()
{
  qword_658528 = 0;
  qword_658520 = (uint64_t)&qword_658528;
  qword_658540 = 0;
  qword_658530 = 0;
  unk_658538 = &qword_658540;
  qword_658560 = 0;
  qword_658558 = 0;
  qword_658548 = 0;
  unk_658550 = &qword_658558;
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    sub_37D10C((uint64_t **)&qword_658520, (uint64_t)&qword_668D60, qword_657940);
    sub_37E544((uint64_t)&qword_658520, (int *)&qword_668D60, (uint64_t)&unk_573010, 1);
    return sub_37E264((uint64_t)&qword_658520, 6);
  }
  return result;
}

void sub_2D8290(_Unwind_Exception *a1)
{
}

uint64_t sub_2D82A8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_46B38((void *)(a1 + 24), *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_46B38((void *)(a1 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 2);
  long long v5 = *(long long *)((char *)a2 + 72);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(_OWORD *)(a1 + 72) = v5;
  sub_46A4C((uint64_t *)(a1 + 96), (uint64_t)(a2 + 6));
  __int16 v6 = *((_WORD *)a2 + 60);
  *(unsigned char *)(a1 + 122) = *((unsigned char *)a2 + 122);
  *(_WORD *)(a1 + 120) = v6;
  *(unsigned char *)(a1 + 128) = 1;
  return a1;
}

void sub_2D8360(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  __int16 v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_2D8394(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    __int16 v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
      __int16 v20 = 0;
LABEL_29:
      sub_463E0(v20);
      goto LABEL_30;
    }
    long long v10 = sub_6CA9C((uint64_t)v9);
    if (a2 != a3)
    {
      int v11 = v9;
      uint64_t v12 = a2;
      do
      {
        uint64_t v9 = v10;
        int v13 = *((_DWORD *)v12 + 7);
        *((_DWORD *)v11 + 7) = v13;
        uint64_t v14 = *v8;
        int v15 = (uint64_t **)(a1 + 8);
        char v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              int v15 = (uint64_t **)v14;
              if (v13 >= *((_DWORD *)v14 + 7)) {
                break;
              }
              uint64_t v14 = (uint64_t *)*v14;
              char v16 = v15;
              if (!*v15) {
                goto LABEL_14;
              }
            }
            uint64_t v14 = (uint64_t *)v14[1];
          }
          while (v14);
          char v16 = v15 + 1;
        }
LABEL_14:
        sub_46CA8((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10) {
          long long v10 = sub_6CA9C((uint64_t)v10);
        }
        else {
          long long v10 = 0;
        }
        char v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            char v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            a2 = (void *)v12[2];
            BOOL v18 = *a2 == (void)v12;
            uint64_t v12 = a2;
          }
          while (!v18);
        }
        if (!v9) {
          break;
        }
        int v11 = v9;
        uint64_t v12 = a2;
      }
      while (a2 != a3);
    }
    sub_463E0(v9);
    if (v10)
    {
      for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
        long long v10 = i;
      __int16 v20 = v10;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 != a3)
  {
    int v21 = (uint64_t **)(a1 + 8);
    do
    {
      uint64_t v22 = (uint64_t *)operator new(0x20uLL);
      int v23 = *((_DWORD *)a2 + 7);
      *((_DWORD *)v22 + 7) = v23;
      int v24 = *v21;
      __int16 v25 = (uint64_t **)(a1 + 8);
      uint64_t v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            __int16 v25 = (uint64_t **)v24;
            if (v23 >= *((_DWORD *)v24 + 7)) {
              break;
            }
            int v24 = (uint64_t *)*v24;
            uint64_t v26 = v25;
            if (!*v25) {
              goto LABEL_38;
            }
          }
          int v24 = (uint64_t *)v24[1];
        }
        while (v24);
        uint64_t v26 = v25 + 1;
      }
LABEL_38:
      sub_46CA8((uint64_t **)a1, (uint64_t)v25, v26, v22);
      __int16 v27 = (void *)a2[1];
      if (v27)
      {
        do
        {
          int v28 = v27;
          __int16 v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          int v28 = (void *)a2[2];
          BOOL v18 = *v28 == (void)a2;
          a2 = v28;
        }
        while (!v18);
      }
      a2 = v28;
    }
    while (v28 != a3);
  }
}

char *sub_2D8598(char **a1, uint64_t a2, int a3, uint64_t a4, void *a5)
{
  *a1 = (char *)a1;
  a1[1] = (char *)a1;
  a1[2] = 0;
  *((_DWORD *)a1 + 6) = 3;
  a1[6] = 0;
  a1[5] = 0;
  a1[4] = (char *)(a1 + 5);
  *((_DWORD *)a1 + 14) = 3;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = 0;
  a1[8] = (char *)(a1 + 9);
  a1[13] = 0;
  a1[12] = (char *)(a1 + 13);
  long long v10 = (uint64_t **)(a1 + 12);
  a1[14] = 0;
  int v11 = operator new(0x38uLL);
  _OWORD v11[2] = 0x706C6F7570617020;
  uint64_t v12 = 1;
  *((unsigned char *)v11 + 24) = 1;
  v11[4] = &qword_668DD0;
  *((unsigned char *)v11 + 40) = 0;
  *((unsigned char *)v11 + 48) = 0;
  *int v11 = a1;
  v11[1] = a1;
  *a1 = (char *)v11;
  a1[1] = (char *)v11;
  a1[2] = (unsigned char *)(&def_1E50E8 + 1);
  if (!*(unsigned char *)(a2 + 8))
  {
    int v13 = operator new(0x38uLL);
    void v13[2] = 0x7073706B70617020;
    *((unsigned char *)v13 + 24) = 1;
    void v13[4] = a4;
    *((unsigned char *)v13 + 40) = 0;
    *((unsigned char *)v13 + 48) = 0;
    *int v13 = v11;
    v13[1] = a1;
    v11[1] = v13;
    *a1 = (char *)v13;
    uint64_t v12 = 2;
    a1[2] = (unsigned char *)(&def_1E50E8 + 2);
    int v11 = v13;
  }
  uint64_t v41 = a5;
  uint64_t v14 = operator new(0x38uLL);
  _OWORD v14[2] = 0x7068646D70617020;
  *((unsigned char *)v14 + 24) = 1;
  v14[4] = &qword_668DD0;
  *((unsigned char *)v14 + 40) = 0;
  *((unsigned char *)v14 + 48) = 0;
  *uint64_t v14 = v11;
  v14[1] = a1;
  v11[1] = v14;
  *a1 = (char *)v14;
  a1[2] = (char *)(v12 + 1);
  int v15 = operator new(0x38uLL);
  v15[2] = 0x7064737070617020;
  *((unsigned char *)v15 + 24) = 1;
  v15[4] = &qword_668DD0;
  *((unsigned char *)v15 + 40) = 0;
  *((unsigned char *)v15 + 48) = 0;
  *int v15 = v14;
  v15[1] = a1;
  v14[1] = v15;
  *a1 = (char *)v15;
  a1[2] = (char *)(v12 + 2);
  char v16 = operator new(0x38uLL);
  void v16[2] = 0x7075736F70617020;
  *((unsigned char *)v16 + 24) = 1;
  v16[4] = &qword_668DD0;
  *((unsigned char *)v16 + 40) = 0;
  *((unsigned char *)v16 + 48) = 0;
  void *v16 = v15;
  v16[1] = a1;
  v15[1] = v16;
  *a1 = (char *)v16;
  a1[2] = (char *)(v12 + 3);
  if (a3)
  {
    if (a3 == 3)
    {
      uint64_t v33 = operator new(0x38uLL);
      uint64_t v33[2] = 0x7068707770617020;
      *((unsigned char *)v33 + 24) = 1;
      v33[4] = &qword_657F40;
      *((unsigned char *)v33 + 40) = 0;
      *((unsigned char *)v33 + 48) = 0;
      *uint64_t v33 = v16;
      v33[1] = a1;
      v16[1] = v33;
      *a1 = (char *)v33;
      a1[2] = (char *)(v12 | 4);
      uint64_t v34 = operator new(0x38uLL);
      v34[2] = 0x7068706270617020;
      *((unsigned char *)v34 + 24) = 1;
      v34[4] = &qword_657FE0;
      v34[5] = &qword_650790;
      *((unsigned char *)v34 + 48) = 1;
      void *v34 = v33;
      v34[1] = a1;
      v33[1] = v34;
      *a1 = (char *)v34;
      a1[2] = (char *)(v12 + 5);
      uint64_t v22 = operator new(0x38uLL);
      void v22[2] = 0x7068706270617020;
      *((unsigned char *)v22 + 24) = 1;
      void v22[4] = &qword_657F90;
      v22[5] = &qword_6507A0;
      *((unsigned char *)v22 + 48) = 1;
      *uint64_t v22 = v34;
      v22[1] = a1;
      v34[1] = v22;
      uint64_t v23 = v12 + 6;
      *a1 = (char *)v22;
    }
    else if (a3 == 2)
    {
      char v17 = operator new(0x38uLL);
      _OWORD v17[2] = 0x7063736F70617020;
      *((unsigned char *)v17 + 24) = 1;
      v17[4] = &qword_668DD0;
      *((unsigned char *)v17 + 40) = 0;
      *((unsigned char *)v17 + 48) = 0;
      void *v17 = v16;
      v17[1] = a1;
      v16[1] = v17;
      *a1 = (char *)v17;
      a1[2] = (char *)(v12 | 4);
      BOOL v18 = operator new(0x38uLL);
      uint64_t v18[2] = 0x7068707770617020;
      *((unsigned char *)v18 + 24) = 1;
      uint64_t v18[4] = &qword_657EF0;
      *((unsigned char *)v18 + 40) = 0;
      *((unsigned char *)v18 + 48) = 0;
      void *v18 = v17;
      v18[1] = a1;
      v17[1] = v18;
      *a1 = (char *)v18;
      a1[2] = (char *)(v12 + 5);
      int v19 = operator new(0x38uLL);
      v19[2] = 0x706C656F70617020;
      *((unsigned char *)v19 + 24) = 1;
      v19[4] = &qword_668DD0;
      *((unsigned char *)v19 + 40) = 0;
      *((unsigned char *)v19 + 48) = 0;
      *int v19 = v18;
      v19[1] = a1;
      v18[1] = v19;
      *a1 = (char *)v19;
      a1[2] = (char *)(v12 + 6);
      __int16 v20 = operator new(0x38uLL);
      _OWORD v20[2] = 0x7068704270617020;
      *((unsigned char *)v20 + 24) = 1;
      void v20[4] = &qword_657EF0;
      *((unsigned char *)v20 + 40) = 0;
      *((unsigned char *)v20 + 48) = 0;
      void *v20 = v19;
      v20[1] = a1;
      v19[1] = v20;
      *a1 = (char *)v20;
      a1[2] = (char *)(v12 + 7);
      uint64_t v21 = qword_658490;
      uint64_t v22 = operator new(0x38uLL);
      void v22[2] = 0x7073746F70617020;
      *((unsigned char *)v22 + 24) = 1;
      void v22[4] = v21;
      *((unsigned char *)v22 + 40) = 0;
      *((unsigned char *)v22 + 48) = 0;
      *uint64_t v22 = v20;
      v22[1] = a1;
      v20[1] = v22;
      *a1 = (char *)v22;
      uint64_t v23 = v12 | 8;
    }
    else
    {
      uint64_t v35 = operator new(0x38uLL);
      v35[2] = 0x7068707770617020;
      *((unsigned char *)v35 + 24) = 1;
      v35[4] = &qword_657EF0;
      *((unsigned char *)v35 + 40) = 0;
      *((unsigned char *)v35 + 48) = 0;
      *uint64_t v35 = v16;
      v35[1] = a1;
      v16[1] = v35;
      *a1 = (char *)v35;
      a1[2] = (char *)(v12 | 4);
      uint64_t v36 = operator new(0x38uLL);
      void v36[2] = 0x706C656F70617020;
      *((unsigned char *)v36 + 24) = 1;
      v36[4] = &qword_668DD0;
      *((unsigned char *)v36 + 40) = 0;
      *((unsigned char *)v36 + 48) = 0;
      void *v36 = v35;
      v36[1] = a1;
      v35[1] = v36;
      *a1 = (char *)v36;
      a1[2] = (char *)(v12 + 5);
      uint64_t v37 = qword_658490;
      uint64_t v22 = operator new(0x38uLL);
      void v22[2] = 0x7073746F70617020;
      *((unsigned char *)v22 + 24) = 1;
      void v22[4] = v37;
      *((unsigned char *)v22 + 40) = 0;
      *((unsigned char *)v22 + 48) = 0;
      *uint64_t v22 = v36;
      v22[1] = a1;
      v36[1] = v22;
      *a1 = (char *)v22;
      uint64_t v23 = v12 + 6;
    }
  }
  else
  {
    int v24 = operator new(0x38uLL);
    unint64_t v24[2] = 0x7068707770617020;
    *((unsigned char *)v24 + 24) = 1;
    v24[4] = &qword_657EF0;
    *((unsigned char *)v24 + 40) = 0;
    *((unsigned char *)v24 + 48) = 0;
    void *v24 = v16;
    v24[1] = a1;
    v16[1] = v24;
    *a1 = (char *)v24;
    a1[2] = (char *)(v12 | 4);
    __int16 v25 = operator new(0x38uLL);
    v25[2] = 0x706C656F70617020;
    *((unsigned char *)v25 + 24) = 1;
    unsigned char v25[4] = &qword_668DD0;
    *((unsigned char *)v25 + 40) = 0;
    *((unsigned char *)v25 + 48) = 0;
    *__int16 v25 = v24;
    v25[1] = a1;
    v24[1] = v25;
    *a1 = (char *)v25;
    a1[2] = (char *)(v12 + 5);
    if (_os_feature_enabled_impl())
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658820, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_658820))
      {
        sub_2DA18C((uint64_t)&unk_6587F0);
        __cxa_guard_release(&qword_658820);
      }
      uint64_t v26 = operator new(0x38uLL);
      v26[2] = 0x7068704270617020;
      *((unsigned char *)v26 + 24) = 1;
      uint64_t v26[4] = &qword_657EF0;
      v26[5] = &unk_6587F0;
      *((unsigned char *)v26 + 48) = 1;
      __int16 v27 = *a1;
      *uint64_t v26 = *a1;
      v26[1] = a1;
      *((void *)v27 + 1) = v26;
      *a1 = (char *)v26;
      ++a1[2];
    }
    int v28 = operator new(0x38uLL);
    void v28[2] = 0x7068706270617020;
    *((unsigned char *)v28 + 24) = 1;
    uint8_t v28[4] = &qword_658030;
    v28[5] = &qword_650790;
    *((unsigned char *)v28 + 48) = 1;
    uint64_t v29 = *a1;
    void *v28 = *a1;
    v28[1] = a1;
    *((void *)v29 + 1) = v28;
    *a1 = (char *)v28;
    uint64_t v30 = a1[2];
    a1[2] = v30 + 1;
    int v31 = operator new(0x38uLL);
    v31[2] = 0x7068706270617020;
    *((unsigned char *)v31 + 24) = 1;
    v31[4] = &qword_657EF0;
    v31[5] = &qword_6507A0;
    *((unsigned char *)v31 + 48) = 1;
    *int v31 = v28;
    v31[1] = a1;
    v28[1] = v31;
    *a1 = (char *)v31;
    a1[2] = v30 + 2;
    uint64_t v32 = qword_658490;
    uint64_t v22 = operator new(0x38uLL);
    void v22[2] = 0x7073746F70617020;
    *((unsigned char *)v22 + 24) = 1;
    void v22[4] = v32;
    *((unsigned char *)v22 + 40) = 0;
    *((unsigned char *)v22 + 48) = 0;
    *uint64_t v22 = v31;
    v22[1] = a1;
    v31[1] = v22;
    *a1 = (char *)v22;
    uint64_t v23 = (uint64_t)(v30 + 3);
  }
  a1[2] = (char *)v23;
  uint64_t v38 = (char *)operator new(0x38uLL);
  strcpy(v38 + 16, " paplunp");
  *((void *)v38 + 4) = &qword_668DD0;
  v38[40] = 0;
  v38[48] = 0;
  *(void *)uint64_t v38 = v22;
  *((void *)v38 + 1) = a1;
  v22[1] = v38;
  *a1 = v38;
  a1[2] = (char *)(v23 + 1);
  if (!*(unsigned char *)(a2 + 8))
  {
    sub_3CD68C();
    if (!HIDWORD(qword_65E378)) {
      sub_377380(v10, v41);
    }
    sub_3CD68C();
    if (!qword_65E370) {
      sub_377224(v10);
    }
  }
  sub_333F2C();
  uint64_t v39 = *(unsigned int ***)a2;
  if (a3)
  {
    int v43 = qword_65A3B0;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t result = (char *)sub_33D908(v39, (uint64_t *)&v43);
  }
  else
  {
    int v42 = 22;
    int v43 = qword_65A3B0;
    *(void *)&long long v44 = &v42;
    long long v45 = 0uLL;
    *((void *)&v44 + 1) = 1;
    uint64_t result = (char *)sub_33D908(v39, (uint64_t *)&v43);
  }
  a1[11] = result;
  return result;
}

void sub_2D8D38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_658820);
  sub_FD7AC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2D8DC8(uint64_t *result, uint64_t *a2)
{
  *uint64_t result = (uint64_t)result;
  result[1] = (uint64_t)result;
  result[2] = 0;
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v4 = *a2;
    uint64_t v3 = (uint64_t *)a2[1];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(*a2 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = *result;
    *(void *)(v6 + 8) = v3;
    uint64_t *v3 = v6;
    *uint64_t result = v4;
    *(void *)(v4 + 8) = result;
    result[2] = v2;
    a2[2] = 0;
  }
  *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
  result[4] = a2[4];
  uint64_t v7 = a2 + 5;
  uint64_t v8 = a2[5];
  result[5] = v8;
  uint64_t v9 = result + 5;
  uint64_t v10 = a2[6];
  result[6] = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    a2[4] = (uint64_t)v7;
    *uint64_t v7 = 0;
    a2[6] = 0;
  }
  else
  {
    result[4] = (uint64_t)v9;
  }
  *((_DWORD *)result + 14) = *((_DWORD *)a2 + 14);
  result[8] = a2[8];
  int v11 = a2 + 9;
  uint64_t v12 = a2[9];
  result[9] = v12;
  int v13 = result + 9;
  uint64_t v14 = a2[10];
  result[10] = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    a2[8] = (uint64_t)v11;
    *int v11 = 0;
    a2[10] = 0;
  }
  else
  {
    result[8] = (uint64_t)v13;
  }
  result[11] = a2[11];
  result[12] = a2[12];
  int v15 = a2 + 13;
  uint64_t v16 = a2[13];
  result[13] = v16;
  char v17 = result + 13;
  uint64_t v18 = a2[14];
  result[14] = v18;
  if (v18)
  {
    *(void *)(v16 + 16) = v17;
    a2[12] = (uint64_t)v15;
    *int v15 = 0;
    a2[14] = 0;
  }
  else
  {
    result[12] = (uint64_t)v17;
  }
  return result;
}

void sub_2D8ED0()
{
  uint64_t v0 = sub_37D6BC((uint64_t)&unk_658590, (uint64_t)&qword_668D60, qword_6577F8);
  sub_37E264(v0, 0);
  sub_E5310((uint64_t)v1, 1, 1768776806, 1751410292);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_6577F8);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1214539380);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_6577F8);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1647393080);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_6577F8);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1214329654);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_657830);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1214394677);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_657820);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1647718502);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_657860);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1647718503);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_657870);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1647522096);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_657840);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1647521842);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_657850);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)v1, 1, 1768776806, 1752709424);
  sub_37D10C((uint64_t **)&unk_658590, (uint64_t)v1, qword_657880);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
}

void sub_2D91B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&unk_658590);
  _Unwind_Resume(a1);
}

void sub_2D9230(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 != *(_DWORD *)a3)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        *(void *)uint64_t v9 = "StandardUtilities.h";
        *(_WORD *)&v9[8] = 1024;
        *(_DWORD *)&v9[10] = 1052;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Mismatched Policy Values\"", (uint8_t *)&v8, 0x12u);
      }
    }
  }
  sub_46A4C((uint64_t *)&v8, (uint64_t)(a2 + 2));
  sub_46AA0((uint64_t *)&v8, *(void **)(a3 + 8), (void *)(a3 + 16));
  *(_DWORD *)a1 = *a2;
  sub_46A4C((uint64_t *)(a1 + 8), (uint64_t)&v8);
  sub_463E0(*(void **)&v9[4]);
}

void sub_2D9348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void *sub_2D9364(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x38uLL);
    int v8 = result;
    *uint64_t result = 0;
    result[1] = 0;
    long long v9 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)result + 1) = *(_OWORD *)a3;
    *((_OWORD *)result + 2) = v9;
    result[6] = *(void *)(a3 + 32);
    uint64_t v10 = a3 + 40;
    uint64_t v11 = 1;
    if (a3 + 40 != a4)
    {
      uint64_t v12 = result;
      do
      {
        uint64_t result = operator new(0x38uLL);
        *uint64_t result = v12;
        result[1] = 0;
        long long v13 = *(_OWORD *)(v10 + 16);
        *((_OWORD *)result + 1) = *(_OWORD *)v10;
        *((_OWORD *)result + 2) = v13;
        result[6] = *(void *)(v10 + 32);
        v12[1] = result;
        ++v11;
        v10 += 40;
        uint64_t v12 = result;
      }
      while (v10 != a4);
    }
    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v8;
    *int v8 = v14;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v11;
  }
  return result;
}

void sub_2D9440(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2D9460(_Unwind_Exception *a1)
{
}

uint64_t *sub_2D9474(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_2D9BC4(a1, v4, *a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2D94DC(_Unwind_Exception *a1)
{
  sub_FCC40(*v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_2D94F0(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t **)a1;
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    int v24 = a2 + 1;
    do
    {
      uint64_t v6 = v2[1];
      uint64_t v7 = v3;
      if (*v2 == v3) {
        goto LABEL_9;
      }
      int v8 = v2[1];
      long long v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          int v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          long long v9 = v7;
        }
        while (v10);
      }
      unsigned int v11 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v7 + 8) < v11)
      {
LABEL_9:
        if (v6) {
          uint64_t v12 = (uint64_t **)v7;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v6) {
          long long v13 = (uint64_t **)(v7 + 1);
        }
        else {
          long long v13 = (uint64_t **)v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t **)v3;
        long long v13 = (uint64_t **)v3;
        if (v6)
        {
          long long v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              unsigned int v22 = *((_DWORD *)v6 + 8);
              if (v11 >= v22) {
                break;
              }
              uint64_t v6 = *v12;
              long long v13 = v12;
              if (!*v12) {
                goto LABEL_16;
              }
            }
            if (v22 >= v11) {
              break;
            }
            long long v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_16:
        uint64_t v14 = (uint64_t *)operator new(0xB8uLL);
        v26[0] = v14;
        v26[1] = v3;
        char v27 = 0;
        *((_DWORD *)v14 + 8) = *((_DWORD *)v5 + 8);
        sub_2D9EAC((uint64_t)(v14 + 5), (uint64_t)(v5 + 5));
        uint64_t v15 = v5[9];
        *((_WORD *)v14 + 40) = *((_WORD *)v5 + 40);
        v14[9] = v15;
        sub_2D9F2C((uint64_t)(v14 + 11), (uint64_t)(v5 + 11));
        sub_46A4C(v14 + 15, (uint64_t)(v5 + 15));
        *((unsigned char *)v14 + 144) = 0;
        *((unsigned char *)v14 + 168) = 0;
        if (*((unsigned char *)v5 + 168))
        {
          v14[19] = 0;
          v14[20] = 0;
          v14[18] = (uint64_t)(v14 + 19);
          uint64_t v16 = (void *)v5[18];
          if (v16 != v5 + 19)
          {
            do
            {
              sub_2D9F8C(v14 + 18, v14 + 19, *((_DWORD *)v16 + 8), (_DWORD *)v16 + 8);
              char v17 = (void *)v16[1];
              if (v17)
              {
                do
                {
                  uint64_t v18 = v17;
                  char v17 = (void *)*v17;
                }
                while (v17);
              }
              else
              {
                do
                {
                  uint64_t v18 = (void *)v16[2];
                  BOOL v10 = *v18 == (void)v16;
                  uint64_t v16 = v18;
                }
                while (!v10);
              }
              uint64_t v16 = v18;
            }
            while (v18 != v5 + 19);
          }
          *((unsigned char *)v14 + 168) = 1;
          uint64_t v4 = v24;
          uint64_t v2 = (uint64_t **)a1;
        }
        int v19 = *((_DWORD *)v5 + 44);
        *((_WORD *)v14 + 90) = *((_WORD *)v5 + 90);
        *((_DWORD *)v14 + 44) = v19;
        char v27 = 1;
        sub_46CA8(v2, (uint64_t)v12, v13, v26[0]);
        v26[0] = 0;
        sub_2D9E54((uint64_t)v26);
      }
      __int16 v20 = (void *)v5[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          __int16 v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v5[2];
          BOOL v10 = *v21 == (void)v5;
          uint64_t v5 = v21;
        }
        while (!v10);
      }
      uint64_t v5 = v21;
    }
    while (v21 != v4);
  }
  return v2;
}

void sub_2D9760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(unsigned char *)(v4 + 112)) {
    sub_463E0(*(void **)(v4 + 96));
  }
  if (*(unsigned char *)(v4 + 64))
  {
    int v8 = *v5;
    if (*v5)
    {
      *(void *)(v4 + 48) = v8;
      operator delete(v8);
    }
  }
  sub_2D9E54((uint64_t)va);
  sub_FCC94(*v6);
  _Unwind_Resume(a1);
}

uint64_t *sub_2D97E4(uint64_t *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_2D9BC4(a1, v3, *((_DWORD *)v5 + 8), (_DWORD *)v5 + 8);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_2D987C(_Unwind_Exception *a1)
{
  sub_FCC40(*v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_2D9890(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = &a2[2 * a3];
    BOOL v8 = (uint64_t *)(a1 + 1);
    while (1)
    {
      long long v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      BOOL v10 = v6;
      unsigned int v11 = v4;
      if (v6)
      {
        do
        {
          long long v9 = v10;
          BOOL v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unsigned int v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        uint64_t v14 = (uint64_t **)(v6 ? v9 : v4);
        uint64_t v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        uint64_t v14 = (uint64_t **)v4;
        uint64_t v15 = (uint64_t **)v4;
        if (v6)
        {
          uint64_t v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v6;
              unsigned int v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18) {
                break;
              }
              uint64_t v6 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            uint64_t v6 = v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)v5;
        uint64_t *v16 = 0;
        v16[1] = 0;
        void v16[2] = (uint64_t)v14;
        *uint64_t v15 = v16;
        char v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = *v15;
        }
        sub_46D00(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 2;
      if (v5 == v7) {
        break;
      }
      BOOL v8 = *a1;
      uint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_2D99F0(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_2D9A04(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = &a2[2 * a3];
    BOOL v8 = (uint64_t *)(a1 + 1);
    while (1)
    {
      long long v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      BOOL v10 = v6;
      unsigned int v11 = v4;
      if (v6)
      {
        do
        {
          long long v9 = v10;
          BOOL v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unsigned int v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        uint64_t v14 = (uint64_t **)(v6 ? v9 : v4);
        uint64_t v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        uint64_t v14 = (uint64_t **)v4;
        uint64_t v15 = (uint64_t **)v4;
        if (v6)
        {
          uint64_t v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v6;
              unsigned int v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18) {
                break;
              }
              uint64_t v6 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            uint64_t v6 = v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)v5;
        uint64_t *v16 = 0;
        v16[1] = 0;
        void v16[2] = (uint64_t)v14;
        *uint64_t v15 = v16;
        char v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = *v15;
        }
        sub_46D00(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 2;
      if (v5 == v7) {
        break;
      }
      BOOL v8 = *a1;
      uint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_2D9B64(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2D9B78(uint64_t a1)
{
  sub_463E0(*(void **)(a1 + 104));
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_2D9BC4(uint64_t *result, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v5 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 8), v6 > a3))
  {
    uint64_t v7 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      long long v9 = a2;
LABEL_16:
      if (v7) {
        BOOL v12 = (uint64_t **)v9;
      }
      else {
        BOOL v12 = (uint64_t **)a2;
      }
      if (v7) {
        BOOL v10 = (uint64_t **)(v9 + 1);
      }
      else {
        BOOL v10 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v7)
    {
      BOOL v8 = (uint64_t *)*a2;
      do
      {
        long long v9 = v8;
        BOOL v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        long long v9 = (uint64_t *)v14[2];
        BOOL v15 = *v9 == (void)v14;
        uint64_t v14 = v9;
      }
      while (v15);
    }
    if (*((_DWORD *)v9 + 8) < a3) {
      goto LABEL_16;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          BOOL v12 = (uint64_t **)v16;
          unsigned int v17 = *((_DWORD *)v16 + 8);
          if (v17 <= a3) {
            break;
          }
          uint64_t v16 = *v12;
          uint64_t v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }
        if (v17 >= a3) {
          break;
        }
        uint64_t v5 = v12 + 1;
        uint64_t v16 = v12[1];
        if (!v16) {
          goto LABEL_44;
        }
      }
LABEL_46:
      BOOL v10 = v5;
      goto LABEL_22;
    }
  }
  else
  {
    if (v6 >= a3) {
      return result;
    }
    BOOL v10 = (uint64_t **)(a2 + 1);
    unsigned int v11 = (uint64_t *)a2[1];
    if (v11)
    {
      do
      {
        BOOL v10 = (uint64_t **)v11;
        unsigned int v11 = (uint64_t *)*v11;
        BOOL v12 = v10;
        unsigned int v13 = v10;
      }
      while (v11);
    }
    else
    {
      unsigned int v13 = (uint64_t **)a2;
      do
      {
        unsigned int v18 = (uint64_t *)v13;
        unsigned int v13 = (uint64_t **)v13[2];
      }
      while (*v13 != v18);
      BOOL v12 = (uint64_t **)a2;
    }
    if (v13 == v5 || *((_DWORD *)v13 + 8) > a3)
    {
LABEL_22:
      uint64_t v5 = v10;
      if (*v10) {
        return result;
      }
      goto LABEL_44;
    }
    int v19 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          BOOL v12 = (uint64_t **)v19;
          unsigned int v20 = *((_DWORD *)v19 + 8);
          if (v20 <= a3) {
            break;
          }
          int v19 = *v12;
          uint64_t v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }
        if (v20 >= a3) {
          goto LABEL_46;
        }
        uint64_t v5 = v12 + 1;
        int v19 = v12[1];
        if (!v19) {
          goto LABEL_44;
        }
      }
    }
  }
  BOOL v12 = (uint64_t **)(result + 1);
LABEL_44:
  sub_2D9D80((uint64_t)&v21, (uint64_t)result, a4);
  return sub_46CA8(v4, (uint64_t)v12, v5, v21);
}

uint64_t *sub_2D9D80(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a2 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a3;
  uint64_t result = sub_46A4C((uint64_t *)v6 + 5, (uint64_t)(a3 + 2));
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_2D9DE0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2D9DFC(0, v2);
  _Unwind_Resume(a1);
}

void sub_2D9DFC(char a1, void **a2)
{
  if (a1)
  {
    sub_463E0(a2[6]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void sub_2D9E54(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_FDA00((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_2D9EAC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_46B38((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2D9F08(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D9F2C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    sub_46A4C((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2D9F70(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_463E0(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2D9F8C(uint64_t *result, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v5 = (uint64_t **)result;
  unsigned int v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    BOOL v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      BOOL v10 = a2;
LABEL_16:
      if (v8) {
        unsigned int v13 = (uint64_t **)v10;
      }
      else {
        unsigned int v13 = (uint64_t **)a2;
      }
      if (v8) {
        unsigned int v11 = (uint64_t **)(v10 + 1);
      }
      else {
        unsigned int v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        BOOL v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v15 = a2;
      do
      {
        BOOL v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        BOOL v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 8) < a3) {
      goto LABEL_16;
    }
    unsigned int v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v13 = (uint64_t **)v17;
          unsigned int v18 = *((_DWORD *)v17 + 8);
          if (v18 <= a3) {
            break;
          }
          unsigned int v17 = *v13;
          unsigned int v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        unsigned int v6 = v13 + 1;
        unsigned int v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      unsigned int v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    unsigned int v11 = (uint64_t **)(a2 + 1);
    BOOL v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        unsigned int v11 = (uint64_t **)v12;
        BOOL v12 = (uint64_t *)*v12;
        unsigned int v13 = v11;
        uint64_t v14 = v11;
      }
      while (v12);
    }
    else
    {
      uint64_t v14 = (uint64_t **)a2;
      do
      {
        int v19 = (uint64_t *)v14;
        uint64_t v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v19);
      unsigned int v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 8) > a3)
    {
LABEL_22:
      unsigned int v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    unsigned int v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v13 = (uint64_t **)v20;
          unsigned int v21 = *((_DWORD *)v20 + 8);
          if (v21 <= a3) {
            break;
          }
          unsigned int v20 = *v13;
          unsigned int v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        unsigned int v6 = v13 + 1;
        unsigned int v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  unsigned int v13 = (uint64_t **)(result + 1);
LABEL_44:
  unsigned int v22 = operator new(0x40uLL);
  *((_DWORD *)v22 + 8) = *a4;
  sub_46A4C((uint64_t *)v22 + 5, (uint64_t)(a4 + 2));

  return sub_46CA8(v5, (uint64_t)v13, v6, (uint64_t *)v22);
}

void sub_2DA178(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2DA18C(uint64_t a1)
{
  unsigned int v3 = 1;
  sub_6367C((uint64_t)v4, &v3, 1);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_63E140;
  *(_DWORD *)(a1 + 16) = 2;
  sub_46A4C((uint64_t *)(a1 + 24), (uint64_t)v4);
  sub_463E0(v5);
  return a1;
}

void sub_2DA20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_2DA220(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_99A40(a2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 32;
  unsigned int v7 = (_DWORD *)(a1 + 16);
  if ((v5 & 0xFF00000000) != 0) {
    return sub_1056F4((uint64_t)v7, v5);
  }
  else {
    return *v7 == 3;
  }
}

uint64_t sub_2DA294@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_3D04((uint64_t)&v14);
  sub_256E4(&v14, (uint64_t)"[ ", 2);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v4 = "src";
  }
  else {
    uint64_t v4 = "dst";
  }
  sub_256E4(&v14, (uint64_t)v4, 3);
  sub_256E4(&v14, (uint64_t)"/prop ", 6);
  sub_2417C(v12, 0x646F6170u);
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v12;
  }
  else {
    uint64_t v5 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v6 = v13;
  }
  else {
    uint64_t v6 = (uint64_t)v12[1];
  }
  sub_256E4(&v14, (uint64_t)v5, v6);
  sub_256E4(&v14, (uint64_t)": ", 2);
  sub_2DA504(__p, a1 + 16);
  if ((v11 & 0x80u) == 0) {
    unsigned int v7 = __p;
  }
  else {
    unsigned int v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  sub_256E4(&v14, (uint64_t)v7, v8);
  sub_256E4(&v14, (uint64_t)"]", 1);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }
  sub_246E4(a2, (uint64_t)v15);
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_2DA4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_6B798((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_2DA504(void *a1, uint64_t a2)
{
  sub_3D04((uint64_t)&v10);
  if (*(_DWORD *)a2 == 2) {
    uint64_t v4 = "Require";
  }
  else {
    uint64_t v4 = "Forbid";
  }
  if (*(_DWORD *)a2 == 2) {
    uint64_t v5 = 7;
  }
  else {
    uint64_t v5 = 6;
  }
  sub_256E4(&v10, (uint64_t)v4, v5);
  sub_256E4(&v10, (uint64_t)": ", 2);
  sub_134EF0(&__p, *(void **)(a2 + 8), (void *)(a2 + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  sub_256E4(&v10, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_246E4(a1, (uint64_t)v11);
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_2DA6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_6B798((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2DA6E0(uint64_t a1)
{
  *(void *)a1 = off_63E140;
  sub_463E0(*(void **)(a1 + 32));

  operator delete();
}

uint64_t sub_2DA748(uint64_t a1)
{
  *(void *)a1 = off_63E140;
  sub_463E0(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_2DA790(uint64_t a1)
{
  return sub_6C690(a1 + 32);
}

uint64_t sub_2DA798(uint64_t a1, uint64_t a2)
{
  return sub_2D3FB8(a1 + 32, (long long *)(a2 + 32));
}

uint64_t *sub_2DA7A4(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v10 = a2;
LABEL_16:
      if (v8) {
        unsigned __int8 v13 = (uint64_t **)v10;
      }
      else {
        unsigned __int8 v13 = (uint64_t **)a2;
      }
      if (v8) {
        unsigned __int8 v11 = (uint64_t **)(v10 + 1);
      }
      else {
        unsigned __int8 v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        BOOL v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 8) < a3) {
      goto LABEL_16;
    }
    unsigned int v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned __int8 v13 = (uint64_t **)v17;
          int v18 = *((_DWORD *)v17 + 8);
          if (v18 <= a3) {
            break;
          }
          unsigned int v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        unsigned int v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      unsigned __int8 v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    unsigned __int8 v11 = (uint64_t **)(a2 + 1);
    char v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        unsigned __int8 v11 = (uint64_t **)v12;
        char v12 = (uint64_t *)*v12;
        unsigned __int8 v13 = v11;
        uint64_t v14 = v11;
      }
      while (v12);
    }
    else
    {
      uint64_t v14 = (uint64_t **)a2;
      do
      {
        int v19 = (uint64_t *)v14;
        uint64_t v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v19);
      unsigned __int8 v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 8) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    unsigned int v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned __int8 v13 = (uint64_t **)v20;
          int v21 = *((_DWORD *)v20 + 8);
          if (v21 <= a3) {
            break;
          }
          unsigned int v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        uint64_t v6 = v13 + 1;
        unsigned int v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  unsigned __int8 v13 = (uint64_t **)(result + 1);
LABEL_44:
  unsigned int v22 = operator new(0x38uLL);
  void v22[2] = *(_OWORD *)a4;
  *((void *)v22 + 6) = *(void *)(a4 + 16);

  return sub_46CA8(v5, (uint64_t)v13, v6, (uint64_t *)v22);
}

void sub_2DA97C(void *a1)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  operator new();
}

void sub_2DAD38()
{
}

uint64_t sub_2DAE0C(_WORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_WORD *))(*(void *)a1 + 160))(a1);
  if (result) {
    return (a1[92] & 1) == 0;
  }
  return result;
}

void sub_2DAE60(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

unsigned char *sub_2DAE9C(void *a1)
{
  sub_3B7EC();
  uint64_t v58 = &qword_64CC40;
  char v59 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  UInt32 ioDataSize = 4;
  int outData = 0;
  *(void *)&inAddress.int mSelector = 0x676C6F62696E6F74;
  inAddress.AudioObjectPropertyElement mElement = 0;
  AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, &outData);
  uint64_t v54 = 0;
  UInt32 ioDataSize = 4;
  uint64_t v53 = 0x676C6F626D61696ELL;
  AudioObjectGetPropertyData(1u, (const AudioObjectPropertyAddress *)&v53, 0, 0, &ioDataSize, (char *)&v54 + 4);
  if (outData) {
    BOOL v1 = HIDWORD(v54) == 1;
  }
  else {
    BOOL v1 = 1;
  }
  int v2 = v1;
  uint64_t v3 = (void *)a1[18];
  uint64_t v4 = (void *)a1[19];
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(void))(*(void *)*v3 + 400))(*v3);
      ++v3;
    }
    while (v3 != v4);
    for (uint64_t i = (uint64_t *)a1[18]; i != (uint64_t *)a1[19]; ++i)
    {
      uint64_t v6 = *i;
      if (!*i)
      {
        uint64_t v42 = sub_32A48(13);
        int v43 = sub_7D5E8(1, *(void **)v42, *(void *)(v42 + 8));
        long long v44 = v43;
        if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1923;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      int v7 = *(id *)sub_32A48(2);
      uint64_t v8 = v7;
      if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)(v6 + 8);
        uint64_t v10 = *(void *)(v6 + 592);
        buf[0] = 136315906;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1926;
        HIWORD(buf[4]) = 1024;
        buf[5] = v9;
        LOWORD(buf[6]) = 2112;
        *(void *)((char *)&buf[6] + 2) = v10;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Preparing to destroy VirtualAudio_Device ID %u (%@).", (uint8_t *)buf, 0x22u);
      }

      if (v2)
      {
        sub_3B7EC();
        *(void *)AudioObjectPropertyAddress buf = &qword_64CC40;
        LOBYTE(buf[2]) = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        sub_3BCAC(buf);
      }
      else
      {
        uint64_t v11 = *(void *)(v6 + 632);
        if (v11) {
          sub_CF724(v11);
        }
        char v12 = (os_log_t *)sub_32A48(1);
        unsigned __int8 v13 = *v12;
        if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v6 + 96))(v65, v6);
          uint64_t v14 = v65;
          if (v66 < 0) {
            uint64_t v14 = *(unsigned char **)v65;
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 578;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v14;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Finalized VirtualAudio_Device: %s.", (uint8_t *)buf, 0x1Cu);
          if (v66 < 0) {
            operator delete(*(void **)v65);
          }
        }
      }
    }
  }
  if (v2)
  {
    if (qword_64A238 != -1) {
      dispatch_once(&qword_64A238, &stru_61F710);
    }
    if (byte_64A228) {
      +[CiderService StopService];
    }
    uint64_t v15 = a1[16];
    if (v15)
    {
      sub_3B7EC();
      uint64_t v62 = &qword_64CC40;
      char v63 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
      BOOL v16 = (void *)sub_10FBF0();
      *(void *)uint64_t v65 = v16;
      v65[8] = (*(uint64_t (**)(void *))(*v16 + 16))(v16);
      int v18 = (void (*)(uint64_t, uint64_t))v16[24];
      unsigned int v17 = v16 + 24;
      if (v18 != sub_E05A4)
      {
        uint64_t v49 = (os_log_t *)sub_32A48(13);
        char v50 = *v49;
        if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "PortManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 415;
          _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inProc does not match the client port listener.\"", (uint8_t *)buf, 0x12u);
        }
        uint64_t v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v51, "inProc does not match the client port listener.");
      }
      void *v17 = 0;
      v17[1] = 0;
      sub_3BCAC(v65);
      uint64_t v19 = *(void *)(v15 + 56);
      memset(buf, 0, 24);
      unsigned int v20 = *(void **)(v15 + 40);
      if (v20 != (void *)(v15 + 48))
      {
        do
        {
          sub_549A4((uint64_t *)v65, v20 + 4, "", 148);
          unsigned int v21 = sub_E0A8C(v15, *(uint64_t *)v65, (char **)buf);
          if (*(void *)&v65[8]) {
            sub_4636C(*(std::__shared_weak_count **)&v65[8]);
          }
          if (!v21)
          {
            int v24 = (os_log_t *)sub_32A48(13);
            __int16 v25 = *v24;
            if (*v24)
            {
              if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v65 = 136315394;
                *(void *)&v65[4] = "VirtualAudio_PortManager.cpp";
                *(_WORD *)&v65[12] = 1024;
                *(_DWORD *)&v65[14] = 149;
                _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"error destroying port\"", v65, 0x12u);
              }
            }
          }
          unsigned int v22 = (void *)v20[1];
          if (v22)
          {
            do
            {
              uint64_t v23 = v22;
              unsigned int v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              uint64_t v23 = (void *)v20[2];
              BOOL v1 = *v23 == (void)v20;
              unsigned int v20 = v23;
            }
            while (!v1);
          }
          unsigned int v20 = v23;
        }
        while (v23 != (void *)(v15 + 48));
        if (*(void *)&buf[2] != *(void *)buf)
        {
          sub_298DA4();
          operator new();
        }
      }
      if (*(void *)(v15 + 56))
      {
        uint64_t v26 = (os_log_t *)sub_32A48(13);
        char v27 = *v26;
        if (*v26)
        {
          if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v65 = 136315394;
            *(void *)&v65[4] = "VirtualAudio_PortManager.cpp";
            *(_WORD *)&v65[12] = 1024;
            *(_DWORD *)&v65[14] = 156;
            _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"port vector not empty after teardown\"", v65, 0x12u);
          }
        }
      }
      if (v19)
      {
        sub_3B7EC();
        sub_523D8(v65, (uint64_t)&qword_64CC40);
        uint64_t v60 = 0x676C6F6270727473;
        int v61 = 0;
        (*(void (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v15 + 32) + 72))(*(void *)(v15 + 32), 1, &v60, 1);
        sub_52380(v65);
      }
      *(void *)uint64_t v65 = buf;
      sub_E1328((void ***)v65);
      sub_3BCAC(&v62);
    }
    uint64_t v28 = sub_298DA4();
    (*(void (**)(uint64_t, void, void))(*(void *)v28 + 16))(v28, 0, 0);
    sub_273950();
    *(void *)&buf[6] = 0;
    sub_F1A24(buf);
    sub_F1D4C(buf);
    uint64_t v29 = (os_log_t *)sub_32A48(6);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "SingletonFactory_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 85;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Beginning destruction of singletons.", (uint8_t *)buf, 0x12u);
    }
    uint64_t v31 = sub_32A48(7);
    uint64_t v32 = sub_32A48(6);
    char v33 = 0;
    uint64_t v34 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v35 = *(void *)(v31 + 8);
    while (1)
    {
      uint64_t v36 = (int)buf[v34];
      char v37 = v33;
      if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
        break;
      }
      char v33 = 1;
      uint64_t v34 = 1;
      if (v37) {
        goto LABEL_64;
      }
    }
    if ((v35 & v36) == 0) {
      uint64_t v31 = v32;
    }
LABEL_64:
    uint64_t v38 = *(NSObject **)v31;
    if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "DeviceManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 103;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to destroy DeviceManager.", (uint8_t *)buf, 0x12u);
    }
    uint64_t v39 = qword_64AC58;
    if (qword_64AC58)
    {
      *(void *)AudioObjectPropertyAddress buf = qword_64AC58;
      LOBYTE(buf[2]) = (*(uint64_t (**)(uint64_t))(*(void *)qword_64AC58 + 16))(qword_64AC58);
      (*(void (**)(void, void, void, int *))(**(void **)(v39 + 88) + 16))(*(void *)(v39 + 88), 0, 0, &dword_64AC60);
      sub_B8E4((uint64_t *)(v39 + 104));
      sub_3BCAC(buf);
      sub_B8E4((uint64_t *)(v39 + 104));
      uint64_t v40 = *(void *)(v39 + 88);
      *(void *)(v39 + 88) = 0;
      if (v40) {
        (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      }
      sub_AEF0C(v39);
      operator delete();
    }
    unsigned int v46 = (os_log_t *)sub_32A48(13);
    AudioObjectID v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "DeviceManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 105;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [sDeviceManager is NULL]: \"sDeviceManager is NULL!\"", (uint8_t *)buf, 0x12u);
    }
    uint64_t v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v48, "sDeviceManager is NULL!");
  }
  return sub_3BCAC(&v58);
}

void sub_2DC940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_3BCAC((unsigned char *)(v11 - 144));
  sub_3BCAC(va1);
  sub_3BCAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2DCC94(uint64_t a1, unsigned int a2, int *a3, void *a4)
{
  if (a2)
  {
    uint64_t v5 = a2;
    while (1)
    {
      int v6 = *a3;
      a3 += 3;
      if (v6 == 1768845172) {
        break;
      }
      if (!--v5) {
        return 0;
      }
    }
    UInt32 ioDataSize = 4;
    int outData = 1;
    *(void *)&inAddress.int mSelector = 0x676C6F62696E6F74;
    inAddress.AudioObjectPropertyElement mElement = 0;
    OSStatus PropertyData = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, &outData);
    if (PropertyData)
    {
      uint64_t v8 = *(id *)sub_32A48(2);
      int v9 = v8;
      if (v8)
      {
        uint64_t v10 = v8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, PropertyData);
          if (v36 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = *(unsigned char **)__p;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1655;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = PropertyData;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = v11;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') reading kAudioHardwarePropertyIsInitingOrExiting property", buf, 0x22u);
          if (SHIBYTE(v36) < 0) {
            operator delete(*(void **)__p);
          }
        }
      }
LABEL_15:

      return 0;
    }
    if (outData) {
      return 0;
    }
    if (!a4)
    {
      __int16 v25 = *(id *)sub_32A48(2);
      int v9 = v25;
      if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1662;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Received NULL client data", buf, 0x12u);
      }
      goto LABEL_15;
    }
    if ((sub_166230() & 1) == 0 && sub_F7F68("VA_Initialization", 0x11uLL) == &qword_659450)
    {
      os_signpost_id_t v13 = 0;
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_659478))
      {
        qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_659478);
      }
      os_signpost_id_t v13 = os_signpost_id_generate((os_log_t)qword_659470);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_659478))
      {
        qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_659478);
      }
      uint64_t v14 = (id)qword_659470;
      uint64_t v15 = v14;
      if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
      {
        *(_WORD *)AudioObjectPropertyAddress buf = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "VA_Initialization", "Initializing VirtualAudio plugin", buf, 2u);
      }
    }
    os_signpost_id_t v31 = v13;
    uint64_t v16 = sub_32A48(42);
    if (*(unsigned char *)(v16 + 8))
    {
      uint64_t v17 = *(id *)v16;
      if (v17)
      {
        int v18 = v17;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 52;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "kVAInitialization";
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
        }
      }
    }
    *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_2DD508;
    *(void *)&unsigned char buf[24] = &unk_632E98;
    *(void *)&unsigned char buf[32] = a4;
    uint64_t v38 = a4;
    uint64_t v19 = buf;
    unsigned int v20 = (void *)a4[62];
    unsigned int v22 = v21 = v20;
    dispatch_async(v22, v19);

    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      v26[0] = 1;
      int v30 = 4;
      strcpy(__p, "niavbolg");
      __p[9] = 0;
      *(_WORD *)&__p[10] = 0;
      (*(void (**)(void *, unsigned char *, void, void, int *, int *))(*a4 + 56))(a4, __p, 0, 0, &v30, v26);
      uint64_t v23 = *(id *)sub_32A48(2);
      int v24 = v23;
      if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
        __int16 v33 = 1024;
        int v34 = 1889;
        __int16 v35 = 1024;
        int v36 = v26[0];
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VA Init Status: %u", __p, 0x18u);
      }
    }
    sub_2DD838(&v31);
    sub_3B7EC();
    if ((*(unsigned int (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40))
    {
      sub_3B7EC();
      (*(void (**)(uint64_t *))(qword_64CC40 + 24))(&qword_64CC40);
    }
  }
  return 0;
}

void sub_2DD23C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, os_signpost_id_t a19, long long buf,long long a21)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2DD838(&a19);
  if (a2 == 3)
  {
    uint64_t v23 = __cxa_begin_catch(a1);
    uint64_t v24 = sub_32A48(2);
    __int16 v25 = sub_7D5E8(1, *(void **)v24, *(void *)(v24 + 8));
    if (v25)
    {
      uint64_t v26 = v25;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&__p, v23[2]);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1673;
        WORD1(a21) = 2080;
        *(void *)((char *)&a21 + 4) = p_p;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown: %s", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
LABEL_20:

    __cxa_end_catch();
    JUMPOUT(0x2DD0DCLL);
  }
  uint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v29 = v28;
    uint64_t v30 = sub_32A48(2);
    os_signpost_id_t v31 = sub_7D5E8(1, *(void **)v30, *(void *)(v30 + 8));
    uint64_t v26 = v31;
    if (!v31 || !os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 1677;
    WORD1(a21) = 2080;
    *(void *)((char *)&a21 + 4) = v32;
    __int16 v33 = "%25s:%-5d std::exception thrown: %s";
    int v34 = v26;
    uint32_t v35 = 28;
  }
  else
  {
    uint64_t v36 = sub_32A48(2);
    char v37 = sub_7D5E8(1, *(void **)v36, *(void *)(v36 + 8));
    uint64_t v26 = v37;
    if (!v37 || !os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 1681;
    __int16 v33 = "%25s:%-5d exception thrown";
    int v34 = v26;
    uint32_t v35 = 18;
  }
  _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&buf, v35);
  goto LABEL_20;
}

void sub_2DD508(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_2DD9EC(*(void *)(a1 + 40));
  uint64_t v2 = v1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_6588D0, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_6588D0, &v3, (void (__cdecl *)(void *))sub_2E1194);
  }
}

void sub_2DD5B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v19 = __cxa_begin_catch(a1);
    id v20 = *(id *)sub_32A48(13);
    if (v20)
    {
      id v21 = v20;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        int v22 = v19[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a14) = 1024;
        DWORD1(a14) = v22;
        WORD4(a14) = 2080;
        *(void *)((char *)&a14 + 10) = "";
        a16 = 1024;
        a17 = 1871;
        uint64_t v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v24 = v21;
        uint32_t v25 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      char v27 = v26;
      id v28 = *(id *)sub_32A48(13);
      if (v28)
      {
        id v21 = v28;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = v29;
          WORD6(a14) = 2080;
          *(void *)((char *)&a14 + 14) = "";
          HIWORD(a17) = 1024;
          a18 = 1871;
          uint64_t v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v24 = v21;
          uint32_t v25 = 44;
          goto LABEL_13;
        }
LABEL_14:

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x2DD538);
      }
    }
    else
    {
      id v30 = *(id *)sub_32A48(13);
      if (v30)
      {
        id v21 = v30;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = "";
          WORD6(a14) = 1024;
          *(_DWORD *)((char *)&a14 + 14) = 1871;
          uint64_t v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v24 = v21;
          uint32_t v25 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }
  id v21 = 0;
  goto LABEL_16;
}

os_signpost_id_t *sub_2DD838(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(id *)v2;
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315650;
        uint64_t v10 = "SignpostUtilities.h";
        __int16 v11 = 1024;
        int v12 = 52;
        __int16 v13 = 2080;
        uint64_t v14 = "kVAInitialization";
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v9, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v5 = (id)qword_659470;
    int v6 = v5;
    os_signpost_id_t v7 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v9) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v6, OS_SIGNPOST_INTERVAL_END, v7, "VA_Initialization", "", (uint8_t *)&v9, 2u);
    }
  }
  return a1;
}

void sub_2DD9E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_2DD9EC(uint64_t result)
{
  if (!*(_DWORD *)(result + 108))
  {
    *(_DWORD *)(result + 108) = 1;
    id v1 = *(id *)sub_32A48(2);
    uint64_t v2 = v1;
    if (v1)
    {
      uint64_t v3 = v1;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int buf = 136315394;
        buf_4 = "VirtualAudio_PlugIn.mm";
        __int16 v6 = 1024;
        int v7 = 1707;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ***** Beginning Deferred Initialization *****", (uint8_t *)&buf, 0x12u);
      }
    }
    sub_1BAF6C();
  }
  return result;
}

void sub_2E089C()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_2E08A8()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_2E08B4()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_2E08C0(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(v2);
}

void sub_2E0F64()
{
}

uint64_t sub_2E1194()
{
  return CACentralStateDumpRegisterSubsystem();
}

void sub_2E1218(uint64_t a1, FILE *a2)
{
  sub_2E12AC((std::string::size_type)&v6, *(void *)(a1 + 32));
  uint64_t v3 = v6;
  for (uint64_t i = v7; v3 != i; v3 += 24)
  {
    uint64_t v5 = (const char *)v3;
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v5 = *(const char **)v3;
    }
    fprintf(a2, "%s\n", v5);
  }
  uint64_t v8 = (void **)&v6;
  sub_217F8(&v8);
}

void sub_2E12AC(std::string::size_type a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 108) == 2)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_3D04((uint64_t)&v204);
    sub_256E4(&v204, (uint64_t)"Routing Information:", 20);
    sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
    unint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= v3)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)a1) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a1) >> 3);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v9;
      }
      *((void *)&v198 + 1) = a1 + 16;
      if (v11) {
        unint64_t v11 = (unint64_t)sub_21974(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      std::string::size_type v14 = v11 + 24 * v8;
      __dst.__r_.__value_.__r.__words[0] = v11;
      __dst.__r_.__value_.__l.__size_ = v14;
      *(void *)&long long v198 = v11 + 24 * v12;
      long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v14 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v14 = v15;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__r.__words[2] = v14 + 24;
      sub_20D9C((uint64_t *)a1, &__dst);
      uint64_t v16 = *(void *)(a1 + 8);
      sub_20E50((uint64_t)&__dst);
      int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 8) = v16;
      if (v17 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v4 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v4 = v5;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a1 + 8) = v4 + 24;
    }
    *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words
    if (v207 < 0) {
      operator delete(v206);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    sub_3D04((uint64_t)&v204);
    sub_256E4(&v204, (uint64_t)"- Category: ", 12);
    sub_2417C(&v196, *(_DWORD *)(a2 + 224));
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v196;
    }
    else {
      int v18 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v196.__r_.__value_.__l.__size_;
    }
    sub_256E4(&v204, (uint64_t)v18, size);
    sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
    unint64_t v20 = *(void *)(a1 + 8);
    unint64_t v21 = *(void *)(a1 + 16);
    if (v20 >= v21)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(void *)a1) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(void *)a1) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      *((void *)&v198 + 1) = a1 + 16;
      if (v26) {
        unint64_t v26 = (unint64_t)sub_21974(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      std::string::size_type v28 = v26 + 24 * v23;
      __dst.__r_.__value_.__r.__words[0] = v26;
      __dst.__r_.__value_.__l.__size_ = v28;
      *(void *)&long long v198 = v26 + 24 * v27;
      long long v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v28 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v28 = v29;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__r.__words[2] = v28 + 24;
      sub_20D9C((uint64_t *)a1, &__dst);
      uint64_t v30 = *(void *)(a1 + 8);
      sub_20E50((uint64_t)&__dst);
      int v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 8) = v30;
      if (v31 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v20 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v20 = v22;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a1 + 8) = v20 + 24;
    }
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v196.__r_.__value_.__l.__data_);
    }
    v204.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
    if (v207 < 0) {
      operator delete(v206);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    sub_3D04((uint64_t)&v204);
    sub_256E4(&v204, (uint64_t)"- Mode: ", 8);
    sub_2417C(&v196, *(_DWORD *)(a2 + 228));
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = &v196;
    }
    else {
      uint64_t v32 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v196.__r_.__value_.__l.__size_;
    }
    sub_256E4(&v204, (uint64_t)v32, v33);
    sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
    unint64_t v34 = *(void *)(a1 + 8);
    unint64_t v35 = *(void *)(a1 + 16);
    if (v34 >= v35)
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)a1) >> 3);
      unint64_t v38 = v37 + 1;
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)a1) >> 3);
      if (2 * v39 > v38) {
        unint64_t v38 = 2 * v39;
      }
      if (v39 >= 0x555555555555555) {
        unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v40 = v38;
      }
      *((void *)&v198 + 1) = a1 + 16;
      if (v40) {
        unint64_t v40 = (unint64_t)sub_21974(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      std::string::size_type v42 = v40 + 24 * v37;
      __dst.__r_.__value_.__r.__words[0] = v40;
      __dst.__r_.__value_.__l.__size_ = v42;
      *(void *)&long long v198 = v40 + 24 * v41;
      long long v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v42 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v42 = v43;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__r.__words[2] = v42 + 24;
      sub_20D9C((uint64_t *)a1, &__dst);
      uint64_t v44 = *(void *)(a1 + 8);
      sub_20E50((uint64_t)&__dst);
      int v45 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 8) = v44;
      if (v45 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v34 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v34 = v36;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a1 + 8) = v34 + 24;
    }
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v196.__r_.__value_.__l.__data_);
    }
    v204.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
    if (v207 < 0) {
      operator delete(v206);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    sub_3D04((uint64_t)&v204);
    sub_256E4(&v204, (uint64_t)"- Silent Mode State: ", 21);
    unsigned int v46 = (uint64_t (***)(void))sub_298DA4();
    int v47 = (**v46)(v46);
    if (v47) {
      uint64_t v48 = "Enabled";
    }
    else {
      uint64_t v48 = "Disabled";
    }
    if (v47) {
      uint64_t v49 = 7;
    }
    else {
      uint64_t v49 = 8;
    }
    sub_256E4(&v204, (uint64_t)v48, v49);
    sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
    unint64_t v50 = *(void *)(a1 + 8);
    unint64_t v51 = *(void *)(a1 + 16);
    if (v50 >= v51)
    {
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(void *)a1) >> 3);
      unint64_t v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(void *)a1) >> 3);
      if (2 * v55 > v54) {
        unint64_t v54 = 2 * v55;
      }
      if (v55 >= 0x555555555555555) {
        unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v56 = v54;
      }
      *((void *)&v198 + 1) = a1 + 16;
      if (v56) {
        unint64_t v56 = (unint64_t)sub_21974(v56);
      }
      else {
        uint64_t v57 = 0;
      }
      std::string::size_type v58 = v56 + 24 * v53;
      __dst.__r_.__value_.__r.__words[0] = v56;
      __dst.__r_.__value_.__l.__size_ = v58;
      *(void *)&long long v198 = v56 + 24 * v57;
      long long v59 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v58 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v58 = v59;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__r.__words[2] = v58 + 24;
      sub_20D9C((uint64_t *)a1, &__dst);
      uint64_t v60 = *(void *)(a1 + 8);
      sub_20E50((uint64_t)&__dst);
      int v61 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 8) = v60;
      if (v61 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v52 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v50 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v50 = v52;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a1 + 8) = v50 + 24;
    }
    v204.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
    if (v207 < 0) {
      operator delete(v206);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    uint64_t v62 = *(void *)(a2 + 112);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204;
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = (unint64_t)&v204;
    sub_14D92C((uint64_t)&v189, v62, (uint64_t)&v204);
    sub_8108((uint64_t *)&v204);
    if (v190[1])
    {
      char v63 = v189;
      v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
      v196.__r_.__value_.__l.__size_ = (std::string::size_type)&v196;
      v196.__r_.__value_.__r.__words[2] = 0;
      if (v189 != v190)
      {
        do
        {
          int v64 = operator new(0x20uLL);
          void *v64 = 0;
          v64[1] = 0;
          sub_106070(v64 + 2, v63 + 4);
          std::string::size_type v65 = v196.__r_.__value_.__r.__words[0];
          void *v64 = v196.__r_.__value_.__r.__words[0];
          v64[1] = &v196;
          *(void *)(v65 + 8) = v64;
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          ++v196.__r_.__value_.__r.__words[2];
          char v66 = (void *)v63[1];
          if (v66)
          {
            do
            {
              CFStringRef v67 = (void **)v66;
              char v66 = (void *)*v66;
            }
            while (v66);
          }
          else
          {
            do
            {
              CFStringRef v67 = (void **)v63[2];
              BOOL v68 = *v67 == v63;
              char v63 = v67;
            }
            while (!v68);
          }
          char v63 = v67;
        }
        while (v67 != v190);
      }
      sub_3D04((uint64_t)&v204);
      sub_256E4(&v204, (uint64_t)"- Override VirtualAudio_Port ID(s): ", 36);
      memset(&__dst, 0, sizeof(__dst));
      strcpy((char *)&v198, "cwdv");
      BYTE8(v198) = 0;
      int v199 = 3;
      v201[0] = 0;
      v201[1] = 0;
      v200 = v201;
      int v202 = 44739242;
      CFTypeRef cf = 0;
      sub_2E3690((uint64_t *)&v185, a2, (uint64_t)&v196, (uint64_t)&__dst);
      sub_3828CC(&v188, &v185);
      if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v69 = &v188;
      }
      else {
        uint64_t v69 = (std::string *)v188.__r_.__value_.__r.__words[0];
      }
      if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v70 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v70 = v188.__r_.__value_.__l.__size_;
      }
      sub_256E4(&v204, (uint64_t)v69, v70);
      sub_2E35E0(&v195, (uint64_t)&v204.__r_.__value_.__l.__size_);
      unint64_t v71 = *(void *)(a1 + 8);
      unint64_t v72 = *(void *)(a1 + 16);
      if (v71 >= v72)
      {
        unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - *(void *)a1) >> 3);
        unint64_t v75 = v74 + 1;
        if (v74 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *(void *)a1) >> 3);
        if (2 * v76 > v75) {
          unint64_t v75 = 2 * v76;
        }
        if (v76 >= 0x555555555555555) {
          unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v77 = v75;
        }
        std::string::size_type v193 = a1 + 16;
        if (v77) {
          unint64_t v77 = (unint64_t)sub_21974(v77);
        }
        else {
          uint64_t v78 = 0;
        }
        std::string::size_type v79 = v77 + 24 * v74;
        __p.__r_.__value_.__r.__words[0] = v77;
        __p.__r_.__value_.__l.__size_ = v79;
        unint64_t v192 = v77 + 24 * v78;
        long long v80 = *(_OWORD *)&v195.__r_.__value_.__l.__data_;
        *(void *)(v79 + 16) = *((void *)&v195.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v79 = v80;
        memset(&v195, 0, sizeof(v195));
        __p.__r_.__value_.__r.__words[2] = v79 + 24;
        sub_20D9C((uint64_t *)a1, &__p);
        uint64_t v81 = *(void *)(a1 + 8);
        sub_20E50((uint64_t)&__p);
        int v82 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
        *(void *)(a1 + 8) = v81;
        if (v82 < 0) {
          operator delete(v195.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v73 = *(_OWORD *)&v195.__r_.__value_.__l.__data_;
        *(void *)(v71 + 16) = *((void *)&v195.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v71 = v73;
        memset(&v195, 0, sizeof(v195));
        *(void *)(a1 + 8) = v71 + 24;
      }
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v188.__r_.__value_.__l.__data_);
      }
      sub_463E0(*(void **)v186);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0(v201[0]);
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v204.__r_.__value_.__r.__words[0] = v183;
      *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
      if (v207 < 0) {
        operator delete(v206);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      sub_8108((uint64_t *)&v196);
    }
    sub_3D04((uint64_t)&v204);
    sub_256E4(&v204, (uint64_t)"- Activation Trigger: ", 22);
    sub_2417C(&v196, *(_DWORD *)(a2 + 240));
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v83 = &v196;
    }
    else {
      uint64_t v83 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v84 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v84 = v196.__r_.__value_.__l.__size_;
    }
    sub_256E4(&v204, (uint64_t)v83, v84);
    sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
    unint64_t v85 = *(void *)(a1 + 8);
    unint64_t v86 = *(void *)(a1 + 16);
    if (v85 >= v86)
    {
      unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - *(void *)a1) >> 3);
      unint64_t v89 = v88 + 1;
      if (v88 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - *(void *)a1) >> 3);
      if (2 * v90 > v89) {
        unint64_t v89 = 2 * v90;
      }
      if (v90 >= 0x555555555555555) {
        unint64_t v91 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v91 = v89;
      }
      *((void *)&v198 + 1) = a1 + 16;
      if (v91) {
        unint64_t v91 = (unint64_t)sub_21974(v91);
      }
      else {
        uint64_t v92 = 0;
      }
      std::string::size_type v93 = v91 + 24 * v88;
      __dst.__r_.__value_.__r.__words[0] = v91;
      __dst.__r_.__value_.__l.__size_ = v93;
      *(void *)&long long v198 = v91 + 24 * v92;
      long long v94 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v93 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v93 = v94;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__r.__words[2] = v93 + 24;
      sub_20D9C((uint64_t *)a1, &__dst);
      uint64_t v95 = *(void *)(a1 + 8);
      sub_20E50((uint64_t)&__dst);
      int v96 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 8) = v95;
      if (v96 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v87 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v85 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v85 = v87;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a1 + 8) = v85 + 24;
    }
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v196.__r_.__value_.__l.__data_);
    }
    v204.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
    if (v207 < 0) {
      operator delete(v206);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    if (*(char *)(a2 + 271) < 0)
    {
      if (!*(void *)(a2 + 256))
      {
LABEL_184:
        sub_2E376C((uint64_t *)&v188, a2);
        sub_2E501C((uint64_t *)a1, *(std::string **)(a1 + 8), (long long *)v188.__r_.__value_.__l.__data_, (long long *)v188.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v188.__r_.__value_.__l.__size_ - v188.__r_.__value_.__r.__words[0]) >> 3));
        uint64_t v182 = sub_3E6788();
        sub_21C8C(&v204, "\nTimeSyncClockDeviceManager: ");
        std::string::size_type v185 = 0;
        *(void *)uint64_t v186 = 0;
        uint64_t v187 = 0;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
        __dst.__r_.__value_.__s.__data_[8] = 0;
        std::string::size_type v185 = (char *)operator new(0x18uLL);
        *(void *)uint64_t v186 = v185;
        uint64_t v187 = v185 + 24;
        *(void *)uint64_t v186 = sub_15EEC8((uint64_t)&v187, (long long *)&v204, v205, v185);
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v204.__r_.__value_.__l.__data_);
        }
        sub_3D04((uint64_t)&v204);
        sub_256E4(&v204, (uint64_t)"TimeSyncDeviceTypeMap (", 23);
        std::ostream::operator<<();
        sub_256E4(&v204, (uint64_t)"):", 2);
        sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
        uint64_t v112 = *(_OWORD **)v186;
        if (*(void *)v186 >= (unint64_t)v187)
        {
          unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v186 - (void)v185) >> 3);
          unint64_t v115 = v114 + 1;
          if (v114 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          if (0x5555555555555556 * ((v187 - v185) >> 3) > v115) {
            unint64_t v115 = 0x5555555555555556 * ((v187 - v185) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v187 - v185) >> 3) >= 0x555555555555555) {
            unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v116 = v115;
          }
          *((void *)&v198 + 1) = &v187;
          if (v116) {
            unint64_t v116 = (unint64_t)sub_21974(v116);
          }
          else {
            uint64_t v117 = 0;
          }
          std::string::size_type v118 = v116 + 24 * v114;
          __dst.__r_.__value_.__r.__words[0] = v116;
          __dst.__r_.__value_.__l.__size_ = v118;
          *(void *)&long long v198 = v116 + 24 * v117;
          long long v119 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v118 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v118 = v119;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__r.__words[2] = v118 + 24;
          sub_20D9C((uint64_t *)&v185, &__dst);
          uint64_t v120 = *(void *)v186;
          sub_20E50((uint64_t)&__dst);
          *(void *)uint64_t v186 = v120;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v113 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v186 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          _OWORD *v112 = v113;
          memset(&__p, 0, sizeof(__p));
          *(void *)uint64_t v186 = (char *)v112 + 24;
        }
        v204.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
        if (v207 < 0) {
          operator delete(v206);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        uint64_t v121 = *(unsigned int **)(v182 + 72);
        if (v121 != (unsigned int *)(v182 + 80))
        {
          char v122 = "- ";
          do
          {
            sub_3D04((uint64_t)&v204);
            sub_256E4(&v204, (uint64_t)v122, 2);
            sub_4D60(&v196, v121 + 8);
            if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v123 = &v196;
            }
            else {
              __int16 v123 = (std::string *)v196.__r_.__value_.__r.__words[0];
            }
            if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v124 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v124 = v196.__r_.__value_.__l.__size_;
            }
            sub_256E4(&v204, (uint64_t)v123, v124);
            sub_256E4(&v204, (uint64_t)": ", 2);
            std::ostream::operator<<();
            __int16 v125 = (const void *)(*(uint64_t (**)(void, void))(**(void **)(v182 + 24) + 48))(*(void *)(v182 + 24), *((void *)v121 + 5));
            sub_14E44(&v194, v125);
            if (!v194)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            sub_20C54((uint64_t)&v195, (const __CFString *)v194);
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v126 = &v195;
            }
            else {
              char v126 = (std::string *)v195.__r_.__value_.__r.__words[0];
            }
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v127 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v127 = v195.__r_.__value_.__l.__size_;
            }
            sub_256E4(&v204, (uint64_t)v126, v127);
            sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
            char v128 = *(_OWORD **)v186;
            if (*(void *)v186 >= (unint64_t)v187)
            {
              char v130 = v122;
              unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v186 - (void)v185) >> 3);
              unint64_t v132 = v131 + 1;
              if (v131 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_60548();
              }
              if (0x5555555555555556 * ((v187 - v185) >> 3) > v132) {
                unint64_t v132 = 0x5555555555555556 * ((v187 - v185) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v187 - v185) >> 3) >= 0x555555555555555) {
                unint64_t v133 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v133 = v132;
              }
              *((void *)&v198 + 1) = &v187;
              if (v133) {
                unint64_t v133 = (unint64_t)sub_21974(v133);
              }
              else {
                uint64_t v134 = 0;
              }
              std::string::size_type v135 = v133 + 24 * v131;
              __dst.__r_.__value_.__r.__words[0] = v133;
              __dst.__r_.__value_.__l.__size_ = v135;
              *(void *)&long long v198 = v133 + 24 * v134;
              long long v136 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v135 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v135 = v136;
              memset(&__p, 0, sizeof(__p));
              __dst.__r_.__value_.__r.__words[2] = v135 + 24;
              sub_20D9C((uint64_t *)&v185, &__dst);
              uint64_t v137 = *(void *)v186;
              sub_20E50((uint64_t)&__dst);
              *(void *)uint64_t v186 = v137;
              char v122 = v130;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              long long v129 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(*(void *)v186 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              _OWORD *v128 = v129;
              memset(&__p, 0, sizeof(__p));
              *(void *)uint64_t v186 = (char *)v128 + 24;
            }
            if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v195.__r_.__value_.__l.__data_);
            }
            if (v194) {
              CFRelease(v194);
            }
            if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v196.__r_.__value_.__l.__data_);
            }
            v204.__r_.__value_.__r.__words[0] = v183;
            *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
            if (v207 < 0) {
              operator delete(v206);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
            __int16 v138 = (unsigned int *)*((void *)v121 + 1);
            if (v138)
            {
              do
              {
                char v139 = v138;
                __int16 v138 = *(unsigned int **)v138;
              }
              while (v138);
            }
            else
            {
              do
              {
                char v139 = (unsigned int *)*((void *)v121 + 2);
                BOOL v68 = *(void *)v139 == (void)v121;
                uint64_t v121 = v139;
              }
              while (!v68);
            }
            uint64_t v121 = v139;
          }
          while (v139 != (unsigned int *)(v182 + 80));
        }
        sub_3D04((uint64_t)&v204);
        sub_256E4(&v204, (uint64_t)"PendingRequests (", 17);
        std::ostream::operator<<();
        sub_256E4(&v204, (uint64_t)"):", 2);
        sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
        char v140 = *(_OWORD **)v186;
        if (*(void *)v186 >= (unint64_t)v187)
        {
          unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v186 - (void)v185) >> 3);
          unint64_t v143 = v142 + 1;
          if (v142 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          if (0x5555555555555556 * ((v187 - v185) >> 3) > v143) {
            unint64_t v143 = 0x5555555555555556 * ((v187 - v185) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v187 - v185) >> 3) >= 0x555555555555555) {
            unint64_t v144 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v144 = v143;
          }
          *((void *)&v198 + 1) = &v187;
          if (v144) {
            unint64_t v144 = (unint64_t)sub_21974(v144);
          }
          else {
            uint64_t v145 = 0;
          }
          std::string::size_type v146 = v144 + 24 * v142;
          __dst.__r_.__value_.__r.__words[0] = v144;
          __dst.__r_.__value_.__l.__size_ = v146;
          *(void *)&long long v198 = v144 + 24 * v145;
          long long v147 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v146 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v146 = v147;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__r.__words[2] = v146 + 24;
          sub_20D9C((uint64_t *)&v185, &__dst);
          uint64_t v148 = *(void *)v186;
          sub_20E50((uint64_t)&__dst);
          *(void *)uint64_t v186 = v148;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v141 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v186 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          _OWORD *v140 = v141;
          memset(&__p, 0, sizeof(__p));
          *(void *)uint64_t v186 = (char *)v140 + 24;
        }
        v204.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
        if (v207 < 0) {
          operator delete(v206);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        char v150 = *(unsigned int **)(v182 + 96);
        for (uint64_t i = *(unsigned int **)(v182 + 104); v150 != i; v150 += 4)
        {
          sub_3D04((uint64_t)&v204);
          sub_256E4(&v204, (uint64_t)"- ", 2);
          sub_4D60(&v196, v150);
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v151 = &v196;
          }
          else {
            char v151 = (std::string *)v196.__r_.__value_.__r.__words[0];
          }
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v152 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v152 = v196.__r_.__value_.__l.__size_;
          }
          sub_256E4(&v204, (uint64_t)v151, v152);
          std::ostream::operator<<();
          sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
          char v153 = *(_OWORD **)v186;
          if (*(void *)v186 >= (unint64_t)v187)
          {
            unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v186 - (void)v185) >> 3);
            unint64_t v156 = v155 + 1;
            if (v155 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_60548();
            }
            if (0x5555555555555556 * ((v187 - v185) >> 3) > v156) {
              unint64_t v156 = 0x5555555555555556 * ((v187 - v185) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v187 - v185) >> 3) >= 0x555555555555555) {
              unint64_t v157 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v157 = v156;
            }
            *((void *)&v198 + 1) = &v187;
            if (v157) {
              unint64_t v157 = (unint64_t)sub_21974(v157);
            }
            else {
              uint64_t v158 = 0;
            }
            std::string::size_type v159 = v157 + 24 * v155;
            __dst.__r_.__value_.__r.__words[0] = v157;
            __dst.__r_.__value_.__l.__size_ = v159;
            *(void *)&long long v198 = v157 + 24 * v158;
            long long v160 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v159 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)std::string::size_type v159 = v160;
            memset(&__p, 0, sizeof(__p));
            __dst.__r_.__value_.__r.__words[2] = v159 + 24;
            sub_20D9C((uint64_t *)&v185, &__dst);
            uint64_t v161 = *(void *)v186;
            sub_20E50((uint64_t)&__dst);
            *(void *)uint64_t v186 = v161;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v154 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(*(void *)v186 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *char v153 = v154;
            memset(&__p, 0, sizeof(__p));
            *(void *)uint64_t v186 = (char *)v153 + 24;
          }
          if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v196.__r_.__value_.__l.__data_);
          }
          v204.__r_.__value_.__r.__words[0] = v183;
          *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
          if (v207 < 0) {
            operator delete(v206);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        sub_3D04((uint64_t)&v204);
        sub_256E4(&v204, (uint64_t)"Available clock devices (", 25);
        std::ostream::operator<<();
        sub_256E4(&v204, (uint64_t)"):", 2);
        sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
        char v162 = *(_OWORD **)v186;
        if (*(void *)v186 >= (unint64_t)v187)
        {
          unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v186 - (void)v185) >> 3);
          unint64_t v165 = v164 + 1;
          if (v164 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          if (0x5555555555555556 * ((v187 - v185) >> 3) > v165) {
            unint64_t v165 = 0x5555555555555556 * ((v187 - v185) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v187 - v185) >> 3) >= 0x555555555555555) {
            unint64_t v166 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v166 = v165;
          }
          *((void *)&v198 + 1) = &v187;
          if (v166) {
            unint64_t v166 = (unint64_t)sub_21974(v166);
          }
          else {
            uint64_t v167 = 0;
          }
          std::string::size_type v168 = v166 + 24 * v164;
          __dst.__r_.__value_.__r.__words[0] = v166;
          __dst.__r_.__value_.__l.__size_ = v168;
          *(void *)&long long v198 = v166 + 24 * v167;
          long long v169 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v168 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v168 = v169;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__r.__words[2] = v168 + 24;
          sub_20D9C((uint64_t *)&v185, &__dst);
          uint64_t v170 = *(void *)v186;
          sub_20E50((uint64_t)&__dst);
          *(void *)uint64_t v186 = v170;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v163 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v186 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          _OWORD *v162 = v163;
          memset(&__p, 0, sizeof(__p));
          *(void *)uint64_t v186 = (char *)v162 + 24;
        }
        v204.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
        if (v207 < 0) {
          operator delete(v206);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        sub_2E501C((uint64_t *)&v185, *(std::string **)v186, *(long long **)(v182 + 120), *(long long **)(v182 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v182 + 128) - *(void *)(v182 + 120)) >> 3));
        sub_3D04((uint64_t)&v204);
        sub_256E4(&v204, (uint64_t)"Log messages (", 14);
        std::ostream::operator<<();
        sub_256E4(&v204, (uint64_t)"):", 2);
        sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
        char v171 = *(std::string **)v186;
        if (*(void *)v186 >= (unint64_t)v187)
        {
          unint64_t v173 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v186 - (void)v185) >> 3);
          unint64_t v174 = v173 + 1;
          if (v173 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          if (0x5555555555555556 * ((v187 - v185) >> 3) > v174) {
            unint64_t v174 = 0x5555555555555556 * ((v187 - v185) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v187 - v185) >> 3) >= 0x555555555555555) {
            unint64_t v175 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v175 = v174;
          }
          *((void *)&v198 + 1) = &v187;
          if (v175) {
            unint64_t v175 = (unint64_t)sub_21974(v175);
          }
          else {
            uint64_t v176 = 0;
          }
          std::string::size_type v177 = v175 + 24 * v173;
          __dst.__r_.__value_.__r.__words[0] = v175;
          __dst.__r_.__value_.__l.__size_ = v177;
          *(void *)&long long v198 = v175 + 24 * v176;
          long long v178 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v177 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v177 = v178;
          memset(&__p, 0, sizeof(__p));
          __dst.__r_.__value_.__r.__words[2] = v177 + 24;
          sub_20D9C((uint64_t *)&v185, &__dst);
          std::string v179 = *(std::string **)v186;
          sub_20E50((uint64_t)&__dst);
          *(void *)uint64_t v186 = v179;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v172 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(*(void *)v186 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)&v171->__r_.__value_.__l.__data_ = v172;
          memset(&__p, 0, sizeof(__p));
          *(void *)uint64_t v186 = v171 + 1;
        }
        v204.__r_.__value_.__r.__words[0] = v183;
        *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
        if (v207 < 0) {
          operator delete(v206);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        sub_2E501C((uint64_t *)&v185, *(std::string **)v186, *(long long **)(v182 + 144), *(long long **)(v182 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v182 + 152) - *(void *)(v182 + 144)) >> 3));
        sub_2E501C((uint64_t *)a1, *(std::string **)(a1 + 8), (long long *)v185, *(long long **)v186, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v186 - (void)v185) >> 3));
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
        sub_217F8((void ***)&v204);
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
        sub_217F8((void ***)&v204);
        sub_10E118(v190[0]);
        return;
      }
    }
    else if (!*(unsigned char *)(a2 + 271))
    {
      goto LABEL_184;
    }
    sub_3D04((uint64_t)&v204);
    sub_256E4(&v204, (uint64_t)"- Activation Device: ", 21);
    int v97 = *(char *)(a2 + 271);
    if (v97 >= 0) {
      uint64_t v98 = a2 + 248;
    }
    else {
      uint64_t v98 = *(void *)(a2 + 248);
    }
    if (v97 >= 0) {
      uint64_t v99 = *(unsigned __int8 *)(a2 + 271);
    }
    else {
      uint64_t v99 = *(void *)(a2 + 256);
    }
    sub_256E4(&v204, v98, v99);
    sub_2E35E0(&__p, (uint64_t)&v204.__r_.__value_.__l.__size_);
    unint64_t v100 = *(void *)(a1 + 8);
    unint64_t v101 = *(void *)(a1 + 16);
    if (v100 >= v101)
    {
      unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *(void *)a1) >> 3);
      unint64_t v104 = v103 + 1;
      if (v103 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - *(void *)a1) >> 3);
      if (2 * v105 > v104) {
        unint64_t v104 = 2 * v105;
      }
      if (v105 >= 0x555555555555555) {
        unint64_t v106 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v106 = v104;
      }
      *((void *)&v198 + 1) = a1 + 16;
      if (v106) {
        unint64_t v106 = (unint64_t)sub_21974(v106);
      }
      else {
        uint64_t v107 = 0;
      }
      std::string::size_type v108 = v106 + 24 * v103;
      __dst.__r_.__value_.__r.__words[0] = v106;
      __dst.__r_.__value_.__l.__size_ = v108;
      *(void *)&long long v198 = v106 + 24 * v107;
      long long v109 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v108 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v108 = v109;
      memset(&__p, 0, sizeof(__p));
      __dst.__r_.__value_.__r.__words[2] = v108 + 24;
      sub_20D9C((uint64_t *)a1, &__dst);
      uint64_t v110 = *(void *)(a1 + 8);
      sub_20E50((uint64_t)&__dst);
      int v111 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 8) = v110;
      if (v111 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v102 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v100 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v100 = v102;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a1 + 8) = v100 + 24;
    }
    v204.__r_.__value_.__r.__words[0] = v183;
    *(std::string::size_type *)((char *)v204.__r_.__value_.__r.__words + *(void *)(v183 - 24)) = v184;
    if (v207 < 0) {
      operator delete(v206);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    goto LABEL_184;
  }
  sub_21C8C(&v204, "VirtualAudio PlugIn is not initialized yet. Initialization state: ");
  std::to_string(&__dst, *(_DWORD *)(a2 + 108));
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __dst.__r_.__value_.__l.__size_;
  }
  std::string::append(&v204, (const std::string::value_type *)p_dst, v7);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    sub_21E8C(&__dst, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v204;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __p.__r_.__value_.__r.__words[0] = a1;
  __p.__r_.__value_.__s.__data_[8] = 0;
  __int16 v13 = (char *)operator new(0x18uLL);
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v13 + 24;
  *(void *)(a1 + 8) = sub_15EEC8(a1 + 16, (long long *)&__dst, &v198, v13);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
}

void sub_2E3268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2E35E0(std::string *a1, uint64_t a2)
{
  uint64_t v4 = sub_24788(a2);
  if (v5)
  {
    uint64_t v6 = (void *)(a2 + 64);
    if (*(char *)(a2 + 87) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    std::string::size_type v7 = v4 - (void)v6;
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
  a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  std::string::resize(a1, v7 + v5, 0);
  std::string::erase(a1, 0, v7);
  sub_10F5B0(a2);
}

void sub_2E3674(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E3690(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_BCAD8(&v9, a3, "", 1487);
  for (uint64_t i = v10; i != &v9; uint64_t i = (uint64_t *)i[1])
  {
    unsigned int v8 = sub_E00F4(*(void *)(a2 + 128), i[2], a4);
    if (v8) {
      sub_6CB40(a1, v8, v8);
    }
  }
  sub_B8E4(&v9);
}

void sub_2E3748(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_2E376C(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v150 = 0;
  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 32))())
  {
    char v149 = v150;
    sub_3D04((uint64_t)buf);
    sub_256E4(buf, (uint64_t)"VirtualAudio_Devices (", 22);
    std::ostream::operator<<();
    sub_256E4(buf, (uint64_t)"):", 2);
    sub_2E35E0(__p, (uint64_t)&buf[8]);
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[1];
    if (v4 >= v3)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      *(void *)&v152[32] = a1 + 2;
      if (v18) {
        unint64_t v18 = (unint64_t)sub_21974(v18);
      }
      else {
        uint64_t v19 = 0;
      }
      unint64_t v20 = v18 + 24 * v15;
      *(void *)std::string::size_type v152 = v18;
      *(void *)&v152[8] = v20;
      *(void *)&v152[24] = v18 + 24 * v19;
      long long v21 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *(void *)(v20 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v20 = v21;
      memset(__p, 0, 24);
      *(void *)&v152[16] = v20 + 24;
      sub_20D9C(a1, v152);
      uint64_t v22 = a1[1];
      sub_20E50((uint64_t)v152);
      int v23 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      a1[1] = v22;
      if (v23 < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v5 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *(void *)(v4 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v4 = v5;
      memset(__p, 0, 24);
      a1[1] = v4 + 24;
    }
    if (v159 < 0) {
      operator delete(v157);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    unint64_t v24 = *(uint64_t **)(a2 + 144);
    uint64_t v137 = a2;
    __int16 v138 = *(uint64_t **)(a2 + 152);
    if (v24 != v138)
    {
      do
      {
        uint64_t v25 = *v24;
        strcpy(v152, "trsnbolg");
        v152[9] = 0;
        *(_WORD *)&v152[10] = 0;
        sub_2E53AC((uint64_t)buf, v25);
        int v26 = *(_DWORD *)buf;
        if (*(_DWORD *)buf) {
          BOOL v27 = 1;
        }
        else {
          BOOL v27 = buf[16] == 0;
        }
        if (v27)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_6414D8;
          exception[2] = v26;
        }
        sub_3D04((uint64_t)buf);
        sub_256E4(buf, (uint64_t)"- VirtualAudio_Device: ", 23);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v25 + 96))(&v151, v25);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = &v151;
        }
        else {
          std::string::size_type v28 = (std::string *)v151.__r_.__value_.__r.__words[0];
        }
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v151.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v151.__r_.__value_.__l.__size_;
        }
        sub_256E4(buf, (uint64_t)v28, size);
        sub_256E4(buf, (uint64_t)"; running: ", 11);
        (*(void (**)(uint64_t))(*(void *)v25 + 512))(v25);
        std::ostream::operator<<();
        sub_256E4(buf, (uint64_t)"; sr: ", 6);
        std::ostream::operator<<();
        sub_2E35E0(__p, (uint64_t)&buf[8]);
        unint64_t v30 = a1[1];
        unint64_t v31 = a1[2];
        if (v30 >= v31)
        {
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *a1) >> 3);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *a1) >> 3);
          if (2 * v35 > v34) {
            unint64_t v34 = 2 * v35;
          }
          if (v35 >= 0x555555555555555) {
            unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v36 = v34;
          }
          *(void *)&v152[32] = a1 + 2;
          if (v36) {
            unint64_t v36 = (unint64_t)sub_21974(v36);
          }
          else {
            uint64_t v37 = 0;
          }
          unint64_t v38 = v36 + 24 * v33;
          *(void *)std::string::size_type v152 = v36;
          *(void *)&v152[8] = v38;
          *(void *)&v152[24] = v36 + 24 * v37;
          long long v39 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *(void *)(v38 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v38 = v39;
          memset(__p, 0, 24);
          *(void *)&v152[16] = v38 + 24;
          sub_20D9C(a1, v152);
          uint64_t v40 = a1[1];
          sub_20E50((uint64_t)v152);
          int v41 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          a1[1] = v40;
          if (v41 < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *(void *)(v30 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v30 = v32;
          memset(__p, 0, 24);
          a1[1] = v30 + 24;
        }
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v151.__r_.__value_.__l.__data_);
        }
        char v139 = v24;
        *(void *)int buf = v141;
        *(void *)&buf[*(void *)(v141 - 24)] = v142;
        if (v159 < 0) {
          operator delete(v157);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        char v42 = 0;
        uint64_t v43 = 0;
        __int16 v148 = 1;
        do
        {
          char v140 = v42;
          if (*((unsigned char *)&v148 + v43)) {
            uint64_t v44 = 504;
          }
          else {
            uint64_t v44 = 528;
          }
          if (*((unsigned char *)&v148 + v43)) {
            uint64_t v45 = 496;
          }
          else {
            uint64_t v45 = 520;
          }
          uint64_t v46 = v25 + 520;
          if (*((unsigned char *)&v148 + v43)) {
            uint64_t v46 = v25 + 496;
          }
          uint64_t v143 = v46;
          uint64_t v47 = *(void *)(v25 + v45);
          if (((*(void *)(v25 + v44) - v47) & 0x7FFFFFFF8) != 0)
          {
            unint64_t v48 = 0;
            while (1)
            {
              uint64_t v49 = v48 >= (*(void *)(v143 + 8) - v47) >> 3 ? 0 : *(void *)(v47 + 8 * v48);
              strcpy((char *)&v151, "tmfsbolg");
              v151.__r_.__value_.__s.__data_[9] = 0;
              WORD1(v151.__r_.__value_.__r.__words[1]) = 0;
              if ((sub_3A6F88(v49) & 1) == 0) {
                break;
              }
              LODWORD(v146.__r_.__value_.__l.__data_) = sub_3A6FFC(v49);
              if (!LODWORD(v146.__r_.__value_.__l.__data_))
              {
                int v50 = 2003329396;
                goto LABEL_203;
              }
              memset(buf, 0, sizeof(buf));
              int v50 = sub_3A7070(v49);
              if (v50) {
                goto LABEL_203;
              }
              *(_OWORD *)std::string::size_type v152 = *(_OWORD *)&buf[1];
              *(_OWORD *)&v152[16] = *(_OWORD *)&buf[17];
              *(void *)&v152[31] = *(void *)&buf[32];
              __p[0].__r_.__value_.__s.__data_[0] = buf[0];
              *(_OWORD *)((char *)&__p[0].__r_.__value_.__l.__data_ + 1) = *(_OWORD *)&buf[1];
              *(_OWORD *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 1) = *(_OWORD *)&v152[16];
              __p[1].__r_.__value_.__l.__size_ = *(void *)&buf[32];
              sub_3D04((uint64_t)buf);
              sub_256E4(buf, (uint64_t)"  - VirtualAudio_Stream: ", 25);
              (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v49 + 96))(&v146, v49);
              if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v51 = &v146;
              }
              else {
                unint64_t v51 = (std::string *)v146.__r_.__value_.__r.__words[0];
              }
              if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v52 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v52 = v146.__r_.__value_.__l.__size_;
              }
              sub_256E4(buf, (uint64_t)v51, v52);
              sub_256E4(buf, (uint64_t)"; fmt: ", 7);
              sub_259A4(&v145, (uint64_t)__p);
              if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v53 = &v145;
              }
              else {
                unint64_t v53 = (std::string *)v145.__r_.__value_.__r.__words[0];
              }
              if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v54 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v54 = v145.__r_.__value_.__l.__size_;
              }
              sub_256E4(buf, (uint64_t)v53, v54);
              sub_2E35E0(&v151, (uint64_t)&buf[8]);
              unint64_t v55 = a1[1];
              unint64_t v56 = a1[2];
              if (v55 >= v56)
              {
                unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *a1) >> 3);
                unint64_t v59 = v58 + 1;
                if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_60548();
                }
                unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *a1) >> 3);
                if (2 * v60 > v59) {
                  unint64_t v59 = 2 * v60;
                }
                if (v60 >= 0x555555555555555) {
                  unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v61 = v59;
                }
                *(void *)&v152[32] = a1 + 2;
                if (v61) {
                  unint64_t v61 = (unint64_t)sub_21974(v61);
                }
                else {
                  uint64_t v62 = 0;
                }
                unint64_t v63 = v61 + 24 * v58;
                *(void *)std::string::size_type v152 = v61;
                *(void *)&v152[8] = v63;
                *(void *)&v152[24] = v61 + 24 * v62;
                long long v64 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
                *(void *)(v63 + 16) = *((void *)&v151.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v63 = v64;
                memset(&v151, 0, sizeof(v151));
                *(void *)&v152[16] = v63 + 24;
                sub_20D9C(a1, v152);
                uint64_t v65 = a1[1];
                sub_20E50((uint64_t)v152);
                int v66 = SHIBYTE(v151.__r_.__value_.__r.__words[2]);
                a1[1] = v65;
                if (v66 < 0) {
                  operator delete(v151.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v57 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
                *(void *)(v55 + 16) = *((void *)&v151.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v55 = v57;
                memset(&v151, 0, sizeof(v151));
                a1[1] = v55 + 24;
              }
              if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v145.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v146.__r_.__value_.__l.__data_);
              }
              *(void *)int buf = v141;
              *(void *)&buf[*(void *)(v141 - 24)] = v142;
              if (v159 < 0) {
                operator delete(v157);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
              ++v48;
              uint64_t v47 = *(void *)(v25 + v45);
              if (v48 >= ((unint64_t)(*(void *)(v25 + v44) - v47) >> 3)) {
                goto LABEL_104;
              }
            }
            int v50 = 2003332927;
LABEL_203:
            char v128 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v128 = &off_6414D8;
            v128[2] = v50;
          }
LABEL_104:
          char v42 = 1;
          uint64_t v43 = 1;
        }
        while ((v140 & 1) == 0);
        unint64_t v24 = v139 + 1;
      }
      while (v139 + 1 != v138);
    }
    uint64_t v67 = v137;
    uint64_t v68 = *(void *)(*(void *)(v137 + 112) + 8);
    if (v68)
    {
      uint64_t v71 = *(void *)(v68 + 32);
      uint64_t v69 = v68 + 32;
      uint64_t v70 = v71;
      if (!v71) {
        goto LABEL_120;
      }
      uint64_t v72 = v69;
      do
      {
        unsigned int v73 = *(_DWORD *)(v70 + 32);
        BOOL v74 = v73 >= 0x76646566;
        if (v73 >= 0x76646566) {
          unint64_t v75 = (uint64_t *)v70;
        }
        else {
          unint64_t v75 = (uint64_t *)(v70 + 8);
        }
        if (v74) {
          uint64_t v72 = v70;
        }
        uint64_t v70 = *v75;
      }
      while (*v75);
      if (v72 == v69) {
        goto LABEL_120;
      }
      unsigned int v76 = *(_DWORD *)(v72 + 32);
      BOOL v27 = v76 == 1986291046;
      BOOL v77 = v76 > 0x76646566;
      if (v27) {
        BOOL v77 = *(_DWORD *)(v72 + 36) != 0;
      }
      if (v77)
      {
LABEL_120:
        sub_21C8C(&v151, "");
      }
      else
      {
        sub_3D04((uint64_t)buf);
        uint64_t v123 = v72 + 40;
        for (uint64_t i = *(void *)(v72 + 48); i != v123; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v125 = *(void *)(i + 16);
          if (!v125)
          {
            char v130 = (os_log_t *)sub_32A48(13);
            unint64_t v131 = *v130;
            if (*v130 && os_log_type_enabled(*v130, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string::size_type v152 = 136315394;
              *(void *)&v152[4] = "RoutingHandlerActionList.cpp";
              *(_WORD *)&v152[12] = 1024;
              *(_DWORD *)&v152[14] = 50;
              _os_log_impl(&def_1E50E8, v131, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v152, 0x12u);
            }
            unint64_t v132 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v132, "Precondition failure.");
          }
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v125 + 32))(v152);
          if (v152[24])
          {
            char v126 = v152[23] >= 0 ? v152 : *(unsigned char **)v152;
            uint64_t v127 = v152[23] >= 0 ? v152[23] : *(void *)&v152[8];
            sub_256E4(buf, (uint64_t)v126, v127);
            if (v152[24])
            {
              if ((v152[23] & 0x80000000) != 0) {
                operator delete(*(void **)v152);
              }
            }
          }
        }
        sub_246E4(&v151, (uint64_t)&buf[8]);
        *(void *)int buf = v141;
        *(void *)&buf[*(void *)(v141 - 24)] = v142;
        if (v159 < 0) {
          operator delete(v157);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v78 = std::string::insert(&v151, 0, "Routing manager: [ ", 0x13uLL);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      long long v80 = std::string::append(__p, " ]", 2uLL);
      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      sub_4D60(&v146, (unsigned int *)"fedv");
    }
    unint64_t v83 = a1[1];
    unint64_t v82 = a1[2];
    if (v83 >= v82)
    {
      unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - *a1) >> 3);
      unint64_t v86 = v85 + 1;
      if (v85 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - *a1) >> 3);
      if (2 * v87 > v86) {
        unint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x555555555555555) {
        unint64_t v88 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v88 = v86;
      }
      *(void *)&unsigned char buf[32] = a1 + 2;
      if (v88) {
        unint64_t v88 = (unint64_t)sub_21974(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = v88 + 24 * v85;
      *(void *)int buf = v88;
      *(void *)&uint8_t buf[8] = v90;
      *(void *)&unsigned char buf[24] = v88 + 24 * v89;
      long long v91 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
      *(void *)(v90 + 16) = *((void *)&v146.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v90 = v91;
      memset(&v146, 0, sizeof(v146));
      *(void *)&uint8_t buf[16] = v90 + 24;
      sub_20D9C(a1, buf);
      uint64_t v92 = a1[1];
      sub_20E50((uint64_t)buf);
      int v93 = SHIBYTE(v146.__r_.__value_.__r.__words[2]);
      a1[1] = v92;
      if (v93 < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v84 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
      *(void *)(v83 + 16) = *((void *)&v146.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v83 = v84;
      a1[1] = v83 + 24;
    }
    uint64_t v94 = *(void *)(v137 + 128);
    if (!v94)
    {
      uint64_t v133 = sub_32A48(13);
      uint64_t v134 = sub_7D5E8(1, *(void **)v133, *(void *)(v133 + 8));
      std::string::size_type v135 = v134;
      if (v134 && os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7247;
        _os_log_impl(&def_1E50E8, v135, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      long long v136 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v136, "Precondition failure.");
    }
    memset(buf, 0, 24);
    strcpy((char *)&buf[24], "cwdv");
    unsigned char buf[32] = 0;
    int v154 = 3;
    v156[0] = 0;
    v156[1] = 0;
    unint64_t v155 = v156;
    LODWORD(v157) = 44739242;
    CFTypeRef cf = 0;
    sub_460BC((uint64_t *)__p, v94, (uint64_t)buf);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v156[0]);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    sub_3D04((uint64_t)buf);
    sub_256E4(buf, (uint64_t)"VirtualAudio_Ports (", 20);
    std::ostream::operator<<();
    sub_256E4(buf, (uint64_t)"):", 2);
    sub_2E35E0(&v151, (uint64_t)&buf[8]);
    unint64_t v95 = a1[1];
    unint64_t v96 = a1[2];
    if (v95 >= v96)
    {
      unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - *a1) >> 3);
      unint64_t v99 = v98 + 1;
      if (v98 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - *a1) >> 3);
      if (2 * v100 > v99) {
        unint64_t v99 = 2 * v100;
      }
      if (v100 >= 0x555555555555555) {
        unint64_t v101 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v101 = v99;
      }
      *(void *)&v152[32] = a1 + 2;
      if (v101) {
        unint64_t v101 = (unint64_t)sub_21974(v101);
      }
      else {
        uint64_t v102 = 0;
      }
      unint64_t v103 = v101 + 24 * v98;
      *(void *)std::string::size_type v152 = v101;
      *(void *)&v152[8] = v103;
      *(void *)&v152[24] = v101 + 24 * v102;
      long long v104 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      *(void *)(v103 + 16) = *((void *)&v151.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v103 = v104;
      memset(&v151, 0, sizeof(v151));
      *(void *)&v152[16] = v103 + 24;
      sub_20D9C(a1, v152);
      uint64_t v105 = a1[1];
      sub_20E50((uint64_t)v152);
      int v106 = SHIBYTE(v151.__r_.__value_.__r.__words[2]);
      a1[1] = v105;
      if (v106 < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v97 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      *(void *)(v95 + 16) = *((void *)&v151.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v95 = v97;
      memset(&v151, 0, sizeof(v151));
      a1[1] = v95 + 24;
    }
    *(void *)int buf = v141;
    *(void *)&buf[*(void *)(v141 - 24)] = v142;
    if (v159 < 0) {
      operator delete(v157);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    for (std::string::size_type j = __p[0].__r_.__value_.__l.__size_; (std::string *)j != __p; std::string::size_type j = *(void *)(j + 8))
    {
      uint64_t v108 = sub_E1B78(*(void *)(v67 + 128), *(_DWORD *)(j + 16));
      sub_3D04((uint64_t)buf);
      sub_256E4(buf, (uint64_t)"- VirtualAudio_Port: ", 21);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v108 + 96))(&v146, v108);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v109 = &v146;
      }
      else {
        long long v109 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v110 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v110 = v146.__r_.__value_.__l.__size_;
      }
      sub_256E4(buf, (uint64_t)v109, v110);
      sub_2E35E0(&v151, (uint64_t)&buf[8]);
      unint64_t v111 = a1[1];
      unint64_t v112 = a1[2];
      if (v111 >= v112)
      {
        unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - *a1) >> 3);
        unint64_t v115 = v114 + 1;
        if (v114 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - *a1) >> 3);
        if (2 * v116 > v115) {
          unint64_t v115 = 2 * v116;
        }
        if (v116 >= 0x555555555555555) {
          unint64_t v117 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v117 = v115;
        }
        *(void *)&v152[32] = a1 + 2;
        if (v117) {
          unint64_t v117 = (unint64_t)sub_21974(v117);
        }
        else {
          uint64_t v118 = 0;
        }
        unint64_t v119 = v117 + 24 * v114;
        *(void *)std::string::size_type v152 = v117;
        *(void *)&v152[8] = v119;
        *(void *)&v152[24] = v117 + 24 * v118;
        long long v120 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        *(void *)(v119 + 16) = *((void *)&v151.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v119 = v120;
        memset(&v151, 0, sizeof(v151));
        *(void *)&v152[16] = v119 + 24;
        sub_20D9C(a1, v152);
        uint64_t v121 = a1[1];
        sub_20E50((uint64_t)v152);
        int v122 = SHIBYTE(v151.__r_.__value_.__r.__words[2]);
        a1[1] = v121;
        uint64_t v67 = v137;
        if (v122 < 0) {
          operator delete(v151.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v113 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        *(void *)(v111 + 16) = *((void *)&v151.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v111 = v113;
        memset(&v151, 0, sizeof(v151));
        a1[1] = v111 + 24;
      }
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      *(void *)int buf = v141;
      *(void *)&buf[*(void *)(v141 - 24)] = v142;
      if (v159 < 0) {
        operator delete(v157);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_45F50(__p);
    sub_2E534C(&v149);
  }
  else
  {
    uint64_t v6 = sub_32A48(2);
    uint64_t v7 = sub_32A48(13);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_10;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_10:
    __int16 v13 = *(id *)v6;
    std::string::size_type v14 = v13;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_DWORD buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7259;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unable to lock mutex, Exiting DumpDeviceAndPortState", buf, 0x12u);
    }
  }
}

void sub_2E4CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  a49 = a20;
  *(uint64_t *)((char *)&a49 + *(void *)(a20 - 24)) = a21;
  if (a63 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  sub_2E534C(&a39);
  a27 = a23;
  sub_217F8((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_2E501C(uint64_t *a1, std::string *a2, long long *a3, long long *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2;
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    uint64_t v11 = (char *)a1[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) >= a5)
    {
      uint64_t v19 = v11 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (char *)a2) >> 3)) >= a5)
      {
        unint64_t v20 = (long long *)((char *)a3 + 24 * a5);
        long long v21 = (char *)a1[1];
      }
      else
      {
        unint64_t v20 = (long long *)((char *)a3 + 8 * ((v11 - (char *)a2) >> 3));
        long long v21 = sub_15EEC8((uint64_t)(a1 + 2), v20, a4, v11);
        a1[1] = (uint64_t)v21;
        if (v19 < 1) {
          return;
        }
      }
      uint64_t v22 = &v7[a5];
      int v23 = &v21[-24 * a5];
      unint64_t v24 = v21;
      if (v23 < v11)
      {
        unint64_t v24 = v21;
        do
        {
          long long v25 = *(_OWORD *)v23;
          *((void *)v24 + 2) = *((void *)v23 + 2);
          *(_OWORD *)unint64_t v24 = v25;
          v24 += 24;
          *((void *)v23 + 1) = 0;
          *((void *)v23 + 2) = 0;
          *(void *)int v23 = 0;
          v23 += 24;
        }
        while (v23 < v11);
      }
      a1[1] = (uint64_t)v24;
      if (v21 != (char *)v22)
      {
        int v26 = v21 - 24;
        uint64_t v27 = 8 * ((v21 - (char *)v22) >> 3);
        do
        {
          if (v26[23] < 0) {
            operator delete(*(void **)v26);
          }
          std::string::size_type v28 = (long long *)((char *)&v7[-1] + v27);
          long long v29 = *v28;
          *((void *)v26 + 2) = *(void *)((char *)&v7->__r_.__value_.__l + v27 - 8);
          *(_OWORD *)int v26 = v29;
          v26 -= 24;
          v7->__r_.__value_.__s.__data_[v27 - 1] = 0;
          *(unsigned char *)std::string::size_type v28 = 0;
          v27 -= 24;
        }
        while (v27);
      }
      for (; v6 != v20; ++v7)
      {
        std::string::operator=(v7, (const std::string *)v6);
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
    }
    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a5 - 0x5555555555555555 * ((uint64_t)&v11[-*a1] >> 3);
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v13) {
        uint64_t v16 = a5 - 0x5555555555555555 * ((uint64_t)&v11[-*a1] >> 3);
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v43 = v10;
      if (v17) {
        unint64_t v17 = (unint64_t)sub_21974(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v30 = v17 + 24 * v14;
      unint64_t v40 = v17;
      *(void *)&long long v41 = v30;
      *((void *)&v41 + 1) = v30;
      unint64_t v42 = v17 + 24 * v18;
      uint64_t v31 = 3 * a5;
      uint64_t v32 = v30 + 24 * a5;
      uint64_t v33 = 8 * v31;
      do
      {
        if (*((char *)v6 + 23) < 0)
        {
          sub_21E8C((unsigned char *)v30, *(void **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v34 = *v6;
          *(void *)(v30 + 16) = *((void *)v6 + 2);
          *(_OWORD *)unint64_t v30 = v34;
        }
        v30 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
        v33 -= 24;
      }
      while (v33);
      *((void *)&v41 + 1) = v32;
      *(void *)&long long v41 = sub_20E14(v10, (uint64_t)v7, (uint64_t)v7, *a1, *a1, v41, v41);
      unint64_t v35 = (std::string *)a1[1];
      uint64_t v46 = v32;
      uint64_t v47 = v32;
      v44[0] = v10;
      v44[1] = &v46;
      v44[2] = &v47;
      if (v7 != v35)
      {
        do
        {
          long long v36 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
          *(void *)(v32 + 16) = *((void *)&v7->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v32 = v36;
          v32 += 24;
          v7->__r_.__value_.__l.__size_ = 0;
          v7->__r_.__value_.__r.__words[2] = 0;
          v7->__r_.__value_.__r.__words[0] = 0;
          ++v7;
        }
        while (v7 != v35);
        uint64_t v47 = v32;
      }
      char v45 = 1;
      sub_21F2C((uint64_t)v44);
      long long v37 = *(_OWORD *)a1;
      uint64_t v38 = v42;
      *a1 = v41;
      a1[1] = v32;
      long long v41 = v37;
      uint64_t v39 = a1[2];
      a1[2] = v38;
      unint64_t v42 = v39;
      unint64_t v40 = v37;
      sub_20E50((uint64_t)&v40);
    }
  }
}

void sub_2E5328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2E534C(unsigned char *a1)
{
  if (*a1)
  {
    sub_3B7EC();
    (*(void (**)(void))(qword_64CC40 + 24))();
  }
  return a1;
}

uint64_t sub_2E53AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_3A6F88(a2);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t result = sub_3A6FFC(a2);
    if (result)
    {
      uint64_t result = sub_3A7070(a2);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        *(void *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 16) = 1;
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t *sub_2E5480(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_7DB7C(*(void **)(v2 + 8));
    operator delete();
  }
  return result;
}

uint64_t **sub_2E54E0(uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unint64_t v3 = (void *)v2[3];
    if (v3)
    {
      v2[4] = (uint64_t)v3;
      operator delete(v3);
    }
    sub_894C8(v2 + 2);
    sub_894C8(v2 + 1);
    sub_894C8(v2);
    operator delete();
  }
  return result;
}

uint64_t *sub_2E5560(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_3B7EC();
    char v8 = &qword_64CC40;
    char v9 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    sub_3B7EC();
    if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
    {
      unint64_t v3 = (os_log_t *)sub_32A48(8);
      unint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          __int16 v11 = 1024;
          int v12 = 1926;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to acquire routing mutex.", buf, 0x12u);
        }
      }
    }
    sub_3BCAC(&v8);
    sub_463E0(*(void **)(v2 + 568));
    sub_463E0(*(void **)(v2 + 536));
    *(void *)int buf = v2 + 504;
    sub_98D9C((void ***)buf);
    sub_73038(*(void **)(v2 + 488));
    sub_E7DF0((uint64_t *)(v2 + 456));
    if (*(unsigned char *)(v2 + 440) && *(char *)(v2 + 439) < 0) {
      operator delete(*(void **)(v2 + 416));
    }
    *(void *)int buf = v2 + 392;
    sub_81CEC((void ***)buf);
    sub_7D72C(v2 + 344);
    sub_7D72C(v2 + 304);
    sub_7D72C(v2 + 264);
    *(void *)int buf = v2 + 240;
    sub_4EDB8((void ***)buf);
    *(void *)int buf = v2 + 216;
    sub_4EDB8((void ***)buf);
    if (*(char *)(v2 + 207) < 0) {
      operator delete(*(void **)(v2 + 184));
    }
    sub_10E118(*(void **)(v2 + 160));
    sub_463E0(*(void **)(v2 + 128));
    sub_120BDC(*(void **)(v2 + 104));
    sub_87810(*(void **)(v2 + 80));
    sub_463E0(*(void **)(v2 + 56));
    uint64_t v5 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v7) {
      sub_13B70C(v7);
    }
    operator delete();
  }
  return result;
}

void sub_2E5824(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void *sub_2E5830(uint64_t a1, uint64_t a2, const __CFDictionary **a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 144);
  uint64_t v6 = *(void *)(a2 + 152);
  if (v5 != v6)
  {
    uint64_t v7 = v5 + 8;
    do
    {
      BOOL v8 = sub_51CA0(*(void *)(*(void *)(v7 - 8) + 640));
      if (v8) {
        break;
      }
      BOOL v116 = v7 == v6;
      v7 += 8;
    }
    while (!v116);
    if (v8)
    {
      uint64_t v350 = sub_32A48(13);
      uint64_t v351 = sub_7D5E8(1, *(void **)v350, *(void *)(v350 + 8));
      unint64_t v352 = v351;
      if (v351 && os_log_type_enabled(v351, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3714;
        _os_log_impl(&def_1E50E8, v352, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
  }
  if (!*a3)
  {
    uint64_t v340 = sub_32A48(13);
    v341 = sub_7D5E8(1, *(void **)v340, *(void *)(v340 + 8));
    v342 = v341;
    if (v341 && os_log_type_enabled(v341, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3715;
      _os_log_impl(&def_1E50E8, v342, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }

    long long v343 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v343, "Precondition failure.");
  }
  id v9 = *(id *)sub_32A48(2);
  uint64_t v10 = v9;
  if (v9)
  {
    __int16 v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3718;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = a4;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change initiated [ %s ]. Route configuration:", (uint8_t *)buf, 0x1Cu);
    }
  }
  CFDictionaryRef v12 = *a3;
  sub_21C8C(__p, "  ");
  sub_16A67C(&v411, v12, 1, (const void **)__p);
  if (v410 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = v412; (uint64_t *)i != &v411; uint64_t i = *(void *)(i + 8))
  {
    id v14 = *(id *)sub_32A48(2);
    unint64_t v15 = v14;
    if (v14)
    {
      uint64_t v16 = v14;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v17 = (void *)(i + 16);
        if (*(char *)(i + 39) < 0) {
          unint64_t v17 = (void *)*v17;
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3724;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v17;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", (uint8_t *)buf, 0x1Cu);
      }
    }
  }
  sub_2F69B0(&v371, a2, a3, 1, 1);
  if (v408[16])
  {
    uint64_t v18 = *(void **)(a2 + 120);
    sub_ED624((uint64_t)&v425, v18);
    uint64_t v19 = sub_32A48(2);
    uint64_t v20 = sub_32A48(34);
    char v21 = 0;
    uint64_t v22 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v23 = *(void *)(v19 + 8);
    while (1)
    {
      uint64_t v24 = (int)buf[v22];
      char v25 = v21;
      if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
        break;
      }
      char v21 = 1;
      uint64_t v22 = 1;
      if (v25) {
        goto LABEL_29;
      }
    }
    if ((v23 & v24) == 0) {
      uint64_t v19 = v20;
    }
LABEL_29:
    int v26 = *(NSObject **)v19;
    if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_SessionManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 24;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Clearing Audio Session information", (uint8_t *)buf, 0x12u);
    }
    uint64_t v27 = (unsigned int *)(v18 + 1);
    sub_7DB7C((void *)v18[1]);
    void *v18 = v18 + 1;
    uint64_t v18[2] = 0;
    v18[1] = 0;
    std::string::size_type v28 = v407;
    if (v407 != v408)
    {
      do
      {
        unsigned int v29 = *((_DWORD *)v28 + 8);
        unint64_t v30 = (uint64_t *)*((void *)&v425 + 1);
        if (*((void *)&v425 + 1))
        {
          uint64_t v31 = (long long *)((char *)&v425 + 8);
          uint64_t v32 = (uint64_t *)*((void *)&v425 + 1);
          do
          {
            uint64_t v33 = v32;
            long long v34 = v31;
            unsigned int v35 = *((_DWORD *)v32 + 8);
            if (v35 >= v29) {
              uint64_t v31 = v32;
            }
            else {
              ++v32;
            }
            uint64_t v32 = (uint64_t *)*v32;
          }
          while (v32);
          if (v31 != (long long *)((char *)&v425 + 8))
          {
            if (v35 < v29) {
              uint64_t v33 = v34;
            }
            if (v29 >= *((_DWORD *)v33 + 8))
            {
              while (1)
              {
                while (1)
                {
                  unsigned int v36 = *((_DWORD *)v30 + 8);
                  if (v29 >= v36) {
                    break;
                  }
                  unint64_t v30 = (uint64_t *)*v30;
                  if (!v30) {
                    goto LABEL_624;
                  }
                }
                if (v36 >= v29) {
                  break;
                }
                unint64_t v30 = (uint64_t *)v30[1];
                if (!v30) {
LABEL_624:
                }
                  sub_8251C("map::at:  key not found");
              }
              if (*((unsigned char *)v30 + 136))
              {
                uint64_t v37 = *(uint64_t *)((char *)v30 + 132);
                if ((v37 & 0xFF00000000) == 0) {
                  sub_7F218();
                }
                *((_DWORD *)v28 + 33) = v37;
                v28[136] = 1;
              }
            }
          }
        }
        uint64_t v38 = sub_7D7C8((uint64_t **)v18, v29, (_DWORD *)v28 + 8);
        sub_7D91C((uint64_t)(v38 + 5), (uint64_t)(v28 + 40));
        if (*((void *)&v425 + 1))
        {
          unsigned int v39 = *((_DWORD *)v28 + 8);
          unint64_t v40 = (uint64_t *)&v425 + 1;
          uint64_t v41 = *((void *)&v425 + 1);
          do
          {
            unint64_t v42 = (uint64_t *)v41;
            uint64_t v43 = v40;
            unsigned int v44 = *(_DWORD *)(v41 + 32);
            char v45 = (uint64_t **)(v41 + 8);
            if (v44 >= v39) {
              unint64_t v40 = (uint64_t *)v41;
            }
            else {
              v41 += 8;
            }
            uint64_t v41 = *(void *)v41;
          }
          while (v41);
          if (v40 != (uint64_t *)((char *)&v425 + 8))
          {
            uint64_t v46 = v44 >= v39 ? v42 : v43;
            if (v39 >= *((_DWORD *)v46 + 8))
            {
              if (v44 < v39) {
                char v45 = (uint64_t **)(v43 + 1);
              }
              uint64_t v47 = *v45;
              unint64_t v48 = v40;
              if (*v45)
              {
                do
                {
                  uint64_t v49 = v47;
                  uint64_t v47 = (uint64_t *)*v47;
                }
                while (v47);
              }
              else
              {
                do
                {
                  uint64_t v49 = (uint64_t *)v48[2];
                  BOOL v116 = *v49 == (void)v48;
                  unint64_t v48 = v49;
                }
                while (!v116);
              }
              if ((uint64_t *)v425 == v40) {
                *(void *)&long long v425 = v49;
              }
              --v426;
              sub_89144(*((uint64_t **)&v425 + 1), v40);
              if (v44 >= v39) {
                uint64_t v50 = (uint64_t)(v42 + 5);
              }
              else {
                uint64_t v50 = (uint64_t)(v43 + 5);
              }
              sub_7DA98(v50);
              operator delete(v40);
            }
          }
        }
        unint64_t v51 = (void *)*((void *)v28 + 1);
        if (v51)
        {
          do
          {
            std::string::size_type v52 = v51;
            unint64_t v51 = (void *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            std::string::size_type v52 = (unsigned char *)*((void *)v28 + 2);
            BOOL v116 = *(void *)v52 == (void)v28;
            std::string::size_type v28 = v52;
          }
          while (!v116);
        }
        std::string::size_type v28 = v52;
      }
      while (v52 != v408);
    }
    unint64_t v53 = (_OWORD *)v425;
    if ((long long *)v425 != (long long *)((char *)&v425 + 8))
    {
      do
      {
        if (sub_8234C((uint64_t)v53 + 40))
        {
          unsigned int v54 = *((_DWORD *)v53 + 8);
          *((unsigned char *)v53 + 240) = 0;
          unint64_t v55 = sub_7D7C8((uint64_t **)v18, v54, (_DWORD *)v53 + 8);
          sub_7D91C((uint64_t)(v55 + 5), (uint64_t)v53 + 40);
        }
        unint64_t v56 = (void *)*((void *)v53 + 1);
        if (v56)
        {
          do
          {
            long long v57 = v56;
            unint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            long long v57 = (_OWORD *)*((void *)v53 + 2);
            BOOL v116 = *(void *)v57 == (void)v53;
            unint64_t v53 = v57;
          }
          while (!v116);
        }
        unint64_t v53 = v57;
      }
      while (v57 != (long long *)((char *)&v425 + 8));
    }
    uint64_t v58 = sub_32A48(2);
    uint64_t v59 = sub_32A48(34);
    char v60 = 0;
    uint64_t v61 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v62 = *(void *)(v58 + 8);
    while (1)
    {
      uint64_t v63 = (int)buf[v61];
      char v64 = v60;
      if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
        break;
      }
      char v60 = 1;
      uint64_t v61 = 1;
      if (v64) {
        goto LABEL_97;
      }
    }
    if ((v62 & v63) == 0) {
      uint64_t v58 = v59;
    }
LABEL_97:
    uint64_t v65 = *(NSObject **)v58;
    if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v66 = v18[2];
      uint64_t v67 = (unsigned int *)*v18;
      memset(&v365, 0, sizeof(v365));
      std::string::append(&v365, "{ ", 2uLL);
      if (v67 != v27)
      {
        while (1)
        {
          sub_ED7B0(&v413, v67 + 8);
          if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v68 = &v413;
          }
          else {
            uint64_t v68 = (std::string *)v413.__r_.__value_.__r.__words[0];
          }
          if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v413.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v413.__r_.__value_.__l.__size_;
          }
          std::string::append(&v365, (const std::string::value_type *)v68, size);
          if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v413.__r_.__value_.__l.__data_);
          }
          uint64_t v70 = (unsigned int *)*((void *)v67 + 1);
          if (v70)
          {
            do
            {
              uint64_t v71 = v70;
              uint64_t v70 = *(unsigned int **)v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              uint64_t v71 = (unsigned int *)*((void *)v67 + 2);
              BOOL v116 = *(void *)v71 == (void)v67;
              uint64_t v67 = v71;
            }
            while (!v116);
          }
          if (v71 == v27) {
            break;
          }
          std::string::append(&v365, ", ", 2uLL);
          uint64_t v67 = v71;
        }
      }
      std::string::append(&v365, " }", 2uLL);
      if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v72 = &v365;
      }
      else {
        uint64_t v72 = (std::string *)v365.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "VirtualAudio_SessionManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 54;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v66;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v72;
      _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Active Audio Sessions: %zu, %s", (uint8_t *)buf, 0x26u);
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v365.__r_.__value_.__l.__data_);
      }
    }
    sub_7DB7C(*((void **)&v425 + 1));
    unsigned int v73 = *(void **)(a2 + 120);
    unsigned int v76 = (void *)*v73;
    unint64_t v75 = v73 + 1;
    BOOL v74 = v76;
    if (v76 != v75)
    {
      v359 = *(void **)(a2 + 120);
      BOOL v77 = 0;
      uint64_t v78 = 0;
      long long v79 = 0;
      while (!sub_3FAF4C((uint64_t)(v74 + 5)) || !*((unsigned char *)v74 + 240))
      {
LABEL_162:
        std::string::size_type v110 = (void *)v74[1];
        if (v110)
        {
          do
          {
            unint64_t v111 = v110;
            std::string::size_type v110 = (void *)*v110;
          }
          while (v110);
        }
        else
        {
          do
          {
            unint64_t v111 = (void *)v74[2];
            BOOL v116 = *v111 == (void)v74;
            BOOL v74 = v111;
          }
          while (!v116);
        }
        BOOL v74 = v111;
        if (v111 == v75)
        {
          BOOL v74 = (void *)*v359;
          goto LABEL_170;
        }
      }
      sub_824D8(buf, (const void *)v74[31], v74[32]);
      long long v80 = *(uint64_t **)buf;
      if ((uint64_t)(*(void *)&buf[2] - *(void *)buf) >= 1)
      {
        uint64_t v81 = (uint64_t)(*(void *)&buf[2] - *(void *)buf) >> 3;
        uint64_t v82 = (char *)v78 - (char *)v77;
        unint64_t v83 = (char *)v77 + (((char *)v78 - (char *)v77) & 0xFFFFFFFFFFFFFFF8);
        if (v81 > v79 - v78)
        {
          uint64_t v84 = v82 >> 3;
          unint64_t v85 = (v82 >> 3) + v81;
          if (v85 >> 61) {
            sub_60548();
          }
          if (((char *)v79 - (char *)v77) >> 2 > v85) {
            unint64_t v85 = ((char *)v79 - (char *)v77) >> 2;
          }
          if ((unint64_t)((char *)v79 - (char *)v77) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v85;
          }
          unint64_t v87 = (uint64_t *)((char *)v77 + (((char *)v78 - (char *)v77) & 0xFFFFFFFFFFFFFFF8));
          if (v86)
          {
            unint64_t v88 = (uint64_t *)sub_106EC(v86);
            uint64_t v90 = v89;
            long long v91 = v77;
          }
          else
          {
            long long v91 = v77;
            unint64_t v88 = 0;
            uint64_t v90 = 0;
          }
          BOOL v77 = &v88[v84];
          uint64_t v102 = &v77[v81];
          uint64_t v103 = 8 * v81;
          long long v104 = v77;
          do
          {
            uint64_t v105 = *v80++;
            *v104++ = v105;
            v103 -= 8;
          }
          while (v103);
          if (v78 != v91)
          {
            uint64_t v106 = v84;
            do
            {
              v88[v106 - 1] = v91[v106 - 1];
              --v106;
            }
            while (v106 * 8);
            BOOL v77 = v88;
          }
          int64_t v107 = (char *)v78 - (char *)v87;
          if (v78 != v87)
          {
            uint64_t v108 = v102;
            uint64_t v109 = v90;
            memmove(v102, v87, (char *)v78 - (char *)v87);
            uint64_t v102 = v108;
            uint64_t v90 = v109;
          }
          long long v79 = &v88[v90];
          uint64_t v78 = (uint64_t *)((char *)v102 + v107);
          if (v91) {
            operator delete(v91);
          }
          goto LABEL_160;
        }
        uint64_t v92 = (char *)v78 - v83;
        uint64_t v93 = ((char *)v78 - v83) >> 3;
        if (v93 >= v81)
        {
          uint64_t v95 = *(void *)buf + 8 * v81;
          long long v97 = v78;
LABEL_140:
          unint64_t v98 = &v97[-v81];
          unint64_t v99 = v97;
          while (v98 < v78)
          {
            uint64_t v100 = *v98++;
            *v99++ = v100;
          }
          unint64_t v101 = (uint64_t *)&v83[8 * v81];
          if (v97 != v101) {
            memmove(&v97[-(v97 - v101)], v83, (char *)v97 - (char *)v101);
          }
          if ((uint64_t *)v95 != v80) {
            memmove(v83, v80, v95 - (void)v80);
          }
          uint64_t v78 = v99;
          goto LABEL_160;
        }
        uint64_t v94 = v79;
        uint64_t v95 = *(void *)buf + 8 * v93;
        uint64_t v96 = *(void *)&buf[2] - v95;
        if (*(void *)&buf[2] != v95) {
          memmove(v78, (const void *)(*(void *)buf + 8 * v93), *(void *)&buf[2] - v95);
        }
        long long v97 = (uint64_t *)((char *)v78 + v96);
        if (v92 >= 1)
        {
          long long v79 = v94;
          unint64_t v83 = (char *)v77 + (((char *)v78 - (char *)v77) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_140;
        }
        uint64_t v78 = (uint64_t *)((char *)v78 + v96);
        long long v79 = v94;
      }
LABEL_160:
      if (*(void *)buf) {
        operator delete(*(void **)buf);
      }
      goto LABEL_162;
    }
    BOOL v77 = 0;
    uint64_t v78 = 0;
LABEL_170:
    if (v74 != v75)
    {
      do
      {
        buf[0] = *((_DWORD *)v74 + 8);
        sub_7EA30((uint64_t)&buf[2], (uint64_t)(v74 + 5));
        if (v434)
        {
          v413.__r_.__value_.__r.__words[0] = *(void *)&buf[4];
          uint64_t v414 = 0;
          *(_OWORD *)&v413.__r_.__value_.__r.__words[1] = 0uLL;
          sub_2189C(&v413.__r_.__value_.__s.__data_[8], *(long long **)&buf[6], *(long long **)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)&buf[6]) >> 3));
          memset(v415, 0, sizeof(v415));
          sub_2189C(v415, v430, v431, 0xAAAAAAAAAAAAAAABLL * (((char *)v431 - (char *)v430) >> 3));
          v416 = 0;
          v417 = 0;
          uint64_t v418 = 0;
          sub_4CAB0(&v416, v432, v433, (v433 - (uint64_t)v432) >> 3);
          sub_20EB4(a2, (unsigned __int8 *)&v413);
          sub_303BF0((CFDictionaryRef *)&v365, a2, (long long **)&v413);
          sub_F3FF0((uint64_t *)&v365, v77, v78, 8, 0);
          if (v365.__r_.__value_.__r.__words[0]) {
            CFRelease(v365.__r_.__value_.__l.__data_);
          }
          if (v416)
          {
            v417 = v416;
            operator delete(v416);
          }
          *(void *)&long long v425 = v415;
          sub_217F8((void ***)&v425);
          *(void *)&long long v425 = &v413.__r_.__value_.__l.__size_;
          sub_217F8((void ***)&v425);
        }
        sub_7DA98((uint64_t)&buf[2]);
        unint64_t v112 = (void *)v74[1];
        if (v112)
        {
          do
          {
            long long v113 = v112;
            unint64_t v112 = (void *)*v112;
          }
          while (v112);
        }
        else
        {
          do
          {
            long long v113 = (void *)v74[2];
            BOOL v116 = *v113 == (void)v74;
            BOOL v74 = v113;
          }
          while (!v116);
        }
        BOOL v74 = v113;
      }
      while (v113 != v75);
    }
    if (v77) {
      operator delete(v77);
    }
    if (*a3 && CFDictionaryGetCount(*a3) == 1 && (sub_20AA78() & 1) == 0)
    {
      sub_12053C((uint64_t)buf, 1920099684);
      uint64_t v136 = sub_13A5C8(a1, (uint64_t)buf);
      *(unsigned char *)(v136 + 40) = 0;
      *(unsigned char *)(v136 + 784) = 0;
      uint64_t v137 = (long long *)buf;
      goto LABEL_538;
    }
  }
  uint64_t v114 = *(void *)(a2 + 112);
  if (v408[25])
  {
    int v115 = 0;
    *(unsigned char *)(v114 + 385) = 0;
  }
  else
  {
    int v115 = *(unsigned __int8 *)(v114 + 385);
  }
  BOOL v116 = v372 == 1768776806 && v371 == 1668505974;
  if (!v116 || v115 == 0) {
    int v118 = v372;
  }
  else {
    int v118 = 1835361382;
  }
  int v372 = v118;
  unint64_t v119 = (char *)(a2 + 448);
  if (*(unsigned char *)(a2 + 472))
  {
    sub_2F6834(buf, a2);
    int v120 = buf[0];
    sub_2E9FD8((uint64_t)buf);
    if (v371 != v120)
    {
      sub_2F6834(buf, a2);
      int v121 = buf[1];
      sub_2E9FD8((uint64_t)buf);
      if (v372 != v121)
      {
        id v122 = *(id *)sub_32A48(2);
        uint64_t v123 = v122;
        if (v122)
        {
          std::string::size_type v124 = v122;
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
          {
            sub_89C0C(&v413, *(unsigned int **)(a2 + 448), *(unsigned int **)(a2 + 456));
            uint64_t v125 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v413
                 : (std::string *)v413.__r_.__value_.__r.__words[0];
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3754;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v125;
            _os_log_impl(&def_1E50E8, v124, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Undoing route-to-builtin-speaker ports by making ports %s routable", (uint8_t *)buf, 0x1Cu);
            if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v413.__r_.__value_.__l.__data_);
            }
          }
        }
        char v126 = *(unsigned int **)(a2 + 448);
        for (std::string::size_type j = *(unsigned int **)(a2 + 456); v126 != j; ++v126)
        {
          unsigned int v128 = *v126;
          sub_3A8A8();
          uint64_t v129 = sub_33438(v128);
          if (v129)
          {
            sub_E7404((uint64_t *)&v384, v129, v129);
          }
          else
          {
            char v130 = *(id *)sub_32A48(2);
            unint64_t v131 = v130;
            if (v130 && os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
            {
              buf[0] = 136315650;
              *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 894;
              HIWORD(buf[4]) = 1024;
              buf[5] = v128;
              _os_log_impl(&def_1E50E8, v131, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not get port for id %u", (uint8_t *)buf, 0x18u);
            }
          }
        }
        if (*(unsigned char *)(a2 + 472))
        {
          unint64_t v132 = *(void **)v119;
          if (*(void *)v119)
          {
            *(void *)(a2 + 456) = v132;
            operator delete(v132);
          }
          *(unsigned char *)(a2 + 472) = 0;
        }
      }
    }
  }
  if (v406)
  {
    if (*(unsigned __int8 *)(a2 + 472) == v406)
    {
      if (v119 != (char *)&v404 && *(unsigned char *)(a2 + 472)) {
        sub_6720C(v119, (char *)v404, v405, (v405 - (uint64_t)v404) >> 2);
      }
      goto LABEL_236;
    }
    if (*(unsigned char *)(a2 + 472))
    {
      uint64_t v133 = *(void **)v119;
      if (*(void *)v119)
      {
        uint64_t v134 = a2;
        *(void *)(a2 + 456) = v133;
        operator delete(v133);
        char v135 = 0;
LABEL_235:
        *(unsigned char *)(v134 + 472) = v135;
        goto LABEL_236;
      }
      char v135 = 0;
    }
    else
    {
      *(void *)unint64_t v119 = 0;
      *(void *)(a2 + 456) = 0;
      *(void *)(a2 + 464) = 0;
      sub_46B38(v119, v404, v405, (v405 - (uint64_t)v404) >> 2);
      char v135 = 1;
    }
    uint64_t v134 = a2;
    goto LABEL_235;
  }
LABEL_236:
  id v138 = *(id *)sub_32A48(2);
  char v139 = v138;
  if (v138)
  {
    char v140 = v138;
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
    {
      sub_383B64(&v413, (uint64_t)&v371);
      uint64_t v141 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v413
           : (std::string *)v413.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3765;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v141;
      _os_log_impl(&def_1E50E8, v140, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parsed RouteConfiguration: %s", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v413.__r_.__value_.__l.__data_);
      }
    }
  }
  if (cf)
  {
    uint64_t v142 = *(void *)(a2 + 112);
    uint64_t v143 = (os_log_t *)sub_32A48(8);
    unint64_t v144 = *v143;
    if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_DEBUG))
    {
      if (cf)
      {
        CFStringRef v145 = CFCopyDescription(cf);
        sub_20B40((uint64_t)&v413, v145);
        if (v145) {
          CFRelease(v145);
        }
      }
      else
      {
        sub_21C8C(&v413, "(null)");
      }
      std::string v146 = &v413;
      if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v146 = (std::string *)v413.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 5412;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v146;
      _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating multichannel mode preferences with array %s", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v413.__r_.__value_.__l.__data_);
      }
    }
    if (!cf)
    {
      long long v354 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v354, "Could not construct");
    }
    if (CFArrayGetCount((CFArrayRef)cf))
    {
      CFArrayRef v147 = (const __CFArray *)cf;
      if (cf)
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        CFIndex v149 = Count;
        CFArrayRef v150 = (const __CFArray *)cf;
        if (cf)
        {
          CFIndex v151 = CFArrayGetCount((CFArrayRef)cf);
          if (!v149) {
            goto LABEL_289;
          }
          goto LABEL_263;
        }
        CFIndex v151 = 0;
        if (Count)
        {
LABEL_263:
          unint64_t v152 = 0;
          v360 = (uint64_t *)(v142 + 560);
          do
          {
            if (v147 == v150 && v151 == v152) {
              break;
            }
            sub_68838(&v413, v147, v152);
            char v153 = (const void *)v413.__r_.__value_.__r.__words[0];
            if (v413.__r_.__value_.__r.__words[0]
              && (CFTypeID v154 = CFGetTypeID(v413.__r_.__value_.__l.__data_), v154 == CFDictionaryGetTypeID()))
            {
              sub_688E8(buf, (CFTypeRef *)&v413.__r_.__value_.__l.__data_);
              if (!*(void *)buf)
              {
                uint64_t v349 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v349, "Could not construct");
              }
              CFNumberRef v155 = (const __CFNumber *)sub_7E430(*(const __CFDictionary **)buf, "VAD type 4cc");
              if (v155)
              {
                CFNumberRef v156 = sub_22314(v155);
                if ((unint64_t)v156 >> 32)
                {
                  unsigned int v157 = v156;
                  if (!*(void *)buf)
                  {
                    uint64_t v356 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v356, "Could not construct");
                  }
                  CFBooleanRef v158 = (const __CFBoolean *)sub_689AC(*(const __CFDictionary **)buf, "prefers multichannel mode");
                  if (v158)
                  {
                    __int16 v159 = sub_20610(v158);
                    int v160 = v159;
                    int v161 = HIBYTE(v159);
                  }
                  else
                  {
                    int v161 = 0;
                    int v160 = 0;
                  }
                  unsigned int v164 = v160 | (v161 << 8);
                  if (v164 <= 0x100) {
                    LOBYTE(v164) = 0;
                  }
                  if ((_BYTE)v164) {
                    sub_6CB40(v360, v157, v157);
                  }
                  else {
                    sub_14DE4C((uint64_t **)v360, v157);
                  }
                }
              }
              if (*(void *)buf) {
                CFRelease(*(CFTypeRef *)buf);
              }
            }
            else
            {
              char v162 = (os_log_t *)sub_32A48(8);
              long long v163 = *v162;
              if (*v162 && os_log_type_enabled(*v162, OS_LOG_TYPE_ERROR))
              {
                buf[0] = 136315394;
                *(void *)&buf[1] = "RoutingManager.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 5424;
                _os_log_impl(&def_1E50E8, v163, OS_LOG_TYPE_ERROR, "%25s:%-5d Entry in multichannel mode preference array was not a CFDictionary!", (uint8_t *)buf, 0x12u);
              }
              if (!v153) {
                goto LABEL_288;
              }
            }
            CFRelease(v153);
LABEL_288:
            ++v152;
          }
          while (v149 != v152);
        }
      }
    }
    else
    {
      sub_14DE4C((uint64_t **)(v142 + 560), 0x76646566u);
    }
  }
LABEL_289:
  int v372 = sub_136D28(*(void *)(a2 + 112), v372, 0x76646566u);
  if (v394 && (uint64_t v165 = sub_298DA4(), ((*(uint64_t (**)(uint64_t))(*(void *)v165 + 264))(v165) & 1) == 0)) {
    sub_14CE94(*(void *)(a2 + 112), 14);
  }
  else {
    sub_14D0E0(*(void **)(a2 + 112), 14);
  }
  if (*(void *)(a2 + 280))
  {
    id v166 = *(id *)sub_32A48(2);
    uint64_t v167 = v166;
    if (v166)
    {
      std::string::size_type v168 = v166;
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&v413, **(_DWORD **)(a2 + 280));
        long long v169 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v413
             : (std::string *)v413.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3789;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v169;
        _os_log_impl(&def_1E50E8, v168, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Persisting Alternate VAD '%s' between route changes", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v413.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v170 = *(void *)(a2 + 280);
    if (*(_DWORD *)v170 == 1986884979) {
      int v171 = 19;
    }
    else {
      int v171 = 20;
    }
    sub_30264C(&v365, *(void *)(a2 + 128), **(_DWORD **)(v170 + 8));
    if (**(_DWORD **)(a2 + 280) == 1986095474)
    {
      id v172 = *(id *)sub_32A48(2);
      unint64_t v173 = v172;
      if (v172)
      {
        unint64_t v174 = v172;
        if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
        {
          sub_136B74(&v413, (uint64_t)&v365);
          int v175 = SHIBYTE(v413.__r_.__value_.__r.__words[2]);
          std::string::size_type v176 = v413.__r_.__value_.__r.__words[0];
          sub_2417C(&v425, 0x76646566u);
          std::string::size_type v177 = &v413;
          if (v175 < 0) {
            std::string::size_type v177 = (std::string *)v176;
          }
          if (v426 >= 0) {
            long long v178 = &v425;
          }
          else {
            long long v178 = (long long *)v425;
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3801;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v177;
          LOWORD(buf[7]) = 2080;
          *(void *)((char *)&buf[7] + 2) = v178;
          _os_log_impl(&def_1E50E8, v174, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallowing ports %s for VAD '%s'", (uint8_t *)buf, 0x26u);
          if (SHIBYTE(v426) < 0) {
            operator delete((void *)v425);
          }
          if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v413.__r_.__value_.__l.__data_);
          }
        }
      }
      long long v425 = *(_OWORD *)&v365.__r_.__value_.__l.__data_;
      if (v365.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v365.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
      }
      sub_3028E8((uint64_t)&v413, (unint64_t *)&v425, 1);
      std::string v179 = &v377;
      __int16 v180 = v377;
      if (!v377) {
        goto LABEL_330;
      }
      char v181 = &v377;
      do
      {
        uint64_t v182 = v180;
        std::string::size_type v183 = v181;
        unsigned int v184 = *((_DWORD *)v180 + 8);
        std::string::size_type v185 = (uint64_t **)(v180 + 1);
        if (v184 >= 0x76646566)
        {
          std::string::size_type v185 = (uint64_t **)v182;
          char v181 = (uint64_t **)v182;
        }
        __int16 v180 = *v185;
      }
      while (v180);
      if (v181 != &v377 && (v184 >= 0x76646566 ? (uint64_t v186 = v182) : (uint64_t v186 = v183), v186[8] <= 0x76646566u))
      {
        uint64_t v309 = (uint64_t *)(v183 + 5);
        uint64_t v310 = v182 + 5;
        if (v184 >= 0x76646566) {
          int v311 = v310;
        }
        else {
          int v311 = v309;
        }
        sub_13150C(v311, v413.__r_.__value_.__l.__data_, &v413.__r_.__value_.__l.__size_);
      }
      else
      {
LABEL_330:
        buf[0] = 1986291046;
        sub_131E5C((uint64_t *)&buf[2], (uint64_t)&v413);
        uint64_t v187 = v377;
        std::string v188 = &v377;
        if (v377)
        {
          while (1)
          {
            while (1)
            {
              std::string v188 = (uint64_t **)v187;
              unsigned int v189 = *((_DWORD *)v187 + 8);
              if (buf[0] >= v189) {
                break;
              }
              uint64_t v187 = *v188;
              std::string v179 = v188;
              if (!*v188) {
                goto LABEL_337;
              }
            }
            if (v189 >= buf[0]) {
              break;
            }
            uint64_t v187 = v188[1];
            if (!v187)
            {
              std::string v179 = v188 + 1;
              goto LABEL_337;
            }
          }
        }
        else
        {
LABEL_337:
          v190 = (uint64_t *)operator new(0x40uLL);
          v191 = v190;
          int v192 = buf[0];
          uint64_t v193 = *(void *)&buf[4];
          uint64_t v194 = *(void *)&buf[2];
          v190[6] = *(void *)&buf[4];
          std::string v195 = (char *)(v190 + 6);
          *((_DWORD *)v190 + 8) = v192;
          v190[5] = v194;
          uint64_t v196 = *(void *)&buf[6];
          v190[7] = *(void *)&buf[6];
          if (v196)
          {
            *(void *)(v193 + 16) = v195;
            *(void *)&AudioObjectPropertyAddress buf[2] = &buf[4];
            *(void *)&uint8_t buf[4] = 0;
            *(void *)&buf[6] = 0;
          }
          else
          {
            v190[5] = (uint64_t)v195;
          }
          uint64_t *v190 = 0;
          v190[1] = 0;
          v190[2] = (uint64_t)v188;
          *std::string v179 = v190;
          if (*v376)
          {
            CFTypeRef v376 = (void *)*v376;
            v191 = *v179;
          }
          sub_46D00(v377, v191);
          ++v378;
        }
        sub_10E118(*(void **)&buf[4]);
      }
      sub_10E118((void *)v413.__r_.__value_.__l.__size_);
      if (*((void *)&v425 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v425 + 1));
      }
    }
    sub_14D0E0(*(void **)(a2 + 112), v171);
    if (v365.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v365.__r_.__value_.__l.__size_);
    }
  }
  sub_2F6834(buf, a2);
  sub_2E9FD8((uint64_t)buf);
  __n128 v197 = v382;
  if (v382 != v383)
  {
    uint64_t v198 = v372;
    do
    {
      uint64_t v199 = *((void *)v197 + 4);
      if (v199)
      {
        uint64_t v200 = *((unsigned int *)v197 + 10);
        sub_43F38((uint64_t *)buf, (uint64_t *)(v199 + 88), "", 163);
        (*(void (**)(void, uint64_t, uint64_t, unsigned char *, uint64_t))(**(void **)buf + 216))(*(void *)buf, v198, v200, v197 + 44, 1);
        if (*(void *)&buf[2]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[2]);
        }
      }
      CFDataRef v201 = (void *)*((void *)v197 + 1);
      if (v201)
      {
        do
        {
          int v202 = v201;
          CFDataRef v201 = (void *)*v201;
        }
        while (v201);
      }
      else
      {
        do
        {
          int v202 = (unsigned char *)*((void *)v197 + 2);
          BOOL v116 = *(void *)v202 == (void)v197;
          __n128 v197 = v202;
        }
        while (!v116);
      }
      __n128 v197 = v202;
    }
    while (v202 != v383);
  }
  if (*(unsigned char *)(a2 + 168) && sub_209D00() && (sub_2F68BC(&v371) & 1) == 0)
  {
    id v203 = *(id *)sub_32A48(2);
    std::string v204 = v203;
    if (v203)
    {
      v205 = v203;
      if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
      {
        int v206 = *(unsigned __int8 *)(a2 + 168);
        sub_2417C(&v413, 0x6D706D75u);
        char v207 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v413
             : (std::string *)v413.__r_.__value_.__r.__words[0];
        buf[0] = 136315906;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3831;
        HIWORD(buf[4]) = 1024;
        buf[5] = v206;
        LOWORD(buf[6]) = 2080;
        *(void *)((char *)&buf[6] + 2) = v207;
        _os_log_impl(&def_1E50E8, v205, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PolicyMute: %d, Setting output mode to %s", (uint8_t *)buf, 0x22u);
        if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v413.__r_.__value_.__l.__data_);
        }
      }
    }
    if (!v374) {
      char v374 = 1;
    }
    int v373 = 1836084597;
  }
  int v208 = v384;
  if (v384 != v385)
  {
    do
    {
      sub_DD634(v208[4], 1);
      CFStringRef v209 = (void *)v208[1];
      if (v209)
      {
        do
        {
          int v210 = v209;
          CFStringRef v209 = (void *)*v209;
        }
        while (v209);
      }
      else
      {
        do
        {
          int v210 = (unsigned char *)v208[2];
          BOOL v116 = *(void *)v210 == (void)v208;
          int v208 = v210;
        }
        while (!v116);
      }
      int v208 = v210;
    }
    while (v210 != v385);
  }
  int v211 = v386;
  if (v386 != v387)
  {
    do
    {
      sub_DD634(v211[4], 0);
      unint64_t v212 = (void *)v211[1];
      if (v212)
      {
        do
        {
          float v213 = v212;
          unint64_t v212 = (void *)*v212;
        }
        while (v212);
      }
      else
      {
        do
        {
          float v213 = (unsigned char *)v211[2];
          BOOL v116 = *(void *)v213 == (void)v211;
          int v211 = v213;
        }
        while (!v116);
      }
      int v211 = v213;
    }
    while (v213 != v387);
  }
  sub_46A4C(v370, (uint64_t)&v389);
  sub_302964((uint64_t)v370, 0);
  sub_463E0((void *)v370[1]);
  sub_46A4C(v369, (uint64_t)&v388);
  sub_302964((uint64_t)v369, 1);
  sub_463E0((void *)v369[1]);
  v214 = *(unsigned char **)(a2 + 216);
  int v215 = v381;
  if (v393)
  {
    if (theDict)
    {
      if ((CFDictionaryGetCount(theDict) != 0) == (v215 != 0)) {
        goto LABEL_390;
      }
LABEL_409:
      uint64_t v220 = sub_32A48(13);
      int8x16_t v221 = sub_7D5E8(1, *(void **)v220, *(void *)(v220 + 8));
      int v222 = v221;
      if (v221 && os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 293;
        _os_log_impl(&def_1E50E8, v222, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }

      v223 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v223, "Precondition failure.");
    }
    if (v381) {
      goto LABEL_409;
    }
  }
LABEL_390:
  if (v371 > 1668703083)
  {
    if (v371 == 1668703084)
    {
LABEL_398:
      int v216 = v372;
      unsigned __int16 v217 = 25702;
      goto LABEL_399;
    }
    if (v371 != 1668703092) {
      goto LABEL_404;
    }
    int v216 = v372;
  }
  else
  {
    if (v371 != 1668309362)
    {
      if (v371 != 1668576377)
      {
LABEL_404:
        unsigned char *v214 = 0;
        LOBYTE(buf[0]) = 0;
        LOBYTE(buf[4]) = 0;
        sub_303B8C(v214 + 8, (uint64_t)buf);
        if (LOBYTE(buf[4])) {
          sub_80594((uint64_t)buf);
        }
        goto LABEL_424;
      }
      goto LABEL_398;
    }
    int v216 = v372;
    if (v372 > 1919776354)
    {
      if (v372 > 1987081832)
      {
        if (v372 == 1987081833) {
          goto LABEL_401;
        }
        unsigned __int16 v224 = 30319;
      }
      else
      {
        if (v372 == 1919776355) {
          goto LABEL_401;
        }
        unsigned __int16 v224 = 26467;
      }
      int v218 = v224 | 0x76700000;
      goto LABEL_400;
    }
    if (v372 <= 1768779618)
    {
      if (v372 == 1735222132) {
        goto LABEL_401;
      }
      int v218 = 1768057203;
      goto LABEL_400;
    }
    if (v372 == 1768779619) {
      goto LABEL_401;
    }
  }
  unsigned __int16 v217 = 30307;
LABEL_399:
  int v218 = v217 | 0x696D0000;
LABEL_400:
  if (v216 != v218) {
    goto LABEL_404;
  }
LABEL_401:
  unsigned char *v214 = v215;
  uint64_t v219 = (uint64_t)(v214 + 8);
  if (v214[24] == v393)
  {
    if (v214[24]) {
      sub_2EB458(v219, (uint64_t)&theDict);
    }
  }
  else if (v214[24])
  {
    sub_80594(v219);
    v214[24] = 0;
  }
  else
  {
    CFDictionaryRef v225 = theDict;
    *((void *)v214 + 1) = theDict;
    int v226 = v391;
    v214[16] = v391;
    v214[17] = v392;
    if (v226 && v225) {
      CFRetain(v225);
    }
    v214[24] = 1;
  }
LABEL_424:
  sub_2F3C30(a2);
  *(void *)&long long v425 = off_6228D0;
  *((void *)&v425 + 1) = 1;
  uint64_t v426 = 0;
  char v427 = 0;
  char v428 = 0;
  uint64_t v368 = 0;
  uint64_t v367 = 0;
  v366 = (uint64_t *)&v367;
  uint64_t v227 = v384;
  if (v384 != v385)
  {
    do
    {
      buf[0] = 1717793397;
      __int16 v228 = sub_303AB8(&v366, 0x66637275u, buf);
      uint64_t v229 = v227[4];
      uint64_t v230 = *(void *)(v229 + 88);
      uint64_t v231 = *(std::__shared_weak_count **)(v229 + 96);
      if (v231) {
        atomic_fetch_add_explicit(&v231->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_3590((uint64_t *)v228 + 5, v230, (uint64_t)v231);
      if (v231) {
        std::__shared_weak_count::__release_weak(v231);
      }
      v232 = (void *)v227[1];
      if (v232)
      {
        do
        {
          v233 = v232;
          v232 = (void *)*v232;
        }
        while (v232);
      }
      else
      {
        do
        {
          v233 = (unsigned char *)v227[2];
          BOOL v116 = *(void *)v233 == (void)v227;
          uint64_t v227 = v233;
        }
        while (!v116);
      }
      uint64_t v227 = v233;
    }
    while (v233 != v385);
  }
  v234 = v386;
  if (v386 != v387)
  {
    do
    {
      buf[0] = 1717793397;
      CFStringRef v235 = sub_303AB8(&v366, 0x66637275u, buf);
      uint64_t v236 = v234[4];
      uint64_t v237 = *(void *)(v236 + 88);
      v238 = *(std::__shared_weak_count **)(v236 + 96);
      if (v238) {
        atomic_fetch_add_explicit(&v238->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_3590((uint64_t *)v235 + 5, v237, (uint64_t)v238);
      if (v238) {
        std::__shared_weak_count::__release_weak(v238);
      }
      v239 = (void *)v234[1];
      if (v239)
      {
        do
        {
          float v240 = v239;
          v239 = (void *)*v239;
        }
        while (v239);
      }
      else
      {
        do
        {
          float v240 = (unsigned char *)v234[2];
          BOOL v116 = *(void *)v240 == (void)v234;
          v234 = v240;
        }
        while (!v116);
      }
      v234 = v240;
    }
    while (v240 != v387);
  }
  uint64_t v241 = *(void *)(a2 + 112);
  int v242 = v395;
  *(unsigned char *)(v241 + 452) = v396;
  *(_DWORD *)(v241 + 448) = v242;
  uint64_t v244 = *(void *)(a2 + 112);
  uint64_t v243 = *(void *)(a2 + 120);
  sub_3B7EC();
  v419 = &qword_64CC40;
  char v420 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    v344 = (os_log_t *)sub_32A48(13);
    unint64_t v345 = *v344;
    if (*v344 && os_log_type_enabled(*v344, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1958;
      _os_log_impl(&def_1E50E8, v345, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", (uint8_t *)buf, 0x12u);
    }
    v346 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v347 = (void (*)(void *))&std::runtime_error::~runtime_error;
    std::runtime_error::runtime_error(v346, "Unable to acquire routing mutex.");
    goto LABEL_637;
  }
  if (!v380)
  {
    if (v379)
    {
      if (v368)
      {
        *(void *)&uint8_t buf[4] = 0;
        *(void *)&AudioObjectPropertyAddress buf[2] = 0;
        *(void *)int buf = &buf[2];
        sub_13C058((uint64_t)&v365, v244, &v366, buf);
        sub_10E118(*(void **)&buf[2]);
        goto LABEL_487;
      }
      unsigned int v357 = (os_log_t *)sub_32A48(13);
      v358 = *v357;
      if (*v357 && os_log_type_enabled(*v357, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1969;
        _os_log_impl(&def_1E50E8, v358, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      v346 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v347 = (void (*)(void *))&std::logic_error::~logic_error;
      std::logic_error::logic_error((std::logic_error *)v346, "Precondition failure.");
LABEL_637:
      __cxa_throw(v346, v348, v347);
    }
    if (v368)
    {
      uint64_t v261 = sub_32A48(8);
      uint64_t v262 = sub_32A48(34);
      char v263 = 0;
      uint64_t v264 = 0;
      *(void *)int buf = 0x100000002;
      uint64_t v265 = *(void *)(v261 + 8);
      while (1)
      {
        uint64_t v266 = (int)buf[v264];
        char v267 = v263;
        if (((v265 & v266) != 0) != ((*(void *)(v262 + 8) & v266) != 0)) {
          break;
        }
        char v263 = 1;
        uint64_t v264 = 1;
        if (v267) {
          goto LABEL_550;
        }
      }
      if ((v265 & v266) == 0) {
        uint64_t v261 = v262;
      }
LABEL_550:
      v312 = *(NSObject **)v261;
      if (v312 && os_log_type_enabled(v312, OS_LOG_TYPE_INFO))
      {
        sub_10BFD0(&v413, &v366);
        v313 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v413
             : (std::string *)v413.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1982;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v313;
        _os_log_impl(&def_1E50E8, v312, OS_LOG_TYPE_INFO, "%25s:%-5d Port update with port map %s.", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v413.__r_.__value_.__l.__data_);
        }
      }
      *(void *)int buf = buf;
      *(void *)&AudioObjectPropertyAddress buf[2] = buf;
      *(void *)&uint8_t buf[4] = 0;
      std::string::size_type v314 = v367;
      if (v367)
      {
        v315 = &v367;
        do
        {
          long long v316 = v314;
          v317 = v315;
          unsigned int v318 = *((_DWORD *)v314 + 8);
          v319 = v314 + 1;
          if (v318 >= 0x66637275)
          {
            v319 = v316;
            v315 = (void **)v316;
          }
          std::string::size_type v314 = (void *)*v319;
        }
        while (v314);
        if (v315 != &v367)
        {
          long long v320 = v318 >= 0x66637275 ? v316 : v317;
          if (*((_DWORD *)v320 + 8) < 0x66637276u)
          {
            v321 = v317 + 5;
            v322 = v316 + 5;
            if (v318 >= 0x66637275) {
              v323 = v322;
            }
            else {
              v323 = v321;
            }
            sub_13AE8C((uint64_t *)&v413, (uint64_t *)v244, v323, (uint64_t *)buf);
            sub_8108((uint64_t *)&v413);
          }
        }
      }
      sub_8108((uint64_t *)buf);
    }
    int v324 = v371;
    int v325 = v372;
    int v326 = sub_14560C(v244);
    int v327 = sub_1457AC(v244);
    if (v326 > 1668313714)
    {
      int v329 = 1;
      if (v326 == 1668703084 || v326 == 1668576377) {
        goto LABEL_594;
      }
      unsigned __int16 v328 = 29299;
    }
    else
    {
      if (v326 == 1668301427 || v326 == 1668309362)
      {
LABEL_580:
        int v329 = 1;
        if (v327 > 1919776354)
        {
          if (v327 > 1987081832)
          {
            if (v327 == 1987081833) {
              goto LABEL_594;
            }
            unsigned __int16 v331 = 30319;
          }
          else
          {
            if (v327 == 1919776355) {
              goto LABEL_594;
            }
            unsigned __int16 v331 = 26467;
          }
          int v330 = v331 | 0x76700000;
        }
        else if (v327 > 1768779618)
        {
          if (v327 == 1768779619) {
            goto LABEL_594;
          }
          int v330 = 1768781411;
        }
        else
        {
          if (v327 == 1735222132) {
            goto LABEL_594;
          }
          int v330 = 1768057203;
        }
        if (v327 != v330) {
          goto LABEL_593;
        }
LABEL_594:
        if (v324 > 1668313714)
        {
          if (v324 == 1668703084 || v324 == 1668576377) {
            goto LABEL_615;
          }
          unsigned __int16 v332 = 29299;
        }
        else
        {
          if (v324 == 1668301427 || v324 == 1668309362)
          {
LABEL_602:
            if (v325 > 1919776354)
            {
              if (v325 > 1987081832)
              {
                if (v325 == 1987081833) {
                  goto LABEL_615;
                }
                unsigned __int16 v334 = 30319;
              }
              else
              {
                if (v325 == 1919776355) {
                  goto LABEL_615;
                }
                unsigned __int16 v334 = 26467;
              }
              int v333 = v334 | 0x76700000;
            }
            else if (v325 > 1768779618)
            {
              if (v325 == 1768779619) {
                goto LABEL_615;
              }
              int v333 = 1768781411;
            }
            else
            {
              if (v325 == 1735222132) {
                goto LABEL_615;
              }
              int v333 = 1768057203;
            }
            if (v325 == v333)
            {
LABEL_615:
              if ((v329 & 1) == 0)
              {
                v335 = (uint64_t (**)(void))(*(void *)sub_298DA4() + 104);
LABEL_619:
                int v336 = (*v335)();
                sub_14594C((uint64_t *)v244, v336);
                goto LABEL_620;
              }
              goto LABEL_620;
            }
LABEL_617:
            if (v329)
            {
              v335 = (uint64_t (**)(void))(*(void *)sub_298DA4() + 112);
              goto LABEL_619;
            }
LABEL_620:
            uint64_t v337 = v375;
            sub_7F2C0((uint64_t *)buf, (void *)v243);
            if (v337) {
              int v338 = 1919907442;
            }
            else {
              int v338 = 1919970403;
            }
            sub_13F234((uint64_t)&v365, v244, (uint64_t)&v371, (uint64_t *)buf, v338);
            *(void *)long long v435 = buf;
            sub_81CEC((void ***)v435);
            goto LABEL_487;
          }
          unsigned __int16 v332 = 29250;
        }
        if (v324 != (v332 | 0x63700000)) {
          goto LABEL_617;
        }
        goto LABEL_602;
      }
      unsigned __int16 v328 = 29250;
    }
    if (v326 != (v328 | 0x63700000))
    {
LABEL_593:
      int v329 = 0;
      goto LABEL_594;
    }
    goto LABEL_580;
  }
  sub_3B7EC();
  v423 = &qword_64CC40;
  char v424 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  if (sub_20AA78())
  {
    uint64_t v245 = sub_32A48(8);
    uint64_t v246 = sub_32A48(34);
    char v247 = 0;
    uint64_t v248 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v249 = *(void *)(v245 + 8);
    while (1)
    {
      uint64_t v250 = (int)buf[v248];
      char v251 = v247;
      if (((v249 & v250) != 0) != ((*(void *)(v246 + 8) & v250) != 0)) {
        break;
      }
      char v247 = 1;
      uint64_t v248 = 1;
      if (v251) {
        goto LABEL_459;
      }
    }
    if ((v249 & v250) == 0) {
      uint64_t v245 = v246;
    }
LABEL_459:
    v252 = *(NSObject **)v245;
    if (v252 && os_log_type_enabled(v252, OS_LOG_TYPE_INFO))
    {
      sub_147258(&v413, *(unsigned int **)v243, (unsigned int *)(v243 + 8));
      v253 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v413
           : (std::string *)v413.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4312;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v253;
      _os_log_impl(&def_1E50E8, v252, OS_LOG_TYPE_INFO, "%25s:%-5d Session update with map %s.", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v413.__r_.__value_.__l.__data_);
      }
    }
    sub_7F2C0(v422, (void *)v243);
    sub_143E38((uint64_t ***)&v413, (void *)(v244 + 72));
    sub_13A7AC((uint64_t)buf, v244, (_OWORD *)(v244 + 32), v244 + 48, (uint64_t)&v413, v244 + 120, *(_DWORD *)(v244 + 144), (void *)(v244 + 152), v244 + 176, (const void ***)(v244 + 216), *(unsigned char *)(v244 + 384), v422, 1918989155, (long long *)(v244 + 416), (void *)(v244 + 448));
    sub_141FB0((uint64_t)&v365, (void *)v244, (uint64_t)buf, 0);
    if (LODWORD(v365.__r_.__value_.__r.__words[1]))
    {
      uint64_t v254 = sub_32A48(8);
      uint64_t v255 = sub_32A48(34);
      char v256 = 0;
      uint64_t v257 = 0;
      *(void *)long long v435 = 0x100000002;
      uint64_t v258 = *(void *)(v254 + 8);
      while (1)
      {
        uint64_t v259 = *(int *)&v435[4 * v257];
        char v260 = v256;
        if (((v258 & v259) != 0) != ((*(void *)(v255 + 8) & v259) != 0)) {
          break;
        }
        char v256 = 1;
        uint64_t v257 = 1;
        if (v260) {
          goto LABEL_478;
        }
      }
      if ((v258 & v259) == 0) {
        uint64_t v254 = v255;
      }
LABEL_478:
      v268 = *(NSObject **)v254;
      if (v268 && os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
      {
        sub_147258(&v421, *(unsigned int **)v243, (unsigned int *)(v243 + 8));
        v269 = (v421.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v421
             : (std::string *)v421.__r_.__value_.__r.__words[0];
        *(_DWORD *)long long v435 = 136315906;
        *(void *)&v435[4] = "RoutingManager.cpp";
        __int16 v436 = 1024;
        int v437 = 4326;
        __int16 v438 = 2080;
        v439 = v269;
        __int16 v440 = 1024;
        int v441 = v365.__r_.__value_.__r.__words[1];
        _os_log_impl(&def_1E50E8, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d Audio session update with map '%s' failed with result %d.", v435, 0x22u);
        if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v421.__r_.__value_.__l.__data_);
        }
      }
    }
    sub_13A044((uint64_t)buf);
    sub_12B050(*(void **)v415);
    sub_10E118((void *)v413.__r_.__value_.__l.__size_);
    *(void *)int buf = v422;
    sub_81CEC((void ***)buf);
  }
  else
  {
    sub_12053C((uint64_t)&v365, 1920099684);
  }
  sub_10C78C(&v423);
LABEL_487:
  sub_10C78C(&v419);
  sub_120690((uint64_t)&v425, (uint64_t)&v365);
  sub_11A520(&v365);
  if (CFDictionaryContainsKey(*a3, @"reporter IDs"))
  {
    CFArrayRef v270 = (const __CFArray *)sub_7E430(*a3, "reporter IDs");
    if (v270)
    {
      CFArrayRef v271 = v270;
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v271))
      {
        int v273 = CFArrayGetCount(v271);
        memset(buf, 0, 24);
        sub_22784((void **)buf, v273);
        if (v273 >= 1)
        {
          CFIndex v274 = 0;
          uint64_t v275 = v273;
          unint64_t v276 = *(void *)&buf[4];
          v277 = *(const __CFNumber ***)&buf[2];
          v278 = *(const __CFNumber ***)buf;
          do
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v271, v274);
            CFNumberRef v280 = sub_7E53C(ValueAtIndex);
            if (!v281)
            {
              std::string::size_type v339 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v339, "Could not convert");
            }
            CFNumberRef v282 = v280;
            if ((unint64_t)v277 >= v276)
            {
              uint64_t v283 = v277 - v278;
              unint64_t v284 = v283 + 1;
              if ((unint64_t)(v283 + 1) >> 61) {
                sub_60548();
              }
              if ((uint64_t)(v276 - (void)v278) >> 2 > v284) {
                unint64_t v284 = (uint64_t)(v276 - (void)v278) >> 2;
              }
              if (v276 - (unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v285 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v285 = v284;
              }
              if (v285) {
                unint64_t v285 = (unint64_t)sub_106EC(v285);
              }
              else {
                uint64_t v286 = 0;
              }
              uint64_t v287 = (const __CFNumber **)(v285 + 8 * v283);
              *uint64_t v287 = v282;
              v288 = v287 + 1;
              while (v277 != v278)
              {
                CFNumberRef v289 = *--v277;
                *--uint64_t v287 = v289;
              }
              unint64_t v276 = v285 + 8 * v286;
              if (v278) {
                operator delete(v278);
              }
              v278 = v287;
              v277 = v288;
            }
            else
            {
              *v277++ = v280;
            }
            ++v274;
          }
          while (v274 != v275);
          *(void *)&uint8_t buf[4] = v276;
          *(void *)&AudioObjectPropertyAddress buf[2] = v277;
          *(void *)int buf = v278;
        }
        uint64_t v290 = *(void **)(a2 + 288);
        if (v290)
        {
          *(void *)(a2 + 296) = v290;
          operator delete(v290);
        }
        v291 = *(uint64_t **)buf;
        *(void *)(a2 + 288) = *(void *)buf;
        v292 = *(uint64_t **)&buf[2];
        *(_OWORD *)(a2 + 296) = *(_OWORD *)&buf[2];
        for (k = v292; v291 != k; ++v291)
        {
          uint64_t v294 = *v291;
          uint64_t v295 = *(id *)sub_32A48(2);
          v296 = v295;
          if (v295 && os_log_type_enabled(v295, OS_LOG_TYPE_INFO))
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 7747;
            HIWORD(buf[4]) = 2048;
            *(void *)&buf[5] = v294;
            _os_log_impl(&def_1E50E8, v296, OS_LOG_TYPE_INFO, "%25s:%-5d Client set reporter ID: %lld", (uint8_t *)buf, 0x1Cu);
          }
        }
        goto LABEL_519;
      }
      v355 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v355, "Could not convert");
    }
    else
    {
      v355 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v355, "Could not find item");
    }
  }
LABEL_519:
  *(_DWORD *)(a2 + 400) = v398;
  *(unsigned char *)(a2 + 404) = v399;
  uint64_t v297 = v400;
  uint64_t v298 = v401;
  if (v401) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v401 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v299 = *(std::__shared_weak_count **)(a2 + 416);
  *(void *)(a2 + 408) = v297;
  *(void *)(a2 + 416) = v298;
  if (v299) {
    std::__shared_weak_count::__release_weak(v299);
  }
  uint64_t v300 = v402;
  uint64_t v301 = v403;
  if (v403) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v403 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v302 = *(std::__shared_weak_count **)(a2 + 432);
  *(void *)(a2 + 424) = v300;
  *(void *)(a2 + 432) = v301;
  if (v302) {
    std::__shared_weak_count::__release_weak(v302);
  }
  id v303 = *(id *)sub_32A48(2);
  uint64_t v304 = v303;
  if (v303)
  {
    v305 = v303;
    if (os_log_type_enabled(v305, OS_LOG_TYPE_DEFAULT))
    {
      sub_2804B8(&v413, a2 + 400);
      v306 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v413
           : (std::string *)v413.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3862;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v306;
      _os_log_impl(&def_1E50E8, v305, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Saving expanse info in VAPlugin: %s:", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v413.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_302F8C((uint64_t)v364, (uint64_t)&v371);
  int v307 = v364[0];
  if (v364[0] == 1668509810) {
    int v307 = 1668309362;
  }
  v364[0] = v307;
  sub_30338C((uint64_t)buf, (uint64_t)v364);
  sub_30366C(a1, (uint64_t)&v425, (uint64_t)buf);
  sub_2E9FD8((uint64_t)buf);
  sub_2E9FD8((uint64_t)v364);
  sub_FB43C(v367);
  uint64_t v137 = &v425;
LABEL_538:
  sub_11A520(v137);
  sub_2E9FD8((uint64_t)&v371);
  return sub_16A560(&v411);
}

void sub_2E8710(_Unwind_Exception *a1)
{
}

void sub_2E8BE0(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    unint64_t v4 = *(id *)sub_32A48(13);
    uint64_t v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_DWORD buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3894;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread.\"", buf, 0x12u);
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)int buf = Mutable;
  *(_WORD *)&uint8_t buf[8] = 257;
  *(_DWORD *)a1 = 2003329396;
  *(void *)(a1 + 8) = Mutable;
  uint64_t v68 = a1 + 8;
  *(_WORD *)(a1 + 16) = 257;
  if (Mutable) {
    CFRetain(Mutable);
  }
  sub_80594((uint64_t)buf);
  if (*(_DWORD *)(a3 + 8))
  {
    sub_3B7EC();
    if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
    {
      uint64_t v7 = *(id *)sub_32A48(13);
      BOOL v8 = v7;
      if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4564;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread.\"", buf, 0x12u);
      }
    }
    uint64_t v10 = *(void *)(a2 + 144);
    for (uint64_t i = *(void *)(a2 + 152); v10 != i; v10 += 8)
    {
      __int16 v11 = *(_DWORD **)v10;
      value = *(void **)(*(void *)v10 + 576);
      uint64_t v12 = sub_1202D0(a2 + 176, value, HIDWORD(value));
      uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 528))(v11);
      id v14 = pthread_self();
      int v15 = pthread_equal(v14, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v13 + 16), memory_order_acquire));
      if (a2 + 184 == v12)
      {
        if (!v15)
        {
          uint64_t v23 = pthread_self();
          if (!pthread_equal(v23, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v13 + 104), memory_order_acquire)))continue; {
        }
          }
        id v24 = *(id *)sub_32A48(13);
        if (!v24) {
          goto LABEL_35;
        }
        uint64_t v18 = v24;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          sub_4D60(&__p, (unsigned int *)&value);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v26 = v11[2];
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4575;
          __int16 v81 = 2080;
          *(void *)uint64_t v82 = p_p;
          *(_WORD *)&v82[8] = 1024;
          *(_DWORD *)&v82[10] = v26;
          __int16 v83 = 2048;
          uint64_t v84 = v11;
          char v21 = v18;
          uint64_t v22 = "%25s:%-5d ASSERTION FAILURE: \"route is not changing on device %s, but the IO monitor for device ID %u ("
                "%p) is already held by this thread.\"";
LABEL_32:
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x2Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        if (v15) {
          continue;
        }
        uint64_t v16 = pthread_self();
        if (pthread_equal(v16, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v13 + 104), memory_order_acquire)))
        {
          continue;
        }
        id v17 = *(id *)sub_32A48(13);
        if (!v17)
        {
LABEL_35:
          uint64_t v18 = 0;
          goto LABEL_36;
        }
        uint64_t v18 = v17;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          sub_4D60(&__p, (unsigned int *)&value);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v19 = &__p;
          }
          else {
            uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v20 = v11[2];
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4572;
          __int16 v81 = 2080;
          *(void *)uint64_t v82 = v19;
          *(_WORD *)&v82[8] = 1024;
          *(_DWORD *)&v82[10] = v20;
          __int16 v83 = 2048;
          uint64_t v84 = v11;
          char v21 = v18;
          uint64_t v22 = "%25s:%-5d ASSERTION FAILURE: \"route is changing on device %s, but the IO monitor for device ID %u (%p) "
                "is not held by this thread.\"";
          goto LABEL_32;
        }
      }

LABEL_36:
    }
    sub_3B7EC();
    (*(void (**)(void))(qword_64CC40 + 24))();
    if (*(void *)(a2 + 192))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_6331D8;
      __p.__r_.__value_.__l.__size_ = a2;
      long long v79 = &__p;
      sub_528DC(buf, 1, (uint64_t)&__p);
      sub_4F750(&__p);
      CFMutableDictionaryRef theDict = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      uint64_t v27 = *(atomic_ullong ***)(a2 + 144);
      std::string::size_type v28 = *(atomic_ullong ***)(a2 + 152);
      if (v27 == v28)
      {
        uint64_t v42 = 0;
        CFMutableDictionaryRef v41 = 0;
      }
      else
      {
        do
        {
          unsigned int v29 = *v27;
          if (a2 + 184 != sub_1202D0(a2 + 176, *((_DWORD *)*v27 + 144), *((_DWORD *)*v27 + 145))) {
            sub_CBA7C(v29, (uint64_t *)&theDict);
          }
          ++v27;
        }
        while (v27 != v28);
        CFMutableDictionaryRef v41 = theDict;
        uint64_t v42 = v74;
      }
      sub_EE7F4((uint64_t)v41, v42);
      value = &theDict;
      sub_EE3E4((void ***)&value);
      sub_52588((uint64_t)buf);
    }
    sub_2F4708(a2, a3);
    int v43 = sub_2F5818(*(_DWORD *)(a3 + 8));
    CFMutableDictionaryRef v44 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *(void *)int buf = v44;
    *(_WORD *)&uint8_t buf[8] = 257;
    CFMutableDictionaryRef v71 = v44;
    __int16 v72 = 257;
    if (v44) {
      CFRetain(v44);
    }
    sub_80594((uint64_t)buf);
    *(_DWORD *)a1 = v43;
    sub_2EB458(v68, (uint64_t)&v71);
    sub_80594((uint64_t)&v71);
    id v45 = *(id *)sub_32A48(2);
    if (v45)
    {
      uint64_t v46 = v45;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        sub_16BBF0(&__p, *(_DWORD *)a1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v47 = &__p;
        }
        else {
          uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unsigned int v48 = *(_DWORD *)a1;
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3902;
        __int16 v81 = 2080;
        *(void *)uint64_t v82 = v47;
        *(_WORD *)&v82[8] = 1024;
        *(_DWORD *)&v82[10] = v48;
        uint64_t v49 = "%25s:%-5d Route change failed. Returning result: %s (%u).";
        uint64_t v50 = v46;
        uint32_t v51 = 34;
        goto LABEL_114;
      }
      goto LABEL_116;
    }
  }
  else
  {
    if (!sub_128688(*(_DWORD *)(a3 + 12))) {
      sub_2EB4BC((uint64_t)buf, a2, a3);
    }
    int v67 = *(_DWORD *)(a3 + 12);
    sub_3B7EC();
    if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
    {
      unint64_t v30 = *(id *)sub_32A48(13);
      uint64_t v31 = v30;
      if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4510;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread.\"", buf, 0x12u);
      }
    }
    uint64_t v32 = *(void **)(a2 + 144);
    exception_object = (uint64_t **)(a2 + 144);
    for (std::string::size_type j = *(void **)(a2 + 152); v32 != j; ++v32)
    {
      uint64_t v34 = *v32;
      uint64_t v35 = (*(uint64_t (**)(void))(*(void *)*v32 + 528))(*v32);
      unsigned int v36 = pthread_self();
      if (!pthread_equal(v36, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v35 + 16), memory_order_acquire)))
      {
        uint64_t v37 = pthread_self();
        if (!pthread_equal(v37, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v35 + 104), memory_order_acquire)))continue; {
      }
        }
      uint64_t v38 = *(id *)sub_32A48(13);
      unsigned int v39 = v38;
      if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        int v40 = *(_DWORD *)(v34 + 8);
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4514;
        __int16 v81 = 1024;
        *(_DWORD *)uint64_t v82 = v40;
        *(_WORD *)&v82[4] = 2048;
        *(void *)&v82[6] = v34;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The IO monitor for device ID %u (%p) is held by this thread.\"", buf, 0x22u);
      }
    }
    if (v67 == 1919186544)
    {
      sub_302080((uint64_t)&value, a2, *(void **)(a2 + 120));
    }
    else
    {
      value = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      __int16 v77 = 257;
    }
    if (*(void *)(a2 + 192))
    {
      std::string::size_type v52 = *(id *)sub_32A48(13);
      unint64_t v53 = v52;
      if (v52 && os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4520;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"route changes in progress!.\"", buf, 0x12u);
      }
    }
    sub_3B7EC();
    (*(void (**)(void))(qword_64CC40 + 24))();
    CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    LOWORD(v74) = 257;
    sub_1D4AF4((uint64_t)&theDict, @"route change reason", *(_DWORD *)(a3 + 12));
    int v54 = sub_14560C(*(void *)(a2 + 112));
    sub_1457AC(*(void *)(a2 + 112));
    if (v54 == 1668509810) {
      int v55 = 1668309362;
    }
    else {
      int v55 = v54;
    }
    sub_1D4AF4((uint64_t)&theDict, @"category", v55);
    int v56 = sub_1457AC(*(void *)(a2 + 112));
    sub_1D4AF4((uint64_t)&theDict, @"mode", v56);
    if (*(unsigned char *)(a3 + 784) && *(unsigned char *)(a3 + 592))
    {
      long long v57 = *(const void **)(a3 + 576);
      *(void *)int buf = v57;
      *(_WORD *)&uint8_t buf[8] = *(_WORD *)(a3 + 584);
      if (buf[8] && v57)
      {
        CFRetain(v57);
        long long v57 = *(const void **)buf;
      }
      if (v57
        && CFDictionaryGetCount((CFDictionaryRef)v57)
        && **(unsigned char **)(a2 + 216)
        && BYTE1(v74)
        && *(void *)buf
        && theDict)
      {
        CFDictionarySetValue(theDict, @"voice processing configuration", *(const void **)buf);
      }
      sub_80594((uint64_t)buf);
    }
    if (v67 == 1919186544)
    {
      uint64_t v58 = value;
      if (!value)
      {
        uint64_t v59 = *(id *)sub_32A48(13);
        char v60 = v59;
        if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_DWORD buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4544;
          _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid current devices\"", buf, 0x12u);
        }

        uint64_t v58 = value;
      }
      if (BYTE1(v74) && v58 && theDict) {
        CFDictionarySetValue(theDict, @"active devices", v58);
      }
    }
    if (*(unsigned char *)(a3 + 784))
    {
      sub_2F3D50((uint64_t)buf, exception_object, *(void *)(a3 + 600), *(void *)(a3 + 608));
      sub_463E0(*(void **)&buf[8]);
    }
    int v61 = sub_2F5818(*(_DWORD *)(a3 + 8));
    LODWORD(__p.__r_.__value_.__l.__data_) = v61;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)theDict;
    LOWORD(__p.__r_.__value_.__r.__words[2]) = v74;
    if ((_BYTE)v74 && theDict) {
      CFRetain(theDict);
    }
    sub_80594((uint64_t)&theDict);
    sub_3D61C((uint64_t)&value);
    *(_DWORD *)a1 = v61;
    sub_2EB458(v68, (uint64_t)&__p.__r_.__value_.__l.__size_);
    sub_80594((uint64_t)&__p.__r_.__value_.__l.__size_);
    id v62 = *(id *)sub_32A48(2);
    if (v62)
    {
      uint64_t v46 = v62;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        sub_16BBF0(&__p, *(_DWORD *)a1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v63 = &__p;
        }
        else {
          uint64_t v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3911;
        __int16 v81 = 2080;
        *(void *)uint64_t v82 = v63;
        uint64_t v49 = "%25s:%-5d Route did not change. Returning result: %s.";
        uint64_t v50 = v46;
        uint32_t v51 = 28;
LABEL_114:
        _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, v49, buf, v51);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
LABEL_116:

      goto LABEL_118;
    }
  }
  uint64_t v46 = 0;
LABEL_118:

  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))())
  {
    char v64 = *(id *)sub_32A48(13);
    uint64_t v65 = v64;
    if (v64)
    {
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_DWORD buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3920;
        _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is held by this thread.\"", buf, 0x12u);
      }
    }
  }
}

void sub_2E9C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a22;
  sub_EE3E4(&a25);
  sub_52588(v25 - 160);
  sub_80594(a16);
  _Unwind_Resume(v26);
}

unsigned char *sub_2E9DAC(uint64_t a1)
{
  sub_3B7EC();
  id v17 = &qword_64CC40;
  char v18 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  sub_2E376C(&v15, a1);
  uint64_t v2 = v15;
  for (uint64_t i = v16; v2 != i; v2 += 24)
  {
    uint64_t v4 = sub_32A48(2);
    uint64_t v5 = sub_32A48(13);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_8;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_8:
    __int16 v11 = *(id *)v4;
    uint64_t v12 = v11;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = v2;
      if (*(char *)(v2 + 23) < 0) {
        uint64_t v13 = *(void *)v2;
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v20 = 1024;
      int v21 = 7160;
      __int16 v22 = 2080;
      uint64_t v23 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }
  *(void *)int buf = &v15;
  sub_217F8((void ***)buf);
  return sub_3BCAC(&v17);
}

void sub_2E9FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2E9FD8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 728)) {
    sub_7DB7C(*(void **)(a1 + 712));
  }
  if (*(unsigned char *)(a1 + 696))
  {
    uint64_t v2 = *(void **)(a1 + 672);
    if (v2)
    {
      *(void *)(a1 + 680) = v2;
      operator delete(v2);
    }
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 664);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 648);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 624);
  if (v5) {
    CFRelease(v5);
  }
  if (*(unsigned char *)(a1 + 608)) {
    sub_80594(a1 + 592);
  }
  char v6 = *(void **)(a1 + 560);
  if (v6)
  {
    *(void *)(a1 + 568) = v6;
    operator delete(v6);
  }
  if (*(unsigned char *)(a1 + 552)) {
    sub_80594(a1 + 536);
  }
  sub_463E0(*(void **)(a1 + 520));
  sub_463E0(*(void **)(a1 + 496));
  sub_463E0(*(void **)(a1 + 472));
  sub_463E0(*(void **)(a1 + 448));
  sub_463E0(*(void **)(a1 + 424));

  return sub_143D84(a1);
}

uint64_t sub_2EA0B4()
{
  sub_3B7EC();
  uint64_t result = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40);
  if (result)
  {
    sub_3B7EC();
    return (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 24))(&qword_64CC40);
  }
  return result;
}

void *sub_2EA138(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 784)) {
    sub_2E9FD8(a1 + 40);
  }

  return sub_11A520((void *)a1);
}

unsigned char *sub_2EA17C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = sub_32A48(13);
    unint64_t v3 = sub_7D5E8(1, *(void **)v2, *(void *)(v2 + 8));
    uint64_t v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "VirtualAudio_PlugIn.mm";
      __int16 v8 = 1024;
      int v9 = 2112;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_2EA2B8(a1);
}

void sub_2EA29C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_2EA2B8(uint64_t a1)
{
  sub_3B7EC();
  uint64_t v19 = &qword_64CC40;
  char v20 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v2 = *(atomic_ullong ***)(a1 + 144);
  for (uint64_t i = *(atomic_ullong ***)(a1 + 152); v2 != i; ++v2)
  {
    unint64_t v3 = *v2;
    unint64_t v4 = (*v2)[66] - (*v2)[65];
    if ((v4 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (v4 >> 3) - 1;
      do
      {
        atomic_ullong v7 = v3[65];
        if (v5 >= (v3[66] - v7) >> 3) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = *(void *)(v7 + 8 * v5);
        }
        if (!*(void *)(v8 + 120))
        {
          __int16 v11 = (os_log_t *)sub_32A48(13);
          uint64_t v12 = *v11;
          if (*v11)
          {
            if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315394;
              id v24 = "VirtualAudio_Stream.cpp";
              __int16 v25 = 1024;
              int v26 = 397;
              _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"underlying stream is NULL\"", buf, 0x12u);
            }
          }
        }
        BOOL v9 = sub_31A248(*(uint64_t **)(v8 + 120));
        if (v9) {
          break;
        }
      }
      while (v6 != v5++);
      if (v9 && (_os_feature_enabled_impl() & 1) != 0) {
        continue;
      }
    }
    id v13 = *(id *)sub_32A48(2);
    id v14 = v13;
    if (v13)
    {
      uint64_t v15 = v13;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        atomic_ullong v21 = v3[72];
        sub_4D60(&__p, (unsigned int *)&v21);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315906;
        id v24 = "VirtualAudio_PlugIn.mm";
        __int16 v25 = 1024;
        int v26 = 2141;
        __int16 v27 = 2048;
        std::string::size_type v28 = v3;
        __int16 v29 = 2080;
        unint64_t v30 = p_p;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Changing stream format preference for VAD %p (%s)", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    sub_CBCD0(v3);
  }
  return sub_3BCAC(&v19);
}

void sub_2EA56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_2EA59C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = sub_32A48(13);
    unint64_t v3 = sub_7D5E8(1, *(void **)v2, *(void *)(v2 + 8));
    unint64_t v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      atomic_ullong v7 = "VirtualAudio_PlugIn.mm";
      __int16 v8 = 1024;
      int v9 = 2104;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_2EA2B8(a1);
}

void sub_2EA6BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_2EA6D8(uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3) {
      operator delete();
    }
    operator delete();
  }
  return result;
}

unsigned char *sub_2EA74C(uint64_t a1)
{
  sub_3B7EC();
  char v10 = &qword_64CC40;
  char v11 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  uint64_t v2 = sub_2EA964(1987276900, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_298DA4();
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 272))(v4);
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v3 + 1008) + 352))(*(void *)(v3 + 1008), 1685287015, 1752200291, 0))
    {
      int v6 = (os_log_t *)sub_32A48(2);
      __int16 v8 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315650;
        id v13 = "VirtualAudio_Utilities.cpp";
        __int16 v14 = 1024;
        int v15 = 728;
        __int16 v16 = 1024;
        BOOL v17 = v5 == 1;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d qqq SetHapticVibrationParameterOnDSP vibrating = %d", buf, 0x18u);
      }
      v7.n128_u64[0] = 0;
      if (v5 == 1) {
        v7.n128_f32[0] = 1.0;
      }
      (*(void (**)(void, uint64_t, uint64_t, void, __n128))(**(void **)(v3 + 1008) + 368))(*(void *)(v3 + 1008), 1685287015, 1752200291, 0, v7);
    }
  }
  return sub_3BCAC(&v10);
}

void sub_2EA950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_2EA964(int a1, int a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 != a4)
  {
    while (1)
    {
      uint64_t v4 = *a3;
      if (*a3)
      {
        if (*(_DWORD *)(v4 + 580) == a2 && *(_DWORD *)(v4 + 576) == a1) {
          break;
        }
      }
      if (++a3 == a4) {
        return 0;
      }
    }
  }
  if (a3 == a4) {
    return 0;
  }
  else {
    return *a3;
  }
}

unsigned char *sub_2EA9B0(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = sub_32A48(13);
    uint64_t v3 = sub_7D5E8(1, *(void **)v2, *(void *)(v2 + 8));
    uint64_t v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      __n128 v7 = "VirtualAudio_PlugIn.mm";
      __int16 v8 = 1024;
      int v9 = 2245;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_2EA74C(a1);
}

void sub_2EAAD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2EAAEC(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184))(v2);
  uint64_t v4 = *(id *)sub_32A48(2);
  int v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = "active";
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_DWORD *)int buf = 136315650;
    if (v3 == 2) {
      int v6 = "not active";
    }
    __int16 v22 = 1024;
    int v23 = 2190;
    __int16 v24 = 2080;
    double v25 = *(double *)&v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d External power adapter state is now: %s", buf, 0x1Cu);
  }

  sub_3B7EC();
  BOOL v17 = &qword_64CC40;
  char v18 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  float v7 = 0.0;
  if (v3 == 1)
  {
    if (byte_64BCA8 == 1)
    {
      if (byte_64BCA9)
      {
        float v7 = *(float *)&dword_648998;
LABEL_14:
        int v9 = *(id *)sub_32A48(2);
        char v10 = v9;
        if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          __int16 v22 = 1024;
          int v23 = 2212;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using defaults haptic override", buf, 0x12u);
        }

        goto LABEL_19;
      }
    }
    else
    {
      byte_64BCA8 = 1;
      *(void *)int buf = 0;
      unsigned int v8 = sub_1617A8(@"HapticsExternalPowerAttenuation", (void **)buf);
      if (v8) {
        float v7 = *(double *)buf;
      }
      else {
        float v7 = *(float *)&dword_648998;
      }
      dword_648998 = LODWORD(v7);
      byte_64BCA9 = v8;
      if (v8) {
        goto LABEL_14;
      }
    }
    float v7 = -7.96;
  }
LABEL_19:
  uint64_t v11 = sub_2EA964(1987738234, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (v11)
  {
    uint64_t v12 = v11;
    if (*(void *)(sub_BC8B0(v11, 1) + 16))
    {
      if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v12 + 1008) + 352))(*(void *)(v12 + 1008), 1987013737, 1601402742, 0))
      {
        id v13 = *(id *)sub_32A48(2);
        __int16 v14 = v13;
        if (v13)
        {
          int v15 = v13;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v19 = *(void *)(v12 + 576);
            sub_4D60(&__p, (unsigned int *)&v19);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            __int16 v22 = 1024;
            int v23 = 2228;
            __int16 v24 = 2048;
            double v25 = v7;
            __int16 v26 = 2080;
            __int16 v27 = p_p;
            _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying ExternalPowerAdapter HapticGain (%f) on VAD: '%s'.", buf, 0x26u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        *(_DWORD *)int buf = v3 == 1;
        (*(void (**)(void, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(**(void **)(v12 + 1008)
                                                                                            + 400))(*(void *)(v12 + 1008), 1987013737, 64003, buf, 4, 1, 0);
        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(v12 + 1008) + 368))(*(void *)(v12 + 1008), 1987013737, 1601402742, 0, v7);
      }
    }
  }
  sub_3BCAC(&v17);
  sub_2512AC();
}

void sub_2EAF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

void sub_2EAF78(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v1 = sub_32A48(13);
    uint64_t v2 = sub_7D5E8(1, *(void **)v1, *(void *)(v1 + 8));
    int v3 = v2;
    if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "VirtualAudio_PlugIn.mm";
      __int16 v7 = 1024;
      int v8 = 2120;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_2EAAEC(a1);
}

void sub_2EB098(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2EB0B4()
{
  if ((unint64_t)off_658950 >= 2) {
    off_658950();
  }
  uint64_t result = dword_658958;
  if (dword_658958)
  {
    int inData = 1;
    *(void *)&inAddress.int mSelector = 0x676C6F6273687570;
    inAddress.AudioObjectPropertyElement mElement = 0;
    uint64_t result = AudioObjectSetPropertyData(dword_658958, &inAddress, 0, 0, 4u, &inData);
    int v1 = result;
    if (result)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v1;
    }
  }
  return result;
}

void sub_2EB1AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_2EB1C4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (a2)
  {
    if (a2 == 3)
    {
      BOOL v17 = __cxa_begin_catch(a1);
      id v18 = *(id *)sub_32A48(13);
      uint64_t v19 = v18;
      if (v18)
      {
        char v20 = v18;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          int v21 = v17[2];
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 429;
          WORD1(a12) = 1024;
          DWORD1(a12) = v21;
          WORD4(a12) = 2080;
          *(void *)((char *)&a12 + 10) = "";
          a14 = 1024;
          a15 = 958;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).", (uint8_t *)&buf, 0x28u);
        }
      }
    }
    else
    {
      __int16 v22 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        int v23 = v22;
        id v24 = *(id *)sub_32A48(13);
        uint64_t v19 = v24;
        if (v24)
        {
          double v25 = v24;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
            LODWORD(buf) = 136316162;
            *(void *)((char *)&buf + 4) = "StandardUtilities.h";
            WORD6(buf) = 1024;
            *(_DWORD *)((char *)&buf + 14) = 430;
            WORD1(a12) = 2080;
            *(void *)((char *)&a12 + 4) = v26;
            WORD6(a12) = 2080;
            *(void *)((char *)&a12 + 14) = "";
            HIWORD(a15) = 1024;
            a16 = 958;
            _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).", (uint8_t *)&buf, 0x2Cu);
          }
        }
      }
      else
      {
        id v27 = *(id *)sub_32A48(13);
        uint64_t v19 = v27;
        if (v27)
        {
          std::string::size_type v28 = v27;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 136315906;
            *(void *)((char *)&buf + 4) = "StandardUtilities.h";
            WORD6(buf) = 1024;
            *(_DWORD *)((char *)&buf + 14) = 431;
            WORD1(a12) = 2080;
            *(void *)((char *)&a12 + 4) = "";
            WORD6(a12) = 1024;
            *(_DWORD *)((char *)&a12 + 14) = 958;
            _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).", (uint8_t *)&buf, 0x22u);
          }
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2EB134);
  }
  JUMPOUT(0x2EB1B4);
}

void sub_2EB428()
{
}

void sub_2EB434()
{
}

void sub_2EB440()
{
}

void sub_2EB450()
{
}

uint64_t sub_2EB458(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
  }
  int v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v5);
  }
  return a1;
}

void sub_2EB4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    id v3 = *(id *)sub_32A48(13);
    uint64_t v4 = v3;
    if (v3)
    {
      int v5 = v3;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4034;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread.\"", buf, 0x12u);
      }
    }
  }
  uint64_t v6 = *(void *)(a3 + 16);
  sub_13A694(v6);
  *(_OWORD *)int buf = *(_OWORD *)v6;
  BOOL v7 = sub_126228((uint64_t *)&buf[16], v6 + 16);
  LOBYTE(v45) = *(unsigned char *)(v6 + 40);
  if (*(_DWORD *)(a3 + 12) == 1918989155 || *(void *)(a2 + 192))
  {
LABEL_13:
    sub_11A588(v7);
  }
  else
  {
    for (uint64_t i = v44; (uint64_t *)i != v7; uint64_t i = *(void *)(i + 8))
    {
      if (*(_DWORD *)(i + 128) == 3) {
        goto LABEL_13;
      }
    }
    sub_11A588(v7);
    id v9 = *(id *)sub_32A48(13);
    char v10 = v9;
    if (v9)
    {
      uint64_t v11 = v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4036;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"No route changes in progress.\"", buf, 0x12u);
      }
    }
  }
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v23 = sub_32A48(13);
    id v24 = sub_7D5E8(1, *(void **)v23, *(void *)(v23 + 8));
    double v25 = v24;
    if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4037;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  signed int v12 = *(_DWORD *)(a3 + 12);
  if (!v12)
  {
    uint64_t v27 = sub_32A48(13);
    std::string::size_type v28 = sub_7D5E8(1, *(void **)v27, *(void *)(v27 + 8));
    __int16 v29 = v28;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4038;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    unint64_t v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "Precondition failure.");
  }
  if (sub_128688(v12))
  {
    uint64_t v31 = sub_32A48(13);
    uint64_t v32 = sub_7D5E8(1, *(void **)v31, *(void *)(v31 + 8));
    uint64_t v33 = v32;
    if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4039;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "Precondition failure.");
  }
  if (!*(void *)(sub_13A694(*(void *)(a3 + 16)) + 32))
  {
    uint64_t v35 = sub_32A48(13);
    unsigned int v36 = sub_7D5E8(1, *(void **)v35, *(void *)(v35 + 8));
    uint64_t v37 = v36;
    if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4040;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v38, "Precondition failure.");
  }
  uint64_t v13 = sub_13A694(*(void *)(a3 + 16));
  sub_126228(&v41, v13 + 16);
  uint64_t v14 = (uint64_t)v42;
  if (v42 != &v41)
  {
    while (*(int *)(v14 + 128) > 0)
    {
      uint64_t v14 = *(void *)(v14 + 8);
      if ((uint64_t *)v14 == &v41) {
        goto LABEL_42;
      }
    }
    int v15 = &v41;
    do
    {
      int v15 = (uint64_t *)*v15;
      if ((uint64_t *)v14 == v15) {
        goto LABEL_42;
      }
    }
    while (*((int *)v15 + 32) < 1);
    unint64_t v16 = -1;
    BOOL v17 = (uint64_t *)v14;
    do
    {
      BOOL v17 = (uint64_t *)v17[1];
      ++v16;
    }
    while (v17 != v15);
    uint64_t v18 = v16 + 2;
    if (v16 < 2)
    {
LABEL_38:
      __int16 v22 = 0;
      unint64_t v19 = 0;
    }
    else
    {
      if (v18 >= 0xE38E38E38E38E3) {
        unint64_t v19 = 0xE38E38E38E38E3;
      }
      else {
        unint64_t v19 = v16 + 2;
      }
      while (1)
      {
        char v20 = operator new(144 * v19, &std::nothrow);
        if (v20) {
          break;
        }
        BOOL v21 = v19 > 1;
        v19 >>= 1;
        if (!v21) {
          goto LABEL_38;
        }
      }
      __int16 v22 = v20;
    }
    sub_2F0C48(v14, (uint64_t)v15, v18, (unint64_t)v22, v19);
    if (v22) {
      operator delete(v22);
    }
  }
LABEL_42:
  operator new();
}

void sub_2EFAA0()
{
}

void sub_2F07F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {

    sub_80594((uint64_t)&a55);
    if (__p) {
      operator delete(__p);
    }
    sub_7F264((void *)STACK[0x250]);
    sub_3D61C((uint64_t)&a64);
    sub_463E0(*(void **)(v65 - 184));
    if (a2 == 3)
    {
      int v67 = __cxa_begin_catch(a1);
      id v68 = *(id *)sub_32A48(2);
      uint64_t v69 = v68;
      if (v68)
      {
        uint64_t v70 = v68;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          sub_2417C((void *)(v65 - 192), v67[2]);
          if (*(char *)(v65 - 169) >= 0) {
            unint64_t v71 = v65 - 192;
          }
          else {
            unint64_t v71 = *(void *)(v65 - 192);
          }
          LODWORD(STACK[0x270]) = 136315650;
          STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
          LOWORD(STACK[0x27C]) = 1024;
          LODWORD(STACK[0x27E]) = 4391;
          LOWORD(STACK[0x282]) = 2080;
          STACK[0x284] = v71;
          _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown during device creation, reconfiguration, and preparation for destruction: '%s'.", (uint8_t *)&STACK[0x270], 0x1Cu);
          if (*(char *)(v65 - 169) < 0) {
            operator delete(*(void **)(v65 - 192));
          }
        }
      }
    }
    else
    {
      __int16 v72 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        unsigned int v73 = v72;
        id v74 = *(id *)sub_32A48(2);
        uint64_t v69 = v74;
        if (v74)
        {
          uint64_t v75 = v74;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            uint64_t v76 = (*(uint64_t (**)(void *))(*(void *)v73 + 16))(v73);
            LODWORD(STACK[0x270]) = 136315650;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4396;
            LOWORD(STACK[0x282]) = 2080;
            STACK[0x284] = v76;
            _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception thrown during device creation, reconfiguration, and preparation for destruction: %s.", (uint8_t *)&STACK[0x270], 0x1Cu);
          }
        }
      }
      else
      {
        id v77 = *(id *)sub_32A48(2);
        uint64_t v69 = v77;
        if (v77)
        {
          uint64_t v78 = v77;
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            LODWORD(STACK[0x270]) = 136315394;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4401;
            _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown during device creation, reconfiguration, and preparation for destruction.", (uint8_t *)&STACK[0x270], 0x12u);
          }
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2EE3D0);
  }
  _Unwind_Resume(v79);
}

void sub_2F0814(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x2F0820);
  }
  _Unwind_Resume(v2);
}

void sub_2F0828(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x2F0834);
  }
  _Unwind_Resume(v2);
}

void sub_2F083C(uint64_t a1, int a2)
{
  if (a2)
  {

    JUMPOUT(0x2F096CLL);
  }
  _Unwind_Resume(v3);
}

void sub_2F0858(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    sub_80594((uint64_t)&a55);
    if (a52) {
      operator delete(a52);
    }
    sub_7F264((void *)STACK[0x250]);
    sub_3D61C((uint64_t)&a64);
    sub_463E0(*(void **)(v64 - 184));
    if (a2 == 3)
    {
      int v67 = __cxa_begin_catch(a1);
      id v68 = *(id *)sub_32A48(2);
      uint64_t v69 = v68;
      if (v68)
      {
        uint64_t v70 = v68;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          sub_2417C((void *)(v64 - 192), v67[2]);
          if (*(char *)(v64 - 169) >= 0) {
            unint64_t v71 = v64 - 192;
          }
          else {
            unint64_t v71 = *(void *)(v64 - 192);
          }
          LODWORD(STACK[0x270]) = 136315650;
          STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
          LOWORD(STACK[0x27C]) = 1024;
          LODWORD(STACK[0x27E]) = 4391;
          LOWORD(STACK[0x282]) = 2080;
          STACK[0x284] = v71;
          _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown during device creation, reconfiguration, and preparation for destruction: '%s'.", (uint8_t *)&STACK[0x270], 0x1Cu);
          if (*(char *)(v64 - 169) < 0) {
            operator delete(*(void **)(v64 - 192));
          }
        }
      }
    }
    else
    {
      __int16 v72 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        unsigned int v73 = v72;
        id v74 = *(id *)sub_32A48(2);
        uint64_t v69 = v74;
        if (v74)
        {
          uint64_t v75 = v74;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            uint64_t v76 = (*(uint64_t (**)(void *))(*(void *)v73 + 16))(v73);
            LODWORD(STACK[0x270]) = 136315650;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4396;
            LOWORD(STACK[0x282]) = 2080;
            STACK[0x284] = v76;
            _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception thrown during device creation, reconfiguration, and preparation for destruction: %s.", (uint8_t *)&STACK[0x270], 0x1Cu);
          }
        }
      }
      else
      {
        id v77 = *(id *)sub_32A48(2);
        uint64_t v69 = v77;
        if (v77)
        {
          uint64_t v78 = v77;
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            LODWORD(STACK[0x270]) = 136315394;
            STACK[0x274] = (unint64_t)"VirtualAudio_PlugIn.mm";
            LOWORD(STACK[0x27C]) = 1024;
            LODWORD(STACK[0x27E]) = 4401;
            _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown during device creation, reconfiguration, and preparation for destruction.", (uint8_t *)&STACK[0x270], 0x12u);
          }
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x2EE3D0);
  }
  _Unwind_Resume(v79);
}

void sub_2F0BDC()
{
  __cxa_end_catch();
  JUMPOUT(0x2F01C8);
}

uint64_t sub_2F0C48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1;
  if (a3 == 3)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    if (*(int *)(v9 + 128) < 1)
    {
      sub_301CC0((long long *)(v9 + 16), (long long *)(a2 + 16));
      uint64_t v11 = (uint64_t *)(v9 + 136);
      sub_301E50((long long *)(v9 + 136), (uint64_t *)(a2 + 136));
      sub_301CC0((long long *)(v6 + 16), (long long *)(v9 + 16));
      int v8 = (long long *)(v6 + 136);
      goto LABEL_7;
    }
    sub_301CC0((long long *)(a1 + 16), (long long *)(v9 + 16));
    char v10 = (long long *)(v6 + 136);
    int v8 = (long long *)(v9 + 136);
    sub_301E50(v10, (uint64_t *)(v9 + 136));
    sub_301CC0((long long *)(v9 + 16), (long long *)(a2 + 16));
LABEL_6:
    uint64_t v11 = (uint64_t *)(a2 + 136);
    uint64_t v9 = a2;
LABEL_7:
    sub_301E50(v8, v11);
    return v9;
  }
  if (a3 == 2)
  {
    sub_301CC0((long long *)(a1 + 16), (long long *)(a2 + 16));
    int v8 = (long long *)(v6 + 136);
    goto LABEL_6;
  }
  if (a5 >= a3)
  {
    sub_301EC4(a4, (long long *)(a1 + 16));
    unint64_t v18 = a4 + 144;
    uint64_t v19 = *(void *)(v6 + 8);
    if (v19 == a2)
    {
      sub_301F70(v6 + 16, (long long *)(a2 + 16));
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v20 = 1;
    }
    else
    {
      uint64_t v20 = 1;
      do
      {
        BOOL v21 = (long long *)(v19 + 16);
        if (*(int *)(v19 + 128) < 1)
        {
          sub_301EC4(v18, v21);
          ++v20;
          v18 += 144;
        }
        else
        {
          sub_301F70(v6 + 16, v21);
          uint64_t v6 = *(void *)(v6 + 8);
        }
        uint64_t v19 = *(void *)(v19 + 8);
      }
      while (v19 != a2);
      sub_301F70(v6 + 16, (long long *)(a2 + 16));
      uint64_t v9 = *(void *)(v6 + 8);
      if (v18 <= a4)
      {
LABEL_42:
        if (a4 && v20)
        {
          unint64_t v30 = (uint64_t *)(a4 + 120);
          do
          {
            sub_8108(v30);
            uint64_t v31 = (void *)*(v30 - 4);
            if (v31)
            {
              *(v30 - 3) = (uint64_t)v31;
              operator delete(v31);
            }
            sub_463E0((void *)*(v30 - 6));
            v30 += 18;
            --v20;
          }
          while (v20);
        }
        return v9;
      }
    }
    std::string::size_type v28 = (long long *)a4;
    uint64_t v29 = v9;
    do
    {
      sub_301F70(v29 + 16, v28);
      v28 += 9;
      uint64_t v29 = *(void *)(v29 + 8);
    }
    while ((unint64_t)v28 < v18);
    goto LABEL_42;
  }
  if (a3 >= 0) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = a3 + 1;
  }
  uint64_t v15 = v14 >> 1;
  if (a3 <= -2)
  {
    uint64_t v22 = v14 >> 1;
    uint64_t v16 = a1;
    do
      uint64_t v16 = *(void *)v16;
    while (!__CFADD__(v22++, 1));
  }
  else
  {
    uint64_t v16 = a1;
    if ((unint64_t)(a3 + 1) >= 3)
    {
      unint64_t v17 = v15 + 1;
      uint64_t v16 = a1;
      do
      {
        uint64_t v16 = *(void *)(v16 + 8);
        --v17;
      }
      while (v17 > 1);
    }
  }
  id v24 = *(int **)v16;
  uint64_t v25 = v15;
  if (*(int *)(*(void *)v16 + 128) > 0)
  {
LABEL_33:
    uint64_t v6 = sub_2F0C48(a1);
  }
  else
  {
    while (v24 != (int *)a1)
    {
      --v25;
      id v24 = *(int **)v24;
      if (v24[32] >= 1) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v26 = a3 - v15;
  if (*(int *)(v16 + 128) < 1)
  {
    uint64_t v27 = v16;
LABEL_50:
    uint64_t v9 = sub_2F0C48(v27);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v27 = v16;
    while (1)
    {
      uint64_t v27 = *(void *)(v27 + 8);
      if (v27 == a2) {
        break;
      }
      --v26;
      if (*(int *)(v27 + 128) <= 0) {
        goto LABEL_50;
      }
    }
  }
  if (v6 != v16)
  {
    if (v16 != v9)
    {
      uint64_t v32 = v16;
      while (1)
      {
        sub_301CC0((long long *)(v6 + 16), (long long *)(v32 + 16));
        sub_301E50((long long *)(v6 + 136), (uint64_t *)(v32 + 136));
        uint64_t v6 = *(void *)(v6 + 8);
        uint64_t v32 = *(void *)(v32 + 8);
        if (v32 == v9) {
          break;
        }
        if (v6 == v16) {
          uint64_t v16 = v32;
        }
      }
      if (v6 == v16) {
        return v16;
      }
      uint64_t v33 = v6;
      uint64_t v34 = v16;
      do
      {
        while (1)
        {
          sub_301CC0((long long *)(v33 + 16), (long long *)(v34 + 16));
          sub_301E50((long long *)(v33 + 136), (uint64_t *)(v34 + 136));
          uint64_t v33 = *(void *)(v33 + 8);
          uint64_t v34 = *(void *)(v34 + 8);
          if (v34 == v9) {
            break;
          }
          if (v33 == v16) {
            uint64_t v16 = v34;
          }
        }
        uint64_t v34 = v16;
      }
      while (v33 != v16);
    }
    return v6;
  }
  return v9;
}

void *sub_2F0FC4(void *result, int a2, char **a3)
{
  int v5 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    while (1)
    {
      uint64_t v6 = *(void *)v5;
      if (*(void *)v5)
      {
        if (*(_DWORD *)(v6 + 580) == a2 && *(_DWORD *)(v6 + 576) == result) {
          break;
        }
      }
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = a3[1];
        break;
      }
    }
  }
  int64_t v8 = v4 - (v5 + 8);
  if (v4 != v5 + 8) {
    uint64_t result = memmove(v5, v5 + 8, v4 - (v5 + 8));
  }
  a3[1] = &v5[v8];
  return result;
}

void sub_2F1044(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_3B7EC();
  (*(void (**)(void))(qword_64CC40 + 16))();
  if (*a3)
  {
    int v4 = AudioObjectCreate();
    if (!v4) {
      operator new();
    }
    uint64_t v9 = sub_32A48(13);
    char v10 = sub_7D5E8(1, *(void **)v9, *(void *)(v9 + 8));
    uint64_t v11 = v10;
    if (v10)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        uint64_t v14 = "VirtualAudio_PlugIn.mm";
        __int16 v15 = 1024;
        int v16 = 1905;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"AudioObjectCreate failed to create a device ID for a new virtual audio device.\"", buf, 0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v4;
  }
  uint64_t v5 = sub_32A48(13);
  uint64_t v6 = sub_7D5E8(1, *(void **)v5, *(void *)(v5 + 8));
  BOOL v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v14 = "VirtualAudio_PlugIn.mm";
    __int16 v15 = 1024;
    int v16 = 1900;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
  }

  int64_t v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v8, "Precondition failure.");
}

void sub_2F3084(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 + 39) < 0) {
    operator delete(*v50);
  }
  if (v48 < 0) {
    operator delete(v49);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  operator delete();
}

void sub_2F34CC(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x2F34C4);
}

uint64_t sub_2F34DC(uint64_t a1, uint64_t a2)
{
  sub_3B7EC();
  id v68 = &qword_64CC40;
  char v69 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v60 = a1;
  sub_2F6834(buf, a1);
  std::string::size_type size = buf[0].__r_.__value_.__l.__size_;
  std::string::size_type v4 = buf[0].__r_.__value_.__r.__words[0];
  sub_2E9FD8((uint64_t)buf);
  *(_OWORD *)uint64_t v70 = __PAIR128__(size, v4);
  uint64_t v6 = v60;
  if (!sub_2F68BC(v70))
  {
    if (!*(void *)(v60 + 112)) {
      goto LABEL_71;
    }
    uint64_t v10 = *(void *)(v60 + 144);
    uint64_t v9 = *(void *)(v60 + 152);
    if (v10 == v9) {
      goto LABEL_71;
    }
    uint64_t v59 = *(void *)(v60 + 152);
    while (1)
    {
      v67[0] = 0;
      v67[1] = 0;
      uint64_t v66 = v67;
      int v11 = sub_14739C(*(void **)(v6 + 112), *(_DWORD *)(*(void *)(*(void *)v10 + 1008) + 276), (uint64_t *)&v66);
      if (v11) {
        break;
      }
      signed int v12 = v67[0];
      if (!v67[0]) {
        goto LABEL_26;
      }
      uint64_t v13 = v67;
      do
      {
        uint64_t v14 = v12;
        __int16 v15 = v13;
        int v16 = *((_DWORD *)v12 + 7);
        if (v16 >= 1667854445) {
          uint64_t v13 = (void **)v12;
        }
        else {
          ++v12;
        }
        signed int v12 = (void *)*v12;
      }
      while (v12);
      if (v13 == v67 || (v16 >= 1667854445 ? (unint64_t v17 = (int *)v14) : (unint64_t v17 = (int *)v15), v17[7] >= 1667854446))
      {
LABEL_26:
        unsigned int v18 = 0;
      }
      else
      {
        if (v16 < 1667854445) {
          uint64_t v14 = v15;
        }
        if (*((unsigned char *)v14 + 32)) {
          unsigned int v18 = a2;
        }
        else {
          unsigned int v18 = 0;
        }
      }
      uint64_t v19 = **(void **)(v6 + 112);
      uint64_t v22 = *(void *)(v19 + 160);
      uint64_t v20 = v19 + 160;
      uint64_t v21 = v22;
      if (!v22) {
        goto LABEL_40;
      }
      unsigned int v23 = *(_DWORD *)(*(void *)v10 + 576);
      uint64_t v24 = v20;
      do
      {
        unsigned int v25 = *(_DWORD *)(v21 + 32);
        BOOL v26 = v25 >= v23;
        if (v25 >= v23) {
          uint64_t v27 = (uint64_t *)v21;
        }
        else {
          uint64_t v27 = (uint64_t *)(v21 + 8);
        }
        if (v26) {
          uint64_t v24 = v21;
        }
        uint64_t v21 = *v27;
      }
      while (*v27);
      if (v24 == v20)
      {
LABEL_40:
        uint64_t v31 = &dword_4E8150;
      }
      else
      {
        unsigned int v28 = *(_DWORD *)(v24 + 32);
        uint64_t v29 = (int *)(v24 + 40);
        BOOL v30 = v28 > v23;
        uint64_t v31 = &dword_4E8150;
        if (!v30) {
          uint64_t v31 = v29;
        }
      }
      int v32 = *v31;
      uint64_t v34 = (unsigned char *)*((void *)v31 + 1);
      uint64_t v33 = (unsigned char *)*((void *)v31 + 2);
      size_t v35 = v33 - v34;
      if (v33 == v34)
      {
        unsigned int v36 = 0;
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0) {
          sub_60548();
        }
        unsigned int v36 = operator new(v33 - v34);
        memmove(v36, v34, v35);
      }
      if (v32 == 2) {
        unsigned int v37 = v18;
      }
      else {
        unsigned int v37 = 0;
      }
      if (v32) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = v18;
      }
      id v39 = *(id *)sub_32A48(2);
      int v40 = v39;
      if (v39)
      {
        uint64_t v41 = v39;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v64 = *(void *)(*(void *)v10 + 576);
          sub_4D60(&v65, (unsigned int *)&v64);
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v42 = &v65;
          }
          else {
            uint64_t v42 = (std::string *)v65.__r_.__value_.__r.__words[0];
          }
          sub_2F6834(buf, v6);
          long long v43 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
          sub_2E9FD8((uint64_t)buf);
          long long v62 = v43;
          sub_383858(&__p, (uint64_t)&v62);
          int v44 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v45 = __p.__r_.__value_.__r.__words[0];
          v61[0] = *(void *)(*(void *)(*(void *)v10 + 1008) + 276);
          v61[1] = 0;
          sub_383858(buf, (uint64_t)v61);
          p_p = &__p;
          if (v44 < 0) {
            p_p = (std::string *)v45;
          }
          uint64_t v47 = buf;
          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v47 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v70 = 136316418;
          *(void *)&v70[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v70[12] = 1024;
          *(_DWORD *)&v70[14] = 2413;
          __int16 v71 = 1024;
          int v72 = v38;
          __int16 v73 = 2080;
          id v74 = v42;
          __int16 v75 = 2080;
          uint64_t v76 = p_p;
          __int16 v77 = 2080;
          uint64_t v78 = v47;
          _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applying PolicyMute %d to VAD %s, category mode: current: %s, vad: %s", v70, 0x36u);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf[0].__r_.__value_.__l.__data_);
          }
          uint64_t v9 = v59;
          uint64_t v6 = v60;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(*(void *)v10 + 1008) + 216))(*(void *)(*(void *)v10 + 1008), v38);
      if (v36) {
        operator delete(v36);
      }
      sub_463E0(v67[0]);
      v10 += 8;
      if (v10 == v9)
      {
        a2 = a2;
        goto LABEL_71;
      }
    }
    if (v11 == 2)
    {
      uint64_t v53 = sub_32A48(13);
      int v52 = 1852793716;
      int v54 = sub_7D5E8(1, *(void **)v53, *(void *)(v53 + 8));
      uint32_t v51 = v54;
      if (!v54 || !os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        goto LABEL_84;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2397;
      int v55 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Routing category info lookup failed.\")";
    }
    else
    {
      if (v11 == 1)
      {
        uint64_t v49 = sub_32A48(13);
        uint64_t v50 = sub_7D5E8(1, *(void **)v49, *(void *)(v49 + 8));
        uint32_t v51 = v50;
        int v52 = 1852797556;
        if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2397;
          _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Routing category info lookup failed.\")", (uint8_t *)buf, 0x12u);
          int v52 = 1852797556;
        }
LABEL_84:

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = v52;
      }
      uint64_t v56 = sub_32A48(13);
      int v52 = 2003329396;
      long long v57 = sub_7D5E8(1, *(void **)v56, *(void *)(v56 + 8));
      uint32_t v51 = v57;
      if (!v57 || !os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        goto LABEL_84;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2397;
      int v55 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Routing category info lookup failed.\")";
    }
    _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, v55, (uint8_t *)buf, 0x12u);
    goto LABEL_84;
  }
  BOOL v7 = *(id *)sub_32A48(2);
  int64_t v8 = v7;
  if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_PlugIn.mm";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2386;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = a2;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring PolicyMute for J/K VP routes (incoming mute value = %d)", (uint8_t *)buf, 0x18u);
  }

  a2 = *(unsigned char *)(v60 + 168) != 0;
LABEL_71:
  sub_3BCAC(&v68);
  return a2;
}

void sub_2F3B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_2F3C30(uint64_t result)
{
  int v8 = **(unsigned __int8 **)(result + 216);
  uint64_t v6 = 0x676C6F626476706ELL;
  int v7 = 0;
  int v1 = *(uint64_t **)(result + 144);
  for (uint64_t i = *(uint64_t **)(result + 152); v1 != i; ++v1)
  {
    uint64_t v3 = *v1;
    if (*v1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 40))(*v1, &v6);
      if (result)
      {
        strcpy(v9, "npvdbolg");
        v9[9] = 0;
        __int16 v10 = 0;
        uint64_t result = sub_3A70E8(v3, (uint64_t)v9, 0, 0, 4, (uint64_t)&v8);
        if (result)
        {
          int v4 = result;
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_6414D8;
          exception[2] = v4;
        }
      }
    }
  }
  return result;
}

void sub_2F3D50(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    char v8 = 0;
    while (1)
    {
      uint64_t v9 = (uint64_t *)(v5 + 4);
      if ((v8 & 1) != 0 && *(_DWORD *)(v5 + 4) != 1651861092) {
        goto LABEL_5;
      }
      uint64_t v10 = sub_32A48(2);
      if (*(unsigned char *)(v10 + 8))
      {
        id v11 = *(id *)v10;
        if (v11)
        {
          signed int v12 = v11;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(v34, *(_DWORD *)v5);
            int v13 = SHIBYTE(v35);
            uint64_t v14 = (void **)v34[0];
            uint64_t v36 = *v9;
            int v37 = *(_DWORD *)(v5 + 12);
            sub_16C9C4((uint64_t)__p, (unsigned int *)&v36);
            __int16 v15 = v34;
            if (v13 < 0) {
              __int16 v15 = v14;
            }
            int v16 = __p;
            if (v39 < 0) {
              int v16 = (void **)__p[0];
            }
            *(_DWORD *)int buf = 136315906;
            uint64_t v41 = "VirtualAudio_PlugIn.mm";
            __int16 v42 = 1024;
            int v43 = 4972;
            __int16 v44 = 2080;
            std::string::size_type v45 = v15;
            __int16 v46 = 2080;
            uint64_t v47 = v16;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Processing device hint for device type %s and property %s.", buf, 0x26u);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v35) < 0) {
              operator delete(v34[0]);
            }
          }
        }
      }
      uint64_t v17 = sub_2EA964(*(_DWORD *)v5, 0, *a2, a2[1]);
      if (!v17) {
        break;
      }
      uint64_t v18 = v17;
      if (*(_DWORD *)v9 == 1853059700)
      {
        if (*(_DWORD *)(v5 + 32) != 8)
        {
          uint64_t v30 = sub_32A48(13);
          uint64_t v31 = sub_7D5E8(1, *(void **)v30, *(void *)(v30 + 8));
          int v32 = v31;
          if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            uint64_t v41 = "VirtualAudio_PlugIn.mm";
            __int16 v42 = 1024;
            int v43 = 4990;
            _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }
        sub_B93BC((BOOL *)v34, v17, **(double **)(v5 + 40));
        int v19 = LOBYTE(v34[0]);
        sub_463E0(v35);
        if (v19)
        {
          v34[0] = *(void **)(v18 + 576);
          sub_125D8C((uint64_t **)a1, v34[0], HIDWORD(v34[0]), (uint64_t *)v34);
        }
      }
      OSStatus v20 = AudioObjectSetPropertyData(*(_DWORD *)(v18 + 8), (const AudioObjectPropertyAddress *)(v5 + 4), *(_DWORD *)(v5 + 16), *(const void **)(v5 + 24), *(_DWORD *)(v5 + 32), *(const void **)(v5 + 40));
      if (!v20) {
        goto LABEL_6;
      }
      uint64_t v21 = sub_32A48(2);
      if (*(unsigned char *)(v21 + 8))
      {
        id v22 = *(id *)v21;
        if (v22)
        {
          unsigned int v23 = v22;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v36 = *v9;
            int v37 = *(_DWORD *)(v5 + 12);
            sub_16C9C4((uint64_t)v34, (unsigned int *)&v36);
            int v24 = SHIBYTE(v35);
            unsigned int v25 = (void **)v34[0];
            sub_2417C(__p, v20);
            BOOL v26 = v34;
            if (v24 < 0) {
              BOOL v26 = v25;
            }
            uint64_t v27 = __p;
            if (v39 < 0) {
              uint64_t v27 = (void **)__p[0];
            }
            *(_DWORD *)int buf = 136315906;
            uint64_t v41 = "VirtualAudio_PlugIn.mm";
            __int16 v42 = 1024;
            int v43 = 5004;
            __int16 v44 = 2080;
            std::string::size_type v45 = v26;
            __int16 v46 = 2080;
            uint64_t v47 = v27;
            _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to apply device hint for property %s with status %s.", buf, 0x26u);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v35) < 0) {
              operator delete(v34[0]);
            }
          }

LABEL_42:
        }
      }
LABEL_5:
      char v8 = 1;
LABEL_6:
      v5 += 48;
      if (v5 == a4) {
        return;
      }
    }
    uint64_t v28 = sub_32A48(2);
    if ((*(unsigned char *)(v28 + 8) & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v29 = *(id *)v28;
    if (!v29) {
      goto LABEL_5;
    }
    unsigned int v23 = v29;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v41 = "VirtualAudio_PlugIn.mm";
      __int16 v42 = 1024;
      int v43 = 4982;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client specified a device hint for a device type that does not exist in the new route.", buf, 0x12u);
    }
    goto LABEL_42;
  }
}

void sub_2F44F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2F4540(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    int v7 = *(uint64_t **)(a2 + 8);
    uint64_t v5 = (uint64_t *)(a2 + 8);
    uint64_t v6 = v7;
    if (!v7) {
      goto LABEL_22;
    }
    char v8 = v5;
    uint64_t v9 = v6;
    do
    {
      unsigned int v10 = *((_DWORD *)v9 + 8);
      BOOL v11 = v10 >= a3;
      if (v10 >= a3) {
        signed int v12 = (uint64_t **)v9;
      }
      else {
        signed int v12 = (uint64_t **)(v9 + 1);
      }
      if (v11) {
        char v8 = v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if (v8 == v5 || *((_DWORD *)v8 + 8) > a3) {
      goto LABEL_22;
    }
    while (1)
    {
      while (1)
      {
        unsigned int v13 = *((_DWORD *)v6 + 8);
        if (v13 <= a3) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        if (!v6) {
          goto LABEL_18;
        }
      }
      if (v13 >= a3) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6) {
LABEL_18:
      }
        sub_8251C("map::at:  key not found");
    }
    if (v6 + 5 == a1 || (sub_6720C((char *)a1, (char *)v6[5], v6[6], (v6[6] - v6[5]) >> 2), *a1 == a1[1]))
    {
LABEL_22:
      __int16 v15 = *(id *)sub_32A48(2);
      int v16 = v15;
      if (v15)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315650;
          uint64_t v18 = "VirtualAudio_PlugIn.mm";
          __int16 v19 = 1024;
          int v20 = 536;
          __int16 v21 = 1024;
          unsigned int v22 = a3;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d No sessions IDs found for context ID %u", (uint8_t *)&v17, 0x18u);
        }
      }
    }
  }
  else
  {
    uint64_t v14 = operator new(4uLL);
    *uint64_t v14 = 0;
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)(v14 + 1);
    a1[2] = (uint64_t)(v14 + 1);
  }
}

void sub_2F46E0(_Unwind_Exception *exception_object)
{
}

void *sub_2F4708(uint64_t a1, uint64_t a2)
{
  sub_13A5C8((uint64_t)&v78, a2);
  int v3 = v79;
  sub_2417C(v76, v80);
  double v4 = v82;
  if (!v83) {
    double v4 = 0.0;
  }
  std::to_string(&v75, v4);
  if (v3) {
    uint64_t v5 = "Failed";
  }
  else {
    uint64_t v5 = "Succeeded";
  }
  if (v3) {
    CFIndex v6 = 6;
  }
  else {
    CFIndex v6 = 9;
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_21C8C(v69, "Result");
  CFRetain(cf);
  *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = *(_OWORD *)v69;
  std::string::size_type v7 = v70;
  v69[0] = 0;
  v69[1] = 0;
  std::string::size_type v70 = 0;
  CFTypeRef v71 = 0;
  valuePtr.__r_.__value_.__r.__words[2] = v7;
  CFTypeRef v88 = cf;
  if ((v77 & 0x80u) == 0) {
    char v8 = v76;
  }
  else {
    char v8 = (void **)v76[0];
  }
  if (v8)
  {
    if ((v77 & 0x80u) == 0) {
      CFIndex v9 = v77;
    }
    else {
      CFIndex v9 = (CFIndex)v76[1];
    }
    CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v9, 0x8000100u, 0);
    CFTypeRef v64 = v10;
    if (!v10)
    {
      BOOL v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
    }
  }
  else
  {
    CFStringRef v10 = 0;
    CFTypeRef v64 = 0;
  }
  sub_21C8C(v65, "route change reason");
  if (v10) {
    CFRetain(v10);
  }
  long long v89 = *(_OWORD *)v65;
  uint64_t v90 = v66;
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v66 = 0;
  CFTypeRef v67 = 0;
  CFStringRef v91 = v10;
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    signed int v12 = &v75;
  }
  else {
    signed int v12 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    CFTypeRef v60 = CFStringCreateWithBytes(0, (const UInt8 *)v12, size, 0x8000100u, 0);
    if (!v60)
    {
      uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
    }
  }
  else
  {
    CFTypeRef v60 = 0;
  }
  sub_24C154(__p, "route_change_time_ms", &v60);
  __int16 v15 = 0;
  uint64_t v16 = 0;
  long long v92 = *(_OWORD *)__p;
  CFTypeRef v17 = v63;
  uint64_t v93 = v62;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v62 = 0;
  CFTypeRef v63 = 0;
  CFTypeRef v94 = v17;
  __int16 v73 = 0;
  unint64_t v74 = 0;
  int v72 = &v73;
  while (1)
  {
    uint64_t v18 = (char *)&valuePtr + 32 * v16;
    __int16 v19 = &v73;
    if (v72 != &v73)
    {
      int v20 = v15;
      __int16 v21 = &v73;
      if (v15)
      {
        do
        {
          __int16 v19 = (uint64_t **)v20;
          int v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        do
        {
          __int16 v19 = (uint64_t **)v21[2];
          BOOL v22 = *v19 == (uint64_t *)v21;
          __int16 v21 = v19;
        }
        while (v22);
      }
      if ((sub_15E8C(v19 + 4, (void **)&valuePtr.__r_.__value_.__l.__data_ + 4 * v16) & 0x80) == 0)
      {
        unsigned int v23 = (uint64_t **)sub_15DF8((uint64_t)&v72, &v86, (void **)&valuePtr.__r_.__value_.__l.__data_ + 4 * v16);
        goto LABEL_42;
      }
    }
    if (v15)
    {
      unint64_t v86 = v19;
      unsigned int v23 = v19 + 1;
LABEL_42:
      if (*v23) {
        goto LABEL_53;
      }
      goto LABEL_45;
    }
    unint64_t v86 = &v73;
    unsigned int v23 = &v73;
LABEL_45:
    int v24 = (uint64_t *)operator new(0x40uLL);
    v84[0] = v24;
    v84[1] = &v73;
    char v85 = 0;
    unsigned int v25 = v24 + 4;
    if (v18[23] < 0)
    {
      sub_21E8C(v25, *(void **)v18, *((void *)v18 + 1));
    }
    else
    {
      *(_OWORD *)unsigned int v25 = *(_OWORD *)v18;
      v24[6] = *((void *)v18 + 2);
    }
    BOOL v26 = (char *)&valuePtr + 32 * v16;
    uint64_t v27 = *((void *)v26 + 3);
    if (v27) {
      CFRetain(*((CFTypeRef *)v26 + 3));
    }
    v24[7] = v27;
    char v85 = 1;
    uint64_t v28 = v86;
    uint64_t *v24 = 0;
    v24[1] = 0;
    unint64_t v24[2] = (uint64_t)v28;
    NSObject *v23 = v24;
    if (*v72)
    {
      int v72 = (uint64_t **)*v72;
      int v24 = *v23;
    }
    sub_46D00(v73, v24);
    ++v74;
    v84[0] = 0;
    sub_24C4E8((uint64_t)v84);
LABEL_53:
    if (++v16 == 3) {
      break;
    }
    __int16 v15 = v73;
  }
  for (uint64_t i = 0; i != -96; i -= 32)
  {
    uint64_t v30 = (void **)((char *)&valuePtr.__r_.__value_.__l.__data_ + i);
    uint64_t v31 = *(CFTypeRef *)((char *)&v94 + i);
    if (v31) {
      CFRelease(v31);
    }
    if (*((char *)v30 + 87) < 0) {
      operator delete(v30[8]);
    }
  }
  if (v63) {
    CFRelease(v63);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(__p[0]);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[0]);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!v3 && v81)
  {
    int v32 = (unsigned int *)sub_13A694(v81);
    unsigned int v33 = v32[1];
    if (*v32 == 1668509810) {
      unsigned int v34 = 1668309362;
    }
    else {
      unsigned int v34 = *v32;
    }
    sub_2417C(&valuePtr, v34);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string valuePtr = &valuePtr;
    }
    else {
      p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (p_valuePtr)
    {
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v37 = CFStringCreateWithBytes(0, (const UInt8 *)p_valuePtr, v36, 0x8000100u, 0);
      v65[0] = (void *)v37;
      if (!v37)
      {
        int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
      }
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_93:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    else
    {
      CFStringRef v37 = 0;
      v65[0] = 0;
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_93;
      }
    }
    sub_21C8C(&valuePtr, "category");
    if (v37) {
      CFRetain(v37);
    }
    CFTypeRef v88 = v37;
    sub_24BF88((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (long long *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    sub_2417C(&valuePtr, v33);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v38 = &valuePtr;
    }
    else {
      uint64_t v38 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (v38)
    {
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v39 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v40 = CFStringCreateWithBytes(0, (const UInt8 *)v38, v39, 0x8000100u, 0);
      __p[0] = (void *)v40;
      if (!v40)
      {
        uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
      }
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_109:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    else
    {
      CFStringRef v40 = 0;
      __p[0] = 0;
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_109;
      }
    }
    sub_21C8C(&valuePtr, "mode");
    if (v40) {
      CFRetain(v40);
    }
    CFTypeRef v88 = v40;
    sub_24BF88((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (long long *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    sub_382D98(&valuePtr, (uint64_t *)(a1 + 376), v33);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v41 = &valuePtr;
    }
    else {
      uint64_t v41 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (v41)
    {
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v43 = CFStringCreateWithBytes(0, (const UInt8 *)v41, v42, 0x8000100u, 0);
      v84[0] = v43;
      if (!v43)
      {
        long long v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
      }
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_125:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    else
    {
      CFStringRef v43 = 0;
      v84[0] = 0;
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_125;
      }
    }
    sub_21C8C(&valuePtr, "active devices");
    if (v43) {
      CFRetain(v43);
    }
    CFTypeRef v88 = v43;
    sub_24BF88((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (long long *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    sub_7F024((uint64_t)v69, *(void **)(a1 + 120));
    sub_2F6078(&valuePtr, (unsigned int **)(a1 + 376), (uint64_t)v69);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v44 = &valuePtr;
    }
    else {
      __int16 v44 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if (v44)
    {
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = valuePtr.__r_.__value_.__l.__size_;
      }
      CFStringRef v46 = CFStringCreateWithBytes(0, (const UInt8 *)v44, v45, 0x8000100u, 0);
      unint64_t v86 = (uint64_t **)v46;
      if (!v46)
      {
        uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "Could not construct");
      }
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_141:
      }
        operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    else
    {
      CFStringRef v46 = 0;
      unint64_t v86 = 0;
      if ((*((unsigned char *)&valuePtr.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_141;
      }
    }
    sub_7F264((void *)v69[1]);
    sub_21C8C(&valuePtr, "active on demand devices");
    if (v46) {
      CFRetain(v46);
    }
    CFTypeRef v88 = v46;
    sub_24BF88((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (long long *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(sub_13A694(v81) + 40);
    CFNumberRef v47 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v69[0] = v47;
    if (!v47)
    {
      int v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v54, "Could not construct");
    }
    sub_21C8C(&valuePtr, "expanse session");
    CFRetain(v47);
    CFTypeRef v88 = v47;
    sub_24BF88((uint64_t **)&v72, (void **)&valuePtr.__r_.__value_.__l.__data_, (long long *)&valuePtr);
    if (v88) {
      CFRelease(v88);
    }
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    CFRelease(v47);
    if (v46) {
      CFRelease(v46);
    }
    if (v43) {
      CFRelease(v43);
    }
    if (v40) {
      CFRelease(v40);
    }
    if (v37) {
      CFRelease(v37);
    }
  }
  memset(&valuePtr, 0, sizeof(valuePtr));
  sub_162D4(&valuePtr, v74);
  int v48 = (uint64_t *)v72;
  if (v72 != &v73)
  {
    do
    {
      sub_24C238(&valuePtr, (const UInt8 *)v48 + 32, (const void **)v48 + 7);
      uint64_t v49 = (uint64_t *)v48[1];
      if (v49)
      {
        do
        {
          uint64_t v50 = (uint64_t **)v49;
          uint64_t v49 = (uint64_t *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          uint64_t v50 = (uint64_t **)v48[2];
          BOOL v22 = *v50 == v48;
          int v48 = (uint64_t *)v50;
        }
        while (!v22);
      }
      int v48 = (uint64_t *)v50;
    }
    while (v50 != &v73);
  }
  CFDictionaryRef v51 = sub_4D69C((void ***)&valuePtr);
  v69[0] = &valuePtr;
  sub_14F84((void ***)v69);
  CFDictionaryRef v59 = v51;
  sub_F3FF0((uint64_t *)&v59, *(uint64_t **)(a1 + 288), *(uint64_t **)(a1 + 296), 10, 0);
  if (v51) {
    CFRelease(v51);
  }
  sub_24C358(v73);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if ((char)v77 < 0) {
    operator delete(v76[0]);
  }
  return sub_11A520(&v78);
}

void sub_2F51E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, const void *a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42)
{
  if (*(char *)(v42 - 169) < 0) {
    operator delete(*(void **)(v42 - 192));
  }
  sub_7F264(a24);
  sub_6393C((const void **)(v42 - 224));
  sub_6393C(&a12);
  sub_6393C(&a18);
  sub_24C358(a28);
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  sub_11A520(&a42);
  _Unwind_Resume(a1);
}

BOOL sub_2F5584@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_32A48(2);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(id *)v4;
    if (v5)
    {
      CFIndex v6 = v5;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        int v13 = 136315650;
        uint64_t v14 = "VirtualAudio_PlugIn.mm";
        __int16 v15 = 1024;
        int v16 = 410;
        __int16 v17 = 2048;
        uint64_t v18 = v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destroying objects for VirtualAudio_DestroyedObjectTracker %p.", (uint8_t *)&v13, 0x1Cu);
      }
    }
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    if (dword_658948++)
    {
      CFIndex v9 = *(id *)sub_32A48(2);
      CFStringRef v10 = v9;
      if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "VirtualAudio_PlugIn.mm";
        __int16 v15 = 1024;
        int v16 = 414;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Destruction is executing while the routing mutex is not held. While this indicates a logic error (this should not be possible), it should have no direct implications.", (uint8_t *)&v13, 0x12u);
      }
    }
  }
  sub_3B7EC();
  if ((*(unsigned int (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40)) {
    operator new();
  }
  BOOL v11 = *(uint64_t **)(a1 + 16);
  if (v11)
  {
    sub_EF01C(v11);
    operator delete();
  }
  return sub_12053C(a2, 1920099684);
}

void sub_2F57EC()
{
}

uint64_t sub_2F5818(unsigned int a1)
{
  if (a1 >= 3)
  {
    uint64_t v3 = sub_32A48(13);
    uint64_t v4 = sub_7D5E8(1, *(void **)v3, *(void *)(v3 + 8));
    uint64_t v5 = v4;
    if (v4)
    {
      CFIndex v6 = v4;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, a1);
        if (v10 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315650;
        signed int v12 = "VirtualAudio_PlugIn.mm";
        __int16 v13 = 1024;
        int v14 = 517;
        __int16 v15 = 2080;
        int v16 = v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Unsupported result returned from RoutingManager: %s\"", buf, 0x1Cu);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  return dword_573148[a1];
}

void sub_2F599C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2F59B8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  snprintf(__str, 0x13uLL, "%p", *(const void **)(a1 + 16));
  sub_21C8C(&v6, __str);
  uint64_t v3 = std::string::insert(&v6, 0, "Destroying objects for VirtualAudio_DestroyedObjectTracker ", 0x3BuLL);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v7, ".", 1uLL);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_2F5AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F5AEC()
{
}

void sub_2F5B04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  if (*(void **)v1 != v3)
  {
    do
    {
      long long v4 = (atomic_ullong *)(*(uint64_t (**)(void))(*(void *)*v2 + 528))(*v2);
      sub_B3DBC(v4);
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_2F5E24(_Unwind_Exception *a1)
{
}

void sub_2F5E2C(_Unwind_Exception *a1)
{
}

void sub_2F5E38(_Unwind_Exception *a1)
{
}

void sub_2F5E44(_Unwind_Exception *a1)
{
}

void sub_2F5E50(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x2F5E58);
  }
  sub_564E4(a1);
}

uint64_t sub_2F5E70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_633190;
  a2[1] = v2;
  return result;
}

void *sub_2F5E94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_633190;
  result[1] = v3;
  return result;
}

void sub_2F5EDC()
{
}

uint64_t sub_2F5EF4()
{
  sub_3B7EC();
  uint64_t v0 = *(uint64_t (**)(void))(qword_64CC40 + 24);

  return v0();
}

void sub_2F5F4C(uint64_t a1, void *a2)
{
  *a2 = off_633148;
}

void *sub_2F5F6C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_633148;
  return result;
}

void sub_2F5FA4()
{
}

void sub_2F5FBC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)v1[23];
  v1 += 23;
  sub_463E0(v2);
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

uint64_t sub_2F5FF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_633100;
  a2[1] = v2;
  return result;
}

void *sub_2F6018(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_633100;
  result[1] = v3;
  return result;
}

void sub_2F6060()
{
}

std::string *sub_2F6078(std::string *a1, unsigned int **a2, uint64_t a3)
{
  sub_21C8C(a1, "[ ");
  std::string v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    std::string v7 = ", ";
    char v8 = 1;
    uint64_t v30 = a2[1];
    do
    {
      if (*v6 == 1987011684)
      {
        if ((v8 & 1) == 0) {
          std::string::append(a1, v7, 2uLL);
        }
        sub_2F4540((uint64_t *)&v38, a3, v6[1]);
        CFIndex v9 = v38;
        unsigned int v34 = v39;
        if (v38 != v39)
        {
          int v32 = v6;
          unsigned int v33 = v6 + 2;
          do
          {
            std::string::append(a1, "{ ", 2uLL);
            sub_2417C(&v36, *v6);
            char v10 = std::string::append(&v36, "_", 1uLL);
            long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            v37.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v11;
            v10->__r_.__value_.__l.__size_ = 0;
            v10->__r_.__value_.__r.__words[2] = 0;
            v10->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v35, *v9);
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              signed int v12 = &v35;
            }
            else {
              signed int v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
            }
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v35.__r_.__value_.__l.__size_;
            }
            int v14 = std::string::append(&v37, (const std::string::value_type *)v12, size);
            long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            v40.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v15;
            v14->__r_.__value_.__l.__size_ = 0;
            v14->__r_.__value_.__r.__words[2] = 0;
            v14->__r_.__value_.__r.__words[0] = 0;
            int v16 = std::string::append(&v40, v7, 2uLL);
            long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
            int64_t v42 = v16->__r_.__value_.__r.__words[2];
            long long v41 = v17;
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            if (v42 >= 0) {
              uint64_t v18 = (const std::string::value_type *)&v41;
            }
            else {
              uint64_t v18 = (const std::string::value_type *)v41;
            }
            if (v42 >= 0) {
              std::string::size_type v19 = HIBYTE(v42);
            }
            else {
              std::string::size_type v19 = *((void *)&v41 + 1);
            }
            std::string::append(a1, v18, v19);
            if (SHIBYTE(v42) < 0) {
              operator delete((void *)v41);
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v36.__r_.__value_.__l.__data_);
            }
            sub_8E4B8((uint64_t *)&v37, v33);
            int v20 = v7;
            *(void *)&long long v41 = &v41;
            *((void *)&v41 + 1) = &v41;
            int64_t v42 = 0;
            v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
            *(_OWORD *)&v40.__r_.__value_.__r.__words[1] = (unint64_t)&v40;
            for (uint64_t i = (std::string *)v37.__r_.__value_.__l.__size_;
                  i != &v37;
                  uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
            {
              std::string::size_type v22 = i->__r_.__value_.__r.__words[2];
              if (*(_DWORD *)(v22 + 144) != 1885433888)
              {
                __int16 v23 = *(_WORD *)(v22 + 184);
                if (v23) {
                  int v24 = (std::string *)&v41;
                }
                else {
                  int v24 = &v40;
                }
                unsigned int v25 = operator new(0x20uLL);
                v25[2] = *((void *)&i->__r_.__value_.__l + 2);
                std::string::pointer data = i[1].__r_.__value_.__l.__data_;
                void v25[3] = data;
                if (data) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)data + 1, 1uLL, memory_order_relaxed);
                }
                std::string::size_type v27 = v24->__r_.__value_.__r.__words[0];
                *unsigned int v25 = v24->__r_.__value_.__r.__words[0];
                v25[1] = v24;
                *(void *)(v27 + 8) = v25;
                v24->__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
                if (v23) {
                  uint64_t v28 = (std::string *)&v41;
                }
                else {
                  uint64_t v28 = &v40;
                }
                ++v28->__r_.__value_.__r.__words[2];
              }
            }
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
            sub_2F64F4((std::string **)&v36, (uint64_t)&v41);
            std::string v7 = v20;
            std::string::append(a1, v20, 2uLL);
            sub_2F64F4((std::string **)&v36, (uint64_t)&v40);
            sub_B8E4((uint64_t *)&v40);
            sub_B8E4((uint64_t *)&v41);
            sub_B8E4((uint64_t *)&v37);
            std::string::append(a1, " }", 2uLL);
            std::string v6 = v32;
            ++v9;
          }
          while (v9 != v34);
          CFIndex v9 = v38;
        }
        if (v9)
        {
          std::string::size_type v39 = v9;
          operator delete(v9);
        }
        char v8 = 0;
        uint64_t v5 = v30;
      }
      v6 += 8;
    }
    while (v6 != v5);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_2F63D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 + 23) < 0) {
    operator delete(*(void **)v41);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2F64B0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *sub_2F64F4(std::string **a1, uint64_t a2)
{
  std::string::append(*a1, "[ ", 2uLL);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    char v5 = 0;
    do
    {
      if (v5) {
        std::string::append(*a1, ", ", 2uLL);
      }
      sub_2417C(&__p, *(_DWORD *)(*(void *)(v4 + 16) + 144));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(*a1, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::append(*a1, "(", 3uLL);
      sub_2417C(&__p, *(_DWORD *)(*(void *)(v4 + 16) + 264));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v8 = &__p;
      }
      else {
        char v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(*a1, (const std::string::value_type *)v8, v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (sub_25086C(*(_DWORD *)(*(void *)(v4 + 16) + 144), *(void *)(*(void *)(v4 + 16) + 192))) {
        std::string::append(*a1, "_b204", 5uLL);
      }
      std::string::append(*a1, ")", 2uLL);
      if (sub_24C024(*(void *)(v4 + 16)))
      {
        std::string::append(*a1, "(", 3uLL);
        unsigned int v10 = sub_24C024(*(void *)(v4 + 16));
        std::to_string(&__p, v10);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v11 = &__p;
        }
        else {
          long long v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(*a1, (const std::string::value_type *)v11, v12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::append(*a1, ")", 2uLL);
      }
      uint64_t v13 = *(void *)(*(void *)(v4 + 16) + 136);
      if ((v13 & 0xFF00000000) != 0 && v13)
      {
        std::string::append(*a1, "(", 3uLL);
        sub_2417C(&__p, v13);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &__p;
        }
        else {
          int v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(*a1, (const std::string::value_type *)v14, v15);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::append(*a1, ")", 2uLL);
        if (sub_1013AC(*(void *)(v4 + 16), v13))
        {
          uint64_t v16 = *(void *)(v4 + 16);
          __p.__r_.__value_.__s.__data_[0] = 0;
          __p.__r_.__value_.__s.__data_[4] = 0;
          unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(void *)v16 + 248))(v16, v13, &__p);
          std::string::append(*a1, "(", 3uLL);
          sub_2417C(&__p, v17);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v18 = &__p;
          }
          else {
            uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(*a1, (const std::string::value_type *)v18, v19);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::append(*a1, ")", 2uLL);
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
      char v5 = 1;
    }
    while (v4 != a2);
  }
  return std::string::append(*a1, " ]", 2uLL);
}

void sub_2F6808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2F6834(_DWORD *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v6 = 257;
  sub_2F69B0(a1, a2, &Mutable, 0, 0);
  return sub_80594((uint64_t)&Mutable);
}

void sub_2F68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2F68BC(_DWORD *a1)
{
  uint64_t v2 = sub_298DA4();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 264))(v2);
  if (result)
  {
    if ((sub_23AC0() & 1) != 0 || (uint64_t result = sub_209D00(), result))
    {
      if (*a1 == 1668576377 || *a1 == 1668703084) {
        return 1;
      }
      int v5 = a1[1];
      uint64_t result = 1;
      if (v5 <= 1987077986)
      {
        if (v5 == 1768057203) {
          return result;
        }
        int v6 = 1919776355;
        goto LABEL_17;
      }
      if (v5 != 1987077987 && v5 != 1987081833)
      {
        int v6 = 1987081839;
LABEL_17:
        if (v5 != v6) {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_2F69B0(_DWORD *a1, uint64_t a2, const __CFDictionary **a3, char a4, int a5)
{
  v848 = (void **)a2;
  v855 = a1;
  v853 = a3;
  if (!*a3)
  {
    uint64_t v801 = sub_32A48(13);
    v802 = sub_7D5E8(1, *(void **)v801, *(void *)(v801 + 8));
    v803 = v802;
    if (v802 && os_log_type_enabled(v802, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v914 = 136315394;
      *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v914[12] = 1024;
      *(_DWORD *)&v914[14] = 2586;
      _os_log_impl(&def_1E50E8, v803, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v914, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a4)
  {
    BOOL v6 = 1;
  }
  else
  {
    std::string v7 = (uint64_t *)sub_32A48(2);
    uint64_t v8 = sub_32A48(34);
    char v9 = 0;
    uint64_t v10 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v11 = v7[1];
    do
    {
      uint64_t v12 = *(int *)&v914[4 * v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0))
      {
        if ((v11 & v12) == 0) {
          std::string v7 = (uint64_t *)v8;
        }
        if ((v7[1] & 1) == 0) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }
      char v9 = 1;
      uint64_t v10 = 1;
    }
    while ((v13 & 1) == 0);
    if ((v11 & 1) == 0)
    {
LABEL_8:
      uint64_t v14 = 0;
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v14 = *v7;
LABEL_13:
    BOOL v6 = v14 != 0;
  }
  BOOL v849 = v6;
  v842 = v855 + 90;
  uint64_t v15 = sub_32A48(2);
  uint64_t v16 = sub_32A48(34);
  char v17 = 0;
  uint64_t v18 = 0;
  *(void *)v914 = 0x100000002;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&v914[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v21)
    {
      if ((v19 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_22;
    }
  }
  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
  if (*(void *)(v15 + 8))
  {
LABEL_22:
    id v22 = *(id *)v15;
    if (v22)
    {
      __int16 v23 = v22;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        CFDictionaryRef v24 = *v853;
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2591;
        *(_WORD *)&v914[18] = 2112;
        *(void *)&v914[20] = v24;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d inRouteChangeDictionary: %@.", v914, 0x1Cu);
      }
    }
  }
LABEL_26:
  unsigned int v843 = sub_2FE750(v853, *((_DWORD *)v848[14] + 36), *((unsigned __int8 *)v848[14] + 384));
  int v902 = 0;
  if ((sub_1D4800(*v853, @"expanse session", &v902) & v849) == 1)
  {
    uint64_t v25 = sub_32A48(2);
    uint64_t v26 = sub_32A48(34);
    char v27 = 0;
    uint64_t v28 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *(int *)&v914[4 * v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1;
      if (v31) {
        goto LABEL_33;
      }
    }
    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_33:
    id v32 = *(id *)v25;
    unsigned int v33 = v32;
    if (v32)
    {
      unsigned int v34 = v32;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2602;
        *(_WORD *)&v914[18] = 1024;
        *(_DWORD *)&v914[20] = v902;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Colistening: %u", v914, 0x18u);
      }
    }
  }
  int v898 = 0;
  char v899 = 0;
  long long v900 = 0u;
  long long v901 = 0u;
  if (a5 && (v843 & 1) == 0)
  {
    std::string v35 = 0;
    if (!*((_DWORD *)v848 + 100))
    {
      std::string v36 = 0;
      std::string v37 = 0;
      uint64_t v38 = 0;
      goto LABEL_55;
    }
    std::string v36 = 0;
    std::string v37 = 0;
    uint64_t v38 = 0;
    if (!v902) {
      goto LABEL_55;
    }
  }
  id v39 = *(id *)sub_32A48(2);
  std::string v40 = v39;
  if (v39)
  {
    uint64_t v41 = v39;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      sub_2804B8((std::string *)v912, (uint64_t)(v848 + 50));
      int64_t v42 = v912[23] >= 0 ? v912 : *(unsigned char **)v912;
      *(_DWORD *)v914 = 136315650;
      *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v914[12] = 1024;
      *(_DWORD *)&v914[14] = 2610;
      *(_WORD *)&v914[18] = 2080;
      *(void *)&v914[20] = v42;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using cached colistening state %s", v914, 0x1Cu);
      if ((v912[23] & 0x80000000) != 0) {
        operator delete(*(void **)v912);
      }
    }
  }
  int v898 = *((_DWORD *)v848 + 100);
  char v899 = *((unsigned char *)v848 + 404);
  uint64_t v38 = v848[51];
  std::string v37 = v848[52];
  if (v37) {
    atomic_fetch_add_explicit(v37 + 2, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v900 = v38;
  *((void *)&v900 + 1) = v37;
  std::string v36 = v848[53];
  std::string v35 = v848[54];
  if (v35) {
    atomic_fetch_add_explicit(v35 + 2, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v901 = v36;
  *((void *)&v901 + 1) = v35;
LABEL_55:
  __int16 v44 = v848[28];
  CFStringRef v43 = v848[29];
  std::string::size_type v45 = (char *)v848[27];
  char v46 = *v45;
  sub_F2720(v914, (uint64_t)(v45 + 8));
  CFNumberRef v47 = v855;
  *(void *)v855 = v44;
  *((void *)v47 + 1) = v43;
  *((void *)v47 + 3) = 0;
  v833 = (uint64_t *)(v47 + 6);
  *((void *)v47 + 2) = v47 + 6;
  v846 = (uint64_t **)(v47 + 4);
  *((void *)v47 + 6) = 0;
  *((void *)v47 + 4) = 0;
  *((void *)v47 + 5) = v47 + 12;
  v851 = (uint64_t **)(v47 + 10);
  v852 = (uint64_t *)(v47 + 12);
  *((void *)v47 + 10) = 0;
  *((void *)v47 + 9) = 0;
  *((void *)v47 + 12) = 0;
  *((void *)v47 + 7) = 0;
  *((void *)v47 + 8) = v47 + 18;
  v838 = v47 + 24;
  *((void *)v47 + 11) = v47 + 24;
  v844 = (uint64_t **)(v47 + 22);
  *((void *)v47 + 13) = 0;
  *((void *)v47 + 15) = 0;
  v837 = v47 + 30;
  *((void *)v47 + 14) = v47 + 30;
  v850 = (uint64_t *)(v47 + 28);
  *((void *)v47 + 16) = 0;
  *((unsigned char *)v47 + 136) = 0;
  *((unsigned char *)v47 + 140) = 0;
  v47[36] = 1668248944;
  int v832 = 1852797029;
  int v839 = 1852796517;
  v47[38] = 1852796517;
  *((void *)v47 + 20) = 0;
  *((void *)v47 + 21) = 0;
  *((void *)v47 + 22) = 0;
  *((void *)v47 + 23) = 0x756E64656175746FLL;
  *((_OWORD *)v47 + 12) = 0u;
  *((_OWORD *)v47 + 17) = 0u;
  *((_OWORD *)v47 + 18) = 0u;
  *((_OWORD *)v47 + 19) = 0u;
  *((_OWORD *)v47 + 13) = 0u;
  *((_OWORD *)v47 + 14) = 0u;
  *((_OWORD *)v47 + 15) = 0u;
  *((_OWORD *)v47 + 16) = 0u;
  *((_OWORD *)v47 + 21) = 0u;
  *((void *)v47 + 44) = 0;
  *((_OWORD *)v47 + 20) = 0u;
  v47[68] = 1065353216;
  *(_OWORD *)(v47 + 70) = 0u;
  v834 = v47 + 70;
  v835 = v47 + 80;
  v836 = (void **)(v47 + 48);
  *(_OWORD *)(v47 + 74) = 0u;
  v47[78] = 1065353216;
  *((_OWORD *)v47 + 21) = 0u;
  *((_OWORD *)v47 + 20) = 0u;
  v47[88] = 1065353216;
  *((unsigned char *)v47 + 360) = 0;
  *((unsigned char *)v47 + 364) = 0;
  *((unsigned char *)v47 + 376) = 0;
  *((unsigned char *)v47 + 400) = 0;
  v47[92] = 0;
  *((unsigned char *)v47 + 408) = v46;
  *((void *)v47 + 52) = v47 + 106;
  *((void *)v47 + 53) = 0;
  *((void *)v47 + 56) = 0;
  *((void *)v47 + 57) = 0;
  *((void *)v47 + 54) = 0;
  *((void *)v47 + 55) = v47 + 112;
  *((void *)v47 + 58) = v47 + 118;
  *((void *)v47 + 59) = 0;
  *(void *)&long long v854 = v47 + 118;
  *((void *)v47 + 62) = 0;
  *((void *)v47 + 63) = 0;
  *((void *)v47 + 60) = 0;
  *((void *)v47 + 61) = v47 + 124;
  *((void *)v47 + 64) = v47 + 130;
  *((void *)v47 + 65) = 0;
  v847 = v47 + 40;
  *((void *)v47 + 66) = 0;
  v841 = v47 + 134;
  sub_F2720((unsigned char *)v47 + 536, (uint64_t)v914);
  *((unsigned char *)v47 + 588) = 0;
  *((unsigned char *)v47 + 592) = 0;
  *((unsigned char *)v47 + 608) = 0;
  *((unsigned char *)v47 + 616) = 0;
  *((unsigned char *)v47 + 620) = 0;
  *((void *)v47 + 78) = 0;
  *((void *)v47 + 70) = 0;
  *((void *)v47 + 72) = 0;
  *((void *)v47 + 71) = 0;
  *((unsigned char *)v47 + 584) = 0;
  v47[158] = v898;
  *((unsigned char *)v47 + 636) = v899;
  *((void *)v47 + 80) = v38;
  *((void *)v47 + 81) = v37;
  if (v37) {
    atomic_fetch_add_explicit(v37 + 2, 1uLL, memory_order_relaxed);
  }
  int v48 = v855;
  *((void *)v855 + 82) = v36;
  *((void *)v48 + 83) = v35;
  if (v35) {
    atomic_fetch_add_explicit(v35 + 2, 1uLL, memory_order_relaxed);
  }
  uint64_t v49 = v855;
  *((unsigned char *)v855 + 672) = 0;
  *((unsigned char *)v49 + 696) = 0;
  *((unsigned char *)v49 + 704) = 0;
  *((unsigned char *)v49 + 728) = 0;
  *((_WORD *)v49 + 368) = 0;
  v49[185] = 0;
  if (v914[16]) {
    sub_80594((uint64_t)v914);
  }
  *((unsigned char *)v855 + 368) = v843;
  if (CFDictionaryContainsKey(*v853, @"enabled sub-ports"))
  {
    uint64_t v50 = sub_32A48(2);
    uint64_t v51 = sub_32A48(34);
    char v52 = 0;
    uint64_t v53 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v54 = *(void *)(v50 + 8);
    while (1)
    {
      uint64_t v55 = *(int *)&v914[4 * v53];
      char v56 = v52;
      if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
        break;
      }
      char v52 = 1;
      uint64_t v53 = 1;
      if (v56) {
        goto LABEL_68;
      }
    }
    if ((v54 & v55) == 0) {
      uint64_t v50 = v51;
    }
LABEL_68:
    id v57 = *(id *)v50;
    uint64_t v58 = v57;
    if (v57)
    {
      CFDictionaryRef v59 = v57;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v914 = 136315394;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2627;
        _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d kVirtualAudioPlugInRouteConfigurationEnabledSubPortsKey is no longer supported. Please use kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey", v914, 0x12u);
      }
    }
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v897 = 257;
  int v895 = 0;
  sub_1D49BC(v853, @"preferred sub-ports", (uint64_t)&Mutable);
  sub_1D4800(*v853, @"mode", &v895);
  v845 = (uint64_t **)(v847 + 64);
  if (!Mutable) {
    goto LABEL_127;
  }
  int v60 = v895;
  if (v895 > 1936749156)
  {
    if (v895 == 1936749157) {
      goto LABEL_128;
    }
    int v61 = 1937007472;
  }
  else
  {
    if (v895 == 1835229549) {
      goto LABEL_128;
    }
    int v61 = 1936745328;
  }
  if (v895 != v61)
  {
    CFIndex Count = CFDictionaryGetCount(Mutable);
    uint64_t v63 = Count;
    __chkstk_darwin(Count);
    std::string v65 = (const void **)((char *)&v831 - ((v64 + 15) & 0xFFFFFFFF0));
    if (v64 >= 0x200) {
      size_t v66 = 512;
    }
    else {
      size_t v66 = v64;
    }
    bzero((char *)&v831 - ((v64 + 15) & 0xFFFFFFFF0), v66);
    CFDictionaryGetKeysAndValues(Mutable, v65, 0);
    if (v849)
    {
      uint64_t v68 = sub_32A48(2);
      uint64_t v69 = sub_32A48(34);
      char v70 = 0;
      uint64_t v71 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v72 = *(void *)(v68 + 8);
      while (1)
      {
        uint64_t v73 = *(int *)&v914[4 * v71];
        char v74 = v70;
        if (((v72 & v73) != 0) != ((*(void *)(v69 + 8) & v73) != 0)) {
          break;
        }
        char v70 = 1;
        uint64_t v71 = 1;
        if (v74) {
          goto LABEL_91;
        }
      }
      if ((v72 & v73) == 0) {
        uint64_t v68 = v69;
      }
LABEL_91:
      id v75 = *(id *)v68;
      uint64_t v76 = v75;
      if (v75)
      {
        unsigned __int8 v77 = v75;
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v914 = 136315394;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2643;
          _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Preferred Sub-Ports:", v914, 0x12u);
        }
      }
    }
    if (v63)
    {
      uint64_t v78 = 0;
      *(void *)&long long v67 = 136315906;
      long long v840 = v67;
      while (1)
      {
        CFTypeID v79 = CFGetTypeID(v65[v78]);
        if (v79 != CFNumberGetTypeID())
        {
          uint64_t v777 = sub_32A48(13);
          v778 = sub_7D5E8(1, *(void **)v777, *(void *)(v777 + 8));
          v779 = v778;
          if (v778)
          {
            v780 = v778;
            if (os_log_type_enabled(v780, OS_LOG_TYPE_ERROR))
            {
              int v781 = CFGetTypeID(v65[v78]);
              *(_DWORD *)v914 = 136315650;
              *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v914[12] = 1024;
              *(_DWORD *)&v914[14] = 2648;
              *(_WORD *)&v914[18] = 1024;
              *(_DWORD *)&v914[20] = v781;
              _os_log_impl(&def_1E50E8, v780, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Unknown type (%u) used as key in preferred sub-ports dictionary (expected CFNumber).\"", v914, 0x18u);
            }
          }
          v782 = __cxa_allocate_exception(0x10uLL);
          *(void *)v782 = &off_6414D8;
          v782[2] = 1852797029;
        }
        int Value = CFDictionaryGetValue(Mutable, v65[v78]);
        uint64_t v81 = Value;
        if (!Value) {
          break;
        }
        CFTypeID v82 = CFGetTypeID(Value);
        if (v82 != CFArrayGetTypeID())
        {
          uint64_t v783 = sub_32A48(13);
          v784 = sub_7D5E8(1, *(void **)v783, *(void *)(v783 + 8));
          if (v784)
          {
            v770 = v784;
            if (os_log_type_enabled(v770, OS_LOG_TYPE_ERROR))
            {
              int v809 = CFGetTypeID(v81);
              *(_DWORD *)v914 = 136315650;
              *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v914[12] = 1024;
              *(_DWORD *)&v914[14] = 2653;
              *(_WORD *)&v914[18] = 1024;
              *(_DWORD *)&v914[20] = v809;
              _os_log_impl(&def_1E50E8, v770, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Unknown type (%u) used as key in preferred sub-ports dictionary (expected CFArray).\"", v914, 0x18u);
            }
          }
          else
          {
            v770 = 0;
          }
          goto LABEL_1334;
        }
        CFNumberRef v83 = (const __CFNumber *)v65[v78];
        *(void *)v913 = v83;
        v913[8] = 0;
        *(void *)&long long v892 = v81;
        WORD4(v892) = 0;
        uint64_t v84 = (uint64_t)v848[16];
        *(_DWORD *)v914 = 0;
        if (v83)
        {
          CFNumberGetValue(v83, kCFNumberSInt32Type, v914);
          int v85 = *(_DWORD *)v914;
        }
        else
        {
          int v85 = 0;
        }
        unint64_t v86 = sub_E1B78(v84, v85);
        v911.__r_.__value_.__r.__words[0] = v86;
        if (!v86)
        {
          uint64_t v771 = sub_32A48(13);
          v772 = sub_7D5E8(1, *(void **)v771, *(void *)(v771 + 8));
          v773 = v772;
          if (v772)
          {
            v774 = v772;
            if (os_log_type_enabled(v774, OS_LOG_TYPE_ERROR))
            {
              int v775 = 0;
              *(_DWORD *)v912 = 0;
              if (*(void *)v913)
              {
                CFNumberGetValue(*(CFNumberRef *)v913, kCFNumberSInt32Type, v912);
                int v775 = *(_DWORD *)v912;
              }
              *(_DWORD *)v914 = 136315650;
              *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v914[12] = 1024;
              *(_DWORD *)&v914[14] = 2660;
              *(_WORD *)&v914[18] = 1024;
              *(_DWORD *)&v914[20] = v775;
              _os_log_impl(&def_1E50E8, v774, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Requested port ID (%u) to enable does not exist.\"", v914, 0x18u);
            }
          }
          v776 = __cxa_allocate_exception(0x10uLL);
          *(void *)v776 = &off_6414D8;
          v776[2] = 1852797029;
        }
        if (v849)
        {
          uint64_t v87 = sub_32A48(2);
          uint64_t v88 = sub_32A48(34);
          char v89 = 0;
          uint64_t v90 = 0;
          *(void *)v914 = 0x100000002;
          uint64_t v91 = *(void *)(v87 + 8);
          while (1)
          {
            uint64_t v92 = *(int *)&v914[4 * v90];
            char v93 = v89;
            if (((v91 & v92) != 0) != ((*(void *)(v88 + 8) & v92) != 0)) {
              break;
            }
            char v89 = 1;
            uint64_t v90 = 1;
            if (v93) {
              goto LABEL_112;
            }
          }
          if ((v91 & v92) == 0) {
            uint64_t v87 = v88;
          }
LABEL_112:
          id v94 = *(id *)v87;
          uint64_t v95 = v94;
          if (v94)
          {
            uint64_t v96 = v94;
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v97 = v892;
              (*(void (**)(unsigned char *__return_ptr, unint64_t))(*(void *)v86 + 96))(v912, v86);
              unint64_t v98 = v912;
              if (v912[23] < 0) {
                unint64_t v98 = *(unsigned char **)v912;
              }
              *(_DWORD *)v914 = v840;
              *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v914[12] = 1024;
              *(_DWORD *)&v914[14] = 2662;
              *(_WORD *)&v914[18] = 2112;
              *(void *)&v914[20] = v97;
              *(_WORD *)&v914[28] = 2080;
              *(void *)&v914[30] = v98;
              _os_log_impl(&def_1E50E8, v96, OS_LOG_TYPE_DEBUG, "%25s:%-5d     - VirtualAudioSubPortIDs %@ on Port %s.", v914, 0x26u);
              if ((v912[23] & 0x80000000) != 0) {
                operator delete(*(void **)v912);
              }
            }
          }
        }
        memset(v914, 0, 24);
        if ((void)v892 && (int v99 = CFArrayGetCount((CFArrayRef)v892)) != 0)
        {
          for (unsigned int i = 0; i != v99; ++i)
          {
            *(_DWORD *)v912 = 0;
            sub_1D1B30((CFArrayRef *)&v892, i, v912);
            sub_72D08((uint64_t)v914, (__int32 *)v912);
          }
          unint64_t v101 = *(int **)v914;
        }
        else
        {
          unint64_t v101 = 0;
        }
        int v102 = *v101;
        uint64_t v103 = sub_2FEAC4(v845, v86, &v911);
        *((unsigned char *)v103 + 48) = 0;
        *((_DWORD *)v103 + 10) = v102;
        *((_DWORD *)v103 + 11) = 0;
        operator delete(v101);
        sub_3D61C((uint64_t)&v892);
        sub_45260((uint64_t)v913);
        if (++v78 == v63) {
          goto LABEL_127;
        }
      }
      uint64_t v768 = sub_32A48(13);
      int v832 = 2003329396;
      v769 = sub_7D5E8(1, *(void **)v768, *(void *)(v768 + 8));
      v770 = v769;
      if (v769 && os_log_type_enabled(v769, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v914 = 136315394;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2650;
        _os_log_impl(&def_1E50E8, v770, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Dictionary claimed to have a key, but failed to retrieve it.\"", v914, 0x12u);
      }
LABEL_1334:

      v810 = __cxa_allocate_exception(0x10uLL);
      *(void *)v810 = &off_6414D8;
      v810[2] = v832;
    }
LABEL_127:
    int v60 = v895;
  }
LABEL_128:
  if (v60 > 1937007471)
  {
    if (v60 != 1937007472 && v60 != 2003133037)
    {
      int v104 = 2003133027;
LABEL_135:
      if (v60 != v104) {
        goto LABEL_137;
      }
    }
  }
  else if (v60 != 1835229549 && v60 != 1936745328)
  {
    int v104 = 1936749157;
    goto LABEL_135;
  }
  sub_2FEB78((uint64_t)v848);
LABEL_137:
  CFDictionaryRef v105 = *v853;
  if (*v853) {
    CFRetain(*v853);
  }
  sub_22084(&v911, v105);
  if (!v911.__r_.__value_.__r.__words[0])
  {
    v805 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v805, "Could not construct");
  }
  CFArrayRef v106 = (const __CFArray *)sub_2080C((const __CFDictionary *)v911.__r_.__value_.__l.__data_, "sub-port preferences");
  if (v106 && (v108 = v106, CFTypeID TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v108)))
  {
    int v110 = CFArrayGetCount(v108);
    memset(v912, 0, 24);
    sub_301C00(v912, v110);
    if (v110 < 1)
    {
LABEL_162:
      long long v892 = *(_OWORD *)v912;
      uint64_t v893 = *(void *)&v912[16];
      memset(v912, 0, 24);
      char v894 = 1;
    }
    else
    {
      CFIndex v111 = 0;
      uint64_t v112 = v110;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v108, v111);
        uint64_t v114 = ValueAtIndex;
        if (!ValueAtIndex) {
          break;
        }
        CFRetain(ValueAtIndex);
        CFTypeID v115 = CFGetTypeID(v114);
        if (v115 != CFDictionaryGetTypeID())
        {
          CFRelease(v114);
          break;
        }
        *(void *)v913 = v114;
        v913[8] = 1;
        BOOL v116 = *(void **)&v912[8];
        if (*(void *)&v912[8] >= *(void *)&v912[16])
        {
          unint64_t v117 = *(void **)v912;
          uint64_t v118 = (uint64_t)(*(void *)&v912[8] - *(void *)v912) >> 3;
          unint64_t v119 = v118 + 1;
          if ((unint64_t)(v118 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v120 = *(void *)&v912[16] - *(void *)v912;
          if ((uint64_t)(*(void *)&v912[16] - *(void *)v912) >> 2 > v119) {
            unint64_t v119 = v120 >> 2;
          }
          if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v119;
          }
          *(void *)&v914[32] = &v912[16];
          if (v121)
          {
            unint64_t v121 = (unint64_t)sub_106EC(v121);
            BOOL v116 = *(void **)&v912[8];
            unint64_t v117 = *(void **)v912;
            uint64_t v114 = *(const void **)v913;
          }
          else
          {
            uint64_t v122 = 0;
          }
          uint64_t v123 = (void *)(v121 + 8 * v118);
          unint64_t v124 = v121 + 8 * v122;
          *(void *)&v914[24] = v124;
          void *v123 = v114;
          uint64_t v125 = v123 + 1;
          *(void *)v913 = 0;
          *(void *)&v914[16] = v123 + 1;
          if (v116 != v117)
          {
            do
            {
              uint64_t v126 = *--v116;
              *--uint64_t v123 = v126;
              *BOOL v116 = 0;
            }
            while (v116 != v117);
            uint64_t v125 = *(void **)&v914[16];
            unint64_t v124 = *(void *)&v914[24];
          }
          long long v127 = *(_OWORD *)v912;
          *(void *)v912 = v123;
          *(void *)&v912[8] = v125;
          *(_OWORD *)&v914[8] = v127;
          uint64_t v128 = *(void *)&v912[16];
          *(void *)&v912[16] = v124;
          *(void *)&v914[24] = v128;
          *(void *)v914 = v127;
          sub_A78F0((uint64_t)v914);
          *(void *)&v912[8] = v125;
        }
        else
        {
          **(void **)&v912[8] = v114;
          *(void *)v913 = 0;
          *(void *)&v912[8] = v116 + 1;
        }
        sub_7E2E8((uint64_t)v913);
        if (++v111 == v112) {
          goto LABEL_162;
        }
      }
      v913[0] = 0;
      v913[8] = 0;
      LOBYTE(v892) = 0;
      char v894 = 0;
      sub_7E2E8((uint64_t)v913);
    }
    *(void *)v914 = v912;
    sub_A7940((void ***)v914);
  }
  else
  {
    LOBYTE(v892) = 0;
    char v894 = 0;
  }
  if (v911.__r_.__value_.__r.__words[0]) {
    CFRelease(v911.__r_.__value_.__l.__data_);
  }
  if (v894)
  {
    *(void *)&long long v840 = *((void *)&v892 + 1);
    uint64_t v129 = (const __CFDictionary **)v892;
    if ((void)v892 == *((void *)&v892 + 1))
    {
      if (v849)
      {
        uint64_t v131 = sub_32A48(2);
        uint64_t v132 = sub_32A48(34);
        char v133 = 0;
        uint64_t v134 = 0;
        *(void *)v914 = 0x100000002;
        uint64_t v135 = *(void *)(v131 + 8);
        while (1)
        {
          uint64_t v136 = *(int *)&v914[4 * v134];
          char v137 = v133;
          if (((v135 & v136) != 0) != ((*(void *)(v132 + 8) & v136) != 0)) {
            break;
          }
          char v133 = 1;
          uint64_t v134 = 1;
          if (v137) {
            goto LABEL_224;
          }
        }
        if ((v135 & v136) == 0) {
          uint64_t v131 = v132;
        }
LABEL_224:
        id v167 = *(id *)v131;
        std::string::size_type v168 = v167;
        if (v167)
        {
          long long v169 = v167;
          if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2683;
            _os_log_impl(&def_1E50E8, v169, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Clearing all sub-port preferences:", v914, 0x12u);
          }
        }
      }
      sub_2FEB78((uint64_t)v848);
      goto LABEL_230;
    }
    if (v895 > 1937007471)
    {
      if (v895 == 1937007472 || v895 == 2003133027) {
        goto LABEL_230;
      }
      int v130 = 2003133037;
    }
    else
    {
      if (v895 == 1835229549 || v895 == 1936745328) {
        goto LABEL_230;
      }
      int v130 = 1936749157;
    }
    if (v895 == v130) {
      goto LABEL_230;
    }
    *(void *)&v912[16] = 0;
    *(void *)&v912[8] = 0;
    *(void *)v912 = &v912[8];
    *(void *)&long long v107 = 136315650;
    long long v831 = v107;
    while (1)
    {
      id v138 = (os_log_t *)sub_32A48(2);
      char v139 = *v138;
      if (*v138 && os_log_type_enabled(*v138, OS_LOG_TYPE_DEBUG))
      {
        CFDictionaryRef v140 = *v129;
        *(_DWORD *)v914 = v831;
        *(void *)&v914[4] = "PortTypes.cpp";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 44;
        *(_WORD *)&v914[18] = 2112;
        *(void *)&v914[20] = v140;
        _os_log_impl(&def_1E50E8, v139, OS_LOG_TYPE_DEBUG, "%25s:%-5d Parsing sub port preference entry: %@", v914, 0x1Cu);
      }
      *(_DWORD *)v913 = 0;
      CFDictionaryRef v141 = *v129;
      if (!*v129)
      {
        v790 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v790, "Could not construct");
      }
      CFStringRef v142 = CFStringCreateWithBytes(0, (const UInt8 *)"port id", 7, 0x8000100u, 0);
      *(void *)v914 = v142;
      if (!v142)
      {
        v791 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v791, "Could not construct");
      }
      CFNumberRef v143 = (const __CFNumber *)CFDictionaryGetValue(v141, v142);
      CFRelease(v142);
      if (!v143)
      {
        v830 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v830, "Could not find item");
      }
      unsigned int v144 = sub_7E85C(v143);
      *(_DWORD *)v913 = v144;
      if (!*v129)
      {
        v792 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v792, "Could not construct");
      }
      CFNumberRef v145 = (const __CFNumber *)sub_CD6FC(*v129, "sub-port id");
      if (!v145)
      {
        v793 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v793, "Could not find item");
      }
      LODWORD(v911.__r_.__value_.__l.__data_) = sub_7E85C(v145);
      CFDictionaryRef v146 = *v129;
      if (!*v129)
      {
        v794 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v794, "Could not construct");
      }
      CFStringRef v147 = CFStringCreateWithBytes(0, (const UInt8 *)"polar pattern", 13, 0x8000100u, 0);
      if (!v147)
      {
        id v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v166, "Could not construct");
      }
      CFNumberRef v148 = (const __CFNumber *)CFDictionaryGetValue(v146, v147);
      CFRelease(v147);
      if (v148) {
        CFNumberRef v149 = sub_22314(v148);
      }
      else {
        CFNumberRef v149 = 0;
      }
      uint64_t v150 = *(void *)&v912[8];
      if (!*(void *)&v912[8]) {
        goto LABEL_208;
      }
      CFIndex v151 = (uint64_t *)&v912[8];
      do
      {
        unint64_t v152 = (uint64_t *)v150;
        char v153 = v151;
        unsigned int v154 = *(_DWORD *)(v150 + 32);
        CFNumberRef v155 = (uint64_t *)(v150 + 8);
        if (v154 >= v144)
        {
          CFNumberRef v155 = v152;
          CFIndex v151 = v152;
        }
        uint64_t v150 = *v155;
      }
      while (v150);
      if (v151 != (uint64_t *)&v912[8] && (v154 >= v144 ? (CFNumberRef v156 = v152) : (CFNumberRef v156 = v153), v144 >= *((_DWORD *)v156 + 8)))
      {
        if (!BYTE4(v149))
        {
          if (v154 < v144) {
            unint64_t v152 = v153;
          }
          *((_DWORD *)v152 + 10) = v911.__r_.__value_.__l.__data_;
          goto LABEL_214;
        }
        uint64_t v165 = sub_293688((uint64_t **)v912, v144, v913);
        unsigned int v164 = sub_293768((uint64_t **)v165 + 6, v911.__r_.__value_.__l.__data_, &v911);
      }
      else
      {
LABEL_208:
        unsigned int data = v911.__r_.__value_.__l.__data_;
        *(_DWORD *)v914 = v911.__r_.__value_.__l.__data_;
        *(void *)&v914[16] = 0;
        *(void *)&v914[24] = 0;
        *(void *)&v914[8] = &v914[16];
        CFBooleanRef v158 = sub_293688((uint64_t **)v912, v144, v913);
        int v160 = v158 + 56;
        __int16 v159 = (void *)*((void *)v158 + 7);
        *((_DWORD *)v158 + 10) = *(_DWORD *)v914;
        sub_463E0(v159);
        int v161 = *(void **)&v914[16];
        *((void *)v158 + 6) = *(void *)&v914[8];
        *((void *)v158 + 7) = v161;
        uint64_t v162 = *(void *)&v914[24];
        *((void *)v158 + 8) = *(void *)&v914[24];
        if (v162)
        {
          v161[2] = v160;
          *(void *)&v914[8] = &v914[16];
          *(void *)&v914[16] = 0;
          *(void *)&v914[24] = 0;
          int v161 = 0;
        }
        else
        {
          *((void *)v158 + 6) = v160;
        }
        sub_463E0(v161);
        if (!BYTE4(v149)) {
          goto LABEL_214;
        }
        long long v163 = sub_293688((uint64_t **)v912, v144, v913);
        unsigned int v164 = sub_293768((uint64_t **)v163 + 6, data, &v911);
      }
      *((_DWORD *)v164 + 8) = v149;
LABEL_214:
      if (++v129 == (const __CFDictionary **)v840)
      {
        unsigned __int8 v406 = *(unsigned char **)v912;
        if (*(unsigned char **)v912 != &v912[8])
        {
          do
          {
            uint64_t v407 = *((void *)v406 + 7);
            unsigned int v408 = *((_DWORD *)v406 + 10);
            if (v407)
            {
              v409 = v406 + 56;
              do
              {
                unsigned int v410 = *(_DWORD *)(v407 + 28);
                BOOL v411 = v410 >= v408;
                if (v410 >= v408) {
                  uint64_t v412 = (uint64_t *)v407;
                }
                else {
                  uint64_t v412 = (uint64_t *)(v407 + 8);
                }
                if (v411) {
                  v409 = (unsigned char *)v407;
                }
                uint64_t v407 = *v412;
              }
              while (*v412);
              if (v409 == v406 + 56 || v408 < *((_DWORD *)v409 + 7))
              {
                uint64_t v413 = 0;
                int v414 = 0;
                LODWORD(v407) = 0;
              }
              else
              {
                LODWORD(v407) = *((_DWORD *)v409 + 8) & 0xFFFFFF00;
                int v414 = *((_DWORD *)v409 + 8);
                uint64_t v413 = 0x100000000;
              }
            }
            else
            {
              uint64_t v413 = 0;
              int v414 = 0;
            }
            *(_DWORD *)v914 = *((_DWORD *)v406 + 10);
            *(void *)&v914[4] = v413 | v407 | v414;
            unsigned int v415 = v408;
            *(void *)v913 = *(void *)v914;
            *(_DWORD *)&v913[8] = HIDWORD(v413);
            unint64_t v416 = sub_E1B78((uint64_t)v848[16], *((_DWORD *)v406 + 8));
            v911.__r_.__value_.__r.__words[0] = v416;
            if (!v416)
            {
              uint64_t v795 = sub_32A48(13);
              v796 = sub_7D5E8(1, *(void **)v795, *(void *)(v795 + 8));
              v797 = v796;
              if (v796)
              {
                v798 = v796;
                if (os_log_type_enabled(v798, OS_LOG_TYPE_ERROR))
                {
                  int v799 = *((_DWORD *)v406 + 8);
                  *(_DWORD *)v914 = v831;
                  *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&v914[12] = 1024;
                  *(_DWORD *)&v914[14] = 2696;
                  *(_WORD *)&v914[18] = 1024;
                  *(_DWORD *)&v914[20] = v799;
                  _os_log_impl(&def_1E50E8, v798, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Requested port ID (%u) to enable does not exist.\"", v914, 0x18u);
                }
              }
              v800 = __cxa_allocate_exception(0x10uLL);
              *(void *)v800 = &off_6414D8;
              v800[2] = 1852797029;
            }
            *(_DWORD *)v914 = v415;
            char v417 = v913[8];
            *(void *)&v914[4] = *(void *)&v913[4];
            uint64_t v418 = *(uint64_t **)v914;
            v419 = sub_2FEAC4(v845, v416, &v911);
            v419[5] = v418;
            *((unsigned char *)v419 + 48) = v417;
            char v420 = (void *)*((void *)v406 + 1);
            if (v420)
            {
              do
              {
                std::string v421 = v420;
                char v420 = (void *)*v420;
              }
              while (v420);
            }
            else
            {
              do
              {
                std::string v421 = (unsigned char *)*((void *)v406 + 2);
                BOOL v602 = *(void *)v421 == (void)v406;
                unsigned __int8 v406 = v421;
              }
              while (!v602);
            }
            unsigned __int8 v406 = v421;
          }
          while (v421 != &v912[8]);
        }
        sub_293834(*(void **)&v912[8]);
        break;
      }
    }
  }
LABEL_230:
  CFMutableDictionaryRef v890 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v891 = 257;
  sub_1D49BC(v853, @"active data sources", (uint64_t)&v890);
  BOOL v170 = v849;
  if (!v890) {
    BOOL v170 = 0;
  }
  if (v170)
  {
    uint64_t v171 = sub_32A48(2);
    uint64_t v172 = sub_32A48(34);
    char v173 = 0;
    uint64_t v174 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v175 = *(void *)(v171 + 8);
    while (1)
    {
      uint64_t v176 = *(int *)&v914[4 * v174];
      char v177 = v173;
      if (((v175 & v176) != 0) != ((*(void *)(v172 + 8) & v176) != 0)) {
        break;
      }
      char v173 = 1;
      uint64_t v174 = 1;
      if (v177) {
        goto LABEL_239;
      }
    }
    if ((v175 & v176) == 0) {
      uint64_t v171 = v172;
    }
LABEL_239:
    id v178 = *(id *)v171;
    std::string v179 = v178;
    if (v178)
    {
      __int16 v180 = v178;
      if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2708;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = "active data sources";
        _os_log_impl(&def_1E50E8, v180, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s is no longer supported.  It will be ignored.", v914, 0x1Cu);
      }
    }
  }
  CFArrayRef v888 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v889 = 257;
  sub_1D492C(v853, @"routable ports", (uint64_t)&v888);
  if (v888)
  {
    if (v849)
    {
      uint64_t v181 = sub_32A48(2);
      uint64_t v182 = sub_32A48(34);
      char v183 = 0;
      uint64_t v184 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v185 = *(void *)(v181 + 8);
      while (1)
      {
        uint64_t v186 = *(int *)&v914[4 * v184];
        char v187 = v183;
        if (((v185 & v186) != 0) != ((*(void *)(v182 + 8) & v186) != 0)) {
          break;
        }
        char v183 = 1;
        uint64_t v184 = 1;
        if (v187) {
          goto LABEL_252;
        }
      }
      if ((v185 & v186) == 0) {
        uint64_t v181 = v182;
      }
LABEL_252:
      id v188 = *(id *)v181;
      unsigned int v189 = v188;
      if (v188)
      {
        v190 = v188;
        if (os_log_type_enabled(v190, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2717;
          *(_WORD *)&v914[18] = 2112;
          *(void *)&v914[20] = v888;
          _os_log_impl(&def_1E50E8, v190, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Routable Ports: %@.", v914, 0x1Cu);
        }
      }
    }
    unsigned int v191 = 0;
    int v192 = (uint64_t *)(v847 + 70);
    while (1)
    {
      unsigned int v193 = v888;
      if (v888) {
        unsigned int v193 = CFArrayGetCount(v888);
      }
      if (v191 >= v193) {
        break;
      }
      *(_DWORD *)v912 = 0;
      if ((sub_1D1B30(&v888, v191, v912) & 1) == 0)
      {
        uint64_t v702 = sub_32A48(13);
        v703 = sub_7D5E8(1, *(void **)v702, *(void *)(v702 + 8));
        v704 = v703;
        if (v703)
        {
          v705 = v703;
          if (os_log_type_enabled(v705, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2724;
            _os_log_impl(&def_1E50E8, v705, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationRoutablePortsKey does not contain VirtualAudioPortIDs.\"", v914, 0x12u);
          }
        }
        v706 = __cxa_allocate_exception(0x10uLL);
        *(void *)v706 = &off_6414D8;
        v706[2] = 1852797029;
      }
      sub_3A8A8();
      uint64_t v194 = sub_33438(*(unsigned int *)v912);
      if (!v194)
      {
        uint64_t v707 = sub_32A48(13);
        v708 = sub_7D5E8(1, *(void **)v707, *(void *)(v707 + 8));
        v709 = v708;
        if (v708)
        {
          v710 = v708;
          if (os_log_type_enabled(v710, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2726;
            _os_log_impl(&def_1E50E8, v710, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: \"no virtual audio port object with the specified ID\"", v914, 0x12u);
          }
        }
        v711 = __cxa_allocate_exception(0x10uLL);
        *(void *)v711 = &off_6414D8;
        v711[2] = 560947818;
      }
      sub_E7404(v192, v194, v194);
      ++v191;
    }
    if (v843)
    {
      if (*((_DWORD *)v848 + 100))
      {
        sub_2FECE0((uint64_t)v887, v192);
        if (v887[0])
        {
          v887[1] = v887[0];
          operator delete(v887[0]);
        }
      }
    }
  }
  CFArrayRef v885 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v886 = 257;
  sub_1D492C(v853, @"unroutable ports", (uint64_t)&v885);
  std::string v195 = (uint64_t *)(v847 + 76);
  if (v885)
  {
    if (v849)
    {
      uint64_t v196 = sub_32A48(2);
      uint64_t v197 = sub_32A48(34);
      char v198 = 0;
      uint64_t v199 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v200 = *(void *)(v196 + 8);
      while (1)
      {
        uint64_t v201 = *(int *)&v914[4 * v199];
        char v202 = v198;
        if (((v200 & v201) != 0) != ((*(void *)(v197 + 8) & v201) != 0)) {
          break;
        }
        char v198 = 1;
        uint64_t v199 = 1;
        if (v202) {
          goto LABEL_276;
        }
      }
      if ((v200 & v201) == 0) {
        uint64_t v196 = v197;
      }
LABEL_276:
      id v203 = *(id *)v196;
      std::string v204 = v203;
      if (v203)
      {
        v205 = v203;
        if (os_log_type_enabled(v205, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2744;
          *(_WORD *)&v914[18] = 2112;
          *(void *)&v914[20] = v885;
          _os_log_impl(&def_1E50E8, v205, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Unroutable Ports: %@.", v914, 0x1Cu);
        }
      }
    }
    unsigned int v206 = 0;
    char v207 = v855 + 168;
    while (1)
    {
      unsigned int v208 = v885;
      if (v885) {
        unsigned int v208 = CFArrayGetCount(v885);
      }
      if (v206 >= v208) {
        break;
      }
      *(_DWORD *)v912 = 0;
      if ((sub_1D1B30(&v885, v206, v912) & 1) == 0)
      {
        uint64_t v712 = sub_32A48(13);
        v713 = sub_7D5E8(1, *(void **)v712, *(void *)(v712 + 8));
        v714 = v713;
        if (v713)
        {
          v715 = v713;
          if (os_log_type_enabled(v715, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2751;
            _os_log_impl(&def_1E50E8, v715, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey does not contain VirtualAudioPortIDs.\"", v914, 0x12u);
          }
        }
        v716 = __cxa_allocate_exception(0x10uLL);
        *(void *)v716 = &off_6414D8;
        v716[2] = 1852797029;
      }
      sub_3A8A8();
      uint64_t v209 = sub_33438(*(unsigned int *)v912);
      if (!v209)
      {
        uint64_t v717 = sub_32A48(13);
        v718 = sub_7D5E8(1, *(void **)v717, *(void *)(v717 + 8));
        v719 = v718;
        if (v718)
        {
          v720 = v718;
          if (os_log_type_enabled(v720, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2753;
            _os_log_impl(&def_1E50E8, v720, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: \"no virtual audio port object with the specified ID\"", v914, 0x12u);
          }
        }
        v721 = __cxa_allocate_exception(0x10uLL);
        *(void *)v721 = &off_6414D8;
        v721[2] = 560947818;
      }
      sub_E7404(v195, v209, v209);
      ++v206;
    }
    if (CFDictionaryContainsKey(*v853, @"route to builtinspeaker"))
    {
      sub_2FECE0((uint64_t)v914, v195);
      int v210 = v855;
      if (*((unsigned char *)v855 + 696))
      {
        int v211 = *(void **)v207;
        if (*(void *)v207)
        {
          *((void *)v855 + 85) = v211;
          operator delete(v211);
          *(void *)char v207 = 0;
          *((void *)v207 + 1) = 0;
          *((void *)v207 + 2) = 0;
        }
        *((_OWORD *)v210 + 42) = *(_OWORD *)v914;
        *((void *)v210 + 86) = *(void *)&v914[16];
        memset(v914, 0, 24);
      }
      else
      {
        *((_OWORD *)v855 + 42) = *(_OWORD *)v914;
        *((void *)v210 + 86) = *(void *)&v914[16];
        memset(v914, 0, 24);
        *((unsigned char *)v210 + 696) = 1;
      }
    }
  }
  CFDictionaryRef v883 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v884 = 257;
  sub_1D49BC(v853, @"voice processing configuration", (uint64_t)&v883);
  if (v883)
  {
    sub_2FF454((uint64_t)v841, (uint64_t)&v883);
    int v212 = (int)v883;
    if (v883) {
      int v212 = CFDictionaryGetCount(v883);
    }
    *((unsigned char *)v855 + 408) = v212 != 0;
    if (v849)
    {
      uint64_t v213 = sub_32A48(2);
      uint64_t v214 = sub_32A48(34);
      char v215 = 0;
      uint64_t v216 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v217 = *(void *)(v213 + 8);
      while (1)
      {
        uint64_t v218 = *(int *)&v914[4 * v216];
        char v219 = v215;
        if (((v217 & v218) != 0) != ((*(void *)(v214 + 8) & v218) != 0)) {
          break;
        }
        char v215 = 1;
        uint64_t v216 = 1;
        if (v219) {
          goto LABEL_304;
        }
      }
      if ((v217 & v218) == 0) {
        uint64_t v213 = v214;
      }
LABEL_304:
      id v220 = *(id *)v213;
      int8x16_t v221 = v220;
      if (v220)
      {
        int v222 = v220;
        if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
        {
          v223 = "true";
          int v224 = *((unsigned __int8 *)v855 + 408);
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_DWORD *)v914 = 136315650;
          if (!v224) {
            v223 = "false";
          }
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2773;
          *(_WORD *)&v914[18] = 2080;
          *(void *)&v914[20] = v223;
          _os_log_impl(&def_1E50E8, v222, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Voice Processing Enabled: %s.", v914, 0x1Cu);
        }
      }
      uint64_t v225 = sub_32A48(2);
      uint64_t v226 = sub_32A48(34);
      char v227 = 0;
      uint64_t v228 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v229 = *(void *)(v225 + 8);
      while (1)
      {
        uint64_t v230 = *(int *)&v914[4 * v228];
        char v231 = v227;
        if (((v229 & v230) != 0) != ((*(void *)(v226 + 8) & v230) != 0)) {
          break;
        }
        char v227 = 1;
        uint64_t v228 = 1;
        if (v231) {
          goto LABEL_316;
        }
      }
      if ((v229 & v230) == 0) {
        uint64_t v225 = v226;
      }
LABEL_316:
      id v232 = *(id *)v225;
      v233 = v232;
      if (v232)
      {
        v234 = v232;
        if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2775;
          *(_WORD *)&v914[18] = 2112;
          *(void *)&v914[20] = v883;
          _os_log_impl(&def_1E50E8, v234, OS_LOG_TYPE_DEBUG, "%25s:%-5d - VP configuration data: %@.", v914, 0x1Cu);
        }
      }
    }
  }
  sub_21C8C(v914, "screen dark policy enabled");
  uint64_t v235 = sub_2FF4BC(*v853, v914);
  uint64_t v236 = v855;
  v855[34] = v235;
  *((unsigned char *)v236 + 140) = BYTE4(v235);
  if ((v914[23] & 0x80000000) != 0) {
    operator delete(*(void **)v914);
  }
  if (v849 && *((unsigned char *)v855 + 140))
  {
    uint64_t v237 = sub_32A48(2);
    uint64_t v238 = sub_32A48(34);
    char v239 = 0;
    uint64_t v240 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v241 = *(void *)(v237 + 8);
    while (1)
    {
      uint64_t v242 = *(int *)&v914[4 * v240];
      char v243 = v239;
      if (((v241 & v242) != 0) != ((*(void *)(v238 + 8) & v242) != 0)) {
        break;
      }
      char v239 = 1;
      uint64_t v240 = 1;
      if (v243) {
        goto LABEL_331;
      }
    }
    if ((v241 & v242) == 0) {
      uint64_t v237 = v238;
    }
LABEL_331:
    id v244 = *(id *)v237;
    uint64_t v245 = v244;
    if (v244)
    {
      uint64_t v246 = v244;
      if (os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
      {
        if (!*((unsigned char *)v855 + 140)) {
          sub_7F218();
        }
        char v247 = "false";
        int v248 = v855[34];
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)v914 = 136315650;
        if (v248 == 1) {
          char v247 = "true";
        }
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2784;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v247;
        _os_log_impl(&def_1E50E8, v246, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Screen dark policy enabled: %s.", v914, 0x1Cu);
      }
    }
  }
  CFArrayRef v881 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v882 = 257;
  sub_1D492C(v853, @"device hints", (uint64_t)&v881);
  CFArrayRef v249 = v881;
  if (v881)
  {
    unsigned int v250 = 0;
    char v251 = (char **)(v855 + 140);
LABEL_364:
    LODWORD(v249) = CFArrayGetCount(v249);
    while (v250 < v249)
    {
      *(void *)v914 = 0;
      unsigned int v252 = sub_1D1ACC(&v881, v250, v914);
      CFDataRef v253 = *(const __CFData **)v914;
      if (*(void *)v914) {
        unsigned int v254 = v252;
      }
      else {
        unsigned int v254 = 0;
      }
      if (v254 != 1 || (CFTypeID v255 = CFGetTypeID(*(CFTypeRef *)v914), v255 != CFDataGetTypeID()))
      {
        uint64_t v697 = sub_32A48(13);
        v698 = sub_7D5E8(1, *(void **)v697, *(void *)(v697 + 8));
        v699 = v698;
        if (v698)
        {
          v700 = v698;
          if (os_log_type_enabled(v700, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2796;
            _os_log_impl(&def_1E50E8, v700, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationDeviceHintsKey does not contain CFDataRefs.\"", v914, 0x12u);
          }
        }
        v701 = __cxa_allocate_exception(0x10uLL);
        *(void *)v701 = &off_6414D8;
        v701[2] = 1852797029;
      }
      *(void *)v912 = v253;
      v912[8] = 0;
      BytePtr = CFDataGetBytePtr(v253);
      uint64_t v257 = BytePtr;
      if (!BytePtr)
      {
        uint64_t v722 = sub_32A48(13);
        v723 = sub_7D5E8(1, *(void **)v722, *(void *)(v722 + 8));
        v724 = v723;
        if (v723)
        {
          v725 = v723;
          if (os_log_type_enabled(v725, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315650;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2801;
            *(_WORD *)&v914[18] = 1024;
            *(_DWORD *)&v914[20] = v250;
            _os_log_impl(&def_1E50E8, v725, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [deviceHint is NULL]: \"The CFDataRef specified at index %u by kVirtualAudioPlugInRouteConfigurationDeviceHintsKey is NULL.\"", v914, 0x18u);
          }
        }
        v726 = __cxa_allocate_exception(0x10uLL);
        *(void *)v726 = &off_6414D8;
        v726[2] = 1852797029;
      }
      uint64_t v258 = (_OWORD *)*((void *)v855 + 71);
      unint64_t v259 = *((void *)v855 + 72);
      if ((unint64_t)v258 >= v259)
      {
        unint64_t v263 = 0xAAAAAAAAAAAAAAABLL * (((char *)v258 - *v251) >> 4);
        unint64_t v264 = v263 + 1;
        if (v263 + 1 > 0x555555555555555) {
          sub_60548();
        }
        unint64_t v265 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v259 - (void)*v251) >> 4);
        if (2 * v265 > v264) {
          unint64_t v264 = 2 * v265;
        }
        if (v265 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v266 = 0x555555555555555;
        }
        else {
          unint64_t v266 = v264;
        }
        if (v266) {
          unint64_t v266 = (unint64_t)sub_2FF668(v266);
        }
        else {
          uint64_t v267 = 0;
        }
        v268 = (_OWORD *)(v266 + 48 * v263);
        long long v269 = *(_OWORD *)v257;
        long long v270 = *((_OWORD *)v257 + 2);
        v268[1] = *((_OWORD *)v257 + 1);
        v268[2] = v270;
        _OWORD *v268 = v269;
        CFArrayRef v271 = (char *)*((void *)v855 + 71);
        v272 = (char *)*((void *)v855 + 70);
        int v273 = v268;
        if (v271 != v272)
        {
          do
          {
            long long v274 = *((_OWORD *)v271 - 3);
            long long v275 = *((_OWORD *)v271 - 1);
            *(v273 - 2) = *((_OWORD *)v271 - 2);
            *(v273 - 1) = v275;
            *(v273 - 3) = v274;
            v273 -= 3;
            v271 -= 48;
          }
          while (v271 != v272);
          CFArrayRef v271 = *v251;
        }
        unint64_t v276 = v855;
        *((void *)v855 + 70) = v273;
        uint64_t v262 = v268 + 3;
        *((void *)v276 + 71) = v268 + 3;
        *((void *)v276 + 72) = v266 + 48 * v267;
        if (v271) {
          operator delete(v271);
        }
      }
      else
      {
        long long v260 = *(_OWORD *)BytePtr;
        long long v261 = *((_OWORD *)BytePtr + 2);
        v258[1] = *((_OWORD *)BytePtr + 1);
        v258[2] = v261;
        _OWORD *v258 = v260;
        uint64_t v262 = v258 + 3;
      }
      *((void *)v855 + 71) = v262;
      sub_2FF6B0((uint64_t)v912);
      ++v250;
      CFArrayRef v249 = v881;
      if (v881) {
        goto LABEL_364;
      }
    }
    v845 = (uint64_t **)v195;
    sub_21C8C(&v907, "{ ");
    uint64_t v277 = *((void *)v855 + 70);
    if (*((void *)v855 + 71) != v277)
    {
      uint64_t v278 = 0;
      unint64_t v279 = 0;
      while (1)
      {
        uint64_t v280 = v277 + v278;
        int v281 = *(_DWORD *)(v280 + 4);
        uint64_t v282 = *(void *)(v280 + 8);
        int v283 = *(_DWORD *)(v280 + 32);
        unint64_t v284 = *(double **)(v280 + 40);
        sub_2417C(&v911, *(_DWORD *)v280);
        unint64_t v285 = std::string::insert(&v911, 0, "[ ", 2uLL);
        long long v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
        *(void *)&v913[16] = *((void *)&v285->__r_.__value_.__l + 2);
        *(_OWORD *)v913 = v286;
        v285->__r_.__value_.__l.__size_ = 0;
        v285->__r_.__value_.__r.__words[2] = 0;
        v285->__r_.__value_.__r.__words[0] = 0;
        uint64_t v287 = std::string::append((std::string *)v913, ": ", 2uLL);
        long long v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
        *(void *)&v912[16] = *((void *)&v287->__r_.__value_.__l + 2);
        *(_OWORD *)v912 = v288;
        v287->__r_.__value_.__l.__size_ = 0;
        v287->__r_.__value_.__r.__words[2] = 0;
        v287->__r_.__value_.__r.__words[0] = 0;
        LODWORD(v905) = v281;
        *(void *)((char *)&v905 + 4) = v282;
        sub_16C9C4((uint64_t)&v908, (unsigned int *)&v905);
        if ((v910 & 0x80u) == 0) {
          CFNumberRef v289 = (const std::string::value_type *)&v908;
        }
        else {
          CFNumberRef v289 = v908;
        }
        if ((v910 & 0x80u) == 0) {
          std::string::size_type v290 = v910;
        }
        else {
          std::string::size_type v290 = (std::string::size_type)v909;
        }
        v291 = std::string::append((std::string *)v912, v289, v290);
        long long v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
        *(void *)&v914[16] = *((void *)&v291->__r_.__value_.__l + 2);
        *(_OWORD *)v914 = v292;
        v291->__r_.__value_.__l.__size_ = 0;
        v291->__r_.__value_.__r.__words[2] = 0;
        v291->__r_.__value_.__r.__words[0] = 0;
        if (v914[23] >= 0) {
          v293 = v914;
        }
        else {
          v293 = *(const std::string::value_type **)v914;
        }
        if (v914[23] >= 0) {
          std::string::size_type v294 = v914[23];
        }
        else {
          std::string::size_type v294 = *(void *)&v914[8];
        }
        std::string::append(&v907, v293, v294);
        if ((v914[23] & 0x80000000) != 0) {
          operator delete(*(void **)v914);
        }
        if ((char)v910 < 0) {
          operator delete(v908);
        }
        if ((v912[23] & 0x80000000) != 0) {
          operator delete(*(void **)v912);
        }
        if ((v913[23] & 0x80000000) != 0) {
          operator delete(*(void **)v913);
        }
        if (SHIBYTE(v911.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v911.__r_.__value_.__l.__data_);
        }
        memset(v914, 0, 24);
        if (v281 == 1718839674) {
          break;
        }
        if (v281 == 1853059700)
        {
          if (v283 != 8)
          {
            uint64_t v762 = sub_32A48(13);
            v763 = sub_7D5E8(1, *(void **)v762, *(void *)(v762 + 8));
            v764 = v763;
            if (v763 && os_log_type_enabled(v763, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v912 = 136315394;
              *(void *)&v912[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v912[12] = 1024;
              *(_DWORD *)&v912[14] = 689;
              _os_log_impl(&def_1E50E8, v764, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v912, 0x12u);
            }
            goto LABEL_1288;
          }
          std::to_string((std::string *)v912, *v284);
LABEL_396:
          if ((v914[23] & 0x80000000) != 0) {
            operator delete(*(void **)v914);
          }
          *(_OWORD *)v914 = *(_OWORD *)v912;
          *(void *)&v914[16] = *(void *)&v912[16];
        }
        std::operator+<char>();
        uint64_t v295 = std::string::append((std::string *)v913, " ]", 2uLL);
        long long v296 = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
        *(void *)&v912[16] = *((void *)&v295->__r_.__value_.__l + 2);
        *(_OWORD *)v912 = v296;
        v295->__r_.__value_.__l.__size_ = 0;
        v295->__r_.__value_.__r.__words[2] = 0;
        v295->__r_.__value_.__r.__words[0] = 0;
        if (v912[23] >= 0) {
          uint64_t v297 = v912;
        }
        else {
          uint64_t v297 = *(const std::string::value_type **)v912;
        }
        if (v912[23] >= 0) {
          std::string::size_type v298 = v912[23];
        }
        else {
          std::string::size_type v298 = *(void *)&v912[8];
        }
        std::string::append(&v907, v297, v298);
        if ((v912[23] & 0x80000000) != 0) {
          operator delete(*(void **)v912);
        }
        if ((v913[23] & 0x80000000) != 0) {
          operator delete(*(void **)v913);
        }
        if (++v279 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v855 + 71) - *((void *)v855 + 70)) >> 4)) {
          std::string::append(&v907, ", ", 2uLL);
        }
        if ((v914[23] & 0x80000000) != 0) {
          operator delete(*(void **)v914);
        }
        uint64_t v277 = *((void *)v855 + 70);
        v278 += 48;
        if (v279 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)v855 + 71) - v277) >> 4)) {
          goto LABEL_414;
        }
      }
      if (v283 != 4)
      {
        uint64_t v765 = sub_32A48(13);
        v766 = sub_7D5E8(1, *(void **)v765, *(void *)(v765 + 8));
        v764 = v766;
        if (v766 && os_log_type_enabled(v766, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v912 = 136315394;
          *(void *)&v912[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v912[12] = 1024;
          *(_DWORD *)&v912[14] = 695;
          _os_log_impl(&def_1E50E8, v764, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v912, 0x12u);
        }
LABEL_1288:

        v767 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v767, "Precondition failure.");
      }
      std::to_string((std::string *)v912, *(_DWORD *)v284);
      goto LABEL_396;
    }
LABEL_414:
    std::string::append(&v907, " }", 2uLL);
    uint64_t v299 = sub_32A48(2);
    std::string v195 = (uint64_t *)v845;
    uint64_t v300 = v299;
    uint64_t v301 = sub_32A48(34);
    char v302 = 0;
    uint64_t v303 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v304 = *(void *)(v300 + 8);
    while (1)
    {
      uint64_t v305 = *(int *)&v914[4 * v303];
      char v306 = v302;
      if (((v304 & v305) != 0) != ((*(void *)(v301 + 8) & v305) != 0)) {
        break;
      }
      char v302 = 1;
      uint64_t v303 = 1;
      if (v306) {
        goto LABEL_420;
      }
    }
    if ((v304 & v305) == 0) {
      uint64_t v300 = v301;
    }
LABEL_420:
    id v307 = *(id *)v300;
    v308 = v307;
    if (v307)
    {
      uint64_t v309 = v307;
      if (os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v310 = &v907;
        if ((v907.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v310 = (std::string *)v907.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2804;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v310;
        _os_log_impl(&def_1E50E8, v309, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Device Hints: %s.", v914, 0x1Cu);
      }
    }
    if (SHIBYTE(v907.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v907.__r_.__value_.__l.__data_);
    }
  }
  CFArrayRef v879 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v880 = 257;
  sub_1D492C(v853, @"disallowed ports", (uint64_t)&v879);
  if (v879)
  {
    if (v849)
    {
      uint64_t v311 = sub_32A48(2);
      uint64_t v312 = sub_32A48(34);
      char v313 = 0;
      uint64_t v314 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v315 = *(void *)(v311 + 8);
      while (1)
      {
        uint64_t v316 = *(int *)&v914[4 * v314];
        char v317 = v313;
        if (((v315 & v316) != 0) != ((*(void *)(v312 + 8) & v316) != 0)) {
          break;
        }
        char v313 = 1;
        uint64_t v314 = 1;
        if (v317) {
          goto LABEL_436;
        }
      }
      if ((v315 & v316) == 0) {
        uint64_t v311 = v312;
      }
LABEL_436:
      id v318 = *(id *)v311;
      v319 = v318;
      if (v318)
      {
        long long v320 = v318;
        if (os_log_type_enabled(v320, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2813;
          *(_WORD *)&v914[18] = 2112;
          *(void *)&v914[20] = v879;
          _os_log_impl(&def_1E50E8, v320, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Disallowed Ports: %@.", v914, 0x1Cu);
        }
      }
    }
    sub_3B7EC();
    *(void *)v912 = &qword_64CC40;
    v912[8] = 0;
    unsigned int v321 = 0;
    v912[8] = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
    while (1)
    {
      unsigned int v322 = v879;
      if (v879) {
        unsigned int v322 = CFArrayGetCount(v879);
      }
      if (v321 >= v322) {
        break;
      }
      *(_DWORD *)v913 = 0;
      if ((sub_1D1B30(&v879, v321, v913) & 1) == 0)
      {
        uint64_t v727 = sub_32A48(13);
        v728 = sub_7D5E8(1, *(void **)v727, *(void *)(v727 + 8));
        v729 = v728;
        if (v728)
        {
          v730 = v728;
          if (os_log_type_enabled(v730, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2823;
            _os_log_impl(&def_1E50E8, v730, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationDisallowedPortsKey does not contain VirtualAudioPortIDs.\"", v914, 0x12u);
          }
        }
        v731 = __cxa_allocate_exception(0x10uLL);
        *(void *)v731 = &off_6414D8;
        v731[2] = 1852797029;
      }
      sub_3A8A8();
      uint64_t v323 = sub_33438(*(unsigned int *)v913);
      if (!v323)
      {
        uint64_t v732 = sub_32A48(13);
        v733 = sub_7D5E8(1, *(void **)v732, *(void *)(v732 + 8));
        v734 = v733;
        if (v733)
        {
          v735 = v733;
          if (os_log_type_enabled(v735, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2825;
            _os_log_impl(&def_1E50E8, v735, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: \"no virtual audio port object with the specified ID\"", v914, 0x12u);
          }
        }
        v736 = __cxa_allocate_exception(0x10uLL);
        *(void *)v736 = &off_6414D8;
        v736[2] = 560947818;
      }
      int v324 = *(std::__shared_weak_count **)(v323 + 96);
      if (v324
        && (uint64_t v325 = *(void *)(v323 + 88),
            atomic_fetch_add_explicit(&v324->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            (int v326 = std::__shared_weak_count::lock(v324)) != 0))
      {
        atomic_fetch_add_explicit(&v326->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        *(void *)v914 = v325;
        *(void *)&v914[8] = v326;
        sub_4636C(v326);
      }
      else
      {
        *(void *)&v914[8] = 0;
        *(void *)v914 = 0;
      }
      sub_144D44(v851, (unint64_t *)v914, (uint64_t)v914);
      if (*(void *)&v914[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v914[8]);
      }
      if (v324) {
        std::__shared_weak_count::__release_weak(v324);
      }
      ++v321;
    }
    sub_3BCAC(v912);
  }
  sub_21C8C(v914, "ignore ringer switch");
  uint64_t v327 = sub_2FF4BC(*v853, v914);
  unsigned __int16 v328 = v842;
  _DWORD *v842 = v327;
  *((unsigned char *)v328 + 4) = BYTE4(v327);
  if ((v914[23] & 0x80000000) != 0) {
    operator delete(*(void **)v914);
  }
  if (v849 && *((unsigned char *)v855 + 364))
  {
    uint64_t v329 = sub_32A48(2);
    uint64_t v330 = sub_32A48(34);
    char v331 = 0;
    uint64_t v332 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v333 = *(void *)(v329 + 8);
    while (1)
    {
      uint64_t v334 = *(int *)&v914[4 * v332];
      char v335 = v331;
      if (((v333 & v334) != 0) != ((*(void *)(v330 + 8) & v334) != 0)) {
        break;
      }
      char v331 = 1;
      uint64_t v332 = 1;
      if (v335) {
        goto LABEL_467;
      }
    }
    if ((v333 & v334) == 0) {
      uint64_t v329 = v330;
    }
LABEL_467:
    id v336 = *(id *)v329;
    uint64_t v337 = v336;
    if (v336)
    {
      int v338 = v336;
      if (os_log_type_enabled(v338, OS_LOG_TYPE_DEBUG))
      {
        if (!*((unsigned char *)v855 + 364)) {
          sub_7F218();
        }
        std::string::size_type v339 = "false";
        int v340 = *v842;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)v914 = 136315650;
        if (v340 == 1) {
          std::string::size_type v339 = "true";
        }
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2836;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v339;
        _os_log_impl(&def_1E50E8, v338, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Ignoring silent mode: %s.", v914, 0x1Cu);
      }
    }
  }
  CFArrayRef v877 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v878 = 257;
  sub_1D492C(v853, @"aggregated ports", (uint64_t)&v877);
  if (v877)
  {
    uint64_t v341 = sub_32A48(2);
    uint64_t v342 = sub_32A48(34);
    char v343 = 0;
    uint64_t v344 = 0;
    unint64_t v345 = (uint64_t *)(v847 + 82);
    *(void *)v914 = 0x100000002;
    uint64_t v346 = *(void *)(v341 + 8);
    while (1)
    {
      uint64_t v347 = *(int *)&v914[4 * v344];
      char v348 = v343;
      if (((v346 & v347) != 0) != ((*(void *)(v342 + 8) & v347) != 0)) {
        break;
      }
      char v343 = 1;
      uint64_t v344 = 1;
      if (v348) {
        goto LABEL_482;
      }
    }
    if ((v346 & v347) == 0) {
      uint64_t v341 = v342;
    }
LABEL_482:
    id v349 = *(id *)v341;
    uint64_t v350 = v349;
    if (v349)
    {
      uint64_t v351 = v349;
      if (os_log_type_enabled(v351, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2844;
        *(_WORD *)&v914[18] = 2112;
        *(void *)&v914[20] = v877;
        _os_log_impl(&def_1E50E8, v351, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Aggregated Ports: %@.", v914, 0x1Cu);
      }
    }
    for (unsigned int j = 0; ; ++j)
    {
      unsigned int v353 = v877;
      if (v877) {
        unsigned int v353 = CFArrayGetCount(v877);
      }
      if (j >= v353) {
        break;
      }
      *(_DWORD *)v912 = 0;
      if ((sub_1D1B30(&v877, j, v912) & 1) == 0)
      {
        uint64_t v737 = sub_32A48(13);
        v738 = sub_7D5E8(1, *(void **)v737, *(void *)(v737 + 8));
        v739 = v738;
        if (v738)
        {
          v740 = v738;
          if (os_log_type_enabled(v740, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2851;
            _os_log_impl(&def_1E50E8, v740, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationAggregatedPortsKey does not contain VirtualAudioPortIDs.\"", v914, 0x12u);
          }
        }
        v741 = __cxa_allocate_exception(0x10uLL);
        *(void *)v741 = &off_6414D8;
        v741[2] = 1852797029;
      }
      sub_6CB40(v345, *(unsigned int *)v912, *(int *)v912);
    }
  }
  CFArrayRef v875 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v876 = 257;
  sub_1D492C(v853, @"deaggregated ports", (uint64_t)&v875);
  if (v875)
  {
    uint64_t v354 = sub_32A48(2);
    uint64_t v355 = sub_32A48(34);
    char v356 = 0;
    uint64_t v357 = 0;
    v358 = (uint64_t *)(v847 + 88);
    *(void *)v914 = 0x100000002;
    uint64_t v359 = *(void *)(v354 + 8);
    while (1)
    {
      uint64_t v360 = *(int *)&v914[4 * v357];
      char v361 = v356;
      if (((v359 & v360) != 0) != ((*(void *)(v355 + 8) & v360) != 0)) {
        break;
      }
      char v356 = 1;
      uint64_t v357 = 1;
      if (v361) {
        goto LABEL_499;
      }
    }
    if ((v359 & v360) == 0) {
      uint64_t v354 = v355;
    }
LABEL_499:
    id v362 = *(id *)v354;
    v363 = v362;
    if (v362)
    {
      unint64_t v364 = v362;
      if (os_log_type_enabled(v364, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2862;
        *(_WORD *)&v914[18] = 2112;
        *(void *)&v914[20] = v875;
        _os_log_impl(&def_1E50E8, v364, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Deaggregated Ports: %@.", v914, 0x1Cu);
      }
    }
    for (unsigned int k = 0; ; ++k)
    {
      unsigned int v366 = v875;
      if (v875) {
        unsigned int v366 = CFArrayGetCount(v875);
      }
      if (k >= v366) {
        break;
      }
      *(_DWORD *)v912 = 0;
      if ((sub_1D1B30(&v875, k, v912) & 1) == 0)
      {
        uint64_t v742 = sub_32A48(13);
        v743 = sub_7D5E8(1, *(void **)v742, *(void *)(v742 + 8));
        v744 = v743;
        if (v743)
        {
          v745 = v743;
          if (os_log_type_enabled(v745, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2869;
            _os_log_impl(&def_1E50E8, v745, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationDeaggregatedPortsKey does not contain VirtualAudioPortIDs.\"", v914, 0x12u);
          }
        }
        v746 = __cxa_allocate_exception(0x10uLL);
        *(void *)v746 = &off_6414D8;
        v746[2] = 1852797029;
      }
      sub_6CB40(v358, *(unsigned int *)v912, *(int *)v912);
    }
  }
  unsigned int v874 = *v855;
  unsigned int v367 = sub_1D4800(*v853, @"category", &v874);
  if ((v367 & v849) == 1)
  {
    uint64_t v368 = sub_32A48(2);
    uint64_t v369 = sub_32A48(34);
    char v370 = 0;
    uint64_t v371 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v372 = *(void *)(v368 + 8);
    while (1)
    {
      uint64_t v373 = *(int *)&v914[4 * v371];
      char v374 = v370;
      if (((v372 & v373) != 0) != ((*(void *)(v369 + 8) & v373) != 0)) {
        break;
      }
      char v370 = 1;
      uint64_t v371 = 1;
      if (v374) {
        goto LABEL_516;
      }
    }
    if ((v372 & v373) == 0) {
      uint64_t v368 = v369;
    }
LABEL_516:
    id v375 = *(id *)v368;
    CFTypeRef v376 = v375;
    if (v375)
    {
      v377 = v375;
      if (os_log_type_enabled(v377, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v912, v874);
        uint64_t v378 = v912[23] >= 0 ? v912 : *(unsigned char **)v912;
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2882;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v378;
        _os_log_impl(&def_1E50E8, v377, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Category: %s.", v914, 0x1Cu);
        if ((v912[23] & 0x80000000) != 0) {
          operator delete(*(void **)v912);
        }
      }
    }
  }
  unsigned int v873 = v855[1];
  unsigned int v379 = sub_1D4800(*v853, @"mode", &v873);
  if ((v379 & v849) == 1)
  {
    uint64_t v380 = sub_32A48(2);
    uint64_t v381 = sub_32A48(34);
    char v382 = 0;
    uint64_t v383 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v384 = *(void *)(v380 + 8);
    while (1)
    {
      uint64_t v385 = *(int *)&v914[4 * v383];
      char v386 = v382;
      if (((v384 & v385) != 0) != ((*(void *)(v381 + 8) & v385) != 0)) {
        break;
      }
      char v382 = 1;
      uint64_t v383 = 1;
      if (v386) {
        goto LABEL_532;
      }
    }
    if ((v384 & v385) == 0) {
      uint64_t v380 = v381;
    }
LABEL_532:
    id v387 = *(id *)v380;
    uint64_t v388 = v387;
    if (v387)
    {
      uint64_t v389 = v387;
      if (os_log_type_enabled(v389, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v912, v873);
        v390 = v912[23] >= 0 ? v912 : *(unsigned char **)v912;
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2890;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v390;
        _os_log_impl(&def_1E50E8, v389, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Mode: %s.", v914, 0x1Cu);
        if ((v912[23] & 0x80000000) != 0) {
          operator delete(*(void **)v912);
        }
      }
    }
  }
  CFDictionaryRef v872 = 0;
  unsigned int v391 = sub_1D486C(*v853, @"aggregate device clock device", &v872);
  char v392 = (std::string *)(v847 + 54);
  if (v391)
  {
    if (v849)
    {
      uint64_t v393 = sub_32A48(2);
      uint64_t v394 = sub_32A48(34);
      char v395 = 0;
      uint64_t v396 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v397 = *(void *)(v393 + 8);
      while (1)
      {
        uint64_t v398 = *(int *)&v914[4 * v396];
        char v399 = v395;
        if (((v397 & v398) != 0) != ((*(void *)(v394 + 8) & v398) != 0)) {
          break;
        }
        char v395 = 1;
        uint64_t v396 = 1;
        if (v399) {
          goto LABEL_549;
        }
      }
      if ((v397 & v398) == 0) {
        uint64_t v393 = v394;
      }
LABEL_549:
      id v400 = *(id *)v393;
      uint64_t v401 = v400;
      if (v400)
      {
        uint64_t v402 = v400;
        if (os_log_type_enabled(v402, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2898;
          *(_WORD *)&v914[18] = 2112;
          *(void *)&v914[20] = v872;
          _os_log_impl(&def_1E50E8, v402, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Aggregate Clock Device: %@", v914, 0x1Cu);
        }
      }
    }
    CFDictionaryRef v403 = v872;
    if (v872) {
      CFRetain(v872);
    }
    sub_14E44(v912, v403);
    if (!*(void *)v912)
    {
      v811 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v811, "Could not construct");
    }
    sub_65F38((CFTypeID)v914, *(const __CFString **)v912);
    if (*(void *)v912) {
      CFRelease(*(CFTypeRef *)v912);
    }
    if (v914[24])
    {
      uint64_t v404 = v914[23];
      char v405 = v914[23];
      if (v914[23] < 0) {
        uint64_t v404 = *(void *)&v914[8];
      }
      if (!v404) {
        goto LABEL_594;
      }
      if (*((unsigned char *)v855 + 400))
      {
        std::string::operator=(v392, (const std::string *)v914);
      }
      else
      {
        if ((v914[23] & 0x80000000) != 0)
        {
          sub_21E8C(v392, *(void **)v914, *(unint64_t *)&v914[8]);
        }
        else
        {
          *(_OWORD *)&v392->__r_.__value_.__l.__data_ = *(_OWORD *)v914;
          v392->__r_.__value_.__r.__words[2] = *(void *)&v914[16];
        }
        *((unsigned char *)v855 + 400) = 1;
      }
      char v405 = v914[23];
      if (v914[24])
      {
LABEL_594:
        if (v405 < 0) {
          operator delete(*(void **)v914);
        }
      }
    }
  }
  if (!*((unsigned char *)v855 + 400) && v873 == 1768057203)
  {
    sub_21C8C(v914, "NetworkUplinkClock_UID");
    sub_FE638((uint64_t)v392, (long long *)v914);
    if ((v914[23] & 0x80000000) != 0) {
      operator delete(*(void **)v914);
    }
  }
  int v422 = v902;
  *(_DWORD *)v913 = 0;
  if (sub_1D4800(*v853, @"optional output mode", v913))
  {
    if (v849)
    {
      uint64_t v423 = sub_32A48(2);
      uint64_t v424 = sub_32A48(34);
      char v425 = 0;
      uint64_t v426 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v427 = *(void *)(v423 + 8);
      while (1)
      {
        uint64_t v428 = *(int *)&v914[4 * v426];
        char v429 = v425;
        if (((v427 & v428) != 0) != ((*(void *)(v424 + 8) & v428) != 0)) {
          break;
        }
        char v425 = 1;
        uint64_t v426 = 1;
        if (v429) {
          goto LABEL_611;
        }
      }
      if ((v427 & v428) == 0) {
        uint64_t v423 = v424;
      }
LABEL_611:
      id v433 = *(id *)v423;
      char v434 = v433;
      if (v433)
      {
        long long v435 = v433;
        if (os_log_type_enabled(v435, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(v912, *(unsigned int *)v913);
          __int16 v436 = v912[23] >= 0 ? v912 : *(unsigned char **)v912;
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2569;
          *(_WORD *)&v914[18] = 2080;
          *(void *)&v914[20] = v436;
          _os_log_impl(&def_1E50E8, v435, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Optional Output Mode: %s", v914, 0x1Cu);
          if ((v912[23] & 0x80000000) != 0) {
            operator delete(*(void **)v912);
          }
        }
      }
    }
    unsigned int v432 = *(_DWORD *)v913 & 0xFFFFFF00;
    int v431 = v913[0];
    uint64_t v430 = 0x100000000;
  }
  else if (v422)
  {
    uint64_t v430 = 0x100000000;
    int v431 = 102;
    unsigned int v432 = 1768776704;
  }
  else
  {
    int v431 = 0;
    unsigned int v432 = 0;
    uint64_t v430 = 0;
  }
  v871[0] = __PAIR64__(v873, v874);
  v871[1] = v430 | v432 | v431;
  CFDictionaryRef v869 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v870 = 257;
  sub_1D49BC(v853, @"initiation context", (uint64_t)&v869);
  if (!v869)
  {
    *(_DWORD *)v914 = v839;
    memset(&v914[8], 0, 24);
    *(void *)&v914[32] = 0x756E64656175746FLL;
    goto LABEL_664;
  }
  int v437 = sub_F0BCC(v871, &v869);
  if (v437 != 1635087471)
  {
    sub_EFD34((std::string *)v912, &v869, v437);
    *(_DWORD *)v914 = v437;
    if ((v912[23] & 0x80000000) != 0)
    {
      sub_21E8C(&v914[8], *(void **)v912, *(unint64_t *)&v912[8]);
      *(void *)&v914[32] = 0x756E64656175746FLL;
      if ((v912[23] & 0x80000000) != 0) {
        operator delete(*(void **)v912);
      }
    }
    else
    {
      *(_OWORD *)&v914[8] = *(_OWORD *)v912;
      *(void *)&v914[24] = *(void *)&v912[16];
      *(void *)&v914[32] = 0x756E64656175746FLL;
    }
    if (!sub_F11C4(v437)) {
      goto LABEL_664;
    }
    if (v869)
    {
      *(_DWORD *)v912 = 1970168933;
      if (CFDictionaryGetCount(v869))
      {
        int v447 = CFDictionaryContainsKey(v869, @"initiation call direction");
        if (v447 | CFDictionaryContainsKey(v869, @"activation call direction"))
        {
          if (v447) {
            CFStringRef v448 = @"initiation call direction";
          }
          else {
            CFStringRef v448 = @"activation call direction";
          }
          sub_1D4800(v869, v448, v912);
        }
      }
      *(_DWORD *)&v914[36] = *(_DWORD *)v912;
      if (v869)
      {
        *(_DWORD *)v913 = 1635087471;
        if (!CFDictionaryGetCount(v869))
        {
LABEL_648:
          *(_DWORD *)&v914[32] = *(_DWORD *)v913;
          goto LABEL_664;
        }
        int v449 = CFDictionaryContainsKey(v869, @"initiation accessibility preference");
        if (v449 | CFDictionaryContainsKey(v869, @"activation accessibility preference"))
        {
          if (v449) {
            CFStringRef v450 = @"initiation accessibility preference";
          }
          else {
            CFStringRef v450 = @"activation accessibility preference";
          }
          sub_1D4800(v869, v450, v913);
          goto LABEL_648;
        }
        v828 = (os_log_t *)sub_32A48(13);
        v829 = *v828;
        if (*v828 && os_log_type_enabled(*v828, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v912 = 136315394;
          *(void *)&v912[4] = "VirtualAudio_Utilities.cpp";
          *(_WORD *)&v912[12] = 1024;
          *(_DWORD *)&v912[14] = 564;
          _os_log_impl(&def_1E50E8, v829, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Route activation description does not contain accessibility preference\"", v912, 0x12u);
        }
        v819 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v819, "Route activation description does not contain accessibility preference");
LABEL_1365:
      }
      v820 = (os_log_t *)sub_32A48(13);
      v821 = *v820;
      if (*v820 && os_log_type_enabled(*v820, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v912 = 136315394;
        *(void *)&v912[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&v912[12] = 1024;
        *(_DWORD *)&v912[14] = 556;
        _os_log_impl(&def_1E50E8, v821, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v912, 0x12u);
      }
    }
    else
    {
      v817 = (os_log_t *)sub_32A48(13);
      v818 = *v817;
      if (*v817 && os_log_type_enabled(*v817, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v912 = 136315394;
        *(void *)&v912[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&v912[12] = 1024;
        *(_DWORD *)&v912[14] = 579;
        _os_log_impl(&def_1E50E8, v818, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v912, 0x12u);
      }
    }
    v819 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v819, "Precondition failure.");
    goto LABEL_1365;
  }
  uint64_t v438 = (uint64_t)v848;
  int v439 = *((_DWORD *)v848 + 60);
  if (v439 == v839)
  {
    uint64_t v440 = sub_32A48(2);
    uint64_t v441 = sub_32A48(34);
    char v442 = 0;
    uint64_t v443 = 0;
    *(void *)v912 = 0x100000002;
    uint64_t v444 = *(void *)(v440 + 8);
    while (1)
    {
      uint64_t v445 = *(int *)&v912[4 * v443];
      char v446 = v442;
      if (((v444 & v445) != 0) != ((*(void *)(v441 + 8) & v445) != 0)) {
        break;
      }
      char v442 = 1;
      uint64_t v443 = 1;
      if (v446) {
        goto LABEL_651;
      }
    }
    if ((v444 & v445) == 0) {
      uint64_t v440 = v441;
    }
LABEL_651:
    id v451 = *(id *)v440;
    v452 = v451;
    if (v451)
    {
      v453 = v451;
      if (os_log_type_enabled(v453, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v913, 0x6175746Fu);
        uint64_t v454 = v913[23] >= 0 ? v913 : *(unsigned char **)v913;
        *(_DWORD *)v912 = 136315650;
        *(void *)&v912[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v912[12] = 1024;
        *(_DWORD *)&v912[14] = 3220;
        *(_WORD *)&v912[18] = 2080;
        *(void *)&v912[20] = v454;
        _os_log_impl(&def_1E50E8, v453, OS_LOG_TYPE_ERROR, "%25s:%-5d Current trigger is '%s', but previous trigger is unknown", v912, 0x1Cu);
        if ((v913[23] & 0x80000000) != 0) {
          operator delete(*(void **)v913);
        }
      }
    }
    uint64_t v438 = (uint64_t)v848;
    int v439 = *((_DWORD *)v848 + 60);
  }
  *(_DWORD *)v914 = v439;
  if (*(char *)(v438 + 271) < 0)
  {
    sub_21E8C(&v914[8], *(void **)(v438 + 248), *(void *)(v438 + 256));
  }
  else
  {
    *(_OWORD *)&v914[8] = *(_OWORD *)(v438 + 248);
    *(void *)&v914[24] = *(void *)(v438 + 264);
  }
  *(void *)&v914[32] = v848[34];
LABEL_664:
  v455 = v855;
  v855[38] = *(_DWORD *)v914;
  if (*((char *)v455 + 183) < 0) {
    operator delete(*(void **)v847);
  }
  uint64_t v456 = v847;
  *(_OWORD *)v847 = *(_OWORD *)&v914[8];
  uint64_t v457 = *(void *)&v914[32];
  *((void *)v456 + 2) = *(void *)&v914[24];
  *((void *)v455 + 23) = v457;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    CFDictionaryRef v458 = *v853;
    if (*v853) {
      CFRetain(*v853);
    }
    sub_22084(v913, v458);
    if (!*(void *)v913)
    {
      v812 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v812, "Could not construct");
    }
    *(void *)v914 = 0;
    sub_7D674(&v911, *(const __CFDictionary **)v913, "persistent route", v914);
    if (*(void *)v914) {
      CFRelease(*(CFTypeRef *)v914);
    }
    sub_F3710((uint64_t)v914, (const __CFDictionary **)&v911);
    sub_7E22C(v836);
    int v459 = v855;
    *((_OWORD *)v855 + 12) = *(_OWORD *)v914;
    *((void *)v459 + 26) = *(void *)&v914[16];
    memset(v914, 0, 24);
    sub_7E22C((void **)v459 + 27);
    *(_OWORD *)(v459 + 54) = *(_OWORD *)&v914[24];
    *((void *)v459 + 29) = v915;
    uint64_t v915 = 0;
    *(void *)&v914[32] = 0;
    *(void *)&v914[24] = 0;
    sub_2FF6EC((uint64_t)(v459 + 60), (uint64_t *)&v916);
    sub_2FF6EC((uint64_t)v834, v921);
    sub_2FF6EC((uint64_t)v835, v922);
    sub_7E020((char *)v922[2]);
    CFDictionaryRef v460 = (void *)v922[0];
    v922[0] = 0;
    if (v460) {
      operator delete(v460);
    }
    sub_7E020((char *)v921[2]);
    uint64_t v461 = (void *)v921[0];
    v921[0] = 0;
    if (v461) {
      operator delete(v461);
    }
    sub_7E020(v918);
    v462 = v916;
    v916 = 0;
    if (v462) {
      operator delete(v462);
    }
    *(void *)v912 = &v914[24];
    sub_4EDB8((void ***)v912);
    *(void *)v912 = v914;
    sub_4EDB8((void ***)v912);
    if (v849 && (*((void *)v855 + 33) || *((void *)v855 + 38) || *((void *)v855 + 43)))
    {
      uint64_t v463 = sub_32A48(2);
      uint64_t v464 = sub_32A48(34);
      char v465 = 0;
      uint64_t v466 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v467 = *(void *)(v463 + 8);
      while (1)
      {
        uint64_t v468 = *(int *)&v914[4 * v466];
        char v469 = v465;
        if (((v467 & v468) != 0) != ((*(void *)(v464 + 8) & v468) != 0)) {
          break;
        }
        char v465 = 1;
        uint64_t v466 = 1;
        if (v469) {
          goto LABEL_688;
        }
      }
      if ((v467 & v468) == 0) {
        uint64_t v463 = v464;
      }
LABEL_688:
      id v470 = *(id *)v463;
      long long v471 = v470;
      if (v470)
      {
        uint64_t v472 = v470;
        if (os_log_type_enabled(v472, OS_LOG_TYPE_DEFAULT))
        {
          sub_18EEB8((std::string *)v912, v836);
          std::string v473 = v912[23] >= 0 ? v912 : *(unsigned char **)v912;
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 2933;
          *(_WORD *)&v914[18] = 2080;
          *(void *)&v914[20] = v473;
          _os_log_impl(&def_1E50E8, v472, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Persistent route info: %s.", v914, 0x1Cu);
          if ((v912[23] & 0x80000000) != 0) {
            operator delete(*(void **)v912);
          }
        }
      }
    }
    if (v911.__r_.__value_.__r.__words[0]) {
      CFRelease(v911.__r_.__value_.__l.__data_);
    }
    if (*(void *)v913) {
      CFRelease(*(CFTypeRef *)v913);
    }
  }
  CFNumberRef v474 = v855 + 185;
  unsigned int v475 = sub_1D4800(*v853, @"echo cancelled input", v855 + 185);
  if ((v475 & v849) == 1)
  {
    uint64_t v476 = sub_32A48(2);
    uint64_t v477 = sub_32A48(34);
    char v478 = 0;
    uint64_t v479 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v480 = *(void *)(v476 + 8);
    while (1)
    {
      uint64_t v481 = *(int *)&v914[4 * v479];
      char v482 = v478;
      if (((v480 & v481) != 0) != ((*(void *)(v477 + 8) & v481) != 0)) {
        break;
      }
      char v478 = 1;
      uint64_t v479 = 1;
      if (v482) {
        goto LABEL_708;
      }
    }
    if ((v480 & v481) == 0) {
      uint64_t v476 = v477;
    }
LABEL_708:
    id v483 = *(id *)v476;
    v484 = v483;
    if (v483)
    {
      v485 = v483;
      if (os_log_type_enabled(v485, OS_LOG_TYPE_DEFAULT))
      {
        int v486 = *v474;
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 2941;
        *(_WORD *)&v914[18] = 1024;
        *(_DWORD *)&v914[20] = v486;
        _os_log_impl(&def_1E50E8, v485, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Echo cancelled input: %u", v914, 0x18u);
      }
    }
  }
  LOBYTE(v867) = 0;
  char v868 = 0;
  sub_F2720(v866, (uint64_t)v841);
  sub_F2778((uint64_t)v912, (uint64_t)v871, (uint64_t)v866, *v474, (uint64_t)&v867);
  if (v866[16]) {
    sub_80594((uint64_t)v866);
  }
  *(_OWORD *)v855 = *(_OWORD *)v912;
  if (v844 != (uint64_t **)&v912[16]) {
    sub_C6650(v844, *(void **)&v912[16], &v912[24]);
  }
  CFArrayRef v864 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v865 = 257;
  if (CFDictionaryContainsKey(*v853, @"overridden ports"))
  {
    sub_1D492C(v853, @"overridden ports", (uint64_t)&v864);
    if (v864 && CFArrayGetCount(v864))
    {
      if (v849)
      {
        uint64_t v487 = sub_32A48(2);
        uint64_t v488 = sub_32A48(34);
        char v489 = 0;
        uint64_t v490 = 0;
        *(void *)v914 = 0x100000002;
        uint64_t v491 = *(void *)(v487 + 8);
        while (1)
        {
          uint64_t v492 = *(int *)&v914[4 * v490];
          char v493 = v489;
          if (((v491 & v492) != 0) != ((*(void *)(v488 + 8) & v492) != 0)) {
            break;
          }
          char v489 = 1;
          uint64_t v490 = 1;
          if (v493) {
            goto LABEL_733;
          }
        }
        if ((v491 & v492) == 0) {
          uint64_t v487 = v488;
        }
LABEL_733:
        id v498 = *(id *)v487;
        uint64_t v499 = v498;
        if (v498)
        {
          v500 = v498;
          if (os_log_type_enabled(v500, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v914 = 136315650;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 2960;
            *(_WORD *)&v914[18] = 2112;
            *(void *)&v914[20] = v864;
            _os_log_impl(&def_1E50E8, v500, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Overridden Ports: %@.", v914, 0x1Cu);
          }
        }
      }
      sub_3B7EC();
      *(void *)v913 = &qword_64CC40;
      v913[8] = 0;
      unsigned int v501 = 0;
      v913[8] = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
      while (1)
      {
        unsigned int v502 = v864;
        if (v864) {
          unsigned int v502 = CFArrayGetCount(v864);
        }
        if (v501 >= v502) {
          break;
        }
        LODWORD(v911.__r_.__value_.__l.__data_) = 0;
        if ((sub_1D1B30(&v864, v501, &v911) & 1) == 0)
        {
          uint64_t v752 = sub_32A48(13);
          v753 = sub_7D5E8(1, *(void **)v752, *(void *)(v752 + 8));
          v754 = v753;
          if (v753)
          {
            v755 = v753;
            if (os_log_type_enabled(v755, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v914 = 136315394;
              *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v914[12] = 1024;
              *(_DWORD *)&v914[14] = 2970;
              _os_log_impl(&def_1E50E8, v755, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey does not contain VirtualAudioPortIDs.\"", v914, 0x12u);
            }
          }
          v756 = __cxa_allocate_exception(0x10uLL);
          *(void *)v756 = &off_6414D8;
          v756[2] = 1852797029;
        }
        sub_3A8A8();
        uint64_t v503 = sub_33438(v911.__r_.__value_.__l.__data_);
        uint64_t v504 = v503;
        if (!v503)
        {
          uint64_t v757 = sub_32A48(13);
          v758 = sub_7D5E8(1, *(void **)v757, *(void *)(v757 + 8));
          v759 = v758;
          if (v758)
          {
            v760 = v758;
            if (os_log_type_enabled(v760, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v914 = 136315394;
              *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v914[12] = 1024;
              *(_DWORD *)&v914[14] = 2973;
              _os_log_impl(&def_1E50E8, v760, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: \"no virtual audio port object with the specified ID\"", v914, 0x12u);
            }
          }
          v761 = __cxa_allocate_exception(0x10uLL);
          *(void *)v761 = &off_6414D8;
          v761[2] = 560947818;
        }
        v505 = (void *)*v195;
        if (*v195 != (void)v854)
        {
          while (v505[4] != v503)
          {
            v506 = (void *)v505[1];
            if (v506)
            {
              do
              {
                v507 = v506;
                v506 = (void *)*v506;
              }
              while (v506);
            }
            else
            {
              do
              {
                v507 = (void *)v505[2];
                BOOL v602 = *v507 == (void)v505;
                v505 = v507;
              }
              while (!v602);
            }
            v505 = v507;
            if (v507 == (void *)v854) {
              goto LABEL_754;
            }
          }
          if (v505 != (void *)v854)
          {
            uint64_t v785 = sub_32A48(13);
            v786 = sub_7D5E8(1, *(void **)v785, *(void *)(v785 + 8));
            v787 = v786;
            if (v786)
            {
              v788 = v786;
              if (os_log_type_enabled(v788, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v914 = 136315394;
                *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v914[12] = 1024;
                *(_DWORD *)&v914[14] = 2978;
                _os_log_impl(&def_1E50E8, v788, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Invalid use of route configuration! Cannot override to a port that is set as unroutable!\"", v914, 0x12u);
              }
            }
            v789 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v789, "Invalid use of route configuration! Cannot override to a port that is set as unroutable!");
          }
        }
LABEL_754:
        if (!sub_2FF7C4(v855))
        {
          uint64_t v508 = *(void *)(v504 + 88);
          v509 = *(std::__shared_weak_count **)(v504 + 96);
          *(void *)v914 = v508;
          *(void *)&v914[8] = v509;
          if (v509) {
            atomic_fetch_add_explicit(&v509->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          sub_13651C(v846, (unint64_t *)v914, (uint64_t *)v914);
          if (v509) {
            std::__shared_weak_count::__release_weak(v509);
          }
        }
        ++v501;
      }
      sub_3BCAC(v913);
    }
  }
  else
  {
    if (!*v853)
    {
      uint64_t v813 = sub_32A48(13);
      v814 = sub_7D5E8(1, *(void **)v813, *(void *)(v813 + 8));
      v815 = v814;
      if (v814 && os_log_type_enabled(v814, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v914 = 136315394;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 901;
        _os_log_impl(&def_1E50E8, v815, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v914, 0x12u);
      }

      v816 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v816, "Precondition failure.");
    }
    if (CFDictionaryGetCount(*v853) == 1
      && CFDictionaryContainsKey(*v853, @"voice processing configuration")
      && !sub_2FF7C4(v855))
    {
      uint64_t v494 = (uint64_t)v848[14];
      *(void *)v913 = v913;
      *(void *)&v913[8] = v913;
      *(void *)&v913[16] = 0;
      sub_14D92C((uint64_t)v914, v494, (uint64_t)v913);
      v495 = v855;
      sub_10E118(*((void **)v855 + 3));
      v496 = *(void **)&v914[8];
      v495[2] = *(void *)v914;
      v495[3] = v496;
      uint64_t v497 = *(void *)&v914[16];
      v495[4] = *(void *)&v914[16];
      if (v497)
      {
        v496[2] = v833;
        *(void *)v914 = &v914[8];
        *(void *)&v914[8] = 0;
        *(void *)&v914[16] = 0;
        v496 = 0;
      }
      else
      {
        *v846 = v833;
      }
      sub_10E118(v496);
      sub_8108((uint64_t *)v913);
    }
  }
  CFTypeRef v510 = v855 + 158;
  if (v902 && !*((_DWORD *)v848 + 100)) {
    sub_280454((uint64_t)(v855 + 158));
  }
  if (*v510)
  {
    uint64_t v511 = v855;
    *((unsigned char *)v855 + 370) = 1;
    *((unsigned char *)v511 + 371) = *((unsigned char *)v511 + 636);
    if (*((void *)v511 + 81))
    {
      sub_144B34(v851, (unint64_t *)v855 + 80, (uint64_t *)v855 + 80);
      v512 = (std::__shared_weak_count *)*((void *)v855 + 83);
      if (v512)
      {
        v513 = std::__shared_weak_count::lock(v512);
        if (v513)
        {
          uint64_t v514 = v513;
          uint64_t v515 = *((void *)v855 + 82);
          if (v515) {
            sub_6CB40(v850, *(_DWORD *)(v515 + 144), *(_DWORD *)(v515 + 144));
          }
          sub_4636C(v514);
        }
      }
    }
    if (*v510)
    {
      id v516 = *(id *)sub_32A48(2);
      uint64_t v517 = v516;
      if (v516)
      {
        v518 = v516;
        if (os_log_type_enabled(v518, OS_LOG_TYPE_DEFAULT))
        {
          sub_2804B8((std::string *)v913, (uint64_t)v510);
          v519 = v913[23] >= 0 ? v913 : *(unsigned char **)v913;
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 3022;
          *(_WORD *)&v914[18] = 2080;
          *(void *)&v914[20] = v519;
          _os_log_impl(&def_1E50E8, v518, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Colistening state: %s", v914, 0x1Cu);
          if ((v913[23] & 0x80000000) != 0) {
            operator delete(*(void **)v913);
          }
        }
      }
    }
  }
  v520 = v855 + 154;
  v855[154] = v867;
  *((unsigned char *)v520 + 4) = v868;
  CFDictionaryRef v863 = 0;
  if (sub_1D48CC(*v853, @"multichannel mode preferences", &v863))
  {
    CFDictionaryRef v521 = v863;
    if (v863) {
      CFRetain(v863);
    }
    sub_68780(v914, v521);
    v522 = (const void *)*((void *)v855 + 78);
    v523 = *(const void **)v914;
    *((void *)v855 + 78) = *(void *)v914;
    if (v523) {
      CFRetain(v523);
    }
    if (v522) {
      CFRelease(v522);
    }
    if (*(void *)v914) {
      CFRelease(*(CFTypeRef *)v914);
    }
  }
  if (v869)
  {
    unsigned int v524 = 1886545251;
    int v525 = v855[38];
    if (sub_F104C(v525))
    {
      v526 = v844;
      switch(v525)
      {
        case 1651795060:
        case 1751414371:
          sub_6CB40((uint64_t *)v844, 0x70687062u, 1885892706);
          int v525 = v855[38];
          v526 = v844;
          break;
        case 1752396914:
          if (v855[1] == 1987208039) {
            v855[1] = 1986556788;
          }
          goto LABEL_804;
        case 845504882:
          goto LABEL_803;
      }
      goto LABEL_804;
    }
    v526 = v844;
    if (v525 == 1768764005)
    {
LABEL_803:
      sub_14DE4C(v526, 0x70726563u);
      v526 = v844;
      unsigned int v524 = 1886613611;
      goto LABEL_804;
    }
    if (v525 == 1768780647)
    {
LABEL_804:
      sub_6CB40((uint64_t *)v526, v524, v524);
      goto LABEL_805;
    }
    if (sub_F11C4(v525))
    {
      sub_2FFA14((uint64_t)v848, (uint64_t)v855);
    }
    else if (v525 != v839)
    {
      id v691 = *(id *)sub_32A48(13);
      v692 = v691;
      if (v691)
      {
        v693 = v691;
        if (os_log_type_enabled(v693, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v913, v855[38]);
          v694 = v913[23] >= 0 ? v913 : *(unsigned char **)v913;
          *(_DWORD *)v914 = 136315650;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 3672;
          *(_WORD *)&v914[18] = 2080;
          *(void *)&v914[20] = v694;
          _os_log_impl(&def_1E50E8, v693, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid route activation trigger - %s\"", v914, 0x1Cu);
          if ((v913[23] & 0x80000000) != 0) {
            operator delete(*(void **)v913);
          }
        }
      }
    }
  }
LABEL_805:
  char v862 = 0;
  if (sub_1D4750(*v853, @"default to speaker", &v862))
  {
    if (*v855 == 1668509810 || *v855 == 1668309362)
    {
      if (v862) {
        sub_6CB40((uint64_t *)v844, 0x70726563u, 1886545251);
      }
    }
    else
    {
      uint64_t v527 = sub_32A48(2);
      uint64_t v528 = sub_32A48(34);
      char v529 = 0;
      uint64_t v530 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v531 = *(void *)(v527 + 8);
      while (1)
      {
        uint64_t v532 = *(int *)&v914[4 * v530];
        char v533 = v529;
        if (((v531 & v532) != 0) != ((*(void *)(v528 + 8) & v532) != 0)) {
          break;
        }
        char v529 = 1;
        uint64_t v530 = 1;
        if (v533) {
          goto LABEL_816;
        }
      }
      if ((v531 & v532) == 0) {
        uint64_t v527 = v528;
      }
LABEL_816:
      id v534 = *(id *)v527;
      v535 = v534;
      if (v534)
      {
        v536 = v534;
        if (os_log_type_enabled(v536, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v914 = 136315394;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 3060;
          _os_log_impl(&def_1E50E8, v536, OS_LOG_TYPE_ERROR, "%25s:%-5d kVirtualAudioPlugInRouteConfigurationDefaultToSpeakerKey used with wrong category", v914, 0x12u);
        }
      }
    }
  }
  char v861 = 0;
  unsigned int v537 = sub_1D4750(*v853, @"disallow hfp", &v861);
  v538 = (uint64_t *)v844;
  if (v537)
  {
    int v539 = *v855;
    if (*v855 == 1668309362 || v539 == 1668509810 || v539 == 1668441443)
    {
      if (v861)
      {
        sub_6CB40((uint64_t *)v844, 0x706D6274u, 1886216820);
        sub_6CB40(v538, 0x70687062u, 1885892706);
      }
    }
    else
    {
      uint64_t v540 = sub_32A48(2);
      uint64_t v541 = sub_32A48(34);
      char v542 = 0;
      uint64_t v543 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v544 = *(void *)(v540 + 8);
      while (1)
      {
        uint64_t v545 = *(int *)&v914[4 * v543];
        char v546 = v542;
        if (((v544 & v545) != 0) != ((*(void *)(v541 + 8) & v545) != 0)) {
          break;
        }
        char v542 = 1;
        uint64_t v543 = 1;
        if (v546) {
          goto LABEL_833;
        }
      }
      if ((v544 & v545) == 0) {
        uint64_t v540 = v541;
      }
LABEL_833:
      id v547 = *(id *)v540;
      v548 = v547;
      if (v547)
      {
        v549 = v547;
        if (os_log_type_enabled(v549, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v914 = 136315394;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 3081;
          _os_log_impl(&def_1E50E8, v549, OS_LOG_TYPE_ERROR, "%25s:%-5d kVirtualAudioPlugInRouteConfigurationDisallowHFPKey used with wrong category", v914, 0x12u);
        }
      }
    }
  }
  sub_21C8C(v914, "decoupled input/output");
  unint64_t v550 = sub_2FF4BC(*v853, v914);
  if ((v914[23] & 0x80000000) != 0) {
    operator delete(*(void **)v914);
  }
  if (!HIDWORD(v550))
  {
    if (*v855 != 1668309362) {
      goto LABEL_868;
    }
    int v551 = 1684366192;
    if (v855[1] != 1768778864) {
      goto LABEL_868;
    }
    goto LABEL_867;
  }
  if (!v550) {
    goto LABEL_866;
  }
  unsigned int v553 = *v855;
  int v552 = v855[1];
  if (*v855 != 1667330668 && v553 != 1668309362)
  {
    uint64_t v822 = sub_32A48(13);
    v823 = sub_7D5E8(1, *(void **)v822, *(void *)(v822 + 8));
    v824 = v823;
    if (v823)
    {
      v825 = v823;
      if (os_log_type_enabled(v825, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v913, v553);
        v826 = v913[23] >= 0 ? v913 : *(unsigned char **)v913;
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 3099;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v826;
        _os_log_impl(&def_1E50E8, v825, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInRouteConfigurationDecoupledInputOutputKey can only be true when category is \" \"kVirtualAudioPlugInRoutingCategoryPlayAndRecord \" \"or kVirtualAudioPlugInRoutingCategoryEARCLoopback; currently requested category is %s.\"",
          v914,
          0x1Cu);
        if ((v913[23] & 0x80000000) != 0) {
          operator delete(*(void **)v913);
        }
      }
    }
    v827 = __cxa_allocate_exception(0x10uLL);
    *(void *)v827 = &off_6414D8;
    v827[2] = 1852797029;
  }
  if (v552 <= 1987077986)
  {
    if (v552 == 1768057203) {
      goto LABEL_854;
    }
    int v554 = 1919776355;
  }
  else
  {
    if (v552 == 1987077987 || v552 == 1987081839)
    {
LABEL_854:
      if (v849)
      {
        uint64_t v555 = sub_32A48(2);
        uint64_t v556 = sub_32A48(34);
        char v557 = 0;
        uint64_t v558 = 0;
        *(void *)v914 = 0x100000002;
        uint64_t v559 = *(void *)(v555 + 8);
        while (1)
        {
          uint64_t v560 = *(int *)&v914[4 * v558];
          char v561 = v557;
          if (((v559 & v560) != 0) != ((*(void *)(v556 + 8) & v560) != 0)) {
            break;
          }
          char v557 = 1;
          uint64_t v558 = 1;
          if (v561) {
            goto LABEL_861;
          }
        }
        if ((v559 & v560) == 0) {
          uint64_t v555 = v556;
        }
LABEL_861:
        id v562 = *(id *)v555;
        v563 = v562;
        if (v562)
        {
          v564 = v562;
          if (os_log_type_enabled(v564, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v914 = 136315394;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 3106;
            _os_log_impl(&def_1E50E8, v564, OS_LOG_TYPE_DEBUG, "%25s:%-5d Overriding unsupported StreamCouplingPolicy::DecoupleInputOutput to StreamCouplingPolicy::CoupleInputOutput.", v914, 0x12u);
          }
        }
      }
LABEL_866:
      int v551 = 1668248944;
      goto LABEL_867;
    }
    int v554 = 1987081833;
  }
  int v551 = 1684366192;
  if (v552 == v554) {
    goto LABEL_854;
  }
LABEL_867:
  v855[36] = v551;
LABEL_868:
  CFArrayRef v859 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v860 = 257;
  sub_1D492C(v853, @"allowed port types", (uint64_t)&v859);
  if (!v859) {
    goto LABEL_967;
  }
  if (v849)
  {
    uint64_t v565 = sub_32A48(2);
    uint64_t v566 = sub_32A48(34);
    char v567 = 0;
    uint64_t v568 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v569 = *(void *)(v565 + 8);
    while (1)
    {
      uint64_t v570 = *(int *)&v914[4 * v568];
      char v571 = v567;
      if (((v569 & v570) != 0) != ((*(void *)(v566 + 8) & v570) != 0)) {
        break;
      }
      char v567 = 1;
      uint64_t v568 = 1;
      if (v571) {
        goto LABEL_876;
      }
    }
    if ((v569 & v570) == 0) {
      uint64_t v565 = v566;
    }
LABEL_876:
    id v572 = *(id *)v565;
    v573 = v572;
    if (v572)
    {
      v574 = v572;
      if (os_log_type_enabled(v574, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 3125;
        *(_WORD *)&v914[18] = 2112;
        *(void *)&v914[20] = v859;
        _os_log_impl(&def_1E50E8, v574, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Allowed Port Types: %@.", v914, 0x1Cu);
      }
    }
  }
  for (unsigned int m = 0; ; ++m)
  {
    unsigned int v576 = v859;
    if (v859) {
      unsigned int v576 = CFArrayGetCount(v859);
    }
    if (m >= v576) {
      break;
    }
    *(_DWORD *)v913 = 0;
    if ((sub_1D1B30(&v859, m, v913) & 1) == 0)
    {
      uint64_t v747 = sub_32A48(13);
      v748 = sub_7D5E8(1, *(void **)v747, *(void *)(v747 + 8));
      v749 = v748;
      if (v748)
      {
        v750 = v748;
        if (os_log_type_enabled(v750, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v914 = 136315394;
          *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v914[12] = 1024;
          *(_DWORD *)&v914[14] = 3132;
          _os_log_impl(&def_1E50E8, v750, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"The array specified by kVirtualAudioPlugInRouteConfigurationAllowedPortTypesKey does not contain VirtualAudioPortType.\"", v914, 0x12u);
        }
      }
      v751 = __cxa_allocate_exception(0x10uLL);
      *(void *)v751 = &off_6414D8;
      v751[2] = 1852797029;
    }
    sub_6CB40(v850, *(unsigned int *)v913, *(int *)v913);
  }
  v577 = v848[14];
  v578 = &v857;
  v857 = 0;
  uint64_t v858 = 0;
  v856 = (uint64_t *)&v857;
  uint64_t v579 = *v837;
  if (!*v837) {
    goto LABEL_898;
  }
  v580 = v837;
  do
  {
    unsigned int v581 = *(_DWORD *)(v579 + 28);
    BOOL v582 = v581 >= 0x70687042;
    if (v581 >= 0x70687042) {
      v583 = (uint64_t *)v579;
    }
    else {
      v583 = (uint64_t *)(v579 + 8);
    }
    if (v582) {
      v580 = (void *)v579;
    }
    uint64_t v579 = *v583;
  }
  while (*v583);
  if (v580 == v837 || *((_DWORD *)v580 + 7) > 0x70687042u) {
LABEL_898:
  }
    v580 = v837;
  uint64_t v584 = *v838;
  if (!*v838) {
    goto LABEL_920;
  }
  v585 = v838;
  uint64_t v586 = *v838;
  do
  {
    unsigned int v587 = *(_DWORD *)(v586 + 28);
    BOOL v588 = v587 >= 0x70687062;
    if (v587 >= 0x70687062) {
      v589 = (uint64_t *)v586;
    }
    else {
      v589 = (uint64_t *)(v586 + 8);
    }
    if (v588) {
      v585 = (void *)v586;
    }
    uint64_t v586 = *v589;
  }
  while (*v589);
  if (v585 != v838 && *((_DWORD *)v585 + 7) < 0x70687063u) {
    goto LABEL_958;
  }
  v590 = v838;
  do
  {
    unsigned int v591 = *(_DWORD *)(v584 + 28);
    BOOL v592 = v591 >= 0x706D6274;
    if (v591 >= 0x706D6274) {
      v593 = (uint64_t *)v584;
    }
    else {
      v593 = (uint64_t *)(v584 + 8);
    }
    if (v592) {
      v590 = (void *)v584;
    }
    uint64_t v584 = *v593;
  }
  while (*v593);
  if (v590 == v838 || *((_DWORD *)v590 + 7) > 0x706D6274u) {
LABEL_920:
  }
    v590 = v838;
  if (v580 != v837 && v590 == v838)
  {
    unint64_t v594 = *(void *)v855;
    uint64_t v595 = *((void *)v855 + 1);
    *(void *)&v914[16] = 0;
    *(void *)&v914[8] = 0;
    *(void *)v914 = &v914[8];
    *(void *)&v913[16] = 0;
    *(void *)&v913[8] = 0;
    *(void *)v913 = &v913[8];
    int v596 = sub_14DBA0(*v577, v594, v595, 0x70687062u, (uint64_t)v914, (uint64_t)v913, *((unsigned __int8 *)v855 + 370));
    sub_463E0(*(void **)&v913[8]);
    sub_463E0(*(void **)&v914[8]);
    if (v596)
    {
      memset(v914, 0, 24);
      strcpy(&v914[24], "cwdv");
      v914[32] = 0;
      LODWORD(v915) = 3;
      v918 = 0;
      v917 = 0;
      v916 = &v917;
      int v919 = 44739242;
      CFTypeRef v920 = 0;
      *(_DWORD *)v913 = 1885892674;
      sub_8732C(v914, v913, (uint64_t)&v913[4], 1uLL);
      uint64_t v597 = sub_10FBF0();
      *(void *)v913 = off_622A88;
      *(void *)&v913[24] = v913;
      sub_10EA24((uint64_t *)&v911, v597, v914, (uint64_t)v913);
      v848 = &v857;
      sub_6AFD4(v913);
      sub_8E4B8((uint64_t *)&v908, &v911);
      v599 = v909;
      if (v909 != (void **)&v908)
      {
        *(void *)&long long v598 = 136315650;
        long long v854 = v598;
        do
        {
          sub_10653C((uint64_t *)&v907, (uint64_t)v599[2]);
          if (v907.__r_.__value_.__r.__words[2])
          {
            *((void *)&v905 + 1) = 0;
            uint64_t v906 = 0;
            *(void *)&long long v905 = (char *)&v905 + 8;
            std::string::size_type size = (std::string *)v907.__r_.__value_.__l.__size_;
            v601 = *v851;
            *(void *)v913 = &v905;
            *(void *)&v913[8] = (char *)&v905 + 8;
            BOOL v602 = (std::string *)v907.__r_.__value_.__l.__size_ == &v907 || v601 == v852;
            if (v602) {
              goto LABEL_942;
            }
            do
            {
              if (sub_E0404(&size->__r_.__value_.__r.__words[2], (unint64_t *)v601 + 4))
              {
                std::string::size_type size = (std::string *)size->__r_.__value_.__l.__size_;
              }
              else
              {
                if (!sub_E0404((unint64_t *)v601 + 4, &size->__r_.__value_.__r.__words[2]))
                {
                  sub_112BD4((uint64_t)v913, &size->__r_.__value_.__r.__words[2]);
                  std::string::size_type size = (std::string *)size->__r_.__value_.__l.__size_;
                }
                v603 = (uint64_t *)v601[1];
                if (v603)
                {
                  do
                  {
                    v601 = v603;
                    v603 = (uint64_t *)*v603;
                  }
                  while (v603);
                }
                else
                {
                  do
                  {
                    v604 = v601;
                    v601 = (uint64_t *)v601[2];
                  }
                  while ((uint64_t *)*v601 != v604);
                }
              }
            }
            while (size != &v907 && v601 != v852);
            if (!v906)
            {
LABEL_942:
              v605 = (os_log_t *)sub_32A48(8);
              v606 = *v605;
              if (*v605 && os_log_type_enabled(*v605, OS_LOG_TYPE_INFO))
              {
                sub_4F64((uint64_t)v903, (os_unfair_lock_t)v599[2] + 2);
                v607 = v903;
                if (v904 < 0) {
                  v607 = (void **)v903[0];
                }
                *(_DWORD *)v913 = v854;
                *(void *)&v913[4] = "RoutingManager.cpp";
                *(_WORD *)&v913[12] = 1024;
                *(_DWORD *)&v913[14] = 4282;
                *(_WORD *)&v913[18] = 2080;
                *(void *)&v913[20] = v607;
                _os_log_impl(&def_1E50E8, v606, OS_LOG_TYPE_INFO, "%25s:%-5d Disallowing port %s", v913, 0x1Cu);
                if (v904 < 0) {
                  operator delete(v903[0]);
                }
              }
              v608 = (atomic_ullong *)v599[3];
              *(void *)v913 = v599[2];
              *(void *)&v913[8] = v608;
              if (v608) {
                atomic_fetch_add_explicit(v608 + 2, 1uLL, memory_order_relaxed);
              }
              sub_144D44(&v856, (unint64_t *)v913, (uint64_t)v913);
              if (*(void *)&v913[8]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v913[8]);
              }
            }
            sub_10E118(*((void **)&v905 + 1));
          }
          sub_8108((uint64_t *)&v907);
          v599 = (void **)v599[1];
        }
        while (v599 != (void **)&v908);
      }
      sub_B8E4((uint64_t *)&v908);
      sub_8108((uint64_t *)&v911);
      if (v920) {
        CFRelease(v920);
      }
      sub_463E0(v917);
      v578 = v848;
      if (*(void *)v914)
      {
        *(void *)&v914[8] = *(void *)v914;
        operator delete(*(void **)v914);
      }
    }
  }
LABEL_958:
  if (v858) {
    sub_13150C((uint64_t *)v851, v856, v578);
  }
  if (v855[36] == 1684366192)
  {
    uint64_t v609 = *(void *)v855;
    *(void *)&v914[16] = 0;
    *(void *)&v914[8] = 0;
    *(void *)v914 = &v914[8];
    if (MGGetSInt32Answer() == 6
      && v609 == 1668309362
      && (v609 & 0xFFFFFFFF00000000) == 0x696D646600000000)
    {
      sub_6CB40((uint64_t *)v914, 0x70687042u, 1885892674);
    }
    sub_46AA0(v850, *(void **)v914, &v914[8]);
    sub_463E0(*(void **)&v914[8]);
  }
  sub_10E118(v857);
LABEL_967:
  sub_21C8C(v914, "disable speaker vad");
  uint64_t v610 = sub_2FF4BC(*v853, v914);
  v611 = v842;
  v842[56] = v610;
  *((unsigned char *)v611 + 228) = BYTE4(v610);
  if ((v914[23] & 0x80000000) != 0) {
    operator delete(*(void **)v914);
  }
  if (CFDictionaryContainsKey(*v853, @"create speaker vad"))
  {
    uint64_t v612 = sub_32A48(2);
    uint64_t v613 = sub_32A48(34);
    char v614 = 0;
    uint64_t v615 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v616 = *(void *)(v612 + 8);
    while (1)
    {
      uint64_t v617 = *(int *)&v914[4 * v615];
      char v618 = v614;
      if (((v616 & v617) != 0) != ((*(void *)(v613 + 8) & v617) != 0)) {
        break;
      }
      char v614 = 1;
      uint64_t v615 = 1;
      if (v618) {
        goto LABEL_976;
      }
    }
    if ((v616 & v617) == 0) {
      uint64_t v612 = v613;
    }
LABEL_976:
    id v619 = *(id *)v612;
    v620 = v619;
    if (v619)
    {
      v621 = v619;
      if (os_log_type_enabled(v621, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v914 = 136315394;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 3165;
        _os_log_impl(&def_1E50E8, v621, OS_LOG_TYPE_ERROR, "%25s:%-5d kVirtualAudioPlugInRouteConfigurationCreateSpeakerAlertVADKey is no longer supported. Please use kVirtualAudioPlugInRouteConfigurationDisableSpeakerAlertVADKey to explicitly disable the default-created speaker alert VAD.", v914, 0x12u);
      }
    }
  }
  int v622 = CFDictionaryContainsKey(*v853, @"session routing information");
  CFDictionaryRef v623 = *v853;
  if (v622)
  {
    sub_7BFEC((uint64_t)v913, *v853);
    v624 = (uint64_t **)(v855 + 176);
    if (*((unsigned char *)v855 + 728))
    {
      if (v624 != (uint64_t **)v913)
      {
        v625 = *(unsigned char **)v913;
        v626 = v855;
        if (*((void *)v855 + 90))
        {
          uint64_t v627 = *((void *)v855 + 88);
          v628 = (uint64_t **)(v855 + 178);
          *((void *)v855 + 88) = v855 + 178;
          *(void *)(*((void *)v626 + 89) + 16) = 0;
          *((void *)v626 + 89) = 0;
          *((void *)v626 + 90) = 0;
          if (*(void *)(v627 + 8)) {
            uint64_t v629 = *(void *)(v627 + 8);
          }
          else {
            uint64_t v629 = v627;
          }
          *(void *)v914 = v624;
          *(void *)&v914[8] = v629;
          *(void *)&v914[16] = v629;
          if (!v629 || (*(void *)&v914[8] = sub_6CA9C(v629), v625 == &v913[8]))
          {
            v634 = v625;
          }
          else
          {
            do
            {
              *(_DWORD *)(v629 + 32) = *((_DWORD *)v625 + 8);
              sub_7D91C(v629 + 40, (uint64_t)(v625 + 40));
              v630 = *v628;
              v631 = v628;
              v632 = v628;
              if (*v628)
              {
                do
                {
                  while (1)
                  {
                    v631 = (uint64_t **)v630;
                    if (*(_DWORD *)(*(void *)&v914[16] + 32) >= *((_DWORD *)v630 + 8)) {
                      break;
                    }
                    v630 = (uint64_t *)*v630;
                    v632 = v631;
                    if (!*v631) {
                      goto LABEL_996;
                    }
                  }
                  v630 = (uint64_t *)v630[1];
                }
                while (v630);
                v632 = v631 + 1;
              }
LABEL_996:
              sub_46CA8(v624, (uint64_t)v631, v632, *(uint64_t **)&v914[16]);
              uint64_t v629 = *(void *)&v914[8];
              *(void *)&v914[16] = *(void *)&v914[8];
              if (*(void *)&v914[8]) {
                *(void *)&v914[8] = sub_6CA9C(*(uint64_t *)&v914[8]);
              }
              v633 = (void *)*((void *)v625 + 1);
              if (v633)
              {
                do
                {
                  v634 = v633;
                  v633 = (void *)*v633;
                }
                while (v633);
              }
              else
              {
                do
                {
                  v634 = (unsigned char *)*((void *)v625 + 2);
                  BOOL v602 = *(void *)v634 == (void)v625;
                  v625 = v634;
                }
                while (!v602);
              }
              if (!v629) {
                break;
              }
              v625 = v634;
            }
            while (v634 != &v913[8]);
          }
          sub_2FF9C4((uint64_t)v914);
          v625 = v634;
        }
        if (v625 != &v913[8])
        {
          v635 = (uint64_t **)(v855 + 178);
          do
          {
            sub_ED9A4((uint64_t)v914, (uint64_t)v624, (_DWORD *)v625 + 8);
            v636 = *v635;
            v637 = v635;
            v638 = v635;
            if (*v635)
            {
              do
              {
                while (1)
                {
                  v637 = (uint64_t **)v636;
                  if (*(_DWORD *)(*(void *)v914 + 32) >= *((_DWORD *)v636 + 8)) {
                    break;
                  }
                  v636 = (uint64_t *)*v636;
                  v638 = v637;
                  if (!*v637) {
                    goto LABEL_1017;
                  }
                }
                v636 = (uint64_t *)v636[1];
              }
              while (v636);
              v638 = v637 + 1;
            }
LABEL_1017:
            sub_46CA8(v624, (uint64_t)v637, v638, *(uint64_t **)v914);
            *(void *)v914 = 0;
            sub_7E290((uint64_t)v914);
            v639 = (void *)*((void *)v625 + 1);
            if (v639)
            {
              do
              {
                v640 = v639;
                v639 = (void *)*v639;
              }
              while (v639);
            }
            else
            {
              do
              {
                v640 = (unsigned char *)*((void *)v625 + 2);
                BOOL v602 = *(void *)v640 == (void)v625;
                v625 = v640;
              }
              while (!v602);
            }
            v625 = v640;
          }
          while (v640 != &v913[8]);
        }
      }
    }
    else
    {
      sub_ED624((uint64_t)(v855 + 176), v913);
      *((unsigned char *)v855 + 728) = 1;
    }
    sub_7DB7C(*(void **)&v913[8]);
    if (*v853 && CFDictionaryGetCount(*v853) == 1)
    {
      char v641 = 1;
LABEL_1053:
      *((unsigned char *)v855 + 369) = v641;
      CFDictionaryRef v623 = *v853;
      goto LABEL_1054;
    }
    if (!*((unsigned char *)v855 + 728)) {
      sub_7F218();
    }
    v642 = (void *)*((void *)v855 + 88);
    v643 = v855 + 178;
    if (v642 == (void *)(v855 + 178))
    {
      char v641 = 0;
      goto LABEL_1053;
    }
    while (1)
    {
      *(_DWORD *)v914 = *((_DWORD *)v642 + 8);
      sub_7EA30((uint64_t)&v914[8], (uint64_t)(v642 + 5));
      sub_7D630(v913, (uint64_t)&v914[8]);
      uint64_t v644 = v913[23];
      if (v913[23] < 0) {
        uint64_t v644 = *(void *)&v913[8];
      }
      if (v644 != 21) {
        break;
      }
      v645 = *(uint64_t **)v913;
      if (v913[23] >= 0) {
        v645 = (uint64_t *)v913;
      }
      uint64_t v646 = *v645;
      uint64_t v647 = v645[1];
      uint64_t v648 = *(uint64_t *)((char *)v645 + 13);
      BOOL v649 = v646 == 0x6C7070612E6D6F63 && v647 == 0x656C69626F6D2E65;
      if (!v649 || v648 != 0x6369676F6C656C69) {
        break;
      }
      char v641 = _os_feature_enabled_impl();
      if ((v913[23] & 0x80) != 0) {
        goto LABEL_1041;
      }
LABEL_1042:
      sub_7DA98((uint64_t)&v914[8]);
      if ((v641 & 1) == 0)
      {
        v651 = (void *)v642[1];
        if (v651)
        {
          do
          {
            v652 = v651;
            v651 = (void *)*v651;
          }
          while (v651);
        }
        else
        {
          do
          {
            v652 = (void *)v642[2];
            BOOL v602 = *v652 == (void)v642;
            v642 = v652;
          }
          while (!v602);
        }
        v642 = v652;
        if (v652 != (void *)v643) {
          continue;
        }
      }
      goto LABEL_1053;
    }
    char v641 = 0;
    if ((v913[23] & 0x80) == 0) {
      goto LABEL_1042;
    }
LABEL_1041:
    operator delete(*(void **)v913);
    goto LABEL_1042;
  }
LABEL_1054:
  LOBYTE(v908) = 0;
  if (sub_1D4750(v623, @"is longform media", (char *)&v908)) {
    *((_WORD *)v855 + 368) = v908 | 0x100;
  }
  signed int v653 = *v855;
  if (!*v855)
  {
    uint64_t v806 = sub_32A48(13);
    v807 = sub_7D5E8(1, *(void **)v806, *(void *)(v806 + 8));
    v660 = v807;
    if (v807 && os_log_type_enabled(v807, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v914 = 136315394;
      *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v914[12] = 1024;
      *(_DWORD *)&v914[14] = 1136;
      _os_log_impl(&def_1E50E8, v660, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v914, 0x12u);
    }
    goto LABEL_1330;
  }
  signed int v654 = v855[1];
  if (v654 > 1919776354)
  {
    if (v654 > 1986884454)
    {
      if (v654 <= 1987081838)
      {
        if (v654 <= 1987080812)
        {
          if (v654 != 1986884455)
          {
            int v655 = 1987077987;
            goto LABEL_1127;
          }
          goto LABEL_1100;
        }
        if (v654 != 1987080813)
        {
          if (v654 != 1987081833) {
            goto LABEL_1206;
          }
          goto LABEL_1121;
        }
      }
      else
      {
        if (v654 <= 1987211116)
        {
          if (v654 == 1987081839)
          {
LABEL_1128:
            if (v653 > 1668313665)
            {
              if (v653 == 1668313666) {
                goto LABEL_1162;
              }
              unsigned __int16 v662 = 29299;
              goto LABEL_1133;
            }
            goto LABEL_1129;
          }
          int v656 = 1987208039;
LABEL_1137:
          if (v654 != v656) {
            goto LABEL_1206;
          }
          goto LABEL_1138;
        }
        if (v654 == 1987211117)
        {
LABEL_1138:
          int v661 = 1668509810;
          goto LABEL_1139;
        }
        if (v654 != 2003133027 && v654 != 2003133037) {
          goto LABEL_1206;
        }
      }
    }
    else
    {
      if (v654 <= 1936748651)
      {
        if (v654 <= 1936745327)
        {
          if (v654 == 1919776355) {
            goto LABEL_1128;
          }
          if (v654 == 1936683886)
          {
            int v661 = 1667329133;
            goto LABEL_1139;
          }
          goto LABEL_1206;
        }
        if (v654 == 1936745328) {
          goto LABEL_1128;
        }
        if (v654 != 1936747374)
        {
LABEL_1206:
          v695 = *(id *)sub_32A48(13);
          v676 = v695;
          if (!v695) {
            goto LABEL_1161;
          }
          v671 = v695;
          if (os_log_type_enabled(v671, OS_LOG_TYPE_ERROR))
          {
            sub_2417C(v913, v654);
            v696 = v913[23] >= 0 ? v913 : *(unsigned char **)v913;
            *(_DWORD *)v914 = 136315650;
            *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v914[12] = 1024;
            *(_DWORD *)&v914[14] = 1209;
            *(_WORD *)&v914[18] = 2080;
            *(void *)&v914[20] = v696;
            _os_log_impl(&def_1E50E8, v671, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unhandled VirtualAudioPlugInMode '%s'\"", v914, 0x1Cu);
            if ((v913[23] & 0x80000000) != 0) {
              operator delete(*(void **)v913);
            }
          }
LABEL_1160:

LABEL_1161:
          goto LABEL_1162;
        }
        goto LABEL_1116;
      }
      if (v654 > 1937007471)
      {
        if (v654 == 1937007472) {
          goto LABEL_1128;
        }
        if (v654 != 1986098036)
        {
          int v656 = 1986556788;
          goto LABEL_1137;
        }
        goto LABEL_1138;
      }
      if (v654 != 1936748652)
      {
        int v655 = 1936749157;
        goto LABEL_1127;
      }
    }
    int v661 = 1668505974;
    goto LABEL_1139;
  }
  if (v654 <= 1768781410)
  {
    if (v654 > 1751212898)
    {
      if (v654 > 1768776805)
      {
        if (v654 == 1768776806) {
          goto LABEL_1162;
        }
        if (v654 != 1768778864)
        {
          int v655 = 1768779619;
          goto LABEL_1127;
        }
        goto LABEL_1100;
      }
      if (v654 == 1751212899) {
        goto LABEL_1128;
      }
      int v655 = 1768057203;
LABEL_1127:
      if (v654 == v655) {
        goto LABEL_1128;
      }
      goto LABEL_1206;
    }
    if (v654 > 1701013868)
    {
      if (v654 == 1701013869) {
        goto LABEL_1128;
      }
      int v655 = 1735222132;
      goto LABEL_1127;
    }
    if (v654 == 1650811758)
    {
      if (v653 == 1667591521) {
        goto LABEL_1162;
      }
      int v661 = 1667591533;
      goto LABEL_1139;
    }
    if (v654 != 1701013792)
    {
      if (v654) {
        goto LABEL_1206;
      }
      uint64_t v658 = sub_32A48(13);
      v659 = sub_7D5E8(1, *(void **)v658, *(void *)(v658 + 8));
      v660 = v659;
      if (v659 && os_log_type_enabled(v659, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v914 = 136315394;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 1137;
        _os_log_impl(&def_1E50E8, v660, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v914, 0x12u);
      }
LABEL_1330:

      v808 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v808, "Precondition failure.");
    }
LABEL_1100:
    if (v653 <= 1668313714)
    {
      if (v653 != 1668301427 && v653 != 1668309362)
      {
        unsigned __int16 v662 = 29250;
LABEL_1133:
        int v661 = v662 | 0x63700000;
        goto LABEL_1139;
      }
      goto LABEL_1162;
    }
    if (v653 == 1668313715 || v653 == 1668440898) {
      goto LABEL_1162;
    }
    int v661 = 1668441443;
LABEL_1139:
    if (v653 == v661) {
      goto LABEL_1162;
    }
    goto LABEL_1140;
  }
  if (v654 > 1835232629)
  {
    if (v654 <= 1836021359)
    {
      if (v654 != 1835232630)
      {
        int v657 = 1835361382;
        goto LABEL_1110;
      }
    }
    else if (v654 != 1836021360)
    {
      if (v654 == 1836281204) {
        goto LABEL_1162;
      }
      int v657 = 1918990112;
LABEL_1110:
      if (v654 == v657) {
        goto LABEL_1162;
      }
      goto LABEL_1206;
    }
LABEL_1116:
    if (v653 == 1668441443 || v653 == 1668440898)
    {
LABEL_1140:
      uint64_t v663 = sub_32A48(2);
      uint64_t v664 = sub_32A48(34);
      char v665 = 0;
      uint64_t v666 = 0;
      *(void *)v914 = 0x100000002;
      uint64_t v667 = *(void *)(v663 + 8);
      while (1)
      {
        uint64_t v668 = *(int *)&v914[4 * v666];
        char v669 = v665;
        if (((v667 & v668) != 0) != ((*(void *)(v664 + 8) & v668) != 0)) {
          break;
        }
        char v665 = 1;
        uint64_t v666 = 1;
        if (v669)
        {
          if ((v667 & 1) == 0) {
            goto LABEL_1162;
          }
          goto LABEL_1148;
        }
      }
      if ((v667 & v668) == 0) {
        uint64_t v663 = v664;
      }
      if ((*(void *)(v663 + 8) & 1) == 0) {
        goto LABEL_1162;
      }
LABEL_1148:
      id v670 = *(id *)v663;
      if (!v670) {
        goto LABEL_1162;
      }
      v671 = v670;
      if (os_log_type_enabled(v671, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v913, v654);
        int v672 = v913[23];
        v673 = *(unsigned char **)v913;
        sub_2417C(&v911, v653);
        v674 = v913;
        if (v672 < 0) {
          v674 = v673;
        }
        if ((v911.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v675 = &v911;
        }
        else {
          v675 = (std::string *)v911.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v914 = 136315906;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 1215;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v674;
        *(_WORD *)&v914[28] = 2080;
        *(void *)&v914[30] = v675;
        _os_log_impl(&def_1E50E8, v671, OS_LOG_TYPE_DEBUG, "%25s:%-5d Mode '%s' is not allowed with category '%s'", v914, 0x26u);
        if (SHIBYTE(v911.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v911.__r_.__value_.__l.__data_);
        }
        if ((v913[23] & 0x80000000) != 0) {
          operator delete(*(void **)v913);
        }
      }
      v676 = v671;
      goto LABEL_1160;
    }
    goto LABEL_1162;
  }
  if (v654 > 1835229548)
  {
    if (v654 == 1835229549) {
      goto LABEL_1128;
    }
    int v657 = 1835230310;
    goto LABEL_1110;
  }
  if (v654 != 1768781411)
  {
    if (v654 != 1768781426) {
      goto LABEL_1206;
    }
    goto LABEL_1100;
  }
LABEL_1121:
  if (v653 <= 1668313665)
  {
LABEL_1129:
    if (v653 == 1668301427) {
      goto LABEL_1162;
    }
    unsigned __int16 v662 = 24946;
    goto LABEL_1133;
  }
  if (v653 != 1668313666 && v653 != 1668313715)
  {
    int v661 = 1668703092;
    goto LABEL_1139;
  }
LABEL_1162:
  v911.__r_.__value_.__r.__words[0] = (std::string::size_type)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  LOWORD(v911.__r_.__value_.__r.__words[1]) = 257;
  sub_1D49BC(v853, @"camera parameters", (uint64_t)&v911);
  if (v911.__r_.__value_.__r.__words[0])
  {
    id v677 = *(id *)sub_32A48(2);
    v678 = v677;
    if (v677)
    {
      v679 = v677;
      if (os_log_type_enabled(v679, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v914 = 136315394;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 3196;
        _os_log_impl(&def_1E50E8, v679, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parsing camera parameters ", v914, 0x12u);
      }
    }
    sub_2FF454((uint64_t)(v855 + 148), (uint64_t)&v911);
  }
  if (v849)
  {
    uint64_t v680 = sub_32A48(2);
    uint64_t v681 = sub_32A48(34);
    char v682 = 0;
    uint64_t v683 = 0;
    *(void *)v914 = 0x100000002;
    uint64_t v684 = *(void *)(v680 + 8);
    while (1)
    {
      uint64_t v685 = *(int *)&v914[4 * v683];
      char v686 = v682;
      if (((v684 & v685) != 0) != ((*(void *)(v681 + 8) & v685) != 0)) {
        break;
      }
      char v682 = 1;
      uint64_t v683 = 1;
      if (v686) {
        goto LABEL_1175;
      }
    }
    if ((v684 & v685) == 0) {
      uint64_t v680 = v681;
    }
LABEL_1175:
    id v687 = *(id *)v680;
    v688 = v687;
    if (v687)
    {
      v689 = v687;
      if (os_log_type_enabled(v689, OS_LOG_TYPE_DEBUG))
      {
        sub_383B64((std::string *)v913, (uint64_t)v855);
        v690 = v913[23] >= 0 ? v913 : *(unsigned char **)v913;
        *(_DWORD *)v914 = 136315650;
        *(void *)&v914[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v914[12] = 1024;
        *(_DWORD *)&v914[14] = 3201;
        *(_WORD *)&v914[18] = 2080;
        *(void *)&v914[20] = v690;
        _os_log_impl(&def_1E50E8, v689, OS_LOG_TYPE_DEBUG, "%25s:%-5d outConfiguration.mRouteConfiguration: %s.", v914, 0x1Cu);
        if ((v913[23] & 0x80000000) != 0) {
          operator delete(*(void **)v913);
        }
      }
    }
  }
  sub_80594((uint64_t)&v911);
  sub_3D61C((uint64_t)&v859);
  sub_3D61C((uint64_t)&v864);
  sub_463E0(*(void **)&v912[24]);
  sub_80594((uint64_t)&v869);
  sub_3D61C((uint64_t)&v875);
  sub_3D61C((uint64_t)&v877);
  sub_3D61C((uint64_t)&v879);
  sub_3D61C((uint64_t)&v881);
  sub_80594((uint64_t)&v883);
  sub_3D61C((uint64_t)&v885);
  sub_3D61C((uint64_t)&v888);
  sub_80594((uint64_t)&v890);
  if (v894)
  {
    *(void *)v914 = &v892;
    sub_A7940((void ***)v914);
  }
  sub_80594((uint64_t)&Mutable);
  if (*((void *)&v901 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v901 + 1));
  }
  if (*((void *)&v900 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v900 + 1));
  }
}

void sub_2FE3A8()
{
  sub_2FF9C4(v0 + 848);
  JUMPOUT(0x2FE484);
}

void sub_2FE3D8()
{
  sub_293834(*(void **)(v0 + 776));
  if (*(unsigned char *)(v0 + 568))
  {
    *(void *)(v0 + 744) = v0 + 544;
    sub_A7940((void ***)(v0 + 744));
  }
  sub_80594(v0 + 584);
  sub_2E9FD8(*(void *)(v0 + 232));
  sub_2FF988(v0 + 600);
  JUMPOUT(0x2FE704);
}

void sub_2FE3F0()
{
  operator delete(v0);
  JUMPOUT(0x2FE734);
}

void sub_2FE400()
{
}

void sub_2FE408(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2FE454()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  JUMPOUT(0x2FE604);
}

void sub_2FE468()
{
  sub_3D61C(v0 + 544);
  sub_45260(v0 + 816);
  JUMPOUT(0x2FE6ECLL);
}

void sub_2FE4D4()
{
}

void sub_2FE514()
{
  if (*(char *)(v0 + 791) < 0) {
    operator delete(*(void **)(v0 + 768));
  }
  if (*(char *)(v0 + 839) < 0) {
    operator delete(*(void **)(v0 + 816));
  }
  if (*(char *)(v0 + 767) < 0) {
    JUMPOUT(0x2FE5D0);
  }
  JUMPOUT(0x2FE5D4);
}

void sub_2FE51C()
{
}

void sub_2FE524()
{
}

void sub_2FE534()
{
  if (*(char *)(v0 + 871) < 0) {
    operator delete(*(void **)(v0 + 848));
  }
  if (*(char *)(v0 + 743) < 0) {
    operator delete(*(void **)(v0 + 720));
  }
  if (*(char *)(v0 + 791) < 0) {
    operator delete(*(void **)(v0 + 768));
  }
  if (*(char *)(v0 + 839) < 0) {
    operator delete(*(void **)(v0 + 816));
  }
  if (*(char *)(v0 + 767) < 0) {
    JUMPOUT(0x2FE5D0);
  }
  JUMPOUT(0x2FE5D4);
}

void sub_2FE590()
{
  if (*(char *)(v0 + 791) < 0) {
    operator delete(*(void **)(v0 + 768));
  }
  if (*(char *)(v0 + 839) < 0) {
    operator delete(*(void **)(v0 + 816));
  }
  JUMPOUT(0x2FE5C4);
}

void sub_2FE5C0()
{
  if (*(char *)(v0 + 871) < 0) {
    operator delete(*(void **)(v0 + 848));
  }
  if (*(char *)(v0 + 719) < 0) {
    operator delete(*(void **)(v0 + 696));
  }
  sub_3D61C(v0 + 440);
  sub_80594(v0 + 456);
  sub_3D61C(v0 + 472);
  sub_3D61C(v0 + 512);
  sub_80594(v0 + 528);
  JUMPOUT(0x2FE6D4);
}

void sub_2FE600()
{
  sub_3BCAC((unsigned char *)(v0 + 816));
  JUMPOUT(0x2FE65CLL);
}

void sub_2FE610()
{
  uint64_t v2 = *(std::__shared_weak_count **)(v0 + 856);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x2FE69CLL);
}

void sub_2FE640()
{
  sub_2FF6B0(v0 + 768);
  sub_3D61C(v0 + 440);
  sub_80594(v0 + 456);
  sub_3D61C(v0 + 472);
  sub_3D61C(v0 + 512);
  sub_80594(v0 + 528);
  JUMPOUT(0x2FE6D4);
}

void sub_2FE650()
{
  sub_3D61C(v0 + 264);
  sub_3D61C(v0 + 296);
  sub_463E0(*(void **)(v0 + 792));
  sub_80594(v0 + 344);
  sub_3D61C(v0 + 392);
  sub_3D61C(v0 + 408);
  sub_3D61C(v0 + 424);
  JUMPOUT(0x2FE6ACLL);
}

void sub_2FE698()
{
  sub_3BCAC((unsigned char *)(v0 + 768));
  JUMPOUT(0x2FE6A4);
}

void sub_2FE70C()
{
  sub_3D61C(v0 + 440);
  sub_80594(v0 + 456);
  sub_3D61C(v0 + 472);
  sub_3D61C(v0 + 512);
  sub_80594(v0 + 528);
  JUMPOUT(0x2FE6D4);
}

void sub_2FE714()
{
}

void sub_2FE71C()
{
}

void sub_2FE724()
{
  if (*(void *)(v0 + 848)) {
    JUMPOUT(0x2FE730);
  }
  sub_3D61C(v0 + 544);
  sub_45260(v0 + 816);
  JUMPOUT(0x2FE6ECLL);
}

void sub_2FE748(_Unwind_Exception *a1)
{
}

CFDictionaryRef sub_2FE750(CFDictionaryRef *a1, int a2, int a3)
{
  CFDictionaryRef v4 = *a1;
  if (!v4)
  {
    id v22 = *(id *)sub_32A48(13);
    __int16 v23 = v22;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
      __int16 v29 = 1024;
      int v30 = 809;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  BOOL v7 = CFDictionaryContainsKey(v4, @"routable ports") != 0;
  if (CFDictionaryContainsKey(*a1, @"unroutable ports")) {
    int v8 = v7 + 1;
  }
  else {
    int v8 = v7;
  }
  BOOL v9 = CFDictionaryContainsKey(*a1, @"route to builtinspeaker") != 0;
  if (CFDictionaryContainsKey(*a1, @"route to builtinspeaker")
    && !CFDictionaryContainsKey(*a1, @"unroutable ports"))
  {
    uint64_t v25 = *(id *)sub_32A48(13);
    uint64_t v26 = v25;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
      __int16 v29 = 1024;
      int v30 = 818;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    char v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Precondition failure.");
  }
  int v10 = CFDictionaryContainsKey(*a1, @"decoupled input/output");
  int v11 = CFDictionaryContainsKey(*a1, @"expanse session");
  CFDictionaryRef result = *a1;
  if (*a1)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if (result)
    {
      int v13 = v8 + v9;
      if (v10) {
        ++v13;
      }
      if (v11) {
        int v14 = v13 + 1;
      }
      else {
        int v14 = v13;
      }
      CFDictionaryRef v15 = *a1;
      if (*a1) {
        LODWORD(v15) = CFDictionaryGetCount(v15);
      }
      if (v14 == v15)
      {
        sub_21C8C(__p, "decoupled input/output");
        unint64_t v16 = sub_2FF4BC(*a1, __p);
        if (v31 < 0) {
          operator delete(*(void **)__p);
        }
        if (v16) {
          int v17 = 1684366192;
        }
        else {
          int v17 = 1668248944;
        }
        if (HIDWORD(v16)) {
          BOOL v18 = v17 == a2;
        }
        else {
          BOOL v18 = 1;
        }
        int v19 = !v18;
        *(_DWORD *)std::string __p = 0;
        unsigned int v20 = sub_1D4800(*a1, @"expanse session", __p);
        if (*(_DWORD *)__p == a3) {
          unsigned int v21 = 0;
        }
        else {
          unsigned int v21 = v20;
        }
        return (const __CFDictionary *)((v19 | v21) ^ 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_2FEA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t **sub_2FEAC4(uint64_t **a1, unint64_t a2, void *a3)
{
  BOOL v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    BOOL v9 = operator new(0x38uLL);
    v9[4] = *a3;
    *((_DWORD *)v9 + 10) = 0;
    *((unsigned char *)v9 + 44) = 0;
    *((unsigned char *)v9 + 48) = 0;
    sub_46CA8(a1, (uint64_t)v7, v6, v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void sub_2FEB78(uint64_t a1)
{
  std::string __p = 0;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  strcpy(v9, "cwdv");
  v9[8] = 0;
  int v10 = 3;
  v12[0] = 0;
  v12[1] = 0;
  int v11 = v12;
  CFTypeRef cf = 0;
  int v13 = 44731018;
  sub_460BC(&v4, *(void *)(a1 + 128), (uint64_t)&__p);
  for (uint64_t i = v5; (uint64_t *)i != &v4; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = sub_E1B78(*(void *)(a1 + 128), *(_DWORD *)(i + 16));
    sub_43F38(&v15, (uint64_t *)(v3 + 88), "", 155);
    (*(void (**)(uint64_t))(*(void *)v15 + 224))(v15);
    if (v16) {
      sub_4636C(v16);
    }
  }
  sub_45F50(&v4);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v12[0]);
  if (__p)
  {
    BOOL v7 = __p;
    operator delete(__p);
  }
}

void sub_2FECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_470A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2FECE0(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (void *)*a2;
  uint64_t v53 = a2 + 1;
  if ((uint64_t *)*a2 == a2 + 1) {
    return;
  }
  uint64_t v4 = (void *)(a1 + 16);
  do
  {
    uint64_t v5 = v2[4];
    if ((sub_3A6F88(v5) & 1) == 0)
    {
      uint64_t v8 = 0;
      buf[0] = 0;
      p_p = &__p;
      BOOL v10 = 1;
      goto LABEL_21;
    }
    *(_DWORD *)int buf = 2003329396;
    uint8_t buf[8] = 0;
    unsigned char buf[32] = 0;
    unsigned int v6 = sub_3A6FFC(v5);
    unsigned int v58 = v6;
    if (!v6)
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
      long long v54 = 0uLL;
      buf[0] = 0;
LABEL_19:
      *(_OWORD *)int buf = v54;
      *(void *)&uint8_t buf[16] = v11;
      unsigned char buf[24] = 1;
      uint64_t v8 = (unsigned char *)*((void *)&v54 + 1);
      p_p = (void **)buf;
      uint64_t v51 = 0;
      goto LABEL_21;
    }
    sub_73978(&__p, v6 >> 2);
    *(_DWORD *)int buf = sub_3A7070(v5);
    if (*(_DWORD *)buf)
    {
      int v7 = 0;
      LOBYTE(v54) = 0;
    }
    else
    {
      sub_86B44((uint64_t)&buf[8], (uint64_t)&__p);
      LOBYTE(v54) = 0;
      if (buf[32])
      {
        long long v54 = *(_OWORD *)&buf[8];
        uint64_t v51 = *(void *)&buf[24];
        memset(&buf[8], 0, 24);
        int v7 = 1;
      }
      else
      {
        int v7 = 0;
      }
    }
    int v12 = v7;
    if (__p)
    {
      char v56 = __p;
      operator delete(__p);
      int v12 = buf[32];
    }
    if (v12 && *(void *)&buf[8])
    {
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
    buf[0] = 0;
    BOOL v10 = v7 == 0;
    if (v7)
    {
      uint64_t v11 = v51;
      goto LABEL_19;
    }
    uint64_t v8 = 0;
    p_p = &__p;
LABEL_21:
    std::string __p = 0;
    char v56 = 0;
    uint64_t v57 = 0;
    int v13 = (char *)*p_p;
    p_p[1] = 0;
    p_p[2] = 0;
    std::string *p_p = 0;
    if (__p) {
      operator delete(__p);
    }
    if (!v10 && *(void *)buf) {
      operator delete(*(void **)buf);
    }
    id v14 = *(id *)sub_32A48(2);
    uint64_t v15 = v14;
    if (v14)
    {
      unint64_t v16 = v14;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 96))(&__p, v5);
        int v17 = &__p;
        if (v57 < 0) {
          int v17 = __p;
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 867;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v17;
        *(_WORD *)&unsigned char buf[28] = 2048;
        *(void *)&buf[30] = (v8 - v13) >> 2;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Partners for port %s : %zd", buf, 0x26u);
        if (SHIBYTE(v57) < 0) {
          operator delete(__p);
        }
      }
    }
    uint64_t v18 = v8 - v13;
    if (v8 - v13 >= 1)
    {
      int v19 = *(char **)(a1 + 8);
      uint64_t v20 = v18 >> 2;
      if (v18 >> 2 <= (uint64_t)(*v4 - (void)v19) >> 2)
      {
        if (v20 <= 0)
        {
          uint64_t v26 = *(char **)(a1 + 8);
          char v27 = &v26[-4 * v20];
          uint64_t v28 = v26;
          while (v27 < v19)
          {
            int v29 = *(_DWORD *)v27;
            v27 += 4;
            *(_DWORD *)uint64_t v28 = v29;
            v28 += 4;
          }
          int v30 = &v19[4 * v20];
          *(void *)(a1 + 8) = v28;
          if (v26 != v30) {
            memmove(&v26[-4 * ((v26 - v30) >> 2)], v19, v26 - v30);
          }
          if (&v13[4 * v20] != v13) {
            memmove(v19, v13, 4 * v20);
          }
        }
        else
        {
          if (v8 != v13) {
            memmove(*(void **)(a1 + 8), v13, v8 - v13);
          }
          *(void *)(a1 + 8) = &v19[v8 - v13];
        }
      }
      else
      {
        uint64_t v21 = (uint64_t)&v19[-*(void *)a1] >> 2;
        if ((unint64_t)(v21 + v20) >> 62) {
          sub_60548();
        }
        uint64_t v22 = *v4 - *(void *)a1;
        uint64_t v23 = v22 >> 1;
        if (v22 >> 1 <= (unint64_t)(v21 + v20)) {
          uint64_t v23 = v21 + v20;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        *(void *)&unsigned char buf[32] = v4;
        if (v24) {
          unint64_t v24 = (unint64_t)sub_46BF4(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        char v31 = (_DWORD *)(v24 + 4 * v21);
        *(void *)int buf = v24;
        *(void *)&uint8_t buf[8] = v31;
        *(void *)&unsigned char buf[24] = v24 + 4 * v25;
        uint64_t v32 = 4 * v20;
        unsigned int v33 = v13;
        unsigned int v34 = &v31[v20];
        do
        {
          int v35 = *(_DWORD *)v33;
          v33 += 4;
          *v31++ = v35;
          v32 -= 4;
        }
        while (v32);
        *(void *)&uint8_t buf[16] = v34;
        sub_1A310C((void **)a1, (uint64_t)buf, v19);
        if (*(void *)buf) {
          operator delete(*(void **)buf);
        }
      }
    }
    if (v13) {
      operator delete(v13);
    }
    std::string v36 = (uint64_t *)v2[1];
    if (v36)
    {
      do
      {
        std::string v37 = v36;
        std::string v36 = (uint64_t *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        std::string v37 = (uint64_t *)v2[2];
        BOOL v38 = *v37 == (void)v2;
        uint64_t v2 = v37;
      }
      while (!v38);
    }
    uint64_t v2 = v37;
  }
  while (v37 != v53);
  id v39 = *(unsigned int **)a1;
  std::string v40 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 != v40)
  {
    do
    {
      unsigned int v41 = *v39;
      sub_3A8A8();
      uint64_t v42 = sub_33438(v41);
      if (!v42)
      {
        uint64_t v47 = sub_32A48(13);
        int v48 = sub_7D5E8(1, *(void **)v47, *(void *)(v47 + 8));
        uint64_t v49 = v48;
        if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 875;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v41;
          _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: \"no virtual audio port object with the specified ID (%u)\"", buf, 0x18u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 560947818;
      }
      id v43 = *(id *)sub_32A48(2);
      __int16 v44 = v43;
      if (v43)
      {
        std::string::size_type v45 = v43;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v42 + 96))(&__p, v42);
          char v46 = &__p;
          if (v57 < 0) {
            char v46 = __p;
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 876;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Added %s to port list", buf, 0x1Cu);
          if (SHIBYTE(v57) < 0) {
            operator delete(__p);
          }
        }
      }
      sub_E7404(a2, v42, v42);
      ++v39;
    }
    while (v39 != v40);
  }
}

void sub_2FF3D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2FF454(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    sub_2EB458(a1, a2);
  }
  else
  {
    uint64_t v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    int v4 = *(unsigned __int8 *)(a2 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
    if (v4) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      CFRetain(v3);
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t sub_2FF4BC(CFTypeRef cf, const UInt8 *a2)
{
  CFTypeRef v3 = cf;
  if (!cf) {
    goto LABEL_9;
  }
  CFRetain(cf);
  sub_22084(&v13, v3);
  if (!v13)
  {
    LOBYTE(v3) = 0;
LABEL_9:
    uint64_t v8 = 0;
    return v3 | ((*(void *)&v2 & 0xFFFFFFLL) << 8) | (v8 << 32);
  }
  if (sub_1571F4((const __CFDictionary *)v13, a2))
  {
    if (!v13)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_1572F4(&cfa, (const __CFDictionary *)v13, a2);
    CFNumberRef v5 = (const __CFNumber *)cfa;
    if (cfa)
    {
      CFTypeID v6 = CFGetTypeID(cfa);
      if (v6 == CFNumberGetTypeID())
      {
        unsigned int v7 = sub_7E85C(v5);
        LOBYTE(v3) = v7;
        unsigned int v2 = v7 >> 8;
LABEL_12:
        CFRelease(v5);
        uint64_t v8 = 1;
        goto LABEL_15;
      }
      CFTypeID v9 = CFGetTypeID(v5);
      if (v9 == CFBooleanGetTypeID())
      {
        LOBYTE(v3) = sub_157378(v5);
        unsigned int v2 = 0;
        goto LABEL_12;
      }
      CFRelease(v5);
    }
  }
  uint64_t v8 = 0;
  LOBYTE(v3) = 0;
LABEL_15:
  if (v13) {
    CFRelease(v13);
  }
  return v3 | ((*(void *)&v2 & 0xFFFFFFLL) << 8) | (v8 << 32);
}

void sub_2FF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void *sub_2FF668(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    sub_60560();
  }
  return operator new(48 * a1);
}

uint64_t sub_2FF6B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unsigned int v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

void sub_2FF6EC(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_7E020(*(char **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  unsigned int v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  CFTypeID v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

BOOL sub_2FF7C4(_DWORD *a1)
{
  unsigned int v2 = operator new(8uLL);
  *(void *)unsigned int v2 = 0x63766D6763766D20;
  CFTypeRef v3 = operator new(4uLL);
  _DWORD *v3 = 1885565807;
  std::string __p = v3;
  CFTypeID v9 = v3 + 1;
  uint64_t v10 = v3 + 1;
  strcpy(v11, "cwdv");
  v11[8] = 0;
  int v12 = 3;
  v14[0] = 0;
  v14[1] = 0;
  unint64_t v13 = v14;
  int v15 = 44739242;
  CFTypeRef cf = 0;
  uint64_t v4 = sub_10FBF0();
  v17[0] = off_632FB8;
  v17[3] = v17;
  sub_10E1E8(v7, v4, &__p, (uint64_t)v17);
  sub_6AFD4(v17);
  if (v7[2]) {
    BOOL v5 = *v2 == *a1 || v2[1] == *a1;
  }
  else {
    BOOL v5 = 0;
  }
  sub_8108(v7);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v14[0]);
  if (__p)
  {
    CFTypeID v9 = __p;
    operator delete(__p);
  }
  operator delete(v2);
  return v5;
}

void sub_2FF944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2FF988(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  CFTypeRef v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_2FF9C4(uint64_t a1)
{
  sub_7DB7C(*(void **)(a1 + 16));
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    CFTypeRef v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        unsigned int v2 = v3;
        CFTypeRef v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_7DB7C(v2);
  }
  return a1;
}

void sub_2FFA14(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 152);
  if ((sub_F11C4(v4) & 1) == 0)
  {
    uint64_t v124 = sub_32A48(13);
    uint64_t v125 = sub_7D5E8(1, *(void **)v124, *(void *)(v124 + 8));
    uint64_t v126 = v125;
    if (v125 && os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
    {
      v161[0] = 136315394;
      *(void *)&v161[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(v161[3]) = 1024;
      *(_DWORD *)((char *)&v161[3] + 2) = 3559;
      _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)v161, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v5 = *(_DWORD *)(a2 + 184);
  if (v5 == 1936747378)
  {
LABEL_8:
    memset(v161, 0, sizeof(v161));
    strcpy(v162, "cwdv");
    char v163 = 0;
    int v164 = 3;
    id v166 = 0;
    uint64_t v167 = 0;
    uint64_t v165 = &v166;
    int v168 = 44739242;
    CFStringRef v169 = 0;
    *(void *)int buf = 0x7073706B706D6269;
    sub_8732C((char *)v161, (char *)buf, (uint64_t)&buf[2], 2uLL);
    uint64_t v6 = sub_10FBF0();
    *(void *)int buf = off_632FB8;
    *(void *)&buf[6] = buf;
    sub_10E1E8((uint64_t *)&__src, v6, v161, (uint64_t)buf);
    sub_6AFD4(buf);
    uint64_t v7 = sub_32A48(2);
    uint64_t v8 = sub_32A48(13);
    char v9 = 0;
    uint64_t v10 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v11 = *(void *)(v7 + 8);
    while (1)
    {
      uint64_t v12 = (int)buf[v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 1;
      if (v13) {
        goto LABEL_14;
      }
    }
    if ((v11 & v12) == 0) {
      uint64_t v7 = v8;
    }
LABEL_14:
    id v14 = *(id *)v7;
    int v15 = v14;
    if (v14)
    {
      unint64_t v16 = v14;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        sub_38200C(&__p, (uint64_t)&__src);
        int v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3267;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v17;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d - VirtualAudio_Port: built-in mic and speaker are added to the override list: %s.", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    shared_owners = v142[0];
    if ((void **)v142[0] != &__src)
    {
      int v19 = (uint64_t **)(a2 + 16);
      uint64_t v20 = (uint64_t **)(a2 + 24);
      do
      {
        sub_112D38(v19, v20, (unint64_t *)&shared_owners->__shared_weak_owners_, &shared_owners->__shared_weak_owners_);
        shared_owners = (std::__shared_weak_count *)shared_owners->__shared_owners_;
      }
      while (shared_owners != (std::__shared_weak_count *)&__src);
    }
    sub_8108((uint64_t *)&__src);
    if (v169) {
      CFRelease(v169);
    }
    goto LABEL_27;
  }
  if (v5 == 1651275109) {
    goto LABEL_70;
  }
  if (v5 != 1635087471) {
    return;
  }
  switch(v4)
  {
    case 1668047476:
      goto LABEL_70;
    case 1668047728:
      memset(v161, 0, sizeof(v161));
      strcpy(v162, "cwdv");
      char v163 = 0;
      int v164 = 3;
      id v166 = 0;
      uint64_t v167 = 0;
      uint64_t v165 = &v166;
      int v168 = 44739242;
      CFStringRef v169 = 0;
      *(void *)int buf = 0x7073746F70737469;
      sub_8732C((char *)v161, (char *)buf, (uint64_t)&buf[2], 2uLL);
      uint64_t v22 = sub_10FBF0();
      *(void *)int buf = off_632FB8;
      *(void *)&buf[6] = buf;
      sub_10EA24((uint64_t *)&__p, v22, v161, (uint64_t)buf);
      sub_6AFD4(buf);
      memset(buf, 0, 24);
      strcpy((char *)&buf[6], "cwdv");
      LOBYTE(v153) = 0;
      *(_DWORD *)&v155[2] = 3;
      unsigned int v157 = 0;
      uint64_t v158 = 0;
      CFNumberRef v156 = &v157;
      int v159 = 44739242;
      CFTypeRef v160 = 0;
      long long __src = (void *)0x70687062706D6274;
      sub_8732C((char *)buf, (char *)&__src, (uint64_t)v142, 2uLL);
      if (sub_165540())
      {
        sub_24EE90(v137, buf);
        if (v138) {
          p_p = (std::string *)v137;
        }
        else {
          p_p = &__p;
        }
      }
      else
      {
        v137[0] = (uint64_t)v137;
        v137[1] = (uint64_t)v137;
        uint64_t v138 = 0;
        p_p = &__p;
      }
      sub_BCAD8((uint64_t *)&v150, (uint64_t)p_p, "", 3458);
      std::string v36 = (uint64_t *)v151;
      if (v151 != (std::__shared_weak_count *)&v150)
      {
        do
        {
          uint64_t v37 = v36[2];
          long long __src = 0;
          v142[0] = 0;
          v142[1] = 0;
          strcpy((char *)&v143, "cwdv");
          char v144 = 0;
          int v145 = 3;
          v147[0] = 0;
          v147[1] = 0;
          CFDictionaryRef v146 = v147;
          CFTypeRef cf = 0;
          int v148 = 44731050;
          int v38 = sub_E00F4(*(void *)(a1 + 128), v37, (uint64_t)&__src);
          sub_3018A4(*(void *)(a1 + 128), v38, a2);
          if (cf) {
            CFRelease(cf);
          }
          sub_463E0(v147[0]);
          if (__src)
          {
            v142[0] = (std::__shared_weak_count *)__src;
            operator delete(__src);
          }
          std::string v36 = (uint64_t *)v36[1];
        }
        while (v36 != (uint64_t *)&v150);
      }
      sub_B8E4((uint64_t *)&v150);
      sub_8108(v137);
      if (v160) {
        CFRelease(v160);
      }
      sub_463E0(v157);
      if (*(void *)buf)
      {
        *(void *)&AudioObjectPropertyAddress buf[2] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      sub_8108((uint64_t *)&__p);
      if (v169) {
        CFRelease(v169);
      }
      goto LABEL_27;
    case 1668051824:
      goto LABEL_8;
  }
  unint64_t v24 = operator new(4uLL);
  *(void *)int v161 = v24;
  _DWORD *v24 = 1885892674;
  *(void *)&v161[2] = v24 + 1;
  *(void *)&v161[4] = v24 + 1;
  strcpy(v162, "cwdv");
  char v163 = 0;
  int v164 = 3;
  id v166 = 0;
  uint64_t v167 = 0;
  uint64_t v165 = &v166;
  int v168 = 44739242;
  CFStringRef v169 = 0;
  uint64_t v25 = sub_10FBF0();
  *(void *)int buf = off_6285C0;
  *(void *)&buf[6] = buf;
  sub_10EA24((uint64_t *)&__src, v25, v161, (uint64_t)buf);
  sub_6AFD4(buf);
  for (uint64_t i = v142[0]; i != (std::__shared_weak_count *)&__src; uint64_t i = (std::__shared_weak_count *)i->__shared_owners_)
  {
    char v27 = (std::__shared_weak_count *)i[1].__vftable;
    if (v27)
    {
      uint64_t v28 = std::__shared_weak_count::lock(v27);
      if (v28)
      {
        int v29 = v28;
        uint64_t shared_weak_owners = i->__shared_weak_owners_;
        if (shared_weak_owners)
        {
          BOOL v31 = sub_24EC98(shared_weak_owners);
          sub_4636C(v29);
          if (v31)
          {
            char v121 = 1;
            goto LABEL_42;
          }
        }
        else
        {
          sub_4636C(v29);
        }
      }
    }
  }
  char v121 = 0;
LABEL_42:
  sub_8108((uint64_t *)&__src);
  if (v169) {
    CFRelease(v169);
  }
  sub_463E0(v166);
  if (*(void *)v161)
  {
    *(void *)&v161[2] = *(void *)v161;
    operator delete(*(void **)v161);
  }
  if (v121)
  {
    uint64_t v32 = operator new(8uLL);
    *uint64_t v32 = 0x706D627470687062;
    *(void *)int v161 = v32;
    *(void *)&v161[2] = v32 + 1;
    *(void *)&v161[4] = v32 + 1;
    strcpy(v162, "cwdv");
    char v163 = 0;
    int v164 = 3;
    id v166 = 0;
    uint64_t v167 = 0;
    uint64_t v165 = &v166;
    int v168 = 44739242;
    CFStringRef v169 = 0;
    uint64_t v33 = sub_10FBF0();
    *(void *)int buf = off_632FB8;
    *(void *)&buf[6] = buf;
    sub_10EA24((uint64_t *)&__src, v33, v161, (uint64_t)buf);
    sub_6AFD4(buf);
    sub_BCAD8((uint64_t *)buf, (uint64_t)&__src, "", 3242);
    for (uint64_t j = *(void *)&buf[2]; (_DWORD *)j != buf; uint64_t j = *(void *)(j + 8))
    {
      int v35 = sub_E00F4(*(void *)(a1 + 128), *(void *)(j + 16), (uint64_t)v161);
      sub_30148C(*(void *)(a1 + 128), v35, a2);
    }
    sub_B8E4((uint64_t *)buf);
    sub_8108((uint64_t *)&__src);
    if (v169) {
      CFRelease(v169);
    }
LABEL_27:
    sub_463E0(v166);
    uint64_t v21 = *(void **)v161;
    if (!*(void *)v161) {
      return;
    }
    *(void *)&v161[2] = *(void *)v161;
    goto LABEL_159;
  }
  int v39 = *(_DWORD *)(a2 + 152);
  if (v39 == 1668049007)
  {
LABEL_70:
    uint64_t v47 = operator new(8uLL);
    void *v47 = 0x70687062706D6274;
    uint64_t v48 = (uint64_t)(v47 + 1);
    if (sub_165540())
    {
      memset(v161, 0, sizeof(v161));
      sub_46B38(v161, v47, v48, 2uLL);
      strcpy(v162, "cwdv");
      char v163 = 0;
      int v164 = 3;
      id v166 = 0;
      uint64_t v167 = 0;
      uint64_t v165 = &v166;
      int v168 = 44739242;
      CFStringRef v169 = 0;
      sub_24EE90(&v134, v161);
      if (v169) {
        CFRelease(v169);
      }
      sub_463E0(v166);
      if (*(void *)v161)
      {
        *(void *)&v161[2] = *(void *)v161;
        operator delete(*(void **)v161);
      }
    }
    else
    {
      uint64_t v134 = (uint64_t)&v134;
      uint64_t v135 = &v134;
      uint64_t v136 = 0;
    }
    uint64_t v131 = (uint64_t)&v131;
    uint64_t v132 = &v131;
    uint64_t v133 = 0;
    int v49 = *(char *)(a2 + 183);
    if (v49 >= 0) {
      CFIndex v50 = *(unsigned __int8 *)(a2 + 183);
    }
    else {
      CFIndex v50 = *(void *)(a2 + 168);
    }
    if (v50)
    {
      uint64_t v51 = operator new(8uLL);
      *uint64_t v51 = 0x70687062706D6274;
      *(void *)int v161 = v51;
      *(void *)&v161[2] = v51 + 1;
      *(void *)&v161[4] = v51 + 1;
      strcpy(v162, "cwdv");
      char v163 = 0;
      int v164 = 3;
      id v166 = 0;
      uint64_t v167 = 0;
      uint64_t v165 = &v166;
      int v168 = 44739242;
      if (v49 >= 0) {
        char v52 = (const UInt8 *)(a2 + 160);
      }
      else {
        char v52 = *(const UInt8 **)(a2 + 160);
      }
      CFStringRef v169 = 0;
      if (v52)
      {
        CFStringRef v53 = CFStringCreateWithBytes(0, v52, v50, 0x8000100u, 0);
        if (!v53)
        {
          uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v128, "Could not construct");
        }
        CFStringRef v54 = v169;
        CFStringRef v169 = v53;
        if (v54) {
          CFRelease(v54);
        }
      }
      uint64_t v55 = sub_10FBF0();
      *(void *)int buf = off_632FB8;
      *(void *)&buf[6] = buf;
      sub_10EA24((uint64_t *)&__src, v55, v161, (uint64_t)buf);
      sub_6AFD4(buf);
      if (v136 && sub_24AAC4((uint64_t)&__src))
      {
        sub_249D54(&v131, v135, &v134);
      }
      else
      {
        char v56 = v142[0];
        p_src = (std::__shared_weak_count *)&__src;
        if ((void **)v142[0] == &__src)
        {
LABEL_96:
          sub_249D54(&v131, p_src, &__src);
        }
        else
        {
          while (1)
          {
            sub_549A4((uint64_t *)buf, &v56->__shared_weak_owners_, "", 3387);
            int v58 = (*(uint64_t (**)(void))(**(void **)buf + 400))(*(void *)buf);
            if (*(void *)&buf[2]) {
              sub_4636C(*(std::__shared_weak_count **)&buf[2]);
            }
            if (v58 == 2) {
              break;
            }
            char v56 = (std::__shared_weak_count *)v56->__shared_owners_;
            if (v56 == (std::__shared_weak_count *)&__src)
            {
              p_src = v142[0];
              goto LABEL_96;
            }
          }
          uint64_t v65 = sub_32A48(2);
          uint64_t v66 = sub_32A48(13);
          char v67 = 0;
          uint64_t v68 = 0;
          *(void *)int buf = 0x100000002;
          uint64_t v69 = *(void *)(v65 + 8);
          while (1)
          {
            uint64_t v70 = (int)buf[v68];
            char v71 = v67;
            if (((v69 & v70) != 0) != ((*(void *)(v66 + 8) & v70) != 0)) {
              break;
            }
            char v67 = 1;
            uint64_t v68 = 1;
            if (v71) {
              goto LABEL_109;
            }
          }
          if ((v69 & v70) == 0) {
            uint64_t v65 = v66;
          }
LABEL_109:
          uint64_t v72 = *(id *)v65;
          uint64_t v73 = v72;
          if (v72 && os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(a2 + 183) >= 0) {
              uint64_t v74 = a2 + 160;
            }
            else {
              uint64_t v74 = *(void *)(a2 + 160);
            }
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3390;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v74;
            _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Device: %s ports are not added to the routable list because device is out of ear.", (uint8_t *)buf, 0x1Cu);
          }
        }
      }
      sub_8108((uint64_t *)&__src);
      if (v169) {
        CFRelease(v169);
      }
      sub_463E0(v166);
      id v75 = *(void **)v161;
      if (!*(void *)v161) {
        goto LABEL_143;
      }
      *(void *)&v161[2] = *(void *)v161;
    }
    else
    {
      memset(buf, 0, 24);
      sub_46B38(buf, v47, v48, 2uLL);
      strcpy((char *)&buf[6], "cwdv");
      LOBYTE(v153) = 0;
      *(_DWORD *)&v155[2] = 3;
      unsigned int v157 = 0;
      uint64_t v158 = 0;
      CFNumberRef v156 = &v157;
      int v159 = 44739242;
      CFTypeRef v160 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_633070;
      CFDictionaryRef v140 = &__p;
      CFDictionaryRef v59 = (void *)sub_10FBF0();
      *(void *)&v161[2] = 0;
      *(void *)&v161[4] = 0;
      *(void *)int v161 = &v161[2];
      sub_6BA78((uint64_t)v137, (uint64_t)&__p);
      sub_10FD10((uint64_t *)&__src, v59, (uint64_t)buf, (uint64_t)v161, (uint64_t)v137);
      sub_6AFD4(v137);
      sub_10E118(*(void **)&v161[2]);
      int v60 = v142[0];
      if (v142[0])
      {
        if (v142[0]->__shared_owners_ != -1)
        {
          uint64_t v150 = 0;
          CFIndex v151 = 0;
          int v61 = std::__shared_weak_count::lock(v142[0]);
          if (v61)
          {
            uint64_t v62 = v61;
            uint64_t v63 = __src;
            atomic_fetch_add_explicit(&v61->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            unint64_t v64 = v151;
            uint64_t v150 = v63;
            CFIndex v151 = v62;
            if (v64) {
              std::__shared_weak_count::__release_weak(v64);
            }
            sub_4636C(v62);
          }
          else
          {
            uint64_t v76 = v151;
            uint64_t v150 = 0;
            CFIndex v151 = 0;
            if (v76) {
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          sub_D1200((uint64_t *)v161, (uint64_t *)&v150, 1);
          if (v151) {
            std::__shared_weak_count::__release_weak(v151);
          }
          if (v136 && sub_24AAC4((uint64_t)v161)) {
            unsigned __int8 v77 = &v134;
          }
          else {
            unsigned __int8 v77 = (uint64_t *)v161;
          }
          sub_249D54(&v131, (void *)v77[1], v77);
          sub_8108((uint64_t *)v161);
        }
        std::__shared_weak_count::__release_weak(v60);
      }
      uint64_t v78 = operator new(8uLL);
      *uint64_t v78 = 0x706D627470687062;
      *(void *)int v161 = v78;
      *(void *)&v161[2] = v78 + 1;
      *(void *)&v161[4] = v78 + 1;
      strcpy(v162, "cwdv");
      char v163 = 0;
      int v164 = 3;
      id v166 = 0;
      uint64_t v167 = 0;
      uint64_t v165 = &v166;
      int v168 = 44739242;
      CFStringRef v169 = 0;
      uint64_t v79 = sub_10FBF0();
      long long __src = off_632FB8;
      CFNumberRef v143 = &__src;
      sub_10EA24((uint64_t *)&v150, v79, v161, (uint64_t)&__src);
      sub_6AFD4(&__src);
      sub_BCAD8((uint64_t *)&__src, (uint64_t)&v150, "", 3253);
      for (unsigned int k = v142[0]; k != (std::__shared_weak_count *)&__src; unsigned int k = (std::__shared_weak_count *)k->__shared_owners_)
      {
        if (sub_24F39C(k->__shared_weak_owners_) == 2)
        {
          int v81 = sub_E00F4(*(void *)(a1 + 128), k->__shared_weak_owners_, (uint64_t)v161);
          sub_30148C(*(void *)(a1 + 128), v81, a2);
        }
      }
      sub_B8E4((uint64_t *)&__src);
      sub_8108((uint64_t *)&v150);
      if (v169) {
        CFRelease(v169);
      }
      sub_463E0(v166);
      if (*(void *)v161)
      {
        *(void *)&v161[2] = *(void *)v161;
        operator delete(*(void **)v161);
      }
      sub_6AFD4(&__p);
      if (v160) {
        CFRelease(v160);
      }
      sub_463E0(v157);
      id v75 = *(void **)buf;
      if (!*(void *)buf) {
        goto LABEL_143;
      }
      *(void *)&AudioObjectPropertyAddress buf[2] = *(void *)buf;
    }
    operator delete(v75);
LABEL_143:
    *(void *)int buf = buf;
    *(void *)&AudioObjectPropertyAddress buf[2] = buf;
    *(void *)&uint8_t buf[4] = 0;
    CFTypeID v82 = v132;
    if (v132 != &v131)
    {
      do
      {
        sub_549A4((uint64_t *)v161, v82 + 2, "", 3430);
        int v83 = (*(uint64_t (**)(void))(**(void **)v161 + 408))(*(void *)v161);
        if (*(void *)&v161[2]) {
          sub_4636C(*(std::__shared_weak_count **)&v161[2]);
        }
        if (v83) {
          sub_3590((uint64_t *)buf, v82[2], v82[3]);
        }
        CFTypeID v82 = (uint64_t *)v82[1];
      }
      while (v82 != &v131);
      if (*(void *)&buf[4])
      {
        sub_463E0(*(void **)(a2 + 448));
        *(void *)(a2 + 448) = 0;
        *(void *)(a2 + 456) = 0;
        *(void *)(a2 + 440) = a2 + 448;
        sub_BCAD8((uint64_t *)&__src, (uint64_t)buf, "", 3438);
        for (unsigned int m = v142[0]; m != (std::__shared_weak_count *)&__src; unsigned int m = (std::__shared_weak_count *)m->__shared_owners_)
        {
          uint64_t v85 = m->__shared_weak_owners_;
          memset(v161, 0, sizeof(v161));
          strcpy(v162, "cwdv");
          char v163 = 0;
          int v164 = 3;
          id v166 = 0;
          uint64_t v167 = 0;
          uint64_t v165 = &v166;
          CFStringRef v169 = 0;
          int v168 = 44731050;
          int v86 = sub_E00F4(*(void *)(a1 + 128), v85, (uint64_t)v161);
          sub_3018A4(*(void *)(a1 + 128), v86, a2);
          if (v169) {
            CFRelease(v169);
          }
          sub_463E0(v166);
          if (*(void *)v161)
          {
            *(void *)&v161[2] = *(void *)v161;
            operator delete(*(void **)v161);
          }
        }
        sub_B8E4((uint64_t *)&__src);
      }
    }
    sub_8108((uint64_t *)buf);
    sub_8108(&v131);
    sub_8108(&v134);
    goto LABEL_158;
  }
  if (v39 == 1668051817)
  {
    uint64_t v40 = sub_32A48(2);
    uint64_t v41 = sub_32A48(13);
    char v42 = 0;
    uint64_t v43 = 0;
    *(void *)int v161 = 0x100000002;
    uint64_t v44 = *(void *)(v40 + 8);
    while (1)
    {
      uint64_t v45 = (int)v161[v43];
      char v46 = v42;
      if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
        break;
      }
      char v42 = 1;
      uint64_t v43 = 1;
      if (v46) {
        goto LABEL_212;
      }
    }
    if ((v44 & v45) == 0) {
      uint64_t v40 = v41;
    }
LABEL_212:
    uint64_t v122 = *(id *)v40;
    uint64_t v123 = v122;
    if (v122 && os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
    {
      v161[0] = 136315394;
      *(void *)&v161[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(v161[3]) = 1024;
      *(_DWORD *)((char *)&v161[3] + 2) = 3492;
      _os_log_impl(&def_1E50E8, v123, OS_LOG_TYPE_DEBUG, "%25s:%-5d - kVirtualAudioPortTypeReceiverBuiltIn is added to disallowed port types.", (uint8_t *)v161, 0x12u);
    }

    v161[0] = 1886545251;
    sub_46C2C((uint64_t **)(a2 + 88), (uint64_t *)(a2 + 96), 0x70726563u, v161);
    sub_14DE4C((uint64_t **)(a2 + 112), 0x70726563u);
    return;
  }
  if (!*(void *)(a2 + 456) && *(_DWORD *)(a2 + 188) == 1768842095 && MGGetSInt32Answer() != 6)
  {
    uint64_t v47 = operator new(8uLL);
    void *v47 = 0x706D627470687062;
    uint64_t v87 = (uint64_t)(v47 + 1);
    if (*(_DWORD *)(a2 + 632))
    {
      uint64_t v88 = sub_46BF4(4uLL);
      char v89 = v88;
      CFTypeRef v88[2] = 1885892674;
      uint64_t v87 = (uint64_t)(v88 + 3);
      for (uint64_t n = 1; n != -1; --n)
        v88[n] = *(_DWORD *)((char *)v47 + n * 4);
      operator delete(v47);
      uint64_t v47 = v89;
    }
    memset(v161, 0, sizeof(v161));
    sub_46B38(v161, v47, v87, (v87 - (uint64_t)v47) >> 2);
    strcpy(v162, "cwdv");
    char v163 = 0;
    int v164 = 3;
    id v166 = 0;
    uint64_t v167 = 0;
    uint64_t v165 = &v166;
    int v168 = 44739242;
    CFStringRef v169 = 0;
    uint64_t v91 = sub_10FBF0();
    *(void *)int buf = off_632FB8;
    *(void *)&buf[6] = buf;
    sub_10EA24((uint64_t *)&__p, v91, v161, (uint64_t)buf);
    sub_BCAD8((uint64_t *)&__src, (uint64_t)&__p, "", 3288);
    sub_8108((uint64_t *)&__p);
    sub_6AFD4(buf);
    uint64_t v92 = v142[0];
    if ((void **)v142[0] == &__src)
    {
LABEL_171:
      BOOL v94 = 0;
    }
    else
    {
      while (1)
      {
        int v93 = (*(uint64_t (**)(uint64_t))(*(void *)v92->__shared_weak_owners_ + 400))(v92->__shared_weak_owners_);
        BOOL v94 = v93 == 1;
        if (v93 == 1) {
          break;
        }
        uint64_t v92 = (std::__shared_weak_count *)v92->__shared_owners_;
        if (v92 == (std::__shared_weak_count *)&__src) {
          goto LABEL_171;
        }
      }
    }
    uint64_t v95 = sub_298DA4();
    int v96 = (*(uint64_t (**)(uint64_t))(*(void *)v95 + 176))(v95);
    uint64_t v97 = v142[0];
    if ((void **)v142[0] != &__src)
    {
      BOOL v129 = v96 == 0;
      if (v96) {
        char v98 = 1;
      }
      else {
        char v98 = v94;
      }
      char v130 = v98;
      do
      {
        int v99 = sub_E00F4(*(void *)(a1 + 128), v97->__shared_weak_owners_, (uint64_t)v161);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v97->__shared_weak_owners_ + 400))(v97->__shared_weak_owners_) == 1)
        {
          uint64_t v100 = sub_32A48(2);
          uint64_t v101 = sub_32A48(13);
          char v102 = 0;
          uint64_t v103 = 0;
          *(void *)int buf = 0x100000002;
          uint64_t v104 = *(void *)(v100 + 8);
          while (1)
          {
            uint64_t v105 = (int)buf[v103];
            char v106 = v102;
            if (((v104 & v105) != 0) != ((*(void *)(v101 + 8) & v105) != 0)) {
              break;
            }
            char v102 = 1;
            uint64_t v103 = 1;
            if (v106) {
              goto LABEL_189;
            }
          }
          if ((v104 & v105) == 0) {
            uint64_t v100 = v101;
          }
LABEL_189:
          uint64_t v114 = *(id *)v100;
          CFTypeID v115 = v114;
          if (v114 && os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3300;
            HIWORD(buf[4]) = 1024;
            buf[5] = v99;
            _os_log_impl(&def_1E50E8, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d - VirtualAudio_Port: not changing routability of %u (in ear).", (uint8_t *)buf, 0x18u);
          }
        }
        else if (v130)
        {
          uint64_t v107 = sub_32A48(2);
          uint64_t v108 = sub_32A48(13);
          char v109 = 0;
          uint64_t v110 = 0;
          *(void *)int buf = 0x100000002;
          uint64_t v111 = *(void *)(v107 + 8);
          while (1)
          {
            uint64_t v112 = (int)buf[v110];
            char v113 = v109;
            if (((v111 & v112) != 0) != ((*(void *)(v108 + 8) & v112) != 0)) {
              break;
            }
            char v109 = 1;
            uint64_t v110 = 1;
            if (v113) {
              goto LABEL_198;
            }
          }
          if ((v111 & v112) == 0) {
            uint64_t v107 = v108;
          }
LABEL_198:
          id v116 = *(id *)v107;
          unint64_t v117 = v116;
          if (v116)
          {
            uint64_t v118 = v116;
            if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
            {
              int v119 = (*(uint64_t (**)(uint64_t))(*(void *)v97->__shared_weak_owners_ + 400))(v97->__shared_weak_owners_);
              int v120 = (*(uint64_t (**)(uint64_t))(*(void *)v97->__shared_weak_owners_ + 160))(v97->__shared_weak_owners_);
              buf[0] = 136316418;
              *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 3313;
              HIWORD(buf[4]) = 1024;
              buf[5] = v99;
              LOWORD(buf[6]) = 1024;
              *(_DWORD *)((char *)&buf[6] + 2) = v129;
              HIWORD(buf[7]) = 1024;
              int v153 = v119;
              __int16 v154 = 1024;
              *(_DWORD *)CFNumberRef v155 = v120;
              _os_log_impl(&def_1E50E8, v118, OS_LOG_TYPE_DEBUG, "%25s:%-5d - VirtualAudio_Port: %u (DnDState=%u, InEarState=%u, IsRoutable=%u) is added to the unroutable list.", (uint8_t *)buf, 0x2Au);
            }
          }
          sub_30148C(*(void *)(a1 + 128), v99, a2);
        }
        else if (((*(uint64_t (**)(uint64_t))(*(void *)v97->__shared_weak_owners_ + 112))(v97->__shared_weak_owners_) & 0xFF00000000) != 0 {
               && (*(unsigned int (**)(uint64_t))(*(void *)v97->__shared_weak_owners_ + 112))(v97->__shared_weak_owners_) == 1701869160)
        }
        {
          sub_3018A4(*(void *)(a1 + 128), v99, a2);
        }
        uint64_t v97 = (std::__shared_weak_count *)v97->__shared_owners_;
      }
      while (v97 != (std::__shared_weak_count *)&__src);
    }
    sub_B8E4((uint64_t *)&__src);
    if (v169) {
      CFRelease(v169);
    }
    sub_463E0(v166);
    if (*(void *)v161)
    {
      *(void *)&v161[2] = *(void *)v161;
      operator delete(*(void **)v161);
    }
    if (v47)
    {
LABEL_158:
      uint64_t v21 = v47;
LABEL_159:
      operator delete(v21);
    }
  }
}