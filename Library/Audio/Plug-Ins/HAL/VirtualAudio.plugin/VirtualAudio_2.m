void sub_119DEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  operator delete();
}

void sub_119E8C()
{
}

void sub_119E94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x119E84);
}

void sub_119EB4()
{
}

uint64_t sub_119EBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_119F10(void *a1)
{
  *a1 = off_637B90;
  sub_2699DC(a1);

  operator delete();
}

uint64_t sub_119F64(void *a1)
{
  *a1 = off_637B90;
  return sub_2699DC(a1);
}

void *sub_119F84(void *a1, uint64_t *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v4 = operator new(0x18uLL);
  uint64_t v5 = *a2;
  v4[1] = a1;
  v4[2] = v5;
  void *v4 = a1;
  *a1 = v4;
  a1[1] = v4;
  a1[2] = 1;
  return a1;
}

void sub_119FD4(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_119FE8(uint64_t *a1, void *a2)
{
  v4 = operator new(0x28uLL);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = v4 + 2;
  v4[3] = v4 + 2;
  v4[4] = 0;
  uint64_t result = sub_D39BC((uint64_t)(v4 + 2), v4 + 2, a2);
  uint64_t v6 = *a1;
  void *v4 = *a1;
  v4[1] = a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void sub_11A058(void *a1)
{
  *a1 = off_622650;
  sub_2699DC(a1);

  operator delete();
}

uint64_t sub_11A0AC(void *a1)
{
  *a1 = off_622650;
  return sub_2699DC(a1);
}

void *sub_11A0CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_46B38(a1 + 2, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_11A120(_Unwind_Exception *exception_object)
{
  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_4636C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_11A138(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void *)*v2;
      v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void *sub_11A19C(void *a1)
{
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_11A1DC(void *a1)
{
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_4636C(v3);
  }
  return a1;
}

uint64_t sub_11A21C(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void *)*v2;
      sub_11A27C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_11A27C(void *a1)
{
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *sub_11A2D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      uint64_t v6 = sub_A6138(a2);
      uint64_t v7 = *a1;
      *uint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_11A344(_Unwind_Exception *a1)
{
  sub_A60C4(v1);
  _Unwind_Resume(a1);
}

std::string *sub_11A358(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v6 = *(os_unfair_lock_s **)(a2 + 16);
      if (v6) {
        sub_4F64((uint64_t)__p, v6 + 2);
      }
      else {
        sub_21C8C(__p, "NULL");
      }
      uint64_t v7 = (v11 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      v8 = (v11 & 0x80u) == 0 ? (void *)v11 : __p[1];
      std::string::append(a1, v7, (std::string::size_type)v8);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_11A454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_11A490(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_11A27C(v1 + 2);
    }
    operator delete(v1);
  }
}

void sub_11A4E8(void *a1)
{
  sub_11A520(a1);

  operator delete();
}

void *sub_11A520(void *result)
{
  *uint64_t result = off_6228D0;
  uint64_t v1 = result[2];
  if (v1)
  {
    sub_11A588((uint64_t *)(v1 + 16));
    operator delete();
  }
  return result;
}

void sub_11A588(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_8108(v3 + 17);
        uint64_t v6 = (void *)v3[13];
        if (v6)
        {
          v3[14] = (uint64_t)v6;
          operator delete(v6);
        }
        sub_463E0((void *)v3[11]);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_11A618(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  strcpy((char *)(a1 + 24), "cwdv");
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(_DWORD *)(a1 + 72) = 44739242;
  *(void *)(a1 + 80) = 0;
}

void sub_11A660(uint64_t a1@<X0>, unsigned int ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_32A48(8);
  if (*(unsigned char *)(v5 + 8))
  {
    uint64_t v6 = *(NSObject **)v5;
    if (*(void *)v5)
    {
      if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
      {
        v115 = a2;
        uint64_t v112 = *(void *)(a1 + 392);
        memset(&v116, 0, sizeof(v116));
        std::string::append(&v116, "{ ", 2uLL);
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v116.__r_.__value_.__l.__size_;
        }
        v8 = *(void **)(a1 + 400);
        v9 = (void *)(a1 + 408);
        if (v8 != (void *)(a1 + 408))
        {
          do
          {
            std::string::size_type v10 = size;
            if (*((_DWORD *)v8 + 7) != 1986291046)
            {
              if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
                std::string::size_type v10 = v116.__r_.__value_.__l.__size_;
              }
              else {
                std::string::size_type v10 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
              }
            }
            unsigned __int8 v11 = (void *)v8[1];
            v12 = v8;
            if (v11)
            {
              do
              {
                v13 = v11;
                unsigned __int8 v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v13 = (void *)v12[2];
                BOOL v14 = *v13 == (void)v12;
                v12 = v13;
              }
              while (!v14);
            }
            sub_4D60(&v118, (unsigned int *)v8 + 7);
            uint64_t v15 = std::string::append(&v118, "; ", 2uLL);
            long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            v119.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v16;
            v15->__r_.__value_.__l.__size_ = 0;
            v15->__r_.__value_.__r.__words[2] = 0;
            v15->__r_.__value_.__r.__words[0] = 0;
            sub_383A04(&__p, (uint64_t)v8 + 36);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
            }
            v19 = std::string::append(&v119, (const std::string::value_type *)p_p, v18);
            long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v120.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            if (v13 == v9) {
              v21 = " ]";
            }
            else {
              v21 = " ], ";
            }
            if (v13 == v9) {
              std::string::size_type v22 = 2;
            }
            else {
              std::string::size_type v22 = 4;
            }
            v23 = std::string::append(&v120, v21, v22);
            long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            *(void *)&buf[4] = *((void *)&v23->__r_.__value_.__l + 2);
            *(_OWORD *)buf = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v120.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            if (buf[5] >= 0) {
              v25 = (const std::string::value_type *)buf;
            }
            else {
              v25 = *(const std::string::value_type **)buf;
            }
            if (buf[5] >= 0) {
              std::string::size_type v26 = HIBYTE(buf[5]);
            }
            else {
              std::string::size_type v26 = *(void *)&buf[2];
            }
            std::string::insert(&v116, v10, v25, v26);
            if (SHIBYTE(buf[5]) < 0) {
              operator delete(*(void **)buf);
            }
            v8 = v13;
          }
          while (v13 != v9);
        }
        std::string::append(&v116, " }", 2uLL);
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v27 = &v116;
        }
        else {
          v27 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        int v28 = *(_DWORD *)(a1 + 424);
        buf[0] = 136316162;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1678;
        HIWORD(buf[4]) = 2048;
        *(void *)&buf[5] = v112;
        __int16 v122 = 2080;
        v123 = v27;
        __int16 v124 = 1024;
        int v125 = v28;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Command data: mOwner %p, VAD Context attributes: %s, mReason %u", (uint8_t *)buf, 0x2Cu);
        a2 = v115;
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v116.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  v29 = (os_log_t *)sub_32A48(8);
  v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEBUG))
  {
    sub_3827A4(&v120, a2);
    v31 = (v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v120
        : (std::string *)v120.__r_.__value_.__r.__words[0];
    buf[0] = 136315650;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1680;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v31;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to activate with concrete route(s): %s", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
  }
  sub_11B3D8(a3, *(void *)(a1 + 392), (__n128 ***)a2, a1 + 400, (void **)(a1 + 24), (void *)(a1 + 48), (void **)(a1 + 96), *(_DWORD *)(a1 + 120), (void **)(a1 + 128), a1 + 152, a1 + 192, *(unsigned char *)(a1 + 360), (uint64_t *)(a1 + 368), *(_DWORD *)(a1 + 424), (long long *)(a1 + 432), (uint64_t *)(a1 + 464));
  if (*(_DWORD *)(a3 + 8)) {
    goto LABEL_155;
  }
  uint64_t v32 = sub_32A48(8);
  uint64_t v33 = sub_32A48(34);
  char v34 = 0;
  uint64_t v35 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v36 = *(void *)(v32 + 8);
  while (1)
  {
    uint64_t v37 = (int)buf[v35];
    char v38 = v34;
    if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
      break;
    }
    char v34 = 1;
    uint64_t v35 = 1;
    if (v38) {
      goto LABEL_65;
    }
  }
  if ((v36 & v37) == 0) {
    uint64_t v32 = v33;
  }
LABEL_65:
  v39 = *(NSObject **)v32;
  if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1685;
    _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully activated new concrete route.", (uint8_t *)buf, 0x12u);
  }
  if (*(_DWORD *)(a3 + 8)) {
    goto LABEL_155;
  }
  uint64_t v40 = *(void *)(a1 + 392);
  if (*(void *)(v40 + 472)) {
    goto LABEL_80;
  }
  uint64_t v41 = sub_32A48(8);
  uint64_t v42 = sub_32A48(34);
  char v43 = 0;
  uint64_t v44 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v45 = *(void *)(v41 + 8);
  while (1)
  {
    uint64_t v46 = (int)buf[v44];
    char v47 = v43;
    if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
      break;
    }
    char v43 = 1;
    uint64_t v44 = 1;
    if (v47) {
      goto LABEL_76;
    }
  }
  if ((v45 & v46) == 0) {
    uint64_t v41 = v42;
  }
LABEL_76:
  v48 = *(NSObject **)v41;
  if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "RouteCache.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 576;
    _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Empty Route Cache", (uint8_t *)buf, 0x12u);
  }
  if (*(void *)(v40 + 472))
  {
LABEL_80:
    uint64_t v49 = sub_32A48(8);
    uint64_t v50 = sub_32A48(34);
    char v51 = 0;
    uint64_t v52 = 0;
    uint64_t v113 = v40 + 456;
    *(void *)buf = 0x100000002;
    uint64_t v53 = *(void *)(v49 + 8);
    while (1)
    {
      uint64_t v54 = (int)buf[v52];
      char v55 = v51;
      if (((v53 & v54) != 0) != ((*(void *)(v50 + 8) & v54) != 0)) {
        break;
      }
      char v51 = 1;
      uint64_t v52 = 1;
      if (v55) {
        goto LABEL_86;
      }
    }
    if ((v53 & v54) == 0) {
      uint64_t v49 = v50;
    }
LABEL_86:
    v56 = *(NSObject **)v49;
    if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RouteCache.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 579;
      _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route Cache:", (uint8_t *)buf, 0x12u);
    }
    for (uint64_t i = *(void *)(v40 + 464); i != v113; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v58 = sub_32A48(8);
      uint64_t v59 = sub_32A48(34);
      char v60 = 0;
      uint64_t v61 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v62 = *(void *)(v58 + 8);
      while (1)
      {
        uint64_t v63 = (int)buf[v61];
        char v64 = v60;
        if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
          break;
        }
        char v60 = 1;
        uint64_t v61 = 1;
        if (v64) {
          goto LABEL_96;
        }
      }
      if ((v62 & v63) == 0) {
        uint64_t v58 = v59;
      }
LABEL_96:
      v65 = *(NSObject **)v58;
      if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        sub_4D60(&v120, (unsigned int *)(i + 16));
        v66 = &v120;
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v66 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RouteCache.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 461;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v66;
        _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d DeviceType: %s.", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v67 = sub_32A48(8);
      uint64_t v68 = sub_32A48(34);
      char v69 = 0;
      uint64_t v70 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v71 = *(void *)(v67 + 8);
      while (1)
      {
        uint64_t v72 = (int)buf[v70];
        char v73 = v69;
        if (((v71 & v72) != 0) != ((*(void *)(v68 + 8) & v72) != 0)) {
          break;
        }
        char v69 = 1;
        uint64_t v70 = 1;
        if (v73) {
          goto LABEL_108;
        }
      }
      if ((v71 & v72) == 0) {
        uint64_t v67 = v68;
      }
LABEL_108:
      v74 = *(NSObject **)v67;
      if (v74 && os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        sub_382A0C(&v120, (void *)(i + 48));
        v75 = &v120;
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v75 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RouteCache.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 462;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v75;
        _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Source physical devices: %s.", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v76 = sub_32A48(8);
      uint64_t v77 = sub_32A48(34);
      char v78 = 0;
      uint64_t v79 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v80 = *(void *)(v76 + 8);
      while (1)
      {
        uint64_t v81 = (int)buf[v79];
        char v82 = v78;
        if (((v80 & v81) != 0) != ((*(void *)(v77 + 8) & v81) != 0)) {
          break;
        }
        char v78 = 1;
        uint64_t v79 = 1;
        if (v82) {
          goto LABEL_120;
        }
      }
      if ((v80 & v81) == 0) {
        uint64_t v76 = v77;
      }
LABEL_120:
      v83 = *(NSObject **)v76;
      if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        sub_382A0C(&v120, (void *)(i + 72));
        v84 = &v120;
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v84 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RouteCache.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 463;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v84;
        _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Destination physical devices: %s.", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
      }
      if (*(unsigned char *)(i + 128))
      {
        uint64_t v85 = sub_32A48(8);
        uint64_t v86 = sub_32A48(34);
        char v87 = 0;
        uint64_t v88 = 0;
        v89 = (void *)(i + 104);
        *(void *)buf = 0x100000002;
        uint64_t v90 = *(void *)(v85 + 8);
        while (1)
        {
          uint64_t v91 = (int)buf[v88];
          char v92 = v87;
          if (((v90 & v91) != 0) != ((*(void *)(v86 + 8) & v91) != 0)) {
            break;
          }
          char v87 = 1;
          uint64_t v88 = 1;
          if (v92) {
            goto LABEL_133;
          }
        }
        if ((v90 & v91) == 0) {
          uint64_t v85 = v86;
        }
LABEL_133:
        v93 = *(NSObject **)v85;
        if (v93 && os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(i + 127) < 0) {
            v89 = (void *)*v89;
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "RouteCache.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 464;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v89;
          _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Aggregate device clock device: %s", (uint8_t *)buf, 0x1Cu);
        }
      }
      for (uint64_t j = *(void *)(i + 32); j != i + 24; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v95 = sub_32A48(8);
        uint64_t v96 = sub_32A48(34);
        char v97 = 0;
        uint64_t v98 = 0;
        *(void *)buf = 0x100000002;
        uint64_t v99 = *(void *)(v95 + 8);
        while (1)
        {
          uint64_t v100 = (int)buf[v98];
          char v101 = v97;
          if (((v99 & v100) != 0) != ((*(void *)(v96 + 8) & v100) != 0)) {
            break;
          }
          char v97 = 1;
          uint64_t v98 = 1;
          if (v101) {
            goto LABEL_146;
          }
        }
        if ((v99 & v100) == 0) {
          uint64_t v95 = v96;
        }
LABEL_146:
        v102 = *(NSObject **)v95;
        if (v102 && os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
        {
          sub_E5500(&v120, (unsigned __int8 *)(j + 16));
          v103 = &v120;
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v103 = (std::string *)v120.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "RouteCache.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 396;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v103;
          _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", (uint8_t *)buf, 0x1Cu);
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v120.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a3 + 8))
  {
LABEL_155:
    uint64_t v104 = sub_32A48(8);
    uint64_t v105 = sub_32A48(34);
    char v106 = 0;
    uint64_t v107 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v108 = *(void *)(v104 + 8);
    while (1)
    {
      uint64_t v109 = (int)buf[v107];
      char v110 = v106;
      if (((v108 & v109) != 0) != ((*(void *)(v105 + 8) & v109) != 0)) {
        break;
      }
      char v106 = 1;
      uint64_t v107 = 1;
      if (v110) {
        goto LABEL_161;
      }
    }
    if ((v108 & v109) == 0) {
      uint64_t v104 = v105;
    }
LABEL_161:
    v111 = *(NSObject **)v104;
    if (*(void *)v104 && os_log_type_enabled(*(os_log_t *)v104, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1691;
      _os_log_impl(&def_1E50E8, v111, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to activate a route list for which all ports were connected! Attempting additional route lists", (uint8_t *)buf, 0x12u);
    }
  }
}

void sub_11B318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_11B3D8(uint64_t a1, uint64_t a2, __n128 ***a3, uint64_t a4, void **a5, void *a6, void **a7, int a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t *a13, unsigned int a14, long long *a15, uint64_t *a16)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    v377 = (os_log_t *)sub_32A48(13);
    v378 = *v377;
    if (*v377 && os_log_type_enabled(*v377, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2831;
      _os_log_impl(&def_1E50E8, v378, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int64x2_t v432 = 0uLL;
  unint64_t v433 = 0;
  long long v20 = *a3;
  v21 = a3[1];
  if (*a3 == v21)
  {
    unint64_t v22 = 0;
  }
  else
  {
    unint64_t v22 = 0;
    do
    {
      v23 = *v20;
      if (v22 >= v433)
      {
        unint64_t v22 = sub_1200E4(&v432, *v20);
      }
      else
      {
        unint64_t v24 = v23->n128_u64[0];
        *(_DWORD *)(v22 + 8) = v23->n128_u32[2];
        *(void *)unint64_t v22 = v24;
        sub_12004C((__n128 **)(v22 + 16), v23 + 1);
        *(void *)(v22 + 40) = v23[2].n128_u64[1];
        v22 += 48;
      }
      v432.i64[1] = v22;
      ++v20;
    }
    while (v20 != v21);
  }
  uint64_t v397 = a1;
  uint64_t v25 = sub_1202D0(a4, 0x76646566u, 0);
  std::string::size_type v26 = (uint64_t **)(a4 + 8);
  if (a4 + 8 == v25)
  {
    v380 = (os_log_t *)sub_32A48(13);
    v381 = *v380;
    if (*v380 && os_log_type_enabled(*v380, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2839;
      _os_log_impl(&def_1E50E8, v381, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
    }
    v382 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v382, "Precondition failure.");
  }
  v27 = *v26;
  if (!*v26) {
LABEL_19:
  }
    sub_8251C("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unsigned int v28 = *((_DWORD *)v27 + 7);
      BOOL v29 = *((_DWORD *)v27 + 8) != 0;
      if (v28 != 1986291046) {
        BOOL v29 = v28 > 0x76646566;
      }
      if (!v29) {
        break;
      }
      v27 = (uint64_t *)*v27;
      if (!v27) {
        goto LABEL_19;
      }
    }
    if (v28 >= 0x76646566) {
      break;
    }
    v27 = (uint64_t *)v27[1];
    if (!v27) {
      goto LABEL_19;
    }
  }
  uint64_t v30 = *(uint64_t *)((char *)v27 + 36);
  v398 = (unsigned int *)v27 + 9;
  uint64_t v31 = *(void *)(*(void *)a2 + 8);
  v394 = a6;
  int v393 = a8;
  if (v31)
  {
    uint64_t v32 = *(void *)a2 + 8;
    do
    {
      unsigned int v33 = *(_DWORD *)(v31 + 32);
      BOOL v34 = v33 >= v30;
      if (v33 >= v30) {
        uint64_t v35 = (uint64_t *)v31;
      }
      else {
        uint64_t v35 = (uint64_t *)(v31 + 8);
      }
      if (v34) {
        uint64_t v32 = v31;
      }
      uint64_t v31 = *v35;
    }
    while (*v35);
    if (v32 != *(void *)a2 + 8 && *(_DWORD *)(v32 + 32) <= v30)
    {
      unsigned __int16 v36 = sub_37C2CC(v32 + 80, HIDWORD(v30));
      BOOL v37 = v36 >= 0x100u && v36 == 0;
      if (v37)
      {
        uint64_t v431 = 0;
        v430 = 0;
        v429 = (uint64_t *)&v430;
        goto LABEL_53;
      }
      unint64_t v22 = v432.u64[1];
    }
  }
  uint64_t v431 = 0;
  v430 = 0;
  v429 = (uint64_t *)&v430;
  for (uint64_t i = v432.i64[0]; i != v22; i += 48)
  {
    for (uint64_t j = *(void **)(i + 24); j != (void *)(i + 16); uint64_t j = (void *)j[1])
    {
      sub_43F38((uint64_t *)v450, j + 2, "", 941);
      uint64_t v40 = *(void *)v450;
      if ((*(_WORD *)(*(void *)v450 + 184) & 1) != 0
        && (*(void *)(*(void *)v450 + 128) & 0xFF00000000) != 0)
      {
        *(_DWORD *)buf = *(void *)(*(void *)v450 + 128);
        sub_72300(__p, (__int32 *)buf, 1);
        sub_120340(&v429, v40, *(uint64_t *)&v450[8], (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      sub_43F38((uint64_t *)buf, j + 4, "", 953);
      uint64_t v41 = *(void *)buf;
      if ((*(_WORD *)(*(void *)buf + 184) & 1) == 0 && (*(void *)(*(void *)buf + 128) & 0xFF00000000) != 0)
      {
        LODWORD(v420) = *(void *)(*(void *)buf + 128);
        sub_72300(__p, (__int32 *)&v420, 1);
        sub_120340(&v429, v41, *(uint64_t *)&buf[8], (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      if (*(void *)&v450[8]) {
        sub_4636C(*(std::__shared_weak_count **)&v450[8]);
      }
    }
  }
LABEL_53:
  *(void *)uint64_t v397 = off_6228D0;
  *(void *)(v397 + 8) = 1;
  *(void *)(v397 + 16) = 0;
  *(unsigned char *)(v397 + 24) = 0;
  *(unsigned char *)(v397 + 32) = 0;
  v427[1] = 0;
  v427[0] = 0;
  v428 = 0;
  v425[1] = 0;
  v425[0] = 0;
  v426 = 0;
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    v383 = (os_log_t *)sub_32A48(13);
    v384 = *v383;
    if (*v383 && os_log_type_enabled(*v383, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 5090;
      _os_log_impl(&def_1E50E8, v384, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
    }
    v375 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v376 = (void (*)(void *))&std::logic_error::~logic_error;
    std::logic_error::logic_error(v375, "Precondition failure.");
LABEL_780:
    __cxa_throw(v375, v385, v376);
  }
  uint64_t v42 = (uint64_t *)(*(void *)a2 + 8);
  uint64_t v43 = *v42;
  if (!*v42) {
    goto LABEL_741;
  }
  unsigned int v44 = *v398;
  uint64_t v45 = *(void *)a2 + 8;
  uint64_t v46 = *(void *)v45;
  do
  {
    unsigned int v47 = *(_DWORD *)(v46 + 32);
    BOOL v48 = v47 >= v44;
    if (v47 >= v44) {
      uint64_t v49 = (uint64_t *)v46;
    }
    else {
      uint64_t v49 = (uint64_t *)(v46 + 8);
    }
    if (v48) {
      uint64_t v45 = v46;
    }
    uint64_t v46 = *v49;
  }
  while (*v49);
  if ((uint64_t *)v45 == v42 || v44 < *(_DWORD *)(v45 + 32))
  {
LABEL_741:
    v372 = (os_log_t *)sub_32A48(13);
    v373 = *v372;
    if (*v372 && os_log_type_enabled(*v372, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v450, *v398);
      v374 = v450[23] >= 0 ? v450 : *(unsigned char **)v450;
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 5093;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v374;
      _os_log_impl(&def_1E50E8, v373, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Category %s does not exist in the database.\"", (uint8_t *)__p, 0x1Cu);
      if ((v450[23] & 0x80000000) != 0) {
        operator delete(*(void **)v450);
      }
    }
    v375 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v376 = (void (*)(void *))&std::runtime_error::~runtime_error;
    std::runtime_error::runtime_error((std::runtime_error *)v375, "Category %s does not exist in the database.");
    goto LABEL_779;
  }
  if (*(_DWORD *)(v45 + 72) == 1668246894)
  {
    uint64_t v50 = *(void *)a2 + 8;
    do
    {
      unsigned int v51 = *(_DWORD *)(v43 + 32);
      BOOL v52 = v51 >= 0x63736176;
      if (v51 >= 0x63736176) {
        uint64_t v53 = (uint64_t *)v43;
      }
      else {
        uint64_t v53 = (uint64_t *)(v43 + 8);
      }
      if (v52) {
        uint64_t v50 = v43;
      }
      uint64_t v43 = *v53;
    }
    while (*v53);
    if ((uint64_t *)v50 == v42 || *(_DWORD *)(v50 + 32) > 0x63736176u)
    {
      v386 = (os_log_t *)sub_32A48(13);
      v387 = *v386;
      if (*v386 && os_log_type_enabled(*v386, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 5102;
        _os_log_impl(&def_1E50E8, v387, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Category kVirtualAudioPlugInRoutingCategoryStandardAV does not exist in the database.\"", (uint8_t *)__p, 0x12u);
      }
      v375 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v376 = (void (*)(void *))&std::runtime_error::~runtime_error;
      std::runtime_error::runtime_error((std::runtime_error *)v375, "Category kVirtualAudioPlugInRoutingCategoryStandardAV does not exist in the database.");
    }
    else
    {
      if (*(_DWORD *)(v50 + 72) == 1668510820)
      {
        *(void *)&long long __dst = &__dst;
        *((void *)&__dst + 1) = &__dst;
        uint64_t v438 = 0;
        int v54 = *((_DWORD *)v27 + 10);
        LODWORD(v434) = 1668505974;
        HIDWORD(v434) = v54;
        char v435 = 0;
        char v436 = 0;
        long long v421 = 0uLL;
        v420 = &v421;
        *(void *)&v450[8] = 0;
        *(void *)v450 = &v450[8];
        *(void *)&long long v451 = 0;
        *(void *)&v450[32] = 0;
        *(void *)&v450[16] = 0;
        *(void *)&v450[24] = &v450[32];
        *(void *)&v486[8] = 0;
        *(void *)&v486[16] = 0;
        *(void *)v486 = &v486[8];
        uint64_t v448 = 0;
        v447[1] = 0;
        v447[0] = &v447[1];
        *(_DWORD *)buf = 1852796517;
        memset(&buf[8], 0, 24);
        *(void *)&buf[32] = 0x756E64656175746FLL;
        *(_OWORD *)&cf_8[24] = 0u;
        long long v469 = 0u;
        *(_OWORD *)v468 = 0u;
        uint64_t cf = 1065353216;
        *(_OWORD *)v465 = 0u;
        memset(__p, 0, sizeof(__p));
        memset(cf_8, 0, 32);
        *(_DWORD *)&cf_8[32] = 1065353216;
        uint64_t v470 = 1065353216;
        v445 = 0;
        v444 = 0;
        uint64_t v446 = 0;
        operator new();
      }
      v390 = (os_log_t *)sub_32A48(13);
      v391 = *v390;
      if (*v390 && os_log_type_enabled(*v390, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v450, *(_DWORD *)(v50 + 72));
        v392 = v450[23] >= 0 ? v450 : *(unsigned char **)v450;
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 5104;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v392;
        _os_log_impl(&def_1E50E8, v391, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Category kVirtualAudioPlugInRoutingCategoryStandardAV is not of type kCategoryType_Standard (it claims %s).\"", (uint8_t *)__p, 0x1Cu);
        if ((v450[23] & 0x80000000) != 0) {
          operator delete(*(void **)v450);
        }
      }
      v375 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v376 = (void (*)(void *))&std::runtime_error::~runtime_error;
      std::runtime_error::runtime_error((std::runtime_error *)v375, "Category kVirtualAudioPlugInRoutingCategoryStandardAV is not of type kCategoryType_Standard (it claims %s).");
    }
LABEL_779:
    goto LABEL_780;
  }
  unint64_t v418 = 0;
  unint64_t v419 = 0;
  v417 = 0;
  if (*(unsigned char *)(a2 + 452))
  {
    char v55 = (os_log_t *)sub_32A48(8);
    v56 = *v55;
    if (*v55)
    {
      if (os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v450, *(_DWORD *)(a2 + 448));
        v57 = v450[23] >= 0 ? v450 : *(unsigned char **)v450;
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 3362;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v57;
        _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route processing info will use device activation override of %s", (uint8_t *)__p, 0x1Cu);
        if ((v450[23] & 0x80000000) != 0) {
          operator delete(*(void **)v450);
        }
      }
    }
  }
  uint64_t v402 = v432.i64[1];
  for (uint64_t k = v432.i64[0]; k != v402; k += 48)
  {
    uint64_t v59 = sub_1202D0(a4, *(_DWORD *)k, *(_DWORD *)(k + 4));
    if (a4 + 8 == v59)
    {
      v360 = (os_log_t *)sub_32A48(13);
      v361 = *v360;
      if (*v360 && os_log_type_enabled(*v360, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "RoutingManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3379;
        _os_log_impl(&def_1E50E8, v361, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
LABEL_726:
      v362 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v362, "Precondition failure.");
    }
    uint64_t v60 = *(void *)(*(void *)a2 + 8);
    if (!v60) {
      goto LABEL_719;
    }
    uint64_t v61 = v59;
    uint64_t v62 = *(void *)k;
    uint64_t v63 = v59 + 36;
    unsigned int v64 = *(_DWORD *)(v59 + 36);
    uint64_t v65 = *(void *)a2 + 8;
    do
    {
      unsigned int v66 = *(_DWORD *)(v60 + 32);
      BOOL v67 = v66 >= v64;
      if (v66 >= v64) {
        uint64_t v68 = (uint64_t *)v60;
      }
      else {
        uint64_t v68 = (uint64_t *)(v60 + 8);
      }
      if (v67) {
        uint64_t v65 = v60;
      }
      uint64_t v60 = *v68;
    }
    while (*v68);
    if (v65 == *(void *)a2 + 8 || v64 < *(_DWORD *)(v65 + 32))
    {
LABEL_719:
      v358 = (os_log_t *)sub_32A48(13);
      v359 = *v358;
      if (*v358 && os_log_type_enabled(*v358, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "RoutingManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3386;
        _os_log_impl(&def_1E50E8, v359, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      goto LABEL_726;
    }
    uint64_t v69 = *a16;
    unint64_t v412 = HIDWORD(*a16);
    uint64_t v70 = k + 16;
    uint64_t v71 = *(void **)(k + 24);
    uint64_t v414 = *(void *)k;
    if (v71 == (void *)(k + 16))
    {
      uint64_t v128 = *a16;
    }
    else
    {
      do
      {
        uint64_t v72 = (std::__shared_weak_count *)v71[5];
        if (v72)
        {
          char v73 = std::__shared_weak_count::lock(v72);
          if (v73)
          {
            v74 = v73;
            uint64_t v75 = v71[4];
            if (v75 && *(_DWORD *)(v75 + 144) == 1885892706 && sub_2506C8(v71[4]))
            {
              BOOL v76 = sub_251050(v75, (int *)v63);
              sub_4636C(v74);
              if (v76)
              {
                LODWORD(v128) = 1936090482;
                LOBYTE(v412) = 1;
                goto LABEL_111;
              }
            }
            else
            {
              sub_4636C(v74);
            }
          }
        }
        uint64_t v71 = (void *)v71[1];
      }
      while (v71 != (void *)v70);
      LODWORD(v128) = v69;
LABEL_111:
      LODWORD(v62) = v414;
    }
    if (v62 == 1986291046) {
      char v77 = a12;
    }
    else {
      char v77 = 0;
    }
    *(_OWORD *)v447 = *(_OWORD *)v63;
    uint64_t v448 = *(void *)(v63 + 16);
    uint64_t v411 = v69;
    if (v62 == 1986291305 || v62 == 1986291046)
    {
      sub_73370((uint64_t)&v444, &v429);
    }
    else
    {
      v445 = 0;
      uint64_t v446 = 0;
      v444 = &v445;
    }
    char v408 = v77;
    unsigned int v410 = v128;
    uint64_t v78 = *(void *)(k + 24);
    if (v78 == v70)
    {
      uint64_t v79 = 0;
    }
    else
    {
      uint64_t v79 = 0;
      do
      {
        sub_43F38((uint64_t *)buf, (uint64_t *)(v78 + 32), "", 3399);
        uint64_t v80 = *(void *)buf;
        if (*(void *)buf)
        {
          __int16 v81 = *(_WORD *)(*(void *)buf + 184);
          LOBYTE(v69) = (v81 & 1) == 0 && (v81 & 0x10) != 0;
        }
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        v79 += (v80 != 0) & v69;
        uint64_t v78 = *(void *)(v78 + 8);
      }
      while (v78 != v70);
      uint64_t v70 = *(void *)(k + 24);
    }
    *(void *)v486 = 0;
    *(void *)&v486[8] = 0;
    char v82 = *(std::__shared_weak_count **)(v70 + 40);
    if (v82)
    {
      v83 = std::__shared_weak_count::lock(v82);
      v84 = v83;
      if (v83)
      {
        uint64_t v85 = *(void *)(v70 + 32);
        atomic_fetch_add_explicit(&v83->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        *(void *)v486 = v85;
        *(void *)&v486[8] = v83;
        sub_4636C(v83);
      }
      else
      {
        *(void *)v486 = 0;
        *(void *)&v486[8] = 0;
      }
    }
    else
    {
      v84 = 0;
    }
    sub_549A4((uint64_t *)&__dst, (uint64_t *)v486, "", 1110);
    uint64_t v86 = __dst;
    if ((void)__dst
      && ((int v87 = *(_DWORD *)(__dst + 264), v87 == 1635085420) || v87 == 1633759844)
      && (uint64_t v88 = *(void *)(__dst + 192)) != 0
      && (*(unsigned int (**)(uint64_t))(*(void *)v88 + 120))(v88))
    {
      if (!*(void *)(v86 + 192))
      {
        v369 = (os_log_t *)sub_32A48(13);
        v370 = *v369;
        if (*v369 && os_log_type_enabled(*v369, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "PortUtilities.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1066;
          _os_log_impl(&def_1E50E8, v370, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        v371 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v371, "Precondition failure.");
      }
      strcpy(buf, "newsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      uint64_t v89 = sub_99A40(v86);
      int v90 = 0;
      *((void *)&v93 + 1) = v91;
      *(void *)&long long v93 = v89;
      uint64_t v92 = v93 >> 32;
      BOOL v95 = (v92 & 0xFF00000000) != 0 && v92 != 0;
      if (v79 <= 1) {
        int v90 = sub_2422F8(v86);
      }
      uint64_t v96 = (os_log_t *)sub_32A48(8);
      char v97 = *v96;
      if (*v96 && os_log_type_enabled(*v96, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        if (v95) {
          uint64_t v98 = "YES";
        }
        else {
          uint64_t v98 = "NO";
        }
        *(void *)&buf[4] = "RoutingManager.cpp";
        if (v90) {
          uint64_t v99 = "YES";
        }
        else {
          uint64_t v99 = "NO";
        }
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1120;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v98;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v99;
        _os_log_impl(&def_1E50E8, v97, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Output port is using software volume: %s. Output port should use software volume: %s", buf, 0x26u);
      }
      char v100 = v95 ^ v90;
    }
    else
    {
      char v100 = 0;
    }
    if (*((void *)&__dst + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&__dst + 1));
    }
    if (v84) {
      std::__shared_weak_count::__release_weak(v84);
    }
    if (v414 == 1986291046)
    {
      sub_CAE80(&__dst, a15);
    }
    else
    {
      LOBYTE(__dst) = 0;
      char v439 = 0;
    }
    uint64_t v101 = *(void *)(v61 + 36);
    uint64_t v102 = *(void *)(v61 + 44);
    __int16 v103 = sub_12AE40(*(void *)a2, (unsigned int *)v63);
    if ((_BYTE)v103)
    {
      uint64_t v104 = (uint64_t *)sub_3AEE60();
      uint64_t v105 = *v104;
      uint64_t v407 = v104[1];
    }
    else
    {
      uint64_t v106 = sub_298DA4();
      uint64_t v105 = (*(uint64_t (**)(uint64_t))(*(void *)v106 + 216))(v106);
      uint64_t v407 = v107;
    }
    *(void *)v449 = v105;
    char v108 = *(unsigned char *)(v61 + 48);
    if (v108)
    {
      if (HIBYTE(v103))
      {
        uint64_t v109 = sub_3AEE60();
        uint64_t v110 = *(void *)v109;
        uint64_t v405 = *(unsigned int *)(v109 + 8);
      }
      else
      {
        uint64_t v112 = sub_298DA4();
        uint64_t v110 = (*(uint64_t (**)(uint64_t))(*(void *)v112 + 216))(v112);
        uint64_t v405 = v113;
      }
      uint64_t v434 = v110;
      char v108 = *(unsigned char *)(v61 + 48) != 0;
      if (*(unsigned char *)(v61 + 48)) {
        v111 = (uint8_t *)&v434;
      }
      else {
        v111 = v449;
      }
      uint64_t v105 = *(void *)v111;
      char v406 = 1;
    }
    else
    {
      char v406 = 0;
      LOBYTE(v434) = 0;
      v111 = v449;
    }
    *(void *)v111 = v105 & 0xFFFFFFFFFFFFFFFBLL;
    if ((v105 & 2) != 0)
    {
      uint64_t v118 = *(void *)(k + 24);
      std::string v119 = *(std::__shared_weak_count **)(v118 + 40);
      if (!v119) {
        goto LABEL_229;
      }
      std::string v120 = std::__shared_weak_count::lock(v119);
      if (!v120) {
        goto LABEL_229;
      }
      std::string v116 = v120;
      char v400 = v100;
      v121 = *(_DWORD **)(v118 + 32);
      if (v121)
      {
        int v122 = v121[36];
        if (v122 == 1885892674 || v122 == 1885892706)
        {
          uint64_t v123 = (*(uint64_t (**)(void))(*(void *)v121 + 112))(*(void *)(v118 + 32));
          BOOL v125 = (v123 & 0xFF00000000) != 0 && v123 == 1701865584;
          int v399 = v125;
        }
        else if (v122 == 1885892727)
        {
          sub_87458();
          int v399 = (*(uint64_t (**)(void))(qword_64A1C8 + 16))();
        }
        else
        {
          int v399 = 0;
        }
        uint64_t v129 = sub_298DA4();
        int v130 = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 344))(v129);
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v121 + 480))(v121))
        {
          if (sub_251050((uint64_t)v121, (int *)v63)) {
            int v131 = 1;
          }
          else {
            int v131 = sub_3DEA5C();
          }
        }
        else
        {
          int v131 = 0;
        }
        v132 = (os_log_t *)sub_32A48(8);
        v133 = *v132;
        if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v486 = 136315906;
          *(void *)&v486[4] = "RoutingManager.cpp";
          *(_WORD *)&v486[12] = 1024;
          *(_DWORD *)&v486[14] = 5242;
          *(_WORD *)&v486[18] = 1024;
          *(_DWORD *)&v486[20] = v130 == 0;
          __int16 v487 = 1024;
          int v488 = v131;
          _os_log_impl(&def_1E50E8, v133, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeLimit state: %u. Effective PME state: %u", v486, 0x1Eu);
        }
        if (v130) {
          int v134 = 1;
        }
        else {
          int v134 = v131;
        }
        if ((v399 & v134 & 1) == 0) {
          *(void *)v111 &= ~2uLL;
        }
      }
      char v100 = v400;
    }
    else
    {
      if (!HIBYTE(v103)) {
        char v108 = 0;
      }
      if (_BYTE)v103 || (v108) {
        goto LABEL_229;
      }
      uint64_t v114 = *(void *)(k + 24);
      v115 = *(std::__shared_weak_count **)(v114 + 40);
      if (v115)
      {
        std::string v116 = std::__shared_weak_count::lock(v115);
        if (v116) {
          uint64_t v117 = *(void *)(v114 + 32);
        }
        else {
          uint64_t v117 = 0;
        }
      }
      else
      {
        uint64_t v117 = 0;
        std::string v116 = 0;
      }
      char v126 = sub_241D60(k);
      if (v117) {
        char v127 = v126;
      }
      else {
        char v127 = 1;
      }
      if ((v127 & 1) == 0
        && (*(unsigned int (**)(uint64_t))(*(void *)v117 + 480))(v117)
        && sub_251050(v117, (int *)v63))
      {
        *(void *)v111 |= 2uLL;
        sub_3DEB58();
        byte_65FAF0 = 1;
      }
      if (!v116) {
        goto LABEL_229;
      }
    }
    sub_4636C(v116);
LABEL_229:
    uint64_t v135 = *(void *)a2;
    *(void *)buf = v101;
    *(void *)&buf[8] = v102;
    *(void *)&buf[16] = *(void *)v449;
    *(void *)&buf[24] = v407;
    *(void *)&buf[32] = v434;
    *(void *)&buf[40] = v405;
    char v476 = v406;
    uint64_t v477 = 0;
    v478 = 0;
    sub_73370((uint64_t)v479, &v444);
    *(void *)&long long v480 = v135 + 24;
    *((void *)&v480 + 1) = v65 + 72;
    v481[0] = 0;
    *(_WORD *)&v481[1] = v442;
    v481[3] = v443;
    *(void *)&v481[4] = v414;
    *(_OWORD *)&v481[12] = *(_OWORD *)v447;
    *(void *)&v481[28] = v448;
    v481[36] = v408;
    *(_WORD *)&v481[37] = v440;
    v481[39] = v441;
    *(void *)&v481[40] = v411 & 0xFFFFFF0000000000 | ((unint64_t)v412 << 32) | v410;
    char v482 = v100;
    sub_CAE80(v483, &__dst);
    if ((buf[12] != 0) != (v476 != 0))
    {
      v136 = (os_log_t *)sub_32A48(13);
      v137 = *v136;
      if (*v136)
      {
        if (os_log_type_enabled(*v136, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v486 = 136315394;
          *(void *)&v486[4] = "RoutingHandlerTypes.cpp";
          *(_WORD *)&v486[12] = 1024;
          *(_DWORD *)&v486[14] = 37;
          _os_log_impl(&def_1E50E8, v137, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"OutputMode must be matched with an entry for mOutputSystemAudioEffectsSettings\"", v486, 0x12u);
        }
      }
    }
    *(_OWORD *)&v450[8] = *(_OWORD *)buf;
    *(_OWORD *)&v450[24] = *(_OWORD *)&buf[16];
    long long v451 = *(_OWORD *)&buf[32];
    char v452 = v476;
    *(void *)v450 = k;
    uint64_t v453 = v477;
    v454 = v478;
    if (v478) {
      atomic_fetch_add_explicit(&v478->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_73370((uint64_t)v455, v479);
    long long v458 = *(_OWORD *)&v481[16];
    long long v459 = *(_OWORD *)&v481[32];
    char v460 = v482;
    long long v456 = v480;
    long long v457 = *(_OWORD *)v481;
    sub_CAE80(&v461, (long long *)v483);
    if (v485 && v484 < 0) {
      operator delete(v483[0]);
    }
    sub_73038((void *)v479[1]);
    if (v478) {
      std::__shared_weak_count::__release_weak(v478);
    }
    if (v439 && SHIBYTE(v438) < 0) {
      operator delete((void *)__dst);
    }
    sub_73038(v445);
    sub_12AD20((uint64_t)__p, (uint64_t)v450);
    LOBYTE(v474) = 0;
    BYTE4(v474) = 0;
    unint64_t v138 = v418;
    if (v418 >= v419)
    {
      unint64_t v140 = 0x84BDA12F684BDA13 * ((uint64_t)(v418 - (void)v417) >> 3);
      unint64_t v141 = v140 + 1;
      if (v140 + 1 > 0x12F684BDA12F684) {
        sub_60548();
      }
      if (0x97B425ED097B426 * ((uint64_t)(v419 - (void)v417) >> 3) > v141) {
        unint64_t v141 = 0x97B425ED097B426 * ((uint64_t)(v419 - (void)v417) >> 3);
      }
      if (0x84BDA12F684BDA13 * ((uint64_t)(v419 - (void)v417) >> 3) >= 0x97B425ED097B42) {
        unint64_t v142 = 0x12F684BDA12F684;
      }
      else {
        unint64_t v142 = v141;
      }
      *(void *)&buf[32] = &v419;
      if (v142)
      {
        v144 = sub_129F48(v142);
      }
      else
      {
        v144 = 0;
        uint64_t v143 = 0;
      }
      *(void *)buf = v144;
      *(void *)&buf[8] = &v144[27 * v140];
      *(void *)&buf[16] = *(void *)&buf[8];
      *(void *)&buf[24] = &v144[27 * v143];
      sub_12AD20(*(uint64_t *)&buf[8], (uint64_t)__p);
      v144[27 * v140 + 26] = v474;
      *(void *)&buf[16] += 216;
      sub_12A134((uint64_t *)&v417, buf);
      unint64_t v139 = v418;
      sub_12A210((uint64_t)buf);
    }
    else
    {
      sub_12AD20(v418, (uint64_t)__p);
      *(void *)(v138 + 208) = v474;
      unint64_t v139 = v138 + 216;
    }
    unint64_t v418 = v139;
    if (v473 && v472 < 0) {
      operator delete(v471);
    }
    sub_73038(*(void **)cf_8);
    if (v465[1]) {
      std::__shared_weak_count::__release_weak(v465[1]);
    }
    if (v463 && v462 < 0) {
      operator delete(v461);
    }
    sub_73038(v455[1]);
    if (v454) {
      std::__shared_weak_count::__release_weak(v454);
    }
  }
  uint64_t v145 = sub_32A48(8);
  if (*(unsigned char *)(v145 + 8))
  {
    v146 = *(NSObject **)v145;
    if (*(void *)v145)
    {
      if (os_log_type_enabled(*(os_log_t *)v145, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 3416;
        _os_log_impl(&def_1E50E8, v146, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created route MultiRouteProcesingInfo:", (uint8_t *)__p, 0x12u);
      }
    }
  }
  uint64_t v147 = (uint64_t)v417;
  unint64_t v148 = v418;
  if (v417 != (void *)v418)
  {
    do
    {
      uint64_t v149 = sub_32A48(8);
      if (*(unsigned char *)(v149 + 8))
      {
        v150 = *(NSObject **)v149;
        if (*(void *)v149)
        {
          if (os_log_type_enabled(*(os_log_t *)v149, OS_LOG_TYPE_DEBUG))
          {
            sub_1E2DE8((std::string *)v450, v147);
            v151 = v450[23] >= 0 ? v450 : *(unsigned char **)v450;
            LODWORD(__p[0]) = 136315650;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3419;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v151;
            _os_log_impl(&def_1E50E8, v150, OS_LOG_TYPE_DEBUG, "%25s:%-5d - %s.", (uint8_t *)__p, 0x1Cu);
            if ((v450[23] & 0x80000000) != 0) {
              operator delete(*(void **)v450);
            }
          }
        }
      }
      v147 += 216;
    }
    while (v147 != v148);
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    v388 = (os_log_t *)sub_32A48(13);
    v389 = *v388;
    if (*v388 && os_log_type_enabled(*v388, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 3088;
      _os_log_impl(&def_1E50E8, v389, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
    }
LABEL_298:
    v160 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v160, "Precondition failure.");
  }
  int v152 = *(_DWORD *)(a2 + 32);
  v401 = (_OWORD *)(a2 + 32);
  if (!v152)
  {
    uint64_t v153 = sub_32A48(8);
    if (*(unsigned char *)(v153 + 8))
    {
      v154 = *(NSObject **)v153;
      if (*(void *)v153)
      {
        if (os_log_type_enabled(*(os_log_t *)v153, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3220;
          _os_log_impl(&def_1E50E8, v154, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initial category never set, not redundant.", (uint8_t *)__p, 0x12u);
        }
      }
    }
  }
  if (a14 == 1919971427)
  {
    uint64_t v155 = sub_32A48(8);
    if (*(unsigned char *)(v155 + 8))
    {
      v156 = *(NSObject **)v155;
      if (*(void *)v155)
      {
        if (os_log_type_enabled(*(os_log_t *)v155, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3223;
          _os_log_impl(&def_1E50E8, v156, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port Properties Changed, not redundant.", (uint8_t *)__p, 0x12u);
        }
      }
    }
  }
  v157 = v417;
  if (v417 != (void *)v418)
  {
    while (*(_DWORD *)(*v157 + 4) || *(_DWORD *)*v157 != 1986291046)
    {
      v157 += 27;
      if (v157 == (void *)v418) {
        goto LABEL_295;
      }
    }
  }
  if ((void *)v418 == v157)
  {
LABEL_295:
    v158 = (os_log_t *)sub_32A48(13);
    v159 = *v158;
    if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 3227;
      _os_log_impl(&def_1E50E8, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
    }
    goto LABEL_298;
  }
  uint64_t v161 = v157[12];
  uint64_t v162 = *(void *)(a2 + 496);
  if (v161 == v162)
  {
    v163 = (void *)v157[10];
    if (v163 == v157 + 11)
    {
      int v171 = 0;
      goto LABEL_325;
    }
    v164 = *(void **)(a2 + 480);
    do
    {
      BOOL v165 = sub_1289C8(v163 + 4, v164 + 4);
      if (!v165) {
        break;
      }
      v166 = (void *)v163[1];
      v167 = v163;
      if (v166)
      {
        do
        {
          v163 = v166;
          v166 = (void *)*v166;
        }
        while (v166);
      }
      else
      {
        do
        {
          v163 = (void *)v167[2];
          BOOL v37 = *v163 == (void)v167;
          v167 = v163;
        }
        while (!v37);
      }
      v168 = (void *)v164[1];
      if (v168)
      {
        do
        {
          v169 = v168;
          v168 = (void *)*v168;
        }
        while (v168);
      }
      else
      {
        do
        {
          v169 = (void *)v164[2];
          BOOL v37 = *v169 == (void)v164;
          v164 = v169;
        }
        while (!v37);
      }
      v164 = v169;
    }
    while (v163 != v157 + 11);
    uint64_t v161 = v157[12];
    uint64_t v162 = *(void *)(a2 + 496);
  }
  else
  {
    BOOL v165 = 0;
  }
  int v170 = !v165;
  if (a14 != 1919971427) {
    int v170 = 0;
  }
  if (v152) {
    int v171 = 0;
  }
  else {
    int v171 = v170;
  }
  if (v161 != v162) {
    goto LABEL_340;
  }
  v163 = (void *)v157[10];
LABEL_325:
  v172 = v157 + 11;
  if (v163 == v172) {
    goto LABEL_345;
  }
  v173 = *(void **)(a2 + 480);
  while (sub_1289C8(v163 + 4, v173 + 4))
  {
    v174 = (void *)v163[1];
    v175 = v163;
    if (v174)
    {
      do
      {
        v163 = v174;
        v174 = (void *)*v174;
      }
      while (v174);
    }
    else
    {
      do
      {
        v163 = (void *)v175[2];
        BOOL v37 = *v163 == (void)v175;
        v175 = v163;
      }
      while (!v37);
    }
    v176 = (void *)v173[1];
    if (v176)
    {
      do
      {
        v177 = v176;
        v176 = (void *)*v176;
      }
      while (v176);
    }
    else
    {
      do
      {
        v177 = (void *)v173[2];
        BOOL v37 = *v177 == (void)v173;
        v173 = v177;
      }
      while (!v37);
    }
    v173 = v177;
    if (v163 == v172) {
      goto LABEL_345;
    }
  }
LABEL_340:
  uint64_t v178 = sub_32A48(8);
  if ((*(unsigned char *)(v178 + 8) & 1) == 0
    || (v179 = *(NSObject **)v178) == 0
    || !os_log_type_enabled(*(os_log_t *)v178, OS_LOG_TYPE_DEBUG))
  {
LABEL_345:
    if (!v171) {
      goto LABEL_344;
    }
    goto LABEL_346;
  }
  LODWORD(__p[0]) = 136315394;
  *(void **)((char *)__p + 4) = "RoutingManager.cpp";
  WORD2(__p[1]) = 1024;
  *(_DWORD *)((char *)&__p[1] + 6) = 3230;
  _os_log_impl(&def_1E50E8, v179, OS_LOG_TYPE_DEBUG, "%25s:%-5d Sub-ports differ.", (uint8_t *)__p, 0x12u);
  if ((v171 & 1) == 0)
  {
LABEL_344:
    int v180 = 1;
    goto LABEL_351;
  }
LABEL_346:
  uint64_t v181 = sub_32A48(8);
  if (*(unsigned char *)(v181 + 8))
  {
    v182 = *(NSObject **)v181;
    if (*(void *)v181)
    {
      if (os_log_type_enabled(*(os_log_t *)v181, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 3232;
        _os_log_impl(&def_1E50E8, v182, OS_LOG_TYPE_DEBUG, "%25s:%-5d We need to invalidate the default VAD.", (uint8_t *)__p, 0x12u);
      }
    }
  }
  int v180 = 0;
LABEL_351:
  memset(v486, 0, sizeof(v486));
  sub_E845C(v447, a2 + 456);
  uint64_t v183 = (uint64_t)v417;
  unint64_t v409 = v418;
  if (v417 != (void *)v418)
  {
    int v413 = 0;
    char v184 = 1;
    int v404 = v180;
    while (1)
    {
      uint64_t v185 = sub_32A48(8);
      if (*(unsigned char *)(v185 + 8))
      {
        v186 = *(NSObject **)v185;
        if (*(void *)v185)
        {
          if (os_log_type_enabled(*(os_log_t *)v185, OS_LOG_TYPE_DEBUG))
          {
            sub_4D60((std::string *)v450, *(unsigned int **)v183);
            int v187 = v450[23];
            v188 = *(unsigned char **)v450;
            sub_1E26F0((std::string *)buf, v183);
            v189 = v450;
            if (v187 < 0) {
              v189 = v188;
            }
            v190 = buf;
            if (buf[23] < 0) {
              v190 = *(unsigned char **)buf;
            }
            LODWORD(__p[0]) = 136315906;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3245;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v189;
            WORD2(__p[3]) = 2080;
            *(void **)((char *)&__p[3] + 6) = v190;
            _os_log_impl(&def_1E50E8, v186, OS_LOG_TYPE_DEBUG, "%25s:%-5d Beginning determination of base reconfiguration context for %s %s.", (uint8_t *)__p, 0x26u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if ((v450[23] & 0x80000000) != 0) {
              operator delete(*(void **)v450);
            }
          }
        }
      }
      v191 = *(uint64_t **)v183;
      int v192 = *(_DWORD *)(v183 + 12);
      int v193 = 1;
      char v415 = v184;
      if (v192 > 1919776354)
      {
        if (v192 > 1987081832)
        {
          if (v192 == 1987081833) {
            goto LABEL_378;
          }
          unsigned __int16 v195 = 30319;
        }
        else
        {
          if (v192 == 1919776355) {
            goto LABEL_378;
          }
          unsigned __int16 v195 = 26467;
        }
        int v194 = v195 | 0x76700000;
      }
      else if (v192 > 1768779618)
      {
        if (v192 == 1768779619) {
          goto LABEL_378;
        }
        int v194 = 1768781411;
      }
      else
      {
        if (v192 == 1735222132) {
          goto LABEL_378;
        }
        int v194 = 1768057203;
      }
      if (v192 != v194) {
        int v193 = 0;
      }
LABEL_378:
      uint64_t v196 = *v191;
      v197 = (uint64_t *)v447[1];
      v198 = sub_E85C4(*v191, (void *)v447[0], (void *)v447[1]);
      v199 = v198;
      if (v197 == v198)
      {
        int v205 = 1;
        char v206 = v184;
        if (v193) {
          goto LABEL_445;
        }
        goto LABEL_446;
      }
      uint64_t v200 = *v198;
      sub_E5B68((uint64_t)__p, (unsigned int **)v183);
      if (!sub_128B24(v200, (uint64_t)__p)) {
        goto LABEL_400;
      }
      v201 = *(unsigned int **)v183;
      uint64_t v202 = *(void *)v183 + 16;
      uint64_t v203 = *(void *)(*(void *)v183 + 24);
      if (v203 != v202)
      {
        while (1)
        {
          sub_43F38((uint64_t *)v450, (uint64_t *)(v203 + 32), "", 1538);
          int v204 = *(_DWORD *)(*(void *)v450 + 144);
          if (*(void *)&v450[8]) {
            sub_4636C(*(std::__shared_weak_count **)&v450[8]);
          }
          if (v204 == 1886152047) {
            break;
          }
          uint64_t v203 = *(void *)(v203 + 8);
          if (v203 == v202) {
            goto LABEL_389;
          }
        }
        uint64_t v202 = v203;
LABEL_389:
        v201 = *(unsigned int **)v183;
      }
      if ((unsigned int *)v202 == v201 + 4 || *(unsigned __int8 *)(v183 + 156) == *(unsigned __int8 *)(v200 + 124))
      {
        int v208 = 4;
        if (*(unsigned char *)(v183 + 168)) {
          int v209 = 2;
        }
        else {
          int v209 = 4;
        }
        if (!*(unsigned char *)(v183 + 168)) {
          goto LABEL_415;
        }
      }
      else
      {
LABEL_400:
        int v209 = 2;
      }
      if ((void **)v200 == __p || *(void **)v200 != __p[0] || *(void **)(v200 + 24) != __p[3]) {
        goto LABEL_414;
      }
      uint64_t v210 = *(void *)(v200 + 16);
      if (v210 != v200 + 8)
      {
        v211 = &__p[1];
        while (1)
        {
          v211 = (void **)v211[1];
          if (!sub_12A6A0((unsigned __int8 *)(v210 + 16), (unsigned __int8 *)v211 + 16)) {
            break;
          }
          uint64_t v210 = *(void *)(v210 + 8);
          if (v210 == v200 + 8) {
            goto LABEL_408;
          }
        }
LABEL_555:
        int v208 = 2;
        int v180 = v404;
        goto LABEL_415;
      }
LABEL_408:
      if (!sub_12AAB0(v200 + 32, &__p[4])) {
        goto LABEL_555;
      }
      int v180 = v404;
      if (*(_DWORD *)(v200 + 80) != cf && sub_12ABFC((unsigned __int8 *)(v200 + 88), cf_8))
      {
        if (*(unsigned __int8 *)(v200 + 124) == cf_8[36])
        {
          int v209 = 3;
          int v208 = 3;
        }
        else
        {
          int v208 = 2;
        }
      }
      else
      {
LABEL_414:
        int v208 = 2;
      }
LABEL_415:
      uint64_t v212 = sub_32A48(8);
      if (*(unsigned char *)(v212 + 8))
      {
        v213 = *(NSObject **)v212;
        if (*(void *)v212)
        {
          if (os_log_type_enabled(*(os_log_t *)v212, OS_LOG_TYPE_DEBUG))
          {
            sub_4D60((std::string *)buf, (unsigned int *)v191);
            if (buf[23] >= 0) {
              v214 = buf;
            }
            else {
              v214 = *(unsigned char **)buf;
            }
            sub_21C8C(&__dst, off_621228[v209]);
            int v215 = SHIBYTE(v438);
            v216 = (long long *)__dst;
            int v217 = sub_128B24(v200, (uint64_t)__p);
            *(_DWORD *)v450 = 136316162;
            p_dst = &__dst;
            if (v215 < 0) {
              p_dst = v216;
            }
            *(void *)&v450[4] = "RoutingManager.cpp";
            v219 = "different than";
            if (v217) {
              v219 = "the same as";
            }
            *(_WORD *)&v450[12] = 1024;
            *(_DWORD *)&v450[14] = 3202;
            *(_WORD *)&v450[18] = 2080;
            *(void *)&v450[20] = v214;
            *(_WORD *)&v450[28] = 2080;
            *(void *)&v450[30] = p_dst;
            *(_WORD *)&v450[38] = 2080;
            *(void *)&long long v451 = v219;
            _os_log_impl(&def_1E50E8, v213, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Reconfiguration Context for %s will be %s because the cashed route snapshot is %s the new route snapshot.", v450, 0x30u);
            if (SHIBYTE(v438) < 0) {
              operator delete((void *)__dst);
            }
            int v180 = v404;
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            int v208 = v209;
          }
        }
      }
      if ((v208 - 5) >= 0xFFFFFFFE && v196 == 1986291046) {
        int v221 = v180;
      }
      else {
        int v221 = 1;
      }
      if (v221) {
        int v205 = v209;
      }
      else {
        int v205 = 2;
      }
      unsigned __int8 v222 = sub_E79B8(*(_DWORD *)(v200 + 120));
      unsigned __int8 v223 = sub_E79B8(*(int *)&cf_8[32]);
      if (v197 != v199 + 1) {
        memmove(v199, v199 + 1, (char *)v197 - (char *)(v199 + 1));
      }
      v447[1] = v197 - 1;
      char v206 = v415;
      if (cf_8[24] && (cf_8[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf_8);
      }
      sub_463E0(&v465[0]->__vftable);
      sub_463E0((void *)__p[5]);
      sub_E6EA8((uint64_t *)&__p[1]);
      if ((v222 ^ v223)) {
LABEL_445:
      }
        int v413 = 1;
LABEL_446:
      *(_DWORD *)(v183 + 208) = v205;
      *(unsigned char *)(v183 + 212) = 1;
      if (sub_89FA8() != 2
        && sub_89FA8() != 3
        && sub_89FA8() != 4
        && sub_89FA8() != 5
        && sub_89FA8() != 195
        || v413)
      {
        uint64_t v224 = sub_32A48(8);
        if (*(unsigned char *)(v224 + 8))
        {
          v225 = *(NSObject **)v224;
          if (*(void *)v224)
          {
            if (os_log_type_enabled(*(os_log_t *)v224, OS_LOG_TYPE_DEBUG))
            {
              sub_4D60((std::string *)v450, *(unsigned int **)v183);
              v226 = v450;
              if (v450[23] < 0) {
                v226 = *(unsigned char **)v450;
              }
              LODWORD(__p[0]) = 136315650;
              *(void **)((char *)__p + 4) = "RoutingManager.cpp";
              WORD2(__p[1]) = 1024;
              *(_DWORD *)((char *)&__p[1] + 6) = 3261;
              WORD1(__p[2]) = 2080;
              *(void **)((char *)&__p[2] + 4) = v226;
              _os_log_impl(&def_1E50E8, v225, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Updating reconfiguration context based on shared hardware invalidation for %s.", (uint8_t *)__p, 0x1Cu);
              if ((v450[23] & 0x80000000) != 0) {
                operator delete(*(void **)v450);
              }
            }
          }
        }
        unsigned int v227 = *(_DWORD *)(v183 + 208);
        int v228 = *(_DWORD *)(v183 + 12);
        BOOL v229 = 1;
        if (v228 != 1986556788 && v228 != 1987208039) {
          BOOL v229 = v228 == 1987211117;
        }
        sub_E6F1C((uint64_t *)v450, *(void *)v183, v229);
        v230 = *(unsigned int **)v183;
        memset(__p, 0, 24);
        strcpy((char *)&__p[3], "cwdv");
        LOBYTE(__p[4]) = 0;
        LODWORD(__p[5]) = 3;
        __p[7] = 0;
        v465[0] = 0;
        __p[6] = &__p[7];
        LODWORD(v465[1]) = 44739242;
        uint64_t cf = 0;
        sub_125ECC((unint64_t *)&v444, (uint64_t)v230, (uint64_t)__p);
        *(_DWORD *)(v183 + 208) = sub_128C6C(v227, v450, &v444, (uint64_t *)v486);
        *(unsigned char *)(v183 + 212) = 1;
        sub_8108((uint64_t *)&v444);
        if (cf) {
          CFRelease((CFTypeRef)cf);
        }
        sub_463E0((void *)__p[7]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        sub_463E0(*(void **)&v450[32]);
        sub_463E0(*(void **)&v450[8]);
      }
      if (a14 == 1651799408)
      {
        int v241 = *(_DWORD *)(v183 + 12);
        BOOL v242 = 1;
        if (v241 != 1986556788 && v241 != 1987208039) {
          BOOL v242 = v241 == 1987211117;
        }
        sub_E6F1C((uint64_t *)__p, *(void *)v183, v242);
        v243 = (void **)__p[0];
        if (__p[0] != &__p[1])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v243[4] + 384))(v243[4]) & 1) == 0)
          {
            v244 = (void **)v243[1];
            if (v244)
            {
              do
              {
                v245 = v244;
                v244 = (void **)*v244;
              }
              while (v244);
            }
            else
            {
              do
              {
                v245 = (void **)v243[2];
                BOOL v37 = *v245 == v243;
                v243 = v245;
              }
              while (!v37);
            }
            v243 = v245;
            if (v245 == &__p[1]) {
              goto LABEL_506;
            }
          }
          goto LABEL_515;
        }
LABEL_506:
        v246 = (void **)__p[3];
        if (__p[3] != &__p[4])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v246[4] + 384))(v246[4]) & 1) == 0)
          {
            v247 = (void **)v246[1];
            if (v247)
            {
              do
              {
                v248 = v247;
                v247 = (void **)*v247;
              }
              while (v247);
            }
            else
            {
              do
              {
                v248 = (void **)v246[2];
                BOOL v37 = *v248 == v246;
                v246 = v248;
              }
              while (!v37);
            }
            v246 = v248;
            if (v248 == &__p[4]) {
              goto LABEL_516;
            }
          }
LABEL_515:
          *(_DWORD *)(v183 + 208) = 2;
          *(unsigned char *)(v183 + 212) = 1;
        }
      }
      else
      {
        if (a14 != 1667327075)
        {
          if (a14 == 1920429155)
          {
            uint64_t v231 = *(void *)v183 + 16;
            for (uint64_t m = *(void *)(*(void *)v183 + 24); m != v231; uint64_t m = *(void *)(m + 8))
            {
              if (sub_241364(1885892674, (uint64_t *)(m + 16)))
              {
                int v249 = 2;
                *(_DWORD *)(v183 + 208) = 2;
                *(unsigned char *)(v183 + 212) = 1;
                goto LABEL_519;
              }
            }
          }
          goto LABEL_517;
        }
        int v233 = *(_DWORD *)(v183 + 12);
        BOOL v234 = 1;
        if (v233 != 1986556788 && v233 != 1987208039) {
          BOOL v234 = v233 == 1987211117;
        }
        sub_E6F1C((uint64_t *)__p, *(void *)v183, v234);
        v235 = (void **)__p[0];
        if (__p[0] != &__p[1])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v235[4] + 392))(v235[4]) & 1) == 0)
          {
            v236 = (void **)v235[1];
            if (v236)
            {
              do
              {
                v237 = v236;
                v236 = (void **)*v236;
              }
              while (v236);
            }
            else
            {
              do
              {
                v237 = (void **)v235[2];
                BOOL v37 = *v237 == v235;
                v235 = v237;
              }
              while (!v37);
            }
            v235 = v237;
            if (v237 == &__p[1]) {
              goto LABEL_484;
            }
          }
          goto LABEL_493;
        }
LABEL_484:
        v238 = (void **)__p[3];
        if (__p[3] != &__p[4])
        {
          while (((*(uint64_t (**)(void *))(*(void *)v238[4] + 392))(v238[4]) & 1) == 0)
          {
            v239 = (void **)v238[1];
            if (v239)
            {
              do
              {
                v240 = v239;
                v239 = (void **)*v239;
              }
              while (v239);
            }
            else
            {
              do
              {
                v240 = (void **)v238[2];
                BOOL v37 = *v240 == v238;
                v238 = v240;
              }
              while (!v37);
            }
            v238 = v240;
            if (v240 == &__p[4]) {
              goto LABEL_516;
            }
          }
LABEL_493:
          *(_DWORD *)(v183 + 208) = 2;
          *(unsigned char *)(v183 + 212) = 1;
        }
      }
LABEL_516:
      sub_463E0((void *)__p[4]);
      sub_463E0((void *)__p[1]);
LABEL_517:
      if (!*(unsigned char *)(v183 + 212))
      {
        v366 = (os_log_t *)sub_32A48(13);
        v367 = *v366;
        if (*v366 && os_log_type_enabled(*v366, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3318;
          _os_log_impl(&def_1E50E8, v367, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Route reconfiguration context must be valid at this point.\"", (uint8_t *)__p, 0x12u);
        }
        v368 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v368, "Route reconfiguration context must be valid at this point.");
      }
      int v249 = *(_DWORD *)(v183 + 208);
LABEL_519:
      if (v206) {
        BOOL v250 = v249 == 4;
      }
      else {
        BOOL v250 = 0;
      }
      char v184 = v250;
      uint64_t v251 = sub_32A48(8);
      if (*(unsigned char *)(v251 + 8))
      {
        v252 = *(NSObject **)v251;
        if (*(void *)v251)
        {
          if (os_log_type_enabled(*(os_log_t *)v251, OS_LOG_TYPE_DEBUG))
          {
            sub_4D60((std::string *)v450, *(unsigned int **)v183);
            uint64_t v253 = *(unsigned int *)(v183 + 208);
            v254 = "????";
            if (v253 <= 4) {
              v254 = off_621228[v253];
            }
            int v255 = v450[23];
            v256 = *(unsigned char **)v450;
            sub_21C8C(buf, v254);
            v257 = v450;
            if (v255 < 0) {
              v257 = v256;
            }
            v258 = buf;
            if (buf[23] < 0) {
              v258 = *(unsigned char **)buf;
            }
            LODWORD(__p[0]) = 136315906;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3324;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v257;
            WORD2(__p[3]) = 2080;
            *(void **)((char *)&__p[3] + 6) = v258;
            _os_log_impl(&def_1E50E8, v252, OS_LOG_TYPE_DEBUG, "%25s:%-5d Completed determination of base reconfiguration context for %s. Inserting %s into the multirouteprocessinginfo.", (uint8_t *)__p, 0x26u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if ((v450[23] & 0x80000000) != 0) {
              operator delete(*(void **)v450);
            }
          }
        }
      }
      uint64_t v259 = *(void *)&v486[8];
      if (*(void *)&v486[8] >= *(void *)&v486[16])
      {
        unint64_t v261 = 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)&v486[8] - *(void *)v486) >> 3);
        unint64_t v262 = v261 + 1;
        if (v261 + 1 > 0x12F684BDA12F684) {
          sub_60548();
        }
        if (0x97B425ED097B426 * ((uint64_t)(*(void *)&v486[16] - *(void *)v486) >> 3) > v262) {
          unint64_t v262 = 0x97B425ED097B426 * ((uint64_t)(*(void *)&v486[16] - *(void *)v486) >> 3);
        }
        if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)&v486[16] - *(void *)v486) >> 3) >= 0x97B425ED097B42) {
          unint64_t v263 = 0x12F684BDA12F684;
        }
        else {
          unint64_t v263 = v262;
        }
        __p[4] = &v486[16];
        if (v263)
        {
          v265 = (char *)sub_129F48(v263);
        }
        else
        {
          v265 = 0;
          uint64_t v264 = 0;
        }
        __p[0] = v265;
        __p[1] = &v265[216 * v261];
        __p[2] = __p[1];
        __p[3] = &v265[216 * v264];
        sub_129D28((uint64_t)__p[1], v183);
        *(void *)&v265[216 * v261 + 208] = *(void *)(v183 + 208);
        __p[2] = (char *)__p[2] + 216;
        sub_12A134((uint64_t *)v486, __p);
        uint64_t v260 = *(void *)&v486[8];
        sub_12A210((uint64_t)__p);
      }
      else
      {
        sub_129D28(*(uint64_t *)&v486[8], v183);
        *(void *)(v259 + 208) = *(void *)(v183 + 208);
        uint64_t v260 = v259 + 216;
      }
      *(void *)&v486[8] = v260;
      v183 += 216;
      if (v183 == v409) {
        goto LABEL_557;
      }
    }
  }
  char v184 = 1;
LABEL_557:
  memset(v450, 0, 24);
  v266 = (uint64_t *)v447[0];
  v267 = (uint64_t *)v447[1];
  if (v447[0] != v447[1])
  {
    uint64_t v268 = sub_32A48(8);
    if (*(unsigned char *)(v268 + 8))
    {
      v269 = *(NSObject **)v268;
      if (*(void *)v268)
      {
        if (os_log_type_enabled(*(os_log_t *)v268, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3332;
          _os_log_impl(&def_1E50E8, v269, OS_LOG_TYPE_DEBUG, "%25s:%-5d Beginning to prune obsolete snapshots.", (uint8_t *)__p, 0x12u);
        }
      }
    }
    v270 = v266;
    do
    {
      if (!*v270)
      {
        v363 = (os_log_t *)sub_32A48(13);
        v364 = *v363;
        if (*v363 && os_log_type_enabled(*v363, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3335;
          _os_log_impl(&def_1E50E8, v364, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
        }
        v365 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v365, "Precondition failure.");
      }
      uint64_t v271 = sub_32A48(8);
      if (*(unsigned char *)(v271 + 8))
      {
        v272 = *(NSObject **)v271;
        if (*(void *)v271)
        {
          if (os_log_type_enabled(*(os_log_t *)v271, OS_LOG_TYPE_DEBUG))
          {
            sub_E7A6C((std::string *)buf, *v270);
            v273 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
            LODWORD(__p[0]) = 136315650;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3336;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v273;
            _os_log_impl(&def_1E50E8, v272, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Destroying obsolete snapshot %s.", (uint8_t *)__p, 0x1Cu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
      }
      if (sub_20AA78())
      {
        sub_E74B0((uint64_t *)buf, *v270);
      }
      else
      {
        *(void *)buf = buf;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0;
      }
      uint64_t v274 = *v270;
      sub_12A0E0((uint64_t *)__p, *v270 + 32);
      sub_12A0E0((uint64_t *)&__p[3], v274 + 56);
      sub_3524((uint64_t *)&__dst, buf);
      sub_128C6C(0, __p, &__dst, (uint64_t *)v486);
      sub_8108((uint64_t *)&__dst);
      sub_463E0((void *)__p[4]);
      sub_463E0((void *)__p[1]);
      v275 = *(void **)*v270;
      v465[1] = 0;
      uint64_t cf = 0;
      memset((char *)&__p[1] + 4, 0, 52);
      v465[0] = (std::__shared_weak_count *)&v465[1];
      memset(cf_8, 0, 28);
      __p[0] = v275;
      LODWORD(__p[1]) = 1;
      sub_129DF8((uint64_t)v450, (long long *)__p);
      if (*(void *)cf_8)
      {
        *(void *)&cf_8[8] = *(void *)cf_8;
        operator delete(*(void **)cf_8);
      }
      sub_463E0(&v465[1]->__vftable);
      sub_8108((uint64_t *)buf);
      ++v270;
    }
    while (v270 != v267);
    uint64_t v276 = sub_32A48(8);
    if (*(unsigned char *)(v276 + 8))
    {
      v277 = *(NSObject **)v276;
      if (*(void *)v276)
      {
        if (os_log_type_enabled(*(os_log_t *)v276, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 3344;
          _os_log_impl(&def_1E50E8, v277, OS_LOG_TYPE_DEBUG, "%25s:%-5d Completed pruning obsolete snapshots.", (uint8_t *)__p, 0x12u);
        }
      }
    }
    char v184 = 0;
  }
  LOBYTE(v420) = v184;
  v422 = 0;
  long long v421 = 0uLL;
  uint64_t v278 = *(void *)v486;
  uint64_t v279 = *(void *)&v486[8];
  __p[0] = &v421;
  LOBYTE(__p[1]) = 0;
  if (*(void *)&v486[8] != *(void *)v486)
  {
    unint64_t v280 = 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)&v486[8] - *(void *)v486) >> 3);
    if (v280 > 0x12F684BDA12F684) {
      sub_60548();
    }
    v281 = (char *)sub_129F48(v280);
    uint64_t v282 = 0;
    *(void *)&long long v421 = v281;
    *((void *)&v421 + 1) = v281;
    v422 = &v281[216 * v283];
    do
    {
      sub_129D28((uint64_t)&v281[v282], v278 + v282);
      *(void *)&v281[v282 + 208] = *(void *)(v278 + v282 + 208);
      v282 += 216;
    }
    while (v278 + v282 != v279);
    *((void *)&v421 + 1) = &v281[v282];
  }
  v424 = 0;
  long long v423 = 0uLL;
  uint64_t v284 = *(void *)v450;
  uint64_t v285 = *(void *)&v450[8];
  __p[0] = &v423;
  LOBYTE(__p[1]) = 0;
  if (*(void *)&v450[8] != *(void *)v450)
  {
    unint64_t v286 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)&v450[8] - *(void *)v450) >> 3);
    if (v286 >= 0x222222222222223) {
      sub_60548();
    }
    v287 = (char *)sub_129F00(v286);
    uint64_t v288 = 0;
    *(void *)&long long v423 = v287;
    *((void *)&v423 + 1) = v287;
    v424 = &v287[120 * v289];
    do
    {
      uint64_t v290 = v284 + v288;
      v291 = &v287[v288];
      long long v292 = *(_OWORD *)(v284 + v288);
      long long v293 = *(_OWORD *)(v284 + v288 + 16);
      long long v294 = *(_OWORD *)(v284 + v288 + 48);
      *((_OWORD *)v291 + 2) = *(_OWORD *)(v284 + v288 + 32);
      *((_OWORD *)v291 + 3) = v294;
      *(_OWORD *)v291 = v292;
      *((_OWORD *)v291 + 1) = v293;
      sub_1263B0((uint64_t)&v287[v288 + 64], (void *)(v284 + v288 + 64));
      *((void *)v291 + 11) = 0;
      *((void *)v291 + 12) = 0;
      *((void *)v291 + 13) = 0;
      sub_126534(&v287[v288 + 88], *(long long **)(v290 + 88), *(long long **)(v290 + 96), (uint64_t)(*(void *)(v290 + 96) - *(void *)(v290 + 88)) >> 4);
      *(_DWORD *)&v287[v288 + 112] = *(_DWORD *)(v284 + v288 + 112);
      v288 += 120;
    }
    while (v290 + 120 != v285);
    v266 = (uint64_t *)v447[0];
    *((void *)&v423 + 1) = &v287[v288];
  }
  __p[0] = v450;
  sub_120434((void ***)__p);
  if (v266)
  {
    v447[1] = v266;
    operator delete(v266);
  }
  __p[0] = v486;
  sub_1204B8((void ***)__p);
  int v295 = v420;
  v296 = (char *)v427[0];
  if (v427[0])
  {
    v297 = (char *)v427[1];
    v298 = v427[0];
    if (v427[1] != v427[0])
    {
      do
      {
        v297 -= 216;
        sub_128920((uint64_t)v297);
      }
      while (v297 != v296);
      v298 = v427[0];
    }
    v427[1] = v296;
    operator delete(v298);
  }
  *(_OWORD *)v427 = v421;
  v428 = v422;
  v422 = 0;
  long long v421 = 0uLL;
  v299 = v425[0];
  if (v425[0])
  {
    v300 = v425[1];
    v301 = v425[0];
    if (v425[1] != v425[0])
    {
      do
      {
        v300 -= 15;
        sub_128984(v300);
      }
      while (v300 != v299);
      v301 = v425[0];
    }
    v425[1] = v299;
    operator delete(v301);
  }
  *(_OWORD *)v425 = v423;
  v426 = v424;
  v424 = 0;
  long long v423 = 0uLL;
  __p[0] = &v423;
  sub_120434((void ***)__p);
  __p[0] = &v421;
  sub_1204B8((void ***)__p);
  __p[0] = &v417;
  sub_1204B8((void ***)__p);
  if (!v295)
  {
    uint64_t v309 = sub_32A48(8);
    if (*(unsigned char *)(v309 + 8))
    {
      v310 = *(NSObject **)v309;
      if (*(void *)v309)
      {
        if (os_log_type_enabled(*(os_log_t *)v309, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 2898;
          _os_log_impl(&def_1E50E8, v310, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change was NOT redundant, performing full activation", (uint8_t *)__p, 0x12u);
        }
      }
    }
    v311 = (_DWORD **)v427[0];
    if (v427[0] != v427[1])
    {
      while (**v311 != 1986291046)
      {
        v311 += 27;
        if (v311 == v427[1]) {
          goto LABEL_617;
        }
      }
    }
    if (v311 == v427[1])
    {
LABEL_617:
      v312 = (os_log_t *)sub_32A48(13);
      v313 = *v312;
      if (*v312 && os_log_type_enabled(*v312, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 2904;
        _os_log_impl(&def_1E50E8, v313, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
      }
      v314 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v314, "Precondition failure.");
    }
    unsigned int v315 = 1918989155;
    if (a14 != 1918989155)
    {
      if (*((_DWORD *)v311 + 52) != 4 || *((unsigned char *)v311 + 212) == 0) {
        unsigned int v315 = a14;
      }
      else {
        unsigned int v315 = 1919181936;
      }
    }
    v317 = (os_log_t *)sub_32A48(8);
    v318 = *v317;
    if (*v317 && os_log_type_enabled(*v317, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(v450, v315);
      v319 = v450[23] >= 0 ? v450 : *(unsigned char **)v450;
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2921;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v319;
      _os_log_impl(&def_1E50E8, v318, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route change reason: %s", (uint8_t *)__p, 0x1Cu);
      if ((v450[23] & 0x80000000) != 0) {
        operator delete(*(void **)v450);
      }
    }
    sub_121040((uint64_t)__p, a2, (uint64_t *)v427, (unsigned int **)v425, (uint64_t)a5, v394, (uint64_t)a7, v393, a9, a10, a11, a12, a13, v315, (const std::string *)a15);
    sub_120690(v397, (uint64_t)__p);
    goto LABEL_717;
  }
  uint64_t v302 = sub_32A48(8);
  uint64_t v303 = sub_32A48(34);
  char v304 = 0;
  uint64_t v305 = 0;
  __p[0] = (void *)0x100000002;
  uint64_t v306 = *(void *)(v302 + 8);
  while (1)
  {
    uint64_t v307 = *((int *)__p + v305);
    char v308 = v304;
    if (((v306 & v307) != 0) != ((*(void *)(v303 + 8) & v307) != 0)) {
      break;
    }
    char v304 = 1;
    uint64_t v305 = 1;
    if (v308) {
      goto LABEL_639;
    }
  }
  if ((v306 & v307) == 0) {
    uint64_t v302 = v303;
  }
LABEL_639:
  v320 = *(NSObject **)v302;
  if (v320 && os_log_type_enabled(v320, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2860;
    _os_log_impl(&def_1E50E8, v320, OS_LOG_TYPE_DEBUG, "%25s:%-5d Redundant concrete route(s) encountered. Bypassing full activation.", (uint8_t *)__p, 0x12u);
  }
  sub_12053C((uint64_t)__p, 1920099684);
  sub_120690(v397, (uint64_t)__p);
  sub_11A520(__p);
  if ((void **)(a2 + 48) != a5) {
    sub_C6650((uint64_t **)(a2 + 48), *a5, a5 + 1);
  }
  v321 = (os_log_t *)sub_32A48(8);
  v322 = *v321;
  if (*v321 && os_log_type_enabled(*v321, OS_LOG_TYPE_DEBUG))
  {
    sub_120764((std::string *)v450, *(void **)(a2 + 48), (void *)(a2 + 56));
    int v323 = v450[23];
    v324 = *(unsigned char **)v450;
    sub_120764((std::string *)buf, *a5, a5 + 1);
    v325 = v450;
    if (v323 < 0) {
      v325 = v324;
    }
    if (buf[23] >= 0) {
      v326 = buf;
    }
    else {
      v326 = *(unsigned char **)buf;
    }
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2865;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v325;
    WORD2(__p[3]) = 2080;
    *(void **)((char *)&__p[3] + 6) = v326;
    _os_log_impl(&def_1E50E8, v322, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mDisallowedPortTypes. Old: %s; new: %s.",
      (uint8_t *)__p,
      0x26u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if ((v450[23] & 0x80000000) != 0) {
      operator delete(*(void **)v450);
    }
  }
  if ((void **)(a2 + 120) != a7) {
    sub_C6650((uint64_t **)(a2 + 120), *a7, a7 + 1);
  }
  v327 = (os_log_t *)sub_32A48(8);
  v328 = *v327;
  if (*v327 && os_log_type_enabled(*v327, OS_LOG_TYPE_DEBUG))
  {
    sub_120764((std::string *)v450, *(void **)(a2 + 120), (void *)(a2 + 128));
    int v329 = v450[23];
    v330 = *(unsigned char **)v450;
    sub_120764((std::string *)buf, *a7, a7 + 1);
    v331 = v450;
    if (v329 < 0) {
      v331 = v330;
    }
    if (buf[23] >= 0) {
      v332 = buf;
    }
    else {
      v332 = *(unsigned char **)buf;
    }
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2868;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v331;
    WORD2(__p[3]) = 2080;
    *(void **)((char *)&__p[3] + 6) = v332;
    _os_log_impl(&def_1E50E8, v328, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mAllowedPortTypes. Old: %s; new: %s.",
      (uint8_t *)__p,
      0x26u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if ((v450[23] & 0x80000000) != 0) {
      operator delete(*(void **)v450);
    }
  }
  v333 = (os_log_t *)sub_32A48(8);
  v334 = *v333;
  if (*v333 && os_log_type_enabled(*v333, OS_LOG_TYPE_DEBUG))
  {
    sub_18EEB8((std::string *)v450, (void *)(a2 + 216));
    int v335 = v450[23];
    v336 = *(unsigned char **)v450;
    sub_18EEB8((std::string *)buf, (void *)a11);
    v337 = v450;
    if (v335 < 0) {
      v337 = v336;
    }
    if (buf[23] >= 0) {
      v338 = buf;
    }
    else {
      v338 = *(unsigned char **)buf;
    }
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = "RoutingManager.cpp";
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 2870;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v337;
    WORD2(__p[3]) = 2080;
    *(void **)((char *)&__p[3] + 6) = v338;
    _os_log_impl(&def_1E50E8, v334, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mPreferredPersistentRoute. Old: %s; new: %s.",
      (uint8_t *)__p,
      0x26u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if ((v450[23] & 0x80000000) != 0) {
      operator delete(*(void **)v450);
    }
  }
  if (a2 + 216 != a11)
  {
    sub_7DD78(a2 + 216, *(const void ***)a11, *(const void ***)(a11 + 8), (uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 3);
    sub_7DD78(a2 + 240, *(const void ***)(a11 + 24), *(const void ***)(a11 + 32), (uint64_t)(*(void *)(a11 + 32) - *(void *)(a11 + 24)) >> 3);
    *(_DWORD *)(a2 + 296) = *(_DWORD *)(a11 + 80);
    sub_7DE98((void *)(a2 + 264), *(char **)(a11 + 64));
    *(_DWORD *)(a2 + 336) = *(_DWORD *)(a11 + 120);
    sub_7DE98((void *)(a2 + 304), *(char **)(a11 + 104));
    *(_DWORD *)(a2 + 376) = *(_DWORD *)(a11 + 160);
    sub_7DE98((void *)(a2 + 344), *(char **)(a11 + 144));
  }
  *(unsigned char *)(a2 + 384) = a12;
  if (a12)
  {
    sub_12095C((uint64_t ***)__p, v394);
    uint64_t v339 = a2 + 80;
    sub_87810(*(void **)(a2 + 80));
    v340 = __p[1];
    *(void **)(a2 + 72) = __p[0];
    v341 = (uint64_t *)(a2 + 72);
    *(void *)(a2 + 80) = v340;
    v342 = __p[2];
    *(void **)(a2 + 88) = __p[2];
    if (v342)
    {
      v340[2] = v339;
      __p[0] = &__p[1];
      __p[1] = 0;
      __p[2] = 0;
    }
    else
    {
      uint64_t *v341 = v339;
    }
    uint64_t v343 = a2 + 104;
    sub_120BDC(*(void **)(a2 + 104));
    v344 = __p[4];
    *(void **)(a2 + 96) = __p[3];
    *(void *)(a2 + 104) = v344;
    v345 = __p[5];
    *(void **)(a2 + 112) = __p[5];
    if (v345)
    {
      v344[2] = v343;
      __p[3] = &__p[4];
      *(_OWORD *)&__p[4] = 0uLL;
      v344 = 0;
    }
    else
    {
      *(void *)(a2 + 96) = v343;
    }
    sub_120BDC(v344);
    sub_87810((void *)__p[1]);
    v346 = (os_log_t *)sub_32A48(8);
    v347 = *v346;
    if (*v346)
    {
      if (os_log_type_enabled(*v346, OS_LOG_TYPE_DEBUG))
      {
        sub_120C30((std::string *)v450, (uint64_t)v341);
        v348 = v450[23] >= 0 ? v450 : *(unsigned char **)v450;
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 2877;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v348;
        _os_log_impl(&def_1E50E8, v347, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mDisallowedPorts to : %s.", (uint8_t *)__p, 0x1Cu);
        if ((v450[23] & 0x80000000) != 0) {
          operator delete(*(void **)v450);
        }
      }
    }
  }
  if (!sub_120FD4((uint64_t)v401, (uint64_t)v398))
  {
    v349 = (os_log_t *)sub_32A48(8);
    v350 = *v349;
    if (*v349 && os_log_type_enabled(*v349, OS_LOG_TYPE_DEBUG))
    {
      sub_383858((std::string *)v450, (uint64_t)v401);
      int v351 = v450[23];
      v352 = *(unsigned char **)v450;
      sub_383858((std::string *)buf, (uint64_t)v398);
      v353 = v450;
      if (v351 < 0) {
        v353 = v352;
      }
      if (buf[23] >= 0) {
        v354 = buf;
      }
      else {
        v354 = *(unsigned char **)buf;
      }
      LODWORD(__p[0]) = 136315906;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 2882;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v353;
      WORD2(__p[3]) = 2080;
      *(void **)((char *)&__p[3] + 6) = v354;
      _os_log_impl(&def_1E50E8, v350, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting current category and mode. old: %s; new: '%s'",
        (uint8_t *)__p,
        0x26u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if ((v450[23] & 0x80000000) != 0) {
        operator delete(*(void **)v450);
      }
    }
    _OWORD *v401 = *(_OWORD *)v398;
    if (*(_DWORD *)a10 != 1635087471)
    {
      *(_DWORD *)(a2 + 176) = *(_DWORD *)a10;
      std::string::operator=((std::string *)(a2 + 184), (const std::string *)(a10 + 8));
      *(void *)(a2 + 208) = *(void *)(a10 + 32);
      uint64_t v355 = sub_32A48(8);
      if (*(unsigned char *)(v355 + 8))
      {
        v356 = *(NSObject **)v355;
        if (*(void *)v355)
        {
          if (os_log_type_enabled(*(os_log_t *)v355, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(v450, *(_DWORD *)(a2 + 176));
            v357 = v450[23] >= 0 ? v450 : *(unsigned char **)v450;
            LODWORD(__p[0]) = 136315650;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 2889;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v357;
            _os_log_impl(&def_1E50E8, v356, OS_LOG_TYPE_DEBUG, "%25s:%-5d Set RouteInitiationInfo to %s.", (uint8_t *)__p, 0x1Cu);
            if ((v450[23] & 0x80000000) != 0) {
              operator delete(*(void **)v450);
            }
          }
        }
      }
    }
    sub_12053C((uint64_t)__p, 1919186544);
    sub_120690(v397, (uint64_t)__p);
LABEL_717:
    sub_11A520(__p);
  }
  __p[0] = v425;
  sub_120434((void ***)__p);
  __p[0] = v427;
  sub_1204B8((void ***)__p);
  sub_73038(v430);
  __p[0] = &v432;
  sub_125C48((void ***)__p);
}

void sub_11F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_B8E4((uint64_t *)(v65 - 160));
  sub_12CEB4(a64);
  (*(void (**)(uint64_t))(*(void *)a65 + 8))(a65);
  sub_8108((uint64_t *)&STACK[0x2C0]);
  STACK[0x208] = (unint64_t)&STACK[0x240];
  sub_120434((void ***)&STACK[0x208]);
  STACK[0x208] = (unint64_t)&STACK[0x260];
  sub_1204B8((void ***)&STACK[0x208]);
  sub_11A520(a27);
  sub_73038((void *)STACK[0x288]);
  STACK[0x208] = (unint64_t)&STACK[0x298];
  sub_125C48((void ***)&STACK[0x208]);
  _Unwind_Resume(a1);
}

__n128 **sub_12004C(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = 0;
  *a1 = (__n128 *)a1;
  a1[1] = (__n128 *)a1;
  uint64_t v5 = a2;
  while (1)
  {
    a1[2] = (__n128 *)v4;
    uint64_t v5 = (__n128 *)v5->n128_u64[1];
    if (v5 == a2) {
      break;
    }
    uint64_t v6 = (__n128 *)operator new(0x50uLL);
    v6->n128_u64[0] = 0;
    v6->n128_u64[1] = 0;
    sub_135B5C(v6 + 1, v5 + 1);
    unint64_t v7 = (unint64_t)*a1;
    v6->n128_u64[0] = (unint64_t)*a1;
    v6->n128_u64[1] = (unint64_t)a1;
    *(void *)(v7 + 8) = v6;
    *a1 = v6;
    uint64_t v4 = (uint64_t)a1[2]->n128_i64 + 1;
  }
  return a1;
}

void sub_1200D0(_Unwind_Exception *a1)
{
  sub_125CD0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1200E4(int64x2_t *a1, __n128 *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    sub_60548();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  BOOL v29 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_60560();
    }
    unint64_t v7 = operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  v8 = (char *)&v7[6 * v2];
  std::string::size_type v26 = v7;
  v27.i64[0] = (uint64_t)v8;
  v27.i64[1] = (uint64_t)v8;
  unsigned int v28 = (char *)&v7[6 * v6];
  *(void *)v8 = a2->n128_u64[0];
  *((_DWORD *)v8 + 2) = a2->n128_u32[2];
  sub_12004C((__n128 **)v8 + 2, a2 + 1);
  v7[6 * v2 + 5] = a2[2].n128_u64[1];
  uint64_t v9 = v27.i64[0];
  uint64_t v10 = v27.i64[1] + 48;
  v27.i64[1] += 48;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v23 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = v11 + v13;
      uint64_t v16 = *(void *)(v11 + v13 - 48);
      *(_DWORD *)(v14 - 40) = *(_DWORD *)(v11 + v13 - 40);
      *(void *)(v14 - 48) = v16;
      v17 = (uint64_t *)(v9 + v13 - 32);
      *(void *)(v14 - 32) = v17;
      *(void *)(v14 - 24) = v17;
      *(void *)(v14 - 16) = 0;
      uint64_t v18 = *(void *)(v11 + v13 - 16);
      if (v18)
      {
        uint64_t v20 = *(void *)(v15 - 32);
        v19 = *(uint64_t **)(v15 - 24);
        uint64_t v21 = *v19;
        *(void *)(v21 + 8) = *(void *)(v20 + 8);
        **(void **)(v20 + 8) = v21;
        uint64_t v22 = *v17;
        *(void *)(v22 + 8) = v19;
        uint64_t *v19 = v22;
        uint64_t *v17 = v20;
        *(void *)(v20 + 8) = v17;
        *(void *)(v14 - 16) = v18;
        *(void *)(v15 - 16) = 0;
      }
      *(void *)(v14 - 8) = *(void *)(v15 - 8);
      v13 -= 48;
    }
    while (v11 + v13 != v12);
    v9 += v13;
    int64x2_t v23 = *a1;
    uint64_t v10 = v27.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v27 = v23;
  unint64_t v24 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v28;
  unsigned int v28 = v24;
  std::string::size_type v26 = (void *)v23.i64[0];
  sub_139FB8((uint64_t)&v26);
  return v10;
}

void sub_1202BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_139FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1202D0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    BOOL v9 = v7 == a2;
    BOOL v8 = v7 < a2;
    if (v9) {
      BOOL v8 = *(_DWORD *)(v4 + 32) < a3;
    }
    BOOL v9 = !v8;
    if (v8) {
      uint64_t v10 = (uint64_t *)(v4 + 8);
    }
    else {
      uint64_t v10 = (uint64_t *)v4;
    }
    if (v9) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v11 = *(_DWORD *)(v6 + 28);
  BOOL v9 = v11 == a2;
  BOOL v12 = v11 > a2;
  if (v9) {
    BOOL v12 = *(_DWORD *)(v6 + 32) > a3;
  }
  if (v12) {
    return v3;
  }
  return v6;
}

void sub_120340(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = a1 + 1;
  BOOL v9 = operator new(0x48uLL);
  uint64_t v10 = v9;
  v14[0] = v9;
  v14[1] = v8;
  char v15 = 0;
  v9[4] = a2;
  unsigned int v11 = v9 + 4;
  v9[5] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 16), 1uLL, memory_order_relaxed);
  }
  v9[6] = 0;
  v9[7] = 0;
  v9[8] = 0;
  sub_46B38(v9 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  char v15 = 1;
  BOOL v12 = (uint64_t **)sub_112EFC((uint64_t)a1, &v13, v11);
  if (!*v12)
  {
    sub_46CA8(a1, v13, v12, v10);
    v14[0] = 0;
  }
  sub_735B8((uint64_t)v14);
}

void sub_120414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_735B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_120434(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        sub_128984(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1204B8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        sub_128920(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_12053C(uint64_t a1, signed int a2)
{
  BOOL result = sub_128688(a2);
  if (!result)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      BOOL v9 = "RoutingManager.cpp";
      __int16 v10 = 1024;
      int v11 = 1376;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(void *)a1 = off_6228D0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

void sub_120674(_Unwind_Exception *exception_object)
{
}

uint64_t sub_120690(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    if (*(void *)(a2 + 16)) {
      operator new();
    }
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      sub_11A588((uint64_t *)(v2 + 16));
      operator delete();
    }
    *(void *)(result + 8) = *(void *)(a2 + 8);
    *(void *)(result + 16) = 0;
  }
  return result;
}

void sub_120740()
{
}

std::string *sub_120764(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2417C(&v16, *((_DWORD *)a2 + 7));
      uint64_t v6 = std::string::insert(&v16, 0, "'", 1uLL);
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      int v8 = std::string::append(&v17, "'", 1uLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      int64_t v19 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (v19 >= 0) {
        __int16 v10 = __p;
      }
      else {
        __int16 v10 = (void **)__p[0];
      }
      if (v19 >= 0) {
        std::string::size_type v11 = HIBYTE(v19);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      BOOL v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v14 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v14);
      }
      if (v13 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v13;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_1208F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_12095C(uint64_t ***a1, void *a2)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t **)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t **)(a1 + 1);
  a1[4] = 0;
  a1[3] = (uint64_t **)(a1 + 4);
  uint64_t v5 = (uint64_t **)(a1 + 3);
  a1[5] = 0;
  sub_128240((uint64_t)&v28, a2);
  sub_87810(a1[1]);
  uint64_t v6 = v29;
  *a1 = v28;
  a1[1] = (uint64_t **)v6;
  long long v7 = v30;
  a1[2] = (uint64_t **)v30;
  if (v7)
  {
    v6[2] = (uint64_t)v4;
    uint64_t v28 = &v29;
    BOOL v29 = 0;
    uint64_t v30 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    *a1 = v4;
  }
  sub_87810(v6);
  int v8 = (void *)a2[3];
  int64x2_t v23 = a2 + 4;
  if (v8 != a2 + 4)
  {
    long long v9 = *v5;
    do
    {
      sub_128240((uint64_t)&v32, v8 + 5);
      unsigned int v24 = *((_DWORD *)v8 + 8);
      __int16 v10 = v33;
      uint64_t v25 = v32;
      std::string::size_type v26 = v33;
      uint64_t v27 = v34;
      if (v34)
      {
        v33[2] = &v26;
        uint64_t v32 = (uint64_t *)&v33;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        __int16 v10 = 0;
      }
      else
      {
        uint64_t v25 = (uint64_t *)&v26;
      }
      sub_87810(v10);
      LODWORD(v28) = v24;
      std::string::size_type v11 = v25;
      BOOL v29 = v25;
      uint64_t v30 = v26;
      uint64_t v31 = v27;
      if (v27)
      {
        v26[2] = &v30;
        std::string::size_type v26 = 0;
        uint64_t v27 = 0;
      }
      else
      {
        BOOL v29 = (uint64_t *)&v30;
        std::string::size_type v11 = (uint64_t *)&v30;
      }
      BOOL v12 = sub_1283A0(v5, v9, &v32, &v35, v24);
      uint64_t v13 = (void *)*v12;
      if (!*v12)
      {
        BOOL v14 = (uint64_t **)v12;
        char v15 = operator new(0x40uLL);
        uint64_t v13 = v15;
        std::string v16 = v30;
        uint64_t v17 = v31;
        v15[6] = v30;
        uint64_t v18 = (char *)(v15 + 6);
        *((_DWORD *)v15 + 8) = v24;
        v15[5] = v11;
        v15[7] = v17;
        if (v17)
        {
          v16[2] = v18;
          BOOL v29 = (uint64_t *)&v30;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
        }
        else
        {
          v15[5] = v18;
        }
        sub_46CA8(v5, (uint64_t)v32, v14, v15);
      }
      int64_t v19 = (uint64_t *)v13[1];
      if (v19)
      {
        do
        {
          long long v9 = v19;
          int64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          long long v9 = (uint64_t *)v13[2];
          BOOL v20 = *v9 == (void)v13;
          uint64_t v13 = v9;
        }
        while (!v20);
      }
      sub_87810(v30);
      sub_87810(v26);
      uint64_t v21 = (void *)v8[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v8[2];
          BOOL v20 = *v22 == (void)v8;
          int v8 = v22;
        }
        while (!v20);
      }
      int v8 = v22;
    }
    while (v22 != v23);
  }
}

void sub_120BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_120BDC(void *a1)
{
  if (a1)
  {
    sub_120BDC(*a1);
    sub_120BDC(a1[1]);
    sub_87810((void *)a1[6]);
    operator delete(a1);
  }
}

void sub_120C30(std::string *a1, uint64_t a2)
{
  sub_1280FC(&v31, *(void **)a2, (void *)(a2 + 8));
  uint64_t v4 = std::string::insert(&v31, 0, " { Global : ", 0xCuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  sub_21C8C(&v24, " [ ");
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    while (1)
    {
      sub_2417C(&v29, *((_DWORD *)v6 + 8));
      long long v7 = std::string::append(&v29, " : ", 3uLL);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_1280FC(&__p, (void *)v6[5], v6 + 6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::size_type v11 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = &v31;
      }
      else {
        uint64_t v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = v31.__r_.__value_.__l.__size_;
      }
      std::string::append(&v24, (const std::string::value_type *)v13, v14);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      char v15 = (void *)v6[1];
      if (v15)
      {
        do
        {
          std::string v16 = v15;
          char v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          std::string v16 = (void *)v6[2];
          BOOL v17 = *v16 == (void)v6;
          uint64_t v6 = v16;
        }
        while (!v17);
      }
      if (v16 == (void *)(a2 + 32)) {
        break;
      }
      std::string::append(&v24, "; ", 2uLL);
      uint64_t v6 = v16;
    }
  }
  std::string::append(&v24, " ]", 2uLL);
  uint64_t v18 = std::string::insert(&v24, 0, " VAD Specific Ports :", 0x15uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  BOOL v20 = std::string::append(&v25, " }", 2uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t v27 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string::size_type v26 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v27 >= 0) {
    uint64_t v22 = v26;
  }
  else {
    uint64_t v22 = (void **)v26[0];
  }
  if (v27 >= 0) {
    std::string::size_type v23 = HIBYTE(v27);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v26[1];
  }
  std::string::append(a1, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_120EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_120FD4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a1 || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 4)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 12)) {
    BOOL v2 = *(unsigned char *)(a1 + 12) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a2 + 12) != 0) == (*(unsigned char *)(a1 + 12) != 0);
  }
  else {
    return *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
  }
}

void sub_121040(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4, uint64_t a5, void *a6, uint64_t a7, int a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t *a13, unsigned int a14, const std::string *a15)
{
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  v535[0] = 0;
  v535[1] = 0;
  v534 = (unsigned int *)v535;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  while (v15 != v16)
  {
    if (!*(unsigned char *)(v15 + 212))
    {
      v494 = (os_log_t *)sub_32A48(13);
      v495 = *v494;
      if (*v494 && os_log_type_enabled(*v494, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1060;
        _os_log_impl(&def_1E50E8, v495, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    if ((*(_DWORD *)(v15 + 208) - 5) <= 0xFFFFFFFD) {
      sub_125D8C((uint64_t **)&v534, **(_DWORD **)v15, *(_DWORD *)(*(void *)v15 + 4), *(uint64_t **)v15);
    }
    v15 += 216;
  }
  uint64_t v18 = *a4;
  BOOL v17 = a4[1];
  while (v18 != v17)
  {
    sub_125D8C((uint64_t **)&v534, *v18, v18[1], (uint64_t *)v18);
    v18 += 30;
  }
  uint64_t v19 = sub_32A48(8);
  if (*(unsigned char *)(v19 + 8))
  {
    BOOL v20 = *(NSObject **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        sub_E7F10(&v566, v534, (unsigned int *)v535);
        long long v21 = (v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v566
            : (std::string *)v566.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1073;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v21;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resultant Device Contexts %s", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  (*(void (**)(void, uint64_t *, unsigned int **))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), a3, &v534);
  uint64_t v22 = sub_298DA4();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 256))(v22))
  {
    uint64_t v23 = *a3;
    uint64_t v24 = a3[1];
    while (1)
    {
      if (v23 == v24)
      {
        int v29 = 1;
        goto LABEL_33;
      }
      uint64_t v25 = *(void *)v23;
      uint64_t v26 = *(void *)v23 + 16;
      uint64_t v27 = *(void *)(*(void *)v23 + 24);
      if (v27 != v26) {
        break;
      }
LABEL_25:
      uint64_t v28 = v25 + 16;
      while (v26 != v28)
      {
        if (sub_241364(1885433971, (uint64_t *)(v26 + 16))) {
          goto LABEL_31;
        }
        uint64_t v26 = *(void *)(v26 + 8);
      }
      v23 += 216;
    }
    while (!sub_241364(1885433953, (uint64_t *)(v27 + 16)))
    {
      uint64_t v27 = *(void *)(v27 + 8);
      if (v27 == v26)
      {
        uint64_t v25 = *(void *)v23;
        uint64_t v26 = *(void *)(*(void *)v23 + 24);
        goto LABEL_25;
      }
    }
LABEL_31:
    int v29 = 0;
LABEL_33:
    if (sub_E8358((void *)(a2 + 456), 1885433953)) {
      int v30 = 1;
    }
    else {
      int v30 = sub_E8358((void *)(a2 + 456), 1885433971);
    }
    std::string v31 = *(void **)a5;
    if (*(void *)a5 == a5 + 8)
    {
LABEL_47:
      int v36 = 0;
    }
    else
    {
      while (1)
      {
        int v32 = *((_DWORD *)v31 + 7);
        BOOL v33 = v32 == 1885433953 || v32 == 1885433971;
        if (v33) {
          break;
        }
        uint64_t v34 = (void *)v31[1];
        if (v34)
        {
          do
          {
            uint64_t v35 = v34;
            uint64_t v34 = (void *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            uint64_t v35 = (void *)v31[2];
            BOOL v33 = *v35 == (void)v31;
            std::string v31 = v35;
          }
          while (!v33);
        }
        std::string v31 = v35;
        if (v35 == (void *)(a5 + 8)) {
          goto LABEL_47;
        }
      }
      int v36 = 1;
    }
    int v522 = (v29 | v36) ^ 1 | v30;
  }
  else
  {
    int v522 = 0;
  }
  uint64_t v37 = *a3;
  uint64_t v38 = a3[1];
  if (*a3 != v38)
  {
    while (*(_DWORD *)(*(void *)v37 + 4) || **(_DWORD **)v37 != 1986291046)
    {
      v37 += 216;
      if (v37 == v38) {
        goto LABEL_54;
      }
    }
  }
  if (v38 == v37)
  {
LABEL_54:
    v39 = (os_log_t *)sub_32A48(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2970;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    uint64_t v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v41, "Precondition failure.");
  }
  v519 = (_OWORD *)(v37 + 8);
  if (v522)
  {
    uint64_t v42 = sub_32A48(8);
    uint64_t v43 = sub_32A48(34);
    char v44 = 0;
    uint64_t v45 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v46 = *(void *)(v42 + 8);
    while (1)
    {
      uint64_t v47 = (int)buf[v45];
      char v48 = v44;
      if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
        break;
      }
      char v44 = 1;
      uint64_t v45 = 1;
      if (v48) {
        goto LABEL_70;
      }
    }
    if ((v46 & v47) == 0) {
      uint64_t v42 = v43;
    }
LABEL_70:
    v56 = *(NSObject **)v42;
    if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2975;
      _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", (uint8_t *)buf, 0x12u);
    }
    uint64_t v57 = sub_32A48(8);
    uint64_t v58 = sub_32A48(34);
    char v59 = 0;
    uint64_t v60 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v61 = *(void *)(v57 + 8);
    while (1)
    {
      uint64_t v62 = (int)buf[v60];
      char v63 = v59;
      if (((v61 & v62) != 0) != ((*(void *)(v58 + 8) & v62) != 0)) {
        break;
      }
      char v59 = 1;
      uint64_t v60 = 1;
      if (v63) {
        goto LABEL_88;
      }
    }
    if ((v61 & v62) == 0) {
      uint64_t v57 = v58;
    }
LABEL_88:
    uint64_t v72 = sub_32A48(27);
    char v73 = 0;
    uint64_t v74 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v75 = *(void *)(v57 + 8);
    while (1)
    {
      uint64_t v76 = (int)buf[v74];
      char v77 = v73;
      if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
        break;
      }
      char v73 = 1;
      uint64_t v74 = 1;
      if (v77) {
        goto LABEL_117;
      }
    }
    if ((v75 & v76) == 0) {
      uint64_t v57 = v72;
    }
LABEL_117:
    char v97 = *(NSObject **)v57;
    if (v97 && os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2976;
      _os_log_impl(&def_1E50E8, v97, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [AirPlay route change] Calling routing handler to process route using MultiRouteProcessingInfo:", (uint8_t *)buf, 0x12u);
    }
    uint64_t v98 = *a3;
    uint64_t v99 = a3[1];
    if (*a3 != v99)
    {
      do
      {
        uint64_t v100 = sub_32A48(8);
        uint64_t v101 = sub_32A48(34);
        char v102 = 0;
        uint64_t v103 = 0;
        *(void *)buf = 0x100000002;
        uint64_t v104 = *(void *)(v100 + 8);
        while (1)
        {
          uint64_t v105 = (int)buf[v103];
          char v106 = v102;
          if (((v104 & v105) != 0) != ((*(void *)(v101 + 8) & v105) != 0)) {
            break;
          }
          char v102 = 1;
          uint64_t v103 = 1;
          if (v106) {
            goto LABEL_127;
          }
        }
        if ((v104 & v105) == 0) {
          uint64_t v100 = v101;
        }
LABEL_127:
        uint64_t v107 = sub_32A48(27);
        char v108 = 0;
        uint64_t v109 = 0;
        *(void *)buf = 0x100000002;
        uint64_t v110 = *(void *)(v100 + 8);
        while (1)
        {
          uint64_t v111 = (int)buf[v109];
          char v112 = v108;
          if (((v110 & v111) != 0) != ((*(void *)(v107 + 8) & v111) != 0)) {
            break;
          }
          char v108 = 1;
          uint64_t v109 = 1;
          if (v112) {
            goto LABEL_133;
          }
        }
        if ((v110 & v111) == 0) {
          uint64_t v100 = v107;
        }
LABEL_133:
        uint64_t v113 = *(NSObject **)v100;
        if (v113 && os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
        {
          sub_1E2DE8(&v566, v98);
          uint64_t v114 = &v566;
          if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v114 = (std::string *)v566.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2979;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v114;
          _os_log_impl(&def_1E50E8, v113, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [AirPlay route change] - %s.", (uint8_t *)buf, 0x1Cu);
          if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v566.__r_.__value_.__l.__data_);
          }
        }
        v98 += 216;
      }
      while (v98 != v99);
    }
    uint64_t v115 = sub_32A48(8);
    uint64_t v116 = sub_32A48(34);
    char v117 = 0;
    uint64_t v118 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v119 = *(void *)(v115 + 8);
    while (1)
    {
      uint64_t v120 = (int)buf[v118];
      char v121 = v117;
      if (((v119 & v120) != 0) != ((*(void *)(v116 + 8) & v120) != 0)) {
        break;
      }
      char v117 = 1;
      uint64_t v118 = 1;
      if (v121) {
        goto LABEL_165;
      }
    }
    if ((v119 & v120) == 0) {
      uint64_t v115 = v116;
    }
LABEL_165:
    uint64_t v132 = sub_32A48(27);
    char v133 = 0;
    uint64_t v134 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v135 = *(void *)(v115 + 8);
    while (1)
    {
      uint64_t v136 = (int)buf[v134];
      char v137 = v133;
      if (((v135 & v136) != 0) != ((*(void *)(v132 + 8) & v136) != 0)) {
        break;
      }
      char v133 = 1;
      uint64_t v134 = 1;
      if (v137) {
        goto LABEL_171;
      }
    }
    if ((v135 & v136) == 0) {
      uint64_t v115 = v132;
    }
LABEL_171:
    unint64_t v138 = *(NSObject **)v115;
    if (v138 && os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
    {
      sub_F8834(&v566, a4);
      unint64_t v139 = (v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v566
           : (std::string *)v566.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2981;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v139;
      _os_log_impl(&def_1E50E8, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [AirPlay route change] Routes to be destroyed %s.", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v140 = sub_32A48(8);
    uint64_t v141 = sub_32A48(34);
    char v142 = 0;
    uint64_t v143 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v144 = *(void *)(v140 + 8);
    while (1)
    {
      uint64_t v145 = (int)buf[v143];
      char v146 = v142;
      if (((v144 & v145) != 0) != ((*(void *)(v141 + 8) & v145) != 0)) {
        break;
      }
      char v142 = 1;
      uint64_t v143 = 1;
      if (v146) {
        goto LABEL_184;
      }
    }
    if ((v144 & v145) == 0) {
      uint64_t v140 = v141;
    }
LABEL_184:
    uint64_t v147 = sub_32A48(27);
    char v148 = 0;
    uint64_t v149 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v150 = *(void *)(v140 + 8);
    while (1)
    {
      uint64_t v151 = (int)buf[v149];
      char v152 = v148;
      if (((v150 & v151) != 0) != ((*(void *)(v147 + 8) & v151) != 0)) {
        break;
      }
      char v148 = 1;
      uint64_t v149 = 1;
      if (v152) {
        goto LABEL_190;
      }
    }
    if ((v150 & v151) == 0) {
      uint64_t v140 = v147;
    }
LABEL_190:
    uint64_t v153 = *(NSObject **)v140;
    if (v153 && os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
    {
      if (sub_120FD4(a2 + 32, (uint64_t)v519))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2982;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = "identical";
        _os_log_impl(&def_1E50E8, v153, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [AirPlay route change] The previous default device category/mode was: %s.", (uint8_t *)buf, 0x1Cu);
      }
      else
      {
        sub_383858(&v566, a2 + 32);
        if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v167 = &v566;
        }
        else {
          v167 = (std::string *)v566.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2982;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v167;
        _os_log_impl(&def_1E50E8, v153, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [AirPlay route change] The previous default device category/mode was: %s.", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v168 = sub_32A48(8);
    uint64_t v169 = sub_32A48(34);
    char v170 = 0;
    uint64_t v171 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v172 = *(void *)(v168 + 8);
    while (1)
    {
      uint64_t v173 = (int)buf[v171];
      char v174 = v170;
      if (((v172 & v173) != 0) != ((*(void *)(v169 + 8) & v173) != 0)) {
        break;
      }
      char v170 = 1;
      uint64_t v171 = 1;
      if (v174) {
        goto LABEL_222;
      }
    }
    if ((v172 & v173) == 0) {
      uint64_t v168 = v169;
    }
LABEL_222:
    uint64_t v175 = sub_32A48(27);
    char v176 = 0;
    uint64_t v177 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v178 = *(void *)(v168 + 8);
    while (1)
    {
      uint64_t v179 = (int)buf[v177];
      char v180 = v176;
      if (((v178 & v179) != 0) != ((*(void *)(v175 + 8) & v179) != 0)) {
        break;
      }
      char v176 = 1;
      uint64_t v177 = 1;
      if (v180) {
        goto LABEL_228;
      }
    }
    if ((v178 & v179) == 0) {
      uint64_t v168 = v175;
    }
LABEL_228:
    uint64_t v181 = *(NSObject **)v168;
    if (v181 && os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(&v566, a14);
      if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v182 = &v566;
      }
      else {
        v182 = (std::string *)v566.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2983;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v182;
      v164 = "%25s:%-5d [AirPlay route change] The route change will use reason %s.";
      BOOL v165 = v181;
      os_log_type_t v166 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_234;
    }
  }
  else
  {
    uint64_t v49 = sub_32A48(8);
    uint64_t v50 = sub_32A48(34);
    char v51 = 0;
    uint64_t v52 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v53 = *(void *)(v49 + 8);
    while (1)
    {
      uint64_t v54 = (int)buf[v52];
      char v55 = v51;
      if (((v53 & v54) != 0) != ((*(void *)(v50 + 8) & v54) != 0)) {
        break;
      }
      char v51 = 1;
      uint64_t v52 = 1;
      if (v55) {
        goto LABEL_79;
      }
    }
    if ((v53 & v54) == 0) {
      uint64_t v49 = v50;
    }
LABEL_79:
    unsigned int v64 = *(NSObject **)v49;
    if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2987;
      _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_INFO, "%25s:%-5d >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", (uint8_t *)buf, 0x12u);
    }
    uint64_t v65 = sub_32A48(8);
    uint64_t v66 = sub_32A48(34);
    char v67 = 0;
    uint64_t v68 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v69 = *(void *)(v65 + 8);
    while (1)
    {
      uint64_t v70 = (int)buf[v68];
      char v71 = v67;
      if (((v69 & v70) != 0) != ((*(void *)(v66 + 8) & v70) != 0)) {
        break;
      }
      char v67 = 1;
      uint64_t v68 = 1;
      if (v71) {
        goto LABEL_94;
      }
    }
    if ((v69 & v70) == 0) {
      uint64_t v65 = v66;
    }
LABEL_94:
    uint64_t v78 = *(NSObject **)v65;
    if (v78 && os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2988;
      _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_INFO, "%25s:%-5d Calling routing handler to process route using MultiRouteProcessingInfo:", (uint8_t *)buf, 0x12u);
    }
    uint64_t v79 = *a3;
    uint64_t v80 = a3[1];
    if (*a3 != v80)
    {
      do
      {
        uint64_t v81 = sub_32A48(8);
        uint64_t v82 = sub_32A48(34);
        char v83 = 0;
        uint64_t v84 = 0;
        *(void *)buf = 0x100000002;
        uint64_t v85 = *(void *)(v81 + 8);
        while (1)
        {
          uint64_t v86 = (int)buf[v84];
          char v87 = v83;
          if (((v85 & v86) != 0) != ((*(void *)(v82 + 8) & v86) != 0)) {
            break;
          }
          char v83 = 1;
          uint64_t v84 = 1;
          if (v87) {
            goto LABEL_104;
          }
        }
        if ((v85 & v86) == 0) {
          uint64_t v81 = v82;
        }
LABEL_104:
        uint64_t v88 = *(NSObject **)v81;
        if (v88 && os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
        {
          sub_1E2DE8(&v566, v79);
          uint64_t v89 = &v566;
          if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v89 = (std::string *)v566.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315650;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2991;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v89;
          _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_INFO, "%25s:%-5d - %s.", (uint8_t *)buf, 0x1Cu);
          if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v566.__r_.__value_.__l.__data_);
          }
        }
        v79 += 216;
      }
      while (v79 != v80);
    }
    uint64_t v90 = sub_32A48(8);
    uint64_t v91 = sub_32A48(34);
    char v92 = 0;
    uint64_t v93 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v94 = *(void *)(v90 + 8);
    while (1)
    {
      uint64_t v95 = (int)buf[v93];
      char v96 = v92;
      if (((v94 & v95) != 0) != ((*(void *)(v91 + 8) & v95) != 0)) {
        break;
      }
      char v92 = 1;
      uint64_t v93 = 1;
      if (v96) {
        goto LABEL_146;
      }
    }
    if ((v94 & v95) == 0) {
      uint64_t v90 = v91;
    }
LABEL_146:
    int v122 = *(NSObject **)v90;
    if (v122 && os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
    {
      sub_F8834(&v566, a4);
      uint64_t v123 = (v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v566
           : (std::string *)v566.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2993;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v123;
      _os_log_impl(&def_1E50E8, v122, OS_LOG_TYPE_INFO, "%25s:%-5d Routes to be destroyed %s.", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v124 = sub_32A48(8);
    uint64_t v125 = sub_32A48(34);
    char v126 = 0;
    uint64_t v127 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v128 = *(void *)(v124 + 8);
    while (1)
    {
      uint64_t v129 = (int)buf[v127];
      char v130 = v126;
      if (((v128 & v129) != 0) != ((*(void *)(v125 + 8) & v129) != 0)) {
        break;
      }
      char v126 = 1;
      uint64_t v127 = 1;
      if (v130) {
        goto LABEL_159;
      }
    }
    if ((v128 & v129) == 0) {
      uint64_t v124 = v125;
    }
LABEL_159:
    int v131 = *(NSObject **)v124;
    if (v131 && os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
    {
      if (sub_120FD4(a2 + 32, (uint64_t)v519))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2994;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = "identical";
        _os_log_impl(&def_1E50E8, v131, OS_LOG_TYPE_INFO, "%25s:%-5d The previous default device category/mode was: %s.", (uint8_t *)buf, 0x1Cu);
      }
      else
      {
        sub_383858(&v566, a2 + 32);
        if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v154 = &v566;
        }
        else {
          v154 = (std::string *)v566.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2994;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v154;
        _os_log_impl(&def_1E50E8, v131, OS_LOG_TYPE_INFO, "%25s:%-5d The previous default device category/mode was: %s.", (uint8_t *)buf, 0x1Cu);
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v155 = sub_32A48(8);
    uint64_t v156 = sub_32A48(34);
    char v157 = 0;
    uint64_t v158 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v159 = *(void *)(v155 + 8);
    while (1)
    {
      uint64_t v160 = (int)buf[v158];
      char v161 = v157;
      if (((v159 & v160) != 0) != ((*(void *)(v156 + 8) & v160) != 0)) {
        break;
      }
      char v157 = 1;
      uint64_t v158 = 1;
      if (v161) {
        goto LABEL_205;
      }
    }
    if ((v159 & v160) == 0) {
      uint64_t v155 = v156;
    }
LABEL_205:
    uint64_t v162 = *(NSObject **)v155;
    if (v162 && os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
    {
      sub_2417C(&v566, a14);
      if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v163 = &v566;
      }
      else {
        v163 = (std::string *)v566.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2995;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v163;
      v164 = "%25s:%-5d The route change will use reason %s.";
      BOOL v165 = v162;
      os_log_type_t v166 = OS_LOG_TYPE_INFO;
LABEL_234:
      _os_log_impl(&def_1E50E8, v165, v166, v164, (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_125E20((uint64_t)v532, &v534);
  uint64_t v533 = a2;
  v547 = 0;
  uint64_t v183 = operator new(0x28uLL);
  *uint64_t v183 = off_622B18;
  sub_125E20((uint64_t)(v183 + 1), v532);
  v183[4] = v533;
  v547 = v183;
  sub_528DC(v548, 1, (uint64_t)v546);
  sub_4F750(v546);
  sub_463E0((void *)v532[1]);
  *(void *)buf = a2;
  sub_125E20((uint64_t)&buf[2], &v534);
  int v529 = std::uncaught_exceptions();
  uint64_t v530 = *(void *)buf;
  sub_125E20((uint64_t)&v531, &buf[2]);
  sub_463E0(*(void **)&buf[4]);
  uint64_t v184 = *a3;
  uint64_t v185 = a3[1];
  if (*a3 == v185)
  {
    v497 = (os_log_t *)sub_32A48(13);
    v498 = *v497;
    if (*v497 && os_log_type_enabled(*v497, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 34;
      _os_log_impl(&def_1E50E8, v498, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    v499 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v499, "Precondition failure.");
  }
  if ((0x84BDA12F684BDA13 * ((v185 - v184) >> 3)) >> 60) {
    sub_60548();
  }
  uint64_t v186 = *(void *)(a2 + 8);
  int v187 = (char *)operator new(0x4BDA12F684BDA130 * ((v185 - v184) >> 3));
  v188 = &v187[0x4BDA12F684BDA130 * ((v185 - v184) >> 3)];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v189 = v187;
  do
  {
    for (uint64_t i = *(void *)(v186 + 8); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v186)
      {
        int v526 = 1;
        v528 = 0;
        int64x2_t v527 = 0uLL;
        memset(buf, 0, 24);
        v566.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        sub_120434((void ***)&v566);
        goto LABEL_325;
      }
      if (!*(unsigned char *)(v184 + 212))
      {
        v491 = (os_log_t *)sub_32A48(13);
        v492 = *v491;
        if (*v491 && os_log_type_enabled(*v491, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 57;
          _os_log_impl(&def_1E50E8, v492, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }
        v493 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v493, "Precondition failure.");
      }
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(i + 16) + 16))(*(void *)(i + 16), v184)) {
        break;
      }
    }
    if (v187 >= v188)
    {
      uint64_t v191 = (v187 - v189) >> 4;
      unint64_t v192 = v191 + 1;
      if ((unint64_t)(v191 + 1) >> 60) {
        sub_60548();
      }
      if ((v188 - v189) >> 3 > v192) {
        unint64_t v192 = (v188 - v189) >> 3;
      }
      if ((unint64_t)(v188 - v189) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v193 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v193 = v192;
      }
      if (v193 >> 60) {
        sub_60560();
      }
      int v194 = (char *)operator new(16 * v193);
      unsigned __int16 v195 = &v194[16 * v191];
      *(void *)unsigned __int16 v195 = *(void *)(i + 16);
      *((void *)v195 + 1) = v184;
      if (v187 == v189)
      {
        v197 = &v194[16 * v191];
      }
      else
      {
        uint64_t v196 = &v194[16 * v191];
        do
        {
          v197 = v196 - 16;
          *((_OWORD *)v196 - 1) = *((_OWORD *)v187 - 1);
          v187 -= 16;
          v196 -= 16;
        }
        while (v187 != v189);
      }
      v188 = &v194[16 * v193];
      int v187 = v195 + 16;
      if (v189) {
        operator delete(v189);
      }
      v189 = v197;
    }
    else
    {
      *(void *)int v187 = *(void *)(i + 16);
      *((void *)v187 + 1) = v184;
      v187 += 16;
    }
    if ((*(_DWORD *)(v184 + 208) - 5) >= 0xFFFFFFFE) {
      sub_125D8C((uint64_t **)&__p, **(_DWORD **)v184, *(_DWORD *)(*(void *)v184 + 4), *(uint64_t **)v184);
    }
    v184 += 216;
  }
  while (v184 != v185);
  v544[0] = 0;
  v544[1] = 0;
  v543 = (uint64_t *)v544;
  v198 = *(uint64_t **)(v186 + 24);
  v517 = (uint64_t **)(v186 + 32);
  v510 = (uint64_t **)(v186 + 24);
  if (v198 != (uint64_t *)(v186 + 32))
  {
    do
    {
      uint64_t v199 = v198[4];
      *(void *)v551 = v199;
      for (std::string::size_type j = __p.__r_.__value_.__l.__size_; j; std::string::size_type j = *(void *)j)
      {
        unsigned int v201 = *(_DWORD *)(j + 28);
        unsigned int v202 = *(_DWORD *)(j + 32);
        BOOL v203 = v202 > HIDWORD(v199);
        if (v201 != v199) {
          BOOL v203 = v201 > v199;
        }
        if (!v203)
        {
          BOOL v204 = v202 < HIDWORD(v199);
          BOOL v33 = v201 == v199;
          BOOL v205 = v201 < v199;
          if (v33) {
            BOOL v205 = v204;
          }
          if (!v205) {
            goto LABEL_282;
          }
          j += 8;
        }
      }
      uint64_t v206 = sub_32A48(19);
      if (*(unsigned char *)(v206 + 8))
      {
        v207 = *(NSObject **)v206;
        if (*(void *)v206)
        {
          if (os_log_type_enabled(*(os_log_t *)v206, OS_LOG_TYPE_DEBUG))
          {
            sub_4D60(&v566, (unsigned int *)v551);
            int v208 = &v566;
            if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v208 = (std::string *)v566.__r_.__value_.__r.__words[0];
            }
            buf[0] = 136315650;
            *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 92;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v208;
            _os_log_impl(&def_1E50E8, v207, OS_LOG_TYPE_DEBUG, "%25s:%-5d Undoing routing and removing routing actions for %s", (uint8_t *)buf, 0x1Cu);
            if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v566.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      sub_28973C(v198 + 5);
      sub_125D8C(&v543, *(unsigned int *)v551, *(unsigned int *)&v551[4], (uint64_t *)v551);
LABEL_282:
      int v209 = (uint64_t *)v198[1];
      if (v209)
      {
        do
        {
          uint64_t v210 = (uint64_t **)v209;
          int v209 = (uint64_t *)*v209;
        }
        while (v209);
      }
      else
      {
        do
        {
          uint64_t v210 = (uint64_t **)v198[2];
          BOOL v33 = *v210 == v198;
          v198 = (uint64_t *)v210;
        }
        while (!v33);
      }
      v198 = (uint64_t *)v210;
    }
    while (v210 != v517);
    v211 = v543;
    if (v543 != (uint64_t *)v544)
    {
      do
      {
        uint64_t v212 = *v517;
        if (*v517)
        {
          unsigned int v213 = *((_DWORD *)v211 + 7);
          unsigned int v214 = *((_DWORD *)v211 + 8);
          int v215 = (uint64_t *)(v186 + 32);
          v216 = *v517;
          do
          {
            unsigned int v217 = *((_DWORD *)v216 + 8);
            BOOL v33 = v217 == v213;
            BOOL v218 = v217 < v213;
            if (v33) {
              BOOL v218 = *((_DWORD *)v216 + 9) < v214;
            }
            BOOL v219 = !v218;
            if (v218) {
              v220 = (uint64_t **)(v216 + 1);
            }
            else {
              v220 = (uint64_t **)v216;
            }
            if (v219) {
              int v215 = v216;
            }
            v216 = *v220;
          }
          while (*v220);
          if (v215 != (uint64_t *)v517)
          {
            unsigned int v221 = *((_DWORD *)v215 + 8);
            BOOL v222 = *((_DWORD *)v215 + 9) > v214;
            BOOL v33 = v221 == v213;
            BOOL v223 = v221 > v213;
            if (v33) {
              BOOL v223 = v222;
            }
            if (!v223)
            {
              uint64_t v224 = (uint64_t *)v215[1];
              v225 = v215;
              if (v224)
              {
                do
                {
                  v226 = v224;
                  uint64_t v224 = (uint64_t *)*v224;
                }
                while (v224);
              }
              else
              {
                do
                {
                  v226 = (uint64_t *)v225[2];
                  BOOL v33 = *v226 == (void)v225;
                  v225 = v226;
                }
                while (!v33);
              }
              if (*v510 == v215) {
                *v510 = v226;
              }
              --*(void *)(v186 + 40);
              sub_89144(v212, v215);
              sub_289630(v215 + 5);
              operator delete(v215);
            }
          }
        }
        unsigned int v227 = (uint64_t *)v211[1];
        if (v227)
        {
          do
          {
            int v228 = v227;
            unsigned int v227 = (uint64_t *)*v227;
          }
          while (v227);
        }
        else
        {
          do
          {
            int v228 = (uint64_t *)v211[2];
            BOOL v33 = *v228 == (void)v211;
            v211 = v228;
          }
          while (!v33);
        }
        v211 = v228;
      }
      while (v228 != (uint64_t *)v544);
    }
  }
  int64x2_t v541 = 0uLL;
  v542 = 0;
  uint64_t v229 = v187 - v189;
  if (v187 != v189)
  {
    if ((unint64_t)v229 >= 0x2222222222222221) {
      sub_60548();
    }
    *(void *)&buf[8] = &v542;
    v230 = (char *)sub_129F00(v229 >> 4);
    *(void *)buf = v230;
    *(void *)&buf[2] = v230;
    v232 = &v230[120 * v231];
    *(void *)&buf[4] = v230;
    *(void *)&buf[6] = v232;
    int v233 = (long long *)v541.i64[1];
    BOOL v234 = (long long *)v541.i64[0];
    if (v541.i64[1] == v541.i64[0])
    {
      int64x2_t v236 = vdupq_n_s64(v541.u64[1]);
      uint64_t v235 = (uint64_t)v230;
    }
    else
    {
      uint64_t v235 = (uint64_t)v230;
      do
      {
        v235 -= 120;
        int v233 = (long long *)((char *)v233 - 120);
        sub_129F94(v235, v233);
      }
      while (v233 != v234);
      int64x2_t v236 = v541;
      v230 = *(char **)&buf[4];
      v232 = *(char **)&buf[6];
    }
    v541.i64[0] = v235;
    v541.i64[1] = (uint64_t)v230;
    *(int64x2_t *)&buf[2] = v236;
    long long v421 = v542;
    v542 = v232;
    *(void *)&buf[6] = v421;
    *(void *)buf = v236.i64[0];
    sub_12A090((uint64_t)buf);
  }
  v539 = 0;
  uint64_t v540 = 0;
  v538 = &v539;
  v562 = off_62A9D8;
  v563 = (uint64_t (***)())&v538;
  v564 = &v541;
  v565 = &v562;
  sub_528DC(&v566, 1, (uint64_t)&v562);
  sub_4F750(&v562);
  if (v187 == v189)
  {
LABEL_714:
    long long v451 = v538;
    if (v538 == &v539)
    {
LABEL_767:
      sub_4F6C8(&v566.__r_.__value_.__l.__size_);
      sub_52588((uint64_t)&v566);
      int v526 = 0;
      int64x2_t v527 = v541;
      v528 = v542;
      int64x2_t v541 = 0uLL;
      v542 = 0;
      goto LABEL_768;
    }
    char v452 = *(uint64_t **)(v186 + 24);
    while (v517 != (uint64_t **)v452)
    {
      unsigned int v453 = *((_DWORD *)v451 + 8);
      unsigned int v454 = *((_DWORD *)v451 + 9);
      unsigned int v455 = *((_DWORD *)v452 + 8);
      unsigned int v456 = *((_DWORD *)v452 + 9);
      BOOL v457 = v454 < v456;
      if (v453 != v455) {
        BOOL v457 = v453 < v455;
      }
      if (v457) {
        break;
      }
      BOOL v464 = v456 < v454;
      if (v453 == v455) {
        BOOL v465 = v464;
      }
      else {
        BOOL v465 = v455 < v453;
      }
      if (v465)
      {
        v466 = (uint64_t *)v452[1];
        v467 = v466;
        v468 = v452;
        if (v466)
        {
          do
          {
            long long v469 = (uint64_t **)v467;
            v467 = (uint64_t *)*v467;
          }
          while (v467);
        }
        else
        {
          do
          {
            long long v469 = (uint64_t **)v468[2];
            BOOL v33 = *v469 == v468;
            v468 = (uint64_t *)v469;
          }
          while (!v33);
        }
        if (v469 == v517) {
          goto LABEL_743;
        }
        unsigned int v470 = *((_DWORD *)v469 + 8);
        BOOL v33 = v453 == v470;
        BOOL v471 = v453 < v470;
        if (v33) {
          BOOL v471 = v454 < *((_DWORD *)v469 + 9);
        }
        if (v471)
        {
LABEL_743:
          if (v466)
          {
            *(void *)v551 = v469;
            char v452 = (uint64_t *)v469;
          }
          else
          {
            *(void *)v551 = v452++;
          }
LABEL_747:
          char v472 = (uint64_t *)*v452;
          if (!*v452)
          {
            char v473 = (uint64_t *)operator new(0x40uLL);
            char v472 = v473;
            *(void *)&buf[2] = v186 + 32;
            v473[4] = (uint64_t)v451[4];
            v473[5] = (uint64_t)(v473 + 5);
            v473[6] = (uint64_t)(v473 + 5);
            v473[7] = 0;
            uint64_t v474 = v451[7];
            if (v474)
            {
              char v476 = v451[5];
              v475 = v451[6];
              uint64_t v477 = *v475;
              *(void *)(v477 + 8) = v476[1];
              *(void *)v476[1] = v477;
              uint64_t v478 = v473[5];
              *(void *)(v478 + 8) = v475;
              uint64_t *v475 = v478;
              v473[5] = (uint64_t)v476;
              v476[1] = (uint64_t)(v473 + 5);
              v473[7] = (uint64_t)v474;
              v451[7] = 0;
            }
            LOBYTE(buf[4]) = 1;
            uint64_t v479 = *(void *)v551;
            *char v473 = 0;
            v473[1] = 0;
            v473[2] = v479;
            *char v452 = (uint64_t)v473;
            long long v480 = (uint64_t *)**v510;
            v481 = v473;
            if (v480)
            {
              *v510 = v480;
              v481 = (uint64_t *)*v452;
            }
            sub_46D00(*(uint64_t **)(v186 + 32), v481);
            ++*(void *)(v186 + 40);
            *(void *)buf = 0;
            sub_289210((uint64_t)buf);
          }
          goto LABEL_754;
        }
LABEL_745:
        char v452 = sub_289268((uint64_t)v510, v551, v453, v454);
        goto LABEL_747;
      }
      char v472 = v452;
LABEL_754:
      char v482 = (uint64_t *)v472[1];
      if (v482)
      {
        do
        {
          char v452 = v482;
          char v482 = (uint64_t *)*v482;
        }
        while (v482);
      }
      else
      {
        do
        {
          char v452 = (uint64_t *)v472[2];
          BOOL v33 = *v452 == (void)v472;
          char v472 = v452;
        }
        while (!v33);
      }
      v483 = v451[1];
      if (v483)
      {
        do
        {
          char v484 = (uint64_t **)v483;
          v483 = (uint64_t *)*v483;
        }
        while (v483);
      }
      else
      {
        do
        {
          char v484 = (uint64_t **)v451[2];
          BOOL v33 = *v484 == (uint64_t *)v451;
          long long v451 = v484;
        }
        while (!v33);
      }
      long long v451 = v484;
      if (v484 == &v539) {
        goto LABEL_767;
      }
    }
    uint64_t v458 = *v452;
    long long v459 = v452;
    if (*v510 == v452) {
      goto LABEL_728;
    }
    uint64_t v460 = *v452;
    v461 = v452;
    if (v458)
    {
      do
      {
        long long v459 = (uint64_t *)v460;
        uint64_t v460 = *(void *)(v460 + 8);
      }
      while (v460);
    }
    else
    {
      do
      {
        long long v459 = (uint64_t *)v461[2];
        BOOL v33 = *v459 == (void)v461;
        v461 = v459;
      }
      while (v33);
    }
    unsigned int v462 = *((_DWORD *)v459 + 8);
    unsigned int v453 = *((_DWORD *)v451 + 8);
    unsigned int v454 = *((_DWORD *)v451 + 9);
    BOOL v33 = v462 == v453;
    BOOL v463 = v462 < v453;
    if (v33) {
      BOOL v463 = *((_DWORD *)v459 + 9) < v454;
    }
    if (v463)
    {
LABEL_728:
      if (v458)
      {
        *(void *)v551 = v459;
        char v452 = v459 + 1;
      }
      else
      {
        *(void *)v551 = v452;
      }
      goto LABEL_747;
    }
    goto LABEL_745;
  }
  v422 = v189;
  while (1)
  {
    if (!*(unsigned char *)(*((void *)v422 + 1) + 212))
    {
      v507 = (os_log_t *)sub_32A48(13);
      v508 = *v507;
      if (*v507 && os_log_type_enabled(*v507, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 153;
        _os_log_impl(&def_1E50E8, v508, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      v509 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v509, "Precondition failure.");
    }
    buf[2] = 1;
    v556 = 0;
    CFTypeRef cf = 0;
    memset(&buf[3], 0, 52);
    v555 = &v556;
    v559 = 0;
    uint64_t v560 = 0;
    v558 = 0;
    int v561 = 1;
    uint64_t v423 = *((void *)v422 + 1);
    uint64_t v424 = *(unsigned int *)(v423 + 208);
    v513 = *(unsigned int **)v423;
    if (v424 > 4 || ((1 << v424) & 0x19) == 0) {
      break;
    }
    uint64_t v426 = sub_32A48(19);
    if (*(unsigned char *)(v426 + 8))
    {
      v427 = *(NSObject **)v426;
      if (*(void *)v426)
      {
        if (os_log_type_enabled(*(os_log_t *)v426, OS_LOG_TYPE_DEBUG))
        {
          sub_3825EC(&v550, v513);
          int v428 = SHIBYTE(v550.__r_.__value_.__r.__words[2]);
          std::string::size_type v429 = v550.__r_.__value_.__r.__words[0];
          sub_21C8C(v536, off_621228[v424]);
          v430 = &v550;
          if (v428 < 0) {
            v430 = (std::string *)v429;
          }
          uint64_t v431 = v536;
          if (v537 < 0) {
            uint64_t v431 = (void **)v536[0];
          }
          *(_DWORD *)v551 = 136315906;
          *(void *)&v551[4] = "RoutingHandlerDispatcher.cpp";
          *(_WORD *)&v551[12] = 1024;
          *(_DWORD *)&v551[14] = 174;
          *(_WORD *)&v551[18] = 2080;
          *(void *)&v551[20] = v430;
          __int16 v552 = 2080;
          v553 = v431;
          _os_log_impl(&def_1E50E8, v427, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ignoring Processing Route %s due to Result: %s", v551, 0x26u);
          if (v537 < 0) {
            operator delete(v536[0]);
          }
          if (SHIBYTE(v550.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v550.__r_.__value_.__l.__data_);
          }
        }
      }
    }
LABEL_706:
    int v561 = v424;
    *(void *)buf = *(void *)v513;
    buf[2] = v513[2];
    sub_129DF8((uint64_t)&v541, (long long *)buf);
    if (v558)
    {
      v559 = v558;
      operator delete(v558);
    }
    sub_463E0(v556);
    v422 += 16;
    if (v422 == v187) {
      goto LABEL_714;
    }
  }
  uint64_t v432 = sub_32A48(19);
  if (*(unsigned char *)(v432 + 8))
  {
    unint64_t v433 = *(NSObject **)v432;
    if (*(void *)v432)
    {
      if (os_log_type_enabled(*(os_log_t *)v432, OS_LOG_TYPE_DEBUG))
      {
        sub_3825EC(&v550, v513);
        uint64_t v434 = "????";
        if (v424 <= 4) {
          uint64_t v434 = off_621228[v424];
        }
        int v435 = SHIBYTE(v550.__r_.__value_.__r.__words[2]);
        std::string::size_type v436 = v550.__r_.__value_.__r.__words[0];
        sub_21C8C(v536, v434);
        v437 = &v550;
        if (v435 < 0) {
          v437 = (std::string *)v436;
        }
        uint64_t v438 = v536;
        if (v537 < 0) {
          uint64_t v438 = (void **)v536[0];
        }
        *(_DWORD *)v551 = 136315906;
        *(void *)&v551[4] = "RoutingHandlerDispatcher.cpp";
        *(_WORD *)&v551[12] = 1024;
        *(_DWORD *)&v551[14] = 162;
        *(_WORD *)&v551[18] = 2080;
        *(void *)&v551[20] = v437;
        __int16 v552 = 2080;
        v553 = v438;
        _os_log_impl(&def_1E50E8, v433, OS_LOG_TYPE_DEBUG, "%25s:%-5d Processing Route %s for Result: %s", v551, 0x26u);
        if (v537 < 0) {
          operator delete(v536[0]);
        }
        if (SHIBYTE(v550.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v550.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v439 = *(void *)v513;
  uint64_t v511 = *(void *)v422;
  uint64_t v512 = *((void *)v422 + 1);
  __int16 v440 = sub_289268((uint64_t)&v538, &v550, *(void *)v513, HIDWORD(*(void *)v513));
  char v441 = (uint64_t *)*v440;
  if (!*v440)
  {
    __int16 v442 = v440;
    char v441 = (uint64_t *)operator new(0x40uLL);
    *(void *)&v551[8] = &v539;
    v441[4] = v439;
    v441[5] = (uint64_t)(v441 + 5);
    v441[6] = (uint64_t)(v441 + 5);
    v441[7] = 0;
    v551[16] = 1;
    std::string::size_type v443 = v550.__r_.__value_.__r.__words[0];
    *char v441 = 0;
    v441[1] = 0;
    v441[2] = v443;
    *__int16 v442 = (uint64_t)v441;
    v444 = v441;
    if (*v538)
    {
      v538 = (uint64_t **)*v538;
      v444 = (uint64_t *)*v442;
    }
    sub_46D00(v539, v444);
    ++v540;
    *(void *)v551 = 0;
    sub_289210((uint64_t)v551);
  }
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_RoutingHandlerActivation", 0x1BuLL) == &qword_659450)
  {
    v445 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    v445 = (char *)os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    if ((unint64_t)(v445 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v446 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        sub_1E26F0((std::string *)v551, v512);
        v447 = v551;
        if (v551[23] < 0) {
          v447 = *(unsigned char **)v551;
        }
        LODWORD(v550.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v550.__r_.__value_.__r.__words + 4) = (std::string::size_type)v447;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v446, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v445, "VA_RoutingHandlerActivation", "Activating route: %s", (uint8_t *)&v550, 0xCu);
        if ((v551[23] & 0x80000000) != 0) {
          operator delete(*(void **)v551);
        }
      }
    }
  }
  v536[0] = v445;
  uint64_t v448 = sub_32A48(42);
  if (*(unsigned char *)(v448 + 8))
  {
    v449 = *(NSObject **)v448;
    if (*(void *)v448)
    {
      if (os_log_type_enabled(*(os_log_t *)v448, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v551 = 136315650;
        *(void *)&v551[4] = "SignpostUtilities.h";
        *(_WORD *)&v551[12] = 1024;
        *(_DWORD *)&v551[14] = 94;
        *(_WORD *)&v551[18] = 2080;
        *(void *)&v551[20] = "kRoutingHandlerActivation";
        _os_log_impl(&def_1E50E8, v449, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", v551, 0x1Cu);
      }
    }
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v511 + 32))(v551, v511, v512);
  int v450 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _DWORD *, unsigned char *))(*(void *)v511 + 24))(v511, v512, v441 + 5, buf, v551);
  sub_7F264(*(void **)&v551[8]);
  sub_115298((os_signpost_id_t *)v536);
  if (!v450) {
    goto LABEL_706;
  }
  int v526 = v450;
  v528 = 0;
  int64x2_t v527 = 0uLL;
  memset(v551, 0, 24);
  v550.__r_.__value_.__r.__words[0] = (std::string::size_type)v551;
  sub_120434((void ***)&v550);
  if (v558)
  {
    v559 = v558;
    operator delete(v558);
  }
  sub_463E0(v556);
  sub_52588((uint64_t)&v566);
LABEL_768:
  sub_13B760(v539);
  *(void *)buf = &v541;
  sub_120434((void ***)buf);
  sub_463E0(v544[0]);
LABEL_325:
  sub_463E0((void *)__p.__r_.__value_.__l.__size_);
  if (v189) {
    operator delete(v189);
  }
  if (v522)
  {
    uint64_t n = a10;
    uint64_t v238 = sub_32A48(8);
    uint64_t v239 = sub_32A48(34);
    char v240 = 0;
    uint64_t v241 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v242 = *(void *)(v238 + 8);
    while (1)
    {
      uint64_t v243 = (int)buf[v241];
      char v244 = v240;
      if (((v242 & v243) != 0) != ((*(void *)(v239 + 8) & v243) != 0)) {
        break;
      }
      char v240 = 1;
      uint64_t v241 = 1;
      if (v244) {
        goto LABEL_338;
      }
    }
    if ((v242 & v243) == 0) {
      uint64_t v238 = v239;
    }
LABEL_338:
    v252 = *(NSObject **)v238;
    if (v252 && os_log_type_enabled(v252, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v253 = "failed";
      *(void *)&buf[1] = "RoutingManager.cpp";
      buf[0] = 136315650;
      if (!v526) {
        uint64_t v253 = "succeeded";
      }
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3015;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v253;
      _os_log_impl(&def_1E50E8, v252, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [AirPlay route change] Routing handler route processing complete (%s).", (uint8_t *)buf, 0x1Cu);
    }
    uint64_t v254 = sub_32A48(8);
    uint64_t v255 = sub_32A48(34);
    char v256 = 0;
    uint64_t v257 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v258 = *(void *)(v254 + 8);
    while (1)
    {
      uint64_t v259 = (int)buf[v257];
      char v260 = v256;
      if (((v258 & v259) != 0) != ((*(void *)(v255 + 8) & v259) != 0)) {
        break;
      }
      char v256 = 1;
      uint64_t v257 = 1;
      if (v260) {
        goto LABEL_360;
      }
    }
    if ((v258 & v259) == 0) {
      uint64_t v254 = v255;
    }
LABEL_360:
    v270 = *(NSObject **)v254;
    if (v270 && os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3016;
      uint64_t v271 = v270;
      os_log_type_t v272 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_368;
    }
  }
  else
  {
    uint64_t n = a10;
    uint64_t v245 = sub_32A48(8);
    uint64_t v246 = sub_32A48(34);
    char v247 = 0;
    uint64_t v248 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v249 = *(void *)(v245 + 8);
    while (1)
    {
      uint64_t v250 = (int)buf[v248];
      char v251 = v247;
      if (((v249 & v250) != 0) != ((*(void *)(v246 + 8) & v250) != 0)) {
        break;
      }
      char v247 = 1;
      uint64_t v248 = 1;
      if (v251) {
        goto LABEL_349;
      }
    }
    if ((v249 & v250) == 0) {
      uint64_t v245 = v246;
    }
LABEL_349:
    unint64_t v261 = *(NSObject **)v245;
    if (v261 && os_log_type_enabled(v261, OS_LOG_TYPE_INFO))
    {
      unint64_t v262 = "failed";
      *(void *)&buf[1] = "RoutingManager.cpp";
      buf[0] = 136315650;
      if (!v526) {
        unint64_t v262 = "succeeded";
      }
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3020;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v262;
      _os_log_impl(&def_1E50E8, v261, OS_LOG_TYPE_INFO, "%25s:%-5d Routing handler route processing complete (%s).", (uint8_t *)buf, 0x1Cu);
    }
    uint64_t v263 = sub_32A48(8);
    uint64_t v264 = sub_32A48(34);
    char v265 = 0;
    uint64_t v266 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v267 = *(void *)(v263 + 8);
    while (1)
    {
      uint64_t v268 = (int)buf[v266];
      char v269 = v265;
      if (((v267 & v268) != 0) != ((*(void *)(v264 + 8) & v268) != 0)) {
        break;
      }
      char v265 = 1;
      uint64_t v266 = 1;
      if (v269) {
        goto LABEL_365;
      }
    }
    if ((v267 & v268) == 0) {
      uint64_t v263 = v264;
    }
LABEL_365:
    v273 = *(NSObject **)v263;
    if (v273 && os_log_type_enabled(v273, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3021;
      uint64_t v271 = v273;
      os_log_type_t v272 = OS_LOG_TYPE_INFO;
LABEL_368:
      _os_log_impl(&def_1E50E8, v271, v272, "%25s:%-5d <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", (uint8_t *)buf, 0x12u);
    }
  }
  if (!v526)
  {
    if (0xEEEEEEEEEEEEEEEFLL * ((v527.i64[1] - v527.i64[0]) >> 3) != 0x84BDA12F684BDA13 * ((a3[1] - *a3) >> 3))
    {
      v500 = (os_log_t *)sub_32A48(13);
      v501 = *v500;
      if (*v500 && os_log_type_enabled(*v500, OS_LOG_TYPE_ERROR))
      {
        unint64_t v502 = 0x84BDA12F684BDA13 * ((a3[1] - *a3) >> 3);
        buf[0] = 136315906;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3028;
        HIWORD(buf[4]) = 2048;
        *(void *)&buf[5] = 0xEEEEEEEEEEEEEEEFLL * ((v527.i64[1] - v527.i64[0]) >> 3);
        LOWORD(buf[7]) = 2048;
        *(void *)((char *)&buf[7] + 2) = v502;
        _os_log_impl(&def_1E50E8, v501, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The number of device states (%lu) returned by the routing handler dispatcher did not equal the number of concrete routes in the route (%lu).\"", (uint8_t *)buf, 0x26u);
      }
      v503 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v503, "The number of device states (%lu) returned by the routing handler dispatcher did not equal the number of concrete routes in the route (%lu).");
    }
    v281 = (os_log_t *)sub_32A48(8);
    uint64_t v282 = *v281;
    if (*v281 && os_log_type_enabled(*v281, OS_LOG_TYPE_DEBUG))
    {
      sub_120764(&v566, *(void **)(a2 + 48), (void *)(a2 + 56));
      int v283 = SHIBYTE(v566.__r_.__value_.__r.__words[2]);
      std::string::size_type v284 = v566.__r_.__value_.__r.__words[0];
      sub_120764((std::string *)v551, *(void **)a5, (void *)(a5 + 8));
      uint64_t v285 = &v566;
      if (v283 < 0) {
        uint64_t v285 = (std::string *)v284;
      }
      if (v551[23] >= 0) {
        unint64_t v286 = v551;
      }
      else {
        unint64_t v286 = *(unsigned char **)v551;
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3030;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v285;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v286;
      _os_log_impl(&def_1E50E8, v282, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mDisallowedPortTypes. Old: %s; new: %s.",
        (uint8_t *)buf,
        0x26u);
      if ((v551[23] & 0x80000000) != 0) {
        operator delete(*(void **)v551);
      }
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
    }
    v287 = (os_log_t *)sub_32A48(8);
    uint64_t v288 = *v287;
    if (*v287 && os_log_type_enabled(*v287, OS_LOG_TYPE_DEBUG))
    {
      sub_120764(&v566, *(void **)(a2 + 120), (void *)(a2 + 128));
      int v289 = SHIBYTE(v566.__r_.__value_.__r.__words[2]);
      std::string::size_type v290 = v566.__r_.__value_.__r.__words[0];
      sub_120764((std::string *)v551, *(void **)a7, (void *)(a7 + 8));
      v291 = &v566;
      if (v289 < 0) {
        v291 = (std::string *)v290;
      }
      if (v551[23] >= 0) {
        long long v292 = v551;
      }
      else {
        long long v292 = *(unsigned char **)v551;
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3032;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v291;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v292;
      _os_log_impl(&def_1E50E8, v288, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mAllowedPortTypes. Old: %s; new: %s.",
        (uint8_t *)buf,
        0x26u);
      if ((v551[23] & 0x80000000) != 0) {
        operator delete(*(void **)v551);
      }
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
    }
    long long v293 = (os_log_t *)sub_32A48(8);
    long long v294 = *v293;
    if (*v293 && os_log_type_enabled(*v293, OS_LOG_TYPE_DEBUG))
    {
      sub_18EEB8(&v566, (void *)(a2 + 216));
      int v295 = SHIBYTE(v566.__r_.__value_.__r.__words[2]);
      std::string::size_type v296 = v566.__r_.__value_.__r.__words[0];
      sub_18EEB8((std::string *)v551, (void *)a11);
      v297 = &v566;
      if (v295 < 0) {
        v297 = (std::string *)v296;
      }
      if (v551[23] >= 0) {
        v298 = v551;
      }
      else {
        v298 = *(unsigned char **)v551;
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3034;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v297;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v298;
      _os_log_impl(&def_1E50E8, v294, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mPreferredPersistentRoute. Old: %s; new: %s.",
        (uint8_t *)buf,
        0x26u);
      if ((v551[23] & 0x80000000) != 0) {
        operator delete(*(void **)v551);
      }
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
    }
    v300 = (_DWORD *)v527.i64[1];
    v299 = (_DWORD *)v527.i64[0];
    if (0x84BDA12F684BDA13 * ((a3[1] - *a3) >> 3) != 0xEEEEEEEEEEEEEEEFLL * ((v527.i64[1] - v527.i64[0]) >> 3))
    {
      v504 = (os_log_t *)sub_32A48(13);
      v505 = *v504;
      if (*v504 && os_log_type_enabled(*v504, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1017;
        _os_log_impl(&def_1E50E8, v505, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      v506 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v506, "Precondition failure.");
    }
    v562 = (uint64_t (**)())&v562;
    v563 = &v562;
    v564 = 0;
    if (v527.i64[0] != v527.i64[1])
    {
      do
      {
        v301 = (uint64_t *)*a3;
        uint64_t v302 = (uint64_t *)a3[1];
        if ((uint64_t *)*a3 != v302)
        {
          while (*(_DWORD *)(*v301 + 4) != v299[1] || *(_DWORD *)*v301 != *v299)
          {
            v301 += 27;
            if (v301 == v302) {
              goto LABEL_772;
            }
          }
        }
        if (v301 == v302)
        {
LABEL_772:
          char v485 = (os_log_t *)sub_32A48(13);
          v486 = *v485;
          if (*v485 && os_log_type_enabled(*v485, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "RoutingManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1030;
            _os_log_impl(&def_1E50E8, v486, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
          }
          __int16 v487 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v487, "Precondition failure.");
        }
        uint64_t v303 = *v301;
        memset(buf, 0, 24);
        strcpy((char *)&buf[6], "cwdv");
        LOBYTE(buf[8]) = 0;
        buf[10] = 3;
        *(void *)&buf[14] = 0;
        v555 = 0;
        *(void *)&buf[12] = &buf[14];
        LODWORD(v556) = 44739242;
        CFTypeRef cf = 0;
        sub_125ECC((unint64_t *)&v566, v303, (uint64_t)buf);
        char v304 = (uint64_t (**)())sub_1260C8((uint64_t)v299, &v566);
        uint64_t v305 = v562;
        *char v304 = (uint64_t (*)())v562;
        v304[1] = (uint64_t (*)())&v562;
        v305[1] = (uint64_t (*)())v304;
        v562 = v304;
        v564 = (int64x2_t *)((char *)v564 + 1);
        sub_8108((uint64_t *)&v566);
        if (cf) {
          CFRelease(cf);
        }
        sub_463E0(*(void **)&buf[14]);
        if (*(void *)buf)
        {
          *(void *)&buf[2] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        v299 += 30;
      }
      while (v299 != v300);
    }
    uint64_t v306 = *a4;
    uint64_t v307 = a4[1];
    if (*a4 != v307)
    {
      do
      {
        *(void *)buf = buf;
        *(void *)&buf[2] = buf;
        *(void *)&buf[4] = 0;
        char v308 = (uint64_t (***)())sub_1260C8((uint64_t)v306, buf);
        *char v308 = (uint64_t (**)())&v562;
        uint64_t v309 = v563;
        v308[1] = (uint64_t (**)())v563;
        *uint64_t v309 = (uint64_t (**)())v308;
        v563 = v308;
        v564 = (int64x2_t *)((char *)v564 + 1);
        sub_8108((uint64_t *)buf);
        v306 += 30;
      }
      while (v306 != v307);
    }
    *(void *)buf = buf;
    *(void *)&buf[2] = buf;
    *(void *)&buf[10] = 0;
    *(void *)&buf[8] = 0;
    *(void *)&buf[4] = 0;
    *(void *)&buf[6] = &buf[8];
    v310 = (unsigned int **)*a3;
    v311 = (unsigned int **)a3[1];
    if ((unsigned int **)*a3 == v311) {
      goto LABEL_776;
    }
    v312 = (uint64_t *)(a2 + 456);
    do
    {
      v313 = operator new(0x90uLL);
      void *v313 = 0;
      v313[1] = 0;
      sub_E5B68((uint64_t)(v313 + 2), v310);
      uint64_t v314 = *(void *)buf;
      void *v313 = *(void *)buf;
      v313[1] = buf;
      *(void *)(v314 + 8) = v313;
      *(void *)buf = v313;
      ++*(void *)&buf[4];
      v310 += 27;
    }
    while (v310 != v311);
    unsigned int v315 = (_DWORD *)*a3;
    v316 = (_DWORD *)a3[1];
    while (1)
    {
      if (v315 == v316) {
        goto LABEL_776;
      }
      if (!*(_DWORD *)(*(void *)v315 + 4) && **(_DWORD **)v315 == 1986291046) {
        break;
      }
      v315 += 54;
    }
    if (v316 == v315)
    {
LABEL_776:
      int v488 = (os_log_t *)sub_32A48(13);
      v489 = *v488;
      if (*v488 && os_log_type_enabled(*v488, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v566.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteCache.cpp";
        WORD2(v566.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v566.__r_.__value_.__r.__words[1] + 6) = 505;
        _os_log_impl(&def_1E50E8, v489, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v566, 0x12u);
      }
      v490 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v490, "Precondition failure.");
    }
    if (&buf[6] != v315 + 20)
    {
      v317 = (void *)*((void *)v315 + 10);
      v318 = v315 + 22;
      if (*(void *)&buf[10])
      {
        std::string::size_type v319 = *(void *)&buf[6];
        *(void *)&buf[6] = &buf[8];
        *(void *)(*(void *)&buf[8] + 16) = 0;
        *(void *)&buf[8] = 0;
        *(void *)&buf[10] = 0;
        if (*(void *)(v319 + 8)) {
          std::string::size_type v320 = *(void *)(v319 + 8);
        }
        else {
          std::string::size_type v320 = v319;
        }
        v566.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[6];
        v566.__r_.__value_.__l.__size_ = v320;
        v566.__r_.__value_.__r.__words[2] = v320;
        if (!v320 || (v566.__r_.__value_.__l.__size_ = (std::string::size_type)sub_6CA9C(v320), v317 == v318))
        {
          int v329 = v317;
        }
        else
        {
          do
          {
            uint64_t v322 = v317[4];
            uint64_t v321 = v317[5];
            if (v321) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v321 + 16), 1uLL, memory_order_relaxed);
            }
            int v323 = *(std::__shared_weak_count **)(v320 + 40);
            *(void *)(v320 + 32) = v322;
            *(void *)(v320 + 40) = v321;
            if (v323) {
              std::__shared_weak_count::__release_weak(v323);
            }
            if ((void *)v320 != v317) {
              sub_6720C((char *)(v320 + 48), (char *)v317[6], v317[7], (uint64_t)(v317[7] - v317[6]) >> 2);
            }
            v324 = (void *)v566.__r_.__value_.__r.__words[2];
            v325 = *(void **)&buf[8];
            v326 = &buf[8];
            v327 = &buf[8];
            if (*(void *)&buf[8])
            {
              do
              {
                while (1)
                {
                  v326 = v325;
                  if (!sub_73610(v324 + 4, v325 + 4)) {
                    break;
                  }
                  v325 = (void *)*v326;
                  v327 = v326;
                  if (!*v326) {
                    goto LABEL_466;
                  }
                }
                v325 = (void *)v326[1];
              }
              while (v325);
              v327 = v326 + 1;
            }
LABEL_466:
            void *v324 = 0;
            v324[1] = 0;
            v324[2] = v326;
            void *v327 = v324;
            if (**(void **)&buf[6])
            {
              *(void *)&buf[6] = **(void **)&buf[6];
              v324 = (void *)*v327;
            }
            sub_46D00(*(uint64_t **)&buf[8], v324);
            ++*(void *)&buf[10];
            v566.__r_.__value_.__r.__words[2] = v566.__r_.__value_.__l.__size_;
            if (v566.__r_.__value_.__l.__size_) {
              v566.__r_.__value_.__l.__size_ = (std::string::size_type)sub_6CA9C(v566.__r_.__value_.__l.__size_);
            }
            v328 = (void *)v317[1];
            if (v328)
            {
              do
              {
                int v329 = v328;
                v328 = (void *)*v328;
              }
              while (v328);
            }
            else
            {
              do
              {
                int v329 = (void *)v317[2];
                BOOL v33 = *v329 == (void)v317;
                v317 = v329;
              }
              while (!v33);
            }
            std::string::size_type v320 = v566.__r_.__value_.__r.__words[2];
            if (v566.__r_.__value_.__r.__words[2]) {
              BOOL v330 = v329 == v318;
            }
            else {
              BOOL v330 = 1;
            }
            v317 = v329;
          }
          while (!v330);
        }
        sub_E7EC0((uint64_t)&v566);
        v317 = v329;
        uint64_t n = a10;
      }
      if (v317 != v318)
      {
        do
        {
          sub_73518((uint64_t)v551, (uint64_t)&buf[6], (uint64_t)(v317 + 4));
          v331 = *(void **)v551;
          v332 = *(void **)&buf[8];
          v333 = &buf[8];
          v334 = &buf[8];
          if (*(void *)&buf[8])
          {
            do
            {
              while (1)
              {
                v333 = v332;
                if (!sub_73610(v331 + 4, v332 + 4)) {
                  break;
                }
                v332 = (void *)*v333;
                v334 = v333;
                if (!*v333) {
                  goto LABEL_490;
                }
              }
              v332 = (void *)v333[1];
            }
            while (v332);
            v334 = v333 + 1;
          }
LABEL_490:
          void *v331 = 0;
          v331[1] = 0;
          v331[2] = v333;
          void *v334 = v331;
          if (**(void **)&buf[6])
          {
            *(void *)&buf[6] = **(void **)&buf[6];
            v331 = (void *)*v334;
          }
          sub_46D00(*(uint64_t **)&buf[8], v331);
          ++*(void *)&buf[10];
          *(void *)v551 = 0;
          sub_735B8((uint64_t)v551);
          int v335 = (void *)v317[1];
          uint64_t n = a10;
          if (v335)
          {
            do
            {
              v336 = v335;
              int v335 = (void *)*v335;
            }
            while (v335);
          }
          else
          {
            do
            {
              v336 = (void *)v317[2];
              BOOL v33 = *v336 == (void)v317;
              v317 = v336;
            }
            while (!v33);
          }
          v317 = v336;
        }
        while (v336 != v318);
      }
    }
    sub_E7DF0(v312);
    uint64_t v337 = *(void *)&buf[4];
    if (*(void *)&buf[4])
    {
      v338 = *(void **)&buf[2];
      uint64_t v339 = *(void *)buf;
      uint64_t v340 = **(void **)&buf[2];
      *(void *)(v340 + 8) = *(void *)(*(void *)buf + 8);
      **(void **)(v339 + 8) = v340;
      uint64_t v341 = *(void *)(a2 + 456);
      *(void *)(v341 + 8) = v338;
      void *v338 = v341;
      *(void *)(a2 + 456) = v339;
      *(void *)(v339 + 8) = v312;
      *(void *)(a2 + 472) += v337;
      *(void *)&buf[4] = 0;
    }
    uint64_t v342 = a2 + 488;
    sub_73038(*(void **)(a2 + 488));
    uint64_t v343 = *(void **)&buf[8];
    *(void *)(a2 + 480) = *(void *)&buf[6];
    *(void *)(a2 + 488) = v343;
    uint64_t v344 = *(void *)&buf[10];
    *(void *)(a2 + 496) = *(void *)&buf[10];
    if (v344)
    {
      v343[2] = v342;
      uint64_t v343 = 0;
      *(void *)&buf[6] = &buf[8];
      *(void *)&buf[8] = 0;
      *(void *)&buf[10] = 0;
    }
    else
    {
      *(void *)(a2 + 480) = v342;
    }
    sub_73038(v343);
    sub_E7DF0((uint64_t *)buf);
    if (!*(void *)(a2 + 472))
    {
      v348 = (os_log_t *)sub_32A48(8);
      v349 = *v348;
      if (*v348)
      {
        if (os_log_type_enabled(*v348, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "RouteCache.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 509;
          _os_log_impl(&def_1E50E8, v349, OS_LOG_TYPE_ERROR, "%25s:%-5d Route Cache is Empty", (uint8_t *)buf, 0x12u);
        }
      }
    }
    sub_4F6C8(v549);
    *(_OWORD *)(a2 + 32) = *v519;
    if (a2 + 48 != a5) {
      sub_C6650((uint64_t **)(a2 + 48), *(void **)a5, (void *)(a5 + 8));
    }
    sub_12095C((uint64_t ***)buf, a6);
    uint64_t v345 = a2 + 80;
    sub_87810(*(void **)(a2 + 80));
    uint64_t v346 = *(void *)&buf[2];
    *(void *)(a2 + 72) = *(void *)buf;
    *(void *)(a2 + 80) = v346;
    uint64_t v347 = *(void *)&buf[4];
    *(void *)(a2 + 88) = *(void *)&buf[4];
    if (v347)
    {
      *(void *)(v346 + 16) = v345;
      *(void *)buf = &buf[2];
      *(void *)&buf[2] = 0;
      *(void *)&buf[4] = 0;
    }
    else
    {
      *(void *)(a2 + 72) = v345;
    }
    uint64_t v350 = a2 + 104;
    sub_120BDC(*(void **)(a2 + 104));
    int v351 = *(void **)&buf[8];
    *(void *)(a2 + 96) = *(void *)&buf[6];
    *(void *)(a2 + 104) = v351;
    uint64_t v352 = *(void *)&buf[10];
    *(void *)(a2 + 112) = *(void *)&buf[10];
    if (v352)
    {
      v351[2] = v350;
      *(void *)&buf[6] = &buf[8];
      *(void *)&buf[8] = 0;
      *(void *)&buf[10] = 0;
      int v351 = 0;
    }
    else
    {
      *(void *)(a2 + 96) = v350;
    }
    sub_120BDC(v351);
    sub_87810(*(void **)&buf[2]);
    if (a2 + 120 != a7) {
      sub_C6650((uint64_t **)(a2 + 120), *(void **)a7, (void *)(a7 + 8));
    }
    *(_DWORD *)(a2 + 144) = a8;
    *(unsigned char *)(a2 + 384) = a12;
    v353 = (uint64_t **)(a2 + 152);
    if ((void **)(a2 + 152) == a9)
    {
LABEL_570:
      sub_126184((std::string *)(a2 + 416), a15);
      uint64_t v379 = a2;
      v380 = (void **)(a2 + 392);
      if ((uint64_t *)(a2 + 392) != a13)
      {
        uint64_t v382 = *a13;
        uint64_t v381 = a13[1];
        unint64_t v383 = 0x6FB586FB586FB587 * ((v381 - *a13) >> 3);
        uint64_t v384 = *(void *)(a2 + 408);
        uint64_t v385 = *(void *)(a2 + 392);
        if (0x6FB586FB586FB587 * ((v384 - v385) >> 3) >= v383)
        {
          if (0x6FB586FB586FB587 * ((*(void *)(a2 + 400) - v385) >> 3) >= v383)
          {
            uint64_t v393 = sub_1265FC(*a13, a13[1], *(void *)(a2 + 392));
            for (uint64_t k = *(void *)(a2 + 400); k != v393; uint64_t k = sub_819AC(k - 440))
              ;
            uint64_t v379 = a2;
            *(void *)(a2 + 400) = v393;
            goto LABEL_591;
          }
          uint64_t v392 = v382 + 8 * ((*(void *)(a2 + 400) - v385) >> 3);
          sub_1265FC(*a13, v392, *(void *)(a2 + 392));
          uint64_t v379 = a2;
          uint64_t v391 = sub_127368(v392, v381, *(void *)(a2 + 400));
        }
        else
        {
          if (v385)
          {
            uint64_t v386 = *(void *)(a2 + 400);
            v387 = *(void **)(a2 + 392);
            if (v386 != v385)
            {
              do
                uint64_t v386 = sub_819AC(v386 - 440);
              while (v386 != v385);
              v387 = *v380;
            }
            *(void *)(a2 + 400) = v385;
            operator delete(v387);
            uint64_t v384 = 0;
            os_log_t *v380 = 0;
            *(void *)(a2 + 400) = 0;
            *(void *)(a2 + 408) = 0;
          }
          if (v383 > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v388 = 0x6FB586FB586FB587 * (v384 >> 3);
          uint64_t v389 = 2 * v388;
          if (2 * v388 <= v383) {
            uint64_t v389 = v383;
          }
          if (v388 >= 0x4A7904A7904A79) {
            unint64_t v390 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v390 = v389;
          }
          sub_1273FC(v380, v390);
          uint64_t v379 = a2;
          uint64_t v391 = sub_127368(v382, v381, *(void *)(a2 + 400));
        }
        *(void *)(v379 + 400) = v391;
      }
LABEL_591:
      if (v379 + 216 != a11)
      {
        sub_7DD78(v379 + 216, *(const void ***)a11, *(const void ***)(a11 + 8), (uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 3);
        sub_7DD78(a2 + 240, *(const void ***)(a11 + 24), *(const void ***)(a11 + 32), (uint64_t)(*(void *)(a11 + 32) - *(void *)(a11 + 24)) >> 3);
        *(_DWORD *)(a2 + 296) = *(_DWORD *)(a11 + 80);
        sub_7DE98((void *)(a2 + 264), *(char **)(a11 + 64));
        *(_DWORD *)(a2 + 336) = *(_DWORD *)(a11 + 120);
        sub_7DE98((void *)(a2 + 304), *(char **)(a11 + 104));
        *(_DWORD *)(a2 + 376) = *(_DWORD *)(a11 + 160);
        sub_7DE98((void *)(a2 + 344), *(char **)(a11 + 144));
      }
      uint64_t v395 = sub_32A48(8);
      if (*(unsigned char *)(v395 + 8))
      {
        v396 = *(NSObject **)v395;
        if (*(void *)v395)
        {
          if (os_log_type_enabled(*(os_log_t *)v395, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(&v566, *(_DWORD *)(a2 + 176));
            int v397 = SHIBYTE(v566.__r_.__value_.__r.__words[2]);
            std::string::size_type v398 = v566.__r_.__value_.__r.__words[0];
            sub_2417C(&__p, *(_DWORD *)n);
            int v399 = &v566;
            if (v397 < 0) {
              int v399 = (std::string *)v398;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            buf[0] = 136315906;
            *(void *)&buf[1] = "RoutingManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3053;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v399;
            LOWORD(buf[7]) = 2080;
            *(void *)((char *)&buf[7] + 2) = p_p;
            _os_log_impl(&def_1E50E8, v396, OS_LOG_TYPE_DEBUG, "%25s:%-5d mRouteInitiationInfo. Old: %s; new: %s.",
              (uint8_t *)buf,
              0x26u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v566.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      if (*(_DWORD *)n != 1635087471)
      {
        *(_DWORD *)(a2 + 176) = *(_DWORD *)n;
        std::string::operator=((std::string *)(a2 + 184), (const std::string *)(n + 8));
        *(void *)(a2 + 208) = *(void *)(n + 32);
        uint64_t v401 = sub_32A48(8);
        if (*(unsigned char *)(v401 + 8))
        {
          uint64_t v402 = *(NSObject **)v401;
          if (*(void *)v401)
          {
            if (os_log_type_enabled(*(os_log_t *)v401, OS_LOG_TYPE_DEBUG))
            {
              sub_2417C(&v566, *(_DWORD *)(a2 + 176));
              v403 = (v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v566
                   : (std::string *)v566.__r_.__value_.__r.__words[0];
              buf[0] = 136315650;
              *(void *)&buf[1] = "RoutingManager.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 3058;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v403;
              _os_log_impl(&def_1E50E8, v402, OS_LOG_TYPE_DEBUG, "%25s:%-5d Set RouteInitiationInfo to %s.", (uint8_t *)buf, 0x1Cu);
              if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v566.__r_.__value_.__l.__data_);
              }
            }
          }
        }
      }
      uint64_t v404 = sub_32A48(8);
      uint64_t v405 = sub_32A48(34);
      char v406 = 0;
      uint64_t v407 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v408 = *(void *)(v404 + 8);
      while (1)
      {
        uint64_t v409 = (int)buf[v407];
        char v410 = v406;
        if (((v408 & v409) != 0) != ((*(void *)(v405 + 8) & v409) != 0)) {
          break;
        }
        char v406 = 1;
        uint64_t v407 = 1;
        if (v410)
        {
          if ((v408 & 1) == 0) {
            goto LABEL_647;
          }
LABEL_622:
          uint64_t v411 = *(NSObject **)v404;
          if (v411 && os_log_type_enabled(v411, OS_LOG_TYPE_DEBUG))
          {
            memset(&__p, 0, sizeof(__p));
            std::string::append(&__p, "[ ", 2uLL);
            for (uint64_t m = v563; m != &v562; uint64_t m = (uint64_t (***)())m[1])
            {
              sub_F8684(&v566, (unsigned int *)m + 4);
              if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v413 = &v566;
              }
              else {
                int v413 = (std::string *)v566.__r_.__value_.__r.__words[0];
              }
              if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v566.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v566.__r_.__value_.__l.__size_;
              }
              std::string::append(&__p, (const std::string::value_type *)v413, size);
              if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v566.__r_.__value_.__l.__data_);
              }
              sub_9264(&v566, (uint64_t)(m + 17), 1);
              if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v415 = &v566;
              }
              else {
                char v415 = (std::string *)v566.__r_.__value_.__r.__words[0];
              }
              if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v416 = HIBYTE(v566.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v416 = v566.__r_.__value_.__l.__size_;
              }
              std::string::append(&__p, (const std::string::value_type *)v415, v416);
              if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v566.__r_.__value_.__l.__data_);
              }
            }
            std::string::append(&__p, " ]", 2uLL);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v417 = &__p;
            }
            else {
              v417 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            buf[0] = 136315650;
            *(void *)&buf[1] = "RoutingManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3061;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v417;
            _os_log_impl(&def_1E50E8, v411, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating successful route update result with DeviceInfoState: %s", (uint8_t *)buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
LABEL_647:
          char v418 = *(unsigned char *)(a2 + 384);
          *(_OWORD *)buf = *v519;
          sub_126228((uint64_t *)&buf[4], (uint64_t)&v562);
          LOBYTE(buf[10]) = v418;
          v566.__r_.__value_.__r.__words[0] = (std::string::size_type)off_6228D0;
          LODWORD(v566.__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(v566.__r_.__value_.__r.__words[1]) = a14;
          operator new();
        }
      }
      if ((v408 & v409) == 0) {
        uint64_t v404 = v405;
      }
      if (*(void *)(v404 + 8)) {
        goto LABEL_622;
      }
      goto LABEL_647;
    }
    v354 = *a9;
    v523 = a9 + 1;
    if (*(void *)(a2 + 168))
    {
      uint64_t v356 = *(void *)(a2 + 160);
      uint64_t v355 = (uint64_t **)(a2 + 160);
      v357 = *(void **)(a2 + 152);
      *(void *)(a2 + 152) = a2 + 160;
      *(void *)(v356 + 16) = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      if (v357[1]) {
        v358 = (void *)v357[1];
      }
      else {
        v358 = v357;
      }
      if (!v358)
      {
        v369 = 0;
LABEL_552:
        sub_10E118(v369);
        goto LABEL_554;
      }
      v359 = sub_6CA9C((uint64_t)v358);
      if (v354 == v523)
      {
        v361 = v358;
      }
      else
      {
        v360 = v354;
        do
        {
          v361 = v359;
          uint64_t v363 = v360[4];
          uint64_t v362 = v360[5];
          if (v362) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v362 + 16), 1uLL, memory_order_relaxed);
          }
          v364 = (std::__shared_weak_count *)v358[5];
          v358[4] = v363;
          v358[5] = v362;
          if (v364) {
            std::__shared_weak_count::__release_weak(v364);
          }
          v365 = *v355;
          v366 = (uint64_t **)(a2 + 160);
          v367 = (uint64_t **)(a2 + 160);
          if (*v355)
          {
            do
            {
              while (1)
              {
                v366 = (uint64_t **)v365;
                if (!sub_73610(v358 + 4, (unint64_t *)v365 + 4)) {
                  break;
                }
                v365 = *v366;
                v367 = v366;
                if (!*v366) {
                  goto LABEL_535;
                }
              }
              v365 = v366[1];
            }
            while (v365);
            v367 = v366 + 1;
          }
LABEL_535:
          sub_46CA8(v353, (uint64_t)v366, v367, v358);
          if (v361) {
            v359 = sub_6CA9C((uint64_t)v361);
          }
          else {
            v359 = 0;
          }
          v368 = (void *)v360[1];
          if (v368)
          {
            do
            {
              v354 = v368;
              v368 = (void *)*v368;
            }
            while (v368);
          }
          else
          {
            do
            {
              v354 = (void *)v360[2];
              BOOL v33 = *v354 == (void)v360;
              v360 = v354;
            }
            while (!v33);
          }
          if (!v361) {
            break;
          }
          v358 = v361;
          v360 = v354;
        }
        while (v354 != v523);
      }
      sub_10E118(v361);
      if (v359)
      {
        v370 = (void *)v359[2];
        for (uint64_t n = a10; v370; v370 = (void *)v370[2])
          v359 = v370;
        v369 = v359;
        goto LABEL_552;
      }
      uint64_t n = a10;
    }
LABEL_554:
    if (v354 != v523)
    {
      v371 = (uint64_t **)(a2 + 160);
      do
      {
        v372 = operator new(0x30uLL);
        v372[4] = v354[4];
        uint64_t v373 = v354[5];
        v372[5] = v373;
        if (v373) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v373 + 16), 1uLL, memory_order_relaxed);
        }
        v374 = *v371;
        v375 = (uint64_t **)(a2 + 160);
        v376 = (uint64_t **)(a2 + 160);
        if (*v371)
        {
          do
          {
            while (1)
            {
              v375 = (uint64_t **)v374;
              if (!sub_73610(v372 + 4, (unint64_t *)v374 + 4)) {
                break;
              }
              v374 = *v375;
              v376 = v375;
              if (!*v375) {
                goto LABEL_564;
              }
            }
            v374 = v375[1];
          }
          while (v374);
          v376 = v375 + 1;
        }
LABEL_564:
        sub_46CA8(v353, (uint64_t)v375, v376, v372);
        v377 = (void *)v354[1];
        if (v377)
        {
          do
          {
            v378 = v377;
            v377 = (void *)*v377;
          }
          while (v377);
        }
        else
        {
          do
          {
            v378 = (void *)v354[2];
            BOOL v33 = *v378 == (void)v354;
            v354 = v378;
          }
          while (!v33);
        }
        v354 = v378;
      }
      while (v378 != v523);
    }
    goto LABEL_570;
  }
  uint64_t v274 = (os_log_t *)sub_32A48(8);
  v275 = *v274;
  if (*v274 && os_log_type_enabled(*v274, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v277 = *a3;
    uint64_t v276 = a3[1];
    memset(v551, 0, 24);
    std::string::append((std::string *)v551, "{ ", 2uLL);
    if (v277 != v276)
    {
      while (1)
      {
        sub_1E2DE8(&v566, v277);
        if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v278 = &v566;
        }
        else {
          uint64_t v278 = (std::string *)v566.__r_.__value_.__r.__words[0];
        }
        if ((v566.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v279 = HIBYTE(v566.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v279 = v566.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)v551, (const std::string::value_type *)v278, v279);
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
        v277 += 216;
        if (v277 == v276) {
          break;
        }
        std::string::append((std::string *)v551, ", ", 2uLL);
      }
    }
    std::string::append((std::string *)v551, " }", 2uLL);
    if (v551[23] >= 0) {
      unint64_t v280 = v551;
    }
    else {
      unint64_t v280 = *(unsigned char **)v551;
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 3024;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v280;
    LOWORD(buf[7]) = 1024;
    *(_DWORD *)((char *)&buf[7] + 2) = v526;
    _os_log_impl(&def_1E50E8, v275, OS_LOG_TYPE_DEFAULT, "%25s:%-5d The routing handlers failed to handle the route \"%s\" (result %d)", (uint8_t *)buf, 0x22u);
    if ((v551[23] & 0x80000000) != 0) {
      operator delete(*(void **)v551);
    }
  }
  *(void *)buf = &v527;
  sub_120434((void ***)buf);
  sub_126340((uint64_t)&v529);
  sub_52588((uint64_t)v548);
  if (*(_DWORD *)(a1 + 8))
  {
    unint64_t v419 = (os_log_t *)sub_32A48(8);
    v420 = *v419;
    if (*v419)
    {
      if (os_log_type_enabled(*v419, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v566.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingManager.cpp";
        WORD2(v566.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v566.__r_.__value_.__r.__words[1] + 6) = 3077;
        _os_log_impl(&def_1E50E8, v420, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing is not supported: attempt to activate the routes failed.", (uint8_t *)&v566, 0x12u);
      }
    }
  }
  sub_463E0(v535[0]);
}

void sub_1251A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x267]) < 0) {
      operator delete((void *)STACK[0x250]);
    }
    sub_1265C0((uint64_t)&STACK[0x2A0]);
    sub_52588(v72 - 160);
    sub_13B760((void *)a63);
    *(void *)(v72 - 160) = &a65;
    sub_120434((void ***)(v72 - 160));
    sub_463E0((void *)a69);
    sub_463E0((void *)a71);
    if (v71) {
      operator delete(v71);
    }
    sub_126340((uint64_t)&a47);
    sub_52588((uint64_t)&STACK[0x228]);
    if (a2 == 3)
    {
      uint64_t v75 = __cxa_begin_catch(a1);
      uint64_t v76 = (os_log_t *)sub_32A48(8);
      char v77 = *v76;
      if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&STACK[0x228], v75[2]);
        if (SLOBYTE(STACK[0x23F]) >= 0) {
          uint64_t v78 = &STACK[0x228];
        }
        else {
          uint64_t v78 = (unint64_t *)STACK[0x228];
        }
        *(_DWORD *)(v72 - 160) = 136315650;
        STACK[0x344] = (unint64_t)"RoutingManager.cpp";
        *(_WORD *)(v72 - 148) = 1024;
        LODWORD(STACK[0x34E]) = 3068;
        *(_WORD *)(v72 - 142) = 2080;
        *(void *)(v72 - 140) = v78;
        _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown during mRoutingHandlerDispatcher->ProcessRoute: '%s'.", (uint8_t *)(v72 - 160), 0x1Cu);
        if (SLOBYTE(STACK[0x23F]) < 0) {
          operator delete((void *)STACK[0x228]);
        }
      }
    }
    else
    {
      uint64_t v79 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v80 = v79;
        uint64_t v81 = (os_log_t *)sub_32A48(8);
        uint64_t v82 = *v81;
        if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
        {
          uint64_t v83 = (*(uint64_t (**)(void *))(*(void *)v80 + 16))(v80);
          *(_DWORD *)(v72 - 160) = 136315650;
          uint64_t v84 = v72 - 160;
          *(void *)(v84 + 4) = "RoutingManager.cpp";
          *(_WORD *)(v72 - 148) = 1024;
          *(_DWORD *)(v84 + 14) = 3073;
          *(_WORD *)(v72 - 142) = 2080;
          *(void *)(v84 + 20) = v83;
          _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception thrown during mRoutingHandlerDispatcher->ProcessRoute: %s.", (uint8_t *)(v72 - 160), 0x1Cu);
        }
      }
      else
      {
        uint64_t v85 = (os_log_t *)sub_32A48(8);
        uint64_t v86 = *v85;
        if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)(v72 - 160) = 136315394;
          uint64_t v87 = v72 - 160;
          *(void *)(v87 + 4) = "RoutingManager.cpp";
          *(_WORD *)(v72 - 148) = 1024;
          *(_DWORD *)(v87 + 14) = 3075;
          _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown during mRoutingHandlerDispatcher->ProcessRoute.", (uint8_t *)(v72 - 160), 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x124148);
  }
  _Unwind_Resume(a1);
}

void sub_125C10()
{
}

void sub_125C48(void ***a1)
{
  uint64_t v1 = *a1;
  BOOL v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 6;
        sub_125CD0(v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_125CD0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        long long v5 = (uint64_t *)v3[1];
        sub_125D44(v3 + 2);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void *sub_125D44(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t *sub_125D8C(uint64_t **a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  BOOL result = sub_128084((uint64_t)a1, &v10, a2, a3);
  if (!*result)
  {
    long long v7 = (uint64_t **)result;
    long long v8 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v8 + 28) = *a4;
    uint64_t v9 = v10;
    return sub_46CA8(a1, v9, v7, v8);
  }
  return result;
}

uint64_t sub_125E20(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  long long v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_127EA0((uint64_t **)a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 8), (void *)((char *)v5 + 28));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      long long v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_125EB8(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_125ECC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = (unint64_t)a1;
  a1[1] = (unint64_t)a1;
  a1[2] = 0;
  uint64_t v4 = (void *)(a2 + 16);
  long long v5 = *(void **)(a2 + 24);
  if (v5 == (void *)(a2 + 16))
  {
    unint64_t v19 = 0;
  }
  else
  {
    do
    {
      long long v7 = (std::__shared_weak_count *)v5[3];
      if (v7)
      {
        BOOL v8 = std::__shared_weak_count::lock(v7);
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = v5[2];
          if (v10 && sub_4642C(v5[2], a3))
          {
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            std::string::size_type v11 = operator new(0x20uLL);
            v11[2] = v10;
            v11[3] = v9;
            unint64_t v12 = *v3;
            *std::string::size_type v11 = *v3;
            v11[1] = v3;
            *(void *)(v12 + 8) = v11;
            unint64_t *v3 = (unint64_t)v11;
            ++v3[2];
          }
          sub_4636C(v9);
        }
      }
      uint64_t v13 = (std::__shared_weak_count *)v5[5];
      if (v13)
      {
        std::string::size_type v14 = std::__shared_weak_count::lock(v13);
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = v5[4];
          if (v16 && sub_4642C(v5[4], a3))
          {
            atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            BOOL v17 = operator new(0x20uLL);
            v17[2] = v16;
            v17[3] = v15;
            unint64_t v18 = *v3;
            void *v17 = *v3;
            v17[1] = v3;
            *(void *)(v18 + 8) = v17;
            unint64_t *v3 = (unint64_t)v17;
            ++v3[2];
          }
          sub_4636C(v15);
        }
      }
      long long v5 = (void *)v5[1];
    }
    while (v5 != v4);
    a1 = (unint64_t *)v3[1];
    unint64_t v19 = v3[2];
  }
  sub_1275E8(a1, v3, v19);
  v23[0] = (uint64_t)v23;
  v23[1] = (uint64_t)v23;
  v23[2] = 0;
  BOOL v20 = (unint64_t *)v3[1];
  if (v20 != v3)
  {
    do
    {
      long long v21 = (unint64_t *)v20[1];
      if (v21 == v3) {
        break;
      }
      while (sub_112910((uint64_t *)v20 + 2, v21 + 2))
      {
        long long v21 = (unint64_t *)v21[1];
        if (v21 == v3)
        {
          long long v21 = v3;
          break;
        }
      }
      uint64_t v22 = (unint64_t *)v20[1];
      if (v22 != v21) {
        sub_1277D8((uint64_t)v23, v23, (uint64_t)v3, v22, v21);
      }
      BOOL v20 = v21;
    }
    while (v21 != v3);
  }
  sub_8108(v23);
}

void sub_126094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v2);
  sub_4636C(v2);
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void *sub_1260C8(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0xA0uLL);
  void *v4 = 0;
  v4[1] = 0;
  long long v5 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a1;
  *((_OWORD *)v4 + 2) = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v4 + 4) = v6;
  sub_1263B0((uint64_t)(v4 + 10), (void *)(a1 + 64));
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  sub_126534(v4 + 13, *(long long **)(a1 + 88), *(long long **)(a1 + 96), (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 4);
  *((_DWORD *)v4 + 32) = *(_DWORD *)(a1 + 112);
  v4[17] = v4 + 17;
  v4[18] = v4 + 17;
  v4[19] = 0;
  sub_D39BC((uint64_t)(v4 + 17), v4 + 17, a2);
  return v4;
}

void sub_126160(_Unwind_Exception *a1)
{
  sub_463E0(v1[11]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_126184(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, a2);
    }
  }
  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst->__r_.__value_.__l.__data_);
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21E8C(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t *sub_126228(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    long long v5 = operator new(0xA0uLL);
    *long long v5 = 0;
    v5[1] = 0;
    long long v6 = *(_OWORD *)(i + 16);
    long long v7 = *(_OWORD *)(i + 32);
    long long v8 = *(_OWORD *)(i + 64);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(i + 48);
    *((_OWORD *)v5 + 4) = v8;
    *((_OWORD *)v5 + 1) = v6;
    *((_OWORD *)v5 + 2) = v7;
    sub_1263B0((uint64_t)(v5 + 10), (void *)(i + 80));
    v5[13] = 0;
    v5[14] = 0;
    v5[15] = 0;
    sub_126534(v5 + 13, *(long long **)(i + 104), *(long long **)(i + 112), (uint64_t)(*(void *)(i + 112) - *(void *)(i + 104)) >> 4);
    *((_DWORD *)v5 + 32) = *(_DWORD *)(i + 128);
    sub_3524(v5 + 17, (void *)(i + 136));
    uint64_t v9 = *a1;
    *long long v5 = *a1;
    v5[1] = a1;
    *(void *)(v9 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1262FC(_Unwind_Exception *a1)
{
  sub_1265C0(v3);
  operator delete(v2);
  sub_11A588(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_126340(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1) {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 24) + 16))(*(void *)(*(void *)(a1 + 8) + 24), a1 + 16);
  }
  sub_463E0(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1263B0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  long long v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      long long v6 = (unsigned int *)(v5 + 4);
      long long v7 = *(uint64_t **)(a1 + 8);
      long long v8 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = v3;
      if (v7)
      {
        do
        {
          long long v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          uint64_t v10 = v8;
        }
        while (v11);
      }
      unsigned int v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = v3;
        }
        if (v7) {
          std::string::size_type v14 = v8 + 1;
        }
        else {
          std::string::size_type v14 = v3;
        }
      }
      else
      {
        uint64_t v13 = v3;
        std::string::size_type v14 = v3;
        if (v7)
        {
          std::string::size_type v14 = v3;
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v7;
              unsigned int v18 = *((_DWORD *)v7 + 8);
              if (v12 >= v18) {
                break;
              }
              long long v7 = *v13;
              std::string::size_type v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }
            if (v18 >= v12) {
              break;
            }
            std::string::size_type v14 = v13 + 1;
            long long v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_15:
        uint64_t v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_46CA8((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }
      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          long long v5 = v17;
        }
        while (!v11);
      }
      long long v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_126520(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_126534(_OWORD *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      sub_60548();
    }
    BOOL result = sub_10724(a4);
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[v7];
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *result++ = v8;
    }
    v4[1] = result;
  }
  return result;
}

void sub_1265A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1265C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_463E0(*(void **)(a1 + 72));
  return a1;
}

uint64_t sub_1265FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(void *)a3 = *(void *)v5;
      if (a3 != v5)
      {
        sub_6720C((char *)(a3 + 8), *(char **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 2);
        sub_C6650((uint64_t **)(a3 + 32), *(void **)(v5 + 32), (void *)(v5 + 40));
        uint64_t v6 = *(void *)(v5 + 56);
        *(_DWORD *)(a3 + 64) = *(_DWORD *)(v5 + 64);
        *(void *)(a3 + 56) = v6;
        uint64_t v7 = v5 + 72;
        long long v8 = (_DWORD *)(a3 + 72);
        uint64_t v9 = *(void *)(v5 + 80);
        uint64_t v10 = *(_DWORD **)(a3 + 80);
        if (v9 != v5 + 72 && v10 != v8)
        {
          do
          {
            v10[4] = *(_DWORD *)(v9 + 16);
            uint64_t v9 = *(void *)(v9 + 8);
            uint64_t v10 = (_DWORD *)*((void *)v10 + 1);
          }
          while (v9 != v7 && v10 != v8);
        }
        if (v10 == v8)
        {
          if (v9 != v7)
          {
            uint64_t v15 = operator new(0x18uLL);
            uint64_t v16 = v15;
            *uint64_t v15 = 0;
            v15[1] = 0;
            *((_DWORD *)v15 + 4) = *(_DWORD *)(v9 + 16);
            uint64_t v17 = *(void *)(v9 + 8);
            if (v17 == v7)
            {
              uint64_t v18 = 1;
            }
            else
            {
              uint64_t v18 = 1;
              unint64_t v19 = v15;
              do
              {
                uint64_t v15 = operator new(0x18uLL);
                *uint64_t v15 = v19;
                v15[1] = 0;
                *((_DWORD *)v15 + 4) = *(_DWORD *)(v17 + 16);
                v19[1] = v15;
                ++v18;
                uint64_t v17 = *(void *)(v17 + 8);
                unint64_t v19 = v15;
              }
              while (v17 != v7);
            }
            uint64_t v20 = *(void *)(a3 + 72);
            *(void *)(v20 + 8) = v16;
            *uint64_t v16 = v20;
            *(void *)(a3 + 72) = v15;
            v15[1] = v8;
            *(void *)(a3 + 88) += v18;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(a3 + 72);
          uint64_t v13 = *(void *)v10;
          *(void *)(v13 + 8) = *(void *)(v12 + 8);
          **(void **)(v12 + 8) = v13;
          do
          {
            std::string::size_type v14 = (_DWORD *)*((void *)v10 + 1);
            --*(void *)(a3 + 88);
            operator delete(v10);
            uint64_t v10 = v14;
          }
          while (v14 != v8);
        }
      }
      *(unsigned char *)(a3 + 96) = *(unsigned char *)(v5 + 96);
      sub_813F8((uint64_t)v38, v5 + 104);
      uint64_t v21 = a3 + 104;
      if ((void *)(a3 + 104) != v38)
      {
        uint64_t v22 = v39;
        uint64_t v23 = *(void *)(a3 + 128);
        if (v39 == v38)
        {
          if (v23 == v21)
          {
            (*(void (**)(void *, void *))(v38[0] + 24))(v38, v40);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = 0;
            (*(void (**)(void, void *))(**(void **)(a3 + 128) + 24))(*(void *)(a3 + 128), v38);
            (*(void (**)(void))(**(void **)(a3 + 128) + 32))(*(void *)(a3 + 128));
            *(void *)(a3 + 128) = 0;
            v39 = v38;
            (*(void (**)(void *, uint64_t))(v40[0] + 24))(v40, a3 + 104);
            (*(void (**)(void *))(v40[0] + 32))(v40);
          }
          else
          {
            (*(void (**)(void *, uint64_t))(v38[0] + 24))(v38, a3 + 104);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = *(void **)(a3 + 128);
          }
          *(void *)(a3 + 128) = v21;
        }
        else if (v23 == v21)
        {
          (*(void (**)(uint64_t, void *))(*(void *)v21 + 24))(a3 + 104, v38);
          (*(void (**)(void))(**(void **)(a3 + 128) + 32))(*(void *)(a3 + 128));
          *(void *)(a3 + 128) = v39;
          v39 = v38;
        }
        else
        {
          v39 = *(void **)(a3 + 128);
          *(void *)(a3 + 128) = v22;
        }
      }
      sub_81C68(v38);
      sub_81490((uint64_t)v38, v5 + 136);
      uint64_t v24 = a3 + 136;
      if ((void *)(a3 + 136) != v38)
      {
        uint64_t v25 = v39;
        uint64_t v26 = *(void *)(a3 + 160);
        if (v39 == v38)
        {
          if (v26 == v24)
          {
            (*(void (**)(void *, void *))(v38[0] + 24))(v38, v40);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = 0;
            (*(void (**)(void, void *))(**(void **)(a3 + 160) + 24))(*(void *)(a3 + 160), v38);
            (*(void (**)(void))(**(void **)(a3 + 160) + 32))(*(void *)(a3 + 160));
            *(void *)(a3 + 160) = 0;
            v39 = v38;
            (*(void (**)(void *, uint64_t))(v40[0] + 24))(v40, a3 + 136);
            (*(void (**)(void *))(v40[0] + 32))(v40);
          }
          else
          {
            (*(void (**)(void *, uint64_t))(v38[0] + 24))(v38, a3 + 136);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = *(void **)(a3 + 160);
          }
          *(void *)(a3 + 160) = v24;
        }
        else if (v26 == v24)
        {
          (*(void (**)(uint64_t, void *))(*(void *)v24 + 24))(a3 + 136, v38);
          (*(void (**)(void))(**(void **)(a3 + 160) + 32))(*(void *)(a3 + 160));
          *(void *)(a3 + 160) = v39;
          v39 = v38;
        }
        else
        {
          v39 = *(void **)(a3 + 160);
          *(void *)(a3 + 160) = v25;
        }
      }
      sub_81BE4(v38);
      sub_81528((uint64_t)v38, v5 + 168);
      uint64_t v27 = a3 + 168;
      if ((void *)(a3 + 168) != v38)
      {
        uint64_t v28 = v39;
        uint64_t v29 = *(void *)(a3 + 192);
        if (v39 == v38)
        {
          if (v29 == v27)
          {
            (*(void (**)(void *, void *))(v38[0] + 24))(v38, v40);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = 0;
            (*(void (**)(void, void *))(**(void **)(a3 + 192) + 24))(*(void *)(a3 + 192), v38);
            (*(void (**)(void))(**(void **)(a3 + 192) + 32))(*(void *)(a3 + 192));
            *(void *)(a3 + 192) = 0;
            v39 = v38;
            (*(void (**)(void *, uint64_t))(v40[0] + 24))(v40, a3 + 168);
            (*(void (**)(void *))(v40[0] + 32))(v40);
          }
          else
          {
            (*(void (**)(void *, uint64_t))(v38[0] + 24))(v38, a3 + 168);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = *(void **)(a3 + 192);
          }
          *(void *)(a3 + 192) = v27;
        }
        else if (v29 == v27)
        {
          (*(void (**)(uint64_t, void *))(*(void *)v27 + 24))(a3 + 168, v38);
          (*(void (**)(void))(**(void **)(a3 + 192) + 32))(*(void *)(a3 + 192));
          *(void *)(a3 + 192) = v39;
          v39 = v38;
        }
        else
        {
          v39 = *(void **)(a3 + 192);
          *(void *)(a3 + 192) = v28;
        }
      }
      sub_81B60(v38);
      sub_815C0((uint64_t)v38, v5 + 200);
      uint64_t v30 = a3 + 200;
      if ((void *)(a3 + 200) != v38)
      {
        std::string v31 = v39;
        uint64_t v32 = *(void *)(a3 + 224);
        if (v39 == v38)
        {
          if (v32 == v30)
          {
            (*(void (**)(void *, void *))(v38[0] + 24))(v38, v40);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = 0;
            (*(void (**)(void, void *))(**(void **)(a3 + 224) + 24))(*(void *)(a3 + 224), v38);
            (*(void (**)(void))(**(void **)(a3 + 224) + 32))(*(void *)(a3 + 224));
            *(void *)(a3 + 224) = 0;
            v39 = v38;
            (*(void (**)(void *, uint64_t))(v40[0] + 24))(v40, a3 + 200);
            (*(void (**)(void *))(v40[0] + 32))(v40);
          }
          else
          {
            (*(void (**)(void *, uint64_t))(v38[0] + 24))(v38, a3 + 200);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = *(void **)(a3 + 224);
          }
          *(void *)(a3 + 224) = v30;
        }
        else if (v32 == v30)
        {
          (*(void (**)(uint64_t, void *))(*(void *)v30 + 24))(a3 + 200, v38);
          (*(void (**)(void))(**(void **)(a3 + 224) + 32))(*(void *)(a3 + 224));
          *(void *)(a3 + 224) = v39;
          v39 = v38;
        }
        else
        {
          v39 = *(void **)(a3 + 224);
          *(void *)(a3 + 224) = v31;
        }
      }
      sub_81ADC(v38);
      sub_81658((uint64_t)v38, v5 + 232);
      uint64_t v33 = a3 + 232;
      if ((void *)(a3 + 232) != v38)
      {
        uint64_t v34 = v39;
        uint64_t v35 = *(void *)(a3 + 256);
        if (v39 == v38)
        {
          if (v35 == v33)
          {
            (*(void (**)(void *, void *))(v38[0] + 24))(v38, v40);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = 0;
            (*(void (**)(void, void *))(**(void **)(a3 + 256) + 24))(*(void *)(a3 + 256), v38);
            (*(void (**)(void))(**(void **)(a3 + 256) + 32))(*(void *)(a3 + 256));
            *(void *)(a3 + 256) = 0;
            v39 = v38;
            (*(void (**)(void *, uint64_t))(v40[0] + 24))(v40, a3 + 232);
            (*(void (**)(void *))(v40[0] + 32))(v40);
          }
          else
          {
            (*(void (**)(void *, uint64_t))(v38[0] + 24))(v38, a3 + 232);
            (*(void (**)(void *))(*v39 + 32))(v39);
            v39 = *(void **)(a3 + 256);
          }
          *(void *)(a3 + 256) = v33;
        }
        else if (v35 == v33)
        {
          (*(void (**)(uint64_t, void *))(*(void *)v33 + 24))(a3 + 232, v38);
          (*(void (**)(void))(**(void **)(a3 + 256) + 32))(*(void *)(a3 + 256));
          *(void *)(a3 + 256) = v39;
          v39 = v38;
        }
        else
        {
          v39 = *(void **)(a3 + 256);
          *(void *)(a3 + 256) = v34;
        }
      }
      sub_81A58(v38);
      if (a3 != v5)
      {
        sub_7DD78(a3 + 264, *(const void ***)(v5 + 264), *(const void ***)(v5 + 272), (uint64_t)(*(void *)(v5 + 272) - *(void *)(v5 + 264)) >> 3);
        sub_7DD78(a3 + 288, *(const void ***)(v5 + 288), *(const void ***)(v5 + 296), (uint64_t)(*(void *)(v5 + 296) - *(void *)(v5 + 288)) >> 3);
        *(_DWORD *)(a3 + 344) = *(_DWORD *)(v5 + 344);
        sub_7DE98((void *)(a3 + 312), *(char **)(v5 + 328));
        *(_DWORD *)(a3 + 384) = *(_DWORD *)(v5 + 384);
        sub_7DE98((void *)(a3 + 352), *(char **)(v5 + 368));
        *(_DWORD *)(a3 + 424) = *(_DWORD *)(v5 + 424);
        sub_7DE98((void *)(a3 + 392), *(char **)(v5 + 408));
      }
      int v36 = *(_DWORD *)(v5 + 432);
      *(unsigned char *)(a3 + 436) = *(unsigned char *)(v5 + 436);
      *(_DWORD *)(a3 + 432) = v36;
      v5 += 440;
      a3 += 440;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_127300(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_127368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_127450(a3 + v6, a1 + v6);
      v6 += 440;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

char *sub_1273FC(void *a1, unint64_t a2)
{
  if (a2 >= 0x94F2094F2094F3) {
    sub_60548();
  }
  BOOL result = (char *)sub_820A0(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[440 * v4];
  return result;
}

uint64_t sub_127450(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_46B38((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  sub_46A4C((uint64_t *)(a1 + 32), a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  sub_820EC((void *)(a1 + 72), a2 + 72);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  sub_813F8(a1 + 104, a2 + 104);
  sub_81490(a1 + 136, a2 + 136);
  sub_81528(a1 + 168, a2 + 168);
  sub_815C0(a1 + 200, a2 + 200);
  sub_81658(a1 + 232, a2 + 232);
  sub_7ECB4((void *)(a1 + 264), (const void ***)(a2 + 264));
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  return a1;
}

void sub_12755C(_Unwind_Exception *a1)
{
  sub_81A58(v8);
  sub_81ADC(v7);
  sub_81B60(v6);
  sub_81BE4(v5);
  sub_81C68(v4);
  sub_45F50(v3);
  sub_463E0(*(void **)(v1 + 40));
  uint64_t v10 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void sub_1275D0()
{
}

void sub_1275D8()
{
}

void sub_1275E0()
{
}

unint64_t *sub_1275E8(unint64_t *a1, unint64_t *a2, unint64_t a3)
{
  uint64_t v3 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      uint64_t v5 = (uint64_t *)*a2;
      if (sub_E0404((unint64_t *)(*a2 + 16), a1 + 2))
      {
        uint64_t v6 = *v5;
        *(void *)(v6 + 8) = v5[1];
        *(void *)v5[1] = v6;
        unint64_t v7 = *v3;
        *(void *)(v7 + 8) = v5;
        *uint64_t v5 = v7;
        unint64_t *v3 = (unint64_t)v5;
        v5[1] = (uint64_t)v3;
        return (unint64_t *)v5;
      }
    }
    else
    {
      unint64_t v9 = a3 >> 1;
      unint64_t v10 = (a3 >> 1) + 1;
      BOOL v11 = a1;
      do
      {
        BOOL v11 = (unint64_t *)v11[1];
        --v10;
      }
      while (v10 > 1);
      uint64_t v12 = (unint64_t *)sub_1275E8(a1, v11, a3 >> 1);
      uint64_t v3 = (unint64_t *)sub_1275E8(v11, a2, a3 - v9);
      if (sub_E0404(v3 + 2, v12 + 2))
      {
        for (uint64_t i = (unint64_t *)v3[1]; i != a2; uint64_t i = (unint64_t *)i[1])
        {
          if (!sub_E0404(i + 2, v12 + 2)) {
            goto LABEL_14;
          }
        }
        uint64_t i = a2;
LABEL_14:
        unint64_t v15 = *i;
        unint64_t v16 = *v3;
        *(void *)(v16 + 8) = *(void *)(*i + 8);
        **(void **)(v15 + 8) = v16;
        unint64_t v17 = *v12;
        std::string::size_type v14 = (unint64_t *)v12[1];
        *(void *)(v17 + 8) = v3;
        unint64_t *v3 = v17;
        unint64_t *v12 = v15;
        *(void *)(v15 + 8) = v12;
      }
      else
      {
        std::string::size_type v14 = (unint64_t *)v12[1];
        uint64_t i = v3;
        uint64_t v3 = v12;
      }
      if (v14 != i && i != a2)
      {
        uint64_t v18 = i;
        do
        {
          if (sub_E0404(i + 2, v14 + 2))
          {
            for (std::string::size_type j = (unint64_t *)i[1]; j != a2; std::string::size_type j = (unint64_t *)j[1])
            {
              if (!sub_E0404(j + 2, v14 + 2)) {
                goto LABEL_25;
              }
            }
            std::string::size_type j = a2;
LABEL_25:
            unint64_t v20 = *j;
            unint64_t v21 = *i;
            *(void *)(v21 + 8) = *(void *)(*j + 8);
            **(void **)(v20 + 8) = v21;
            if (v18 == i) {
              uint64_t v18 = j;
            }
            unint64_t v23 = *v14;
            uint64_t v22 = (unint64_t *)v14[1];
            *(void *)(v23 + 8) = i;
            *uint64_t i = v23;
            *std::string::size_type v14 = v20;
            *(void *)(v20 + 8) = v14;
            std::string::size_type v14 = v22;
            uint64_t i = j;
          }
          else
          {
            std::string::size_type v14 = (unint64_t *)v14[1];
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return v3;
}

uint64_t sub_1277D8(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    uint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      if (v5 == a4)
      {
        uint64_t v8 = 1;
      }
      else
      {
        uint64_t v6 = -1;
        unint64_t v7 = a4;
        do
        {
          unint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
        uint64_t v8 = v6 + 2;
      }
      *(void *)(a3 + 16) -= v8;
      *(void *)(result + 16) += v8;
    }
    uint64_t v9 = *a4;
    *(void *)(v9 + 8) = v5[1];
    *(void *)v5[1] = v9;
    uint64_t v10 = *a2;
    *(void *)(v10 + 8) = a4;
    *a4 = v10;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

void sub_12785C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2 + 57;
  uint64_t v4 = sub_32A48(8);
  uint64_t v5 = sub_32A48(34);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_9;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if (*(void *)(v4 + 8))
  {
LABEL_9:
    BOOL v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      sub_E7F10(&__p, *(unsigned int **)(a1 + 8), (unsigned int *)(a1 + 16));
      uint64_t v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "RouteCache.cpp";
      __int16 v42 = 1024;
      int v43 = 520;
      __int16 v44 = 2080;
      uint64_t v45 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Clearing %s from Route Cache", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_16:
  uint64_t v13 = *(void **)(a1 + 8);
  if (v13 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v14 = *(void *)((char *)v13 + 28);
      uint64_t v39 = v14;
      for (uint64_t i = (uint64_t *)v2[58]; i != v3; uint64_t i = (uint64_t *)i[1])
      {
        if (i[2] == v14)
        {
          if (i != v3)
          {
            uint64_t v16 = *i;
            *(void *)(v16 + 8) = i[1];
            *(void *)i[1] = v16;
            --v2[59];
            sub_E7E64((uint64_t)(i + 2));
            unint64_t v17 = i;
LABEL_23:
            operator delete(v17);
            goto LABEL_37;
          }
          break;
        }
      }
      uint64_t v18 = sub_32A48(8);
      uint64_t v19 = sub_32A48(34);
      char v20 = 0;
      uint64_t v21 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v22 = *(void *)(v18 + 8);
      while (1)
      {
        uint64_t v23 = *(int *)&buf[4 * v21];
        char v24 = v20;
        if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
          break;
        }
        char v20 = 1;
        uint64_t v21 = 1;
        if (v24)
        {
          if ((v22 & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_32;
        }
      }
      if ((v22 & v23) == 0) {
        uint64_t v18 = v19;
      }
      if ((*(void *)(v18 + 8) & 1) == 0) {
        goto LABEL_37;
      }
LABEL_32:
      uint64_t v25 = *(NSObject **)v18;
      if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        sub_4D60(&__p, (unsigned int *)&v39);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "RouteCache.cpp";
        __int16 v42 = 1024;
        int v43 = 524;
        __int16 v44 = 2080;
        uint64_t v45 = p_p;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to find device type %s within route cache", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          unint64_t v17 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
      }
LABEL_37:
      uint64_t v27 = (void *)v13[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v13[2];
          BOOL v29 = *v28 == (void)v13;
          uint64_t v13 = v28;
        }
        while (!v29);
      }
      uint64_t v13 = v28;
    }
    while (v28 != (void *)(a1 + 16));
  }
  uint64_t v30 = sub_32A48(8);
  uint64_t v31 = sub_32A48(34);
  char v32 = 0;
  uint64_t v33 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v34 = *(void *)(v30 + 8);
  while (1)
  {
    uint64_t v35 = *(int *)&buf[4 * v33];
    char v36 = v32;
    if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
      break;
    }
    char v32 = 1;
    uint64_t v33 = 1;
    if (v36)
    {
      if ((v34 & 1) == 0) {
        return;
      }
      goto LABEL_53;
    }
  }
  if ((v34 & v35) == 0) {
    uint64_t v30 = v31;
  }
  if (*(void *)(v30 + 8))
  {
LABEL_53:
    uint64_t v37 = *(NSObject **)v30;
    if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      sub_E8054(&__p, (uint64_t)(v2 + 57));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &__p;
      }
      else {
        uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "RouteCache.cpp";
      __int16 v42 = 1024;
      int v43 = 530;
      __int16 v44 = 2080;
      uint64_t v45 = v38;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updated Route Cache: %s", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_127CDC(void **a1)
{
  sub_463E0(a1[2]);

  operator delete(a1);
}

void sub_127D18(uint64_t a1)
{
}

uint64_t sub_127D20(uint64_t a1, void *a2)
{
  *a2 = off_622B18;
  uint64_t result = sub_125E20((uint64_t)(a2 + 1), (void *)(a1 + 8));
  a2[4] = *(void *)(a1 + 32);
  return result;
}

void *sub_127D74(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = operator new(0x28uLL);
  void *v3 = off_622B18;
  sub_125E20((uint64_t)(v3 + 1), v2);
  v3[4] = *(void *)(a1 + 32);
  return v3;
}

void sub_127DDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_127DF0(uint64_t a1)
{
  *(void *)a1 = off_622B18;
  sub_463E0(*(void **)(a1 + 16));

  operator delete();
}

uint64_t sub_127E58(uint64_t a1)
{
  *(void *)a1 = off_622B18;
  sub_463E0(*(void **)(a1 + 16));
  return a1;
}

uint64_t *sub_127EA0(uint64_t **a1, uint64_t *a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v7 = sub_127F20(a1, a2, &v12, &v11, a3, a4);
  uint64_t v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (uint64_t **)v7;
    uint64_t v8 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v8 + 28) = *a5;
    sub_46CA8(a1, (uint64_t)v12, v9, v8);
  }
  return v8;
}

uint64_t *sub_127F20(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int a5, unsigned int a6)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_5;
  }
  unsigned int v6 = *((_DWORD *)a2 + 7);
  unsigned int v7 = *((_DWORD *)a2 + 8);
  BOOL v8 = v7 > a6;
  if (v6 != a5) {
    BOOL v8 = v6 > a5;
  }
  if (v8)
  {
LABEL_5:
    uint64_t v9 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      BOOL v11 = a2;
LABEL_23:
      if (v9)
      {
        *a3 = v11;
        return v11 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v9)
    {
      char v10 = (uint64_t *)*a2;
      do
      {
        BOOL v11 = v10;
        char v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      unint64_t v17 = a2;
      do
      {
        BOOL v11 = (uint64_t *)v17[2];
        BOOL v13 = *v11 == (void)v17;
        unint64_t v17 = v11;
      }
      while (v13);
    }
    unsigned int v18 = *((_DWORD *)v11 + 7);
    BOOL v13 = v18 == a5;
    BOOL v19 = v18 < a5;
    if (v13) {
      BOOL v19 = *((_DWORD *)v11 + 8) < a6;
    }
    if (v19) {
      goto LABEL_23;
    }
    return sub_128084((uint64_t)a1, a3, a5, a6);
  }
  BOOL v12 = v7 < a6;
  BOOL v13 = v6 == a5;
  BOOL v14 = v6 < a5;
  if (v13) {
    BOOL v14 = v12;
  }
  if (v14)
  {
    uint64_t v15 = a2[1];
    if (v15)
    {
      uint64_t v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        uint64_t v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      char v20 = a2;
      do
      {
        a4 = (uint64_t **)v20[2];
        BOOL v13 = *a4 == v20;
        char v20 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unsigned int v21 = *((_DWORD *)a4 + 7);
    BOOL v13 = v21 == a5;
    BOOL v22 = v21 > a5;
    if (v13) {
      BOOL v22 = *((_DWORD *)a4 + 8) > a6;
    }
    if (v22)
    {
LABEL_34:
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_128084((uint64_t)a1, a3, a5, a6);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_128084(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v6 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        unsigned int v9 = *((_DWORD *)v7 + 8);
        BOOL v10 = v9 > a4;
        if (v8 != a3) {
          BOOL v10 = v8 > a3;
        }
        if (!v10) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }
      BOOL v11 = v9 < a4;
      BOOL v12 = v8 == a3;
      BOOL v13 = v8 < a3;
      if (v12) {
        BOOL v13 = v11;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v7 + 1;
      uint64_t v5 = (uint64_t *)v7[1];
    }
    while (v5);
  }
  else
  {
    unsigned int v7 = result;
  }
LABEL_13:
  *a2 = v7;
  return result;
}

std::string *sub_1280FC(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_21B7C(__p, (CFStringRef)a2[4]);
      if ((v13 & 0x80u) == 0) {
        unsigned int v6 = __p;
      }
      else {
        unsigned int v6 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v7 = v13;
      }
      else {
        std::string::size_type v7 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      unsigned int v8 = (void *)a2[1];
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          unsigned int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (void *)a2[2];
          BOOL v10 = *v9 == (void)a2;
          a2 = v9;
        }
        while (!v10);
      }
      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_128204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_128240(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_549A4(&v9, v3 + 4, "", 164);
      CFStringRef v5 = *(const __CFString **)(v9 + 248);
      CFStringRef v11 = v5;
      if (*(unsigned char *)(v9 + 256)) {
        BOOL v6 = v5 == 0;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        CFRetain(v5);
      }
      sub_128528((uint64_t **)a1, &v11, (uint64_t)&v11);
      sub_72924((uint64_t)&v11);
      if (v10) {
        sub_4636C(v10);
      }
      std::string::size_type v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          std::string::size_type v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v3[2];
          BOOL v6 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v6);
      }
      uint64_t v3 = v8;
    }
    while (v8 != v2);
  }
}

void sub_128334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  sub_87810(*v10);
  _Unwind_Resume(a1);
}

uint64_t sub_12836C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1283A0(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  CFStringRef v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 8), v6 > a5))
  {
    std::string::size_type v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      unsigned int v8 = (uint64_t *)*a2;
      do
      {
        uint64_t v9 = v8;
        unsigned int v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      BOOL v12 = a2;
      do
      {
        uint64_t v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        BOOL v12 = v9;
      }
      while (v13);
    }
    if (*((_DWORD *)v9 + 8) < a5) {
      goto LABEL_17;
    }
    uint64_t v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v15 = (uint64_t *)v14;
          unsigned int v16 = *(_DWORD *)(v14 + 32);
          if (v16 <= a5) {
            break;
          }
          uint64_t v14 = *v15;
          CFStringRef v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }
        if (v16 >= a5) {
          break;
        }
        CFStringRef v5 = v15 + 1;
        uint64_t v14 = v15[1];
      }
      while (v14);
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v15 = a1 + 1;
LABEL_43:
    *a3 = v15;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v10 = a2[1];
  if (v10)
  {
    CFStringRef v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      CFStringRef v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    unint64_t v17 = a2;
    do
    {
      a4 = (uint64_t *)v17[2];
      BOOL v13 = *a4 == (void)v17;
      unint64_t v17 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && *((_DWORD *)a4 + 8) <= a5)
  {
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v15 = (uint64_t *)v18;
          unsigned int v19 = *(_DWORD *)(v18 + 32);
          if (v19 <= a5) {
            break;
          }
          uint64_t v18 = *v15;
          CFStringRef v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }
        if (v19 >= a5) {
          break;
        }
        CFStringRef v5 = v15 + 1;
        uint64_t v18 = v15[1];
      }
      while (v18);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v10)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_128528(uint64_t **a1, CFStringRef *a2, uint64_t a3)
{
  CFStringRef v5 = sub_1285F0((uint64_t)a1, &v13, a2);
  if (!*v5)
  {
    unsigned int v6 = (uint64_t **)v5;
    std::string::size_type v7 = operator new(0x30uLL);
    v11[0] = v7;
    v11[1] = a1 + 1;
    char v12 = 0;
    unsigned int v8 = *(const void **)a3;
    v7[4] = *(void *)a3;
    int v9 = *(unsigned __int8 *)(a3 + 8);
    *((unsigned char *)v7 + 40) = v9;
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      CFRetain(v8);
    }
    char v12 = 1;
    sub_46CA8(a1, v13, v6, v7);
    v11[0] = 0;
    sub_F862C((uint64_t)v11);
  }
}

void sub_1285DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1285F0(uint64_t a1, void *a2, CFStringRef *a3)
{
  CFStringRef v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        std::string::size_type v7 = v4;
        if (CFStringCompare(*a3, (CFStringRef)v4[4], 0) != kCFCompareLessThan) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v7;
        CFStringRef v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (CFStringCompare((CFStringRef)v7[4], *a3, 0) != kCFCompareLessThan) {
        break;
      }
      CFStringRef v5 = v7 + 1;
      uint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    std::string::size_type v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_128688(signed int a1)
{
  if (a1 > 1919186543)
  {
    BOOL result = 1;
    if (a1 > 1919971426)
    {
      if (a1 > 1920099683)
      {
        if (a1 == 1920099684) {
          return result;
        }
        if (a1 == 1920429155) {
          return 0;
        }
        int v2 = 1920168053;
        goto LABEL_29;
      }
      if (a1 == 1919971427) {
        return 0;
      }
      unsigned __int16 v4 = 29045;
    }
    else
    {
      if (a1 <= 1919904884)
      {
        if (a1 == 1919186544) {
          return result;
        }
        int v2 = 1919842148;
        goto LABEL_29;
      }
      if (a1 == 1919904885 || a1 == 1919907442) {
        return 0;
      }
      unsigned __int16 v4 = 27747;
    }
    int v2 = v4 | 0x72700000;
    goto LABEL_29;
  }
  if (a1 > 1919050850)
  {
    if (a1 > 1919181935)
    {
      if (a1 == 1919181936 || a1 == 1919184754) {
        return 0;
      }
      int v2 = 1919185776;
      goto LABEL_29;
    }
    if (a1 != 1919050851)
    {
      int v2 = 1919118966;
      goto LABEL_29;
    }
    return 0;
  }
  if (a1 <= 1667327074)
  {
    if (a1)
    {
      int v2 = 1651799408;
      goto LABEL_29;
    }
    return 0;
  }
  if (a1 == 1667327075 || a1 == 1918989155) {
    return 0;
  }
  int v2 = 1919050611;
LABEL_29:
  if (a1 == v2) {
    return 0;
  }
  CFStringRef v5 = (os_log_t *)sub_32A48(19);
  unsigned int v6 = *v5;
  if (!*v5) {
    return 0;
  }
  BOOL result = os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_2417C(__p, a1);
    if (v9 >= 0) {
      std::string::size_type v7 = __p;
    }
    else {
      std::string::size_type v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    CFStringRef v11 = "RoutingManager.cpp";
    __int16 v12 = 1024;
    int v13 = 1457;
    __int16 v14 = 2080;
    uint64_t v15 = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported VirtualAudioPlugInRouteChangeReason %s", buf, 0x1Cu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_128920(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  sub_73038(*(void **)(a1 + 88));
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_128984(void *a1)
{
  int v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];

  sub_463E0(v3);
}

BOOL sub_1289C8(uint64_t *a1, uint64_t *a2)
{
  unsigned __int16 v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    CFStringRef v5 = std::__shared_weak_count::lock(v4);
    unsigned int v6 = v5;
    if (v5)
    {
      uint64_t v7 = *a1;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v5);
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v6 = 0;
  }
  unsigned int v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    char v9 = std::__shared_weak_count::lock(v8);
    BOOL v10 = v9;
    if (v9)
    {
      uint64_t v11 = *a2;
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v9);
      if (!v6)
      {
LABEL_16:
        uint64_t v7 = 0;
        __int16 v12 = 0;
        if (!v10) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (!v6) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    BOOL v10 = 0;
    if (!v6) {
      goto LABEL_16;
    }
  }
  __int16 v12 = std::__shared_weak_count::lock(v6);
  if (!v12) {
    uint64_t v7 = 0;
  }
  if (!v10)
  {
LABEL_20:
    BOOL v14 = v7 == 0;
    if (!v12) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  int v13 = std::__shared_weak_count::lock(v10);
  if (!v13) {
    goto LABEL_20;
  }
  BOOL v14 = v7 == v11;
  sub_4636C(v13);
  if (v12) {
LABEL_21:
  }
    sub_4636C(v12);
LABEL_22:
  if (!v14)
  {
    BOOL v15 = 0;
    if (!v10) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  BOOL v15 = sub_E48A0((void *)a1[2], a1[3], (void *)a2[2], a2[3]);
  if (v10) {
LABEL_26:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_27:
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return v15;
}

uint64_t sub_128B24(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0;
  }
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == a1 + 8)
  {
LABEL_9:
    uint64_t result = sub_12AAB0(a1 + 32, (void *)(a2 + 32));
    if (!result) {
      return result;
    }
    if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80))
    {
      uint64_t result = sub_12ABFC((unsigned __int8 *)(a1 + 88), (unsigned __int8 *)(a2 + 88));
      if (result) {
        return *(unsigned __int8 *)(a1 + 124) == *(unsigned __int8 *)(a2 + 124);
      }
      return result;
    }
    return 0;
  }
  uint64_t v6 = a2 + 8;
  while (1)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t result = sub_12A6A0((unsigned __int8 *)(v5 + 16), (unsigned __int8 *)(v6 + 16));
    if (!result) {
      return result;
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_9;
    }
  }
}

uint64_t sub_128C18(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  sub_463E0(*(void **)(a1 + 64));
  sub_463E0(*(void **)(a1 + 40));
  sub_E6EA8((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t sub_128C6C(unsigned int a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v7 = sub_32A48(8);
  if (*(unsigned char *)(v7 + 8))
  {
    unsigned int v8 = *(NSObject **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        char v9 = a1 > 4 ? "????" : off_621228[a1];
        sub_21C8C(__p, v9);
        BOOL v10 = (SBYTE7(v120) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3096;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v10;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Current reconfiguration context: %s.", buf, 0x1Cu);
        if (SBYTE7(v120) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v11 = sub_32A48(8);
  if (*(unsigned char *)(v11 + 8))
  {
    __int16 v12 = *(NSObject **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        sub_382A0C((std::string *)__p, a2);
        int v13 = (SBYTE7(v120) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3098;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v13;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Updating reconfiguration context for sources: %s.", buf, 0x1Cu);
        if (SBYTE7(v120) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v14 = sub_32A48(8);
  if (*(unsigned char *)(v14 + 8))
  {
    BOOL v15 = *(NSObject **)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        sub_382A0C((std::string *)__p, a2 + 3);
        unsigned int v16 = (SBYTE7(v120) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3100;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v16;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Updating reconfiguration context for destinations: %s.", buf, 0x1Cu);
        if (SBYTE7(v120) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  unsigned int v113 = a1;
  long long v120 = 0u;
  long long v121 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v17 = *a4;
  uint64_t v114 = a4[1];
  if (*a4 != v114)
  {
    char v112 = a3;
    do
    {
      int v18 = *(_DWORD *)(v17 + 12);
      BOOL v19 = v18 == 1986556788 || v18 == 1987208039;
      int v21 = v19 || v18 == 1987211117;
      sub_E6F1C((uint64_t *)buf, *(void *)v17, v21);
      BOOL v22 = operator new(0x30uLL);
      *BOOL v22 = a2;
      v22[1] = buf;
      v22[2] = __p;
      uint64_t v23 = v17 + 208;
      char v24 = v22;
      v22[3] = a2 + 3;
      v22[4] = &buf[24];
      v22[5] = (char *)&v120 + 8;
      do
      {
        uint64_t v26 = (void *)*v24;
        uint64_t v25 = (void *)v24[1];
        char v130 = 0;
        uint64_t v131 = 0;
        uint64_t v129 = &v130;
        BOOL v29 = (void *)*v26;
        uint64_t v28 = v26 + 1;
        uint64_t v27 = v29;
        char v32 = (void *)*v25;
        uint64_t v30 = v25 + 1;
        uint64_t v31 = v32;
        if (v27 != v28 && v31 != v30)
        {
          uint64_t v34 = (uint64_t *)&v130;
          do
          {
            unint64_t v35 = v27[4];
            unint64_t v36 = v31[4];
            if (v35 >= v36)
            {
              if (v36 >= v35)
              {
                uint64_t v39 = sub_E723C((uint64_t **)&v129, v34, v35, v27[4]);
                uint64_t v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    uint64_t v34 = v40;
                    uint64_t v40 = (uint64_t *)*v40;
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    uint64_t v34 = (uint64_t *)v39[2];
                    BOOL v19 = *v34 == (void)v39;
                    uint64_t v39 = v34;
                  }
                  while (!v19);
                }
                uint64_t v41 = (void *)v27[1];
                if (v41)
                {
                  do
                  {
                    uint64_t v27 = v41;
                    uint64_t v41 = (void *)*v41;
                  }
                  while (v41);
                }
                else
                {
                  do
                  {
                    __int16 v42 = v27;
                    uint64_t v27 = (void *)v27[2];
                  }
                  while ((void *)*v27 != v42);
                }
              }
              int v43 = (void *)v31[1];
              if (v43)
              {
                do
                {
                  uint64_t v31 = v43;
                  int v43 = (void *)*v43;
                }
                while (v43);
              }
              else
              {
                do
                {
                  __int16 v44 = v31;
                  uint64_t v31 = (void *)v31[2];
                }
                while ((void *)*v31 != v44);
              }
            }
            else
            {
              uint64_t v37 = (void *)v27[1];
              if (v37)
              {
                do
                {
                  uint64_t v27 = v37;
                  uint64_t v37 = (void *)*v37;
                }
                while (v37);
              }
              else
              {
                do
                {
                  uint64_t v38 = v27;
                  uint64_t v27 = (void *)v27[2];
                }
                while ((void *)*v27 != v38);
              }
            }
          }
          while (v27 != v28 && v31 != v30);
          if (v131)
          {
            if (!*(unsigned char *)(v17 + 212))
            {
              char v106 = (os_log_t *)sub_32A48(13);
              uint64_t v107 = *v106;
              if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v136 = 136315394;
                *(void *)&v136[4] = "RoutingManager.cpp";
                *(_WORD *)&v136[12] = 1024;
                *(_DWORD *)&v136[14] = 3121;
                _os_log_impl(&def_1E50E8, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v136, 0x12u);
              }
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }
            uint64_t v45 = sub_32A48(8);
            if (*(unsigned char *)(v45 + 8))
            {
              uint64_t v46 = *(NSObject **)v45;
              if (*(void *)v45)
              {
                if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
                {
                  sub_382A0C(&v128, &v129);
                  uint64_t v47 = &v128;
                  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v47 = (std::string *)v128.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)uint64_t v136 = 136315650;
                  *(void *)&v136[4] = "RoutingManager.cpp";
                  *(_WORD *)&v136[12] = 1024;
                  *(_DWORD *)&v136[14] = 3124;
                  *(_WORD *)&v136[18] = 2080;
                  *(void *)&v136[20] = v47;
                  _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Common Physical Devices: %s.", v136, 0x1Cu);
                  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v128.__r_.__value_.__l.__data_);
                  }
                }
              }
            }
            char v48 = (void **)v24[2];
            uint64_t v49 = *(void *)v17;
            char v51 = (uint64_t *)v48[1];
            unint64_t v50 = (unint64_t)v48[2];
            if ((unint64_t)v51 >= v50)
            {
              uint64_t v53 = ((char *)v51 - (unsigned char *)*v48) >> 4;
              unint64_t v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 60) {
                sub_60548();
              }
              uint64_t v55 = v50 - (void)*v48;
              if (v55 >> 3 > v54) {
                unint64_t v54 = v55 >> 3;
              }
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v54;
              }
              if (v56 >> 60) {
                sub_60560();
              }
              uint64_t v57 = (char *)operator new(16 * v56);
              uint64_t v58 = (uint64_t *)&v57[16 * v53];
              *uint64_t v58 = v49;
              v58[1] = v23;
              uint64_t v60 = (char *)*v48;
              char v59 = (char *)v48[1];
              uint64_t v61 = v58;
              if (v59 != *v48)
              {
                do
                {
                  *((_OWORD *)v61 - 1) = *((_OWORD *)v59 - 1);
                  v61 -= 2;
                  v59 -= 16;
                }
                while (v59 != v60);
                char v59 = (char *)*v48;
              }
              uint64_t v62 = &v57[16 * v56];
              uint64_t v52 = v58 + 2;
              NSObject *v48 = v61;
              v48[1] = v58 + 2;
              v48[2] = v62;
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *char v51 = v49;
              v51[1] = v23;
              uint64_t v52 = v51 + 2;
            }
            v48[1] = v52;
          }
        }
        sub_463E0(v130);
        v24 += 3;
      }
      while (v24 != v22 + 6);
      operator delete(v22);
      sub_463E0(v141);
      sub_463E0(*(void **)&buf[8]);
      v17 += 216;
    }
    while (v17 != v114);
    a3 = v112;
    if (__p[0] != __p[1])
    {
      uint64_t v63 = sub_32A48(8);
      if (*(unsigned char *)(v63 + 8))
      {
        unsigned int v64 = *(NSObject **)v63;
        if (*(void *)v63)
        {
          if (os_log_type_enabled(*(os_log_t *)v63, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3131;
            _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Route shares source hardware with existing route.", buf, 0x12u);
          }
        }
      }
    }
  }
  uint64_t v65 = v113;
  if (*((void *)&v120 + 1) != (void)v121)
  {
    uint64_t v66 = sub_32A48(8);
    if (*(unsigned char *)(v66 + 8))
    {
      char v67 = *(NSObject **)v66;
      if (*(void *)v66)
      {
        if (os_log_type_enabled(*(os_log_t *)v66, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3133;
          _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Route shares destination hardware with existing route.", buf, 0x12u);
        }
      }
    }
  }
  unsigned int v68 = v113 - 5;
  if (v113 - 5 >= 0xFFFFFFFE)
  {
    for (uint64_t i = (_DWORD **)__p[0]; i != __p[1]; i += 2)
    {
      if ((*i[1] - 5) < 0xFFFFFFFE) {
        goto LABEL_104;
      }
    }
    for (uint64_t j = *((void *)&v120 + 1); j != (void)v121; j += 16)
    {
      if ((**(_DWORD **)(j + 8) - 5) <= 0xFFFFFFFD) {
        goto LABEL_104;
      }
    }
    goto LABEL_169;
  }
LABEL_104:
  if (!sub_20AA78())
  {
LABEL_165:
    sub_12A260((unsigned int **)__p[0], (unsigned int **)__p[1]);
    if (v68 >= 0xFFFFFFFE) {
      uint64_t v65 = 2;
    }
    else {
      uint64_t v65 = v65;
    }
    sub_12A260(*((unsigned int ***)&v120 + 1), (unsigned int **)v121);
    goto LABEL_169;
  }
  sub_3524(&v116, a3);
  if (!v118)
  {
    uint64_t v109 = (os_log_t *)sub_32A48(13);
    uint64_t v110 = *v109;
    if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5542;
      _os_log_impl(&def_1E50E8, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v111, "Precondition failure.");
  }
  uint64_t v69 = (uint64_t *)__p[0];
  uint64_t v70 = (uint64_t *)__p[1];
  uint64_t v125 = (uint64_t *)&v125;
  char v126 = (uint64_t *)&v125;
  std::string::size_type v127 = 0;
  if (__p[0] == __p[1])
  {
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    v128.__r_.__value_.__l.__size_ = (std::string::size_type)&v128;
    uint64_t v89 = &v128.__r_.__value_.__r.__words[2];
    goto LABEL_134;
  }
  do
  {
    uint64_t v71 = *v69;
    memset(buf, 0, 24);
    strcpy((char *)&buf[24], "cwdv");
    LOBYTE(v141) = 0;
    int v142 = 3;
    v144[0] = 0;
    v144[1] = 0;
    uint64_t v143 = v144;
    int v145 = 44739242;
    CFTypeRef v146 = 0;
    sub_125ECC((unint64_t *)v136, v71, (uint64_t)buf);
    if (v146) {
      CFRelease(v146);
    }
    sub_463E0(v144[0]);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    sub_3524((uint64_t *)buf, &v125);
    for (uint64_t k = *(void *)&v136[8]; (unsigned char *)k != v136; uint64_t k = *(void *)(k + 8))
    {
      sub_549A4((uint64_t *)&v129, (uint64_t *)(k + 16), "", 5549);
      int v73 = *((_DWORD *)v129 + 36);
      if (v130) {
        sub_4636C(v130);
      }
      if (v73 != 1885433888) {
        sub_3590((uint64_t *)buf, *(void *)(k + 16), *(void *)(k + 24));
      }
    }
    uint64_t v129 = (std::__shared_weak_count **)&v129;
    char v130 = (std::__shared_weak_count *)&v129;
    uint64_t v131 = 0;
    uint64_t v74 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      uint64_t v76 = *(void *)buf;
      uint64_t v75 = *(uint64_t ***)&buf[8];
      uint64_t v77 = **(void **)&buf[8];
      *(void *)(v77 + 8) = *(void *)(*(void *)buf + 8);
      **(void **)(v76 + 8) = v77;
      uint64_t v78 = (uint64_t *)v129;
      v129[1] = (std::__shared_weak_count *)v75;
      _DWORD *v75 = v78;
      *(void *)(v76 + 8) = &v129;
      uint64_t v129 = (std::__shared_weak_count **)v76;
      uint64_t v131 = v74;
      *(void *)&_DWORD buf[16] = 0;
    }
    sub_8108((uint64_t *)buf);
    sub_8108((uint64_t *)v136);
    sub_8108((uint64_t *)&v125);
    uint64_t v79 = v131;
    if (v131)
    {
      uint64_t v81 = (uint64_t *)v129;
      uint64_t v80 = &v130->__vftable;
      uint64_t v82 = v130->__vftable;
      v82->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v129[1];
      *(void *)v81[1] = v82;
      uint64_t v83 = (uint64_t)v125;
      v125[1] = (uint64_t)v80;
      *uint64_t v80 = v83;
      v81[1] = (uint64_t)&v125;
      uint64_t v125 = v81;
      v127 += v79;
      uint64_t v131 = 0;
    }
    sub_8108((uint64_t *)&v129);
    v69 += 2;
  }
  while (v69 != v70);
  std::string::size_type v84 = v127;
  v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
  v128.__r_.__value_.__l.__size_ = (std::string::size_type)&v128;
  v128.__r_.__value_.__r.__words[2] = 0;
  uint64_t v65 = v113;
  unsigned int v68 = v113 - 5;
  if (v127)
  {
    std::string::size_type v86 = (std::string::size_type)v125;
    uint64_t v85 = v126;
    uint64_t v87 = *v126;
    *(void *)(v87 + 8) = v125[1];
    **(void **)(v86 + 8) = v87;
    std::string::size_type v88 = v128.__r_.__value_.__r.__words[0];
    *(void *)(v128.__r_.__value_.__r.__words[0] + 8) = v85;
    *uint64_t v85 = v88;
    *(void *)(v86 + 8) = &v128;
    v128.__r_.__value_.__r.__words[0] = v86;
    v128.__r_.__value_.__r.__words[2] = v84;
    uint64_t v89 = &v127;
LABEL_134:
    std::string::size_type *v89 = 0;
  }
  sub_8108((uint64_t *)&v125);
  sub_1275E8((unint64_t *)v128.__r_.__value_.__l.__size_, (unint64_t *)&v128, v128.__r_.__value_.__r.__words[2]);
  sub_1275E8(v117, (unint64_t *)&v116, v118);
  *(void *)uint64_t v136 = v136;
  *(void *)&v136[8] = v136;
  *(void *)&v136[16] = 0;
  char v92 = (uint64_t *)v117;
  std::string::size_type size = (std::string *)v128.__r_.__value_.__l.__size_;
  if (v117 == (unint64_t *)&v116 || (std::string *)v128.__r_.__value_.__l.__size_ == &v128)
  {
    char v130 = 0;
    uint64_t v131 = 0;
    uint64_t v129 = &v130;
    uint64_t v123 = (uint64_t **)&v129;
    uint64_t m = &v130;
  }
  else
  {
    uint64_t v94 = (uint64_t *)v136;
    do
    {
      if (sub_E0404((unint64_t *)v92 + 2, &size->__r_.__value_.__r.__words[2]))
      {
        char v92 = (uint64_t *)v92[1];
      }
      else
      {
        if (!sub_E0404(&size->__r_.__value_.__r.__words[2], (unint64_t *)v92 + 2))
        {
          uint64_t v94 = (uint64_t *)sub_12A630((uint64_t)v136, v94, v92[2], v92[3])[1];
          char v92 = (uint64_t *)v92[1];
        }
        std::string::size_type size = (std::string *)size->__r_.__value_.__l.__size_;
      }
    }
    while (v92 != &v116 && size != &v128);
    uint64_t v95 = *(void *)&v136[8];
    char v130 = 0;
    uint64_t v131 = 0;
    uint64_t v129 = &v130;
    uint64_t v123 = (uint64_t **)&v129;
    for (m = &v130; (unsigned char *)v95 != v136; uint64_t v95 = *(void *)(v95 + 8))
    {
      sub_549A4((uint64_t *)buf, (uint64_t *)(v95 + 16), "", 5558);
      int v96 = *(_DWORD *)(*(void *)buf + 144);
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      *(_DWORD *)buf = v96;
      sub_10ED30(&v123, (unsigned int *)buf);
    }
  }
  if (sub_209C54())
  {
    qmemcpy(buf, "ibmpptspkpsp", 12);
    sub_6367C((uint64_t)&v123, (unsigned int *)buf, 3);
  }
  else
  {
    uint64_t v137 = 0x70737470706D6269;
    sub_6367C((uint64_t)&v123, (unsigned int *)&v137, 2);
  }
  unint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v137 = (uint64_t)&v138;
  uint64_t v134 = &v130;
  uint64_t v135 = (uint64_t *)v129;
  p_uint64_t m = &m;
  char v133 = v123;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)&v138;
  sub_12A3D0((uint64_t)buf, (uint64_t)&v135, &v134, (uint64_t)&v133, &p_m, (__n128 *)&v122);
  if (v139)
  {
    char v97 = (os_log_t *)sub_32A48(8);
    uint64_t v98 = *v97;
    if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_DEFAULT))
    {
      sub_120764(&v122, (void *)v137, &v138);
      uint64_t v99 = (v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v122
          : (std::string *)v122.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5569;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v99;
      _os_log_impl(&def_1E50E8, v98, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot persist VAD; NonShareable ports in route : %s",
        buf,
        0x1Cu);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
    }
    BOOL v100 = v139 == 0;
  }
  else
  {
    BOOL v100 = 1;
  }
  sub_463E0(v138);
  sub_463E0(m);
  sub_463E0(v130);
  sub_8108((uint64_t *)v136);
  sub_8108((uint64_t *)&v128);
  sub_8108(&v116);
  if (!v100) {
    goto LABEL_165;
  }
LABEL_169:
  uint64_t v101 = sub_32A48(8);
  if (*(unsigned char *)(v101 + 8))
  {
    char v102 = *(NSObject **)v101;
    if (*(void *)v101)
    {
      if (os_log_type_enabled(*(os_log_t *)v101, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v103 = v65 > 4 ? "????" : off_621228[v65];
        sub_21C8C(v136, v103);
        uint64_t v104 = v136[23] >= 0 ? v136 : *(unsigned char **)v136;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3175;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v104;
        _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Final Reconfiguration Context %s.", buf, 0x1Cu);
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
      }
    }
  }
  if (*((void *)&v120 + 1))
  {
    *(void *)&long long v121 = *((void *)&v120 + 1);
    operator delete(*((void **)&v120 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v65;
}

void sub_129BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  sub_463E0(*(void **)(v43 - 208));
  sub_463E0(a34);
  sub_463E0(a43);
  sub_8108((uint64_t *)(v43 - 256));
  sub_8108(&a39);
  sub_8108(&a20);
  sub_EEE2C((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_129D28(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  sub_73370(a1 + 80, (void *)(a2 + 80));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  sub_CAE80((unsigned char *)(a1 + 176), (long long *)(a2 + 176));
  return a1;
}

void sub_129DD0(_Unwind_Exception *a1)
{
  sub_73038(*(void **)(v1 + 88));
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

void sub_129DF8(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >= v5)
  {
    unint64_t v9 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
    if (v9 + 1 > 0x222222222222222) {
      sub_60548();
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x111111111111111) {
      unint64_t v12 = 0x222222222222222;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_129F00(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 120 * v9;
    unint64_t v17 = v12 + 120 * v13;
    sub_129F94(v15, a2);
    uint64_t v16 = v15 + 120;
    sub_12A008((long long **)a1, &v14);
    uint64_t v8 = *(void *)(a1 + 8);
    sub_12A090((uint64_t)&v14);
  }
  else
  {
    sub_129F94(v6, a2);
    uint64_t v8 = v7 + 120;
  }
  *(void *)(a1 + 8) = v8;
}

void *sub_129F00(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    sub_60560();
  }
  return operator new(120 * a1);
}

void *sub_129F48(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685) {
    sub_60560();
  }
  return operator new(216 * a1);
}

__n128 sub_129F94(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  unint64_t v5 = (void *)a2 + 9;
  uint64_t v6 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = a1 + 72;
  uint64_t v8 = *((void *)a2 + 10);
  *(void *)(a1 + 80) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *((void *)a2 + 8) = v5;
    *unint64_t v5 = 0;
    *((void *)a2 + 10) = 0;
  }
  else
  {
    *(void *)(a1 + 64) = v7;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  return result;
}

void sub_12A008(long long **a1, void *a2)
{
  unint64_t v5 = *a1;
  long long v4 = a1[1];
  uint64_t v6 = (long long *)a2[1];
  while (v4 != v5)
  {
    long long v4 = (long long *)((char *)v4 - 120);
    sub_129F94((uint64_t)v6 - 120, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t sub_12A090(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    sub_128984((void *)(i - 120));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_12A0E0(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_E71B0(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_12A120(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_12A134(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      __n128 result = (uint64_t *)sub_129D28(v6 + v7 - 216, v4 + v7 - 216);
      *(void *)(v6 + v7 - 8) = *(void *)(v4 + v7 - 8);
      v7 -= 216;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_12A210(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    sub_128920(i - 216);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_12A260(unsigned int **a1, unsigned int **a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    do
    {
      if (*v3[1] - 5 >= 0xFFFFFFFE)
      {
        uint64_t v4 = sub_32A48(8);
        if (*(unsigned char *)(v4 + 8))
        {
          uint64_t v5 = *(NSObject **)v4;
          if (*(void *)v4)
          {
            if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
            {
              sub_3825EC(&__p, *v3);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315650;
              uint64_t v9 = "RoutingManager.cpp";
              __int16 v10 = 1024;
              int v11 = 3162;
              __int16 v12 = 2080;
              uint64_t v13 = p_p;
              _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Changing Reconfiguration Context to Change for %s.", buf, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        *v3[1] = 2;
      }
      v3 += 2;
    }
    while (v3 != a2);
  }
}

__n128 sub_12A3D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, __n128 *a6)
{
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = (void *)*a3;
  if (*(void *)a2 == *a3)
  {
LABEL_38:
    __n128 v30 = *a6;
    goto LABEL_39;
  }
  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    unsigned int v15 = *((_DWORD *)v8 + 7);
    unsigned int v16 = *((_DWORD *)i + 7);
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        uint64_t v23 = (void *)v8[1];
        if (v23)
        {
          do
          {
            char v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            char v24 = (void *)v8[2];
            BOOL v20 = *v24 == (void)v8;
            uint64_t v8 = v24;
          }
          while (!v20);
        }
        *(void *)a2 = v24;
        uint64_t v25 = *(void **)a4;
        uint64_t v26 = *(void **)(*(void *)a4 + 8);
        if (v26)
        {
          do
          {
            BOOL v22 = v26;
            uint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            BOOL v22 = (void *)v25[2];
            BOOL v20 = *v22 == (void)v25;
            uint64_t v25 = v22;
          }
          while (!v20);
        }
      }
      else
      {
        int v21 = (void *)i[1];
        if (v21)
        {
          do
          {
            BOOL v22 = v21;
            int v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            BOOL v22 = (void *)i[2];
            BOOL v20 = *v22 == (void)i;
            uint64_t i = v22;
          }
          while (!v20);
        }
      }
      *(void *)a4 = v22;
    }
    else
    {
      sub_12A5C4((uint64_t)a6, (unsigned int *)v8 + 7);
      unint64_t v17 = *(void **)a2;
      uint64_t v18 = *(void **)(*(void *)a2 + 8);
      if (v18)
      {
        do
        {
          BOOL v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v19 = (void *)v17[2];
          BOOL v20 = *v19 == (void)v17;
          unint64_t v17 = v19;
        }
        while (!v20);
      }
      *(void *)a2 = v19;
    }
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      goto LABEL_38;
    }
  }
  __n128 v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      sub_12A5C4((uint64_t)&v30, (unsigned int *)v8 + 7);
      uint64_t v27 = (void *)v8[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v8[2];
          BOOL v20 = *v28 == (void)v8;
          uint64_t v8 = v28;
        }
        while (!v20);
      }
      uint64_t v8 = v28;
    }
    while (v28 != v9);
    uint64_t v8 = v9;
  }
LABEL_39:
  __n128 result = v30;
  *(void *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_12A5C4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = sub_46C2C(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), *a2, a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void *sub_12A630(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __n128 result = operator new(0x20uLL);
  result[2] = a3;
  result[3] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  *(void *)(v9 + 8) = result;
  *__n128 result = v9;
  *a2 = (uint64_t)result;
  result[1] = a2;
  ++*(void *)(a1 + 16);
  return result;
}

uint64_t sub_12A6A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*a1 != *a2 || *((_DWORD *)a1 + 8) != *((_DWORD *)a2 + 8) || *((_DWORD *)a1 + 9) != *((_DWORD *)a2 + 9)) {
    return 0;
  }
  if (a1[60] && a2[60])
  {
    if (*((_DWORD *)a1 + 14) != *((_DWORD *)a2 + 14)) {
      return 0;
    }
  }
  else if ((a1[60] != 0) != (a2[60] != 0))
  {
    return 0;
  }
  if (*((void *)a1 + 3) != *((void *)a2 + 3)) {
    return 0;
  }
  long long v2 = (unsigned __int8 *)*((void *)a1 + 1);
  uint64_t v3 = a1 + 16;
  if (v2 != a1 + 16)
  {
    uint64_t v4 = (unsigned __int8 *)*((void *)a2 + 1);
    while (1)
    {
      if (*((_DWORD *)v2 + 8) != *((_DWORD *)v4 + 8)) {
        return 0;
      }
      if (v2 != v4) {
        break;
      }
LABEL_68:
      unsigned int v15 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v15)
      {
        do
        {
          unsigned int v16 = v15;
          unsigned int v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unsigned int v16 = (unsigned __int8 *)*((void *)v2 + 2);
          BOOL v17 = *(void *)v16 == (void)v2;
          long long v2 = v16;
        }
        while (!v17);
      }
      uint64_t v18 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v18)
      {
        do
        {
          BOOL v19 = v18;
          uint64_t v18 = *(unsigned __int8 **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v19 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v17 = *(void *)v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v17);
      }
      uint64_t result = 1;
      uint64_t v4 = v19;
      long long v2 = v16;
      if (v16 == v3) {
        return result;
      }
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 6);
    if (v5)
    {
      BOOL v6 = std::__shared_weak_count::lock(v5);
      if (v6) {
        uint64_t v7 = *((void *)v2 + 5);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
      BOOL v6 = 0;
    }
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 6);
    if (v8 && (uint64_t v9 = std::__shared_weak_count::lock(v8)) != 0)
    {
      BOOL v10 = v7 == *((void *)v4 + 5);
      sub_4636C(v9);
    }
    else
    {
      BOOL v10 = v7 == 0;
    }
    if (v6) {
      sub_4636C(v6);
    }
    if (!v10) {
      return 0;
    }
    int v11 = *((_DWORD *)v2 + 14);
    sub_549A4(&v21, (uint64_t *)v4 + 5, "", 326);
    if (v11 != *(_DWORD *)(v21 + 264)
      || *((_DWORD *)v2 + 15) != *((_DWORD *)v4 + 15)
      || !sub_E48A0(*((void **)v2 + 8), *((void *)v2 + 9), *((void **)v4 + 8), *((void *)v4 + 9)))
    {
      goto LABEL_64;
    }
    uint64_t v12 = *((void *)v2 + 11);
    uint64_t v13 = *((void *)v4 + 11);
    if (v12 != v13)
    {
      if (*(unsigned char *)(v12 + 12) && *(unsigned char *)(v13 + 12))
      {
        if (*(float *)(v12 + 8) != *(float *)(v13 + 8)) {
          goto LABEL_64;
        }
      }
      else if ((*(unsigned char *)(v12 + 12) != 0) != (*(unsigned char *)(v13 + 12) != 0))
      {
        goto LABEL_64;
      }
      if (*(unsigned char *)(v12 + 20) && *(unsigned char *)(v13 + 20))
      {
        if (*(float *)(v12 + 16) != *(float *)(v13 + 16)) {
          goto LABEL_64;
        }
      }
      else if ((*(unsigned char *)(v12 + 20) != 0) != (*(unsigned char *)(v13 + 20) != 0))
      {
        goto LABEL_64;
      }
      if (*(unsigned char *)(v12 + 28) && *(unsigned char *)(v13 + 28))
      {
        if (*(float *)(v12 + 24) != *(float *)(v13 + 24)) {
          goto LABEL_64;
        }
      }
      else if ((*(unsigned char *)(v12 + 28) != 0) != (*(unsigned char *)(v13 + 28) != 0))
      {
        goto LABEL_64;
      }
      if (*(unsigned char *)(v12 + 40) && *(unsigned char *)(v13 + 40))
      {
        if (*(void *)(v12 + 32) != *(void *)(v13 + 32)) {
          goto LABEL_64;
        }
      }
      else if ((*(unsigned char *)(v12 + 40) != 0) != (*(unsigned char *)(v13 + 40) != 0))
      {
        goto LABEL_64;
      }
      if (*(unsigned char *)(v12 + 52) && *(unsigned char *)(v13 + 52))
      {
        if (*(_DWORD *)(v12 + 48) != *(_DWORD *)(v13 + 48)) {
          goto LABEL_64;
        }
      }
      else if ((*(unsigned char *)(v12 + 52) != 0) != (*(unsigned char *)(v13 + 52) != 0))
      {
        goto LABEL_64;
      }
      if (*(unsigned char *)(v12 + 64) && *(unsigned char *)(v13 + 64))
      {
        if (*(void *)(v12 + 56) != *(void *)(v13 + 56)) {
          goto LABEL_64;
        }
      }
      else if ((*(unsigned char *)(v12 + 64) != 0) != (*(unsigned char *)(v13 + 64) != 0))
      {
        goto LABEL_64;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 24))(v12)) {
        goto LABEL_64;
      }
    }
    if (*((_DWORD *)v2 + 24) == *((_DWORD *)v4 + 24))
    {
      BOOL v14 = v2[100] == v4[100];
      goto LABEL_65;
    }
LABEL_64:
    BOOL v14 = 0;
LABEL_65:
    if (v22) {
      sub_4636C(v22);
    }
    if (!v14) {
      return 0;
    }
    goto LABEL_68;
  }
  return 1;
}

void sub_12AA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_12AAB0(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16) != a2[2]) {
    return 0;
  }
  long long v2 = *(void **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    uint64_t v3 = (void *)*a2;
    while (v2[4] == v3[4])
    {
      uint64_t v4 = (void *)v2[1];
      uint64_t v5 = v2;
      if (v4)
      {
        do
        {
          long long v2 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          long long v2 = (void *)v5[2];
          BOOL v6 = *v2 == (void)v5;
          uint64_t v5 = v2;
        }
        while (!v6);
      }
      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v3[2];
          BOOL v6 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v6);
      }
      uint64_t v3 = v8;
      if (v2 == (void *)(a1 + 8)) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*(void *)(a1 + 40) != a2[5]) {
    return 0;
  }
  uint64_t v9 = *(void **)(a1 + 24);
  BOOL v10 = (void *)(a1 + 32);
  if (v9 == (void *)(a1 + 32)) {
    return 1;
  }
  int v11 = (void *)a2[3];
  while (1)
  {
    uint64_t v12 = v9[4];
    uint64_t v13 = v11[4];
    BOOL result = v12 == v13;
    if (v12 != v13) {
      break;
    }
    unsigned int v15 = (void *)v9[1];
    unsigned int v16 = v9;
    if (v15)
    {
      do
      {
        uint64_t v9 = v15;
        unsigned int v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v16[2];
        BOOL v6 = *v9 == (void)v16;
        unsigned int v16 = v9;
      }
      while (!v6);
    }
    BOOL v17 = (void *)v11[1];
    if (v17)
    {
      do
      {
        uint64_t v18 = v17;
        BOOL v17 = (void *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v18 = (void *)v11[2];
        BOOL v6 = *v18 == (void)v11;
        int v11 = v18;
      }
      while (!v6);
    }
    int v11 = v18;
    if (v9 == v10) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_12ABFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24]) {
    BOOL v2 = a2[24] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[24] != 0) == (a2[24] != 0);
  }
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a1++;
    int v9 = v10;
    int v12 = *a2++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    BOOL v2 = v9 == v11;
    BOOL v3 = v9 == v11;
  }
  while (v2 && v14);
  return v3;
}

uint64_t sub_12ACD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192) && *(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  sub_73038(*(void **)(a1 + 80));
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_12AD20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  sub_73370(a1 + 80, (void *)(a2 + 80));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  sub_CAE80((unsigned char *)(a1 + 176), (long long *)(a2 + 176));
  return a1;
}

void sub_12ADC8(_Unwind_Exception *a1)
{
  sub_73038(*(void **)(v1 + 88));
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_12ADF0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  sub_73038(*(void **)(a1 + 88));
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_12AE40(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    goto LABEL_42;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
  {
LABEL_42:
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      BOOL v29 = "RoutingManager.cpp";
      __int16 v30 = 1024;
      int v31 = 5273;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Corruption in the routing database. Calling find(inCategoryMode.mCategory) returned an invalid iterator.\"", (uint8_t *)&v28, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Corruption in the routing database. Calling find(inCategoryMode.mCategory) returned an invalid iterator.");
  }
  if (*(unsigned char *)(v4 + 78))
  {
    BOOL v8 = 1;
LABEL_14:
    int v9 = 1;
    return v8 | (v9 << 8);
  }
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v10 = a1 + 80;
  uint64_t v11 = v12;
  if (!v12) {
    goto LABEL_26;
  }
  unsigned int v13 = a2[1];
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  do
  {
    unsigned int v16 = *(_DWORD *)(v15 + 28);
    BOOL v17 = v16 >= v13;
    if (v16 >= v13) {
      uint64_t v18 = (uint64_t *)v15;
    }
    else {
      uint64_t v18 = (uint64_t *)(v15 + 8);
    }
    if (v17) {
      uint64_t v14 = v15;
    }
    uint64_t v15 = *v18;
  }
  while (*v18);
  if (v14 == v10 || *(_DWORD *)(v14 + 28) > v13) {
LABEL_26:
  }
    uint64_t v14 = v10;
  BOOL v8 = v14 != v10;
  if (!*((unsigned char *)a2 + 12)) {
    goto LABEL_14;
  }
  if (!v11) {
    goto LABEL_39;
  }
  unsigned int v19 = a2[2];
  uint64_t v20 = v10;
  do
  {
    unsigned int v21 = *(_DWORD *)(v11 + 28);
    BOOL v22 = v21 >= v19;
    if (v21 >= v19) {
      uint64_t v23 = (uint64_t *)v11;
    }
    else {
      uint64_t v23 = (uint64_t *)(v11 + 8);
    }
    if (v22) {
      uint64_t v20 = v11;
    }
    uint64_t v11 = *v23;
  }
  while (*v23);
  if (v20 == v10 || *(_DWORD *)(v20 + 28) > v19) {
LABEL_39:
  }
    uint64_t v20 = v10;
  int v9 = v20 != v10;
  return v8 | (v9 << 8);
}

void sub_12B034(_Unwind_Exception *exception_object)
{
}

void sub_12B050(void *a1)
{
  if (a1)
  {
    sub_12B050(*a1);
    sub_12B050(a1[1]);
    sub_10E118((void *)a1[6]);
    operator delete(a1);
  }
}

void sub_12B0A4(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v129 = (os_log_t *)sub_32A48(13);
    char v130 = *v129;
    if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2263;
      _os_log_impl(&def_1E50E8, v130, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a6 > (unint64_t)(((char *)a3[1] - (char *)*a3) >> 4))
  {
    uint64_t v132 = (os_log_t *)sub_32A48(13);
    char v133 = *v132;
    if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2264;
      _os_log_impl(&def_1E50E8, v133, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v134 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v134, "Precondition failure.");
  }
  int v10 = a6[1] & 3;
  if ((a6[1] & 3) == 0)
  {
    uint64_t v135 = (os_log_t *)sub_32A48(13);
    uint64_t v136 = *v135;
    if (*v135 && os_log_type_enabled(*v135, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2265;
      _os_log_impl(&def_1E50E8, v136, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v137 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v137, "Precondition failure.");
  }
  if (*(_DWORD *)(a4 + 32) != 1668510820)
  {
    unint64_t v138 = (os_log_t *)sub_32A48(13);
    uint64_t v139 = *v138;
    if (*v138 && os_log_type_enabled(*v138, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2266;
      _os_log_impl(&def_1E50E8, v139, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v140 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v140, "Precondition failure.");
  }
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  memset(v168, 0, sizeof(v168));
  uint64_t v149 = a1;
  uint64_t v160 = (uint64_t *)a5;
  if (v10 != 3)
  {
    uint64_t v99 = sub_32A48(8);
    if (*(unsigned char *)(v99 + 8))
    {
      BOOL v100 = *(NSObject **)v99;
      if (*(void *)v99)
      {
        if (os_log_type_enabled(*(os_log_t *)v99, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2446;
          _os_log_impl(&def_1E50E8, v100, OS_LOG_TYPE_DEBUG, "%25s:%-5d Scanning inPortStack per port, seeking viable concrete routes for single port routing", buf, 0x12u);
        }
      }
    }
    std::string::size_type v101 = *a6;
    if (!v101) {
      std::string::size_type v101 = ((char *)a3[1] - (char *)*a3) >> 4;
    }
    v170.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    v170.__r_.__value_.__l.__size_ = v101;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    uint64_t v157 = a5 + 24;
    v170.__r_.__value_.__r.__words[2] = a5 + 24;
    *(void *)char v174 = sub_1386F0((uint64_t)&v170);
    *(void *)&v174[8] = v102;
    uint64_t v103 = *(void *)(v170.__r_.__value_.__r.__words[0] + 8) - *(void *)v170.__r_.__value_.__l.__data_;
    BOOL v16 = v170.__r_.__value_.__l.__size_ >= v103 >> 4;
    std::string::size_type size = v103 >> 4;
    if (!v16) {
      std::string::size_type size = v170.__r_.__value_.__l.__size_;
    }
    uint64_t v105 = *(void *)v170.__r_.__value_.__l.__data_ + 16 * size;
    uint64_t v151 = (_OWORD *)(a5 + 8);
    CFTypeRef v146 = a6;
    uint64_t v155 = v105;
    while (1)
    {
      char v106 = *(uint64_t **)v174;
      if (*(void *)v174 == v105) {
        goto LABEL_248;
      }
      uint64_t v107 = *(std::__shared_weak_count **)(*(void *)v174 + 8);
      if (v107)
      {
        char v108 = std::__shared_weak_count::lock(v107);
        if (v108)
        {
          uint64_t v109 = *v106;
          if (*v106)
          {
            if ((a6[1] & 1) != 0 && (*(_WORD *)(v109 + 184) & 1) != 0
              || (a6[1] & 2) != 0 && (*(_WORD *)(v109 + 184) & 1) == 0)
            {
              uint64_t v153 = v108;
              BOOL v110 = *(_DWORD *)(a4 + 32) == 1668510820;
              *(_OWORD *)((char *)v165.__r_.__value_.__r.__words + 3) = *v151;
              _DWORD buf[16] = v110;
              *(_OWORD *)&buf[17] = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
              *(_DWORD *)&uint8_t buf[32] = *(_DWORD *)((char *)&v165.__r_.__value_.__r.__words[1] + 7);
              *(void *)buf = a4;
              *(void *)&buf[8] = v157;
              uint64_t v176 = 0;
              uint64_t v177 = 0;
              uint64_t v112 = sub_12E380((uint64_t *)buf);
              uint64_t v113 = *(void *)buf;
              if (*(void *)buf != v112)
              {
                uint64_t v114 = v111;
                uint64_t v115 = (uint64_t)(v111 + 1);
                do
                {
                  sub_12E3FC((uint64_t **)&__p, a2, v112 + 16, a4, (uint64_t)v160);
                  std::string::size_type v117 = __p.__r_.__value_.__l.__size_;
                  std::string::size_type v116 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
                  {
                    do
                    {
                      uint64_t v118 = *(void *)v116 + 16;
                      uint64_t v119 = *(void *)(*(void *)v116 + 24);
                      if (v118 != v119)
                      {
                        do
                        {
                          BOOL v120 = sub_242098(v109, (void *)(v119 + 16));
                          if (v120) {
                            break;
                          }
                          uint64_t v119 = *(void *)(v119 + 8);
                        }
                        while (v118 != v119);
                        if (v120) {
                          goto LABEL_214;
                        }
                      }
                      v116 += 8;
                    }
                    while (v116 != v117);
                    if (sub_13878C(a4, v160[1], v160[2], v157, (uint64_t *)&__p, v109))
                    {
LABEL_214:
                      if ((sub_166230() & 1) == 0
                        && sub_F7F68("VA_BuildAlternateRoutesAndActivateForLastInWins", 0x2FuLL) == &qword_659450)
                      {
                        os_signpost_id_t v121 = 0;
                      }
                      else
                      {
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_659478))
                        {
                          qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                          __cxa_guard_release(&qword_659478);
                        }
                        os_signpost_id_t v121 = os_signpost_id_generate((os_log_t)qword_659470);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_659478))
                        {
                          qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                          __cxa_guard_release(&qword_659478);
                        }
                        if (v121 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                        {
                          std::string v122 = qword_659470;
                          if (os_signpost_enabled((os_log_t)qword_659470))
                          {
                            sub_3827A4(&v165, (unsigned int ***)&__p);
                            int v123 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
                            std::string::size_type v124 = v165.__r_.__value_.__r.__words[0];
                            sub_382CA8(&v161, v112 + 16);
                            uint64_t v125 = &v165;
                            if (v123 < 0) {
                              uint64_t v125 = (std::string *)v124;
                            }
                            char v126 = &v161;
                            if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              char v126 = (std::string *)v161.__r_.__value_.__r.__words[0];
                            }
                            LODWORD(v178.__r_.__value_.__l.__data_) = 136315394;
                            *(std::string::size_type *)((char *)v178.__r_.__value_.__r.__words + 4) = (std::string::size_type)v125;
                            WORD2(v178.__r_.__value_.__r.__words[1]) = 2080;
                            *(std::string::size_type *)((char *)&v178.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v126;
                            _os_signpost_emit_with_name_impl(&def_1E50E8, v122, OS_SIGNPOST_INTERVAL_BEGIN, v121, "VA_BuildAlternateRoutesAndActivateForLastInWins", "ActivateForLastInWins, Primary route = %s, Abstract route =%s", (uint8_t *)&v178, 0x16u);
                            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v161.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v165.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                      }
                      sub_1388CC(v179, v121);
                      sub_12E4DC((uint64_t)&v165, a2, (unsigned int ***)&__p, *(uint64_t **)(v112 + 104), v160, (uint64_t *)v168);
                      sub_120690(v149, (uint64_t)&v165);
                      sub_11A520(&v165);
                      int v127 = *(_DWORD *)(v149 + 8);
                      sub_1389B0((os_signpost_id_t *)v179);
                      if (!v127)
                      {
                        v165.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                        sub_12EA14((void ***)&v165);
                        break;
                      }
                    }
                  }
                  v165.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  sub_12EA14((void ***)&v165);
                  uint64_t v112 = *(void *)(v112 + 8);
                  uint64_t v128 = *v114;
                  if (v112 != *v114)
                  {
                    do
                    {
                      if (sub_12EA98(v115, v112 + 16)) {
                        goto LABEL_234;
                      }
                      uint64_t v112 = *(void *)(v112 + 8);
                    }
                    while (v112 != v128);
                    uint64_t v112 = v128;
                  }
LABEL_234:
                  ;
                }
                while (v112 != v113);
              }
              a1 = v149;
              a6 = v146;
              char v108 = v153;
              if (!*(_DWORD *)(v149 + 8)) {
                goto LABEL_247;
              }
            }
            else if (!*(_DWORD *)(a1 + 8))
            {
              goto LABEL_247;
            }
          }
          sub_4636C(v108);
          uint64_t v105 = v155;
        }
      }
      sub_138EE4((uint64_t *)v174);
    }
  }
  uint64_t v11 = sub_32A48(8);
  if (*(unsigned char *)(v11 + 8))
  {
    uint64_t v12 = *(NSObject **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2344;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Scanning inPortStack per port, seeking viable concrete routes for input/output Port routing", buf, 0x12u);
      }
    }
  }
  std::string::size_type v13 = *a6;
  if (!v13) {
    std::string::size_type v13 = ((char *)a3[1] - (char *)*a3) >> 4;
  }
  v165.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v165.__r_.__value_.__l.__size_ = v13;
  uint64_t v166 = 0;
  uint64_t v167 = 0;
  uint64_t v156 = a5 + 24;
  v165.__r_.__value_.__r.__words[2] = a5 + 24;
  v164[0] = sub_1386F0((uint64_t)&v165);
  v164[1] = v14;
  uint64_t v15 = *(void *)(v165.__r_.__value_.__r.__words[0] + 8) - *(void *)v165.__r_.__value_.__l.__data_;
  BOOL v16 = v165.__r_.__value_.__l.__size_ >= v15 >> 4;
  std::string::size_type v17 = v15 >> 4;
  if (!v16) {
    std::string::size_type v17 = v165.__r_.__value_.__l.__size_;
  }
  uint64_t v18 = *(void *)v165.__r_.__value_.__l.__data_ + 16 * v17;
  uint64_t v143 = (_OWORD *)(a5 + 8);
  uint64_t v141 = v18;
  int v142 = a3;
  while (1)
  {
    unsigned int v19 = (uint64_t *)v164[0];
    if (v164[0] == v18) {
      goto LABEL_248;
    }
    uint64_t v20 = *(std::__shared_weak_count **)(v164[0] + 8);
    if (v20)
    {
      int v145 = std::__shared_weak_count::lock(v20);
      if (v145) {
        break;
      }
    }
LABEL_185:
    sub_138EE4(v164);
  }
  uint64_t v21 = *v19;
  if (!*v19) {
    goto LABEL_184;
  }
  BOOL v22 = *v142;
  uint64_t v23 = v142[1];
  if (*v142 == v23)
  {
    char v24 = *v142;
    goto LABEL_52;
  }
  char v24 = *v142;
  do
  {
    uint64_t v25 = (std::__shared_weak_count *)v24[1];
    if (v25)
    {
      uint64_t v26 = std::__shared_weak_count::lock(v25);
      uint64_t v27 = v26;
      if (v26)
      {
        uint64_t v28 = *v24;
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v26);
      }
      else
      {
        uint64_t v28 = 0;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v27 = 0;
    }
    BOOL v29 = (std::__shared_weak_count *)v19[1];
    if (v29)
    {
      __int16 v30 = std::__shared_weak_count::lock(v29);
      int v31 = v30;
      if (v30)
      {
        uint64_t v32 = *v19;
        atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v30);
        if (!v27) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v32 = 0;
        if (!v27)
        {
LABEL_35:
          uint64_t v34 = 0;
          uint64_t v33 = 0;
          if (!v31) {
            goto LABEL_39;
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v31 = 0;
      if (!v27) {
        goto LABEL_35;
      }
    }
    uint64_t v33 = std::__shared_weak_count::lock(v27);
    if (v33) {
      uint64_t v34 = v28;
    }
    else {
      uint64_t v34 = 0;
    }
    if (!v31)
    {
LABEL_39:
      BOOL v36 = v34 == 0;
      if (!v33) {
        goto LABEL_41;
      }
LABEL_40:
      sub_4636C(v33);
      goto LABEL_41;
    }
LABEL_36:
    unint64_t v35 = std::__shared_weak_count::lock(v31);
    if (!v35) {
      goto LABEL_39;
    }
    BOOL v36 = v34 == v32;
    sub_4636C(v35);
    if (v33) {
      goto LABEL_40;
    }
LABEL_41:
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v36) {
      goto LABEL_51;
    }
    v24 += 2;
  }
  while (v24 != v23);
  char v24 = v23;
LABEL_51:
  BOOL v22 = v142[1];
LABEL_52:
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  uint64_t v37 = (char *)v22 - (char *)v24;
  std::string::size_type v38 = (std::string::size_type)v24 + (v37 & 0xFFFFFFFFFFFFFFF0);
  v170.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  v170.__r_.__value_.__l.__size_ = v38;
  v170.__r_.__value_.__r.__words[2] = v156;
  if (v37)
  {
    uint64_t v78 = 16 * (v37 >> 4);
    while (!sub_138B4C((uint64_t)&v170.__r_.__value_.__r.__words[2], (uint64_t)v24))
    {
      v24 += 2;
      v78 -= 16;
      if (!v78)
      {
        uint64_t v171 = (uint64_t *)v38;
        LOBYTE(v172) = 1;
        goto LABEL_142;
      }
    }
  }
  uint64_t v171 = v24;
  LOBYTE(v172) = 1;
  std::string::size_type v39 = v38;
  std::string::size_type v147 = v38;
  if ((uint64_t *)v38 == v24) {
    goto LABEL_142;
  }
LABEL_54:
  uint64_t v40 = (std::__shared_weak_count *)v24[1];
  if (!v40) {
    goto LABEL_131;
  }
  uint64_t v41 = std::__shared_weak_count::lock(v40);
  if (!v41) {
    goto LABEL_131;
  }
  uint64_t v42 = *v24;
  if (!*v24 || (*(_WORD *)(v21 + 184) & 1) == (*(_WORD *)(v42 + 184) & 1)) {
    goto LABEL_130;
  }
  uint64_t v144 = v41;
  BOOL v43 = *(_DWORD *)(a4 + 32) == 1668510820;
  *(_OWORD *)((char *)__p.__r_.__value_.__r.__words + 3) = *v143;
  _DWORD buf[16] = v43;
  *(_OWORD *)&buf[17] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_DWORD *)&uint8_t buf[32] = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  *(void *)buf = a4;
  *(void *)&buf[8] = v156;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  uint64_t v44 = sub_12E380((uint64_t *)buf);
  v154 = v45;
  uint64_t v46 = v44;
  uint64_t v152 = *(void *)buf;
  if (*(void *)buf == v44) {
    goto LABEL_129;
  }
  uint64_t v150 = v24;
  uint64_t v148 = (uint64_t)(v45 + 1);
  while (1)
  {
    sub_12E3FC((uint64_t **)v174, a2, v46 + 16, a4, (uint64_t)v160);
    uint64_t v47 = *(void *)v174;
    if (*(void *)v174 == *(void *)&v174[8]) {
      goto LABEL_117;
    }
    uint64_t v48 = (uint64_t)(*(void *)&v174[8] - *(void *)v174) >> 3;
    if (v48 != 1) {
      break;
    }
    uint64_t v62 = **(void **)v174 + 16;
    uint64_t v63 = *(void *)(**(void **)v174 + 24);
    if (v62 != v63)
    {
      do
      {
        BOOL v64 = sub_242098(v21, (void *)(v63 + 16));
        if (v64) {
          break;
        }
        uint64_t v63 = *(void *)(v63 + 8);
      }
      while (v62 != v63);
      if (v64)
      {
        uint64_t v65 = **(void **)v174 + 16;
        uint64_t v66 = *(void *)(**(void **)v174 + 24);
        if (v65 != v66)
        {
          do
          {
            BOOL v67 = sub_242098(v42, (void *)(v66 + 16));
            if (v67) {
              break;
            }
            uint64_t v66 = *(void *)(v66 + 8);
          }
          while (v65 != v66);
          if (v67) {
            goto LABEL_100;
          }
        }
      }
    }
LABEL_98:
    uint64_t v68 = v160[1];
    uint64_t v69 = v160[2];
    if (sub_13878C(a4, v68, v69, v156, (uint64_t *)v174, v21)
      && sub_13878C(a4, v68, v69, v156, (uint64_t *)v174, v42))
    {
      goto LABEL_100;
    }
LABEL_117:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
    sub_12EA14((void ***)&__p);
    uint64_t v46 = *(void *)(v46 + 8);
    uint64_t v76 = *v154;
    if (v46 == *v154)
    {
      char v24 = v150;
    }
    else
    {
      char v24 = v150;
      while ((sub_12EA98(v148, v46 + 16) & 1) == 0)
      {
        uint64_t v46 = *(void *)(v46 + 8);
        if (v46 == v76)
        {
          uint64_t v46 = v76;
          break;
        }
      }
    }
    if (v46 == v152)
    {
      std::string::size_type v39 = v170.__r_.__value_.__l.__size_;
LABEL_129:
      uint64_t v41 = v144;
LABEL_130:
      sub_4636C(v41);
      std::string::size_type v38 = v147;
LABEL_131:
      uint64_t v77 = v24 + 2;
      char v24 = (uint64_t *)v39;
      if (v77 != (uint64_t *)v39)
      {
        char v24 = v77;
        while ((sub_138B4C((uint64_t)&v170.__r_.__value_.__r.__words[2], (uint64_t)v24) & 1) == 0)
        {
          v24 += 2;
          if (v24 == (uint64_t *)v39)
          {
            char v24 = (uint64_t *)v39;
            break;
          }
        }
      }
      if (v24 == (uint64_t *)v38)
      {
LABEL_142:
        uint64_t v79 = sub_32A48(8);
        if (*(unsigned char *)(v79 + 8))
        {
          uint64_t v80 = *(NSObject **)v79;
          if (*(void *)v79)
          {
            if (os_log_type_enabled(*(os_log_t *)v79, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2401;
              _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to find a valid input/output concrete route where both ports are connected and in the routing database. Scanning for concrete routes where only one is in the database.", buf, 0x12u);
            }
          }
        }
        BOOL v81 = *(_DWORD *)(a4 + 32) == 1668510820;
        *(_OWORD *)((char *)v170.__r_.__value_.__r.__words + 3) = *v143;
        _DWORD buf[16] = v81;
        *(_OWORD *)&buf[17] = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
        *(_DWORD *)&uint8_t buf[32] = *(_DWORD *)((char *)&v170.__r_.__value_.__r.__words[1] + 7);
        *(void *)buf = a4;
        *(void *)&buf[8] = v156;
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        uint64_t v83 = sub_12E380((uint64_t *)buf);
        uint64_t v84 = *(void *)buf;
        if (*(void *)buf == v83)
        {
LABEL_182:
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)off_6228D0;
          *(_OWORD *)&v161.__r_.__value_.__r.__words[1] = 1uLL;
          char v162 = 0;
          char v163 = 0;
          goto LABEL_183;
        }
        uint64_t v85 = v82;
        uint64_t v86 = (uint64_t)(v82 + 1);
        while (1)
        {
          sub_12E3FC((uint64_t **)&v178, a2, v83 + 16, a4, (uint64_t)v160);
          std::string::size_type v88 = v178.__r_.__value_.__l.__size_;
          std::string::size_type v87 = v178.__r_.__value_.__r.__words[0];
          if (v178.__r_.__value_.__r.__words[0] != v178.__r_.__value_.__l.__size_)
          {
            while (1)
            {
              uint64_t v89 = *(void *)v87 + 16;
              uint64_t v90 = *(void *)(*(void *)v87 + 24);
              if (v89 != v90)
              {
                do
                {
                  BOOL v91 = sub_242098(v21, (void *)(v90 + 16));
                  if (v91) {
                    break;
                  }
                  uint64_t v90 = *(void *)(v90 + 8);
                }
                while (v89 != v90);
                if (v91) {
                  break;
                }
              }
              v87 += 8;
              if (v87 == v88)
              {
                if (!sub_13878C(a4, v160[1], v160[2], v156, (uint64_t *)&v178, v21)) {
                  goto LABEL_172;
                }
                break;
              }
            }
            if ((sub_166230() & 1) == 0
              && sub_F7F68("VA_BuildAlternateRoutesAndActivateForLastInWins", 0x2FuLL) == &qword_659450)
            {
              os_signpost_id_t v92 = 0;
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_659478))
              {
                qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                __cxa_guard_release(&qword_659478);
              }
              os_signpost_id_t v92 = os_signpost_id_generate((os_log_t)qword_659470);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_659478))
              {
                qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                __cxa_guard_release(&qword_659478);
              }
              if (v92 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                uint64_t v93 = qword_659470;
                if (os_signpost_enabled((os_log_t)qword_659470))
                {
                  sub_3827A4(&v170, (unsigned int ***)&v178);
                  int v94 = SHIBYTE(v170.__r_.__value_.__r.__words[2]);
                  std::string::size_type v95 = v170.__r_.__value_.__r.__words[0];
                  sub_382CA8(&__p, v83 + 16);
                  int v96 = &v170;
                  if (v94 < 0) {
                    int v96 = (std::string *)v95;
                  }
                  p_p = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)char v174 = 136315394;
                  *(void *)&v174[4] = v96;
                  *(_WORD *)&v174[12] = 2080;
                  *(void *)&v174[14] = p_p;
                  _os_signpost_emit_with_name_impl(&def_1E50E8, v93, OS_SIGNPOST_INTERVAL_BEGIN, v92, "VA_BuildAlternateRoutesAndActivateForLastInWins", "ActivateForLastInWins, Primary route = %s, Abstract route =%s", v174, 0x16u);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v170.__r_.__value_.__l.__data_);
                  }
                }
              }
            }
            sub_1388CC(v179, v92);
            sub_12E4DC((uint64_t)&v161, a2, (unsigned int ***)&v178, *(uint64_t **)(v83 + 104), v160, (uint64_t *)v168);
            if (!LODWORD(v161.__r_.__value_.__r.__words[1]))
            {
              sub_1389B0((os_signpost_id_t *)v179);
              v170.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
              sub_12EA14((void ***)&v170);
              goto LABEL_183;
            }
            sub_11A520(&v161);
            sub_1389B0((os_signpost_id_t *)v179);
          }
LABEL_172:
          v170.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
          sub_12EA14((void ***)&v170);
          uint64_t v83 = *(void *)(v83 + 8);
          uint64_t v98 = *v85;
          if (v83 != *v85)
          {
            while ((sub_12EA98(v86, v83 + 16) & 1) == 0)
            {
              uint64_t v83 = *(void *)(v83 + 8);
              if (v83 == v98)
              {
                uint64_t v83 = v98;
                break;
              }
            }
          }
          if (v83 == v84) {
            goto LABEL_182;
          }
        }
      }
      goto LABEL_54;
    }
  }
  if (v48 != 2) {
    goto LABEL_98;
  }
  uint64_t v49 = 0;
  unsigned int v50 = 0;
  int v51 = -1;
  int v52 = -1;
  while (2)
  {
    uint64_t v53 = *(void *)(v47 + 8 * v49);
    uint64_t v54 = v53 + 16;
    uint64_t v55 = *(void *)(v53 + 24);
    if (v53 + 16 == v55)
    {
      BOOL v56 = 0;
LABEL_72:
      BOOL v58 = 0;
      goto LABEL_73;
    }
    do
    {
      BOOL v56 = sub_242098(v21, (void *)(v55 + 16));
      if (v56) {
        break;
      }
      uint64_t v55 = *(void *)(v55 + 8);
    }
    while (v54 != v55);
    uint64_t v57 = *(void *)(v53 + 24);
    if (v54 == v57) {
      goto LABEL_72;
    }
    do
    {
      BOOL v58 = sub_242098(v42, (void *)(v57 + 16));
      if (v58) {
        break;
      }
      uint64_t v57 = *(void *)(v57 + 8);
    }
    while (v54 != v57);
LABEL_73:
    char v59 = v52 != -1 || v58;
    char v60 = v56 & v59;
    BOOL v61 = v51 != -1 && v58;
    if ((v60 & 1) != 0 || v61) {
      goto LABEL_98;
    }
    if (v58) {
      int v51 = v50;
    }
    if (v56) {
      int v52 = v50;
    }
    uint64_t v47 = *(void *)v174;
    uint64_t v49 = ++v50;
    if (v50 < (unint64_t)((uint64_t)(*(void *)&v174[8] - *(void *)v174) >> 3)) {
      continue;
    }
    break;
  }
  if (v52 == -1 || v51 == -1 || v52 == v51) {
    goto LABEL_98;
  }
LABEL_100:
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_BuildAlternateRoutesAndActivateForLastInWins", 0x2FuLL) == &qword_659450)
  {
    os_signpost_id_t v70 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v70 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    if (v70 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v71 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        sub_3827A4(&__p, (unsigned int ***)v174);
        int v72 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v73 = __p.__r_.__value_.__r.__words[0];
        sub_382CA8(&v178, v46 + 16);
        uint64_t v74 = &__p;
        if (v72 < 0) {
          uint64_t v74 = (std::string *)v73;
        }
        uint64_t v75 = &v178;
        if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v75 = (std::string *)v178.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v179 = 136315394;
        char v180 = v74;
        __int16 v181 = 2080;
        v182 = v75;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v71, OS_SIGNPOST_INTERVAL_BEGIN, v70, "VA_BuildAlternateRoutesAndActivateForLastInWins", "ActivateForLastInWins, Primary route = %s, Abstract route =%s", v179, 0x16u);
        if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v178.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_1388CC(&v169, v70);
  sub_12E4DC((uint64_t)&v161, a2, (unsigned int ***)v174, *(uint64_t **)(v46 + 104), v160, (uint64_t *)v168);
  if (LODWORD(v161.__r_.__value_.__r.__words[1]))
  {
    sub_11A520(&v161);
    sub_1389B0(&v169);
    goto LABEL_117;
  }
  sub_1389B0(&v169);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
  sub_12EA14((void ***)&__p);
  sub_4636C(v144);
LABEL_183:
  sub_120690(v149, (uint64_t)&v161);
  sub_11A520(&v161);
  if (*(_DWORD *)(v149 + 8))
  {
LABEL_184:
    sub_4636C(v145);
    uint64_t v18 = v141;
    goto LABEL_185;
  }
  char v108 = v145;
LABEL_247:
  sub_4636C(v108);
LABEL_248:
  sub_12ED10(v168, (uint64_t)(a2 + 63));
  *(void *)buf = v168;
  sub_98D9C((void ***)buf);
}

void sub_12C5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  a35 = (uint64_t)&a47;
  sub_98D9C((void ***)&a35);
  sub_11A520(v47);
  _Unwind_Resume(a1);
}

void sub_12C744(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = a1;
  if (*(_DWORD *)(a3 + 32) == 1668246894)
  {
    *(void *)std::string::size_type v39 = 0;
    *(void *)&v39[8] = 0;
    sub_12CF28(a1, (uint64_t)a2, a3, a4, (uint64_t *)v39);
  }
  else
  {
    sub_3B7EC();
    if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
    {
      char v24 = (os_log_t *)sub_32A48(13);
      uint64_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string::size_type v39 = 136315394;
        *(void *)&v39[4] = "RoutingManager.cpp";
        *(_WORD *)&v39[12] = 1024;
        *(_DWORD *)&v39[14] = 2613;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v39, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    if (!*(void *)(v5 + 16))
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      uint64_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string::size_type v39 = 136315394;
        *(void *)&v39[4] = "RoutingManager.cpp";
        *(_WORD *)&v39[12] = 1024;
        *(_DWORD *)&v39[14] = 2614;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v39, 0x12u);
      }
      BOOL v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v29, "Precondition failure.");
    }
    *(void *)uint64_t v7 = off_6228D0;
    *(void *)(v7 + 8) = 1;
    *(void *)(v7 + 16) = 0;
    *(unsigned char *)(v7 + 24) = 0;
    *(unsigned char *)(v7 + 32) = 0;
    memset(v35, 0, sizeof(v35));
    BOOL v8 = *(_DWORD *)(v5 + 32) == 1668510820;
    *(_OWORD *)&v37[3] = *(_OWORD *)(a4 + 8);
    v39[16] = v8;
    *(_OWORD *)&v39[17] = *(_OWORD *)v37;
    *(_DWORD *)&v39[32] = *(_DWORD *)&v37[15];
    *(void *)std::string::size_type v39 = v5;
    *(void *)&v39[8] = a4 + 24;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v9 = sub_12E380((uint64_t *)v39);
    uint64_t v32 = v10;
    uint64_t v11 = v9;
    uint64_t v31 = *(void *)v39;
    if (*(void *)v39 != v9)
    {
      uint64_t v12 = (uint64_t)(v10 + 1);
      uint64_t v30 = v7;
      while (1)
      {
        sub_12E3FC(v34, a2, v11 + 16, v5, a4);
        if (v34[0] != v34[1])
        {
          if ((sub_166230() & 1) == 0
            && sub_F7F68("VA_BuildAlternateRoutesAndActivateForNormal", 0x2BuLL) == &qword_659450)
          {
            os_signpost_id_t v13 = 0;
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_659478))
            {
              qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_659478);
            }
            os_signpost_id_t v13 = os_signpost_id_generate((os_log_t)qword_659470);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_659478))
            {
              qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_659478);
            }
            if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v14 = qword_659470;
              if (os_signpost_enabled((os_log_t)qword_659470))
              {
                sub_3827A4((std::string *)v37, (unsigned int ***)v34);
                uint64_t v15 = v5;
                int v16 = SBYTE3(v38);
                std::string::size_type v17 = *(unsigned char **)v37;
                sub_382CA8(&__p, v11 + 16);
                uint64_t v18 = v37;
                if (v16 < 0) {
                  uint64_t v18 = v17;
                }
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136315394;
                BOOL v43 = v18;
                __int16 v44 = 2080;
                uint64_t v45 = p_p;
                _os_signpost_emit_with_name_impl(&def_1E50E8, v14, OS_SIGNPOST_INTERVAL_BEGIN, v13, "VA_BuildAlternateRoutesAndActivateForNormal", "ActivateForNormal, Primary route = %s, Abstract route = %s", buf, 0x16u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                uint64_t v5 = v15;
                if (SBYTE3(v38) < 0) {
                  operator delete(*(void **)v37);
                }
                uint64_t v7 = v30;
              }
            }
          }
          os_signpost_id_t v33 = v13;
          uint64_t v20 = sub_32A48(42);
          if (*(unsigned char *)(v20 + 8))
          {
            uint64_t v21 = *(NSObject **)v20;
            if (*(void *)v20)
            {
              if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)uint64_t v37 = 136315650;
                *(void *)&v37[4] = "SignpostUtilities.h";
                *(_WORD *)&v37[12] = 1024;
                *(_DWORD *)&v37[14] = 70;
                *(_WORD *)&v37[18] = 2080;
                std::string::size_type v38 = "kBuildAlternateRoutesAndActivateForNormal";
                _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", v37, 0x1Cu);
              }
            }
          }
          sub_12E4DC((uint64_t)v37, a2, (unsigned int ***)v34, *(uint64_t **)(v11 + 104), (uint64_t *)a4, (uint64_t *)v35);
          sub_120690(v7, (uint64_t)v37);
          sub_11A520(v37);
          int v22 = *(_DWORD *)(v7 + 8);
          sub_12E878(&v33);
          if (!v22) {
            break;
          }
        }
        *(void *)uint64_t v37 = v34;
        sub_12EA14((void ***)v37);
        uint64_t v11 = *(void *)(v11 + 8);
        uint64_t v23 = *v32;
        if (v11 != *v32)
        {
          while ((sub_12EA98(v12, v11 + 16) & 1) == 0)
          {
            uint64_t v11 = *(void *)(v11 + 8);
            if (v11 == v23)
            {
              uint64_t v11 = v23;
              break;
            }
          }
        }
        if (v11 == v31) {
          goto LABEL_40;
        }
      }
      *(void *)uint64_t v37 = v34;
      sub_12EA14((void ***)v37);
    }
LABEL_40:
    sub_12ED10(v35, (uint64_t)(a2 + 63));
    *(void *)std::string::size_type v39 = v35;
    sub_98D9C((void ***)v39);
  }
}

void sub_12CD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  __cxa_free_exception(v39);
  _Unwind_Resume(a1);
}

void *sub_12CDFC(uint64_t a1, void *__p, void *a3)
{
  if (__p != a3)
  {
    uint64_t v4 = __p;
    uint64_t v6 = *a3;
    uint64_t v7 = *__p;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      BOOL v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      uint64_t v9 = (std::__shared_weak_count *)v4[3];
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

uint64_t sub_12CE80(uint64_t a1)
{
  return a1;
}

void sub_12CEB4(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unsigned int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_8108(v3 + 3);
        operator delete(v3);
        unsigned int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_12CF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v149 = (os_log_t *)sub_32A48(13);
    uint64_t v150 = *v149;
    if (*v149 && os_log_type_enabled(*v149, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2507;
      _os_log_impl(&def_1E50E8, v150, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(void *)(a3 + 16))
  {
    uint64_t v152 = (os_log_t *)sub_32A48(13);
    uint64_t v153 = *v152;
    if (*v152 && os_log_type_enabled(*v152, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2508;
      _os_log_impl(&def_1E50E8, v153, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    v154 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v154, "Precondition failure.");
  }
  uint64_t v8 = sub_32A48(8);
  if (*(unsigned char *)(v8 + 8))
  {
    uint64_t v9 = *(NSObject **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        sub_136B74(v178, (uint64_t)a5);
        int v10 = v178[23] >= 0 ? v178 : *(unsigned char **)v178;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2511;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v10;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Activating for category kVirtualAudioPlugInRoutingCategoryMulti.  Override port: %s", buf, 0x1Cu);
        if ((v178[23] & 0x80000000) != 0) {
          operator delete(*(void **)v178);
        }
      }
    }
  }
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (v11 && (uint64_t v12 = std::__shared_weak_count::lock(v11)) != 0)
  {
    uint64_t v157 = *a5;
    sub_4636C(v12);
  }
  else
  {
    uint64_t v157 = 0;
  }
  memset(v173, 0, sizeof(v173));
  BOOL v13 = *(_DWORD *)(a3 + 32) == 1668510820;
  *(_OWORD *)&v178[3] = *(_OWORD *)(a4 + 8);
  _DWORD buf[16] = v13;
  *(_OWORD *)&buf[17] = *(_OWORD *)v178;
  *(_DWORD *)&uint8_t buf[32] = *(_DWORD *)&v178[15];
  *(void *)buf = a3;
  *(void *)&buf[8] = a4 + 24;
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  uint64_t v14 = sub_12E380((uint64_t *)buf);
  uint64_t v160 = v15;
  uint64_t v16 = v14;
  uint64_t v159 = *(void *)buf;
  if (*(void *)buf != v14)
  {
    v164 = (void *)(a3 + 72);
    uint64_t v167 = a1;
    uint64_t v155 = (uint64_t)(v15 + 1);
    uint64_t v156 = (uint64_t *)a4;
    uint64_t v158 = a3;
    while (1)
    {
      sub_12E3FC(&v171, (_DWORD *)a2, v16 + 16, a3, a4);
      if (v171 != v172)
      {
        if ((char *)v172 - (char *)v171 != 8)
        {
          uint64_t v144 = (os_log_t *)sub_32A48(13);
          int v145 = *v144;
          if (*v144 && os_log_type_enabled(*v144, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string v178 = 136315394;
            *(void *)&v178[4] = "RoutingManager.cpp";
            *(_WORD *)&v178[12] = 1024;
            *(_DWORD *)&v178[14] = 2528;
            _os_log_impl(&def_1E50E8, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Multi does not support decoupled IO routing.\"", v178, 0x12u);
          }
          CFTypeRef v146 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v146, "Multi does not support decoupled IO routing.");
LABEL_269:
        }
        uint64_t v17 = sub_32A48(8);
        if (*(unsigned char *)(v17 + 8))
        {
          uint64_t v18 = *(NSObject **)v17;
          if (*(void *)v17)
          {
            if (os_log_type_enabled(*(os_log_t *)v17, OS_LOG_TYPE_DEBUG))
            {
              sub_3827A4(&v175, (unsigned int ***)&v171);
              unsigned int v19 = &v175;
              if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unsigned int v19 = (std::string *)v175.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string v178 = 136315650;
              *(void *)&v178[4] = "RoutingManager.cpp";
              *(_WORD *)&v178[12] = 1024;
              *(_DWORD *)&v178[14] = 2529;
              *(_WORD *)&v178[18] = 2080;
              *(void *)&v178[20] = v19;
              _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built concrete route(s): %s.", v178, 0x1Cu);
              if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v175.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        uint64_t v161 = v16;
        long long v20 = 0uLL;
        memset(&__p, 0, sizeof(__p));
        uint64_t v21 = *(std::string::size_type **)(a2 + 504);
        int v22 = *(std::string::size_type **)(a2 + 512);
        if (v21 != v22)
        {
          while (1)
          {
            v168.__r_.__value_.__r.__words[0] = 0;
            uint64_t v23 = (std::__shared_weak_count *)v21[1];
            if (v23) {
              break;
            }
LABEL_82:
            v21 += 2;
            if (v21 == v22)
            {
              long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              std::string::size_type v64 = __p.__r_.__value_.__r.__words[2];
              goto LABEL_85;
            }
          }
          char v24 = std::__shared_weak_count::lock(v23);
          v168.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
          if (v24)
          {
            v168.__r_.__value_.__r.__words[0] = *v21;
            if (!v168.__r_.__value_.__r.__words[0])
            {
LABEL_80:
              if (v24) {
                sub_4636C(v24);
              }
              goto LABEL_82;
            }
          }
          else if (!v168.__r_.__value_.__r.__words[0])
          {
            goto LABEL_80;
          }
          long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          int64_t v26 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          uint64_t v27 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
          uint64_t v28 = (void *)(__p.__r_.__value_.__r.__words[0]
                         + ((__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) & 0xFFFFFFFFFFFFFFF0));
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            uint64_t v31 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 60) {
              sub_60548();
            }
            unint64_t v32 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3;
            if (v32 <= v31) {
              unint64_t v32 = v27 + 1;
            }
            if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            uint64_t v177 = &__p.__r_.__value_.__s.__data_[16];
            if (v33) {
              unint64_t v33 = (unint64_t)sub_10724(v33);
            }
            else {
              uint64_t v34 = 0;
            }
            uint64_t v45 = (void *)(v33 + 16 * v27);
            v175.__r_.__value_.__r.__words[0] = v33;
            v175.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
            v175.__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
            std::string::size_type v176 = v33 + 16 * v34;
            if (v27 == v34)
            {
              if (v26 < 1)
              {
                if ((void)v25 == *((void *)&v25 + 1)) {
                  unint64_t v47 = 1;
                }
                else {
                  unint64_t v47 = v26 >> 3;
                }
                *(void *)&v178[32] = (char *)&__p.__r_.__value_.__l + 16;
                uint64_t v48 = (char *)sub_10724(v47);
                std::string::size_type size = v175.__r_.__value_.__l.__size_;
                int64_t v51 = v175.__r_.__value_.__r.__words[2] - v175.__r_.__value_.__l.__size_;
                if (v175.__r_.__value_.__r.__words[2] == v175.__r_.__value_.__l.__size_)
                {
                  int64x2_t v56 = vdupq_n_s64(v175.__r_.__value_.__l.__size_);
                  unint64_t v53 = (unint64_t)&v48[16 * (v47 >> 2)];
                }
                else
                {
                  uint64_t v52 = v51 >> 4;
                  unint64_t v53 = (unint64_t)&v48[16 * (v47 >> 2) + (v51 & 0xFFFFFFFFFFFFFFF0)];
                  uint64_t v54 = 16 * v52;
                  uint64_t v55 = &v48[16 * (v47 >> 2)];
                  do
                  {
                    *(_OWORD *)uint64_t v55 = *(_OWORD *)size;
                    v55 += 16;
                    *(void *)std::string::size_type size = 0;
                    *(void *)(size + 8) = 0;
                    size += 16;
                    v54 -= 16;
                  }
                  while (v54);
                  int64x2_t v56 = *(int64x2_t *)&v175.__r_.__value_.__r.__words[1];
                }
                std::string::size_type v57 = v175.__r_.__value_.__r.__words[0];
                std::string::size_type v58 = v176;
                v175.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                v175.__r_.__value_.__l.__size_ = (std::string::size_type)&v48[16 * (v47 >> 2)];
                *(int64x2_t *)&v178[8] = v56;
                v175.__r_.__value_.__r.__words[2] = v53;
                std::string::size_type v176 = (std::string::size_type)&v48[16 * v49];
                *(void *)std::string v178 = v57;
                *(void *)&v178[24] = v58;
                sub_98E24((uint64_t)v178);
                uint64_t v45 = (void *)v175.__r_.__value_.__r.__words[2];
              }
              else
              {
                if (v31 >= 0) {
                  unint64_t v46 = v27 + 1;
                }
                else {
                  unint64_t v46 = v27 + 2;
                }
                v45 -= 2 * (v46 >> 1);
                v175.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
                v175.__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
              }
            }
            *uint64_t v45 = v168.__r_.__value_.__r.__words[0];
            std::string::size_type v59 = v168.__r_.__value_.__l.__size_;
            v45[1] = v168.__r_.__value_.__l.__size_;
            if (v59)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
              uint64_t v45 = (void *)v175.__r_.__value_.__r.__words[2];
            }
            v175.__r_.__value_.__r.__words[2] = (std::string::size_type)(v45 + 2);
            v175.__r_.__value_.__l.__size_ = sub_98E84((uint64_t)&__p.__r_.__value_.__r.__words[2], (uint64_t)v28, v28, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_, v175.__r_.__value_.__l.__size_);
            std::string::size_type v60 = __p.__r_.__value_.__l.__size_;
            BOOL v61 = (_OWORD *)v175.__r_.__value_.__r.__words[2];
            if (v28 != (void *)__p.__r_.__value_.__l.__size_)
            {
              do
              {
                *v61++ = *(_OWORD *)v28;
                *uint64_t v28 = 0;
                v28[1] = 0;
                v28 += 2;
              }
              while (v28 != (void *)v60);
              uint64_t v28 = (void *)__p.__r_.__value_.__l.__size_;
            }
            std::string::size_type v62 = __p.__r_.__value_.__r.__words[0];
            std::string::size_type v63 = __p.__r_.__value_.__r.__words[2];
            __p.__r_.__value_.__r.__words[0] = v175.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
            __p.__r_.__value_.__r.__words[2] = v176;
            v175.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
            std::string::size_type v176 = v63;
            v175.__r_.__value_.__r.__words[0] = v62;
            v175.__r_.__value_.__l.__size_ = v62;
            sub_98E24((uint64_t)&v175);
          }
          else if (v28 == (void *)__p.__r_.__value_.__l.__size_)
          {
            std::string::size_type v44 = v168.__r_.__value_.__l.__size_;
            *(_OWORD *)__p.__r_.__value_.__l.__size_ = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
            if (v44) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
            }
            __p.__r_.__value_.__l.__size_ = *((void *)&v25 + 1) + 16;
          }
          else
          {
            std::string::size_type v29 = __p.__r_.__value_.__l.__size_ - 16;
            uint64_t v30 = (_OWORD *)__p.__r_.__value_.__l.__size_;
            while (v29 < *((void *)&v25 + 1))
            {
              *v30++ = *(_OWORD *)v29;
              *(void *)std::string::size_type v29 = 0;
              *(void *)(v29 + 8) = 0;
              v29 += 16;
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
            if (*((void **)&v25 + 1) != v28 + 2)
            {
              unint64_t v35 = (std::__shared_weak_count **)(*((void *)&v25 + 1) - 8);
              uint64_t v36 = 16 * ((uint64_t)(*((void *)&v25 + 1) - (void)(v28 + 2)) >> 4);
              uint64_t v37 = v25 + 16 * v27 - 16;
              do
              {
                std::string::size_type v38 = (void *)(v37 + v36);
                long long v39 = *(_OWORD *)(v37 + v36);
                *std::string::size_type v38 = 0;
                v38[1] = 0;
                uint64_t v40 = *v35;
                *(_OWORD *)(v35 - 1) = v39;
                if (v40) {
                  sub_4636C(v40);
                }
                v35 -= 2;
                v36 -= 16;
              }
              while (v36);
            }
            long long v41 = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
            if (v168.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v168.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            *uint64_t v28 = v41;
            uint64_t v42 = v25 + 16 * v27;
            BOOL v43 = *(std::__shared_weak_count **)(v42 + 8);
            *(void *)(v42 + 8) = *((void *)&v41 + 1);
            if (v43) {
              sub_4636C(v43);
            }
          }
          char v24 = (std::__shared_weak_count *)v168.__r_.__value_.__l.__size_;
          goto LABEL_80;
        }
        std::string::size_type v64 = 0;
LABEL_85:
        long long v169 = v20;
        std::string::size_type v170 = v64;
        memset(&__p, 0, sizeof(__p));
        *(void *)std::string v178 = &__p;
        sub_74004((void ***)v178);
        uint64_t v65 = (os_unfair_lock_s **)*((void *)&v169 + 1);
        std::string v165 = (os_unfair_lock_s **)*((void *)&v169 + 1);
        uint64_t v66 = (os_unfair_lock_s **)v169;
LABEL_86:
        if (v66 != v65)
        {
          uint64_t v67 = *v171 + 16;
          uint64_t v68 = *(void **)(*v171 + 24);
          if (v68 == (void *)v67) {
            goto LABEL_221;
          }
          unsigned int os_unfair_lock_opaque = (*v66)[36]._os_unfair_lock_opaque;
          while (1)
          {
            os_signpost_id_t v70 = *v66;
            uint64_t v69 = (std::__shared_weak_count *)v66[1];
            if (v69) {
              atomic_fetch_add_explicit(&v69->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v71 = (std::__shared_weak_count *)v68[3];
            if (v71)
            {
              int v72 = std::__shared_weak_count::lock(v71);
              std::string::size_type v73 = v72;
              if (v72)
              {
                uint64_t v74 = (os_unfair_lock_s *)v68[2];
                atomic_fetch_add_explicit(&v72->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                sub_4636C(v72);
                if (!v69) {
                  goto LABEL_94;
                }
                goto LABEL_98;
              }
            }
            else
            {
              std::string::size_type v73 = 0;
            }
            uint64_t v74 = 0;
            if (!v69)
            {
LABEL_94:
              os_signpost_id_t v70 = 0;
              uint64_t v75 = 0;
              if (!v73) {
                goto LABEL_104;
              }
              goto LABEL_101;
            }
LABEL_98:
            uint64_t v75 = std::__shared_weak_count::lock(v69);
            if (!v75) {
              os_signpost_id_t v70 = 0;
            }
            if (!v73)
            {
LABEL_104:
              BOOL v77 = v70 == 0;
              if (!v75) {
                goto LABEL_106;
              }
LABEL_105:
              sub_4636C(v75);
              goto LABEL_106;
            }
LABEL_101:
            uint64_t v76 = std::__shared_weak_count::lock(v73);
            if (!v76) {
              goto LABEL_104;
            }
            BOOL v77 = v70 == v74;
            sub_4636C(v76);
            if (v75) {
              goto LABEL_105;
            }
LABEL_106:
            if (v77)
            {
              BOOL v78 = 1;
              goto LABEL_128;
            }
            uint64_t v80 = *v66;
            uint64_t v79 = (std::__shared_weak_count *)v66[1];
            if (v79) {
              atomic_fetch_add_explicit(&v79->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL v81 = (std::__shared_weak_count *)v68[5];
            if (v81)
            {
              uint64_t v82 = std::__shared_weak_count::lock(v81);
              uint64_t v83 = v82;
              if (v82)
              {
                uint64_t v84 = (os_unfair_lock_s *)v68[4];
                atomic_fetch_add_explicit(&v82->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                sub_4636C(v82);
                if (!v79) {
                  goto LABEL_118;
                }
              }
              else
              {
                uint64_t v84 = 0;
                if (!v79)
                {
LABEL_118:
                  uint64_t v80 = 0;
                  uint64_t v85 = 0;
                  if (!v83) {
                    goto LABEL_121;
                  }
                  goto LABEL_119;
                }
              }
            }
            else
            {
              uint64_t v84 = 0;
              uint64_t v83 = 0;
              if (!v79) {
                goto LABEL_118;
              }
            }
            uint64_t v85 = std::__shared_weak_count::lock(v79);
            if (!v85) {
              uint64_t v80 = 0;
            }
            if (!v83)
            {
LABEL_121:
              BOOL v78 = v80 == 0;
              goto LABEL_122;
            }
LABEL_119:
            uint64_t v86 = std::__shared_weak_count::lock(v83);
            if (!v86) {
              goto LABEL_121;
            }
            BOOL v78 = v80 == v84;
            sub_4636C(v86);
LABEL_122:
            if (v85) {
              sub_4636C(v85);
            }
            if (v83) {
              std::__shared_weak_count::__release_weak(v83);
            }
            if (v79) {
              std::__shared_weak_count::__release_weak(v79);
            }
LABEL_128:
            if (v73) {
              std::__shared_weak_count::__release_weak(v73);
            }
            if (v69) {
              std::__shared_weak_count::__release_weak(v69);
            }
            if (v78)
            {
              uint64_t v87 = sub_32A48(8);
              if (*(unsigned char *)(v87 + 8))
              {
                std::string::size_type v88 = *(NSObject **)v87;
                if (*(void *)v87)
                {
                  if (os_log_type_enabled(*(os_log_t *)v87, OS_LOG_TYPE_DEBUG))
                  {
                    sub_4F64((uint64_t)&v175, *v66 + 2);
                    int v89 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
                    std::string::size_type v90 = v175.__r_.__value_.__r.__words[0];
                    sub_3827A4(&__p, (unsigned int ***)&v171);
                    BOOL v91 = &v175;
                    if (v89 < 0) {
                      BOOL v91 = (std::string *)v90;
                    }
                    p_p = &__p;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)std::string v178 = 136315906;
                    *(void *)&v178[4] = "RoutingManager.cpp";
                    *(_WORD *)&v178[12] = 1024;
                    *(_DWORD *)&v178[14] = 2538;
                    *(_WORD *)&v178[18] = 2080;
                    *(void *)&v178[20] = v91;
                    *(_WORD *)&v178[28] = 2080;
                    *(void *)&v178[30] = p_p;
                    _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_DEBUG, "%25s:%-5d Cached port %s is used in route(s) %s.", v178, 0x26u);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v175.__r_.__value_.__l.__data_);
                    }
                  }
                }
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D5B8, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_65D5B8))
              {
                qword_65D5B0 = 0;
                qword_65D5A8 = 0;
                qword_65D5A0 = (uint64_t)&qword_65D5A8;
                __cxa_guard_release(&qword_65D5B8);
              }
              uint64_t v93 = *v164;
              if (!*v164) {
                goto LABEL_162;
              }
              int v94 = v164;
              do
              {
                unsigned int v95 = *(_DWORD *)(v93 + 32);
                BOOL v96 = v95 >= os_unfair_lock_opaque;
                if (v95 >= os_unfair_lock_opaque) {
                  char v97 = (uint64_t *)v93;
                }
                else {
                  char v97 = (uint64_t *)(v93 + 8);
                }
                if (v96) {
                  int v94 = (void *)v93;
                }
                uint64_t v93 = *v97;
              }
              while (*v97);
              if (v94 == v164)
              {
LABEL_162:
                BOOL v100 = &qword_65D5A0;
              }
              else
              {
                unsigned int v98 = *((_DWORD *)v94 + 8);
                uint64_t v99 = v94 + 5;
                if (v98 <= os_unfair_lock_opaque) {
                  BOOL v100 = v99;
                }
                else {
                  BOOL v100 = &qword_65D5A0;
                }
              }
              if (v100[2])
              {
                uint64_t v101 = sub_32A48(8);
                if (*(unsigned char *)(v101 + 8))
                {
                  uint64_t v102 = *(NSObject **)v101;
                  if (*(void *)v101)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v101, OS_LOG_TYPE_DEBUG))
                    {
                      sub_2417C(&v175, os_unfair_lock_opaque);
                      int v103 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
                      std::string::size_type v104 = v175.__r_.__value_.__r.__words[0];
                      sub_120764(&__p, (void *)*v100, v100 + 1);
                      uint64_t v105 = &v175;
                      if (v103 < 0) {
                        uint64_t v105 = (std::string *)v104;
                      }
                      char v106 = &__p;
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        char v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)std::string v178 = 136315906;
                      *(void *)&v178[4] = "RoutingManager.cpp";
                      *(_WORD *)&v178[12] = 1024;
                      *(_DWORD *)&v178[14] = 2542;
                      *(_WORD *)&v178[18] = 2080;
                      *(void *)&v178[20] = v105;
                      *(_WORD *)&v178[28] = 2080;
                      *(void *)&v178[30] = v106;
                      _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found excluded port types for port type %s (%s). Seeking connections to remove.", v178, 0x26u);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v175.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                }
                uint64_t v107 = *(uint64_t **)(*v171 + 24);
                if (v107 != (uint64_t *)(*v171 + 16))
                {
                  char v108 = v100 + 1;
                  do
                  {
                    uint64_t v109 = (void *)*v100;
                    if ((uint64_t *)*v100 == v108)
                    {
LABEL_191:
                      uint64_t v115 = sub_32A48(8);
                      if (*(unsigned char *)(v115 + 8))
                      {
                        std::string::size_type v116 = *(NSObject **)v115;
                        if (*(void *)v115)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v115, OS_LOG_TYPE_DEBUG))
                          {
                            sub_382124(&v175, v107 + 2);
                            int v117 = SHIBYTE(v175.__r_.__value_.__r.__words[2]);
                            std::string::size_type v118 = v175.__r_.__value_.__r.__words[0];
                            sub_2417C(&__p, os_unfair_lock_opaque);
                            uint64_t v119 = &v175;
                            if (v117 < 0) {
                              uint64_t v119 = (std::string *)v118;
                            }
                            BOOL v120 = &__p;
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              BOOL v120 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            }
                            *(_DWORD *)std::string v178 = 136315906;
                            *(void *)&v178[4] = "RoutingManager.cpp";
                            *(_WORD *)&v178[12] = 1024;
                            *(_DWORD *)&v178[14] = 2563;
                            *(_WORD *)&v178[18] = 2080;
                            *(void *)&v178[20] = v119;
                            *(_WORD *)&v178[28] = 2080;
                            *(void *)&v178[30] = v120;
                            _os_log_impl(&def_1E50E8, v116, OS_LOG_TYPE_DEBUG, "%25s:%-5d Connection %s does not use a port type excluded by %s.", v178, 0x26u);
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v175.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                      }
                      os_signpost_id_t v121 = (uint64_t *)v107[1];
                    }
                    else
                    {
                      while (1)
                      {
                        int v110 = *((_DWORD *)v109 + 7);
                        sub_43F38((uint64_t *)v178, v107 + 2, "", 2551);
                        if (*(_DWORD *)(*(void *)v178 + 144) == v110)
                        {
                          BOOL v111 = 1;
                        }
                        else
                        {
                          sub_43F38((uint64_t *)&v175, v107 + 4, "", 2552);
                          BOOL v111 = *(_DWORD *)(v175.__r_.__value_.__r.__words[0] + 144) == v110;
                          if (v175.__r_.__value_.__l.__size_) {
                            sub_4636C((std::__shared_weak_count *)v175.__r_.__value_.__l.__size_);
                          }
                        }
                        if (*(void *)&v178[8]) {
                          sub_4636C(*(std::__shared_weak_count **)&v178[8]);
                        }
                        if (v111) {
                          break;
                        }
                        uint64_t v112 = (uint64_t *)v109[1];
                        if (v112)
                        {
                          do
                          {
                            uint64_t v113 = v112;
                            uint64_t v112 = (uint64_t *)*v112;
                          }
                          while (v112);
                        }
                        else
                        {
                          do
                          {
                            uint64_t v113 = (uint64_t *)v109[2];
                            BOOL v114 = *v113 == (void)v109;
                            uint64_t v109 = v113;
                          }
                          while (!v114);
                        }
                        uint64_t v109 = v113;
                        if (v113 == v108) {
                          goto LABEL_191;
                        }
                      }
                      uint64_t v122 = sub_32A48(8);
                      if (*(unsigned char *)(v122 + 8))
                      {
                        int v123 = *(NSObject **)v122;
                        if (*(void *)v122)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v122, OS_LOG_TYPE_DEBUG))
                          {
                            sub_382124(&v175, v107 + 2);
                            if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              std::string::size_type v124 = &v175;
                            }
                            else {
                              std::string::size_type v124 = (std::string *)v175.__r_.__value_.__r.__words[0];
                            }
                            sub_2417C(&__p, os_unfair_lock_opaque);
                            int v125 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                            std::string::size_type v126 = __p.__r_.__value_.__r.__words[0];
                            sub_120764(&v168, (void *)*v100, v100 + 1);
                            int v127 = &__p;
                            if (v125 < 0) {
                              int v127 = (std::string *)v126;
                            }
                            uint64_t v128 = &v168;
                            if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              uint64_t v128 = (std::string *)v168.__r_.__value_.__r.__words[0];
                            }
                            *(_DWORD *)std::string v178 = 136316162;
                            *(void *)&v178[4] = "RoutingManager.cpp";
                            *(_WORD *)&v178[12] = 1024;
                            *(_DWORD *)&v178[14] = 2558;
                            *(_WORD *)&v178[18] = 2080;
                            *(void *)&v178[20] = v124;
                            *(_WORD *)&v178[28] = 2080;
                            *(void *)&v178[30] = v127;
                            *(_WORD *)&v178[38] = 2080;
                            uint64_t v179 = v128;
                            _os_log_impl(&def_1E50E8, v123, OS_LOG_TYPE_DEBUG, "%25s:%-5d Connection %s uses a port type excluded by %s (one of %s). Removing connection.", v178, 0x30u);
                            if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v168.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v175.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                      }
                      uint64_t v129 = *v171;
                      uint64_t v130 = *v107;
                      os_signpost_id_t v121 = (uint64_t *)v107[1];
                      *(void *)(v130 + 8) = v121;
                      *(void *)v107[1] = v130;
                      --*(void *)(v129 + 32);
                      sub_125D44(v107 + 2);
                      operator delete(v107);
                    }
                    uint64_t v107 = v121;
                  }
                  while (v121 != (uint64_t *)(*v171 + 16));
                }
              }
LABEL_221:
              v66 += 2;
              uint64_t v65 = v165;
              goto LABEL_86;
            }
            uint64_t v68 = (void *)v68[1];
            if (v68 == (void *)v67) {
              goto LABEL_221;
            }
          }
        }
        *(void *)std::string v178 = &v169;
        sub_74004((void ***)v178);
        uint64_t v131 = *v171;
        if (!*(void *)(*v171 + 32))
        {
          std::string::size_type v147 = (os_log_t *)sub_32A48(13);
          uint64_t v148 = *v147;
          if (*v147 && os_log_type_enabled(*v147, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string v178 = 136315394;
            *(void *)&v178[4] = "RoutingManager.cpp";
            *(_WORD *)&v178[12] = 1024;
            *(_DWORD *)&v178[14] = 2572;
            _os_log_impl(&def_1E50E8, v148, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Somehow removed all connections from our concrete route.\"", v178, 0x12u);
          }
          CFTypeRef v146 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v146, "Somehow removed all connections from our concrete route.");
          goto LABEL_269;
        }
        a4 = (uint64_t)v156;
        uint64_t v16 = v161;
        if (v157)
        {
          uint64_t v132 = (void *)(v131 + 16);
          for (uint64_t i = *(void **)(v131 + 24); ; uint64_t i = (void *)i[1])
          {
            if (i == v132) {
              goto LABEL_250;
            }
            sub_43F38((uint64_t *)v178, i + 2, "", 2577);
            if ((*(_WORD *)(*(void *)v178 + 184) & 4) == 0)
            {
              BOOL v134 = 0;
              goto LABEL_245;
            }
            uint64_t v135 = (std::__shared_weak_count *)i[3];
            if (!v135) {
              break;
            }
            uint64_t v136 = std::__shared_weak_count::lock(v135);
            uint64_t v137 = v136;
            if (!v136) {
              goto LABEL_236;
            }
            uint64_t v138 = i[2];
            atomic_fetch_add_explicit(&v136->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_4636C(v136);
            uint64_t v139 = std::__shared_weak_count::lock(v137);
            if (!v139) {
              uint64_t v138 = 0;
            }
LABEL_237:
            uint64_t v140 = (std::__shared_weak_count *)a5[1];
            if (!v140 || (uint64_t v141 = std::__shared_weak_count::lock(v140)) == 0)
            {
              BOOL v134 = v138 == 0;
              if (!v139) {
                goto LABEL_243;
              }
LABEL_242:
              sub_4636C(v139);
              goto LABEL_243;
            }
            BOOL v134 = v138 == *a5;
            sub_4636C(v141);
            if (v139) {
              goto LABEL_242;
            }
LABEL_243:
            if (v137) {
              std::__shared_weak_count::__release_weak(v137);
            }
LABEL_245:
            if (*(void *)&v178[8]) {
              sub_4636C(*(std::__shared_weak_count **)&v178[8]);
            }
            if (v134) {
              goto LABEL_249;
            }
          }
          uint64_t v137 = 0;
LABEL_236:
          uint64_t v138 = 0;
          uint64_t v139 = 0;
          goto LABEL_237;
        }
LABEL_249:
        sub_12E4DC((uint64_t)v178, (uint64_t *)a2, (unsigned int ***)&v171, *(uint64_t **)(v161 + 104), v156, (uint64_t *)v173);
        sub_120690(v167, (uint64_t)v178);
        int v142 = (void ***)sub_11A520(v178);
        if (!*(_DWORD *)(v167 + 8)) {
          break;
        }
      }
LABEL_250:
      *(void *)std::string v178 = &v171;
      sub_12EA14((void ***)v178);
      uint64_t v16 = *(void *)(v16 + 8);
      uint64_t v143 = *v160;
      if (v16 == *v160)
      {
        a3 = v158;
      }
      else
      {
        a3 = v158;
        while ((sub_12EA98(v155, v16 + 16) & 1) == 0)
        {
          uint64_t v16 = *(void *)(v16 + 8);
          if (v16 == v143)
          {
            uint64_t v16 = v143;
            break;
          }
        }
      }
      if (v16 == v159) {
        goto LABEL_259;
      }
    }
    *(void *)std::string v178 = &v171;
    sub_12EA14(v142);
  }
LABEL_259:
  sub_12ED10(v173, a2 + 504);
  *(void *)buf = v173;
  sub_98D9C((void ***)buf);
}

void sub_12E200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  __cxa_free_exception(v50);
  _Unwind_Resume(a1);
}

uint64_t sub_12E380(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 48)) {
    return a1[5];
  }
  uint64_t v2 = *a1;
  for (uint64_t i = *(void *)(*a1 + 8); i != v2; uint64_t i = *(void *)(i + 8))
  {
    if (sub_12EA98((uint64_t)(a1 + 1), i + 16))
    {
      uint64_t v2 = i;
      break;
    }
  }
  a1[5] = v2;
  *((unsigned char *)a1 + 48) = 1;
  return v2;
}

void sub_12E3FC(uint64_t **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)std::string __p = 0u;
  long long v16 = 0u;
  long long v10 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v11 = 1065353216;
  *(_OWORD *)uint64_t v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 1065353216;
  uint64_t v17 = 1065353216;
  sub_136F34(a1, a2, a3, a4, (const void ***)v8, a5);
  sub_7E020((char *)v16);
  uint64_t v5 = __p[0];
  __p[0] = 0;
  if (v5) {
    operator delete(v5);
  }
  sub_7E020((char *)v13);
  uint64_t v6 = v12[0];
  v12[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  sub_7E020((char *)v10);
  uint64_t v7 = v9[0];
  v9[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v18 = (void **)&v8[1] + 1;
  sub_4EDB8(&v18);
  uint64_t v18 = (void **)v8;
  sub_4EDB8(&v18);
}

void sub_12E4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_12E4DC(uint64_t a1, uint64_t *a2, unsigned int ***a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::string::size_type v29 = 0;
  if (a4)
  {
    uint64_t v8 = *a4;
    uint64_t v9 = a4[1];
    *(void *)buf = &v27;
    buf[8] = 0;
    if (v9 == v8)
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v10 = 0x6FB586FB586FB587 * ((v9 - v8) >> 3);
      if (v10 > 0x94F2094F2094F2) {
        sub_60548();
      }
      uint64_t v11 = (char *)sub_820A0(v10);
      uint64_t v12 = 0;
      uint64_t v27 = v11;
      uint64_t v28 = v11;
      std::string::size_type v29 = &v11[440 * v13];
      do
      {
        sub_127450((uint64_t)&v11[v12], v8 + v12);
        v12 += 440;
      }
      while (v8 + v12 != v9);
      unint64_t v14 = (unint64_t)&v11[v12];
      uint64_t v28 = &v11[v12];
    }
    uint64_t v15 = a6;
  }
  else
  {
    uint64_t v15 = a6;
    unint64_t v14 = 0;
  }
  uint64_t v16 = a5[46];
  for (uint64_t i = a5[47]; v16 != i; v16 += 440)
  {
    if (v14 >= (unint64_t)v29)
    {
      uint64_t v18 = 0x6FB586FB586FB587 * ((uint64_t)(v14 - (void)v27) >> 3);
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) > 0x94F2094F2094F2) {
        sub_60548();
      }
      if (0xDF6B0DF6B0DF6B0ELL * ((v29 - v27) >> 3) > v19) {
        unint64_t v19 = 0xDF6B0DF6B0DF6B0ELL * ((v29 - v27) >> 3);
      }
      if ((unint64_t)(0x6FB586FB586FB587 * ((v29 - v27) >> 3)) >= 0x4A7904A7904A79) {
        unint64_t v20 = 0x94F2094F2094F2;
      }
      else {
        unint64_t v20 = v19;
      }
      uint64_t v31 = &v29;
      if (v20) {
        unint64_t v20 = (unint64_t)sub_820A0(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      *(void *)buf = v20;
      *(void *)&buf[8] = v20 + 440 * v18;
      *(void *)&_DWORD buf[16] = *(void *)&buf[8];
      *(void *)&buf[24] = v20 + 440 * v21;
      sub_127450(*(uint64_t *)&buf[8], v16);
      *(void *)&buf[16] += 440;
      sub_136E10((uint64_t *)&v27, buf);
      unint64_t v14 = (unint64_t)v28;
      sub_136EE4((uint64_t)buf);
    }
    else
    {
      sub_127450(v14, v16);
      v14 += 440;
    }
    uint64_t v28 = (char *)v14;
  }
  uint64_t v22 = sub_32A48(8);
  if (*(unsigned char *)(v22 + 8))
  {
    uint64_t v23 = *(NSObject **)v22;
    if (*(void *)v22)
    {
      if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4729;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = 0x6FB586FB586FB587 * ((v28 - v27) >> 3);
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d %lu alternate route(s) required... Attempting to build if needed...", buf, 0x1Cu);
      }
    }
  }
  sub_12EF54(a1, a2, (uint64_t *)&v27, 0, a5, a3, v15);
  *(void *)buf = &v27;
  sub_81CEC((void ***)buf);
}

void sub_12E7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_81CEC((void ***)va);
  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_12E878(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    unsigned int v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 70;
        __int16 v11 = 2080;
        uint64_t v12 = "kBuildAlternateRoutesAndActivateForNormal";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_BuildAlternateRoutesAndActivateForNormal", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_12EA08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_12EA14(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    os_signpost_id_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_12EEF4(--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_12EA98(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_240DB0(a2, *(void *)(a1 + 12));
  if (result)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v5 = *(void *)a1 + 8;
      uint64_t v6 = **(void ***)a1;
      if (v6 != (void *)v5)
      {
        while (1)
        {
          if (*(void *)(a2 + 8) != a2)
          {
            int v7 = *((_DWORD *)v6 + 7);
            uint64_t v8 = *(void *)(a2 + 8);
            do
            {
              BOOL v9 = *(_DWORD *)(v8 + 16) == v7 || *(_DWORD *)(v8 + 20) == v7;
              char v10 = v9;
              if (v9) {
                break;
              }
              uint64_t v8 = *(void *)(v8 + 8);
            }
            while (v8 != a2);
            if (v10) {
              break;
            }
          }
          __int16 v11 = (void *)v6[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              __int16 v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v6[2];
              BOOL v9 = *v12 == (void)v6;
              uint64_t v6 = v12;
            }
            while (!v9);
          }
          uint64_t v6 = v12;
          if (v12 == (void *)v5) {
            return 1;
          }
        }
        return 0;
      }
    }
    else
    {
      if (!*(void *)(a2 + 16))
      {
        char v24 = (os_log_t *)sub_32A48(8);
        long long v25 = *v24;
        if (*v24)
        {
          BOOL v26 = os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v26) {
            return result;
          }
          int v27 = 136315394;
          uint64_t v28 = "RouteUtilities.h";
          __int16 v29 = 1024;
          int v30 = 656;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No connections in connection list?", (uint8_t *)&v27, 0x12u);
        }
        return 0;
      }
      uint64_t v13 = *(void **)a1;
      if (*(void *)(*(void *)a1 + 16))
      {
        uint64_t v14 = *(void *)(a2 + 8);
        if (v14 != a2)
        {
          uint64_t v17 = (void *)*v13;
          uint64_t v15 = v13 + 1;
          uint64_t v16 = v17;
          while (1)
          {
            uint64_t v18 = v16;
            if (v16 != v15)
            {
              uint64_t v18 = v16;
              while (*((_DWORD *)v18 + 7) != *(_DWORD *)(v14 + 16))
              {
                unint64_t v19 = (void *)v18[1];
                if (v19)
                {
                  do
                  {
                    unint64_t v20 = v19;
                    unint64_t v19 = (void *)*v19;
                  }
                  while (v19);
                }
                else
                {
                  do
                  {
                    unint64_t v20 = (void *)v18[2];
                    BOOL v9 = *v20 == (void)v18;
                    uint64_t v18 = v20;
                  }
                  while (!v9);
                }
                uint64_t v18 = v20;
                if (v20 == v15) {
                  goto LABEL_37;
                }
              }
            }
            if (v18 == v15)
            {
LABEL_37:
              uint64_t v21 = v16;
              if (v16 != v15)
              {
                uint64_t v21 = v16;
                while (*((_DWORD *)v21 + 7) != *(_DWORD *)(v14 + 20))
                {
                  uint64_t v22 = (void *)v21[1];
                  if (v22)
                  {
                    do
                    {
                      uint64_t v23 = v22;
                      uint64_t v22 = (void *)*v22;
                    }
                    while (v22);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v23 = (void *)v21[2];
                      BOOL v9 = *v23 == (void)v21;
                      uint64_t v21 = v23;
                    }
                    while (!v9);
                  }
                  uint64_t v21 = v23;
                  if (v23 == v15) {
                    return 1;
                  }
                }
              }
              if (v21 == v15) {
                return 1;
              }
            }
            uint64_t result = 0;
            uint64_t v14 = *(void *)(v14 + 8);
            if (v14 == a2) {
              return result;
            }
          }
        }
        return 0;
      }
    }
    return 1;
  }
  return result;
}

void sub_12ED10(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return;
  }
  uint64_t v6 = *(void **)(a2 + 8);
  do
  {
    int v7 = *(void **)a2;
    if (*(void **)a2 == v6) {
      goto LABEL_44;
    }
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)v3[1];
      if (v8)
      {
        BOOL v9 = std::__shared_weak_count::lock(v8);
        char v10 = v9;
        if (v9)
        {
          uint64_t v11 = *v3;
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v9);
        }
        else
        {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
        char v10 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)v7[1];
      if (v12)
      {
        uint64_t v13 = std::__shared_weak_count::lock(v12);
        uint64_t v14 = v13;
        if (v13)
        {
          uint64_t v15 = *v7;
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v13);
          if (!v10) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v15 = 0;
          if (!v10)
          {
LABEL_19:
            uint64_t v11 = 0;
            uint64_t v16 = 0;
            if (!v14) {
              goto LABEL_23;
            }
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
        if (!v10) {
          goto LABEL_19;
        }
      }
      uint64_t v16 = std::__shared_weak_count::lock(v10);
      if (!v16) {
        uint64_t v11 = 0;
      }
      if (!v14)
      {
LABEL_23:
        BOOL v18 = v11 == 0;
        if (!v16) {
          goto LABEL_25;
        }
LABEL_24:
        sub_4636C(v16);
        goto LABEL_25;
      }
LABEL_20:
      uint64_t v17 = std::__shared_weak_count::lock(v14);
      if (!v17) {
        goto LABEL_23;
      }
      BOOL v18 = v11 == v15;
      sub_4636C(v17);
      if (v16) {
        goto LABEL_24;
      }
LABEL_25:
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v18)
      {
        unint64_t v19 = v7 + 2;
        unint64_t v20 = *(void **)(a2 + 8);
        if (v7 + 2 == v20)
        {
          uint64_t v6 = v7;
        }
        else
        {
          do
          {
            uint64_t v6 = v19;
            long long v21 = *(_OWORD *)v19;
            void *v19 = 0;
            v19[1] = 0;
            uint64_t v22 = (std::__shared_weak_count *)*(v19 - 1);
            *((_OWORD *)v19 - 1) = v21;
            if (v22) {
              std::__shared_weak_count::__release_weak(v22);
            }
            v19 += 2;
          }
          while (v6 + 2 != v20);
          unint64_t v19 = *(void **)(a2 + 8);
        }
        while (v19 != v6)
        {
          uint64_t v23 = (std::__shared_weak_count *)*(v19 - 1);
          if (v23) {
            std::__shared_weak_count::__release_weak(v23);
          }
          v19 -= 2;
        }
        *(void *)(a2 + 8) = v6;
      }
      else
      {
        v7 += 2;
        uint64_t v6 = *(void **)(a2 + 8);
      }
    }
    while (v7 != v6);
    uint64_t v2 = a1[1];
LABEL_44:
    v3 += 2;
  }
  while (v3 != v2);
}

uint64_t *sub_12EEF4(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_125CD0((uint64_t *)(v1 + 16));
    operator delete();
  }
  return result;
}

void sub_12EF54(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4, uint64_t *a5, unsigned int ***a6, uint64_t *a7)
{
  unint64_t v9 = 0x6FB586FB586FB587 * ((a3[1] - *a3) >> 3);
  uint64_t v10 = sub_32A48(8);
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v184 = a1;
  if (v9 <= a4)
  {
    if (v11)
    {
      char v97 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4910;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a4;
          _os_log_impl(&def_1E50E8, v97, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to activate after reviewing and successfully building concrete route for %u alternate device specifications...", buf, 0x18u);
        }
      }
    }
    uint64_t v98 = sub_32A48(8);
    if (*(unsigned char *)(v98 + 8))
    {
      uint64_t v99 = *(NSObject **)v98;
      if (*(void *)v98)
      {
        if (os_log_type_enabled(*(os_log_t *)v98, OS_LOG_TYPE_DEBUG))
        {
          sub_3827A4(&v195, a6);
          BOOL v100 = (v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v195
               : (std::string *)v195.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4911;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v100;
          _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route(s): %s.", buf, 0x1Cu);
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v195.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    (*(void (**)(uint64_t *, unsigned int ***))(*a5 + 16))(a5, a6);
    if (*(_DWORD *)(a1 + 8))
    {
      uint64_t v101 = *a6;
      v189 = a6[1];
      if (*a6 != v189)
      {
        do
        {
          uint64_t v102 = (uint64_t)(*v101 + 4);
          for (uint64_t i = (void *)*((void *)*v101 + 3); i != (void *)v102; uint64_t i = (void *)i[1])
          {
            std::string::size_type v104 = (long long *)(i + 2);
            sub_43F38((uint64_t *)buf, i + 2, "", 115);
            char v105 = (*(uint64_t (**)(void))(**(void **)buf + 160))(*(void *)buf);
            if (*(void *)&buf[8]) {
              sub_4636C(*(std::__shared_weak_count **)&buf[8]);
            }
            if ((v105 & 1) == 0)
            {
              char v106 = (void *)a7[1];
              unint64_t v107 = a7[2];
              if ((unint64_t)v106 >= v107)
              {
                uint64_t v111 = ((uint64_t)v106 - *a7) >> 4;
                unint64_t v112 = v111 + 1;
                if ((unint64_t)(v111 + 1) >> 60) {
                  goto LABEL_268;
                }
                uint64_t v113 = v107 - *a7;
                if (v113 >> 3 > v112) {
                  unint64_t v112 = v113 >> 3;
                }
                if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v114 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v114 = v112;
                }
                *(void *)&unsigned char buf[32] = a7 + 2;
                uint64_t v115 = (char *)sub_10724(v114);
                std::string::size_type v116 = &v115[16 * v111];
                *(void *)buf = v115;
                *(void *)&buf[8] = v116;
                *(void *)&buf[24] = &v115[16 * v117];
                long long v118 = *v104;
                *(_OWORD *)std::string::size_type v116 = *v104;
                if (*((void *)&v118 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v118 + 1) + 16), 1uLL, memory_order_relaxed);
                }
                *(void *)&_DWORD buf[16] = v116 + 16;
                int v110 = a7;
                sub_FBB48(a7, buf);
                uint64_t v109 = (void *)a7[1];
                sub_131CB8((uint64_t)buf);
              }
              else
              {
                *char v106 = i[2];
                uint64_t v108 = i[3];
                v106[1] = v108;
                if (v108) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v108 + 16), 1uLL, memory_order_relaxed);
                }
                uint64_t v109 = v106 + 2;
                int v110 = a7;
                a7[1] = (uint64_t)(v106 + 2);
              }
              v110[1] = (uint64_t)v109;
            }
            uint64_t v119 = (long long *)(i + 4);
            sub_43F38((uint64_t *)buf, i + 4, "", 119);
            char v120 = (*(uint64_t (**)(void))(**(void **)buf + 160))(*(void *)buf);
            if (*(void *)&buf[8]) {
              sub_4636C(*(std::__shared_weak_count **)&buf[8]);
            }
            if ((v120 & 1) == 0)
            {
              os_signpost_id_t v121 = (void *)a7[1];
              unint64_t v122 = a7[2];
              if ((unint64_t)v121 >= v122)
              {
                uint64_t v126 = ((uint64_t)v121 - *a7) >> 4;
                unint64_t v127 = v126 + 1;
                if ((unint64_t)(v126 + 1) >> 60) {
LABEL_268:
                }
                  sub_60548();
                uint64_t v128 = v122 - *a7;
                if (v128 >> 3 > v127) {
                  unint64_t v127 = v128 >> 3;
                }
                if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v129 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v129 = v127;
                }
                *(void *)&unsigned char buf[32] = a7 + 2;
                uint64_t v130 = (char *)sub_10724(v129);
                uint64_t v131 = &v130[16 * v126];
                *(void *)buf = v130;
                *(void *)&buf[8] = v131;
                *(void *)&buf[24] = &v130[16 * v132];
                long long v133 = *v119;
                *(_OWORD *)uint64_t v131 = *v119;
                if (*((void *)&v133 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v133 + 1) + 16), 1uLL, memory_order_relaxed);
                }
                *(void *)&_DWORD buf[16] = v131 + 16;
                int v125 = a7;
                sub_FBB48(a7, buf);
                std::string::size_type v124 = (void *)a7[1];
                sub_131CB8((uint64_t)buf);
              }
              else
              {
                void *v121 = i[4];
                uint64_t v123 = i[5];
                v121[1] = v123;
                if (v123) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 16), 1uLL, memory_order_relaxed);
                }
                std::string::size_type v124 = v121 + 2;
                int v125 = a7;
                a7[1] = (uint64_t)(v121 + 2);
              }
              v125[1] = (uint64_t)v124;
            }
          }
          ++v101;
        }
        while (v101 != v189);
      }
    }
    uint64_t v134 = sub_32A48(8);
    if (*(unsigned char *)(v134 + 8))
    {
      uint64_t v135 = *(NSObject **)v134;
      if (*(void *)v134)
      {
        if (os_log_type_enabled(*(os_log_t *)v134, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v136 = "failed";
          int v137 = *(_DWORD *)(a1 + 8);
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_DWORD *)buf = 136315650;
          if (!v137) {
            uint64_t v136 = "succeeded";
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4917;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v136;
          _os_log_impl(&def_1E50E8, v135, OS_LOG_TYPE_DEBUG, "%25s:%-5d Activation %s...", buf, 0x1Cu);
        }
      }
    }
    if (*(_DWORD *)(a1 + 8))
    {
      uint64_t v138 = (os_log_t *)sub_32A48(8);
      uint64_t v139 = *v138;
      if (*v138)
      {
        if (os_log_type_enabled(*v138, OS_LOG_TYPE_DEFAULT))
        {
          sub_3827A4(&v195, a6);
          uint64_t v140 = (v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v195
               : (std::string *)v195.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4919;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v140;
          _os_log_impl(&def_1E50E8, v139, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Activation failed for route %s", buf, 0x1Cu);
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v195.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  else
  {
    unsigned int v166 = a4;
    if (v11)
    {
      uint64_t v12 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = 0x6FB586FB586FB587 * ((a3[1] - *a3) >> 3);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4807;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a4;
          *(_WORD *)&buf[24] = 2048;
          *(void *)&buf[26] = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Reviewing alternate device specification %u of %lu...", buf, 0x22u);
        }
      }
    }
    unsigned int v160 = a4;
    uint64_t v14 = *a3;
    if (0x6FB586FB586FB587 * ((a3[1] - *a3) >> 3) <= (unint64_t)a4) {
      sub_131250();
    }
    uint64_t v15 = a2 + 67;
    uint64_t v16 = a2[67];
    if (!v16) {
      goto LABEL_17;
    }
    int v17 = *(_DWORD *)(v14 + 440 * v166 + 4);
    BOOL v18 = a2 + 67;
    do
    {
      int v19 = *(_DWORD *)(v16 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        long long v21 = (uint64_t *)v16;
      }
      else {
        long long v21 = (uint64_t *)(v16 + 8);
      }
      if (!v20) {
        BOOL v18 = (uint64_t *)v16;
      }
      uint64_t v16 = *v21;
    }
    while (*v21);
    if (v18 == v15 || v17 < *((_DWORD *)v18 + 7)) {
LABEL_17:
    }
      BOOL v18 = a2 + 67;
    uint64_t v165 = *a3;
    uint64_t v22 = *(void *)(v14 + 440 * v166 + 160);
    if (!v22) {
      sub_56964();
    }
    unsigned __int8 v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 48))(v22);
    uint64_t v24 = *(void *)(v165 + 440 * v166 + 224);
    if (!v24) {
      sub_56964();
    }
    if (((v18 == v15) & v23 & (*(unsigned int (**)(uint64_t, unsigned int ***))(*(void *)v24 + 48))(v24, a6)) != 0)
    {
      long long v25 = (void *)(v165 + 440 * v166);
      int v174 = sub_131268((uint64_t)a2, (uint64_t)v25);
      uint64_t v26 = sub_32A48(8);
      if (*(unsigned char *)(v26 + 8))
      {
        int v27 = *(NSObject **)v26;
        if (*(void *)v26)
        {
          if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(&v195, *(_DWORD *)(v165 + 440 * v166 + 60));
            int v28 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
            std::string::size_type v29 = v195.__r_.__value_.__r.__words[0];
            sub_82188(&__p, *(unsigned int **)(v165 + 440 * v166 + 8), *(unsigned int **)(v165 + 440 * v166 + 16));
            int v30 = &v195;
            if (v28 < 0) {
              int v30 = (std::string *)v29;
            }
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            int v32 = *(_DWORD *)(v165 + 440 * v166 + 56);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            unint64_t v33 = "Optional";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4817;
            *(_WORD *)&buf[18] = 2080;
            if (!v32) {
              unint64_t v33 = "Mandatory";
            }
            *(void *)&buf[20] = v30;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = p_p;
            *(_WORD *)&buf[38] = 2080;
            unsigned int v213 = v33;
            _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alternate device specification is for VAD type %s and uses port types %s. VAD is %s", buf, 0x30u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v195.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      uint64_t v173 = (unsigned int *)(v165 + 440 * v166 + 64);
      std::string::size_type v164 = sub_1312D4(*a2, *v173);
      unsigned int v34 = *v173;
      v195.__r_.__value_.__s.__data_[16] = *(_DWORD *)(v164 + 32) == 1668510820;
      HIDWORD(v195.__r_.__value_.__r.__words[2]) = v34;
      int v196 = v174;
      char v197 = 0;
      char v198 = 0;
      v195.__r_.__value_.__l.__size_ = (std::string::size_type)(a5 + 3);
      v195.__r_.__value_.__r.__words[0] = v164;
      uint64_t v200 = 0;
      uint64_t v199 = 0;
      uint64_t v35 = sub_12E380((uint64_t *)&v195);
      uint64_t v172 = v36;
      uint64_t v37 = v35;
      std::string::size_type v171 = v195.__r_.__value_.__r.__words[0];
      if (v195.__r_.__value_.__r.__words[0] != v35)
      {
        uint64_t v38 = v165 + 440 * v166;
        std::string v175 = (unsigned int *)(v38 + 60);
        uint64_t v169 = (uint64_t)(a5 + 6);
        char v162 = (unsigned __int8 *)(v38 + 96);
        uint64_t v159 = (unsigned int *)(v38 + 4);
        uint64_t v161 = (const void ***)(v38 + 264);
        uint64_t v182 = (uint64_t)(v36 + 1);
        std::string::size_type v170 = (void *)(v38 + 256);
        char v163 = (uint64_t *)(v38 + 192);
        do
        {
          uint64_t v39 = sub_32A48(8);
          if (*(unsigned char *)(v39 + 8))
          {
            uint64_t v40 = *(NSObject **)v39;
            if (*(void *)v39)
            {
              if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(&__p, *v175);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v41 = &__p;
                }
                else {
                  long long v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                sub_382CA8(&v216, v37 + 16);
                int v42 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
                std::string::size_type v43 = v216.__r_.__value_.__r.__words[0];
                LODWORD(v209) = *v173;
                HIDWORD(v209) = v174;
                LOBYTE(v210) = 0;
                BYTE4(v210) = 0;
                sub_383858((std::string *)v218, (uint64_t)&v209);
                std::string::size_type v44 = &v216;
                if (v42 < 0) {
                  std::string::size_type v44 = (std::string *)v43;
                }
                uint64_t v45 = v218;
                if (SBYTE3(v220) < 0) {
                  uint64_t v45 = *(const char **)v218;
                }
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4826;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v41;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v44;
                *(_WORD *)&buf[38] = 2080;
                unsigned int v213 = v45;
                _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Checking whether the alternate device specification for %s allows abstract route %s for category/mode %s...", buf, 0x30u);
                if (SBYTE3(v220) < 0) {
                  operator delete(*(void **)v218);
                }
                if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v216.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          if (*v170)
          {
            if ((*(uint64_t (**)(void, uint64_t, unsigned int ***, uint64_t *, uint64_t *))(*(void *)*v170 + 48))(*v170, v37 + 16, a6, a5 + 1, a5 + 19))goto LABEL_56; {
          }
            }
          else if (sub_381DD4(v25, v37 + 16))
          {
LABEL_56:
            uint64_t v46 = sub_32A48(8);
            if (*(unsigned char *)(v46 + 8))
            {
              unint64_t v47 = *(NSObject **)v46;
              if (*(void *)v46)
              {
                if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
                {
                  sub_2417C(&__p, *v175);
                  int v48 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                  std::string::size_type v49 = __p.__r_.__value_.__r.__words[0];
                  sub_382CA8(&v216, v37 + 16);
                  unsigned int v50 = &__p;
                  if (v48 < 0) {
                    unsigned int v50 = (std::string *)v49;
                  }
                  int64_t v51 = &v216;
                  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    int64_t v51 = (std::string *)v216.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)buf = 136315906;
                  *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 4829;
                  *(_WORD *)&buf[18] = 2080;
                  *(void *)&buf[20] = v50;
                  *(_WORD *)&buf[28] = 2080;
                  *(void *)&buf[30] = v51;
                  _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alternate device specification for %s allows abstract route %s... Building concrete route...", buf, 0x26u);
                  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v216.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                }
              }
            }
            unsigned int v52 = *v175;
            v194[0] = 0;
            v194[1] = 0;
            unint64_t v193 = v194;
            sub_131464((uint64_t *)buf, v169, v52);
            sub_13150C((uint64_t *)&v193, *(void **)buf, &buf[8]);
            sub_10E118(*(void **)&buf[8]);
            unsigned int v53 = sub_131598(*v163, a5[1], a5[2]);
            *(_DWORD *)BOOL v218 = *v173;
            *(_DWORD *)&v218[4] = v174;
            v218[8] = 0;
            v218[12] = 0;
            unsigned int v54 = *v175;
            unsigned int v55 = *(_DWORD *)v25;
            int v56 = *v162;
            std::string::size_type v57 = operator new(0x20uLL);
            void *v57 = off_622A40;
            v57[1] = v25;
            v57[2] = a5;
            v57[3] = a6;
            unsigned int v217 = v57;
            (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a5 + 24))(buf, a5);
            sub_1315E8(&v201, v37 + 16, v164, (uint64_t)v218, v169, (uint64_t)(a5 + 3), (uint64_t)&v193, (uint64_t)(a5 + 12), 0x636F7570u, 0, v54, v55, v53, v56 != 0, (uint64_t)&v216, (uint64_t)buf, v161);
            if (cf) {
              CFRelease(cf);
            }
            sub_463E0(v214);
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
            sub_6AFD4(&v216);
            std::string::size_type v58 = v201;
            if ((unint64_t)(v202 - (char *)v201) >= 9)
            {
              uint64_t v156 = (os_log_t *)sub_32A48(13);
              uint64_t v157 = *v156;
              if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)BOOL v218 = 136315394;
                *(void *)&v218[4] = "RoutingManager.cpp";
                *(_WORD *)&v218[12] = 1024;
                *(_DWORD *)&v218[14] = 4851;
                _os_log_impl(&def_1E50E8, v157, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Received multiple concrete routes for a build of an alternate VAD, while specifying 'CoupleInputOutput'.\"", v218, 0x12u);
              }
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Received multiple concrete routes for a build of an alternate VAD, while specifying 'CoupleInputOutput'.");
            }
            if (v201 == (__n128 **)v202) {
              goto LABEL_143;
            }
            std::string::size_type v59 = *a6;
            uint64_t v179 = a6[1];
            if (*a6 == v179)
            {
LABEL_142:
              uint64_t v85 = *v58;
              std::string::size_type v86 = (*v58)->n128_u64[0];
              LODWORD(__p.__r_.__value_.__r.__words[1]) = v85->n128_u32[2];
              __p.__r_.__value_.__r.__words[0] = v86;
              sub_12004C((__n128 **)&__p.__r_.__value_.__r.__words[2], v85 + 1);
              unint64_t v191 = v85[2].n128_u64[1];
              char v87 = 1;
            }
            else
            {
              uint64_t v60 = (uint64_t)&(*v201)[1];
              uint64_t v183 = v37;
              uint64_t v177 = v60;
              std::string v178 = *v201;
              while (1)
              {
                uint64_t v181 = v59;
                BOOL v61 = *v59;
                BOOL v205 = 0;
                BOOL v204 = 0;
                uint64_t v206 = 0;
                uint64_t v62 = v178[1].n128_i64[1];
                *(void *)BOOL v218 = &v204;
                while (v62 != v60)
                {
                  sub_131B6C((char ***)v218, v62 + 16);
                  uint64_t v62 = *(void *)(v62 + 8);
                }
                std::string::size_type v63 = v61 + 4;
                uint64_t v64 = *((void *)v61 + 3);
                *(void *)BOOL v218 = &v204;
                while ((unsigned int *)v64 != v63)
                {
                  sub_131B6C((char ***)v218, v64 + 16);
                  uint64_t v64 = *(void *)(v64 + 8);
                }
                uint64_t v65 = (uint64_t **)v204;
                uint64_t v66 = (uint64_t **)((char *)v204 + 16);
                while (1)
                {
                  uint64_t v67 = v65;
                  uint64_t v186 = v205;
                  if (v205 == v65) {
                    break;
                  }
                  uint64_t v68 = *v65;
                  sub_43F38((uint64_t *)v218, *v65, "", 390);
                  sub_43F38((uint64_t *)&v209, v68 + 2, "", 391);
                  uint64_t v185 = v67;
                  v188 = v67 + 1;
                  if (v205 == v67 + 1)
                  {
                    LOBYTE(v74) = 1;
                  }
                  else
                  {
                    uint64_t v69 = *(void *)v218;
                    os_signpost_id_t v70 = v209;
                    uint64_t v71 = v66;
                    do
                    {
                      int v72 = *(v71 - 1);
                      sub_43F38((uint64_t *)&v203, v72, "", 406);
                      sub_43F38((uint64_t *)&v208, v72 + 2, "", 407);
                      long long v73 = *(_OWORD *)&v203.__r_.__value_.__l.__data_;
                      long long v207 = *(_OWORD *)&v203.__r_.__value_.__l.__data_;
                      if (v203.__r_.__value_.__l.__size_) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v203.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
                      }
                      int v74 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v69 + 296))(v69, &v207);
                      if (*((void *)&v207 + 1)) {
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v207 + 1));
                      }
                      uint64_t v75 = (std::__shared_weak_count *)*((void *)&v208 + 1);
                      if (v74)
                      {
                        uint64_t v76 = v208;
                        long long v207 = v208;
                        if (*((void *)&v208 + 1)) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v208 + 1) + 16), 1uLL, memory_order_relaxed);
                        }
                        int v74 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v69 + 296))(v69, &v207);
                        if (*((void *)&v207 + 1)) {
                          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v207 + 1));
                        }
                        if (v74)
                        {
                          long long v207 = v73;
                          if (*((void *)&v73 + 1)) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v73 + 1) + 16), 1uLL, memory_order_relaxed);
                          }
                          int v74 = (*(uint64_t (**)(void *, long long *))(*(void *)v70 + 296))(v70, &v207);
                          if (*((void *)&v207 + 1)) {
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v207 + 1));
                          }
                          if (v74)
                          {
                            *(void *)&long long v207 = v76;
                            *((void *)&v207 + 1) = v75;
                            if (v75) {
                              atomic_fetch_add_explicit(&v75->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                            }
                            LOBYTE(v74) = (*(uint64_t (**)(void *, long long *))(*(void *)v70 + 296))(v70, &v207);
                            if (*((void *)&v207 + 1)) {
                              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v207 + 1));
                            }
                          }
                        }
                      }
                      if (v75) {
                        sub_4636C(v75);
                      }
                      if (*((void *)&v73 + 1)) {
                        sub_4636C(*((std::__shared_weak_count **)&v73 + 1));
                      }
                      if (v71 == v205) {
                        char v77 = 0;
                      }
                      else {
                        char v77 = v74;
                      }
                      ++v71;
                    }
                    while ((v77 & 1) != 0);
                  }
                  uint64_t v37 = v183;
                  a1 = v184;
                  long long v25 = (void *)(v165 + 440 * v166);
                  if (v210) {
                    sub_4636C(v210);
                  }
                  if (*(void *)&v218[8]) {
                    sub_4636C(*(std::__shared_weak_count **)&v218[8]);
                  }
                  ++v66;
                  uint64_t v65 = v188;
                  if ((v74 & 1) == 0)
                  {
                    BOOL v78 = (os_log_t *)sub_32A48(8);
                    uint64_t v79 = *v78;
                    uint64_t v67 = v185;
                    if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v80 = (uint64_t **)v204;
                      BOOL v81 = v205;
                      memset(&v203, 0, sizeof(v203));
                      std::string::append(&v203, "{ ", 2uLL);
                      if (v80 != v81)
                      {
                        while (1)
                        {
                          sub_382124(&v209, *v80);
                          if (v211 >= 0) {
                            uint64_t v82 = (const std::string::value_type *)&v209;
                          }
                          else {
                            uint64_t v82 = (const std::string::value_type *)v209;
                          }
                          if (v211 >= 0) {
                            std::string::size_type v83 = HIBYTE(v211);
                          }
                          else {
                            std::string::size_type v83 = (std::string::size_type)v210;
                          }
                          std::string::append(&v203, v82, v83);
                          if (SHIBYTE(v211) < 0) {
                            operator delete(v209);
                          }
                          if (++v80 == v81) {
                            break;
                          }
                          std::string::append(&v203, ", ", 2uLL);
                        }
                      }
                      std::string::append(&v203, " }", 2uLL);
                      uint64_t v84 = &v203;
                      if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v84 = (std::string *)v203.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)BOOL v218 = 136315650;
                      *(void *)&v218[4] = "RoutingManager.cpp";
                      *(_WORD *)&v218[12] = 1024;
                      *(_DWORD *)&v218[14] = 4752;
                      __int16 v219 = 2080;
                      v220 = v84;
                      _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Connections are incompatible: %s", v218, 0x1Cu);
                      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v203.__r_.__value_.__l.__data_);
                      }
                      uint64_t v67 = v185;
                    }
                    break;
                  }
                }
                if (v204)
                {
                  BOOL v205 = (uint64_t **)v204;
                  operator delete(v204);
                }
                uint64_t v60 = v177;
                if (v186 != v67) {
                  break;
                }
                std::string::size_type v59 = v181 + 1;
                if (v181 + 1 == v179)
                {
                  std::string::size_type v58 = v201;
                  goto LABEL_142;
                }
              }
LABEL_143:
              char v87 = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
            }
            char v192 = v87;
            *(void *)BOOL v218 = &v201;
            sub_12EA14((void ***)v218);
            if (v192)
            {
              uint64_t v88 = sub_32A48(8);
              if (*(unsigned char *)(v88 + 8))
              {
                int v89 = *(NSObject **)v88;
                if (*(void *)v88)
                {
                  if (os_log_type_enabled(*(os_log_t *)v88, OS_LOG_TYPE_DEBUG))
                  {
                    sub_3825EC(&v216, (unsigned int *)&__p);
                    uint64_t v90 = *v159;
                    BOOL v91 = "????";
                    if (v90 <= 0x1E) {
                      BOOL v91 = off_634620[v90];
                    }
                    int v92 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
                    std::string::size_type v93 = v216.__r_.__value_.__r.__words[0];
                    sub_21C8C(v218, v91);
                    int v94 = &v216;
                    if (v92 < 0) {
                      int v94 = (std::string *)v93;
                    }
                    unsigned int v95 = v218;
                    if (SBYTE3(v220) < 0) {
                      unsigned int v95 = *(unsigned char **)v218;
                    }
                    *(_DWORD *)buf = 136315906;
                    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4863;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&buf[20] = v94;
                    *(_WORD *)&buf[28] = 2080;
                    *(void *)&buf[30] = v95;
                    _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully built alternate concrete route %s for alternate VAD %s; adding to accumulat"
                      "ed concrete route list and attempting to recurse...",
                      buf,
                      0x26u);
                    if (SBYTE3(v220) < 0) {
                      operator delete(*(void **)v218);
                    }
                    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v216.__r_.__value_.__l.__data_);
                    }
                  }
                }
              }
              operator new();
            }
            sub_10E118(v194[0]);
          }
          uint64_t v37 = *(void *)(v37 + 8);
          uint64_t v96 = *v172;
          if (v37 != *v172)
          {
            while ((sub_12EA98(v182, v37 + 16) & 1) == 0)
            {
              uint64_t v37 = *(void *)(v37 + 8);
              if (v37 == v96)
              {
                uint64_t v37 = v96;
                break;
              }
            }
          }
        }
        while (v37 != v171);
      }
    }
    else
    {
      uint64_t v141 = sub_32A48(8);
      if (*(unsigned char *)(v141 + 8))
      {
        int v142 = *(NSObject **)v141;
        if (*(void *)v141)
        {
          if (os_log_type_enabled(*(os_log_t *)v141, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(&v195, *(_DWORD *)(v165 + 440 * v166 + 60));
            uint64_t v143 = (v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v195
                 : (std::string *)v195.__r_.__value_.__r.__words[0];
            int v144 = *(_DWORD *)(v165 + 440 * v166 + 56);
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_DWORD *)buf = 136315906;
            *(_WORD *)&unsigned char buf[12] = 1024;
            int v145 = v144 ? "not " : "";
            *(_DWORD *)&buf[14] = 4812;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v143;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = v145;
            _os_log_impl(&def_1E50E8, v142, OS_LOG_TYPE_DEBUG, "%25s:%-5d VirtualAudioDeviceType %s is currently disabled, and is %s mandatory", buf, 0x26u);
            if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v195.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v165 + 440 * v166 + 56) != 1) {
      goto LABEL_262;
    }
    uint64_t v146 = sub_32A48(8);
    unsigned int v147 = v160;
    if (*(unsigned char *)(v146 + 8))
    {
      uint64_t v148 = *(NSObject **)v146;
      if (*(void *)v146)
      {
        if (os_log_type_enabled(*(os_log_t *)v146, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v149 = *(unsigned int *)(v165 + 440 * v166 + 4);
          if (v149 > 0x1E) {
            uint64_t v150 = "????";
          }
          else {
            uint64_t v150 = off_634620[v149];
          }
          sub_21C8C(&v195, v150);
          if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v151 = &v195;
          }
          else {
            uint64_t v151 = (std::string *)v195.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4894;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v151;
          _os_log_impl(&def_1E50E8, v148, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to build an alternate concrete route for an optional alternate VAD %s; skipping and attempt"
            "ing to recurse...",
            buf,
            0x1Cu);
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v195.__r_.__value_.__l.__data_);
          }
          unsigned int v147 = v160;
        }
      }
    }
    sub_12EF54(a1, a2, a3, v147 + 1, a5, a6, a7);
    if (*(_DWORD *)(a1 + 8))
    {
      uint64_t v152 = sub_32A48(8);
      if (*(unsigned char *)(v152 + 8))
      {
        uint64_t v153 = *(NSObject **)v152;
        if (*(void *)v152)
        {
          if (os_log_type_enabled(*(os_log_t *)v152, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4898;
            _os_log_impl(&def_1E50E8, v153, OS_LOG_TYPE_DEBUG, "%25s:%-5d Recursion failed after skipping optional alternate VAD.", buf, 0x12u);
          }
        }
      }
      sub_11A520((void *)a1);
LABEL_262:
      *(void *)a1 = off_6228D0;
      *(void *)(a1 + 8) = 1;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 32) = 0;
      return;
    }
    uint64_t v154 = sub_32A48(8);
    if (*(unsigned char *)(v154 + 8))
    {
      uint64_t v155 = *(NSObject **)v154;
      if (*(void *)v154)
      {
        if (os_log_type_enabled(*(os_log_t *)v154, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4902;
          _os_log_impl(&def_1E50E8, v155, OS_LOG_TYPE_DEBUG, "%25s:%-5d Recursion succeeded; returning.", buf, 0x12u);
        }
      }
    }
  }
}

void sub_130F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  if (LOBYTE(STACK[0x208])) {
    sub_125CD0(a40);
  }
  sub_10E118((void *)STACK[0x218]);
  _Unwind_Resume(a1);
}

void sub_131250()
{
}

uint64_t sub_131268(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 72;
  uint64_t result = sub_136D28(a1, *(unsigned int *)(*(void *)(a2 + 80) + 16), *(_DWORD *)(a2 + 60));
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5 == v3) {
    return *(unsigned int *)(v5 + 16);
  }
  uint64_t v6 = *(void *)(a2 + 80);
  while (*(_DWORD *)(v6 + 16) != result)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == v3) {
      return *(unsigned int *)(v5 + 16);
    }
  }
  if (v6 == v3) {
    return *(unsigned int *)(v5 + 16);
  }
  return result;
}

uint64_t sub_1312D4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 32) > a2)
  {
LABEL_13:
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      if (v16 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      BOOL v18 = "RoutingManager.cpp";
      __int16 v19 = 1024;
      int v20 = 4682;
      __int16 v21 = 2080;
      uint64_t v22 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): \"Unable to locate category '%s' in the routing database.\"", buf, 0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1852793716;
  }
  return v5 + 40;
}

uint64_t *sub_131464(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = a2 + 32;
  do
  {
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 >= a3;
    if (v5 >= a3) {
      BOOL v7 = (uint64_t *)v3;
    }
    else {
      BOOL v7 = (uint64_t *)(v3 + 8);
    }
    if (v6) {
      uint64_t v4 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != a2 + 32 && *(_DWORD *)(v4 + 32) <= a3)
  {
    unint64_t v9 = sub_131E5C(a1, a2);
    return sub_13150C(v9, *(void **)(v4 + 40), (void *)(v4 + 48));
  }
  else
  {
LABEL_12:
    return sub_131E5C(a1, a2);
  }
}

void sub_1314F8(_Unwind_Exception *a1)
{
  sub_10E118(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_13150C(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unsigned int v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = sub_112C40(v5, v6, v4 + 4, v4 + 4);
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_131598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  if (!a1) {
    sub_56964();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 48))(a1, v4);
}

void sub_1315E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, const void ***a17)
{
  uint64_t v24 = sub_32A48(8);
  if (*(unsigned char *)(v24 + 8))
  {
    long long v25 = *(NSObject **)v24;
    if (*(void *)v24)
    {
      if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
      {
        sub_382CA8(&v58, a2);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v26 = &v58;
        }
        else {
          uint64_t v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        sub_2417C(v56, *(_DWORD *)(a4 + 4));
        if (v57 >= 0) {
          int v27 = v56;
        }
        else {
          int v27 = (void **)v56[0];
        }
        long long v41 = v27;
        sub_2417C(v54, a11);
        if (v55 >= 0) {
          int v28 = v54;
        }
        else {
          int v28 = (void **)v54[0];
        }
        uint64_t v39 = v28;
        uint64_t v40 = v26;
        std::to_string(&v53, a12);
        int v29 = SHIBYTE(v53.__r_.__value_.__r.__words[2]);
        std::string::size_type v30 = v53.__r_.__value_.__r.__words[0];
        sub_131D18(&__p, *(void **)a7, (void *)(a7 + 8));
        uint64_t v31 = &v53;
        if (v29 < 0) {
          uint64_t v31 = (std::string *)v30;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316674;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v73 = 1024;
        int v74 = 747;
        __int16 v75 = 2080;
        uint64_t v76 = v40;
        __int16 v77 = 2080;
        BOOL v78 = v41;
        __int16 v79 = 2080;
        uint64_t v80 = v39;
        __int16 v81 = 2080;
        uint64_t v82 = v31;
        __int16 v83 = 2080;
        uint64_t v84 = p_p;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to build concrete route for abstract route %s using mode %s, device type %s, context id %s, and excluded ports %s.", buf, 0x44u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  int v33 = *(_DWORD *)(a3 + 32);
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  std::string::size_type v43 = 0;
  sub_46B38(&v43, *(const void **)a16, *(void *)(a16 + 8), (uint64_t)(*(void *)(a16 + 8) - *(void *)a16) >> 2);
  uint64_t v46 = *(void *)(a16 + 24);
  char v47 = *(unsigned char *)(a16 + 32);
  int v48 = *(_DWORD *)(a16 + 40);
  sub_46A4C(v49, a16 + 48);
  int v50 = *(_DWORD *)(a16 + 72);
  unsigned int v34 = *(const void **)(a16 + 80);
  if (v34) {
    CFRetain(v34);
  }
  CFTypeRef cf = v34;
  sub_7ECB4(v59, a17);
  sub_131E5C(v67, a7);
  sub_6BA78((uint64_t)v68, a15);
  int v69 = v33;
  uint64_t v71 = 0;
  uint64_t v35 = operator new(0xF0uLL);
  *uint64_t v35 = off_6229B0;
  sub_7ECB4(v35 + 1, v59);
  sub_131E5C(v35 + 22, (uint64_t)v67);
  sub_131EB0((uint64_t)(v35 + 25), (uint64_t)v68);
  *((_DWORD *)v35 + 58) = v69;
  uint64_t v71 = v35;
  sub_131F30(a1, a2, a3, a4, a5, a6, a8, a10, a9, a11, __SPAIR64__(a13, a12), a14);
  sub_134C4C(v70);
  sub_6AFD4(v68);
  sub_10E118((void *)v67[1]);
  sub_7E020(v66);
  uint64_t v36 = v65;
  uint64_t v65 = 0;
  if (v36) {
    operator delete(v36);
  }
  sub_7E020(v64);
  uint64_t v37 = v63;
  std::string::size_type v63 = 0;
  if (v37) {
    operator delete(v37);
  }
  sub_7E020(v62);
  uint64_t v38 = v61;
  BOOL v61 = 0;
  if (v38) {
    operator delete(v38);
  }
  *(void *)buf = &v60;
  sub_4EDB8((void ***)buf);
  *(void *)buf = v59;
  sub_4EDB8((void ***)buf);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0((void *)v49[1]);
  if (v43)
  {
    std::string::size_type v44 = v43;
    operator delete(v43);
  }
}

void sub_131A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void sub_131B64()
{
}

char ***sub_131B6C(char ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  BOOL v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = (v6 - *v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_60548();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_60560();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    *(void *)uint64_t v14 = a2;
    BOOL v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        uint64_t v15 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v6 != v8);
      BOOL v6 = *v4;
    }
    void *v4 = v14;
    v4[1] = v7;
    void v4[2] = &v13[8 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)BOOL v6 = a2;
    BOOL v7 = v6 + 8;
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_131C68(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_12EEF4((uint64_t *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_131CB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *sub_131D18(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_136B74(__p, (uint64_t)(a2 + 4));
      if ((v13 & 0x80u) == 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v7 = v13;
      }
      else {
        std::string::size_type v7 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = (void *)a2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)a2[2];
          BOOL v10 = *v9 == (void)a2;
          a2 = v9;
        }
        while (!v10);
      }
      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_131E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_131E5C(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_13150C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_131E9C(_Unwind_Exception *a1)
{
  sub_10E118(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_131EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

os_signpost_id_t *sub_131F30(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int8 a12)
{
  int v13 = a12;
  unsigned int v14 = a9;
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_PV_BuildConcreteFromAbstract", 0x1FuLL) == &qword_659450)
  {
    os_signpost_id_t v15 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v15 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      char v16 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        sub_382CA8(&v87, a2);
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v17 = &v87;
        }
        else {
          int v17 = (std::string *)v87.__r_.__value_.__r.__words[0];
        }
        sub_2417C(&v79, *(_DWORD *)(a4 + 4));
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v18 = &v79;
        }
        else {
          BOOL v18 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        sub_134D40(&v78, a5);
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v19 = &v78;
        }
        else {
          __int16 v19 = (std::string *)v78.__r_.__value_.__r.__words[0];
        }
        uint64_t v71 = a6;
        __int16 v21 = (void *)(a6 + 8);
        int v20 = *(void **)a6;
        uint64_t v22 = &v77;
        sub_120764(&v77, v20, v21);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v22 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        sub_2417C(&v75, a9);
        int v23 = v76;
        uint64_t v24 = (void **)v75;
        sub_2417C(&__p, a10);
        long long v25 = &v75;
        if (v23 < 0) {
          long long v25 = v24;
        }
        if (v74 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        buf[0] = 136316674;
        *(void *)&buf[1] = v17;
        __int16 v81 = 2080;
        *(void *)uint64_t v82 = v18;
        *(_WORD *)&v82[8] = 2080;
        *(void *)&v82[10] = v19;
        *(_WORD *)&v82[18] = 2080;
        *(void *)&v82[20] = v22;
        *(_WORD *)&v82[28] = 2080;
        *(void *)&v82[30] = v25;
        *(_WORD *)&v82[38] = 2080;
        *(void *)&v82[40] = p_p;
        *(_WORD *)&v82[48] = 1024;
        int v13 = a12;
        *(_DWORD *)&v82[50] = a12;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v16, OS_SIGNPOST_INTERVAL_BEGIN, v15, "VA_PV_BuildConcreteFromAbstract", "Attempting to build concrete route(s) for abstract route %s. inMode: %s; inDisallowedPorts:%s; inDisallowedPor"
          "tTypes:%s; inVADCoupling: %s; inDeviceType: %s; inPermitUnroutablePorts: %u.",
          (uint8_t *)buf,
          0x44u);
        if (v74 < 0) {
          operator delete(__p);
        }
        unsigned int v14 = a9;
        a6 = v71;
        if (v76 < 0) {
          operator delete(v75);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  os_signpost_id_t v72 = v15;
  uint64_t v27 = sub_32A48(42);
  if (*(unsigned char *)(v27 + 8))
  {
    int v28 = *(NSObject **)v27;
    if (*(void *)v27)
    {
      if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "SignpostUtilities.h";
        __int16 v81 = 1024;
        *(_DWORD *)uint64_t v82 = 64;
        *(_WORD *)&v82[4] = 2080;
        *(void *)&v82[6] = "kBuildConcreteFromAbstract";
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", (uint8_t *)buf, 0x1Cu);
      }
    }
  }
  if (!*(void *)(a2 + 16))
  {
    BOOL v61 = (os_log_t *)sub_32A48(13);
    uint64_t v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      __int16 v81 = 1024;
      *(_DWORD *)uint64_t v82 = 515;
      _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
LABEL_141:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (v14 == 1684366192 && ((*(unsigned __int8 *)(a3 + 24) ^ (*(unsigned __int8 *)(a3 + 24) >> 1)) & 1) != 0)
  {
    std::string::size_type v63 = (os_log_t *)sub_32A48(13);
    uint64_t v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      __int16 v81 = 1024;
      *(_DWORD *)uint64_t v82 = 518;
      _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_141;
  }
  uint64_t v29 = sub_32A48(8);
  if (*(unsigned char *)(v29 + 8))
  {
    std::string::size_type v30 = *(NSObject **)v29;
    if (*(void *)v29)
    {
      if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
      {
        sub_382CA8(&v87, a2);
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v87;
        }
        else {
          uint64_t v31 = (std::string *)v87.__r_.__value_.__r.__words[0];
        }
        sub_2417C(&v79, *(_DWORD *)(a4 + 4));
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v32 = &v79;
        }
        else {
          int v32 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        sub_134D40(&v78, a5);
        int v33 = v13;
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v34 = &v78;
        }
        else {
          unsigned int v34 = (std::string *)v78.__r_.__value_.__r.__words[0];
        }
        sub_120764(&v77, *(void **)a6, (void *)(a6 + 8));
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v35 = &v77;
        }
        else {
          uint64_t v35 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        sub_2417C(&v75, v14);
        int v36 = v76;
        uint64_t v37 = (void **)v75;
        sub_2417C(&__p, a10);
        uint64_t v38 = &v75;
        if (v36 < 0) {
          uint64_t v38 = v37;
        }
        if (v74 >= 0) {
          uint64_t v39 = &__p;
        }
        else {
          uint64_t v39 = __p;
        }
        buf[0] = 136317186;
        *(void *)&buf[1] = "RoutingManager.cpp";
        __int16 v81 = 1024;
        *(_DWORD *)uint64_t v82 = 527;
        *(_WORD *)&v82[4] = 2080;
        *(void *)&v82[6] = v31;
        *(_WORD *)&v82[14] = 2080;
        *(void *)&v82[16] = v32;
        *(_WORD *)&v82[24] = 2080;
        *(void *)&v82[26] = v34;
        *(_WORD *)&v82[34] = 2080;
        *(void *)&v82[36] = v35;
        *(_WORD *)&v82[44] = 2080;
        *(void *)&v82[46] = v38;
        __int16 v83 = 2080;
        uint64_t v84 = v39;
        __int16 v85 = 1024;
        int v86 = v33;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to build concrete route(s) for abstract route %s. inMode: %s; inDisallowedPorts:%s; inDis"
          "allowedPortTypes:%s; inPortFilterType:inVADCoupling: %s; inDeviceType: %s; inPermitUnroutablePorts: %u.",
          (uint8_t *)buf,
          0x54u);
        if (v74 < 0) {
          operator delete(__p);
        }
        if (v76 < 0) {
          operator delete(v75);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_37CD94((uint64_t *)&v87, a3 + 40, *(_DWORD *)(a4 + 4));
  if (!v87.__r_.__value_.__r.__words[2]
    || (std::string::size_type v40 = v87.__r_.__value_.__r.__words[0],
        (std::string::size_type *)v87.__r_.__value_.__l.__data_ == &v87.__r_.__value_.__r.__words[1]))
  {
LABEL_94:
    sub_463E0((void *)v87.__r_.__value_.__l.__size_);
    if (sub_1056F4(a2 + 24, *(_DWORD *)(a4 + 4)))
    {
      memset(&v77, 0, sizeof(v77));
      if (v14 == 1684366192) {
        *(void *)operator new(8uLL) = 0x100000000;
      }
      else {
        *(_DWORD *)operator new(4uLL) = 2;
      }
      operator new();
    }
    uint64_t v47 = sub_32A48(8);
    if (*(unsigned char *)(v47 + 8))
    {
      int v48 = *(NSObject **)v47;
      if (*(void *)v47)
      {
        if (os_log_type_enabled(*(os_log_t *)v47, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(&v87, *(_DWORD *)(a4 + 4));
          int v49 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
          std::string::size_type v50 = v87.__r_.__value_.__r.__words[0];
          sub_382CA8(&v79, a2);
          int64_t v51 = &v87;
          if (v49 < 0) {
            int64_t v51 = (std::string *)v50;
          }
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v52 = &v79;
          }
          else {
            unsigned int v52 = (std::string *)v79.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "RoutingManager.cpp";
          __int16 v81 = 1024;
          *(_DWORD *)uint64_t v82 = 552;
          *(_WORD *)&v82[4] = 2080;
          *(void *)&v82[6] = v51;
          *(_WORD *)&v82[14] = 2080;
          *(void *)&v82[16] = v52;
          _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempt to build concrete route(s) failed: Mode %s is disallowed in abstract route %s.", (uint8_t *)buf, 0x26u);
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    while (*(void *)(a2 + 8) != a2)
    {
      int v41 = *(_DWORD *)(v40 + 28);
      uint64_t v42 = *(void *)(a2 + 8);
      do
      {
        BOOL v43 = *(_DWORD *)(v42 + 16) == v41 || *(_DWORD *)(v42 + 20) == v41;
        int v44 = v43;
        if (v43) {
          break;
        }
        uint64_t v42 = *(void *)(v42 + 8);
      }
      while (v42 != a2);
      if (!v44) {
        break;
      }
      uint64_t v45 = *(std::string **)(v40 + 8);
      if (v45)
      {
        do
        {
          uint64_t v46 = v45;
          uint64_t v45 = (std::string *)v45->__r_.__value_.__r.__words[0];
        }
        while (v45);
      }
      else
      {
        do
        {
          uint64_t v46 = *(std::string **)(v40 + 16);
          BOOL v43 = v46->__r_.__value_.__r.__words[0] == v40;
          std::string::size_type v40 = (std::string::size_type)v46;
        }
        while (!v43);
      }
      std::string::size_type v40 = (std::string::size_type)v46;
      if (v46 == (std::string *)&v87.__r_.__value_.__r.__words[1]) {
        goto LABEL_94;
      }
    }
    uint64_t v53 = sub_32A48(8);
    if (*(unsigned char *)(v53 + 8))
    {
      unsigned int v54 = *(NSObject **)v53;
      if (*(void *)v53)
      {
        if (os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG))
        {
          char v55 = &v79;
          sub_2417C(&v79, *(_DWORD *)(a4 + 4));
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v55 = (std::string *)v79.__r_.__value_.__r.__words[0];
          }
          sub_134EF0(&v78, v87.__r_.__value_.__l.__data_, &v87.__r_.__value_.__l.__size_);
          int v56 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
          std::string::size_type v57 = v78.__r_.__value_.__r.__words[0];
          sub_382CA8(&v77, a2);
          std::string v58 = &v78;
          if (v56 < 0) {
            std::string v58 = (std::string *)v57;
          }
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v59 = &v77;
          }
          else {
            std::string::size_type v59 = (std::string *)v77.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136316162;
          *(void *)&buf[1] = "RoutingManager.cpp";
          __int16 v81 = 1024;
          *(_DWORD *)uint64_t v82 = 543;
          *(_WORD *)&v82[4] = 2080;
          *(void *)&v82[6] = v55;
          *(_WORD *)&v82[14] = 2080;
          *(void *)&v82[16] = v58;
          *(_WORD *)&v82[24] = 2080;
          *(void *)&v82[26] = v59;
          _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempt to build concrete route(s) failed: Mode %s requires port type(s) %s, which were not all found in abstract route %s.", (uint8_t *)buf, 0x30u);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v78.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_463E0((void *)v87.__r_.__value_.__l.__size_);
  }
  return sub_1359C0(&v72);
}

void sub_134734()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (*(char *)(v0 - 225) < 0) {
    operator delete(*(void **)(v0 - 248));
  }
  sub_463E0(*(void **)(v0 - 120));
  JUMPOUT(0x134C2CLL);
}

void sub_1348D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_1348F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_12EEF4(&a71);
  operator delete(a54);
  *(void *)(v72 - 248) = &STACK[0x230];
  sub_12EA14(v72 - 248);
  sub_1359C0(&a72);
  _Unwind_Resume(a1);
}

void sub_134908()
{
}

void sub_134914()
{
}

void sub_13491C()
{
}

void sub_134934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_free_exception(v68);
  a68 = (void **)&STACK[0x200];
  sub_98D9C(&a68);
  STACK[0x200] = (unint64_t)&STACK[0x218];
  sub_98D9C((void ***)&STACK[0x200]);
  sub_10E118((void *)STACK[0x268]);
  sub_10E118(*(void **)(v69 - 240));
  JUMPOUT(0x134C0CLL);
}

void sub_134998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x220]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x220]);
  }
  sub_12EEF4(&a71);
  operator delete(v72);
  *(void *)(v73 - 248) = &STACK[0x230];
  sub_12EA14((void ***)(v73 - 248));
  sub_1359C0(&a72);
  _Unwind_Resume(a1);
}

void sub_1349B0()
{
  sub_8108((uint64_t *)(v0 - 224));
  if (STACK[0x258]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x258]);
  }
  JUMPOUT(0x134B38);
}

void sub_1349E8()
{
  sub_125D44((void *)(v0 - 224));
  JUMPOUT(0x134B38);
}

void sub_134A08()
{
  if (*(char *)(v0 - 225) < 0) {
    operator delete(*(void **)(v0 - 248));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  JUMPOUT(0x134AE8);
}

void sub_134A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_12EEF4(&a71);
  operator delete(v72);
  *(void *)(v73 - 248) = &STACK[0x230];
  sub_12EA14((void ***)(v73 - 248));
  sub_1359C0(&a72);
  _Unwind_Resume(a1);
}

void sub_134A44()
{
}

void sub_134A4C()
{
}

void sub_134A54()
{
}

void sub_134A5C()
{
}

void sub_134A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_125CD0(&a60);
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  sub_10E118((void *)a66);
  JUMPOUT(0x134BB8);
}

void sub_134A70()
{
}

void sub_134A80()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x134BC0);
}

void sub_134A90()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 216);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x134AE8);
}

void sub_134AA4()
{
}

void sub_134AB0()
{
}

void sub_134AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_10E118(a69);
  if (v69) {
    sub_4636C(v69);
  }
  if (v70) {
    sub_4636C(v70);
  }
  a68 = &STACK[0x200];
  sub_98D9C(&a68);
  STACK[0x200] = (unint64_t)&STACK[0x218];
  sub_98D9C(&STACK[0x200]);
  sub_10E118(STACK[0x268]);
  sub_10E118(*(void *)(v71 - 240));
  JUMPOUT(0x134C0CLL);
}

void sub_134AC0()
{
}

void sub_134AC8()
{
}

void sub_134AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = *(std::__shared_weak_count **)(v67 - 216);
  if (v68) {
    std::__shared_weak_count::__release_weak(v68);
  }
  if (a66) {
    sub_4636C(a66);
  }
  if (v66) {
    sub_4636C(v66);
  }
  if (STACK[0x208]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x208]);
  }
  if (STACK[0x220]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x220]);
  }
  JUMPOUT(0x134C0CLL);
}

void sub_134B1C()
{
}

void sub_134B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_125D44((void *)(v62 - 224));
  sub_8108((uint64_t *)(v62 - 128));
  sub_125CD0(&a60);
  std::__shared_weak_count::__release_weak(v60);
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  JUMPOUT(0x134BA4);
}

void sub_134B58(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_125D44(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x134C34);
}

void sub_134B8C()
{
}

void sub_134C3C(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x134C34);
}

void *sub_134C4C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_134CD0(uint64_t a1)
{
  sub_6AFD4((void *)(a1 + 192));
  sub_10E118(*(void **)(a1 + 176));
  sub_7D72C(a1 + 128);
  sub_7D72C(a1 + 88);
  sub_7D72C(a1 + 48);
  uint64_t v3 = (void **)(a1 + 24);
  sub_4EDB8(&v3);
  uint64_t v3 = (void **)a1;
  sub_4EDB8(&v3);
  return a1;
}

void sub_134D40(std::string *a1, uint64_t a2)
{
  sub_131D18(&v14, *(void **)a2, (void *)(a2 + 8));
  uint64_t v4 = std::string::insert(&v14, 0, " { Global : ", 0xCuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  sub_135C0C(&v12, (void *)(a2 + 24));
  BOOL v6 = std::string::insert(&v12, 0, " VAD Specific Ports :", 0x15uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v13, " }", 2uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v10 = &v14;
  }
  else {
    BOOL v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_134E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_134EF0(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v12, *((_DWORD *)a2 + 7));
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v6 = &v12;
      }
      else {
        BOOL v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v12.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (void *)a2[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (void *)a2[2];
          BOOL v10 = *v9 == (void)a2;
          a2 = v9;
        }
        while (!v10);
      }
      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_134FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_135034(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  int v8 = a3;
  char v7 = a4;
  int v6 = a5;
  if (!a2) {
    sub_56964();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *, int *))(*(void *)a2 + 48))(a2, &v8, &v7, &v6);
}

void *sub_1350A0(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    long long v5 = a2;
    unint64_t v6 = 0;
    char v7 = a2;
    do
    {
      unint64_t v8 = v6;
      long long v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          char v7 = v10;
        }
        while (!v11);
      }
      ++v6;
      char v7 = v10;
    }
    while (v10 != a3);
    if (v8 >= 0xFFFFFFFFFFFFFFFLL) {
      sub_60548();
    }
    std::string v12 = sub_10724(v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[2 * v13];
    uint64_t v21 = v12;
    int v20 = v12;
    v18[0] = a1 + 2;
    v18[1] = &v20;
    v18[2] = &v21;
    do
    {
      void *v12 = v5[4];
      uint64_t v14 = v5[5];
      v12[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          char v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          char v16 = (void *)v5[2];
          BOOL v11 = *v16 == (void)v5;
          long long v5 = v16;
        }
        while (!v11);
      }
      v12 += 2;
      uint64_t v21 = v12;
      long long v5 = v16;
    }
    while (v16 != a3);
    char v19 = 1;
    sub_135BB0((uint64_t)v18);
    a1[1] = v12;
  }
  return a1;
}

void sub_1351F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_135208(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (void *)a1[1];
  unint64_t v7 = ((uint64_t)v6 - *a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      int v17 = (void *)(v5 + 16 * a2);
      while (v6 != v17)
      {
        BOOL v18 = (std::__shared_weak_count *)*(v6 - 1);
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        v6 -= 2;
      }
      a1[1] = (uint64_t)v17;
    }
  }
  else
  {
    uint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - (uint64_t)v6) >> 4)
    {
      char v19 = &v6[2 * (a2 - v7)];
      do
      {
        *unint64_t v6 = *a3;
        uint64_t v20 = a3[1];
        v6[1] = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
        }
        v6 += 2;
      }
      while (v6 != v19);
      a1[1] = (uint64_t)v19;
    }
    else
    {
      if (a2 >> 60) {
        sub_60548();
      }
      v21[4] = a1 + 2;
      uint64_t v10 = v9 - v5;
      uint64_t v11 = v10 >> 3;
      if (v10 >> 3 <= a2) {
        uint64_t v11 = a2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)sub_10724(v12);
      uint64_t v14 = &v13[16 * v7];
      v21[0] = v13;
      v21[1] = v14;
      v21[3] = &v13[16 * v15];
      do
      {
        *(void *)uint64_t v14 = *a3;
        uint64_t v16 = a3[1];
        *((void *)v14 + 1) = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
        }
        v14 += 16;
      }
      while (v14 != &v13[16 * a2]);
      v21[2] = &v13[16 * a2];
      sub_FBB48(a1, v21);
      sub_131CB8((uint64_t)v21);
    }
  }
}

void sub_135368(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2 == (void *)*a1)
  {
    if (a1[2] == (void)v2)
    {
      v7[4] = a1 + 2;
      uint64_t v5 = sub_10724(1uLL);
      v7[0] = v5;
      v7[1] = v5;
      v7[3] = &v5[2 * v6];
      *uint64_t v5 = 0;
      v5[1] = 0;
      v7[2] = v5 + 2;
      sub_FBB48(a1, v7);
      sub_131CB8((uint64_t)v7);
    }
    else
    {
      void *v2 = 0;
      v2[1] = 0;
      a1[1] = (uint64_t)(v2 + 2);
    }
  }
  else if ((unint64_t)v2 - *a1 >= 0x11)
  {
    uint64_t v3 = *a1 + 16;
    while (v2 != (void *)v3)
    {
      uint64_t v4 = (std::__shared_weak_count *)*(v2 - 1);
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      v2 -= 2;
    }
    a1[1] = v3;
  }
}

void sub_135444(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  sub_FB288(&v13, a2);
  for (uint64_t i = v14; i != &v13; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v4 = (void *)i[2];
    if (v4 && v4[24] && (*(unsigned int (**)(uint64_t))(*v4 + 152))(i[2]))
    {
      uint64_t v5 = v4[24];
      if (!v5)
      {
        uint64_t v10 = (os_log_t *)sub_32A48(13);
        uint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "PortUtilities.cpp";
          __int16 v18 = 1024;
          int v19 = 108;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      strcpy(buf, "ngswbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      if (!(*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, buf)
        || (int v15 = 4,
            int v16 = 0,
            strcpy(buf, "ngswbolg"),
            buf[9] = 0,
            *(_WORD *)&buf[10] = 0,
            (*(void (**)(uint64_t, unsigned char *, void, void, int *, int *))(*(void *)v5 + 40))(v5, buf, 0, 0, &v15, &v16), !v16))
      {
        uint64_t v7 = i[2];
        uint64_t v6 = i[3];
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
        }
        unint64_t v8 = operator new(0x20uLL);
        v8[2] = v7;
        _OWORD v8[3] = v6;
        uint64_t v9 = *a1;
        *(void *)(v9 + 8) = v8;
        *a1 = (uint64_t)v8;
        void *v8 = v9;
        v8[1] = a1;
        ++a1[2];
      }
    }
  }
  sub_B8E4(&v13);
}

void sub_1356AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v10);
  sub_B8E4(&a9);
  sub_8108(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1356FC(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5, char a6, uint64_t a7)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 16) = *a4;
  uint64_t v7 = a4[1];
  *(void *)(result + 24) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = *a5;
  uint64_t v8 = a5[1];
  *(void *)(result + 40) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 48) = a6;
  *(void *)(result + 56) = a7;
  if (!a7)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        uint64_t v13 = "RoutingTypes.h";
        __int16 v14 = 1024;
        int v15 = 1869;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v12, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return result;
}

void sub_135864(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1358A8(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_382124(__p, (uint64_t *)(a2 + 16));
      uint64_t v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      if ((char)v10 < 0) {
        operator delete(__p[0]);
      }
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_135984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

os_signpost_id_t *sub_1359C0(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 64;
        __int16 v11 = 2080;
        int v12 = "kBuildConcreteFromAbstract";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_PV_BuildConcreteFromAbstract", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_135B50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

__n128 sub_135B5C(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[1];
  a1->n128_u64[0] = a2->n128_u64[0];
  a1->n128_u64[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v3 = a2[1].n128_u64[1];
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = a2[2].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[2].n128_u64[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_135BB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_weak(v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

std::string *sub_135C0C(std::string *a1, void *a2)
{
  sub_21C8C(a1, " [ ");
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      sub_2417C(&v20, *((_DWORD *)v5 + 8));
      int v7 = std::string::append(&v20, " : ", 3uLL);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_131D18(&v19, (void *)v5[5], v5 + 6);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v9 = &v19;
      }
      else {
        __int16 v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v19.__r_.__value_.__l.__size_;
      }
      __int16 v11 = std::string::append(&v21, (const std::string::value_type *)v9, size);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      int64_t v23 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (v23 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      if (v23 >= 0) {
        std::string::size_type v14 = HIBYTE(v23);
      }
      else {
        std::string::size_type v14 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v13, v14);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (void *)v5[2];
          BOOL v17 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v17);
      }
      if (v16 == v4) {
        break;
      }
      std::string::append(a1, "; ", 2uLL);
      uint64_t v5 = v16;
    }
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_135DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

void *sub_135E40@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned __int8 *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7 = *a2;
  int v8 = *a3;
  int v9 = *a4;
  int v10 = (const void ***)sub_190030((void *)(a1 + 8), *a2);
  int v11 = *(_DWORD *)(a1 + 232);
  sub_6BA78((uint64_t)v23, a1 + 200);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = a5 + 8;
  sub_136048(&v21, *v10, v10[1], v11);
  long long v12 = v21;
  uint64_t v13 = v22;
  if (v21 != v22)
  {
    uint64_t v14 = a1 + 176;
    do
    {
      CFTypeRef v15 = *v12;
      if (*v12) {
        CFRetain(*v12);
      }
      __int16 v18 = v15;
      sub_6BA78((uint64_t)v24, (uint64_t)v23);
      sub_1361C8((uint64_t *)&v19, v7, &v18, v9, v8 != 0, v14, v11, (uint64_t)v24);
      sub_6AFD4(v24);
      if (v15) {
        CFRelease(v15);
      }
      int v16 = v20;
      if (v20)
      {
        if (v20->__shared_owners_ != -1) {
          sub_13651C((uint64_t **)a5, (unint64_t *)&v19, (uint64_t *)&v19);
        }
        std::__shared_weak_count::__release_weak(v16);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::string v19 = &v21;
  sub_4EDB8((void ***)&v19);
  return sub_6AFD4(v23);
}

void sub_135FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10E118(*v8);
  sub_6AFD4(va);
  _Unwind_Resume(a1);
}

void sub_136048(void *a1, const void **a2, const void **a3, int a4)
{
  if (a2 == a3)
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    uint64_t v5 = operator new(8uLL);
    *a1 = v5;
    a1[1] = v5;
    uint64_t v6 = v5 + 1;
    a1[2] = v5 + 1;
    sub_136810(v5, 0);
    a1[1] = v6;
  }
  else if (a4 == 1668246894)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_7E0DC(a1, a2, a3, a3 - a2);
  }
  else
  {
    unsigned int v7 = *a2;
    if (*a2) {
      CFRetain(*a2);
    }
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    int v8 = operator new(8uLL);
    *a1 = v8;
    a1[1] = v8;
    int v9 = v8 + 1;
    a1[2] = v8 + 1;
    sub_136810(v8, v7);
    a1[1] = v9;
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_136194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1361C8(uint64_t *a1, unsigned int a2, const void **a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  int v16 = 44739242;
  BOOL v17 = operator new(4uLL);
  int v32 = v17;
  _DWORD *v17 = a2;
  uint64_t v33 = v17 + 1;
  unsigned int v34 = v17 + 1;
  strcpy((char *)v35, "cwdv");
  char v36 = 0;
  int v37 = 3;
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v38 = v39;
  unsigned int v40 = 44739242;
  __int16 v18 = *a3;
  CFTypeRef cf = v18;
  if (v18)
  {
    CFRetain(v18);
    int v16 = v40;
  }
  if (a5) {
    int v19 = 8;
  }
  else {
    int v19 = 0;
  }
  v35[0] = a4;
  unsigned int v40 = v16 & 0xFFFFFFF0 | v19;
  int v53 = a7;
  sub_6BA78((uint64_t)v54, a8);
  int v56 = 0;
  std::string v20 = operator new(0x30uLL);
  *(void *)std::string v20 = off_6229F8;
  v20[2] = v53;
  sub_131EB0((uint64_t)(v20 + 4), (uint64_t)v54);
  int v56 = v20;
  sub_6AFD4(v54);
  std::string v21 = (void *)sub_10FBF0();
  sub_6BA78((uint64_t)v52, (uint64_t)v55);
  sub_10FD10(a1, v21, (uint64_t)&v32, a6, (uint64_t)v52);
  sub_6AFD4(v52);
  if (*a3)
  {
    uint64_t v22 = sub_32A48(8);
    if (*(unsigned char *)(v22 + 8))
    {
      int64_t v23 = *(NSObject **)v22;
      if (*(void *)v22)
      {
        if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          int v24 = v31;
          long long v25 = (void **)__p[0];
          uint64_t v26 = *a3;
          sub_43F38(&v28, a1, "", 322);
          uint64_t v27 = __p;
          if (v24 < 0) {
            uint64_t v27 = v25;
          }
          *(_DWORD *)buf = 136316162;
          BOOL v43 = "RoutingManager.cpp";
          __int16 v44 = 1024;
          int v45 = 322;
          __int16 v46 = 2080;
          uint64_t v47 = v27;
          __int16 v48 = 2112;
          int v49 = v26;
          __int16 v50 = 2048;
          uint64_t v51 = v28;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d PV_GetHighestPriorityPort(portType = %s, UID = %@) port = %p", buf, 0x30u);
          if (v29) {
            sub_4636C(v29);
          }
          if (v31 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  sub_6AFD4(v55);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v39[0]);
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
}

void sub_136498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  int v37 = *(std::__shared_weak_count **)(v34 + 8);
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  sub_6AFD4((void *)(v35 - 120));
  sub_470A4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_13651C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  __n128 result = sub_112EFC((uint64_t)a1, &v10, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    unsigned int v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v8 = a3[1];
    v7[4] = *a3;
    void v7[5] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v10;
    return sub_46CA8(a1, v9, v6, v7);
  }
  return result;
}

uint64_t sub_1365BC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == 1667396196 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 400))(a2) == 2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    sub_56964();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);

  return v5();
}

void sub_13667C(void *a1)
{
  sub_6AFD4(a1 + 2);

  operator delete(a1);
}

void *sub_1366B8(uint64_t a1)
{
  return sub_6AFD4((void *)(a1 + 16));
}

uint64_t sub_1366C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6229F8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return sub_6BA78(a2 + 16, a1 + 16);
}

_DWORD *sub_1366F4(uint64_t a1)
{
  unint64_t v2 = operator new(0x30uLL);
  *(void *)unint64_t v2 = off_6229F8;
  v2[2] = *(_DWORD *)(a1 + 8);
  sub_6BA78((uint64_t)(v2 + 4), a1 + 16);
  return v2;
}

void sub_136754(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_136768(void *a1)
{
  *a1 = off_6229F8;
  sub_6AFD4(a1 + 2);

  operator delete();
}

void *sub_1367CC(void *a1)
{
  *a1 = off_6229F8;
  sub_6AFD4(a1 + 2);
  return a1;
}

void *sub_136810(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

void sub_13684C(void *a1)
{
  sub_136888((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_136888(uint64_t a1)
{
  sub_6AFD4((void *)(a1 + 192));
  sub_10E118(*(void **)(a1 + 176));
  sub_7D72C(a1 + 128);
  sub_7D72C(a1 + 88);
  sub_7D72C(a1 + 48);
  unint64_t v2 = (void **)(a1 + 24);
  sub_4EDB8(&v2);
  unint64_t v2 = (void **)a1;
  sub_4EDB8(&v2);
}

void sub_1368F4(uint64_t a1)
{
}

uint64_t sub_1368FC(uint64_t a1, void *a2)
{
  *a2 = off_6229B0;
  return sub_136928((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_136928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7ECB4((void *)a1, (const void ***)a2);
  sub_131E5C(v4 + 21, a2 + 168);
  sub_6BA78(a1 + 192, a2 + 192);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  return a1;
}

void sub_13697C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  sub_10E118(*(void **)(v10 + 176));
  sub_7D72C(v10 + 128);
  sub_7D72C(v10 + 88);
  sub_7D72C(v10 + 48);
  a10 = (void **)(v10 + 24);
  sub_4EDB8(&a10);
  a10 = (void **)v10;
  sub_4EDB8(&a10);
  _Unwind_Resume(a1);
}

void *sub_1369CC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0xF0uLL);
  void *v2 = off_6229B0;
  sub_136928((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_136A20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_136A34(uint64_t a1)
{
  *(void *)a1 = off_6229B0;
  unint64_t v2 = (void **)(a1 + 8);
  sub_6AFD4((void *)(a1 + 200));
  sub_10E118(*(void **)(a1 + 184));
  sub_7D72C(a1 + 136);
  sub_7D72C(a1 + 96);
  sub_7D72C(a1 + 56);
  uint64_t v3 = (void **)(a1 + 32);
  sub_4EDB8(&v3);
  uint64_t v3 = v2;
  sub_4EDB8(&v3);

  operator delete();
}

uint64_t sub_136AE4(uint64_t a1)
{
  *(void *)a1 = off_6229B0;
  unint64_t v2 = (void **)(a1 + 8);
  sub_6AFD4((void *)(a1 + 200));
  sub_10E118(*(void **)(a1 + 184));
  sub_7D72C(a1 + 136);
  sub_7D72C(a1 + 96);
  sub_7D72C(a1 + 56);
  uint64_t v4 = (void **)(a1 + 32);
  sub_4EDB8(&v4);
  uint64_t v4 = v2;
  sub_4EDB8(&v4);
  return a1;
}

void sub_136B74(void *a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (*(void *)a2)
      {
        sub_4F64((uint64_t)a1, (os_unfair_lock_t)(*(void *)a2 + 8));
        sub_4636C(v6);
        return;
      }
      sub_4636C(v5);
    }
  }

  sub_21C8C(a1, "expired");
}

void sub_136C10(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_136C24(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 128);
  if (!v1) {
    sub_56964();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

__n128 sub_136C8C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_622A40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_136CBC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = off_622A40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_136D10()
{
}

uint64_t sub_136D28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((sub_89FA8() == 2
     || sub_89FA8() == 3
     || sub_89FA8() == 4
     || sub_89FA8() == 5
     || sub_89FA8() == 195)
    && sub_89FA8() != 195)
  {
    uint64_t v6 = *(void *)(a1 + 568);
    if (v6)
    {
      uint64_t v7 = a1 + 568;
      do
      {
        unsigned int v8 = *(_DWORD *)(v6 + 28);
        BOOL v9 = v8 >= a3;
        if (v8 >= a3) {
          uint64_t v10 = (uint64_t *)v6;
        }
        else {
          uint64_t v10 = (uint64_t *)(v6 + 8);
        }
        if (v9) {
          uint64_t v7 = v6;
        }
        uint64_t v6 = *v10;
      }
      while (*v10);
      if (v7 != a1 + 568 && *(_DWORD *)(v7 + 28) <= a3)
      {
        if (a2 == 1836021360) {
          unsigned int v11 = 1835232630;
        }
        else {
          unsigned int v11 = a2;
        }
        if (a2 == 1768776806) {
          return 1835230310;
        }
        else {
          return v11;
        }
      }
    }
  }
  return a2;
}

uint64_t *sub_136E10(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 440; ; i -= 440)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 440 == v5) {
      break;
    }
    uint64_t v9 = v4 + i - 880;
    __n128 result = (uint64_t *)sub_127450(v8 - 880, v9);
  }
  uint64_t v10 = v8 - 440;
  a2[1] = v10;
  uint64_t v11 = *v3;
  uint64_t *v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_136EE4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 440;
    sub_819AC(i - 440);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_136F34(uint64_t **a1, _DWORD *a2, uint64_t a3, uint64_t a4, const void ***a5, uint64_t a6)
{
  unsigned int v10 = *(_DWORD *)(a6 + 120);
  int v11 = *(unsigned __int8 *)(a6 + 360);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a6 + 24))(&v52, a6);
  sub_131464(v60, a6 + 48, 0x76646566u);
  v67[0] = off_622A88;
  uint64_t v67[3] = v67;
  memset(__p, 0, 24);
  sub_46B38(__p, v52, (uint64_t)v53, (v53 - (unsigned char *)v52) >> 2);
  __p[3] = v54;
  char v62 = v55;
  int v63 = v56;
  sub_46A4C(v64, (uint64_t)v57);
  int v65 = v58;
  CFTypeRef v12 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v66 = v12;
  uint64_t v51 = (unsigned int *)(a6 + 8);
  sub_1315E8(a1, a3, a4, a6 + 8, a6 + 48, a6 + 24, (uint64_t)v60, a6 + 96, v10, v11 != 0, 0x76646566u, 0, 1u, 0, (uint64_t)v67, (uint64_t)__p, a5);
  if (v66) {
    CFRelease(v66);
  }
  sub_463E0((void *)v64[1]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_6AFD4(v67);
  sub_10E118((void *)v60[1]);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v57[1]);
  if (v52)
  {
    int v53 = v52;
    operator delete(v52);
  }
  uint64_t v13 = *a1;
  __int16 v50 = a1[1];
  if (*a1 != v50)
  {
    while (1)
    {
      uint64_t v14 = *v13;
      sub_3B7EC();
      if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
      {
        int v45 = (os_log_t *)sub_32A48(13);
        __int16 v46 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 4622;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      CFTypeRef v15 = (unsigned int (***)(void))sub_298DA4();
      if ((**v15)(v15) == 1)
      {
        uint64_t v16 = *(void *)(*(void *)a2 + 8);
        if (!v16) {
          goto LABEL_25;
        }
        unsigned int v17 = *v51;
        uint64_t v18 = *(void *)a2 + 8;
        do
        {
          unsigned int v19 = *(_DWORD *)(v16 + 32);
          BOOL v20 = v19 >= v17;
          if (v19 >= v17) {
            std::string v21 = (uint64_t *)v16;
          }
          else {
            std::string v21 = (uint64_t *)(v16 + 8);
          }
          if (v20) {
            uint64_t v18 = v16;
          }
          uint64_t v16 = *v21;
        }
        while (*v21);
        if (v18 == *(void *)a2 + 8 || v17 < *(_DWORD *)(v18 + 32)) {
LABEL_25:
        }
          uint64_t v18 = *(void *)a2 + 8;
        if (*(unsigned char *)(v18 + 76) && !a2[138])
        {
          uint64_t v22 = v14 + 16;
          int64_t v23 = *(void **)(v14 + 24);
          int v24 = (void *)(v14 + 16);
          if (v23 != (void *)(v14 + 16))
          {
            while ((sub_137730(v23 + 2) & 1) == 0)
            {
              int64_t v23 = (void *)v23[1];
              if (v23 == (void *)v22)
              {
                int v24 = (void *)(v14 + 16);
                goto LABEL_38;
              }
            }
            int v24 = (void *)(v14 + 16);
            if (v23 != (void *)v22)
            {
              uint64_t v25 = v23[1];
              int v24 = v23;
              while (v25 != v22)
              {
                if ((sub_137730((uint64_t *)(v25 + 16)) & 1) == 0)
                {
                  sub_137994((uint64_t)(v24 + 2), (long long *)(v25 + 16));
                  int v24 = (void *)v24[1];
                }
                uint64_t v25 = *(void *)(v25 + 8);
              }
            }
          }
LABEL_38:
          sub_137A0C(v14 + 16, v24, (void *)(v14 + 16));
        }
      }
      unsigned int v26 = *v51;
      if ((int)*v51 <= 1667591532) {
        break;
      }
      if (v26 != 1668443760 && v26 != 1668443751)
      {
        unsigned __int16 v27 = 28013;
        goto LABEL_45;
      }
      sub_137CB0(v14);
LABEL_63:
      sub_137D68(v14);
LABEL_64:
      uint64_t v35 = (void *)(v14 + 16);
      char v36 = *(void **)(v14 + 24);
      if (v36 != (void *)(v14 + 16))
      {
        unint64_t v37 = 0;
        do
        {
          sub_43F38((uint64_t *)__p, v36 + 4, "", 1297);
          int v38 = *((_DWORD *)__p[0] + 36);
          if (__p[1]) {
            sub_4636C((std::__shared_weak_count *)__p[1]);
          }
          if (v38 != 1885433888) {
            ++v37;
          }
          char v36 = (void *)v36[1];
        }
        while (v36 != v35);
        if (v37 >= 2)
        {
          uint64_t v39 = *(void **)(v14 + 24);
          unsigned int v40 = (void *)(v14 + 16);
          if (v39 != v35)
          {
            while (1)
            {
              sub_43F38((uint64_t *)__p, v39 + 4, "", 1307);
              int v41 = *((_DWORD *)__p[0] + 36);
              if (__p[1]) {
                sub_4636C((std::__shared_weak_count *)__p[1]);
              }
              if (v41 == 1886287212) {
                break;
              }
              uint64_t v39 = (void *)v39[1];
              if (v39 == v35)
              {
                unsigned int v40 = v35;
                goto LABEL_86;
              }
            }
            unsigned int v40 = v35;
            if (v39 != v35)
            {
              uint64_t v42 = v39[1];
              unsigned int v40 = v39;
              while ((void *)v42 != v35)
              {
                sub_43F38((uint64_t *)__p, (uint64_t *)(v42 + 32), "", 1307);
                int v43 = *((_DWORD *)__p[0] + 36);
                if (__p[1]) {
                  sub_4636C((std::__shared_weak_count *)__p[1]);
                }
                if (v43 != 1886287212)
                {
                  sub_137994((uint64_t)(v40 + 2), (long long *)(v42 + 16));
                  unsigned int v40 = (void *)v40[1];
                }
                uint64_t v42 = *(void *)(v42 + 8);
              }
            }
          }
LABEL_86:
          sub_137A0C((uint64_t)v35, v40, v35);
        }
      }
      if (++v13 == v50) {
        return;
      }
    }
    if (v26 == 1667329133)
    {
      sub_137CB0(v14);
      if (*(_DWORD *)(a6 + 12) != 1936683886)
      {
        uint64_t v31 = v14 + 16;
        int v32 = *(void **)(v14 + 24);
        uint64_t v33 = (void *)(v14 + 16);
        if (v32 != (void *)(v14 + 16))
        {
          while ((sub_137E60((uint64_t)(v32 + 2)) & 1) == 0)
          {
            int v32 = (void *)v32[1];
            if (v32 == (void *)v31)
            {
              uint64_t v33 = (void *)(v14 + 16);
              goto LABEL_95;
            }
          }
          uint64_t v33 = (void *)(v14 + 16);
          if (v32 != (void *)v31)
          {
            uint64_t v44 = v32[1];
            uint64_t v33 = v32;
            while (v44 != v31)
            {
              if ((sub_137E60(v44 + 16) & 1) == 0)
              {
                sub_137994((uint64_t)(v33 + 2), (long long *)(v44 + 16));
                uint64_t v33 = (void *)v33[1];
              }
              uint64_t v44 = *(void *)(v44 + 8);
            }
          }
        }
LABEL_95:
        sub_137A0C(v14 + 16, v33, (void *)(v14 + 16));
      }
      goto LABEL_64;
    }
    unsigned __int16 v27 = 28001;
LABEL_45:
    if (v26 != (v27 | 0x63650000)) {
      goto LABEL_64;
    }
    uint64_t v28 = v14 + 16;
    uint64_t v29 = *(void **)(v14 + 24);
    std::string::size_type v30 = (void *)(v14 + 16);
    if (v29 != (void *)(v14 + 16))
    {
      while ((sub_137A8C(v29 + 2) & 1) == 0)
      {
        uint64_t v29 = (void *)v29[1];
        if (v29 == (void *)v28)
        {
          std::string::size_type v30 = (void *)(v14 + 16);
          goto LABEL_62;
        }
      }
      std::string::size_type v30 = (void *)(v14 + 16);
      if (v29 != (void *)v28)
      {
        uint64_t v34 = v29[1];
        std::string::size_type v30 = v29;
        while (v34 != v28)
        {
          if ((sub_137A8C((uint64_t *)(v34 + 16)) & 1) == 0)
          {
            sub_137994((uint64_t)(v30 + 2), (long long *)(v34 + 16));
            std::string::size_type v30 = (void *)v30[1];
          }
          uint64_t v34 = *(void *)(v34 + 8);
        }
      }
    }
LABEL_62:
    sub_137A0C(v14 + 16, v30, (void *)(v14 + 16));
    sub_137CB0(v14);
    if (MGGetSInt32Answer() == 6) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
}

void sub_13766C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_137730(uint64_t *a1)
{
  sub_43F38(&v23, a1, "", 1163);
  sub_43F38(&v21, a1 + 2, "", 1164);
  uint64_t v2 = v23;
  if ((*(_WORD *)(v23 + 184) & 8) != 0 || (*(_WORD *)(v21 + 184) & 8) != 0)
  {
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_10;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_10:
    int v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v19, *(_DWORD *)(v2 + 144));
      int v12 = v20;
      uint64_t v13 = (void **)v19[0];
      sub_2417C(__p, *(_DWORD *)(v21 + 144));
      uint64_t v14 = v19;
      if (v12 < 0) {
        uint64_t v14 = v13;
      }
      if (v18 >= 0) {
        CFTypeRef v15 = __p;
      }
      else {
        CFTypeRef v15 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v26 = 1024;
      int v27 = 1170;
      __int16 v28 = 2080;
      uint64_t v29 = v14;
      __int16 v30 = 2080;
      uint64_t v31 = v15;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culling route connection because silent mode is enabled. Source port type = '%s', Destination port type = '%s'", buf, 0x26u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v22) {
    sub_4636C(v22);
  }
  if (v24) {
    sub_4636C(v24);
  }
  return v3;
}

void sub_137944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    sub_4636C(a19);
  }
  if (a21) {
    sub_4636C(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_137994(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = a2[1];
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  long long v8 = a2[2];
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  return a1;
}

void *sub_137A0C(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      long long v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      sub_125D44(v4 + 2);
      operator delete(v4);
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

uint64_t sub_137A8C(uint64_t *a1)
{
  sub_43F38(&v15, a1, "", 1212);
  sub_43F38(&v13, a1 + 2, "", 1213);
  uint64_t v2 = v13;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 112))(v13) & 0xFF00000000) != 0
    && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 112))(v2) == 1701869160)
  {
    uint64_t v3 = sub_32A48(8);
    uint64_t v4 = sub_32A48(34);
    char v5 = 0;
    uint64_t v6 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&buf[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1;
      if (v9) {
        goto LABEL_10;
      }
    }
    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_10:
    int v11 = *(NSObject **)v3;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v18 = 1024;
      int v19 = 1218;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culling route connection because CarKit BT port is not allowed in emergency alert routes.", buf, 0x12u);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v14) {
    sub_4636C(v14);
  }
  if (v16) {
    sub_4636C(v16);
  }
  return v10;
}

void sub_137C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_4636C(a10);
  }
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_137CB0(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    while ((sub_13837C(v2 + 2) & 1) == 0)
    {
      uint64_t v2 = (void *)v2[1];
      if (v2 == v1)
      {
        uint64_t v3 = v1;
        goto LABEL_11;
      }
    }
    uint64_t v3 = v1;
    if (v2 != v1)
    {
      uint64_t v4 = v2[1];
      uint64_t v3 = v2;
      while ((void *)v4 != v1)
      {
        if ((sub_13837C((uint64_t *)(v4 + 16)) & 1) == 0)
        {
          sub_137994((uint64_t)(v3 + 2), (long long *)(v4 + 16));
          uint64_t v3 = (void *)v3[1];
        }
        uint64_t v4 = *(void *)(v4 + 8);
      }
    }
  }
LABEL_11:

  return sub_137A0C((uint64_t)v1, v3, v1);
}

void *sub_137D68(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 == (void *)(a1 + 16))
  {
    BOOL v9 = 0;
LABEL_9:
    uint64_t v6 = v1;
  }
  else
  {
    do
    {
      BOOL v4 = sub_24212C((uint64_t)(v2 + 2));
      if (v4) {
        break;
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
    char v5 = *(void **)(a1 + 24);
    BOOL v9 = v4;
    uint64_t v6 = v1;
    if (v5 != v1)
    {
      while ((sub_1380E8(&v9, v5 + 2) & 1) == 0)
      {
        char v5 = (void *)v5[1];
        if (v5 == v1) {
          goto LABEL_9;
        }
      }
      uint64_t v6 = v1;
      if (v5 != v1)
      {
        uint64_t v8 = v5[1];
        uint64_t v6 = v5;
        while ((void *)v8 != v1)
        {
          if ((sub_1380E8(&v9, (uint64_t *)(v8 + 16)) & 1) == 0)
          {
            sub_137994((uint64_t)(v6 + 2), (long long *)(v8 + 16));
            uint64_t v6 = (void *)v6[1];
          }
          uint64_t v8 = *(void *)(v8 + 8);
        }
      }
    }
  }

  return sub_137A0C((uint64_t)v1, v6, v1);
}

uint64_t sub_137E60(uint64_t a1)
{
  sub_43F38(&v18, (uint64_t *)(a1 + 16), "", 1263);
  uint64_t v1 = v18;
  uint64_t v2 = *(void *)(v18 + 192);
  strcpy((char *)buf, "paaibolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  if (!(*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)v2 + 16))(v2, buf)
    || *(_DWORD *)(v1 + 144) == 1886152047
    || (int v5 = sub_24B314((void *)v1)) != 0
    && (*(unsigned int (**)(uint64_t))(*(void *)v1 + 112))(v1) == 1701865584)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v6 = sub_32A48(8);
    uint64_t v7 = sub_32A48(34);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = (int)buf[v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_15;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_15:
    uint64_t v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(__p, *(_DWORD *)(v1 + 144));
      if (v17 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      uint64_t v15 = "false";
      *(void *)&buf[1] = "RoutingManager.cpp";
      buf[0] = 136315906;
      __int16 v21 = 1024;
      if (v5) {
        uint64_t v15 = "true";
      }
      int v22 = 1276;
      __int16 v23 = 2080;
      int v24 = v14;
      __int16 v25 = 2080;
      __int16 v26 = v15;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culling route connection because port is not allowed for kVirtualAudioPlugInRoutingCategoryAlarm, Destination port type = '%s', AppleAccessory = '%s'", (uint8_t *)buf, 0x26u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v3 = 1;
  }
  if (v19) {
    sub_4636C(v19);
  }
  return v3;
}

void sub_1380B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1380E8(unsigned char *a1, uint64_t *a2)
{
  sub_43F38(&v25, a2, "", 1237);
  sub_43F38(&v23, a2 + 2, "", 1238);
  if (*a1 && (uint64_t v4 = v23, (*(unsigned int (**)(uint64_t))(*(void *)v23 + 400))(v23) != 1))
  {
    uint64_t v6 = sub_32A48(8);
    uint64_t v7 = sub_32A48(34);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_10;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_10:
    uint64_t v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v21, *(_DWORD *)(v25 + 144));
      int v14 = v22;
      uint64_t v15 = (void **)v21[0];
      sub_2417C(__p, *(_DWORD *)(v4 + 144));
      uint64_t v16 = v21;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      if (v20 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v28 = 1024;
      int v29 = 1247;
      __int16 v30 = 2080;
      uint64_t v31 = v16;
      __int16 v32 = 2080;
      uint64_t v33 = v17;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culling route connection because there already is an active port for given category. Source port type = '%s', Destination port type = '%s'", buf, 0x26u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v24) {
    sub_4636C(v24);
  }
  if (v26) {
    sub_4636C(v26);
  }
  return v5;
}

void sub_138328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    sub_4636C(a19);
  }
  if (a21) {
    sub_4636C(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13837C(uint64_t *a1)
{
  sub_43F38(&v23, a1, "", 1186);
  sub_43F38(&v21, a1 + 2, "", 1187);
  uint64_t v2 = v21;
  if ((((*(uint64_t (**)(uint64_t))(*(void *)v21 + 160))(v21) & 1) != 0
     || (*(_WORD *)(v2 + 184) & 0x400) != 0 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 408))(v2))
    && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 400))(v2) != 2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_12;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_12:
    uint64_t v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v19, *(_DWORD *)(v23 + 144));
      int v12 = v20;
      uint64_t v13 = (void **)v19[0];
      sub_2417C(__p, *(_DWORD *)(v2 + 144));
      int v14 = v19;
      if (v12 < 0) {
        int v14 = v13;
      }
      if (v18 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v26 = 1024;
      int v27 = 1196;
      __int16 v28 = 2080;
      int v29 = v14;
      __int16 v30 = 2080;
      uint64_t v31 = v15;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culling route connection because port is not allowed for given category. Source port type = '%s', Destination port type = '%s'", buf, 0x26u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
    uint64_t v3 = 1;
  }
  if (v22) {
    sub_4636C(v22);
  }
  if (v24) {
    sub_4636C(v24);
  }
  return v3;
}

void sub_13861C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    sub_4636C(a19);
  }
  if (a21) {
    sub_4636C(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_138670()
{
  return 1;
}

void sub_138680(uint64_t a1, void *a2)
{
  *a2 = off_622A88;
}

void *sub_1386A0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_622A88;
  return result;
}

void sub_1386D8()
{
}

uint64_t sub_1386F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return *(void *)(a1 + 24);
  }
  uint64_t v2 = **(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8) - v2;
  if (*(void *)(a1 + 8) >= (unint64_t)(v3 >> 4)) {
    uint64_t v4 = v3 >> 4;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    uint64_t v6 = v2 + 16 * v4;
    while ((sub_138F68(a1 + 16, v2) & 1) == 0)
    {
      v2 += 16;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v2 = v6;
        break;
      }
    }
  }
  *(void *)(a1 + 24) = v2;
  *(unsigned char *)(a1 + 32) = 1;
  return v2;
}

uint64_t sub_13878C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  sub_10653C(&v28, a6);
  int v12 = v29;
  if (v29 != &v28)
  {
    uint64_t v24 = a1;
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    do
    {
      uint64_t v13 = (std::__shared_weak_count *)v12[3];
      if (v13)
      {
        int v14 = std::__shared_weak_count::lock(v13);
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = v12[2];
          if (v16)
          {
            uint64_t v17 = *a5;
            uint64_t v18 = a5[1];
            while (v17 != v18)
            {
              uint64_t v19 = *(void *)v17 + 16;
              uint64_t v20 = *(void *)(*(void *)v17 + 24);
              if (v19 != v20)
              {
                do
                {
                  BOOL v21 = sub_242098(v16, (void *)(v20 + 16));
                  if (v21) {
                    break;
                  }
                  uint64_t v20 = *(void *)(v20 + 8);
                }
                while (v19 != v20);
                if (v21)
                {
                  sub_4636C(v15);
                  uint64_t v22 = sub_241270(*(_DWORD *)(a6 + 144), v24, *(_DWORD *)(v24 + 32), v25, v26, v27);
                  goto LABEL_17;
                }
              }
              v17 += 8;
            }
          }
          sub_4636C(v15);
        }
      }
      int v12 = (uint64_t *)v12[1];
    }
    while (v12 != &v28);
  }
  uint64_t v22 = 0;
LABEL_17:
  sub_8108(&v28);
  return v22;
}

void sub_1388B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1388CC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v3 = sub_32A48(42);
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        uint64_t v7 = "SignpostUtilities.h";
        __int16 v8 = 1024;
        int v9 = 67;
        __int16 v10 = 2080;
        uint64_t v11 = "kBuildAlternateRoutesAndActivateForLastInWins";
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", (uint8_t *)&v6, 0x1Cu);
      }
    }
  }
  return a1;
}

os_signpost_id_t *sub_1389B0(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        __int16 v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 67;
        __int16 v11 = 2080;
        int v12 = "kBuildAlternateRoutesAndActivateForLastInWins";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_BuildAlternateRoutesAndActivateForLastInWins", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_138B40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_138B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      int v7 = *(unsigned int **)a2;
      if (v7)
      {
        if ((*(unsigned int (**)(unsigned int *))(*(void *)v7 + 152))(v7)
          && ((*(uint64_t (**)(unsigned int *))(*(void *)v7 + 160))(v7) & 1) != 0)
        {
          uint64_t v8 = *(void *)(*(void *)a1 + 8);
          if (!v8) {
            goto LABEL_17;
          }
          unsigned int v9 = v7[36];
          uint64_t v10 = *(void *)a1 + 8;
          do
          {
            unsigned int v11 = *(_DWORD *)(v8 + 28);
            BOOL v12 = v11 >= v9;
            if (v11 >= v9) {
              uint64_t v13 = (uint64_t *)v8;
            }
            else {
              uint64_t v13 = (uint64_t *)(v8 + 8);
            }
            if (v12) {
              uint64_t v10 = v8;
            }
            uint64_t v8 = *v13;
          }
          while (*v13);
          if (v10 == *(void *)a1 + 8 || v9 < *(_DWORD *)(v10 + 28))
          {
LABEL_17:
            uint64_t v14 = 1;
LABEL_28:
            sub_4636C(v6);
            return v14;
          }
          uint64_t v24 = sub_32A48(8);
          if (*(unsigned char *)(v24 + 8))
          {
            uint64_t v25 = *(NSObject **)v24;
            if (*(void *)v24)
            {
              if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(__p, v7[36]);
                if (v28 >= 0) {
                  uint64_t v26 = __p;
                }
                else {
                  uint64_t v26 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136315650;
                __int16 v30 = "RouteUtilities.h";
                __int16 v31 = 1024;
                int v32 = 621;
                __int16 v33 = 2080;
                uint64_t v34 = v26;
                _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disallowed iterator position: port's type (%s) is disallowed.", buf, 0x1Cu);
                if (v28 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }
        else
        {
          uint64_t v15 = sub_32A48(8);
          if (*(unsigned char *)(v15 + 8))
          {
            uint64_t v16 = *(NSObject **)v15;
            if (*(void *)v15)
            {
              if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
              {
                int v17 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 152))(v7);
                int v18 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 160))(v7);
                uint64_t v19 = "not connected";
                if (v17) {
                  uint64_t v19 = "connected";
                }
                __int16 v30 = "RouteUtilities.h";
                __int16 v31 = 1024;
                int v32 = 613;
                *(_DWORD *)buf = 136315906;
                __int16 v33 = 2080;
                uint64_t v34 = (void *)v19;
                if (v18) {
                  uint64_t v20 = "routable";
                }
                else {
                  uint64_t v20 = "not routable";
                }
                __int16 v35 = 2080;
                char v36 = v20;
                _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disallowed iterator position: port is %s and %s.", buf, 0x26u);
              }
            }
          }
        }
        uint64_t v14 = 0;
        goto LABEL_28;
      }
      sub_4636C(v5);
    }
  }
  uint64_t v21 = sub_32A48(8);
  if (*(unsigned char *)(v21 + 8))
  {
    uint64_t v22 = *(NSObject **)v21;
    if (*(void *)v21)
    {
      if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v30 = "RouteUtilities.h";
        __int16 v31 = 1024;
        int v32 = 629;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disallowed iterator position: port has expired.", buf, 0x12u);
      }
    }
  }
  return 0;
}

void sub_138EC0(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_138EE4(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1 + 16;
  *a1 = v3;
  uint64_t v4 = **(void **)v2;
  if (*(void *)(v2 + 8) >= (unint64_t)((*(void *)(*(void *)v2 + 8) - v4) >> 4)) {
    uint64_t v5 = (*(void *)(*(void *)v2 + 8) - v4) >> 4;
  }
  else {
    uint64_t v5 = *(void *)(v2 + 8);
  }
  uint64_t v6 = v4 + 16 * v5;
  if (v3 != v6)
  {
    uint64_t v7 = v2 + 16;
    while ((sub_138F68(v7, v3) & 1) == 0)
    {
      v3 += 16;
      if (v3 == v6)
      {
        uint64_t v3 = v6;
        break;
      }
    }
  }
  *a1 = v3;
  return a1;
}

uint64_t sub_138F68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(unsigned int **)a2;
      if (v7)
      {
        if ((*(unsigned int (**)(unsigned int *))(*(void *)v7 + 152))(v7)
          && ((*(uint64_t (**)(unsigned int *))(*(void *)v7 + 160))(v7) & 1) != 0)
        {
          uint64_t v8 = *(void *)(*(void *)a1 + 8);
          if (!v8) {
            goto LABEL_17;
          }
          unsigned int v9 = v7[36];
          uint64_t v10 = *(void *)a1 + 8;
          do
          {
            unsigned int v11 = *(_DWORD *)(v8 + 28);
            BOOL v12 = v11 >= v9;
            if (v11 >= v9) {
              uint64_t v13 = (uint64_t *)v8;
            }
            else {
              uint64_t v13 = (uint64_t *)(v8 + 8);
            }
            if (v12) {
              uint64_t v10 = v8;
            }
            uint64_t v8 = *v13;
          }
          while (*v13);
          if (v10 == *(void *)a1 + 8 || v9 < *(_DWORD *)(v10 + 28))
          {
LABEL_17:
            uint64_t v14 = 1;
LABEL_28:
            sub_4636C(v6);
            return v14;
          }
          uint64_t v24 = sub_32A48(8);
          if (*(unsigned char *)(v24 + 8))
          {
            uint64_t v25 = *(NSObject **)v24;
            if (*(void *)v24)
            {
              if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(__p, v7[36]);
                if (v28 >= 0) {
                  uint64_t v26 = __p;
                }
                else {
                  uint64_t v26 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136315650;
                __int16 v30 = "RouteUtilities.h";
                __int16 v31 = 1024;
                int v32 = 621;
                __int16 v33 = 2080;
                uint64_t v34 = v26;
                _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disallowed iterator position: port's type (%s) is disallowed.", buf, 0x1Cu);
                if (v28 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }
        else
        {
          uint64_t v15 = sub_32A48(8);
          if (*(unsigned char *)(v15 + 8))
          {
            uint64_t v16 = *(NSObject **)v15;
            if (*(void *)v15)
            {
              if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
              {
                int v17 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 152))(v7);
                int v18 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 160))(v7);
                uint64_t v19 = "not connected";
                if (v17) {
                  uint64_t v19 = "connected";
                }
                __int16 v30 = "RouteUtilities.h";
                __int16 v31 = 1024;
                int v32 = 613;
                *(_DWORD *)buf = 136315906;
                __int16 v33 = 2080;
                uint64_t v34 = (void *)v19;
                if (v18) {
                  uint64_t v20 = "routable";
                }
                else {
                  uint64_t v20 = "not routable";
                }
                __int16 v35 = 2080;
                char v36 = v20;
                _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disallowed iterator position: port is %s and %s.", buf, 0x26u);
              }
            }
          }
        }
        uint64_t v14 = 0;
        goto LABEL_28;
      }
      sub_4636C(v5);
    }
  }
  uint64_t v21 = sub_32A48(8);
  if (*(unsigned char *)(v21 + 8))
  {
    uint64_t v22 = *(NSObject **)v21;
    if (*(void *)v21)
    {
      if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v30 = "RouteUtilities.h";
        __int16 v31 = 1024;
        int v32 = 629;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disallowed iterator position: port has expired.", buf, 0x12u);
      }
    }
  }
  return 0;
}

void sub_1392DC(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_139300(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, const void ***a10, char a11, uint64_t *a12)
{
  *(void *)a1 = off_6228F0;
  *(_OWORD *)(a1 + 8) = *a3;
  sub_46A4C((uint64_t *)(a1 + 24), a4);
  sub_131E5C((uint64_t *)(a1 + 48), a5);
  sub_139BC4(a1 + 72, (void *)(a5 + 24));
  sub_46A4C((uint64_t *)(a1 + 96), a6);
  *(_DWORD *)(a1 + 120) = a7;
  sub_139C70(a1 + 128, a8);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)a9;
  if (*(char *)(a9 + 31) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 160), *(void **)(a9 + 8), *(void *)(a9 + 16));
  }
  else
  {
    long long v19 = *(_OWORD *)(a9 + 8);
    *(void *)(a1 + 176) = *(void *)(a9 + 24);
    *(_OWORD *)(a1 + 160) = v19;
  }
  *(void *)(a1 + 184) = *(void *)(a9 + 32);
  sub_7ECB4((void *)(a1 + 192), a10);
  *(unsigned char *)(a1 + 360) = a11;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = 0;
  sub_139D1C((void *)(a1 + 368), *a12, a12[1], 0x6FB586FB586FB587 * ((a12[1] - *a12) >> 3));
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 392) = a2;
  *(void *)(a1 + 400) = a1 + 408;
  long long v21 = *a3;
  char v22 = 0;
  char v23 = 0;
  sub_139DA0((uint64_t **)(a1 + 400), (uint64_t)&v21);
  if (*(_DWORD *)(a1 + 120) == 1684366192)
  {
    long long v21 = *a3;
    char v22 = 0;
    char v23 = 0;
    sub_139E64((uint64_t **)(a1 + 400), 1986291305, (uint64_t)&v21);
  }
  return a1;
}

void sub_1394C4(_Unwind_Exception *a1)
{
  sub_10E118(v1[17]);
  sub_463E0(v1[13]);
  sub_12CE80(v2);
  sub_463E0(v1[4]);
  _Unwind_Resume(a1);
}

void sub_139540()
{
}

void sub_139548()
{
  sub_10E118(*(void **)(v0 + 56));
  JUMPOUT(0x139530);
}

void sub_139558()
{
}

uint64_t sub_139560(uint64_t a1)
{
  *(void *)a1 = off_6228F0;
  sub_463E0(*(void **)(a1 + 408));
  uint64_t v3 = (void **)(a1 + 368);
  sub_81CEC(&v3);
  sub_7D72C(a1 + 320);
  sub_7D72C(a1 + 280);
  sub_7D72C(a1 + 240);
  uint64_t v3 = (void **)(a1 + 216);
  sub_4EDB8(&v3);
  uint64_t v3 = (void **)(a1 + 192);
  sub_4EDB8(&v3);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  sub_10E118(*(void **)(a1 + 136));
  sub_463E0(*(void **)(a1 + 104));
  sub_12B050(*(void **)(a1 + 80));
  sub_10E118(*(void **)(a1 + 56));
  sub_463E0(*(void **)(a1 + 32));
  return a1;
}

double sub_139638@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v7 = *a2;
  }
  else
  {
    uint64_t v7 = *a2;
    while (**(_DWORD **)v7 != 1986291046)
    {
      v7 += 8;
      if (v7 == v6) {
        goto LABEL_5;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_5:
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    unsigned int v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v34 = 136315394;
        *(void *)&v34[4] = "RoutingManager.cpp";
        *(_WORD *)&v34[12] = 1024;
        *(_DWORD *)&v34[14] = 1871;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate a concrete route for device type kVirtualAudioDeviceTypeDefault.\"", v34, 0x12u);
      }
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to locate a concrete route for device type kVirtualAudioDeviceTypeDefault.");
  }
  if ((unint64_t)(v6 - *a2) >= 9)
  {
    uint64_t v11 = sub_32A48(8);
    if (*(unsigned char *)(v11 + 8))
    {
      BOOL v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = (a2[1] - *a2) >> 3;
          *(_DWORD *)uint64_t v34 = 136315650;
          *(void *)&v34[4] = "RoutingManager.cpp";
          *(_WORD *)&v34[12] = 1024;
          *(_DWORD *)&v34[14] = 1873;
          __int16 v35 = 2048;
          uint64_t v36 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Located concrete route in a %lu item concrete route pointer list.", v34, 0x1Cu);
        }
      }
    }
  }
  if (*(void *)(*(void *)v7 + 32) != 1)
  {
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)&v34[4] = "RoutingManager.cpp";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 1876;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v34, 0x12u);
    }
    uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Precondition failure.");
  }
  sub_43F38((uint64_t *)v34, (uint64_t *)(*(void *)(*(void *)v7 + 24) + 16), "", 1877);
  int v14 = *(_DWORD *)(*(void *)v34 + 144);
  if (*(void *)&v34[8]) {
    sub_4636C(*(std::__shared_weak_count **)&v34[8]);
  }
  if (v14 != 1885433888)
  {
    char v28 = (os_log_t *)sub_32A48(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)&v34[4] = "RoutingManager.cpp";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 1878;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v34, 0x12u);
    }
    __int16 v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "Precondition failure.");
  }
  sub_43F38((uint64_t *)v34, (uint64_t *)(*(void *)(*(void *)v7 + 24) + 32), "", 1879);
  int v15 = *(_DWORD *)(*(void *)v34 + 144);
  if (*(void *)&v34[8]) {
    sub_4636C(*(std::__shared_weak_count **)&v34[8]);
  }
  if (v15 == 1885433888)
  {
    __int16 v31 = (os_log_t *)sub_32A48(13);
    int v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)&v34[4] = "RoutingManager.cpp";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 1880;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v34, 0x12u);
    }
    __int16 v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Precondition failure.");
  }
  uint64_t v16 = *(uint64_t **)(a1 + 424);
  uint64_t v17 = *(void *)(*(void *)v7 + 24);
  int v18 = *(std::__shared_weak_count **)(v17 + 40);
  if (v18)
  {
    long long v19 = std::__shared_weak_count::lock(v18);
    uint64_t v20 = v19;
    if (v19)
    {
      uint64_t v21 = *(void *)(v17 + 32);
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v19);
    }
    else
    {
      uint64_t v21 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  char v22 = operator new(0x20uLL);
  v22[2] = v21;
  v22[3] = v20;
  v22[1] = v16;
  uint64_t v23 = *v16;
  *char v22 = *v16;
  *(void *)(v23 + 8) = v22;
  *uint64_t v16 = (uint64_t)v22;
  ++v16[2];
  *(void *)a3 = off_6228D0;
  *(void *)&double result = 3;
  *(void *)(a3 + 8) = 3;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  return result;
}

void sub_139B4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_139B88(uint64_t a1)
{
  sub_139560(a1);

  operator delete();
}

uint64_t sub_139BC4(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_139F20((uint64_t **)a1, v3, *((_DWORD *)v5 + 8), (_DWORD *)v5 + 8);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_139C5C(_Unwind_Exception *a1)
{
  sub_12B050(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_139C70(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_112D38((uint64_t **)a1, v3, v5 + 4, v5 + 4);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_139D08(_Unwind_Exception *a1)
{
  sub_10E118(*v1);
  _Unwind_Resume(a1);
}

void *sub_139D1C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1273FC(result, a4);
    double result = (void *)sub_127368(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_139D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_81CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_139DA0(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(void *)(v4 + 28) = 1986291046;
  *(_OWORD *)(v4 + 36) = *(_OWORD *)a2;
  *(void *)(v4 + 52) = *(void *)(a2 + 16);
  uint64_t v5 = sub_128084((uint64_t)a1, &v7, 0x76646566u, 0);
  if (*v5)
  {
    operator delete(v4);
  }
  else
  {
    uint64_t v6 = v7;
    sub_46CA8(a1, v6, (uint64_t **)v5, (uint64_t *)v4);
  }
}

void sub_139E64(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)(v6 + 28) = a2;
  *(_OWORD *)(v6 + 36) = *(_OWORD *)a3;
  *(void *)(v6 + 52) = *(void *)(a3 + 16);
  uint64_t v7 = sub_128084((uint64_t)a1, &v9, a2, HIDWORD(a2));
  if (*v7)
  {
    operator delete(v6);
  }
  else
  {
    uint64_t v8 = v9;
    sub_46CA8(a1, v8, (uint64_t **)v7, (uint64_t *)v6);
  }
}

uint64_t *sub_139F20(uint64_t **a1, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  double result = sub_1283A0(a1, a2, &v10, &v9, a3);
  if (!*result)
  {
    uint64_t v7 = (uint64_t **)result;
    uint64_t v8 = operator new(0x40uLL);
    *((_DWORD *)v8 + 8) = *a4;
    sub_131E5C((uint64_t *)v8 + 5, (uint64_t)(a4 + 2));
    return sub_46CA8(a1, (uint64_t)v10, v7, (uint64_t *)v8);
  }
  return result;
}

void sub_139FA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_139FB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_125CD0((uint64_t *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_13A00C(uint64_t a1)
{
  sub_13A044(a1);

  operator delete();
}

uint64_t sub_13A044(uint64_t a1)
{
  *(void *)a1 = off_622920;
  if (*(unsigned char *)(a1 + 456) && *(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }

  return sub_139560(a1);
}

void *sub_13A0B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_46B38((void *)a2, *(const void **)(a1 + 424), *(void *)(a1 + 432), (uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 2);
  *(void *)(a2 + 24) = *(void *)(a1 + 448);
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 456);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 464);
  double result = sub_46A4C((uint64_t *)(a2 + 48), a1 + 472);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 496);
  uint64_t v5 = *(const void **)(a1 + 504);
  if (v5) {
    double result = (void *)CFRetain(v5);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void sub_13A134(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_13A150@<D0>(uint64_t a1@<X0>, __n128 ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(a1 + 512);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  if (v6 != *v5)
  {
    do
    {
      uint64_t v8 = v6 - 48;
      sub_125CD0((uint64_t *)(v6 - 32));
      uint64_t v6 = v8;
    }
    while (v8 != v7);
  }
  v5[1] = v7;
  uint64_t v9 = *a2;
  int v29 = a2[1];
  if (*a2 == v29) {
    goto LABEL_26;
  }
  uint64_t v10 = a1 + 400;
  uint64_t v11 = a1 + 408;
  uint64_t v12 = a1 + 424;
  do
  {
    uint64_t v13 = *v9;
    unint64_t v14 = (*v9)->n128_u64[0];
    v33.n128_u32[2] = (*v9)->n128_u32[2];
    v33.n128_u64[0] = v14;
    sub_12004C((__n128 **)&v34, v13 + 1);
    unint64_t v36 = v13[2].n128_u64[1];
    uint64_t v15 = v10;
    if (v11 == sub_1202D0(v10, v33.n128_u32[0], v33.n128_u32[1]))
    {
      uint64_t v26 = (os_log_t *)sub_32A48(13);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1749;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    uint64_t v16 = v11;
    uint64_t v17 = (__n128 *)v34.n128_u64[1];
    while (&v34 != v17)
    {
      sub_43F38((uint64_t *)buf, (uint64_t *)&v17[1], "", 1758);
      sub_43F38(&v31, (uint64_t *)&v17[2], "", 1759);
      if sub_4642C(*(uint64_t *)buf, v12) && (sub_4642C(v31, v12))
      {
        char v18 = 0;
LABEL_14:
        uint64_t v17 = (__n128 *)v17->n128_u64[1];
        goto LABEL_15;
      }
      if (!v17[4].n128_u8[0])
      {
        char v18 = 1;
        goto LABEL_14;
      }
      unint64_t v19 = v17->n128_u64[0];
      uint64_t v20 = (__n128 *)v17->n128_u64[1];
      *(void *)(v19 + 8) = v20;
      *(void *)v17->n128_u64[1] = v19;
      --v35;
      sub_125D44((__n128 *)v17[1].n128_u64);
      operator delete(v17);
      char v18 = 0;
      uint64_t v17 = v20;
LABEL_15:
      if (v32) {
        sub_4636C(v32);
      }
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v18) {
        goto LABEL_27;
      }
    }
    if (!v35)
    {
LABEL_27:
      sub_125CD0((uint64_t *)&v34);
      *(void *)a3 = off_6228D0;
      *(void *)&double result = 3;
      *(void *)(a3 + 8) = 3;
      *(void *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 24) = 0;
      *(unsigned char *)(a3 + 32) = 0;
      return result;
    }
    uint64_t v21 = *(void *)(a1 + 512);
    unint64_t v22 = *(void *)(v21 + 8);
    if (v22 >= *(void *)(v21 + 16))
    {
      uint64_t v24 = sub_1200E4(*(int64x2_t **)(a1 + 512), &v33);
    }
    else
    {
      unint64_t v23 = v33.n128_u64[0];
      *(_DWORD *)(v22 + 8) = v33.n128_u32[2];
      *(void *)unint64_t v22 = v23;
      sub_12004C((__n128 **)(v22 + 16), &v34);
      *(void *)(v22 + 40) = v36;
      uint64_t v24 = v22 + 48;
      *(void *)(v21 + 8) = v22 + 48;
    }
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    *(void *)(v21 + 8) = v24;
    sub_125CD0((uint64_t *)&v34);
    ++v9;
  }
  while (v9 != v29);
LABEL_26:
  sub_12053C(a3, 1920099684);
  return result;
}

void sub_13A4A8(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v3;
  sub_125CD0(v1);
  _Unwind_Resume(a1);
}

void sub_13A514(uint64_t a1)
{
  sub_13A54C(a1);

  operator delete();
}

uint64_t sub_13A54C(uint64_t a1)
{
  *(void *)a1 = off_622950;
  uint64_t v2 = *(const void **)(a1 + 504);
  if (v2) {
    CFRelease(v2);
  }
  sub_463E0(*(void **)(a1 + 480));
  uint64_t v3 = *(void **)(a1 + 424);
  if (v3)
  {
    *(void *)(a1 + 432) = v3;
    operator delete(v3);
  }

  return sub_139560(a1);
}

uint64_t sub_13A5C8(uint64_t result, uint64_t a2)
{
  *(void *)double result = off_6228D0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  *(void *)(result + 16) = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  return result;
}

void sub_13A670()
{
}

uint64_t sub_13A694(uint64_t result)
{
  if (!result)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "RoutingManager.cpp";
        __int16 v6 = 1024;
        int v7 = 1425;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v4, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return result;
}

void sub_13A790(_Unwind_Exception *exception_object)
{
}

uint64_t sub_13A7AC(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, const void ***a10, char a11, uint64_t *a12, int a13, long long *a14, void *a15)
{
  uint64_t v16 = sub_139300(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  *(void *)uint64_t v16 = off_622920;
  *(_DWORD *)(v16 + 424) = a13;
  sub_CAE80((unsigned char *)(v16 + 432), a14);
  *(void *)(a1 + 464) = *a15;
  return a1;
}

void sub_13A83C(_Unwind_Exception *a1)
{
  sub_139560(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_13A850(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = 0;
  uint64_t v2 = (void *)(result + 8);
  *(void *)(result + 16) = 0;
  *(void *)double result = result + 8;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  if (v5)
  {
    __int16 v6 = (uint64_t **)result;
    uint64_t v7 = v3;
    do
    {
      unsigned int v8 = *(_DWORD *)(v4 + 32);
      BOOL v9 = v8 >= 0x63736176;
      if (v8 >= 0x63736176) {
        uint64_t v10 = (uint64_t *)v4;
      }
      else {
        uint64_t v10 = (uint64_t *)(v4 + 8);
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if (v7 != v3 && *(_DWORD *)(v7 + 32) < 0x63736177u)
    {
      uint64_t v11 = v7 + 40;
      uint64_t v12 = *(void *)(v7 + 48);
      if (v12 != v7 + 40)
      {
        uint64_t v13 = *(void *)(v7 + 56);
        do
        {
          double result = sub_240DB0(v12 + 16, 0x696D646663736176uLL);
          if (result)
          {
            for (uint64_t i = *(void *)(v12 + 24); i != v12 + 16; uint64_t i = *(void *)(i + 8))
            {
              unsigned int v15 = *(_DWORD *)(i + 20);
              unsigned int v24 = v15;
              uint64_t v16 = *v2;
              if (*v2)
              {
                uint64_t v17 = v2;
                do
                {
                  unsigned int v18 = *(_DWORD *)(v16 + 32);
                  BOOL v19 = v18 >= v15;
                  if (v18 >= v15) {
                    uint64_t v20 = (uint64_t *)v16;
                  }
                  else {
                    uint64_t v20 = (uint64_t *)(v16 + 8);
                  }
                  if (v19) {
                    uint64_t v17 = (void *)v16;
                  }
                  uint64_t v16 = *v20;
                }
                while (*v20);
                if (v17 != v2 && v15 >= *((_DWORD *)v17 + 8))
                {
                  uint64_t v21 = (os_log_t *)sub_32A48(13);
                  unint64_t v22 = *v21;
                  if (*v21)
                  {
                    if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315394;
                      uint64_t v26 = "RoutingManager.cpp";
                      __int16 v27 = 1024;
                      int v28 = 883;
                      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unexpected port type duplication in connection list\"", buf, 0x12u);
                    }
                  }
                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Unexpected port type duplication in connection list");
                }
              }
              double result = (uint64_t)sub_4EE88(v6, v15, &v24);
              *(void *)(result + 40) = v13--;
            }
          }
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12 != v11);
      }
    }
  }
  return result;
}

void sub_13AA6C(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_13AA9C(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (uint64_t **)a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      unsigned int v8 = (uint64_t *)*a2;
      BOOL v9 = *(std::__shared_weak_count **)(*a2 + 24);
      v51[0] = *(void *)(*a2 + 16);
      v51[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
      v50[0] = *(void *)(a1 + 16);
      v50[1] = (uint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v11 = sub_13BB68(a4, v51, v50);
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v11)
      {
        uint64_t v12 = *v8;
        *(void *)(v12 + 8) = v8[1];
        *(void *)v8[1] = v12;
        uint64_t v13 = *v4;
        v13[1] = (uint64_t)v8;
        uint64_t *v8 = (uint64_t)v13;
        char *v4 = v8;
        v8[1] = (uint64_t)v4;
        return v8;
      }
    }
    else
    {
      unint64_t v15 = a3 >> 1;
      unint64_t v16 = (a3 >> 1) + 1;
      uint64_t v17 = a1;
      do
      {
        uint64_t v17 = *(void *)(v17 + 8);
        --v16;
      }
      while (v16 > 1);
      unsigned int v18 = (uint64_t **)sub_13AA9C(a1, v17, a3 >> 1, a4);
      uint64_t v4 = (uint64_t **)sub_13AA9C(v17, a2, a3 - v15, a4);
      BOOL v19 = (std::__shared_weak_count *)v4[3];
      v49[0] = (uint64_t)v4[2];
      v49[1] = (uint64_t)v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = (std::__shared_weak_count *)v18[3];
      v48[0] = (uint64_t)v18[2];
      v48[1] = (uint64_t)v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v21 = sub_13BB68(a4, v49, v48);
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v21)
      {
        for (uint64_t i = v4[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          unint64_t v23 = (std::__shared_weak_count *)i[3];
          v47[0] = i[2];
          v47[1] = (uint64_t)v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v24 = (std::__shared_weak_count *)v18[3];
          v46[0] = (uint64_t)v18[2];
          v46[1] = (uint64_t)v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v25 = sub_13BB68(a4, v47, v46);
          if (v24) {
            std::__shared_weak_count::__release_weak(v24);
          }
          if (v23)
          {
            std::__shared_weak_count::__release_weak(v23);
            if (!v25) {
              goto LABEL_38;
            }
          }
          else if (!v25)
          {
            goto LABEL_38;
          }
        }
        uint64_t i = a2;
LABEL_38:
        uint64_t v26 = *i;
        __int16 v27 = *v4;
        v27[1] = *(void *)(*i + 8);
        **(void **)(v26 + 8) = v27;
        int v28 = *v18;
        int v29 = v18[1];
        v28[1] = (uint64_t)v4;
        char *v4 = v28;
        *unsigned int v18 = (uint64_t *)v26;
        *(void *)(v26 + 8) = v18;
      }
      else
      {
        int v29 = v18[1];
        uint64_t i = (uint64_t *)v4;
        uint64_t v4 = v18;
      }
      if (v29 != i && i != a2)
      {
        __int16 v30 = i;
        do
        {
          uint64_t v31 = (std::__shared_weak_count *)i[3];
          v45[0] = i[2];
          v45[1] = (uint64_t)v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          int v32 = (std::__shared_weak_count *)v29[3];
          v44[0] = v29[2];
          v44[1] = (uint64_t)v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v33 = sub_13BB68(a4, v45, v44);
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
          if (v31) {
            std::__shared_weak_count::__release_weak(v31);
          }
          if (v33)
          {
            for (uint64_t j = (uint64_t *)i[1]; j != a2; uint64_t j = (uint64_t *)j[1])
            {
              uint64_t v35 = (std::__shared_weak_count *)j[3];
              v43[0] = j[2];
              v43[1] = (uint64_t)v35;
              if (v35) {
                atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v36 = (std::__shared_weak_count *)v29[3];
              v42[0] = v29[2];
              v42[1] = (uint64_t)v36;
              if (v36) {
                atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              BOOL v37 = sub_13BB68(a4, v43, v42);
              if (v36) {
                std::__shared_weak_count::__release_weak(v36);
              }
              if (v35)
              {
                std::__shared_weak_count::__release_weak(v35);
                if (!v37) {
                  goto LABEL_67;
                }
              }
              else if (!v37)
              {
                goto LABEL_67;
              }
            }
            uint64_t j = a2;
LABEL_67:
            uint64_t v38 = *j;
            uint64_t v39 = *i;
            *(void *)(v39 + 8) = *(void *)(*j + 8);
            **(void **)(v38 + 8) = v39;
            if (v30 == i) {
              __int16 v30 = j;
            }
            uint64_t v41 = *v29;
            unsigned int v40 = (uint64_t *)v29[1];
            *(void *)(v41 + 8) = i;
            *uint64_t i = v41;
            uint64_t *v29 = v38;
            *(void *)(v38 + 8) = v29;
            int v29 = v40;
            uint64_t i = j;
          }
          else
          {
            int v29 = (uint64_t *)v29[1];
          }
        }
        while (v29 != v30 && i != a2);
      }
    }
  }
  return (uint64_t *)v4;
}

void sub_13AE40(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_13AE8C(uint64_t *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    int v58 = (os_log_t *)sub_32A48(13);
    std::string::size_type v59 = *v58;
    if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5155;
      _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  BOOL v61 = a1;
  a1[2] = 0;
  sub_FB288(&v67, a3);
  __int16 v6 = v68;
  if (v68 == &v67) {
    goto LABEL_109;
  }
  int v63 = a2 + 63;
  do
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6[2] + 152))(v6[2]);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6[2] + 160))(v6[2]);
    if (((v7 | v8 ^ 1) & 1) == 0)
    {
      BOOL v9 = (os_log_t *)sub_32A48(8);
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          sub_4F64((uint64_t)__p, (os_unfair_lock_t)(v6[2] + 8));
          BOOL v11 = __p;
          if (v66 < 0) {
            BOOL v11 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5170;
          __int16 v70 = 2080;
          v71[0] = v11;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Inconsistent state - Port is routable but not connected : %s", buf, 0x1Cu);
          if (v66 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v12 = (os_log_t *)sub_32A48(8);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
    {
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(v6[2] + 8));
      unint64_t v14 = __p;
      if (v66 < 0) {
        unint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5172;
      __int16 v70 = 2080;
      v71[0] = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port update: %s.", buf, 0x1Cu);
      if (v66 < 0) {
        operator delete(__p[0]);
      }
    }
    int v15 = v7 & v8;
    if ((v7 & v8 & 1) == 0)
    {
      uint64_t v16 = v6[2];
      uint64_t v17 = v6[3];
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
      }
      unsigned int v18 = operator new(0x20uLL);
      v18[2] = v16;
      void v18[3] = v17;
      uint64_t v19 = *a4;
      *unsigned int v18 = *a4;
      v18[1] = a4;
      *(void *)(v19 + 8) = v18;
      *a4 = (uint64_t)v18;
      ++a4[2];
    }
    if ((*(_WORD *)(v6[2] + 184) & 2) == 0) {
      goto LABEL_96;
    }
    BOOL v21 = (void *)a2[63];
    uint64_t v20 = (void *)a2[64];
    if (v21 == v20)
    {
      uint64_t v31 = (void *)a2[63];
      goto LABEL_50;
    }
    do
    {
      unint64_t v22 = (std::__shared_weak_count *)v21[1];
      if (v22)
      {
        unint64_t v23 = std::__shared_weak_count::lock(v22);
        unsigned int v24 = v23;
        if (v23)
        {
          uint64_t v25 = *v21;
          atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v23);
          goto LABEL_28;
        }
      }
      else
      {
        unsigned int v24 = 0;
      }
      uint64_t v25 = 0;
LABEL_28:
      uint64_t v26 = v6[2];
      __int16 v27 = (std::__shared_weak_count *)v6[3];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v24)
      {
        int v28 = std::__shared_weak_count::lock(v24);
        if (!v28) {
          uint64_t v25 = 0;
        }
        if (!v27)
        {
LABEL_39:
          BOOL v30 = v25 == 0;
          if (!v28) {
            goto LABEL_41;
          }
LABEL_40:
          sub_4636C(v28);
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v25 = 0;
        int v28 = 0;
        if (!v27) {
          goto LABEL_39;
        }
      }
      int v29 = std::__shared_weak_count::lock(v27);
      if (!v29) {
        goto LABEL_39;
      }
      BOOL v30 = v25 == v26;
      sub_4636C(v29);
      if (v28) {
        goto LABEL_40;
      }
LABEL_41:
      if (v27) {
        std::__shared_weak_count::__release_weak(v27);
      }
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      if (v30) {
        goto LABEL_48;
      }
      v21 += 2;
    }
    while (v21 != v20);
    BOOL v21 = v20;
LABEL_48:
    uint64_t v31 = v21;
    BOOL v21 = (void *)a2[64];
LABEL_50:
    if (v31 != v21)
    {
      uint64_t v32 = sub_32A48(8);
      if (*(unsigned char *)(v32 + 8))
      {
        BOOL v33 = *(NSObject **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            sub_4F64((uint64_t)__p, (os_unfair_lock_t)(v6[2] + 8));
            __n128 v34 = __p;
            if (v66 < 0) {
              __n128 v34 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5186;
            __int16 v70 = 2080;
            v71[0] = v34;
            _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found and removed port from mCachedPortStack: %s", buf, 0x1Cu);
            if (v66 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t v35 = v31 + 2;
      unint64_t v36 = (void *)a2[64];
      if (v31 + 2 == v36)
      {
        BOOL v21 = v31;
      }
      else
      {
        do
        {
          BOOL v21 = v35;
          long long v37 = *(_OWORD *)v35;
          *uint64_t v35 = 0;
          v35[1] = 0;
          uint64_t v38 = (std::__shared_weak_count *)*(v35 - 1);
          *((_OWORD *)v35 - 1) = v37;
          if (v38) {
            std::__shared_weak_count::__release_weak(v38);
          }
          v35 += 2;
        }
        while (v21 + 2 != v36);
        uint64_t v35 = (void *)a2[64];
      }
      while (v35 != v21)
      {
        uint64_t v39 = (std::__shared_weak_count *)*(v35 - 1);
        if (v39) {
          std::__shared_weak_count::__release_weak(v39);
        }
        v35 -= 2;
      }
      a2[64] = (uint64_t)v21;
    }
    if (v15)
    {
      uint64_t v40 = *(void *)(*a2 + 128);
      if (!v40) {
        goto LABEL_81;
      }
      unsigned int v41 = *(_DWORD *)(v6[2] + 144);
      uint64_t v42 = *a2 + 128;
      do
      {
        unsigned int v43 = *(_DWORD *)(v40 + 28);
        BOOL v44 = v43 >= v41;
        if (v43 >= v41) {
          int v45 = (uint64_t *)v40;
        }
        else {
          int v45 = (uint64_t *)(v40 + 8);
        }
        if (v44) {
          uint64_t v42 = v40;
        }
        uint64_t v40 = *v45;
      }
      while (*v45);
      if (v42 != *a2 + 128 && *(_DWORD *)(v42 + 28) <= v41)
      {
        for (uint64_t i = *v63; (void *)i != v21; i += 16)
        {
          __p[0] = *(void **)i;
          int v56 = *(std::__shared_weak_count **)(i + 8);
          __p[1] = v56;
          if (v56) {
            atomic_fetch_add_explicit(&v56->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          sub_43F38((uint64_t *)buf, (uint64_t *)__p, "", 5197);
          __int16 v57 = *(_WORD *)(*(void *)buf + 184);
          if (*(void *)&buf[8]) {
            sub_4636C(*(std::__shared_weak_count **)&buf[8]);
          }
          if (v56) {
            std::__shared_weak_count::__release_weak(v56);
          }
          if ((v57 & 0x40) == 0)
          {
            BOOL v21 = (void *)i;
            break;
          }
        }
      }
      else
      {
LABEL_81:
        BOOL v21 = (void *)*v63;
      }
      uint64_t v46 = sub_32A48(8);
      if (*(unsigned char *)(v46 + 8))
      {
        uint64_t v47 = *(NSObject **)v46;
        if (*(void *)v46)
        {
          if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v48 = *v63;
            sub_4F64((uint64_t)__p, (os_unfair_lock_t)(v6[2] + 8));
            int v49 = __p;
            if (v66 < 0) {
              int v49 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5200;
            __int16 v70 = 1024;
            LODWORD(v71[0]) = ((unint64_t)v21 - v48) >> 4;
            WORD2(v71[0]) = 2080;
            *(void *)((char *)v71 + 6) = v49;
            _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d Inserting port into mCachedPortStack at position %d: %s", buf, 0x22u);
            if (v66 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t v50 = v6[3];
      *(void *)buf = v6[2];
      *(void *)&buf[8] = v50;
      if (v50) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 16), 1uLL, memory_order_relaxed);
      }
      sub_13B7B4(v63, (uint64_t)v21, (long long *)buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v51 = v6[2];
      uint64_t v52 = v6[3];
      if (v52) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 16), 1uLL, memory_order_relaxed);
      }
      int v53 = operator new(0x20uLL);
      v53[2] = v51;
      v53[3] = v52;
      uint64_t v54 = *v61;
      *int v53 = *v61;
      v53[1] = v61;
      *(void *)(v54 + 8) = v53;
      *BOOL v61 = (uint64_t)v53;
      ++v61[2];
    }
LABEL_96:
    __int16 v6 = (uint64_t *)v6[1];
  }
  while (v6 != &v67);
LABEL_109:
  sub_B8E4(&v67);
}

void sub_13B674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_13B70C(uint64_t a1)
{
  sub_13B760(*(void **)(a1 + 32));
  sub_FE2E8((uint64_t *)a1);

  operator delete();
}

void sub_13B760(void *a1)
{
  if (a1)
  {
    sub_13B760(*a1);
    sub_13B760(a1[1]);
    sub_289630(a1 + 5);
    operator delete(a1);
  }
}

void sub_13B7B4(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a2 - *a1;
  uint64_t v9 = v8 >> 4;
  BOOL v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v15 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v15 >> 60) {
      sub_60548();
    }
    uint64_t v16 = v10 - v7;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v35 = v11;
    if (v17) {
      unint64_t v17 = (unint64_t)sub_10724(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (_OWORD *)(v17 + 16 * v9);
    uint64_t v32 = (char *)v17;
    *(void *)&long long v33 = v19;
    *((void *)&v33 + 1) = v19;
    __n128 v34 = (char *)(v17 + 16 * v18);
    if (v9 == v18)
    {
      if (v8 < 1)
      {
        if (v7 == a2) {
          unint64_t v21 = 1;
        }
        else {
          unint64_t v21 = v8 >> 3;
        }
        uint64_t v39 = v11;
        unint64_t v22 = (char *)sub_10724(v21);
        uint64_t v24 = v33;
        uint64_t v25 = *((void *)&v33 + 1) - v33;
        if (*((void *)&v33 + 1) == (void)v33)
        {
          int64x2_t v30 = vdupq_n_s64(v33);
          unint64_t v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          uint64_t v26 = v25 >> 4;
          unint64_t v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v28 = 16 * v26;
          int v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)int v29 = *(_OWORD *)v24;
            v29 += 16;
            *(void *)uint64_t v24 = 0;
            *(void *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          int64x2_t v30 = (int64x2_t)v33;
        }
        uint64_t v31 = v34;
        unint64_t v36 = v32;
        uint64_t v32 = v22;
        *(void *)&long long v33 = &v22[16 * (v21 >> 2)];
        int64x2_t v37 = v30;
        *((void *)&v33 + 1) = v27;
        __n128 v34 = &v22[16 * v23];
        uint64_t v38 = v31;
        sub_131CB8((uint64_t)&v36);
        uint64_t v19 = (_OWORD *)*((void *)&v33 + 1);
      }
      else
      {
        unint64_t v20 = v9 + 2;
        if (v9 >= -1) {
          unint64_t v20 = v9 + 1;
        }
        v19 -= v20 >> 1;
        *(void *)&long long v33 = v19;
        *((void *)&v33 + 1) = v19;
      }
    }
    _OWORD *v19 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)&v33 + 1) += 16;
    sub_13BA74(a1, &v32, (void *)a2);
    sub_131CB8((uint64_t)&v32);
  }
  else if (a2 == v6)
  {
    *(_OWORD *)a2 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    a1[1] = a2 + 16;
  }
  else
  {
    sub_13B9E4((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    uint64_t v12 = v7 + 16 * v9;
    long long v13 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    unint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
    *(_OWORD *)uint64_t v12 = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_13B9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_13B9E4(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = (char *)(a2 + v4 - a4);
  unint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v5;
    v6 += 16;
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    v5 += 16;
  }
  *(void *)(a1 + 8) = v6;
  if (v4 != a4)
  {
    uint64_t v7 = (std::__shared_weak_count **)(v4 - 8);
    uint64_t v8 = 16 * ((v4 - a4) >> 4);
    uint64_t v9 = a2 - 16;
    do
    {
      unint64_t v10 = (void *)(v9 + v8);
      long long v11 = *(_OWORD *)(v9 + v8);
      *unint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v12 = *v7;
      *(_OWORD *)(v7 - 1) = v11;
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      v7 -= 2;
      v8 -= 16;
    }
    while (v8);
  }
}

uint64_t sub_13BA74(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 2;
  a2[1] = sub_98E84((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  uint64_t v8 = a1[1];
  uint64_t v9 = (_OWORD *)a2[2];
  uint64_t v16 = v9;
  unint64_t v17 = v9;
  v14[0] = v7;
  v14[1] = &v16;
  void v14[2] = &v17;
  if ((void *)v8 != v3)
  {
    do
    {
      *v9++ = *(_OWORD *)v3;
      void *v3 = 0;
      v3[1] = 0;
      v3 += 2;
    }
    while (v3 != (void *)v8);
    unint64_t v17 = v9;
  }
  char v15 = 1;
  sub_135BB0((uint64_t)v14);
  a2[2] = v9;
  uint64_t v10 = *a1;
  *a1 = a2[1];
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

BOOL sub_13BB68(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    uint64_t v9 = v8;
    if (v8)
    {
      uint64_t v10 = *a2;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v21 = v10;
      unint64_t v22 = v8;
      sub_4636C(v8);
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v11 = sub_13BCA4(v5, &v21);
  uint64_t v12 = *a1;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  long long v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    unint64_t v14 = std::__shared_weak_count::lock(v13);
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = *a3;
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v16;
      unint64_t v20 = v14;
      sub_4636C(v14);
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
    }
  }
  else
  {
    char v15 = 0;
  }
  unint64_t v17 = sub_13BCA4(v12, &v19);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  return v11 < v17;
}

void sub_13BC78(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13BCA4(uint64_t a1, uint64_t *a2)
{
  sub_549A4(&v26, a2, "", 898);
  if (*(_WORD *)(v26 + 184))
  {
    sub_105F14(v23, v26);
    sub_8E4B8(&v24, v23);
    sub_8108(v23);
    uint64_t v12 = v25;
    if (v25 == &v24) {
      goto LABEL_29;
    }
    while (1)
    {
      uint64_t v13 = v12[2];
      if ((*(_WORD *)(v13 + 184) & 1) == 0) {
        break;
      }
      uint64_t v12 = (uint64_t *)v12[1];
      if (v12 == &v24) {
        goto LABEL_29;
      }
    }
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = a1 + 8;
    uint64_t v14 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    unsigned int v17 = *(_DWORD *)(v13 + 144);
    uint64_t v18 = v15;
    do
    {
      unsigned int v19 = *(_DWORD *)(v14 + 32);
      BOOL v20 = v19 >= v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v14;
      }
      else {
        uint64_t v21 = (uint64_t *)(v14 + 8);
      }
      if (v20) {
        uint64_t v18 = v14;
      }
      uint64_t v14 = *v21;
    }
    while (*v21);
    if (v18 == v15 || v17 < *(_DWORD *)(v18 + 32)) {
LABEL_29:
    }
      uint64_t v11 = 0;
    else {
      uint64_t v11 = *(void *)(v18 + 40);
    }
    sub_B8E4(&v24);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = a1 + 8;
    uint64_t v3 = v5;
    if (!v5) {
      goto LABEL_13;
    }
    unsigned int v6 = *(_DWORD *)(v26 + 144);
    uint64_t v7 = v4;
    do
    {
      unsigned int v8 = *(_DWORD *)(v3 + 32);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        uint64_t v10 = (uint64_t *)v3;
      }
      else {
        uint64_t v10 = (uint64_t *)(v3 + 8);
      }
      if (v9) {
        uint64_t v7 = v3;
      }
      uint64_t v3 = *v10;
    }
    while (*v10);
    if (v7 != v4 && v6 >= *(_DWORD *)(v7 + 32)) {
      uint64_t v11 = *(void *)(v7 + 40);
    }
    else {
LABEL_13:
    }
      uint64_t v11 = 0;
  }
  if (v27) {
    sub_4636C(v27);
  }
  return v11;
}

void sub_13BDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_8108(&a9);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 - 24);
  if (v11) {
    sub_4636C(v11);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_13BE14(void *a1, void **a2)
{
  sub_3B7EC();
  uint64_t v18 = &qword_64CC40;
  char v19 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v21 = "RoutingManager.cpp";
      __int16 v22 = 1024;
      int v23 = 1939;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v7 = (void *)*v4;
  uint64_t v5 = v4 + 1;
  unsigned int v6 = v7;
  if (v7 != v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a1;
    do
    {
      if (!*((unsigned char *)v6 + 128))
      {
        uint64_t v10 = operator new(0x18uLL);
        v10[4] = *((_DWORD *)v6 + 8);
        *(void *)uint64_t v10 = v9;
        *((void *)v10 + 1) = a1;
        *((void *)v9 + 1) = v10;
        *a1 = v10;
        a1[2] = ++v8;
        uint64_t v9 = v10;
      }
      uint64_t v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          unsigned int v6 = v12;
        }
        while (!v13);
      }
      unsigned int v6 = v12;
    }
    while (v12 != v5);
  }
  return sub_3BCAC(&v18);
}

void sub_13C020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

unsigned char *sub_13C058(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_3B7EC();
  int v295 = &qword_64CC40;
  char v296 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v258 = (os_log_t *)sub_32A48(13);
    uint64_t v259 = *v258;
    if (*v258 && os_log_type_enabled(*v258, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3442;
      _os_log_impl(&def_1E50E8, v259, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v261 = (void (*)(void *))&std::runtime_error::~runtime_error;
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
LABEL_565:
    __cxa_throw(exception, v262, v261);
  }
  if (!a3[2])
  {
    uint64_t v263 = (os_log_t *)sub_32A48(13);
    uint64_t v264 = *v263;
    if (*v263 && os_log_type_enabled(*v263, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3444;
      _os_log_impl(&def_1E50E8, v264, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v261 = (void (*)(void *))&std::logic_error::~logic_error;
    std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
    goto LABEL_565;
  }
  uint64_t v7 = sub_32A48(8);
  uint64_t v8 = sub_32A48(34);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_9;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_9:
  uint64_t v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    sub_10BFD0((std::string *)__p, a3);
    uint64_t v15 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3446;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v15;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Port update with port map %s.", buf, 0x1Cu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  unsigned int v17 = a3 + 1;
  uint64_t v16 = a3[1];
  uint64_t v281 = a1;
  uint64_t v283 = a2;
  uint64_t v274 = a3 + 1;
  if (!v16)
  {
    *(void *)buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&_DWORD buf[16] = 0;
    goto LABEL_116;
  }
  uint64_t v18 = a3 + 1;
  uint64_t v19 = a3[1];
  do
  {
    unsigned int v20 = *(_DWORD *)(v19 + 32);
    BOOL v21 = v20 >= 0x64637275;
    if (v20 >= 0x64637275) {
      __int16 v22 = (uint64_t *)v19;
    }
    else {
      __int16 v22 = (uint64_t *)(v19 + 8);
    }
    if (v21) {
      uint64_t v18 = (void *)v19;
    }
    uint64_t v19 = *v22;
  }
  while (*v22);
  if (v18 != v17 && *((_DWORD *)v18 + 8) < 0x64637276u)
  {
    int v23 = a3 + 1;
    uint64_t v24 = a3[1];
    do
    {
      unsigned int v25 = *(_DWORD *)(v24 + 32);
      BOOL v26 = v25 >= 0x64637275;
      if (v25 >= 0x64637275) {
        unint64_t v27 = (uint64_t *)v24;
      }
      else {
        unint64_t v27 = (uint64_t *)(v24 + 8);
      }
      if (v26) {
        int v23 = (void *)v24;
      }
      uint64_t v24 = *v27;
    }
    while (*v27);
    if (v23 != v17 && *((_DWORD *)v23 + 8) < 0x64637276u)
    {
      sub_FB720((uint64_t *)__p, v23 + 5);
      int v28 = sub_1457AC(a2);
      int v29 = sub_14560C(a2);
      BOOL v30 = 1;
      if (v29 > 1668313714)
      {
        if (v29 > 1668576376)
        {
          if (v29 != 1668576377 && v29 != 1668703084) {
            goto LABEL_70;
          }
          goto LABEL_66;
        }
        if (v29 != 1668313715)
        {
          if (v29 != 1668505974) {
            goto LABEL_70;
          }
          goto LABEL_45;
        }
      }
      else
      {
        if (v29 <= 1668309361)
        {
          if (v29 != 1668182896)
          {
            unsigned __int16 v31 = 17011;
            goto LABEL_49;
          }
LABEL_45:
          uint64_t v32 = sub_298DA4();
          int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 112))(v32);
          if (v33 != 2) {
            goto LABEL_69;
          }
          goto LABEL_67;
        }
        if (v29 != 1668309362)
        {
          unsigned __int16 v31 = 29250;
LABEL_49:
          if (v29 != (v31 | 0x63700000)) {
            goto LABEL_70;
          }
        }
      }
      if (v28 > 1919776354)
      {
        if (v28 > 1987081832)
        {
          if (v28 == 1987081839) {
            goto LABEL_66;
          }
          unsigned __int16 v35 = 30313;
        }
        else
        {
          if (v28 == 1919776355) {
            goto LABEL_66;
          }
          unsigned __int16 v35 = 26467;
        }
        int v34 = v35 | 0x76700000;
      }
      else if (v28 > 1768779618)
      {
        if (v28 == 1768779619) {
          goto LABEL_66;
        }
        int v34 = 1768781411;
      }
      else
      {
        if (v28 == 1735222132) {
          goto LABEL_66;
        }
        int v34 = 1768057203;
      }
      if (v28 == v34)
      {
LABEL_66:
        uint64_t v36 = sub_298DA4();
        int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 104))(v36);
        if (v33 != 2) {
          goto LABEL_69;
        }
LABEL_67:
        if (sub_24F004())
        {
          BOOL v30 = 0;
          goto LABEL_70;
        }
LABEL_69:
        BOOL v30 = v33 != 1;
      }
LABEL_70:
      sub_FB288((uint64_t *)&v284, __p);
      int64x2_t v37 = v285;
      if (v285 != &v284)
      {
        if (v30) {
          uint64_t v38 = " routable";
        }
        else {
          uint64_t v38 = "unroutable";
        }
        do
        {
          uint64_t v40 = v37[2];
          uint64_t v39 = (std::__shared_weak_count *)v37[3];
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (((unsigned int (*)(uint64_t **))(*v40)[19])(v40)
            && ((unsigned int (*)(uint64_t **))(*v40)[15])(v40)
            && v30 != ((unsigned int (*)(uint64_t **))(*v40)[20])(v40))
          {
            ((void (*)(uint64_t **, BOOL))(*v40)[59])(v40, v30);
            uint64_t v41 = sub_32A48(8);
            uint64_t v42 = sub_32A48(34);
            char v43 = 0;
            uint64_t v44 = 0;
            *(void *)buf = 0x100000002;
            uint64_t v45 = *(void *)(v41 + 8);
            while (1)
            {
              uint64_t v46 = *(int *)&buf[4 * v44];
              char v47 = v43;
              if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
                break;
              }
              char v43 = 1;
              uint64_t v44 = 1;
              if (v47) {
                goto LABEL_85;
              }
            }
            if ((v45 & v46) == 0) {
              uint64_t v41 = v42;
            }
LABEL_85:
            uint64_t v48 = *(NSObject **)v41;
            if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3836;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v38;
              _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Making BTLE Port %s ", buf, 0x1Cu);
            }
          }
          if (v39) {
            sub_4636C(v39);
          }
          int64x2_t v37 = (uint64_t ***)v37[1];
        }
        while (v37 != &v284);
      }
      sub_B8E4((uint64_t *)&v284);
      sub_8108((uint64_t *)__p);
      unsigned int v17 = a3 + 1;
      uint64_t v16 = *v274;
      a2 = v283;
    }
  }
  *(void *)buf = buf;
  *(void *)&buf[8] = buf;
  *(void *)&_DWORD buf[16] = 0;
  if (v16)
  {
    int v49 = v17;
    uint64_t v50 = v16;
    do
    {
      unsigned int v51 = *(_DWORD *)(v50 + 32);
      BOOL v52 = v51 >= 0x66637275;
      if (v51 >= 0x66637275) {
        int v53 = (uint64_t *)v50;
      }
      else {
        int v53 = (uint64_t *)(v50 + 8);
      }
      if (v52) {
        int v49 = (void *)v50;
      }
      uint64_t v50 = *v53;
    }
    while (*v53);
    if (v49 != v17 && *((_DWORD *)v49 + 8) < 0x66637276u)
    {
      sub_147140(buf, (uint64_t *)buf, v49[6], (uint64_t)(v49 + 5));
      uint64_t v16 = *v17;
    }
    if (v16)
    {
      uint64_t v54 = v17;
      do
      {
        unsigned int v55 = *(_DWORD *)(v16 + 32);
        BOOL v56 = v55 >= 0x6E637275;
        if (v55 >= 0x6E637275) {
          __int16 v57 = (uint64_t *)v16;
        }
        else {
          __int16 v57 = (uint64_t *)(v16 + 8);
        }
        if (v56) {
          uint64_t v54 = (void *)v16;
        }
        uint64_t v16 = *v57;
      }
      while (*v57);
      if (v54 != v17 && *((_DWORD *)v54 + 8) < 0x6E637276u) {
        sub_147140(buf, (uint64_t *)buf, v54[6], (uint64_t)(v54 + 5));
      }
    }
  }
LABEL_116:
  uint64_t v276 = (const void ***)(a2 + 216);
  sub_18F378(a2 + 216, (uint64_t)buf);
  sub_8108((uint64_t *)buf);
  if (*(void *)(a2 + 288) || *(void *)(a2 + 328) || *(void *)(a2 + 368))
  {
    uint64_t v58 = sub_32A48(2);
    uint64_t v59 = sub_32A48(34);
    char v60 = 0;
    uint64_t v61 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v62 = *(void *)(v58 + 8);
    while (1)
    {
      uint64_t v63 = *(int *)&buf[4 * v61];
      char v64 = v60;
      if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
        break;
      }
      char v60 = 1;
      uint64_t v61 = 1;
      if (v64) {
        goto LABEL_125;
      }
    }
    if ((v62 & v63) == 0) {
      uint64_t v58 = v59;
    }
LABEL_125:
    int v65 = *(NSObject **)v58;
    if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      sub_18EEB8((std::string *)__p, v276);
      char v66 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3455;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v66;
      _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Persistent route info: %s.", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  os_log_type_t v272 = a3;
  uint64_t v292 = (uint64_t)&v292;
  long long v293 = &v292;
  uint64_t v294 = 0;
  uint64_t v289 = (uint64_t)&v289;
  std::string::size_type v290 = &v289;
  uint64_t v291 = 0;
  uint64_t v67 = *v17;
  if (!*v17)
  {
    int v71 = 0;
    goto LABEL_289;
  }
  do
  {
    unsigned int v68 = *(_DWORD *)(v67 + 32);
    BOOL v69 = v68 >= 0x66637275;
    if (v68 >= 0x66637275) {
      __int16 v70 = (uint64_t *)v67;
    }
    else {
      __int16 v70 = (uint64_t *)(v67 + 8);
    }
    if (v69) {
      unsigned int v17 = (void *)v67;
    }
    uint64_t v67 = *v70;
  }
  while (*v70);
  if (v17 == v274)
  {
    int v71 = 0;
    unsigned int v17 = a3 + 1;
    goto LABEL_289;
  }
  if (*((_DWORD *)v17 + 8) <= 0x66637275u)
  {
    sub_13AE8C((uint64_t *)buf, (uint64_t *)a2, v17 + 5, &v292);
    sub_8108(&v289);
    uint64_t v72 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      uint64_t v73 = *(uint64_t **)&buf[8];
      uint64_t v74 = *(void *)buf;
      uint64_t v75 = **(void **)&buf[8];
      *(void *)(v75 + 8) = *(void *)(*(void *)buf + 8);
      **(void **)(v74 + 8) = v75;
      uint64_t v76 = v289;
      *(void *)(v289 + 8) = v73;
      *uint64_t v73 = v76;
      *(void *)(v74 + 8) = &v289;
      uint64_t v289 = v74;
      v291 += v72;
      *(void *)&_DWORD buf[16] = 0;
    }
    sub_8108((uint64_t *)buf);
    if (v291)
    {
      std::string v77 = v290;
      if (v290 != &v289)
      {
        while (1)
        {
          std::string v78 = (std::__shared_weak_count *)v77[3];
          *(void *)std::string __p = v77[2];
          *(void *)&__p[8] = v78;
          if (v78) {
            atomic_fetch_add_explicit(&v78->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          sub_43F38((uint64_t *)buf, (uint64_t *)__p, "", 3768);
          uint64_t v79 = *(void *)buf;
          if (*(void *)buf)
          {
            if ((*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf)) {
              LOBYTE(v79) = *(_DWORD *)(v79 + 264) == 1781740087;
            }
            else {
              LOBYTE(v79) = 0;
            }
          }
          if (*(void *)&buf[8]) {
            sub_4636C(*(std::__shared_weak_count **)&buf[8]);
          }
          if (v78) {
            std::__shared_weak_count::__release_weak(v78);
          }
          if (v79) {
            break;
          }
          std::string v77 = (uint64_t *)v77[1];
          if (v77 == &v289) {
            goto LABEL_161;
          }
        }
        uint64_t v80 = v290;
        if (v290 != &v289)
        {
          while (1)
          {
            __int16 v81 = (std::__shared_weak_count *)v80[3];
            *(void *)std::string __p = v80[2];
            *(void *)&__p[8] = v81;
            if (v81) {
              atomic_fetch_add_explicit(&v81->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            sub_43F38((uint64_t *)buf, (uint64_t *)__p, "", 3774);
            uint64_t v82 = *(void *)buf;
            if (*(void *)buf) {
              LOBYTE(v82) = (*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf)
            }
                         && (*(unsigned int (**)(uint64_t))(*(void *)v82 + 160))(v82)
                         && (*(unsigned int (**)(uint64_t))(*(void *)v82 + 400))(v82) == 1;
            if (*(void *)&buf[8]) {
              sub_4636C(*(std::__shared_weak_count **)&buf[8]);
            }
            if (v81) {
              std::__shared_weak_count::__release_weak(v81);
            }
            if (v82) {
              break;
            }
            uint64_t v80 = (uint64_t *)v80[1];
            if (v80 == &v289) {
              goto LABEL_176;
            }
          }
LABEL_161:
          a2 = v283;
          goto LABEL_213;
        }
LABEL_176:
        memset(__p, 0, 24);
        a2 = v283;
        __int16 v83 = *(uint64_t **)(v283 + 504);
        uint64_t v84 = *(uint64_t **)(v283 + 512);
        if (v83 != v84)
        {
          do
          {
            sub_43F38((uint64_t *)buf, v83, "", 1317);
            uint64_t v85 = *(void *)buf;
            BOOL v86 = (*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf)
               && (*(unsigned int (**)(uint64_t))(*(void *)v85 + 160))(v85)
               && (*(uint64_t (**)(uint64_t))(*(void *)v85 + 400))(v85) == 1;
            if (*(void *)&buf[8]) {
              sub_4636C(*(std::__shared_weak_count **)&buf[8]);
            }
            if (v86)
            {
              uint64_t v87 = *(void *)&__p[8];
              if (*(void *)&__p[8] >= *(void *)&__p[16])
              {
                uint64_t v90 = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 4;
                unint64_t v91 = v90 + 1;
                if ((unint64_t)(v90 + 1) >> 60) {
                  sub_60548();
                }
                uint64_t v92 = *(void *)&__p[16] - *(void *)__p;
                if ((uint64_t)(*(void *)&__p[16] - *(void *)__p) >> 3 > v91) {
                  unint64_t v91 = v92 >> 3;
                }
                if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v93 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v91;
                }
                *(void *)&unsigned char buf[32] = &__p[16];
                int v94 = (char *)sub_10724(v93);
                unsigned int v95 = &v94[16 * v90];
                *(void *)buf = v94;
                *(void *)&buf[8] = v95;
                *(void *)&buf[24] = &v94[16 * v96];
                long long v97 = *(_OWORD *)v83;
                *(_OWORD *)unsigned int v95 = *(_OWORD *)v83;
                if (*((void *)&v97 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 16), 1uLL, memory_order_relaxed);
                }
                *(void *)&_DWORD buf[16] = v95 + 16;
                sub_FBB48((uint64_t *)__p, buf);
                uint64_t v89 = *(void *)&__p[8];
                sub_131CB8((uint64_t)buf);
              }
              else
              {
                **(void **)&__p[8] = *v83;
                uint64_t v88 = v83[1];
                *(void *)(v87 + 8) = v88;
                if (v88) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 16), 1uLL, memory_order_relaxed);
                }
                uint64_t v89 = v87 + 16;
              }
              *(void *)&__p[8] = v89;
            }
            v83 += 2;
          }
          while (v83 != v84);
          uint64_t v98 = *(uint64_t **)__p;
          uint64_t v99 = *(uint64_t **)&__p[8];
          a2 = v283;
          if (*(void *)__p != *(void *)&__p[8])
          {
            *(void *)buf = buf;
            *(void *)&buf[8] = buf;
            *(void *)&_DWORD buf[16] = 0;
            std::string::size_type v284 = (uint64_t **)&v284;
            uint64_t v285 = &v284;
            uint64_t v286 = 0;
            do
            {
              sub_3590((uint64_t *)buf, *v98, v98[1]);
              v98 += 2;
            }
            while (v98 != v99);
            uint64_t v100 = sub_32A48(8);
            uint64_t v101 = sub_32A48(34);
            char v102 = 0;
            uint64_t v103 = 0;
            v337[0].__r_.__value_.__r.__words[0] = 0x100000002;
            uint64_t v104 = *(void *)(v100 + 8);
            while (1)
            {
              uint64_t v105 = *((int *)&v337[0].__r_.__value_.__l.__data_ + v103);
              char v106 = v102;
              if (((v104 & v105) != 0) != ((*(void *)(v101 + 8) & v105) != 0)) {
                break;
              }
              char v102 = 1;
              uint64_t v103 = 1;
              if (v106) {
                goto LABEL_208;
              }
            }
            if ((v104 & v105) == 0) {
              uint64_t v100 = v101;
            }
LABEL_208:
            unint64_t v107 = *(NSObject **)v100;
            if (v107 && os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
            {
              LODWORD(v337[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v337[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingManager.cpp";
              WORD2(v337[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v337[0].__r_.__value_.__r.__words[1] + 6) = 3796;
              _os_log_impl(&def_1E50E8, v107, OS_LOG_TYPE_INFO, "%25s:%-5d Updating cached port stack for in-ear airpods", (uint8_t *)v337, 0x12u);
            }
            sub_13AE8C((uint64_t *)v337, (uint64_t *)v283, buf, (uint64_t *)&v284);
            sub_8108((uint64_t *)v337);
            sub_8108((uint64_t *)&v284);
            sub_8108((uint64_t *)buf);
          }
        }
        *(void *)buf = __p;
        sub_98D9C((void ***)buf);
      }
    }
LABEL_213:
    int v71 = v291;
    if (!*(unsigned char *)(a2 + 384)) {
      goto LABEL_289;
    }
    sub_1466B4((uint64_t *)&v284, (uint64_t)v290, (uint64_t)&v289);
    sub_FB288((uint64_t *)buf, &v289);
    for (uint64_t i = *(void *)&buf[8]; (unsigned char *)i != buf; uint64_t i = *(void *)(i + 8))
    {
      sub_10653C((uint64_t *)__p, *(void *)(i + 16));
      sub_146750(&v284, (uint64_t *)&v284, *(void **)&__p[8], __p);
      sub_8108((uint64_t *)__p);
    }
    sub_B8E4((uint64_t *)buf);
    sub_144DD8((uint64_t)v337, (uint64_t)&v284);
    if (v337[0].__r_.__value_.__r.__words[2])
    {
      uint64_t v109 = (os_log_t *)sub_32A48(8);
      int v110 = *v109;
      if (*v109)
      {
        if (os_log_type_enabled(*v109, OS_LOG_TYPE_DEFAULT))
        {
          sub_131D18((std::string *)__p, v337[0].__r_.__value_.__l.__data_, &v337[0].__r_.__value_.__l.__size_);
          uint64_t v111 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3481;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v111;
          _os_log_impl(&def_1E50E8, v110, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallowing ports %s ", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
    }
    *(void *)&_DWORD buf[16] = 0;
    *(void *)&buf[8] = 0;
    *(void *)buf = &buf[8];
    unint64_t v112 = (std::string::__raw *)v337[0].__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v337[0].__r_.__value_.__l.__data_ == &v337[0].__r_.__value_.__r.__words[1])
    {
      unint64_t v127 = 0;
      *(void *)&__p[16] = 0;
      *(void *)&__p[8] = 0;
    }
    else
    {
      do
      {
        uint64_t v113 = (std::__shared_weak_count *)v112[1].__words[2];
        if (v113)
        {
          unint64_t v114 = std::__shared_weak_count::lock(v113);
          if (v114)
          {
            uint64_t v115 = v114;
            unint64_t v116 = v112[1].__words[1];
            if (v116)
            {
              uint64_t v117 = *(uint64_t **)&buf[8];
              long long v118 = &buf[8];
              if (*(unsigned char **)buf == &buf[8]) {
                goto LABEL_234;
              }
              uint64_t v119 = *(void **)&buf[8];
              char v120 = &buf[8];
              if (*(void *)&buf[8])
              {
                do
                {
                  long long v118 = v119;
                  uint64_t v119 = (void *)v119[1];
                }
                while (v119);
              }
              else
              {
                do
                {
                  long long v118 = (void *)*((void *)v120 + 2);
                  BOOL v133 = *v118 == (void)v120;
                  char v120 = v118;
                }
                while (v133);
              }
              if (v118[4] < v116)
              {
LABEL_234:
                if (*(void *)&buf[8]) {
                  os_signpost_id_t v121 = (uint64_t **)v118;
                }
                else {
                  os_signpost_id_t v121 = (uint64_t **)&buf[8];
                }
                if (*(void *)&buf[8]) {
                  unint64_t v122 = (uint64_t **)(v118 + 1);
                }
                else {
                  unint64_t v122 = (uint64_t **)&buf[8];
                }
              }
              else
              {
                os_signpost_id_t v121 = (uint64_t **)&buf[8];
                unint64_t v122 = (uint64_t **)&buf[8];
                if (*(void *)&buf[8])
                {
                  unint64_t v122 = (uint64_t **)&buf[8];
                  while (1)
                  {
                    while (1)
                    {
                      os_signpost_id_t v121 = (uint64_t **)v117;
                      unint64_t v126 = v117[4];
                      if (v116 >= v126) {
                        break;
                      }
                      uint64_t v117 = *v121;
                      unint64_t v122 = v121;
                      if (!*v121) {
                        goto LABEL_241;
                      }
                    }
                    if (v126 >= v116) {
                      break;
                    }
                    unint64_t v122 = v121 + 1;
                    uint64_t v117 = v121[1];
                    if (!v117) {
                      goto LABEL_241;
                    }
                  }
                }
              }
              if (!*v122)
              {
LABEL_241:
                uint64_t v123 = (uint64_t *)operator new(0x30uLL);
                v123[4] = v116;
                v123[5] = (uint64_t)v115;
                atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t *v123 = 0;
                v123[1] = 0;
                v123[2] = (uint64_t)v121;
                *unint64_t v122 = v123;
                if (**(void **)buf)
                {
                  *(void *)buf = **(void **)buf;
                  uint64_t v123 = *v122;
                }
                sub_46D00(*(uint64_t **)&buf[8], v123);
                ++*(void *)&buf[16];
              }
            }
            sub_4636C(v115);
          }
        }
        std::string::size_type v124 = (std::string *)v112->__words[1];
        if (v124)
        {
          do
          {
            int v125 = v124;
            std::string::size_type v124 = (std::string *)v124->__r_.__value_.__r.__words[0];
          }
          while (v124);
        }
        else
        {
          do
          {
            int v125 = (std::string *)v112->__words[2];
            BOOL v133 = v125->__r_.__value_.__r.__words[0] == (void)v112;
            unint64_t v112 = (std::string::__raw *)v125;
          }
          while (!v133);
        }
        unint64_t v112 = (std::string::__raw *)v125;
      }
      while (v125 != (std::string *)&v337[0].__r_.__value_.__r.__words[1]);
      unint64_t v127 = *(void **)&buf[8];
      *(void *)std::string __p = *(void *)buf;
      *(void *)&__p[8] = *(void *)&buf[8];
      *(void *)&__p[16] = *(void *)&buf[16];
      if (*(void *)&buf[16])
      {
        *(void *)(*(void *)&buf[8] + 16) = &__p[8];
        *(void *)buf = &buf[8];
        *(void *)&buf[8] = 0;
        *(void *)&_DWORD buf[16] = 0;
        unint64_t v127 = 0;
        uint64_t v128 = v283;
LABEL_264:
        sub_144844(v127);
        unint64_t v129 = *(void **)__p;
        if (*(unsigned char **)__p != &__p[8])
        {
          uint64_t v130 = (uint64_t **)(v128 + 72);
          do
          {
            uint64_t v131 = v129[4];
            uint64_t v132 = *(const void **)(v131 + 248);
            *(void *)buf = v132;
            LODWORD(v131) = *(unsigned __int8 *)(v131 + 256);
            buf[8] = v131;
            if (v131) {
              BOOL v133 = v132 == 0;
            }
            else {
              BOOL v133 = 1;
            }
            if (!v133) {
              CFRetain(v132);
            }
            sub_128528(v130, (CFStringRef *)buf, (uint64_t)buf);
            sub_72924((uint64_t)buf);
            uint64_t v134 = (void *)v129[1];
            if (v134)
            {
              do
              {
                uint64_t v135 = v134;
                uint64_t v134 = (void *)*v134;
              }
              while (v134);
            }
            else
            {
              do
              {
                uint64_t v135 = (unsigned char *)v129[2];
                BOOL v133 = *(void *)v135 == (void)v129;
                unint64_t v129 = v135;
              }
              while (!v133);
            }
            unint64_t v129 = v135;
          }
          while (v135 != &__p[8]);
        }
        sub_144844(*(void **)&__p[8]);
        uint64_t v303 = 0;
        uint64_t v302 = 0;
        v301 = &v302;
        for (uint64_t j = v290; j != &v289; uint64_t j = (uint64_t *)j[1])
        {
          if (&v337[0].__r_.__value_.__r.__words[1] == sub_146880(v337[0].__r_.__value_.__l.__data_, &v337[0].__r_.__value_.__l.__size_, j + 2))
          {
            *(void *)&buf[8] = 0;
            *(void *)buf = 0;
            int v137 = (std::__shared_weak_count *)j[3];
            if (v137)
            {
              uint64_t v138 = std::__shared_weak_count::lock(v137);
              if (v138)
              {
                uint64_t v139 = j[2];
                atomic_fetch_add_explicit(&v138->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                *(void *)buf = v139;
                *(void *)&buf[8] = v138;
                sub_4636C(v138);
              }
              else
              {
                *(void *)&buf[8] = 0;
                *(void *)buf = 0;
              }
            }
            sub_144D44((uint64_t **)&v301, (unint64_t *)buf, (uint64_t)buf);
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
            }
          }
        }
        sub_128240((uint64_t)&v288, &v301);
        a2 = v283;
        uint64_t v140 = *(CFStringRef **)(v283 + 72);
        *(void *)&__p[16] = 0;
        *(void *)&__p[8] = 0;
        *(void *)std::string __p = &__p[8];
        v299 = (CFStringRef *)(v283 + 80);
        v300 = v140;
        p_std::string::size_type size = &v288.__r_.__value_.__l.__size_;
        std::string::size_type v298 = v288.__r_.__value_.__r.__words[0];
        v304.n128_u64[0] = (unint64_t)__p;
        v304.n128_u64[1] = (unint64_t)&__p[8];
        sub_1469BC((uint64_t)buf, &v300, &v299, (uint64_t)&v298, &p_size, &v304);
        if (__p != (unsigned char *)(v283 + 72)) {
          sub_146BDC(v283 + 72, *(void **)__p, &__p[8]);
        }
        sub_87810(*(void **)&__p[8]);
        sub_87810((void *)v288.__r_.__value_.__l.__size_);
        sub_10E118(v302);
        sub_10E118((void *)v337[0].__r_.__value_.__l.__size_);
        sub_8108((uint64_t *)&v284);
        goto LABEL_289;
      }
    }
    uint64_t v128 = v283;
    *(void *)std::string __p = &__p[8];
    goto LABEL_264;
  }
  int v71 = 0;
  unsigned int v17 = a3 + 1;
LABEL_289:
  *(void *)uint64_t v281 = off_6228D0;
  *(void *)(v281 + 8) = 1;
  *(void *)(v281 + 16) = 0;
  *(unsigned char *)(v281 + 24) = 0;
  *(unsigned char *)(v281 + 32) = 0;
  sub_143E38(&v284, (void *)(a2 + 72));
  uint64_t v141 = v290;
  if (v290 != &v289)
  {
    while (1)
    {
      sub_43F38((uint64_t *)buf, v141 + 2, "", 3510);
      BOOL v142 = sub_25009C(*(_DWORD *)(*(void *)buf + 144));
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      if (!v142) {
        break;
      }
      uint64_t v141 = (uint64_t *)v141[1];
      if (v141 == &v289) {
        goto LABEL_305;
      }
    }
    if (v71)
    {
      uint64_t v143 = sub_32A48(8);
      if (*(unsigned char *)(v143 + 8))
      {
        int v144 = *(NSObject **)v143;
        if (*(void *)v143)
        {
          if (os_log_type_enabled(*(os_log_t *)v143, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, *(_DWORD *)(a2 + 176));
            int v145 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3514;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v145;
            _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using RouteInitiationInfo %s.", buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }
      int v146 = *(_DWORD *)(a2 + 144);
      *(void *)&__p[16] = 0;
      *(void *)&__p[8] = 0;
      *(void *)std::string __p = &__p[8];
      sub_13A7AC((uint64_t)buf, a2, (_OWORD *)(a2 + 32), a2 + 48, (uint64_t)&v284, a2 + 120, v146, __p, a2 + 176, v276, *(unsigned char *)(a2 + 384), (uint64_t *)(a2 + 392), 1919842148, (long long *)(a2 + 416), (void *)(a2 + 448));
      sub_10E118(*(void **)&__p[8]);
      sub_141FB0((uint64_t)__p, (void *)a2, (uint64_t)buf, v71);
      sub_120690(v281, (uint64_t)__p);
      sub_11A520(__p);
      sub_13A044((uint64_t)buf);
    }
  }
LABEL_305:
  unsigned int v147 = v274;
  uint64_t v148 = *v274;
  if (!*v274) {
    goto LABEL_316;
  }
  uint64_t v149 = v274;
  do
  {
    unsigned int v150 = *(_DWORD *)(v148 + 32);
    BOOL v151 = v150 >= 0x6E637275;
    if (v150 >= 0x6E637275) {
      uint64_t v152 = (uint64_t *)v148;
    }
    else {
      uint64_t v152 = (uint64_t *)(v148 + 8);
    }
    if (v151) {
      uint64_t v149 = (void *)v148;
    }
    uint64_t v148 = *v152;
  }
  while (*v152);
  unsigned int v147 = v274;
  if (v149 == v274 || *((_DWORD *)v149 + 8) > 0x6E637275u) {
LABEL_316:
  }
    uint64_t v149 = v147;
  if (*(_DWORD *)(v281 + 8))
  {
    if (v149 == v274) {
      goto LABEL_347;
    }
    uint64_t v153 = (os_log_t *)sub_32A48(8);
    uint64_t v154 = v149 + 5;
    uint64_t v155 = *v153;
    if (*v153 && os_log_type_enabled(*v153, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3545;
      _os_log_impl(&def_1E50E8, v155, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to find a valid replacement route.", buf, 0x12u);
    }
    int v156 = 1919904885;
    uint64_t v157 = (void *)v149[6];
    if (v157 == v154)
    {
      uint64_t k = v283;
    }
    else
    {
      while (1)
      {
        sub_43F38((uint64_t *)buf, v157 + 2, "", 3555);
        uint64_t v158 = *(_DWORD **)buf;
        if (*(void *)buf) {
          LOBYTE(v158) = (*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf)
        }
                      && (*(unsigned int (**)(_DWORD *))(*(void *)v158 + 160))(v158)
                      && v158[36] != 1885565807;
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v158) {
          break;
        }
        uint64_t v157 = (void *)v157[1];
        if (v157 == v154) {
          goto LABEL_335;
        }
      }
      int v156 = 1919842148;
LABEL_335:
      unsigned int v160 = (void *)v149[6];
      for (uint64_t k = v283; v160 != v154; v160 = (void *)v160[1])
      {
        sub_43F38((uint64_t *)buf, v160 + 2, "", 3564);
        char v161 = (*(uint64_t (**)(void))(**(void **)buf + 152))(*(void *)buf);
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if ((v161 & 1) == 0) {
          sub_3590(&v292, v160[2], v160[3]);
        }
      }
    }
    sub_13A7AC((uint64_t)buf, k, (_OWORD *)(k + 32), k + 48, (uint64_t)&v284, k + 120, *(_DWORD *)(k + 144), a4, k + 176, v276, *(unsigned char *)(k + 384), (uint64_t *)(k + 392), v156, (long long *)(k + 416), (void *)(k + 448));
    sub_141FB0((uint64_t)__p, (void *)k, (uint64_t)buf, 0);
    uint64_t v162 = v281;
    sub_120690(v281, (uint64_t)__p);
    sub_11A520(__p);
    if (!*(_DWORD *)(v281 + 8))
    {
      uint64_t v162 = v281;
      if (!sub_128688(*(_DWORD *)(v281 + 12)))
      {
        char v163 = (os_log_t *)sub_32A48(8);
        std::string::size_type v164 = *v163;
        uint64_t v162 = v281;
        if (*v163)
        {
          if (os_log_type_enabled(*v163, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "RoutingManager.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 3567;
            _os_log_impl(&def_1E50E8, v164, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a valid replacement route.", __p, 0x12u);
          }
        }
      }
    }
    sub_13A044((uint64_t)buf);
    if (*(_DWORD *)(v162 + 8))
    {
LABEL_347:
      if (v294)
      {
        uint64_t v165 = v293;
        if (&v292 != v293)
        {
          std::string::size_type v279 = (_OWORD *)(v283 + 32);
          unint64_t v280 = (void *)(v283 + 456);
          v273 = (uint64_t *)(v283 + 48);
          uint64_t v277 = (uint64_t *)(v283 + 392);
          unsigned int v166 = (void *)(v283 + 488);
          while (1)
          {
            uint64_t v167 = (std::__shared_weak_count *)v165[3];
            uint64_t v278 = v165[2];
            if (v167) {
              atomic_fetch_add_explicit(&v167->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            int v168 = *(_DWORD *)v279;
            if (*(int *)v279 > 1668443750)
            {
              BOOL v169 = v168 == 1668443760;
              int v170 = 1668443751;
            }
            else
            {
              BOOL v169 = v168 == 1667591521;
              int v170 = 1667591533;
            }
            if (v169 || v168 == v170)
            {
              *(void *)&__p[8] = 0;
              *(void *)std::string __p = 0;
              if (v167)
              {
                uint64_t v172 = std::__shared_weak_count::lock(v167);
                uint64_t v173 = v172;
                if (v172)
                {
                  atomic_fetch_add_explicit(&v172->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  *(void *)std::string __p = v278;
                  *(void *)&__p[8] = v172;
                  sub_4636C(v172);
                }
                else
                {
                  *(void *)&__p[8] = 0;
                  *(void *)std::string __p = 0;
                }
              }
              else
              {
                uint64_t v173 = 0;
              }
              sub_549A4((uint64_t *)buf, (uint64_t *)__p, "", 1153);
              uint64_t v174 = *(void *)buf;
              if ((*(unsigned int (**)(void))(**(void **)buf + 152))(*(void *)buf)
                && (*(unsigned int (**)(uint64_t))(*(void *)v174 + 408))(v174)
                && (*(unsigned int (**)(uint64_t))(*(void *)v174 + 400))(v174) == 2)
              {
                sub_6CB40(v273, 0x7073706Bu, 1886613611);
              }
              if (*(void *)&buf[8]) {
                sub_4636C(*(std::__shared_weak_count **)&buf[8]);
              }
              if (v173) {
                std::__shared_weak_count::__release_weak(v173);
              }
            }
            if (!*(void *)(v283 + 472)) {
              goto LABEL_440;
            }
            std::string v175 = *(void **)(v283 + 464);
LABEL_375:
            if (v175 == v280) {
              goto LABEL_387;
            }
            for (uint64_t m = (void *)v175[4]; ; uint64_t m = (void *)m[1])
            {
              if (m == v175 + 3)
              {
                std::string v175 = (void *)v175[1];
                goto LABEL_375;
              }
              if (m[5]) {
                break;
              }
            }
            if (v167)
            {
              uint64_t v177 = std::__shared_weak_count::lock(v167);
              if (v177) {
                break;
              }
            }
            if (sub_E81A4(v280, 0, 0)) {
              goto LABEL_386;
            }
            char v180 = 0;
            if (v167) {
              goto LABEL_476;
            }
LABEL_477:
            uint64_t v165 = (uint64_t *)v165[1];
            if ((v180 & 1) != 0 || &v292 == v165) {
              goto LABEL_482;
            }
          }
          std::string v178 = v177;
          atomic_fetch_add_explicit(&v177->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v177);
          BOOL v179 = sub_E81A4(v280, v278, v178);
          std::__shared_weak_count::__release_weak(v178);
          if (!v179)
          {
            char v180 = 0;
LABEL_476:
            std::__shared_weak_count::__release_weak(v167);
            goto LABEL_477;
          }
LABEL_386:
          if (*(void *)(v283 + 472))
          {
LABEL_387:
            uint64_t v181 = (os_log_t *)sub_32A48(8);
            os_log_t v182 = *v181;
            if (*v181 && os_log_type_enabled(*v181, OS_LOG_TYPE_DEBUG))
            {
              memset(&v288, 0, sizeof(v288));
              std::string::append(&v288, "[ ", 2uLL);
              sub_E8054((std::string *)buf, (uint64_t)v280);
              if (buf[23] >= 0) {
                uint64_t v183 = buf;
              }
              else {
                uint64_t v183 = *(const std::string::value_type **)buf;
              }
              if (buf[23] >= 0) {
                std::string::size_type v184 = buf[23];
              }
              else {
                std::string::size_type v184 = *(void *)&buf[8];
              }
              std::string::append(&v288, v183, v184);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              std::string::append(&v288, "; ", 2uLL);
              sub_21C8C(v337, "{ ");
              sub_10F298((uint64_t)buf, (long long *)v337);
              uint64_t v271 = v182;
              if (SHIBYTE(v337[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v337[0].__r_.__value_.__l.__data_);
              }
              uint64_t v185 = *(void **)(v283 + 480);
              if (v185 != v166)
              {
                do
                {
                  uint64_t v186 = (void *)v185[1];
                  int v187 = v185;
                  if (v186)
                  {
                    do
                    {
                      v188 = v186;
                      uint64_t v186 = (void *)*v186;
                    }
                    while (v186);
                  }
                  else
                  {
                    do
                    {
                      v188 = (void *)v187[2];
                      BOOL v133 = *v188 == (void)v187;
                      int v187 = v188;
                    }
                    while (!v133);
                  }
                  sub_256E4(&buf[16], (uint64_t)"[ ", 2);
                  sub_43F38((uint64_t *)&v304, v185 + 4, "", 31);
                  v189 = (void *)std::ostream::operator<<();
                  sub_256E4(v189, (uint64_t)": ", 2);
                  sub_29353C(v337, (unsigned int **)v185 + 6);
                  if ((v337[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v190 = v337;
                  }
                  else {
                    v190 = (std::string *)v337[0].__r_.__value_.__r.__words[0];
                  }
                  if ((v337[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = HIBYTE(v337[0].__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type size = v337[0].__r_.__value_.__l.__size_;
                  }
                  sub_256E4(v189, (uint64_t)v190, size);
                  if (v188 == v166) {
                    char v192 = " ]";
                  }
                  else {
                    char v192 = " ],";
                  }
                  if (v188 == v166) {
                    uint64_t v193 = 2;
                  }
                  else {
                    uint64_t v193 = 3;
                  }
                  sub_256E4(v189, (uint64_t)v192, v193);
                  if (SHIBYTE(v337[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v337[0].__r_.__value_.__l.__data_);
                  }
                  if (v304.n128_u64[1]) {
                    sub_4636C((std::__shared_weak_count *)v304.n128_u64[1]);
                  }
                  uint64_t v185 = v188;
                }
                while (v188 != v166);
              }
              sub_256E4(&buf[16], (uint64_t)" }", 2);
              sub_246E4(&v301, (uint64_t)&buf[24]);
              *(void *)buf = v270;
              *(void *)&buf[*(void *)(v270 - 24)] = v269;
              *(void *)&_DWORD buf[16] = v268;
              if (v340 < 0) {
                operator delete(v339);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              std::ios::~ios();
              if (v303 >= 0) {
                int v194 = (const std::string::value_type *)&v301;
              }
              else {
                int v194 = (const std::string::value_type *)v301;
              }
              if (v303 >= 0) {
                std::string::size_type v195 = HIBYTE(v303);
              }
              else {
                std::string::size_type v195 = (std::string::size_type)v302;
              }
              std::string::append(&v288, v194, v195);
              if (SHIBYTE(v303) < 0) {
                operator delete(v301);
              }
              int v196 = &v288;
              if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v196 = (std::string *)v288.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "RoutingManager.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 3594;
              *(_WORD *)&__p[18] = 2080;
              *(void *)&__p[20] = v196;
              _os_log_impl(&def_1E50E8, v271, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port update has invalidated the route cache: %s.", __p, 0x1Cu);
              if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v288.__r_.__value_.__l.__data_);
              }
            }
            if (*(void *)(v283 + 472))
            {
              char v197 = (os_log_t *)sub_32A48(8);
              char v198 = *v197;
              if (*v197)
              {
                if (os_log_type_enabled(*v197, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3595;
                  _os_log_impl(&def_1E50E8, v198, OS_LOG_TYPE_DEBUG, "%25s:%-5d There are no cached concrete routes.", buf, 0x12u);
                }
              }
            }
          }
LABEL_440:
          uint64_t v199 = (os_log_t *)sub_32A48(8);
          uint64_t v200 = *v199;
          if (*v199 && os_log_type_enabled(*v199, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3596;
            _os_log_impl(&def_1E50E8, v200, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to find a valid replacement route.", buf, 0x12u);
          }
          *(void *)&__p[8] = 0;
          *(void *)std::string __p = 0;
          if (v167)
          {
            unsigned int v201 = std::__shared_weak_count::lock(v167);
            unsigned int v202 = v201;
            if (v201)
            {
              atomic_fetch_add_explicit(&v201->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              *(void *)std::string __p = v278;
              *(void *)&__p[8] = v201;
              sub_4636C(v201);
            }
            else
            {
              *(void *)&__p[8] = 0;
              *(void *)std::string __p = 0;
            }
          }
          else
          {
            unsigned int v202 = 0;
          }
          sub_549A4((uint64_t *)buf, (uint64_t *)__p, "", 1079);
          std::string v203 = *(uint64_t **)buf;
          if (*(void *)buf)
          {
            char v204 = (*(uint64_t (**)(void))(**(void **)buf + 152))(*(void *)buf);
            uint64_t v205 = *v203;
            if (v204)
            {
              if ((*(unsigned int (**)(uint64_t *))(v205 + 408))(v203))
              {
                int v206 = (*(uint64_t (**)(uint64_t *))(*v203 + 400))(v203);
                int v207 = 1919904885;
                if (v206 == 2) {
                  goto LABEL_457;
                }
                goto LABEL_452;
              }
              int v207 = 1919184754;
            }
            else if ((*(unsigned int (**)(uint64_t *))(v205 + 288))(v203))
            {
              int v207 = 1920168053;
            }
            else
            {
              int v207 = 1919904885;
            }
LABEL_457:
            if (*(void *)&buf[8]) {
              sub_4636C(*(std::__shared_weak_count **)&buf[8]);
            }
            if (v202) {
              std::__shared_weak_count::__release_weak(v202);
            }
            sub_13A7AC((uint64_t)buf, v283, v279, (uint64_t)v273, (uint64_t)&v284, v283 + 120, *(_DWORD *)(v283 + 144), a4, v283 + 176, v276, *(unsigned char *)(v283 + 384), v277, v207, (long long *)(v283 + 416), (void *)(v283 + 448));
            sub_141FB0((uint64_t)__p, (void *)v283, (uint64_t)buf, 0);
            sub_120690(v281, (uint64_t)__p);
            sub_11A520(__p);
            if (*(_DWORD *)(v281 + 8))
            {
              long long v208 = (os_log_t *)sub_32A48(8);
              int v209 = *v208;
              if (*v208 && os_log_type_enabled(*v208, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(v337, 0x63736176u);
                uint64_t v210 = v337;
                if ((v337[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v210 = (std::string *)v337[0].__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string __p = 136315650;
                *(void *)&__p[4] = "RoutingManager.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 3606;
                *(_WORD *)&__p[18] = 2080;
                *(void *)&__p[20] = v210;
                _os_log_impl(&def_1E50E8, v209, OS_LOG_TYPE_DEBUG, "%25s:%-5d The current category is no longer able to establish a route. Reasserting the default category, '%s'.", __p, 0x1Cu);
                if (SHIBYTE(v337[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v337[0].__r_.__value_.__l.__data_);
                }
              }
              strcpy(__p, "vascfdmi");
              __p[12] = 0;
              *(void *)&__p[24] = 0;
              uint64_t v306 = 0;
              v308[0] = 0;
              v308[1] = 0;
              *(void *)&__p[16] = &__p[24];
              uint64_t v307 = v308;
              v309[0] = 0;
              v309[1] = 0;
              v310[0] = 0;
              v310[1] = 0;
              v308[2] = v309;
              v309[2] = v310;
              v311[0] = 0;
              v311[1] = 0;
              v310[2] = v311;
              char v312 = 0;
              char v313 = 0;
              int v314 = 1668248944;
              int v315 = 1852796517;
              uint64_t v316 = 0;
              uint64_t v317 = 0;
              uint64_t v318 = 0;
              uint64_t v319 = 0x756E64656175746FLL;
              int v331 = 0;
              *(_OWORD *)&v327[8] = 0u;
              long long v320 = 0u;
              long long v321 = 0u;
              long long v322 = 0u;
              long long v323 = 0u;
              long long v324 = 0u;
              uint64_t v325 = 1065353216;
              long long v326 = 0u;
              *(_OWORD *)v327 = 0u;
              *(_DWORD *)&v327[16] = 1065353216;
              long long v328 = 0u;
              long long v329 = 0u;
              int v330 = 1065353216;
              char v332 = 0;
              char v333 = 0;
              char v335 = 0;
              char v336 = 0;
              int v334 = 0;
              sub_13F234((uint64_t)v337, v283, (uint64_t)__p, v277, 1919118966);
              sub_120690(v281, (uint64_t)v337);
              sub_11A520(v337);
              sub_143D84((uint64_t)__p);
              if (*(_DWORD *)(v281 + 8))
              {
                uint64_t v211 = (os_log_t *)sub_32A48(8);
                uint64_t v212 = *v211;
                if (*v211)
                {
                  if (os_log_type_enabled(*v211, OS_LOG_TYPE_ERROR))
                  {
                    sub_2417C(v337, 0x63736176u);
                    unsigned int v213 = v337;
                    if ((v337[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      unsigned int v213 = (std::string *)v337[0].__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)std::string __p = 136315650;
                    *(void *)&__p[4] = "RoutingManager.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 3608;
                    *(_WORD *)&__p[18] = 2080;
                    *(void *)&__p[20] = v213;
                    _os_log_impl(&def_1E50E8, v212, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to reassert the default category, '%s'. Major error, though recoverable if we leave this category or (potentially) if new ports are connected.", __p, 0x1Cu);
                    if (SHIBYTE(v337[0].__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v337[0].__r_.__value_.__l.__data_);
                    }
                  }
                }
              }
            }
            sub_13A044((uint64_t)buf);
            char v180 = 1;
            if (!v167) {
              goto LABEL_477;
            }
            goto LABEL_476;
          }
LABEL_452:
          int v207 = 1919971701;
          goto LABEL_457;
        }
      }
    }
  }
LABEL_482:
  unsigned int v214 = v274;
  uint64_t v215 = *v274;
  if (!*v274) {
    goto LABEL_508;
  }
  do
  {
    unsigned int v216 = *(_DWORD *)(v215 + 32);
    BOOL v217 = v216 >= 0x70707570;
    if (v216 >= 0x70707570) {
      BOOL v218 = (uint64_t *)v215;
    }
    else {
      BOOL v218 = (uint64_t *)(v215 + 8);
    }
    if (v217) {
      unsigned int v214 = (void *)v215;
    }
    uint64_t v215 = *v218;
  }
  while (*v218);
  if (v214 == v274)
  {
    uint64_t v282 = v274;
    goto LABEL_510;
  }
  uint64_t v282 = v274;
  uint64_t v219 = v283;
  if (*((_DWORD *)v214 + 8) > 0x70707570u) {
    goto LABEL_511;
  }
  if (!*(_DWORD *)(v281 + 8)) {
    goto LABEL_556;
  }
  v220 = (os_log_t *)sub_32A48(8);
  unsigned int v221 = v214 + 5;
  BOOL v222 = *v220;
  if (*v220 && os_log_type_enabled(*v220, OS_LOG_TYPE_DEBUG))
  {
    sub_9264((std::string *)__p, (uint64_t)(v214 + 5), 1);
    BOOL v223 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3632;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v223;
    _os_log_impl(&def_1E50E8, v222, OS_LOG_TYPE_DEBUG, "%25s:%-5d port properties updated: %s", buf, 0x1Cu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v224 = (void *)v214[6];
  if (v224 == v221)
  {
LABEL_508:
    uint64_t v282 = v214;
LABEL_510:
    uint64_t v219 = v283;
    goto LABEL_511;
  }
  v225 = (void *)(v283 + 456);
  while (1)
  {
    v226 = (std::__shared_weak_count *)v224[3];
    if (!v226) {
      break;
    }
    unsigned int v227 = std::__shared_weak_count::lock(v226);
    if (!v227) {
      break;
    }
    int v228 = v227;
    uint64_t v229 = v224[2];
    atomic_fetch_add_explicit(&v227->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v227);
    LODWORD(v229) = sub_E81A4(v225, v229, v228);
    std::__shared_weak_count::__release_weak(v228);
    if (v229) {
      goto LABEL_555;
    }
LABEL_507:
    uint64_t v224 = (void *)v224[1];
    if (v224 == v221) {
      goto LABEL_508;
    }
  }
  if (!sub_E81A4(v225, 0, 0)) {
    goto LABEL_507;
  }
LABEL_555:
  uint64_t v219 = v283;
  sub_13A7AC((uint64_t)buf, v283, (_OWORD *)(v283 + 32), v283 + 48, (uint64_t)&v284, v283 + 120, *(_DWORD *)(v283 + 144), a4, v283 + 176, v276, *(unsigned char *)(v283 + 384), (uint64_t *)(v283 + 392), 1919971427, (long long *)(v283 + 416), (void *)(v283 + 448));
  sub_141FB0((uint64_t)__p, (void *)v283, (uint64_t)buf, 0);
  sub_120690(v281, (uint64_t)__p);
  sub_11A520(__p);
  sub_13A044((uint64_t)buf);
LABEL_556:
  uint64_t v282 = v214;
LABEL_511:
  uint64_t v230 = sub_32A48(8);
  if (*(unsigned char *)(v230 + 8))
  {
    uint64_t v231 = *(NSObject **)v230;
    if (*(void *)v230)
    {
      if (os_log_type_enabled(*(os_log_t *)v230, OS_LOG_TYPE_DEBUG))
      {
        v232 = "";
        if (*(void *)(v219 + 504) == *(void *)(v219 + 512)) {
          v232 = "(empty)";
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3644;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v232;
        _os_log_impl(&def_1E50E8, v231, OS_LOG_TYPE_DEBUG, "%25s:%-5d Final state of mCachedPortStack: %s", buf, 0x1Cu);
      }
    }
  }
  uint64_t v233 = *(void *)(v219 + 504);
  for (uint64_t n = *(void *)(v219 + 512); v233 != n; v233 += 16)
  {
    uint64_t v235 = sub_32A48(8);
    if (*(unsigned char *)(v235 + 8))
    {
      int64x2_t v236 = *(NSObject **)v235;
      if (*(void *)v235)
      {
        if (os_log_type_enabled(*(os_log_t *)v235, OS_LOG_TYPE_DEBUG))
        {
          sub_D98B8(__p, v233);
          v237 = __p;
          if (__p[23] < 0) {
            v237 = *(unsigned char **)__p;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3646;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v237;
          _os_log_impl(&def_1E50E8, v236, OS_LOG_TYPE_DEBUG, "%25s:%-5d port: %s", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
    }
  }
  if (v17 == v274 && v149 == v274 && v282 == v274)
  {
    char v265 = (os_log_t *)sub_32A48(13);
    uint64_t v266 = *v265;
    if (*v265 && os_log_type_enabled(*v265, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3651;
      _os_log_impl(&def_1E50E8, v266, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inPortUpdateMap contains no supported keys.\"", buf, 0x12u);
    }
    uint64_t v267 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v267, "inPortUpdateMap contains no supported keys.");
  }
  int v238 = *(_DWORD *)(v281 + 8);
  if (v238 == 1)
  {
    uint64_t v239 = sub_32A48(8);
    uint64_t v240 = sub_32A48(34);
    char v241 = 0;
    uint64_t v242 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v243 = *(void *)(v239 + 8);
    while (1)
    {
      uint64_t v244 = *(int *)&buf[4 * v242];
      char v245 = v241;
      if (((v243 & v244) != 0) != ((*(void *)(v240 + 8) & v244) != 0)) {
        break;
      }
      char v241 = 1;
      uint64_t v242 = 1;
      if (v245) {
        goto LABEL_536;
      }
    }
    if ((v243 & v244) == 0) {
      uint64_t v239 = v240;
    }
LABEL_536:
    uint64_t v246 = *(NSObject **)v239;
    if (v246 && os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3655;
      _os_log_impl(&def_1E50E8, v246, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port update completed without a route change (there is no supported route in the current category for the updated port(s).)", buf, 0x12u);
    }
    sub_12053C((uint64_t)buf, 1920099684);
    sub_120690(v281, (uint64_t)buf);
    sub_11A520(buf);
    int v238 = *(_DWORD *)(v281 + 8);
  }
  if (v238)
  {
    uint64_t v247 = sub_32A48(8);
    uint64_t v248 = sub_32A48(34);
    char v249 = 0;
    uint64_t v250 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v251 = *(void *)(v247 + 8);
    while (1)
    {
      uint64_t v252 = *(int *)&buf[4 * v250];
      char v253 = v249;
      if (((v251 & v252) != 0) != ((*(void *)(v248 + 8) & v252) != 0)) {
        break;
      }
      char v249 = 1;
      uint64_t v250 = 1;
      if (v253) {
        goto LABEL_547;
      }
    }
    if ((v251 & v252) == 0) {
      uint64_t v247 = v248;
    }
LABEL_547:
    uint64_t v254 = *(NSObject **)v247;
    if (v254 && os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
    {
      sub_10BFD0((std::string *)__p, v272);
      if (__p[23] >= 0) {
        uint64_t v255 = __p;
      }
      else {
        uint64_t v255 = *(unsigned char **)__p;
      }
      int v256 = *(_DWORD *)(v281 + 8);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3659;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v255;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v256;
      _os_log_impl(&def_1E50E8, v254, OS_LOG_TYPE_ERROR, "%25s:%-5d Port update with port map '%s' failed with result %d.", buf, 0x22u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  sub_12B050(v287);
  sub_10E118(v285);
  sub_8108(&v289);
  sub_8108(&v292);
  return sub_10C78C(&v295);
}

void sub_13EDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_8108(&a53);
  sub_8108((uint64_t *)&STACK[0x400]);
  STACK[0x400] = (unint64_t)&STACK[0x230];
  sub_98D9C((void ***)&STACK[0x400]);
  sub_8108(&a62);
  sub_8108(&a65);
  sub_10C78C(&a68);
  _Unwind_Resume(a1);
}

uint64_t sub_13F234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  kdebug_trace();
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    int v209 = (os_log_t *)sub_32A48(13);
    uint64_t v210 = *v209;
    if (*v209 && os_log_type_enabled(*v209, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4336;
      _os_log_impl(&def_1E50E8, v210, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v231 = a4;
  int v232 = a5;
  if ((a5 != 1919907442) != (*(void *)(a3 + 32) == 0))
  {
    uint64_t v212 = (os_log_t *)sub_32A48(13);
    unsigned int v213 = *v212;
    if (*v212 && os_log_type_enabled(*v212, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4338;
      _os_log_impl(&def_1E50E8, v213, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    unsigned int v214 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v214, "Precondition failure.");
  }
  uint64_t v10 = sub_32A48(8);
  uint64_t v11 = sub_32A48(34);
  char v12 = 0;
  uint64_t v13 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = (int)buf[v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1;
    if (v16) {
      goto LABEL_9;
    }
  }
  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_9:
  unsigned int v17 = *(NSObject **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    sub_383B64(&__p, a3);
    uint64_t v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    buf[0] = 136315650;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 4340;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v18;
    _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_INFO, "%25s:%-5d Set route configuration %s.", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a3 + 364)) {
    *(_DWORD *)(a2 + 552) = *(_DWORD *)(a3 + 360) == 1;
  }
  uint64_t v233 = a3;
  sub_1412AC((uint64_t)&__p, (uint64_t *)a2, a3);
  if (!sub_F104C(v242)) {
    goto LABEL_303;
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v215 = (os_log_t *)sub_32A48(13);
    unsigned int v216 = *v215;
    if (*v215 && os_log_type_enabled(*v215, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4933;
      _os_log_impl(&def_1E50E8, v216, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    BOOL v217 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v217, "Precondition failure.");
  }
  v236[0] = (uint64_t)v236;
  v236[1] = (uint64_t)v236;
  uint64_t v237 = 0;
  int v19 = v242;
  if (v242 == 1986357346)
  {
    if ((sub_F09C4(1986357346) & 1) == 0)
    {
      memset(buf, 0, 24);
      strcpy((char *)&buf[6], "cwdv");
      LOBYTE(buf[8]) = 0;
      int v259 = 3;
      uint64_t v262 = 0;
      unint64_t v261 = 0;
      char v260 = &v261;
      int v263 = 44739242;
      CFTypeRef cf = 0;
      int v34 = operator new(4uLL);
      *int v34 = 1886614633;
      *(void *)buf = v34;
      *(void *)&buf[2] = v34 + 1;
      *(void *)&uint8_t buf[4] = v34 + 1;
      uint64_t v36 = sub_46BF4(2uLL);
      int64x2_t v37 = *(char **)&buf[2];
      uint64_t v38 = *(char **)buf;
      v36[1] = 1886609775;
      uint64_t v39 = (char *)(v36 + 1);
      uint64_t v40 = (char *)(v36 + 2);
      while (v37 != v38)
      {
        int v41 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)buf = v39;
      *(void *)&buf[2] = v36 + 2;
      *(void *)&uint8_t buf[4] = &v36[v35];
      if (v38) {
        operator delete(v38);
      }
      *(void *)&buf[2] = v40;
      if ((sub_161E94() & 1) == 0)
      {
        uint64_t v42 = *(_DWORD **)&buf[2];
        unint64_t v43 = *(void *)&buf[4];
        if (*(void *)&buf[2] >= *(void *)&buf[4])
        {
          int v53 = *(_DWORD **)buf;
          uint64_t v54 = (uint64_t)(*(void *)&buf[2] - *(void *)buf) >> 2;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v56 = *(void *)&buf[4] - *(void *)buf;
          if ((uint64_t)(*(void *)&buf[4] - *(void *)buf) >> 1 > v55) {
            unint64_t v55 = v56 >> 1;
          }
          BOOL v167 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v167) {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            unint64_t v57 = (unint64_t)sub_46BF4(v57);
            uint64_t v42 = *(_DWORD **)&buf[2];
            int v53 = *(_DWORD **)buf;
          }
          else
          {
            uint64_t v58 = 0;
          }
          uint64_t v59 = (_DWORD *)(v57 + 4 * v54);
          unint64_t v43 = v57 + 4 * v58;
          *uint64_t v59 = 1886614639;
          uint64_t v44 = v59 + 1;
          while (v42 != v53)
          {
            int v60 = *--v42;
            *--uint64_t v59 = v60;
          }
          *(void *)buf = v59;
          *(void *)&buf[2] = v44;
          *(void *)&uint8_t buf[4] = v43;
          if (v53)
          {
            operator delete(v53);
            unint64_t v43 = *(void *)&buf[4];
          }
        }
        else
        {
          **(_DWORD **)&buf[2] = 1886614639;
          uint64_t v44 = v42 + 1;
        }
        *(void *)&buf[2] = v44;
        if ((unint64_t)v44 >= v43)
        {
          uint64_t v62 = *(_DWORD **)buf;
          uint64_t v63 = ((uint64_t)v44 - *(void *)buf) >> 2;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v65 = v43 - *(void *)buf;
          if (v65 >> 1 > v64) {
            unint64_t v64 = v65 >> 1;
          }
          BOOL v167 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v167) {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            unint64_t v66 = (unint64_t)sub_46BF4(v66);
            uint64_t v44 = *(_DWORD **)&buf[2];
            uint64_t v62 = *(_DWORD **)buf;
          }
          else
          {
            uint64_t v67 = 0;
          }
          unsigned int v68 = (_DWORD *)(v66 + 4 * v63);
          unint64_t v69 = v66 + 4 * v67;
          *unsigned int v68 = 1886614625;
          uint64_t v61 = v68 + 1;
          while (v44 != v62)
          {
            int v70 = *--v44;
            *--unsigned int v68 = v70;
          }
          *(void *)buf = v68;
          *(void *)&buf[2] = v61;
          *(void *)&uint8_t buf[4] = v69;
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *uint64_t v44 = 1886614625;
          uint64_t v61 = v44 + 1;
        }
        *(void *)&buf[2] = v61;
      }
      uint64_t v71 = sub_10FBF0();
      *(void *)char v265 = off_622A88;
      *(void *)&v265[24] = v265;
      sub_10E1E8(&v251, v71, buf, (uint64_t)v265);
      sub_8108(v236);
      uint64_t v72 = v253;
      if (v253)
      {
        uint64_t v73 = v252;
        uint64_t v74 = v251;
        uint64_t v75 = *v252;
        *(void *)(v75 + 8) = *(void *)(v251 + 8);
        **(void **)(v74 + 8) = v75;
        uint64_t v76 = v236[0];
        *(void *)(v236[0] + 8) = v73;
        *uint64_t v73 = v76;
        *(void *)(v74 + 8) = v236;
        v236[0] = v74;
        v237 += v72;
        uint64_t v253 = 0;
      }
      sub_8108(&v251);
      sub_6AFD4(v265);
      if (!v237)
      {
        BOOL v222 = (os_log_t *)sub_32A48(13);
        BOOL v223 = *v222;
        if (*v222 && os_log_type_enabled(*v222, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v265 = 136315394;
          *(void *)&v265[4] = "RoutingManager.cpp";
          *(_WORD *)&v265[12] = 1024;
          *(_DWORD *)&v265[14] = 4965;
          _os_log_impl(&def_1E50E8, v223, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not find CarPlay device for activation\"", v265, 0x12u);
        }
        uint64_t v224 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v224, "Could not find CarPlay device for activation");
      }
      CFTypeRef v29 = cf;
      if (!cf) {
        goto LABEL_97;
      }
LABEL_96:
      CFRelease(v29);
LABEL_97:
      sub_463E0(v261);
      if (*(void *)buf)
      {
        *(void *)&buf[2] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      goto LABEL_99;
    }
    int v19 = v242;
  }
  else if (v242 == 1651794544)
  {
    memset(buf, 0, 24);
    strcpy((char *)&buf[6], "cwdv");
    LOBYTE(buf[8]) = 0;
    int v259 = 3;
    uint64_t v262 = 0;
    unint64_t v261 = 0;
    char v260 = &v261;
    int v263 = 44739242;
    CFTypeRef cf = 0;
    unsigned int v20 = operator new(4uLL);
    *unsigned int v20 = 1886216820;
    *(void *)buf = v20;
    *(void *)&buf[2] = v20 + 1;
    *(void *)&uint8_t buf[4] = v20 + 1;
    __int16 v22 = sub_46BF4(2uLL);
    int v23 = *(char **)&buf[2];
    uint64_t v24 = *(char **)buf;
    v22[1] = 1885892706;
    unsigned int v25 = (char *)(v22 + 1);
    BOOL v26 = (char *)(v22 + 2);
    while (v23 != v24)
    {
      int v27 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v25 - 1) = v27;
      v25 -= 4;
    }
    *(void *)buf = v25;
    *(void *)&buf[2] = v22 + 2;
    *(void *)&uint8_t buf[4] = &v22[v21];
    if (v24) {
      operator delete(v24);
    }
    *(void *)&buf[2] = v26;
    if ((v245 & 0x80u) == 0) {
      p_s1 = (const UInt8 *)&__s1;
    }
    else {
      p_s1 = (const UInt8 *)__s1;
    }
    if (p_s1)
    {
      if ((v245 & 0x80u) == 0) {
        size_t v31 = v245;
      }
      else {
        size_t v31 = __n;
      }
      CFStringRef v32 = CFStringCreateWithBytes(0, p_s1, v31, 0x8000100u, 0);
      if (!v32)
      {
        int v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v33, "Could not construct");
      }
    }
    else
    {
      CFStringRef v32 = 0;
    }
    CFTypeRef v45 = cf;
    CFTypeRef cf = v32;
    if (v45) {
      CFRelease(v45);
    }
    uint64_t v46 = sub_10FBF0();
    *(void *)char v265 = off_622A88;
    *(void *)&v265[24] = v265;
    sub_10E1E8(&v251, v46, buf, (uint64_t)v265);
    sub_8108(v236);
    uint64_t v47 = v253;
    if (v253)
    {
      uint64_t v48 = v252;
      uint64_t v49 = v251;
      uint64_t v50 = *v252;
      *(void *)(v50 + 8) = *(void *)(v251 + 8);
      **(void **)(v49 + 8) = v50;
      uint64_t v51 = v236[0];
      *(void *)(v236[0] + 8) = v48;
      uint64_t *v48 = v51;
      *(void *)(v49 + 8) = v236;
      v236[0] = v49;
      v237 += v47;
      uint64_t v253 = 0;
    }
    sub_8108(&v251);
    sub_6AFD4(v265);
    if (!v237)
    {
      BOOL v218 = (os_log_t *)sub_32A48(13);
      uint64_t v219 = *v218;
      if (*v218 && os_log_type_enabled(*v218, OS_LOG_TYPE_ERROR))
      {
        if ((v245 & 0x80u) == 0) {
          v220 = &__s1;
        }
        else {
          v220 = __s1;
        }
        *(_DWORD *)char v265 = 136315650;
        *(void *)&v265[4] = "RoutingManager.cpp";
        *(_WORD *)&v265[12] = 1024;
        *(_DWORD *)&v265[14] = 4944;
        *(_WORD *)&v265[18] = 2080;
        *(void *)&v265[20] = v220;
        _os_log_impl(&def_1E50E8, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not find Bluetooth device with matching device ID: %s for activation\"", v265, 0x1Cu);
      }
      unsigned int v221 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v221, "Could not find Bluetooth device with matching device ID: %s for activation");
    }
    BOOL v52 = (_DWORD *)sub_10FBF0();
    sub_112F90(v52, (uint64_t)v236, 1, 1);
    CFTypeRef v29 = cf;
    if (!cf) {
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  if (v19 == 845504882 || v19 == 1768764005 || v19 == 1635213689)
  {
    if (qword_64BCF0 != -1) {
      dispatch_once(&qword_64BCF0, &stru_6236F8);
    }
    if (!byte_64BCE8)
    {
      memset(buf, 0, 24);
      int v259 = 3;
      uint64_t v262 = 0;
      unint64_t v261 = 0;
      char v260 = &v261;
      CFTypeRef cf = 0;
      buf[6] = 1986295651;
      _DWORD buf[7] = HIDWORD(__p.__r_.__value_.__r.__words[0]);
      LOBYTE(buf[8]) = 1;
      int v263 = 44722858;
      uint64_t v28 = sub_10FBF0();
      *(void *)char v265 = off_622A88;
      *(void *)&v265[24] = v265;
      sub_10EA24(&v251, v28, buf, (uint64_t)v265);
      sub_6AFD4(v265);
      if (v253)
      {
        v225 = (os_log_t *)sub_32A48(13);
        v226 = *v225;
        if (*v225 && os_log_type_enabled(*v225, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v265 = 136315394;
          *(void *)&v265[4] = "RoutingManager.cpp";
          *(_WORD *)&v265[12] = 1024;
          *(_DWORD *)&v265[14] = 4979;
          _os_log_impl(&def_1E50E8, v226, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"activation with motion gesture while a non-built-in mode-capable port is connected\"", v265, 0x12u);
        }
        unsigned int v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v227, "activation with motion gesture while a non-built-in mode-capable port is connected");
      }
      sub_8108(&v251);
      CFTypeRef v29 = cf;
      if (!cf) {
        goto LABEL_97;
      }
      goto LABEL_96;
    }
  }
LABEL_99:
  uint64_t v251 = (uint64_t)&v251;
  uint64_t v252 = &v251;
  uint64_t v253 = 0;
  sub_13AE8C(v250, (uint64_t *)a2, v236, &v251);
  sub_8108(v250);
  switch(v242)
  {
    case 1651794544:
      std::string v77 = (unsigned int *)operator new(4uLL);
      *std::string v77 = 1886216820;
      std::string v78 = (unsigned int *)sub_46BF4(2uLL);
      int v79 = 1885892706;
      break;
    case 1986357346:
      if (sub_F09C4(1986357346)) {
        goto LABEL_302;
      }
      uint64_t v80 = sub_46BF4(1uLL);
      uint64_t v82 = v81;
      *uint64_t v80 = 1886614633;
      __int16 v83 = v80 + 1;
      uint64_t v84 = (char *)v80;
      if (sub_161E94())
      {
        std::string v78 = v80;
      }
      else
      {
        int v187 = (char *)&v80[v82];
        if (v82 < 2)
        {
          uint64_t v189 = ((char *)v83 - v84) >> 2;
          unint64_t v190 = v189 + 1;
          if ((unint64_t)(v189 + 1) >> 62) {
            sub_60548();
          }
          if ((4 * v82) >> 1 > v190) {
            unint64_t v190 = (4 * v82) >> 1;
          }
          if ((unint64_t)(4 * v82) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v191 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v191 = v190;
          }
          if (v191) {
            unint64_t v191 = (unint64_t)sub_46BF4(v191);
          }
          else {
            uint64_t v192 = 0;
          }
          uint64_t v193 = 0;
          int v194 = (_DWORD *)(v191 + 4 * v189);
          int v187 = (char *)(v191 + 4 * v192);
          *int v194 = 1886614639;
          v188 = (char *)(v194 + 1);
          std::string::size_type v195 = v84;
          do
          {
            v194[v193 - 1] = *(_DWORD *)&v84[v193 * 4];
            --v193;
          }
          while (v193 != -1);
          uint64_t v84 = (char *)(v194 - 1);
          operator delete(v195);
        }
        else
        {
          *((_DWORD *)v84 + 1) = 1886614639;
          v188 = v84 + 8;
        }
        if (v188 >= v187)
        {
          uint64_t v196 = (v188 - v84) >> 2;
          unint64_t v197 = v196 + 1;
          if ((unint64_t)(v196 + 1) >> 62) {
            sub_60548();
          }
          if ((v187 - v84) >> 1 > v197) {
            unint64_t v197 = (v187 - v84) >> 1;
          }
          if ((unint64_t)(v187 - v84) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v198 = v197;
          }
          if (v198) {
            unint64_t v198 = (unint64_t)sub_46BF4(v198);
          }
          std::string v78 = (unsigned int *)(v198 + 4 * v196);
          *std::string v78 = 1886614625;
          for (uint64_t i = v78 + 1; v188 != v84; --v78)
          {
            unsigned int v200 = *((_DWORD *)v188 - 1);
            v188 -= 4;
            *(v78 - 1) = v200;
          }
          operator delete(v84);
          __int16 v83 = i;
        }
        else
        {
          *(_DWORD *)v188 = 1886614625;
          __int16 v83 = (unsigned int *)(v188 + 4);
          std::string v78 = (unsigned int *)v84;
        }
        if (v78 == v83)
        {
LABEL_301:
          operator delete(v78);
          goto LABEL_302;
        }
      }
      goto LABEL_108;
    case 2003329648:
      std::string v77 = (unsigned int *)operator new(4uLL);
      *std::string v77 = 1886222185;
      std::string v78 = (unsigned int *)sub_46BF4(2uLL);
      int v79 = 1885892727;
      break;
    default:
      goto LABEL_302;
  }
  v78[1] = v79;
  __int16 v83 = v78 + 2;
  *std::string v78 = *v77;
  operator delete(v77);
LABEL_108:
  BOOL v234 = v83;
  uint64_t v228 = a1;
  uint64_t v230 = (uint64_t *)(a2 + 504);
  uint64_t v229 = v78;
  uint64_t v85 = v78;
  uint64_t v235 = a2;
  do
  {
    unsigned int v86 = *v85;
    uint64_t v87 = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    sub_3B7EC();
    if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
    {
      unsigned int v201 = (os_log_t *)sub_32A48(13);
      unsigned int v202 = *v201;
      if (*v201 && os_log_type_enabled(*v201, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 5033;
        _os_log_impl(&def_1E50E8, v202, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      std::string v203 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v203, "Precondition failure.");
    }
    uint64_t v88 = sub_32A48(8);
    if (*(unsigned char *)(v88 + 8))
    {
      uint64_t v89 = *(NSObject **)v88;
      if (*(void *)v88)
      {
        if (os_log_type_enabled(*(os_log_t *)v88, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v265, v86);
          uint64_t v90 = v265;
          if (v265[23] < 0) {
            uint64_t v90 = *(unsigned char **)v265;
          }
          unint64_t v91 = &__s1;
          if ((v245 & 0x80u) != 0) {
            unint64_t v91 = __s1;
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 5035;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v90;
          LOWORD(buf[7]) = 2080;
          *(void *)((char *)&buf[7] + 2) = v91;
          _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d Manipulating last-in stack for port type %s and uid: %s", (uint8_t *)buf, 0x26u);
          if ((v265[23] & 0x80000000) != 0) {
            operator delete(*(void **)v265);
          }
        }
      }
    }
    unint64_t v93 = *(uint64_t **)(a2 + 504);
    uint64_t v92 = *(uint64_t **)(a2 + 512);
    if (v93 == v92) {
      goto LABEL_292;
    }
    do
    {
      sub_43F38((uint64_t *)v265, v93, "", 5038);
      int v94 = *(_DWORD *)(*(void *)v265 + 144);
      size_t v95 = v245;
      if ((v245 & 0x80u) != 0) {
        size_t v95 = __n;
      }
      if (v95)
      {
        CFStringRef v96 = *(const __CFString **)(*(void *)v265 + 248);
        CFStringRef theString = v96;
        LOBYTE(v257) = *(unsigned char *)(*(void *)v265 + 256);
        if ((_BYTE)v257) {
          BOOL v97 = v96 == 0;
        }
        else {
          BOOL v97 = 1;
        }
        if (!v97)
        {
          CFRetain(v96);
          CFStringRef v96 = theString;
        }
        sub_21B7C(buf, v96);
        if ((v245 & 0x80u) == 0) {
          size_t v98 = v245;
        }
        else {
          size_t v98 = __n;
        }
        uint64_t v99 = HIBYTE(buf[5]);
        int v100 = SHIBYTE(buf[5]);
        if (buf[5] < 0) {
          uint64_t v99 = *(void *)&buf[2];
        }
        if (v98 == v99)
        {
          if (buf[5] >= 0) {
            uint64_t v101 = buf;
          }
          else {
            uint64_t v101 = *(_DWORD **)buf;
          }
          if ((v245 & 0x80) != 0)
          {
            BOOL v109 = memcmp(__s1, v101, __n) == 0;
            if ((v100 & 0x80000000) == 0) {
              goto LABEL_146;
            }
          }
          else if (v245)
          {
            uint64_t v102 = v245 - 1;
            uint64_t v103 = &__s1;
            do
            {
              int v105 = *(unsigned __int8 *)v103;
              uint64_t v103 = (void **)((char *)v103 + 1);
              int v104 = v105;
              int v107 = *(unsigned __int8 *)v101;
              uint64_t v101 = (_DWORD *)((char *)v101 + 1);
              int v106 = v107;
              BOOL v167 = v102-- != 0;
              char v108 = v167;
              BOOL v109 = v104 == v106;
            }
            while (v104 == v106 && (v108 & 1) != 0);
            if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
              goto LABEL_146;
            }
          }
          else
          {
            BOOL v109 = 1;
            if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
              goto LABEL_146;
            }
          }
        }
        else
        {
          BOOL v109 = 0;
          if ((SHIBYTE(buf[5]) & 0x80000000) == 0)
          {
LABEL_146:
            sub_72924((uint64_t)&theString);
            goto LABEL_148;
          }
        }
        operator delete(*(void **)buf);
        goto LABEL_146;
      }
      BOOL v109 = 1;
LABEL_148:
      if (*(void *)&v265[8]) {
        sub_4636C(*(std::__shared_weak_count **)&v265[8]);
      }
      if (v94 == v86 && v109) {
        goto LABEL_162;
      }
      v93 += 2;
    }
    while (v93 != v92);
    unint64_t v93 = v92;
LABEL_162:
    if (v93 != *(uint64_t **)(a2 + 512))
    {
      sub_43F38((uint64_t *)buf, v93, "", 5044);
      int v111 = sub_105654(*(__int32 ***)buf, v87);
      if (*(void *)&buf[2]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[2]);
      }
      if (v111)
      {
        sub_43F38((uint64_t *)&theString, v93, "", 5046);
        uint64_t v113 = *(uint64_t **)(a2 + 504);
        unint64_t v112 = *(uint64_t **)(a2 + 512);
        if (v113 == v112) {
          goto LABEL_378;
        }
        while (1)
        {
          sub_43F38((uint64_t *)buf, v113, "", 5050);
          char v114 = sub_105654(*(__int32 ***)buf, v87);
          if (*(void *)&buf[2]) {
            sub_4636C(*(std::__shared_weak_count **)&buf[2]);
          }
          if (v114) {
            break;
          }
          v113 += 2;
          if (v113 == v112)
          {
            uint64_t v113 = v112;
            break;
          }
        }
        if (v113 == *(uint64_t **)(a2 + 512))
        {
LABEL_378:
          char v204 = (os_log_t *)sub_32A48(13);
          uint64_t v205 = *v204;
          if (*v204 && os_log_type_enabled(*v204, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "RoutingManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 5053;
            _os_log_impl(&def_1E50E8, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No capable port found\"", (uint8_t *)buf, 0x12u);
          }
          int v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v206, "No capable port found");
LABEL_386:
        }
        if (v93 < v113)
        {
          int v207 = (os_log_t *)sub_32A48(13);
          long long v208 = *v207;
          if (*v207 && os_log_type_enabled(*v207, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "RoutingManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 5054;
            _os_log_impl(&def_1E50E8, v208, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Invalid iterator for top mode-capable port\"", (uint8_t *)buf, 0x12u);
          }
          int v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v206, "Invalid iterator for top mode-capable port");
          goto LABEL_386;
        }
        sub_43F38(&v254, v113, "", 5056);
        size_t v115 = v245;
        if ((v245 & 0x80u) != 0) {
          size_t v115 = __n;
        }
        uint64_t v116 = v254;
        if (v115)
        {
          CFStringRef v117 = *(const __CFString **)(v254 + 248);
          *(void *)char v265 = v117;
          v265[8] = *(unsigned char *)(v254 + 256);
          if (v265[8] && v117)
          {
            CFRetain(v117);
            CFStringRef v117 = *(const __CFString **)v265;
          }
          sub_21B7C(buf, v117);
          if ((v245 & 0x80u) == 0) {
            size_t v118 = v245;
          }
          else {
            size_t v118 = __n;
          }
          uint64_t v119 = HIBYTE(buf[5]);
          int v120 = SHIBYTE(buf[5]);
          if (buf[5] < 0) {
            uint64_t v119 = *(void *)&buf[2];
          }
          if (v118 == v119)
          {
            if (buf[5] >= 0) {
              os_signpost_id_t v121 = buf;
            }
            else {
              os_signpost_id_t v121 = *(_DWORD **)buf;
            }
            if ((v245 & 0x80) != 0)
            {
              BOOL v129 = memcmp(__s1, v121, __n) == 0;
              if ((v120 & 0x80000000) == 0) {
                goto LABEL_198;
              }
            }
            else if (v245)
            {
              uint64_t v122 = v245 - 1;
              uint64_t v123 = &__s1;
              do
              {
                int v125 = *(unsigned __int8 *)v123;
                uint64_t v123 = (void **)((char *)v123 + 1);
                int v124 = v125;
                int v127 = *(unsigned __int8 *)v121;
                os_signpost_id_t v121 = (_DWORD *)((char *)v121 + 1);
                int v126 = v127;
                BOOL v167 = v122-- != 0;
                char v128 = v167;
                BOOL v129 = v124 == v126;
              }
              while (v124 == v126 && (v128 & 1) != 0);
              if ((SHIBYTE(buf[5]) & 0x80000000) == 0)
              {
LABEL_198:
                sub_72924((uint64_t)v265);
                goto LABEL_200;
              }
            }
            else
            {
              BOOL v129 = 1;
              if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
                goto LABEL_198;
              }
            }
          }
          else
          {
            BOOL v129 = 0;
            if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
              goto LABEL_198;
            }
          }
          operator delete(*(void **)buf);
          goto LABEL_198;
        }
        BOOL v129 = 1;
LABEL_200:
        if (*(_DWORD *)(v116 + 144) != v86 || !v129)
        {
          CFStringRef v131 = theString;
          if (theString)
          {
            uint64_t v132 = sub_32A48(8);
            if (*(unsigned char *)(v132 + 8))
            {
              BOOL v133 = *(NSObject **)v132;
              if (*(void *)v132)
              {
                if (os_log_type_enabled(*(os_log_t *)v132, OS_LOG_TYPE_DEBUG))
                {
                  sub_4F64((uint64_t)v265, (os_unfair_lock_t)&v131->info);
                  uint64_t v134 = v265;
                  if (v265[23] < 0) {
                    uint64_t v134 = *(unsigned char **)v265;
                  }
                  buf[0] = 136315650;
                  *(void *)&buf[1] = "RoutingManager.cpp";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 5065;
                  HIWORD(buf[4]) = 2080;
                  *(void *)&buf[5] = v134;
                  _os_log_impl(&def_1E50E8, v133, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found and removed port from mCachedPortStack: %s", (uint8_t *)buf, 0x1Cu);
                  if ((v265[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v265);
                  }
                }
              }
            }
            uint64_t v135 = *(CFStringRef **)(a2 + 504);
            uint64_t v136 = *(CFStringRef **)(a2 + 512);
            if (v135 != v136)
            {
              int v137 = v257;
              while (1)
              {
                uint64_t v138 = (std::__shared_weak_count *)v135[1];
                if (!v138) {
                  break;
                }
                uint64_t v139 = std::__shared_weak_count::lock(v138);
                uint64_t v140 = v139;
                if (!v139) {
                  goto LABEL_219;
                }
                CFStringRef v141 = *v135;
                atomic_fetch_add_explicit(&v139->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                sub_4636C(v139);
                if (v137) {
                  goto LABEL_220;
                }
LABEL_221:
                if (v140)
                {
                  BOOL v142 = std::__shared_weak_count::lock(v140);
                  if (!v142) {
                    CFStringRef v141 = 0;
                  }
                  if (!v137) {
                    goto LABEL_230;
                  }
                }
                else
                {
                  CFStringRef v141 = 0;
                  BOOL v142 = 0;
                  if (!v137) {
                    goto LABEL_230;
                  }
                }
                uint64_t v143 = std::__shared_weak_count::lock(v137);
                if (v143)
                {
                  BOOL v144 = v141 == v131;
                  sub_4636C(v143);
                  if (!v142) {
                    goto LABEL_232;
                  }
LABEL_231:
                  sub_4636C(v142);
                  goto LABEL_232;
                }
LABEL_230:
                BOOL v144 = v141 == 0;
                if (v142) {
                  goto LABEL_231;
                }
LABEL_232:
                if (v137) {
                  std::__shared_weak_count::__release_weak(v137);
                }
                if (v140) {
                  std::__shared_weak_count::__release_weak(v140);
                }
                if (v144) {
                  goto LABEL_239;
                }
                v135 += 2;
                if (v135 == v136)
                {
                  uint64_t v135 = v136;
                  goto LABEL_239;
                }
              }
              uint64_t v140 = 0;
LABEL_219:
              CFStringRef v141 = 0;
              if (!v137) {
                goto LABEL_221;
              }
LABEL_220:
              atomic_fetch_add_explicit(&v137->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_221;
            }
LABEL_239:
            int v145 = v136;
            if (v135 != v136)
            {
              int v146 = v135 + 2;
              int v145 = v135;
              while (v146 != v136)
              {
                unsigned int v147 = (std::__shared_weak_count *)v146[1];
                if (v147)
                {
                  uint64_t v148 = std::__shared_weak_count::lock(v147);
                  uint64_t v149 = v148;
                  if (v148)
                  {
                    CFStringRef v150 = *v146;
                    atomic_fetch_add_explicit(&v148->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    sub_4636C(v148);
                  }
                  else
                  {
                    CFStringRef v150 = 0;
                  }
                }
                else
                {
                  CFStringRef v150 = 0;
                  uint64_t v149 = 0;
                }
                CFStringRef v151 = theString;
                uint64_t v152 = v257;
                if (v257) {
                  atomic_fetch_add_explicit(&v257->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                if (v149)
                {
                  uint64_t v153 = std::__shared_weak_count::lock(v149);
                  if (!v153) {
                    CFStringRef v150 = 0;
                  }
                  if (!v152) {
                    goto LABEL_257;
                  }
                }
                else
                {
                  CFStringRef v150 = 0;
                  uint64_t v153 = 0;
                  if (!v152) {
                    goto LABEL_257;
                  }
                }
                uint64_t v154 = std::__shared_weak_count::lock(v152);
                if (v154)
                {
                  BOOL v155 = v150 == v151;
                  sub_4636C(v154);
                  goto LABEL_258;
                }
LABEL_257:
                BOOL v155 = v150 == 0;
LABEL_258:
                a2 = v235;
                if (v153) {
                  sub_4636C(v153);
                }
                if (v152) {
                  std::__shared_weak_count::__release_weak(v152);
                }
                if (v149) {
                  std::__shared_weak_count::__release_weak(v149);
                }
                if (!v155)
                {
                  long long v156 = *(_OWORD *)v146;
                  CFStringRef *v146 = 0;
                  v146[1] = 0;
                  uint64_t v157 = (std::__shared_weak_count *)v145[1];
                  *(_OWORD *)int v145 = v156;
                  if (v157) {
                    std::__shared_weak_count::__release_weak(v157);
                  }
                  v145 += 2;
                }
                v146 += 2;
              }
            }
            uint64_t v158 = *(CFStringRef **)(a2 + 512);
            if (v145 != v158)
            {
              while (v158 != v145)
              {
                uint64_t v159 = (std::__shared_weak_count *)*(v158 - 1);
                if (v159) {
                  std::__shared_weak_count::__release_weak(v159);
                }
                v158 -= 2;
              }
              *(void *)(a2 + 512) = v145;
            }
            CFStringRef v160 = theString;
            if (theString)
            {
              uint64_t v161 = sub_32A48(8);
              if (*(unsigned char *)(v161 + 8))
              {
                uint64_t v162 = *(NSObject **)v161;
                if (*(void *)v161)
                {
                  if (os_log_type_enabled(*(os_log_t *)v161, OS_LOG_TYPE_DEBUG))
                  {
                    sub_4F64((uint64_t)v265, (os_unfair_lock_t)&v160->info);
                    char v163 = v265;
                    if (v265[23] < 0) {
                      char v163 = *(unsigned char **)v265;
                    }
                    buf[0] = 136315650;
                    *(void *)&buf[1] = "RoutingManager.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 5073;
                    HIWORD(buf[4]) = 2080;
                    *(void *)&buf[5] = v163;
                    _os_log_impl(&def_1E50E8, v162, OS_LOG_TYPE_DEBUG, "%25s:%-5d Elevated port on mCachedPortStack: %s", (uint8_t *)buf, 0x1Cu);
                    if ((v265[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v265);
                    }
                  }
                }
              }
              *(void *)buf = v160;
              *(void *)&buf[2] = v257;
              if (v257) {
                atomic_fetch_add_explicit(&v257->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              sub_13B7B4(v230, (uint64_t)v113, (long long *)buf);
              if (*(void *)&buf[2]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[2]);
              }
            }
          }
        }
        if (v255) {
          sub_4636C(v255);
        }
        if (v257) {
          sub_4636C(v257);
        }
      }
    }
LABEL_292:
    ++v85;
  }
  while (v85 != v234);
  a1 = v228;
  std::string v78 = v229;
  if (v229) {
    goto LABEL_301;
  }
LABEL_302:
  sub_8108(&v251);
  sub_8108(v236);
LABEL_303:
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v164 = *(void *)(*(void *)a2 + 8);
  if (!v164) {
    goto LABEL_331;
  }
  uint64_t v165 = *(void *)a2 + 8;
  do
  {
    unsigned int v166 = *(_DWORD *)(v164 + 32);
    BOOL v167 = v166 >= LODWORD(__p.__r_.__value_.__l.__data_);
    if (v166 >= LODWORD(__p.__r_.__value_.__l.__data_)) {
      int v168 = (uint64_t *)v164;
    }
    else {
      int v168 = (uint64_t *)(v164 + 8);
    }
    if (v167) {
      uint64_t v165 = v164;
    }
    uint64_t v164 = *v168;
  }
  while (*v168);
  if (v165 == *(void *)a2 + 8 || LODWORD(__p.__r_.__value_.__l.__data_) < *(_DWORD *)(v165 + 32)) {
    goto LABEL_331;
  }
  *(void *)buf = off_6228D0;
  *(void *)&buf[2] = 1;
  *(void *)&uint8_t buf[4] = 0;
  LOBYTE(buf[6]) = 0;
  LOBYTE(buf[8]) = 0;
  sub_120690(a1, (uint64_t)buf);
  sub_11A520(buf);
  int v169 = v242;
  int v170 = (int *)(a2 + 176);
  if (v242 != 1635087471) {
    int v170 = &v242;
  }
  *(_DWORD *)char v265 = *v170;
  std::string::size_type v171 = &__s1;
  if (v242 == 1635087471) {
    std::string::size_type v171 = (void **)(a2 + 184);
  }
  uint64_t v172 = (char *)&v245;
  if (v242 == 1635087471) {
    uint64_t v172 = (char *)(a2 + 207);
  }
  if (*v172 < 0)
  {
    if (v242 == 1635087471) {
      p_uint64_t n = (unint64_t *)(a2 + 192);
    }
    else {
      p_uint64_t n = &__n;
    }
    sub_21E8C(&v265[8], *v171, *p_n);
    int v173 = v232;
  }
  else
  {
    *(_OWORD *)&v265[8] = *(_OWORD *)v171;
    *(void *)&v265[24] = v171[2];
    int v173 = v232;
  }
  std::string v175 = &v246;
  if (v169 == 1635087471) {
    std::string v175 = (uint64_t *)(a2 + 208);
  }
  uint64_t v266 = *v175;
  sub_13A7AC((uint64_t)buf, a2, &__p, (uint64_t)&v240, (uint64_t)&v239, (uint64_t)v241, v241[8], &__p.__r_.__value_.__r.__words[2], (uint64_t)v265, &v247, v248, v231, v173, &v249, (void *)(a2 + 448));
  sub_141FB0((uint64_t)v236, (void *)a2, (uint64_t)buf, 0);
  sub_120690(a1, (uint64_t)v236);
  sub_11A520(v236);
  sub_13A044((uint64_t)buf);
  if ((v265[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v265[8]);
  }
  if (*(_DWORD *)(a1 + 8))
  {
LABEL_331:
    uint64_t v176 = sub_32A48(8);
    uint64_t v177 = sub_32A48(34);
    char v178 = 0;
    uint64_t v179 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v180 = *(void *)(v176 + 8);
    while (1)
    {
      uint64_t v181 = (int)buf[v179];
      char v182 = v178;
      if (((v180 & v181) != 0) != ((*(void *)(v177 + 8) & v181) != 0)) {
        break;
      }
      char v178 = 1;
      uint64_t v179 = 1;
      if (v182) {
        goto LABEL_337;
      }
    }
    if ((v180 & v181) == 0) {
      uint64_t v176 = v177;
    }
LABEL_337:
    uint64_t v183 = *(NSObject **)v176;
    if (v183 && os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
    {
      sub_383B64((std::string *)v265, v233);
      std::string::size_type v184 = v265[23] >= 0 ? v265 : *(unsigned char **)v265;
      int v185 = *(_DWORD *)(a1 + 8);
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4372;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v184;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = v185;
      _os_log_impl(&def_1E50E8, v183, OS_LOG_TYPE_INFO, "%25s:%-5d Set route configuration %s failed with result %d.", (uint8_t *)buf, 0x22u);
      if ((v265[23] & 0x80000000) != 0) {
        operator delete(*(void **)v265);
      }
    }
  }
  kdebug_trace();
  return sub_143D84((uint64_t)&__p);
}

void sub_14100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1412AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_144BD4(a1, a3);
  uint64_t v7 = v6 + 192;
  if ((*(void *)(v6 + 192) != *(void *)(v6 + 200) || *(void *)(a1 + 216) != *(void *)(a1 + 224))
    && !*(void *)(a1 + 264)
    && !*(void *)(a1 + 304)
    && !*(void *)(a1 + 344))
  {
    uint64_t v8 = operator new(8uLL);
    void *v8 = 0x706E756C706E6C69;
    __p[0] = v8;
    __p[1] = v8 + 1;
    __p[2] = v8 + 1;
    strcpy((char *)&__p[3], "cwdv");
    char v74 = 0;
    int v75 = 3;
    std::string v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = &v77;
    int v79 = 44739242;
    CFTypeRef cf = 0;
    uint64_t v9 = sub_10FBF0();
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)off_625BA8;
    uint64_t v72 = &v71;
    sub_10EA24((uint64_t *)&v69, v9, __p, (uint64_t)&v71);
    sub_6AFD4(&v71);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v77);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v10 = sub_10FBF0();
    memset(__p, 0, 24);
    strcpy((char *)&__p[3], "cwdv");
    char v74 = 0;
    int v75 = 3;
    std::string v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = &v77;
    CFTypeRef cf = 0;
    int v79 = 44731050;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)off_625BA8;
    uint64_t v72 = &v71;
    sub_10EA24(v68, v10, __p, (uint64_t)&v71);
    sub_6AFD4(&v71);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v77);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    for (uint64_t i = v70[0]; i != &v69; uint64_t i = (void *)i[1])
      sub_3590(v68, i[2], i[3]);
    sub_18F378(v7, (uint64_t)v68);
    sub_8108(v68);
    sub_8108((uint64_t *)&v69);
  }
  if (*(unsigned char *)(a1 + 140))
  {
    uint64_t v12 = *a2;
    uint64_t v13 = (void *)(*a2 + 104);
    sub_46AA0((uint64_t *)(a1 + 88), *(void **)(*a2 + 96), v13);
    uint64_t v14 = sub_32A48(8);
    if (*(unsigned char *)(v14 + 8))
    {
      uint64_t v15 = *(NSObject **)v14;
      if (*(void *)v14)
      {
        if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
        {
          sub_120764(&v71, *(void **)(v12 + 96), v13);
          char v16 = (v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v71
              : (std::string *)v71.__r_.__value_.__r.__words[0];
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 5300;
          WORD1(__p[2]) = 2080;
          *(void **)((char *)&__p[2] + 4) = v16;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added disallowed port types %s for the screen dark policy.", (uint8_t *)__p, 0x1Cu);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v71.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  uint64_t v17 = sub_1312D4(*a2, *(_DWORD *)a3);
  unsigned __int16 v18 = sub_37CF74(v17 + 40, *(_DWORD *)(a3 + 4));
  if (v18 >= 0x100u && v18 != 0)
  {
    int v20 = sub_241270(1885892706, v17, *(_DWORD *)(v17 + 32), *(void *)a3, *(void *)(a3 + 8), a3 + 88);
    if ((v20 & sub_241270(1885892674, v17, *(_DWORD *)(v17 + 32), *(void *)a3, *(void *)(a3 + 8), a3 + 88)) == 1)
    {
      uint64_t v21 = operator new(4uLL);
      _DWORD *v21 = 1885892674;
      __p[0] = v21;
      __p[1] = v21 + 1;
      __p[2] = v21 + 1;
      strcpy((char *)&__p[3], "cwdv");
      char v74 = 0;
      int v75 = 3;
      std::string v77 = 0;
      uint64_t v78 = 0;
      uint64_t v76 = &v77;
      int v79 = 44739242;
      CFTypeRef cf = 0;
      uint64_t v22 = sub_10FBF0();
      v71.__r_.__value_.__r.__words[0] = (std::string::size_type)off_622A88;
      uint64_t v72 = &v71;
      sub_10EA24((uint64_t *)&v69, v22, __p, (uint64_t)&v71);
      sub_6AFD4(&v71);
      sub_8E4B8((uint64_t *)&v71, &v69);
      for (uint64_t j = (std::string *)v71.__r_.__value_.__l.__size_; j != &v71; uint64_t j = (std::string *)j->__r_.__value_.__l.__size_)
      {
        sub_10653C(v68, j->__r_.__value_.__r.__words[2]);
        if (v68[2])
        {
          data = (std::__shared_weak_count *)j[1].__r_.__value_.__l.__data_;
          std::string::size_type v66 = j->__r_.__value_.__r.__words[2];
          uint64_t v67 = data;
          if (data) {
            atomic_fetch_add_explicit(&data->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          sub_144D44((uint64_t **)(a1 + 40), &v66, (uint64_t)&v66);
          if (v67) {
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        sub_8108(v68);
      }
      sub_B8E4((uint64_t *)&v71);
      sub_8108((uint64_t *)&v69);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0(v77);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  uint64_t v27 = *(void *)(v17 + 48);
  BOOL v26 = (void *)(v17 + 48);
  uint64_t v25 = v27;
  if (!v27) {
    goto LABEL_55;
  }
  unsigned int v28 = *(_DWORD *)(a3 + 4);
  CFTypeRef v29 = v26;
  do
  {
    unsigned int v30 = *(_DWORD *)(v25 + 32);
    BOOL v31 = v30 >= v28;
    if (v30 >= v28) {
      CFStringRef v32 = (uint64_t *)v25;
    }
    else {
      CFStringRef v32 = (uint64_t *)(v25 + 8);
    }
    if (v31) {
      CFTypeRef v29 = (void *)v25;
    }
    uint64_t v25 = *v32;
  }
  while (*v32);
  if (v29 == v26 || *((_DWORD *)v29 + 8) > v28 || (unsigned int v33 = *((unsigned __int16 *)v29 + 89), (v34 = v33 >> 8) == 0))
  {
LABEL_55:
    LOBYTE(v33) = 0;
    unsigned int v34 = 0;
  }
  unsigned int v35 = v33 | (v34 << 8);
  if (v35 <= 0x100) {
    LOBYTE(v35) = 0;
  }
  if ((_BYTE)v35)
  {
    uint64_t v36 = sub_10FBF0();
    memset(__p, 0, 24);
    strcpy((char *)&__p[3], "cwdv");
    char v74 = 0;
    int v75 = 3;
    std::string v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = &v77;
    int v79 = 44739242;
    CFTypeRef cf = 0;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)off_622A88;
    uint64_t v72 = &v71;
    sub_10EA24((uint64_t *)&v69, v36, __p, (uint64_t)&v71);
    sub_6AFD4(&v71);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v77);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_8E4B8((uint64_t *)__p, &v69);
    for (uint64_t k = (void **)__p[1]; k != __p; uint64_t k = (void **)k[1])
    {
      if ((*(unsigned int (**)(void *))(*(void *)k[2] + 456))(k[2]))
      {
        std::string::size_type v38 = (std::string::size_type)k[3];
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)k[2];
        v71.__r_.__value_.__l.__size_ = v38;
        if (v38) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 16), 1uLL, memory_order_relaxed);
        }
        sub_144D44((uint64_t **)(a1 + 40), (unint64_t *)&v71, (uint64_t)&v71);
        if (v71.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v71.__r_.__value_.__l.__size_);
        }
      }
    }
    sub_B8E4((uint64_t *)__p);
    sub_8108((uint64_t *)&v69);
  }
  if (*(_DWORD *)a3 == 1667657057)
  {
    uint64_t v39 = operator new(4uLL);
    _DWORD *v39 = 1885892674;
    __p[0] = v39;
    __p[1] = v39 + 1;
    __p[2] = v39 + 1;
    strcpy((char *)&__p[3], "cwdv");
    char v74 = 0;
    int v75 = 3;
    std::string v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = &v77;
    int v79 = 44739242;
    CFTypeRef cf = 0;
    uint64_t v40 = sub_10FBF0();
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)off_622A88;
    uint64_t v72 = &v71;
    sub_10EA24((uint64_t *)&v69, v40, __p, (uint64_t)&v71);
    sub_6AFD4(&v71);
    for (uint64_t m = v70[0]; m != &v69; uint64_t m = (void *)m[1])
    {
      uint64_t v42 = (std::__shared_weak_count *)m[3];
      if (!v42) {
        continue;
      }
      unint64_t v43 = std::__shared_weak_count::lock(v42);
      if (!v43) {
        continue;
      }
      uint64_t v44 = v43;
      uint64_t v45 = m[2];
      if (v45 && (sub_24B314((void *)m[2]) & 1) == 0)
      {
        sub_21C8C(&v71, "kBluetoothAudioDeviceFeatureFindMyPlayBack");
        BOOL v46 = sub_250638(v45, (const UInt8 *)&v71);
        BOOL v47 = v46;
        if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (v46) {
            goto LABEL_82;
          }
LABEL_81:
          sub_144B34((uint64_t **)(a1 + 40), m + 2, m + 2);
          goto LABEL_82;
        }
        operator delete(v71.__r_.__value_.__l.__data_);
        if (!v47) {
          goto LABEL_81;
        }
      }
LABEL_82:
      sub_4636C(v44);
    }
    sub_8108((uint64_t *)&v69);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v77);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (*(unsigned char *)(a3 + 370) && *(unsigned char *)(a3 + 371))
  {
    uint64_t v48 = sub_10FBF0();
    uint64_t v49 = operator new(0x14uLL);
    v49[4] = 1886152041;
    *(_OWORD *)uint64_t v49 = *(_OWORD *)"bphpBphptbmpoelpielp";
    __p[0] = v49;
    __p[1] = v49 + 5;
    __p[2] = v49 + 5;
    strcpy((char *)&__p[3], "cwdv");
    char v74 = 0;
    int v75 = 3;
    std::string v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = &v77;
    int v79 = 44739242;
    CFTypeRef cf = 0;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)off_622A88;
    uint64_t v72 = &v71;
    sub_10EA24(v68, v48, __p, (uint64_t)&v71);
    sub_144DD8((uint64_t)&v69, (uint64_t)v68);
    sub_8108(v68);
    sub_6AFD4(&v71);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v77);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_13150C((uint64_t *)(a1 + 40), v69, v70);
    if (v70[1])
    {
      uint64_t v50 = (os_log_t *)sub_32A48(8);
      uint64_t v51 = *v50;
      if (*v50)
      {
        if (os_log_type_enabled(*v50, OS_LOG_TYPE_INFO))
        {
          sub_131D18(&v71, v69, v70);
          BOOL v52 = (v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v71
              : (std::string *)v71.__r_.__value_.__r.__words[0];
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 5374;
          WORD1(__p[2]) = 2080;
          *(void **)((char *)&__p[2] + 4) = v52;
          _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_INFO, "%25s:%-5d Disallowing bluetooth ports %s", (uint8_t *)__p, 0x1Cu);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v71.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    sub_10E118(v70[0]);
  }
  if (!*(unsigned char *)(a3 + 12))
  {
    uint64_t v53 = *v26;
    if (!*v26) {
      goto LABEL_116;
    }
    unsigned int v54 = *(_DWORD *)(a3 + 4);
    unint64_t v55 = v26;
    do
    {
      unsigned int v56 = *(_DWORD *)(v53 + 32);
      BOOL v57 = v56 >= v54;
      if (v56 >= v54) {
        uint64_t v58 = (uint64_t *)v53;
      }
      else {
        uint64_t v58 = (uint64_t *)(v53 + 8);
      }
      if (v57) {
        unint64_t v55 = (void *)v53;
      }
      uint64_t v53 = *v58;
    }
    while (*v58);
    if (v55 != v26 && *((_DWORD *)v55 + 8) <= v54)
    {
      unsigned int v59 = *((unsigned __int16 *)v55 + 90);
      unsigned int v60 = v59 >> 8;
    }
    else
    {
LABEL_116:
      LOBYTE(v59) = 0;
      unsigned int v60 = 0;
    }
    unsigned int v61 = v59 | (v60 << 8);
    if (v61 <= 0x100) {
      LOBYTE(v61) = 0;
    }
    if ((_BYTE)v61)
    {
      uint64_t v62 = 40;
      if (!*((unsigned char *)a2 + 44)) {
        uint64_t v62 = 36;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)((char *)a2 + v62);
      *(unsigned char *)(a1 + 12) = 1;
      uint64_t v63 = (os_log_t *)sub_32A48(8);
      unint64_t v64 = *v63;
      if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_INFO))
      {
        sub_2417C(&v71, *(_DWORD *)(a1 + 8));
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v65 = &v71;
        }
        else {
          uint64_t v65 = (std::string *)v71.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 5391;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v65;
        _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_INFO, "%25s:%-5d Pulling in previous playback route's mode %s", (uint8_t *)__p, 0x1Cu);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_141DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_141FB0(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a1;
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v5 = (unsigned int *)(a3 + 8);
  uint64_t v6 = *(void *)(*a2 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (std::__shared_weak_count *)a3;
  uint64_t v8 = a2;
  unsigned int v9 = *v5;
  uint64_t v10 = *a2 + 8;
  do
  {
    unsigned int v11 = *(_DWORD *)(v6 + 32);
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      uint64_t v13 = (uint64_t *)v6;
    }
    else {
      uint64_t v13 = (uint64_t *)(v6 + 8);
    }
    if (v12) {
      uint64_t v10 = v6;
    }
    uint64_t v6 = *v13;
  }
  while (*v13);
  if (v10 == *a2 + 8 || v9 < *(_DWORD *)(v10 + 32))
  {
LABEL_12:
    uint64_t v14 = sub_32A48(8);
    uint64_t v15 = sub_32A48(34);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20) {
        goto LABEL_18;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_18:
    uint64_t v21 = *(NSObject **)v14;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(&__p, *v5);
      if (v230 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2192;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = p_p;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Calling find(%s) in the routing database returned an invalid iterator.", buf, 0x1Cu);
      if (SHIBYTE(v230) < 0) {
        operator delete(__p);
      }
    }
    return;
  }
  sub_143E38(v219, a2 + 9);
  uint64_t v205 = v10 + 40;
  int v23 = *(_DWORD *)(v10 + 72);
  uint64_t v210 = (uint64_t *)v7;
  uint64_t v211 = (uint64_t)v8;
  if (!v7[11].__vftable && !v7[12].__shared_weak_owners_ && !v7[14].__shared_owners_) {
    goto LABEL_82;
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    std::string::size_type v184 = (os_log_t *)sub_32A48(13);
    int v185 = *v184;
    if (*v184 && os_log_type_enabled(*v184, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2650;
      _os_log_impl(&def_1E50E8, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_353:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(void *)(v10 + 56))
  {
    uint64_t v186 = (os_log_t *)sub_32A48(13);
    int v187 = *v186;
    if (*v186 && os_log_type_enabled(*v186, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2651;
      _os_log_impl(&def_1E50E8, v187, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_353;
  }
  unsigned int v214 = off_6228D0;
  uint64_t v215 = (std::__shared_weak_count *)(&def_1E50E8 + 1);
  uint64_t v216 = 0;
  char v217 = 0;
  char v218 = 0;
  uint64_t v229 = 0;
  uint64_t v230 = 0;
  std::string __p = &v229;
  for (uint64_t i = v7[10].__shared_weak_owners_; i; uint64_t i = *(void *)i)
  {
    if (*(void *)(i + 24) != *(void *)(i + 32)) {
      sub_46C2C((uint64_t **)&__p, (uint64_t *)&v229, *(_DWORD *)(i + 16), (_DWORD *)(i + 16));
    }
  }
  int v232 = 0;
  uint64_t v233 = 0;
  uint64_t v231 = (uint64_t *)&v232;
  for (uint64_t j = v7[12].__shared_owners_; j; uint64_t j = *(void *)j)
  {
    if (*(void *)(j + 24) != *(void *)(j + 32)) {
      sub_46C2C(&v231, (uint64_t *)&v232, *(_DWORD *)(j + 16), (_DWORD *)(j + 16));
    }
  }
  p_shared_owners = 0;
  uint64_t v226 = 0;
  uint64_t v227 = 0;
  BOOL v26 = *(_DWORD *)(v10 + 72) == 1668510820;
  *(_OWORD *)&v222[3] = *(_OWORD *)v5;
  _DWORD buf[16] = v26;
  *(_OWORD *)&buf[17] = *(_OWORD *)v222;
  *(_DWORD *)&unsigned char buf[32] = *(_DWORD *)&v222[15];
  *(void *)buf = v10 + 40;
  *(void *)&buf[8] = v7 + 1;
  uint64_t v239 = 0;
  uint64_t v240 = 0;
  uint64_t v27 = sub_12E380((uint64_t *)buf);
  long long v208 = v28;
  uint64_t v29 = v27;
  uint64_t v206 = *(void *)buf;
  if (*(void *)buf != v27)
  {
    unsigned int v201 = (const void ***)&v7[8];
    uint64_t v30 = (uint64_t)(v28 + 1);
    do
    {
      *(void *)&v222[8] = 0;
      *(void *)&v222[16] = 0;
      v224[0] = 0;
      v224[1] = 0;
      *(void *)BOOL v222 = &v222[8];
      BOOL v223 = v224;
      for (uint64_t k = *(void *)(v29 + 24); k != v29 + 16; uint64_t k = *(void *)(k + 8))
      {
        BOOL v32 = sub_250CE4(*(_DWORD *)(k + 16));
        unsigned int v33 = *(_DWORD *)(k + 16);
        int v34 = v33 == 1886284905 || v32;
        if (v34 == 1) {
          sub_6CB40((uint64_t *)v222, v33, *(_DWORD *)(k + 16));
        }
        BOOL v35 = sub_250CE4(*(_DWORD *)(k + 20));
        unsigned int v36 = *(_DWORD *)(k + 20);
        int v37 = v36 == 1886287212 || v35;
        if (v37 == 1) {
          sub_6CB40((uint64_t *)&v223, v36, *(_DWORD *)(k + 20));
        }
      }
      unsigned int v38 = *(unsigned __int8 *)(v10 + 64);
      BOOL v39 = v233 != 0;
      BOOL v40 = 1;
      if ((v38 & 1) != 0 && v230) {
        BOOL v40 = sub_190098(*(void **)v222, &v222[8], __p, &v229);
      }
      BOOL v41 = (v39 & (v38 >> 1)) == 0 || sub_190098(v223, v224, v231, &v232);
      int v42 = v40 && v41;
      uint64_t v7 = (std::__shared_weak_count *)v210;
      uint64_t v8 = (void *)v211;
      if (v42 == 1)
      {
        sub_136F34((uint64_t **)&v220, (_DWORD *)v211, v29 + 16, v205, v201, (uint64_t)v210);
        if (v220 != v221)
        {
          sub_12E4DC((uint64_t)v237, (uint64_t *)v211, (unsigned int ***)&v220, *(uint64_t **)(v29 + 104), v210, (uint64_t *)&p_shared_owners);
          sub_120690((uint64_t)&v214, (uint64_t)v237);
          unint64_t v43 = (void ***)sub_11A520(v237);
          if (!v215)
          {
            *(void *)uint64_t v237 = &v220;
            sub_12EA14(v43);
            sub_463E0(v224[0]);
            sub_463E0(*(void **)&v222[8]);
            break;
          }
        }
        *(void *)uint64_t v237 = &v220;
        sub_12EA14((void ***)v237);
      }
      sub_463E0(v224[0]);
      sub_463E0(*(void **)&v222[8]);
      uint64_t v29 = *(void *)(v29 + 8);
      uint64_t v44 = *v208;
      if (v29 != *v208)
      {
        while ((sub_12EA98(v30, v29 + 16) & 1) == 0)
        {
          uint64_t v29 = *(void *)(v29 + 8);
          if (v29 == v44)
          {
            uint64_t v29 = v44;
            break;
          }
        }
      }
    }
    while (v29 != v206);
  }
  sub_12ED10(&p_shared_owners, (uint64_t)(v8 + 63));
  *(void *)buf = &p_shared_owners;
  sub_98D9C((void ***)buf);
  sub_463E0(v232);
  sub_463E0(v229);
  sub_120690(v4, (uint64_t)&v214);
  sub_11A520(&v214);
  if (!*(_DWORD *)(v4 + 8)) {
    goto LABEL_101;
  }
  uint64_t v45 = sub_32A48(8);
  uint64_t v46 = sub_32A48(34);
  char v47 = 0;
  uint64_t v48 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v49 = *(void *)(v45 + 8);
  while (1)
  {
    uint64_t v50 = *(int *)&buf[4 * v48];
    char v51 = v47;
    if (((v49 & v50) != 0) != ((*(void *)(v46 + 8) & v50) != 0)) {
      break;
    }
    char v47 = 1;
    uint64_t v48 = 1;
    if (v51) {
      goto LABEL_78;
    }
  }
  if ((v49 & v50) == 0) {
    uint64_t v45 = v46;
  }
  uint64_t v49 = *(void *)(v45 + 8);
LABEL_78:
  if (v49)
  {
    BOOL v52 = *(NSObject **)v45;
    if (v52)
    {
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        int v53 = *(_DWORD *)(v4 + 8);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2204;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v53;
        _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d ActivateForPreferredPersistentRoute failed with result %d.", buf, 0x18u);
      }
    }
  }
LABEL_82:
  if (!*(_DWORD *)(v4 + 8)) {
    goto LABEL_101;
  }
  if (v23 == 1667396196) {
    goto LABEL_84;
  }
  if (v7[6].__vftable)
  {
    int v61 = *(unsigned __int8 *)(v10 + 64);
    int v62 = v61 & 1;
    p_shared_owners = &v7[5].__shared_owners_;
    LOBYTE(v226) = v61 & 1;
    BYTE1(v226) = (v61 & 2) != 0;
    sub_1440B8((uint64_t **)&v220, (uint64_t)&p_shared_owners, 0);
    uint64_t v199 = v5;
    sub_1440B8(&v234, (uint64_t)&p_shared_owners, 1);
    uint64_t v63 = v221;
    int v207 = v62;
    if (v221)
    {
      unint64_t v64 = std::__shared_weak_count::lock(v221);
      uint64_t v65 = v64;
      if (v64)
      {
        std::string::size_type v66 = (uint64_t *)v220;
        atomic_fetch_add_explicit(&v64->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v64);
        uint64_t v67 = std::__shared_weak_count::lock(v65);
        if (v67)
        {
          sub_4636C(v67);
          if (v66)
          {
            std::__shared_weak_count::__release_weak(v65);
            goto LABEL_144;
          }
        }
        char v87 = 0;
LABEL_128:
        if (v235 && (uint64_t v88 = std::__shared_weak_count::lock(v235)) != 0)
        {
          uint64_t v89 = v88;
          uint64_t v90 = v234;
          atomic_fetch_add_explicit(&v88->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v88);
          unint64_t v91 = std::__shared_weak_count::lock(v89);
          if (v91) {
            sub_4636C(v91);
          }
          else {
            uint64_t v90 = 0;
          }
          std::__shared_weak_count::__release_weak(v89);
          if ((v87 & 1) == 0) {
            std::__shared_weak_count::__release_weak(v65);
          }
          int v62 = v61 & 1;
          if (v90)
          {
LABEL_144:
            int v94 = *(_DWORD *)(v10 + 72);
            sub_3B7EC();
            if ((*(uint64_t (**)(void))(qword_64CC40 + 48))())
            {
              if (v94 == 1668246894 || v94 == 1668510820)
              {
                uint64_t v8 = (void *)v211;
                int v209 = v61 & 2;
                if (!v62)
                {
                  if ((v61 & 2) == 0) {
                    goto LABEL_357;
                  }
                  goto LABEL_179;
                }
                if (v63)
                {
                  int v106 = std::__shared_weak_count::lock(v63);
                  uint64_t v65 = v106;
                  if (v106)
                  {
                    int v107 = (uint64_t *)v220;
                    atomic_fetch_add_explicit(&v106->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    sub_4636C(v106);
                    char v108 = std::__shared_weak_count::lock(v65);
                    if (v108)
                    {
                      sub_4636C(v108);
LABEL_177:
                      BOOL v109 = v107 == 0;
                      if (v107 || (v61 & 2) == 0)
                      {
LABEL_185:
                        if (v65)
                        {
                          std::__shared_weak_count::__release_weak(v65);
                          if (v109) {
                            goto LABEL_357;
                          }
                          goto LABEL_189;
                        }
LABEL_188:
                        if (v109)
                        {
LABEL_357:
                          uint64_t v189 = (os_log_t *)sub_32A48(13);
                          unint64_t v190 = *v189;
                          if (*v189 && os_log_type_enabled(*v189, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315394;
                            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 2734;
                            _os_log_impl(&def_1E50E8, v190, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                          }
                          goto LABEL_368;
                        }
LABEL_189:
                        if (v94 == 1668246894)
                        {
                          if (v235)
                          {
                            char v114 = std::__shared_weak_count::lock(v235);
                            if (v114)
                            {
                              size_t v115 = v114;
                              uint64_t v116 = v234;
                              atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                              sub_4636C(v114);
                              CFStringRef v117 = std::__shared_weak_count::lock(v115);
                              if (v117)
                              {
                                sub_4636C(v117);
                                std::__shared_weak_count::__release_weak(v115);
                                if (v116)
                                {
                                  size_t v118 = (os_log_t *)sub_32A48(13);
                                  uint64_t v119 = *v118;
                                  if (*v118 && os_log_type_enabled(*v118, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)buf = 136315394;
                                    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                                    *(_WORD *)&unsigned char buf[12] = 1024;
                                    *(_DWORD *)&buf[14] = 2739;
                                    _os_log_impl(&def_1E50E8, v119, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                                  }
                                  goto LABEL_368;
                                }
                              }
                              else
                              {
                                std::__shared_weak_count::__release_weak(v115);
                              }
                            }
                          }
                          *(void *)buf = 0;
                          *(void *)&buf[8] = 0;
                          if (v63)
                          {
                            uint64_t v134 = std::__shared_weak_count::lock(v63);
                            if (v134)
                            {
                              uint64_t v135 = (uint64_t *)v220;
                              atomic_fetch_add_explicit(&v134->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                              *(void *)buf = v135;
                              *(void *)&buf[8] = v134;
                              sub_4636C(v134);
                            }
                            else
                            {
                              *(void *)buf = 0;
                              *(void *)&buf[8] = 0;
                            }
                          }
                          sub_12CF28((uint64_t)&__p, v211, v205, (uint64_t)v7, (uint64_t *)buf);
                          if (*(void *)&buf[8]) {
                            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
                          }
LABEL_155:
                          if (v235) {
                            std::__shared_weak_count::__release_weak(v235);
                          }
                          if (v221) {
                            std::__shared_weak_count::__release_weak(v221);
                          }
                          sub_120690(v4, (uint64_t)&__p);
                          sub_11A520(&__p);
                          if (*(_DWORD *)(v4 + 8))
                          {
                            uint64_t v97 = sub_32A48(8);
                            uint64_t v98 = sub_32A48(34);
                            char v99 = 0;
                            uint64_t v100 = 0;
                            *(void *)buf = 0x100000002;
                            uint64_t v101 = *(void *)(v97 + 8);
                            while (1)
                            {
                              uint64_t v102 = *(int *)&buf[4 * v100];
                              char v103 = v99;
                              if (((v101 & v102) != 0) != ((*(void *)(v98 + 8) & v102) != 0)) {
                                break;
                              }
                              char v99 = 1;
                              uint64_t v100 = 1;
                              if (v103) {
                                goto LABEL_167;
                              }
                            }
                            if ((v101 & v102) == 0) {
                              uint64_t v97 = v98;
                            }
                            uint64_t v101 = *(void *)(v97 + 8);
LABEL_167:
                            if (v101)
                            {
                              int v104 = *(NSObject **)v97;
                              if (v104)
                              {
                                if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
                                {
                                  int v105 = *(_DWORD *)(v4 + 8);
                                  *(_DWORD *)buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                                  *(_WORD *)&unsigned char buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 2213;
                                  *(_WORD *)&unsigned char buf[18] = 1024;
                                  *(_DWORD *)&buf[20] = v105;
                                  _os_log_impl(&def_1E50E8, v104, OS_LOG_TYPE_DEBUG, "%25s:%-5d ActivateForOverride failed with result %d.", buf, 0x18u);
                                }
                              }
                            }
                          }
                          goto LABEL_101;
                        }
                        if ((~v61 & 3) != 0) {
                          goto LABEL_256;
                        }
                        if (v63)
                        {
                          int v120 = std::__shared_weak_count::lock(v63);
                          if (v120)
                          {
                            os_signpost_id_t v121 = v120;
                            uint64_t v122 = (uint64_t *)v220;
                            atomic_fetch_add_explicit(&v120->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                            sub_4636C(v120);
                            uint64_t v123 = std::__shared_weak_count::lock(v121);
                            if (v123
                              && (sub_4636C(v123), v122)
                              && v235
                              && (int v124 = std::__shared_weak_count::lock(v235)) != 0)
                            {
                              int v125 = v124;
                              int v126 = v234;
                              atomic_fetch_add_explicit(&v124->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                              sub_4636C(v124);
                              int v127 = std::__shared_weak_count::lock(v125);
                              if (v127) {
                                sub_4636C(v127);
                              }
                              else {
                                int v126 = 0;
                              }
                              std::__shared_weak_count::__release_weak(v125);
                              std::__shared_weak_count::__release_weak(v121);
                              if (v126)
                              {
LABEL_256:
                                *(_OWORD *)&v222[3] = *(_OWORD *)v199;
                                _DWORD buf[16] = v94 == 1668510820;
                                *(_OWORD *)&buf[17] = *(_OWORD *)v222;
                                *(_DWORD *)&unsigned char buf[32] = *(_DWORD *)&v222[15];
                                *(void *)buf = v205;
                                *(void *)&buf[8] = v7 + 1;
                                uint64_t v239 = 0;
                                uint64_t v240 = 0;
                                uint64_t v152 = sub_12E380((uint64_t *)buf);
                                unint64_t v197 = v153;
                                uint64_t v154 = v152;
                                uint64_t v196 = *(void *)buf;
                                int v155 = v207;
                                if (*(void *)buf == v152)
                                {
LABEL_340:
                                  std::string __p = off_6228D0;
                                  uint64_t v229 = (void *)(&def_1E50E8 + 1);
                                  uint64_t v230 = 0;
                                  LOBYTE(v231) = 0;
                                  LOBYTE(v232) = 0;
                                  goto LABEL_155;
                                }
                                uint64_t v203 = (uint64_t)(v153 + 1);
                                uint64_t v198 = v4;
                                while (1)
                                {
                                  sub_12E3FC((uint64_t **)v222, v8, v154 + 16, v205, (uint64_t)v7);
                                  unsigned int v200 = *(void **)&v222[8];
                                  if (*(void *)v222 != *(void *)&v222[8]) {
                                    break;
                                  }
LABEL_333:
                                  *(void *)uint64_t v237 = v222;
                                  sub_12EA14((void ***)v237);
                                  uint64_t v154 = *(void *)(v154 + 8);
                                  uint64_t v181 = *v197;
                                  if (v154 == *v197)
                                  {
                                    uint64_t v4 = v198;
                                    uint64_t v7 = (std::__shared_weak_count *)v210;
                                    uint64_t v8 = (void *)v211;
                                  }
                                  else
                                  {
                                    uint64_t v4 = v198;
                                    uint64_t v7 = (std::__shared_weak_count *)v210;
                                    uint64_t v8 = (void *)v211;
                                    while ((sub_12EA98(v203, v154 + 16) & 1) == 0)
                                    {
                                      uint64_t v154 = *(void *)(v154 + 8);
                                      if (v154 == v181)
                                      {
                                        uint64_t v154 = v181;
                                        break;
                                      }
                                    }
                                  }
                                  if (v154 == v196) {
                                    goto LABEL_340;
                                  }
                                }
                                long long v156 = *(void **)v222;
                                while (1)
                                {
                                  unsigned int v202 = v156;
                                  uint64_t v157 = *v156;
                                  uint64_t v158 = *(void **)(v157 + 24);
                                  unsigned int v213 = (void *)(v157 + 16);
                                  if (v158 != (void *)(v157 + 16)) {
                                    break;
                                  }
LABEL_331:
                                  long long v156 = v202 + 1;
                                  if (v202 + 1 == v200)
                                  {
                                    uint64_t v182 = sub_32A48(8);
                                    uint64_t v7 = (std::__shared_weak_count *)v210;
                                    uint64_t v8 = (void *)v211;
                                    uint64_t v4 = v198;
                                    if (*(unsigned char *)(v182 + 8))
                                    {
                                      uint64_t v183 = *(NSObject **)v182;
                                      if (*(void *)v182)
                                      {
                                        if (os_log_type_enabled(*(os_log_t *)v182, OS_LOG_TYPE_DEBUG))
                                        {
                                          *(_DWORD *)uint64_t v237 = 136315394;
                                          *(void *)&v237[4] = "RoutingManager.cpp";
                                          *(_WORD *)&v237[12] = 1024;
                                          *(_DWORD *)&v237[14] = 2793;
                                          _os_log_impl(&def_1E50E8, v183, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found an override match for primary route in the database...", v237, 0x12u);
                                        }
                                      }
                                    }
                                    memset(v237, 0, 24);
                                    sub_12E4DC((uint64_t)&__p, (uint64_t *)v211, (unsigned int ***)v222, *(uint64_t **)(v154 + 104), v210, (uint64_t *)v237);
                                    sub_12ED10((uint64_t **)v237, v211 + 504);
                                    int64x2_t v236 = v237;
                                    sub_98D9C((void ***)&v236);
                                    *(void *)uint64_t v237 = v222;
                                    sub_12EA14((void ***)v237);
                                    goto LABEL_155;
                                  }
                                }
                                while (1)
                                {
                                  if (!v155)
                                  {
LABEL_282:
                                    int v167 = 0;
                                    LOBYTE(v168) = 0;
                                    if (!v209) {
                                      goto LABEL_321;
                                    }
                                    goto LABEL_287;
                                  }
                                  uint64_t v159 = (std::__shared_weak_count *)v158[3];
                                  if (v159)
                                  {
                                    CFStringRef v160 = std::__shared_weak_count::lock(v159);
                                    uint64_t v7 = v160;
                                    if (v160)
                                    {
                                      uint64_t v161 = (uint64_t *)v158[2];
                                      atomic_fetch_add_explicit(&v160->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                      sub_4636C(v160);
                                    }
                                    else
                                    {
                                      uint64_t v161 = 0;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v161 = 0;
                                    uint64_t v7 = 0;
                                  }
                                  if (v221)
                                  {
                                    uint64_t v162 = std::__shared_weak_count::lock(v221);
                                    uint64_t v8 = &v162->__vftable;
                                    if (v162)
                                    {
                                      char v163 = (uint64_t *)v220;
                                      atomic_fetch_add_explicit(&v162->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                      sub_4636C(v162);
                                      if (!v7) {
                                        goto LABEL_275;
                                      }
                                    }
                                    else
                                    {
                                      char v163 = 0;
                                      if (!v7)
                                      {
LABEL_275:
                                        uint64_t v161 = 0;
                                        uint64_t v164 = 0;
                                        if (!v8) {
                                          goto LABEL_279;
                                        }
                                        goto LABEL_276;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    char v163 = 0;
                                    uint64_t v8 = 0;
                                    if (!v7) {
                                      goto LABEL_275;
                                    }
                                  }
                                  uint64_t v164 = std::__shared_weak_count::lock(v7);
                                  if (!v164) {
                                    uint64_t v161 = 0;
                                  }
                                  if (!v8)
                                  {
LABEL_279:
                                    BOOL v166 = v161 == 0;
                                    if (!v164) {
                                      goto LABEL_281;
                                    }
LABEL_280:
                                    sub_4636C(v164);
                                    goto LABEL_281;
                                  }
LABEL_276:
                                  uint64_t v165 = std::__shared_weak_count::lock((std::__shared_weak_count *)v8);
                                  if (!v165) {
                                    goto LABEL_279;
                                  }
                                  BOOL v166 = v161 == v163;
                                  sub_4636C(v165);
                                  if (v164) {
                                    goto LABEL_280;
                                  }
LABEL_281:
                                  if (v166) {
                                    goto LABEL_282;
                                  }
                                  sub_43F38((uint64_t *)&v214, v158 + 2, "", 2780);
                                  unsigned int v169 = *((unsigned __int16 *)v214 + 92);
                                  int v168 = (v169 >> 2) & 1;
                                  if ((v169 & 4) != 0 || !v209) {
                                    goto LABEL_319;
                                  }
                                  int v167 = 1;
LABEL_287:
                                  int v212 = v167;
                                  int v170 = (std::__shared_weak_count *)v158[5];
                                  if (v170)
                                  {
                                    std::string::size_type v171 = std::__shared_weak_count::lock(v170);
                                    uint64_t v172 = v171;
                                    if (v171)
                                    {
                                      int v173 = (uint64_t *)v158[4];
                                      atomic_fetch_add_explicit(&v171->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                      sub_4636C(v171);
                                    }
                                    else
                                    {
                                      int v173 = 0;
                                    }
                                  }
                                  else
                                  {
                                    int v173 = 0;
                                    uint64_t v172 = 0;
                                  }
                                  if (v235)
                                  {
                                    uint64_t v174 = std::__shared_weak_count::lock(v235);
                                    std::string v175 = v174;
                                    if (v174)
                                    {
                                      uint64_t v176 = v234;
                                      atomic_fetch_add_explicit(&v174->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                      sub_4636C(v174);
                                      if (!v172) {
                                        goto LABEL_302;
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v176 = 0;
                                      if (!v172)
                                      {
LABEL_302:
                                        int v173 = 0;
                                        uint64_t v177 = 0;
                                        if (!v175) {
                                          goto LABEL_305;
                                        }
                                        goto LABEL_303;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v176 = 0;
                                    std::string v175 = 0;
                                    if (!v172) {
                                      goto LABEL_302;
                                    }
                                  }
                                  uint64_t v177 = std::__shared_weak_count::lock(v172);
                                  if (!v177) {
                                    int v173 = 0;
                                  }
                                  if (!v175) {
                                    goto LABEL_305;
                                  }
LABEL_303:
                                  char v178 = std::__shared_weak_count::lock(v175);
                                  if (v178)
                                  {
                                    BOOL v179 = v173 == v176;
                                    sub_4636C(v178);
                                    goto LABEL_306;
                                  }
LABEL_305:
                                  BOOL v179 = v173 == 0;
LABEL_306:
                                  if (v177) {
                                    sub_4636C(v177);
                                  }
                                  if (v179)
                                  {
                                    LOBYTE(v168) = 0;
                                    int v155 = v207;
                                    if (!v175) {
                                      goto LABEL_311;
                                    }
LABEL_310:
                                    std::__shared_weak_count::__release_weak(v175);
                                    goto LABEL_311;
                                  }
                                  sub_43F38((uint64_t *)v237, v158 + 4, "", 2781);
                                  unsigned int v180 = *(unsigned __int16 *)(*(void *)v237 + 184);
                                  int v155 = v207;
                                  if (*(void *)&v237[8]) {
                                    sub_4636C(*(std::__shared_weak_count **)&v237[8]);
                                  }
                                  int v168 = (v180 >> 2) & 1;
                                  if (v175) {
                                    goto LABEL_310;
                                  }
LABEL_311:
                                  if (v172)
                                  {
                                    std::__shared_weak_count::__release_weak(v172);
                                    if ((v212 & 1) == 0) {
                                      goto LABEL_321;
                                    }
                                  }
                                  else if (!v212)
                                  {
                                    goto LABEL_321;
                                  }
LABEL_319:
                                  if (v215) {
                                    sub_4636C(v215);
                                  }
LABEL_321:
                                  if (v155)
                                  {
                                    if (v8) {
                                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
                                    }
                                    if (v7) {
                                      std::__shared_weak_count::__release_weak(v7);
                                    }
                                  }
                                  if (v168) {
                                    goto LABEL_333;
                                  }
                                  uint64_t v158 = (void *)v158[1];
                                  if (v158 == v213) {
                                    goto LABEL_331;
                                  }
                                }
                              }
                            }
                            else
                            {
                              std::__shared_weak_count::__release_weak(v121);
                            }
                          }
                        }
                        char v128 = v235;
                        if (v235)
                        {
                          BOOL v129 = std::__shared_weak_count::lock(v235);
                          if (v129)
                          {
                            uint64_t v130 = v129;
                            CFStringRef v131 = v234;
                            atomic_fetch_add_explicit(&v129->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                            sub_4636C(v129);
                            uint64_t v132 = std::__shared_weak_count::lock(v130);
                            if (v132)
                            {
                              sub_4636C(v132);
                              std::__shared_weak_count::__release_weak(v130);
                              if (v131)
                              {
                                int v133 = 0;
                                *(void *)uint64_t v237 = v131;
                                *(void *)&v237[8] = v128;
                                uint64_t v63 = v128;
                                goto LABEL_222;
                              }
                            }
                            else
                            {
                              std::__shared_weak_count::__release_weak(v130);
                            }
                          }
                        }
                        *(void *)uint64_t v237 = v220;
                        *(void *)&v237[8] = v63;
                        int v133 = 1;
                        if (!v63)
                        {
LABEL_223:
                          memset(v222, 0, sizeof(v222));
                          *(void *)buf = v222;
                          buf[8] = 0;
                          *(void *)BOOL v222 = operator new(0x10uLL);
                          *(void *)&v222[8] = *(void *)v222;
                          *(void *)&v222[16] = *(void *)v222 + 16;
                          uint64_t v136 = sub_14457C((uint64_t)&v222[16], v237, &v237[16], *(void **)v222);
                          *(void *)&v222[8] = v136;
                          if (*(void *)&v237[8])
                          {
                            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v237[8]);
                            uint64_t v136 = *(void **)&v222[8];
                          }
                          uint64_t v138 = *(char **)(v211 + 504);
                          int v137 = *(char **)(v211 + 512);
                          if (v137 - v138 >= 1)
                          {
                            uint64_t v139 = (v137 - v138) >> 4;
                            if (v139 <= (uint64_t)(*(void *)&v222[16] - (void)v136) >> 4)
                            {
                              if (v139 <= 0)
                              {
                                BOOL v144 = &v138[16 * v139];
                                uint64_t v8 = (void *)v211;
                                sub_13B9E4((uint64_t)v222, (uint64_t)v136, (unint64_t)v136, (char *)&v136[2 * v139]);
                                for (; v138 != v144; v136 += 2)
                                {
                                  uint64_t v146 = *(void *)v138;
                                  uint64_t v145 = *((void *)v138 + 1);
                                  if (v145) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v145 + 16), 1uLL, memory_order_relaxed);
                                  }
                                  unsigned int v147 = (std::__shared_weak_count *)v136[1];
                                  void *v136 = v146;
                                  v136[1] = v145;
                                  if (v147) {
                                    std::__shared_weak_count::__release_weak(v147);
                                  }
                                  v138 += 16;
                                }
                              }
                              else
                              {
                                *(void *)&v222[8] = sub_14457C((uint64_t)&v222[16], v138, v137, v136);
                                uint64_t v8 = (void *)v211;
                              }
                            }
                            else
                            {
                              uint64_t v140 = ((uint64_t)v136 - *(void *)v222) >> 4;
                              if ((unint64_t)(v140 + v139) >> 60) {
                                sub_60548();
                              }
                              unint64_t v141 = (uint64_t)(*(void *)&v222[16] - *(void *)v222) >> 3;
                              if (v141 <= v140 + v139) {
                                unint64_t v141 = v140 + v139;
                              }
                              if (*(void *)&v222[16] - *(void *)v222 >= 0x7FFFFFFFFFFFFFF0uLL) {
                                unint64_t v142 = 0xFFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v142 = v141;
                              }
                              *(void *)&unsigned char buf[32] = &v222[16];
                              if (v142) {
                                unint64_t v142 = (unint64_t)sub_10724(v142);
                              }
                              else {
                                uint64_t v143 = 0;
                              }
                              uint64_t v148 = (void *)(v142 + 16 * v140);
                              *(void *)buf = v142;
                              *(void *)&buf[8] = v148;
                              *(void *)&buf[24] = v142 + 16 * v143;
                              uint64_t v149 = &v148[2 * v139];
                              do
                              {
                                *uint64_t v148 = *(void *)v138;
                                uint64_t v150 = *((void *)v138 + 1);
                                v148[1] = v150;
                                if (v150) {
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v150 + 16), 1uLL, memory_order_relaxed);
                                }
                                v148 += 2;
                                v138 += 16;
                              }
                              while (v148 != v149);
                              *(void *)&_DWORD buf[16] = v149;
                              sub_13BA74((uint64_t *)v222, buf, v136);
                              sub_131CB8((uint64_t)buf);
                            }
                          }
                          *(_DWORD *)buf = 1;
                          if (v133) {
                            char v151 = 0;
                          }
                          else {
                            char v151 = 2;
                          }
                          uint8_t buf[4] = v151 | v133;
                          sub_12B0A4((uint64_t)&__p, v8, (uint64_t **)v222, v205, (uint64_t)v7, (unsigned int *)buf);
                          *(void *)buf = v222;
                          sub_98D9C((void ***)buf);
                          goto LABEL_155;
                        }
LABEL_222:
                        atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                        goto LABEL_223;
                      }
LABEL_179:
                      if (!v235 || (int v110 = std::__shared_weak_count::lock(v235)) == 0)
                      {
                        if ((v61 & 1) != 0 && v65) {
                          std::__shared_weak_count::__release_weak(v65);
                        }
                        goto LABEL_357;
                      }
                      int v111 = v110;
                      unint64_t v112 = v234;
                      atomic_fetch_add_explicit(&v110->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                      sub_4636C(v110);
                      uint64_t v113 = std::__shared_weak_count::lock(v111);
                      if (v113) {
                        sub_4636C(v113);
                      }
                      else {
                        unint64_t v112 = 0;
                      }
                      BOOL v109 = v112 == 0;
                      std::__shared_weak_count::__release_weak(v111);
                      if ((v61 & 1) == 0) {
                        goto LABEL_188;
                      }
                      goto LABEL_185;
                    }
                  }
                }
                else
                {
                  uint64_t v65 = 0;
                }
                int v107 = 0;
                goto LABEL_177;
              }
              uint64_t v193 = (os_log_t *)sub_32A48(13);
              int v194 = *v193;
              if (*v193 && os_log_type_enabled(*v193, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2733;
                _os_log_impl(&def_1E50E8, v194, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
              }
            }
            else
            {
              unint64_t v191 = (os_log_t *)sub_32A48(13);
              uint64_t v192 = *v191;
              if (*v191 && os_log_type_enabled(*v191, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2732;
                _os_log_impl(&def_1E50E8, v192, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
              }
            }
LABEL_368:
            std::string::size_type v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v195, "Precondition failure.");
          }
        }
        else if ((v87 & 1) == 0)
        {
          std::__shared_weak_count::__release_weak(v65);
        }
        uint64_t v95 = sub_32A48(8);
        uint64_t v8 = (void *)v211;
        if (*(unsigned char *)(v95 + 8))
        {
          CFStringRef v96 = *(NSObject **)v95;
          if (*(void *)v95)
          {
            if (os_log_type_enabled(*(os_log_t *)v95, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2726;
              _os_log_impl(&def_1E50E8, v96, OS_LOG_TYPE_DEBUG, "%25s:%-5d Didn't find any valid ports to override, ignorning specified override ports.", buf, 0x12u);
            }
          }
        }
        sub_12053C((uint64_t)&__p, 1920099684);
        goto LABEL_155;
      }
    }
    else
    {
      uint64_t v65 = 0;
    }
    char v87 = 1;
    goto LABEL_128;
  }
  if (v23 == 1668510820)
  {
    uint64_t v80 = sub_32A48(8);
    uint64_t v81 = sub_32A48(34);
    char v82 = 0;
    uint64_t v83 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v84 = *(void *)(v80 + 8);
    while (1)
    {
      uint64_t v85 = *(int *)&buf[4 * v83];
      char v86 = v82;
      if (((v84 & v85) != 0) != ((*(void *)(v81 + 8) & v85) != 0)) {
        break;
      }
      char v82 = 1;
      uint64_t v83 = 1;
      if (v86) {
        goto LABEL_136;
      }
    }
    if ((v84 & v85) == 0) {
      uint64_t v80 = v81;
    }
LABEL_136:
    uint64_t v92 = *(NSObject **)v80;
    if (v92 && os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2217;
      _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_INFO, "%25s:%-5d Attempt ActivateForLastInWins", buf, 0x12u);
    }
    char v93 = *(unsigned char *)(v10 + 64);
    LODWORD(__p) = a4;
    BYTE4(__p) = BYTE4(__p) & 0xFC | v93 & 3;
    sub_12B0A4((uint64_t)buf, v8, (uint64_t **)v8 + 63, v205, (uint64_t)v7, (unsigned int *)&__p);
    sub_120690(v4, (uint64_t)buf);
    goto LABEL_100;
  }
LABEL_84:
  uint64_t v54 = sub_32A48(8);
  uint64_t v55 = sub_32A48(34);
  char v56 = 0;
  uint64_t v57 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v58 = *(void *)(v54 + 8);
  while (1)
  {
    uint64_t v59 = *(int *)&buf[4 * v57];
    char v60 = v56;
    if (((v58 & v59) != 0) != ((*(void *)(v55 + 8) & v59) != 0)) {
      break;
    }
    char v56 = 1;
    uint64_t v57 = 1;
    if (v60) {
      goto LABEL_96;
    }
  }
  if ((v58 & v59) == 0) {
    uint64_t v54 = v55;
  }
LABEL_96:
  unsigned int v68 = *(NSObject **)v54;
  if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2226;
    _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_INFO, "%25s:%-5d Attempt ActivateForNormal", buf, 0x12u);
  }
  sub_12C744((uint64_t)buf, v8, v205, (uint64_t)v7);
  sub_120690(v4, (uint64_t)buf);
LABEL_100:
  sub_11A520(buf);
LABEL_101:
  int v69 = *(_DWORD *)(v4 + 8);
  if (!a4 && v69)
  {
    uint64_t v70 = sub_32A48(8);
    uint64_t v71 = sub_32A48(34);
    char v72 = 0;
    uint64_t v73 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v74 = *(void *)(v70 + 8);
    while (1)
    {
      uint64_t v75 = *(int *)&buf[4 * v73];
      char v76 = v72;
      if (((v74 & v75) != 0) != ((*(void *)(v71 + 8) & v75) != 0)) {
        break;
      }
      char v72 = 1;
      uint64_t v73 = 1;
      if (v76) {
        goto LABEL_109;
      }
    }
    if ((v74 & v75) == 0) {
      uint64_t v70 = v71;
    }
LABEL_109:
    std::string v77 = *(NSObject **)v70;
    if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2234;
      _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_INFO, "%25s:%-5d Attempt ActivateForNormal - Non cacheable ports", buf, 0x12u);
    }
    sub_12C744((uint64_t)buf, v8, v205, (uint64_t)v7);
    sub_120690(v4, (uint64_t)buf);
    sub_11A520(buf);
    int v69 = *(_DWORD *)(v4 + 8);
  }
  if (!v69 && !sub_128688(*(_DWORD *)(v4 + 12)))
  {
    uint64_t v78 = (os_log_t *)sub_32A48(8);
    int v79 = *v78;
    if (*v78)
    {
      if (os_log_type_enabled(*v78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2239;
        _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a valid replacement route.", buf, 0x12u);
      }
    }
  }
  sub_12B050(v219[4]);
  sub_10E118(v219[1]);
}

void sub_143B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,char a34,std::__shared_weak_count *a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  __cxa_free_exception(v50);
  int v53 = *(std::__shared_weak_count **)(v51 - 240);
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  if (a35) {
    std::__shared_weak_count::__release_weak(a35);
  }
  sub_12B050(a32);
  sub_10E118(a29);
  sub_11A520(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_143D84(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 400) && *(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  sub_7D72C(a1 + 320);
  sub_7D72C(a1 + 280);
  sub_7D72C(a1 + 240);
  uint64_t v3 = (void **)(a1 + 216);
  sub_4EDB8(&v3);
  uint64_t v3 = (void **)(a1 + 192);
  sub_4EDB8(&v3);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  sub_463E0(*(void **)(a1 + 120));
  sub_463E0(*(void **)(a1 + 96));
  sub_12B050(*(void **)(a1 + 72));
  sub_10E118(*(void **)(a1 + 48));
  sub_10E118(*(void **)(a1 + 24));
  return a1;
}

void sub_143E38(uint64_t ***a1, void *a2)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t **)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t **)(a1 + 1);
  a1[4] = 0;
  a1[3] = (uint64_t **)(a1 + 4);
  uint64_t v5 = (uint64_t **)(a1 + 3);
  a1[5] = 0;
  sub_14489C((uint64_t)&v28, a2);
  sub_10E118(a1[1]);
  uint64_t v6 = v29;
  *a1 = v28;
  a1[1] = (uint64_t **)v6;
  uint64_t v7 = v30;
  a1[2] = (uint64_t **)v30;
  if (v7)
  {
    v6[2] = (uint64_t)v4;
    unsigned int v28 = &v29;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    *a1 = v4;
  }
  sub_10E118(v6);
  uint64_t v8 = (void *)a2[3];
  int v23 = a2 + 4;
  if (v8 != a2 + 4)
  {
    unsigned int v9 = *v5;
    do
    {
      sub_14489C((uint64_t)&v32, v8 + 5);
      unsigned int v24 = *((_DWORD *)v8 + 8);
      uint64_t v10 = v33;
      uint64_t v25 = v32;
      BOOL v26 = v33;
      uint64_t v27 = v34;
      if (v34)
      {
        v33[2] = &v26;
        BOOL v32 = (uint64_t *)&v33;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v25 = (uint64_t *)&v26;
      }
      sub_10E118(v10);
      LODWORD(v28) = v24;
      unsigned int v11 = v25;
      uint64_t v29 = v25;
      uint64_t v30 = v26;
      uint64_t v31 = v27;
      if (v27)
      {
        v26[2] = &v30;
        BOOL v26 = 0;
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v29 = (uint64_t *)&v30;
        unsigned int v11 = (uint64_t *)&v30;
      }
      BOOL v12 = sub_1283A0(v5, v9, &v32, &v35, v24);
      uint64_t v13 = (void *)*v12;
      if (!*v12)
      {
        uint64_t v14 = (uint64_t **)v12;
        uint64_t v15 = operator new(0x40uLL);
        uint64_t v13 = v15;
        char v16 = v30;
        uint64_t v17 = v31;
        v15[6] = v30;
        uint64_t v18 = (char *)(v15 + 6);
        *((_DWORD *)v15 + 8) = v24;
        v15[5] = v11;
        v15[7] = v17;
        if (v17)
        {
          v16[2] = v18;
          uint64_t v29 = (uint64_t *)&v30;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
        }
        else
        {
          v15[5] = v18;
        }
        sub_46CA8(v5, (uint64_t)v32, v14, v15);
      }
      uint64_t v19 = (uint64_t *)v13[1];
      if (v19)
      {
        do
        {
          unsigned int v9 = v19;
          uint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unsigned int v9 = (uint64_t *)v13[2];
          BOOL v20 = *v9 == (void)v13;
          uint64_t v13 = v9;
        }
        while (!v20);
      }
      sub_10E118(v30);
      sub_10E118(v26);
      uint64_t v21 = (void *)v8[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v8[2];
          BOOL v20 = *v22 == (void)v8;
          uint64_t v8 = v22;
        }
        while (!v20);
      }
      uint64_t v8 = v22;
    }
    while (v22 != v23);
  }
}

void sub_144088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1440B8(uint64_t **a1, uint64_t a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  sub_14460C(&v27, *(void **)a2);
  uint64_t v6 = v27;
  if (v27 != v28)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (((*(uint64_t (**)(uint64_t *))(*v6[4] + 152))(v6[4]) & 1) == 0)
      {
        uint64_t v21 = (os_log_t *)sub_32A48(13);
        uint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v30 = "RoutingManager.cpp";
          __int16 v31 = 1024;
          int v32 = 2703;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"one of the specified ports is not connected.\"", buf, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "one of the specified ports is not connected.");
LABEL_42:
      }
      if (((*(uint64_t (**)(uint64_t *))(*v6[4] + 160))(v6[4]) & 1) == 0)
      {
        uint64_t v18 = (os_log_t *)sub_32A48(13);
        uint64_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v30 = "RoutingManager.cpp";
          __int16 v31 = 1024;
          int v32 = 2704;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"one of the specified ports is not routable.\"", buf, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "one of the specified ports is not routable.");
        goto LABEL_42;
      }
      if (a3 || !*(unsigned char *)(a2 + 8))
      {
        if (a3 == 1 && *(unsigned char *)(a2 + 9) && (v6[4][23] & 1) == 0)
        {
          if (v7)
          {
            BOOL v12 = std::__shared_weak_count::lock(v7);
            if (v12)
            {
              uint64_t v10 = v12;
              atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_4636C(v12);
              uint64_t v13 = std::__shared_weak_count::lock(v10);
              if (v13)
              {
                sub_4636C(v13);
                std::__shared_weak_count::__release_weak(v10);
                if (v8)
                {
                  uint64_t v25 = (os_log_t *)sub_32A48(13);
                  BOOL v26 = *v25;
                  if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    uint64_t v30 = "RoutingManager.cpp";
                    __int16 v31 = 1024;
                    int v32 = 2713;
                    _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"more than one output specified in inPortsForOverride.\"", buf, 0x12u);
                  }
                  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(exception, "more than one output specified in inPortsForOverride.");
                  goto LABEL_42;
                }
                goto LABEL_23;
              }
LABEL_22:
              std::__shared_weak_count::__release_weak(v10);
            }
          }
LABEL_23:
          uint64_t v8 = v6[4];
          uint64_t v14 = (std::__shared_weak_count *)v6[5];
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          *a1 = v8;
          a1[1] = (uint64_t *)v14;
          if (v7) {
            std::__shared_weak_count::__release_weak(v7);
          }
          goto LABEL_27;
        }
      }
      else if (v6[4][23])
      {
        if (v7)
        {
          unsigned int v9 = std::__shared_weak_count::lock(v7);
          if (v9)
          {
            uint64_t v10 = v9;
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_4636C(v9);
            unsigned int v11 = std::__shared_weak_count::lock(v10);
            if (!v11) {
              goto LABEL_22;
            }
            sub_4636C(v11);
            std::__shared_weak_count::__release_weak(v10);
            if (v8)
            {
              int v23 = (os_log_t *)sub_32A48(13);
              unsigned int v24 = *v23;
              if (*v23)
              {
                if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  uint64_t v30 = "RoutingManager.cpp";
                  __int16 v31 = 1024;
                  int v32 = 2708;
                  _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"more than one input specified in inPortsForOverride.\"", buf, 0x12u);
                }
              }
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "more than one input specified in inPortsForOverride.");
              goto LABEL_42;
            }
          }
        }
        goto LABEL_23;
      }
      uint64_t v14 = v7;
LABEL_27:
      uint64_t v15 = v6[1];
      if (v15)
      {
        do
        {
          char v16 = (uint64_t **)v15;
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          char v16 = (uint64_t **)v6[2];
          BOOL v17 = *v16 == (uint64_t *)v6;
          uint64_t v6 = v16;
        }
        while (!v17);
      }
      uint64_t v7 = v14;
      uint64_t v6 = v16;
    }
    while (v16 != v28);
  }
  sub_144844(v28[0]);
}

void sub_144524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  __cxa_free_exception(v12);
  sub_144844(a11);
  uint64_t v14 = *(std::__shared_weak_count **)(v11 + 8);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(a1);
}

void *sub_14457C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unsigned int v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_135BB0((uint64_t)v7);
  return v4;
}

void sub_14460C(uint64_t ***a1, void *a2)
{
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  int v23 = &v24;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    BOOL v20 = 0;
    *a1 = &v24;
    a1[1] = 0;
    uint64_t v22 = (uint64_t **)(a1 + 1);
    a1[2] = 0;
LABEL_40:
    *a1 = v22;
    goto LABEL_41;
  }
  do
  {
    uint64_t v5 = (std::__shared_weak_count *)v4[5];
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = v6;
        unint64_t v8 = v4[4];
        if (v8)
        {
          unsigned int v9 = v24;
          uint64_t v10 = &v24;
          if (v23 == &v24) {
            goto LABEL_11;
          }
          uint64_t v11 = v24;
          BOOL v12 = &v24;
          if (v24)
          {
            do
            {
              uint64_t v10 = (uint64_t **)v11;
              uint64_t v11 = (uint64_t *)v11[1];
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v10 = (uint64_t **)v12[2];
              BOOL v13 = *v10 == (uint64_t *)v12;
              BOOL v12 = v10;
            }
            while (v13);
          }
          if ((unint64_t)v10[4] < v8)
          {
LABEL_11:
            if (v24) {
              uint64_t v14 = v10;
            }
            else {
              uint64_t v14 = &v24;
            }
            if (v24) {
              uint64_t v15 = v10 + 1;
            }
            else {
              uint64_t v15 = &v24;
            }
          }
          else
          {
            uint64_t v14 = &v24;
            uint64_t v15 = &v24;
            if (v24)
            {
              uint64_t v15 = &v24;
              while (1)
              {
                while (1)
                {
                  uint64_t v14 = (uint64_t **)v9;
                  unint64_t v19 = v9[4];
                  if (v8 >= v19) {
                    break;
                  }
                  unsigned int v9 = *v14;
                  uint64_t v15 = v14;
                  if (!*v14) {
                    goto LABEL_18;
                  }
                }
                if (v19 >= v8) {
                  break;
                }
                uint64_t v15 = v14 + 1;
                unsigned int v9 = v14[1];
                if (!v9) {
                  goto LABEL_18;
                }
              }
            }
          }
          if (!*v15)
          {
LABEL_18:
            char v16 = (uint64_t *)operator new(0x30uLL);
            v16[4] = v8;
            v16[5] = (uint64_t)v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            *char v16 = 0;
            v16[1] = 0;
            v16[2] = (uint64_t)v14;
            *uint64_t v15 = v16;
            if (*v23)
            {
              int v23 = (uint64_t **)*v23;
              char v16 = *v15;
            }
            sub_46D00(v24, v16);
            uint64_t v25 = (uint64_t **)((char *)v25 + 1);
          }
        }
        sub_4636C(v7);
      }
    }
    BOOL v17 = (void *)v4[1];
    if (v17)
    {
      do
      {
        uint64_t v18 = v17;
        BOOL v17 = (void *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v18 = (void *)v4[2];
        BOOL v13 = *v18 == (void)v4;
        uint64_t v4 = v18;
      }
      while (!v13);
    }
    uint64_t v4 = v18;
  }
  while (v18 != v3);
  BOOL v20 = v24;
  uint64_t v21 = v25;
  *a1 = v23;
  a1[1] = (uint64_t **)v20;
  uint64_t v22 = (uint64_t **)(a1 + 1);
  a1[2] = v21;
  if (!v21) {
    goto LABEL_40;
  }
  v20[2] = (uint64_t)v22;
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  BOOL v20 = 0;
LABEL_41:
  sub_144844(v20);
}

void sub_144824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v11) {
    sub_4636C(v11);
  }
  sub_144844(a11);
  _Unwind_Resume(a1);
}

void sub_144844(void *a1)
{
  if (a1)
  {
    sub_144844(*a1);
    sub_144844(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      sub_4636C(v2);
    }
    operator delete(a1);
  }
}

void sub_14489C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = sub_10FBF0();
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  strcpy(v17, "cwdv");
  v17[8] = 0;
  int v18 = 3;
  v20[0] = 0;
  v20[1] = 0;
  unint64_t v19 = v20;
  int v21 = 44739242;
  CFTypeRef cf = 0;
  unsigned int v24 = off_622A88;
  BOOL v26 = &v24;
  sub_10EA24(v23, v4, &__p, (uint64_t)&v24);
  sub_6AFD4(&v24);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v20[0]);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      for (uint64_t i = (uint64_t *)v23[1]; i != v23; uint64_t i = (uint64_t *)i[1])
      {
        sub_549A4((uint64_t *)&v24, i + 2, "", 135);
        unsigned int v9 = (__CFString *)v24[31];
        std::string __p = v9;
        LOBYTE(v15) = *((unsigned char *)v24 + 256);
        if ((_BYTE)v15) {
          BOOL v10 = v9 == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10) {
          CFRetain(v9);
        }
        CFComparisonResult v11 = CFStringCompare(v9, (CFStringRef)v6[4], 0);
        sub_72924((uint64_t)&__p);
        if (v25) {
          sub_4636C(v25);
        }
        if (v11 == kCFCompareEqualTo)
        {
          if (i != v23) {
            sub_144B34((uint64_t **)a1, (unint64_t *)i + 2, i + 2);
          }
          break;
        }
      }
      BOOL v12 = (void *)v6[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v6[2];
          BOOL v10 = *v13 == (void)v6;
          uint64_t v6 = v13;
        }
        while (!v10);
      }
      uint64_t v6 = v13;
    }
    while (v13 != v5);
  }
  sub_8108(v23);
}

void sub_144AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_144B34(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  double result = sub_E0490((uint64_t)a1, &v10, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v8 = a3[1];
    v7[4] = *a3;
    void v7[5] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v10;
    return sub_46CA8(a1, v9, v6, v7);
  }
  return result;
}

uint64_t sub_144BD4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_139C70(a1 + 16, (void *)(a2 + 16));
  sub_131E5C((uint64_t *)(a1 + 40), a2 + 40);
  sub_139BC4(a1 + 64, (void *)(a2 + 64));
  sub_46A4C((uint64_t *)(a1 + 88), a2 + 88);
  sub_46A4C((uint64_t *)(a1 + 112), a2 + 112);
  uint64_t v4 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 160), *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v5;
  }
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  sub_7ECB4((void *)(a1 + 192), (const void ***)(a2 + 192));
  uint64_t v6 = *(void *)(a2 + 360);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(void *)(a1 + 360) = v6;
  sub_CAE80((unsigned char *)(a1 + 376), (long long *)(a2 + 376));
  return a1;
}

void sub_144CC8(_Unwind_Exception *a1)
{
  sub_463E0(v1[15]);
  sub_463E0(v1[12]);
  sub_12CE80(v2);
  sub_10E118(v1[3]);
  _Unwind_Resume(a1);
}

void sub_144D2C()
{
  sub_10E118(*(void **)(v0 + 48));
  JUMPOUT(0x144D1CLL);
}

void sub_144D3C()
{
}

uint64_t *sub_144D44(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  double result = sub_E0490((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v8 = v9;
    return sub_46CA8(a1, v8, v6, v7);
  }
  return result;
}

void sub_144DD8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v16 = 0;
    BOOL v17 = 0;
    v26[0] = off_622B60;
    v26[1] = &v16;
    v26[3] = v26;
    char v5 = sub_145024((uint64_t *)(i + 16), (uint64_t)v26);
    sub_145380(v26);
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = (os_log_t *)sub_32A48(8);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        sub_136B74(v14, i + 16);
        int v8 = v15;
        uint64_t v9 = (void **)v14[0];
        sub_136B74(__p, (uint64_t)&v16);
        uint64_t v10 = v14;
        if (v8 < 0) {
          uint64_t v10 = v9;
        }
        CFComparisonResult v11 = __p;
        if (v13 < 0) {
          CFComparisonResult v11 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        unint64_t v19 = "RoutingManager.cpp";
        __int16 v20 = 1024;
        int v21 = 284;
        __int16 v22 = 2080;
        int v23 = v10;
        __int16 v24 = 2080;
        uint64_t v25 = v11;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disallowing port %s for colistening, partner port is %s", buf, 0x26u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
      }
      sub_144B34((uint64_t **)a1, (unint64_t *)(i + 16), (uint64_t *)(i + 16));
    }
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_144FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  sub_10E118(*a10);
  _Unwind_Resume(a1);
}

uint64_t sub_145024(uint64_t *a1, uint64_t a2)
{
  sub_549A4(&v24, a1, "", 214);
  int v4 = *(_DWORD *)(v24 + 144);
  uint64_t v5 = 1;
  if (v4 > 1886152040)
  {
    if (v4 != 1886152041)
    {
      int v6 = 1886216820;
      goto LABEL_6;
    }
LABEL_36:
    uint64_t v5 = 0;
    goto LABEL_38;
  }
  if (v4 == 1885892674)
  {
    sub_549A4(&v26, a1, "", 210);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 112))(v26);
    if (v27) {
      sub_4636C(v27);
    }
    if ((v14 & 0xFF00000000) == 0 || v14 != 1701869160)
    {
      sub_145404(&v26, a1, 1885892706);
      if (v27)
      {
        sub_549A4(&v22, &v26, "", 241);
        uint64_t v28 = 0x676C6F6273687370;
        int v29 = 0;
        uint64_t v16 = sub_99A40(v22);
        *((void *)&v19 + 1) = v17;
        *(void *)&long long v19 = v16;
        uint64_t v18 = v19 >> 32;
        uint64_t v5 = 1;
        if ((v18 & 0xFF00000000) != 0 && v18)
        {
          uint64_t v20 = *(void *)(a2 + 24);
          if (!v20) {
            sub_56964();
          }
          uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v26);
        }
        if (v23) {
          sub_4636C(v23);
        }
        goto LABEL_34;
      }
LABEL_37:
      uint64_t v5 = 1;
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  int v6 = 1885892706;
LABEL_6:
  if (v4 != v6) {
    goto LABEL_38;
  }
  uint64_t v26 = 0x676C6F6273687370;
  LODWORD(v27) = 0;
  uint64_t v7 = sub_99A40(v24);
  *((void *)&v9 + 1) = v8;
  *(void *)&long long v9 = v7;
  if (((v9 >> 32) & 0xFF00000000) != 0 && HIDWORD(v7) != 0) {
    goto LABEL_38;
  }
  sub_549A4(&v26, a1, "", 210);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 112))(v26);
  if (v27) {
    sub_4636C(v27);
  }
  if ((v11 & 0xFF00000000) != 0 && v11 == 1701869160) {
    goto LABEL_37;
  }
  sub_145404(&v26, a1, 1885892674);
  if (!v27) {
    goto LABEL_37;
  }
  uint64_t v13 = *(void *)(a2 + 24);
  if (!v13) {
    sub_56964();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v26);
LABEL_34:
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_38:
  if (v25) {
    sub_4636C(v25);
  }
  return v5;
}

void sub_145318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    sub_4636C(a10);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_145380(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_145404(uint64_t *a1, uint64_t *a2, int a3)
{
  sub_549A4(&v11, a2, "", 184);
  sub_10653C(v13, v11);
  sub_8E4B8(&v14, v13);
  sub_8108(v13);
  if (v12) {
    sub_4636C(v12);
  }
  uint64_t v5 = v15;
  if (v15 == &v14) {
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v7 = v5[2];
    int v6 = (std::__shared_weak_count *)v5[3];
    if (!v6) {
      break;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    int v8 = *(_DWORD *)(v7 + 144);
    sub_4636C(v6);
    if (v8 == a3) {
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v5 = (uint64_t *)v5[1];
    if (v5 == &v14) {
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)(v7 + 144) != a3) {
    goto LABEL_8;
  }
LABEL_10:
  if (v5 == &v14)
  {
LABEL_13:
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = v5[2];
  long long v9 = (std::__shared_weak_count *)v5[3];
  if (!v9)
  {
LABEL_14:
    *a1 = v10;
    a1[1] = 0;
    goto LABEL_15;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  *a1 = v10;
  a1[1] = (uint64_t)v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_4636C(v9);
LABEL_15:
  sub_B8E4(&v14);
}

void sub_145518(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  sub_8108((uint64_t *)va);
  if (a3) {
    sub_4636C(a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_145540(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)v2[1];
  void *v2 = v4;
  v2[1] = v3;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return 0;
}

uint64_t sub_145588(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_622B60;
  a2[1] = v2;
  return result;
}

void *sub_1455AC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_622B60;
  result[1] = v3;
  return result;
}

void sub_1455F4()
{
}

uint64_t sub_14560C(uint64_t a1)
{
  sub_3B7EC();
  uint64_t v7 = &qword_64CC40;
  char v8 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v10 = "RoutingManager.cpp";
      __int16 v11 = 1024;
      int v12 = 2024;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  sub_3BCAC(&v7);
  return v2;
}

void sub_145784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1457AC(uint64_t a1)
{
  sub_3B7EC();
  uint64_t v7 = &qword_64CC40;
  char v8 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v10 = "RoutingManager.cpp";
      __int16 v11 = 1024;
      int v12 = 2033;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  uint64_t v2 = *(unsigned int *)(a1 + 36);
  sub_3BCAC(&v7);
  return v2;
}

void sub_145924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

void sub_14594C(uint64_t *a1, int a2)
{
  strcpy(v71, "cwdv");
  v71[8] = 0;
  int v72 = 3;
  v74[0] = 0;
  v74[1] = 0;
  uint64_t v73 = v74;
  int v75 = 44739242;
  CFTypeRef cf = 0;
  uint64_t v4 = (char *)operator new(4uLL);
  *(_DWORD *)uint64_t v4 = 1886152041;
  std::string __p = v4;
  int v69 = v4 + 4;
  uint64_t v70 = v4 + 4;
  int v6 = sub_46BF4(2uLL);
  uint64_t v7 = (char *)__p;
  char v8 = v69;
  v6[1] = 1886152047;
  long long v9 = (char *)(v6 + 1);
  uint64_t v10 = (char *)(v6 + 2);
  while (v8 != v7)
  {
    int v11 = *((_DWORD *)v8 - 1);
    v8 -= 4;
    *((_DWORD *)v9 - 1) = v11;
    v9 -= 4;
  }
  std::string __p = v9;
  int v69 = (char *)(v6 + 2);
  uint64_t v70 = &v6[v5];
  if (v7) {
    operator delete(v7);
  }
  int v69 = v10;
  uint64_t v12 = sub_10FBF0();
  *(void *)buf = off_622A88;
  char v82 = buf;
  sub_10E1E8(&v65, v12, &__p, (uint64_t)buf);
  sub_6AFD4(buf);
  if (!v67) {
    goto LABEL_81;
  }
  if (!a2)
  {
    uint64_t v25 = sub_32A48(8);
    uint64_t v26 = sub_32A48(34);
    char v27 = 0;
    uint64_t v28 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = (int)buf[v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1;
      if (v31) {
        goto LABEL_43;
      }
    }
    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_43:
    BOOL v39 = *(NSObject **)v25;
    if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3914;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Making BTLE Ports routable (Setting:Always)", (uint8_t *)buf, 0x12u);
    }
    BOOL v40 = (_DWORD *)sub_10FBF0();
    uint64_t v41 = 1;
LABEL_53:
    sub_112F90(v40, (uint64_t)&v65, v41, 0);
    goto LABEL_81;
  }
  if (a2 == 1)
  {
    uint64_t v32 = sub_32A48(8);
    uint64_t v33 = sub_32A48(34);
    char v34 = 0;
    uint64_t v35 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v36 = *(void *)(v32 + 8);
    while (1)
    {
      uint64_t v37 = (int)buf[v35];
      char v38 = v34;
      if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
        break;
      }
      char v34 = 1;
      uint64_t v35 = 1;
      if (v38) {
        goto LABEL_49;
      }
    }
    if ((v36 & v37) == 0) {
      uint64_t v32 = v33;
    }
LABEL_49:
    int v42 = *(NSObject **)v32;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3875;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Making BTLE Ports unroutable (Setting:Never)", (uint8_t *)buf, 0x12u);
    }
    BOOL v40 = (_DWORD *)sub_10FBF0();
    uint64_t v41 = 0;
    goto LABEL_53;
  }
  if (a2 != 2) {
    goto LABEL_81;
  }
  sub_13A850((uint64_t)v63, *a1);
  memset(buf, 0, sizeof(buf));
  strcpy((char *)&v82, "cwdv");
  char v83 = 0;
  int v84 = 3;
  v86[0] = 0;
  v86[1] = 0;
  uint64_t v85 = v86;
  CFTypeRef v88 = 0;
  int v87 = 44739104;
  uint64_t v13 = sub_10FBF0();
  *(void *)int v79 = off_622A88;
  uint64_t v80 = v79;
  sub_10E1E8(v61, v13, buf, (uint64_t)v79);
  sub_6AFD4(v79);
  *(void *)int v79 = v63;
  sub_146188(v61[1], v61, v62, (uint64_t *)v79);
  if (!v62)
  {
    uint64_t v43 = sub_32A48(8);
    uint64_t v44 = sub_32A48(34);
    char v45 = 0;
    uint64_t v46 = 0;
    *(void *)int v79 = 0x100000002;
    uint64_t v47 = *(void *)(v43 + 8);
    while (1)
    {
      uint64_t v48 = (int)v79[v46];
      char v49 = v45;
      if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
        break;
      }
      char v45 = 1;
      uint64_t v46 = 1;
      if (v49) {
        goto LABEL_64;
      }
    }
    if ((v47 & v48) == 0) {
      uint64_t v43 = v44;
    }
LABEL_64:
    uint64_t v57 = *(NSObject **)v43;
    if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      v79[0] = 136315394;
      *(void *)&v79[1] = "RoutingManager.cpp";
      LOWORD(v79[3]) = 1024;
      *(_DWORD *)((char *)&v79[3] + 2) = 3907;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Making BTLE Ports routable (Setting:Automatic)", (uint8_t *)v79, 0x12u);
    }
    uint64_t v58 = (_DWORD *)sub_10FBF0();
    sub_112F90(v58, (uint64_t)&v65, 1, 0);
    goto LABEL_76;
  }
  uint64_t v15 = *(void *)(v61[0] + 16);
  uint64_t v14 = *(std::__shared_weak_count **)(v61[0] + 24);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v66;
  if (v66 == &v65) {
    goto LABEL_74;
  }
  while (1)
  {
    uint64_t v17 = (std::__shared_weak_count *)v16[3];
    if (v17)
    {
      uint64_t v18 = v16[2];
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v19 = std::__shared_weak_count::lock(v17);
      uint64_t v20 = v19;
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        *(void *)int v79 = v18;
        *(void *)&v79[2] = v19;
        sub_4636C(v19);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    *(void *)int v79 = 0;
    *(void *)&v79[2] = 0;
LABEL_19:
    unint64_t v21 = sub_13BCA4((uint64_t)v63, (uint64_t *)v79);
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    if (v14)
    {
      uint64_t v22 = std::__shared_weak_count::lock(v14);
      int v23 = v22;
      if (v22)
      {
        atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v77 = v15;
        uint64_t v78 = v22;
        sub_4636C(v22);
      }
      else
      {
        uint64_t v77 = 0;
        uint64_t v78 = 0;
      }
    }
    else
    {
      int v23 = 0;
    }
    unint64_t v24 = sub_13BCA4((uint64_t)v63, &v77);
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v21 > v24) {
      break;
    }
    uint64_t v16 = (uint64_t *)v16[1];
    if (v16 == &v65) {
      goto LABEL_74;
    }
  }
  uint64_t v50 = sub_32A48(8);
  uint64_t v51 = sub_32A48(34);
  char v52 = 0;
  uint64_t v53 = 0;
  *(void *)int v79 = 0x100000002;
  uint64_t v54 = *(void *)(v50 + 8);
  while (1)
  {
    uint64_t v55 = (int)v79[v53];
    char v56 = v52;
    if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
      break;
    }
    char v52 = 1;
    uint64_t v53 = 1;
    if (v56) {
      goto LABEL_70;
    }
  }
  if ((v54 & v55) == 0) {
    uint64_t v50 = v51;
  }
LABEL_70:
  uint64_t v59 = *(NSObject **)v50;
  if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    v79[0] = 136315394;
    *(void *)&v79[1] = "RoutingManager.cpp";
    LOWORD(v79[3]) = 1024;
    *(_DWORD *)((char *)&v79[3] + 2) = 3901;
    _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Making BTLE Ports routable (Setting:Automatic)", (uint8_t *)v79, 0x12u);
  }
  char v60 = (_DWORD *)sub_10FBF0();
  sub_112F90(v60, (uint64_t)&v65, 1, 0);
LABEL_74:
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  sub_8108(v61);
  if (v88) {
    CFRelease(v88);
  }
  sub_463E0(v86[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[2] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  sub_463E0(v64);
LABEL_81:
  sub_8108(&v65);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v74[0]);
  if (__p)
  {
    int v69 = (char *)__p;
    operator delete(__p);
  }
}

void sub_14608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  sub_8108(&a9);
  sub_470A4(v32 - 192);
  sub_463E0(a13);
  sub_8108(&a15);
  sub_470A4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t *sub_146188(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (uint64_t **)a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      char v8 = (uint64_t *)*a2;
      long long v9 = *(std::__shared_weak_count **)(*a2 + 24);
      v51[0] = *(void *)(*a2 + 16);
      v51[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
      v50[0] = *(void *)(a1 + 16);
      v50[1] = (uint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v11 = sub_146578(a4, v51, v50);
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v11)
      {
        uint64_t v12 = *v8;
        *(void *)(v12 + 8) = v8[1];
        *(void *)v8[1] = v12;
        uint64_t v13 = *v4;
        v13[1] = (uint64_t)v8;
        uint64_t *v8 = (uint64_t)v13;
        char *v4 = v8;
        v8[1] = (uint64_t)v4;
        return v8;
      }
    }
    else
    {
      unint64_t v15 = a3 >> 1;
      unint64_t v16 = (a3 >> 1) + 1;
      uint64_t v17 = a1;
      do
      {
        uint64_t v17 = *(void *)(v17 + 8);
        --v16;
      }
      while (v16 > 1);
      uint64_t v18 = (uint64_t **)sub_146188(a1, v17, a3 >> 1, a4);
      uint64_t v4 = (uint64_t **)sub_146188(v17, a2, a3 - v15, a4);
      long long v19 = (std::__shared_weak_count *)v4[3];
      v49[0] = (uint64_t)v4[2];
      v49[1] = (uint64_t)v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = (std::__shared_weak_count *)v18[3];
      v48[0] = (uint64_t)v18[2];
      v48[1] = (uint64_t)v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v21 = sub_146578(a4, v49, v48);
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v21)
      {
        for (uint64_t i = v4[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          int v23 = (std::__shared_weak_count *)i[3];
          v47[0] = i[2];
          v47[1] = (uint64_t)v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v24 = (std::__shared_weak_count *)v18[3];
          v46[0] = (uint64_t)v18[2];
          v46[1] = (uint64_t)v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v25 = sub_146578(a4, v47, v46);
          if (v24) {
            std::__shared_weak_count::__release_weak(v24);
          }
          if (v23)
          {
            std::__shared_weak_count::__release_weak(v23);
            if (!v25) {
              goto LABEL_38;
            }
          }
          else if (!v25)
          {
            goto LABEL_38;
          }
        }
        uint64_t i = a2;
LABEL_38:
        uint64_t v26 = *i;
        char v27 = *v4;
        v27[1] = *(void *)(*i + 8);
        **(void **)(v26 + 8) = v27;
        uint64_t v28 = *v18;
        uint64_t v29 = v18[1];
        v28[1] = (uint64_t)v4;
        char *v4 = v28;
        *uint64_t v18 = (uint64_t *)v26;
        *(void *)(v26 + 8) = v18;
      }
      else
      {
        uint64_t v29 = v18[1];
        uint64_t i = (uint64_t *)v4;
        uint64_t v4 = v18;
      }
      if (v29 != i && i != a2)
      {
        uint64_t v30 = i;
        do
        {
          char v31 = (std::__shared_weak_count *)i[3];
          v45[0] = i[2];
          v45[1] = (uint64_t)v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v32 = (std::__shared_weak_count *)v29[3];
          v44[0] = v29[2];
          v44[1] = (uint64_t)v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v33 = sub_146578(a4, v45, v44);
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
          if (v31) {
            std::__shared_weak_count::__release_weak(v31);
          }
          if (v33)
          {
            for (uint64_t j = (uint64_t *)i[1]; j != a2; uint64_t j = (uint64_t *)j[1])
            {
              uint64_t v35 = (std::__shared_weak_count *)j[3];
              v43[0] = j[2];
              v43[1] = (uint64_t)v35;
              if (v35) {
                atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v36 = (std::__shared_weak_count *)v29[3];
              v42[0] = v29[2];
              v42[1] = (uint64_t)v36;
              if (v36) {
                atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              BOOL v37 = sub_146578(a4, v43, v42);
              if (v36) {
                std::__shared_weak_count::__release_weak(v36);
              }
              if (v35)
              {
                std::__shared_weak_count::__release_weak(v35);
                if (!v37) {
                  goto LABEL_67;
                }
              }
              else if (!v37)
              {
                goto LABEL_67;
              }
            }
            uint64_t j = a2;
LABEL_67:
            uint64_t v38 = *j;
            uint64_t v39 = *i;
            *(void *)(v39 + 8) = *(void *)(*j + 8);
            **(void **)(v38 + 8) = v39;
            if (v30 == i) {
              uint64_t v30 = j;
            }
            uint64_t v41 = *v29;
            BOOL v40 = (uint64_t *)v29[1];
            *(void *)(v41 + 8) = i;
            *uint64_t i = v41;
            uint64_t *v29 = v38;
            *(void *)(v38 + 8) = v29;
            uint64_t v29 = v40;
            uint64_t i = j;
          }
          else
          {
            uint64_t v29 = (uint64_t *)v29[1];
          }
        }
        while (v29 != v30 && i != a2);
      }
    }
  }
  return (uint64_t *)v4;
}

void sub_14652C(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_146578(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    char v8 = std::__shared_weak_count::lock(v6);
    long long v9 = v8;
    if (v8)
    {
      uint64_t v10 = *a2;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v21 = v10;
      uint64_t v22 = v8;
      sub_4636C(v8);
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
  }
  else
  {
    long long v9 = 0;
  }
  unint64_t v11 = sub_13BCA4(v5, &v21);
  uint64_t v12 = *a1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    unint64_t v15 = v14;
    if (v14)
    {
      uint64_t v16 = *a3;
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v16;
      uint64_t v20 = v14;
      sub_4636C(v14);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  unint64_t v17 = sub_13BCA4(v12, &v19);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  return v11 < v17;
}

void sub_146688(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1466B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      int v6 = operator new(0x20uLL);
      *int v6 = 0;
      v6[1] = 0;
      sub_106070(v6 + 2, (uint64_t *)(v5 + 16));
      uint64_t v7 = *a1;
      *int v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_14673C(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void *sub_146750(void *result, uint64_t *a2, void *a3, void *a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    double result = operator new(0x20uLL);
    char v8 = result;
    *double result = 0;
    result[1] = 0;
    uint64_t v9 = a3[3];
    result[2] = a3[2];
    result[3] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (void *)a3[1];
    if (v10 == a4)
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 1;
      uint64_t v12 = result;
      do
      {
        double result = operator new(0x20uLL);
        *double result = v12;
        result[1] = 0;
        uint64_t v13 = v10[3];
        result[2] = v10[2];
        result[3] = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
        }
        v12[1] = result;
        ++v11;
        uint64_t v10 = (void *)v10[1];
        uint64_t v12 = result;
      }
      while (v10 != a4);
    }
    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v8;
    void *v8 = v14;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v11;
  }
  return result;
}

void sub_146840(void *a1)
{
  __cxa_begin_catch(a1);
  while (1)
  {
    uint64_t v2 = (void *)*v1;
    uint64_t v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v1);
    uint64_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }
}

void sub_14686C(_Unwind_Exception *a1)
{
}

void *sub_146880(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      int v6 = (std::__shared_weak_count *)a3[1];
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        char v8 = v7;
        if (v7)
        {
          uint64_t v9 = *a3;
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v7);
        }
        else
        {
          uint64_t v9 = 0;
        }
      }
      else
      {
        uint64_t v9 = 0;
        char v8 = 0;
      }
      uint64_t v10 = (std::__shared_weak_count *)v3[5];
      if (v10)
      {
        uint64_t v11 = std::__shared_weak_count::lock(v10);
        if (v11) {
          uint64_t v12 = v3[4];
        }
        else {
          uint64_t v12 = 0;
        }
        if (!v8) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        if (!v8) {
          goto LABEL_17;
        }
      }
      uint64_t v13 = std::__shared_weak_count::lock(v8);
      if (v13)
      {
        BOOL v14 = v12 == v9;
        sub_4636C(v13);
        if (!v11) {
          goto LABEL_19;
        }
LABEL_18:
        sub_4636C(v11);
        goto LABEL_19;
      }
LABEL_17:
      BOOL v14 = v12 == 0;
      if (v11) {
        goto LABEL_18;
      }
LABEL_19:
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v14) {
        return v3;
      }
      unint64_t v15 = (void *)v3[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v3[2];
          BOOL v17 = *v16 == (void)v3;
          uint64_t v3 = v16;
        }
        while (!v17);
      }
      uint64_t v3 = v16;
      if (v16 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 sub_1469BC(uint64_t a1, CFStringRef **a2, CFStringRef **a3, uint64_t a4, void *a5, __n128 *a6)
{
  char v8 = *a2;
  uint64_t v9 = *a3;
  if (*a2 == *a3)
  {
LABEL_38:
    __n128 v30 = *a6;
    goto LABEL_39;
  }
  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    if (CFStringCompare(v8[4], (CFStringRef)i[4], 0) == kCFCompareLessThan)
    {
      sub_146F00((uint64_t)a6, *a2 + 4);
      uint64_t v22 = *a2;
      int v23 = (CFStringRef *)(*a2)[1];
      if (v23)
      {
        do
        {
          unint64_t v24 = (CFStringRef **)v23;
          int v23 = (CFStringRef *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          unint64_t v24 = (CFStringRef **)v22[2];
          BOOL v18 = *v24 == v22;
          uint64_t v22 = (CFStringRef *)v24;
        }
        while (!v18);
      }
      *a2 = (CFStringRef *)v24;
    }
    else
    {
      if (CFStringCompare(*(CFStringRef *)(*(void *)a4 + 32), (*a2)[4], 0) == kCFCompareLessThan)
      {
        BOOL v25 = *(void **)a4;
        uint64_t v26 = *(void **)(*(void *)a4 + 8);
        if (v26)
        {
          do
          {
            uint64_t v21 = v26;
            uint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            uint64_t v21 = (void *)v25[2];
            BOOL v18 = *v21 == (void)v25;
            BOOL v25 = v21;
          }
          while (!v18);
        }
      }
      else
      {
        unint64_t v15 = *a2;
        uint64_t v16 = (CFStringRef *)(*a2)[1];
        if (v16)
        {
          do
          {
            BOOL v17 = (CFStringRef **)v16;
            uint64_t v16 = (CFStringRef *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            BOOL v17 = (CFStringRef **)v15[2];
            BOOL v18 = *v17 == v15;
            unint64_t v15 = (CFStringRef *)v17;
          }
          while (!v18);
        }
        *a2 = (CFStringRef *)v17;
        uint64_t v19 = *(void **)a4;
        uint64_t v20 = *(void **)(*(void *)a4 + 8);
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            uint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (void *)v19[2];
            BOOL v18 = *v21 == (void)v19;
            uint64_t v19 = v21;
          }
          while (!v18);
        }
      }
      *(void *)a4 = v21;
    }
    char v8 = *a2;
    uint64_t v9 = *a3;
    if (*a2 == *a3) {
      goto LABEL_38;
    }
  }
  __n128 v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      sub_146F00((uint64_t)&v30, v8 + 4);
      char v27 = (__CFString *)v8[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = (CFStringRef *)v27;
          char v27 = (__CFString *)v27->isa;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (CFStringRef *)v8[2];
          BOOL v18 = *v28 == (CFStringRef)v8;
          char v8 = v28;
        }
        while (!v18);
      }
      char v8 = v28;
    }
    while (v28 != v9);
    char v8 = v9;
  }
LABEL_39:
  __n128 result = v30;
  *(void *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

void sub_146BDC(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    int v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    uint64_t v19 = a1;
    uint64_t v20 = v8;
    uint64_t v21 = v8;
    if (v8)
    {
      uint64_t v20 = sub_6CA9C((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          sub_8B9E0((uint64_t)(v8 + 4), (uint64_t)(v9 + 4));
          uint64_t v10 = v21;
          uint64_t v11 = (uint64_t **)sub_146DAC(a1, &v18, (CFStringRef *)v21 + 4);
          sub_46CA8((uint64_t **)a1, v18, v11, v10);
          char v8 = v20;
          uint64_t v21 = v20;
          if (v20) {
            uint64_t v20 = sub_6CA9C((uint64_t)v20);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    sub_146E2C((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      sub_146E7C((uint64_t)&v19, a1, (const void *)a2[4], *((unsigned char *)a2 + 40));
      BOOL v14 = (uint64_t *)v19;
      unint64_t v15 = (uint64_t **)sub_146DAC(a1, &v18, (CFStringRef *)(v19 + 32));
      sub_46CA8((uint64_t **)a1, v18, v15, v14);
      uint64_t v19 = 0;
      sub_F862C((uint64_t)&v19);
      uint64_t v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_146D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_146E2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_146DAC(uint64_t a1, void *a2, CFStringRef *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (CFStringCompare(*a3, *(CFStringRef *)(v4 + 32), 0) != kCFCompareLessThan) {
          break;
        }
        uint64_t v4 = *v5;
        __n128 result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    __n128 result = v5 + 1;
  }
  else
  {
    __n128 result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t sub_146E2C(uint64_t a1)
{
  sub_87810(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_87810(v2);
  }
  return a1;
}

void *sub_146E7C(uint64_t a1, uint64_t a2, const void *a3, unsigned __int8 a4)
{
  int v7 = a4;
  uint64_t v8 = a2 + 8;
  __n128 result = operator new(0x30uLL);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = 0;
  result[4] = a3;
  *((unsigned char *)result + 40) = a4;
  if (v7 && a3) {
    __n128 result = CFRetain(a3);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_146EEC(_Unwind_Exception *a1)
{
  sub_F862C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_146F00(uint64_t a1, CFStringRef *a2)
{
  uint64_t v3 = sub_146F6C(*(uint64_t ***)a1, *(void *)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_146F6C(uint64_t **a1, uint64_t a2, CFStringRef *a3, uint64_t a4)
{
  BOOL v6 = (uint64_t *)a2;
  uint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || CFStringCompare(*a3, *(CFStringRef *)(a2 + 32), 0) == kCFCompareLessThan)
  {
    if (*a1 == v6)
    {
      BOOL v14 = v6;
    }
    else
    {
      uint64_t v13 = *v6;
      if (*v6)
      {
        do
        {
          BOOL v14 = (uint64_t *)v13;
          uint64_t v13 = *(void *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        unint64_t v15 = v6;
        do
        {
          BOOL v14 = (uint64_t *)v15[2];
          BOOL v16 = *v14 == (void)v15;
          unint64_t v15 = v14;
        }
        while (v16);
      }
      if (CFStringCompare((CFStringRef)v14[4], *a3, 0) != kCFCompareLessThan) {
        goto LABEL_16;
      }
    }
    if (!*v6)
    {
      uint64_t v17 = (uint64_t)v6;
      uint64_t v10 = (uint64_t **)v6;
      goto LABEL_22;
    }
    uint64_t v21 = v14;
    uint64_t v10 = (uint64_t **)(v14 + 1);
    goto LABEL_19;
  }
  if (CFStringCompare((CFStringRef)v6[4], *a3, 0) != kCFCompareLessThan) {
    return v6;
  }
  uint64_t v10 = (uint64_t **)(v6 + 1);
  uint64_t v9 = (uint64_t *)v6[1];
  if (v9)
  {
    uint64_t v11 = (uint64_t *)v6[1];
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v19 = v6;
    do
    {
      uint64_t v12 = (uint64_t *)v19[2];
      BOOL v16 = *v12 == (void)v19;
      uint64_t v19 = v12;
    }
    while (!v16);
  }
  if (v12 == (uint64_t *)v8) {
    goto LABEL_30;
  }
  if (CFStringCompare(*a3, (CFStringRef)v12[4], 0) != kCFCompareLessThan)
  {
LABEL_16:
    uint64_t v10 = (uint64_t **)sub_1285F0((uint64_t)a1, &v21, a3);
    goto LABEL_19;
  }
  uint64_t v9 = *v10;
LABEL_30:
  if (v9)
  {
    uint64_t v21 = v12;
    uint64_t v10 = (uint64_t **)v12;
  }
  else
  {
    uint64_t v21 = v6;
  }
LABEL_19:
  BOOL v6 = *v10;
  if (!*v10)
  {
    uint64_t v17 = (uint64_t)v21;
LABEL_22:
    sub_146E7C((uint64_t)v20, (uint64_t)a1, *(const void **)a4, *(unsigned char *)(a4 + 8));
    BOOL v6 = v20[0];
    sub_46CA8(a1, v17, v10, v20[0]);
    v20[0] = 0;
    sub_F862C((uint64_t)v20);
  }
  return v6;
}

void *sub_147140(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    int v7 = result;
    uint64_t v8 = (uint64_t *)(a3 + 16);
    uint64_t v9 = operator new(0x20uLL);
    void *v9 = 0;
    v9[1] = 0;
    __n128 result = sub_106070(v9 + 2, v8);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 == a4)
    {
      uint64_t v13 = v9;
    }
    else
    {
      uint64_t v12 = v9;
      do
      {
        uint64_t v13 = operator new(0x20uLL);
        void *v13 = v12;
        v13[1] = 0;
        __n128 result = sub_106070(v13 + 2, (uint64_t *)(v10 + 16));
        v12[1] = v13;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = v13;
      }
      while (v10 != a4);
    }
    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v9;
    void *v9 = v14;
    *a2 = (uint64_t)v13;
    v13[1] = a2;
    v7[2] += v11;
  }
  return result;
}

void sub_147218(void *a1)
{
  __cxa_begin_catch(a1);
  while (1)
  {
    uint64_t v2 = (void *)*v1;
    uint64_t v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v1);
    uint64_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }
}

void sub_147244(_Unwind_Exception *a1)
{
}

std::string *sub_147258(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_ED7B0(&__p, a2 + 8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (unsigned int *)*((void *)a2 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = *(unsigned int **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (unsigned int *)*((void *)a2 + 2);
          BOOL v10 = *(void *)v9 == (void)a2;
          a2 = v9;
        }
        while (!v10);
      }
      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_147360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14739C(void *a1, unsigned int a2, uint64_t *a3)
{
  sub_3B7EC();
  uint64_t v21 = &qword_64CC40;
  char v22 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v24 = "RoutingManager.cpp";
      __int16 v25 = 1024;
      int v26 = 2042;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v17 = (void (*)(void *))&std::runtime_error::~runtime_error;
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
LABEL_25:
    __cxa_throw(exception, v18, v17);
  }
  if (a3[2])
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v24 = "RoutingManager.cpp";
      __int16 v25 = 1024;
      int v26 = 2044;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v17 = (void (*)(void *))&std::logic_error::~logic_error;
    std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
    goto LABEL_25;
  }
  BOOL v6 = (uint64_t *)(*a1 + 8);
  uint64_t v7 = *v6;
  if (!*v6) {
    goto LABEL_14;
  }
  uint64_t v8 = *a1 + 8;
  do
  {
    unsigned int v9 = *(_DWORD *)(v7 + 32);
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v7;
    }
    else {
      uint64_t v11 = (uint64_t *)(v7 + 8);
    }
    if (v10) {
      uint64_t v8 = v7;
    }
    uint64_t v7 = *v11;
  }
  while (*v11);
  if ((uint64_t *)v8 != v6 && *(_DWORD *)(v8 + 32) <= a2)
  {
    sub_147698(a3, 1667850851, 1667850851, *(_DWORD *)(v8 + 72) == 1667396196);
    sub_147698(a3, 1667854445, 1667854445, *(unsigned char *)(v8 + 77));
    uint64_t v12 = 0;
  }
  else
  {
LABEL_14:
    uint64_t v12 = 2;
  }
  sub_3BCAC(&v21);
  return v12;
}

void sub_147660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t *sub_147698(uint64_t *result, int a2, int a3, char a4)
{
  BOOL v6 = result;
  uint64_t v8 = (uint64_t **)(result + 1);
  uint64_t v7 = result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (void *)v7;
        int v10 = *(_DWORD *)(v7 + 28);
        if (v10 <= a2) {
          break;
        }
        uint64_t v7 = *v9;
        uint64_t v8 = (uint64_t **)v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = (uint64_t **)(v9 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v9 = result + 1;
LABEL_9:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = a3;
    *((unsigned char *)v11 + 32) = a4;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v9;
    unsigned int *v8 = (uint64_t *)v11;
    uint64_t v12 = *(void *)*v6;
    if (v12)
    {
      *BOOL v6 = v12;
      uint64_t v13 = *v8;
    }
    else
    {
      uint64_t v13 = (uint64_t *)v11;
    }
    __n128 result = sub_46D00((uint64_t *)v6[1], v13);
    ++v6[2];
  }
  return result;
}

unsigned char *sub_147760(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, int a5)
{
  sub_3B7EC();
  BOOL v37 = &qword_64CC40;
  char v38 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    int v26 = (os_log_t *)sub_32A48(13);
    char v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v48 = 136315394;
      char v49 = "RoutingManager.cpp";
      __int16 v50 = 1024;
      int v51 = 2078;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", v48, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)a1 = 2;
  sub_1412AC((uint64_t)v48, a2, a3);
  sub_7F2C0(&v36, a4);
  uint64_t v10 = *(void *)(*a2 + 8);
  if (v10)
  {
    uint64_t v11 = *a2 + 8;
    do
    {
      unsigned int v12 = *(_DWORD *)(v10 + 32);
      BOOL v13 = v12 >= *(_DWORD *)v48;
      if (v12 >= *(_DWORD *)v48) {
        uint64_t v14 = (uint64_t *)v10;
      }
      else {
        uint64_t v14 = (uint64_t *)(v10 + 8);
      }
      if (v13) {
        uint64_t v11 = v10;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
    if (v11 != *a2 + 8 && *(_DWORD *)v48 >= *(_DWORD *)(v11 + 32))
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      memset(buf, 0, 24);
      strcpy(&buf[24], "cwdv");
      BYTE2(v42) = 0;
      int data = 3;
      *((void *)&v44 + 1) = 0;
      uint64_t v45 = 0;
      *(void *)&long long v44 = (char *)&v44 + 8;
      int v46 = 44739242;
      CFTypeRef cf = 0;
      if (a5)
      {
        if (a5 == 1)
        {
          LODWORD(v32.__r_.__value_.__l.__data_) = 1885544823;
          LODWORD(__p.__r_.__value_.__l.__data_) = 3;
          sub_6367C((uint64_t)&__p.__r_.__value_.__l.__size_, (unsigned int *)&v32, 1);
          int data = (int)__p.__r_.__value_.__l.__data_;
          sub_463E0(*((void **)&v44 + 1));
          unint64_t v24 = (void *)__p.__r_.__value_.__r.__words[2];
          long long v44 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          uint64_t v45 = v40;
          if (v40)
          {
            *(void *)(__p.__r_.__value_.__r.__words[2] + 16) = (char *)&v44 + 8;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
            __p.__r_.__value_.__r.__words[2] = 0;
            uint64_t v40 = 0;
            unint64_t v24 = 0;
          }
          else
          {
            *(void *)&long long v44 = (char *)&v44 + 8;
          }
          sub_463E0(v24);
        }
        else
        {
          if (a5 != 2)
          {
            uint64_t v29 = (os_log_t *)sub_32A48(13);
            __n128 v30 = *v29;
            if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingManager.cpp";
              WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 985;
              WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(__p.__r_.__value_.__r.__words[2]) = a5;
              _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Bad ActivePortsFilter passed to function: %u.\"", (uint8_t *)&__p, 0x18u);
            }
            char v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v31, "Bad ActivePortsFilter passed to function: %u.");
          }
          int v46 = 44673706;
        }
      }
      operator new();
    }
  }
  uint64_t v15 = sub_32A48(8);
  uint64_t v16 = sub_32A48(34);
  char v17 = 0;
  uint64_t v18 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v21) {
      goto LABEL_19;
    }
  }
  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_19:
  char v22 = *(NSObject **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    sub_383B64(&__p, (uint64_t)v48);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2121;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = p_p;
    *(_WORD *)&buf[28] = 1024;
    int v42 = 2;
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d For %s: failed with result %d", buf, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  *(void *)buf = &v36;
  sub_81CEC((void ***)buf);
  sub_143D84((uint64_t)v48);
  return sub_3BCAC(&v37);
}

void sub_1482B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  a43 = &a29;
  sub_81CEC((void ***)&a43);
  sub_143D84((uint64_t)&a55);
  sub_1486D0((void ***)&a55);
  sub_3BCAC(&a32);
  _Unwind_Resume(a1);
}

void sub_14854C(void **a1, uint64_t *a2)
{
  uint64_t v5 = (uint64_t *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = *a2;
    v5[1] = (uint64_t)(v5 + 1);
    v5[2] = (uint64_t)(v5 + 1);
    v5[3] = 0;
    sub_D39BC((uint64_t)(v5 + 1), v5 + 1, a2 + 1);
    BOOL v6 = v5 + 4;
    goto LABEL_17;
  }
  uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 5;
  if ((unint64_t)(v7 + 1) >> 59) {
    sub_60548();
  }
  uint64_t v8 = v4 - (void)*a1;
  uint64_t v9 = v8 >> 4;
  if (v8 >> 4 <= (unint64_t)(v7 + 1)) {
    uint64_t v9 = v7 + 1;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 59) {
    sub_60560();
  }
  uint64_t v11 = (char *)operator new(32 * v10);
  unsigned int v12 = (uint64_t *)&v11[32 * v7];
  uint64_t *v12 = *a2;
  BOOL v13 = &v11[32 * v10];
  *(int64x2_t *)(v12 + 1) = vdupq_n_s64((unint64_t)(v12 + 1));
  v12[3] = 0;
  sub_D39BC((uint64_t)(v12 + 1), v12 + 1, a2 + 1);
  BOOL v6 = v12 + 4;
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v16 = 0;
  do
  {
    char v17 = &v12[v16];
    uint64_t v18 = (uint64_t)&v12[v16 - 3];
    *(v17 - 4) = *(void *)&v14[v16 * 8 - 32];
    *(v17 - 3) = v18;
    *(v17 - 2) = v18;
    *(v17 - 1) = 0;
    sub_D39BC(v18, &v12[v16 - 3], &v14[v16 * 8 - 24]);
    v16 -= 4;
  }
  while (&v14[v16 * 8] != v15);
  uint64_t v14 = (char *)*a1;
  uint64_t v19 = (uint64_t *)a1[1];
  *a1 = &v12[v16];
  a1[1] = v6;
  a1[2] = v13;
  if (v19 != (uint64_t *)v14)
  {
    do
    {
      uint64_t v20 = v19 - 4;
      sub_8108(v19 - 3);
      uint64_t v19 = v20;
    }
    while (v20 != (uint64_t *)v14);
  }
  if (v14) {
LABEL_16:
  }
    operator delete(v14);
LABEL_17:
  a1[1] = v6;
}

void sub_1486D0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    unint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 4;
        sub_8108(v4 - 3);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned char *sub_148758(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_3B7EC();
  CFStringRef v131 = &qword_64CC40;
  char v132 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    int v111 = (os_log_t *)sub_32A48(13);
    unint64_t v112 = *v111;
    if (*v111 && os_log_type_enabled(*v111, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v149 = 136315394;
      *(void *)&v149[4] = "RoutingManager.cpp";
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = 2137;
      _os_log_impl(&def_1E50E8, v112, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", v149, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    char v114 = (void (*)(void *))&std::runtime_error::~runtime_error;
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
LABEL_274:
    __cxa_throw(exception, v115, v114);
  }
  if (*(void *)(a3 + 32))
  {
    uint64_t v116 = (os_log_t *)sub_32A48(13);
    CFStringRef v117 = *v116;
    if (*v116 && os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v149 = 136315394;
      *(void *)&v149[4] = "RoutingManager.cpp";
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = 2140;
      _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v149, 0x12u);
    }
    goto LABEL_273;
  }
  if (*(_DWORD *)(a3 + 152) != 1852796517)
  {
    size_t v118 = (os_log_t *)sub_32A48(13);
    uint64_t v119 = *v118;
    if (*v118 && os_log_type_enabled(*v118, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v149 = 136315394;
      *(void *)&v149[4] = "RoutingManager.cpp";
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = 2141;
      _os_log_impl(&def_1E50E8, v119, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v149, 0x12u);
    }
    goto LABEL_273;
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 183);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 168);
  }
  if (v8)
  {
    int v120 = (os_log_t *)sub_32A48(13);
    os_signpost_id_t v121 = *v120;
    if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v149 = 136315394;
      *(void *)&v149[4] = "RoutingManager.cpp";
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = 2142;
      _os_log_impl(&def_1E50E8, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v149, 0x12u);
    }
LABEL_273:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    char v114 = (void (*)(void *))&std::logic_error::~logic_error;
    std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
    goto LABEL_274;
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v122 = (os_log_t *)sub_32A48(13);
    uint64_t v123 = *v122;
    if (*v122 && os_log_type_enabled(*v122, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v149 = 136315394;
      *(void *)&v149[4] = "RoutingManager.cpp";
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = 4551;
      _os_log_impl(&def_1E50E8, v123, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v149, 0x12u);
    }
LABEL_286:
    char v128 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v128, "Precondition failure.");
  }
  if (*(void *)(a3 + 32))
  {
    int v124 = (os_log_t *)sub_32A48(13);
    int v125 = *v124;
    if (*v124 && os_log_type_enabled(*v124, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v149 = 136315394;
      *(void *)&v149[4] = "RoutingManager.cpp";
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = 4553;
      _os_log_impl(&def_1E50E8, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v149, 0x12u);
    }
    goto LABEL_286;
  }
  if (*(_DWORD *)(a3 + 152) != 1852796517)
  {
    int v126 = (os_log_t *)sub_32A48(13);
    int v127 = *v126;
    if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v149 = 136315394;
      *(void *)&v149[4] = "RoutingManager.cpp";
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = 4554;
      _os_log_impl(&def_1E50E8, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v149, 0x12u);
    }
    goto LABEL_286;
  }
  sub_1412AC((uint64_t)v149, a2, a3);
  uint64_t v9 = sub_32A48(8);
  if ((*(unsigned char *)(v9 + 8) & 1) == 0) {
    goto LABEL_214;
  }
  unint64_t v10 = *(NSObject **)v9;
  if (!*(void *)v9 || !os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_214;
  }
  sub_383B64(&v140, (uint64_t)v149);
  int v11 = SHIBYTE(v140.__r_.__value_.__r.__words[2]);
  std::string::size_type v12 = v140.__r_.__value_.__r.__words[0];
  memset(&v139, 0, sizeof(v139));
  std::string::append(&v139, "[ ", 2uLL);
  BOOL v13 = *(unsigned int **)(a4 + 8);
  if (*(unsigned int **)a4 == v13)
  {
    unsigned int v18 = *(_DWORD *)(a4 + 24);
    if (v18 == 1986295651)
    {
      if (!*(unsigned char *)(a4 + 32))
      {
        if (!*(void *)(a4 + 64))
        {
          CFStringRef v19 = *(const __CFString **)(a4 + 80);
          if (!v19)
          {
            char v21 = (int *)(a4 + 72);
            int v20 = *(_DWORD *)(a4 + 72);
            int v22 = v20 & 3;
            if (v22 == 2)
            {
              int v23 = v20 & 0xC;
              if (v23 == 8)
              {
                int v24 = v20 & 0x30;
                if (v24 == 32)
                {
                  int v25 = v20 & 0xC0;
                  if (v25 == 128)
                  {
                    int v26 = v20 & 0x300;
                    if (v26 == 512)
                    {
                      int v27 = v20 & 0xC00;
                      if (v27 == 2048)
                      {
                        int v28 = v20 & 0x3000;
                        if (v28 == 0x2000)
                        {
                          int v29 = v20 & 0xC000;
                          if (v29 == 0x8000)
                          {
                            int v30 = v20 & 0x30000;
                            if ((v20 & 0x30000) == 0x20000)
                            {
                              int v31 = v20 & 0xC0000;
                              if ((v20 & 0xC0000) == 0x80000)
                              {
                                int v32 = v20 & 0x300000;
                                if ((v20 & 0x300000) == 0x200000)
                                {
                                  int v33 = v20 & 0xC00000;
                                  if (v33 == 0x800000)
                                  {
                                    uint64_t v34 = "empty";
                                    std::string::size_type v35 = 5;
LABEL_204:
                                    std::string::append(&v139, v34, v35);
                                    goto LABEL_205;
                                  }
LABEL_198:
                                  if (v33) {
                                    uint64_t v34 = "not high quality";
                                  }
                                  else {
                                    uint64_t v34 = "high quality";
                                  }
                                  if (v33) {
                                    std::string::size_type v35 = 16;
                                  }
                                  else {
                                    std::string::size_type v35 = 12;
                                  }
                                  goto LABEL_204;
                                }
                                goto LABEL_189;
                              }
                              goto LABEL_180;
                            }
                            goto LABEL_171;
                          }
                          goto LABEL_162;
                        }
                        goto LABEL_153;
                      }
                      goto LABEL_144;
                    }
                    goto LABEL_135;
                  }
                  goto LABEL_126;
                }
                goto LABEL_117;
              }
              goto LABEL_108;
            }
            goto LABEL_99;
          }
          goto LABEL_85;
        }
        goto LABEL_71;
      }
      goto LABEL_57;
    }
    goto LABEL_43;
  }
  sub_82188((std::string *)v142, *(unsigned int **)a4, v13);
  uint64_t v14 = std::string::insert((std::string *)v142, 0, "Port types: ", 0xCuLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  uint64_t v138 = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v138) >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  if (SHIBYTE(v138) >= 0) {
    std::string::size_type v17 = HIBYTE(v138);
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  std::string::append(&v139, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v138) < 0) {
    operator delete(__p[0]);
  }
  if ((v142[23] & 0x80000000) != 0) {
    operator delete(*(void **)v142);
  }
  if (*(_DWORD *)(a4 + 24) != 1986295651)
  {
    std::string::append(&v139, "; ", 2uLL);
    unsigned int v18 = *(_DWORD *)(a4 + 24);
LABEL_43:
    sub_2417C(&v141, v18);
    uint64_t v36 = std::string::insert(&v141, 0, "Allowed VAD type: ", 0x12uLL);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(void *)&v142[16] = *((void *)&v36->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v142 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    char v38 = std::string::append((std::string *)v142, "; ", 2uLL);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    uint64_t v138 = (void *)v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v138) >= 0) {
      uint64_t v40 = __p;
    }
    else {
      uint64_t v40 = (void **)__p[0];
    }
    if (SHIBYTE(v138) >= 0) {
      std::string::size_type v41 = HIBYTE(v138);
    }
    else {
      std::string::size_type v41 = (std::string::size_type)__p[1];
    }
    std::string::append(&v139, (const std::string::value_type *)v40, v41);
    if (SHIBYTE(v138) < 0) {
      operator delete(__p[0]);
    }
    if ((v142[23] & 0x80000000) != 0) {
      operator delete(*(void **)v142);
    }
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a4 + 32))
  {
    std::string::append(&v139, "; ", 2uLL);
LABEL_57:
    sub_2417C(&v141, *(_DWORD *)(a4 + 28));
    int v42 = std::string::insert(&v141, 0, "Supported mode: ", 0x10uLL);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    *(void *)&v142[16] = *((void *)&v42->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v142 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    long long v44 = std::string::append((std::string *)v142, "; ", 2uLL);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    uint64_t v138 = (void *)v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v138) >= 0) {
      int v46 = __p;
    }
    else {
      int v46 = (void **)__p[0];
    }
    if (SHIBYTE(v138) >= 0) {
      std::string::size_type v47 = HIBYTE(v138);
    }
    else {
      std::string::size_type v47 = (std::string::size_type)__p[1];
    }
    std::string::append(&v139, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(v138) < 0) {
      operator delete(__p[0]);
    }
    if ((v142[23] & 0x80000000) != 0) {
      operator delete(*(void **)v142);
    }
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
  }
  if (!*(void *)(a4 + 64)) {
    goto LABEL_83;
  }
  std::string::append(&v139, "; ", 2uLL);
LABEL_71:
  sub_2DA504(&v141, a4 + 40);
  uint64_t v48 = std::string::insert(&v141, 0, "Connection Type Inclusion: ", 0x1BuLL);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  *(void *)&v142[16] = *((void *)&v48->__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v142 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  __int16 v50 = std::string::append((std::string *)v142, "; ", 2uLL);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  uint64_t v138 = (void *)v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v138) >= 0) {
    char v52 = __p;
  }
  else {
    char v52 = (void **)__p[0];
  }
  if (SHIBYTE(v138) >= 0) {
    std::string::size_type v53 = HIBYTE(v138);
  }
  else {
    std::string::size_type v53 = (std::string::size_type)__p[1];
  }
  std::string::append(&v139, (const std::string::value_type *)v52, v53);
  if (SHIBYTE(v138) < 0) {
    operator delete(__p[0]);
  }
  if ((v142[23] & 0x80000000) != 0) {
    operator delete(*(void **)v142);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
LABEL_83:
  if (*(void *)(a4 + 80))
  {
    std::string::append(&v139, "; ", 2uLL);
    CFStringRef v19 = *(const __CFString **)(a4 + 80);
LABEL_85:
    sub_21B7C(&v141, v19);
    uint64_t v54 = std::string::insert(&v141, 0, "UID: ", 5uLL);
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    *(void *)&v142[16] = *((void *)&v54->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v142 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    char v56 = std::string::append((std::string *)v142, "; ", 2uLL);
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    uint64_t v138 = (void *)v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v138) >= 0) {
      uint64_t v58 = __p;
    }
    else {
      uint64_t v58 = (void **)__p[0];
    }
    if (SHIBYTE(v138) >= 0) {
      std::string::size_type v59 = HIBYTE(v138);
    }
    else {
      std::string::size_type v59 = (std::string::size_type)__p[1];
    }
    std::string::append(&v139, (const std::string::value_type *)v58, v59);
    if (SHIBYTE(v138) < 0) {
      operator delete(__p[0]);
    }
    if ((v142[23] & 0x80000000) != 0) {
      operator delete(*(void **)v142);
    }
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
  }
  char v21 = (int *)(a4 + 72);
  int v60 = *(_DWORD *)(a4 + 72);
  if ((v60 & 3) == 2) {
    goto LABEL_106;
  }
  std::string::append(&v139, "; ", 2uLL);
  int v22 = *v21 & 3;
LABEL_99:
  if (v22) {
    int v61 = "not connected";
  }
  else {
    int v61 = "connected";
  }
  if (v22) {
    std::string::size_type v62 = 13;
  }
  else {
    std::string::size_type v62 = 9;
  }
  std::string::append(&v139, v61, v62);
  int v60 = *v21;
LABEL_106:
  if ((v60 & 0xC) != 8)
  {
    std::string::append(&v139, "; ", 2uLL);
    int v23 = *v21 & 0xC;
LABEL_108:
    if (v23) {
      uint64_t v63 = "not routable";
    }
    else {
      uint64_t v63 = "routable";
    }
    if (v23) {
      std::string::size_type v64 = 12;
    }
    else {
      std::string::size_type v64 = 8;
    }
    std::string::append(&v139, v63, v64);
    int v60 = *v21;
  }
  if ((v60 & 0x30) == 0x20) {
    goto LABEL_124;
  }
  std::string::append(&v139, "; ", 2uLL);
  int v24 = *v21 & 0x30;
LABEL_117:
  if (v24) {
    uint64_t v65 = "output";
  }
  else {
    uint64_t v65 = "input";
  }
  if (v24) {
    std::string::size_type v66 = 6;
  }
  else {
    std::string::size_type v66 = 5;
  }
  std::string::append(&v139, v65, v66);
  int v60 = *v21;
LABEL_124:
  if ((v60 & 0xC0) != 0x80)
  {
    std::string::append(&v139, "; ", 2uLL);
    int v25 = *v21 & 0xC0;
LABEL_126:
    if (v25) {
      uint64_t v67 = "not last-in cachable";
    }
    else {
      uint64_t v67 = "last-in cachable";
    }
    if (v25) {
      std::string::size_type v68 = 20;
    }
    else {
      std::string::size_type v68 = 16;
    }
    std::string::append(&v139, v67, v68);
    int v60 = *v21;
  }
  if ((v60 & 0x300) == 0x200) {
    goto LABEL_142;
  }
  std::string::append(&v139, "; ", 2uLL);
  int v26 = *v21 & 0x300;
LABEL_135:
  if (v26) {
    int v69 = "not overridable";
  }
  else {
    int v69 = "overridable";
  }
  if (v26) {
    std::string::size_type v70 = 15;
  }
  else {
    std::string::size_type v70 = 11;
  }
  std::string::append(&v139, v69, v70);
  int v60 = *v21;
LABEL_142:
  if ((v60 & 0xC00) != 0x800)
  {
    std::string::append(&v139, "; ", 2uLL);
    int v27 = *v21 & 0xC00;
LABEL_144:
    if (v27) {
      uint64_t v71 = "ignores silent mode";
    }
    else {
      uint64_t v71 = "obeys silent mode";
    }
    if (v27) {
      std::string::size_type v72 = 19;
    }
    else {
      std::string::size_type v72 = 17;
    }
    std::string::append(&v139, v71, v72);
    int v60 = *v21;
  }
  if ((v60 & 0x3000) == 0x2000) {
    goto LABEL_160;
  }
  std::string::append(&v139, "; ", 2uLL);
  int v28 = *v21 & 0x3000;
LABEL_153:
  if (v28) {
    uint64_t v73 = "not client visible";
  }
  else {
    uint64_t v73 = "client visible";
  }
  if (v28) {
    std::string::size_type v74 = 18;
  }
  else {
    std::string::size_type v74 = 14;
  }
  std::string::append(&v139, v73, v74);
  int v60 = *v21;
LABEL_160:
  if ((v60 & 0xC000) != 0x8000)
  {
    std::string::append(&v139, "; ", 2uLL);
    int v29 = *v21 & 0xC000;
LABEL_162:
    if (v29) {
      int v75 = "not built-in";
    }
    else {
      int v75 = "built-in";
    }
    if (v29) {
      std::string::size_type v76 = 12;
    }
    else {
      std::string::size_type v76 = 8;
    }
    std::string::append(&v139, v75, v76);
    int v60 = *v21;
  }
  if ((v60 & 0x30000) == 0x20000) {
    goto LABEL_178;
  }
  std::string::append(&v139, "; ", 2uLL);
  int v30 = *v21 & 0x30000;
LABEL_171:
  if (v30) {
    uint64_t v77 = "cannot set routable";
  }
  else {
    uint64_t v77 = "can set routable";
  }
  if (v30) {
    std::string::size_type v78 = 19;
  }
  else {
    std::string::size_type v78 = 16;
  }
  std::string::append(&v139, v77, v78);
  int v60 = *v21;
LABEL_178:
  if ((v60 & 0xC0000) != 0x80000)
  {
    std::string::append(&v139, "; ", 2uLL);
    int v31 = *v21 & 0xC0000;
LABEL_180:
    if (v31) {
      int v79 = "not auto";
    }
    else {
      int v79 = "auto";
    }
    if (v31) {
      std::string::size_type v80 = 8;
    }
    else {
      std::string::size_type v80 = 4;
    }
    std::string::append(&v139, v79, v80);
    std::string::append(&v139, " set sibling routability", 0x18uLL);
    int v60 = *v21;
  }
  if ((v60 & 0x300000) == 0x200000) {
    goto LABEL_196;
  }
  std::string::append(&v139, "; ", 2uLL);
  int v32 = *v21 & 0x300000;
LABEL_189:
  if (v32) {
    uint64_t v81 = "not auto";
  }
  else {
    uint64_t v81 = "auto";
  }
  if (v32) {
    std::string::size_type v82 = 8;
  }
  else {
    std::string::size_type v82 = 4;
  }
  std::string::append(&v139, v81, v82);
  std::string::append(&v139, " set partner routability", 0x18uLL);
  int v60 = *v21;
LABEL_196:
  if ((v60 & 0xC00000) != 0x800000)
  {
    std::string::append(&v139, "; ", 2uLL);
    int v33 = *v21 & 0xC00000;
    goto LABEL_198;
  }
LABEL_205:
  std::string::append(&v139, " ]", 2uLL);
  char v83 = &v140;
  if (v11 < 0) {
    char v83 = (std::string *)v12;
  }
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v84 = &v139;
  }
  else {
    int v84 = (std::string *)v139.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)buf = 136315906;
  *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
  *(_WORD *)&unsigned char buf[12] = 1024;
  *(_DWORD *)&buf[14] = 4560;
  *(_WORD *)&unsigned char buf[18] = 2080;
  *(void *)&buf[20] = v83;
  *(_WORD *)&buf[28] = 2080;
  *(void *)&unsigned char buf[30] = v84;
  _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d For %s and filter %s", buf, 0x26u);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
LABEL_214:
  uint64_t v85 = sub_10FBF0();
  *(void *)buf = off_622A88;
  *(void *)&buf[24] = buf;
  sub_10E1E8((uint64_t *)&v141, v85, (void *)a4, (uint64_t)buf);
  sub_6AFD4(buf);
  uint64_t v86 = *(void *)v149;
  uint64_t v87 = *(void *)&v149[8];
  sub_FB720((uint64_t *)&v140, &v141);
  char v88 = *(unsigned char *)(a3 + 370);
  memset(buf, 0, 24);
  strcpy((char *)&buf[24], "cwdv");
  unsigned char buf[32] = 0;
  int v144 = 3;
  v146[0] = 0;
  v146[1] = 0;
  uint64_t v145 = v146;
  int v147 = 44739242;
  CFTypeRef cf = 0;
  sub_14A068((uint64_t)__p, (uint64_t)a2, v86, v87, (uint64_t)&v140, (uint64_t)&v150, &v151, (uint64_t)&v152, v88, 1, (uint64_t)buf, a3 + 192);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v146[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  sub_8108((uint64_t *)&v140);
  int v89 = (int)__p[0];
  sub_131E5C((uint64_t *)&v139, (uint64_t)&__p[1]);
  uint64_t v134 = &v134;
  uint64_t v135 = (uint64_t *)&v134;
  uint64_t v136 = 0;
  if (!v89)
  {
    std::string::size_type size = (std::string *)v141.__r_.__value_.__l.__size_;
    if ((std::string *)v141.__r_.__value_.__l.__size_ != &v141)
    {
      do
      {
        if (&v139.__r_.__value_.__r.__words[1] != sub_146880(v139.__r_.__value_.__l.__data_, &v139.__r_.__value_.__l.__size_, (uint64_t *)&size->__r_.__value_.__r.__words[2]))
        {
          int data = (std::__shared_weak_count *)size[1].__r_.__value_.__l.__data_;
          if (data)
          {
            char v99 = std::__shared_weak_count::lock(data);
            uint64_t v100 = v99;
            if (v99)
            {
              std::string::size_type v101 = size->__r_.__value_.__r.__words[2];
              atomic_fetch_add_explicit(&v99->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_4636C(v99);
            }
            else
            {
              std::string::size_type v101 = 0;
            }
          }
          else
          {
            std::string::size_type v101 = 0;
            uint64_t v100 = 0;
          }
          uint64_t v102 = operator new(0x20uLL);
          v102[2] = v101;
          v102[3] = v100;
          uint64_t v103 = (uint64_t)v134;
          void *v102 = v134;
          v102[1] = &v134;
          *(void *)(v103 + 8) = v102;
          uint64_t v134 = v102;
          ++v136;
        }
        std::string::size_type size = (std::string *)size->__r_.__value_.__l.__size_;
      }
      while (size != &v141);
      int v104 = v135;
      if (v135 != (uint64_t *)&v134)
      {
        while (1)
        {
          sub_549A4((uint64_t *)v142, v104 + 2, "", 4588);
          int v105 = *(_DWORD *)(*(void *)v142 + 144);
          if (*(void *)&v142[8]) {
            sub_4636C(*(std::__shared_weak_count **)&v142[8]);
          }
          if (v105 == 1886545251) {
            break;
          }
          int v104 = (uint64_t *)v104[1];
          if (v104 == (uint64_t *)&v134) {
            goto LABEL_219;
          }
        }
        if (v104 != (uint64_t *)&v134)
        {
          int v107 = v135;
          if (v135 != v104)
          {
            char v108 = (uint64_t *)v104[1];
            if (v108 != v135)
            {
              uint64_t v109 = *v104;
              *(void *)(v109 + 8) = v108;
              *(void *)v104[1] = v109;
              uint64_t v110 = *v107;
              *(void *)(v110 + 8) = v104;
              *int v104 = v110;
              *int v107 = (uint64_t)v104;
              v104[1] = (uint64_t)v107;
            }
          }
        }
      }
    }
  }
LABEL_219:
  uint64_t v90 = sub_32A48(8);
  if (*(unsigned char *)(v90 + 8))
  {
    unint64_t v91 = *(NSObject **)v90;
    if (*(void *)v90)
    {
      if (os_log_type_enabled(*(os_log_t *)v90, OS_LOG_TYPE_DEBUG))
      {
        sub_9264(&v133, (uint64_t)&v134, 1);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v92 = &v133;
        }
        else {
          uint64_t v92 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)unint64_t v142 = 136315650;
        *(void *)&v142[4] = "RoutingManager.cpp";
        *(_WORD *)&v142[12] = 1024;
        *(_DWORD *)&v142[14] = 4598;
        *(_WORD *)&v142[18] = 2080;
        *(void *)&v142[20] = v92;
        _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ordered ports based off connected port list: %s", v142, 0x1Cu);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_3524(&v129, &v134);
  sub_8108((uint64_t *)&v134);
  sub_10E118((void *)v139.__r_.__value_.__l.__size_);
  sub_10E118(v138);
  sub_8108((uint64_t *)&v141);
  sub_143D84((uint64_t)v149);
  int v93 = v89;
  if (!v89)
  {
    *(void *)uint64_t v149 = v149;
    *(void *)&v149[8] = v149;
    *(void *)&v149[16] = 0;
    int v94 = v130;
    if (v130 != &v129)
    {
      while (1)
      {
        int v95 = sub_149D64(*(unsigned char *)(a3 + 370), (uint64_t)&v129, v94 + 2);
        CFStringRef v96 = (uint64_t *)v94[1];
        if (v95) {
          break;
        }
LABEL_234:
        int v94 = v96;
        if (v96 == &v129) {
          goto LABEL_252;
        }
      }
      while (v96 != &v129)
      {
        if (!sub_149D64(*(unsigned char *)(a3 + 370), (uint64_t)&v129, v96 + 2))
        {
          sub_1277D8((uint64_t)v149, (uint64_t *)v149, (uint64_t)&v129, v94, v96);
          CFStringRef v96 = (uint64_t *)v96[1];
          goto LABEL_234;
        }
        CFStringRef v96 = (uint64_t *)v96[1];
      }
      sub_1277D8((uint64_t)v149, (uint64_t *)v149, (uint64_t)&v129, v94, &v129);
    }
LABEL_252:
    sub_8108((uint64_t *)v149);
    int v93 = 0;
  }
  *(_DWORD *)a1 = v93;
  sub_3524((uint64_t *)(a1 + 8), &v129);
  sub_8108(&v129);
  return sub_3BCAC(&v131);
}

void sub_149B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  sub_143D84((uint64_t)&a70);
  sub_3BCAC(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_149D64(char a1, uint64_t a2, uint64_t *a3)
{
  if (a1)
  {
    v12[0] = off_622AD0;
    v12[1] = a2;
    v12[3] = v12;
    int v5 = sub_145024(a3, (uint64_t)v12) ^ 1;
    sub_145380(v12);
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 == a2)
  {
LABEL_9:
    BOOL v8 = 0;
  }
  else
  {
    while (1)
    {
      sub_549A4(&v10, (uint64_t *)(v6 + 16), "", 1008);
      int v7 = *(_DWORD *)(v10 + 144);
      if (v11) {
        sub_4636C(v11);
      }
      if (v7 == 1885565807) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == a2) {
        goto LABEL_9;
      }
    }
    sub_549A4(&v10, a3, "", 1010);
    BOOL v8 = *(_DWORD *)(v10 + 144) == 1886613611;
    if (v11) {
      sub_4636C(v11);
    }
  }
  return v5 | v8;
}

void sub_149EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_145380((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_149ED4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(void **)(a1 + 8);
  int v5 = (void *)v4[1];
  if (v5 != v4)
  {
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v5[3];
      if (v6)
      {
        uint64_t v7 = v5[2];
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        BOOL v8 = std::__shared_weak_count::lock(v6);
        if (!v8) {
          uint64_t v7 = 0;
        }
        if (!v2) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v7 = 0;
        BOOL v8 = 0;
        if (!v2) {
          goto LABEL_13;
        }
      }
      uint64_t v9 = std::__shared_weak_count::lock(v2);
      if (v9)
      {
        BOOL v10 = v7 == v3;
        sub_4636C(v9);
        if (!v8) {
          goto LABEL_15;
        }
LABEL_14:
        sub_4636C(v8);
        goto LABEL_15;
      }
LABEL_13:
      BOOL v10 = v7 == 0;
      if (v8) {
        goto LABEL_14;
      }
LABEL_15:
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (!v10)
      {
        int v5 = (void *)v5[1];
        if (v5 != v4) {
          continue;
        }
      }
      uint64_t v11 = !v10;
      if (v2) {
        goto LABEL_20;
      }
      return v11;
    }
  }
  uint64_t v11 = 1;
  if (v2) {
LABEL_20:
  }
    std::__shared_weak_count::__release_weak(v2);
  return v11;
}

uint64_t sub_149FE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_622AD0;
  a2[1] = v2;
  return result;
}

void *sub_14A008(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_622AD0;
  result[1] = v3;
  return result;
}

void sub_14A050()
{
}

os_signpost_id_t *sub_14A068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, char a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)&long long v137 = a3;
  *((void *)&v137 + 1) = a4;
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v90 = (os_log_t *)sub_32A48(13);
    unint64_t v91 = *v90;
    if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4395;
      _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_GetPorts", 0xBuLL) == &qword_659450)
  {
    os_signpost_id_t v15 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v15 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v16 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        if (v137 > 6) {
          std::string::size_type v17 = "unknown";
        }
        else {
          std::string::size_type v17 = off_623840[v137];
        }
        unsigned int v18 = v131;
        sub_21C8C(v131, v17);
        if (v133[6] < 0) {
          unsigned int v18 = (void **)v131[0];
        }
        sub_38200C(&v139, a5);
        int v19 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
        std::string::size_type v20 = v139.__r_.__value_.__r.__words[0];
        sub_134D40(&__p, a6);
        char v21 = &v139;
        if (v19 < 0) {
          char v21 = (std::string *)v20;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v21;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = p_p;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v16, OS_SIGNPOST_INTERVAL_BEGIN, v15, "VA_GetPorts", "GetPorts for category = %s, candidate ports = %s, disallowed ports = %s", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139.__r_.__value_.__l.__data_);
        }
        if ((v133[6] & 0x80000000) != 0) {
          operator delete(v131[0]);
        }
      }
    }
  }
  os_signpost_id_t v136 = v15;
  uint64_t v23 = sub_32A48(42);
  if (*(unsigned char *)(v23 + 8))
  {
    int v24 = *(NSObject **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 73;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "kGetPorts";
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }
  *(_OWORD *)&v139.__r_.__value_.__r.__words[1] = 0uLL;
  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139.__r_.__value_.__l.__size_;
  if (!*(void *)(a5 + 16))
  {
    *(_DWORD *)a1 = 0;
    sub_131E5C((uint64_t *)(a1 + 8), (uint64_t)&v139);
    goto LABEL_164;
  }
  uint64_t v25 = *(void *)(*(void *)a2 + 8);
  if (v25)
  {
    char v26 = a10;
    int v27 = (_DWORD *)(*(void *)a2 + 8);
    do
    {
      unsigned int v28 = *(_DWORD *)(v25 + 32);
      BOOL v29 = v28 >= v137;
      if (v28 >= v137) {
        int v30 = (uint64_t *)v25;
      }
      else {
        int v30 = (uint64_t *)(v25 + 8);
      }
      if (v29) {
        int v27 = (_DWORD *)v25;
      }
      uint64_t v25 = *v30;
    }
    while (*v30);
    if (v27 != (_DWORD *)(*(void *)a2 + 8) && v137 >= v27[8])
    {
      uint64_t v34 = sub_32A48(8);
      if (*(unsigned char *)(v34 + 8))
      {
        std::string::size_type v35 = *(NSObject **)v34;
        if (*(void *)v34)
        {
          if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
          {
            sub_383858((std::string *)v131, (uint64_t)&v137);
            uint64_t v36 = v133[6] >= 0 ? v131 : (void **)v131[0];
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4423;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v36;
            _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Scanning abstract routes for %s.", buf, 0x1Cu);
            if ((v133[6] & 0x80000000) != 0) {
              operator delete(v131[0]);
            }
          }
        }
      }
      BOOL v37 = v27[18] == 1668510820;
      *(_OWORD *)&_DWORD buf[3] = v137;
      BOOL v132 = v37;
      *(_OWORD *)std::string v133 = *(_OWORD *)buf;
      *(_DWORD *)&v133[15] = HIDWORD(v137);
      v131[1] = a7;
      uint64_t v100 = v27 + 10;
      v131[0] = v27 + 10;
      uint64_t v135 = 0;
      uint64_t v134 = 0;
      char v38 = (void *)sub_12E380((uint64_t *)v131);
      uint64_t v97 = v39;
      uint64_t v40 = v38;
      int v95 = v131[0];
      if (v131[0] == v38)
      {
        int v98 = 0;
LABEL_148:
        if ((v26 & 1) == 0) {
          goto LABEL_166;
        }
      }
      else
      {
        int v98 = 0;
        uint64_t v101 = a11 + 48;
        uint64_t v102 = (uint64_t *)(a11 + 24);
        uint64_t v99 = (uint64_t)(v39 + 1);
        uint64_t v96 = a1;
        uint64_t v94 = a2;
        while (1)
        {
          uint64_t v41 = sub_32A48(8);
          int v42 = v40 + 2;
          if (*(unsigned char *)(v41 + 8))
          {
            long long v43 = *(NSObject **)v41;
            if (*(void *)v41)
            {
              if (os_log_type_enabled(*(os_log_t *)v41, OS_LOG_TYPE_DEBUG))
              {
                sub_382CA8(&__p, (uint64_t)(v40 + 2));
                long long v44 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  long long v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4430;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v44;
                _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Scanning abstract route %s.", buf, 0x1Cu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          long long v45 = (void *)v40[3];
          int v105 = v40;
          for (i = 0; v45 != v42; long long v45 = (void *)v45[1])
          {
            *(void *)buf = v42;
            *(void *)&buf[8] = v100;
            *(void *)&_DWORD buf[16] = a6;
            *(void *)&buf[24] = a7;
            *(void *)&long long v141 = a8;
            *((void *)&v141 + 1) = v45 + 2;
            *(void *)unint64_t v142 = a12;
            *(_OWORD *)&v142[8] = v137;
            v142[24] = a9;
            int v144 = 0;
            uint64_t v145 = 0;
            std::string::size_type v47 = *(const void **)a11;
            uint64_t v48 = *(void *)(a11 + 8);
            unint64_t v49 = (v48 - *(void *)a11) >> 2;
            uint64_t v143 = 0;
            sub_46B38(&v143, v47, v48, v49);
            uint64_t v146 = *v102;
            char v147 = *(unsigned char *)(a11 + 32);
            int v148 = *(_DWORD *)(a11 + 40);
            sub_46A4C(v149, v101);
            int v150 = *(_DWORD *)(a11 + 72);
            __int16 v50 = *(const void **)(a11 + 80);
            if (v50) {
              CFRetain(v50);
            }
            CFTypeRef cf = v50;
            long long v51 = *(void **)(a5 + 8);
            v120[2] = v141;
            v121[0] = *(_OWORD *)v142;
            *(_OWORD *)((char *)v121 + 9) = *(_OWORD *)&v142[9];
            v120[0] = *(_OWORD *)buf;
            v120[1] = *(_OWORD *)&buf[16];
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            uint64_t v122 = 0;
            sub_46B38(&v122, v143, (uint64_t)v144, (v144 - (unsigned char *)v143) >> 2);
            uint64_t v125 = v146;
            char v126 = v147;
            int v127 = v148;
            sub_46A4C(v128, (uint64_t)v149);
            int v129 = v150;
            CFTypeRef v52 = cf;
            if (cf) {
              CFRetain(cf);
            }
            CFTypeRef v130 = v52;
            std::string::size_type v53 = (void *)a5;
            if (v51 != (void *)a5)
            {
              std::string::size_type v53 = v51;
              while ((sub_14B0F8((uint64_t)v120, v53 + 2) & 1) != 0)
              {
                std::string::size_type v53 = (void *)v53[1];
                if (v53 == (void *)a5)
                {
                  std::string::size_type v53 = (void *)a5;
                  goto LABEL_89;
                }
              }
              uint64_t v54 = (void *)a5;
              while (1)
              {
                uint64_t v54 = (void *)*v54;
                if (v53 == v54) {
                  break;
                }
                if (sub_14B0F8((uint64_t)v120, v54 + 2))
                {
                  unint64_t v55 = -1;
                  char v56 = v53;
                  do
                  {
                    char v56 = (void *)v56[1];
                    ++v55;
                  }
                  while (v56 != v54);
                  uint64_t v57 = v55 + 2;
                  if (v55 < 2)
                  {
LABEL_85:
                    int v61 = 0;
                    unint64_t v58 = 0;
                  }
                  else
                  {
                    if (v57 >= 0x7FFFFFFFFFFFFFFLL) {
                      unint64_t v58 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v58 = v55 + 2;
                    }
                    while (1)
                    {
                      std::string::size_type v59 = (long long *)operator new(16 * v58, &std::nothrow);
                      if (v59) {
                        break;
                      }
                      BOOL v60 = v58 > 1;
                      v58 >>= 1;
                      if (!v60) {
                        goto LABEL_85;
                      }
                    }
                    int v61 = v59;
                  }
                  std::string::size_type v53 = sub_14B4F4(v53, v54, (uint64_t)v120, v57, v61, v58);
                  if (v61) {
                    operator delete(v61);
                  }
                  break;
                }
              }
LABEL_89:
              CFTypeRef v52 = v130;
            }
            if (v52) {
              CFRelease(v52);
            }
            sub_463E0((void *)v128[1]);
            if (v122)
            {
              uint64_t v123 = v122;
              operator delete(v122);
            }
            std::string::size_type v62 = *(void **)(a5 + 8);
            if (v62 != v53)
            {
              uint64_t v63 = *(void **)(a5 + 8);
              do
              {
                sub_112868((uint64_t **)&v139, &v139.__r_.__value_.__l.__size_, v63 + 2);
                uint64_t v63 = (void *)v63[1];
              }
              while (v63 != v53);
            }
            BOOL v64 = v62 != v53;
            if (cf) {
              CFRelease(cf);
            }
            sub_463E0((void *)v149[1]);
            uint64_t v40 = v105;
            if (v143)
            {
              int v144 = v143;
              operator delete(v143);
            }
            i |= v64;
          }
          uint64_t v65 = *(void *)(a5 + 16);
          if (v65 == v139.__r_.__value_.__r.__words[2]) {
            break;
          }
          char v26 = a10;
          a1 = v96;
          if ((i & a10) == 1)
          {
            std::string::size_type v66 = (uint64_t *)v40[13];
            if (v66)
            {
              uint64_t v67 = *v66;
              uint64_t v68 = v66[1];
              if (*v66 != v68)
              {
                do
                {
                  if (sub_131598(*(void *)(v67 + 192), v137, *((uint64_t *)&v137 + 1)))
                  {
                    if (!*(void *)(a5 + 16)) {
                      goto LABEL_148;
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
                    __p.__r_.__value_.__r.__words[2] = 0;
                    int v69 = *(void **)(a5 + 8);
                    if (v69 != (void *)a5)
                    {
                      do
                      {
                        std::string::size_type v70 = *(__int32 **)(v67 + 8);
                        uint64_t v71 = *(__int32 **)(v67 + 16);
                        sub_43F38((uint64_t *)buf, v69 + 2, "", 4509);
                        std::string::size_type v72 = wmemchr(v70, *(_DWORD *)(*(void *)buf + 144), v71 - v70);
                        if (*(void *)&buf[8]) {
                          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
                        }
                        if (v72) {
                          uint64_t v73 = v72;
                        }
                        else {
                          uint64_t v73 = v71;
                        }
                        if (v73 != *(__int32 **)(v67 + 16))
                        {
                          std::string::size_type v74 = operator new(0x20uLL);
                          v74[2] = v69[2];
                          uint64_t v75 = v69[3];
                          v74[3] = v75;
                          if (v75) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 16), 1uLL, memory_order_relaxed);
                          }
                          std::string::size_type v76 = __p.__r_.__value_.__r.__words[0];
                          *(void *)(__p.__r_.__value_.__r.__words[0] + 8) = v74;
                          void *v74 = v76;
                          v74[1] = &__p;
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
                          ++__p.__r_.__value_.__r.__words[2];
                        }
                        int v69 = (void *)v69[1];
                      }
                      while (v69 != (void *)a5);
                      uint64_t v40 = v105;
                      if (__p.__r_.__value_.__r.__words[2])
                      {
                        size_t v118 = 0;
                        uint64_t v119 = 0;
                        CFStringRef v117 = &v118;
                        uint64_t v77 = *(unsigned int *)(v67 + 64);
                        uint64_t v78 = sub_131268(v94, v67);
                        sub_FB720(v116, &__p);
                        int v107 = 0;
                        char v108 = 0;
                        uint64_t v109 = 0;
                        sub_46B38(&v107, *(const void **)a11, *(void *)(a11 + 8), (uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 2);
                        uint64_t v110 = *v102;
                        char v111 = *(unsigned char *)(a11 + 32);
                        int v112 = *(_DWORD *)(a11 + 40);
                        sub_46A4C(v113, v101);
                        int v114 = *(_DWORD *)(a11 + 72);
                        int v79 = *(const void **)(a11 + 80);
                        if (v79) {
                          CFRetain(v79);
                        }
                        CFTypeRef v115 = v79;
                        LOWORD(v93) = 0;
                        sub_14A068(buf, v94, v77 | (v78 << 32), 0, v116, a6, a7, a8, v93, &v107, a12);
                        int v98 = *(_DWORD *)buf;
                        sub_10E118(v118);
                        std::string::size_type v80 = *(void **)&buf[16];
                        CFStringRef v117 = *(void **)&buf[8];
                        size_t v118 = *(void **)&buf[16];
                        uint64_t v119 = *(void *)&buf[24];
                        uint64_t v40 = v105;
                        if (*(void *)&buf[24])
                        {
                          *(void *)(*(void *)&buf[16] + 16) = &v118;
                          *(void *)&buf[8] = &buf[16];
                          *(void *)&_DWORD buf[16] = 0;
                          *(void *)&buf[24] = 0;
                          std::string::size_type v80 = 0;
                        }
                        else
                        {
                          CFStringRef v117 = &v118;
                        }
                        sub_10E118(v80);
                        if (v115) {
                          CFRelease(v115);
                        }
                        sub_463E0((void *)v113[1]);
                        if (v107)
                        {
                          char v108 = v107;
                          operator delete(v107);
                        }
                        sub_8108(v116);
                        sub_13150C((uint64_t *)&v139, v117, &v118);
                        sub_10E118(v118);
                      }
                    }
                    sub_8108((uint64_t *)&__p);
                  }
                  else
                  {
                    uint64_t v81 = sub_32A48(8);
                    if (*(unsigned char *)(v81 + 8))
                    {
                      std::string::size_type v82 = *(NSObject **)v81;
                      if (*(void *)v81)
                      {
                        if (os_log_type_enabled(*(os_log_t *)v81, OS_LOG_TYPE_DEBUG))
                        {
                          sub_2417C(&__p, *(_DWORD *)(v67 + 60));
                          char v83 = &__p;
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                            char v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          }
                          *(_DWORD *)buf = 136315650;
                          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                          *(_WORD *)&unsigned char buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 4491;
                          *(_WORD *)&unsigned char buf[18] = 2080;
                          *(void *)&buf[20] = v83;
                          _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d Skipping alternate VAD specification for Device Type %s because it is marked as hidden.", buf, 0x1Cu);
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__p.__r_.__value_.__l.__data_);
                          }
                        }
                      }
                    }
                  }
                  v67 += 440;
                }
                while (v67 != v68);
                uint64_t v65 = *(void *)(a5 + 16);
              }
            }
          }
          if (v65)
          {
            uint64_t v40 = (void *)v40[1];
            int v84 = (void *)*v97;
            if (v40 != (void *)*v97)
            {
              while ((sub_12EA98(v99, (uint64_t)(v40 + 2)) & 1) == 0)
              {
                uint64_t v40 = (void *)v40[1];
                if (v40 == v84)
                {
                  uint64_t v40 = v84;
                  break;
                }
              }
            }
            if (v40 != v95) {
              continue;
            }
          }
          goto LABEL_148;
        }
        a1 = v96;
        if ((a10 & 1) == 0) {
          goto LABEL_166;
        }
      }
      uint64_t v85 = sub_32A48(8);
      if (*(unsigned char *)(v85 + 8))
      {
        uint64_t v86 = *(NSObject **)v85;
        if (*(void *)v85)
        {
          if (os_log_type_enabled(*(os_log_t *)v85, OS_LOG_TYPE_DEBUG))
          {
            sub_381EC8((std::string *)v131, &v139);
            uint64_t v87 = v133[6] >= 0 ? v131 : (void **)v131[0];
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4536;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v87;
            _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ports: %s", buf, 0x1Cu);
            if ((v133[6] & 0x80000000) != 0) {
              operator delete(v131[0]);
            }
          }
        }
      }
LABEL_166:
      *(_DWORD *)a1 = v98;
      sub_131E5C((uint64_t *)(a1 + 8), (uint64_t)&v139);
      goto LABEL_164;
    }
  }
  uint64_t v31 = sub_32A48(8);
  if (*(unsigned char *)(v31 + 8))
  {
    int v32 = *(NSObject **)v31;
    if (*(void *)v31)
    {
      if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
      {
        if (v137 > 6) {
          int v33 = "unknown";
        }
        else {
          int v33 = off_623840[v137];
        }
        sub_21C8C(v131, v33);
        if (v133[6] >= 0) {
          char v88 = v131;
        }
        else {
          char v88 = (void **)v131[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4415;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v88;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to find a category entry for %s", buf, 0x1Cu);
        if ((v133[6] & 0x80000000) != 0) {
          operator delete(v131[0]);
        }
      }
    }
  }
  *(_DWORD *)a1 = 2;
  sub_131E5C((uint64_t *)(a1 + 8), (uint64_t)&v139);
LABEL_164:
  sub_10E118((void *)v139.__r_.__value_.__l.__size_);
  return sub_14B93C(&v136);
}

void sub_14AF68(_Unwind_Exception *a1)
{
}

uint64_t sub_14B0F8(uint64_t a1, uint64_t *a2)
{
  sub_43F38(&v35, a2, "", 4443);
  unint64_t v4 = (os_unfair_lock_s *)v35;
  int v5 = *(int **)(a1 + 40);
  if (*(_WORD *)(v35 + 184)) {
    int v6 = *v5;
  }
  else {
    int v6 = v5[1];
  }
  if (*(_DWORD *)(v35 + 144) != v6) {
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(unsigned __int8 *)(a1 + 72);
  int v27 = 0;
  uint64_t v28 = 0;
  std::string __p = 0;
  sub_46B38(&__p, *(const void **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
  int v24 = v12;
  uint64_t v25 = v11;
  uint64_t v29 = *(void *)(a1 + 104);
  uint8_t v30 = *(unsigned char *)(a1 + 112);
  int v31 = *(_DWORD *)(a1 + 120);
  sub_46A4C(v32, a1 + 128);
  int v33 = *(_DWORD *)(a1 + 152);
  BOOL v13 = *(const void **)(a1 + 160);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a1 + 160));
  }
  CFTypeRef cf = v13;
  uint64_t v14 = *(void *)(a1 + 48);
  memset(buf, 0, 24);
  sub_46B38(buf, __p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 2);
  *(void *)&buf[24] = v29;
  unsigned char buf[32] = v30;
  int v43 = v31;
  sub_46A4C(v44, (uint64_t)v32);
  int v45 = v33;
  CFTypeRef v15 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v46 = v15;
  uint64_t v41 = 0;
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = off_622BF0;
  v16[1] = v14;
  v16[2] = a2;
  v16[3] = v8;
  uint64_t v41 = v16;
  sub_131F30(v37, v7, v8, a1 + 56, v10, v9, v25, v24 != 0, 0x636F7570u, 0x76646566u, 0x100000000, 1u);
  sub_134C4C(v39);
  if (v46) {
    CFRelease(v46);
  }
  sub_463E0((void *)v44[1]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  uint64_t v17 = v37[0];
  uint64_t v18 = v37[1];
  char v38 = (void **)v37;
  sub_12EA14(&v38);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0((void *)v32[1]);
  if (__p)
  {
    int v27 = __p;
    operator delete(__p);
  }
  if (v17 == v18)
  {
LABEL_27:
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v19 = sub_32A48(8);
    if (*(unsigned char *)(v19 + 8))
    {
      std::string::size_type v20 = *(NSObject **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          sub_4F64((uint64_t)v39, v4 + 2);
          char v21 = v40 >= 0 ? v39 : (void **)v39[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4456;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v21;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found eligible port (%s) in the prioritized route list that matches the port filter.", buf, 0x1Cu);
          if (v40 < 0) {
            operator delete(v39[0]);
          }
        }
      }
    }
    uint64_t v22 = 1;
  }
  if (v36) {
    sub_4636C(v36);
  }
  return v22;
}

void sub_14B450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a30) {
    sub_4636C(a30);
  }
  _Unwind_Resume(exception_object);
}

void *sub_14B4F4(void *a1, void *a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v8 = a1;
  if (a4 == 3)
  {
    uint64_t v12 = a1[1];
    if (!sub_14B0F8(a3, (uint64_t *)(v12 + 16)))
    {
      uint64_t v23 = *(void *)(v12 + 16);
      *(void *)(v12 + 16) = a2[2];
      a2[2] = v23;
      uint64_t v24 = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = a2[3];
      a2[3] = v24;
      uint64_t v25 = v8[2];
      v8[2] = *(void *)(v12 + 16);
      *(void *)(v12 + 16) = v25;
      uint64_t v26 = v8[3];
      _OWORD v8[3] = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = v26;
      return (void *)v12;
    }
    uint64_t v13 = v8[2];
    v8[2] = *(void *)(v12 + 16);
    *(void *)(v12 + 16) = v13;
    uint64_t v14 = v8[3];
    _OWORD v8[3] = *(void *)(v12 + 24);
    *(void *)(v12 + 24) = v14;
    uint64_t v15 = *(void *)(v12 + 16);
    *(void *)(v12 + 16) = a2[2];
    a2[2] = v15;
    uint64_t v11 = *(void *)(v12 + 24);
    *(void *)(v12 + 24) = a2[3];
    goto LABEL_6;
  }
  if (a4 == 2)
  {
    uint64_t v10 = a1[2];
    a1[2] = a2[2];
    a2[2] = v10;
    uint64_t v11 = a1[3];
    a1[3] = a2[3];
LABEL_6:
    a2[3] = v11;
    return a2;
  }
  uint64_t v17 = a5;
  if (a6 >= a4)
  {
    v53[0] = (uint64_t)a5;
    v53[1] = (uint64_t)&v54;
    *a5 = *((_OWORD *)a1 + 1);
    int v27 = a5 + 1;
    a1[2] = 0;
    a1[3] = 0;
    uint64_t v54 = 1;
    for (char i = (void *)a1[1]; i != a2; char i = (void *)i[1])
    {
      uint64_t v29 = (long long *)(i + 2);
      if (sub_14B0F8(a3, i + 2))
      {
        long long v30 = *v29;
        *(void *)uint64_t v29 = 0;
        i[3] = 0;
        int v31 = (std::__shared_weak_count *)v8[3];
        *((_OWORD *)v8 + 1) = v30;
        if (v31) {
          std::__shared_weak_count::__release_weak(v31);
        }
        uint64_t v8 = (void *)v8[1];
      }
      else
      {
        *v27++ = *v29;
        *(void *)uint64_t v29 = 0;
        i[3] = 0;
        ++v54;
      }
    }
    long long v32 = *((_OWORD *)a2 + 1);
    a2[2] = 0;
    a2[3] = 0;
    int v33 = (std::__shared_weak_count *)v8[3];
    *((_OWORD *)v8 + 1) = v32;
    if (v33) {
      std::__shared_weak_count::__release_weak(v33);
    }
    uint64_t v12 = v8[1];
    if (v27 > v17)
    {
      uint64_t v34 = v8[1];
      do
      {
        long long v35 = *v17;
        *(void *)uint64_t v17 = 0;
        *((void *)v17 + 1) = 0;
        uint64_t v36 = *(std::__shared_weak_count **)(v34 + 24);
        *(_OWORD *)(v34 + 16) = v35;
        if (v36) {
          std::__shared_weak_count::__release_weak(v36);
        }
        ++v17;
        uint64_t v34 = *(void *)(v34 + 8);
      }
      while (v17 < v27);
    }
    sub_14BAD8(v53);
  }
  else
  {
    if (a4 >= 0) {
      uint64_t v18 = a4;
    }
    else {
      uint64_t v18 = a4 + 1;
    }
    uint64_t v19 = v18 >> 1;
    uint64_t v20 = v18 >> 1;
    if (a4 <= -2)
    {
      uint64_t v37 = v18 >> 1;
      char v21 = a1;
      do
        char v21 = (void *)*v21;
      while (!__CFADD__(v37++, 1));
    }
    else
    {
      char v21 = a1;
      if ((unint64_t)(a4 + 1) >= 3)
      {
        unint64_t v22 = v19 + 1;
        char v21 = a1;
        do
        {
          char v21 = (void *)v21[1];
          --v22;
        }
        while (v22 > 1);
      }
    }
    long long v39 = v21;
    while (1)
    {
      long long v39 = (void *)*v39;
      if (sub_14B0F8(a3, v39 + 2)) {
        break;
      }
      if (v39 == v8) {
        goto LABEL_41;
      }
      --v20;
    }
    uint64_t v8 = (void *)sub_14B4F4(v8, v39, a3, v20, v17, a6);
LABEL_41:
    uint64_t v12 = a2[1];
    uint64_t v40 = a4 - v19;
    uint64_t v41 = v21;
    while (sub_14B0F8(a3, v41 + 2))
    {
      uint64_t v41 = (void *)v41[1];
      if (v41 == a2) {
        goto LABEL_46;
      }
      --v40;
    }
    uint64_t v12 = sub_14B4F4(v41, a2, a3, v40, v17, a6);
LABEL_46:
    if (v8 != v21)
    {
      if (v21 == (void *)v12)
      {
        return v8;
      }
      else
      {
        uint64_t v42 = v8[2];
        v8[2] = v21[2];
        v21[2] = v42;
        uint64_t v43 = v8[3];
        _OWORD v8[3] = v21[3];
        v21[3] = v43;
        long long v44 = (void *)v8[1];
        for (uint64_t j = (void *)v21[1]; j != (void *)v12; uint64_t j = (void *)j[1])
        {
          if (v44 == v21) {
            char v21 = j;
          }
          uint64_t v46 = v44[2];
          uint64_t v44[2] = j[2];
          j[2] = v46;
          uint64_t v47 = v44[3];
          uint64_t v44[3] = j[3];
          j[3] = v47;
          long long v44 = (void *)v44[1];
        }
        if (v44 == v21)
        {
          return v21;
        }
        else
        {
          uint64_t v48 = v44;
          unint64_t v49 = v21;
          do
          {
            while (1)
            {
              uint64_t v50 = v48[2];
              uint64_t v48[2] = v49[2];
              uint64_t v49[2] = v50;
              uint64_t v51 = v48[3];
              v48[3] = v49[3];
              uint64_t v49[3] = v51;
              uint64_t v48 = (void *)v48[1];
              unint64_t v49 = (void *)v49[1];
              if (v49 == (void *)v12) {
                break;
              }
              if (v48 == v21) {
                char v21 = v49;
              }
            }
            unint64_t v49 = v21;
          }
          while (v48 != v21);
          return v44;
        }
      }
    }
  }
  return (void *)v12;
}

void sub_14B8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14BAD8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_14B8F0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 160);
  if (v2) {
    CFRelease(v2);
  }
  sub_463E0(*(void **)(a1 + 136));
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  return a1;
}

os_signpost_id_t *sub_14B93C(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 73;
        __int16 v11 = 2080;
        uint64_t v12 = "kGetPorts";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_GetPorts", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_14BACC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_14BAD8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    uint64_t v2 = (unint64_t *)a1[1];
    unint64_t v3 = *v2;
    if (*v2)
    {
      unint64_t v4 = 0;
      int v5 = (std::__shared_weak_count **)(v1 + 8);
      do
      {
        if (*v5)
        {
          std::__shared_weak_count::__release_weak(*v5);
          unint64_t v3 = *v2;
        }
        ++v4;
        v5 += 2;
      }
      while (v4 < v3);
    }
  }
}

void *sub_14BB3C@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned __int8 *a3@<X2>, int *a4@<X3>, uint64_t **a5@<X8>)
{
  unsigned int v7 = *a2;
  int v23 = *a3;
  int v8 = *a4;
  __int16 v9 = (const void ***)sub_190030(*(void **)(a1 + 8), *a2);
  uint64_t v24 = *(uint64_t **)(a1 + 16);
  int v10 = *(_DWORD *)(*(void *)(a1 + 24) + 32);
  v34[0] = off_622A88;
  v34[3] = v34;
  a5[1] = 0;
  a5[2] = 0;
  char v21 = a5;
  *a5 = (uint64_t *)(a5 + 1);
  int v22 = v10;
  sub_136048(&v27, *v9, v9[1], v10);
  __int16 v11 = v27;
  uint64_t v12 = v28;
  if (v27 != v28)
  {
    while (1)
    {
      CFTypeRef v13 = *v11;
      if (*v11) {
        CFRetain(*v11);
      }
      sub_6BA78((uint64_t)v35, (uint64_t)v34);
      sub_43F38(&v32, v24, "", 339);
      uint64_t v14 = sub_10FBF0();
      uint64_t v15 = v32;
      uint64_t v36 = (void **)v14;
      LOBYTE(v37) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
      uint64_t v16 = sub_10B490((void *)(v14 + 112), v15);
      sub_3BCAC(&v36);
      if (!v16) {
        goto LABEL_18;
      }
      uint64_t v17 = (void **)operator new(4uLL);
      *(_DWORD *)uint64_t v17 = v7;
      uint64_t v36 = v17;
      uint64_t v37 = (void **)((char *)v17 + 4);
      char v38 = (char *)v17 + 4;
      strcpy((char *)v39, "cwdv");
      char v40 = 0;
      int v41 = 3;
      v43[0] = 0;
      v43[1] = 0;
      uint64_t v42 = v43;
      int v18 = 44739242;
      unsigned int v44 = 44739242;
      CFTypeRef v45 = v13;
      if (v13)
      {
        CFRetain(v13);
        int v18 = v44;
      }
      v39[0] = v8;
      unsigned int v44 = v18 & 0xFFFFFFF0 | (8 * (v23 != 0));
      if (!sub_4642C(v15, (uint64_t)&v36)) {
        break;
      }
      uint64_t v25 = v15;
      uint64_t v26 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v45) {
        CFRelease(v45);
      }
      sub_463E0(v43[0]);
      if (v36)
      {
        uint64_t v37 = v36;
        operator delete(v36);
      }
LABEL_22:
      if (v33) {
        sub_4636C(v33);
      }
      sub_6AFD4(v35);
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v19 = v26;
      if (v26)
      {
        if (v26->__shared_owners_ != -1) {
          sub_13651C(v21, (unint64_t *)&v25, &v25);
        }
        std::__shared_weak_count::__release_weak(v19);
      }
      if (++v11 == v12) {
        goto LABEL_31;
      }
    }
    if (v45) {
      CFRelease(v45);
    }
    sub_463E0(v43[0]);
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
LABEL_18:
    if (v13) {
      CFRetain(v13);
    }
    int v31 = v13;
    v30[0] = 0;
    v30[1] = 0;
    uint64_t v29 = v30;
    sub_6BA78((uint64_t)&v36, (uint64_t)v35);
    sub_1361C8(&v25, v7, &v31, v8, v23 != 0, (uint64_t)&v29, v22, (uint64_t)&v36);
    sub_6AFD4(&v36);
    sub_10E118(v30[0]);
    if (v13) {
      CFRelease(v13);
    }
    goto LABEL_22;
  }
LABEL_31:
  uint64_t v36 = (void **)&v27;
  sub_4EDB8(&v36);
  return sub_6AFD4(v34);
}

void sub_14BEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

__n128 sub_14BFD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_622BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_14C004(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_622BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_14C058()
{
}

void sub_14C070(uint64_t a1, uint64_t a2, int a3)
{
  sub_143E38(v7, (void *)(a2 + 72));
  sub_13A7AC((uint64_t)v6, a2, (_OWORD *)(a2 + 32), a2 + 48, (uint64_t)v7, a2 + 120, *(_DWORD *)(a2 + 144), (void *)(a2 + 152), a2 + 176, (const void ***)(a2 + 216), *(unsigned char *)(a2 + 384), (uint64_t *)(a2 + 392), a3, (long long *)(a2 + 416), (void *)(a2 + 448));
  sub_141FB0(a1, (void *)a2, (uint64_t)v6, 0);
  sub_13A044((uint64_t)v6);
  sub_12B050(v7[4]);
  sub_10E118(v7[1]);
}

void sub_14C130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_13A044((uint64_t)va);
  sub_12B050(*(void **)(v8 - 48));
  sub_10E118(*(void **)(v8 - 72));
  _Unwind_Resume(a1);
}

void *sub_14C15C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_14C1E0(uint64_t a1, uint64_t a2)
{
  sub_E74B0(&v10, a2);
  uint64_t v2 = v11;
  if (v11 == &v10)
  {
LABEL_10:
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  while (1)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[3];
    if (!v3) {
      goto LABEL_9;
    }
    unint64_t v4 = std::__shared_weak_count::lock(v3);
    if (!v4) {
      goto LABEL_9;
    }
    int v5 = v4;
    uint64_t v6 = v2[2];
    if (!v6 || *(_DWORD *)(v6 + 144) != 1885892706)
    {
      sub_4636C(v5);
      goto LABEL_9;
    }
    BOOL v7 = sub_2506C8(v6);
    sub_4636C(v5);
    if (v7) {
      break;
    }
LABEL_9:
    uint64_t v2 = (uint64_t *)v2[1];
    if (v2 == &v10) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = 1;
LABEL_11:
  sub_8108(&v10);
  return v9;
}

void sub_14C2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4636C(v2);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_14C2C4(uint64_t a1, void *a2)
{
  *a2 = off_622BA8;
}

void *sub_14C2E4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_622BA8;
  return result;
}

void sub_14C31C()
{
}

unsigned char *sub_14C334(uint64_t a1, uint64_t a2, int a3, void **a4)
{
  sub_3B7EC();
  uint64_t v54 = &qword_64CC40;
  char v55 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v47 = (os_log_t *)sub_32A48(13);
    uint64_t v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3997;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  sub_12053C(a1, 1920099684);
  *(void *)&v53[8] = 0;
  *(void *)&v53[16] = 0;
  *(void *)std::string::size_type v53 = &v53[8];
  uint64_t v9 = a4 + 1;
  uint64_t v8 = (void **)*a4;
  uint64_t v10 = *(void **)(a2 + 528);
  __int16 v11 = (_OWORD *)(a2 + 536);
  if (a3)
  {
    *(void *)buf = v53;
    *(void *)&buf[8] = &v53[8];
    if (v8 != v9 && v10 != (void *)v11)
    {
      do
      {
        int v12 = *((_DWORD *)v8 + 7);
        int v13 = *((_DWORD *)v10 + 7);
        if (v12 >= v13)
        {
          if (v13 >= v12)
          {
            sub_14CE28((uint64_t)buf, v12);
            uint64_t v17 = (void **)v8[1];
            if (v17)
            {
              do
              {
                uint64_t v16 = v17;
                uint64_t v17 = (void **)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                uint64_t v16 = (void **)v8[2];
                BOOL v18 = *v16 == v8;
                uint64_t v8 = v16;
              }
              while (!v18);
            }
          }
          else
          {
            uint64_t v16 = v8;
          }
          uint64_t v19 = (void *)v10[1];
          if (v19)
          {
            do
            {
              uint64_t v10 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v20 = v10;
              uint64_t v10 = (void *)v10[2];
            }
            while ((void *)*v10 != v20);
          }
          uint64_t v8 = v16;
        }
        else
        {
          uint64_t v14 = (void **)v8[1];
          if (v14)
          {
            do
            {
              uint64_t v8 = v14;
              uint64_t v14 = (void **)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = v8;
              uint64_t v8 = (void **)v8[2];
            }
            while (*v8 != v15);
          }
        }
      }
      while (v8 != v9 && v10 != (void *)v11);
      if (*(void *)&v53[16])
      {
        sub_463E0(*(void **)&v53[8]);
        *(void *)&v53[16] = 0;
        *(_OWORD *)std::string::size_type v53 = (unint64_t)&v53[8];
        char v21 = *a4;
        v51[0] = *(void **)(a2 + 528);
        __p.__r_.__value_.__r.__words[0] = a2 + 536;
        char v56 = a4 + 1;
        uint64_t v57 = v21;
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
        v58.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[8];
        sub_14C9E4((uint64_t)buf, (uint64_t)v51, &__p, (uint64_t)&v57, &v56, (__n128 *)&v58);
        uint64_t v22 = *(void *)(a2 + 544);
        long long v23 = *(_OWORD *)&v53[8];
        long long v24 = *(_OWORD *)(a2 + 528);
        *(void *)(a2 + 528) = *(void *)v53;
        *__int16 v11 = v23;
        *(_OWORD *)std::string::size_type v53 = v24;
        *(void *)&v53[16] = v22;
        if (*((void *)&v23 + 1)) {
          uint64_t v25 = (void *)(v23 + 16);
        }
        else {
          uint64_t v25 = (void *)(a2 + 528);
        }
        void *v25 = v11;
        uint64_t v26 = (void *)(*(void *)&v53[8] + 16);
        if (!v22) {
          uint64_t v26 = v53;
        }
        *uint64_t v26 = &v53[8];
        goto LABEL_34;
      }
    }
  }
  else
  {
    v51[0] = *a4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(a4 + 1);
    char v56 = (void **)(a2 + 536);
    uint64_t v57 = v10;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[8];
    sub_14C9E4((uint64_t)buf, (uint64_t)v51, &__p, (uint64_t)&v57, &v56, (__n128 *)&v58);
    if (*(void *)&v53[16])
    {
      sub_14CBD4((uint64_t *)(a2 + 528), *(void **)v53, &v53[8]);
LABEL_34:
      sub_14C070((uint64_t)buf, a2, 1919185776);
      sub_120690(a1, (uint64_t)buf);
      sub_11A520(buf);
      goto LABEL_75;
    }
  }
  uint64_t v27 = sub_32A48(8);
  uint64_t v28 = sub_32A48(34);
  char v29 = 0;
  uint64_t v30 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v31 = *(void *)(v27 + 8);
  while (1)
  {
    uint64_t v32 = *(int *)&buf[4 * v30];
    char v33 = v29;
    if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
      break;
    }
    char v29 = 1;
    uint64_t v30 = 1;
    if (v33)
    {
      if ((v31 & 1) == 0) {
        goto LABEL_75;
      }
      goto LABEL_43;
    }
  }
  if ((v31 & v32) == 0) {
    uint64_t v27 = v28;
  }
  if (*(void *)(v27 + 8))
  {
LABEL_43:
    uint64_t v34 = *(NSObject **)v27;
    if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      long long v35 = "????";
      if (a3 == 1) {
        long long v35 = "Remove";
      }
      if (a3) {
        uint64_t v36 = (char *)v35;
      }
      else {
        uint64_t v36 = "Add";
      }
      sub_21C8C(v51, v36);
      int v37 = v52;
      char v38 = (void **)v51[0];
      long long v39 = (void **)*a4;
      memset(&__p, 0, sizeof(__p));
      std::string::append(&__p, "{ ", 2uLL);
      if (v39 != v9)
      {
        while (1)
        {
          std::to_string(&v58, *((_DWORD *)v39 + 7));
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v40 = &v58;
          }
          else {
            char v40 = (std::string *)v58.__r_.__value_.__r.__words[0];
          }
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v58.__r_.__value_.__l.__size_;
          }
          std::string::append(&__p, (const std::string::value_type *)v40, size);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
          uint64_t v42 = (void **)v39[1];
          if (v42)
          {
            do
            {
              uint64_t v43 = v42;
              uint64_t v42 = (void **)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              uint64_t v43 = (void **)v39[2];
              BOOL v18 = *v43 == v39;
              long long v39 = v43;
            }
            while (!v18);
          }
          if (v43 == v9) {
            break;
          }
          std::string::append(&__p, ", ", 2uLL);
          long long v39 = v43;
        }
      }
      std::string::append(&__p, " }", 2uLL);
      unsigned int v44 = v51;
      if (v37 < 0) {
        unsigned int v44 = v38;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4012;
      __int16 v60 = 2080;
      int v61 = v44;
      __int16 v62 = 2080;
      uint64_t v63 = p_p;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Redundant modification (%s) of alt vad disable policy for type %s", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v52 < 0) {
        operator delete(v51[0]);
      }
    }
  }
LABEL_75:
  sub_463E0(*(void **)&v53[8]);
  return sub_10C78C(&v54);
}

void sub_14C938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  sub_463E0(a22);
  sub_11A520(v34);
  sub_10C78C(&a24);
  _Unwind_Resume(a1);
}

__n128 sub_14C9E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, __n128 *a6)
{
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = (void *)*a3;
  if (*(void *)a2 == *a3)
  {
LABEL_38:
    __n128 v30 = *a6;
    goto LABEL_39;
  }
  for (char i = *(void **)a4; *(void *)a4 != *a5; char i = *(void **)a4)
  {
    int v15 = *((_DWORD *)v8 + 7);
    int v16 = *((_DWORD *)i + 7);
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        long long v23 = (void *)v8[1];
        if (v23)
        {
          do
          {
            long long v24 = v23;
            long long v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            long long v24 = (void *)v8[2];
            BOOL v20 = *v24 == (void)v8;
            uint64_t v8 = v24;
          }
          while (!v20);
        }
        *(void *)a2 = v24;
        uint64_t v25 = *(void **)a4;
        uint64_t v26 = *(void **)(*(void *)a4 + 8);
        if (v26)
        {
          do
          {
            uint64_t v22 = v26;
            uint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v25[2];
            BOOL v20 = *v22 == (void)v25;
            uint64_t v25 = v22;
          }
          while (!v20);
        }
      }
      else
      {
        char v21 = (void *)i[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            char v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)i[2];
            BOOL v20 = *v22 == (void)i;
            char i = v22;
          }
          while (!v20);
        }
      }
      *(void *)a4 = v22;
    }
    else
    {
      sub_14CE28((uint64_t)a6, v15);
      uint64_t v17 = *(void **)a2;
      BOOL v18 = *(void **)(*(void *)a2 + 8);
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          BOOL v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v17[2];
          BOOL v20 = *v19 == (void)v17;
          uint64_t v17 = v19;
        }
        while (!v20);
      }
      *(void *)a2 = v19;
    }
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      goto LABEL_38;
    }
  }
  __n128 v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      sub_14CE28((uint64_t)&v30, *((_DWORD *)v8 + 7));
      uint64_t v27 = (void *)v8[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v8[2];
          BOOL v20 = *v28 == (void)v8;
          uint64_t v8 = v28;
        }
        while (!v20);
      }
      uint64_t v8 = v28;
    }
    while (v28 != v9);
    uint64_t v8 = v9;
  }
LABEL_39:
  __n128 result = v30;
  *(void *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t *sub_14CBD4(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_14CC60(v5, v6, *((_DWORD *)v4 + 7), *((_DWORD *)v4 + 7));
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_14CC60(uint64_t **a1, uint64_t *a2, int a3, int a4)
{
  int v5 = a2;
  BOOL v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (int v8 = *((_DWORD *)a2 + 7), v8 > a3))
  {
    uint64_t v9 = *a2;
    if (*a1 == a2)
    {
      __int16 v11 = a2;
LABEL_16:
      if (v9) {
        uint64_t v14 = (uint64_t **)v11;
      }
      else {
        uint64_t v14 = (uint64_t **)a2;
      }
      if (v9) {
        int v12 = (void **)(v11 + 1);
      }
      else {
        int v12 = (void **)a2;
      }
      goto LABEL_22;
    }
    if (v9)
    {
      uint64_t v10 = (uint64_t *)*a2;
      do
      {
        __int16 v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      int v16 = a2;
      do
      {
        __int16 v11 = (uint64_t *)v16[2];
        BOOL v17 = *v11 == (void)v16;
        int v16 = v11;
      }
      while (v17);
    }
    if (*((_DWORD *)v11 + 7) < a3) {
      goto LABEL_16;
    }
    BOOL v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v18;
          int v19 = *((_DWORD *)v18 + 7);
          if (v19 <= a3) {
            break;
          }
          BOOL v18 = *v14;
          BOOL v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v19 >= a3) {
          break;
        }
        BOOL v7 = v14 + 1;
        BOOL v18 = v14[1];
        if (!v18) {
          goto LABEL_44;
        }
      }
LABEL_46:
      int v12 = (void **)v7;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v8 >= a3) {
    return v5;
  }
  int v12 = (void **)(a2 + 1);
  int v13 = (void **)a2[1];
  if (v13)
  {
    do
    {
      int v12 = v13;
      int v13 = (void **)*v13;
      uint64_t v14 = (uint64_t **)v12;
      int v15 = v12;
    }
    while (v13);
  }
  else
  {
    int v15 = (void **)a2;
    do
    {
      BOOL v20 = v15;
      int v15 = (void **)v15[2];
    }
    while (*v15 != v20);
    uint64_t v14 = (uint64_t **)a2;
  }
  if (v15 != (void **)v7 && *((_DWORD *)v15 + 7) <= a3)
  {
    char v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v21;
          int v22 = *((_DWORD *)v21 + 7);
          if (v22 <= a3) {
            break;
          }
          char v21 = *v14;
          BOOL v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v22 >= a3) {
          goto LABEL_46;
        }
        BOOL v7 = v14 + 1;
        char v21 = v14[1];
        if (!v21) {
          goto LABEL_44;
        }
      }
    }
LABEL_43:
    uint64_t v14 = a1 + 1;
LABEL_44:
    int v5 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v5 + 7) = a4;
    sub_46CA8(a1, (uint64_t)v14, v7, v5);
    return v5;
  }
LABEL_22:
  int v5 = (uint64_t *)*v12;
  BOOL v7 = (uint64_t **)v12;
  if (!*v12) {
    goto LABEL_44;
  }
  return v5;
}

uint64_t sub_14CE28(uint64_t a1, int a2)
{
  unint64_t v3 = sub_14CC60(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      int v5 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      int v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      unint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

unsigned char *sub_14CE94(uint64_t a1, int a2)
{
  sub_3B7EC();
  BOOL v18 = &qword_64CC40;
  char v19 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    int v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v21 = "RoutingManager.cpp";
      __int16 v22 = 1024;
      int v23 = 4036;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  unint64_t v4 = (uint64_t **)(a1 + 536);
  int v5 = *(uint64_t **)(a1 + 536);
  if (v5)
  {
    uint64_t v6 = a1 + 536;
    uint64_t v7 = *(void *)(a1 + 536);
    do
    {
      int v8 = *(_DWORD *)(v7 + 28);
      BOOL v9 = v8 < a2;
      if (v8 >= a2) {
        uint64_t v10 = (uint64_t *)v7;
      }
      else {
        uint64_t v10 = (uint64_t *)(v7 + 8);
      }
      if (!v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
    if ((uint64_t **)v6 == v4 || *(_DWORD *)(v6 + 28) > a2)
    {
      while (1)
      {
        while (1)
        {
          __int16 v11 = (uint64_t **)v5;
          int v12 = *((_DWORD *)v5 + 7);
          if (v12 <= a2) {
            break;
          }
          int v5 = *v11;
          unint64_t v4 = v11;
          if (!*v11) {
            goto LABEL_19;
          }
        }
        if (v12 >= a2) {
          break;
        }
        int v5 = v11[1];
        if (!v5)
        {
          unint64_t v4 = v11 + 1;
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    __int16 v11 = (uint64_t **)(a1 + 536);
LABEL_19:
    int v13 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v13 + 7) = a2;
    sub_46CA8((uint64_t **)(a1 + 528), (uint64_t)v11, v4, v13);
  }
  return sub_10C78C(&v18);
}

void sub_14D0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_10C78C(&a9);
  _Unwind_Resume(a1);
}

unsigned char *sub_14D0E0(void *a1, int a2)
{
  sub_3B7EC();
  BOOL v18 = &qword_64CC40;
  char v19 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    int v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v21 = "RoutingManager.cpp";
      __int16 v22 = 1024;
      int v23 = 4051;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  unint64_t v4 = (uint64_t *)a1[67];
  if (v4)
  {
    int v5 = a1 + 67;
    uint64_t v6 = a1[67];
    do
    {
      int v7 = *(_DWORD *)(v6 + 28);
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        BOOL v9 = (uint64_t *)v6;
      }
      else {
        BOOL v9 = (uint64_t *)(v6 + 8);
      }
      if (!v8) {
        int v5 = (void *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != a1 + 67 && *((_DWORD *)v5 + 7) <= a2)
    {
      uint64_t v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          __int16 v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v5;
        do
        {
          __int16 v11 = (void *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if ((void *)a1[66] == v5) {
        a1[66] = v11;
      }
      --a1[68];
      sub_89144(v4, v5);
      operator delete(v5);
    }
  }
  return sub_10C78C(&v18);
}

void sub_14D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_10C78C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_14D324(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_14CBD4(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_14D364(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_14D378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_14D324((uint64_t *)v5, a3);
  sub_14C334(a1, a2, 1, v5);
  sub_463E0((void *)v5[1]);
}

void sub_14D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t *sub_14D3E0(uint64_t *a1, CFStringRef **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_14D434(a1, *a2, a2 + 1);
  return a1;
}

void sub_14D420(_Unwind_Exception *a1)
{
  sub_87810(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_14D434(uint64_t *result, CFStringRef *a2, CFStringRef **a3)
{
  if (a2 != (CFStringRef *)a3)
  {
    unint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      __n128 result = sub_146F6C(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      int v7 = (CFStringRef *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = (CFStringRef **)v7;
          int v7 = (CFStringRef *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (CFStringRef **)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (CFStringRef *)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (CFStringRef *)v8;
    }
    while (v8 != a3);
  }
  return result;
}

BOOL sub_14D4C0(uint64_t a1, int a2)
{
  sub_3B7EC();
  int v15 = &qword_64CC40;
  char v16 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    BOOL v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v18 = "RoutingManager.cpp";
      __int16 v19 = 1024;
      int v20 = 4106;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }
  uint64_t v4 = a1 + 536;
  uint64_t v5 = *(void *)(a1 + 536);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = a1 + 536;
  do
  {
    int v7 = *(_DWORD *)(v5 + 28);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v5;
    }
    else {
      BOOL v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 == v4 || *(_DWORD *)(v6 + 28) > a2) {
LABEL_12:
  }
    uint64_t v6 = a1 + 536;
  BOOL v10 = v6 != v4;
  sub_10C78C(&v15);
  return v10;
}

void sub_14D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_10C78C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_14D6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 64);
  uint64_t v7 = v2;
  do
  {
    unsigned int v8 = *(_DWORD *)(v3 + 32);
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v3;
    }
    else {
      BOOL v10 = (uint64_t *)(v3 + 8);
    }
    if (v9) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v10;
  }
  while (*v10);
  if (v7 == v2 || v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  uint64_t v13 = v7 + 40;
  uint64_t v14 = *(void *)(v7 + 48);
  if (v14 == v7 + 40)
  {
    uint64_t v11 = 0;
  }
  else
  {
    do
    {
      uint64_t v11 = sub_381DD4((void *)a2, v14 + 16);
      if (v11) {
        break;
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14 != v13);
  }
  uint64_t v15 = sub_32A48(8);
  if (*(unsigned char *)(v15 + 8))
  {
    char v16 = *(NSObject **)v15;
    if (*(void *)v15)
    {
      if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
      {
        BOOL v17 = v28;
        sub_2417C(v28, *(_DWORD *)(a2 + 64));
        if (v29 < 0) {
          BOOL v17 = (void **)v28[0];
        }
        sub_2417C(v26, *(_DWORD *)(*(void *)(a2 + 80) + 16));
        int v18 = v27;
        __int16 v19 = (void **)v26[0];
        unsigned int v20 = *(_DWORD *)a2;
        v24[0] = 1987011684;
        v24[1] = v20;
        sub_4D60(&__p, v24);
        char v21 = v26;
        uint64_t v31 = "RoutingManager.cpp";
        if (v18 < 0) {
          char v21 = v19;
        }
        __int16 v22 = "does not";
        if (v11) {
          __int16 v22 = "does";
        }
        __int16 v32 = 1024;
        int v33 = 4125;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316418;
        __int16 v34 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        long long v35 = v17;
        __int16 v36 = 2080;
        int v37 = v21;
        __int16 v38 = 2080;
        long long v39 = v22;
        __int16 v40 = 2080;
        int v41 = p_p;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category %s and mode %s %s support %s", buf, 0x3Au);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
      }
    }
  }
  return v11;
}

void sub_14D8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_14D92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v3 = *(void **)(a2 + 152);
  uint64_t v4 = (void *)(a2 + 160);
  v22[0] = (uint64_t **)a1;
  v22[1] = (uint64_t **)(a1 + 8);
  if (v3 != (void *)(a2 + 160))
  {
    while (1)
    {
      unsigned int v6 = (std::__shared_weak_count *)v3[5];
      if (!v6) {
        goto LABEL_8;
      }
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (!v7) {
        goto LABEL_8;
      }
      unsigned int v8 = v7;
      uint64_t v9 = v3[4];
      if (!v9) {
        break;
      }
      if (sub_1063DC(*(void **)(a3 + 8), (void *)a3, v3 + 4) == (void *)a3)
      {
        int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 152))(v9);
        sub_4636C(v8);
        if (v21) {
          sub_112CCC(v22, v3 + 4);
        }
      }
      else
      {
        sub_4636C(v8);
      }
LABEL_17:
      int v18 = (void *)v3[1];
      if (v18)
      {
        do
        {
          __int16 v19 = v18;
          int v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          __int16 v19 = (void *)v3[2];
          BOOL v20 = *v19 == (void)v3;
          uint64_t v3 = v19;
        }
        while (!v20);
      }
      uint64_t v3 = v19;
      if (v19 == v4) {
        return;
      }
    }
    sub_4636C(v7);
LABEL_8:
    uint64_t v10 = sub_32A48(23);
    uint64_t v11 = sub_32A48(8);
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_14;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_14:
    BOOL v17 = *(NSObject **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v24 = 1024;
      int v25 = 4218;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Previously specified port for override in cache has expired.", buf, 0x12u);
    }
    goto LABEL_17;
  }
}

void sub_14DB7C(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  sub_10E118(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_14DBA0(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v8 = a2;
  unint64_t v9 = HIDWORD(a2);
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v11 = v12;
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v15 = v10;
  do
  {
    unsigned int v16 = *(_DWORD *)(v11 + 32);
    BOOL v17 = v16 >= a2;
    if (v16 >= a2) {
      int v18 = (uint64_t *)v11;
    }
    else {
      int v18 = (uint64_t *)(v11 + 8);
    }
    if (v17) {
      uint64_t v15 = v11;
    }
    uint64_t v11 = *v18;
  }
  while (*v18);
  if (v15 != v10
    && *(_DWORD *)(v15 + 32) <= a2
    && (uint64_t v19 = v15 + 40, sub_241270(a4, v15 + 40, *(_DWORD *)(v15 + 72), a2, a3, a5)))
  {
    LODWORD(v34[0]) = a4;
    sub_6367C((uint64_t)buf, (unsigned int *)v34, 1);
    uint64_t v20 = sub_2424D0((uint64_t)buf, v19, v9, a6, a7);
    sub_463E0(*(void **)&v37[4]);
  }
  else
  {
LABEL_14:
    uint64_t v20 = 0;
  }
  uint64_t v21 = sub_32A48(8);
  if (*(unsigned char *)(v21 + 8))
  {
    __int16 v22 = *(NSObject **)v21;
    if (*(void *)v21)
    {
      if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v34, v8);
        if (v35 >= 0) {
          int v23 = v34;
        }
        else {
          int v23 = (void **)v34[0];
        }
        sub_2417C(v32, v9);
        int v24 = v33;
        int v25 = (void **)v32[0];
        sub_2417C(__p, a4);
        uint64_t v26 = v32;
        *(void *)int v37 = "RoutingManager.cpp";
        if (v24 < 0) {
          uint64_t v26 = v25;
        }
        char v27 = "does not";
        if (v20) {
          char v27 = "does";
        }
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)&v37[10] = 4240;
        uint64_t v28 = (void **)__p[0];
        *(_DWORD *)buf = 136316418;
        __int16 v38 = 2080;
        if (v31 >= 0) {
          uint64_t v28 = __p;
        }
        long long v39 = v23;
        __int16 v40 = 2080;
        int v41 = v26;
        __int16 v42 = 2080;
        uint64_t v43 = v27;
        __int16 v44 = 2080;
        CFTypeRef v45 = v28;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category %s and mode %s %s support port type %s", buf, 0x3Au);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        if (v33 < 0) {
          operator delete(v32[0]);
        }
        if (v35 < 0) {
          operator delete(v34[0]);
        }
      }
    }
  }
  return v20;
}

void sub_14DE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26)
{
}

void sub_14DE4C(uint64_t **a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v5 = v4;
    unsigned int v6 = v3;
    do
    {
      unsigned int v7 = *((_DWORD *)v6 + 7);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        unint64_t v9 = (uint64_t **)v6;
      }
      else {
        unint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      unsigned int v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 7) <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_89144(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t sub_14DF24(uint64_t a1, CFStringRef *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    CFComparisonResult v6 = CFStringCompare(*(CFStringRef *)(v3 + 32), *a2, 0);
    unsigned int v7 = (uint64_t *)(v3 + 8);
    if (v6 != kCFCompareLessThan)
    {
      unsigned int v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || CFStringCompare(*a2, *(CFStringRef *)(v5 + 32), 0) == kCFCompareLessThan) {
    return v2;
  }
  return v5;
}

uint64_t sub_14DFAC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = a2;
    CFComparisonResult v6 = &a2[10 * a3];
    unsigned int v7 = (void *)(a1 + 16);
    do
    {
      unint64_t v8 = *v5;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
        if (v11)
        {
          for (char i = *v11; i; char i = (uint64_t *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)i + 4) == v8) {
                goto LABEL_80;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v14 = operator new(0x38uLL);
      v38[0] = v14;
      v38[1] = a1 + 16;
      char v39 = 0;
      *uint64_t v14 = 0;
      v14[1] = v8;
      *((_DWORD *)v14 + 4) = v8;
      uint64_t v15 = *((void *)v5 + 4);
      if (v15)
      {
        if ((unsigned int *)v15 == v5 + 2)
        {
          v14[6] = v14 + 3;
          (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
          goto LABEL_24;
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
      }
      v14[6] = v15;
LABEL_24:
      char v39 = 1;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        BOOL v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v9);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          int8x8_t prime = (int8x8_t)v20;
        }
        else {
          int8x8_t prime = (int8x8_t)v19;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v9 = *(void *)(a1 + 8);
        if (*(void *)&prime <= v9)
        {
          if (*(void *)&prime < v9)
          {
            unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
            if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
            {
              unint64_t v28 = std::__next_prime(v28);
            }
            else
            {
              uint64_t v30 = 1 << -(char)__clz(v28 - 1);
              if (v28 >= 2) {
                unint64_t v28 = v30;
              }
            }
            if (*(void *)&prime <= v28) {
              int8x8_t prime = (int8x8_t)v28;
            }
            if (*(void *)&prime >= v9)
            {
              unint64_t v9 = *(void *)(a1 + 8);
            }
            else
            {
              if (prime) {
                goto LABEL_36;
              }
              __int16 v36 = *(void **)a1;
              *(void *)a1 = 0;
              if (v36) {
                operator delete(v36);
              }
              unint64_t v9 = 0;
              *(void *)(a1 + 8) = 0;
            }
          }
        }
        else
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          __int16 v22 = operator new(8 * *(void *)&prime);
          int v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          int v25 = (void *)*v7;
          if (*v7)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v7;
            char v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_61;
                  }
                  void *v25 = *v31;
                  void *v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  char v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_61:
                int v25 = v31;
                char v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
        }
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
      }
      char v33 = *(void **)(*(void *)a1 + 8 * v3);
      uint64_t v34 = v38[0];
      if (v33)
      {
        *(void *)v38[0] = *v33;
      }
      else
      {
        *(void *)v38[0] = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v34;
        *(void *)(*(void *)a1 + 8 * v3) = v7;
        if (!*(void *)v34) {
          goto LABEL_79;
        }
        unint64_t v35 = *(void *)(*(void *)v34 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v35 >= v9) {
            v35 %= v9;
          }
        }
        else
        {
          v35 &= v9 - 1;
        }
        char v33 = (void *)(*(void *)a1 + 8 * v35);
      }
      *char v33 = v34;
LABEL_79:
      v38[0] = 0;
      ++*(void *)(a1 + 24);
      sub_158CEC((uint64_t)v38);
LABEL_80:
      v5 += 10;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_14E448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_158CEC((uint64_t)va);
  sub_158C8C(v2);
  _Unwind_Resume(a1);
}

void *sub_14E474(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_14E4F8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = a2;
    CFComparisonResult v6 = &a2[10 * a3];
    unsigned int v7 = (void *)(a1 + 16);
    do
    {
      unint64_t v8 = *v5;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
        if (v11)
        {
          for (char i = *v11; i; char i = (uint64_t *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)i + 4) == v8) {
                goto LABEL_80;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v14 = operator new(0x38uLL);
      v38[0] = v14;
      v38[1] = a1 + 16;
      char v39 = 0;
      *uint64_t v14 = 0;
      v14[1] = v8;
      *((_DWORD *)v14 + 4) = v8;
      uint64_t v15 = *((void *)v5 + 4);
      if (v15)
      {
        if ((unsigned int *)v15 == v5 + 2)
        {
          v14[6] = v14 + 3;
          (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
          goto LABEL_24;
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
      }
      v14[6] = v15;
LABEL_24:
      char v39 = 1;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        BOOL v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v9);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          int8x8_t prime = (int8x8_t)v20;
        }
        else {
          int8x8_t prime = (int8x8_t)v19;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v9 = *(void *)(a1 + 8);
        if (*(void *)&prime <= v9)
        {
          if (*(void *)&prime < v9)
          {
            unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
            if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
            {
              unint64_t v28 = std::__next_prime(v28);
            }
            else
            {
              uint64_t v30 = 1 << -(char)__clz(v28 - 1);
              if (v28 >= 2) {
                unint64_t v28 = v30;
              }
            }
            if (*(void *)&prime <= v28) {
              int8x8_t prime = (int8x8_t)v28;
            }
            if (*(void *)&prime >= v9)
            {
              unint64_t v9 = *(void *)(a1 + 8);
            }
            else
            {
              if (prime) {
                goto LABEL_36;
              }
              __int16 v36 = *(void **)a1;
              *(void *)a1 = 0;
              if (v36) {
                operator delete(v36);
              }
              unint64_t v9 = 0;
              *(void *)(a1 + 8) = 0;
            }
          }
        }
        else
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          __int16 v22 = operator new(8 * *(void *)&prime);
          int v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          int v25 = (void *)*v7;
          if (*v7)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v7;
            char v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_61;
                  }
                  void *v25 = *v31;
                  void *v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  char v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_61:
                int v25 = v31;
                char v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
        }
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
      }
      char v33 = *(void **)(*(void *)a1 + 8 * v3);
      uint64_t v34 = v38[0];
      if (v33)
      {
        *(void *)v38[0] = *v33;
      }
      else
      {
        *(void *)v38[0] = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v34;
        *(void *)(*(void *)a1 + 8 * v3) = v7;
        if (!*(void *)v34) {
          goto LABEL_79;
        }
        unint64_t v35 = *(void *)(*(void *)v34 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v35 >= v9) {
            v35 %= v9;
          }
        }
        else
        {
          v35 &= v9 - 1;
        }
        char v33 = (void *)(*(void *)a1 + 8 * v35);
      }
      *char v33 = v34;
LABEL_79:
      v38[0] = 0;
      ++*(void *)(a1 + 24);
      sub_150838((uint64_t)v38);
LABEL_80:
      v5 += 10;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_14E994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_150838((uint64_t)va);
  sub_1507D8(v2);
  _Unwind_Resume(a1);
}

void *sub_14E9C0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double sub_14EA44(void *a1, _OWORD *a2)
{
  uint64_t v4 = (char *)operator new(0x98uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = off_638910;
  *((void *)v4 + 4) = -2609680281;
  *((_DWORD *)v4 + 10) = 0;
  *(void *)(v4 + 60) = 0x100000001;
  *(_OWORD *)(v4 + 44) = *(_OWORD *)"";
  *(_OWORD *)(v4 + 72) = *a2;
  v4[88] = 0;
  v4[136] = 0;
  double result = 2.11004386e262;
  *((void *)v4 + 18) = 0x76657167766F6C75;
  *((void *)v4 + 3) = off_638948;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_14EAF8(uint64_t a1)
{
  *(void *)a1 = &off_638988;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }

  operator delete();
}

uint64_t sub_14EB70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_14EB78()
{
  return 1685287015;
}

void sub_14EB84(void (***a1)(void, uint64_t *), uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (**a1)(a1, &v3);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_14EBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14EC0C(uint64_t a1)
{
  *(void *)a1 = &off_638988;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_14EC5C(double a1, double a2)
{
  double v2 = a1;
  double v3 = a2;
  operator new();
}

void sub_14ECE4()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_14ED14(uint64_t a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v7[0] = 0;
  char v9 = 0;
  sub_14EDBC(a1, a2, a3, a4, (uint64_t)v7);
  if (v9) {
    sub_463E0(v8);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)(a1 + 152) = 0x76657167766F6C75;
  return a1;
}

void sub_14ED94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_463E0(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14EDBC(uint64_t a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  int v9 = *(unsigned __int8 *)(a5 + 48);
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_14F0E0((uint64_t)v24, a5);
  if (v9) {
    int v10 = 1935895666;
  }
  else {
    int v10 = 1684234860;
  }
  sub_14F154((void *)a1, v10, a3, a4, (uint64_t)v24);
  if (v26) {
    sub_463E0(v25);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)a1 = off_63A510;
  *(_OWORD *)(a1 + 128) = *a2;
  *(float *)(a1 + 144) = sub_14F22C((double *)a1);
  *(void *)(a1 + 148) = 0x700000001;
  *(_DWORD *)(a1 + 156) = 5;
  *(void *)(a1 + 176) = 0x100000001;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)"";
  if (*(double *)(a1 + 136) < *(double *)(a1 + 128))
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        double v13 = *(double *)(a1 + 128);
        double v14 = *(double *)(a1 + 136);
        *(_DWORD *)buf = 136315906;
        unint64_t v28 = "VolumeControl.h";
        __int16 v29 = 1024;
        int v30 = 1336;
        __int16 v31 = 2048;
        double v32 = v13;
        __int16 v33 = 2048;
        double v34 = v14;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Encountered an invalid range for the variable EQ's current gain parameter: [%f, %f]\"", buf, 0x26u);
      }
    }
  }
  if (*(unsigned char *)(a1 + 88))
  {
    double v15 = *(void *)(a1 + 64) ? *(float *)(*(void *)(a1 + 48) + 36) : 0.0;
    if (*(double *)(a1 + 128) != v15 || (double v16 = sub_792A4(a1 + 40), *(double *)(a1 + 136) != *(float *)&v16))
    {
      float v17 = (os_log_t *)sub_32A48(13);
      BOOL v18 = *v17;
      if (*v17)
      {
        if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          if (*(void *)(a1 + 64)) {
            double v19 = *(float *)(*(void *)(a1 + 48) + 36);
          }
          else {
            double v19 = 0.0;
          }
          double v20 = sub_792A4(a1 + 40);
          uint64_t v21 = *(void *)(a1 + 128);
          uint64_t v22 = *(void *)(a1 + 136);
          *(_DWORD *)buf = 136316418;
          unint64_t v28 = "VolumeControl.h";
          __int16 v29 = 1024;
          int v30 = 1341;
          __int16 v31 = 2048;
          double v32 = v19;
          __int16 v33 = 2048;
          double v34 = *(float *)&v20;
          __int16 v35 = 2048;
          uint64_t v36 = v21;
          __int16 v37 = 2048;
          uint64_t v38 = v22;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"VolumeCurve's range [%f, %f] doesn't match volume range of command [%f, %f]\"", buf, 0x3Au);
        }
      }
    }
  }
  return a1;
}

void sub_14F098(_Unwind_Exception *a1)
{
  sub_35B9EC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_14F0E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    sub_15050C(a1 + 8, (void *)(a2 + 8));
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_14F138(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_463E0(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *sub_14F154(void *a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_14F0E0((uint64_t)v9, a5);
  sub_35C370((uint64_t)a1, a2, v12, (uint64_t)v9);
  if (v11) {
    sub_463E0(v10);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *a1 = off_6398A8;
  return a1;
}

void sub_14F1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_463E0(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

float sub_14F22C(double *a1)
{
  int v2 = (*(uint64_t (**)(double *))(*(void *)a1 + 136))(a1);
  float result = 0.0;
  if (v2 != 1935895666)
  {
    if (v2 != 1684234860)
    {
      int v4 = v2;
      uint64_t v5 = (os_log_t *)sub_32A48(13);
      CFComparisonResult v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315650;
          int v9 = "VolumeControl.h";
          __int16 v10 = 1024;
          int v11 = 1397;
          __int16 v12 = 1024;
          int v13 = v4;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered an invalid volume unit type: %d\"", (uint8_t *)&v8, 0x18u);
        }
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }
    return a1[16];
  }
  return result;
}

void sub_14F384(_Unwind_Exception *exception_object)
{
}

void sub_14F3A0()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      int v4 = "VolumeControl.h";
      __int16 v5 = 1024;
      int v6 = 416;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SoftwareVolumeCommand does not supports dB to Scalar convertion\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SoftwareVolumeCommand does not supports dB to Scalar convertion");
}

void sub_14F46C(_Unwind_Exception *exception_object)
{
}

void sub_14F488()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      int v4 = "VolumeControl.h";
      __int16 v5 = 1024;
      int v6 = 410;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SoftwareVolumeCommand does not supports dB to Scalar convertion\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SoftwareVolumeCommand does not supports dB to Scalar convertion");
}

void sub_14F554(_Unwind_Exception *exception_object)
{
}

uint64_t sub_14F570()
{
  return 0;
}

uint64_t sub_14F578()
{
  return 0;
}

uint64_t sub_14F590()
{
  return 0;
}

uint64_t sub_14F598(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88)) {
    return a1 + 40;
  }
  else {
    return 0;
  }
}

uint64_t sub_14F5B0()
{
  return 0;
}

uint64_t sub_14F5B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

void sub_14F5C0(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(uint64_t, float))(*(void *)a1 + 16))(a1, *(float *)(a1 + 144));
    int v3 = 1;
  }
  else
  {
    float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, 1684234860);
    float v5 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, 1935895666);
    sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 152), v4);
    sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 156), v5);
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 148) = v3;
}

uint64_t sub_14F6C8()
{
  return 0;
}

BOOL sub_14F6D0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) != 0;
}

void sub_14F6E0(uint64_t a1, unsigned int a2, int a3, float a4, float a5)
{
  int v50 = a3;
  if (*(_DWORD *)(a1 + 160))
  {
    __int16 v10 = (os_log_t *)sub_32A48(38);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        __int16 v12 = "enabled";
      }
      else {
        __int16 v12 = "disabled";
      }
      int v13 = v48;
      sub_2417C(v48, *(_DWORD *)(a1 + 160));
      if (v49 < 0) {
        int v13 = (void **)v48[0];
      }
      sub_2417C(v46, a2);
      int v14 = v47;
      double v15 = (void **)v46[0];
      sub_14FDE0((uint64_t)__p, a1);
      double v16 = v46;
      if (v14 < 0) {
        double v16 = v15;
      }
      *(_DWORD *)buf = 136316930;
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      if (v45 >= 0) {
        float v17 = __p;
      }
      else {
        float v17 = (void **)__p[0];
      }
      __int16 v52 = 1024;
      int v53 = 1461;
      __int16 v54 = 2080;
      char v55 = (void *)v12;
      __int16 v56 = 2080;
      *(void *)uint64_t v57 = v13;
      *(_WORD *)&v57[8] = 2080;
      std::string v58 = v16;
      __int16 v59 = 2048;
      double v60 = a4;
      __int16 v61 = 2048;
      double v62 = a5;
      __int16 v63 = 2080;
      BOOL v64 = v17;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f on chain '%s'.", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
    }
    if (a2 != 1)
    {
      BOOL v18 = (os_log_t *)sub_32A48(13);
      double v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v48, a2);
          double v20 = v49 >= 0 ? v48 : (void **)v48[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v52 = 1024;
          int v53 = 1463;
          __int16 v54 = 2080;
          char v55 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"duck type: '%s' not supported!\"", buf, 0x1Cu);
          if (v49 < 0) {
            operator delete(v48[0]);
          }
        }
      }
    }
    *(_DWORD *)buf = *(_DWORD *)(a1 + 164);
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, buf);
    v46[0] = v21;
    if (!v21)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    *(_DWORD *)buf = *(_DWORD *)(a1 + 168);
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      char v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
    }
    *(_DWORD *)buf = *(_DWORD *)(a1 + 172);
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, buf);
    CFNumberRef v43 = v23;
    if (!v23)
    {
      __int16 v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }
    float v24 = a5 * 1000.0;
    int v25 = *(_DWORD *)(a1 + 176);
    if (*(_DWORD *)(a1 + 180) != 1) {
      float v24 = a5;
    }
    float v42 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v41 = a4;
    sub_14FEB4(buf, v21, &v50);
    sub_14FF9C((int *)((char *)&v53 + 2), v22, (int *)&v41);
    sub_14FF9C(&v57[2], v23, (int *)&v42);
    v48[0] = buf;
    v48[1] = &def_1E50E8 + 3;
    CFDictionaryRef v26 = sub_4D3D8((uint64_t)v48);
    for (uint64_t i = 0; i != -6; i -= 2)
    {
      unint64_t v28 = (&v58)[i];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = *(const void **)&v57[i * 8 + 2];
      if (v29) {
        CFRelease(v29);
      }
    }
    *(void *)buf = v26;
    sub_35D6A8(a1, 0x64737067u, *(_DWORD *)(a1 + 160));
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }
  if (sub_20ADA4() && sub_35DD7C((void *)a1, 0x64737067u))
  {
    uint64_t v30 = sub_298DA4();
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 288))(v30);
    int v32 = v31;
    if (a3) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v31 == 0;
    }
    int v34 = v33;
    LODWORD(v48[0]) = v34;
    __int16 v35 = (os_log_t *)sub_32A48(38);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      int v53 = 1507;
      __int16 v37 = "enabled";
      __int16 v54 = 2080;
      *(_DWORD *)buf = 136316162;
      __int16 v52 = 1024;
      if (!a3) {
        __int16 v37 = "disabled";
      }
      char v55 = (void *)v37;
      __int16 v56 = 1024;
      *(_DWORD *)uint64_t v57 = v32;
      *(_WORD *)&v57[4] = 1024;
      *(_DWORD *)&v57[6] = v34;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Duck %s, enhance dialog level %u, Set AUSI bypass %u", buf, 0x28u);
    }
    sub_35D6A8(a1, 0x64737067u, 0x73697073u);
  }
}

void sub_14FCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_14FDE0(uint64_t a1, uint64_t a2)
{
  int v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3)
  {
    float v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *(void *)(a2 + 24);
      if (v7)
      {
        if (*(char *)(v7 + 735) < 0)
        {
          sub_21E8C((unsigned char *)a1, *(void **)(v7 + 712), *(void *)(v7 + 720));
        }
        else
        {
          int v8 = (long long *)(v7 + 712);
          long long v9 = *v8;
          *(void *)(a1 + 16) = *((void *)v8 + 2);
          *(_OWORD *)a1 = v9;
        }
        sub_4636C(v6);
        return;
      }
      sub_4636C(v5);
    }
  }

  sub_21C8C((void *)a1, "unknown");
}

void sub_14FEA0(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void *sub_14FEB4(void *a1, CFTypeRef cf, int *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  int valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_14FF5C(_Unwind_Exception *a1)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_14FF9C(void *a1, CFTypeRef cf, int *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  int valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_150044(_Unwind_Exception *a1)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

double sub_150084()
{
  return 0.0;
}

double sub_15008C()
{
  return 0.0;
}

uint64_t sub_150094()
{
  return 0;
}

void sub_1500A4(uint64_t a1, float a2)
{
  float v2 = a2;
  *(float *)(a1 + 144) = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1) == 1935895666)
  {
    sub_796B4(a1 + 40, v2);
    float v2 = v4;
  }
  double v6 = *(double *)(a1 + 128);
  double v5 = *(double *)(a1 + 136);
  float v7 = v5 - v6;
  float v8 = v2 - v6;
  float v9 = fminf(fmaxf(v8 / v7, 0.0), 1.0);
  BOOL v10 = v6 <= v2;
  double v11 = 0.5;
  if (!v10) {
    double v11 = 0.0;
  }
  float v12 = v11;
  if (v5 >= v2) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  if (v7 == 0.0) {
    float v14 = v13;
  }
  else {
    float v14 = v9;
  }
  uint64_t v15 = sub_32A48(18);
  uint64_t v16 = sub_32A48(38);
  char v17 = 0;
  uint64_t v18 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v21) {
      goto LABEL_17;
    }
  }
  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_17:
  CFNumberRef v22 = *(NSObject **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v25 >= 0) {
      CFNumberRef v23 = __p;
    }
    else {
      CFNumberRef v23 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v27 = 1024;
    int v28 = 1426;
    __int16 v29 = 2048;
    double v30 = v2;
    __int16 v31 = 2048;
    double v32 = v14;
    __int16 v33 = 2080;
    int v34 = v23;
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_INFO, "%25s:%-5d Setting Volume (VEQv2) with preGain %f dB, currentGain %f on chain '%s'.", buf, 0x30u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 152), v2);
  sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 156), v14);
}

void sub_150304(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

uint64_t sub_150340()
{
  return 0;
}

void sub_150348(uint64_t a1, unsigned int a2, int a3, float a4, float a5)
{
  BOOL v10 = (os_log_t *)sub_32A48(38);
  double v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(v19, a2);
    int v12 = v20;
    float v13 = (void **)v19[0];
    sub_14FDE0((uint64_t)__p, a1);
    CFNumberRef v22 = "VolumeControl.h";
    float v14 = v19;
    if (v12 < 0) {
      float v14 = v13;
    }
    __int16 v23 = 1024;
    int v24 = 313;
    CFDictionaryRef v26 = v14;
    uint64_t v15 = "disabled";
    *(_DWORD *)buf = 136316674;
    if (a3) {
      uint64_t v15 = "enabled";
    }
    __int16 v25 = 2080;
    if (v18 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    __int16 v27 = 2080;
    int v28 = v15;
    __int16 v29 = 2048;
    double v30 = a4;
    __int16 v31 = 2048;
    double v32 = a5;
    __int16 v33 = 2080;
    int v34 = v16;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume ducking is not supported for this volume command, %s type: %s, gain: %f, time: %f, chain: '%s'.", buf, 0x44u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
}

void sub_1504E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_15050C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  int v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  float v4 = a2 + 1;
  double v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      double v6 = *(uint64_t **)(a1 + 8);
      float v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      float v9 = v3;
      if (v6)
      {
        do
        {
          float v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          float v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          float v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          int v12 = v7;
        }
        else {
          int v12 = v3;
        }
        if (v6) {
          float v13 = v7 + 1;
        }
        else {
          float v13 = v3;
        }
      }
      else
      {
        int v12 = v3;
        float v13 = v3;
        if (v6)
        {
          float v13 = v3;
          while (1)
          {
            while (1)
            {
              int v12 = (uint64_t **)v6;
              int v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17) {
                break;
              }
              double v6 = *v12;
              float v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            float v13 = v12 + 1;
            double v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        float v14 = (uint64_t *)operator new(0x30uLL);
        *(uint64_t *)((char *)v14 + 28) = *(void *)((char *)v5 + 28);
        *(uint64_t *)((char *)v14 + 36) = *(void *)((char *)v5 + 36);
        sub_46CA8((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          double v5 = v16;
        }
        while (!v10);
      }
      double v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_150678(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_15068C()
{
}

void sub_15070C()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_150740(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_150764(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638910;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1507B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1507D8(uint64_t a1)
{
  float v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      sub_14E9C0(v2 + 3);
      operator delete(v2);
      float v2 = v3;
    }
    while (v3);
  }
  float v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_150838(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_14E9C0(v1 + 3);
    }
    operator delete(v1);
  }
}

uint64_t sub_150890(uint64_t a1, uint64_t a2, void *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B7E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64B7E8))
  {
    sub_150948();
    __cxa_guard_release(&qword_64B7E8);
  }
  uint64_t v4 = qword_64B7D8;
  double v5 = (std::__shared_weak_count *)unk_64B7E0;
  if (unk_64B7E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_64B7E0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1509D8(a3, v4, (uint64_t)v5);
  if (v5) {
    sub_4636C(v5);
  }
  return 0;
}

void sub_15091C(_Unwind_Exception *a1)
{
}

double sub_150948()
{
  uint64_t v0 = (char *)operator new(0x48uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = off_622D20;
  *((void *)v0 + 4) = -2609680281;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001;
  double result = *(double *)"rulb";
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"rulb";
  *((void *)v0 + 3) = off_622D58;
  qword_64B7D8 = (uint64_t)(v0 + 24);
  unk_64B7E0 = v0;
  return result;
}

void sub_1509D8(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v4 = a2;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v4 + 1) = a3;
  unint64_t v6 = a1[22];
  unint64_t v5 = a1[23];
  if (v6 < v5)
  {
    *(_OWORD *)unint64_t v6 = v4;
    *(_DWORD *)(v6 + 16) = 0;
    float v7 = (char *)(v6 + 24);
    a1[22] = v6 + 24;
    goto LABEL_20;
  }
  long long v22 = v4;
  uint64_t v8 = a1[21];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 3);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_60548();
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 3);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v10;
  }
  float v13 = (char *)sub_21974(v12);
  float v14 = &v13[24 * v9];
  uint64_t v16 = &v13[24 * v15];
  *(_OWORD *)float v14 = v22;
  *((_DWORD *)v14 + 4) = 0;
  float v7 = v14 + 24;
  int v17 = (char *)a1[21];
  char v18 = (char *)a1[22];
  if (v18 == v17)
  {
    a1[21] = v14;
    a1[22] = v7;
    a1[23] = v16;
    if (!v18) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    long long v19 = *(_OWORD *)(v18 - 24);
    v18 -= 24;
    *(_OWORD *)(v14 - 24) = v19;
    v14 -= 24;
    *(void *)char v18 = 0;
    *((void *)v18 + 1) = 0;
    *((_DWORD *)v14 + 4) = *((_DWORD *)v18 + 4);
  }
  while (v18 != v17);
  char v20 = (char *)a1[21];
  char v18 = (char *)a1[22];
  a1[21] = v14;
  a1[22] = v7;
  a1[23] = v16;
  if (v18 != v20)
  {
    do
    {
      char v21 = (std::__shared_weak_count *)*((void *)v18 - 2);
      if (v21) {
        sub_4636C(v21);
      }
      v18 -= 24;
    }
    while (v18 != v20);
    char v18 = v20;
  }
  if (v18) {
LABEL_19:
  }
    operator delete(v18);
LABEL_20:
  a1[22] = v7;
}

void sub_150B3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_150B54()
{
}

uint64_t sub_150B6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_150B74()
{
  return 1685287015;
}

void sub_150B80()
{
}

void sub_150D28()
{
  sub_35B9EC(v0);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  operator delete();
}

uint64_t sub_150D78(uint64_t a1, int a2, int a3, int a4, long long *a5, uint64_t a6, std::__shared_weak_count *a7)
{
  if (a7) {
    atomic_fetch_add_explicit(&a7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_151470((void *)a1, a2, a6, a7);
  if (a7) {
    std::__shared_weak_count::__release_weak(a7);
  }
  *(void *)a1 = &off_639770;
  *(_DWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 132) = a4;
  long long v12 = *a5;
  *(void *)(a1 + 152) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 136) = v12;
  return a1;
}

void sub_150E18(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_150E30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_150E38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

BOOL sub_150E40(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) != 0;
}

void sub_150E50(unsigned int *a1, unsigned int a2, int a3, float a4, float a5)
{
  int v42 = a3;
  if (a1[34])
  {
    unint64_t v10 = (os_log_t *)sub_32A48(38);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        long long v12 = "enabled";
      }
      else {
        long long v12 = "disabled";
      }
      float v13 = v40;
      sub_2417C(v40, a1[34]);
      if (v41 < 0) {
        float v13 = (void **)v40[0];
      }
      sub_2417C(v38, a2);
      int v14 = v39;
      uint64_t v15 = (void **)v38[0];
      sub_14FDE0((uint64_t)__p, (uint64_t)a1);
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      uint64_t v16 = v38;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      *(_DWORD *)buf = 136316930;
      __int16 v44 = 1024;
      if (v37 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      int v45 = 576;
      __int16 v46 = 2080;
      char v47 = (void *)v12;
      __int16 v48 = 2080;
      char v49 = v13;
      __int16 v50 = 2080;
      uint64_t v51 = v16;
      __int16 v52 = 2048;
      double v53 = a4;
      __int16 v54 = 2048;
      double v55 = a5;
      __int16 v56 = 2080;
      uint64_t v57 = v17;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f, chain: '%s'.", buf, 0x4Eu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }
    if (a2 != 1)
    {
      char v18 = (os_log_t *)sub_32A48(13);
      long long v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v40, a2);
          char v20 = v41 >= 0 ? v40 : (void **)v40[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v44 = 1024;
          int v45 = 578;
          __int16 v46 = 2080;
          char v47 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"duck type: '%s' not supported!\"", buf, 0x1Cu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }
        }
      }
    }
    *(_DWORD *)buf = a1[35];
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, buf);
    v38[0] = v21;
    if (!v21)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    *(_DWORD *)buf = a1[36];
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      __int16 v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }
    *(_DWORD *)buf = a1[37];
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, buf);
    CFNumberRef v35 = v23;
    if (!v23)
    {
      double v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
    }
    float v24 = a5 * 1000.0;
    unsigned int v25 = a1[38];
    if (a1[39] != 1) {
      float v24 = a5;
    }
    float v34 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v33 = a4;
    sub_14FEB4(buf, v21, &v42);
    sub_14FF9C((int *)((char *)&v45 + 2), v22, (int *)&v33);
    sub_14FF9C((void ***)((char *)&v49 + 2), v23, (int *)&v34);
    v40[0] = buf;
    v40[1] = &def_1E50E8 + 3;
    CFDictionaryRef v26 = sub_4D3D8((uint64_t)v40);
    for (uint64_t i = 0; i != -6; i -= 2)
    {
      int v28 = (&v51)[i];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = *(void ***)((char *)&(&v49)[i] + 2);
      if (v29) {
        CFRelease(v29);
      }
    }
    *(void *)buf = v26;
    sub_35D6A8((uint64_t)a1, 0x64737067u, a1[34]);
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }
}

void sub_151310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_151434(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void *sub_151470(void *a1, int a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_35C414((uint64_t)a1, a2, a3, a4);
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *a1 = off_6398A8;
  return a1;
}

void sub_1514DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1514F4(uint64_t a1)
{
  float v2 = 0.0;
  sub_35CFA8(a1, 0x64737067u, *(_DWORD *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_151534(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 132))
  {
    if (a2) {
      float v3 = 0.0;
    }
    else {
      float v3 = 1.0;
    }
    uint64_t v4 = sub_32A48(18);
    uint64_t v5 = sub_32A48(38);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_11;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_11:
    unint64_t v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      sub_14FDE0((uint64_t)__p, a1);
      if (v14 >= 0) {
        long long v12 = __p;
      }
      else {
        long long v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      __int16 v16 = 1024;
      int v17 = 554;
      __int16 v18 = 2048;
      double v19 = v3;
      __int16 v20 = 2080;
      CFNumberRef v21 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting mute value: %.2f for chain '%s'.", buf, 0x26u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 132), v3);
  }
}

void sub_1516E8(uint64_t a1, float a2)
{
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  unint64_t v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v14 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 541;
    __int16 v18 = 2048;
    double v19 = a2;
    __int16 v20 = 2080;
    CFNumberRef v21 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 128), a2);
}

void sub_151888(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

uint64_t sub_1518C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_1518EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_622D20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_151940(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_622D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_151960(uint64_t a1, uint64_t a2, void *a3)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 152);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a1 + 152));
  }
  CFDictionaryRef v19 = v4;
  sub_21C8C(__p, "PortType");
  LODWORD(v17[0]) = 1886613611;
  unsigned int v5 = sub_170A5C(&v19, __p, (unsigned int *)v17);
  if (SBYTE3(v24) < 0)
  {
    operator delete(*(void **)__p);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v4) {
LABEL_7:
  }
    CFRelease(v4);
LABEL_8:
  if ((sub_16F108(v5) & 1) == 0)
  {
    long long v12 = (os_log_t *)sub_32A48(13);
    float v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      __int16 v21 = 1024;
      int v22 = 622;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (v5 == 1886613611)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B8E8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64B8E8))
    {
      uint64_t v15 = (char *)operator new(0x48uLL);
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *(void *)uint64_t v15 = off_622CA8;
      *((void *)v15 + 4) = -2609680281;
      *((_DWORD *)v15 + 10) = 0;
      *(void *)(v15 + 60) = 0x100000001;
      *(_OWORD *)(v15 + 44) = *(_OWORD *)"";
      *((void *)v15 + 3) = off_622CE0;
      qword_64B8D8 = (uint64_t)(v15 + 24);
      unk_64B8E0 = v15;
      __cxa_guard_release(&qword_64B8E8);
    }
    uint64_t v6 = qword_64B8D8;
    uint64_t v7 = (std::__shared_weak_count *)unk_64B8E0;
    if (unk_64B8E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_64B8E0 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = (os_log_t *)sub_32A48(24);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      sub_2417C(v17, v5);
      char v10 = v18 >= 0 ? v17 : (void **)v17[0];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      __int16 v21 = 1024;
      int v22 = 638;
      __int16 v23 = 2080;
      float v24 = v10;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Default Volume taper command for port %s.", __p, 0x1Cu);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B900, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64B900))
    {
      __int16 v16 = (char *)operator new(0x48uLL);
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *(void *)__int16 v16 = off_622CA8;
      *((void *)v16 + 4) = -2609680281;
      *((_DWORD *)v16 + 10) = 0;
      *(void *)(v16 + 60) = 0x100000001;
      *(_OWORD *)(v16 + 44) = *(_OWORD *)"";
      *((void *)v16 + 3) = off_622CE0;
      qword_64B8F0 = (uint64_t)(v16 + 24);
      *(void *)algn_64B8F8 = v16;
      __cxa_guard_release(&qword_64B900);
    }
    uint64_t v6 = qword_64B8F0;
    uint64_t v7 = *(std::__shared_weak_count **)algn_64B8F8;
    if (*(void *)algn_64B8F8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64B8F8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  sub_1509D8(a3, v6, (uint64_t)v7);
  if (v7) {
    sub_4636C(v7);
  }
  return 0;
}

void sub_151D34(_Unwind_Exception *a1)
{
}

void sub_151DB8()
{
}

void sub_151DD0()
{
}

void sub_151E50()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_151E80(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, int a4, int a5)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_151470((void *)a1, 1935895666, a2, a3);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *(void *)a1 = off_638AB8;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 172) = a5;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(a1 + 176));
  *(_DWORD *)(a1 + 240) = 1987341684;
  uint64_t v9 = (os_log_t *)sub_32A48(41);
  char v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    sub_14FDE0((uint64_t)__p, a1);
    unint64_t v11 = (void **)__p[0];
    long long v12 = " does not ";
    if (v16 >= 0) {
      unint64_t v11 = __p;
    }
    if (*(_DWORD *)(a1 + 168)) {
      float v13 = " does not ";
    }
    else {
      float v13 = " ";
    }
    if (!*(_DWORD *)(a1 + 172)) {
      long long v12 = " ";
    }
    *(_DWORD *)buf = 136316162;
    char v18 = "VolumeControl.h";
    __int16 v19 = 1024;
    int v20 = 1614;
    __int16 v21 = 2080;
    int v22 = v11;
    __int16 v23 = 2080;
    float v24 = v13;
    __int16 v25 = 2080;
    CFDictionaryRef v26 = v12;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SoftwareVolumeCommand_VolumeTaper_Graph() - creating volume taper command for chain '%s'. Volume command%ssupports volume ramping. Volume command%ssupports unit convertion", buf, 0x30u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_152040(_Unwind_Exception *a1)
{
  std::recursive_mutex::~recursive_mutex(v2);
  sub_152084((void *)(v1 + 128));
  sub_35B9EC(v1);
  _Unwind_Resume(a1);
}

void sub_152070()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  JUMPOUT(0x152068);
}

void *sub_152084(void *a1)
{
  float v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float sub_152108(uint64_t a1, float a2)
{
  CFDictionaryRef v4 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  int v16 = 1;
  float v15 = a2;
  sub_35D6A8(a1, 0x64737067u, 0x76747063u);
  sub_35DF9C(a1, 0x76747063u, (uint64_t)v14, 8);
  if (LODWORD(v14[1]) == 1)
  {
    unsigned int v5 = (os_log_t *)sub_32A48(41);
    os_log_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      char v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1802;
      __int16 v21 = 2048;
      double v22 = a2;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertScalarTodB() Failed to convert %f Scalar to dB. Out"
           "put value: %f Scalar";
      uint64_t v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
LABEL_8:
      _os_log_impl(&def_1E50E8, v8, v9, v7, buf, 0x26u);
    }
  }
  else
  {
    char v10 = (os_log_t *)sub_32A48(41);
    os_log_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315906;
      char v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1808;
      __int16 v21 = 2048;
      double v22 = v15;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertScalarTodB() Successfully converted %f scalar to %f dB";
      uint64_t v8 = v11;
      os_log_type_t v9 = OS_LOG_TYPE_INFO;
      goto LABEL_8;
    }
  }
  float v12 = v14[0];
  std::recursive_mutex::unlock(v4);
  return v12;
}

void sub_1522EC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float sub_152308(uint64_t a1, float a2)
{
  CFDictionaryRef v4 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  int v16 = 0;
  float v15 = a2;
  sub_35D6A8(a1, 0x64737067u, 0x76747063u);
  sub_35DF9C(a1, 0x76747063u, (uint64_t)v14, 8);
  if (LODWORD(v14[1]))
  {
    unsigned int v5 = (os_log_t *)sub_32A48(41);
    os_log_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315906;
      char v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1781;
      __int16 v21 = 2048;
      double v22 = v15;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertdBToScalar() Successfully converted %f dB to %f scalar.";
      uint64_t v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_INFO;
LABEL_8:
      _os_log_impl(&def_1E50E8, v8, v9, v7, buf, 0x26u);
    }
  }
  else
  {
    char v10 = (os_log_t *)sub_32A48(41);
    os_log_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      char v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1775;
      __int16 v21 = 2048;
      double v22 = a2;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertdBToScalar() Failed to convert %f dB to scalar. Out"
           "put value: %f dB";
      uint64_t v8 = v11;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      goto LABEL_8;
    }
  }
  float v12 = v14[0];
  std::recursive_mutex::unlock(v4);
  return v12;
}

void sub_1524E4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_152500(uint64_t a1)
{
  return *(_DWORD *)(a1 + 172) == 0;
}

BOOL sub_152510(uint64_t a1)
{
  return *(void *)(a1 + 152) != 0;
}

uint64_t sub_152520(uint64_t a1, int a2, float a3)
{
  os_log_t v6 = (os_log_t *)sub_32A48(41);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = "not ramping";
    uint64_t v9 = *(void *)(a1 + 152);
    *(_DWORD *)buf = 136316162;
    char v14 = "VolumeControl.h";
    if (a2) {
      uint64_t v8 = "ramping";
    }
    __int16 v15 = 1024;
    int v16 = 1703;
    char v18 = v8;
    __int16 v17 = 2080;
    __int16 v19 = 2048;
    double v20 = a3;
    if (v9) {
      char v10 = "active";
    }
    else {
      char v10 = "nullptr";
    }
    __int16 v21 = 2080;
    double v22 = v10;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::VolumeRampUpdated() - ramp state %s slider position %.2f callback is %s.", buf, 0x30u);
  }
  uint64_t result = *(void *)(a1 + 152);
  if (result)
  {
    char v12 = a2;
    *(float *)buf = a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint8_t *))(*(void *)result + 48))(result, &v12, buf);
  }
  *(float *)(a1 + 160) = a3;
  *(unsigned char *)(a1 + 164) = 1;
  return result;
}

void *sub_152698(uint64_t a1, void *a2)
{
  CFDictionaryRef v4 = (os_log_t *)sub_32A48(41);
  unsigned int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    os_log_t v6 = "active";
    uint64_t v7 = a2[3];
    *(void *)&v13[4] = "VolumeControl.h";
    *(_DWORD *)float v13 = 136315650;
    if (!v7) {
      os_log_t v6 = "nullptr";
    }
    __int16 v14 = 1024;
    int v15 = 1694;
    __int16 v16 = 2080;
    *(void *)__int16 v17 = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SetVolumeRampListener() - callback is %s.", v13, 0x1Cu);
  }
  uint64_t v8 = (void *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      *(void *)&v17[4] = v13;
      (*(void (**)(void *, unsigned char *))(*a2 + 24))(a2, v13);
    }
    else
    {
      *(void *)&v17[4] = (*(uint64_t (**)(void *))(*v8 + 16))(v8);
    }
  }
  else
  {
    *(void *)&v17[4] = 0;
  }
  uint64_t v9 = a1 + 128;
  if ((unsigned char *)(a1 + 128) != v13)
  {
    uint64_t v10 = *(void *)&v17[4];
    uint64_t v11 = *(void *)(a1 + 152);
    if (*(unsigned char **)&v17[4] == v13)
    {
      if (v11 == v9)
      {
        (*(void (**)(unsigned char *, void *))(*(void *)v13 + 24))(v13, v18);
        (*(void (**)(void))(**(void **)&v17[4] + 32))(*(void *)&v17[4]);
        *(void *)&v17[4] = 0;
        (*(void (**)(void, unsigned char *))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), v13);
        (*(void (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
        *(void *)(a1 + 152) = 0;
        *(void *)&v17[4] = v13;
        (*(void (**)(void *, uint64_t))(v18[0] + 24))(v18, a1 + 128);
        (*(void (**)(void *))(v18[0] + 32))(v18);
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(*(void *)v13 + 24))(v13, a1 + 128);
        (*(void (**)(void))(**(void **)&v17[4] + 32))(*(void *)&v17[4]);
        *(void *)&v17[4] = *(void *)(a1 + 152);
      }
      *(void *)(a1 + 152) = v9;
    }
    else if (v11 == v9)
    {
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 24))(a1 + 128, v13);
      (*(void (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
      *(void *)(a1 + 152) = *(void *)&v17[4];
      *(void *)&v17[4] = v13;
    }
    else
    {
      *(void *)&v17[4] = *(void *)(a1 + 152);
      *(void *)(a1 + 152) = v10;
    }
  }
  return sub_152084(v13);
}

void sub_152A2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_152A38(uint64_t a1)
{
  float v2 = (os_log_t *)sub_32A48(41);
  float v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    unsigned int v5 = "VolumeControl.h";
    __int16 v6 = 1024;
    int v7 = 1685;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::CancelVolumeRamp().", (uint8_t *)&v4, 0x12u);
  }
  sub_35C4B4(a1, 0x64737067u, 0x7674726Du, 0.0);
}

void sub_152B14(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_t *)sub_32A48(41);
  unsigned int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    float v6 = *(float *)a2;
    float v7 = *(float *)(a2 + 4);
    float v8 = *(float *)(a2 + 8);
    sub_21B7C(v14, *(CFStringRef *)(a2 + 16));
    double v9 = v7;
    unint64_t v10 = v15;
    if ((v15 & 0x80u) != 0) {
      unint64_t v10 = (unint64_t)v14[1];
    }
    if (v10)
    {
      sub_21B7C(__p, *(CFStringRef *)(a2 + 16));
      if (v13 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316418;
      __int16 v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 1671;
      __int16 v20 = 2048;
      double v21 = v6;
      __int16 v22 = 2048;
      double v23 = v9;
      __int16 v24 = 2048;
      double v25 = v8;
      __int16 v26 = 2080;
      __int16 v27 = (const char *)v11;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::StartVolumeRamp() - target: %.2f upward rate: %.2fms downward rate: %.2fms category: '%s'.", buf, 0x3Au);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      __int16 v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 1671;
      __int16 v20 = 2048;
      double v21 = v6;
      __int16 v22 = 2048;
      double v23 = v9;
      __int16 v24 = 2048;
      double v25 = v8;
      __int16 v26 = 2080;
      __int16 v27 = "unknown";
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::StartVolumeRamp() - target: %.2f upward rate: %.2fms downward rate: %.2fms category: '%s'.", buf, 0x3Au);
    }
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
  }
  sub_35C4B4(a1, 0x64737067u, 0x7674726Du, 1.0);
  sub_35C4B4(a1, 0x64737067u, 0x76747275u, 1.0);
  sub_35C4B4(a1, 0x64737067u, 0x76747375u, *(float *)(a2 + 4));
  sub_35C4B4(a1, 0x64737067u, 0x76747364u, *(float *)(a2 + 8));
  sub_35C4B4(a1, 0x64737067u, 0x76747673u, *(float *)a2);
}

void sub_152D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_152DB8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 168) == 0;
}

void sub_152DC8(uint64_t a1, int a2)
{
  int v4 = (os_log_t *)sub_32A48(41);
  unsigned int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    float v6 = "disabled";
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    *(_DWORD *)buf = 136315650;
    if (a2) {
      float v6 = "enabled";
    }
    __int16 v17 = 1024;
    int v18 = 1719;
    __int16 v19 = 2080;
    __int16 v20 = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::EnableWritableSoftwareVolumeProcessors() - %s.", buf, 0x1Cu);
  }
  if (a2 && *(unsigned char *)(a1 + 164)) {
    (*(void (**)(uint64_t, float))(*(void *)a1 + 16))(a1, *(float *)(a1 + 160));
  }
  float v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7)
  {
    float v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      double v9 = v8;
      uint64_t v10 = *(void *)(a1 + 24);
      if (v10)
      {
        sub_21C8C(buf, "AUVolumeTaper");
        v15[0] = v10;
        v15[1] = v9;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_153064(buf, a2, v15);
        sub_4636C(v9);
        if (SBYTE3(v20) < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v11 = *(std::__shared_weak_count **)(v10 + 816);
        if (v11)
        {
          uint64_t v12 = *(void *)(v10 + 808);
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          char v13 = std::__shared_weak_count::lock(v11);
          std::__shared_weak_count::__release_weak(v11);
          if (v13)
          {
            if (v12 && sub_2506C8(v12))
            {
              sub_21C8C(buf, "AUControlFreak");
              v14[0] = v10;
              v14[1] = v9;
              atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_153064(buf, a2, v14);
              sub_4636C(v9);
              if (SBYTE3(v20) < 0) {
                operator delete(*(void **)buf);
              }
            }
            sub_4636C(v13);
          }
        }
      }
      sub_4636C(v9);
    }
  }
}

void sub_152FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_4636C(v18);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_4636C(v19);
  sub_4636C(v18);
  _Unwind_Resume(a1);
}

void sub_153064(const UInt8 *a1, int a2, void *a3)
{
  *(_DWORD *)bytes = a2 ^ 1;
  sub_22210((CFStringRef *)buf, "AUName");
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    float v6 = a1;
  }
  else {
    float v6 = *(const UInt8 **)a1;
  }
  if (v5 >= 0) {
    CFIndex v7 = a1[23];
  }
  else {
    CFIndex v7 = *((void *)a1 + 1);
  }
  *(void *)&void v24[4] = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
  if (!*(void *)&v24[4])
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int v20 = 21;
  sub_153414((uint64_t)&v24[12], "ID", &v20);
  CFDataRef v8 = CFDataCreate(0, bytes, 4);
  if (!v8)
  {
    int v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Could not construct");
  }
  sub_1534E8(&cf, v8);
  sub_1535A0((uint64_t)&v28 + 2, "data", &cf);
  v21[0] = buf;
  v21[1] = 3;
  CFDictionaryRef v9 = sub_4D3D8((uint64_t)v21);
  uint64_t v10 = 0;
  v21[2] = v9;
  do
  {
    uint64_t v11 = *(const void **)&v31[v10];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)((char *)&v28 + v10 + 2);
    if (v12) {
      CFRelease(v12);
    }
    v10 -= 16;
  }
  while (v10 != -48);
  if (cf) {
    CFRelease(cf);
  }
  v21[0] = v9;
  int v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, void *, uint64_t, void))(*(void *)*a3 + 112))(*a3, 1685287015, 1652060274, v21, 8, 0);
  __int16 v14 = (os_log_t *)sub_32A48(38);
  unsigned __int8 v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0) {
      __int16 v16 = a1;
    }
    else {
      __int16 v16 = *(const UInt8 **)a1;
    }
    *(_DWORD *)buf = 136316162;
    *(void *)__int16 v24 = "VolumeControl.h";
    *(_WORD *)&v24[8] = 1024;
    *(_DWORD *)&v24[10] = 1738;
    __int16 v25 = 2080;
    __int16 v26 = v16;
    __int16 v27 = 1024;
    int v28 = *(_DWORD *)bytes;
    __int16 v29 = 1024;
    int v30 = v13;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Result of setting bypass of %s to %u: %u", buf, 0x28u);
  }
  CFRelease(v9);
}

void sub_153330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, CFTypeRef cf)
{
  __cxa_free_exception(v16);
  do
  {
    v17 -= 16;
    sub_602D0((uint64_t)v17);
  }
  while (v17 != &a15);
  _Unwind_Resume(a1);
}

uint64_t sub_153414(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1534AC(_Unwind_Exception *a1)
{
  float v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_1534E8(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return a1;
}

void sub_153570(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1535A0(uint64_t a1, char *a2, const void **a3)
{
  sub_22210((CFStringRef *)a1, a2);
  CFNumberRef v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

BOOL sub_1535E4(uint64_t a1)
{
  float v6 = 0.0;
  if (*(_DWORD *)(a1 + 240))
  {
    if (sub_35CD88((void *)a1))
    {
      sub_35CFA8(a1, 0x64737067u, *(_DWORD *)(a1 + 240), &v6);
      float v2 = (os_log_t *)sub_32A48(41);
      CFTypeID v3 = *v2;
      if (*v2)
      {
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          int v4 = "unmute";
          CFDataRef v8 = "VolumeControl.h";
          if (v6 > 0.0) {
            int v4 = "mute";
          }
          __int16 v9 = 1024;
          int v10 = 1660;
          __int16 v11 = 2080;
          uint64_t v12 = v4;
          _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::GetMute() - %s.", buf, 0x1Cu);
        }
      }
    }
  }
  return v6 <= 0.0;
}

void sub_153704(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 240) && sub_35CD88((void *)a1))
  {
    int v4 = (os_log_t *)sub_32A48(41);
    CFNumberRef v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      float v6 = "unmute";
      __int16 v9 = "VolumeControl.h";
      int v8 = 136315650;
      if (!a2) {
        float v6 = "mute";
      }
      __int16 v10 = 1024;
      int v11 = 1648;
      __int16 v12 = 2080;
      int v13 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SetMute() - %s.", (uint8_t *)&v8, 0x1Cu);
    }
    float v7 = 0.0;
    if (!a2) {
      float v7 = 1.0;
    }
    sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 240), v7);
  }
}

void sub_153828(uint64_t a1, float a2)
{
  int v4 = (os_log_t *)sub_32A48(41);
  CFNumberRef v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315650;
    float v7 = "VolumeControl.h";
    __int16 v8 = 1024;
    int v9 = 1627;
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SetVolume() - setting volume to %.2f.", (uint8_t *)&v6, 0x1Cu);
  }
  if (!*(_DWORD *)(a1 + 168))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 240))(a1);
    sub_35C4B4(a1, 0x64737067u, 0x76747375u, 0.0);
    sub_35C4B4(a1, 0x64737067u, 0x76747364u, 0.0);
  }
  sub_35C4B4(a1, 0x64737067u, 0x76747673u, a2);
  *(float *)(a1 + 160) = a2;
  *(unsigned char *)(a1 + 164) = 1;
}

void sub_153994(uint64_t a1)
{
  *(void *)a1 = off_638AB8;
  float v2 = (void *)(a1 + 128);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 176));
  sub_152084(v2);
  sub_35B9EC(a1);

  operator delete();
}

uint64_t sub_153A0C(uint64_t a1)
{
  *(void *)a1 = off_638AB8;
  float v2 = (void *)(a1 + 128);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 176));
  sub_152084(v2);

  return sub_35B9EC(a1);
}

uint64_t sub_153A74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_153A98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_622CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_153AEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_622CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_153B0C(void *a1, uint64_t a2, void *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64B848))
  {
    sub_153D08(&qword_64B838, 1752659567, 1);
    __cxa_guard_release(&qword_64B848);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_64B860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_64B860))
  {
    sub_153D08(&qword_64B850, 1752659567, 0);
    __cxa_guard_release(qword_64B860);
  }
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  BOOL v6 = (v5 & 0x80u) != 0;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a1[1];
  }
  if (v6) {
    a1 = (void *)*a1;
  }
  if (v5 >= 11)
  {
    float v7 = (char *)a1 + v5;
    __int16 v8 = a1;
    do
    {
      int v9 = (char *)memchr(v8, 118, v5 - 10);
      if (!v9) {
        break;
      }
      if (*(void *)v9 == 0x696C656D756C6F76 && *(void *)(v9 + 3) == 0x74696D696C656D75)
      {
        if (v9 == v7 || v9 - (char *)a1 == -1) {
          break;
        }
        uint64_t v11 = qword_64B838;
        __int16 v12 = (std::__shared_weak_count *)unk_64B840;
        if (unk_64B840) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_64B840 + 8), 1uLL, memory_order_relaxed);
        }
        goto LABEL_23;
      }
      __int16 v8 = v9 + 1;
      uint64_t v5 = v7 - (unsigned char *)v8;
    }
    while (v7 - (unsigned char *)v8 >= 11);
  }
  uint64_t v11 = qword_64B850;
  __int16 v12 = *(std::__shared_weak_count **)algn_64B858;
  if (*(void *)algn_64B858) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64B858 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_23:
  sub_1509D8(a3, v11, (uint64_t)v12);
  if (v12) {
    sub_4636C(v12);
  }
  return 0;
}

void sub_153CC8(_Unwind_Exception *a1)
{
}

double sub_153D08(void *a1, int a2, char a3)
{
  BOOL v6 = (char *)operator new(0x48uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)BOOL v6 = off_638DA0;
  *((_DWORD *)v6 + 8) = 1685287015;
  *((_DWORD *)v6 + 9) = a2;
  *((_DWORD *)v6 + 10) = 0;
  *(void *)(v6 + 60) = 0x100000001;
  double result = *(double *)"";
  *(_OWORD *)(v6 + 44) = *(_OWORD *)"";
  *((void *)v6 + 3) = off_639250;
  v6[68] = a3;
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

uint64_t sub_153DB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_153DD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_153E2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_153E4C(uint64_t a1, uint64_t a2, void *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64B830))
  {
    sub_153F10(1953918828);
    __cxa_guard_release(&qword_64B830);
  }
  uint64_t v4 = qword_64B820;
  uint64_t v5 = *(std::__shared_weak_count **)algn_64B828;
  if (*(void *)algn_64B828) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64B828 + 8), 1uLL, memory_order_relaxed);
  }
  sub_153F88(a3, v4, (uint64_t)v5, 0);
  if (v5) {
    sub_4636C(v5);
  }
  return 0;
}

void sub_153EE4(_Unwind_Exception *a1)
{
}

void *sub_153F10(int a1)
{
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = off_638EB8;
  result[3] = off_638EF0;
  *((_DWORD *)result + 8) = a1;
  qword_64B820 = (uint64_t)(result + 3);
  *(void *)algn_64B828 = result;
  return result;
}

void sub_153F88(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)&long long v6 = a2;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v6 + 1) = a3;
  unint64_t v8 = a1[25];
  unint64_t v7 = a1[26];
  if (v8 < v7)
  {
    *(_OWORD *)unint64_t v8 = v6;
    *(_DWORD *)(v8 + 16) = a4;
    int v9 = (char *)(v8 + 24);
    a1[25] = v8 + 24;
    goto LABEL_20;
  }
  long long v24 = v6;
  uint64_t v10 = a1[24];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
  unint64_t v12 = v11 + 1;
  if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_60548();
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
  if (2 * v13 > v12) {
    unint64_t v12 = 2 * v13;
  }
  if (v13 >= 0x555555555555555) {
    unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v14 = v12;
  }
  unsigned __int8 v15 = (char *)sub_21974(v14);
  __int16 v16 = &v15[24 * v11];
  int v18 = &v15[24 * v17];
  *(_OWORD *)__int16 v16 = v24;
  *((_DWORD *)v16 + 4) = a4;
  int v9 = v16 + 24;
  __int16 v19 = (char *)a1[24];
  int v20 = (char *)a1[25];
  if (v20 == v19)
  {
    a1[24] = v16;
    a1[25] = v9;
    a1[26] = v18;
    if (!v20) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    long long v21 = *(_OWORD *)(v20 - 24);
    v20 -= 24;
    *(_OWORD *)(v16 - 24) = v21;
    v16 -= 24;
    *(void *)int v20 = 0;
    *((void *)v20 + 1) = 0;
    *((_DWORD *)v16 + 4) = *((_DWORD *)v20 + 4);
  }
  while (v20 != v19);
  __int16 v22 = (char *)a1[24];
  int v20 = (char *)a1[25];
  a1[24] = v16;
  a1[25] = v9;
  a1[26] = v18;
  if (v20 != v22)
  {
    do
    {
      double v23 = (std::__shared_weak_count *)*((void *)v20 - 2);
      if (v23) {
        sub_4636C(v23);
      }
      v20 -= 24;
    }
    while (v20 != v22);
    int v20 = v22;
  }
  if (v20) {
LABEL_19:
  }
    operator delete(v20);
LABEL_20:
  a1[25] = v9;
}

void sub_1540F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_154108()
{
  return 1685287015;
}

void sub_154114()
{
}

uint64_t sub_154130(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void sub_154154(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1541A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1541C8(uint64_t a1, uint64_t a2, void *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B818, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64B818))
  {
    sub_154288(1819701100);
    __cxa_guard_release(&qword_64B818);
  }
  uint64_t v4 = qword_64B808;
  uint64_t v5 = (std::__shared_weak_count *)unk_64B810;
  if (unk_64B810) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_64B810 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1509D8(a3, v4, (uint64_t)v5);
  if (v5) {
    sub_4636C(v5);
  }
  return 0;
}

void sub_15425C(_Unwind_Exception *a1)
{
}

double sub_154288(int a1)
{
  float v2 = (char *)operator new(0x78uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)float v2 = off_638E80;
  *((_DWORD *)v2 + 8) = 1685287015;
  *((_DWORD *)v2 + 9) = a1;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001;
  *(_OWORD *)(v2 + 44) = *(_OWORD *)"";
  *((void *)v2 + 3) = off_639190;
  *((_DWORD *)v2 + 18) = dword_64B758;
  sub_15050C((uint64_t)(v2 + 80), qword_64B760);
  double result = *(double *)&xmmword_64B778;
  *(_OWORD *)(v2 + 104) = xmmword_64B778;
  qword_64B808 = (uint64_t)(v2 + 24);
  unk_64B810 = v2;
  return result;
}

void sub_154358(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_154374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_154398(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638E80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1543EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_15440C(uint64_t a1, uint64_t a2, void *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64B800))
  {
    sub_1544C8(2);
    __cxa_guard_release(&qword_64B800);
  }
  uint64_t v4 = qword_64B7F0;
  uint64_t v5 = *(std::__shared_weak_count **)algn_64B7F8;
  if (*(void *)algn_64B7F8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64B7F8 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1509D8(a3, v4, (uint64_t)v5);
  if (v5) {
    sub_4636C(v5);
  }
  return 0;
}

void sub_15449C(_Unwind_Exception *a1)
{
}

double sub_1544C8(int a1)
{
  float v2 = (char *)operator new(0x48uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)float v2 = off_622ED0;
  *((_DWORD *)v2 + 8) = 1668312369;
  *((_DWORD *)v2 + 9) = a1;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001;
  double result = *(double *)"";
  *(_OWORD *)(v2 + 44) = *(_OWORD *)"";
  *((void *)v2 + 3) = off_6388D0;
  qword_64B7F0 = (uint64_t)(v2 + 24);
  *(void *)algn_64B7F8 = v2;
  return result;
}

void sub_154564()
{
}

uint64_t sub_15457C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_154584()
{
  return 1668312369;
}

uint64_t sub_154594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_1545B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_622ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_15460C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_622ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_15462C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)(a1 + 152);
  if (!v5) {
    goto LABEL_47;
  }
  if (!sub_D85C4((const __CFDictionary *)v5, (const UInt8 *)"DuckParameters"))
  {
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 152);
    if (!v6)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_66F3C(exception);
    }
    if (!sub_D85C4(v6, (const UInt8 *)"dBGainBoxUsedWithVolu"))
    {
      uint64_t v5 = *(const void **)(a1 + 152);
LABEL_47:
      sub_1563F0(v5, (void *)a3);
      return 0;
    }
  }
  unint64_t v7 = (os_log_t *)sub_32A48(24);
  unint64_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = a3 + 24;
    uint64_t v10 = *(void *)(a3 + 24);
    int v11 = *(char *)(a3 + 47);
    CFDictionaryRef v12 = *(const __CFDictionary **)(a1 + 152);
    *(void *)&buf[24] = 0;
    sub_1555D4((uint64_t)v84, v12, 0, (uint64_t)buf);
    if (v11 < 0) {
      uint64_t v9 = v10;
    }
    sub_156078(buf);
    if (v85 >= 0) {
      unint64_t v13 = v84;
    }
    else {
      unint64_t v13 = *(unsigned char **)v84;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 656;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v9;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&unsigned char buf[30] = v13;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Creating custom volume command property for config %s. Volume info: %s", buf, 0x26u);
    if (v85 < 0) {
      operator delete(*(void **)v84);
    }
  }
  CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 152);
  if (v14) {
    CFRetain(*(CFTypeRef *)(a1 + 152));
  }
  sub_21C8C(buf, "MuteParameter");
  *(_DWORD *)int v84 = 0;
  if (v14) {
    int v15 = sub_1560FC(v14, buf, (unsigned int *)v84);
  }
  else {
    int v15 = 0;
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v14) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v14) {
LABEL_23:
  }
    CFRelease(v14);
LABEL_24:
  CFDictionaryRef v16 = *(const __CFDictionary **)(a1 + 152);
  if (v16) {
    CFRetain(*(CFTypeRef *)(a1 + 152));
  }
  sub_21C8C(buf, "dBGainBoxUsedWithVolu");
  if (v16)
  {
    unsigned int v17 = (unsigned __int16)sub_156140(v16, buf);
    if (v17 <= 0x100) {
      LOBYTE(v17) = 0;
    }
    int v18 = v17;
  }
  else
  {
    int v18 = 0;
  }
  if ((buf[23] & 0x80000000) == 0)
  {
    if (!v16) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  operator delete(*(void **)buf);
  if (v16) {
LABEL_35:
  }
    CFRelease(v16);
LABEL_36:
  CFDictionaryRef v19 = *(const __CFDictionary **)(a1 + 152);
  if (!v19)
  {
    __int16 v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
  }
  if (sub_D85C4(v19, (const UInt8 *)"DuckParameters"))
  {
    CFDictionaryRef v20 = *(const __CFDictionary **)(a1 + 152);
    if (!v20)
    {
      __int16 v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v63, "Could not construct");
    }
    sub_156174(&cf, v20, (const UInt8 *)"DuckParameters");
    CFTypeRef v21 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *(void *)int v84 = v21;
    sub_21C8C(buf, "ID");
    LODWORD(v77[0]) = 0;
    unsigned int v22 = sub_170A5C((const __CFDictionary **)v84, buf, (unsigned int *)v77);
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v21) {
        goto LABEL_51;
      }
    }
    else if (!v21)
    {
LABEL_51:
      CFDictionaryRef v25 = (const __CFDictionary *)cf;
      if (cf) {
        CFRetain(cf);
      }
      sub_21C8C(buf, "EnableKey");
      LODWORD(v77[0]) = 0;
      if (v25) {
        int v75 = sub_1560FC(v25, buf, (unsigned int *)v77);
      }
      else {
        int v75 = 0;
      }
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (!v25) {
          goto LABEL_61;
        }
      }
      else if (!v25)
      {
LABEL_61:
        CFDictionaryRef v26 = (const __CFDictionary *)cf;
        if (cf) {
          CFRetain(cf);
        }
        sub_21C8C(buf, "GainKey");
        LODWORD(v77[0]) = 0;
        if (v26) {
          int v74 = sub_1560FC(v26, buf, (unsigned int *)v77);
        }
        else {
          int v74 = 0;
        }
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (!v26) {
            goto LABEL_71;
          }
        }
        else if (!v26)
        {
LABEL_71:
          CFDictionaryRef v27 = (const __CFDictionary *)cf;
          if (cf) {
            CFRetain(cf);
          }
          sub_21C8C(buf, "TimeKey");
          LODWORD(v77[0]) = 0;
          if (v27) {
            int v73 = sub_1560FC(v27, buf, (unsigned int *)v77);
          }
          else {
            int v73 = 0;
          }
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (!v27) {
              goto LABEL_81;
            }
          }
          else if (!v27)
          {
LABEL_81:
            CFDictionaryRef v28 = (const __CFDictionary *)cf;
            if (cf) {
              CFRetain(cf);
            }
            v77[0] = v28;
            sub_21C8C(buf, "GainUnitType");
            unint64_t v29 = sub_15620C(v77, buf);
            if ((buf[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)buf);
              if (!v28) {
                goto LABEL_88;
              }
            }
            else if (!v28)
            {
LABEL_88:
              CFTypeRef v30 = cf;
              if (cf) {
                CFRetain(cf);
              }
              *(void *)uint64_t v81 = v30;
              sub_21C8C(buf, "TimeUnitType");
              unint64_t v31 = sub_15620C((const __CFDictionary **)v81, buf);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              unsigned int v72 = v22;
              if (v30) {
                CFRelease(v30);
              }
              int v32 = 0;
              if (v31 > 0x100000000) {
                int v32 = v31;
              }
              int v71 = v32;
              if (HIDWORD(v29)) {
                int v33 = v29;
              }
              else {
                int v33 = 1;
              }
              if (cf) {
                CFRelease(cf);
              }
              if (v18)
              {
                double v23 = (char *)operator new(0x48uLL);
                *((void *)v23 + 1) = 0;
                *((void *)v23 + 2) = 0;
                *(void *)double v23 = off_63C688;
                uint64_t v24 = (uint64_t)(v23 + 24);
                *((_DWORD *)v23 + 12) = v75;
                *((_DWORD *)v23 + 13) = v74;
                *((_DWORD *)v23 + 14) = v73;
                *((_DWORD *)v23 + 15) = v33;
                *((_DWORD *)v23 + 16) = v71;
                *((void *)v23 + 4) = 0x766F6C7564737067;
                *((_DWORD *)v23 + 11) = v72;
                goto LABEL_103;
              }
              CFDictionaryRef v34 = *(const __CFDictionary **)(a1 + 152);
              if (!v34)
              {
                BOOL v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v64, "Could not construct");
              }
              if (!sub_D85C4(v34, (const UInt8 *)"VolumeCurve"))
              {
                *(_DWORD *)buf = dword_64B758;
                sub_15050C((uint64_t)&buf[8], qword_64B760);
                *(_OWORD *)&unsigned char buf[32] = xmmword_64B778;
LABEL_134:
                if (*(void *)&buf[24]) {
                  double v52 = *(float *)(*(void *)&buf[8] + 36);
                }
                else {
                  double v52 = 0.0;
                }
                double v53 = sub_792A4((uint64_t)buf);
                float v54 = *(float *)&v53;
                double v23 = (char *)operator new(0x98uLL);
                *((void *)v23 + 1) = 0;
                *((void *)v23 + 2) = 0;
                *(void *)double v23 = off_63C700;
                uint64_t v24 = (uint64_t)(v23 + 24);
                *((_DWORD *)v23 + 12) = v75;
                *((_DWORD *)v23 + 13) = v74;
                *((_DWORD *)v23 + 14) = v73;
                *((_DWORD *)v23 + 15) = v33;
                *((_DWORD *)v23 + 16) = v71;
                *((void *)v23 + 4) = -2609680281;
                *((_DWORD *)v23 + 10) = 0;
                *((_DWORD *)v23 + 11) = v72;
                *((void *)v23 + 3) = &off_63C778;
                *((double *)v23 + 9) = v52;
                *((double *)v23 + 10) = v54;
                *((_DWORD *)v23 + 22) = *(_DWORD *)buf;
                sub_15050C((uint64_t)(v23 + 96), &buf[8]);
                *(_OWORD *)(v23 + 120) = *(_OWORD *)&buf[32];
                v23[136] = 1;
                *((void *)v23 + 18) = 0x76657167766F6C75;
                *((void *)v23 + 3) = off_63C738;
                sub_463E0(*(void **)&buf[16]);
                goto LABEL_138;
              }
              CFDictionaryRef v35 = *(const __CFDictionary **)(a1 + 152);
              if (!v35)
              {
                uint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v65, "Could not construct");
              }
              sub_156174(&v76, v35, (const UInt8 *)"VolumeCurve");
              *(_DWORD *)buf = 0;
              *(void *)&_DWORD buf[16] = 0;
              *(void *)&buf[24] = 0;
              *(void *)&buf[8] = &buf[16];
              unsigned char buf[32] = 1;
              *(_DWORD *)&unsigned char buf[36] = 5;
              *(void *)&uint8_t buf[40] = 0x3F80000040000000;
              if (!v76)
              {
                std::string::size_type v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v66, "Could not construct");
              }
              CFNumberRef v36 = (const __CFNumber *)sub_D86AC((const __CFDictionary *)v76, (const UInt8 *)"TransferFunction");
              if (v36)
              {
                CFNumberRef v37 = sub_22314(v36);
                unsigned int v38 = 0;
                if ((unint64_t)v37 > 0x100000000) {
                  unsigned int v38 = v37;
                }
                *(_DWORD *)&unsigned char buf[36] = v38;
                if (v38 > 0xF)
                {
                  float v39 = 1.0;
                  float v40 = 2.0;
                  char v41 = 1;
                  goto LABEL_116;
                }
              }
              else
              {
                unsigned int v38 = 0;
                *(_DWORD *)&unsigned char buf[36] = 0;
              }
              char v41 = byte_4E7CF0[v38];
              float v40 = flt_4E7E38[v38];
              float v39 = flt_4E7E78[v38];
LABEL_116:
              unsigned char buf[32] = v41;
              *(float *)&uint8_t buf[40] = v40;
              *(float *)&buf[44] = v39;
              if (!v76)
              {
                uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v67, "Could not construct");
              }
              int v42 = sub_D86AC((const __CFDictionary *)v76, (const UInt8 *)"VolumeCurvePoints");
              if (v42)
              {
                CFNumberRef v43 = v42;
                CFRetain(v42);
                CFTypeID v44 = CFGetTypeID(v43);
                if (v44 == CFArrayGetTypeID())
                {
                  *(void *)int v84 = v43;
                  v84[8] = 1;
                  CFRetain(v43);
                  sub_206D8((uint64_t)v84);
                  if (CFArrayGetCount((CFArrayRef)v43))
                  {
                    CFIndex Count = CFArrayGetCount((CFArrayRef)v43);
                    CFIndex v46 = CFArrayGetCount((CFArrayRef)v43);
                    if (Count)
                    {
                      CFIndex v47 = v46;
                      unint64_t v48 = 0;
                      do
                      {
                        if (v47 == v48) {
                          break;
                        }
                        sub_68838(&cf, (CFArrayRef)v43, v48);
                        sub_688E8(&v78, &cf);
                        if (!v78)
                        {
                          double v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v60, "Could not construct");
                        }
                        sub_156364((uint64_t)v84, (const __CFDictionary *)v78, (const UInt8 *)"scalar");
                        if (!v78)
                        {
                          __int16 v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v61, "Could not construct");
                        }
                        sub_156364((uint64_t)v77, (const __CFDictionary *)v78, (const UInt8 *)"dB");
                        __int16 v50 = *(void **)v84;
                        if (*(void *)&v84[8] - *(void *)v84 == 8)
                        {
                          CFDictionaryRef v51 = v77[0];
                          if ((const __CFDictionary *)(v77[1] - v77[0]) == (const __CFDictionary *)&dword_8) {
                            continue;
                          }
                        }
                        __int16 v56 = (os_log_t *)sub_32A48(13);
                        uint64_t v57 = *v56;
                        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)uint64_t v81 = 136315394;
                          *(void *)&v81[4] = "DSPGraphConfig_Actions.cpp";
                          __int16 v82 = 1024;
                          int v83 = 536;
                          _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v81, 0x12u);
                        }
                        std::string v58 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        std::logic_error::logic_error(v58, "Precondition failure.");
                        LODWORD(v49) = *(_DWORD *)v77[0];
                        sub_792F0((uint64_t)buf, vcvts_n_s32_f32(**(float **)v84, 0x1FuLL), vcvts_n_s32_f32(*(float *)(*(void *)v84 + 4), 0x1FuLL), v49, *((float *)v77[0] + 1));
                        operator delete(v51);
                        operator delete(v50);
                        if (v78) {
                          CFRelease(v78);
                        }
                        if (cf) {
                          CFRelease(cf);
                        }
                        ++v48;
                      }
                      while (Count != v48);
                    }
                    CFRelease(v43);
                    if (v76) {
                      CFRelease(v76);
                    }
                    goto LABEL_134;
                  }
LABEL_155:
                  uint64_t v68 = (os_log_t *)sub_32A48(13);
                  int v69 = *v68;
                  if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int v84 = 136315394;
                    *(void *)&v84[4] = "DSPGraphConfig_Actions.cpp";
                    *(_WORD *)&v84[12] = 1024;
                    *(_DWORD *)&v84[14] = 521;
                    _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v84, 0x12u);
                  }
                  std::string::size_type v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v70, "Precondition failure.");
                }
                CFRelease(v43);
              }
              v84[0] = 0;
              v84[8] = 0;
              sub_206D8((uint64_t)v84);
              goto LABEL_155;
            }
            CFRelease(v28);
            goto LABEL_88;
          }
          CFRelease(v27);
          goto LABEL_81;
        }
        CFRelease(v26);
        goto LABEL_71;
      }
      CFRelease(v25);
      goto LABEL_61;
    }
    CFRelease(v21);
    goto LABEL_51;
  }
  if (v18)
  {
    double v23 = (char *)operator new(0x48uLL);
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = 0;
    *(void *)double v23 = off_63C688;
    uint64_t v24 = (uint64_t)(v23 + 24);
    *(void *)(v23 + 60) = 0x100000001;
    *(_OWORD *)(v23 + 44) = *(_OWORD *)"";
    *((void *)v23 + 4) = 0x766F6C7564737067;
LABEL_103:
    *((_DWORD *)v23 + 10) = v15;
    *((void *)v23 + 3) = off_63C6C0;
LABEL_138:
    sub_1509D8((void *)a3, v24, (uint64_t)v23);
    sub_4636C((std::__shared_weak_count *)v23);
    return 0;
  }
  sub_1563F0(*(CFTypeRef *)(a1 + 152), (void *)a3);
  return 0;
}

void sub_15533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, void *__p, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, void *a19, uint64_t a20,uint64_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_1555D4(uint64_t a1, const __CFDictionary *a2, size_t a3, uint64_t a4)
{
  char v7 = 1;
  *(unsigned char *)(a1 + 23) = 1;
  *(_WORD *)a1 = 123;
  size_t v8 = a3 + 2;
  sub_157574((uint64_t)&v78, a2);
  sub_157574((uint64_t)&v72, a2);
  uint64_t v73 = (v75 - (unsigned char *)v74) >> 3;
  while (1)
  {
    if (v78 && v79 != (v81 - v80) >> 3)
    {
      uint64_t v9 = v72;
      goto LABEL_8;
    }
    uint64_t v9 = v72;
    if (!v72 || v73 == (v75 - (unsigned char *)v74) >> 3) {
      break;
    }
LABEL_8:
    if (v78 == v9 && v79 == v73) {
      break;
    }
    if ((v7 & 1) == 0) {
      std::string::append((std::string *)a1, ",", 1uLL);
    }
    sub_65D94(&__b, v8, 32);
    uint64_t v10 = std::string::insert(&__b, 0, "\n", 1uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t v66 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v66 >= 0) {
      CFDictionaryRef v12 = __p;
    }
    else {
      CFDictionaryRef v12 = (void **)__p[0];
    }
    if (v66 >= 0) {
      std::string::size_type v13 = HIBYTE(v66);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)a1, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v66) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__b.__r_.__value_.__l.__data_);
    }
    sub_1575F8(__p, &v78);
    CFDictionaryRef v14 = __p[0];
    BOOL v16 = 0;
    if (__p[0])
    {
      CFTypeID v15 = CFGetTypeID(__p[0]);
      if (v15 == CFStringGetTypeID()) {
        BOOL v16 = 1;
      }
    }
    if (__p[1]) {
      CFRelease(__p[1]);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v16)
    {
      sub_1575F8(&cf, &v78);
      unsigned int v17 = (const void *)cf.__r_.__value_.__r.__words[0];
      if (!cf.__r_.__value_.__r.__words[0])
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      sub_20C54((uint64_t)&v69, (const __CFString *)cf.__r_.__value_.__l.__data_);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v18 = &v69;
      }
      else {
        int v18 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v69.__r_.__value_.__l.__size_;
      }
      memset(&v70, 0, sizeof(v70));
      for (; size; --size)
      {
        int v20 = v18->__r_.__value_.__s.__data_[0];
        if (v20 == 92 || v20 == 34)
        {
          std::string::push_back(&v70, 92);
          LOBYTE(v20) = v18->__r_.__value_.__s.__data_[0];
        }
        std::string::push_back(&v70, v20);
        int v18 = (std::string *)((char *)v18 + 1);
      }
      CFTypeRef v21 = std::string::insert(&v70, 0, "\"", 1uLL);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __b.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      double v23 = std::string::append(&__b, "\" : ", 4uLL);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      int64_t v66 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (v66 >= 0) {
        CFDictionaryRef v25 = __p;
      }
      else {
        CFDictionaryRef v25 = (void **)__p[0];
      }
      if (v66 >= 0) {
        std::string::size_type v26 = HIBYTE(v66);
      }
      else {
        std::string::size_type v26 = (std::string::size_type)__p[1];
      }
      std::string::append((std::string *)a1, (const std::string::value_type *)v25, v26);
      if (SHIBYTE(v66) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (cf.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)cf.__r_.__value_.__l.__size_);
      }
      CFRelease(v17);
      sub_1575F8(&__b, &v78);
      sub_157688((uint64_t)v84, a4);
      sub_157720((uint64_t)__p, (CFTypeRef *)&__b.__r_.__value_.__l.__size_, v8, (uint64_t)v84);
      if (v66 >= 0) {
        CFDictionaryRef v27 = __p;
      }
      else {
        CFDictionaryRef v27 = (void **)__p[0];
      }
      if (v66 >= 0) {
        std::string::size_type v28 = HIBYTE(v66);
      }
      else {
        std::string::size_type v28 = (std::string::size_type)__p[1];
      }
      std::string::append((std::string *)a1, (const std::string::value_type *)v27, v28);
      if (SHIBYTE(v66) < 0) {
        operator delete(__p[0]);
      }
      sub_156078(v84);
      if (__b.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)__b.__r_.__value_.__l.__size_);
      }
      if (__b.__r_.__value_.__r.__words[0]) {
        CFRelease(__b.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (!*(void *)(a4 + 24))
      {
        __int16 v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Error, not a json style CFDictionary");
      }
      sub_1575F8(&__b, &v78);
      unint64_t v29 = (const void *)__b.__r_.__value_.__r.__words[0];
      if (__b.__r_.__value_.__r.__words[0]) {
        CFRetain(__b.__r_.__value_.__l.__data_);
      }
      CFTypeRef v63 = 0;
      CFTypeRef v64 = v29;
      uint64_t v30 = *(void *)(a4 + 24);
      if (!v30) {
        sub_56964();
      }
      (*(void (**)(void **__return_ptr))(*(void *)v30 + 48))(__p);
      if (v63) {
        CFRelease(v63);
      }
      if (v64) {
        CFRelease(v64);
      }
      if (__b.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)__b.__r_.__value_.__l.__size_);
      }
      if (v29) {
        CFRelease(v29);
      }
      if (SHIBYTE(v66) < 0)
      {
        unint64_t v31 = (char *)__p[1];
        if (!__p[1])
        {
LABEL_156:
          std::string v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v58, "Error, not a json style CFDictionary");
        }
        int v32 = (void **)__p[0];
      }
      else
      {
        unint64_t v31 = (char *)HIBYTE(v66);
        if (!HIBYTE(v66)) {
          goto LABEL_156;
        }
        int v32 = __p;
      }
      memset(&v61, 0, sizeof(v61));
      do
      {
        int v33 = *(unsigned __int8 *)v32;
        if (v33 == 92 || v33 == 34)
        {
          std::string::push_back(&v61, 92);
          LOBYTE(v33) = *(unsigned char *)v32;
        }
        std::string::push_back(&v61, v33);
        int v32 = (void **)((char *)v32 + 1);
        --v31;
      }
      while (v31);
      CFDictionaryRef v34 = std::string::insert(&v61, 0, "\"", 1uLL);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      cf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&cf.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      CFNumberRef v36 = std::string::append(&cf, "\" : \"", 5uLL);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if ((v68 & 0x80u) == 0) {
        unsigned int v38 = v67;
      }
      else {
        unsigned int v38 = (void **)v67[0];
      }
      if ((v68 & 0x80u) == 0) {
        unint64_t v39 = v68;
      }
      else {
        unint64_t v39 = (unint64_t)v67[1];
      }
      memset(&v60, 0, sizeof(v60));
      if (v39)
      {
        do
        {
          int v40 = *(unsigned __int8 *)v38;
          if (v40 == 92 || v40 == 34)
          {
            std::string::push_back(&v60, 92);
            LOBYTE(v40) = *(unsigned char *)v38;
          }
          std::string::push_back(&v60, v40);
          unsigned int v38 = (void **)((char *)v38 + 1);
          --v39;
        }
        while (v39);
        std::string::size_type v41 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        std::string::size_type v42 = v60.__r_.__value_.__l.__size_;
        std::string::size_type v43 = v60.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::size_type v42 = 0;
        std::string::size_type v43 = 0;
        std::string::size_type v41 = 0;
      }
      if ((v41 & 0x80u) == 0) {
        CFTypeID v44 = &v60;
      }
      else {
        CFTypeID v44 = (std::string *)v43;
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v45 = v41;
      }
      else {
        std::string::size_type v45 = v42;
      }
      CFIndex v46 = std::string::append(&v69, (const std::string::value_type *)v44, v45);
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      unint64_t v48 = std::string::append(&v70, "\"", 1uLL);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      __b.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_b = &__b;
      }
      else {
        p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = __b.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)a1, (const std::string::value_type *)p_b, v51);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cf.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if ((char)v68 < 0) {
        operator delete(v67[0]);
      }
      if (SHIBYTE(v66) < 0) {
        operator delete(__p[0]);
      }
    }
    char v7 = 0;
    ++v79;
  }
  sub_65D94(&__b, a3, 32);
  double v52 = std::string::insert(&__b, 0, "\n", 1uLL);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  int64_t v66 = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (v66 >= 0) {
    float v54 = __p;
  }
  else {
    float v54 = (void **)__p[0];
  }
  if (v66 >= 0) {
    std::string::size_type v55 = HIBYTE(v66);
  }
  else {
    std::string::size_type v55 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v54, v55);
  if (SHIBYTE(v66) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
  std::string::append((std::string *)a1, "}", 1uLL);
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if (v74)
  {
    int v75 = v74;
    operator delete(v74);
  }
  if (v82)
  {
    int v83 = v82;
    operator delete(v82);
  }
  if (v80)
  {
    uint64_t v81 = v80;
    operator delete(v80);
  }
}

void sub_155E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  sub_158470(&a47);
  sub_158470((void *)(v48 - 192));
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  _Unwind_Resume(a1);
}

void *sub_156078(void *a1)
{
  float v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unint64_t sub_1560FC(const __CFDictionary *a1, const UInt8 *a2, unsigned int *a3)
{
  CFNumberRef v4 = (const __CFNumber *)sub_15743C(a1, a2);
  if (!v4) {
    return *a3;
  }
  unint64_t result = (unint64_t)sub_22314(v4);
  if (HIDWORD(result)) {
    return result;
  }
  else {
    return *a3;
  }
}

uint64_t sub_156140(const __CFDictionary *a1, const UInt8 *a2)
{
  CFBooleanRef v2 = (const __CFBoolean *)sub_15743C(a1, a2);
  if (v2)
  {
    LOWORD(v2) = sub_20610(v2);
    int v3 = BYTE1(v2);
  }
  else
  {
    int v3 = 0;
  }
  return v2 | (v3 << 8);
}

void *sub_156174(void *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFNumberRef v4 = sub_D86AC(a2, __s);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }
  uint64_t v5 = v4;
  CFRetain(v4);

  return sub_22084(a1, v5);
}

void sub_1561F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_15620C(const __CFDictionary **a1, const UInt8 *a2)
{
  CFDictionaryRef v4 = *a1;
  if (!v4 || !sub_1571F4(v4, a2)) {
    goto LABEL_7;
  }
  if (!*a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  sub_1572F4(&cf, *a1, a2);
  CFNumberRef v6 = (const __CFNumber *)cf;
  if (!cf) {
    goto LABEL_7;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    unsigned int v8 = sub_7E85C(v6);
    BOOL v9 = v8;
    char v10 = 0;
    unsigned int v2 = v8 >> 8;
  }
  else
  {
    CFTypeID v13 = CFGetTypeID(v6);
    if (v13 == CFBooleanGetTypeID())
    {
      BOOL v9 = sub_157378(v6);
      unsigned int v2 = 0;
      char v10 = 0;
    }
    else
    {
      BOOL v9 = 0;
      char v10 = 1;
    }
  }
  CFRelease(v6);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = 0x100000000;
  }
  else
  {
LABEL_7:
    uint64_t v11 = 0;
    BOOL v9 = 0;
  }
  return v11 | v9 | (v2 << 8);
}

void sub_156328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_60594((const void **)va);
  _Unwind_Resume(a1);
}

void sub_156364(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFDictionaryRef v4 = sub_D86AC(a2, __s);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }

  sub_156EDC(a1, v4);
}

void sub_1563DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1563F0(CFTypeRef cf, void *a2)
{
  if (cf) {
    CFRetain(cf);
  }
  CFDictionaryRef v13 = (const __CFDictionary *)cf;
  sub_21C8C(__p, "PortType");
  LODWORD(v12) = 1886613611;
  int v4 = sub_170A5C(&v13, __p, (unsigned int *)&v12);
  if ((v16[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (cf) {
LABEL_7:
  }
    CFRelease(cf);
LABEL_8:
  if ((sub_16F108(v4) & 1) == 0)
  {
    BOOL v9 = (os_log_t *)sub_32A48(13);
    char v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      __int16 v15 = 1024;
      *(_DWORD *)BOOL v16 = 562;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((v4 - 1885892674) <= 0x35 && ((1 << (v4 - 66)) & 0x20000100000001) != 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B8A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64B8A8))
    {
      sub_15690C();
      __cxa_guard_release(&qword_64B8A8);
    }
    uint64_t v5 = qword_64B898;
    CFNumberRef v6 = (std::__shared_weak_count *)unk_64B8A0;
    if (unk_64B8A0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_64B8A0 + 8), 1uLL, memory_order_relaxed);
    }
LABEL_26:
    sub_1509D8(a2, v5, (uint64_t)v6);
    if (v6) {
      sub_4636C(v6);
    }
    return;
  }
  if (v4 == 1886613611)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B8C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64B8C0))
    {
      sub_1569C0(1987013749, 1986359655);
      __cxa_guard_release(&qword_64B8C0);
    }
    uint64_t v5 = qword_64B8B0;
    CFNumberRef v6 = *(std::__shared_weak_count **)algn_64B8B8;
    if (*(void *)algn_64B8B8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64B8B8 + 8), 1uLL, memory_order_relaxed);
    }
    goto LABEL_26;
  }
  if (v4 == 1886216809)
  {
    long long v12 = xmmword_4E78C0;
    sub_16FEBC((uint64_t)__p, 0, -32.0, 32.0);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B890, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64B890))
    {
      sub_1567EC(&v12, (__n128 *)__p, 1987013749, 1986359655);
      __cxa_guard_release(&qword_64B890);
    }
    uint64_t v7 = qword_64B880;
    unsigned int v8 = *(std::__shared_weak_count **)algn_64B888;
    if (*(void *)algn_64B888) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64B888 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1509D8(a2, v7, (uint64_t)v8);
    if (v8) {
      sub_4636C(v8);
    }
    sub_463E0(*(void **)&v16[2]);
  }
}

void sub_156740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

__n128 sub_1567EC(_OWORD *a1, __n128 *a2, int a3, int a4)
{
  unsigned int v8 = (char *)operator new(0x98uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)unsigned int v8 = off_622C38;
  *((void *)v8 + 4) = -2609680281;
  *((_DWORD *)v8 + 10) = 0;
  *(void *)(v8 + 60) = 0x100000001;
  *(_OWORD *)(v8 + 44) = *(_OWORD *)"";
  *((void *)v8 + 3) = &off_63C778;
  *(_OWORD *)(v8 + 72) = *a1;
  *((_DWORD *)v8 + 22) = a2->n128_u32[0];
  sub_15050C((uint64_t)(v8 + 96), &a2->n128_u64[1]);
  __n128 result = a2[2];
  *(__n128 *)(v8 + 120) = result;
  v8[136] = 1;
  *((_DWORD *)v8 + 36) = a3;
  *((_DWORD *)v8 + 37) = a4;
  *((void *)v8 + 3) = off_638890;
  qword_64B880 = (uint64_t)(v8 + 24);
  *(void *)algn_64B888 = v8;
  return result;
}

void sub_1568F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double sub_15690C()
{
  uint64_t v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = off_622C70;
  *((void *)v0 + 4) = -2609680281;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001;
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"";
  *(_OWORD *)(v0 + 72) = xmmword_64B7B0;
  v0[88] = 0;
  v0[136] = 0;
  double result = 2.11004386e262;
  *((void *)v0 + 18) = 0x76657167766F6C75;
  *((void *)v0 + 3) = off_638948;
  qword_64B898 = (uint64_t)(v0 + 24);
  unk_64B8A0 = v0;
  return result;
}

double sub_1569C0(int a1, int a2)
{
  int v4 = (char *)operator new(0x98uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = off_638858;
  *((void *)v4 + 4) = -2609680281;
  *((_DWORD *)v4 + 10) = 0;
  *(void *)(v4 + 60) = 0x100000001;
  *(_OWORD *)(v4 + 44) = *(_OWORD *)"";
  *((void *)v4 + 3) = &off_63C778;
  *(_OWORD *)(v4 + 72) = xmmword_64B8C8;
  *((_DWORD *)v4 + 22) = dword_64B758;
  sub_15050C((uint64_t)(v4 + 96), qword_64B760);
  double result = *(double *)&xmmword_64B778;
  *(_OWORD *)(v4 + 120) = xmmword_64B778;
  v4[136] = 1;
  *((_DWORD *)v4 + 36) = a1;
  *((_DWORD *)v4 + 37) = a2;
  *((void *)v4 + 3) = off_638890;
  qword_64B8B0 = (uint64_t)(v4 + 24);
  *(void *)algn_64B8B8 = v4;
  return result;
}

void sub_156ACC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_156AE4(uint64_t a1)
{
  *(void *)a1 = &off_63C778;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }

  operator delete();
}

uint64_t sub_156B54(uint64_t a1)
{
  *(void *)a1 = &off_63C778;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }
  return a1;
}

uint64_t sub_156BA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_156BCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638858;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_156C20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_156C44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_156C68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_622C70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_156CBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_622C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_156CE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_156D04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_622C38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_156D58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_622C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_156D78(uint64_t a1)
{
  *(void *)a1 = &off_63C778;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }

  operator delete();
}

uint64_t sub_156DE8(uint64_t a1)
{
  *(void *)a1 = &off_63C778;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }
  return a1;
}

uint64_t sub_156E44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_156E68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63C700;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_156EBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63C700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_156EDC(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  int Count = CFArrayGetCount((CFArrayRef)a2);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  sub_157098((void **)a1, Count);
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v6);
      float v9 = sub_A7880((uint64_t)ValueAtIndex);
      float v10 = v9;
      long long v12 = *(float **)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if ((unint64_t)v12 >= v11)
      {
        CFDictionaryRef v14 = *(float **)a1;
        uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_46BF4(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        int v20 = (float *)(v18 + 4 * v15);
        *int v20 = v10;
        CFDictionaryRef v13 = v20 + 1;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = v18 + 4 * v19;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        float *v12 = v9;
        CFDictionaryRef v13 = v12 + 1;
      }
      *(void *)(a1 + 8) = v13;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_157064(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_157098(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_60548();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v4 = (char *)sub_46BF4(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    unsigned int v8 = (char *)*a1;
    float v9 = (char *)a1[1];
    float v10 = v5;
    if (v9 != *a1)
    {
      float v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_157140()
{
}

uint64_t sub_15715C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_157180(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63C688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1571D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63C688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL sub_1571F4(const __CFDictionary *a1, const UInt8 *a2)
{
  unsigned int v2 = a2;
  CFIndex v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    CFIndex v5 = *((void *)v2 + 1);
    if ((v4 & 0x80u) == 0) {
      CFIndex v6 = v4;
    }
    else {
      CFIndex v6 = v5;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
    if (!v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v7 = 0;
  }
  int v9 = CFDictionaryContainsKey(a1, v7);
  if (v7) {
    CFRelease(v7);
  }
  return v9 != 0;
}

void sub_1572CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1572F4(void *a1, const __CFDictionary *a2, const UInt8 *a3)
{
  CFIndex v4 = sub_15743C(a2, a3);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }
  CFIndex v5 = v4;
  CFTypeRef result = CFRetain(v4);
  *a1 = v5;
  return result;
}

void sub_157360(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_157378(const __CFNumber *a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(a1))
  {
    CFTypeID v4 = CFNumberGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      LOWORD(Value) = sub_6CC7C(a1);
      if ((unsigned __int16)Value > 0xFFu)
      {
        int Value = Value;
        return Value != 0;
      }
    }
LABEL_8:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  int Value = CFBooleanGetValue(a1);
  return Value != 0;
}

void sub_157428(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *sub_15743C(const __CFDictionary *a1, const UInt8 *a2)
{
  int64_t v3 = a2;
  CFIndex v5 = a2[23];
  if ((v5 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (!a2)
  {
    CFStringRef v8 = 0;
    if (a1) {
      goto LABEL_9;
    }
LABEL_12:
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFIndex v6 = *((void *)v3 + 1);
  if ((v5 & 0x80u) == 0) {
    CFIndex v7 = v5;
  }
  else {
    CFIndex v7 = v6;
  }
  CFStringRef v8 = CFStringCreateWithBytes(0, a2, v7, 0x8000100u, 0);
  if (!v8)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (!a1) {
    goto LABEL_12;
  }
LABEL_9:
  int Value = CFDictionaryGetValue(a1, v8);
  if (v8) {
LABEL_13:
  }
    CFRelease(v8);
LABEL_14:
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_157534(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_157574(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  int64_t v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_158984((char **)(a1 + 16), Count);
    sub_158984(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void sub_1575F8(void *a1, void *a2)
{
  sub_1588C0(&cf, a2);
  CFTypeRef v3 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *a1 = v3;
  CFTypeRef v4 = v6;
  if (!v6)
  {
    a1[1] = 0;
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  CFRetain(v6);
  a1[1] = v4;
  CFRelease(v4);
  if (v3) {
LABEL_7:
  }
    CFRelease(v3);
}

uint64_t sub_157688(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_157720(uint64_t a1, CFTypeRef *a2, size_t a3, uint64_t a4)
{
  if (!*a2) {
    goto LABEL_33;
  }
  CFTypeID v8 = CFGetTypeID(*a2);
  CFTypeID TypeID = CFBooleanGetTypeID();
  CFNumberRef v10 = (const __CFNumber *)*a2;
  if (v8 == TypeID)
  {
    if (v10)
    {
      if (!sub_157378(v10))
      {
        *(unsigned char *)(a1 + 23) = 5;
        strcpy((char *)a1, "false");
        return;
      }
      *(unsigned char *)(a1 + 23) = 4;
      int v11 = 1702195828;
      goto LABEL_42;
    }
    goto LABEL_178;
  }
  if (!v10) {
    goto LABEL_33;
  }
  CFTypeID v12 = CFGetTypeID(v10);
  CFTypeID v13 = CFNumberGetTypeID();
  CFTypeRef v14 = *a2;
  if (v12 != v13)
  {
    if (v14)
    {
      CFTypeID v19 = CFGetTypeID(v14);
      if (v19 == CFStringGetTypeID())
      {
        *((unsigned char *)&v103.__r_.__value_.__s + 23) = 1;
        LOWORD(v103.__r_.__value_.__l.__data_) = 34;
        if (!*a2)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        int v20 = &v101;
        sub_20C54((uint64_t)&v101, (const __CFString *)*a2);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          std::string::size_type size = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        }
        else
        {
          std::string::size_type size = v101.__r_.__value_.__l.__size_;
          int v20 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        memset(&v102, 0, sizeof(v102));
        if (size)
        {
          do
          {
            int v22 = v20->__r_.__value_.__s.__data_[0];
            if (v22 == 92 || v22 == 34)
            {
              std::string::push_back(&v102, 92);
              LOBYTE(v22) = v20->__r_.__value_.__s.__data_[0];
            }
            std::string::push_back(&v102, v22);
            int v20 = (std::string *)((char *)v20 + 1);
            --size;
          }
          while (size);
          unsigned int v23 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
          std::string::size_type v24 = v102.__r_.__value_.__l.__size_;
          std::string::size_type v25 = v102.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v24 = 0;
          std::string::size_type v25 = 0;
          unsigned int v23 = 0;
        }
        if ((v23 & 0x80u) == 0) {
          unsigned __int8 v68 = &v102;
        }
        else {
          unsigned __int8 v68 = (std::string *)v25;
        }
        if ((v23 & 0x80u) == 0) {
          std::string::size_type v69 = v23;
        }
        else {
          std::string::size_type v69 = v24;
        }
        std::string v70 = std::string::append(&v103, (const std::string::value_type *)v68, v69);
        long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        valuePtr.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        uint64_t v72 = std::string::append(&valuePtr, "\"", 1uLL);
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        *(void *)(a1 + 16) = *((void *)&v72->__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        uint64_t v67 = (void *)v103.__r_.__value_.__r.__words[0];
        goto LABEL_112;
      }
      if (*a2)
      {
        CFTypeID v26 = CFGetTypeID(*a2);
        CFTypeID v27 = CFArrayGetTypeID();
        CFArrayRef v28 = (const __CFArray *)*a2;
        if (v26 == v27)
        {
          sub_157688((uint64_t)v105, a4);
          sub_1584B4(a1, v28, a3, (uint64_t)v105);
          unint64_t v29 = v105;
LABEL_131:
          sub_156078(v29);
          return;
        }
        if (v28)
        {
          CFTypeID v74 = CFGetTypeID(*a2);
          CFTypeID v75 = CFDictionaryGetTypeID();
          CFArrayRef v28 = (const __CFArray *)*a2;
          if (v74 == v75)
          {
            sub_157688((uint64_t)v104, a4);
            sub_1555D4(a1, v28, a3, v104);
            unint64_t v29 = v104;
            goto LABEL_131;
          }
        }
LABEL_34:
        CFTypeID v30 = CFGetTypeID(v28);
        if (v30 == CFNullGetTypeID() || (CFTypeRef v31 = *a2) == 0)
        {
          *(unsigned char *)(a1 + 23) = 4;
          int v11 = 1819047278;
LABEL_42:
          *(_DWORD *)a1 = v11;
          *(unsigned char *)(a1 + 4) = 0;
          return;
        }
        if (!*(void *)(a4 + 24))
        {
          unint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v91, "Error, not a json style CFDictionary");
          goto LABEL_179;
        }
        CFTypeRef v96 = 0;
        CFRetain(v31);
        uint64_t v32 = *(void *)(a4 + 24);
        CFTypeRef cf = v31;
        if (!v32) {
          sub_56964();
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)v32 + 48))(&valuePtr);
        CFRelease(cf);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v33 = valuePtr.__r_.__value_.__l.__size_;
          if (valuePtr.__r_.__value_.__l.__size_)
          {
            p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_46:
            memset(&v94, 0, sizeof(v94));
            do
            {
              int v35 = p_valuePtr->__r_.__value_.__s.__data_[0];
              if (v35 == 92 || v35 == 34)
              {
                std::string::push_back(&v94, 92);
                LOBYTE(v35) = p_valuePtr->__r_.__value_.__s.__data_[0];
              }
              std::string::push_back(&v94, v35);
              p_std::string valuePtr = (std::string *)((char *)p_valuePtr + 1);
              --v33;
            }
            while (v33);
            CFNumberRef v36 = std::string::insert(&v94, 0, "{ \"", 3uLL);
            long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
            v101.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v37;
            v36->__r_.__value_.__l.__size_ = 0;
            v36->__r_.__value_.__r.__words[2] = 0;
            v36->__r_.__value_.__r.__words[0] = 0;
            unsigned int v38 = std::string::append(&v101, "\" : \"", 5uLL);
            long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
            v102.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v39;
            v38->__r_.__value_.__l.__size_ = 0;
            v38->__r_.__value_.__r.__words[2] = 0;
            v38->__r_.__value_.__r.__words[0] = 0;
            if ((v100 & 0x80u) == 0) {
              int v40 = &v98;
            }
            else {
              int v40 = v98;
            }
            if ((v100 & 0x80u) == 0) {
              uint64_t v41 = v100;
            }
            else {
              uint64_t v41 = v99;
            }
            memset(&__p, 0, sizeof(__p));
            if (v41)
            {
              do
              {
                int v42 = *v40;
                if (v42 == 92 || v42 == 34)
                {
                  std::string::push_back(&__p, 92);
                  LOBYTE(v42) = *v40;
                }
                std::string::push_back(&__p, v42);
                ++v40;
                --v41;
              }
              while (v41);
              unsigned int v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
              std::string::size_type v45 = __p.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v44 = 0;
              std::string::size_type v45 = 0;
              unsigned int v43 = 0;
            }
            if ((v43 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)v45;
            }
            if ((v43 & 0x80u) == 0) {
              std::string::size_type v53 = v43;
            }
            else {
              std::string::size_type v53 = v44;
            }
            float v54 = std::string::append(&v102, (const std::string::value_type *)p_p, v53);
            long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            v103.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            __int16 v56 = std::string::append(&v103, "\" }", 3uLL);
            long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            *(void *)(a1 + 16) = *((void *)&v56->__r_.__value_.__l + 2);
            *(_OWORD *)a1 = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v103.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v102.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v101.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_108;
            }
            std::string v58 = (void *)v94.__r_.__value_.__r.__words[0];
LABEL_107:
            operator delete(v58);
LABEL_108:
            if ((char)v100 < 0) {
              operator delete(v98);
            }
            if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return;
            }
            uint64_t v67 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_112:
            operator delete(v67);
            return;
          }
        }
        else
        {
          std::string::size_type v33 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
          if (*((unsigned char *)&valuePtr.__r_.__value_.__s + 23))
          {
            p_std::string valuePtr = &valuePtr;
            goto LABEL_46;
          }
        }
        *((unsigned char *)&v102.__r_.__value_.__s + 23) = 1;
        LOWORD(v102.__r_.__value_.__l.__data_) = 34;
        if ((v100 & 0x80u) == 0) {
          CFIndex v46 = &v98;
        }
        else {
          CFIndex v46 = v98;
        }
        if ((v100 & 0x80u) == 0) {
          uint64_t v47 = v100;
        }
        else {
          uint64_t v47 = v99;
        }
        memset(&v101, 0, sizeof(v101));
        if (v47)
        {
          do
          {
            int v48 = *v46;
            if (v48 == 92 || v48 == 34)
            {
              std::string::push_back(&v101, 92);
              LOBYTE(v48) = *v46;
            }
            std::string::push_back(&v101, v48);
            ++v46;
            --v47;
          }
          while (v47);
          unsigned int v49 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          std::string::size_type v50 = v101.__r_.__value_.__l.__size_;
          std::string::size_type v51 = v101.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v50 = 0;
          std::string::size_type v51 = 0;
          unsigned int v49 = 0;
        }
        if ((v49 & 0x80u) == 0) {
          std::string v61 = &v101;
        }
        else {
          std::string v61 = (std::string *)v51;
        }
        if ((v49 & 0x80u) == 0) {
          std::string::size_type v62 = v49;
        }
        else {
          std::string::size_type v62 = v50;
        }
        CFTypeRef v63 = std::string::append(&v102, (const std::string::value_type *)v61, v62);
        long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        uint64_t v65 = std::string::append(&v103, "\"", 1uLL);
        long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        *(void *)(a1 + 16) = *((void *)&v65->__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_108;
        }
        std::string v58 = (void *)v102.__r_.__value_.__r.__words[0];
        goto LABEL_107;
      }
    }
LABEL_33:
    CFArrayRef v28 = 0;
    goto LABEL_34;
  }
  if (!v14) {
    goto LABEL_178;
  }
  float v15 = sub_A7880((uint64_t)v14);
  if (vabds_f32(floorf(v15), v15) >= 0.00000011921)
  {
    std::to_string((std::string *)a1, v15);
    return;
  }
  CFNumberRef v16 = (const __CFNumber *)*a2;
  if (!*a2)
  {
LABEL_178:
    unint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(v91);
LABEL_179:
  }
  CFTypeID v17 = CFNumberGetTypeID();
  if (v17 == CFGetTypeID(v16))
  {
    switch(CFNumberGetType(v16))
    {
      case kCFNumberSInt8Type:
        valuePtr.__r_.__value_.__s.__data_[0] = 0;
        int Value = CFNumberGetValue(v16, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_148;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        int v82 = CFNumberGetValue(v16, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_143;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        int v81 = CFNumberGetValue(v16, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_169;
      case kCFNumberSInt64Type:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v76 = CFNumberGetValue(v16, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_160;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        int v77 = CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_135;
      case kCFNumberFloat64Type:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v80 = CFNumberGetValue(v16, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_145;
      case kCFNumberCharType:
        valuePtr.__r_.__value_.__s.__data_[0] = 0;
        int Value = CFNumberGetValue(v16, kCFNumberCharType, &valuePtr);
LABEL_148:
        int v86 = Value;
        if (Value) {
          unsigned __int8 v87 = valuePtr.__r_.__value_.__s.__data_[0];
        }
        else {
          unsigned __int8 v87 = 0;
        }
        if (valuePtr.__r_.__value_.__s.__data_[0] >= 0 || Value == 0) {
          uint64_t v89 = 0;
        }
        else {
          uint64_t v89 = -256;
        }
        if (!v86) {
          goto LABEL_174;
        }
        uint64_t v60 = v89 & 0xFFFFFFFFFFFFFF00 | v87;
        goto LABEL_165;
      case kCFNumberShortType:
        LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        int v82 = CFNumberGetValue(v16, kCFNumberShortType, &valuePtr);
LABEL_143:
        int v83 = v82;
        unsigned __int8 v84 = valuePtr.__r_.__value_.__s.__data_[0];
        uint64_t data_low = SLOWORD(valuePtr.__r_.__value_.__l.__data_);
        goto LABEL_170;
      case kCFNumberIntType:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        int v81 = CFNumberGetValue(v16, kCFNumberIntType, &valuePtr);
LABEL_169:
        int v83 = v81;
        unsigned __int8 v84 = valuePtr.__r_.__value_.__s.__data_[0];
        uint64_t data_low = SLODWORD(valuePtr.__r_.__value_.__l.__data_);
LABEL_170:
        unint64_t v90 = data_low & 0xFFFFFFFFFFFFFF00 | v84;
        if (v83) {
          uint64_t v60 = v90;
        }
        else {
          uint64_t v60 = 0;
        }
        if (!v83) {
          goto LABEL_174;
        }
        goto LABEL_165;
      case kCFNumberLongType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v76 = CFNumberGetValue(v16, kCFNumberLongType, &valuePtr);
        goto LABEL_160;
      case kCFNumberLongLongType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v76 = CFNumberGetValue(v16, kCFNumberLongLongType, &valuePtr);
        goto LABEL_160;
      case kCFNumberFloatType:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        int v77 = CFNumberGetValue(v16, kCFNumberFloatType, &valuePtr);
LABEL_135:
        int v78 = v77;
        uint64_t v79 = (uint64_t)*(float *)&valuePtr.__r_.__value_.__l.__data_;
        goto LABEL_161;
      case kCFNumberDoubleType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v80 = CFNumberGetValue(v16, kCFNumberDoubleType, &valuePtr);
        goto LABEL_145;
      case kCFNumberCFIndexType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v76 = CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_160;
      case kCFNumberNSIntegerType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v76 = CFNumberGetValue(v16, kCFNumberNSIntegerType, &valuePtr);
LABEL_160:
        int v78 = v76;
        uint64_t v79 = valuePtr.__r_.__value_.__r.__words[0];
        goto LABEL_161;
      case kCFNumberCGFloatType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        int v80 = CFNumberGetValue(v16, kCFNumberCGFloatType, &valuePtr);
LABEL_145:
        int v78 = v80;
        uint64_t v79 = (uint64_t)*(double *)&valuePtr.__r_.__value_.__l.__data_;
LABEL_161:
        if (v78) {
          uint64_t v60 = v79;
        }
        else {
          uint64_t v60 = 0;
        }
        if (v78) {
          goto LABEL_165;
        }
        goto LABEL_174;
      default:
        goto LABEL_174;
    }
  }
  CFTypeID v59 = CFBooleanGetTypeID();
  if (v59 != CFGetTypeID(v16))
  {
LABEL_174:
    unint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(v91);
    goto LABEL_179;
  }
  uint64_t v60 = CFBooleanGetValue(v16);
LABEL_165:

  std::to_string((std::string *)a1, v60);
}

void sub_1581D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  sub_156078((void *)(v47 - 136));
  _Unwind_Resume(a1);
}

uint64_t sub_1583E8(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

uint64_t sub_15842C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_158470(void *a1)
{
  unsigned int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

std::string *sub_1584B4(uint64_t a1, CFArrayRef theArray, size_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 23) = 1;
  *(_WORD *)a1 = 91;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v8 = CFArrayGetCount(theArray);
    if (Count)
    {
      if (v8)
      {
        unint64_t v9 = 0;
        size_t v10 = a3 + 2;
        CFIndex v11 = v8 - 1;
        char v12 = 1;
        do
        {
          if ((v12 & 1) == 0) {
            std::string::append((std::string *)a1, ",", 1uLL);
          }
          sub_65D94(&__b, v10, 32);
          CFTypeID v13 = std::string::insert(&__b, 0, "\n", 1uLL);
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          int64_t v28 = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          if (v28 >= 0) {
            float v15 = __p;
          }
          else {
            float v15 = (void **)__p[0];
          }
          if (v28 >= 0) {
            std::string::size_type v16 = HIBYTE(v28);
          }
          else {
            std::string::size_type v16 = (std::string::size_type)__p[1];
          }
          std::string::append((std::string *)a1, (const std::string::value_type *)v15, v16);
          if (SHIBYTE(v28) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__b.__r_.__value_.__l.__data_);
          }
          sub_68838(&__b, theArray, v9);
          sub_157688((uint64_t)v29, a4);
          sub_157720(__p, &__b, v10, v29);
          if (v28 >= 0) {
            CFTypeID v17 = __p;
          }
          else {
            CFTypeID v17 = (void **)__p[0];
          }
          if (v28 >= 0) {
            std::string::size_type v18 = HIBYTE(v28);
          }
          else {
            std::string::size_type v18 = (std::string::size_type)__p[1];
          }
          std::string::append((std::string *)a1, (const std::string::value_type *)v17, v18);
          if (SHIBYTE(v28) < 0) {
            operator delete(__p[0]);
          }
          sub_156078(v29);
          if (__b.__r_.__value_.__r.__words[0]) {
            CFRelease(__b.__r_.__value_.__l.__data_);
          }
          if (Count - 1 == v9) {
            break;
          }
          char v12 = 0;
        }
        while (v11 != v9++);
      }
    }
  }
  sub_65D94(&__b, a3, 32);
  int v20 = std::string::insert(&__b, 0, "\n", 1uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t v28 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0) {
    int v22 = __p;
  }
  else {
    int v22 = (void **)__p[0];
  }
  if (v28 >= 0) {
    std::string::size_type v23 = HIBYTE(v28);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
  return std::string::append((std::string *)a1, "]", 1uLL);
}

void sub_158748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1587FC(std::string *a1, std::string *a2, char *__s)
{
  size_t v6 = strlen(__s);
  CFIndex v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_15885C(std::string *a1, char *__s, std::string *a3)
{
  size_t v6 = strlen(__s);
  CFIndex v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *sub_1588C0(void *result, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x8000000000000000) != 0 || (uint64_t v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(exception, "DictionaryRef_iterator iterator out of range.");
  }
  CFIndex v5 = result;
  uint64_t v6 = *(void *)(v4 + 8 * v2);
  if (v6)
  {
    __n128 result = CFRetain(*(CFTypeRef *)(v4 + 8 * v2));
    unint64_t v2 = a2[1];
  }
  uint64_t v7 = a2[5];
  uint64_t v8 = *(void *)(v7 + 8 * v2);
  if (v8) {
    __n128 result = CFRetain(*(CFTypeRef *)(v7 + 8 * v2));
  }
  *CFIndex v5 = v6;
  v5[1] = v8;
  return result;
}

void sub_158970(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_158984(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    CFTypeID v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    CFTypeID v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    sub_60548();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  CFIndex v11 = (char *)sub_106EC(v10);
  char v12 = &v11[8 * v5];
  long long v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  float v15 = &v12[8 * v6];
  CFTypeID v17 = *a1;
  std::string::size_type v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    std::string::size_type v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_158A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t sub_158AAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_640638;
  a2[1] = v2;
  return result;
}

void *sub_158AD0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_640638;
  result[1] = v3;
  return result;
}

void sub_158B18()
{
}

uint64_t sub_158B30(uint64_t a1, uint64_t a2, void *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B7D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64B7D0))
  {
    sub_158BF0(1987405668);
    __cxa_guard_release(&qword_64B7D0);
  }
  uint64_t v4 = qword_64B7C0;
  unint64_t v5 = *(std::__shared_weak_count **)algn_64B7C8;
  if (*(void *)algn_64B7C8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64B7C8 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1509D8(a3, v4, (uint64_t)v5);
  if (v5) {
    sub_4636C(v5);
  }
  return 0;
}

void sub_158BC4(_Unwind_Exception *a1)
{
}

double sub_158BF0(int a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_63C688;
  *((_DWORD *)v2 + 8) = 1685287015;
  *((_DWORD *)v2 + 9) = a1;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001;
  double result = *(double *)"";
  *(_OWORD *)(v2 + 44) = *(_OWORD *)"";
  *((void *)v2 + 3) = off_63C6C0;
  qword_64B7C0 = (uint64_t)(v2 + 24);
  *(void *)algn_64B7C8 = v2;
  return result;
}

uint64_t sub_158C8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_14E474(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_158CEC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_14E474(v1 + 3);
    }
    operator delete(v1);
  }
}

uint64_t sub_158D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1;
  int v7 = 1634625388;
  sub_3847B8((uint64_t)v8, &v5);
  sub_158DE0(a3, v7, &v7);
  sub_3840C4((uint64_t)v8);
  sub_3840C4((uint64_t)&v5);
  return 0;
}

void sub_158DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_158DE0(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return 0;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  char v12 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x28uLL);
  v24[0] = v13;
  v24[1] = a1 + 16;
  char v25 = 0;
  void *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  sub_3847B8((uint64_t)(v13 + 3), a3 + 2);
  char v25 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_6DEC4(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *v13 = *v21;
LABEL_38:
    void *v21 = v13;
    goto LABEL_39;
  }
  void *v13 = *v12;
  void *v12 = v13;
  *(void *)(v20 + 8 * v3) = v12;
  if (*v13)
  {
    unint64_t v22 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_D8A14((uint64_t)v24);
  return 1;
}

void sub_15901C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D8A14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_159034(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  sub_384254((uint64_t)v5, *a1);
  int v6 = 1668248691;
  sub_3847B8((uint64_t)v7, v5);
  sub_158DE0(a3, v6, &v6);
  sub_3840C4((uint64_t)v7);
  sub_3840C4((uint64_t)v5);
  return 0;
}

void sub_1590AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1590D0(CFDictionaryRef *a1, uint64_t a2)
{
  sub_1591A4((uint64_t)&__p, a1, a2);
  sub_3843C8((uint64_t)v3);
}

void sub_159170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_3840C4(v14);
  sub_3840C4((uint64_t)&a14);
  sub_D7EC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1591A4(uint64_t a1, CFDictionaryRef *a2, uint64_t a3)
{
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  if (CFDictionaryGetCount(*a2) != 2)
  {
    unint64_t v18 = (os_log_t *)sub_32A48(13);
    size_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      CFDictionaryRef v20 = *a2;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 421;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void *)&buf[20] = v20;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Metadata provided for tuning overlay tunings must have 2 entries. Dictionary: %@\"", buf, 0x1Cu);
    }
    long long v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Metadata provided for tuning overlay tunings must have 2 entries. Dictionary: %@");
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_15985C((uint64_t)buf, *a2);
  sub_15985C((uint64_t)&v32, *a2);
  uint64_t v6 = a3 + 24;
  uint64_t v33 = (v35 - (unsigned char *)v34) >> 3;
  while (1)
  {
    if (*(void *)buf
      && (unint64_t v7 = *(void *)&buf[8], *(void *)&buf[8] != (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3))
    {
      uint64_t v8 = v32;
    }
    else
    {
      uint64_t v8 = v32;
      if (!v32 || v33 == (v35 - (unsigned char *)v34) >> 3) {
        break;
      }
      unint64_t v7 = *(void *)&buf[8];
    }
    if (*(void *)buf == v8 && v7 == v33) {
      break;
    }
    if ((v7 & 0x8000000000000000) != 0 || v7 >= (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3)
    {
      BOOL v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "DictionaryRef_iterator iterator out of range.");
    }
    sub_20C54((uint64_t)&__dst, *(const __CFString **)(*(void *)&buf[16] + 8 * v7));
    BOOL v10 = sub_157378(v40[*(void *)&buf[8]]);
    std::__fs::filesystem::path v30 = __dst;
    BOOL v31 = v10;
    int v11 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v30.__pn_.__r_.__value_.__l.__size_;
    }
    sub_5E220((uint64_t)&v27, size + 8);
    if ((v27.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v27;
    }
    else {
      uint64_t v13 = (std::__fs::filesystem::path *)v27.__pn_.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if (v11 >= 0) {
        uint64_t v14 = &v30;
      }
      else {
        uint64_t v14 = (std::__fs::filesystem::path *)v30.__pn_.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, size);
    }
    strcpy((char *)v13 + size, ".austrip");
    std::__fs::filesystem::path v28 = v27;
    memset(&v27, 0, sizeof(v27));
    sub_6D8A0(&__p, v6, &v28);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21E8C(&__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::__fs::filesystem::path __dst = __p;
    }
    if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__pn_.__r_.__value_.__l.__data_);
    }
    sub_3842E4((uint64_t)&v28, (uint64_t)&__dst);
    LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = v10;
    sub_3847B8((uint64_t)&__p.__pn_.__r_.__value_.__l.__size_, (int *)&v28);
    sub_158DE0(a1, (int)__p.__pn_.__r_.__value_.__l.__data_, &__p);
    sub_3840C4((uint64_t)&__p.__pn_.__r_.__value_.__l.__size_);
    sub_3840C4((uint64_t)&v28);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
LABEL_37:
    ++*(void *)&buf[8];
  }
  if (v36)
  {
    long long v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    int v35 = v34;
    operator delete(v34);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (*(void *)&buf[16])
  {
    *(void *)&buf[24] = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
  if (!sub_D7374((void *)a1, 1))
  {
    unint64_t v22 = (os_log_t *)sub_32A48(13);
    std::string::size_type v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 430;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Resulting map does not cover if enrollment is set to true\"", buf, 0x12u);
    }
    std::string::size_type v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "Resulting map does not cover if enrollment is set to true");
LABEL_65:
  }
  double result = sub_D7374((void *)a1, 0);
  if (!result)
  {
    char v25 = (os_log_t *)sub_32A48(13);
    CFTypeID v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 431;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Resulting map does not cover if enrollment is set to false\"", buf, 0x12u);
    }
    std::string::size_type v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "Resulting map does not cover if enrollment is set to false");
    goto LABEL_65;
  }
  return result;
}

void sub_159748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  __cxa_free_exception(v46);
  sub_D7EC0(v45);
  _Unwind_Resume(a1);
}

void sub_159848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    JUMPOUT(0x159824);
  }
  JUMPOUT(0x159828);
}

uint64_t sub_15985C(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  unint64_t v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_158984((char **)(a1 + 16), Count);
    sub_158984(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void sub_1598E0(CFDictionaryRef *a1, uint64_t a2)
{
  sub_1591A4((uint64_t)&__p, a1, a2);
  sub_3843C8((uint64_t)v3);
}

void sub_159980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_3840C4(v14);
  sub_3840C4((uint64_t)&a14);
  sub_D7EC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1599B4(CFDictionaryRef *a1, uint64_t a2)
{
  sub_1591A4((uint64_t)&__p, a1, a2);
  sub_3843C8((uint64_t)v3);
}

void sub_159A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_3840C4(v14);
  sub_3840C4((uint64_t)&a14);
  sub_D7EC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_159A88(CFDictionaryRef *a1, uint64_t a2)
{
  sub_1591A4((uint64_t)&__p, a1, a2);
  sub_3843C8((uint64_t)v3);
}

void sub_159B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_3840C4(v14);
  sub_3840C4((uint64_t)&a14);
  sub_D7EC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_159B5C(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  sub_384254((uint64_t)v5, *a1);
  int v6 = 1886352244;
  sub_3847B8((uint64_t)v7, v5);
  sub_158DE0(a3, v6, &v6);
  sub_3840C4((uint64_t)v7);
  sub_3840C4((uint64_t)v5);
  return 0;
}

void sub_159BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_159BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1;
  int v7 = 1886610801;
  sub_3847B8((uint64_t)v8, &v5);
  sub_158DE0(a3, v7, &v7);
  sub_3840C4((uint64_t)v8);
  sub_3840C4((uint64_t)&v5);
  return 0;
}

void sub_159C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_159C94()
{
  uint64_t v0 = sub_32A48(24);
  if (*(unsigned char *)(v0 + 8))
  {
    uint64_t v1 = *(NSObject **)v0;
    if (*(void *)v0)
    {
      if (os_log_type_enabled(*(os_log_t *)v0, OS_LOG_TYPE_DEBUG))
      {
        int v3 = 136315394;
        uint64_t v4 = "DSPGraphConfig_Actions.cpp";
        __int16 v5 = 1024;
        int v6 = 400;
        _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring silence reset prevention is deprecated. This is now done by default for graphs", (uint8_t *)&v3, 0x12u);
      }
    }
  }
  return 0;
}

uint64_t sub_159D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1;
  int v7 = 1835235437;
  sub_3847B8((uint64_t)v8, &v5);
  sub_158DE0(a3, v7, &v7);
  sub_3840C4((uint64_t)v8);
  sub_3840C4((uint64_t)&v5);
  return 0;
}

void sub_159DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_159DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1;
  int v7 = 1936746861;
  sub_3847B8((uint64_t)v8, &v5);
  sub_158DE0(a3, v7, &v7);
  sub_3840C4((uint64_t)v8);
  sub_3840C4((uint64_t)&v5);
  return 0;
}

void sub_159E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_159E94(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFTypeRef v5 = *a1;
  if (*a1) {
    CFRetain(*a1);
  }
  v21[6] = (void *)v5;
  sub_21C8C(__p, "UseFixedBlockSize");
  if (v5 && (unsigned __int16 v6 = sub_156140((const __CFDictionary *)v5, __p), v6 > 0xFFu)) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (v25 < 0)
  {
    operator delete(*(void **)__p);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v5) {
LABEL_11:
  }
    CFRelease(v5);
LABEL_12:
  CFTypeRef v8 = *a1;
  if (v8) {
    CFRetain(v8);
  }
  void v21[5] = (void *)v8;
  sub_21C8C(__p, "MaximumFramesPerSlice");
  if (v8 && (CFNumberRef v9 = (const __CFNumber *)sub_15743C((const __CFDictionary *)v8, __p)) != 0) {
    CFNumberRef v10 = sub_22314(v9);
  }
  else {
    CFNumberRef v10 = 0;
  }
  if (v25 < 0)
  {
    operator delete(*(void **)__p);
    if (!v8) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v8) {
LABEL_22:
  }
    CFRelease(v8);
LABEL_23:
  if (!((unint64_t)v10 >> 32))
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    float v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__fs::filesystem::path __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      __int16 v23 = 1024;
      int v24 = 351;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not find valid maximum block size\"", __p, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Could not find valid maximum block size");
  }
  int v19 = 7;
  BOOL v20 = v7 != 0;
  *(_DWORD *)std::__fs::filesystem::path __p = 3700;
  sub_3847B8((uint64_t)&__p[8], &v19);
  int v17 = 7;
  uint64_t v18 = v10;
  int v26 = 14;
  sub_3847B8((uint64_t)&v27, &v17);
  sub_15A1EC((uint64_t)v21, (int *)__p, 2);
  for (uint64_t i = 32; i != -16; i -= 24)
    sub_3840C4((uint64_t)&__p[i]);
  sub_3840C4((uint64_t)&v17);
  sub_3840C4((uint64_t)&v19);
  sub_46089C(a3, (uint64_t)v21);
  sub_D7EFC((void *)v21[2]);
  char v12 = v21[0];
  v21[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  return 0;
}

void sub_15A140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_15A1EC(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_D87CC(a1, *a2, a2);
      a2 += 6;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_15A254(_Unwind_Exception *a1)
{
  sub_D7EC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_15A268(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v41 = v5;
  sub_21C8C(__p, "DeferUntilRouteCreation");
  if (v5)
  {
    unsigned int v6 = (unsigned __int16)sub_156140(v5, __p);
    if (v6 <= 0x100) {
      LOBYTE(v6) = 0;
    }
    int v7 = v6;
  }
  else
  {
    int v7 = 0;
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v5) {
LABEL_12:
  }
    CFRelease(v5);
LABEL_13:
  if (v7)
  {
    *(void *)std::__fs::filesystem::path __p = __p;
    *(void *)&__p[8] = __p;
    *(void *)&__p[16] = 0;
    LODWORD(v45) = 7;
    uint64_t v46 = 1886613611;
    LODWORD(v38.__r_.__value_.__l.__data_) = 7;
    v38.__r_.__value_.__l.__size_ = 1936749683;
    sub_15AB48((uint64_t)bytes, (int *)&v45, (int *)&v38);
  }
  CFTypeRef v8 = (os_log_t *)sub_32A48(20);
  CFNumberRef v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::__fs::filesystem::path __p = 136315394;
    *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = 310;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting Speaker Thiele-Small data From FDR", __p, 0x12u);
  }
  sub_44A7E8((uint64_t *)&v37);
  CFNumberRef v10 = v37;
  if (!v37)
  {
    char v25 = (os_log_t *)sub_32A48(20);
    int v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::__fs::filesystem::path __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 319;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR doesn't have Speaker Thiele-Small data", __p, 0x12u);
    }
    return 560227702;
  }
  int v11 = (os_log_t *)sub_32A48(20);
  char v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v13 = CFCopyDescription(v10);
    sub_20B40((uint64_t)&v45, v13);
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = (void **)&v45;
    if (v47[0] < 0) {
      uint64_t v14 = v45;
    }
    *(_DWORD *)std::__fs::filesystem::path __p = 136315650;
    *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = 313;
    *(_WORD *)&__p[18] = 2080;
    *(void *)&__p[20] = v14;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR Speaker Thiele-Small data: %s", __p, 0x1Cu);
    if (SHIBYTE(v47[0]) < 0) {
      operator delete(v45);
    }
  }
  long long v37 = 0;
  int v42 = 1936749683;
  *(void *)bytes = v10;
  CFDictionaryRef v39 = 0;
  sub_15B134((uint64_t)&v45, "ID", &v42);
  CFDataRef v15 = CFDataCreate(0, bytes, 8);
  if (!v15)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_1534E8(v44, v15);
  sub_15B208((uint64_t)v47, v44);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  v38.__r_.__value_.__l.__size_ = 2;
  CFDictionaryRef v16 = sub_4D3D8((uint64_t)&v38);
  uint64_t v17 = 0;
  CFDictionaryRef v39 = v16;
  do
  {
    uint64_t v18 = (const void *)v47[v17 + 1];
    if (v18) {
      CFRelease(v18);
    }
    int v19 = (const void *)v47[v17];
    if (v19) {
      CFRelease(v19);
    }
    v17 -= 2;
  }
  while (v17 != -4);
  if (v44[0]) {
    CFRelease(v44[0]);
  }
  sub_384254((uint64_t)&v38, v16);
  LODWORD(v45) = 1735553138;
  sub_3847B8((uint64_t)&v46, (int *)&v38);
  sub_15A1EC((uint64_t)__p, (int *)&v45, 1);
  sub_3840C4((uint64_t)&v46);
  sub_3840C4((uint64_t)&v38);
  CFRelease(v16);
  sub_46089C(a3, (uint64_t)__p);
  sub_D7EFC(*(void **)&__p[16]);
  BOOL v20 = *(void **)__p;
  *(void *)std::__fs::filesystem::path __p = 0;
  if (v20) {
    operator delete(v20);
  }
  if (!v10) {
    return 560227702;
  }
  CFTypeRef v21 = *a1;
  if (v21) {
    CFRetain(v21);
  }
  sub_21C8C(__p, "SetTelemetryDataSources");
  if (v21 && (unsigned __int16 v22 = sub_156140((const __CFDictionary *)v21, __p), v22 > 0xFFu)) {
    int v23 = v22;
  }
  else {
    int v23 = 0;
  }
  if ((__p[23] & 0x80000000) == 0)
  {
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  operator delete(*(void **)__p);
  if (v21) {
LABEL_54:
  }
    CFRelease(v21);
LABEL_55:
  if (v23)
  {
    sub_3CD68C();
    uint64_t v27 = sub_15ADD0(1);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    v47[0] = 0;
    sub_46B38(&v45, *(const void **)v27, *(void *)(v27 + 8), (uint64_t)(*(void *)(v27 + 8) - *(void *)v27) >> 2);
    std::__fs::filesystem::path v28 = (unsigned int *)v45;
    unint64_t v29 = (unsigned int *)v46;
    if (v45 == (void **)v46)
    {
      CFDictionaryRef v34 = (os_log_t *)sub_32A48(20);
      int v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__fs::filesystem::path __p = 136315394;
        *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 337;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Telemetry Data Sources from SpeakerPolicyDatabase are empty", __p, 0x12u);
      }
    }
    else
    {
      std::__fs::filesystem::path v30 = (os_log_t *)sub_32A48(20);
      BOOL v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
      {
        sub_82188(&v38, v28, v29);
        uint64_t v32 = (v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v38
            : (std::string *)v38.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::__fs::filesystem::path __p = 136315650;
        *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 332;
        *(_WORD *)&__p[18] = 2080;
        *(void *)&__p[20] = v32;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Telemetry Data Sources: [ %s ]", __p, 0x1Cu);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
      }
      sub_15AE24((uint64_t)__p, 1936286831, (uint64_t)&v45);
      sub_46089C(a3, (uint64_t)__p);
      sub_D7EFC(*(void **)&__p[16]);
      uint64_t v33 = *(void **)__p;
      *(void *)std::__fs::filesystem::path __p = 0;
      if (v33) {
        operator delete(v33);
      }
    }
    if (v28) {
      operator delete(v28);
    }
  }
  return 0;
}

void sub_15A9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  if (v27) {
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_15AB48(uint64_t a1, int *a2, int *a3)
{
  sub_3847B8((uint64_t)&v5, a2);
  sub_3847B8((uint64_t)&v6, a3);
  sub_3844F0(a1);
}

void sub_15ABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_3840C4(v9);
  sub_3840C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_15ABD8(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (double result = *v5; result; double result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_15AC84(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = 0;
  v2[1] = 0;
  sub_3847B8(v2 + 2, a1);
  return v2;
}

void sub_15ACC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_15ACD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      uint64_t v6 = sub_15AC84(a2);
      uint64_t v7 = *a1;
      *uint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 16;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_15AD48(_Unwind_Exception *a1)
{
  sub_15AD5C(v1);
  _Unwind_Resume(a1);
}

void sub_15AD5C(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint8x8_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_3840C4(v3 + 2);
        operator delete(v3);
        uint8x8_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_15ADD0(int a1)
{
  uint64_t v1 = qword_65E360;
  if (!qword_65E360) {
LABEL_8:
  }
    sub_8251C("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *(_DWORD *)(v1 + 32);
      if (v2 <= a1) {
        break;
      }
      uint64_t v1 = *(void *)v1;
      if (!v1) {
        goto LABEL_8;
      }
    }
    if (v2 >= a1) {
      return v1 + 40;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      goto LABEL_8;
    }
  }
}

void sub_15AE24(uint64_t a1, int a2, uint64_t a3)
{
  int v16 = a2;
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    CFNumberRef v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = "DSPGraphConfig_Actions.cpp";
      __int16 v19 = 1024;
      v20[0] = 44;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_15B134((uint64_t)buf, "ID", &v16);
  CFDataRef v5 = CFDataCreate(0, *(const UInt8 **)a3, *(void *)(a3 + 8) - *(void *)a3);
  if (!v5)
  {
    CFStringRef v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  sub_1534E8(&cf, v5);
  sub_15B208((uint64_t)v20 + 2, &cf);
  v15[0] = buf;
  v15[1] = 2;
  CFDictionaryRef v6 = sub_4D3D8((uint64_t)v15);
  uint64_t v7 = 0;
  void v15[2] = v6;
  do
  {
    CFTypeRef v8 = *(const void **)((char *)&v20[v7 + 2] + 2);
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = *(const void **)((char *)&v20[v7] + 2);
    if (v9) {
      CFRelease(v9);
    }
    v7 -= 4;
  }
  while (v7 != -8);
  if (cf) {
    CFRelease(cf);
  }
  sub_384254((uint64_t)v15, v6);
  *(_DWORD *)buf = 1735553138;
  sub_3847B8((uint64_t)&v18 + 4, (int *)v15);
  sub_15A1EC(a1, (int *)buf, 1);
  sub_3840C4((uint64_t)&v18 + 4);
  sub_3840C4((uint64_t)v15);
  CFRelease(v6);
}

void sub_15B06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  __cxa_free_exception(v18);
  sub_602D0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_15B134(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_15B1CC(_Unwind_Exception *a1)
{
  uint8x8_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_15B208(uint64_t a1, const void **a2)
{
  sub_22210((CFStringRef *)a1, "data");
  uint64_t v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_15B254(CFTypeRef *a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v33 = v1;
  sub_21C8C(__p, "IODelegates");
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  if (!v1)
  {
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    goto LABEL_26;
  }
  int v2 = sub_15743C(v1, (const UInt8 *)__p);
  if (!v2 || (uint8x8_t v3 = v2, TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(v3)))
  {
    LOBYTE(v36) = 0;
    char v38 = 0;
LABEL_24:
    long long v34 = v29;
    uint64_t v35 = v30;
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    goto LABEL_26;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v3);
  int v6 = Count;
  long long v42 = 0uLL;
  unint64_t v43 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0) {
      sub_60548();
    }
    uint64_t v47 = &v43;
    *(void *)buf = sub_21974((int)Count);
    *(void *)&buf[8] = *(void *)buf;
    *(void *)&_DWORD buf[16] = *(void *)buf;
    uint64_t v46 = *(void *)buf + 24 * v7;
    sub_15BC8C(&v42, buf);
    sub_15BCFC((uint64_t)buf);
  }
  if (v6 < 1)
  {
LABEL_22:
    long long v36 = v42;
    unint64_t v37 = v43;
    unint64_t v43 = 0;
    long long v42 = 0uLL;
    char v38 = 1;
  }
  else
  {
    CFIndex v8 = 0;
    while (1)
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v3, v8);
      sub_15BADC((uint64_t)&v39, ValueAtIndex);
      if (!v41) {
        break;
      }
      uint64_t v10 = *((void *)&v42 + 1);
      if (*((void *)&v42 + 1) >= v43)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v42 + 1) - v42) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        if (0x5555555555555556 * ((uint64_t)(v43 - v42) >> 3) > v13) {
          unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v43 - v42) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v42) >> 3) >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t v47 = &v43;
        CFDataRef v15 = (char *)sub_21974(v14);
        int v16 = &v15[24 * v12];
        *(void *)buf = v15;
        *(void *)&buf[8] = v16;
        uint64_t v46 = (uint64_t)&v15[24 * v17];
        *(_OWORD *)int v16 = v39;
        *((void *)v16 + 2) = v40;
        *(void *)&_DWORD buf[16] = v16 + 24;
        sub_15BC8C(&v42, buf);
        uint64_t v11 = *((void *)&v42 + 1);
        sub_15BCFC((uint64_t)buf);
      }
      else
      {
        **((_OWORD **)&v42 + 1) = v39;
        *(void *)(v10 + 16) = v40;
        uint64_t v11 = v10 + 24;
      }
      *((void *)&v42 + 1) = v11;
      if (v6 == ++v8) {
        goto LABEL_22;
      }
    }
    LOBYTE(v36) = 0;
    char v38 = 0;
  }
  *(void *)buf = &v42;
  sub_15B944((void ***)buf);
  if (!v38) {
    goto LABEL_24;
  }
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  uint64_t v25 = *((void *)&v36 + 1);
  uint64_t v24 = v36;
  *(void *)&long long v39 = &v34;
  BYTE8(v39) = 0;
  if (*((void *)&v36 + 1) != (void)v36)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v36 + 1) - v36) >> 3);
    if (v26 > 0xAAAAAAAAAAAAAAALL) {
      sub_60548();
    }
    *(void *)&long long v34 = sub_21974(v26);
    *((void *)&v34 + 1) = v34;
    uint64_t v35 = v34 + 24 * v27;
    *(void *)&long long v42 = v34;
    uint64_t v44 = v34;
    *(void *)buf = &v35;
    *(void *)&buf[8] = &v44;
    *(void *)&_DWORD buf[16] = &v42;
    LOBYTE(v46) = 0;
    std::__fs::filesystem::path v28 = (void *)v34;
    do
    {
      *std::__fs::filesystem::path v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
      sub_46B38(v28, *(const void **)v24, *(void *)(v24 + 8), (uint64_t)(*(void *)(v24 + 8) - *(void *)v24) >> 2);
      std::__fs::filesystem::path v28 = (void *)(v42 + 24);
      *(void *)&long long v42 = v42 + 24;
      v24 += 24;
    }
    while (v24 != v25);
    LOBYTE(v46) = 1;
    sub_15BA74((uint64_t)buf);
    *((void *)&v34 + 1) = v28;
  }
  if (v38)
  {
    *(void *)buf = &v36;
    sub_15B944((void ***)buf);
  }
LABEL_26:
  *(void *)buf = &v29;
  sub_15B944((void ***)buf);
  if (v32 < 0)
  {
    operator delete(__p[0]);
    if (!v1) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v1) {
LABEL_30:
  }
    CFRelease(v1);
LABEL_31:
  if ((void)v34 != *((void *)&v34 + 1))
  {
    *(void *)&long long v39 = &v39;
    *((void *)&v39 + 1) = &v39;
    uint64_t v40 = 0;
    if (*(void *)(v34 + 8) - *(void *)v34 == 12)
    {
      unsigned int v18 = *(_DWORD *)(*(void *)v34 + 4);
      *(_DWORD *)buf = 7;
      *(void *)&buf[8] = v18;
      unsigned int v19 = *(_DWORD *)(*(void *)v34 + 8);
      LODWORD(v36) = 7;
      *((void *)&v36 + 1) = v19;
      sub_15AB48((uint64_t)&v42, (int *)buf, (int *)&v36);
    }
    BOOL v20 = (os_log_t *)sub_32A48(13);
    CFTypeRef v21 = *v20;
    if (*v20)
    {
      if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 273;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(void *)buf = &v34;
  sub_15B944((void ***)buf);
  return 2003329396;
}

void sub_15B840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a2)
  {
    sub_15B944(&a30);
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_15B944(void ***a1)
{
  CFDictionaryRef v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    CFNumberRef v5 = **a1;
    if (v4 != v2)
    {
      int v6 = (char *)v1[1];
      do
      {
        CFIndex v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      CFNumberRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_15B9D4(int *a1)
{
  int v2 = operator new(0x20uLL);
  void *v2 = 0;
  v2[1] = 0;
  sub_3847B8((uint64_t)(v2 + 2), a1);
  return v2;
}

void sub_15BA14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_15BA28(uint64_t a1, int *a2, int *a3)
{
  uint64_t v5 = sub_3847B8(a1, a2);
  sub_3847B8(v5 + 16, a3);
  return a1;
}

void sub_15BA60(_Unwind_Exception *a1)
{
  sub_3840C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_15BA74(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        int v6 = *(void **)(v4 - 24);
        v4 -= 24;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void sub_15BADC(uint64_t a1, const __CFArray *a2)
{
  if (a2 && (CFTypeID TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(a2)))
  {
    int Count = CFArrayGetCount(a2);
    CFTypeRef v21 = 0;
    unsigned __int16 v22 = 0;
    unint64_t v23 = 0;
    sub_15BD60((void **)&v21, Count);
    if (Count <= 0)
    {
      uint64_t v9 = v21;
      unint64_t v14 = v22;
      unint64_t v8 = v23;
LABEL_27:
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      CFIndex v6 = 0;
      uint64_t v7 = Count;
      unint64_t v8 = v23;
      uint64_t v9 = v21;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, v6);
        CFNumberRef v11 = sub_22314(ValueAtIndex);
        if (!((unint64_t)v11 >> 32)) {
          break;
        }
        int v12 = (int)v11;
        unint64_t v13 = v22;
        if ((unint64_t)v22 >= v8)
        {
          uint64_t v15 = (v22 - v9) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            sub_60548();
          }
          if ((uint64_t)(v8 - (void)v9) >> 1 > v16) {
            unint64_t v16 = (uint64_t)(v8 - (void)v9) >> 1;
          }
          if (v8 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)sub_46BF4(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          unsigned int v19 = (_DWORD *)(v17 + 4 * v15);
          _DWORD *v19 = v12;
          unint64_t v14 = (char *)(v19 + 1);
          while (v13 != v9)
          {
            int v20 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--unsigned int v19 = v20;
          }
          unint64_t v8 = v17 + 4 * v18;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = v19;
        }
        else
        {
          *(_DWORD *)unsigned __int16 v22 = v11;
          unint64_t v14 = v13 + 4;
        }
        unsigned __int16 v22 = v14;
        if (++v6 == v7) {
          goto LABEL_27;
        }
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      if (v9) {
        operator delete(v9);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void *sub_15BC8C(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  CFIndex v6 = (void *)*result;
  *double result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_15BCFC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_15BD60(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_60548();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_46BF4(a2);
    long long v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_15BE08(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFDictionaryRef v4 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v28 = v4;
  sub_21C8C(&__p, "ChannelSelectorMap");
  if (v4)
  {
    CFArrayRef v5 = (const __CFArray *)sub_15743C(v4, (const UInt8 *)&__p);
    if (v5)
    {
      sub_15BADC((uint64_t)buf, v5);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      long long v29 = 0;
      if (v33)
      {
        uint64_t v6 = *(void **)buf;
        sub_46B38(&v29, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
        if (v33)
        {
          if (v6) {
            operator delete(v6);
          }
        }
      }
    }
    else
    {
      buf[0] = 0;
      char v33 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      long long v29 = 0;
    }
  }
  else
  {
    long long v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v4) {
LABEL_15:
  }
    CFRelease(v4);
LABEL_16:
  uint64_t v7 = (int *)v29;
  uint64_t v8 = v30;
  if (v29 == v30)
  {
    unsigned __int16 v22 = (os_log_t *)sub_32A48(13);
    unint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 196;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Requires the channel selector map to be populated.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requires the channel selector map to be populated.");
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  int v11 = 0;
  std::__fs::filesystem::path __p = 0;
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  do
  {
    int v12 = *v7 - 1;
    *uint64_t v7 = v12;
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v14 = v11 - v9;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
      {
        unint64_t v27 = v10;
        std::__fs::filesystem::path __p = v9;
        sub_60548();
      }
      if ((uint64_t)(v10 - (void)v9) >> 1 > v15) {
        unint64_t v15 = (uint64_t)(v10 - (void)v9) >> 1;
      }
      if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v16 = (unint64_t)sub_46BF4(v16);
        int v12 = *v7;
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (int *)(v16 + 4 * v14);
      *uint64_t v18 = v12;
      unint64_t v13 = v18 + 1;
      while (v11 != v9)
      {
        int v19 = *--v11;
        *--uint64_t v18 = v19;
      }
      unint64_t v10 = v16 + 4 * v17;
      unint64_t v26 = v13;
      if (v9) {
        operator delete(v9);
      }
      uint64_t v9 = v18;
    }
    else
    {
      *int v11 = v12;
      unint64_t v13 = v11 + 1;
    }
    unint64_t v26 = v13;
    ++v7;
    int v11 = v13;
  }
  while (v7 != v8);
  unint64_t v27 = v10;
  std::__fs::filesystem::path __p = v9;
  sub_15AE24((uint64_t)buf, 1667789676, (uint64_t)&__p);
  sub_46089C(a3, (uint64_t)buf);
  sub_D7EFC(*(void **)&buf[16]);
  int v20 = *(void **)buf;
  *(void *)buf = 0;
  if (v20) {
    operator delete(v20);
  }
  if (v9)
  {
    unint64_t v26 = v9;
    operator delete(v9);
  }
  if (v29) {
    operator delete(v29);
  }
  return 0;
}

void sub_15C12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_15C1B0(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef v3 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v63 = v3;
  sub_21C8C(__p, "DeviceSpecificProperties");
  long long v61 = 0uLL;
  std::string::size_type v62 = 0;
  if (!v3)
  {
    long long v64 = 0uLL;
    uint64_t v65 = 0;
    goto LABEL_30;
  }
  CFDictionaryRef v4 = sub_15743C(v3, (const UInt8 *)__p);
  if (!v4 || (CFArrayRef v5 = v4, TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(v5)))
  {
    buf[0] = 0;
    LOBYTE(v76) = 0;
LABEL_28:
    long long v64 = v61;
    uint64_t v65 = v62;
    std::string::size_type v62 = 0;
    long long v61 = 0uLL;
    goto LABEL_30;
  }
  int Count = CFArrayGetCount((CFArrayRef)v5);
  long long v71 = 0uLL;
  unint64_t v72 = 0;
  sub_15CC14(&v71, Count);
  if (Count < 1)
  {
LABEL_26:
    *(_OWORD *)buf = v71;
    *(void *)&_DWORD buf[16] = v72;
    unint64_t v72 = 0;
    long long v71 = 0uLL;
    LOBYTE(v76) = 1;
  }
  else
  {
    CFIndex v8 = 0;
    uint64_t v9 = Count;
    while (1)
    {
      CFNumberRef ValueAtIndex = (void **)CFArrayGetValueAtIndex((CFArrayRef)v5, v8);
      int v11 = ValueAtIndex;
      if (!ValueAtIndex) {
        break;
      }
      CFRetain(ValueAtIndex);
      CFTypeID v12 = CFGetTypeID(v11);
      if (v12 != CFArrayGetTypeID())
      {
        CFRelease(v11);
        break;
      }
      long long v73 = v11;
      LOBYTE(v74) = 1;
      unint64_t v13 = (void *)*((void *)&v71 + 1);
      if (*((void *)&v71 + 1) >= v72)
      {
        uint64_t v14 = (void *)v71;
        uint64_t v15 = (uint64_t)(*((void *)&v71 + 1) - v71) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v17 = v72 - v71;
        if ((uint64_t)(v72 - v71) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        int v77 = &v72;
        if (v18)
        {
          unint64_t v18 = (unint64_t)sub_106EC(v18);
          unint64_t v13 = (void *)*((void *)&v71 + 1);
          uint64_t v14 = (void *)v71;
          int v11 = v73;
        }
        else
        {
          uint64_t v19 = 0;
        }
        int v20 = (void ***)(v18 + 8 * v15);
        unint64_t v21 = v18 + 8 * v19;
        unint64_t v76 = v21;
        *int v20 = v11;
        unsigned __int16 v22 = v20 + 1;
        long long v73 = 0;
        *(void *)&_DWORD buf[16] = v20 + 1;
        if (v13 != v14)
        {
          do
          {
            unint64_t v23 = (void **)*--v13;
            *--int v20 = v23;
            void *v13 = 0;
          }
          while (v13 != v14);
          unsigned __int16 v22 = *(void **)&buf[16];
          unint64_t v21 = v76;
        }
        long long v24 = v71;
        *(void *)&long long v71 = v20;
        *((void *)&v71 + 1) = v22;
        *(_OWORD *)&buf[8] = v24;
        unint64_t v25 = v72;
        unint64_t v72 = v21;
        unint64_t v76 = v25;
        *(void *)buf = v24;
        sub_15CCD4((uint64_t)buf);
        *((void *)&v71 + 1) = v22;
      }
      else
      {
        **((void **)&v71 + 1) = v11;
        long long v73 = 0;
        *((void *)&v71 + 1) = v13 + 1;
      }
      sub_206D8((uint64_t)&v73);
      if (++v8 == v9) {
        goto LABEL_26;
      }
    }
    LOBYTE(v73) = 0;
    LOBYTE(v74) = 0;
    buf[0] = 0;
    LOBYTE(v76) = 0;
    sub_206D8((uint64_t)&v73);
  }
  long long v73 = (void **)&v71;
  sub_15CB74(&v73);
  if (!(_BYTE)v76) {
    goto LABEL_28;
  }
  long long v64 = 0uLL;
  uint64_t v65 = 0;
  long long v42 = *(CFTypeRef **)buf;
  unint64_t v43 = *(CFTypeRef **)&buf[8];
  *(void *)&long long v71 = &v64;
  BYTE8(v71) = 0;
  uint64_t v44 = *(void *)&buf[8] - *(void *)buf;
  if (*(void *)&buf[8] != *(void *)buf)
  {
    if (v44 < 0) {
      sub_60548();
    }
    uint64_t v45 = sub_106EC(v44 >> 3);
    *(void *)&long long v64 = v45;
    *((void *)&v64 + 1) = v45;
    uint64_t v65 = &v45[v46];
    do
    {
      CFTypeRef v47 = *v42;
      if (*v42) {
        CFRetain(*v42);
      }
      *v45++ = v47;
      ++v42;
    }
    while (v42 != v43);
    *((void *)&v64 + 1) = v45;
  }
  if ((_BYTE)v76)
  {
    *(void *)&long long v71 = buf;
    sub_15CB74((void ***)&v71);
  }
LABEL_30:
  *(void *)buf = &v61;
  sub_15CB74((void ***)buf);
  if ((v68 & 0x80000000) == 0)
  {
    if (!v3) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  operator delete(__p[0]);
  if (v3) {
LABEL_34:
  }
    CFRelease(v3);
LABEL_35:
  CFTypeID v59 = (CFTypeRef *)*((void *)&v64 + 1);
  unint64_t v26 = (CFTypeRef *)v64;
  if ((void)v64 == *((void *)&v64 + 1))
  {
    uint64_t v40 = 2003329396;
    goto LABEL_61;
  }
  *(void *)&long long v61 = &v61;
  *((void *)&v61 + 1) = &v61;
  std::string::size_type v62 = 0;
  do
  {
    CFArrayRef v27 = (const __CFArray *)*v26;
    if (!*v26)
    {
      CFArrayRef v66 = 0;
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      double v52 = (void (*)(void *))&std::runtime_error::~runtime_error;
      std::runtime_error::runtime_error(exception, "Could not construct");
      goto LABEL_87;
    }
    CFRetain(*v26);
    CFArrayRef v66 = v27;
    if (CFArrayGetCount(v27) != 2)
    {
      __int16 v56 = (os_log_t *)sub_32A48(13);
      long long v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 226;
        _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      double v52 = (void (*)(void *))&std::logic_error::~logic_error;
      std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
LABEL_87:
      __cxa_throw(exception, v53, v52);
    }
    sub_68838(&cf, v27, 0);
    sub_1708E4((uint64_t)&v71, &cf);
    long long v28 = v71;
    long long v29 = (int *)v71;
    if ((void)v71 == *((void *)&v71 + 1))
    {
      float v54 = (os_log_t *)sub_32A48(13);
      long long v55 = *v54;
      if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 229;
        _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
LABEL_77:
      std::string::size_type v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v50, "Precondition failure.");
    }
    do
    {
      if ((sub_16F108(*v29) & 1) == 0)
      {
        int v48 = (os_log_t *)sub_32A48(13);
        unsigned int v49 = *v48;
        if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 232;
          _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_77;
      }
      ++v29;
    }
    while (v29 != *((int **)&v28 + 1));
    sub_68838(buf, v27, 1uLL);
    uint64_t v60 = v26;
    sub_1708E4((uint64_t)__p, (CFTypeRef *)buf);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    if (__p[0] != __p[1])
    {
      *(void *)buf = buf;
      *(void *)&buf[8] = buf;
      uint64_t v30 = (unsigned int *)v28;
      *(void *)&_DWORD buf[16] = 0;
      do
      {
        unsigned int v31 = *v30;
        LODWORD(v73) = 7;
        uint64_t v74 = v31;
        char v32 = sub_15B9D4((int *)&v73);
        uint64_t v33 = *(void *)buf;
        *char v32 = *(void *)buf;
        v32[1] = buf;
        *(void *)(v33 + 8) = v32;
        *(void *)buf = v32;
        ++*(void *)&buf[16];
        sub_3840C4((uint64_t)&v73);
        ++v30;
      }
      while (v30 != *((unsigned int **)&v28 + 1));
      sub_38445C((uint64_t)v70);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if ((void)v28) {
      operator delete((void *)v28);
    }
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v27);
    ++v26;
  }
  while (v60 + 1 != v59);
  long long v34 = sub_15ABD8(*(void *)a3, *(void *)(a3 + 8), 1684303986);
  if (!v34) {
    sub_38445C((uint64_t)&v71);
  }
  uint64_t v35 = (uint64_t *)sub_3857F4((int *)v34 + 6);
  uint64_t v36 = (uint64_t)v62;
  if (v62)
  {
    long long v37 = v61;
    uint64_t v38 = **((void **)&v61 + 1);
    *(void *)(v38 + 8) = *(void *)(v61 + 8);
    **(void **)(v37 + 8) = v38;
    uint64_t v39 = *v35;
    *(void *)(v39 + 8) = *((void *)&v37 + 1);
    **((void **)&v37 + 1) = v39;
    *uint64_t v35 = v37;
    *(void *)(v37 + 8) = v35;
    v35[2] += v36;
    std::string::size_type v62 = 0;
  }
  sub_15AD5C((uint64_t *)&v61);
  uint64_t v40 = 0;
LABEL_61:
  *(void *)buf = &v64;
  sub_15CB74((void ***)buf);
  return v40;
}

void sub_15CA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, char a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_15CB74(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFDictionaryRef v4 = (char *)v1[1];
    CFArrayRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_15CBF4(v6);
      }
      while (v4 != v2);
      CFArrayRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_15CBF4(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void *sub_15CC14(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      sub_60548();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    uint64_t v15 = result + 2;
    CFDictionaryRef v4 = (char *)sub_106EC(a2);
    uint64_t v7 = *v2;
    uint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      CFIndex v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      CFIndex v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
        *(void *)uint64_t v6 = 0;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    char *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    int v11 = v2[2];
    v2[2] = &v4[8 * v5];
    uint64_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_15CCD4((uint64_t)&v12);
  }
  return result;
}

uint64_t sub_15CCD4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    CFDictionaryRef v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_15CBF4(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_15CD24(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFDictionaryRef v4 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v15 = v4;
  sub_21C8C(__p, "DataSourceOrder");
  unint64_t v5 = sub_15620C(&v15, (const UInt8 *)__p);
  if (SHIBYTE(v21[0]) < 0)
  {
    operator delete(__p[0]);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v4) {
LABEL_7:
  }
    CFRelease(v4);
LABEL_8:
  int v6 = 0;
  if (v5 > 0x100000000) {
    int v6 = v5;
  }
  *(_DWORD *)bytes = v6;
  int v19 = 1920365171;
  CFDictionaryRef v17 = 0;
  sub_15B134((uint64_t)__p, "ID", &v19);
  CFDataRef v7 = CFDataCreate(0, bytes, 4);
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_1534E8(cf, v7);
  sub_15B208((uint64_t)v21, cf);
  unsigned __int16 v22 = __p;
  v23[0] = 2;
  CFDictionaryRef v8 = sub_4D3D8((uint64_t)&v22);
  uint64_t v9 = 0;
  CFDictionaryRef v17 = v8;
  do
  {
    int64x2_t v10 = v21[v9 + 1];
    if (v10) {
      CFRelease(v10);
    }
    int v11 = __p[v9 + 2];
    if (v11) {
      CFRelease(v11);
    }
    v9 -= 2;
  }
  while (v9 != -4);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  sub_384254((uint64_t)cf, v8);
  LODWORD(v22) = 1735553138;
  sub_3847B8((uint64_t)v23, (int *)cf);
  sub_15A1EC((uint64_t)__p, (int *)&v22, 1);
  sub_3840C4((uint64_t)v23);
  sub_3840C4((uint64_t)cf);
  CFRelease(v8);
  sub_46089C(a3, (uint64_t)__p);
  sub_D7EFC(v21[0]);
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  return 0;
}

void sub_15CF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, const void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  sub_602D0((uint64_t)&__p);
  sub_60394(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_15D028(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v22 = v5;
  sub_21C8C(buf, "AUsToBypass");
  __n128 v20 = 0uLL;
  uint64_t v21 = 0;
  if (v5)
  {
    sub_15D380((uint64_t)&v23, v5, buf, &v20);
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  v17.n128_u64[0] = (unint64_t)&v20;
  sub_217F8((void ***)&v17);
  if ((v29[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  CFTypeRef v6 = *a1;
  if (v6) {
    CFRetain(v6);
  }
  CFTypeRef v19 = v6;
  sub_21C8C(buf, "AUsToUnbypass");
  __n128 v17 = 0uLL;
  uint64_t v18 = 0;
  if (v6)
  {
    sub_15D380((uint64_t)&v20, (const __CFDictionary *)v6, buf, &v17);
  }
  else
  {
    __n128 v20 = 0uLL;
    uint64_t v21 = 0;
  }
  unint64_t v26 = &v17;
  sub_217F8((void ***)&v26);
  if ((v29[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v6) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v6) {
LABEL_20:
  }
    CFRelease(v6);
LABEL_21:
  uint64_t v7 = v23;
  uint64_t v8 = v24;
  if (v23 == v24)
  {
    unint64_t v11 = v20.n128_u64[1];
    uint64_t v10 = v20.n128_u64[0];
    if (v20.n128_u64[0] == v20.n128_u64[1])
    {
      uint64_t v12 = (os_log_t *)sub_32A48(13);
      int64x2_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
        __int16 v28 = 1024;
        *(_DWORD *)long long v29 = 157;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
  }
  else
  {
    do
    {
      sub_15D438((uint64_t)buf, 1, v7);
      sub_46089C(a3, (uint64_t)buf);
      sub_D7EFC(*(void **)&v29[2]);
      uint64_t v9 = *(void **)buf;
      *(void *)buf = 0;
      if (v9) {
        operator delete(v9);
      }
      v7 += 24;
    }
    while (v7 != v8);
    unint64_t v11 = v20.n128_u64[1];
    uint64_t v10 = v20.n128_u64[0];
  }
  while (v10 != v11)
  {
    sub_15D438((uint64_t)buf, 0, v10);
    sub_46089C(a3, (uint64_t)buf);
    sub_D7EFC(*(void **)&v29[2]);
    CFDictionaryRef v15 = *(void **)buf;
    *(void *)buf = 0;
    if (v15) {
      operator delete(v15);
    }
    v10 += 24;
  }
  *(void *)buf = &v20;
  sub_217F8((void ***)buf);
  *(void *)buf = &v23;
  sub_217F8((void ***)buf);
  return 0;
}

void sub_15D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 80) = &a13;
  sub_217F8((void ***)(v17 - 80));
  *(void *)(v17 - 80) = &a17;
  sub_217F8((void ***)(v17 - 80));
  _Unwind_Resume(a1);
}

__n128 sub_15D380(uint64_t a1, const __CFDictionary *a2, const UInt8 *a3, __n128 *a4)
{
  CFArrayRef v6 = (const __CFArray *)sub_15743C(a2, a3);
  if (!v6)
  {
    LOBYTE(v8) = 0;
    char v10 = 0;
    goto LABEL_6;
  }
  sub_15D76C((uint64_t)&v8, v6);
  if (!v10)
  {
LABEL_6:
    __n128 result = *a4;
    *(__n128 *)a1 = *a4;
    *(void *)(a1 + 16) = a4[1].n128_u64[0];
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    return result;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_2189C((char *)a1, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 3));
  if (v10)
  {
    unint64_t v11 = &v8;
    sub_217F8((void ***)&v11);
  }
  return result;
}

void sub_15D438(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)bytes = a2;
  int v18 = 21;
  sub_22210(&v19, "AUName");
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    CFArrayRef v6 = (const UInt8 *)a3;
  }
  else {
    CFArrayRef v6 = *(const UInt8 **)a3;
  }
  if (v5 >= 0) {
    CFIndex v7 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v7 = *(void *)(a3 + 8);
  }
  CFStringRef v20 = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
  if (!v20)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_15B134((uint64_t)&v21, "ID", &v18);
  CFDataRef v8 = CFDataCreate(0, bytes, 4);
  if (!v8)
  {
    uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  sub_1534E8(&cf, v8);
  sub_15B208((uint64_t)v22, &cf);
  v16[0] = &v19;
  v16[1] = 3;
  CFDictionaryRef v9 = sub_4D3D8((uint64_t)v16);
  uint64_t v10 = 0;
  v16[2] = v9;
  do
  {
    unint64_t v11 = *(const void **)&v22[v10 + 8];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)&v22[v10];
    if (v12) {
      CFRelease(v12);
    }
    v10 -= 16;
  }
  while (v10 != -48);
  if (cf) {
    CFRelease(cf);
  }
  sub_384254((uint64_t)v16, v9);
  LODWORD(v19) = 1652060274;
  sub_3847B8((uint64_t)&v20, (int *)v16);
  sub_15A1EC(a1, (int *)&v19, 1);
  sub_3840C4((uint64_t)&v20);
  sub_3840C4((uint64_t)v16);
  CFRelease(v9);
}

void sub_15D65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, CFTypeRef cf)
{
  __cxa_free_exception(v16);
  while (v15 != &a14)
  {
    v15 -= 16;
    sub_602D0((uint64_t)v15);
  }
  _Unwind_Resume(a1);
}

void sub_15D76C(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    int Count = CFArrayGetCount(a2);
    long long v18 = 0uLL;
    unint64_t v19 = 0;
    sub_20CF8((uint64_t *)&v18, Count);
    if (Count < 1)
    {
LABEL_18:
      *(_OWORD *)a1 = v18;
      *(void *)(a1 + 16) = v19;
      unint64_t v19 = 0;
      long long v18 = 0uLL;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      CFIndex v6 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v6);
        sub_65F38((CFTypeID)&v15, ValueAtIndex);
        if (!v17) {
          break;
        }
        uint64_t v8 = *((void *)&v18 + 1);
        if (*((void *)&v18 + 1) >= v19)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v18 + 1) - v18) >> 3);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          if (0x5555555555555556 * ((uint64_t)(v19 - v18) >> 3) > v11) {
            unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v19 - v18) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v18) >> 3) >= 0x555555555555555) {
            unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v12 = v11;
          }
          v20[4] = (void **)&v19;
          if (v12) {
            unint64_t v12 = (unint64_t)sub_21974(v12);
          }
          else {
            uint64_t v13 = 0;
          }
          unint64_t v14 = v12 + 24 * v10;
          v20[0] = (void **)v12;
          v20[1] = (void **)v14;
          v20[3] = (void **)(v12 + 24 * v13);
          *(_OWORD *)unint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
          long long v15 = 0uLL;
          uint64_t v16 = 0;
          v20[2] = (void **)(v14 + 24);
          sub_20D9C((uint64_t *)&v18, v20);
          uint64_t v9 = *((void *)&v18 + 1);
          sub_20E50((uint64_t)v20);
        }
        else
        {
          **((_OWORD **)&v18 + 1) = v15;
          *(void *)(v8 + 16) = v16;
          uint64_t v16 = 0;
          long long v15 = 0uLL;
          uint64_t v9 = v8 + 24;
        }
        *((void *)&v18 + 1) = v9;
        if (Count == ++v6) {
          goto LABEL_18;
        }
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
    }
    v20[0] = (void **)&v18;
    sub_217F8(v20);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

uint64_t sub_15D974(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v40 = v5;
  sub_21C8C(&__p, "FixedGains");
  if (!v5) {
    goto LABEL_31;
  }
  CFIndex v6 = sub_15743C(v5, (const UInt8 *)&__p);
  if (!v6) {
    goto LABEL_31;
  }
  CFIndex v7 = v6;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v7)) {
    goto LABEL_31;
  }
  int Count = CFArrayGetCount((CFArrayRef)v7);
  memset(buf, 0, 24);
  sub_157098((void **)buf, Count);
  if (Count <= 0)
  {
    int v24 = 1;
    uint64_t v13 = *(char **)buf;
    uint64_t v3 = *(void *)&buf[8];
    goto LABEL_32;
  }
  CFIndex v10 = 0;
  uint64_t v11 = Count;
  unint64_t v12 = *(void *)&buf[16];
  uint64_t v13 = *(char **)buf;
  uint64_t v36 = a3;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, v10);
    unint64_t v15 = sub_9976C((uint64_t)ValueAtIndex);
    if (!HIDWORD(v15)) {
      break;
    }
    int v16 = v15;
    char v17 = *(char **)&buf[8];
    if (*(void *)&buf[8] >= v12)
    {
      uint64_t v18 = (uint64_t)(*(void *)&buf[8] - (void)v13) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
      {
        *(void *)&_DWORD buf[16] = v12;
        *(void *)buf = v13;
        sub_60548();
      }
      if ((uint64_t)(v12 - (void)v13) >> 1 > v19) {
        unint64_t v19 = (uint64_t)(v12 - (void)v13) >> 1;
      }
      if (v12 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)sub_46BF4(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      CFDictionaryRef v22 = (char *)(v20 + 4 * v18);
      *(_DWORD *)CFDictionaryRef v22 = v16;
      uint64_t v3 = (uint64_t)(v22 + 4);
      while (v17 != v13)
      {
        int v23 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      unint64_t v12 = v20 + 4 * v21;
      *(void *)&buf[8] = v3;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v13 = v22;
      a3 = v36;
    }
    else
    {
      **(_DWORD **)&buf[8] = v15;
      uint64_t v3 = (uint64_t)(v17 + 4);
    }
    *(void *)&buf[8] = v3;
    if (++v10 == v11)
    {
      int v24 = 1;
      goto LABEL_32;
    }
  }
  *(void *)&_DWORD buf[16] = v12;
  *(void *)buf = v13;
  if (v13)
  {
    *(void *)&buf[8] = v13;
    operator delete(v13);
LABEL_31:
    int v24 = 0;
    uint64_t v13 = 0;
    goto LABEL_32;
  }
  int v24 = 0;
LABEL_32:
  if ((v48[7] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (!v5) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v5) {
LABEL_36:
  }
    CFRelease(v5);
LABEL_37:
  if (!v24)
  {
    char v32 = (os_log_t *)sub_32A48(13);
    uint64_t v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 144;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  *(void *)bytes = 0;
  sub_15DF18(bytes, v13, v3, (v3 - (uint64_t)v13) >> 2);
  int v44 = 1735287906;
  CFDictionaryRef v43 = 0;
  sub_15B134((uint64_t)&__p, "ID", &v44);
  CFDataRef v25 = CFDataCreate(0, bytes, 24);
  if (!v25)
  {
    uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
  }
  sub_1534E8(&cf, v25);
  sub_15B208((uint64_t)v48, &cf);
  v42[0] = &__p;
  v42[1] = 2;
  CFDictionaryRef v26 = sub_4D3D8((uint64_t)v42);
  uint64_t v27 = 0;
  CFDictionaryRef v43 = v26;
  do
  {
    __int16 v28 = *(const void **)&v48[v27 + 8];
    if (v28) {
      CFRelease(v28);
    }
    long long v29 = *(const void **)&v48[v27];
    if (v29) {
      CFRelease(v29);
    }
    v27 -= 16;
  }
  while (v27 != -32);
  if (cf) {
    CFRelease(cf);
  }
  sub_384254((uint64_t)v42, v26);
  LODWORD(__p) = 1735553138;
  sub_3847B8((uint64_t)&v47, (int *)v42);
  sub_15A1EC((uint64_t)buf, (int *)&__p, 1);
  sub_3840C4((uint64_t)&v47);
  sub_3840C4((uint64_t)v42);
  CFRelease(v26);
  if (*(void *)bytes)
  {
    uint64_t v38 = *(void **)bytes;
    operator delete(*(void **)bytes);
  }
  sub_46089C(a3, (uint64_t)buf);
  sub_D7EFC(*(void **)&buf[16]);
  uint64_t v30 = *(void **)buf;
  *(void *)buf = 0;
  if (v30) {
    operator delete(v30);
  }
  if (v13) {
    operator delete(v13);
  }
  return 0;
}

void sub_15DDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void *sub_15DF18(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFIndex v6 = result;
    __n128 result = sub_46BB4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_15DF78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_15DF94(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v28 = v5;
  sub_21C8C(__p, "BeamIndex");
  unint64_t v6 = sub_15620C(&v28, (const UInt8 *)__p);
  if (v33 < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v5) {
LABEL_7:
  }
    CFRelease(v5);
LABEL_8:
  if (HIDWORD(v6)) {
    float v7 = (float)v6;
  }
  else {
    float v7 = 1.0;
  }
  if (!sub_D7374(a3, 1685086576))
  {
    int v29 = 9;
    uint64_t v30 = LODWORD(v7);
    int v36 = 1651074168;
    sub_3847B8((uint64_t)&v37, &v29);
    sub_15A1EC((uint64_t)__p, &v36, 1);
    sub_3843C8((uint64_t)v34);
  }
  size_t v8 = sub_15ABD8(*a3, a3[1], 1685086576);
  uint64_t v9 = (void *)sub_3856EC((int *)v8 + 6);
  uint64_t v10 = (uint64_t)v9;
  LODWORD(v35[0]) = 9;
  v35[1] = (CFTypeRef)LODWORD(v7);
  unint64_t v11 = v9[1];
  if (!v11) {
    goto LABEL_30;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v3 = 1651074168;
    if (v11 <= 0x62696478) {
      uint64_t v3 = 0x62696478 % v11;
    }
  }
  else
  {
    uint64_t v3 = (v11 - 1) & 0x62696478;
  }
  uint64_t v13 = *(uint64_t ***)(*v9 + 8 * v3);
  if (!v13 || (unint64_t v14 = *v13) == 0)
  {
LABEL_30:
    int v16 = operator new(0x28uLL);
    char v17 = (void *)(v10 + 16);
    __p[0] = v16;
    __p[1] = (void *)(v10 + 16);
    char v32 = 0;
    *(void *)int v16 = 0;
    *((void *)v16 + 1) = 1651074168;
    *((_DWORD *)v16 + 4) = 1651074168;
    sub_3847B8((uint64_t)v16 + 24, (int *)v35);
    char v32 = 1;
    float v18 = (float)(unint64_t)(*(void *)(v10 + 24) + 1);
    float v19 = *(float *)(v10 + 32);
    if (!v11 || (float)(v19 * (float)v11) < v18)
    {
      BOOL v20 = 1;
      if (v11 >= 3) {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v11);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v21;
      }
      sub_6DEC4(v10, v23);
      unint64_t v11 = *(void *)(v10 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v11 <= 0x62696478) {
          uint64_t v3 = 0x62696478 % v11;
        }
        else {
          uint64_t v3 = 1651074168;
        }
      }
      else
      {
        uint64_t v3 = (v11 - 1) & 0x62696478;
      }
    }
    uint64_t v24 = *(void *)v10;
    CFDataRef v25 = *(void **)(*(void *)v10 + 8 * v3);
    if (v25)
    {
      *(void *)int v16 = *v25;
    }
    else
    {
      *(void *)int v16 = *v17;
      void *v17 = v16;
      *(void *)(v24 + 8 * v3) = v17;
      if (!*(void *)v16)
      {
LABEL_51:
        __p[0] = 0;
        ++*(void *)(v10 + 24);
        sub_D8A14((uint64_t)__p);
        goto LABEL_52;
      }
      unint64_t v26 = *(void *)(*(void *)v16 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      CFDataRef v25 = (void *)(*(void *)v10 + 8 * v26);
    }
    void *v25 = v16;
    goto LABEL_51;
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == 1651074168) {
      break;
    }
    if (v12.u32[0] > 1uLL)
    {
      if (v15 >= v11) {
        v15 %= v11;
      }
    }
    else
    {
      v15 &= v11 - 1;
    }
    if (v15 != v3) {
      goto LABEL_30;
    }
LABEL_29:
    unint64_t v14 = (uint64_t *)*v14;
    if (!v14) {
      goto LABEL_30;
    }
  }
  if (*((_DWORD *)v14 + 4) != 1651074168) {
    goto LABEL_29;
  }
  sub_384964((CFTypeRef *)v14 + 3, v35);
LABEL_52:
  sub_3840C4((uint64_t)v35);
  return 0;
}

void sub_15E370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
  {
    sub_D8A14((uint64_t)&__p);
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_15E3D0(CFTypeRef *a1, const void **a2, uint64_t *a3)
{
  CFDictionaryRef v6 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v47 = v6;
  sub_21C8C(&v46, "ConfigName");
  sub_21C8C(&__p, "-aufx-firf-appl");
  if (v6)
  {
    CFStringRef v7 = (const __CFString *)sub_15743C(v6, (const UInt8 *)&v46);
    if (v7)
    {
      sub_65F38((CFTypeID)&v43, v7);
      if (v44)
      {
        if ((SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v43.__pn_.__r_.__value_.__l.__data_;
          std::string::size_type v8 = v43.__pn_.__r_.__value_.__r.__words[2];
LABEL_10:
          __dst.__r_.__value_.__r.__words[2] = v8;
          goto LABEL_16;
        }
        uint64_t v9 = (void *)v43.__pn_.__r_.__value_.__r.__words[0];
        sub_21E8C(&__dst, v43.__pn_.__r_.__value_.__l.__data_, v43.__pn_.__r_.__value_.__l.__size_);
        if (v44) {
          operator delete(v9);
        }
        goto LABEL_16;
      }
    }
    else
    {
      v43.__pn_.__r_.__value_.__s.__data_[0] = 0;
      char v44 = 0;
    }
    std::string __dst = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_16;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::string::size_type v8 = __p.__r_.__value_.__r.__words[2];
    goto LABEL_10;
  }
  sub_21E8C(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v6) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  operator delete(v46.__pn_.__r_.__value_.__l.__data_);
  if (v6) {
LABEL_22:
  }
    CFRelease(v6);
LABEL_23:
  sub_15EE0C((uint64_t)&__p, a2, (const void **)&__dst.__r_.__value_.__l.__data_);
  uint64_t v10 = std::string::append(&__p, ".plist", 6uLL);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
  *(void *)&long long valuePtr = v10->__r_.__value_.__l.__size_;
  *(void *)((char *)&valuePtr + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v46.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&valuePtr + 7);
  v46.__pn_.__r_.__value_.__r.__words[0] = v11;
  v46.__pn_.__r_.__value_.__l.__size_ = valuePtr;
  *((unsigned char *)&v46.__pn_.__r_.__value_.__s + 23) = v12;
  sub_6D8A0(&v43, (uint64_t)(a2 + 6), &v46);
  if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21E8C(&v45, v43.__pn_.__r_.__value_.__l.__data_, v43.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::__fs::filesystem::path v45 = v43;
  }
  if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((v45.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v45;
  }
  else {
    uint64_t v13 = (std::__fs::filesystem::path *)v45.__pn_.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if ((v45.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v45.__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v45.__pn_.__r_.__value_.__l.__size_;
    }
    CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, size, 0x8000100u, 0);
    if (!v15)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v15 = 0;
  }
  LODWORD(valuePtr) = 1718186608;
  __p.__r_.__value_.__r.__words[0] = 0;
  sub_15B134((uint64_t)&__dst, "ID", (int *)&valuePtr);
  sub_22210((CFStringRef *)&__dst.__r_.__value_.__r.__words[2], "cfobject");
  if (v15) {
    CFRetain(v15);
  }
  v51[0] = v15;
  v46.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v46.__pn_.__r_.__value_.__l.__size_ = 2;
  CFDictionaryRef v17 = sub_4D3D8((uint64_t)&v46);
  uint64_t v18 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  do
  {
    float v19 = (const void *)v51[v18];
    if (v19) {
      CFRelease(v19);
    }
    BOOL v20 = (const void *)__dst.__r_.__value_.__r.__words[v18 + 2];
    if (v20) {
      CFRelease(v20);
    }
    v18 -= 2;
  }
  while (v18 != -4);
  sub_384254((uint64_t)&v46, v17);
  LODWORD(__dst.__r_.__value_.__l.__data_) = 1735553138;
  sub_3847B8((uint64_t)&__dst.__r_.__value_.__l.__size_, (int *)&v46);
  sub_15A1EC((uint64_t)&v43, (int *)&__dst, 1);
  sub_3840C4((uint64_t)&__dst.__r_.__value_.__l.__size_);
  sub_3840C4((uint64_t)&v46);
  CFRelease(v17);
  sub_46089C(a3, (uint64_t)&v43);
  sub_D7EFC((void *)v43.__pn_.__r_.__value_.__r.__words[2]);
  unint64_t v21 = (void *)v43.__pn_.__r_.__value_.__r.__words[0];
  v43.__pn_.__r_.__value_.__r.__words[0] = 0;
  if (v21) {
    operator delete(v21);
  }
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v22 = *a1;
  if (v22) {
    CFRetain(v22);
  }
  CFTypeRef v41 = v22;
  sub_21C8C(&__p, "VPMicIndex");
  memset(&v46, 0, sizeof(v46));
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  __dst.__r_.__value_.__s.__data_[8] = 0;
  v46.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v46.__pn_.__r_.__value_.__l.__size_ = v46.__pn_.__r_.__value_.__r.__words[0];
  v46.__pn_.__r_.__value_.__r.__words[2] = v46.__pn_.__r_.__value_.__r.__words[0] + 24;
  v46.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)sub_15EEC8((uint64_t)&v46.__pn_.__r_.__value_.__r.__words[2], (long long *)&__p, (long long *)&__dst, v46.__pn_.__r_.__value_.__l.__data_);
  LODWORD(valuePtr) = 0;
  CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v40 = v23;
  if (!v23)
  {
    uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
  }
  if (!v22) {
    goto LABEL_73;
  }
  CFRetain(v22);
  CFRetain(v22);
  std::string::size_type v25 = v46.__pn_.__r_.__value_.__l.__size_;
  uint64_t v24 = (const UInt8 *)v46.__pn_.__r_.__value_.__r.__words[0];
  unint64_t v26 = v22;
  if (v46.__pn_.__r_.__value_.__r.__words[0] != v46.__pn_.__r_.__value_.__l.__size_)
  {
    unint64_t v26 = v22;
    if (v46.__pn_.__r_.__value_.__r.__words[0] != v46.__pn_.__r_.__value_.__l.__size_ - 24)
    {
      CFDictionaryRef v27 = (const __CFDictionary *)v22;
      while (1)
      {
        CFDictionaryRef v28 = sub_15743C(v27, v24);
        if (!v28) {
          break;
        }
        unint64_t v26 = v28;
        CFRetain(v28);
        CFTypeID v29 = CFGetTypeID(v26);
        if (v29 != CFDictionaryGetTypeID())
        {
          CFRelease(v26);
          break;
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        __dst.__r_.__value_.__s.__data_[8] = 1;
        CFRetain(v26);
        CFRelease(v27);
        sub_7E2E8((uint64_t)&__dst);
        v24 += 24;
        if (v24 != (const UInt8 *)v25)
        {
          CFDictionaryRef v27 = (const __CFDictionary *)v26;
          if (v24 != (const UInt8 *)(v46.__pn_.__r_.__value_.__l.__size_ - 24)) {
            continue;
          }
        }
        goto LABEL_69;
      }
      __dst.__r_.__value_.__s.__data_[0] = 0;
      __dst.__r_.__value_.__s.__data_[8] = 0;
      sub_7E2E8((uint64_t)&__dst);
      CFRelease(v27);
      unint64_t v26 = 0;
    }
  }
LABEL_69:
  CFRelease(v22);
  if (!v26)
  {
LABEL_73:
    CFNumberRef cf = v23;
    CFNumberRef v40 = 0;
    goto LABEL_77;
  }
  CFRetain(v26);
  uint64_t v30 = sub_15743C((const __CFDictionary *)v26, (const UInt8 *)(v46.__pn_.__r_.__value_.__l.__size_ - 24));
  if (!v30) {
    goto LABEL_75;
  }
  unsigned int v31 = v30;
  CFRetain(v30);
  CFTypeID v32 = CFGetTypeID(v31);
  if (v32 != CFNumberGetTypeID())
  {
    CFRelease(v31);
LABEL_75:
    __dst.__r_.__value_.__s.__data_[0] = 0;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    CFNumberRef cf = v40;
    CFNumberRef v40 = 0;
    goto LABEL_76;
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  __dst.__r_.__value_.__s.__data_[8] = 1;
  CFRetain(v31);
  CFNumberRef cf = (CFNumberRef)v31;
LABEL_76:
  sub_15EF88((uint64_t)&__dst);
  CFRelease(v26);
  CFRelease(v26);
LABEL_77:
  int v48 = 1718186616;
  CFDictionaryRef v47 = 0;
  sub_15B134((uint64_t)&__dst, "ID", &v48);
  sub_22210((CFStringRef *)&__dst.__r_.__value_.__r.__words[2], "cfobject");
  if (cf) {
    CFRetain(cf);
  }
  v51[0] = cf;
  *(void *)&long long valuePtr = &__dst;
  *((void *)&valuePtr + 1) = 2;
  CFDictionaryRef v33 = sub_4D3D8((uint64_t)&valuePtr);
  uint64_t v34 = 0;
  CFDictionaryRef v47 = v33;
  do
  {
    uint64_t v35 = (const void *)v51[v34];
    if (v35) {
      CFRelease(v35);
    }
    int v36 = (const void *)__dst.__r_.__value_.__r.__words[v34 + 2];
    if (v36) {
      CFRelease(v36);
    }
    v34 -= 2;
  }
  while (v34 != -4);
  sub_384254((uint64_t)&valuePtr, v33);
  LODWORD(__dst.__r_.__value_.__l.__data_) = 1735553138;
  sub_3847B8((uint64_t)&__dst.__r_.__value_.__l.__size_, (int *)&valuePtr);
  sub_15A1EC((uint64_t)&v43, (int *)&__dst, 1);
  sub_3840C4((uint64_t)&__dst.__r_.__value_.__l.__size_);
  sub_3840C4((uint64_t)&valuePtr);
  CFRelease(v33);
  sub_46089C(a3, (uint64_t)&v43);
  sub_D7EFC((void *)v43.__pn_.__r_.__value_.__r.__words[2]);
  uint64_t v37 = (void *)v43.__pn_.__r_.__value_.__r.__words[0];
  v43.__pn_.__r_.__value_.__r.__words[0] = 0;
  if (v37) {
    operator delete(v37);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v40) {
    CFRelease(v40);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  sub_217F8((void ***)&__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (SHIBYTE(v45.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__pn_.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_15EB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

uint64_t sub_15EE0C(uint64_t a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = sub_5E220(a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    std::string::size_type v8 = (char *)result;
  }
  else {
    std::string::size_type v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      std::string::size_type v11 = a3;
    }
    else {
      std::string::size_type v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

char *sub_15EEC8(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  CFDictionaryRef v4 = __dst;
  std::string::size_type v11 = __dst;
  char v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_21E8C(v4, *(void **)v6, *((void *)v6 + 1));
        CFDictionaryRef v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)CFDictionaryRef v4 = v7;
      }
      size_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      char v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_21F2C((uint64_t)v9);
  return v4;
}

void sub_15EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_15EF88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_15EFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t sub_15EFE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_6405F0;
  a2[1] = v2;
  return result;
}

void *sub_15F004(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_6405F0;
  result[1] = v3;
  return result;
}

void sub_15F04C()
{
}

uint64_t sub_15F064(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_91A00();
  sub_1D13C0((uint64_t)&v15, v4, 0);
  size_t v5 = v15;
  int v20 = 1885500772;
  CFDictionaryRef v18 = 0;
  *(void *)bytes = v15;
  sub_15B134((uint64_t)&v21, "ID", &v20);
  CFDataRef v6 = CFDataCreate(0, bytes, 8);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_1534E8(&cf, v6);
  sub_15B208((uint64_t)v23, &cf);
  v17[0] = &v21;
  v17[1] = 2;
  CFDictionaryRef v7 = sub_4D3D8((uint64_t)v17);
  uint64_t v8 = 0;
  CFDictionaryRef v18 = v7;
  do
  {
    uint64_t v9 = *(const void **)&v23[v8 + 8];
    if (v9) {
      CFRelease(v9);
    }
    char v10 = *(const void **)&v23[v8];
    if (v10) {
      CFRelease(v10);
    }
    v8 -= 16;
  }
  while (v8 != -32);
  if (cf) {
    CFRelease(cf);
  }
  sub_384254((uint64_t)v17, v7);
  int v21 = 1735553138;
  sub_3847B8((uint64_t)&v22, (int *)v17);
  sub_15A1EC((uint64_t)__p, &v21, 1);
  sub_3840C4((uint64_t)&v22);
  sub_3840C4((uint64_t)v17);
  CFRelease(v7);
  sub_46089C(a3, (uint64_t)__p);
  sub_D7EFC((void *)__p[2]);
  std::string::size_type v11 = __p[0];
  __p[0] = 0;
  if (v11) {
    operator delete(v11);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

void sub_15F24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,const void *a22)
{
  __cxa_free_exception(v22);
  sub_602D0(v23 - 88);
  sub_60394(&a22);
  sub_9931C(&a14);
  _Unwind_Resume(a1);
}

void sub_15F310()
{
}

void sub_15F890(_Unwind_Exception *exception_object)
{
  while (1)
  {
    size_t v5 = (void **)*--v2;
    uint64_t v4 = v5;
    void *v2 = 0;
    if (v5) {
      sub_15FEA4(v4);
    }
    if (v2 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_15F8B4()
{
}

void sub_15FD9C(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  size_t v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFDictionaryRef v7 = va_arg(va2, const void *);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  __cxa_guard_abort(&qword_6603F0);
  sub_27F9C8((uint64_t *)va2);
  sub_6393C((const void **)va);
  sub_6393C((const void **)va1);
  *a3 = 0;
  sub_15FEA4(v3);
  _Unwind_Resume(a1);
}

void **sub_15FEA4(void **result)
{
  if (result)
  {
    os_release(*result);
    operator delete();
  }
  return result;
}

void *sub_15FF04(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    CFDataRef v6 = a1;
    do
    {
      CFDictionaryRef v7 = operator new(0x20uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[6] = *(_DWORD *)(v3 + 24);
      *((void *)v7 + 1) = a1;
      *((void *)v7 + 2) = v8;
      *(void *)CFDictionaryRef v7 = v6;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      CFDataRef v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_15FF94(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_15FFA8(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == a1) {
    return 0;
  }
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = a2[2];
  while (1)
  {
    int v6 = *(_DWORD *)(v2 + 24);
    if (v4 == 707406378 || ((int v7 = *(_DWORD *)(v2 + 20), v7 != 707406378) ? (v8 = v7 == v4) : (v8 = 1), v8))
    {
      if (v3 == 707406378 || ((v9 = *(_DWORD *)(v2 + 16), v9 != 707406378) ? (BOOL v10 = v9 == v3) : (BOOL v10 = 1), v10))
      {
        uint64_t v11 = 1;
        if (v5 == -1) {
          break;
        }
        if (v6 == -1 || v6 == v5) {
          break;
        }
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a1) {
      return 0;
    }
  }
  return v11;
}

unint64_t sub_160028(uint64_t a1, char *a2, uint64_t a3)
{
  int v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v4) {
    return 0;
  }
  int v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  BOOL v8 = v7;
  if (*(void *)(a1 + 64))
  {
    if ((a2 == 0) != (*(void *)(a1 + 8) == 0))
    {
      int v9 = *(_DWORD *)(a1 + 56);
      int v10 = *(_DWORD *)(a1 + 52) + 1;
      *(_DWORD *)(a1 + 52) = v10;
      if ((float)((float)((float)*(unsigned int *)(a1 + 24) / *(float *)(a1 + 20)) * (float)(v10 - v9)) >= *(float *)(a1 + 28))
      {
        *(_DWORD *)(a1 + 56) = v10;
        uint64_t v13 = (const char *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
        {
          unint64_t v11 = *(void *)(a1 + 104);
          if (a2)
          {
            size_t v14 = a3 - 1;
            if (v11 >= a3 - 1) {
              unint64_t v11 = a3 - 1;
            }
            uint64_t v13 = *(const char **)v13;
            goto LABEL_19;
          }
        }
        else
        {
          unint64_t v11 = *(unsigned __int8 *)(a1 + 119);
          if (a2)
          {
            size_t v14 = a3 - 1;
            if (a3 - 1 < v11) {
              unint64_t v11 = a3 - 1;
            }
LABEL_19:
            strncpy(a2, v13, v14);
          }
        }
        CFStringRef v15 = *(std::__shared_weak_count **)(a1 + 72);
        if (v15)
        {
          int v16 = std::__shared_weak_count::lock(v15);
          if (v16)
          {
            CFDictionaryRef v17 = v16;
            uint64_t v18 = *(void *)(a1 + 64);
            if (v18)
            {
              float v19 = *(std::__shared_weak_count **)(a1 + 88);
              if (!v19
                || (int v20 = *(NSObject **)(v18 + 72),
                    uint64_t v21 = *(void *)(a1 + 80),
                    (uint64_t v22 = std::__shared_weak_count::lock(v19)) == 0))
              {
                sub_5CABC();
              }
              uint64_t v23 = v22;
              p_shared_weak_owners = &v22->__shared_weak_owners_;
              atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_4636C(v22);
              block[0] = _NSConcreteStackBlock;
              block[1] = 1174405120;
              block[2] = sub_160228;
              block[3] = &unk_623570;
              block[4] = a1;
              block[5] = v21;
              unint64_t v26 = v23;
              atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
              dispatch_async(v20, block);
              if (v26) {
                std::__shared_weak_count::__release_weak(v26);
              }
              std::__shared_weak_count::__release_weak(v23);
            }
            sub_4636C(v17);
          }
        }
        goto LABEL_7;
      }
    }
  }
  unint64_t v11 = 0;
LABEL_7:
  sub_4636C(v8);
  return v11;
}

void sub_16020C(_Unwind_Exception *a1)
{
  sub_4636C(v2);
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_160228(void *a1)
{
  uint64_t v2 = a1[4];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = a1[5];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    int v4 = 0;
  }
  int v6 = *(std::__shared_weak_count **)(v2 + 72);
  if (v6)
  {
    int v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      BOOL v8 = v7;
      if (v5)
      {
        int v9 = *(unsigned __int8 **)(v2 + 64);
        if (v9)
        {
          int v10 = 6;
          while ((atomic_exchange((atomic_uchar *volatile)(v2 + 16), 1u) & 1) != 0)
          {
            usleep(0x1388u);
            if (!--v10) {
              goto LABEL_175;
            }
          }
          if (*(char *)(v2 + 119) < 0)
          {
            **(unsigned char **)(v2 + 96) = 0;
            *(void *)(v2 + 104) = 0;
          }
          else
          {
            *(unsigned char *)(v2 + 96) = 0;
            *(unsigned char *)(v2 + 119) = 0;
          }
          unint64_t v11 = (const char *)(v2 + 96);
          if (*(unsigned char *)(v2 + 17)) {
            char v12 = 32;
          }
          else {
            char v12 = 44;
          }
          float v54 = v8;
          if (!*(_DWORD *)(v2 + 60))
          {
            *(_DWORD *)(v2 + 60) = *(_DWORD *)(v2 + 32);
            std::string::append((std::string *)(v2 + 96), "\n", 1uLL);
            memset(&v62, 0, sizeof(v62));
            memset(&v60, 0, sizeof(v60));
            uint64_t v13 = qword_64BAF8;
            if (qword_64BAF8 == qword_64BB00)
            {
              size_t v21 = 0;
            }
            else
            {
              do
              {
                if (*(unsigned char *)(v2 + 17))
                {
                  sub_21C8C(&v59, *(char **)(v13 + 16));
                  sub_21C8C(&v58, *(char **)(v13 + 24));
                  std::string::resize(&v59, *(unsigned int *)(v13 + 8), 32);
                  std::string::resize(&v58, *(unsigned int *)(v13 + 8), 32);
                  sub_5E2A8((uint64_t)&__p, (const void **)&v59.__r_.__value_.__l.__data_, v12);
                  if ((v57 & 0x80u) == 0) {
                    p_p = (const std::string::value_type *)&__p;
                  }
                  else {
                    p_p = (const std::string::value_type *)__p;
                  }
                  if ((v57 & 0x80u) == 0) {
                    std::string::size_type v15 = v57;
                  }
                  else {
                    std::string::size_type v15 = v56;
                  }
                  std::string::append(&v62, p_p, v15);
                  if ((char)v57 < 0) {
                    operator delete(__p);
                  }
                  sub_5E2A8((uint64_t)&__p, (const void **)&v58.__r_.__value_.__l.__data_, v12);
                  if ((v57 & 0x80u) == 0) {
                    int v16 = (const std::string::value_type *)&__p;
                  }
                  else {
                    int v16 = (const std::string::value_type *)__p;
                  }
                  if ((v57 & 0x80u) == 0) {
                    std::string::size_type v17 = v57;
                  }
                  else {
                    std::string::size_type v17 = v56;
                  }
                  std::string::append(&v60, v16, v17);
                  if ((char)v57 < 0) {
                    operator delete(__p);
                  }
                  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v58.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v59.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  if (*(_DWORD *)v13 == -1)
                  {
                    size_t v20 = strlen(*(const char **)(v13 + 16));
                    std::string::append(&v62, *(const std::string::value_type **)(v13 + 16), v20);
                  }
                  else
                  {
                    sub_2A657C(&v59, *(_DWORD *)v13);
                    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v18 = &v59;
                    }
                    else {
                      uint64_t v18 = (std::string *)v59.__r_.__value_.__r.__words[0];
                    }
                    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v59.__r_.__value_.__l.__size_;
                    }
                    std::string::append(&v62, (const std::string::value_type *)v18, size);
                    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v59.__r_.__value_.__l.__data_);
                    }
                  }
                  std::string::push_back(&v62, v12);
                }
                v13 += 32;
              }
              while (v13 != qword_64BB00);
              if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v21 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v21 = v62.__r_.__value_.__l.__size_;
              }
            }
            sub_5E220((uint64_t)&v59, v21 + 1);
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v22 = &v59;
            }
            else {
              uint64_t v22 = (std::string *)v59.__r_.__value_.__r.__words[0];
            }
            if (v21)
            {
              if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v23 = &v62;
              }
              else {
                uint64_t v23 = (std::string *)v62.__r_.__value_.__r.__words[0];
              }
              memmove(v22, v23, v21);
            }
            *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 10;
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v24 = &v59;
            }
            else {
              uint64_t v24 = (std::string *)v59.__r_.__value_.__r.__words[0];
            }
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v25 = v59.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v24, v25);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v59.__r_.__value_.__l.__data_);
            }
            char v26 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v27 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v27 = v60.__r_.__value_.__l.__size_;
            }
            if (v27)
            {
              sub_5E220((uint64_t)&v59, v27 + 1);
              if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                CFDictionaryRef v28 = &v59;
              }
              else {
                CFDictionaryRef v28 = (std::string *)v59.__r_.__value_.__r.__words[0];
              }
              if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                CFTypeID v29 = &v60;
              }
              else {
                CFTypeID v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
              }
              memmove(v28, v29, v27);
              *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v27) = 10;
              if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v30 = &v59;
              }
              else {
                uint64_t v30 = (std::string *)v59.__r_.__value_.__r.__words[0];
              }
              if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v31 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v31 = v59.__r_.__value_.__l.__size_;
              }
              std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v30, v31);
              if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v59.__r_.__value_.__l.__data_);
              }
              char v26 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
            }
            if (v26 < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
          }
          if (*(_DWORD *)(v2 + 32)) {
            int v32 = *(_DWORD *)(v2 + 60) - 1;
          }
          else {
            int v32 = 1;
          }
          *(_DWORD *)(v2 + 60) = v32;
          CFDictionaryRef v33 = (_DWORD *)qword_64BAF8;
          if (qword_64BAF8 != qword_64BB00)
          {
            while (2)
            {
              memset(&v60, 0, sizeof(v60));
              switch(v33[1])
              {
                case 0:
                  if (*(float *)(v2 + 28) == 0.0)
                  {
                    float v41 = (float)sub_2969F8(*(void *)(v2 + 40)) / 1000.0;
                    if ((float)(v41 - *(float *)(v2 + 48)) > 5.0)
                    {
                      *(void *)(v2 + 40) = mach_absolute_time();
                      float v41 = 0.0;
                    }
                    *(float *)(v2 + 48) = v41;
                    std::to_string(&v62, v41);
                  }
                  else
                  {
                    std::to_string(&v62, (float)((float)*(unsigned int *)(v2 + 24) / *(float *)(v2 + 20))* (float)*(unsigned int *)(v2 + 52));
                  }
                  goto LABEL_130;
                case 1:
                case 2:
                case 3:
                case 5:
                  memset(&v59, 0, sizeof(v59));
                  char v34 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v9 + 272))(v9);
                  if (*v33 == 2757) {
                    char v35 = 1;
                  }
                  else {
                    char v35 = v34;
                  }
                  if ((v35 & 1) == 0)
                  {
                    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v60.__r_.__value_.__l.__size_ = 1;
                      uint64_t v39 = (std::string *)v60.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 1;
                      uint64_t v39 = &v60;
                    }
                    LOWORD(v39->__r_.__value_.__l.__data_) = 63;
                    goto LABEL_127;
                  }
                  if (!(*(unsigned int (**)(unsigned __int8 *))(*(void *)v9 + 176))(v9)
                    || v59.__r_.__value_.__l.__size_ - v59.__r_.__value_.__r.__words[0] != 8)
                  {
                    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v60.__r_.__value_.__l.__size_ = 6;
                      CFNumberRef v40 = (std::string *)v60.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 6;
                      CFNumberRef v40 = &v60;
                    }
                    strcpy((char *)v40, "!ERROR");
                    goto LABEL_127;
                  }
                  double v36 = *(double *)v59.__r_.__value_.__l.__data_;
                  int v37 = v33[1];
                  if (v37 == 3)
                  {
                    float v44 = v36;
                    double v36 = (float)(logf(v44) * 20.0);
                    std::to_string(&v62, v36);
                  }
                  else
                  {
                    if (v37 != 2) {
                      goto LABEL_151;
                    }
                    float v38 = v36;
                    double v36 = (float)(logf(v38) * 10.0);
                    std::to_string(&v62, v36);
                  }
                  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v60.__r_.__value_.__l.__data_);
                  }
                  std::string v60 = v62;
                  int v37 = v33[1];
LABEL_151:
                  if (v37 == 5)
                  {
                    sub_2440C((uint64_t)&v62);
                    *(_DWORD *)((char *)v63 + *(void *)(v62.__r_.__value_.__r.__words[2] - 24)) = *(_DWORD *)((unsigned char *)v63 + *(void *)(v62.__r_.__value_.__r.__words[2] - 24)) & 0xFFFFFFB5 | 8;
                    std::ostream::operator<<();
                    sub_21C8C(&v58, "0x");
                    sub_246E4(&__p, (uint64_t)v63);
                    if ((v57 & 0x80u) == 0) {
                      std::__fs::filesystem::path v45 = (const std::string::value_type *)&__p;
                    }
                    else {
                      std::__fs::filesystem::path v45 = (const std::string::value_type *)__p;
                    }
                    if ((v57 & 0x80u) == 0) {
                      std::string::size_type v46 = v57;
                    }
                    else {
                      std::string::size_type v46 = v56;
                    }
                    CFDictionaryRef v47 = std::string::append(&v58, v45, v46);
                    std::string::size_type v48 = v47->__r_.__value_.__r.__words[0];
                    v61[0] = v47->__r_.__value_.__l.__size_;
                    *(void *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1]
                                                                             + 7);
                    char v49 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
                    v47->__r_.__value_.__l.__size_ = 0;
                    v47->__r_.__value_.__r.__words[2] = 0;
                    v47->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v60.__r_.__value_.__l.__data_);
                    }
                    v60.__r_.__value_.__r.__words[0] = v48;
                    v60.__r_.__value_.__l.__size_ = v61[0];
                    *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v61 + 7);
                    *((unsigned char *)&v60.__r_.__value_.__s + 23) = v49;
                    if ((char)v57 < 0) {
                      operator delete(__p);
                    }
                    BOOL v8 = v54;
                    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v58.__r_.__value_.__l.__data_);
                    }
                    v62.__r_.__value_.__r.__words[0] = v53;
                    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + *(void *)(v53 - 24)) = v52;
                    v62.__r_.__value_.__r.__words[2] = v51;
                    if (v64 < 0) {
                      operator delete((void *)v63[8]);
                    }
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    std::ios::~ios();
                  }
                  else
                  {
                    std::to_string(&v62, v36);
                    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v60.__r_.__value_.__l.__data_);
                    }
                    std::string v60 = v62;
                  }
LABEL_127:
                  if (v59.__r_.__value_.__r.__words[0])
                  {
                    v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
                    operator delete(v59.__r_.__value_.__l.__data_);
                  }
LABEL_133:
                  if (*(unsigned char *)(v2 + 17)) {
                    std::string::resize(&v60, v33[2], 32);
                  }
                  sub_5E2A8((uint64_t)&v62, (const void **)&v60.__r_.__value_.__l.__data_, v12);
                  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v42 = &v62;
                  }
                  else {
                    long long v42 = (std::string *)v62.__r_.__value_.__r.__words[0];
                  }
                  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v43 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v43 = v62.__r_.__value_.__l.__size_;
                  }
                  std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v42, v43);
                  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v62.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v60.__r_.__value_.__l.__data_);
                  }
                  v33 += 8;
                  if (v33 == (_DWORD *)qword_64BB00) {
                    break;
                  }
                  continue;
                case 4:
                  std::to_string(&v62, v9[80]);
LABEL_130:
                  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v60.__r_.__value_.__l.__data_);
                  }
                  std::string v60 = v62;
                  goto LABEL_133;
                default:
                  *((unsigned char *)&v60.__r_.__value_.__s + 23) = 7;
                  qmemcpy(&v60, "!FORMAT", 7);
                  goto LABEL_133;
              }
              break;
            }
          }
          std::string::append((std::string *)(v2 + 96), "\n", 1uLL);
          std::string::size_type v50 = *(FILE **)(v2 + 8);
          if (v50)
          {
            if (*(char *)(v2 + 119) < 0) {
              unint64_t v11 = *(const char **)v11;
            }
            fputs(v11, v50);
          }
          atomic_store(0, (unsigned __int8 *)(v2 + 16));
        }
      }
LABEL_175:
      sub_4636C(v8);
    }
  }
  if (v4) {
    sub_4636C(v4);
  }
}

void sub_160C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,long long buf,long long a44)
{
  if (a2)
  {
    if (a33 < 0) {
      operator delete(__p);
    }
    if (a39 < 0) {
      operator delete(a34);
    }
    if (SBYTE7(a44) < 0) {
      operator delete((void *)buf);
    }
    if (a2 == 3)
    {
      std::string::size_type v46 = __cxa_begin_catch(exception_object);
      CFDictionaryRef v47 = (os_log_t *)sub_32A48(25);
      std::string::size_type v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = (*(uint64_t (**)(void *))(*(void *)v46 + 16))(v46);
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AncLoggerV3.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 182;
        WORD1(a44) = 2080;
        *(void *)((char *)&a44 + 4) = v49;
        _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      std::string::size_type v50 = (void **)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        std::string::size_type v51 = v50;
        std::string::size_type v52 = (os_log_t *)sub_32A48(25);
        std::string::size_type v53 = *v52;
        if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v51 + 23) < 0) {
            std::string::size_type v51 = (void **)*v51;
          }
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "AncLoggerV3.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 183;
          WORD1(a44) = 2080;
          *(void *)((char *)&a44 + 4) = v51;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        float v54 = (os_log_t *)sub_32A48(25);
        long long v55 = *v54;
        if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "AncLoggerV3.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 184;
          _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown.", (uint8_t *)&buf, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x160BFCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_161074(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_161084(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1610A0(uint64_t a1)
{
  sub_1610D8(a1);

  operator delete();
}

uint64_t sub_1610D8(uint64_t a1)
{
  *(void *)a1 = off_623528;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = off_63ACC0;
  int v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

__n128 sub_161160(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  int v6 = (char *)operator new(0x90uLL);
  int v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_6235B0;
  unint64_t v8 = (unint64_t)(v6 + 24);
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 15) = 0;
  *((_WORD *)v6 + 20) = 256;
  *(void *)(v6 + 44) = 0x400473B8000;
  *(void *)(v6 + 52) = 1065353216;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 3) = off_623528;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 16) = 0;
  *((void *)v6 + 17) = 0;
  if (!a3 || (int v9 = std::__shared_weak_count::lock(a3)) == 0 || !a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(exception, "ancManager expired");
  }
  if (*(_DWORD *)(a2 + 12) != 3)
  {
    size_t v14 = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(v14, "ancManager is not V3");
  }
  atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v10 = (std::__shared_weak_count *)v7[4].__vftable;
  v7[3].__shared_weak_owners_ = a2;
  v7[4].__vftable = (std::__shared_weak_count_vtbl *)a3;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_4636C(v9);
  std::__shared_weak_count::__release_weak(a3);
  shared_weak_owners = (std::__shared_weak_count *)v7[4].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[4].__shared_owners_ = v8;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
    goto LABEL_13;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[4].__shared_owners_ = v8;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_13:
    sub_4636C(v7);
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a1 = result;
  return result;
}

void sub_161384(_Unwind_Exception *a1)
{
  __cxa_free_exception(v5);
  sub_4636C(v4);
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(v1 + 112);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)(v1 + 24) = v3;
  int v9 = *(std::__shared_weak_count **)(v1 + 96);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_161404(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_161428(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6235B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_16147C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6235B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL sub_16149C(const __CFString *a1)
{
  CFPropertyListRef v1 = CFPreferencesCopyValue(a1, @"com.apple.audio.virtualaudio", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  CFPropertyListRef v2 = v1;
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0;
}

BOOL sub_1614F4(const __CFString *a1, CFStringRef applicationID, _DWORD *a3)
{
  int v3 = 0;
  Boolean keyExistsAndHasValidFormat = 0;
  if (a1)
  {
    if (applicationID)
    {
      *a3 = CFPreferencesGetAppIntegerValue(a1, applicationID, &keyExistsAndHasValidFormat);
      int v3 = keyExistsAndHasValidFormat;
      if (!keyExistsAndHasValidFormat)
      {
        *a3 = CFPreferencesGetAppBooleanValue(a1, applicationID, &keyExistsAndHasValidFormat);
        int v3 = keyExistsAndHasValidFormat;
      }
    }
  }
  return v3 != 0;
}

uint64_t sub_161574(CFStringRef key, const __CFString *a2, uint64_t a3)
{
  uint64_t result = 0;
  if (key)
  {
    if (a2)
    {
      uint64_t result = (uint64_t)CFPreferencesCopyValue(key, a2, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      if (result)
      {
        int v6 = (const void *)result;
        CFTypeID v7 = CFGetTypeID((CFTypeRef)result);
        if (v7 == CFStringGetTypeID())
        {
          *(void *)buf = v6;
          buf[8] = 1;
          sub_8B9E0(a3, (uint64_t)buf);
          sub_72924((uint64_t)buf);
          return 1;
        }
        CFRelease(v6);
        unint64_t v8 = (os_log_t *)sub_32A48(13);
        int v9 = *v8;
        if (*v8)
        {
          uint64_t result = os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_21B7C(__p, key);
          if (v12 >= 0) {
            int v10 = __p;
          }
          else {
            int v10 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          __int16 v14 = 1024;
          int v15 = 135;
          __int16 v16 = 2080;
          std::string::size_type v17 = v10;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d The value for key %s is not a CFString.", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_1616F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_161714(uint64_t a1, CFStringRef key, const __CFString *a3)
{
  CFTypeRef cf = 0;
  unsigned __int8 v11 = 1;
  if (a3) {
    CFStringRef v5 = a3;
  }
  else {
    CFStringRef v5 = @"com.apple.audio.virtualaudio";
  }
  *(unsigned char *)a1 = sub_161574(key, v5, (uint64_t)&cf);
  CFTypeRef v6 = cf;
  *(void *)(a1 + 8) = cf;
  int v7 = v11;
  *(unsigned char *)(a1 + 16) = v11;
  if (v7) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    CFRetain(v6);
  }
  return sub_72924((uint64_t)&cf);
}

void sub_161794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFStringRef sub_1617A8(CFStringRef key, void **a2)
{
  CFStringRef v2 = key;
  if (key)
  {
    CFStringRef v4 = (const __CFString *)CFPreferencesCopyValue(key, @"com.apple.audio.virtualaudio", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    if (v4)
    {
      CFStringRef v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
      {
        Systeuint64_t m = CFLocaleGetSystem();
        BOOL v8 = CFNumberFormatterCreate(0, System, kCFNumberFormatterDecimalStyle);
        if (v8)
        {
          int v9 = v8;
          CFNumberRef NumberFromString = CFNumberFormatterCreateNumberFromString(0, v8, v5, 0, 0);
          if (NumberFromString)
          {
            CFStringRef v11 = (const __CFString *)NumberFromString;
            CFRelease(v5);
            CFTypeID v6 = CFGetTypeID(v11);
            CFStringRef v5 = v11;
          }
          else
          {
            size_t v21 = (os_log_t *)sub_32A48(13);
            uint64_t v22 = *v21;
            if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
            {
              sub_21B7C(valuePtr, v2);
              uint64_t v23 = v25 >= 0 ? valuePtr : (void **)valuePtr[0];
              *(_DWORD *)buf = 136315650;
              size_t v27 = "RunTimeDefaults.cpp";
              __int16 v28 = 1024;
              int v29 = 191;
              __int16 v30 = 2080;
              std::string::size_type v31 = v23;
              _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d The value for key %s is a CFString that cannot be converted to a CFNumber.", buf, 0x1Cu);
              if (v25 < 0) {
                operator delete(valuePtr[0]);
              }
            }
          }
          CFRelease(v9);
        }
        else
        {
          float v19 = (os_log_t *)sub_32A48(13);
          size_t v20 = *v19;
          if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            size_t v27 = "RunTimeDefaults.cpp";
            __int16 v28 = 1024;
            int v29 = 198;
            _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to create a CFNumberFormatterRef.", buf, 0x12u);
          }
        }
      }
      if (v6 == CFNumberGetTypeID())
      {
        valuePtr[0] = 0;
        int Value = CFNumberGetValue((CFNumberRef)v5, kCFNumberFloat64Type, valuePtr);
        CFStringRef v2 = (const __CFString *)(Value == 1);
        if (Value == 1)
        {
          *a2 = valuePtr[0];
        }
        else
        {
          std::string::size_type v17 = (os_log_t *)sub_32A48(13);
          uint64_t v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            size_t v27 = "RunTimeDefaults.cpp";
            __int16 v28 = 1024;
            int v29 = 213;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d CFNumberGetValue() failed while trying to convert a CFNumber to a Float32.", buf, 0x12u);
          }
        }
      }
      else
      {
        uint64_t v13 = (os_log_t *)sub_32A48(13);
        __int16 v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          sub_21B7C(valuePtr, v2);
          int v15 = v25 >= 0 ? valuePtr : (void **)valuePtr[0];
          *(_DWORD *)buf = 136315650;
          size_t v27 = "RunTimeDefaults.cpp";
          __int16 v28 = 1024;
          int v29 = 218;
          __int16 v30 = 2080;
          std::string::size_type v31 = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d The value for key %s is neither a CFNumber nor a convertible CFString.", buf, 0x1Cu);
          if (v25 < 0) {
            operator delete(valuePtr[0]);
          }
        }
        CFStringRef v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_161B44()
{
  if ((byte_64BB19 & 1) == 0)
  {
    int v3 = 0;
    if (sub_1614F4(@"AllowUSBInputForSiri", @"com.apple.audio.virtualaudio", &v3))
    {
      byte_64BB18 = v3 != 0;
      uint64_t v0 = (os_log_t *)sub_32A48(13);
      CFPropertyListRef v1 = *v0;
      if (*v0)
      {
        if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          CFStringRef v5 = "RunTimeDefaults.cpp";
          __int16 v6 = 1024;
          int v7 = 379;
          __int16 v8 = 1024;
          int v9 = byte_64BB18;
          _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allow USB Input for Siri: %u", buf, 0x18u);
        }
      }
    }
    byte_64BB19 = 1;
  }
  return byte_64BB18;
}

void sub_161C60(id a1)
{
}

void sub_161C78(id a1)
{
  int v3 = 0;
  if (sub_1614F4(@"AllowUSBForTelephony", @"com.apple.audio.virtualaudio", &v3)) {
    byte_64BB1A = v3 != 0;
  }
  CFPropertyListRef v1 = (os_log_t *)sub_32A48(13);
  CFStringRef v2 = *v1;
  if (*v1)
  {
    if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      CFStringRef v5 = "RunTimeDefaults.cpp";
      __int16 v6 = 1024;
      int v7 = 403;
      __int16 v8 = 1024;
      int v9 = byte_64BB1A;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allow USB for Telephony: %u", buf, 0x18u);
    }
  }
}

uint64_t sub_161D78()
{
  if ((byte_64BB29 & 1) == 0)
  {
    int v3 = 0;
    if (sub_1614F4(@"DisallowUSBHostAudioOutput", @"com.apple.audio.virtualaudio", &v3))
    {
      byte_64BB28 = v3 != 0;
      uint64_t v0 = (os_log_t *)sub_32A48(13);
      CFPropertyListRef v1 = *v0;
      if (*v0)
      {
        if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          CFStringRef v5 = "RunTimeDefaults.cpp";
          __int16 v6 = 1024;
          int v7 = 425;
          __int16 v8 = 1024;
          int v9 = byte_64BB28;
          _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallow USB Host Audio Output: %u", buf, 0x18u);
        }
      }
    }
    byte_64BB29 = 1;
  }
  return byte_64BB28;
}

uint64_t sub_161E94()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BB30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BB30))
  {
    byte_64BB2A = sub_161F08();
    __cxa_guard_release(&qword_64BB30);
  }
  return byte_64BB2A;
}

void sub_161EF0(_Unwind_Exception *a1)
{
}

BOOL sub_161F08()
{
  int v5 = 0;
  BOOL v0 = 0;
  if (sub_1614F4(@"EnableCarPlayTesting", @"com.apple.coreaudio", &v5))
  {
    int v1 = v5;
    BOOL v0 = v5 != 0;
    CFStringRef v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        int v7 = "RunTimeDefaults.cpp";
        __int16 v8 = 1024;
        int v9 = 447;
        __int16 v10 = 1024;
        BOOL v11 = v1 != 0;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enable CarPlay test routes: %u", buf, 0x18u);
      }
    }
  }
  return v0;
}

void sub_162010(id a1)
{
}

void sub_162028(id a1)
{
  int v3 = 0;
  if (sub_1614F4(@"AllowVibeInMultiRoute", @"com.apple.audio.virtualaudio", &v3))
  {
    byte_64BB38 = v3 != 0;
    int v1 = (os_log_t *)sub_32A48(13);
    CFStringRef v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        int v5 = "RunTimeDefaults.cpp";
        __int16 v6 = 1024;
        int v7 = 475;
        __int16 v8 = 1024;
        int v9 = byte_64BB38;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allow vibe in multi-route: %u", buf, 0x18u);
      }
    }
  }
}

uint64_t sub_162124()
{
  if ((byte_64BB49 & 1) == 0)
  {
    int v5 = 0;
    if (sub_1614F4(@"AllowUSBInVoiceChat", @"com.apple.audio.virtualaudio", &v5))
    {
      BOOL v0 = (os_log_t *)sub_32A48(13);
      int v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          int v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 520;
          __int16 v10 = 2080;
          BOOL v11 = "AllowUSBInVoiceChat";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }
      else
      {
        int v3 = v5;
      }
      byte_64BB48 = v3 != 0;
    }
    byte_64BB49 = 1;
  }
  return byte_64BB48;
}

uint64_t sub_162258()
{
  if ((byte_64BB4B & 1) == 0)
  {
    int v5 = 0;
    if (sub_1614F4(@"UseReceiverInVideoChat", @"com.apple.audio.virtualaudio", &v5))
    {
      BOOL v0 = (os_log_t *)sub_32A48(13);
      int v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          int v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 545;
          __int16 v10 = 2080;
          BOOL v11 = "UseReceiverInVideoChat";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }
      else
      {
        int v3 = v5;
      }
      byte_64BB4A = v3 != 0;
    }
    byte_64BB4B = 1;
  }
  return byte_64BB4A;
}

uint64_t sub_16238C()
{
  if ((byte_64BB4D & 1) == 0)
  {
    int v5 = 0;
    if (sub_1614F4(@"DisableAudioProcessing", @"com.apple.audio.virtualaudio", &v5))
    {
      BOOL v0 = (os_log_t *)sub_32A48(13);
      int v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          int v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 570;
          __int16 v10 = 2080;
          BOOL v11 = "DisableAudioProcessing";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }
      else
      {
        int v3 = v5;
      }
      byte_64BB4C = v3 != 0;
    }
    byte_64BB4D = 1;
  }
  return byte_64BB4C;
}

uint64_t sub_1624C0()
{
  if (byte_64BB4F == 1) {
    return byte_64BB4E != 0;
  }
  int v6 = 0;
  if (sub_1614F4(@"DisableInputProcessing", @"com.apple.audio.virtualaudio", &v6))
  {
    int v1 = (os_log_t *)sub_32A48(13);
    BOOL v2 = *v1;
    if (*v1)
    {
      BOOL v3 = os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT);
      int v4 = v6;
      if (v3)
      {
        *(_DWORD *)buf = 136315906;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 594;
        __int16 v11 = 2080;
        __int16 v12 = "DisableInputProcessing";
        __int16 v13 = 1024;
        int v14 = v6;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
      }
    }
    else
    {
      int v4 = v6;
    }
    int v5 = v4 != 0;
    byte_64BB4E = v4 != 0;
  }
  else
  {
    int v5 = byte_64BB4E;
  }
  uint64_t result = 1;
  if (!v5) {
    uint64_t result = sub_16238C();
  }
  byte_64BB4E = result;
  byte_64BB4F = 1;
  return result;
}

uint64_t sub_162620()
{
  if (byte_64BB51 == 1) {
    return byte_64BB50 != 0;
  }
  int v6 = 0;
  if (sub_1614F4(@"DisableOutputProcessing", @"com.apple.audio.virtualaudio", &v6))
  {
    int v1 = (os_log_t *)sub_32A48(13);
    BOOL v2 = *v1;
    if (*v1)
    {
      BOOL v3 = os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT);
      int v4 = v6;
      if (v3)
      {
        *(_DWORD *)buf = 136315906;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 620;
        __int16 v11 = 2080;
        __int16 v12 = "DisableOutputProcessing";
        __int16 v13 = 1024;
        int v14 = v6;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
      }
    }
    else
    {
      int v4 = v6;
    }
    int v5 = v4 != 0;
    byte_64BB50 = v4 != 0;
  }
  else
  {
    int v5 = byte_64BB50;
  }
  uint64_t result = 1;
  if (!v5) {
    uint64_t result = sub_16238C();
  }
  byte_64BB50 = result;
  byte_64BB51 = 1;
  return result;
}

BOOL sub_162780(float *a1)
{
  int v8 = 0;
  BOOL v2 = sub_1614F4(@"MaxSpeakerVolumeDecibels", @"com.apple.audio.virtualaudio", &v8);
  if (v2)
  {
    BOOL v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3)
    {
      BOOL v5 = os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT);
      int v6 = v8;
      if (v5)
      {
        *(_DWORD *)buf = 136315906;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 641;
        __int16 v13 = 2080;
        int v14 = "MaxSpeakerVolumeDecibels";
        __int16 v15 = 1024;
        int v16 = v8;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
      }
    }
    else
    {
      int v6 = v8;
    }
    *a1 = (float)v6;
  }
  return v2;
}

BOOL sub_1628A0(float *a1)
{
  int v8 = 0;
  BOOL v2 = sub_1614F4(@"MaxWiredHeadphonesVoiceChatVolumeDecibels", @"com.apple.audio.virtualaudio", &v8);
  if (v2)
  {
    BOOL v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3)
    {
      BOOL v5 = os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT);
      int v6 = v8;
      if (v5)
      {
        *(_DWORD *)buf = 136315906;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 688;
        __int16 v13 = 2080;
        int v14 = "MaxWiredHeadphonesVoiceChatVolumeDecibels";
        __int16 v15 = 1024;
        int v16 = v8;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
      }
    }
    else
    {
      int v6 = v8;
    }
    *a1 = (float)v6;
  }
  return v2;
}

BOOL sub_1629C0(float *a1)
{
  int v8 = 0;
  BOOL v2 = sub_1614F4(@"MinWiredHeadphonesVoiceChatVolumeDecibels", @"com.apple.audio.virtualaudio", &v8);
  if (v2)
  {
    BOOL v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3)
    {
      BOOL v5 = os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT);
      int v6 = v8;
      if (v5)
      {
        *(_DWORD *)buf = 136315906;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 703;
        __int16 v13 = 2080;
        int v14 = "MinWiredHeadphonesVoiceChatVolumeDecibels";
        __int16 v15 = 1024;
        int v16 = v8;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
      }
    }
    else
    {
      int v6 = v8;
    }
    *a1 = (float)v6;
  }
  return v2;
}

void sub_162AE0()
{
  *(void *)int v6 = 0;
  if (sub_1617A8(@"VADIOCycleUsage", (void **)v6))
  {
    float v0 = *(double *)v6;
    float v1 = 1.0;
    if (v0 <= 1.0) {
      float v1 = *(double *)v6;
    }
    BOOL v2 = v0 < 0.0;
    float v3 = 0.0;
    if (!v2) {
      float v3 = v1;
    }
    *(float *)&qword_64BBD0 = v3;
    BYTE4(qword_64BBD0) = 1;
    int v4 = (os_log_t *)sub_32A48(13);
    BOOL v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      if (!BYTE4(qword_64BBD0)) {
        sub_7F218();
      }
      *(_DWORD *)int v6 = 136315906;
      *(void *)&v6[4] = "RunTimeDefaults.cpp";
      __int16 v7 = 1024;
      int v8 = 884;
      __int16 v9 = 2080;
      int v10 = "VADIOCycleUsage";
      __int16 v11 = 2048;
      double v12 = *(float *)&qword_64BBD0;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f", v6, 0x26u);
    }
  }
}

void *sub_162C24(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BBF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BBF8))
  {
    qword_64BBE0 = 0;
    qword_64BBE8 = 0;
    qword_64BBF0 = 0;
    __cxa_guard_release(&qword_64BBF8);
  }
  if (byte_64BC00) {
    goto LABEL_127;
  }
  byte_64BC00 = 1;
  if (!sub_16149C(@"BuiltInMicSelection")) {
    goto LABEL_127;
  }
  *(_DWORD *)buf = 0;
  BOOL v2 = sub_1614F4(@"BuiltInMicSelection", @"com.apple.audio.virtualaudio", buf);
  int v3 = *(_DWORD *)buf;
  unsigned int v4 = v2 ? *(_DWORD *)buf : 0;
  if (!v2) {
    goto LABEL_127;
  }
  int v5 = sub_207A20();
  int v6 = sub_20A0D0();
  int v48 = v5;
  if (v5 <= 2024)
  {
    switch(v5)
    {
      case 0:
        float v44 = (os_log_t *)sub_32A48(13);
        int v8 = *v44;
        if (!*v44 || !os_log_type_enabled(*v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136315906;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 1094;
        __int16 v56 = 1024;
        LODWORD(v57[0]) = 0;
        WORD2(v57[0]) = 2080;
        *(void *)((char *)v57 + 6) = "BuiltInMicSelection";
        __int16 v9 = "%25s:%-5d Unknown product %u. Ignoring default %s (default VAD behavior will obtain).";
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 48:
      case 68:
      case 79:
      case 82:
      case 134:
      case 135:
      case 138:
      case 139:
      case 140:
      case 141:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 181:
      case 182:
      case 185:
      case 187:
      case 192:
      case 195:
      case 196:
      case 197:
        goto LABEL_10;
      case 9:
      case 10:
      case 17:
      case 18:
      case 19:
      case 20:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 45:
      case 46:
      case 106:
      case 107:
      case 125:
      case 179:
      case 180:
        goto LABEL_28;
      case 72:
      case 73:
      case 74:
      case 75:
      case 77:
      case 78:
      case 80:
      case 81:
      case 83:
      case 84:
      case 85:
      case 86:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 98:
      case 99:
      case 102:
      case 103:
      case 177:
      case 193:
      case 194:
        goto LABEL_16;
      case 87:
      case 88:
      case 96:
      case 97:
      case 100:
      case 101:
      case 104:
      case 105:
        double v12 = (os_log_t *)sub_32A48(13);
        __int16 v13 = *v12;
        if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          std::string::size_type v53 = "RunTimeDefaults.cpp";
          __int16 v54 = 1024;
          int v55 = 1086;
          __int16 v56 = 1024;
          LODWORD(v57[0]) = v5;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Product %u has five microphones. In the bit field, bit 0 corresponds to the top left mic; bit 1 co"
            "rresponds to the top right mic; bit 2 corresponds to the front mic; bit 3 corresponds to the back mic; bit 4"
            " corresponds to the side mic",
            buf,
            0x18u);
        }
        int v6 = 5;
        goto LABEL_32;
      case 160:
      case 169:
        long long v42 = (os_log_t *)sub_32A48(13);
        std::string::size_type v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          std::string::size_type v53 = "RunTimeDefaults.cpp";
          __int16 v54 = 1024;
          int v55 = 1018;
          __int16 v56 = 1024;
          LODWORD(v57[0]) = v5;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Product %u has three microphones. In the bit field, bit 0 corresponds to the bottom mic; bit 1 cor"
            "responds to the back mic; bit 2 corresponds to the front mic.",
            buf,
            0x18u);
        }
        int v6 = 3;
        goto LABEL_32;
      default:
        goto LABEL_32;
    }
    goto LABEL_13;
  }
  if (v5 > 4013)
  {
    if ((v5 - 12002) < 2 || (v5 - 4014) <= 1)
    {
LABEL_10:
      __int16 v7 = (os_log_t *)sub_32A48(13);
      int v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 969;
        __int16 v56 = 1024;
        LODWORD(v57[0]) = v48;
        WORD2(v57[0]) = 2080;
        *(void *)((char *)v57 + 6) = "BuiltInMicSelection";
        __int16 v9 = "%25s:%-5d Product %u has 0 or 1 microphone. Ignoring default %s (default VAD behavior will obtain).";
LABEL_13:
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x22u);
      }
    }
  }
  else if ((v5 - 2025) >= 3)
  {
    if ((v5 - 2028) < 2)
    {
LABEL_28:
      int v14 = (os_log_t *)sub_32A48(13);
      __int16 v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 1067;
        __int16 v56 = 1024;
        LODWORD(v57[0]) = v5;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Product %u has four microphones. In the bit field, bit 0 corresponds to the bottom mic; bit 1 corres"
          "ponds to the back mic; bit 2 corresponds to the front mic; bit 3 corresponds to the second bottom mic",
          buf,
          0x18u);
      }
      int v6 = 4;
    }
  }
  else
  {
LABEL_16:
    int v10 = (os_log_t *)sub_32A48(13);
    __int16 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      std::string::size_type v53 = "RunTimeDefaults.cpp";
      __int16 v54 = 1024;
      int v55 = 1008;
      __int16 v56 = 1024;
      LODWORD(v57[0]) = v5;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Product %u has two microphones. In the bit field, bit 0 corresponds to the top mic; bit 1 corresponds "
        "to the back mic.",
        buf,
        0x18u);
    }
    int v6 = 2;
  }
LABEL_32:
  if (!v3)
  {
    CFNumberRef v40 = (os_log_t *)sub_32A48(13);
    float v41 = *v40;
    if (*v40)
    {
      if (os_log_type_enabled(*v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 1098;
        __int16 v56 = 2080;
        v57[0] = "BuiltInMicSelection";
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No bits selected. Ignoring default %s (default VAD behavior will obtain).", buf, 0x1Cu);
      }
    }
  }
  if (!v6) {
    goto LABEL_127;
  }
  int v16 = 0;
  unsigned int v17 = v48 - 72;
  unsigned int v49 = v48 - 2025;
  unsigned int v18 = v48 - 87;
  while (((v4 >> v16) & 1) == 0)
  {
LABEL_87:
    if (v6 == ++v16) {
      goto LABEL_127;
    }
  }
  switch(v16)
  {
    case 0:
      if (v17 <= 0x23 && ((1 << (v48 - 72)) & 0xF3F3DFB6FLL) != 0 || v49 < 5 || v48 == 177)
      {
        float v19 = (os_log_t *)sub_32A48(13);
        size_t v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(__p, 0x696D6931u);
          size_t v21 = __p;
          if (v51 < 0) {
            size_t v21 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          std::string::size_type v53 = "RunTimeDefaults.cpp";
          __int16 v54 = 1024;
          int v55 = 1129;
          __int16 v56 = 1024;
          LODWORD(v57[0]) = 0;
          WORD2(v57[0]) = 2080;
          *(void *)((char *)v57 + 6) = v21;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bit %u: primary mic selected... Selecting sub-port %s.", buf, 0x22u);
          if (v51 < 0) {
            operator delete(__p[0]);
          }
        }
        *(_DWORD *)buf = 1768778033;
        sub_72D08((uint64_t)&qword_64BBE0, (__int32 *)buf);
      }
      else
      {
        char v34 = (os_log_t *)sub_32A48(13);
        char v35 = *v34;
        if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(__p, 0x696D6963u);
          double v36 = __p;
          if (v51 < 0) {
            double v36 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          std::string::size_type v53 = "RunTimeDefaults.cpp";
          __int16 v54 = 1024;
          int v55 = 1134;
          __int16 v56 = 1024;
          LODWORD(v57[0]) = 0;
          WORD2(v57[0]) = 2080;
          *(void *)((char *)v57 + 6) = v36;
          _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bit %u: primary mic selected... Selecting sub-port %s.", buf, 0x22u);
          if (v51 < 0) {
            operator delete(__p[0]);
          }
        }
        *(_DWORD *)buf = 1768778083;
        sub_72D08((uint64_t)&qword_64BBE0, (__int32 *)buf);
      }
      goto LABEL_87;
    case 1:
      if (v17 <= 0x23 && ((1 << v17) & 0xF333DFB6FLL) != 0 || (v48 - 2028) < 2 || v48 == 177)
      {
        if (v17 <= 0x23 && ((1 << v17) & 0xF3F3DFB6FLL) != 0 || v49 < 5 || v48 == 177)
        {
          uint64_t v22 = (os_log_t *)sub_32A48(13);
          uint64_t v23 = *v22;
          if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(__p, 0x696D6932u);
            uint64_t v24 = __p;
            if (v51 < 0) {
              uint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315906;
            std::string::size_type v53 = "RunTimeDefaults.cpp";
            __int16 v54 = 1024;
            int v55 = 1177;
            __int16 v56 = 1024;
            LODWORD(v57[0]) = 1;
            WORD2(v57[0]) = 2080;
            *(void *)((char *)v57 + 6) = v24;
            _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bit %u: back mic selected... Selecting sub-port %s.", buf, 0x22u);
            if (v51 < 0) {
              operator delete(__p[0]);
            }
          }
          *(_DWORD *)buf = 1768778034;
          sub_72D08((uint64_t)&qword_64BBE0, (__int32 *)buf);
        }
        else
        {
          int v37 = (os_log_t *)sub_32A48(13);
          float v38 = *v37;
          if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(__p, 0x736D6963u);
            uint64_t v39 = __p;
            if (v51 < 0) {
              uint64_t v39 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315906;
            std::string::size_type v53 = "RunTimeDefaults.cpp";
            __int16 v54 = 1024;
            int v55 = 1182;
            __int16 v56 = 1024;
            LODWORD(v57[0]) = 1;
            WORD2(v57[0]) = 2080;
            *(void *)((char *)v57 + 6) = v39;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bit %u: back mic selected... Selecting sub-port %s.", buf, 0x22u);
            if (v51 < 0) {
              operator delete(__p[0]);
            }
          }
          *(_DWORD *)buf = 1936550243;
          sub_72D08((uint64_t)&qword_64BBE0, (__int32 *)buf);
        }
        goto LABEL_87;
      }
      int v16 = 1;
LABEL_123:
      std::__fs::filesystem::path v45 = (os_log_t *)sub_32A48(13);
      std::string::size_type v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 1264;
        __int16 v56 = 1024;
        LODWORD(v57[0]) = v16;
        WORD2(v57[0]) = 1024;
        *(_DWORD *)((char *)v57 + 6) = v48;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Encountered an unexpected bit (%u) / product (%d) combination.\"", buf, 0x1Eu);
      }
      qword_64BBE8 = qword_64BBE0;
LABEL_127:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return sub_46B38(a1, (const void *)qword_64BBE0, qword_64BBE8, (qword_64BBE8 - qword_64BBE0) >> 2);
    case 2:
      if ((v18 > 0x14 || ((1 << v18) & 0x1E7E03) == 0) && v49 >= 5)
      {
        int v16 = 2;
        goto LABEL_123;
      }
      char v25 = (os_log_t *)sub_32A48(13);
      char v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, 0x696D6933u);
        size_t v27 = __p;
        if (v51 < 0) {
          size_t v27 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 1208;
        __int16 v56 = 1024;
        LODWORD(v57[0]) = 2;
        WORD2(v57[0]) = 2080;
        *(void *)((char *)v57 + 6) = v27;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bit %u: front mic selected... Selecting sub-port %s.", buf, 0x22u);
        if (v51 < 0) {
          operator delete(__p[0]);
        }
      }
      *(_DWORD *)buf = 1768778035;
      sub_72D08((uint64_t)&qword_64BBE0, (__int32 *)buf);
      goto LABEL_87;
    case 3:
      if ((v18 > 0x14 || ((1 << v18) & 0x1E7E03) == 0) && v49 >= 5)
      {
        int v16 = 3;
        goto LABEL_123;
      }
      __int16 v28 = (os_log_t *)sub_32A48(13);
      int v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, 0x696D6934u);
        __int16 v30 = __p;
        if (v51 < 0) {
          __int16 v30 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 1239;
        __int16 v56 = 1024;
        LODWORD(v57[0]) = 3;
        WORD2(v57[0]) = 2080;
        *(void *)((char *)v57 + 6) = v30;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bit %u: back mic selected... Selecting sub-port %s.", buf, 0x22u);
        if (v51 < 0) {
          operator delete(__p[0]);
        }
      }
      *(_DWORD *)buf = 1768778036;
      sub_72D08((uint64_t)&qword_64BBE0, (__int32 *)buf);
      goto LABEL_87;
    case 4:
      if ((v18 > 0x12 || ((1 << v18) & 0x67E03) == 0) && v49 >= 3)
      {
        int v16 = 4;
        goto LABEL_123;
      }
      std::string::size_type v31 = (os_log_t *)sub_32A48(13);
      int v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, 0x696D6935u);
        CFDictionaryRef v33 = __p;
        if (v51 < 0) {
          CFDictionaryRef v33 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        std::string::size_type v53 = "RunTimeDefaults.cpp";
        __int16 v54 = 1024;
        int v55 = 1258;
        __int16 v56 = 1024;
        LODWORD(v57[0]) = 4;
        WORD2(v57[0]) = 2080;
        *(void *)((char *)v57 + 6) = v33;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bit %u: side mic selected... Selecting sub-port %s.", buf, 0x22u);
        if (v51 < 0) {
          operator delete(__p[0]);
        }
      }
      *(_DWORD *)buf = 1768778037;
      sub_72D08((uint64_t)&qword_64BBE0, (__int32 *)buf);
      goto LABEL_87;
    default:
      goto LABEL_123;
  }
}

uint64_t sub_163C50()
{
  if ((byte_64BC04 & 1) == 0)
  {
    int v5 = 0;
    if (sub_1614F4(@"DisableEANC", @"com.apple.audio.virtualaudio", &v5))
    {
      float v0 = (os_log_t *)sub_32A48(13);
      float v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          __int16 v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 1315;
          __int16 v10 = 2080;
          __int16 v11 = "DisableEANC";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }
      else
      {
        int v3 = v5;
      }
      byte_64BC03 = v3 != 0;
    }
    byte_64BC04 = 1;
  }
  return byte_64BC03;
}

uint64_t sub_163D84()
{
  if ((byte_64BC0E & 1) == 0)
  {
    int v5 = 0;
    if (sub_1614F4(@"Force24Bit", @"com.apple.audio.virtualaudio", &v5))
    {
      float v0 = (os_log_t *)sub_32A48(13);
      float v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          __int16 v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 1383;
          __int16 v10 = 2080;
          __int16 v11 = "DisableEANC";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }
      else
      {
        int v3 = v5;
      }
      byte_64BC0D = v3 != 0;
    }
    byte_64BC0E = 1;
  }
  return byte_64BC0D;
}

uint64_t sub_163EB8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BC28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BC28))
  {
    *(void *)buf = 0;
    buf[8] = 0;
    byte_64BC10 = 0;
    qword_64BC18 = 0;
    byte_64BC20 = 0;
    sub_72924((uint64_t)buf);
    __cxa_guard_release(&qword_64BC28);
  }
  if ((byte_64BC30 & 1) == 0)
  {
    sub_161714((uint64_t)v6, @"HeadsetOverride", 0);
    if (v6[0])
    {
      if (cf[0])
      {
        CFRetain(cf[0]);
        CFTypeRef v0 = cf[0];
      }
      else
      {
        CFTypeRef v0 = 0;
      }
      *(void *)buf = v0;
      buf[8] = 0;
      sub_8B9E0((uint64_t)&qword_64BC18, (uint64_t)buf);
      sub_72924((uint64_t)buf);
      byte_64BC10 = qword_64BC18 != 0;
      if (qword_64BC18) {
        goto LABEL_12;
      }
      float v1 = (os_log_t *)sub_32A48(13);
      BOOL v2 = *v1;
      if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1409;
        __int16 v11 = 2080;
        __int16 v12 = "HeadsetOverride";
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"An invalid string was retrieved for defaults key %s\"", buf, 0x1Cu);
      }
      if (byte_64BC10)
      {
LABEL_12:
        int v3 = (os_log_t *)sub_32A48(13);
        unsigned int v4 = *v3;
        if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          __int16 v9 = 1024;
          int v10 = 1411;
          __int16 v11 = 2080;
          __int16 v12 = "HeadsetOverride";
          __int16 v13 = 2112;
          uint64_t v14 = qword_64BC18;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Defaults key %s was defined as %@", buf, 0x26u);
        }
      }
    }
    byte_64BC30 = 1;
    sub_72924((uint64_t)cf);
  }
  return byte_64BC10;
}

void sub_164114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_16414C()
{
  if ((byte_64BC32 & 1) == 0)
  {
    int v6 = 0;
    if (sub_1614F4(@"RawModeDisablesSpeakerProcessing", @"com.apple.audio.virtualaudio", &v6))
    {
      if (qword_64A238 != -1) {
        dispatch_once(&qword_64A238, &stru_61F710);
      }
      if (byte_64A228) {
        BOOL v0 = v6 == 0;
      }
      else {
        BOOL v0 = 1;
      }
      char v1 = !v0;
      byte_64BC31 = v1;
      BOOL v2 = (os_log_t *)sub_32A48(13);
      int v3 = *v2;
      if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v4 = "disabled";
        __int16 v8 = "RunTimeDefaults.cpp";
        *(_DWORD *)buf = 136315650;
        if (!byte_64BC31) {
          unsigned int v4 = "enabled";
        }
        __int16 v9 = 1024;
        int v10 = 1434;
        __int16 v11 = 2080;
        __int16 v12 = v4;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speaker EQ & Speaker Protection will be %s in raw mode", buf, 0x1Cu);
      }
    }
    byte_64BC32 = 1;
  }
  return byte_64BC31;
}

BOOL sub_1642B8()
{
  CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
  int v6 = 0;
  if (sub_1614F4(@"CaptureIOData", @"com.apple.audio.virtualaudio", &v6))
  {
    int v0 = v6;
    BOOL v1 = v6 != 0;
    BOOL v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = "Dis";
      int v6 = 136316162;
      __int16 v7 = "RunTimeDefaults.cpp";
      __int16 v8 = 1024;
      int v9 = 1482;
      __int16 v11 = "CaptureIOData";
      __int16 v10 = 2080;
      if (v0) {
        unsigned int v4 = "En";
      }
      __int16 v12 = 1024;
      int v13 = v0;
      __int16 v14 = 2080;
      __int16 v15 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. %sabling VA IO capture.", (uint8_t *)&v6, 0x2Cu);
    }
  }
  else
  {
    if (qword_64A238 != -1) {
      dispatch_once(&qword_64A238, &stru_61F710);
    }
    return byte_64A228
        && (sub_89FA8() == 2
         || sub_89FA8() == 3
         || sub_89FA8() == 4
         || sub_89FA8() == 5
         || sub_89FA8() == 195);
  }
  return v1;
}

BOOL sub_164474()
{
  CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
  int v7 = 0;
  BOOL v0 = sub_1614F4(@"EnableHALBorealisMonitor", @"com.apple.audio.virtualaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v0)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    unsigned int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = "Dis";
        int v7 = 136316162;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1512;
        __int16 v12 = "EnableHALBorealisMonitor";
        __int16 v11 = 2080;
        if (v2) {
          int v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        int v16 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. %sabling HAL Borealis capture.", (uint8_t *)&v7, 0x2Cu);
      }
    }
  }
  return v2;
}

uint64_t sub_1645B0(const char *a1)
{
  CFPreferencesAppSynchronize(@"com.apple.coreaudio");
  size_t v2 = strlen(a1);
  if (a1)
  {
    CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)a1, v2, 0x8000100u, 0);
    *(void *)buf = v3;
    if (!v3)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v3 = 0;
    *(void *)buf = 0;
  }
  unsigned int v11 = 0;
  BOOL v5 = sub_1614F4(v3, @"com.apple.coreaudio", &v11);
  uint64_t v6 = v11;
  if (v3) {
    CFRelease(v3);
  }
  if (v5)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    __int16 v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = "En";
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
      int v14 = 1535;
      __int16 v13 = 1024;
      if (!v6) {
        __int16 v9 = "Dis";
      }
      __int16 v15 = 2080;
      int v16 = a1;
      __int16 v17 = 1024;
      int v18 = v6;
      __int16 v19 = 2080;
      size_t v20 = v9;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. %sabling HAL IO capture.", buf, 0x2Cu);
    }
  }
  else
  {
    if (qword_64A238 != -1) {
      dispatch_once(&qword_64A238, &stru_61F710);
    }
    if (byte_64A228
      && (sub_89FA8() == 2
       || sub_89FA8() == 3
       || sub_89FA8() == 4
       || sub_89FA8() == 5
       || sub_89FA8() == 195))
    {
      return 2;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_1647E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

BOOL sub_164814()
{
  int v7 = 0;
  BOOL v0 = sub_1614F4(@"DisableSpeechDetectionRoute", @"com.apple.coreaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v0)
  {
    CFStringRef v3 = (os_log_t *)sub_32A48(13);
    unsigned int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v5 = "Dis";
        int v7 = 136316162;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1558;
        __int16 v12 = "DisableSpeechDetectionRoute";
        __int16 v11 = 2080;
        if (v2) {
          BOOL v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        int v16 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. %sabling voice trigger VAD creation.", (uint8_t *)&v7, 0x2Cu);
      }
    }
  }
  return v2;
}

uint64_t sub_164944()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BC48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BC48))
  {
    byte_64BC40 = sub_1649B8();
    __cxa_guard_release(&qword_64BC48);
  }
  return byte_64BC40;
}

void sub_1649A0(_Unwind_Exception *a1)
{
}

BOOL sub_1649B8()
{
  LOBYTE(v9) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"EnableSiriOverUSB", @"com.apple.audio.virtualaudio", (Boolean *)&v9);
  int v1 = v9;
  if (AppBooleanValue) {
    BOOL v2 = v9 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v9)
  {
    int v4 = AppBooleanValue;
    BOOL v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = "Disabled";
        int v9 = 136316162;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 1570;
        __int16 v13 = 2080;
        int v14 = "EnableSiriOverUSB";
        if (v4) {
          int v7 = "Enabled";
        }
        __int16 v15 = 1024;
        unsigned int v16 = v3 >> 8;
        __int16 v17 = 2080;
        int v18 = v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u. Siri over USB is %s", (uint8_t *)&v9, 0x2Cu);
      }
    }
  }
  return (v3 | (v1 != 0)) == 257;
}

BOOL sub_164B08()
{
  LOBYTE(v9) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"EnableAUSPL", @"com.apple.coreaudio", (Boolean *)&v9);
  int v1 = v9;
  if (AppBooleanValue) {
    BOOL v2 = v9 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v9)
  {
    int v4 = AppBooleanValue;
    BOOL v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = "Disabled";
        int v9 = 136316162;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 1581;
        __int16 v13 = 2080;
        int v14 = "EnableAUSPL";
        if (v4) {
          int v7 = "Enabled";
        }
        __int16 v15 = 1024;
        unsigned int v16 = v3 >> 8;
        __int16 v17 = 2080;
        int v18 = v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u. Enable AUSPL is %s", (uint8_t *)&v9, 0x2Cu);
      }
    }
  }
  return (v3 | (v1 != 0)) != 1;
}

uint64_t sub_164C58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BC68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BC68))
  {
    byte_64BC60 = sub_164CCC();
    __cxa_guard_release(&qword_64BC68);
  }
  return byte_64BC60;
}

void sub_164CB4(_Unwind_Exception *a1)
{
}

BOOL sub_164CCC()
{
  LOBYTE(v9) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"ForceRamstadSRCForTelephony", @"com.apple.coreaudio", (Boolean *)&v9);
  int v1 = v9;
  if (AppBooleanValue) {
    BOOL v2 = v9 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v9)
  {
    int v4 = AppBooleanValue;
    BOOL v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = "Disabled";
        int v9 = 136316162;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 1593;
        __int16 v13 = 2080;
        int v14 = "ForceRamstadSRCForTelephony";
        if (v4) {
          int v7 = "Enabled";
        }
        __int16 v15 = 1024;
        unsigned int v16 = v3 >> 8;
        __int16 v17 = 2080;
        int v18 = v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u. Forcing Ramstad SRC for telephony is %s", (uint8_t *)&v9, 0x2Cu);
      }
    }
  }
  return (v3 | (v1 != 0)) == 257;
}

BOOL sub_164E1C()
{
  int v7 = 0;
  BOOL v0 = sub_1614F4(@"DisableDeviceOrientationStereoSwap", @"com.apple.audio.virtualaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v0)
  {
    unsigned int v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v5 = "Dis";
        int v7 = 136316162;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1646;
        int v12 = "DisableDeviceOrientationStereoSwap";
        __int16 v11 = 2080;
        if (v2) {
          BOOL v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        unsigned int v16 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. %sabling device orientation based stereo channel swap.", (uint8_t *)&v7, 0x2Cu);
      }
    }
  }
  return v2;
}

BOOL sub_164F4C()
{
  int v5 = 0;
  BOOL v0 = sub_1614F4(@"ForceLDCM", @"com.apple.coreaudio", &v5);
  int v1 = 0;
  if (v0)
  {
    int v1 = v5;
    BOOL v2 = (os_log_t *)sub_32A48(13);
    unsigned int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315906;
        uint64_t v6 = "RunTimeDefaults.cpp";
        __int16 v7 = 1024;
        int v8 = 1690;
        __int16 v9 = 2080;
        int v10 = "ForceLDCM";
        __int16 v11 = 1024;
        int v12 = v1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. Forcing creation of LDCM alternate VAD.", (uint8_t *)&v5, 0x22u);
      }
    }
  }
  return v1 && v0;
}

uint64_t sub_165060()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BCC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BCC0))
  {
    byte_64BCB8 = sub_1650D4();
    __cxa_guard_release(&qword_64BCC0);
  }
  return byte_64BCB8;
}

void sub_1650BC(_Unwind_Exception *a1)
{
}

BOOL sub_1650D4()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"DisableAudio", @"com.apple.audio.virtualaudio", (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1717;
        __int16 v11 = 2080;
        int v12 = "DisableAudio";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v7, 0x22u);
      }
    }
  }
  return (v3 | (v1 != 0)) == 257;
}

uint64_t sub_165200()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BCD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BCD0))
  {
    byte_64BCC8 = sub_165274();
    __cxa_guard_release(&qword_64BCD0);
  }
  return byte_64BCC8;
}

void sub_16525C(_Unwind_Exception *a1)
{
}

BOOL sub_165274()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"ForceSoftwareVolumeMode", @"com.apple.audio.virtualaudio", (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1744;
        __int16 v11 = 2080;
        int v12 = "ForceSoftwareVolumeMode";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v7, 0x22u);
      }
    }
  }
  return (v3 | (v1 != 0)) == 257;
}

uint64_t sub_1653A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BCE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BCE0))
  {
    byte_64BCD8 = sub_165414();
    __cxa_guard_release(&qword_64BCE0);
  }
  return byte_64BCD8;
}

void sub_1653FC(_Unwind_Exception *a1)
{
}

BOOL sub_165414()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"EnableIDAMInput", @"com.apple.audio.virtualaudio", (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1758;
        __int16 v11 = 2080;
        int v12 = "EnableIDAMInput";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v7, 0x22u);
      }
    }
  }
  return (v3 | (v1 != 0)) == 257;
}

BOOL sub_165540()
{
  CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
  int v7 = 0;
  BOOL v0 = sub_1614F4(@"PreferInEarOverCarKit", @"com.apple.coreaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v0)
  {
    unsigned int v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = "Dis";
        int v7 = 136316162;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1777;
        int v12 = "PreferInEarOverCarKit";
        __int16 v11 = 2080;
        if (v2) {
          int v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        unsigned int v16 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. %sabling prioritizing in-ear status.", (uint8_t *)&v7, 0x2Cu);
      }
    }
  }
  return v2;
}

void sub_16567C(id a1)
{
}

void sub_165694(id a1)
{
  char v11 = 0;
  if (MGGetSInt32Answer() == 6)
  {
    CFPreferencesAppSynchronize(@"EnableNanoTetheredDemoMode");
    BOOL v1 = sub_3E9908(@"EnableNanoTetheredDemoMode", @"com.apple.demo-settings", &v11);
    if (!v11) {
      return;
    }
    BOOL v2 = v1;
    unsigned int v3 = (os_log_t *)sub_32A48(13);
    os_log_t v4 = *v3;
    if (!*v3 || !os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)buf = 136315906;
    __int16 v13 = "RunTimeDefaults.cpp";
    __int16 v14 = 1024;
    int v15 = 1803;
    __int16 v16 = 2080;
    CFStringRef v17 = (CFStringRef)"com.apple.demo-settings/EnableNanoTetheredDemoMode";
    __int16 v18 = 1024;
    LODWORD(v19) = v2;
    int v5 = "%25s:%-5d Preference %s: %u.";
    uint64_t v6 = v4;
    uint32_t v7 = 34;
    goto LABEL_10;
  }
  CFPreferencesAppSynchronize(@"EnableTetheredDisplayPortMode");
  BOOL v8 = sub_3E9908(@"EnableTetheredDisplayPortMode", kCFPreferencesAnyApplication, &v11);
  if (!v11) {
    return;
  }
  BOOL v2 = v8;
  __int16 v9 = (os_log_t *)sub_32A48(13);
  os_log_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    __int16 v13 = "RunTimeDefaults.cpp";
    __int16 v14 = 1024;
    int v15 = 1814;
    __int16 v16 = 2112;
    CFStringRef v17 = kCFPreferencesAnyApplication;
    __int16 v18 = 2080;
    __int16 v19 = "EnableTetheredDisplayPortMode";
    __int16 v20 = 1024;
    BOOL v21 = v2;
    int v5 = "%25s:%-5d Preference %@ / %s: %u.";
    uint64_t v6 = v10;
    uint32_t v7 = 44;
LABEL_10:
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
  }
LABEL_11:
  byte_64BCE8 = v2;
}

unsigned char *sub_165894(unsigned char *__dst)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BD38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BD38))
  {
    sub_16591C();
    __cxa_guard_release(&qword_64BD38);
  }

  return sub_CAE80(__dst, &xmmword_64BD18);
}

void sub_165904(_Unwind_Exception *a1)
{
}

uint64_t sub_16591C()
{
  sub_161714((uint64_t)v6, @"AcousticIDFolder", 0);
  if (v6[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_14E44(&v3, v0);
    if (!v3)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_20C54((uint64_t)&v4, (const __CFString *)v3);
    xmmword_64BD18 = v4;
    qword_64BD28 = v5;
    uint64_t v5 = 0;
    long long v4 = 0uLL;
    byte_64BD30 = 1;
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    LOBYTE(xmmword_64BD18) = 0;
    byte_64BD30 = 0;
  }
  return sub_72924((uint64_t)cf);
}

void sub_165A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v11);
  sub_6393C(&a10);
  sub_72924(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_165A60()
{
  sub_161714((uint64_t)v6, @"PersistentOutputPortUIDs", 0);
  if (v6[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_14E44(v3, v0);
    if (!v3[0])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_20C54((uint64_t)&__p, (const __CFString *)v3[0]);
    if (v3[0]) {
      CFRelease(v3[0]);
    }
    sub_21C8C(v3, "\n");
    sub_16B754(&qword_64BD40, &__p, (char *)v3);
    if (v4 < 0) {
      operator delete((void *)v3[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    qword_64BD40 = 0;
    *(void *)algn_64BD48 = 0;
    qword_64BD50 = 0;
  }
  return sub_72924((uint64_t)cf);
}

void sub_165B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v22);
  sub_6393C((const void **)&__p);
  sub_72924(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_165BF0()
{
  sub_161714((uint64_t)v6, @"PersistentInputPortUIDs", 0);
  if (v6[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_14E44(v3, v0);
    if (!v3[0])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_20C54((uint64_t)&__p, (const __CFString *)v3[0]);
    if (v3[0]) {
      CFRelease(v3[0]);
    }
    sub_21C8C(v3, "\n");
    sub_16B754(&qword_64BD60, &__p, (char *)v3);
    if (v4 < 0) {
      operator delete((void *)v3[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    qword_64BD60 = 0;
    *(void *)algn_64BD68 = 0;
    qword_64BD70 = 0;
  }
  return sub_72924((uint64_t)cf);
}

void sub_165D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v22);
  sub_6393C((const void **)&__p);
  sub_72924(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_165D80()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BD88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BD88))
  {
    byte_64BD80 = sub_165DF4();
    __cxa_guard_release(&qword_64BD88);
  }
  return byte_64BD80;
}

void sub_165DDC(_Unwind_Exception *a1)
{
}

BOOL sub_165DF4()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"DefaultVADUsesTimeSync", @"com.apple.audio.virtualaudio", (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    char v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        BOOL v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 2008;
        __int16 v11 = 2080;
        int v12 = "DefaultVADUsesTimeSync";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v7, 0x22u);
      }
    }
  }
  return (v3 | (v1 != 0)) == 257;
}

void sub_165F20()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BD98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BD98))
  {
    qword_64BD90 = sub_165FA4();
    __cxa_guard_release(&qword_64BD98);
  }
}

void sub_165F8C(_Unwind_Exception *a1)
{
}

uint64_t sub_165FA4()
{
  int v4 = 0;
  if (!sub_1614F4(@"SpeakerVolumeTransferFunction", @"com.apple.audio.virtualaudio", &v4)) {
    return 0;
  }
  uint64_t v0 = v4;
  int v1 = (os_log_t *)sub_32A48(13);
  BOOL v2 = *v1;
  if (*v1)
  {
    if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315906;
      uint64_t v5 = "RunTimeDefaults.cpp";
      __int16 v6 = 1024;
      int v7 = 2020;
      __int16 v8 = 2080;
      __int16 v9 = "SpeakerVolumeTransferFunction";
      __int16 v10 = 2048;
      uint64_t v11 = v0;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %li", (uint8_t *)&v4, 0x26u);
    }
  }
  return v0 | 0x100000000;
}

uint64_t sub_1660B4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BDB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BDB8))
  {
    qword_64BDB0 = sub_166128();
    __cxa_guard_release(&qword_64BDB8);
  }
  return qword_64BDB0;
}

void sub_166110(_Unwind_Exception *a1)
{
}

uint64_t sub_166128()
{
  unsigned int v4 = 0;
  if (!sub_1614F4(@"AdaptiveVolumeHIDStreamingRateMs", @"com.apple.audio.virtualaudio", &v4)) {
    return 0;
  }
  uint64_t v0 = v4;
  int v1 = (os_log_t *)sub_32A48(13);
  BOOL v2 = *v1;
  if (*v1)
  {
    if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = 136315906;
      uint64_t v5 = "RunTimeDefaults.cpp";
      __int16 v6 = 1024;
      int v7 = 2164;
      __int16 v8 = 2080;
      __int16 v9 = "AdaptiveVolumeHIDStreamingRateMs";
      __int16 v10 = 1024;
      int v11 = v0;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v4, 0x22u);
    }
  }
  return v0 | 0x100000000;
}

uint64_t sub_166230()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BDC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BDC8))
  {
    byte_64BDC0 = sub_1662A4();
    __cxa_guard_release(&qword_64BDC8);
  }
  return byte_64BDC0;
}

void sub_16628C(_Unwind_Exception *a1)
{
}

BOOL sub_1662A4()
{
  LOBYTE(v6) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"LogTimeTaken", @"com.apple.audio.virtualaudio", (Boolean *)&v6);
  BOOL v1 = AppBooleanValue != 0;
  if (!(_BYTE)v6) {
    return 0;
  }
  int v2 = AppBooleanValue;
  unsigned int v3 = (os_log_t *)sub_32A48(13);
  unsigned int v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315906;
    int v7 = "RunTimeDefaults.cpp";
    __int16 v8 = 1024;
    int v9 = 2177;
    __int16 v10 = 2080;
    int v11 = "LogTimeTaken";
    __int16 v12 = 1024;
    BOOL v13 = v2 != 0;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v6, 0x22u);
  }
  return v1;
}

uint64_t sub_1663C8()
{
  sub_161714((uint64_t)v20, @"preferredOutputRoute_v2", @"com.apple.siri.CarBluetooth");
  if (v20[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_14E44(v22, v0);
    if (!*(void *)v22)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_20C54((uint64_t)buf, *(const __CFString **)v22);
    if (*(void *)v22) {
      CFRelease(*(CFTypeRef *)v22);
    }
    uint64_t v1 = v26;
    if ((v26 & 0x80u) == 0) {
      uint64_t v2 = v26;
    }
    else {
      uint64_t v2 = *(void *)&buf[8];
    }
    if (v2 == 3)
    {
      if ((v26 & 0x80) != 0)
      {
        if (memcmp(*(const void **)buf, &byte_4E81C8, *(size_t *)&buf[8])) {
          goto LABEL_45;
        }
      }
      else if (v26)
      {
        __int16 v10 = buf;
        int v11 = &byte_4E81C8;
        while (*v10 == *v11)
        {
          ++v10;
          ++v11;
          if (!--v1) {
            goto LABEL_41;
          }
        }
        goto LABEL_45;
      }
LABEL_41:
      unsigned int v14 = (os_log_t *)sub_32A48(13);
      int v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v22 = 136315394;
        *(void *)&v22[4] = "RunTimeDefaults.cpp";
        __int16 v23 = 1024;
        int v24 = 2218;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d va::SiriCarKitPreferredOutputRoute::HFP", v22, 0x12u);
      }
      goto LABEL_45;
    }
    if (v2 != 4)
    {
      if (v2 == 13)
      {
        if ((v26 & 0x80) == 0)
        {
          if (v26)
          {
            unsigned int v3 = buf;
            unsigned int v4 = "DeviceSpeaker";
            while (*v3 == *(unsigned __int8 *)v4)
            {
              ++v3;
              ++v4;
              if (!--v1) {
                goto LABEL_49;
              }
            }
            goto LABEL_45;
          }
LABEL_49:
          CFStringRef v17 = (os_log_t *)sub_32A48(13);
          __int16 v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v22 = 136315394;
            *(void *)&v22[4] = "RunTimeDefaults.cpp";
            __int16 v23 = 1024;
            int v24 = 2208;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d va::SiriCarKitPreferredOutputRoute::BuiltInSpeaker", v22, 0x12u);
          }
          uint64_t v7 = 2;
          goto LABEL_46;
        }
        if (!memcmp(*(const void **)buf, "DeviceSpeaker", *(size_t *)&buf[8])) {
          goto LABEL_49;
        }
      }
LABEL_45:
      uint64_t v7 = 1;
      goto LABEL_46;
    }
    if ((v26 & 0x80) != 0)
    {
      if (memcmp(*(const void **)buf, "A2DP", *(size_t *)&buf[8])) {
        goto LABEL_45;
      }
    }
    else if (v26)
    {
      __int16 v8 = buf;
      int v9 = "A2DP";
      while (*v8 == *(unsigned __int8 *)v9)
      {
        ++v8;
        ++v9;
        if (!--v1) {
          goto LABEL_36;
        }
      }
      goto LABEL_45;
    }
LABEL_36:
    __int16 v12 = (os_log_t *)sub_32A48(13);
    BOOL v13 = *v12;
    if (*v12)
    {
      uint64_t v7 = 0;
      if (!os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_DWORD *)uint64_t v22 = 136315394;
      *(void *)&v22[4] = "RunTimeDefaults.cpp";
      __int16 v23 = 1024;
      int v24 = 2213;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d va::SiriCarKitPreferredOutputRoute::A2DP", v22, 0x12u);
    }
    uint64_t v7 = 0;
LABEL_46:
    if ((char)v26 < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_48;
  }
  uint64_t v5 = (os_log_t *)sub_32A48(13);
  int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2197;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  !hasValue va::SiriCarKitPreferredOutputRoute::HFP", buf, 0x12u);
  }
  uint64_t v7 = 1;
LABEL_48:
  sub_72924((uint64_t)cf);
  return v7;
}

void sub_1667BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_72924(v22);
  _Unwind_Resume(a1);
}

BOOL sub_166838()
{
  LOBYTE(v6) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"cinematic_capture_debug", @"com.apple.coreaudio", (Boolean *)&v6);
  BOOL v1 = AppBooleanValue != 0;
  if (!(_BYTE)v6) {
    return 0;
  }
  int v2 = AppBooleanValue;
  unsigned int v3 = (os_log_t *)sub_32A48(13);
  unsigned int v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136316162;
    uint64_t v7 = "RunTimeDefaults.cpp";
    __int16 v8 = 1024;
    int v9 = 2234;
    __int16 v10 = 2080;
    int v11 = "cinematic_capture_debug";
    __int16 v12 = 2080;
    BOOL v13 = "com.apple.coreaudio";
    __int16 v14 = 1024;
    BOOL v15 = v2 != 0;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s (domain %s) was defined to %u", (uint8_t *)&v6, 0x2Cu);
  }
  return v1;
}

uint64_t sub_16696C(unsigned int a1)
{
  if (a1 < 6) {
    return *(unsigned int *)&aNupephpehvpeps[4 * a1];
  }
  uint64_t v3 = sub_32A48(17);
  uint64_t v4 = sub_32A48(28);
  char v5 = 0;
  uint64_t v6 = 0;
  *(void *)__int16 v12 = 0x100000002;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&v12[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1;
    if (v9) {
      goto LABEL_9;
    }
  }
  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_9:
  uint64_t v2 = 1701868910;
  __int16 v10 = *(NSObject **)v3;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v12 = 136315650;
    *(void *)&void v12[4] = "BluetoothUtilities.cpp";
    __int16 v13 = 1024;
    int v14 = 81;
    __int16 v15 = 1024;
    unsigned int v16 = a1;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unknown Bluetooth device category: %u.", v12, 0x18u);
  }
  return v2;
}

uint64_t *sub_166AC4(uint64_t a1, int a2, int a3)
{
  BOOL v6 = sub_25009C(a2);
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 1885544823;
  *(_DWORD *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 12) = 1;
  uint64_t result = sub_46A4C((uint64_t *)(a1 + 16), (uint64_t)&unk_64BDE0);
  __int16 v8 = 0;
  if (a2 <= 1886152040)
  {
    if (a2 <= 1885892673)
    {
      if (a2 != 1885418100)
      {
        int v9 = 1885890164;
        goto LABEL_14;
      }
      goto LABEL_15;
    }
    if (a2 == 1885892674) {
      goto LABEL_16;
    }
    int v10 = 1885892706;
LABEL_10:
    if (a2 == v10) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (a2 <= 1886152051)
  {
    if (a2 == 1886152041) {
      goto LABEL_15;
    }
    int v10 = 1886152047;
    goto LABEL_10;
  }
  if (a2 != 1886152052)
  {
    int v9 = 1886216820;
LABEL_14:
    if (a2 == v9) {
      goto LABEL_15;
    }
LABEL_20:
    __int16 v12 = (os_log_t *)sub_32A48(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      int v14 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int16 v19 = "BluetoothUtilities.cpp";
      __int16 v20 = 1024;
      int v21 = 126;
      __int16 v22 = 2080;
      __int16 v23 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Unsupported port type %s\"", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1970171760;
  }
LABEL_15:
  __int16 v8 = 1;
LABEL_16:
  if (v6) {
    __int16 v11 = 1222;
  }
  else {
    __int16 v11 = 1238;
  }
  *(_WORD *)(a1 + 40) = v11 | v8 | *(_WORD *)(a1 + 40) & 0xF800;
  return result;
}

void sub_166D2C(_Unwind_Exception *a1)
{
  sub_463E0(*(void **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_166D40(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  BOOL v6 = (char *)operator new(0x78uLL);
  uint64_t v7 = v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)BOOL v6 = off_638168;
  __int16 v8 = v6 + 24;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v6 + 8) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((void *)v6 + 11) = 0;
  *((_DWORD *)v6 + 24) = 1065353216;
  *((void *)v6 + 3) = off_6381A0;
  *((void *)v6 + 13) = a2;
  *((void *)v6 + 14) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_D26B4((uint64_t)(v6 + 24));
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_166E20(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[4].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  sub_FE920(v3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_166E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_166F08(&v9, (uint64_t *)(a1 + 80), "", 91);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 72))(v9, a2, a3, a4);
  if (v10) {
    sub_4636C(v10);
  }
  return v7;
}

void sub_166EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_166F08(uint64_t *a1, uint64_t *a2, char *a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    __int16 v11 = (os_log_t *)sub_32A48(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        int v14 = strrchr(a3, 47);
        if (v14) {
          __int16 v13 = v14 + 1;
        }
        else {
          __int16 v13 = a3;
        }
      }
      else
      {
        __int16 v13 = 0;
      }
      *(_DWORD *)buf = 136315906;
      char v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      int v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_16707C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1670AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_166F08(&v9, (uint64_t *)(a1 + 80), "", 84);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, a2, a3, a4);
  if (v10) {
    sub_4636C(v10);
  }
  return v7;
}

void sub_167144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_16715C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_166F08((uint64_t *)&v4, (uint64_t *)(a1 + 80), "", 73);
  sub_4F64(a2, v4 + 2);
  uint64_t v3 = v5;
  if (v5)
  {
    sub_4636C(v3);
  }
}

void sub_1671D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1671EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_166F08(&v12, (uint64_t *)(a1 + 80), "", 68);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, a2, a3, a4, a5, a6);
  __int16 v11 = v13;
  if (v13)
  {
    sub_4636C(v11);
  }
}

void sub_1672B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1672D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_166F08(&v12, (uint64_t *)(a1 + 80), "", 59);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 40))(v12, a2, a3, a4, a5, a6);
  __int16 v11 = v13;
  if (v13)
  {
    sub_4636C(v11);
  }
}

void sub_16739C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1673B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_166F08(&v9, (uint64_t *)(a1 + 80), "", 50);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2, a3, a4);
  if (v10) {
    sub_4636C(v10);
  }
  return v7;
}

void sub_16744C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_167464(uint64_t a1, uint64_t a2)
{
  sub_166F08(&v5, (uint64_t *)(a1 + 80), "", 43);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a2);
  if (v6) {
    sub_4636C(v6);
  }
  return v3;
}

void sub_1674E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1674FC(uint64_t a1, uint64_t a2)
{
  sub_166F08(&v5, (uint64_t *)(a1 + 80), "", 38);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2);
  if (v6) {
    sub_4636C(v6);
  }
  return v3;
}

void sub_16757C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_167594(void *a1)
{
  sub_1675CC(a1);

  operator delete();
}

uint64_t sub_1675CC(void *a1)
{
  *a1 = off_6381A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  return sub_FE920((uint64_t)a1);
}

uint64_t sub_167630(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_167654(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638168;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1676A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1676C8()
{
  sub_6C05C((uint64_t)v0);
  __int16 v5 = 257;
  __int16 v6 = 257;
  if (!v2) {
    char v2 = 1;
  }
  int v1 = 4;
  *(void *)&long long __src = 0x300000002;
  sub_8732C((char *)v4, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  LODWORD(__src) = 3;
  sub_8732C((char *)v3, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  int v10 = 38;
  char v11 = 1;
  v8[101] = 38;
  char v9 = 1;
  sub_6C4EC(v7, 0, 0);
  sub_208140(&__src, 26);
  if (v14)
  {
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v13 = v16;
  }
  else
  {
    long long __p = __src;
    uint64_t v13 = v16;
    char v14 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)v8);
  sub_463E0(v7[1]);
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_167850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_167874()
{
}

uint64_t sub_16787C()
{
  return 1;
}

uint64_t sub_16788C()
{
  return 0;
}

uint64_t sub_167894()
{
  return 0;
}

uint64_t sub_16789C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  int v2 = *((_DWORD *)a2 + 2);
  if (*(unsigned char *)(a1 + 88)) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  HIDWORD(v5) = v3;
  int v6 = v2;
  if (v2) {
    int v2 = v2 + *(_DWORD *)(a1 + 92) - 1;
  }
  int v6 = v2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 160))(*(void *)(a1 + 80), &v5);
}

uint64_t sub_167924(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  int v2 = *((_DWORD *)a2 + 2);
  if (*(unsigned char *)(a1 + 88)) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  HIDWORD(v5) = v3;
  int v6 = v2;
  if (v2) {
    int v2 = v2 + *(_DWORD *)(a1 + 92) - 1;
  }
  int v6 = v2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 152))(*(void *)(a1 + 80), &v5);
}

uint64_t sub_1679AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  int v2 = *((_DWORD *)a2 + 2);
  if (*(unsigned char *)(a1 + 88)) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  HIDWORD(v5) = v3;
  int v6 = v2;
  if (v2) {
    int v2 = v2 + *(_DWORD *)(a1 + 92) - 1;
  }
  int v6 = v2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 144))(*(void *)(a1 + 80), &v5);
}

uint64_t sub_167A34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 128))();
}

uint64_t sub_167A5C()
{
  return 0;
}

uint64_t sub_167A68(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, int *a6)
{
  int v9 = *a2;
  if (*a2 > 1819173228)
  {
    if (v9 > 1935894637)
    {
      switch(v9)
      {
        case 1935894638:
          int v15 = *a5;
          uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2);
          if (v15 != result)
          {
            size_t v27 = (os_log_t *)sub_32A48(13);
            __int16 v22 = *v27;
            if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
            {
              int v33 = 136315394;
              char v34 = "HP_Stream.cpp";
              __int16 v35 = 1024;
              int v36 = 345;
              int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamProperty"
                    "StartingChannel\"";
              goto LABEL_65;
            }
            goto LABEL_66;
          }
          int v16 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 92);
          break;
        case 1935960434:
          int v20 = *a5;
          uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2);
          if (v20 != result)
          {
            std::string::size_type v31 = (os_log_t *)sub_32A48(13);
            __int16 v22 = *v31;
            if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
            {
              int v33 = 136315394;
              char v34 = "HP_Stream.cpp";
              __int16 v35 = 1024;
              int v36 = 335;
              int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamPropertyDirection\"";
              goto LABEL_65;
            }
            goto LABEL_66;
          }
          int v16 = *(unsigned __int8 *)(a1 + 88);
          break;
        case 1952805485:
          int v10 = *a5;
          if (v10 == (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
LABEL_17:
            *a6 = result;
            return result;
          }
          int v21 = (os_log_t *)sub_32A48(13);
          __int16 v22 = *v21;
          if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
          {
            int v33 = 136315394;
            char v34 = "HP_Stream.cpp";
            __int16 v35 = 1024;
            int v36 = 340;
            int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamPropertyTerminalType\"";
LABEL_65:
            _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v33, 0x12u);
            goto LABEL_66;
          }
          goto LABEL_66;
        default:
          goto LABEL_35;
      }
      *a6 = v16;
      return result;
    }
    if (v9 != 1819173229)
    {
      if (v9 == 1819569763)
      {
        int v13 = *a5;
        if (v13 == (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
          goto LABEL_17;
        }
        char v25 = (os_log_t *)sub_32A48(13);
        __int16 v22 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          int v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          __int16 v35 = 1024;
          int v36 = 350;
          int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamPropertyLatency\"";
          goto LABEL_65;
        }
        goto LABEL_66;
      }
      goto LABEL_35;
    }
    int v18 = *a5;
    if (v18 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2))
    {
      int v29 = (os_log_t *)sub_32A48(13);
      __int16 v22 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        int v33 = 136315394;
        char v34 = "HP_Stream.cpp";
        __int16 v35 = 1024;
        int v36 = 310;
        int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyName\"";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
LABEL_30:
    *(void *)a6 = result;
    return result;
  }
  if (v9 > 1818455661)
  {
    if (v9 == 1818455662)
    {
      int v19 = *a5;
      if (v19 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2))
      {
        __int16 v30 = (os_log_t *)sub_32A48(13);
        __int16 v22 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          int v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          __int16 v35 = 1024;
          int v36 = 330;
          int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyElementNumberName\"";
          goto LABEL_65;
        }
        goto LABEL_66;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 136))(a1, a2);
      goto LABEL_30;
    }
    if (v9 == 1819107691)
    {
      int v14 = *a5;
      if (v14 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2))
      {
        unsigned __int8 v26 = (os_log_t *)sub_32A48(13);
        __int16 v22 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          int v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          __int16 v35 = 1024;
          int v36 = 315;
          int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyName\"";
          goto LABEL_65;
        }
        goto LABEL_66;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
      goto LABEL_30;
    }
  }
  else
  {
    if (v9 == 1818452846)
    {
      int v17 = *a5;
      if (v17 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2))
      {
        __int16 v28 = (os_log_t *)sub_32A48(13);
        __int16 v22 = *v28;
        if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
        {
          int v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          __int16 v35 = 1024;
          int v36 = 325;
          int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyElem"
                "entCategoryName\"";
          goto LABEL_65;
        }
        goto LABEL_66;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 128))(a1, a2);
      goto LABEL_30;
    }
    if (v9 == 1818454126)
    {
      int v12 = *a5;
      if (v12 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, a2))
      {
        int v24 = (os_log_t *)sub_32A48(13);
        __int16 v22 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          int v33 = 136315394;
          char v34 = "HP_Stream.cpp";
          __int16 v35 = 1024;
          int v36 = 320;
          int v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyElementName\"";
          goto LABEL_65;
        }
LABEL_66:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = 561211770;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, a2);
      goto LABEL_30;
    }
  }
LABEL_35:

  return sub_3A66B8(a1, a2, a3, a4, a5, (uint64_t)a6);
}

uint64_t sub_1682C4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 8;
  if (*a2 <= 1819173228)
  {
    if (v2 > 1818455661)
    {
      BOOL v5 = v2 == 1818455662;
      int v6 = 1819107691;
    }
    else
    {
      BOOL v5 = v2 == 1818452846;
      int v6 = 1818454126;
    }
    if (v5 || v2 == v6) {
      return v3;
    }
  }
  else
  {
    if (v2 <= 1935894637)
    {
      if (v2 == 1819173229) {
        return v3;
      }
      int v4 = 1819569763;
    }
    else
    {
      if (v2 == 1935894638 || v2 == 1952805485) {
        return 4;
      }
      int v4 = 1935960434;
    }
    if (v2 == v4) {
      return 4;
    }
  }
  return sub_3A69A4(a1, a2);
}

uint64_t sub_168390(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1819173228)
  {
    if (v2 > 1818455661)
    {
      BOOL v3 = v2 == 1818455662;
      int v4 = 1819107691;
    }
    else
    {
      BOOL v3 = v2 == 1818452846;
      int v4 = 1818454126;
    }
  }
  else if (v2 <= 1935894637)
  {
    BOOL v3 = v2 == 1819173229;
    int v4 = 1819569763;
  }
  else
  {
    BOOL v3 = v2 == 1935894638 || v2 == 1935960434;
    int v4 = 1952805485;
  }
  if (v3 || v2 == v4) {
    return 0;
  }
  else {
    return sub_3A6BA8(a1, a2);
  }
}

uint64_t sub_168440(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1;
  if (*a2 <= 1819107690)
  {
    if (v2 <= 1818455661)
    {
      if (v2 == 1818452846)
      {
        uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
        if (!v7) {
          return 0;
        }
      }
      else
      {
        if (v2 != 1818454126) {
          return sub_3A6620(a1, a2) != 0;
        }
        uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        if (!v7) {
          return 0;
        }
      }
      goto LABEL_25;
    }
    if (v2 != 1818455662)
    {
      if (v2 == 1818850145) {
        return v3;
      }
      int v4 = 1818850162;
      goto LABEL_10;
    }
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    if (v7) {
      goto LABEL_25;
    }
    return 0;
  }
  if (v2 > 1935894637)
  {
    if (v2 != 1935894638 && v2 != 1935960434 && v2 != 1952805485) {
      return sub_3A6620(a1, a2) != 0;
    }
    return v3;
  }
  if (v2 == 1819107691)
  {
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    if (v7) {
      goto LABEL_25;
    }
    return 0;
  }
  if (v2 == 1819173229)
  {
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
    if (!v7) {
      return 0;
    }
LABEL_25:
    CFRelease(v7);
    return 1;
  }
  int v4 = 1819569763;
LABEL_10:
  if (v2 != v4) {
    return sub_3A6620(a1, a2) != 0;
  }
  return v3;
}

uint64_t sub_168630(uint64_t a1)
{
  uint64_t v7 = 0x676C6F626C6E616DLL;
  int v8 = 0;
  CFStringRef theString = 0;
  int v5 = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56))(a1, &v7, 0, 0, &v5, &theString);
  buffer[0] = 0;
  if (theString)
  {
    usedBufLeuint64_t n = 0;
    v10.length = CFStringGetLength(theString);
    v10.locatiouint64_t n = 0;
    CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }
  int v2 = "Input";
  if (!*(unsigned char *)(a1 + 88)) {
    int v2 = "Output";
  }
  return printf("AudioObjectID:\t0x%X\n\tClass:\t\t%s\n\tName:\t\t%s\n\tDirection:\t%s\n\tChannels:\t%u\n", *(_DWORD *)(a1 + 8), "Audio Stream", (const char *)buffer, v2, *(_DWORD *)(*(void *)(a1 + 104) + 44));
}

void sub_168784(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1686B0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_16879C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 16))();
}

void sub_1687C4(void *a1)
{
  sub_1687FC(a1);

  operator delete();
}

uint64_t sub_1687FC(void *a1)
{
  *a1 = off_623768;
  sub_3A754C((uint64_t)a1, a1[13]);
  uint64_t v2 = a1[13];
  a1[13] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[13];
    a1[13] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  return sub_3A6F14((uint64_t)a1);
}

uint64_t sub_1688BC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_3D04((uint64_t)&v21);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v7 = v6 + 16;
  uint64_t v8 = v9;
  int v10 = *(char *)(v7 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v7 + 8);
  }
  sub_256E4(&v21, v11, v12);
  uint64_t v13 = *(void *)(a2 + 8);
  while (1)
  {
    uint64_t v13 = *(void *)(v13 + 8);
    if (v13 == a2) {
      break;
    }
    int v14 = *(char *)(a3 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 8);
    }
    sub_256E4(&v21, v15, v16);
    int v17 = *(char *)(v13 + 39);
    if (v17 >= 0) {
      uint64_t v18 = v13 + 16;
    }
    else {
      uint64_t v18 = *(void *)(v13 + 16);
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(v13 + 39);
    }
    else {
      uint64_t v19 = *(void *)(v13 + 24);
    }
    sub_256E4(&v21, v18, v19);
  }
  sub_246E4(a1, (uint64_t)v22);
  if (v23 < 0) {
    operator delete((void *)v22[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_168A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6B798((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_168A8C(uint64_t a1, const __CFString *a2)
{
  if (!a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }

  return sub_20C54(a1, a2);
}

void sub_168AEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_168B00(std::string *a1, const __CFArray *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
        sub_168C44(&__p, ValueAtIndex);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(a1, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (Count - 1 != i) {
          std::string::append(a1, ", ", 2uLL);
        }
      }
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_168C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_168C44(std::string *result, const __CFString *cf)
{
  uint64_t v2 = result;
  if (!cf)
  {
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    return result;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFDictionaryGetTypeID())
  {
    return sub_168E34(v2, (const __CFDictionary *)cf);
  }
  if (v4 == CFArrayGetTypeID())
  {
    return (std::string *)sub_168B00(v2, cf);
  }
  if (v4 == CFNumberGetTypeID())
  {
    if (CFNumberGetByteSize((CFNumberRef)cf) == 4)
    {
      LODWORD(valuePtr) = 0;
      if (CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr)) {
        return (std::string *)sub_2417C(v2, valuePtr);
      }
    }
    CFStringRef valuePtr = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", cf);
    char v6 = 1;
    sub_21B7C(v2, valuePtr);
    return (std::string *)sub_72924((uint64_t)&valuePtr);
  }
  if (v4 == CFStringGetTypeID())
  {
    return (std::string *)sub_21B7C(v2, cf);
  }
  else
  {
    if (v4 != CFBooleanGetTypeID())
    {
      CFStringRef valuePtr = CFCopyDescription(cf);
      char v6 = 1;
      sub_21B7C(v2, valuePtr);
      return (std::string *)sub_72924((uint64_t)&valuePtr);
    }
    return (std::string *)sub_16907C(v2, (CFBooleanRef)cf);
  }
}

void sub_168E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_168E34(std::string *a1, const __CFDictionary *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  if (a2)
  {
    CFIndex Count = CFDictionaryGetCount(a2);
    __chkstk_darwin(Count);
    unint64_t v5 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    char v6 = (CFTypeRef *)((char *)&v15 - v5);
    size_t v7 = (unint64_t)(8 * Count) >= 0x200 ? 512 : 8 * Count;
    bzero((char *)&v15 - v5, v7);
    __chkstk_darwin(v8);
    uint64_t v9 = (CFTypeRef *)((char *)&v15 - v5);
    bzero((char *)&v15 - v5, v7);
    CFDictionaryGetKeysAndValues(a2, (const void **)((char *)&v15 - v5), (const void **)((char *)&v15 - v5));
    if (Count >= 1)
    {
      do
      {
        sub_168C44((int)&v15, *v6);
        if ((v17 & 0x80u) == 0) {
          int v10 = (const std::string::value_type *)&v15;
        }
        else {
          int v10 = v15;
        }
        if ((v17 & 0x80u) == 0) {
          std::string::size_type v11 = v17;
        }
        else {
          std::string::size_type v11 = v16;
        }
        std::string::append(a1, v10, v11);
        if ((char)v17 < 0) {
          operator delete(v15);
        }
        std::string::append(a1, ": ", 2uLL);
        sub_168C44((int)&v15, *v9);
        if ((v17 & 0x80u) == 0) {
          uint64_t v12 = (const std::string::value_type *)&v15;
        }
        else {
          uint64_t v12 = v15;
        }
        if ((v17 & 0x80u) == 0) {
          std::string::size_type v13 = v17;
        }
        else {
          std::string::size_type v13 = v16;
        }
        std::string::append(a1, v12, v13);
        if ((char)v17 < 0) {
          operator delete(v15);
        }
        if (Count != 1) {
          std::string::append(a1, "; ", 2uLL);
        }
        ++v9;
        ++v6;
        --Count;
      }
      while (Count);
    }
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_169034(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_16907C(void *a1, CFBooleanRef BOOLean)
{
  if (CFBooleanGetValue(BOOLean)) {
    uint64_t v3 = "true";
  }
  else {
    uint64_t v3 = "false";
  }

  return sub_21C8C(a1, v3);
}

uint64_t sub_1690D0(void *a1, uint64_t a2)
{
  sub_2440C((uint64_t)v18);
  switch(*(_DWORD *)a2)
  {
    case 0:
      sub_384DA8((int *)a2);
      std::ostream::operator<<();
      goto LABEL_35;
    case 1:
    case 5:
      buf[0] = *(unsigned char *)(a2 + 8);
      sub_256E4(&v19, (uint64_t)buf, 1);
      goto LABEL_35;
    case 2:
      std::ostream::operator<<();
      goto LABEL_35;
    case 3:
      sub_384EAC((int *)a2);
      std::ostream::operator<<();
      goto LABEL_35;
    case 4:
      std::ostream::operator<<();
      goto LABEL_35;
    case 6:
      std::ostream::operator<<();
      goto LABEL_35;
    case 7:
      sub_384FB4((int *)a2);
      std::ostream::operator<<();
      goto LABEL_35;
    case 8:
      std::ostream::operator<<();
      goto LABEL_35;
    case 9:
      sub_3850BC((float *)a2);
      std::ostream::operator<<();
      goto LABEL_35;
    case 0xA:
      sub_3851C4((double *)a2);
      std::ostream::operator<<();
      goto LABEL_35;
    case 0xB:
      sub_3852CC((int *)a2);
      goto LABEL_25;
    case 0xD:
      sub_3853D4((int *)a2);
LABEL_25:
      std::ostream::operator<<();
      goto LABEL_35;
    case 0xE:
      CFStringRef v4 = (const __CFString *)sub_3854DC((int *)a2);
      sub_20C54((uint64_t)buf, v4);
      if (v24 >= 0) {
        unint64_t v5 = buf;
      }
      else {
        unint64_t v5 = *(unsigned char **)buf;
      }
      if (v24 >= 0) {
        uint64_t v6 = HIBYTE(v24);
      }
      else {
        uint64_t v6 = *(void *)&buf[8];
      }
      sub_256E4(&v19, (uint64_t)v5, v6);
      if (SHIBYTE(v24) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_35;
    case 0xF:
      std::string::size_type v13 = (os_log_t *)sub_32A48(13);
      os_log_t v14 = *v13;
      if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 362;
      int v10 = "%25s:%-5d Unable to return a single string for kVariTypeMap.";
      goto LABEL_32;
    case 0x10:
      uint64_t v15 = (os_log_t *)sub_32A48(13);
      os_log_t v14 = *v15;
      if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 359;
      int v10 = "%25s:%-5d Unable to return a single string for kVariTypeList.";
LABEL_32:
      std::string::size_type v11 = v14;
      uint32_t v12 = 18;
      break;
    case 0x12:
      sub_256E4(&v19, (uint64_t)"std::function<VariTypeMap()>", 28);
      goto LABEL_35;
    default:
      size_t v7 = (os_log_t *)sub_32A48(13);
      os_log_t v8 = *v7;
      if (!*v7 || !os_log_type_enabled(*v7, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      int v9 = *(_DWORD *)a2;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 366;
      __int16 v23 = 1024;
      int v24 = v9;
      int v10 = "%25s:%-5d Unable to return a single string for VariType %d.";
      std::string::size_type v11 = v8;
      uint32_t v12 = 24;
      break;
  }
  _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
LABEL_35:
  sub_246E4(a1, (uint64_t)v20);
  *(void *)((char *)v18
  uint64_t v19 = v16;
  if (v21 < 0) {
    operator delete((void *)v20[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_16957C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5E32C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_16960C(void *a1, int *a2, long long *a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (*a2 >= 0xF)
  {
    switch(*a2)
    {
      case 15:
        uint64_t v15 = sub_3855E4(a2);
        if (*((char *)a3 + 23) < 0)
        {
          sub_21E8C(&__dst, *(void **)a3, *((void *)a3 + 1));
        }
        else
        {
          long long __dst = *a3;
          uint64_t v81 = *((void *)a3 + 2);
        }
        sub_169F5C(&v85, v15, &__dst);
        std::string::size_type v18 = v85.__r_.__value_.__r.__words[2];
        if (v85.__r_.__value_.__r.__words[2])
        {
          long long v19 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
          uint64_t v20 = *(void *)v85.__r_.__value_.__l.__size_;
          *(void *)(v20 + 8) = *(void *)(v85.__r_.__value_.__r.__words[0] + 8);
          **(void **)(v19 + 8) = v20;
          char v21 = (void *)*a1;
          v21[1] = *((void *)&v19 + 1);
          **((void **)&v19 + 1) = v21;
          *a1 = v19;
          *(void *)(v19 + 8) = a1;
          a1[2] += v18;
          v85.__r_.__value_.__r.__words[2] = 0;
        }
        sub_16A560(&v85);
        if ((SHIBYTE(v81) & 0x80000000) == 0) {
          return;
        }
        os_log_t v14 = (void *)__dst;
        break;
      case 16:
        uint64_t v16 = sub_3857F4(a2);
        if (*((char *)a3 + 23) < 0)
        {
          sub_21E8C(&v78, *(void **)a3, *((void *)a3 + 1));
        }
        else
        {
          long long v78 = *a3;
          uint64_t v79 = *((void *)a3 + 2);
        }
        std::string __p = &__p;
        p_p = &__p;
        uint64_t v84 = 0;
        if (v79 >= 0) {
          size_t v22 = HIBYTE(v79);
        }
        else {
          size_t v22 = *((void *)&v78 + 1);
        }
        __int16 v23 = &v85;
        sub_5E220((uint64_t)&v85, v22 + 1);
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v23 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        if (v22)
        {
          if (v79 >= 0) {
            int v24 = &v78;
          }
          else {
            int v24 = (long long *)v78;
          }
          memmove(v23, v24, v22);
        }
        *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 123;
        char v25 = (char *)operator new(0x28uLL);
        *(std::string *)(v25 + 16) = v85;
        unsigned __int8 v26 = __p;
        *(void *)char v25 = __p;
        *((void *)v25 + 1) = &__p;
        v26[1] = v25;
        std::string __p = v25;
        ++v84;
        for (uint64_t i = *(void *)(v16 + 8); i != v16; uint64_t i = *(void *)(i + 8))
        {
          if (v79 >= 0) {
            size_t v28 = HIBYTE(v79);
          }
          else {
            size_t v28 = *((void *)&v78 + 1);
          }
          sub_5E220((uint64_t)v86, v28 + 4);
          if (v87 >= 0) {
            int v29 = v86;
          }
          else {
            int v29 = *(unsigned char **)v86;
          }
          if (v28)
          {
            if (v79 >= 0) {
              __int16 v30 = &v78;
            }
            else {
              __int16 v30 = (long long *)v78;
            }
            memmove(v29, v30, v28);
          }
          strcpy(&v29[v28], "    ");
          sub_16960C(&v85, i + 16, v86);
          if (v87 < 0) {
            operator delete(*(void **)v86);
          }
          std::string::size_type v31 = v85.__r_.__value_.__r.__words[2];
          if (v85.__r_.__value_.__r.__words[2])
          {
            long long v32 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
            uint64_t v33 = *(void *)v85.__r_.__value_.__l.__size_;
            *(void *)(v33 + 8) = *(void *)(v85.__r_.__value_.__r.__words[0] + 8);
            **(void **)(v32 + 8) = v33;
            char v34 = __p;
            *((void *)__p + 1) = *((void *)&v32 + 1);
            **((void **)&v32 + 1) = v34;
            *(void *)(v32 + 8) = &__p;
            std::string __p = (void *)v32;
            v84 += v31;
            v85.__r_.__value_.__r.__words[2] = 0;
          }
          sub_16A560(&v85);
        }
        if (v79 >= 0) {
          size_t v35 = HIBYTE(v79);
        }
        else {
          size_t v35 = *((void *)&v78 + 1);
        }
        int v36 = &v85;
        sub_5E220((uint64_t)&v85, v35 + 1);
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v36 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        if (v35)
        {
          if (v79 >= 0) {
            int v37 = &v78;
          }
          else {
            int v37 = (long long *)v78;
          }
          memmove(v36, v37, v35);
        }
        *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 125;
        float v38 = (void **)operator new(0x28uLL);
        *(std::string *)(v38 + 2) = v85;
        uint64_t v39 = __p;
        *float v38 = __p;
        v38[1] = &__p;
        v39[1] = v38;
        BOOL v40 = __CFADD__(v84, 1);
        uint64_t v41 = v84 + 1;
        std::string __p = v38;
        ++v84;
        if (!v40)
        {
          long long v42 = p_p;
          std::string::size_type v43 = *p_p;
          v43[1] = &__p;
          *v38[1] = v43;
          float v44 = (void *)*a1;
          v44[1] = v42;
          *long long v42 = v44;
          *a1 = v38;
          v38[1] = a1;
          a1[2] += v41;
          uint64_t v84 = 0;
        }
        sub_16A560(&__p);
        if ((SHIBYTE(v79) & 0x80000000) == 0) {
          return;
        }
        os_log_t v14 = (void *)v78;
        break;
      case 17:
        uint64_t v17 = sub_3858FC(a2);
        if (*((char *)a3 + 23) < 0)
        {
          sub_21E8C(&v73, *(void **)a3, *((void *)a3 + 1));
        }
        else
        {
          long long v73 = *a3;
          uint64_t v74 = *((void *)a3 + 2);
        }
        CFTypeID v75 = (char *)&v75;
        unint64_t v76 = &v75;
        uint64_t v77 = 0;
        if (v74 >= 0) {
          size_t v45 = HIBYTE(v74);
        }
        else {
          size_t v45 = *((void *)&v73 + 1);
        }
        std::string::size_type v46 = &v85;
        sub_5E220((uint64_t)&v85, v45 + 7);
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v46 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        if (v45)
        {
          if (v74 >= 0) {
            CFDictionaryRef v47 = &v73;
          }
          else {
            CFDictionaryRef v47 = (long long *)v73;
          }
          memmove(v46, v47, v45);
        }
        strcpy((char *)v46 + v45, "PAIR: {");
        int v48 = (char *)operator new(0x28uLL);
        *(std::string *)(v48 + 16) = v85;
        unsigned int v49 = v75;
        *(void *)int v48 = v75;
        *((void *)v48 + 1) = &v75;
        *((void *)v49 + 1) = v48;
        CFTypeID v75 = v48;
        ++v77;
        if (v74 >= 0) {
          size_t v50 = HIBYTE(v74);
        }
        else {
          size_t v50 = *((void *)&v73 + 1);
        }
        char v51 = v86;
        sub_5E220((uint64_t)v86, v50 + 4);
        if (v87 < 0) {
          char v51 = *(unsigned char **)v86;
        }
        if (v50)
        {
          if (v74 >= 0) {
            std::string::size_type v52 = &v73;
          }
          else {
            std::string::size_type v52 = (long long *)v73;
          }
          memmove(v51, v52, v50);
        }
        strcpy(&v51[v50], "    ");
        sub_16960C(&v85, v17, v86);
        std::string::size_type v53 = v85.__r_.__value_.__r.__words[2];
        if (v85.__r_.__value_.__r.__words[2])
        {
          long long v54 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
          uint64_t v55 = *(void *)v85.__r_.__value_.__l.__size_;
          *(void *)(v55 + 8) = *(void *)(v85.__r_.__value_.__r.__words[0] + 8);
          **(void **)(v54 + 8) = v55;
          __int16 v56 = v75;
          *((void *)v75 + 1) = *((void *)&v54 + 1);
          **((void **)&v54 + 1) = v56;
          *(void *)(v54 + 8) = &v75;
          CFTypeID v75 = (char *)v54;
          v77 += v53;
          v85.__r_.__value_.__r.__words[2] = 0;
        }
        sub_16A560(&v85);
        if (v87 < 0) {
          operator delete(*(void **)v86);
        }
        if (v74 >= 0) {
          size_t v57 = HIBYTE(v74);
        }
        else {
          size_t v57 = *((void *)&v73 + 1);
        }
        std::string v58 = &__p;
        sub_5E220((uint64_t)&__p, v57 + 4);
        if (v84 < 0) {
          std::string v58 = __p;
        }
        if (v57)
        {
          if (v74 >= 0) {
            std::string v59 = &v73;
          }
          else {
            std::string v59 = (long long *)v73;
          }
          memmove(v58, v59, v57);
        }
        strcpy((char *)v58 + v57, "    ");
        sub_16960C(&v85, v17 + 16, &__p);
        std::string::size_type v60 = v85.__r_.__value_.__r.__words[2];
        if (v85.__r_.__value_.__r.__words[2])
        {
          long long v61 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
          uint64_t v62 = *(void *)v85.__r_.__value_.__l.__size_;
          *(void *)(v62 + 8) = *(void *)(v85.__r_.__value_.__r.__words[0] + 8);
          **(void **)(v61 + 8) = v62;
          CFDictionaryRef v63 = v75;
          *((void *)v75 + 1) = *((void *)&v61 + 1);
          **((void **)&v61 + 1) = v63;
          *(void *)(v61 + 8) = &v75;
          CFTypeID v75 = (char *)v61;
          v77 += v60;
          v85.__r_.__value_.__r.__words[2] = 0;
        }
        sub_16A560(&v85);
        if (SHIBYTE(v84) < 0) {
          operator delete(__p);
        }
        if (v74 >= 0) {
          size_t v64 = HIBYTE(v74);
        }
        else {
          size_t v64 = *((void *)&v73 + 1);
        }
        uint64_t v65 = &v85;
        sub_5E220((uint64_t)&v85, v64 + 1);
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v65 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        if (v64)
        {
          if (v74 >= 0) {
            CFArrayRef v66 = &v73;
          }
          else {
            CFArrayRef v66 = (long long *)v73;
          }
          memmove(v65, v66, v64);
        }
        *(_WORD *)((char *)&v65->__r_.__value_.__l.__data_ + v64) = 125;
        uint64_t v67 = (char *)operator new(0x28uLL);
        *(std::string *)(v67 + 16) = v85;
        char v68 = v75;
        *(void *)uint64_t v67 = v75;
        *((void *)v67 + 1) = &v75;
        *((void *)v68 + 1) = v67;
        BOOL v40 = __CFADD__(v77, 1);
        uint64_t v69 = v77 + 1;
        CFTypeID v75 = v67;
        ++v77;
        if (!v40)
        {
          std::string v70 = v76;
          long long v71 = *v76;
          *((void *)v71 + 1) = &v75;
          **((void **)v67 + 1) = v71;
          uint64_t v72 = *a1;
          *(void *)(v72 + 8) = v70;
          *std::string v70 = (char *)v72;
          *a1 = v67;
          *((void *)v67 + 1) = a1;
          a1[2] += v69;
          uint64_t v77 = 0;
        }
        sub_16A560(&v75);
        if ((SHIBYTE(v74) & 0x80000000) == 0) {
          return;
        }
        os_log_t v14 = (void *)v73;
        break;
      case 18:
        goto LABEL_2;
      default:
        return;
    }
    goto LABEL_10;
  }
LABEL_2:
  sub_1690D0(&v85, (uint64_t)a2);
  int v5 = *((char *)a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v6 = *(const std::string::value_type **)a3;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    std::string::size_type v7 = *((void *)a3 + 1);
  }
  os_log_t v8 = std::string::insert(&v85, 0, v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
  *(void *)int v86 = v8->__r_.__value_.__l.__size_;
  *(void *)&v86[7] = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
  char v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v11 = operator new(0x28uLL);
  uint64_t v12 = *(void *)v86;
  void v11[2] = v9;
  v11[3] = v12;
  *(void *)((char *)v11 + 31) = *(void *)&v86[7];
  *((unsigned char *)v11 + 39) = v10;
  uint64_t v13 = *a1;
  *std::string::size_type v11 = *a1;
  v11[1] = a1;
  *(void *)(v13 + 8) = v11;
  *a1 = v11;
  ++a1[2];
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    os_log_t v14 = (void *)v85.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v14);
  }
}

void sub_169E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  sub_16A560(&a15);
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_16A560(v43);
  _Unwind_Resume(a1);
}

void sub_169F5C(uint64_t *a1, uint64_t a2, const void **a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    int v6 = *((_DWORD *)i + 6);
    if ((v6 - 18) > 0xFFFFFFFC)
    {
      if (v6 == 15) {
        int v24 = "VariTypeMap { ";
      }
      else {
        int v24 = "VariTypeList { ";
      }
      if (*((char *)a3 + 23) >= 0) {
        size_t v25 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v25 = (size_t)a3[1];
      }
      sub_5E220((uint64_t)&v56, v25 + 1);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned __int8 v26 = &v56;
      }
      else {
        unsigned __int8 v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if (v25)
      {
        if (*((char *)a3 + 23) >= 0) {
          size_t v27 = a3;
        }
        else {
          size_t v27 = *a3;
        }
        memmove(v26, v27, v25);
      }
      *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 91;
      sub_2417C(&v53, *((_DWORD *)i + 4));
      if ((v55 & 0x80u) == 0) {
        size_t v28 = (const std::string::value_type *)&v53;
      }
      else {
        size_t v28 = (const std::string::value_type *)v53;
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v29 = v55;
      }
      else {
        std::string::size_type v29 = v54;
      }
      __int16 v30 = std::string::append(&v56, v28, v29);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      long long v32 = std::string::append(&v57, "]: ", 3uLL);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (v6 == 15) {
        std::string::size_type v34 = 14;
      }
      else {
        std::string::size_type v34 = 15;
      }
      size_t v35 = std::string::append(&v58, v24, v34);
      std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
      *(void *)&long long __p = v35->__r_.__value_.__l.__size_;
      *(void *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
      char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      float v38 = operator new(0x28uLL);
      uint64_t v39 = __p;
      void v38[2] = v36;
      void v38[3] = v39;
      *(void *)((char *)v38 + 31) = *(void *)((char *)&__p + 7);
      *((unsigned char *)v38 + 39) = v37;
      uint64_t v40 = *a1;
      *float v38 = *a1;
      v38[1] = a1;
      *(void *)(v40 + 8) = v38;
      *a1 = (uint64_t)v38;
      ++a1[2];
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v53);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (*((char *)a3 + 23) >= 0) {
        size_t v41 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v41 = (size_t)a3[1];
      }
      sub_5E220((uint64_t)v51, v41 + 8);
      if (v52 >= 0) {
        long long v42 = v51;
      }
      else {
        long long v42 = (void **)v51[0];
      }
      if (v41)
      {
        if (*((char *)a3 + 23) >= 0) {
          std::string::size_type v43 = a3;
        }
        else {
          std::string::size_type v43 = *a3;
        }
        memmove(v42, v43, v41);
      }
      strcpy((char *)v42 + v41, "        ");
      sub_16960C(&v58, (int *)i + 6, (long long *)v51);
      if (v52 < 0) {
        operator delete(v51[0]);
      }
      sub_21C8C(&v57, " } ");
      float v44 = (char *)operator new(0x28uLL);
      *(std::string *)(v44 + 16) = v57;
      std::string::size_type v45 = v58.__r_.__value_.__r.__words[0];
      *(void *)float v44 = v58.__r_.__value_.__r.__words[0];
      *((void *)v44 + 1) = &v58;
      *(void *)(v45 + 8) = v44;
      BOOL v46 = __CFADD__(v58.__r_.__value_.__r.__words[2], 1);
      std::string::size_type v47 = v58.__r_.__value_.__r.__words[2] + 1;
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      ++v58.__r_.__value_.__r.__words[2];
      if (!v46)
      {
        std::string::size_type size = (void *)v58.__r_.__value_.__l.__size_;
        uint64_t v49 = *(void *)v58.__r_.__value_.__l.__size_;
        *(void *)(v49 + 8) = *((void *)v44 + 1);
        **((void **)v44 + 1) = v49;
        uint64_t v50 = *a1;
        *(void *)(v50 + 8) = size;
        *std::string::size_type size = v50;
        *a1 = (uint64_t)v44;
        *((void *)v44 + 1) = a1;
        a1[2] += v47;
        v58.__r_.__value_.__r.__words[2] = 0;
      }
      sub_16A560(&v58);
    }
    else
    {
      if (*((char *)a3 + 23) >= 0) {
        size_t v7 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v7 = (size_t)a3[1];
      }
      sub_5E220((uint64_t)&v56, v7 + 1);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        os_log_t v8 = &v56;
      }
      else {
        os_log_t v8 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if (v7)
      {
        if (*((char *)a3 + 23) >= 0) {
          std::string::size_type v9 = a3;
        }
        else {
          std::string::size_type v9 = *a3;
        }
        memmove(v8, v9, v7);
      }
      *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 91;
      sub_2417C(&v53, *((_DWORD *)i + 4));
      if ((v55 & 0x80u) == 0) {
        char v10 = (const std::string::value_type *)&v53;
      }
      else {
        char v10 = (const std::string::value_type *)v53;
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v11 = v55;
      }
      else {
        std::string::size_type v11 = v54;
      }
      uint64_t v12 = std::string::append(&v56, v10, v11);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      os_log_t v14 = std::string::append(&v57, "]: ", 3uLL);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      sub_1690D0(&__p, (uint64_t)(i + 3));
      if ((v60 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v60 & 0x80u) == 0) {
        std::string::size_type v17 = v60;
      }
      else {
        std::string::size_type v17 = *((void *)&__p + 1);
      }
      std::string::size_type v18 = std::string::append(&v58, p_p, v17);
      std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
      v61[0] = v18->__r_.__value_.__l.__size_;
      *(void *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
      char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      char v21 = operator new(0x28uLL);
      uint64_t v22 = v61[0];
      v21[2] = v19;
      void v21[3] = v22;
      *(void *)((char *)v21 + 31) = *(void *)((char *)v61 + 7);
      *((unsigned char *)v21 + 39) = v20;
      v61[0] = 0;
      *(void *)((char *)v61 + 7) = 0;
      uint64_t v23 = *a1;
      void *v21 = *a1;
      v21[1] = a1;
      *(void *)(v23 + 8) = v21;
      *a1 = (uint64_t)v21;
      ++a1[2];
      if ((char)v60 < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v53);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_16A45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  sub_16A560(&a35);
  sub_16A560(v47);
  _Unwind_Resume(a1);
}

void *sub_16A560(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = (void *)*result;
    v3[1] = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      CFStringRef v4 = (void *)result[1];
      sub_16A5C0((void **)result);
      uint64_t result = v4;
    }
  }
  return result;
}

void sub_16A5C0(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void sub_16A604(uint64_t *a1, uint64_t a2)
{
  sub_21C8C(__p, "");
  sub_169F5C(a1, a2, (const void **)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_16A660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_16A67C(uint64_t *a1, CFDictionaryRef theDict, int a3, const void **a4)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    CFIndex v9 = Count;
    if (Count >= 1)
    {
      uint64_t v48 = (uint64_t)&v48;
      unint64_t v10 = 8 * Count;
      __chkstk_darwin(Count);
      unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v12 = (const __CFString **)((char *)&v48 - v11);
      if (v10 >= 0x200) {
        size_t v13 = 512;
      }
      else {
        size_t v13 = 8 * v9;
      }
      bzero((char *)&v48 - v11, v13);
      __chkstk_darwin(v14);
      long long v15 = (const __CFString **)((char *)&v48 - v11);
      bzero((char *)&v48 - v11, v13);
      CFDictionaryGetKeysAndValues(theDict, (const void **)((char *)&v48 - v11), (const void **)((char *)&v48 - v11));
      int v50 = a3 - 1;
      uint64_t v49 = &v52;
      while (1)
      {
        if (a3 >= 2 && ((CFTypeID v16 = CFGetTypeID(*v15), CFArrayGetTypeID() == v16) || CFDictionaryGetTypeID() == v16))
        {
          if (*((char *)a4 + 23) >= 0) {
            size_t v17 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            size_t v17 = (size_t)a4[1];
          }
          sub_5E220((uint64_t)&v55, v17 + 2);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v18 = &v55;
          }
          else {
            std::string::size_type v18 = (std::string *)v55.__r_.__value_.__r.__words[0];
          }
          if (v17)
          {
            if (*((char *)a4 + 23) >= 0) {
              std::string::size_type v19 = a4;
            }
            else {
              std::string::size_type v19 = *a4;
            }
            memmove(v18, v19, v17);
          }
          strcpy((char *)v18 + v17, "- ");
          sub_168C44(&v54, *v12);
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v20 = &v54;
          }
          else {
            char v20 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v54.__r_.__value_.__l.__size_;
          }
          std::string::append(&v55, (const std::string::value_type *)v20, size);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          std::string::append(&v55, ":", 1uLL);
          uint64_t v22 = sub_16AC60((uint64_t)&v55);
          v22[1] = a1;
          uint64_t v23 = *a1;
          *uint64_t v22 = *a1;
          *(void *)(v23 + 8) = v22;
          *a1 = (uint64_t)v22;
          ++a1[2];
          int v24 = (std::string *)sub_21C8C(&v54, "  ");
          int v25 = *((char *)a4 + 23);
          if (v25 >= 0) {
            unsigned __int8 v26 = (const std::string::value_type *)a4;
          }
          else {
            unsigned __int8 v26 = (const std::string::value_type *)*a4;
          }
          if (v25 >= 0) {
            std::string::size_type v27 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            std::string::size_type v27 = (std::string::size_type)a4[1];
          }
          size_t v28 = std::string::append(v24, v26, v27);
          std::string::size_type v29 = (void *)v28->__r_.__value_.__r.__words[0];
          unint64_t v30 = v28->__r_.__value_.__l.__size_;
          v53[0] = v28->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v53 + 3) = *(_DWORD *)((char *)&v28->__r_.__value_.__r.__words[2] + 3);
          int v31 = SHIBYTE(v28->__r_.__value_.__r.__words[2]);
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          CFStringRef v32 = *v15;
          if (v31 < 0)
          {
            sub_21E8C(&__dst, v29, v30);
          }
          else
          {
            *(void *)&long long __dst = v29;
            *((void *)&__dst + 1) = v30;
            long long v33 = v49;
            *(_DWORD *)uint64_t v49 = v53[0];
            *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)((char *)v53 + 3);
            HIBYTE(v52) = v31;
          }
          sub_16ACD0((uint64_t *)&v54, v32, v50, &__dst);
          if (SHIBYTE(v52) < 0) {
            operator delete((void *)__dst);
          }
          sub_16B388(a1, a1, v54.__r_.__value_.__l.__size_, (uint64_t)&v54);
          sub_16A560(&v54);
          if (v31 < 0) {
            operator delete(v29);
          }
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_75;
          }
        }
        else
        {
          if (*((char *)a4 + 23) >= 0) {
            size_t v34 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            size_t v34 = (size_t)a4[1];
          }
          sub_5E220((uint64_t)&v55, v34 + 2);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v35 = &v55;
          }
          else {
            size_t v35 = (std::string *)v55.__r_.__value_.__r.__words[0];
          }
          if (v34)
          {
            if (*((char *)a4 + 23) >= 0) {
              std::string::size_type v36 = a4;
            }
            else {
              std::string::size_type v36 = *a4;
            }
            memmove(v35, v36, v34);
          }
          strcpy((char *)v35 + v34, "- ");
          sub_168C44(&v54, *v12);
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v37 = &v54;
          }
          else {
            char v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v54.__r_.__value_.__l.__size_;
          }
          std::string::append(&v55, (const std::string::value_type *)v37, v38);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          std::string::append(&v55, ": ", 2uLL);
          sub_168C44(&v54, *v15);
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v39 = &v54;
          }
          else {
            uint64_t v39 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v40 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v40 = v54.__r_.__value_.__l.__size_;
          }
          std::string::append(&v55, (const std::string::value_type *)v39, v40);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          size_t v41 = sub_16AC60((uint64_t)&v55);
          v41[1] = a1;
          uint64_t v42 = *a1;
          *size_t v41 = *a1;
          *(void *)(v42 + 8) = v41;
          *a1 = (uint64_t)v41;
          ++a1[2];
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_75;
          }
        }
        operator delete(v55.__r_.__value_.__l.__data_);
LABEL_75:
        ++v15;
        ++v12;
        if (!--v9) {
          return;
        }
      }
    }
    if (*((char *)a4 + 23) >= 0) {
      size_t v43 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v43 = (size_t)a4[1];
    }
    float v44 = &v55;
    sub_5E220((uint64_t)&v55, v43 + 22);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v44 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if (v43)
    {
      if (*((char *)a4 + 23) >= 0) {
        std::string::size_type v45 = a4;
      }
      else {
        std::string::size_type v45 = *a4;
      }
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, "- < empty dictionary >");
    BOOL v46 = sub_16AC60((uint64_t)&v55);
    v46[1] = a1;
    uint64_t v47 = *a1;
    *BOOL v46 = *a1;
    *(void *)(v47 + 8) = v46;
    *a1 = (uint64_t)v46;
    ++a1[2];
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
}

void sub_16ABB0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  sub_16A560(v1);
  _Unwind_Resume(a1);
}

void *sub_16AC60(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = v2 + 2;
  void *v2 = 0;
  v2[1] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_21E8C(v3, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
    v2[4] = *(void *)(a1 + 16);
  }
  return v2;
}

void sub_16ACBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_16ACD0(uint64_t *a1, const void *a2, int a3, long long *a4)
{
  uint64_t v54 = (uint64_t)&v54;
  std::string v55 = &v54;
  uint64_t v56 = 0;
  if (!a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    a1[2] = 0;
    return sub_16A560(&v54);
  }
  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 == CFDictionaryGetTypeID())
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_21E8C(&__dst, *(void **)a4, *((void *)a4 + 1));
    }
    else
    {
      long long __dst = *a4;
      uint64_t v53 = *((void *)a4 + 2);
    }
    sub_16A67C((int)a1, (CFDictionaryRef)a2);
    if (SHIBYTE(v53) < 0)
    {
      uint64_t v14 = (void *)__dst;
LABEL_96:
      operator delete(v14);
      return sub_16A560(&v54);
    }
    return sub_16A560(&v54);
  }
  if (v8 != CFArrayGetTypeID())
  {
    uint64_t v9 = v56;
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    a1[2] = 0;
    if (v9)
    {
      uint64_t v11 = v54;
      unint64_t v10 = v55;
      uint64_t v12 = *v55;
      *(void *)(v12 + 8) = *(void *)(v54 + 8);
      **(void **)(v11 + 8) = v12;
      uint64_t v13 = *a1;
      *(void *)(v13 + 8) = v10;
      *unint64_t v10 = v13;
      *a1 = v11;
      *(void *)(v11 + 8) = a1;
      a1[2] = v9;
      uint64_t v56 = 0;
    }
    return sub_16A560(&v54);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_21E8C(v50, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    *(_OWORD *)int v50 = *a4;
    uint64_t v51 = *((void *)a4 + 2);
  }
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    CFIndex v16 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v16);
      CFStringRef v18 = ValueAtIndex;
      if (a3 < 2 || (CFTypeID v19 = CFGetTypeID(ValueAtIndex), CFArrayGetTypeID() != v19) && CFDictionaryGetTypeID() != v19)
      {
        if (v51 >= 0) {
          size_t v37 = HIBYTE(v51);
        }
        else {
          size_t v37 = (size_t)v50[1];
        }
        sub_5E220((uint64_t)&v63, v37 + 2);
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v38 = &v63;
        }
        else {
          std::string::size_type v38 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if (v37)
        {
          if (v51 >= 0) {
            uint64_t v39 = v50;
          }
          else {
            uint64_t v39 = (void **)v50[0];
          }
          memmove(v38, v39, v37);
        }
        strcpy((char *)v38 + v37, "- ");
        sub_168C44(&v62, v18);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v40 = &v62;
        }
        else {
          std::string::size_type v40 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v62.__r_.__value_.__l.__size_;
        }
        std::string::append(&v63, (const std::string::value_type *)v40, size);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        uint64_t v42 = sub_16AC60((uint64_t)&v63);
        v42[1] = a1;
        uint64_t v43 = *a1;
        *uint64_t v42 = *a1;
        *(void *)(v43 + 8) = v42;
        *a1 = (uint64_t)v42;
        ++a1[2];
        goto LABEL_78;
      }
      if (v51 >= 0) {
        size_t v20 = HIBYTE(v51);
      }
      else {
        size_t v20 = (size_t)v50[1];
      }
      sub_5E220((uint64_t)&v61, v20 + 7);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v21 = &v61;
      }
      else {
        char v21 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if (v20)
      {
        if (v51 >= 0) {
          uint64_t v22 = v50;
        }
        else {
          uint64_t v22 = (void **)v50[0];
        }
        memmove(v21, v22, v20);
      }
      strcpy((char *)v21 + v20, "- item ");
      std::to_string(&v60, v16);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v60;
      }
      else {
        uint64_t v23 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v60.__r_.__value_.__l.__size_;
      }
      int v25 = std::string::append(&v61, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v27 = std::string::append(&v62, ":", 1uLL);
      std::string v63 = *v27;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      size_t v28 = sub_16AC60((uint64_t)&v63);
      v28[1] = a1;
      uint64_t v29 = *a1;
      *size_t v28 = *a1;
      *(void *)(v29 + 8) = v28;
      *a1 = (uint64_t)v28;
      ++a1[2];
      unint64_t v30 = (std::string *)sub_21C8C(&v62, "  ");
      if (v51 >= 0) {
        int v31 = v50;
      }
      else {
        int v31 = (void **)v50[0];
      }
      if (v51 >= 0) {
        std::string::size_type v32 = HIBYTE(v51);
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v50[1];
      }
      long long v33 = std::string::append(v30, (const std::string::value_type *)v31, v32);
      size_t v35 = (void *)v33->__r_.__value_.__r.__words[0];
      size_t v34 = (void *)v33->__r_.__value_.__l.__size_;
      LODWORD(v61.__r_.__value_.__l.__data_) = v33->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v61.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v33->__r_.__value_.__r.__words[2] + 3);
      int v36 = SHIBYTE(v33->__r_.__value_.__r.__words[2]);
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v62.__r_.__value_.__l.__data_);
        if (v36 < 0)
        {
LABEL_73:
          sub_21E8C(__p, v35, (unint64_t)v34);
          goto LABEL_74;
        }
      }
      else if (v36 < 0)
      {
        goto LABEL_73;
      }
      __p[0] = v35;
      __p[1] = v34;
      *(_DWORD *)std::string v58 = v61.__r_.__value_.__l.__data_;
      *(_DWORD *)&v58[3] = *(_DWORD *)((char *)v61.__r_.__value_.__r.__words + 3);
      char v59 = v36;
LABEL_74:
      sub_16ACD0(&v62, v18, (a3 - 1), __p);
      if (v59 < 0) {
        operator delete(__p[0]);
      }
      sub_16B388(a1, a1, v62.__r_.__value_.__l.__size_, (uint64_t)&v62);
      sub_16A560(&v62);
      if (v36 < 0) {
        operator delete(v35);
      }
LABEL_78:
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (Count == ++v16) {
        goto LABEL_94;
      }
    }
  }
  if (v51 >= 0) {
    size_t v44 = HIBYTE(v51);
  }
  else {
    size_t v44 = (size_t)v50[1];
  }
  std::string::size_type v45 = &v63;
  sub_5E220((uint64_t)&v63, v44 + 17);
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v45 = (std::string *)v63.__r_.__value_.__r.__words[0];
  }
  if (v44)
  {
    if (v51 >= 0) {
      BOOL v46 = v50;
    }
    else {
      BOOL v46 = (void **)v50[0];
    }
    memmove(v45, v46, v44);
  }
  strcpy((char *)v45 + v44, "- < empty array >");
  uint64_t v47 = sub_16AC60((uint64_t)&v63);
  v47[1] = a1;
  uint64_t v48 = *a1;
  *uint64_t v47 = *a1;
  *(void *)(v48 + 8) = v47;
  *a1 = (uint64_t)v47;
  ++a1[2];
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
LABEL_94:
  if (SHIBYTE(v51) < 0)
  {
    uint64_t v14 = v50[0];
    goto LABEL_96;
  }
  return sub_16A560(&v54);
}

void sub_16B270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v46 - 105) < 0) {
    operator delete(*(void **)(v46 - 128));
  }
  sub_16A560(v45);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_16A560(&a25);
  _Unwind_Resume(a1);
}

void *sub_16B388(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    size_t v7 = result;
    uint64_t result = sub_16B478(0, a3 + 16);
    CFTypeID v8 = result;
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = 1;
    if (v9 != a4)
    {
      uint64_t v11 = (uint64_t)result;
      do
      {
        uint64_t result = sub_16B478(v11, v9 + 16);
        *(void *)(v11 + 8) = result;
        ++v10;
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v11 = (uint64_t)result;
      }
      while (v9 != a4);
    }
    uint64_t v12 = *a2;
    *(void *)(v12 + 8) = v8;
    void *v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }
  return result;
}

void sub_16B444(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void **)*v1;
    sub_16A5C0(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_16B464(_Unwind_Exception *a1)
{
}

void *sub_16B478(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = operator new(0x28uLL);
  void *v4 = a1;
  v4[1] = 0;
  char v5 = v4 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_21E8C(v5, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)char v5 = *(_OWORD *)a2;
    v4[4] = *(void *)(a2 + 16);
  }
  return v4;
}

void sub_16B4DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_16B4F0(uint64_t a1, CFArrayRef *a2)
{
  if (*a2) {
    unsigned int Count = CFArrayGetCount(*a2);
  }
  else {
    unsigned int Count = 0;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_15BD60((void **)a1, Count);
  if (Count)
  {
    for (unsigned int i = 0; i != Count; ++i)
    {
      int v20 = 0;
      if (!sub_1D1B30(a2, i, &v20))
      {
        size_t v17 = (os_log_t *)sub_32A48(13);
        CFStringRef v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v22 = "StandardUtilities.cpp";
          __int16 v23 = 1024;
          int v24 = 682;
          __int16 v25 = 1024;
          unsigned int v26 = i;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"GetUInt32 failed for index %u of input CACFArray\"", buf, 0x18u);
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "GetUInt32 failed for index %u of input CACFArray");
      }
      size_t v7 = *(_DWORD **)(a1 + 8);
      unint64_t v6 = *(void *)(a1 + 16);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = *(_DWORD **)a1;
        uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v12 = v6 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_46BF4(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        long long v15 = (_DWORD *)(v13 + 4 * v10);
        *long long v15 = v20;
        CFTypeID v8 = v15 + 1;
        while (v7 != v9)
        {
          int v16 = *--v7;
          *--long long v15 = v16;
        }
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v8;
        *(void *)(a1 + 16) = v13 + 4 * v14;
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *size_t v7 = v20;
        CFTypeID v8 = v7 + 1;
      }
      *(void *)(a1 + 8) = v8;
    }
  }
}

void sub_16B71C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_16B754(uint64_t *a1, std::string *__str, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int64_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    size_t v7 = __str;
  }
  else {
    size_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v8 = a3[23];
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(char **)a3;
  }
  if (v8 >= 0) {
    int64_t v10 = a3[23];
  }
  else {
    int64_t v10 = *((void *)a3 + 1);
  }
  if (v10)
  {
    if ((size & 0x80u) != 0) {
      int64_t size = __str->__r_.__value_.__l.__size_;
    }
    if (size >= v10)
    {
      uint64_t v43 = (char *)v7 + size;
      int v44 = *v9;
      std::string::size_type v45 = v7;
      do
      {
        int64_t v46 = size - v10;
        if (v46 == -1) {
          break;
        }
        uint64_t v47 = (char *)memchr(v45, v44, v46 + 1);
        if (!v47) {
          break;
        }
        uint64_t v48 = v47;
        if (!memcmp(v47, v9, v10))
        {
          std::string::size_type v11 = 0;
          if (v48 != v43)
          {
            int64_t v17 = v48 - (char *)v7;
            if (v17 != -1) {
              goto LABEL_21;
            }
          }
          goto LABEL_15;
        }
        std::string::size_type v45 = (std::string *)(v48 + 1);
        int64_t size = v43 - (v48 + 1);
      }
      while (size >= v10);
    }
    std::string::size_type v11 = 0;
  }
  else
  {
    int64_t v17 = 0;
LABEL_21:
    std::string::size_type v11 = 0;
    CFStringRef v18 = a1 + 2;
    do
    {
      std::string::basic_string(&v59, __str, v11, v17 - v11, (std::allocator<char> *)&v60);
      unint64_t v20 = a1[1];
      unint64_t v19 = a1[2];
      if (v20 >= v19)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 3);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a1) >> 3);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v23;
        }
        size_t v64 = v18;
        if (v25) {
          unint64_t v25 = (unint64_t)sub_21974(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unint64_t v27 = v25 + 24 * v22;
        unint64_t v60 = v25;
        unint64_t v61 = v27;
        unint64_t v63 = v25 + 24 * v26;
        long long v28 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        *(void *)(v27 + 16) = *((void *)&v59.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v27 = v28;
        memset(&v59, 0, sizeof(v59));
        unint64_t v62 = v27 + 24;
        sub_20D9C(a1, &v60);
        uint64_t v29 = a1[1];
        sub_20E50((uint64_t)&v60);
        int v30 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
        a1[1] = v29;
        if (v30 < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        *(void *)(v20 + 16) = *((void *)&v59.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v20 = v21;
        a1[1] = v20 + 24;
      }
      int v31 = a3[23];
      std::string::size_type v32 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v32 & 0x80u) == 0) {
        long long v33 = __str;
      }
      else {
        long long v33 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if ((v32 & 0x80u) != 0) {
        std::string::size_type v32 = __str->__r_.__value_.__l.__size_;
      }
      int64_t v34 = v31 >= 0 ? a3[23] : *((void *)a3 + 1);
      std::string::size_type v11 = v34 + v17;
      size_t v35 = v31 >= 0 ? a3 : *(char **)a3;
      if (v32 < v11) {
        break;
      }
      v17 += v34;
      if (v34)
      {
        int v36 = (char *)v33 + v11;
        size_t v37 = (char *)v33 + v32;
        int64_t v38 = v32 - v11;
        if (v38 >= v34)
        {
          int v39 = *v35;
          while (1)
          {
            int64_t v40 = v38 - v34;
            if (v40 == -1) {
              break;
            }
            size_t v41 = (char *)memchr(v36, v39, v40 + 1);
            if (!v41) {
              break;
            }
            uint64_t v42 = v41;
            if (!memcmp(v41, v35, v34))
            {
              if (v42 == v37) {
                goto LABEL_15;
              }
              int64_t v17 = v42 - (char *)v33;
              CFStringRef v18 = a1 + 2;
              goto LABEL_57;
            }
            int v36 = v42 + 1;
            int64_t v38 = v37 - (v42 + 1);
            if (v38 < v34) {
              goto LABEL_15;
            }
          }
        }
        break;
      }
LABEL_57:
      ;
    }
    while (v17 != -1);
  }
LABEL_15:
  std::string::basic_string(&v59, __str, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v60);
  std::string::size_type v12 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  char v13 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v12 = v59.__r_.__value_.__l.__size_;
  }
  if (v12)
  {
    std::string::basic_string(&v58, __str, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v60);
    unint64_t v14 = a1[2];
    unint64_t v15 = a1[1];
    if (v15 >= v14)
    {
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *a1) >> 3);
      unint64_t v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a1) >> 3);
      if (2 * v51 > v50) {
        unint64_t v50 = 2 * v51;
      }
      if (v51 >= 0x555555555555555) {
        unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v52 = v50;
      }
      size_t v64 = a1 + 2;
      if (v52) {
        unint64_t v52 = (unint64_t)sub_21974(v52);
      }
      else {
        uint64_t v53 = 0;
      }
      unint64_t v54 = v52 + 24 * v49;
      unint64_t v60 = v52;
      unint64_t v61 = v54;
      unint64_t v63 = v52 + 24 * v53;
      long long v55 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(void *)(v54 + 16) = *((void *)&v58.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v54 = v55;
      memset(&v58, 0, sizeof(v58));
      unint64_t v62 = v54 + 24;
      sub_20D9C(a1, &v60);
      uint64_t v56 = a1[1];
      sub_20E50((uint64_t)&v60);
      int v57 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
      a1[1] = v56;
      if (v57 < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v16 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(void *)(v15 + 16) = *((void *)&v58.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v15 = v16;
      a1[1] = v15 + 24;
    }
    char v13 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  }
  if (v13 < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_16BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_217F8((void ***)&__p);
  _Unwind_Resume(a1);
}

void *sub_16BBF0(void *a1, unsigned int a2)
{
  if (a2) {
    return (void *)sub_2417C(a1, a2);
  }
  else {
    return sub_21C8C(a1, "ok");
  }
}

std::string *sub_16BC04(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a1, 0x60uLL);
  std::to_string(&v58, *(_DWORD *)(a2 + 32));
  CFStringRef v4 = std::string::insert(&v58, 0, "[ ", 2uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = std::string::append(&v59, "/", 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v57, *(double *)a2);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v57;
  }
  else {
    int v8 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
  }
  int64_t v10 = std::string::append(&v60, (const std::string::value_type *)v8, size);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v12 = std::string::append(&v64, "/", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v56, *(_DWORD *)(a2 + 28));
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &v56;
  }
  else {
    unint64_t v14 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v56.__r_.__value_.__l.__size_;
  }
  long long v16 = std::string::append(&v61, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t v63 = v16->__r_.__value_.__r.__words[2];
  long long v62 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    CFStringRef v18 = (const std::string::value_type *)&v62;
  }
  else {
    CFStringRef v18 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v19 = HIBYTE(v63);
  }
  else {
    std::string::size_type v19 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v18, v19);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  double v20 = *(double *)(a2 + 40);
  double v21 = *(double *)(a2 + 48);
  if (*(double *)a2 != v21 || v21 != v20)
  {
    std::to_string(&v59, v20);
    unint64_t v22 = std::string::insert(&v59, 0, " (", 2uLL);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    unint64_t v24 = std::string::append(&v60, "-", 1uLL);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, *(double *)(a2 + 48));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v58;
    }
    else {
      uint64_t v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v58.__r_.__value_.__l.__size_;
    }
    long long v28 = std::string::append(&v64, (const std::string::value_type *)v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    int v30 = std::string::append(&v61, ")", 1uLL);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t v63 = v30->__r_.__value_.__r.__words[2];
    long long v62 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0) {
      std::string::size_type v32 = (const std::string::value_type *)&v62;
    }
    else {
      std::string::size_type v32 = (const std::string::value_type *)v62;
    }
    if (v63 >= 0) {
      std::string::size_type v33 = HIBYTE(v63);
    }
    else {
      std::string::size_type v33 = *((void *)&v62 + 1);
    }
    std::string::append(a1, v32, v33);
    if (SHIBYTE(v63) < 0) {
      operator delete((void *)v62);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  unsigned int v34 = *(_DWORD *)(a2 + 8);
  if (v34 != 1819304813)
  {
    sub_2417C(&v61, v34);
    size_t v35 = std::string::insert(&v61, 0, "; fmt: ", 7uLL);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    int64_t v63 = v35->__r_.__value_.__r.__words[2];
    long long v62 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0) {
      size_t v37 = (const std::string::value_type *)&v62;
    }
    else {
      size_t v37 = (const std::string::value_type *)v62;
    }
    if (v63 >= 0) {
      std::string::size_type v38 = HIBYTE(v63);
    }
    else {
      std::string::size_type v38 = *((void *)&v62 + 1);
    }
    std::string::append(a1, v37, v38);
    if (SHIBYTE(v63) < 0) {
      operator delete((void *)v62);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
  snprintf((char *)&v64, 0x13uLL, "%p", (const void *)*(unsigned int *)(a2 + 12));
  sub_21C8C(&v61, (char *)&v64);
  int v39 = std::string::insert(&v61, 0, "; flags: ", 9uLL);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  int64_t v63 = v39->__r_.__value_.__r.__words[2];
  long long v62 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    size_t v41 = (const std::string::value_type *)&v62;
  }
  else {
    size_t v41 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v42 = HIBYTE(v63);
  }
  else {
    std::string::size_type v42 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v41, v42);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  std::to_string(&v61, *(_DWORD *)(a2 + 16));
  uint64_t v43 = std::string::insert(&v61, 0, "; bpp: ", 7uLL);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  int64_t v63 = v43->__r_.__value_.__r.__words[2];
  long long v62 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    std::string::size_type v45 = (const std::string::value_type *)&v62;
  }
  else {
    std::string::size_type v45 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v46 = HIBYTE(v63);
  }
  else {
    std::string::size_type v46 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v45, v46);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  std::to_string(&v61, *(_DWORD *)(a2 + 20));
  uint64_t v47 = std::string::insert(&v61, 0, "; fpp: ", 7uLL);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  int64_t v63 = v47->__r_.__value_.__r.__words[2];
  long long v62 = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    unint64_t v49 = (const std::string::value_type *)&v62;
  }
  else {
    unint64_t v49 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v50 = HIBYTE(v63);
  }
  else {
    std::string::size_type v50 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v49, v50);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  std::to_string(&v61, *(_DWORD *)(a2 + 24));
  unint64_t v51 = std::string::insert(&v61, 0, "; Bpf: ", 7uLL);
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  int64_t v63 = v51->__r_.__value_.__r.__words[2];
  long long v62 = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    uint64_t v53 = (const std::string::value_type *)&v62;
  }
  else {
    uint64_t v53 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v54 = HIBYTE(v63);
  }
  else {
    std::string::size_type v54 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v53, v54);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_16C288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v48 - 89) < 0) {
    operator delete(*(void **)(v48 - 112));
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v48 - 57) < 0) {
    operator delete(*(void **)(v48 - 80));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_16C458(void *a1, uint64_t a2)
{
  sub_3D04((uint64_t)&v23);
  int v3 = *(_DWORD *)((char *)v24 + *(void *)(v23 - 24));
  sub_256E4(&v23, (uint64_t)"[", 1);
  *(_DWORD *)((char *)v24 + *(void *)(v23 - 24)) |= v3 | 8;
  sub_256E4(&v23, (uint64_t)"tag: ", 5);
  CFStringRef v4 = (void *)std::ostream::operator<<();
  sub_256E4(v4, (uint64_t)"; ", 2);
  sub_256E4(&v23, (uint64_t)"bitmap: ", 8);
  long long v5 = (void *)std::ostream::operator<<();
  sub_256E4(v5, (uint64_t)"; ", 2);
  *(_DWORD *)((char *)v24 + *(void *)(v23 - 24)) |= v3;
  sub_256E4(&v23, (uint64_t)"descs: [", 8);
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v6 = 0;
    uint64_t v8 = a2 + 28;
    do
    {
      sub_3D04((uint64_t)&v26);
      int v9 = *(_DWORD *)((char *)v27 + *(void *)(v26 - 24));
      sub_256E4(&v26, (uint64_t)"[", 1);
      sub_256E4(&v26, (uint64_t)"label: ", 7);
      int64_t v10 = (void *)std::ostream::operator<<();
      sub_256E4(v10, (uint64_t)"; ", 2);
      *(_DWORD *)((char *)v27 + *(void *)(v26 - 24)) |= v9 | 8;
      sub_256E4(&v26, (uint64_t)"flags: ", 7);
      long long v11 = (void *)std::ostream::operator<<();
      sub_256E4(v11, (uint64_t)"; ", 2);
      *(_DWORD *)((char *)v27 + *(void *)(v26 - 24)) |= v9;
      sub_256E4(&v26, (uint64_t)"coords: (", 9);
      std::string::size_type v12 = (void *)std::ostream::operator<<();
      sub_256E4(v12, (uint64_t)",", 1);
      long long v13 = (void *)std::ostream::operator<<();
      sub_256E4(v13, (uint64_t)",", 1);
      unint64_t v14 = (void *)std::ostream::operator<<();
      sub_256E4(v14, (uint64_t)")", 1);
      sub_256E4(&v26, (uint64_t)"]", 1);
      sub_246E4(v21, (uint64_t)v27);
      uint64_t v26 = v20;
      *(void *)((char *)&v27[-1] + *(void *)(v20 - 24)) = v7;
      if (v28 < 0) {
        operator delete((void *)v27[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v15 = v21;
      }
      else {
        std::string::size_type v15 = (void **)v21[0];
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v16 = v22;
      }
      else {
        uint64_t v16 = (uint64_t)v21[1];
      }
      sub_256E4(&v23, (uint64_t)v15, v16);
      if ((char)v22 < 0) {
        operator delete(v21[0]);
      }
      unsigned int v17 = *(_DWORD *)(a2 + 8);
      if (v6 != v17 - 1)
      {
        sub_256E4(&v23, (uint64_t)"; ", 2);
        unsigned int v17 = *(_DWORD *)(a2 + 8);
      }
      ++v6;
      v8 += 20;
    }
    while (v6 < v17);
  }
  sub_256E4(&v23, (uint64_t)"]; ", 3);
  sub_256E4(&v23, (uint64_t)"]", 1);
  sub_246E4(a1, (uint64_t)v24);
  if (v25 < 0) {
    operator delete((void *)v24[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_16C97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

void sub_16C9C4(uint64_t a1, unsigned int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::string::reserve((std::string *)a1, 0x18uLL);
  sub_2417C(&v25, *a2);
  CFStringRef v4 = std::string::insert(&v25, 0, "[", 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = std::string::append(&v26, "/", 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_2417C(__p, a2[1]);
  if ((v24 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v9 = v24;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  int64_t v10 = std::string::append(&v27, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v12 = std::string::append(&v28, "/", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, a2[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &v22;
  }
  else {
    unint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::append(&v29, (const std::string::value_type *)v14, size);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v18 = std::string::append(&v30, "]", 1uLL);
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
  v31[0] = v18->__r_.__value_.__l.__size_;
  *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  uint64_t v21 = v31[0];
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 15) = *(void *)((char *)v31 + 7);
  *(unsigned char *)(a1 + 23) = v20;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_16CC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v48 - 73) < 0) {
    operator delete(*(void **)(v48 - 96));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 105) < 0) {
    operator delete(*(void **)(v48 - 128));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  _Unwind_Resume(exception_object);
}

void sub_16CD18(void *a1, uint64_t a2)
{
  *a1 = 0;
  sub_D7930(&v4, a2);
  CFDataRef v3 = v4;
  sub_16D024(v5, v4);
  *a1 = v5[0];
  v5[0] = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_16CDA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void *sub_16D024(void *a1, const __CFData *a2)
{
  if (!a2) {
    goto LABEL_10;
  }
  CFPropertyListRef v3 = CFPropertyListCreateWithData(0, a2, 0, 0, 0);
  if (!v3)
  {
    uint64_t result = (void *)CFDictionaryGetTypeID();
    if (!result)
    {
      *a1 = 0;
      return result;
    }
LABEL_10:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  CFDataRef v4 = v3;
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFDictionaryGetTypeID())
  {
    CFRelease(v4);
    goto LABEL_10;
  }

  return sub_22084(a1, v4);
}

void sub_16D0F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_16D108(uint64_t a1, int a2, AudioObjectID inObjectID, uint64_t a4)
{
  *(unsigned char *)a1 = a2;
  *(_DWORD *)(a1 + 4) = inObjectID;
  if (a2) {
    int v6 = 1869968496;
  }
  else {
    int v6 = 1768845428;
  }
  int v28 = 1937077093;
  int v29 = v6;
  *(void *)outDataSize = 0;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(inObjectID, (const AudioObjectPropertyAddress *)&v28, 0, 0, &outDataSize[1]);
  if (PropertyDataSize)
  {
    unint64_t v14 = (os_log_t *)sub_32A48(13);
    std::string::size_type v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      std::string::size_type v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1057;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Attempt to get stream usage data size failed.\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = PropertyDataSize;
  }
  uint64_t v8 = outDataSize[1];
  if (!outDataSize[1])
  {
    long long v17 = (os_log_t *)sub_32A48(13);
    CFStringRef v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      std::string::size_type v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1058;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a stream usage size of 0.\"", buf, 0x12u);
    }
    std::string::size_type v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v19, "The HAL returned a stream usage size of 0.");
  }
  *(_DWORD *)(a1 + 8) = outDataSize[1];
  AudioObjectID v9 = *(_DWORD *)(a1 + 4);
  outDataSize[1] = v8;
  int64_t v10 = malloc_type_malloc(16 * v8, 0x7C51E058uLL);
  long long v11 = v10;
  if (!v10)
  {
    char v20 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v21 = std::bad_alloc::bad_alloc(v20);
  }
  *int64_t v10 = a4;
  int v28 = 1937077093;
  int v29 = v6;
  outDataSize[0] = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(v9, (const AudioObjectPropertyAddress *)&v28, 0, 0, &outDataSize[1], v10);
  if (PropertyData)
  {
    std::string v22 = (os_log_t *)sub_32A48(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      std::string::size_type v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1071;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Attempt to get stream usage failed.\"", buf, 0x12u);
    }
    unsigned __int8 v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned __int8 v24 = &off_6414D8;
    void v24[2] = PropertyData;
  }
  if (outDataSize[1] != v8)
  {
    std::string v25 = (os_log_t *)sub_32A48(13);
    std::string v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      std::string::size_type v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1072;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a different stream usage size than that provided.\"", buf, 0x12u);
    }
    std::string v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "The HAL returned a different stream usage size than that provided.");
  }
  *(void *)(a1 + 16) = v11;
  return a1;
}

void sub_16D51C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_16D560(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    AudioObjectPropertyScope v1 = 1869968496;
  }
  else {
    AudioObjectPropertyScope v1 = 1768845428;
  }
  inAddress.mSelector = 1937077093;
  inAddress.mScope = v1;
  inAddress.mElement = 0;
  uint64_t v2 = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 4), &inAddress, 0, 0, *(_DWORD *)(a1 + 8), *(const void **)(a1 + 16));
  if (v2)
  {
    CFPropertyListRef v3 = (os_log_t *)sub_32A48(13);
    CFDataRef v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v2);
        if (v8 >= 0) {
          CFTypeID v5 = __p;
        }
        else {
          CFTypeID v5 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        long long v11 = "StandardUtilities.cpp";
        __int16 v12 = 1024;
        int v13 = 1096;
        __int16 v14 = 2080;
        std::string::size_type v15 = v5;
        __int16 v16 = 1024;
        int v17 = v2;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectSetPropertyData(kAudioDevicePropertyIOProcStreamUsage) returned '%s' (%d).", buf, 0x22u);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_16D6C0(void *a1, uint64_t a2)
{
  sub_3D04((uint64_t)&v7);
  sub_256E4(&v7, (uint64_t)"mNumberStreams: ", 16);
  CFDataRef v4 = (void *)std::ostream::operator<<();
  sub_256E4(v4, (uint64_t)"; ", 2);
  sub_256E4(&v7, (uint64_t)"mStreamIsOn: [", 14);
  if (*(_DWORD *)(*(void *)(a2 + 16) + 8))
  {
    unint64_t v5 = 0;
    do
    {
      std::ostream::operator<<();
      ++v5;
    }
    while (v5 < *(unsigned int *)(*(void *)(a2 + 16) + 8));
  }
  sub_256E4(&v7, (uint64_t)"]", 1);
  sub_246E4(a1, (uint64_t)v8);
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_16D878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6B798((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_16D890(io_registry_entry_t a1, char *a2)
{
  sub_21C8C(__p, a2);
  if ((v19 & 0x80u) == 0) {
    CFPropertyListRef v3 = __p;
  }
  else {
    CFPropertyListRef v3 = *(const UInt8 **)__p;
  }
  if (v3)
  {
    if ((v19 & 0x80u) == 0) {
      CFIndex v4 = v19;
    }
    else {
      CFIndex v4 = *(void *)&__p[8];
    }
    CFDataRef v5 = (const __CFData *)CFStringCreateWithBytes(0, v3, v4, 0x8000100u, 0);
    CFDataRef theData = v5;
    if (!v5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (a1) {
      goto LABEL_10;
    }
  }
  else
  {
    CFDataRef v5 = 0;
    CFDataRef theData = 0;
    if (a1)
    {
LABEL_10:
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a1, (CFStringRef)v5, 0, 0);
      goto LABEL_13;
    }
  }
  CFTypeRef CFProperty = 0;
LABEL_13:
  CFTypeRef v16 = CFProperty;
  if (v5) {
    CFRelease(v5);
  }
  if ((char)v19 < 0)
  {
    operator delete(*(void **)__p);
    if (CFProperty) {
      goto LABEL_17;
    }
    return 0;
  }
  if (!CFProperty) {
    return 0;
  }
LABEL_17:
  CFTypeID v7 = CFGetTypeID(CFProperty);
  if (v7 == CFDataGetTypeID())
  {
    sub_16DC14(&theData, &v16);
    if (!theData)
    {
      long long v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
    }
    if (CFDataGetLength(theData) != 4)
    {
      __int16 v12 = (os_log_t *)sub_32A48(13);
      int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "StandardUtilities.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 1331;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
      }
      __int16 v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "Precondition failure.");
    }
    if (!theData)
    {
      std::string::size_type v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
    }
    BOOL v8 = *(_DWORD *)CFDataGetBytePtr(theData) != 0;
    if (theData) {
      CFRelease(theData);
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  CFRelease(CFProperty);
  return v8;
}

void sub_16DB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void *sub_16DC14(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFDataGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_66F3C(exception);
    }
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }
  else
  {
    CFTypeRef v5 = 0;
  }

  return sub_1534E8(a1, v5);
}

void sub_16DCBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_16DCD8(void *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    int v6 = (os_log_t *)sub_32A48(13);
    CFTypeID v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v13 = 1024;
      int v14 = 47;
      __int16 v15 = 2080;
      CFTypeRef v16 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-cpms-bgd_1s", 19, 0x8000100u, 0);
  *(void *)buf = v3;
  if (!v3)
  {
    char v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_1534E8(&cf, CFProperty);
  if (!cf)
  {
    int64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  sub_16E0A8(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  return IOObjectRelease(v2);
}

void sub_16DF0C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, int a13, __int16 a14, __int16 a15, const char *a16)
{
  __cxa_free_exception(v17);
  if (a2 == 1)
  {
    char v20 = __cxa_begin_catch(a1);
    uint64_t v21 = (os_log_t *)sub_32A48(17);
    std::string v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "EDTUtilsImpl.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 74;
      WORD1(a12) = 2080;
      *(void *)((char *)&a12 + 4) = v23;
      WORD6(a12) = 2080;
      a15 = 2080;
      a16 = "speaker-cpms-bgd_1s";
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&buf,
        0x30u);
    }
    *CFTypeRef v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x16DDACLL);
  }
  _Unwind_Resume(a1);
}

void sub_16E090()
{
}

void sub_16E098()
{
}

size_t sub_16E0A8(void *a1, const void *a2)
{
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a2);
  size_t result = CFDataGetLength((CFDataRef)a2);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (result)
  {
    size_t v7 = result;
    sub_D7CE8(a1, result);
    BOOL v8 = (char *)a1[1];
    size_t result = (size_t)memmove(v8, BytePtr, v7);
    a1[1] = &v8[v7];
  }
  return result;
}

void sub_16E168(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_16E194(void *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    int v6 = (os_log_t *)sub_32A48(13);
    size_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v13 = 1024;
      int v14 = 47;
      __int16 v15 = 2080;
      CFTypeRef v16 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-cpms-bgd_100ms", 22, 0x8000100u, 0);
  *(void *)buf = v3;
  if (!v3)
  {
    char v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_1534E8(&cf, CFProperty);
  if (!cf)
  {
    int64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  sub_16E0A8(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  return IOObjectRelease(v2);
}

void sub_16E3C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, int a13, __int16 a14, __int16 a15, const char *a16)
{
  __cxa_free_exception(v17);
  if (a2 == 1)
  {
    char v20 = __cxa_begin_catch(a1);
    uint64_t v21 = (os_log_t *)sub_32A48(17);
    std::string v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "EDTUtilsImpl.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 74;
      WORD1(a12) = 2080;
      *(void *)((char *)&a12 + 4) = v23;
      WORD6(a12) = 2080;
      a15 = 2080;
      a16 = "speaker-cpms-bgd_100ms";
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&buf,
        0x30u);
    }
    *CFTypeRef v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x16E268);
  }
  _Unwind_Resume(a1);
}

void sub_16E54C()
{
}

void sub_16E554()
{
}

uint64_t sub_16E564(void *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    int v6 = (os_log_t *)sub_32A48(13);
    size_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v13 = 1024;
      int v14 = 47;
      __int16 v15 = 2080;
      CFTypeRef v16 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-cpms-bgd_inst", 21, 0x8000100u, 0);
  *(void *)buf = v3;
  if (!v3)
  {
    char v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_1534E8(&cf, CFProperty);
  if (!cf)
  {
    int64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  sub_16E0A8(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  return IOObjectRelease(v2);
}

void sub_16E798(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, int a13, __int16 a14, __int16 a15, char *a16)
{
  __cxa_free_exception(v17);
  if (a2 == 1)
  {
    char v20 = __cxa_begin_catch(a1);
    uint64_t v21 = (os_log_t *)sub_32A48(17);
    std::string v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "EDTUtilsImpl.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 74;
      WORD1(a12) = 2080;
      *(void *)((char *)&a12 + 4) = v23;
      WORD6(a12) = 2080;
      a15 = 2080;
      a16 = "speaker-cpms-bgd_inst";
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&buf,
        0x30u);
    }
    *CFTypeRef v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x16E638);
  }
  _Unwind_Resume(a1);
}

void sub_16E91C()
{
}

void sub_16E924()
{
}

void sub_16E934(const __CFString *a1, _DWORD *a2, uint64_t **a3)
{
  if (*a2) {
    BOOL v4 = a2[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    sub_20C54((uint64_t)v15, a1);
    uint64_t v6 = *(void *)a2;
    size_t v7 = operator new(8uLL);
    *size_t v7 = v6;
    if (SHIBYTE(v16) < 0)
    {
      sub_21E8C(__dst, v15[0], (unint64_t)v15[1]);
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)v15;
      uint64_t v20 = v16;
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v22 = 0;
    sub_46B38(__p, v7, (uint64_t)(v7 + 1), 2uLL);
    BOOL v8 = (char *)a3[1];
    char v9 = (char **)(a3 + 1);
    for (unsigned int i = (char **)(a3 + 1); v8; v8 = v9[1])
    {
      while (1)
      {
        char v9 = (char **)v8;
        long long v11 = v8 + 32;
        if ((sub_15E8C(__dst, (void **)v8 + 4) & 0x80) == 0) {
          break;
        }
        BOOL v8 = *v9;
        unsigned int i = v9;
        if (!*v9) {
          goto LABEL_14;
        }
      }
      if ((sub_15E8C(v11, __dst) & 0x80) == 0) {
        goto LABEL_20;
      }
      unsigned int i = v9 + 1;
    }
LABEL_14:
    __int16 v12 = (char *)operator new(0x50uLL);
    v17[0] = v12;
    v17[1] = a3 + 1;
    char v18 = 0;
    __int16 v13 = v12 + 32;
    if (SHIBYTE(v20) < 0)
    {
      sub_21E8C(v13, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)__int16 v13 = *(_OWORD *)__dst;
      *((void *)v12 + 6) = v20;
    }
    *(_OWORD *)(v12 + 56) = *(_OWORD *)__p;
    *((void *)v12 + 9) = v22;
    __p[1] = 0;
    uint64_t v22 = 0;
    __p[0] = 0;
    char v18 = 1;
    *(void *)__int16 v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = v9;
    *unsigned int i = v12;
    int v14 = (uint64_t *)**a3;
    if (v14)
    {
      *a3 = v14;
      __int16 v12 = *i;
    }
    sub_46D00(a3[1], (uint64_t *)v12);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
    v17[0] = 0;
    sub_16F0B0((uint64_t)v17);
LABEL_20:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(__dst[0]);
    }
    operator delete(v7);
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_16EB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, long long buf, long long a19)
{
  sub_16F0B0((uint64_t)&a15);
  sub_16F06C((uint64_t)&buf);
  operator delete(v19);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    unsigned __int8 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "StandardUtilities.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1318;
      WORD1(a19) = 2080;
      *(void *)((char *)&a19 + 4) = v25;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PV_InsertCPMSEntry exception '%s'", (uint8_t *)&buf, 0x1Cu);
    }
    __cxa_end_catch();
    JUMPOUT(0x16EB1CLL);
  }
  _Unwind_Resume(a1);
}

void sub_16ECB8(CFDictionaryRef *a1, void *a2)
{
  int64x2_t v22 = 0uLL;
  unint64_t v23 = 0;
  sub_162D4(&v22, a2[2]);
  uint64_t v6 = (void *)*a2;
  BOOL v4 = a2 + 1;
  CFTypeRef v5 = v6;
  if (v6 != v4)
  {
    size_t v7 = (CFStringRef *)v22.i64[1];
    do
    {
      if ((unint64_t)v7 >= v23)
      {
        uint64_t v8 = ((uint64_t)v7 - v22.i64[0]) >> 4;
        if ((unint64_t)(v8 + 1) >> 60) {
          sub_60548();
        }
        unint64_t v9 = (uint64_t)(v23 - v22.i64[0]) >> 3;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if (v23 - v22.i64[0] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        std::string v27 = &v23;
        if (v10) {
          unint64_t v10 = (unint64_t)sub_10724(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        unsigned __int8 v24 = (int64x2_t *)v10;
        v25.i64[0] = v10 + 16 * v8;
        v25.i64[1] = v25.i64[0];
        unint64_t v26 = v10 + 16 * v11;
        sub_16EF84((CFStringRef *)v25.i64[0], (const UInt8 *)v5 + 32, (int **)v5 + 7);
        uint64_t v12 = v25.i64[0];
        size_t v7 = (CFStringRef *)(v25.i64[1] + 16);
        v25.i64[1] += 16;
        __int16 v13 = (void *)v22.i64[1];
        int v14 = (void *)v22.i64[0];
        if (v22.i64[1] == v22.i64[0])
        {
          int64x2_t v16 = vdupq_n_s64(v22.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v15 = *(v13 - 2);
            v13 -= 2;
            *(void *)(v12 - 16) = v15;
            v12 -= 16;
            void *v13 = 0;
            *(void *)(v12 + 8) = v13[1];
            v13[1] = 0;
          }
          while (v13 != v14);
          int64x2_t v16 = v22;
          size_t v7 = (CFStringRef *)v25.i64[1];
        }
        v22.i64[0] = v12;
        v22.i64[1] = (uint64_t)v7;
        int64x2_t v25 = v16;
        unint64_t v17 = v23;
        unint64_t v23 = v26;
        unint64_t v26 = v17;
        unsigned __int8 v24 = (int64x2_t *)v16.i64[0];
        sub_16358((uint64_t)&v24);
      }
      else
      {
        sub_16EF84(v7, (const UInt8 *)v5 + 32, (int **)v5 + 7);
        v7 += 2;
      }
      v22.i64[1] = (uint64_t)v7;
      char v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          unsigned __int8 v19 = v18;
          char v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unsigned __int8 v19 = (void *)v5[2];
          BOOL v20 = *v19 == (void)v5;
          CFTypeRef v5 = v19;
        }
        while (!v20);
      }
      CFTypeRef v5 = v19;
    }
    while (v19 != v4);
  }
  CFDictionaryRef v21 = sub_4D69C((void ***)&v22);
  unsigned __int8 v24 = &v22;
  sub_14F84((void ***)&v24);
  *a1 = v21;
}

void sub_16EE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_14F84(&a13);
  _Unwind_Resume(a1);
}

void sub_16EED8(void *a1)
{
  if (a1)
  {
    sub_16EED8(*a1);
    sub_16EED8(a1[1]);
    sub_16EF2C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_16EF2C(uint64_t a1)
{
  io_registry_entry_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    CFStringRef v3 = *(void **)a1;
    operator delete(v3);
  }
}

CFStringRef *sub_16EF84(CFStringRef *a1, const UInt8 *a2, int **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  a1[1] = (CFStringRef)sub_650B4(a3);
  return a1;
}

void sub_16F030(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_16F06C(uint64_t a1)
{
  io_registry_entry_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_16F0B0(uint64_t a1)
{
  AudioObjectPropertyScope v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_16EF2C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_16F108(int a1)
{
  uint64_t result = 1;
  if (a1 > 1886216808)
  {
    if (a1 <= 1886614624)
    {
      if (a1 > 1886545253)
      {
        if (a1 > 1886610287)
        {
          if (a1 == 1886610288 || a1 == 1886613611) {
            return result;
          }
          unsigned __int16 v10 = 28786;
        }
        else
        {
          if (a1 == 1886545254 || a1 == 1886549104) {
            return result;
          }
          unsigned __int16 v10 = 24943;
        }
        int v7 = v10 | 0x70730000;
      }
      else if (a1 > 1886284904)
      {
        if (a1 == 1886284905 || a1 == 1886287212) {
          return result;
        }
        int v7 = 1886545251;
      }
      else
      {
        if (a1 == 1886216809 || a1 == 1886216820) {
          return result;
        }
        int v7 = 1886222185;
      }
    }
    else if (a1 > 1886680174)
    {
      if (a1 > 1886743661)
      {
        if (a1 == 1886743662 || a1 == 1886745449) {
          return result;
        }
        unsigned __int16 v9 = 29551;
      }
      else
      {
        if (a1 == 1886680175 || a1 == 1886742889) {
          return result;
        }
        unsigned __int16 v9 = 26991;
      }
      int v7 = v9 | 0x70750000;
    }
    else
    {
      if (a1 <= 1886675560)
      {
        unsigned int v3 = a1 - 1886614625;
        if (v3 <= 0xF)
        {
          int v4 = 1 << v3;
          int v5 = 49409;
          goto LABEL_12;
        }
        return 0;
      }
      if (a1 == 1886675561 || a1 == 1886675567) {
        return result;
      }
      int v7 = 1886680169;
    }
LABEL_67:
    if (a1 == v7) {
      return result;
    }
    return 0;
  }
  if (a1 > 1885631343)
  {
    if (a1 > 1886152040)
    {
      if (a1 <= 1886154612)
      {
        if (a1 == 1886152041) {
          return result;
        }
        unsigned __int16 v12 = 25967;
      }
      else
      {
        if (a1 == 1886154613 || a1 == 1886155113) {
          return result;
        }
        unsigned __int16 v12 = 29039;
      }
      int v7 = v12 | 0x706C0000;
    }
    else
    {
      if (a1 <= 1885891432)
      {
        if (a1 == 1885631344 || a1 == 1885888867) {
          return result;
        }
        unsigned __int16 v8 = 25709;
      }
      else
      {
        if ((a1 - 1885892674) <= 0x35 && ((1 << (a1 - 66)) & 0x20000100000001) != 0) {
          return result;
        }
        unsigned __int16 v8 = 27497;
      }
      int v7 = v8 | 0x70680000;
    }
    goto LABEL_67;
  }
  if (a1 <= 1885433952)
  {
    if (a1 <= 1885432181)
    {
      if (a1 == 1751409257) {
        return result;
      }
      unsigned __int16 v11 = 25460;
    }
    else
    {
      if (a1 == 1885432182 || a1 == 1885433443) {
        return result;
      }
      unsigned __int16 v11 = 28704;
    }
    int v7 = v11 | 0x70610000;
    goto LABEL_67;
  }
  if (a1 > 1885434466)
  {
    if (a1 == 1885434467 || a1 == 1885496941) {
      return result;
    }
    int v7 = 1885629550;
    goto LABEL_67;
  }
  unsigned int v6 = a1 - 1885433953;
  if (v6 > 0x16) {
    return 0;
  }
  int v4 = 1 << v6;
  int v5 = 4458497;
LABEL_12:
  if ((v4 & v5) == 0) {
    return 0;
  }
  return result;
}

CFStringRef sub_16F4A4(CFStringRef *a1, unsigned int *a2)
{
  int v3 = *a2;
  if ((int)*a2 > 1987011683)
  {
    if (v3 > 1987277416)
    {
      if (v3 > 1987279211)
      {
        switch(v3)
        {
          case 1987279212:
            CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SystemLocal", 30, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          case 1987279218:
            CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SystemRemote", 31, 0x8000100u, 0);
            *a1 = result;
            if (!result) {
              break;
            }
            return result;
          case 1987738234:
            CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_Actuator", 27, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          default:
LABEL_80:
            int v7 = (os_log_t *)sub_32A48(13);
            unsigned __int16 v8 = *v7;
            if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
            {
              sub_2417C(__p, *a2);
              if (v13 >= 0) {
                unsigned __int16 v9 = __p;
              }
              else {
                unsigned __int16 v9 = (void **)__p[0];
              }
              unsigned int v10 = *a2;
              *(_DWORD *)buf = 136315906;
              uint64_t v15 = "StandardUtilities.cpp";
              __int16 v16 = 1024;
              int v17 = 1574;
              __int16 v18 = 2080;
              unsigned __int8 v19 = v9;
              __int16 v20 = 1024;
              unsigned int v21 = v10;
              _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to get an UID from an unknown VirtualAudioDeviceType ([%s]/%u).\"", buf, 0x22u);
              if (v13 < 0) {
                operator delete(__p[0]);
              }
            }
            exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Attempt to get an UID from an unknown VirtualAudioDeviceType ([%s]/%u).");
        }
      }
      else
      {
        switch(v3)
        {
          case 1987277417:
            CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SiriOutput", 29, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          case 1987277665:
            CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SecureSoundAnalysis", 38, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          case 1987277668:
            CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SecureSpeechDetection", 40, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          default:
            goto LABEL_80;
        }
      }
    }
    else if (v3 > 1987276896)
    {
      switch(v3)
      {
        case 1987276897:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SpeakerAlert", 31, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1987276899:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SpatialCapture", 33, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1987276900:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SpeechDetection", 34, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }
    else
    {
      switch(v3)
      {
        case 1987011684:
          return (CFStringRef)sub_7BF54(@"%s_%u", a1, "kVirtualAudioDeviceUID_OnDemand", a2[1]);
        case 1987274852:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SecureSharedDSP", 34, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1987276148:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_SecureMutedTalkerDetection", 45, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }
LABEL_79:
    int v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "Could not construct");
  }
  if (v3 > 1986293107)
  {
    if (v3 > 1986818403)
    {
      switch(v3)
      {
        case 1986818404:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_LDCM", 23, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986881902:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_LPMicInjector", 32, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986884979:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_Music", 24, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }
    else
    {
      switch(v3)
      {
        case 1986293108:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_DedicatedMeasurement", 39, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986552183:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_Hawking", 26, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986817911:
          CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_LowLatency", 29, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }
    goto LABEL_79;
  }
  if (v3 > 1986290543)
  {
    switch(v3)
    {
      case 1986290544:
        CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_DedicatedVideoRecording", 42, 0x8000100u, 0);
        *a1 = result;
        if (result) {
          return result;
        }
        break;
      case 1986291046:
        CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_Default", 26, 0x8000100u, 0);
        *a1 = result;
        if (result) {
          return result;
        }
        break;
      case 1986291305:
        CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_DecoupledInput", 33, 0x8000100u, 0);
        *a1 = result;
        if (result) {
          return result;
        }
        break;
      default:
        goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v3 == 1751409255)
  {
    CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_HapticDebug", 30, 0x8000100u, 0);
    *a1 = result;
    if (result) {
      return result;
    }
    goto LABEL_79;
  }
  if (v3 == 1986095474)
  {
    CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_PerAppAirPlay", 32, 0x8000100u, 0);
    *a1 = result;
    if (result) {
      return result;
    }
    goto LABEL_79;
  }
  if (v3 != 1986224492) {
    goto LABEL_80;
  }
  CFStringRef result = CFStringCreateWithBytes(0, (const UInt8 *)"VirtualAudioDevice_CallContinuity", 33, 0x8000100u, 0);
  *a1 = result;
  if (!result) {
    goto LABEL_79;
  }
  return result;
}

void sub_16FE44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_16FEB4()
{
}

float sub_16FEBC(uint64_t a1, unsigned int a2, double a3, double a4)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  char v4 = 1;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0x3F80000040000000;
  *(_DWORD *)(a1 + 36) = a2;
  if (a2 > 0xF)
  {
    float v6 = 1.0;
    float v5 = 2.0;
  }
  else
  {
    char v4 = byte_4E7CF0[a2];
    float v5 = flt_4E7E38[a2];
    float v6 = flt_4E7E78[a2];
  }
  *(unsigned char *)(a1 + 32) = v4;
  *(float *)&a3 = a3;
  float v7 = a4;
  *(float *)(a1 + 40) = v5;
  *(float *)(a1 + 44) = v6;
  sub_792F0(a1, 0, 0x7FFFFFFF, a3, v7);
  return result;
}

void sub_16FF58(_Unwind_Exception *a1)
{
  io_registry_entry_t v2 = v1;
  sub_463E0(*v2);
  _Unwind_Resume(a1);
}

void sub_16FF70(uint64_t a1, double **a2)
{
  io_registry_entry_t v2 = a2[1];
  if (*a2 == v2)
  {
    int v34 = (os_log_t *)sub_32A48(13);
    size_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      long long v44 = "StandardUtilities.cpp";
      __int16 v45 = 1024;
      int v46 = 1592;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unint64_t v4 = ((char *)v2 - (char *)*a2) >> 4;
  unint64_t v5 = 0x7FFFFFFF / v4;
  float v6 = 0;
  unint64_t v7 = v4 + 1;
  if (v4 == -1)
  {
    unsigned __int16 v8 = 0;
  }
  else
  {
    unsigned __int16 v9 = 0;
    unint64_t v10 = 0;
    int v11 = 0;
    do
    {
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v12 = (v9 - v6) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          sub_60548();
        }
        if ((uint64_t)(v10 - (void)v6) >> 1 > v13) {
          unint64_t v13 = (uint64_t)(v10 - (void)v6) >> 1;
        }
        if (v10 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)sub_46BF4(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        __int16 v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)__int16 v16 = v11;
        unsigned __int16 v8 = v16 + 4;
        while (v9 != v6)
        {
          int v17 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        unint64_t v10 = v14 + 4 * v15;
        if (v6) {
          operator delete(v6);
        }
        float v6 = v16;
      }
      else
      {
        *(_DWORD *)unsigned __int16 v9 = v11;
        unsigned __int16 v8 = v9 + 4;
      }
      v11 += v5;
      unsigned __int16 v9 = v8;
      --v7;
    }
    while (v7);
  }
  __int16 v18 = (os_log_t *)sub_32A48(20);
  unsigned __int8 v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
  {
    memset(&v41, 0, sizeof(v41));
    std::string::append(&v41, "{ ", 2uLL);
    if (v6 != v8)
    {
      __int16 v20 = (int *)v6;
      while (1)
      {
        std::to_string(&v42, *v20);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v21 = &v42;
        }
        else {
          unsigned int v21 = (std::string *)v42.__r_.__value_.__r.__words[0];
        }
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v42.__r_.__value_.__l.__size_;
        }
        std::string::append(&v41, (const std::string::value_type *)v21, size);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (++v20 == (int *)v8) {
          break;
        }
        std::string::append(&v41, ", ", 2uLL);
      }
    }
    std::string::append(&v41, " }", 2uLL);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v23 = &v41;
    }
    else {
      unint64_t v23 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136316162;
    long long v44 = "StandardUtilities.cpp";
    __int16 v45 = 1024;
    int v46 = 1600;
    __int16 v47 = 1024;
    int v48 = 0x7FFFFFFF;
    __int16 v49 = 1024;
    int v50 = v5;
    __int16 v51 = 2080;
    long long v52 = v23;
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Max: %d Step size: %d, VolumeCurve Scalar points: %s", buf, 0x28u);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 40) = _D0;
  sub_463E0(0);
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  std::string v30 = *a2;
  int v29 = a2[1];
  if ((((char *)v29 - (char *)*a2) >> 4) + 1 != (v8 - v6) >> 2)
  {
    size_t v37 = (os_log_t *)sub_32A48(13);
    std::string::size_type v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      long long v44 = "StandardUtilities.cpp";
      __int16 v45 = 1024;
      int v46 = 1607;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "Invariant failure.");
  }
  if (v30 == v29)
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    unsigned int v31 = 1;
    do
    {
      double v32 = *v30;
      *(float *)&double v32 = *v30;
      float v33 = v30[1];
      sub_792F0(a1, *(_DWORD *)&v6[4 * v31 - 4], *(_DWORD *)&v6[4 * v31], v32, v33);
      ++v31;
      v30 += 2;
    }
    while (v30 != v29);
  }
  operator delete(v6);
}

void sub_170410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_463E0(*v22);
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void sub_1704A8(unsigned int **a1, CFArrayRef *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  CFArrayRef v2 = *a2;
  if (*a2)
  {
    CFIndex Count = CFArrayGetCount(*a2);
    CFIndex v6 = Count;
    CFArrayRef v7 = *a2;
    if (v7)
    {
      CFIndex v22 = CFArrayGetCount(v7);
      if (!v6) {
        return;
      }
    }
    else
    {
      CFIndex v22 = 0;
      if (!Count) {
        return;
      }
    }
    unsigned __int16 v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    CFIndex v21 = v6;
    do
    {
      if (v2 == v7 && v11 == v22) {
        break;
      }
      sub_68838(&cf, v2, v11);
      unsigned int v12 = sub_170648(&cf);
      unsigned int v13 = v12;
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v14 = v10 - v8;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_60548();
        }
        if ((uint64_t)(v9 - (void)v8) >> 1 > v15) {
          unint64_t v15 = (uint64_t)(v9 - (void)v8) >> 1;
        }
        if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)sub_46BF4(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        __int16 v18 = (unsigned int *)(v16 + 4 * v14);
        *__int16 v18 = v13;
        unsigned __int8 v19 = v18 + 1;
        while (v10 != v8)
        {
          unsigned int v20 = *--v10;
          *--__int16 v18 = v20;
        }
        unint64_t v9 = v16 + 4 * v17;
        *a1 = v18;
        a1[1] = v19;
        a1[2] = (unsigned int *)v9;
        if (v8) {
          operator delete(v8);
        }
        unsigned __int16 v8 = v18;
        unint64_t v10 = v19;
        CFIndex v6 = v21;
      }
      else
      {
        *v10++ = v12;
      }
      a1[1] = v10;
      if (cf) {
        CFRelease(cf);
      }
      ++v11;
    }
    while (v11 != v6);
  }
}

CFNumberRef sub_170648(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (!v2) {
    return 0;
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 == CFNumberGetTypeID())
  {
    sub_1707BC(__p, a1);
    unint64_t v4 = __p[0];
    if (__p[0])
    {
      CFNumberRef v5 = sub_7E85C((const __CFNumber *)__p[0]);
      CFRelease(v4);
      return v5;
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_20:
  }
  if (!*a1) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(*a1);
  if (v6 != CFStringGetTypeID()) {
    return 0;
  }
  sub_E2B68(&cf, a1);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_20;
  }
  sub_20C54((uint64_t)__p, (const __CFString *)cf);
  if (v13 >= 0) {
    CFArrayRef v7 = __p;
  }
  else {
    CFArrayRef v7 = (void **)__p[0];
  }
  unsigned int v8 = *(_DWORD *)v7;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  return (const __CFNumber *)bswap32(v8);
}

void sub_170784(void *a1)
{
  __cxa_free_exception(v1);
  sub_564E4(a1);
}

const void *sub_1707BC(void *a1, const void **a2)
{
  float result = *a2;
  if (!*a2) {
    goto LABEL_6;
  }
  CFTypeID v5 = CFGetTypeID(result);
  float result = (const void *)CFNumberGetTypeID();
  if ((const void *)v5 != result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  CFTypeID v6 = *a2;
  if (v6)
  {
    CFRetain(v6);
    *a1 = v6;
    CFTypeID v7 = CFGetTypeID(v6);
    float result = (const void *)CFNumberGetTypeID();
    if ((const void *)v7 != result)
    {
      unsigned int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
    }
  }
  else
  {
LABEL_6:
    *a1 = 0;
  }
  return result;
}

void sub_1708A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1708E4(uint64_t a1, CFTypeRef *a2)
{
  if (*a2 && (CFTypeID v4 = CFGetTypeID(*a2), v4 == CFArrayGetTypeID()))
  {
    sub_170998(&cf, a2);
    sub_1704A8((unsigned int **)a1, (CFArrayRef *)&cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    unsigned int v5 = sub_170648(a2);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    CFTypeID v6 = (unsigned int *)operator new(4uLL);
    *(void *)a1 = v6;
    *v6++ = v5;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v6;
  }
}

void *sub_170998(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFArrayGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_66F3C(exception);
    }
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }
  else
  {
    CFTypeRef v5 = 0;
  }

  return sub_68780(a1, v5);
}

void sub_170A40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFNumberRef sub_170A5C(const __CFDictionary **a1, const UInt8 *a2, unsigned int *a3)
{
  CFDictionaryRef v5 = *a1;
  if (!v5 || !sub_1571F4(v5, a2)) {
    return (const __CFNumber *)*a3;
  }
  if (!*a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_1572F4(&cf, *a1, a2);
  CFNumberRef v7 = sub_170648(&cf);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void sub_170B18(void *a1)
{
  __cxa_free_exception(v1);
  sub_564E4(a1);
}

void *sub_170B38(void *result, CFTypeRef cf)
{
  CFArrayRef v2 = result;
  if (cf)
  {
    CFRetain(cf);
    return sub_14E44(v2, cf);
  }
  else
  {
    *float result = 0;
  }
  return result;
}

uint64_t sub_170B94(uint64_t a1, int a2)
{
  return sub_170E50(*(void *)(*(void *)(a1 + 32) + 56), a2);
}

void sub_170BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    unint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 1695;
      unsigned __int8 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unsigned int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    CFIndex v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      unint64_t v23 = v22;
      unsigned __int8 v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 1695;
        unsigned __int8 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unsigned int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      std::string v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 1695;
        unsigned __int8 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unsigned int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x170BC8);
}

uint64_t sub_170E50(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    sub_56964();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

void sub_170EA0(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  if (a2)
  {
    CFTypeID v4 = a3;
    if (a3)
    {
      if (a4)
      {
        if (*(void *)(a4 + 88) != a1)
        {
          CFTypeID v6 = (os_log_t *)sub_32A48(13);
          CFNumberRef v7 = *v6;
          if (*v6)
          {
            if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
            {
              int v21 = 136315394;
              CFIndex v22 = "HALJackStateHandler.cpp";
              __int16 v23 = 1024;
              int v24 = 181;
              _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The HAL passed inObject as different than mDevice.\"", (uint8_t *)&v21, 0x12u);
            }
          }
        }
        uint64_t v8 = 0;
        do
        {
          int v9 = *v4;
          v4 += 3;
          if (v9 == 1784767339)
          {
            sub_13910();
            operator new();
          }
          ++v8;
        }
        while (a2 != v8);
        unint64_t v10 = (os_log_t *)sub_32A48(13);
        unint64_t v11 = *v10;
        if (*v10)
        {
          if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
          {
            int v21 = 136315394;
            CFIndex v22 = "HALJackStateHandler.cpp";
            __int16 v23 = 1024;
            int v24 = 193;
            _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate kAudioDevicePropertyJackIsConnected in inAddresses\"", (uint8_t *)&v21, 0x12u);
          }
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        char v13 = (void (*)(void *))&std::runtime_error::~runtime_error;
        std::runtime_error::runtime_error(exception, "Unable to locate kAudioDevicePropertyJackIsConnected in inAddresses");
LABEL_15:
        __cxa_throw(exception, v14, v13);
      }
      unsigned __int8 v19 = (os_log_t *)sub_32A48(13);
      unsigned int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        int v21 = 136315394;
        CFIndex v22 = "HALJackStateHandler.cpp";
        __int16 v23 = 1024;
        int v24 = 178;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
      }
    }
    else
    {
      os_log_t v17 = (os_log_t *)sub_32A48(13);
      int v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        int v21 = 136315394;
        CFIndex v22 = "HALJackStateHandler.cpp";
        __int16 v23 = 1024;
        int v24 = 177;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
      }
    }
  }
  else
  {
    unint64_t v15 = (os_log_t *)sub_32A48(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      CFIndex v22 = "HALJackStateHandler.cpp";
      __int16 v23 = 1024;
      int v24 = 176;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  char v13 = (void (*)(void *))&std::logic_error::~logic_error;
  std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
  goto LABEL_15;
}

void sub_171274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v14);
  if (a2 == 3)
  {
    os_log_t v17 = __cxa_begin_catch(exception_object);
    int v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v20;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 194;
      int v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      CFIndex v22 = v19;
      uint32_t v23 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&a9, v23);
    }
  }
  else
  {
    int v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      uint64_t v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v28;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 194;
        int v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        CFIndex v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      int v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 194;
        int v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        CFIndex v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x171074);
}

void sub_1714C8()
{
}

void sub_1714D4()
{
}

void sub_1714E0()
{
}

void sub_1714F0()
{
}

void sub_1714F8(uint64_t *a1)
{
}

void sub_17157C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    unint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    CFIndex v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      int v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x171534);
}

unsigned char *sub_1717EC(uint64_t a1, void (*a2)(BOOL, BOOL, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v45 = a1;
  char v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v44 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    LODWORD(__p[0]) = 4;
    (*(void (**)(void, const char *, void, void, void **, int *))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), "kcajtpni", 0, 0, __p, &v44);
    uint64_t v6 = sub_32A48(21);
    uint64_t v7 = sub_32A48(30);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_8;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_8:
    char v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = "YES";
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      *(_DWORD *)buf = 136315650;
      if (!v44) {
        uint64_t v14 = "NO";
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 209;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d input connected: %s", buf, 0x1Cu);
    }
  }
  int v43 = 0;
  int v15 = *(unsigned __int8 *)(a1 + 97);
  if (*(unsigned char *)(a1 + 97))
  {
    LODWORD(__p[0]) = 4;
    (*(void (**)(void, const char *, void, void, void **, int *))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), "kcajptuo", 0, 0, __p, &v43);
    uint64_t v16 = sub_32A48(21);
    uint64_t v17 = sub_32A48(30);
    char v18 = 0;
    uint64_t v19 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v20 = *(void *)(v16 + 8);
    while (1)
    {
      uint64_t v21 = *(int *)&buf[4 * v19];
      char v22 = v18;
      if (((v20 & v21) != 0) != ((*(void *)(v17 + 8) & v21) != 0)) {
        break;
      }
      char v18 = 1;
      uint64_t v19 = 1;
      if (v22) {
        goto LABEL_20;
      }
    }
    if ((v20 & v21) == 0) {
      uint64_t v16 = v17;
    }
LABEL_20:
    uint32_t v23 = *(NSObject **)v16;
    if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      int v24 = "YES";
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      *(_DWORD *)buf = 136315650;
      if (!v43) {
        int v24 = "NO";
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 217;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d output connected: %s", buf, 0x1Cu);
    }
    int v15 = v43;
  }
  uint64_t v25 = sub_171DAC(v44 != 0, v15 != 0, *(void *)(a1 + 88));
  uint64_t v26 = sub_32A48(21);
  uint64_t v27 = sub_32A48(30);
  char v28 = 0;
  uint64_t v29 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v30 = *(void *)(v26 + 8);
  while (1)
  {
    uint64_t v31 = *(int *)&buf[4 * v29];
    char v32 = v28;
    if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
      break;
    }
    char v28 = 1;
    uint64_t v29 = 1;
    if (v32) {
      goto LABEL_32;
    }
  }
  if ((v30 & v31) == 0) {
    uint64_t v26 = v27;
  }
LABEL_32:
  float v33 = *(NSObject **)v26;
  if (!v33 || !os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_38;
  }
  sub_2417C(__p, v25);
  int v34 = v42 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 136315650;
  *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
  *(_WORD *)&unsigned char buf[12] = 1024;
  *(_DWORD *)&buf[14] = 222;
  *(_WORD *)&unsigned char buf[18] = 2080;
  *(void *)&buf[20] = v34;
  _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d headphone jack descriptor: '%s'", buf, 0x1Cu);
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if (a2) {
      goto LABEL_39;
    }
  }
  else
  {
LABEL_38:
    if (a2)
    {
LABEL_39:
      sub_523D8(buf, a1);
      a2(v44 != 0, v43 != 0, v25, a3);
      sub_52380(buf);
      return sub_3BCAC(&v45);
    }
  }
  *(void *)buf = buf;
  *(_OWORD *)&buf[8] = (unint64_t)buf;
  uint64_t v35 = *(void *)(a1 + 112);
  if (v35 != a1 + 104)
  {
    uint64_t v36 = 1;
    size_t v37 = buf;
    do
    {
      std::string::size_type v38 = operator new(0x20uLL);
      v38[1] = *(_OWORD *)(v35 + 16);
      *(void *)std::string::size_type v38 = v37;
      *((void *)v38 + 1) = buf;
      *((void *)v37 + 1) = v38;
      *(void *)buf = v38;
      *(void *)&_DWORD buf[16] = v36;
      uint64_t v35 = *(void *)(v35 + 8);
      ++v36;
      size_t v37 = v38;
    }
    while (v35 != a1 + 104);
  }
  sub_523D8(__p, a1);
  for (uint64_t i = *(void *)&buf[8]; buf != (unsigned char *)i; uint64_t i = *(void *)(i + 8))
    (*(void (**)(BOOL, BOOL, uint64_t, void))(i + 16))(v44 != 0, v43 != 0, v25, *(void *)(i + 24));
  sub_52380(__p);
  sub_45F50(buf);
  return sub_3BCAC(&v45);
}

void sub_171D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_171DAC(int a1, int a2, uint64_t a3)
{
  if (a2) {
    unsigned int v3 = 1784965232;
  }
  else {
    unsigned int v3 = 0;
  }
  if (a1) {
    uint64_t v4 = 1784965235;
  }
  else {
    uint64_t v4 = v3;
  }
  if (!a2) {
    return v4;
  }
  if ((sub_163EB8() & 1) == 0)
  {
    sub_172474(buf, a3);
    if (!*(void *)buf) {
      return 0;
    }
    unint64_t v7 = sub_172584((const __CFDictionary **)buf);
    if ((v7 & 0xFF00000000) != 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = v4;
    }
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    return v8;
  }
  uint64_t v9 = v6;
  if ((byte_64BED4 & 1) == 0)
  {
    *(void *)buf = CFStringCreateWithCString(0, "b15", 0x600u);
    buf[8] = 1;
    int v10 = 1784820021;
    if (!sub_1723C8((CFStringRef *)buf))
    {
      long long __p = (void *)CFStringCreateWithCString(0, "b18", 0x600u);
      char v36 = 1;
      if (!sub_1723C8((CFStringRef *)&__p))
      {
        CFStringRef v52 = CFStringCreateWithCString(0, "b126", 0x600u);
        char v53 = 1;
        BOOL v28 = sub_1723C8(&v52);
        sub_72924((uint64_t)&v52);
        sub_72924((uint64_t)&__p);
        sub_72924((uint64_t)buf);
        if (v28) {
          goto LABEL_21;
        }
        CFStringRef v50 = CFStringCreateWithCString(0, "b60f", 0x600u);
        char v51 = 1;
        int v10 = 1647718502;
        if (!sub_1723C8(&v50))
        {
          CFStringRef v48 = CFStringCreateWithCString(0, "b149", 0x600u);
          char v49 = 1;
          BOOL v29 = sub_1723C8(&v48);
          sub_72924((uint64_t)&v48);
          sub_72924((uint64_t)&v50);
          if (!v29)
          {
            CFStringRef v46 = CFStringCreateWithCString(0, "b60g", 0x600u);
            char v47 = 1;
            BOOL v30 = sub_1723C8(&v46);
            sub_72924((uint64_t)&v46);
            if (v30)
            {
              int v10 = 1647718503;
            }
            else
            {
              CFStringRef v44 = CFStringCreateWithCString(0, "a36", 0x600u);
              char v45 = 1;
              BOOL v31 = sub_1723C8(&v44);
              sub_72924((uint64_t)&v44);
              if (v31)
              {
                int v10 = 1784754998;
              }
              else
              {
                CFStringRef v42 = CFStringCreateWithCString(0, "b198", 0x600u);
                char v43 = 1;
                BOOL v32 = sub_1723C8(&v42);
                sub_72924((uint64_t)&v42);
                if (v32)
                {
                  int v10 = 1647393080;
                }
                else
                {
                  CFStringRef v40 = CFStringCreateWithCString(0, "b310", 0x600u);
                  char v41 = 1;
                  BOOL v33 = sub_1723C8(&v40);
                  sub_72924((uint64_t)&v40);
                  if (v33)
                  {
                    int v10 = 1781739824;
                  }
                  else
                  {
                    CFStringRef v38 = CFStringCreateWithCString(0, "b302", 0x600u);
                    char v39 = 1;
                    BOOL v34 = sub_1723C8(&v38);
                    sub_72924((uint64_t)&v38);
                    if (!v34) {
                      goto LABEL_22;
                    }
                    int v10 = 1647521842;
                  }
                }
              }
            }
          }
LABEL_21:
          dword_64BED0 = v10;
LABEL_22:
          byte_64BED4 = 1;
          goto LABEL_23;
        }
        uint64_t v11 = &v50;
LABEL_20:
        sub_72924((uint64_t)v11);
        goto LABEL_21;
      }
      sub_72924((uint64_t)&__p);
    }
    uint64_t v11 = (CFStringRef *)buf;
    goto LABEL_20;
  }
LABEL_23:
  uint64_t v8 = dword_64BED0;
  BOOL v12 = dword_64BED0 == 0;
  uint64_t v13 = sub_32A48(21);
  uint64_t v14 = sub_32A48(30);
  char v15 = 0;
  uint64_t v16 = 0;
  if (v12)
  {
    *(void *)buf = 0x100000002;
    uint64_t v20 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v21 = *(int *)&buf[4 * v16];
      char v22 = v15;
      if (((v20 & v21) != 0) != ((*(void *)(v14 + 8) & v21) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v22) {
        goto LABEL_46;
      }
    }
    if ((v20 & v21) == 0) {
      uint64_t v13 = v14;
    }
LABEL_46:
    uint64_t v25 = *(NSObject **)v13;
    if (*(void *)v13 && os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *v9;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      __int16 v55 = 1024;
      int v56 = 300;
      __int16 v57 = 2112;
      std::string v58 = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Headset could not be identified based on overridde identifier: \"%@\". Using default settings.", buf, 0x1Cu);
    }
    return v4;
  }
  *(void *)buf = 0x100000002;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&buf[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1;
    if (v19)
    {
      if ((v17 & 1) == 0) {
        return v8;
      }
      goto LABEL_37;
    }
  }
  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
  if (*(void *)(v13 + 8))
  {
LABEL_37:
    uint32_t v23 = *(NSObject **)v13;
    if (*(void *)v13 && os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(&__p, v8);
      int v24 = v37 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      __int16 v55 = 1024;
      int v56 = 290;
      __int16 v57 = 2080;
      std::string v58 = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using headset override value: '%s'", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p);
      }
    }
  }
  return v8;
}

void sub_172314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1723C8(CFStringRef *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BED8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BED8))
  {
    qword_64BEE0 = sub_163EB8();
    qword_64BEE8 = v3;
    __cxa_guard_release(&qword_64BED8);
  }
  return (_BYTE)qword_64BEE0 && CFStringCompare(*a1, *(CFStringRef *)qword_64BEE8, 5uLL) == kCFCompareEqualTo;
}

void sub_17245C(_Unwind_Exception *a1)
{
}

void *sub_172474(void *a1, uint64_t a2)
{
  AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  inAddress.mElement = 0;
  AudioObjectID v14 = v3;
  *(void *)&inAddress.mSelector = 0x676C6F6268656164;
  float result = (void *)sub_CAD1C((uint64_t)v9, &v14, &inAddress);
  if (v12)
  {
    CFDictionaryRef v5 = v11;
    uint64_t v11 = 0;
    uint64_t v6 = &off_6412B0;
    CFTypeRef cf = v5;
    char v8 = 1;
    sub_49A90(&v10);
    if (cf) {
      CFRetain(cf);
    }
    sub_22084(a1, cf);
    return sub_49A90(&v6);
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

void sub_172568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {
    sub_49A90(&a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_172584(const __CFDictionary **a1)
{
  CFDictionaryRef v1 = *a1;
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  CFNumberRef v2 = (const __CFNumber *)sub_F3EE4(v1, "earpiece design");
  if (!v2) {
    goto LABEL_6;
  }
  CFNumberRef v3 = sub_22314(v2);
  unint64_t v4 = (unint64_t)v3 >> 32;
  if (!((unint64_t)v3 >> 32))
  {
LABEL_7:
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    return v6 | v4 | v7;
  }
  unsigned int v5 = v3 - 1;
  if ((v3 - 1) > 7)
  {
LABEL_6:
    unint64_t v4 = 0;
    goto LABEL_7;
  }
  unint64_t v4 = qword_4E8298[v5];
  uint64_t v6 = qword_4E82D8[v5];
  uint64_t v7 = qword_4E8318[v5];
  return v6 | v4 | v7;
}

void sub_17263C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_172650(uint64_t a1)
{
  uint64_t v3 = a1;
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 97)) {
    sub_FEEF8(*(void *)(a1 + 88), "kcajptuo", (uint64_t)sub_170EA0, a1);
  }
  if (*(unsigned char *)(a1 + 96)) {
    sub_FEEF8(*(void *)(a1 + 88), "kcajtpni", (uint64_t)sub_170EA0, a1);
  }
  sub_3BCAC(&v3);
  sub_45F50((void *)(a1 + 104));
  return sub_AEF0C(a1);
}

BOOL sub_172718(uint64_t a1)
{
  sub_172474(&theDict, a1);
  if (!theDict) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  if (Count) {
    BOOL v1 = (sub_172584(&theDict) & 0xFF00000000) != 0;
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (!Count) {
    return 0;
  }
  return v1;
}

void sub_17278C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_60394((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1727A4(unsigned char *a1, uint64_t a2, int a3, uint64_t a4)
{
  a1[520] = a3;
  if (!a3) {
    goto LABEL_39;
  }
  uint64_t v5 = a4;
  if ((int)a4 <= 1781740086)
  {
    if ((int)a4 <= 1647718501)
    {
      if (a4 != 1647393080 && a4 != 1647521842) {
        goto LABEL_19;
      }
    }
    else if (a4 != 1647718502 && a4 != 1647718503)
    {
      if (a4 != 1781739824) {
        goto LABEL_19;
      }
      uint64_t v5 = 1647522096;
    }
  }
  else if ((int)a4 > 1784965231)
  {
    switch(a4)
    {
      case 0x6A646870:
        uint64_t v5 = 1751410292;
        break;
      case 0x6A757362:
        uint64_t v5 = 1970496068;
        break;
      case 0x6A646873:
        uint64_t v5 = 1214539380;
        break;
      default:
        goto LABEL_19;
    }
  }
  else
  {
    if (a4 == 1781740087) {
      goto LABEL_26;
    }
    if (a4 != 1784754998)
    {
      if (a4 == 1784820021)
      {
        uint64_t v5 = 1214394677;
        goto LABEL_26;
      }
LABEL_19:
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port_HeadphonesWired_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 123;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unknown HALJackStateHandler::JackDescriptor.\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unknown HALJackStateHandler::JackDescriptor.");
    }
    uint64_t v5 = 1214329654;
  }
LABEL_26:
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 104))(a1, v5);
  uint64_t v9 = sub_32A48(23);
  uint64_t v10 = sub_32A48(30);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_32;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_32:
  uint64_t v16 = *(NSObject **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(__p, v5);
    if (v19 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "Port_HeadphonesWired_Aspen.cpp";
    __int16 v21 = 1024;
    int v22 = 177;
    __int16 v23 = 2080;
    int v24 = v17;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port sub-type has been updated to '%s'", buf, 0x1Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_39:
  sub_D26B4((uint64_t)a1);
}

void sub_172B18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_172B34(uint64_t a1)
{
  return *(_DWORD *)(a1 + 264) >> 1 == 823859251;
}

uint64_t sub_172B4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

uint64_t sub_172B54(uint64_t a1)
{
  int v8 = 1;
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t v1 = *(void *)(a1 + 192);
  if (v1)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v1 + 128))(v5);
    sub_8B9E0((uint64_t)&v6, (uint64_t)v5);
    sub_72924((uint64_t)v5);
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_623D08);
  }
  uint64_t v3 = 0x165706870;
  if (off_64EF30)
  {
    off_64EF30(&v8, v2);
    if (!v8) {
      uint64_t v3 = 0x165706F74;
    }
  }
  sub_72924((uint64_t)&v6);
  return v3;
}

void sub_172C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_172C6C(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    char v4 = dlerror();
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_64EE98 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_64EEA0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_64EEA8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_64EEB0 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_64EEB8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_64EEC0 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_64EEC8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_64EED0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_64EED8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_64EEE0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_64EEE8 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_64EEF0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_64EEF8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_64EF00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_64EF08 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_64EF10 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    off_64EF18 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    off_64EF20 = (uint64_t (*)(void, void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_64EF28 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_64EF30 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_64EF38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    char v4 = v2;
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t sub_172F8C(os_unfair_lock_s *a1)
{
  return 1;
}

void sub_172FA8(void *a1)
{
  *a1 = off_623888;
  sub_103C0C((uint64_t)a1);

  operator delete();
}

uint64_t sub_172FFC(uint64_t a1)
{
  *(void *)a1 = off_623888;
  return sub_103C0C(a1);
}

void *sub_17301C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_21C8C(__p, "");
  sub_105158((uint64_t)a1, a2, a3, a4, a5, a6, a7, (long long *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_640E08;
  return a1;
}

void sub_1730D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1730FC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v5 = &qword_64BF68;
  }
  else {
    uint64_t v5 = &qword_64BF38;
  }
  memset(v13, 0, sizeof(v13));
  sub_105048((uint64_t)v10, *(_DWORD *)v5);
  CFStringRef v8 = CFStringCreateWithCString(0, "Wired Headphones", 0x600u);
  char v9 = 1;
  memset(v7, 0, sizeof(v7));
  sub_17301C((void *)a1, v5, a2, (uint64_t)v13, (uint64_t)v10, (uint64_t)&v8, (uint64_t)v7);
  uint64_t v14 = (void **)v7;
  sub_74004(&v14);
  sub_72924((uint64_t)&v8);
  sub_72924((uint64_t)&v12);
  sub_72924((uint64_t)&v11);
  sub_72924((uint64_t)v10);
  *(void *)a1 = off_623888;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_173200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  *(void *)(v6 - 56) = v5;
  sub_74004((void ***)(v6 - 56));
  sub_72924((uint64_t)va);
  sub_72924((uint64_t)va3);
  sub_72924((uint64_t)va2);
  sub_72924((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_173244(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  memset(v10, 0, sizeof(v10));
  if (a3) {
    char v7 = &qword_64BF68;
  }
  else {
    char v7 = &qword_64BF38;
  }
  memset(v9, 0, sizeof(v9));
  sub_17301C((void *)a1, v7, a2, (uint64_t)v10, a4, a5, (uint64_t)v9);
  uint64_t v11 = (void **)v9;
  sub_74004(&v11);
  *(void *)a1 = off_623888;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_1732E4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_74004((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1732FC(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress)
{
  if (AudioObjectHasProperty(*a2, inAddress))
  {
    LOBYTE(outData) = 0;
    char v13 = 0;
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    sub_E2A90((uint64_t)&outData);
    UInt32 ioDataSize = sub_26E94(*a2, inAddress, 0, 0);
    if (ioDataSize)
    {
      outData = 0;
      OSStatus PropertyData = AudioObjectGetPropertyData(*a2, inAddress, 0, 0, &ioDataSize, &outData);
      *(_DWORD *)a1 = PropertyData;
      if (!PropertyData)
      {
        char v7 = outData;
        CFTypeRef v10 = outData;
        sub_E2B68(&v9, &v10);
        uint64_t v8 = v9;
        *(unsigned char *)(a1 + 16) = 1;
        *(void *)(a1 + 8) = v8;
        if (v7) {
          CFRelease(v7);
        }
      }
    }
  }
  else
  {
    LOBYTE(outData) = 0;
    char v13 = 0;
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    sub_E2A90((uint64_t)&outData);
  }
}

void *sub_173418(void *result, uint64_t a2, CFTypeRef cf)
{
  int v3 = result;
  if (*(unsigned char *)(a2 + 8))
  {
    *float result = *(void *)a2;
    *(void *)a2 = 0;
  }
  else
  {
    if (cf) {
      float result = CFRetain(cf);
    }
    void *v3 = cf;
  }
  return result;
}

void *sub_173468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v2 = *(const __CFString **)(a1 + 528);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }

  return sub_20C54(a2, v2);
}

void sub_1734D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1734E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 424))();
}

BOOL sub_173510(uint64_t a1)
{
  CFStringRef v1 = *(const __CFString **)(a1 + 528);
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  sub_20C54((uint64_t)v5, v1);
  if ((v6 & 0x80000000) == 0) {
    return v6 != 0;
  }
  BOOL v2 = v5[1] != 0;
  operator delete(v5[0]);
  return v2;
}

void sub_17359C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1735B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 424))();
}

void sub_1735DC(void *a1)
{
  sub_173614(a1);

  operator delete();
}

uint64_t sub_173614(void *a1)
{
  *a1 = off_623AC0;
  BOOL v2 = (const void *)a1[66];
  if (v2) {
    CFRelease(v2);
  }
  *a1 = off_623888;

  return sub_103C0C((uint64_t)a1);
}

void sub_173694(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(a1 + 520) = a2 & a3;
  sub_D26B4(a1);
}

uint64_t sub_1736A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

void sub_1736A8(void *a1)
{
  *a1 = off_623D38;
  sub_103C0C((uint64_t)a1);

  operator delete();
}

uint64_t sub_1736FC(uint64_t a1)
{
  *(void *)a1 = off_623D38;
  return sub_103C0C(a1);
}

uint64_t sub_17371C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v12, 0, sizeof(v12));
  sub_105048((uint64_t)v9, qword_64BFC8);
  CFStringRef v7 = CFStringCreateWithCString(0, "Wired Microphone", 0x600u);
  char v8 = 1;
  sub_17301C((void *)a1, &qword_64BFC8, a2, (uint64_t)v12, (uint64_t)v9, (uint64_t)&v7, a3);
  sub_72924((uint64_t)&v7);
  sub_72924((uint64_t)&v11);
  sub_72924((uint64_t)&v10);
  sub_72924((uint64_t)v9);
  *(void *)a1 = off_623D38;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_1737F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_72924((uint64_t)va);
  sub_72924((uint64_t)va3);
  sub_72924((uint64_t)va2);
  sub_72924((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_173830(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 64);
  sub_CD90((uint64_t)v8, (void *)(a1 + 8));
  sub_CD90((uint64_t)v9, (void *)(a1 + 32));
  uint64_t v10 = *(void *)(a1 + 56);
  if (!*(void *)v2)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v12 = 1024;
      int v13 = 502;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(unsigned char *)(v2 + 8))
  {
    sub_13910();
    *(void *)buf = v2;
    sub_CD90((uint64_t)&buf[8], v8);
    sub_CD90((uint64_t)v14, v9);
    void v14[3] = v10;
    operator new();
  }
  uint64_t v3 = (os_log_t *)sub_32A48(12);
  char v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    __int16 v12 = 1024;
    int v13 = 506;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
  }
  sub_463E0((void *)v9[1]);
  sub_463E0((void *)v8[1]);
}

void sub_173AAC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf, long long a18, __int16 a19, __int16 a20,int a21,int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  if (a2 == 3)
  {
    uint64_t v25 = __cxa_begin_catch(a1);
    uint64_t v26 = (os_log_t *)sub_32A48(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v28 = v25[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a18) = 1024;
      DWORD1(a18) = v28;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 514;
      BOOL v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      BOOL v30 = v27;
      uint32_t v31 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
    }
  }
  else
  {
    BOOL v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      BOOL v33 = v32;
      BOOL v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v36;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 514;
        BOOL v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        BOOL v30 = v35;
        uint32_t v31 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      char v37 = (os_log_t *)sub_32A48(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 514;
        BOOL v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        BOOL v30 = v38;
        uint32_t v31 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x173950);
}

void sub_173D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_173D70(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = sub_32A48(12);
  if (*(unsigned char *)(v3 + 8))
  {
    char v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        sub_1741E8(v50, (void *)(a1 + 8));
        int v5 = v51;
        uint64_t v6 = (void **)v50[0];
        sub_1741E8(__p, v2 + 3);
        CFStringRef v7 = v50;
        if (v5 < 0) {
          CFStringRef v7 = v6;
        }
        if (v49 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        char v53 = "CoreTelephonyInterface.cpp";
        __int16 v54 = 1024;
        int v55 = 474;
        __int16 v56 = 2080;
        __int16 v57 = v7;
        __int16 v58 = 2080;
        std::string v59 = v8;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Deactivating Route: %s Current: %s", buf, 0x26u);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (v51 < 0) {
          operator delete(v50[0]);
        }
      }
    }
  }
  uint64_t v9 = *(void **)(a1 + 8);
  if (v9 != (void *)(a1 + 16))
  {
    uint64_t v10 = v2 + 4;
    do
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        unsigned int v12 = *((_DWORD *)v9 + 8);
        int v13 = v2 + 4;
        do
        {
          unsigned int v14 = *(_DWORD *)(v11 + 32);
          BOOL v15 = v14 >= v12;
          if (v14 >= v12) {
            uint64_t v16 = (uint64_t *)v11;
          }
          else {
            uint64_t v16 = (uint64_t *)(v11 + 8);
          }
          if (v15) {
            int v13 = (uint64_t *)v11;
          }
          uint64_t v11 = *v16;
        }
        while (*v16);
        if (v13 != v10 && v12 >= *((_DWORD *)v13 + 8))
        {
          unint64_t v17 = v13[5];
          if (v17)
          {
            if (v17 < v9[5])
            {
              uint64_t v18 = (os_log_t *)sub_32A48(12);
              char v19 = *v18;
              if (*v18)
              {
                if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  char v53 = "CoreTelephonyInterface.cpp";
                  __int16 v54 = 1024;
                  int v55 = 262;
                  _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Removing more inputs than we have", buf, 0x12u);
                }
              }
            }
            unint64_t v20 = v13[5];
            unint64_t v21 = v9[5];
            BOOL v15 = v20 >= v21;
            unint64_t v22 = v20 - v21;
            if (!v15) {
              unint64_t v22 = 0;
            }
            v13[5] = v22;
          }
        }
      }
      __int16 v23 = (void *)v9[1];
      if (v23)
      {
        do
        {
          int v24 = v23;
          __int16 v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          int v24 = (void *)v9[2];
          BOOL v25 = *v24 == (void)v9;
          uint64_t v9 = v24;
        }
        while (!v25);
      }
      uint64_t v9 = v24;
    }
    while (v24 != (void *)(a1 + 16));
  }
  uint64_t v26 = *(void **)(a1 + 32);
  if (v26 != (void *)(a1 + 40))
  {
    os_log_t v27 = v2 + 7;
    do
    {
      uint64_t v28 = *v27;
      if (*v27)
      {
        unsigned int v29 = *((_DWORD *)v26 + 8);
        BOOL v30 = v2 + 7;
        do
        {
          unsigned int v31 = *(_DWORD *)(v28 + 32);
          BOOL v32 = v31 >= v29;
          if (v31 >= v29) {
            BOOL v33 = (uint64_t *)v28;
          }
          else {
            BOOL v33 = (uint64_t *)(v28 + 8);
          }
          if (v32) {
            BOOL v30 = (uint64_t *)v28;
          }
          uint64_t v28 = *v33;
        }
        while (*v33);
        if (v30 != v27 && v29 >= *((_DWORD *)v30 + 8))
        {
          unint64_t v34 = v30[5];
          if (v34)
          {
            if (v34 < v26[5])
            {
              os_log_t v35 = (os_log_t *)sub_32A48(12);
              uint64_t v36 = *v35;
              if (*v35)
              {
                if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  char v53 = "CoreTelephonyInterface.cpp";
                  __int16 v54 = 1024;
                  int v55 = 273;
                  _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d Removing more outputs than we have", buf, 0x12u);
                }
              }
            }
            unint64_t v37 = v30[5];
            unint64_t v38 = v26[5];
            BOOL v15 = v37 >= v38;
            unint64_t v39 = v37 - v38;
            if (!v15) {
              unint64_t v39 = 0;
            }
            v30[5] = v39;
          }
        }
      }
      CFStringRef v40 = (void *)v26[1];
      if (v40)
      {
        do
        {
          char v41 = v40;
          CFStringRef v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          char v41 = (void *)v26[2];
          BOOL v25 = *v41 == (void)v26;
          uint64_t v26 = v41;
        }
        while (!v25);
      }
      uint64_t v26 = v41;
    }
    while (v41 != (void *)(a1 + 40));
  }
  unint64_t v42 = *(void *)(a1 + 56);
  if (v42)
  {
    if (v2[9] > v42)
    {
      char v43 = (os_log_t *)sub_32A48(12);
      CFStringRef v44 = *v43;
      if (*v43)
      {
        if (os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          char v53 = "CoreTelephonyInterface.cpp";
          __int16 v54 = 1024;
          int v55 = 280;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d Removing more NR count than we have", buf, 0x12u);
        }
      }
    }
    unint64_t v45 = v2[9];
    unint64_t v46 = *(void *)(a1 + 56);
    BOOL v15 = v45 >= v46;
    unint64_t v47 = v45 - v46;
    if (!v15) {
      unint64_t v47 = 0;
    }
    v2[9] = v47;
  }
  sub_13DB8(v2);
}

void sub_1741C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1741E8(void *a1, void *a2)
{
  sub_3D04((uint64_t)&v25);
  char v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_256E4(&v25, (uint64_t)"Input: ", 7);
      sub_2417C(&__p, *((_DWORD *)v4 + 8));
      if ((v24 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v6 = v24;
      }
      else {
        uint64_t v6 = v23;
      }
      sub_256E4(&v25, (uint64_t)p_p, v6);
      sub_256E4(&v25, (uint64_t)" Count: ", 8);
      CFStringRef v7 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
      uint64_t v8 = std::locale::use_facet(&v28, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale(&v28);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v24 < 0) {
        operator delete(__p);
      }
      uint64_t v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          char v4 = v10;
        }
        while (!v11);
      }
      char v4 = v10;
    }
    while (v10 != a2 + 1);
  }
  unsigned int v12 = (void *)a2[3];
  if (v12 != a2 + 4)
  {
    do
    {
      sub_256E4(&v25, (uint64_t)"Output: ", 8);
      sub_2417C(&__p, *((_DWORD *)v12 + 8));
      if ((v24 & 0x80u) == 0) {
        int v13 = &__p;
      }
      else {
        int v13 = __p;
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v14 = v24;
      }
      else {
        uint64_t v14 = v23;
      }
      sub_256E4(&v25, (uint64_t)v13, v14);
      sub_256E4(&v25, (uint64_t)" Count: ", 8);
      BOOL v15 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      uint64_t v16 = std::locale::use_facet(&v28, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v28);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v24 < 0) {
        operator delete(__p);
      }
      unint64_t v17 = (void *)v12[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          unint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v12[2];
          BOOL v11 = *v18 == (void)v12;
          unsigned int v12 = v18;
        }
        while (!v11);
      }
      unsigned int v12 = v18;
    }
    while (v18 != a2 + 4);
  }
  sub_256E4(&v25, (uint64_t)"VP Use Count: ", 14);
  char v19 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  unint64_t v20 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  sub_246E4(a1, (uint64_t)v26);
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_17464C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

const void **sub_1746B0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1746E4(uint64_t a1)
{
  if (a1) {
    sub_6C7C(a1);
  }
}

void sub_174750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    BOOL v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      char v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    unint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      unsigned __int8 v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        char v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      char v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        char v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x174714);
}

void sub_1749B4(uint64_t a1)
{
  *(void *)a1 = off_626DF8;
  sub_463E0(*(void **)(a1 + 40));
  sub_463E0(*(void **)(a1 + 16));

  operator delete();
}

uint64_t sub_174A24(uint64_t a1)
{
  *(void *)a1 = off_626DF8;
  sub_463E0(*(void **)(a1 + 40));
  sub_463E0(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_174A74(uint64_t a1, const __CFDictionary **a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x40BF400000000000uLL);
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  CFStringRef v4 = (const __CFString *)sub_99744(*a2, kCTAudioVocoderType);
  if (v4)
  {
    sub_65F38((CFTypeID)buf, v4);
    if (buf[24])
    {
      if ((buf[23] & 0x80000000) != 0)
      {
        char v41 = *(void **)buf;
        sub_21E8C(__p, *(void **)buf, *(unint64_t *)&buf[8]);
        if (buf[24]) {
          operator delete(v41);
        }
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)buf;
        uint64_t v50 = *(void *)&buf[16];
      }
      goto LABEL_8;
    }
  }
  else
  {
    buf[0] = 0;
    unsigned char buf[24] = 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
LABEL_8:
  CFDictionaryRef v5 = *a2;
  if (!*a2)
  {
    unint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
  }
  *(_DWORD *)buf = 0;
  unsigned int v6 = sub_1756F4(v5, kCTAudioVocoderSampleRate, (unsigned int *)buf);
  CFDictionaryRef v7 = *a2;
  if (!*a2)
  {
    unint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
  }
  *(_DWORD *)buf = 0;
  unsigned int v8 = sub_1756F4(v7, kCTAudioVocoderI2SClockRate, (unsigned int *)buf);
  uint64_t v9 = sub_32A48(12);
  uint64_t v10 = sub_32A48(39);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_16;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_16:
  uint64_t v16 = *(NSObject **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v17 = __p;
    if (v50 < 0) {
      os_log_t v17 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 338;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v17;
    __int16 v77 = 1024;
    *(_DWORD *)long long v78 = v6;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v8;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d vocoder type is \"%s\", vocoder sample rate is %u Hz, hardware sample rate is %u", buf, 0x28u);
  }
  *(double *)(a1 + 8) = sub_175738(v6);
  *(double *)(a1 + 16) = sub_175738(v8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64C138, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64C138))
  {
    sub_21B7C(&v75, kCTAudioVocoderTypeQCELP13);
    *(std::string *)buf = v75;
    memset(&v75, 0, sizeof(v75));
    *(_DWORD *)&unsigned char buf[24] = 1902341232;
    sub_21B7C(v73, kCTAudioVocoderTypeEVRC);
    *(_OWORD *)&v78[2] = *(_OWORD *)v73;
    uint64_t v79 = v74;
    v73[1] = 0;
    uint64_t v74 = 0;
    v73[0] = 0;
    int v80 = 1702261347;
    sub_21B7C(&v71, kCTAudioVocoderTypeEVRCB);
    long long v81 = v71;
    uint64_t v82 = v72;
    uint64_t v72 = 0;
    long long v71 = 0uLL;
    int v83 = 1702261346;
    sub_21B7C(v69, kCTAudioVocoderType4GVNB);
    long long v84 = *(_OWORD *)v69;
    uint64_t v85 = v70;
    v69[1] = 0;
    uint64_t v70 = 0;
    v69[0] = 0;
    int v86 = 880176738;
    sub_21B7C(&v67, kCTAudioVocoderType4GVWB);
    long long v87 = v67;
    uint64_t v88 = v68;
    uint64_t v68 = 0;
    long long v67 = 0uLL;
    int v89 = 880179042;
    sub_21B7C(v65, kCTAudioVocoderType4GVNW);
    long long v90 = *(_OWORD *)v65;
    uint64_t v91 = v66;
    v65[1] = 0;
    uint64_t v66 = 0;
    v65[0] = 0;
    int v92 = 880176759;
    sub_21B7C(&v63, kCTAudioVocoderTypeFR);
    long long v93 = v63;
    uint64_t v94 = v64;
    uint64_t v64 = 0;
    long long v63 = 0uLL;
    int v95 = 1718755360;
    sub_21B7C(v61, kCTAudioVocoderTypeHR);
    long long v96 = *(_OWORD *)v61;
    uint64_t v97 = v62;
    v61[1] = 0;
    uint64_t v62 = 0;
    v61[0] = 0;
    int v98 = 1752309792;
    sub_21B7C(v59, kCTAudioVocoderTypeEFR);
    long long v99 = *(_OWORD *)v59;
    uint64_t v100 = v60;
    v59[1] = 0;
    uint64_t v60 = 0;
    v59[0] = 0;
    int v101 = 1701212704;
    sub_21B7C(v57, kCTAudioVocoderTypeAMR);
    long long v102 = *(_OWORD *)v57;
    uint64_t v103 = v58;
    v57[1] = 0;
    uint64_t v58 = 0;
    v57[0] = 0;
    int v104 = 1935764850;
    sub_21B7C(v55, kCTAudioVocoderTypeWAMR);
    long long v105 = *(_OWORD *)v55;
    uint64_t v106 = v56;
    v55[1] = 0;
    uint64_t v56 = 0;
    v55[0] = 0;
    int v107 = 1935767394;
    sub_21B7C(v53, kCTAudioVocoderTypeEAMR);
    long long v108 = *(_OWORD *)v53;
    uint64_t v109 = v54;
    v53[1] = 0;
    uint64_t v54 = 0;
    v53[0] = 0;
    int v110 = 1700883826;
    sub_21B7C(v51, kCTAudioVocoderTypeEVS);
    long long v111 = *(_OWORD *)v51;
    uint64_t v112 = v52;
    v51[1] = 0;
    uint64_t v52 = 0;
    v51[0] = 0;
    int v113 = 1936029299;
    sub_17588C((uint64_t)buf, 13);
    uint64_t v48 = 52;
    do
    {
      if (SHIBYTE(v75.__r_.__value_.__r.__words[v48 + 1]) < 0) {
        operator delete(*(void **)((char *)&v74 + v48 * 8));
      }
      v48 -= 4;
    }
    while (v48 * 8);
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(v53[0]);
    }
    if (SHIBYTE(v56) < 0) {
      operator delete(v55[0]);
    }
    if (SHIBYTE(v58) < 0) {
      operator delete(v57[0]);
    }
    if (SHIBYTE(v60) < 0) {
      operator delete(v59[0]);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(v61[0]);
    }
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)v67);
    }
    if (SHIBYTE(v70) < 0) {
      operator delete(v69[0]);
    }
    if (SHIBYTE(v72) < 0) {
      operator delete((void *)v71);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(v73[0]);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    __cxa_guard_release(&qword_64C138);
  }
  unint64_t v18 = sub_6789C((uint64_t)__p);
  unint64_t v19 = *((void *)&xmmword_64C110 + 1);
  if (*((void *)&xmmword_64C110 + 1))
  {
    unint64_t v20 = v18;
    uint8x8_t v21 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_64C110 + 8));
    v21.i16[0] = vaddlv_u8(v21);
    unint64_t v22 = v21.u32[0];
    if (v21.u32[0] > 1uLL)
    {
      unint64_t v23 = v18;
      if (v18 >= *((void *)&xmmword_64C110 + 1)) {
        unint64_t v23 = v18 % *((void *)&xmmword_64C110 + 1);
      }
    }
    else
    {
      unint64_t v23 = (*((void *)&xmmword_64C110 + 1) - 1) & v18;
    }
    unsigned __int8 v24 = *(uint64_t ***)(xmmword_64C110 + 8 * v23);
    if (v24)
    {
      for (uint64_t i = *v24; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v26 = i[1];
        if (v20 == v26)
        {
          if (sub_67CEC((unsigned __int8 *)i + 16, (unsigned __int8 *)__p))
          {
            unsigned int v42 = i[5] & 0xFFFFFF00;
            int v43 = *((_DWORD *)i + 10);
            uint64_t v44 = 0x100000000;
            goto LABEL_69;
          }
        }
        else
        {
          if (v22 > 1)
          {
            if (v26 >= v19) {
              v26 %= v19;
            }
          }
          else
          {
            v26 &= v19 - 1;
          }
          if (v26 != v23) {
            break;
          }
        }
      }
    }
  }
  uint64_t v27 = sub_32A48(12);
  uint64_t v28 = sub_32A48(39);
  char v29 = 0;
  uint64_t v30 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v31 = *(void *)(v27 + 8);
  while (1)
  {
    uint64_t v32 = *(int *)&buf[4 * v30];
    char v33 = v29;
    if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
      break;
    }
    char v29 = 1;
    uint64_t v30 = 1;
    if (v33) {
      goto LABEL_44;
    }
  }
  if ((v31 & v32) == 0) {
    uint64_t v27 = v28;
  }
LABEL_44:
  unint64_t v34 = *(NSObject **)v27;
  if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    if (v50 >= 0) {
      os_log_t v35 = __p;
    }
    else {
      os_log_t v35 = (void **)__p[0];
    }
    if (v50 >= 0) {
      uint64_t v36 = (char *)HIBYTE(v50);
    }
    else {
      uint64_t v36 = (char *)__p[1];
    }
    memset(&v75, 0, sizeof(v75));
    std::string::append(&v75, "{ ", 2uLL);
    if (v36)
    {
      while (1)
      {
        std::to_string((std::string *)buf, *(char *)v35);
        if (buf[23] >= 0) {
          unint64_t v37 = buf;
        }
        else {
          unint64_t v37 = *(const std::string::value_type **)buf;
        }
        if (buf[23] >= 0) {
          std::string::size_type v38 = buf[23];
        }
        else {
          std::string::size_type v38 = *(void *)&buf[8];
        }
        std::string::append(&v75, v37, v38);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (!--v36) {
          break;
        }
        os_log_t v35 = (void **)((char *)v35 + 1);
        std::string::append(&v75, ", ", 2uLL);
      }
    }
    std::string::append(&v75, " }", 2uLL);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v39 = &v75;
    }
    else {
      unint64_t v39 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 53;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v39;
    _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Unhandled vocoder type: \"%s\"", buf, 0x1Cu);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v44 = 0;
  int v43 = 0;
  unsigned int v42 = 0;
LABEL_69:
  *(unsigned char *)(a1 + 4) = BYTE4(v44);
  *(_DWORD *)a1 = v44 | v43 | v42;
  if (SHIBYTE(v50) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_17548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  uint64_t v80 = 416;
  while (1)
  {
    if (*(char *)(v78 + v80 - 9) < 0) {
      operator delete(*(void **)(v78 + v80 - 32));
    }
    v80 -= 32;
    if (!v80)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      if (a26 < 0) {
        operator delete(a21);
      }
      if (a32 < 0) {
        operator delete(a27);
      }
      if (a38 < 0) {
        operator delete(a33);
      }
      if (a44 < 0) {
        operator delete(a39);
      }
      if (a50 < 0) {
        operator delete(a45);
      }
      if (a56 < 0) {
        operator delete(a51);
      }
      if (a62 < 0) {
        operator delete(a57);
      }
      if (a68 < 0) {
        operator delete(a63);
      }
      if (a72 < 0) {
        operator delete(a69);
      }
      if (a74 < 0) {
        operator delete(a73);
      }
      if (a76 < 0) {
        operator delete(a75);
      }
      if (a78 < 0) {
        operator delete(a77);
      }
      __cxa_guard_abort(&qword_64C138);
      if (a14 < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_1756DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1756B4);
}

unint64_t sub_1756F4(const __CFDictionary *a1, const void *a2, unsigned int *a3)
{
  CFNumberRef v4 = (const __CFNumber *)sub_99744(a1, a2);
  if (!v4) {
    return *a3;
  }
  unint64_t result = (unint64_t)sub_22314(v4);
  if (HIDWORD(result)) {
    return result;
  }
  else {
    return *a3;
  }
}

double sub_175738(unsigned int a1)
{
  if (a1) {
    return (double)a1;
  }
  uint64_t v3 = sub_32A48(12);
  uint64_t v4 = sub_32A48(39);
  char v5 = 0;
  uint64_t v6 = 0;
  *(void *)char v11 = 0x100000002;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&v11[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1;
    if (v9) {
      goto LABEL_10;
    }
  }
  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_10:
  uint64_t v10 = *(NSObject **)v3;
  double v1 = 8000.0;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)char v11 = 136315906;
    *(void *)&v11[4] = "CoreTelephonyInterface.cpp";
    __int16 v12 = 1024;
    int v13 = 99;
    __int16 v14 = 1024;
    int v15 = 0;
    __int16 v16 = 1024;
    int v17 = 8000;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid vocoder sample rate: %u Hz. Setting to default sample rate: %u Hz", v11, 0x1Eu);
  }
  return v1;
}

void sub_17588C(uint64_t a1, uint64_t a2)
{
  xmmword_64C110 = 0u;
  *(_OWORD *)&qword_64C120 = 0u;
  dword_64C130 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 32 * a2;
    uint64_t v6 = &unk_64C000;
    uint64_t v7 = (void *)&unk_64C000;
    while (1)
    {
      unint64_t v8 = sub_6789C(v3);
      unint64_t v9 = v8;
      unint64_t v10 = *((void *)v6 + 35);
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v8;
          if (v8 >= v10) {
            unint64_t v2 = v8 % v10;
          }
        }
        else
        {
          unint64_t v2 = (v10 - 1) & v8;
        }
        int v13 = *(unsigned __int8 ***)(xmmword_64C110 + 8 * v2);
        if (v13)
        {
          __int16 v14 = *v13;
          if (*v13)
          {
            while (1)
            {
              unint64_t v15 = *((void *)v14 + 1);
              if (v15 == v9)
              {
                if (sub_67CEC(v14 + 16, (unsigned __int8 *)v3))
                {
                  uint64_t v6 = &unk_64C000;
                  uint64_t v7 = (void *)&unk_64C000;
                  goto LABEL_80;
                }
              }
              else
              {
                if (v12 > 1)
                {
                  if (v15 >= v10) {
                    v15 %= v10;
                  }
                }
                else
                {
                  v15 &= v10 - 1;
                }
                if (v15 != v2)
                {
LABEL_19:
                  uint64_t v6 = &unk_64C000;
                  break;
                }
              }
              __int16 v14 = *(unsigned __int8 **)v14;
              if (!v14) {
                goto LABEL_19;
              }
            }
          }
        }
        uint64_t v7 = &unk_64C000;
      }
      __int16 v16 = (char *)operator new(0x30uLL);
      *(void *)__int16 v16 = 0;
      *((void *)v16 + 1) = v9;
      int v17 = v16 + 16;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_21E8C(v17, *(void **)v3, *(void *)(v3 + 8));
        uint64_t v4 = v7[37];
      }
      else
      {
        long long v18 = *(_OWORD *)v3;
        *((void *)v16 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)int v17 = v18;
      }
      *((_DWORD *)v16 + 10) = *(_DWORD *)(v3 + 24);
      float v19 = (float)(unint64_t)(v4 + 1);
      if (!v10 || (float)(*(float *)&dword_64C130 * (float)v10) < v19) {
        break;
      }
LABEL_70:
      uint64_t v35 = xmmword_64C110;
      uint64_t v36 = *(void **)(xmmword_64C110 + 8 * v2);
      if (v36)
      {
        *(void *)__int16 v16 = *v36;
      }
      else
      {
        *(void *)__int16 v16 = qword_64C120;
        qword_64C120 = (uint64_t)v16;
        *(void *)(v35 + 8 * v2) = &qword_64C120;
        if (!*(void *)v16) {
          goto LABEL_79;
        }
        unint64_t v37 = *(void *)(*(void *)v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v37 >= v10) {
            v37 %= v10;
          }
        }
        else
        {
          v37 &= v10 - 1;
        }
        uint64_t v36 = (void *)(xmmword_64C110 + 8 * v37);
      }
      *uint64_t v36 = v16;
LABEL_79:
      uint64_t v4 = v7[37] + 1;
      v7[37] = v4;
LABEL_80:
      v3 += 32;
      if (v3 == v5) {
        return;
      }
    }
    BOOL v20 = (v10 & (v10 - 1)) != 0;
    if (v10 < 3) {
      BOOL v20 = 1;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v19 / *(float *)&dword_64C130);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *((void *)v6 + 35);
    if (*(void *)&prime > v10) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)qword_64C128 / *(float *)&dword_64C130);
      if (v10 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)v6 + 35);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          unsigned __int8 v24 = operator new(8 * *(void *)&prime);
          os_log_t v25 = (void *)xmmword_64C110;
          *(void *)&xmmword_64C110 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *((int8x8_t *)v6 + 35) = prime;
          do
            *(void *)(xmmword_64C110 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = (void **)qword_64C120;
          if (qword_64C120)
          {
            unint64_t v28 = *(void *)(qword_64C120 + 8);
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_64C110 + 8 * v28) = &qword_64C120;
            for (i = *v27; i; unint64_t v28 = v34)
            {
              unint64_t v34 = i[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(void *)&prime) {
                  v34 %= *(void *)&prime;
                }
              }
              else
              {
                v34 &= *(void *)&prime - 1;
              }
              if (v34 != v28)
              {
                if (!*(void *)(xmmword_64C110 + 8 * v34))
                {
                  *(void *)(xmmword_64C110 + 8 * v34) = v27;
                  goto LABEL_61;
                }
                os_log_t *v27 = (void *)*i;
                *uint64_t i = **(void **)(xmmword_64C110 + 8 * v34);
                **(void **)(xmmword_64C110 + 8 * v34) = i;
                uint64_t i = v27;
              }
              unint64_t v34 = v28;
LABEL_61:
              uint64_t v27 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_65;
        }
        std::string::size_type v38 = (void *)xmmword_64C110;
        *(void *)&xmmword_64C110 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0;
        *((void *)v6 + 35) = 0;
      }
    }
LABEL_65:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v2 = v9 % v10;
      }
      else {
        unint64_t v2 = v9;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
    goto LABEL_70;
  }
}

void sub_175D10(_Unwind_Exception *a1)
{
  sub_175DBC(1, v1);
  sub_175D44();
  _Unwind_Resume(a1);
}

void sub_175D44()
{
  CFTypeRef v0 = (void **)qword_64C120;
  if (qword_64C120)
  {
    do
    {
      double v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      CFTypeRef v0 = v1;
    }
    while (v1);
  }
  unint64_t v2 = (void *)xmmword_64C110;
  *(void *)&xmmword_64C110 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_175DBC(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_175E1C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2 && MGGetBoolAnswer())
  {
    sub_1762EC();
    uint64_t v4 = qword_64C040;
    uint64_t v10 = qword_64C040;
    sub_46A4C(v11, a2);
    if (!*(void *)v4)
    {
      uint64_t v7 = (os_log_t *)sub_32A48(13);
      unint64_t v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "CoreTelephonyInterface.cpp";
        __int16 v14 = 1024;
        int v15 = 502;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    if (*(unsigned char *)(v4 + 8))
    {
      sub_13910();
      v11[3] = v10;
      sub_46A4C(&v12, (uint64_t)v11);
      operator new();
    }
    uint64_t v5 = (os_log_t *)sub_32A48(12);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "CoreTelephonyInterface.cpp";
        __int16 v14 = 1024;
        int v15 = 506;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", (uint8_t *)buf, 0x12u);
      }
    }
    sub_463E0((void *)v11[1]);
  }
}

void sub_176064(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf, long long a18, __int16 a19, __int16 a20,int a21,int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  if (a2 == 3)
  {
    os_log_t v25 = __cxa_begin_catch(a1);
    uint64_t v26 = (os_log_t *)sub_32A48(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v28 = v25[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a18) = 1024;
      DWORD1(a18) = v28;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 514;
      uint8x8_t v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v30 = v27;
      uint32_t v31 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
    }
  }
  else
  {
    uint64_t v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      char v33 = v32;
      unint64_t v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v36;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 514;
        uint8x8_t v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v30 = v35;
        uint32_t v31 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v37 = (os_log_t *)sub_32A48(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 514;
        uint8x8_t v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v30 = v38;
        uint32_t v31 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x175F14);
}

void sub_1762B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1762EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64C108, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_64C108)) {
      sub_1767C8();
    }
  }
}

void sub_176350(_Unwind_Exception *a1)
{
}

void sub_176368(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_32A48(12);
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        sub_3828CC(&__p, a1 + 1);
        uint64_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        unint64_t v8 = "CoreTelephonyInterface.cpp";
        __int16 v9 = 1024;
        int v10 = 484;
        __int16 v11 = 2080;
        uint64_t v12 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating Connected Ports %s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if ((uint64_t *)(v2 + 80) != a1 + 1) {
    sub_C6650((uint64_t **)(v2 + 80), (void *)a1[1], a1 + 2);
  }
  sub_13DB8((void *)v2);
}

uint64_t *sub_1764A0(uint64_t *result)
{
  uint64_t v1 = *result;
  *unint64_t result = 0;
  if (v1)
  {
    sub_463E0(*(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_176500(uint64_t *a1)
{
  uint64_t v2 = a1;
  sub_176368(a1);
  return sub_1764A0((uint64_t *)&v2);
}

void sub_176568(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(a1);
    long long v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 98;
      unint64_t v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    unsigned __int8 v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      uint64_t v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 98;
        unint64_t v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint8x8_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 98;
        unint64_t v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x176530);
}

void sub_1767C8()
{
}

void sub_176A28()
{
  sub_463E0(*v2);
  sub_E717C(v1);
  sub_60394(v0);
  operator delete();
}

uint64_t *sub_176AD4(uint64_t *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_1773E0(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_176B3C(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void *sub_176B50(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_176BD4()
{
  uint64_t v0 = qword_64C040;
  qword_64C040 = 0;
  if (v0)
  {
    uint64_t v3 = v0;
    uint64_t v1 = sub_13910();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      sub_176FA8((CFTypeRef *)v0);
    }
    else
    {
      uint64_t v4 = &v3;
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_177120;
      block[3] = &unk_623FF0;
      block[4] = &v4;
      dispatch_sync(v1, block);
    }
    sub_463E0(*(void **)(v0 + 88));
    sub_463E0(*(void **)(v0 + 56));
    sub_463E0(*(void **)(v0 + 32));
    uint64_t v2 = *(const void **)(v0 + 16);
    if (v2) {
      CFRelease(v2);
    }
    operator delete();
  }
}

void sub_176D40(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(a1);
    long long v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      unint64_t v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    unsigned __int8 v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      uint64_t v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        unint64_t v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint8x8_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        unint64_t v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x176CC8);
}

void sub_176FA8(CFTypeRef *a1)
{
  if (!*a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "CoreTelephonyInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 530;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  _CTServerConnectionUnregisterForNotification();
  _CTServerConnectionUnregisterForNotification();
  _CTServerConnectionUnregisterForNotification();
  _CTServerConnectionUnregisterForNotification();
  CFRelease(*a1);
  *a1 = 0;
}

void sub_177104(_Unwind_Exception *exception_object)
{
}

void sub_177120(uint64_t a1)
{
}

void sub_177188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v15 = __cxa_begin_catch(exception_object);
    __int16 v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    unint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      unsigned __int8 v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x177158);
}

uint64_t *sub_1773E0(uint64_t *result, uint64_t *a2, int a3, int a4)
{
  int v5 = result;
  uint64_t v6 = result + 1;
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    uint64_t v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      int v10 = a2;
LABEL_16:
      if (v8) {
        int v13 = v10;
      }
      else {
        int v13 = a2;
      }
      if (v8) {
        __int16 v11 = v10 + 1;
      }
      else {
        __int16 v11 = a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      __int16 v9 = (uint64_t *)*a2;
      do
      {
        int v10 = v9;
        __int16 v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v15 = a2;
      do
      {
        int v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        int v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t *)v17;
          int v18 = *(_DWORD *)(v17 + 28);
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_49:
      __int16 v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    __int16 v11 = a2 + 1;
    uint64_t v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        __int16 v11 = v12;
        uint64_t v12 = (uint64_t *)*v12;
        int v13 = v11;
        __int16 v14 = v11;
      }
      while (v12);
    }
    else
    {
      __int16 v14 = a2;
      do
      {
        os_log_t v19 = v14;
        __int16 v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v19);
      int v13 = a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    uint64_t v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t *)v20;
          int v21 = *(_DWORD *)(v20 + 28);
          if (v21 <= a3) {
            break;
          }
          uint64_t v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_49;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  int v13 = result + 1;
LABEL_44:
  unint64_t v22 = operator new(0x20uLL);
  v22[7] = a4;
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = v13;
  *uint64_t v6 = (uint64_t)v22;
  uint64_t v23 = *(void *)*v5;
  if (v23)
  {
    *int v5 = v23;
    unsigned __int8 v24 = (uint64_t *)*v6;
  }
  else
  {
    unsigned __int8 v24 = (uint64_t *)v22;
  }
  unint64_t result = sub_46D00((uint64_t *)v5[1], v24);
  ++v5[2];
  return result;
}

void sub_1775BC(uint64_t a1, const __CFString *a2, CFTypeRef cf)
{
  if (!a2)
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    unsigned __int8 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 561;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v5 = *(unsigned __int8 **)(a1 + 32);
  if (cf)
  {
    CFRetain(cf);
    sub_22084(&cfa, cf);
  }
  else
  {
    CFTypeRef cfa = 0;
  }
  uint64_t v6 = (os_log_t *)sub_32A48(12);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v35 = a2;
    char v36 = 0;
    sub_21B7C(v38, a2);
    if (SHIBYTE(v39) >= 0) {
      uint64_t v8 = v38;
    }
    else {
      uint64_t v8 = (void **)v38[0];
    }
    if (cfa)
    {
      CFStringRef v9 = CFCopyDescription(cfa);
      sub_20B40((uint64_t)&__p, v9);
      if (v9) {
        CFRelease(v9);
      }
      p_p = (const char *)&__p;
      if (v34 < 0) {
        p_p = (const char *)__p;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 567;
      __int16 v43 = 2080;
      uint64_t v44 = v8;
      __int16 v45 = 2080;
      unint64_t v46 = p_p;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received CoreTelephony Notification: [%s] with info: %s", buf, 0x26u);
      if (v34 < 0) {
        operator delete(__p);
      }
    }
    else
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 567;
      __int16 v43 = 2080;
      uint64_t v44 = v8;
      __int16 v45 = 2080;
      unint64_t v46 = "nil";
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received CoreTelephony Notification: [%s] with info: %s", buf, 0x26u);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
    sub_72924((uint64_t)&v35);
  }
  if (CFEqual(a2, kCTAudioVocoderInfoNotification))
  {
    if (cfa)
    {
      sub_1762EC();
      sub_174A74((uint64_t)buf, (const __CFDictionary **)&cfa);
      sub_178498((uint64_t)buf);
      goto LABEL_41;
    }
    uint64_t v26 = (os_log_t *)sub_32A48(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 571;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_64:
    os_log_t v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "Precondition failure.");
  }
  if (CFStringCompare(a2, kCTAudioSampleRateSwitchCompleteNotification, 0))
  {
    if (CFStringCompare(a2, kCTDaemonReadyNotification, 0))
    {
      if (CFEqual(a2, kCTConnectionInvalidatedNotification)) {
        void v5[8] = 0;
      }
    }
    else
    {
      void v5[8] = 1;
      unsigned __int8 v13 = atomic_load(v5 + 9);
      if (v13)
      {
        atomic_store(0, v5 + 9);
        std::string __p = v5;
        char v33 = 1;
        LODWORD(v35) = 0;
        v38[0] = v5;
        v38[1] = &v35;
        unint64_t v39 = &__p;
        sub_178FE0((uint64_t)v38);
      }
      sub_13DB8(v5);
    }
    goto LABEL_41;
  }
  if (!cfa)
  {
    os_log_t v28 = (os_log_t *)sub_32A48(13);
    uint8x8_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 576;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_64;
  }
  sub_1762EC();
  if (qword_64C100)
  {
    if (!cfa)
    {
      uint32_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }
    CFBooleanRef v11 = (const __CFBoolean *)sub_99744((const __CFDictionary *)cfa, kCTAudioSampleRateSwitchCompleteStatus);
    if (v11)
    {
      LOWORD(v11) = sub_20610(v11);
      int v12 = BYTE1(v11);
    }
    else
    {
      int v12 = 0;
    }
    unsigned int v14 = v11 | (v12 << 8);
    if (v14 <= 0x100) {
      LOBYTE(v14) = 0;
    }
    if (!(_BYTE)v14)
    {
      uint64_t v15 = sub_32A48(12);
      uint64_t v16 = sub_32A48(39);
      char v17 = 0;
      uint64_t v18 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v19 = *(void *)(v15 + 8);
      while (1)
      {
        uint64_t v20 = *(int *)&buf[4 * v18];
        char v21 = v17;
        if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
          break;
        }
        char v17 = 1;
        uint64_t v18 = 1;
        if (v21) {
          goto LABEL_50;
        }
      }
      if ((v19 & v20) == 0) {
        uint64_t v15 = v16;
      }
LABEL_50:
      unint64_t v22 = *(NSObject **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
        __int16 v41 = 1024;
        int v42 = 586;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sample rate switch did not complete, this most likely means we are on a VoWifi call, so dont wait for confirmation", buf, 0x12u);
      }
    }
    sub_1762EC();
    dispatch_semaphore_signal((dispatch_semaphore_t)qword_64C100);
  }
LABEL_41:
  if (cfa) {
    CFRelease(cfa);
  }
}

void sub_177C04(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, void *__p, uint64_t a17, uint64_t a18, long long buf, long long a20,__int16 a21,__int16 a22,int a23,int a24)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  sub_60394(&a15);
  if (a2 == 3)
  {
    os_log_t v27 = __cxa_begin_catch(a1);
    os_log_t v28 = (os_log_t *)sub_32A48(13);
    os_log_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      int v30 = v27[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a20) = 1024;
      DWORD1(a20) = v30;
      WORD4(a20) = 2080;
      *(void *)((char *)&a20 + 10) = "";
      a22 = 1024;
      a23 = 651;
      uint32_t v31 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v32 = v29;
      uint32_t v33 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v33);
    }
  }
  else
  {
    char v34 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      CFStringRef v35 = v34;
      char v36 = (os_log_t *)sub_32A48(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = v38;
        WORD6(a20) = 2080;
        *(void *)((char *)&a20 + 14) = "";
        HIWORD(a23) = 1024;
        a24 = 651;
        uint32_t v31 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v32 = v37;
        uint32_t v33 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v39 = (os_log_t *)sub_32A48(13);
      os_log_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = "";
        WORD6(a20) = 1024;
        *(_DWORD *)((char *)&a20 + 14) = 651;
        uint32_t v31 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v32 = v40;
        uint32_t v33 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1778E8);
}

void sub_177F08()
{
}

void sub_177F14()
{
}

void sub_177F20()
{
}

void sub_177F30()
{
}

void sub_177F38()
{
  unint64_t CommCenterInitializationState = _CTServerConnectionGetCommCenterInitializationState();
  int v1 = CommCenterInitializationState;
  unint64_t v2 = HIDWORD(CommCenterInitializationState);
  if (CommCenterInitializationState)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(12);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        uint64_t v8 = "CoreTelephonyInterface.cpp";
        __int16 v9 = 1024;
        int v10 = 404;
        __int16 v11 = 1024;
        int v12 = v1;
        __int16 v13 = 1024;
        int v14 = v2;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d _CTServerConnectionGetCommCenterInitializationState returned error: {domain, error} : {%d, %d}", buf, 0x1Eu);
      }
    }
  }
  int v5 = (os_log_t *)sub_32A48(12);
  uint64_t v6 = *v5;
  if (*v5)
  {
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v8 = "CoreTelephonyInterface.cpp";
      __int16 v9 = 1024;
      int v10 = 413;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
    }
  }
  operator delete();
}

void sub_1781FC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_178214(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    JUMPOUT(0x178204);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a2 == 3)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    char v21 = (os_log_t *)sub_32A48(13);
    os_log_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = v20[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v23;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 98;
      unsigned __int8 v24 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      os_log_t v25 = v22;
      uint32_t v26 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, v26);
    }
  }
  else
  {
    os_log_t v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v28 = v27;
      os_log_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v31;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 98;
        unsigned __int8 v24 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        os_log_t v25 = v30;
        uint32_t v26 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v32 = (os_log_t *)sub_32A48(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 98;
        unsigned __int8 v24 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        os_log_t v25 = v33;
        uint32_t v26 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x17817CLL);
}

void sub_178450()
{
}

void sub_178498(uint64_t a1)
{
  std::mutex::lock((std::mutex *)&unk_64C048);
  int v2 = *(unsigned __int8 *)(a1 + 4);
  if (BYTE4(xmmword_64C088)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (v3)
  {
    if ((BYTE4(xmmword_64C088) != 0) != (v2 != 0)) {
      goto LABEL_16;
    }
  }
  else if (xmmword_64C088 != *(_DWORD *)a1)
  {
LABEL_16:
    os_log_t v28 = 0;
    uint64_t v29 = 0;
    os_log_t v27 = &v28;
    if (!v4) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (*((double *)&xmmword_64C088 + 1) != *(double *)(a1 + 8)) {
    goto LABEL_16;
  }
  double v5 = *(double *)(a1 + 16);
  os_log_t v28 = 0;
  uint64_t v29 = 0;
  os_log_t v27 = &v28;
  if (dbl_64C098[0] == v5) {
    goto LABEL_52;
  }
  if (!v4)
  {
LABEL_17:
    if ((v2 != 0) == (BYTE4(xmmword_64C088) != 0)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_14:
  if (*(_DWORD *)a1 != xmmword_64C088) {
LABEL_18:
  }
    sub_178A88((uint64_t *)&v27, 0, 0);
LABEL_19:
  if (*(double *)(a1 + 8) != *((double *)&xmmword_64C088 + 1)) {
    sub_178A88((uint64_t *)&v27, 1, 1);
  }
  if (*(double *)(a1 + 16) != dbl_64C098[0]) {
    sub_178A88((uint64_t *)&v27, 2, 2);
  }
  long long v6 = *(_OWORD *)a1;
  dbl_64C098[0] = *(double *)(a1 + 16);
  xmmword_64C088 = v6;
  uint64_t v7 = sub_32A48(12);
  uint64_t v8 = sub_32A48(39);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_29;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_29:
  int v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = (uint64_t)v27;
    memset(&v30, 0, sizeof(v30));
    std::string::append(&v30, "{ ", 2uLL);
    if ((void **)v15 != &v28)
    {
      while (1)
      {
        std::to_string(&v31, *(_DWORD *)(v15 + 28));
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &v31;
        }
        else {
          uint64_t v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v31.__r_.__value_.__l.__size_;
        }
        std::string::append(&v30, (const std::string::value_type *)v16, size);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        uint64_t v18 = *(void **)(v15 + 8);
        if (v18)
        {
          do
          {
            uint64_t v19 = (void **)v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v19 = *(void ***)(v15 + 16);
            BOOL v3 = *v19 == (void *)v15;
            uint64_t v15 = (uint64_t)v19;
          }
          while (!v3);
        }
        if (v19 == &v28) {
          break;
        }
        std::string::append(&v30, ", ", 2uLL);
        uint64_t v15 = (uint64_t)v19;
      }
    }
    std::string::append(&v30, " }", 2uLL);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v30;
    }
    else {
      uint64_t v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 813;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v20;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Result of vocoder update was %s", buf, 0x1Cu);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
LABEL_52:
  std::mutex::unlock((std::mutex *)&unk_64C048);
  char v21 = &buf[8];
  *(_OWORD *)&buf[8] = 0uLL;
  *(void *)buf = &buf[8];
  if (v29)
  {
LABEL_53:
    if (qword_64C0B8)
    {
      sub_298DA4();
      operator new();
    }
  }
  else
  {
    uint64_t v22 = (uint64_t)v27;
    while ((void **)v22 != &v28)
    {
      if (*(_DWORD *)(v22 + 28) != *((_DWORD *)v21 + 7)) {
        goto LABEL_53;
      }
      int v23 = *(void **)(v22 + 8);
      uint64_t v24 = v22;
      if (v23)
      {
        do
        {
          uint64_t v22 = (uint64_t)v23;
          int v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v22 = *(void *)(v24 + 16);
          BOOL v3 = *(void *)v22 == v24;
          uint64_t v24 = v22;
        }
        while (!v3);
      }
      os_log_t v25 = (void *)*((void *)v21 + 1);
      if (v25)
      {
        do
        {
          uint32_t v26 = v25;
          os_log_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint32_t v26 = (void *)*((void *)v21 + 2);
          BOOL v3 = *v26 == (void)v21;
          char v21 = v26;
        }
        while (!v3);
      }
      char v21 = v26;
    }
  }
  sub_463E0(v28);
}

void sub_1789B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t *sub_178A88(uint64_t *result, int a2, int a3)
{
  int v4 = (uint64_t **)result;
  long long v6 = (uint64_t **)(result + 1);
  double v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    char v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_46CA8(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t sub_178B34(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  BOOL v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int v4 = a2 + 1;
  double v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      long long v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          char v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = v7;
        }
        else {
          uint64_t v12 = v3;
        }
        if (v6) {
          char v13 = v7 + 1;
        }
        else {
          char v13 = v3;
        }
      }
      else
      {
        uint64_t v12 = v3;
        char v13 = v3;
        if (v6)
        {
          char v13 = v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              int v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17) {
                break;
              }
              long long v6 = *v12;
              char v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            char v13 = v12 + 1;
            long long v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        int v14 = (uint64_t *)operator new(0x20uLL);
        *((_DWORD *)v14 + 7) = *((_DWORD *)v5 + 7);
        sub_46CA8((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          double v5 = v16;
        }
        while (!v10);
      }
      double v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_178C98(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void *sub_178CAC@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Vocoder update");
}

BOOL sub_178CBC@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    sub_56964();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);

  return sub_12053C(a2, 1920099684);
}

void sub_178D28(uint64_t a1)
{
  sub_4F750((void *)(a1 + 16));

  operator delete();
}

uint64_t sub_178D74(uint64_t a1)
{
  return a1;
}

void *sub_178DA0(void *result)
{
  int v1 = (void *)result[2];
  uint64_t v2 = result + 3;
  if (v1 != result + 3)
  {
    uint64_t v3 = result[1];
    do
    {
      unint64_t result = *(void **)(v3 + 120);
      if (result)
      {
        int v7 = *((_DWORD *)v1 + 7);
        unint64_t result = (void *)(*(uint64_t (**)(void *, int *))(*result + 48))(result, &v7);
      }
      int v4 = (void *)v1[1];
      if (v4)
      {
        do
        {
          double v5 = v4;
          int v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          double v5 = (void *)v1[2];
          BOOL v6 = *v5 == (void)v1;
          int v1 = v5;
        }
        while (!v6);
      }
      int v1 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

void sub_178E50(void **a1)
{
  sub_463E0(a1[3]);

  operator delete(a1);
}

void sub_178E8C(uint64_t a1)
{
}

uint64_t sub_178E94(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_624020;
  a2[1] = v2;
  return sub_178B34((uint64_t)(a2 + 2), (void *)(a1 + 16));
}

void *sub_178EC4(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_624020;
  v2[1] = v3;
  sub_178B34((uint64_t)(v2 + 2), (void *)(a1 + 16));
  return v2;
}

void sub_178F1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_178F30(uint64_t a1)
{
  *(void *)a1 = off_624020;
  sub_463E0(*(void **)(a1 + 24));

  operator delete();
}

uint64_t sub_178F98(uint64_t a1)
{
  *(void *)a1 = off_624020;
  sub_463E0(*(void **)(a1 + 24));
  return a1;
}

void sub_178FE0(uint64_t a1)
{
  if (!**(void **)a1)
  {
    double v5 = (os_log_t *)sub_32A48(13);
    BOOL v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 502;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", block, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(unsigned char *)(*(void *)a1 + 8))
  {
    int v1 = *(unsigned __int8 **)(a1 + 16);
    if (!**(_DWORD **)(a1 + 8))
    {
      sub_13910();
      *(void *)blocuint64_t k = *(void *)v1;
      block[8] = v1[8];
      operator new();
    }
    uint64_t v2 = sub_13910();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      sub_17971C(v1);
    }
    else
    {
      uint64_t v8 = v1;
      *(void *)blocuint64_t k = _NSConcreteStackBlock;
      *(void *)&block[8] = 0x40000000;
      *(void *)&block[16] = sub_1798D8;
      BOOL v10 = &unk_623F80;
      int v11 = &v8;
      dispatch_sync(v2, block);
    }
  }
  else
  {
    uint64_t v3 = (os_log_t *)sub_32A48(12);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 506;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", block, 0x12u);
    }
  }
}

void sub_17924C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(exception_object);
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      char v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    uint64_t v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      uint32_t v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        char v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        char v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x179174);
}

void sub_1794BC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    JUMPOUT(0x1794ACLL);
  }
  __cxa_free_exception(v16);
  if (a2 == 3)
  {
    os_log_t v19 = __cxa_begin_catch(a1);
    int v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(a11) = 136316162;
      *(void *)((char *)&a11 + 4) = "StandardUtilities.h";
      WORD6(a11) = 1024;
      *(_DWORD *)((char *)&a11 + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v22;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 514;
      uint32_t v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&a11, v25);
    }
  }
  else
  {
    uint32_t v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v27 = v26;
      uint64_t v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(a11) = 136316162;
        *(void *)((char *)&a11 + 4) = "StandardUtilities.h";
        WORD6(a11) = 1024;
        *(_DWORD *)((char *)&a11 + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v30;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 514;
        uint32_t v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      std::string v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a11) = 136315906;
        *(void *)((char *)&a11 + 4) = "StandardUtilities.h";
        WORD6(a11) = 1024;
        *(_DWORD *)((char *)&a11 + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 514;
        uint32_t v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x179174);
}

void sub_1794D4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1794E0);
  }
  JUMPOUT(0x1794ACLL);
}

void sub_1796EC()
{
}

void sub_1796F8()
{
}

void sub_179704()
{
}

void sub_179714()
{
}

void sub_17971C(unsigned __int8 *a1)
{
  uint64_t v1 = *(void *)a1;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)a1 + 9));
  if (a1[8] != (v2 & 1))
  {
    uint64_t v4 = sub_32A48(12);
    if (*(unsigned char *)(v4 + 8))
    {
      double v5 = *(NSObject **)v4;
      if (*(void *)v4)
      {
        if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
        {
          BOOL v6 = "True";
          int v7 = a1[8];
          int v14 = "CoreTelephonyInterface.cpp";
          int v13 = 136315650;
          if (!v7) {
            BOOL v6 = "False";
          }
          __int16 v15 = 1024;
          int v16 = 429;
          __int16 v17 = 2080;
          v18[0] = v6;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating TTY enabled state: %s", (uint8_t *)&v13, 0x1Cu);
        }
      }
    }
    unint64_t v8 = _CTServerConnectionSetTTYMode();
    int v9 = v8;
    unint64_t v10 = HIDWORD(v8);
    if (v8)
    {
      int v11 = (os_log_t *)sub_32A48(12);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315906;
          int v14 = "CoreTelephonyInterface.cpp";
          __int16 v15 = 1024;
          int v16 = 433;
          __int16 v17 = 1024;
          LODWORD(v18[0]) = v9;
          WORD2(v18[0]) = 1024;
          *(_DWORD *)((char *)v18 + 6) = v10;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d _CTServerConnectionSetTTYMode returned error: {domain, error} : {%d, %d}", (uint8_t *)&v13, 0x1Eu);
        }
      }
    }
    else
    {
      atomic_store(a1[8], (unsigned __int8 *)(v1 + 9));
    }
  }
}

void sub_1798D8(uint64_t a1)
{
}

void sub_17993C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      uint64_t v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x17990CLL);
}

void sub_179B94(unsigned __int8 *a1)
{
  if (a1) {
    operator delete();
  }
}

void sub_179C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      uint64_t v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x179BC4);
}

void *sub_179E84(void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_179F0C()
{
  uint64_t v0 = MGGetBoolAnswer();
  if ((v0 & 1) == 0)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(12);
    unsigned __int8 v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 136315394;
        double v5 = "CoreTelephonyInterface.cpp";
        __int16 v6 = 1024;
        int v7 = 706;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Baseband is not supported", (uint8_t *)&v4, 0x12u);
      }
    }
  }
  return v0;
}

double sub_179FE0(uint64_t a1)
{
  unsigned __int8 v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  double v3 = *(double *)(a1 + 80);
  int v4 = (os_log_t *)sub_32A48(12);
  double v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315650;
    unint64_t v8 = "CoreTelephonyInterface.cpp";
    __int16 v9 = 1024;
    int v10 = 723;
    __int16 v11 = 2048;
    double v12 = v3;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Vocoder rate is %f", (uint8_t *)&v7, 0x1Cu);
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_17A0D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_17A0E4(uint64_t a1)
{
  unsigned __int8 v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  double v3 = *(double *)(a1 + 88);
  int v4 = (os_log_t *)sub_32A48(12);
  double v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315650;
    unint64_t v8 = "CoreTelephonyInterface.cpp";
    __int16 v9 = 1024;
    int v10 = 733;
    __int16 v11 = 2048;
    double v12 = v3;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Vocoder hardware rate is %f", (uint8_t *)&v7, 0x1Cu);
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_17A1D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_17A1E8(uint64_t *a1, double a2)
{
  uint64_t v4 = sub_32A48(12);
  uint64_t v5 = sub_32A48(39);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if (*(void *)(v4 + 8))
  {
LABEL_9:
    __int16 v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v56 = 1024;
      int v57 = 741;
      __int16 v58 = 2048;
      double v59 = a2;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d +- CoreTelephonyInterface::confirmVocoderSampleRate(inSampleRate %f)", buf, 0x1Cu);
    }
  }
LABEL_12:
  if (!*((unsigned char *)a1 + 76))
  {
    __int16 v43 = (os_log_t *)sub_32A48(13);
    uint64_t v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v56 = 1024;
      int v57 = 743;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v12 = sub_32A48(12);
  uint64_t v13 = sub_32A48(39);
  char v14 = 0;
  uint64_t v15 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1;
    if (v18) {
      goto LABEL_19;
    }
  }
  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_19:
  os_log_t v19 = *(NSObject **)v12;
  if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    __int16 v56 = 1024;
    int v57 = 746;
    __int16 v58 = 2048;
    double v59 = a2;
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Confirming sample rate switch with CoreTelephony for sample rate %f Hz", buf, 0x1Cu);
  }
  dispatch_semaphore_t v20 = dispatch_semaphore_create(0);
  uint32_t v21 = a1[24];
  a1[24] = (uint64_t)v20;
  if (v21) {
    dispatch_release(v21);
  }
  uint64_t v22 = *a1;
  uint32_t v23 = (const void *)kCTAudioVocoderI2SClockRate;
  if (kCTAudioVocoderI2SClockRate) {
    CFRetain(kCTAudioVocoderI2SClockRate);
  }
  sub_14E44(&cf, v23);
  CFTypeRef v24 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v64 = v24;
  *(_DWORD *)buf = a2;
  CFNumberRef v65 = CFNumberCreate(0, kCFNumberIntType, buf);
  if (!v65)
  {
    unint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
  }
  v51[0] = &v64;
  v51[1] = 1;
  CFDictionaryRef v25 = sub_4D3D8((uint64_t)v51);
  CFDictionaryRef v26 = v25;
  CFTypeRef v52 = v25;
  uint64_t v53 = v22;
  if (v25) {
    CFRetain(v25);
  }
  CFTypeRef v54 = v26;
  if (!*(void *)v22)
  {
    unint64_t v47 = (os_log_t *)sub_32A48(13);
    uint64_t v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v56 = 1024;
      int v57 = 502;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    char v49 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v49, "Precondition failure.");
  }
  if (*(unsigned char *)(v22 + 8))
  {
    sub_13910();
    if (v54) {
      CFRetain(v54);
    }
    operator new();
  }
  os_log_t v27 = (os_log_t *)sub_32A48(12);
  os_log_t v28 = *v27;
  if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    __int16 v56 = 1024;
    int v57 = 506;
    _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v65) {
    CFRelease(v65);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (cf) {
    CFRelease(cf);
  }
  mach_absolute_time();
  uint64_t v29 = __udivti3();
  dispatch_time_t v30 = dispatch_walltime(0, 2000000000);
  intptr_t v31 = dispatch_semaphore_wait((dispatch_semaphore_t)a1[24], v30);
  mach_absolute_time();
  uint64_t v32 = __udivti3();
  uint64_t v33 = sub_32A48(12);
  uint64_t v34 = sub_32A48(39);
  char v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = (v32 - v29) / 0xF4240uLL;
  *(void *)buf = 0x100000002;
  uint64_t v38 = *(void *)(v33 + 8);
  while (1)
  {
    uint64_t v39 = *(int *)&buf[4 * v36];
    char v40 = v35;
    if (((v38 & v39) != 0) != ((*(void *)(v34 + 8) & v39) != 0)) {
      break;
    }
    char v35 = 1;
    uint64_t v36 = 1;
    if (v40) {
      goto LABEL_55;
    }
  }
  if ((v38 & v39) == 0) {
    uint64_t v33 = v34;
  }
LABEL_55:
  __int16 v41 = *(NSObject **)v33;
  if (*(void *)v33 && os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    __int16 v56 = 1024;
    int v57 = 765;
    __int16 v58 = 2048;
    double v59 = *(double *)&v37;
    __int16 v60 = 2048;
    double v61 = a2;
    __int16 v62 = 2048;
    intptr_t v63 = v31;
    _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d waited %llu milliseconds for sample rate confirmation notification for sample rate %f Hz (timed out = %ld)", buf, 0x30u);
  }
  int v42 = a1[24];
  a1[24] = 0;
  if (v42) {
    dispatch_release(v42);
  }
}

void sub_17A910(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v20);
  if (a2 == 3)
  {
    uint32_t v23 = __cxa_begin_catch(a1);
    CFTypeRef v24 = (os_log_t *)sub_32A48(13);
    os_log_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v26 = v23[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v26;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 514;
      os_log_t v27 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      os_log_t v28 = v25;
      uint32_t v29 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, v29);
    }
  }
  else
  {
    dispatch_time_t v30 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      intptr_t v31 = v30;
      uint64_t v32 = (os_log_t *)sub_32A48(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v34;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 514;
        os_log_t v27 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        os_log_t v28 = v33;
        uint32_t v29 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      char v35 = (os_log_t *)sub_32A48(13);
      os_log_t v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 514;
        os_log_t v27 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        os_log_t v28 = v36;
        uint32_t v29 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x17A598);
}

uint64_t sub_17AC2C(uint64_t a1)
{
  unsigned __int8 v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_17AC60()
{
  unint64_t v0 = _CTServerConnectionAudioSampleRateSwitchDidComplete();
  int v1 = v0;
  unint64_t v2 = HIDWORD(v0);
  if (v0)
  {
    uint64_t v3 = sub_32A48(12);
    uint64_t v4 = sub_32A48(39);
    char v5 = 0;
    uint64_t v6 = 0;
    *(void *)__int16 v11 = 0x100000002;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&v11[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1;
      if (v9) {
        goto LABEL_8;
      }
    }
    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    char v10 = *(NSObject **)v3;
    if (v10)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 v11 = 136315906;
        *(void *)&uint64_t v11[4] = "CoreTelephonyInterface.cpp";
        __int16 v12 = 1024;
        int v13 = 455;
        __int16 v14 = 1024;
        int v15 = v1;
        __int16 v16 = 1024;
        int v17 = v2;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d _CTServerConnectionAudioSampleRateSwitchDidComplete returned error: {domain, error} : {%d, %d}", v11, 0x1Eu);
      }
    }
  }
}

void sub_17ADAC(uint64_t a1)
{
}

void sub_17AE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v15 = __cxa_begin_catch(exception_object);
    __int16 v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      dispatch_semaphore_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    uint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      CFTypeRef v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        dispatch_semaphore_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        dispatch_semaphore_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x17ADE4);
}

void sub_17B07C(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 8);
  if (v1) {
    CFRelease(v1);
  }

  operator delete();
}

uint64_t sub_17B0D0(uint64_t a1)
{
  unsigned __int8 v12 = 0;
  uint64_t v10 = a1;
  __int16 v11 = &v12;
  if (!*(void *)a1)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 502;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", block, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v2 = sub_13910();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 9));
      *__int16 v11 = v5 & 1;
    }
    else
    {
      int v13 = &v10;
      *(void *)blocuint64_t k = _NSConcreteStackBlock;
      *(void *)&block[8] = 0x40000000;
      *(void *)&block[16] = sub_17B56C;
      int v15 = &unk_623F60;
      __int16 v16 = &v13;
      dispatch_sync(v2, block);
    }
  }
  else
  {
    uint64_t v3 = (os_log_t *)sub_32A48(12);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 506;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", block, 0x12u);
    }
  }
  return v12;
}

void sub_17B2FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v18);
  if (a2 == 3)
  {
    uint32_t v21 = __cxa_begin_catch(a1);
    uint64_t v22 = (os_log_t *)sub_32A48(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v24;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 514;
      os_log_t v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v26 = v23;
      uint32_t v27 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }
  else
  {
    os_log_t v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint32_t v29 = v28;
      dispatch_time_t v30 = (os_log_t *)sub_32A48(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v32;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 514;
        os_log_t v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v33 = (os_log_t *)sub_32A48(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 514;
        os_log_t v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x17B220);
}

uint64_t sub_17B56C(uint64_t result)
{
  int v1 = **(uint64_t ***)(result + 32);
  uint64_t v3 = *v1;
  unint64_t v2 = (unsigned char *)v1[1];
  LOBYTE(v3) = atomic_load((unsigned __int8 *)(v3 + 9));
  unsigned char *v2 = v3 & 1;
  return result;
}

void sub_17B58C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_549A4((uint64_t *)buf, a2, "", 53);
  uint64_t v5 = *(void *)(*(void *)buf + 192);
  uint64_t v13 = 0x7074727561737365;
  int v14 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v13);
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_549A4((uint64_t *)buf, a2, "", 57);
  uint64_t v7 = *(void *)(*(void *)buf + 192);
  uint64_t v13 = 0x7074727573716465;
  int v14 = 0;
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v13);
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v6 | v8)) {
    sub_549A4((uint64_t *)buf, a2, "", 62);
  }
  else {
    sub_549A4((uint64_t *)buf, a3, "", 63);
  }
  uint64_t v9 = *(void *)(*(void *)buf + 192);
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v9) {
    operator new();
  }
  uint64_t v10 = (os_log_t *)sub_32A48(13);
  __int16 v11 = *v10;
  if (*v10)
  {
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Call_N71.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 65;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [sidetoneDevice is NULL]: \"could not get sidetone device\"", buf, 0x12u);
    }
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  *(void *)exceptiouint64_t n = &off_6414D8;
  exception[2] = 2003329396;
}

void sub_17B7FC()
{
}

uint64_t sub_17B840()
{
  unint64_t v0 = (void *)sub_F820C();
  CFStringRef v3 = CFStringCreateWithCString(0, "Codec", 0x600u);
  char v4 = 1;
  uint64_t v1 = sub_F832C(v0, &v3);
  sub_72924((uint64_t)&v3);
  return v1;
}

void sub_17B8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_17B8C4()
{
}

void sub_17B8DC(uint64_t a1, unsigned int *a2)
{
  memset(__p, 0, sizeof(__p));
  sub_115434(v3, *(_DWORD *)(a1 + 8), a2, (unsigned int **)__p);
  operator new();
}

void sub_17BD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  __cxa_free_exception(v31);
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  a18 = &a13;
  sub_638B4((void ***)&a18);
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_17BE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (os_log_t *)sub_32A48(20);
  int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 114;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configuring splitter playback route controls", buf, 0x12u);
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  uint64_t v7 = *(void **)(*(void *)a2 + 24);
  if (v7 != (void *)(*(void *)a2 + 16))
  {
    unint64_t v45 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    do
    {
      sub_43F38(&v47, v7 + 4, "", 122);
      uint64_t v10 = (unsigned int *)v47;
      uint64_t v11 = *(void *)(v47 + 192);
      if (!v11)
      {
        uint64_t v38 = (os_log_t *)sub_32A48(13);
        uint64_t v39 = *v38;
        if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v10 + 144))(&v46, v10);
          uint64_t v40 = v46;
          sub_2417C(v52, v10[36]);
          if (v53 >= 0) {
            __int16 v41 = v52;
          }
          else {
            __int16 v41 = (std::__shared_weak_count **)v52[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 131;
          *(_WORD *)&unsigned char buf[18] = 2112;
          *(void *)&buf[20] = v40;
          *(_WORD *)&unsigned char buf[28] = 2080;
          *(void *)&unsigned char buf[30] = v41;
          _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [controlDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
          if (SHIBYTE(v53) < 0) {
            operator delete(v52[0]);
          }
          sub_72924((uint64_t)&v46);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = 2003329396;
      }
      uint64_t v12 = *(unsigned int *)(v47 + 144);
      int v13 = *(_DWORD *)(v47 + 264);
      int v14 = (*(uint64_t (**)(void))(*(void *)v11 + 120))(*(void *)(v47 + 192));
      int v15 = v14;
      if ((unint64_t)v8 >= v45)
      {
        uint64_t v16 = (v8 - v9) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          sub_60548();
        }
        if ((uint64_t)(v45 - (void)v9) >> 1 > v17) {
          unint64_t v17 = (uint64_t)(v45 - (void)v9) >> 1;
        }
        if (v45 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_46BF4(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        dispatch_semaphore_t v20 = (char *)(v18 + 4 * v16);
        *(_DWORD *)dispatch_semaphore_t v20 = v15;
        uint32_t v21 = v20 + 4;
        while (v8 != v9)
        {
          int v22 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v20 - 1) = v22;
          v20 -= 4;
        }
        unint64_t v45 = v18 + 4 * v19;
        if (v9) {
          operator delete(v9);
        }
        uint64_t v9 = v20;
        int v8 = v21;
      }
      else
      {
        *(_DWORD *)int v8 = v14;
        v8 += 4;
      }
      (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 248))(v52, v11, 1, v12);
      if (!v52[1] || v52[1]->__shared_owners_ == -1)
      {
        char v35 = (os_log_t *)sub_32A48(13);
        os_log_t v36 = *v35;
        if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 135;
          _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate mute control.\"", buf, 0x12u);
        }
        unint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "Unable to locate mute control.");
      }
      sub_166D40(&v46, (uint64_t)v52[0], v52[1]);
      os_log_t v23 = v50;
      if ((unint64_t)v50 >= v51)
      {
        uint64_t v25 = ((uint64_t)v50 - v49) >> 4;
        if ((unint64_t)(v25 + 1) >> 60) {
          sub_60548();
        }
        unint64_t v26 = (uint64_t)(v51 - v49) >> 3;
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        if (v51 - v49 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        *(void *)&unsigned char buf[32] = &v51;
        os_log_t v28 = (char *)sub_10724(v27);
        uint32_t v29 = &v28[16 * v25];
        *(void *)buf = v28;
        *(void *)&buf[8] = v29;
        *(void *)&unsigned char buf[24] = &v28[16 * v30];
        *(_OWORD *)uint32_t v29 = v46;
        *(void *)&_DWORD buf[16] = v29 + 16;
        sub_D2658(&v49, buf);
        int v24 = v50;
        sub_98E24((uint64_t)buf);
      }
      else
      {
        *uint64_t v50 = v46;
        int v24 = v23 + 1;
      }
      uint64_t v50 = v24;
      if (sub_1ECF1C(*(void *)(a2 + 112), *(_DWORD *)(a2 + 12), v12, v13))
      {
        uint64_t v31 = *(void *)(a3 + 16);
        uint64_t v32 = v47;
        uint64_t v33 = v7[9];
        char v34 = sub_24FF4C(*(void *)(v47 + 192));
        sub_1EA8F4((uint64_t *)buf, a2, v31, v32, v33, a4, v34);
        (*(void (**)(uint64_t))(*(void *)v11 + 120))(v11);
        operator new();
      }
      if (v52[1]) {
        std::__shared_weak_count::__release_weak(v52[1]);
      }
      if (v48) {
        sub_4636C(v48);
      }
      uint64_t v7 = (void *)v7[1];
    }
    while (v7 != (void *)(*(void *)a2 + 16));
  }
  operator new();
}

void sub_17CA74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,std::__shared_weak_count *a33)
{
  sub_1A97C8(a10);
  char v35 = *v33;
  if (*v33)
  {
    v34[5].__shared_weak_owners_ = (uint64_t)v35;
    operator delete(v35);
  }
  sub_FE920(a16);
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v34);
  operator delete(v36);
  operator delete();
}

uint64_t sub_17CC50(uint64_t a1, char **a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  CFStringRef v3 = (void *)(a1 + 80);
  *(void *)a1 = off_63F128;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  char v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    sub_D126C((uint64_t *)&v22);
    unint64_t v10 = *(void *)(a1 + 96);
    uint64_t v11 = *(_OWORD **)(a1 + 88);
    if ((unint64_t)v11 >= v10)
    {
      long long v21 = v22;
      uint64_t v13 = ((uint64_t)v11 - *v3) >> 4;
      if ((unint64_t)(v13 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v14 = v10 - *v3;
      uint64_t v15 = v14 >> 3;
      if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      void v23[4] = a1 + 96;
      unint64_t v17 = (char *)sub_10724(v16);
      unint64_t v18 = &v17[16 * v13];
      v23[0] = v17;
      v23[1] = v18;
      uint64_t v23[3] = &v17[16 * v19];
      *(_OWORD *)unint64_t v18 = v21;
      void v23[2] = v18 + 16;
      sub_D2658(v3, v23);
      uint64_t v12 = *(_OWORD **)(a1 + 88);
      sub_98E24((uint64_t)v23);
    }
    else
    {
      *uint64_t v11 = v22;
      uint64_t v12 = v11 + 1;
    }
    *(void *)(a1 + 88) = v12;
  }
  else
  {
    uint64_t v6 = v5 - v4;
    sub_17CE38((uint64_t *)(a1 + 80));
    if (v5 - v4 < 0) {
      sub_60548();
    }
    uint64_t v7 = v6 >> 4;
    uint64_t v8 = *(void *)(a1 + 96) - *v3;
    if (v8 >> 3 > (unint64_t)(v6 >> 4)) {
      uint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    sub_6E988(v3, v9);
    *(void *)(a1 + 88) = sub_67E24(a1 + 96, v4, v5, *(void **)(a1 + 88));
  }
  sub_D26B4(a1);
  return a1;
}

void sub_17CDFC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_4636C(a3);
  }
  sub_638B4((void ***)va);
  sub_FE920(v3);
  _Unwind_Resume(a1);
}

void sub_17CE38(uint64_t *a1)
{
  if (*a1)
  {
    sub_63970(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_17CE78(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_17CE9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_624108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_17CEF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_624108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_17CF10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(_DWORD *)(*a2 + 4) && *(_DWORD *)v2 == 1986291046)
  {
    sub_43F38(&v6, (uint64_t *)(*(void *)(v2 + 24) + 32), "", 160);
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v6 + 272))(buf);
    if (v7) {
      sub_4636C(v7);
    }
    operator new();
  }
  uint64_t v3 = (os_log_t *)sub_32A48(13);
  char v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    unint64_t v9 = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
    __int16 v10 = 1024;
    int v11 = 157;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Precondition failure.");
}

void sub_17D158()
{
}

uint64_t sub_17D1BC(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (unsigned __int16)sub_37C7C4(*(void *)(a2 + 112) + 8, *(_DWORD *)(a2 + 12));
  if (v3 <= 0x100) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  char v35 = (unsigned int **)a2;
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)a2 + 24) + 32);
  if (*(_DWORD *)(a2 + 8) != 1668509810)
  {
    sub_43F38((uint64_t *)buf, v5, "", 70);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 272))(v43);
    std::string::size_type size = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  sub_43F38((uint64_t *)&__p, v5, "", 69);
  (*(void (**)(unsigned char *__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 272))(buf);
  sub_135444(v43, buf);
  sub_8108((uint64_t *)buf);
  std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_) {
LABEL_8:
  }
    sub_4636C(size);
  if (!v4) {
    goto LABEL_64;
  }
  if (v44 < 2) {
    goto LABEL_64;
  }
  uint64_t v7 = *(void *)(*(void *)a2 + 24);
  if (*(void *)a2 + 16 == v7) {
    goto LABEL_64;
  }
LABEL_9:
  uint64_t v34 = 0;
  int v33 = 0;
  int v8 = 1;
  do
  {
    uint64_t v9 = *(void *)(v7 + 24);
    __int16 v10 = (uint64_t *)v43[1];
    v37[0] = *(void *)(v7 + 16);
    v37[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    }
    int v11 = *(std::__shared_weak_count **)(v7 + 40);
    uint64_t v38 = *(void *)(v7 + 32);
    uint64_t v39 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(void *)(v7 + 56);
    uint64_t v40 = *(void *)(v7 + 48);
    uint64_t v41 = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
    }
    long long v42 = *(_OWORD *)(v7 + 64);
    if (v10 != v43)
    {
      while (1)
      {
        uint64_t v13 = (std::__shared_weak_count *)v10[3];
        if (v13)
        {
          uint64_t v14 = std::__shared_weak_count::lock(v13);
          uint64_t v15 = v14;
          if (v14)
          {
            uint64_t v16 = v10[2];
            atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_4636C(v14);
          }
          else
          {
            uint64_t v16 = 0;
          }
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v15 = 0;
        }
        if (v39)
        {
          unint64_t v17 = std::__shared_weak_count::lock(v39);
          unint64_t v18 = v17;
          if (v17)
          {
            uint64_t v19 = v38;
            atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_4636C(v17);
            if (v15) {
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v19 = 0;
            if (v15)
            {
LABEL_30:
              dispatch_semaphore_t v20 = std::__shared_weak_count::lock(v15);
              if (!v20) {
                uint64_t v16 = 0;
              }
              if (!v18) {
                goto LABEL_39;
              }
              goto LABEL_36;
            }
          }
        }
        else
        {
          uint64_t v19 = 0;
          unint64_t v18 = 0;
          if (v15) {
            goto LABEL_30;
          }
        }
        uint64_t v16 = 0;
        dispatch_semaphore_t v20 = 0;
        if (!v18) {
          goto LABEL_39;
        }
LABEL_36:
        long long v21 = std::__shared_weak_count::lock(v18);
        if (v21)
        {
          BOOL v22 = v16 == v19;
          sub_4636C(v21);
          if (!v20) {
            goto LABEL_41;
          }
LABEL_40:
          sub_4636C(v20);
          goto LABEL_41;
        }
LABEL_39:
        BOOL v22 = v16 == 0;
        if (v20) {
          goto LABEL_40;
        }
LABEL_41:
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        if (v15) {
          std::__shared_weak_count::__release_weak(v15);
        }
        if (!v22)
        {
          __int16 v10 = (uint64_t *)v10[1];
          if (v10 != v43) {
            continue;
          }
        }
        goto LABEL_49;
      }
    }
    BOOL v22 = 0;
LABEL_49:
    sub_125D44(v37);
    sub_43F38((uint64_t *)buf, (uint64_t *)(v7 + 16), "", 80);
    int v23 = *(_DWORD *)(*(void *)buf + 144);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v23 == 1885433888)
    {
      sub_43F38((uint64_t *)buf, (uint64_t *)(v7 + 32), "", 82);
      int v24 = *(_DWORD *)(*(void *)buf + 144);
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      v33 |= v24 == 1885888867;
      HIDWORD(v34) |= v24 != 1885888867;
    }
    else
    {
      sub_43F38((uint64_t *)buf, (uint64_t *)(v7 + 16), "", 91);
      int v25 = *(_DWORD *)(*(void *)buf + 144);
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      LODWORD(v34) = (v25 == 1885433443) | v34;
    }
    v8 &= v22;
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (*v35 + 4 != (unsigned int *)v7);
  if (v8 & HIDWORD(v34))
  {
    uint64_t v26 = *((void *)*v35 + 4);
    if (v44 == v26 || (uint64_t v27 = 0, v44 + 1 == v26) && ((v33 | v34) & 1) != 0) {
      uint64_t v27 = 1;
    }
  }
  else
  {
LABEL_64:
    uint64_t v27 = 0;
  }
  uint64_t v28 = sub_32A48(19);
  if (*(unsigned char *)(v28 + 8))
  {
    uint32_t v29 = *(NSObject **)v28;
    if (*(void *)v28)
    {
      if (os_log_type_enabled(*(os_log_t *)v28, OS_LOG_TYPE_DEBUG))
      {
        sub_3825EC(&__p, *v35);
        uint64_t v30 = "doesn't handle";
        *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        if (v27) {
          uint64_t v30 = "handles";
        }
        *(_DWORD *)buf = 136315906;
        *(_DWORD *)&buf[14] = 105;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        __int16 v46 = 2080;
        uint64_t v47 = v30;
        __int16 v48 = 2080;
        uint64_t v49 = p_p;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoutingHandler_SplitterPlayback %s the given route %s.", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_8108(v43);
  return v27;
}

void sub_17D71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_17D780()
{
}

void sub_17D798(void *a1, AudioObjectID a2, CFTypeRef *a3)
{
  CFStringRef v6 = (const __CFString *)*a3;
  if (*a3) {
    CFRetain(*a3);
  }
  *a1 = 0;
  a1[1] = 0;
  if (CFEqual(v6, @"Codec")) {
    operator new();
  }
  if (CFEqual(v6, @"Baseband Voice")) {
    operator new();
  }
  if (CFEqual(v6, @"USB Audio Output")) {
    operator new();
  }
  if (CFEqual(v6, @"USB IDAM")) {
    operator new();
  }
  if (CFEqual(v6, @"Speaker")) {
    operator new();
  }
  if (CFEqual(v6, @"AppleSongbirdDSP")) {
    operator new();
  }
  if (CFEqual(v6, @"PuffinInput")) {
    operator new();
  }
  if (CFEqual(v6, @"PuffinOutput")) {
    operator new();
  }
  if (CFEqual(v6, @"Actuator")) {
    operator new();
  }
  *(void *)&inAddress.mSelector = @"HP16Mic";
  if (sub_17F70C(v6, @"AOP Audio-1", (CFStringRef *)&inAddress)) {
    operator new();
  }
  *(void *)&inAddress.mSelector = @"DigitalMic";
  std::string __p = @"Mic";
  if (sub_17F86C(v6, @"Digital Mic", (CFStringRef *)&inAddress, (CFStringRef *)&__p)) {
    operator new();
  }
  *(void *)&inAddress.mSelector = @"Flicker";
  std::string __p = @"Penrose";
  if (sub_17F86C(v6, @"Hawking", (CFStringRef *)&inAddress, (CFStringRef *)&__p)) {
    operator new();
  }
  if (CFEqual(v6, @"Halogen")) {
    operator new();
  }
  *(void *)&inAddress.mSelector = @"AudioDebug";
  std::string __p = @"AudioDebug2";
  if (sub_17F86C(v6, @"MaggieDebug", (CFStringRef *)&inAddress, (CFStringRef *)&__p))
  {
    if (qword_64A238 != -1) {
      dispatch_once(&qword_64A238, &stru_61F710);
    }
    if (byte_64A228 || byte_64A229) {
      operator new();
    }
  }
  *(void *)&inAddress.mSelector = @"DSP Debug2";
  if (sub_17F70C(v6, @"DSP Debug1", (CFStringRef *)&inAddress)) {
    operator new();
  }
  if (CFEqual(v6, @"Haptic Debug"))
  {
    if (qword_64A238 != -1) {
      dispatch_once(&qword_64A238, &stru_61F710);
    }
    if (byte_64A228 || byte_64A229) {
      operator new();
    }
  }
  if (CFEqual(v6, @"Virtual eARC")) {
    operator new();
  }
  if (CFEqual(v6, @"Squid Audio")) {
    operator new();
  }
  if (CFEqual(v6, @"HPMic")) {
    operator new();
  }
  if (CFEqual(v6, @"Receiver")) {
    operator new();
  }
  if (CFEqual(v6, @"LPMicInjection")) {
    operator new();
  }
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef v7 = *a3;
  if (*a3) {
    CFRetain(*a3);
  }
  *(void *)&inData.mSelector = 0x676C6F627472616ELL;
  inData.mElement = 0;
  UInt32 ioDataSize = 4;
  int outData = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(a2, &inData, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(7);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&__p, PropertyData);
      int v11 = v18 >= 0 ? &__p : (void **)__p;
      inAddress.mSelector = 136316418;
      *(void *)&inAddress.mScope = "DeviceFactory_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 216;
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = PropertyData;
      *(_WORD *)&void v26[4] = 2080;
      *(void *)&v26[6] = v11;
      __int16 v27 = 1024;
      AudioObjectID v28 = a2;
      v29[0] = 2112;
      *(void *)&v29[1] = v7;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') getting transport type for PhysicalDevice with AudioObjectID %u and UID \"%@\"", (uint8_t *)&inAddress, 0x32u);
      if (v18 < 0) {
        operator delete(__p);
      }
    }
    goto LABEL_67;
  }
  if (outData > 1835169138)
  {
    if (outData <= 1937011306)
    {
      if (outData == 1835169139) {
        operator new();
      }
      if (outData == 1853189228) {
        operator new();
      }
      int v12 = 1885563168;
    }
    else
    {
      if (outData > 1970496031)
      {
        if (outData == 1970496032) {
          operator new();
        }
        if (outData == 1986818665) {
          operator new();
        }
        goto LABEL_67;
      }
      if (outData == 1937011307) {
        operator new();
      }
      int v12 = 1953002862;
    }
    if (outData == v12) {
      operator new();
    }
    goto LABEL_67;
  }
  if (outData <= 1667463019)
  {
    switch(outData)
    {
      case 1634300528:
        operator new();
      case 1651275109:
        uint64_t v13 = sub_1DDDF0(a2);
        sub_18078C(&inAddress, v13);
      case 1667463012:
        goto LABEL_82;
    }
  }
  else
  {
    if (outData <= 1685090931)
    {
      if (outData != 1667463020)
      {
        if (outData == 1668506482 && sub_20AD60()) {
          operator new();
        }
        goto LABEL_67;
      }
LABEL_82:
      operator new();
    }
    if (outData == 1685090932 || outData == 1751412073) {
      operator new();
    }
  }
LABEL_67:
  *(_OWORD *)a1 = 0uLL;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v14 = (os_log_t *)sub_32A48(7);
  uint64_t v15 = *v14;
  if (*v14)
  {
    if (os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v16 = *a3;
      inAddress.mSelector = 136315906;
      *(void *)&inAddress.mScope = "DeviceFactory_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 306;
      __int16 v25 = 2112;
      *(void *)uint64_t v26 = v16;
      *(_WORD *)&v26[8] = 1024;
      *(_DWORD *)&void v26[10] = a2;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Could not create PhysicalDevice from UID: \"%@\", AudioObjectID: %u", (uint8_t *)&inAddress, 0x22u);
    }
  }
}

void sub_17EFD8()
{
}

void sub_17F29C()
{
  __cxa_free_exception(v0);
  uint64_t v3 = v1[83];
  v1[83] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1A97C8(v2);
  sub_1A980C(v1 + 63);
  uint64_t v4 = v1[62];
  v1[62] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_43456C((uint64_t)v1);
  operator delete();
}

void sub_17F2B4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_181EC8(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x17F4E4);
}

void sub_17F2D4()
{
}

void sub_17F2E4()
{
  sub_43456C(v0);
  JUMPOUT(0x17F4C8);
}

void sub_17F3BC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_181EC8(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x17F4E4);
}

void sub_17F3DC()
{
}

void sub_17F3F0()
{
  sub_1A97C8(v1);
  sub_1A980C(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 496);
  *(void *)(v0 + 496) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_43456C(v0);
  operator delete(v0, 0x10F3C4031F6333ELL);
  JUMPOUT(0x17F4DCLL);
}

void sub_17F3F8()
{
}

void sub_17F414(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x17F4E4);
}

void sub_17F4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_6393C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_17F4EC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17F5D4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17F5E8(_Unwind_Exception *a1)
{
}

void sub_17F5FC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17F6E4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17F6F8(_Unwind_Exception *a1)
{
}

BOOL sub_17F70C(const __CFString *a1, const __CFString *a2, CFStringRef *a3)
{
  return CFEqual(a1, a2) || CFEqual(a1, *a3);
}

void sub_17F75C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17F844(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17F858(_Unwind_Exception *a1)
{
}

BOOL sub_17F86C(const __CFString *a1, const __CFString *a2, CFStringRef *a3, CFStringRef *a4)
{
  return CFEqual(a1, a2)
      || CFEqual(a1, *a3)
      || CFEqual(a1, *a4);
}

void sub_17F8DC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17F9C4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17F9D8(_Unwind_Exception *a1)
{
}

void sub_17F9EC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17FAD4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17FAE8(_Unwind_Exception *a1)
{
}

void sub_17FAFC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17FBE4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17FBF8(_Unwind_Exception *a1)
{
}

uint64_t sub_17FC0C(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_1D3108(a1, a2, a3) = &off_624678;
  uint64_t v4 = (os_log_t *)sub_32A48(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    int v8 = "Device_BasicDSP_Debug.h";
    __int16 v9 = 1024;
    int v10 = 32;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating Debug device", (uint8_t *)&v7, 0x12u);
  }
  return a1;
}

void sub_17FCF0(_Unwind_Exception *a1)
{
  sub_FBDB8(v1);
  _Unwind_Resume(a1);
}

void sub_17FD04(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17FDEC(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17FE00(_Unwind_Exception *a1)
{
}

void sub_17FE14(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_17FEFC(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_17FF10(_Unwind_Exception *a1)
{
}

uint64_t sub_17FF24(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_1D3108(a1, a2, a3) = &off_6248F0;
  uint64_t v4 = (os_log_t *)sub_32A48(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    int v8 = "Device_WatchHapticDebug_Aspen.h";
    __int16 v9 = 1024;
    int v10 = 30;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating Watch Haptic Debug device", (uint8_t *)&v7, 0x12u);
  }
  return a1;
}

void sub_180008(_Unwind_Exception *a1)
{
  sub_FBDB8(v1);
  _Unwind_Resume(a1);
}

void sub_18001C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180104(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180118(_Unwind_Exception *a1)
{
}

void sub_18012C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180214(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180228(_Unwind_Exception *a1)
{
}

void sub_18023C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180324(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180338(_Unwind_Exception *a1)
{
}

void sub_18034C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180434(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180448(_Unwind_Exception *a1)
{
}

void sub_18045C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180544(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180558(_Unwind_Exception *a1)
{
}

void sub_18056C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180654(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180668(_Unwind_Exception *a1)
{
}

void sub_18067C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180764(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180778(_Unwind_Exception *a1)
{
}

void sub_18078C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180874(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180888(_Unwind_Exception *a1)
{
}

void sub_18089C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180984(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180998(_Unwind_Exception *a1)
{
}

void sub_1809AC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180A94(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180AA8(_Unwind_Exception *a1)
{
}

void sub_180ABC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180BA4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180BB8(_Unwind_Exception *a1)
{
}

void sub_180BCC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180CB4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180CC8(_Unwind_Exception *a1)
{
}

void sub_180CDC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180DC4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180DD8(_Unwind_Exception *a1)
{
}

void sub_180DEC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180ED4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180EE8(_Unwind_Exception *a1)
{
}

void sub_180EFC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_180FE4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_180FF8(_Unwind_Exception *a1)
{
}

void sub_18100C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1810F4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_181108(_Unwind_Exception *a1)
{
}

void sub_18111C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_181204(void *a1)
{
  __cxa_begin_catch(a1);
  sub_181EC8(v1);
  __cxa_rethrow();
}

void sub_181218(_Unwind_Exception *a1)
{
}

uint64_t sub_181230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181250(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181290(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_1812B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1812F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181310(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181350(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181370(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1813B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_1813D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181430(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181470(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181490(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1814D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_1814F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181530(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181550(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181590(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_1815B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1815F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181610(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181670(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1816B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_1816D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181710(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181730(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181770(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181790(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1817D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_1817F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181850(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_18188C()
{
  return 1;
}

void sub_181894(void *a1)
{
  sub_FBDB8(a1);

  operator delete();
}

uint64_t sub_1818D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_1818F4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181934(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181954(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181990()
{
  return 1;
}

void sub_181998(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1819A4()
{
  return 1;
}

void sub_1819AC(void *a1)
{
  sub_FBDB8(a1);

  operator delete();
}

uint64_t sub_1819EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181A0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181A4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181A6C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181AAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181ACC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181B0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181B2C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181B8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181BCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181BEC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181C2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181C4C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181C8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181CAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181CEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181D0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181D4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181D6C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181DAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181DCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181E0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181E2C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_181E6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_181E8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_181EC8(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  unint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 304))(v2);
  if (a1)
  {
    int v4 = (int)result;
    uint64_t v5 = (unint64_t *)qword_669B38;
    int v7 = &v7;
    int v8 = &v7;
    uint64_t v9 = 0;
    CFStringRef v6 = operator new(0x18uLL);
    v6[1] = &v7;
    v6[2] = a1;
    *CFStringRef v6 = &v7;
    int v7 = v6;
    int v8 = v6;
    uint64_t v9 = 1;
    sub_181F8C(v5, &v7, v4);
    return sub_45F50(&v7);
  }
  return result;
}

void sub_181F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_45F50((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_181F8C(unint64_t *a1, void *a2, int a3)
{
  if (a2[2])
  {
    if (a3)
    {
      sub_13910();
      *(void *)unint64_t v17 = v17;
      *(void *)&v17[8] = v17;
      *(void *)&char v17[16] = 0;
      uint64_t v4 = a2[2];
      if (v4)
      {
        uint64_t v6 = *a2;
        uint64_t v5 = (uint64_t *)a2[1];
        uint64_t v7 = *v5;
        *(void *)(v7 + 8) = *(void *)(*a2 + 8);
        **(void **)(v6 + 8) = v7;
        uint64_t v8 = *(void *)v17;
        *(void *)(*(void *)v17 + 8) = v5;
        *uint64_t v5 = v8;
        *(void *)(v6 + 8) = v17;
        *(void *)unint64_t v17 = v6;
        *(void *)&char v17[16] = v4;
        a2[2] = 0;
      }
      operator new();
    }
    if ((sub_46FF9C(a1) & 1) == 0)
    {
      uint64_t v9 = (os_log_t *)sub_32A48(13);
      int v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unint64_t v17 = 136315394;
          *(void *)&v17[4] = "ObjectDestructionManager.h";
          *(_WORD *)&unsigned char v17[12] = 1024;
          *(_DWORD *)&v17[14] = 72;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event", v17, 0x12u);
        }
      }
    }
    while (a2[2])
    {
      int v11 = (uint64_t *)a2[1];
      uint64_t v12 = v11[2];
      if (!v12)
      {
        uint64_t v14 = (os_log_t *)sub_32A48(13);
        uint64_t v15 = *v14;
        if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v17 = 136315394;
          *(void *)&v17[4] = "ObjectDestructionManager.h";
          *(_WORD *)&unsigned char v17[12] = 1024;
          *(_DWORD *)&v17[14] = 149;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inObject is NULL]: \"Null object\"", v17, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Null object");
      }
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      uint64_t v13 = *v11;
      *(void *)(v13 + 8) = v11[1];
      *(void *)v11[1] = v13;
      --a2[2];
      operator delete(v11);
    }
  }
}

void sub_1822B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1822DC()
{
}

void sub_182490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_45F50((uint64_t *)va);
  if (v2)
  {
    sub_45F50(v2);
    operator delete();
  }
  _Unwind_Resume(a1);
}

void sub_1824F8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_11A358(&v4, *(void *)(a1 + 24), a1 + 16);
  uint64_t v3 = std::string::insert(&v4, 0, "Destroying core object(s): ", 0x1BuLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_182570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18258C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string v4 = (unint64_t *)qword_669B38;
  if (atomic_load((unint64_t *)qword_669B38))
  {
    if ((sub_46FF9C((unint64_t *)qword_669B38) & 1) == 0)
    {
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
          __int16 v19 = 1024;
          int v20 = 124;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mExecutionThread has been set outside of this command's execution\"", buf, 0x12u);
        }
      }
    }
  }
  if (sub_46FF9C(v4))
  {
    uint64_t v8 = sub_32A48(13);
    uint64_t v9 = sub_32A48(15);
    char v10 = 0;
    uint64_t v11 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1;
      if (v14) {
        goto LABEL_13;
      }
    }
    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_13:
    uint64_t v15 = *(NSObject **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v19 = 1024;
      int v20 = 127;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Called recursively", buf, 0x12u);
    }
  }
  v17[0] = off_624170;
  v17[1] = v4;
  v17[3] = v17;
  sub_528DC(buf, 0, (uint64_t)v17);
  sub_4F750(v17);
  atomic_store((unint64_t)pthread_self(), v4);
  sub_181F8C(v4, (void *)(a1 + 16), 0);
  sub_12053C(a2, 1920099684);
  return sub_52588((uint64_t)buf);
}

void sub_1827BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1827F8(uint64_t result)
{
  return result;
}

uint64_t sub_18280C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_624170;
  a2[1] = v2;
  return result;
}

void *sub_182830(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = off_624170;
  result[1] = v3;
  return result;
}

void sub_182878()
{
}

void sub_182890(void *a1)
{
  sub_1828C8(a1);

  operator delete();
}

void *sub_1828C8(void *a1)
{
  uint64_t v2 = a1 + 2;
  if (a1[4])
  {
    uint64_t v3 = sub_32A48(13);
    uint64_t v4 = sub_32A48(15);
    char v5 = 0;
    uint64_t v6 = 0;
    *(void *)std::string __p = 0x100000002;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&__p[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1;
      if (v9) {
        goto LABEL_8;
      }
    }
    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    char v10 = *(NSObject **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = a1[3];
      memset(&v17, 0, sizeof(v17));
      std::string::append(&v17, "{ ", 2uLL);
      if ((void *)v11 != v2)
      {
        while (1)
        {
          uint64_t v12 = *(os_unfair_lock_s **)(v11 + 16);
          if (v12) {
            sub_4F64((uint64_t)__p, v12 + 2);
          }
          else {
            sub_21C8C(__p, "NULL");
          }
          if (SBYTE3(v20) >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = *(const std::string::value_type **)__p;
          }
          if (SBYTE3(v20) >= 0) {
            std::string::size_type v14 = BYTE3(v20);
          }
          else {
            std::string::size_type v14 = *(void *)&__p[8];
          }
          std::string::append(&v17, v13, v14);
          if (SBYTE3(v20) < 0) {
            operator delete(*(void **)__p);
          }
          uint64_t v11 = *(void *)(v11 + 8);
          if ((void *)v11 == v2) {
            break;
          }
          std::string::append(&v17, ", ", 2uLL);
        }
      }
      std::string::append(&v17, " }", 2uLL);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v17;
      }
      else {
        uint64_t v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "ObjectDestructionManager.h";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 115;
      __int16 v19 = 2080;
      int v20 = v15;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Destructor called without an intervening call to Execute. Contained objects (%s) will be leaked!.", __p, 0x1Cu);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_45F50(v2);
  return a1;
}

void sub_182B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_564E4(exception_object);
}

void sub_182B6C()
{
  sub_182BE8((uint64_t)v0);
  sub_402E04(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_182BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_182BE8(uint64_t a1)
{
  if (!*(unsigned char *)(sub_6C174(a1) + 4)) {
    *(unsigned char *)(a1 + 4) = 1;
  }
  *(_DWORD *)a1 = 1953460273;
  if (!*(unsigned char *)(a1 + 12)) {
    *(unsigned char *)(a1 + 12) = 1;
  }
  *(_DWORD *)(a1 + 8) = 1;
  LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = 1;
  sub_8732C((char *)(a1 + 24), (char *)&__p, (uint64_t)__p.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
  __p.__pn_.__r_.__value_.__r.__words[0] = 0x200000001;
  sub_8732C((char *)(a1 + 48), (char *)&__p, (uint64_t)&__p.__pn_.__r_.__value_.__l.__size_, 2uLL);
  *(void *)(a1 + 72) = 0x101010101000101;
  *(_WORD *)(a1 + 84) = 257;
  *(_DWORD *)(a1 + 88) = 16843008;
  if (!*(unsigned char *)(a1 + 708)) {
    *(unsigned char *)(a1 + 708) = 1;
  }
  *(_DWORD *)(a1 + 704) = 2;
  *(_DWORD *)(a1 + 304) = -1047527424;
  *(unsigned char *)(a1 + 308) = 1;
  *(_DWORD *)(a1 + 340) = 1103101952;
  *(unsigned char *)(a1 + 344) = 1;
  *(_DWORD *)(a1 + 364) = 0;
  *(unsigned char *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 372) = 0;
  *(unsigned char *)(a1 + 376) = 1;
  *(_DWORD *)(a1 + 356) = 0;
  *(unsigned char *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 420) = 0;
  *(unsigned char *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 380) = -1040187392;
  *(unsigned char *)(a1 + 384) = 1;
  *(_DWORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 316) = 1;
  *(_DWORD *)(a1 + 428) = 16843009;
  sub_21C8C(&v6, "graph_configurations.plist");
  sub_460658(&__p, &v6);
  sub_45D7BC((uint64_t)v32, (uint64_t)&__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  sub_6CEC4((std::string *)(a1 + 432), &v33);
  sub_6CFE4(a1 + 512, (uint64_t)v32);
  *(unsigned char *)(a1 + 121) = 1;
  sub_21C8C(&v29, "speaker_protection");
  sub_21C8C(&v6, "speaker_hal");
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_21C8C(v10, "speaker_hal");
  sub_21C8C(v11, "speaker_hal");
  memset(&v11[3], 0, 24);
  int v12 = 1684434036;
  LODWORD(v38.__r_.__value_.__l.__data_) = 1936749683;
  v38.__r_.__value_.__l.__size_ = 0;
  std::string::size_type v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  v44.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v13 = (char *)operator new(0x10uLL);
  std::string::size_type v14 = v13;
  uint64_t v2 = v13 + 16;
  uint64_t v15 = v13 + 16;
  sub_6D16C((uint64_t)v13, 1936749683, 0);
  v19[0] = 0;
  v19[1] = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  std::string::size_type v14 = v2;
  char v18 = v19;
  long long v21 = 0;
  BOOL v22 = 0;
  int v20 = 0;
  uint64_t v3 = operator new(0x10uLL);
  int v20 = v3;
  _OWORD *v3 = xmmword_4E78D0;
  long long v21 = v3 + 1;
  BOOL v22 = v3 + 1;
  char v23 = 0;
  char v24 = 0;
  memset(v25, 0, sizeof(v25));
  uint64_t v26 = 0;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v44.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v25, (int *)&v44, 3);
  char v27 = 0;
  uint64_t v28 = 0;
  sub_6D224(&__p, (long long *)&v29, (long long *)&v6);
  sub_6D2A0((uint64_t)v30, (unsigned __int8 *)&__p, 1);
  sub_6D31C(a1 + 640, (uint64_t *)v30);
  sub_6C7E4(v31);
  uint64_t v4 = v30[0];
  v30[0] = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_6C878((uint64_t)&v40);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  sub_6C878((uint64_t)&v6);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_21C8C(&v6, "");
  sub_21C8C(v30, "");
  sub_21C8C(&v44, off_648B50);
  sub_21C8C(&v29, "AU");
  sub_21C8C(&v38, off_648B48[0]);
  sub_6D364((char *)&__p, (long long *)&v6, (uint64_t)v30, &v44, &v29, &v38);
  sub_6D600(a1 + 560, (long long *)&__p);
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  sub_6C7E4((void *)v32[2]);
  char v5 = v32[0];
  v32[0] = 0;
  if (v5) {
    operator delete(v5);
  }
}

void sub_1830B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (*(char *)(v73 - 57) < 0) {
    operator delete(*(void **)(v73 - 80));
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_6D7D4((uint64_t)&a65);
  sub_6C63C(v72);
  _Unwind_Resume(a1);
}

void sub_1832A8()
{
  sub_182BE8((uint64_t)v0);
  sub_402E04(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_183310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_183324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = a1 + 8;
  char v6 = (*(uint64_t (**)(uint64_t))(v4 + 16))(a1 + 8);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)a2;
  if (a1 + 136 != a2) {
    sub_183404((uint64_t **)(a1 + 144), *(void **)(a2 + 8), (void *)(a2 + 16));
  }
  sub_13910();
  operator new();
}

void sub_1833E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t **sub_183404(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    char v6 = *result;
    uint64_t v7 = result[1];
    *unint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    __int16 v19 = (uint64_t *)result;
    int v20 = v8;
    long long v21 = v8;
    if (v8)
    {
      int v20 = sub_6CA9C((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          char v10 = v21;
          uint64_t v11 = (uint64_t **)sub_6F554((uint64_t)v5, &v18, v21 + 4);
          sub_46CA8(v5, v18, v11, v10);
          uint64_t v8 = v20;
          long long v21 = v20;
          if (v20) {
            int v20 = sub_6CA9C((uint64_t)v20);
          }
          int v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              int v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    unint64_t result = (uint64_t **)sub_185668((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      sub_F4468((uint64_t)&v19, (uint64_t)v5, (uint64_t)(a2 + 4));
      std::string::size_type v14 = v19;
      uint64_t v15 = (uint64_t **)sub_6F554((uint64_t)v5, &v18, v19 + 4);
      unint64_t result = (uint64_t **)sub_46CA8(v5, v18, v15, v14);
      long long v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          long long v17 = v16;
          long long v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_1835A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_185668((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1835B4(uint64_t *a1)
{
}

void sub_183630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    long long v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    BOOL v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      char v23 = v22;
      char v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      char v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1835E8);
}

void sub_1838A0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  BOOL v3 = sub_3B9AC(a1 + 8);
  sub_46A4C(&v78, a1 + 96);
  int v75 = *(_DWORD *)(a1 + 136);
  sub_18452C(&v76, (void *)(a1 + 144));
  if (v3) {
    sub_3A944(v2);
  }
  __int16 v58 = (uint64_t **)(a1 + 96);
  sub_1845D8((uint64_t *)&v73);
  v72[0] = 0;
  v72[1] = 0;
  long long v71 = v72;
  *(void *)&long long v62 = v73;
  cf[0] = v74;
  *(void *)long long v81 = v78;
  uint64_t v69 = v79;
  v65.n128_u64[0] = (unint64_t)&v71;
  v65.n128_u64[1] = (unint64_t)v72;
  sub_12A3D0((uint64_t)buf, (uint64_t)&v62, cf, (uint64_t)v81, &v69, &v65);
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v69 = v70;
  *(void *)&long long v62 = v78;
  cf[0] = v79;
  uint64_t v80 = v74;
  *(void *)long long v81 = v73;
  v65.n128_u64[0] = (unint64_t)&v69;
  v65.n128_u64[1] = (unint64_t)v70;
  sub_12A3D0((uint64_t)buf, (uint64_t)&v62, cf, (uint64_t)v81, &v80, &v65);
  sub_46A4C((uint64_t *)&v65, (uint64_t)&v71);
  sub_46A4C(v66, (uint64_t)&v69);
  sub_46A4C(v67, (uint64_t)&v73);
  sub_46A4C(v68, (uint64_t)&v78);
  uint64_t v4 = sub_32A48(7);
  if ((*(unsigned char *)(v4 + 8) & 1) != 0 && *(void *)v4)
  {
    sub_18488C(&v78, (uint64_t)"Cached Devices");
    sub_18488C(&v73, (uint64_t)"Fetched Devices");
  }
  sub_18488C(&v71, (uint64_t)"New Devices");
  sub_18488C(&v69, (uint64_t)"Old Devices");
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  uint64_t v5 = v71;
  if (v71 != v72)
  {
    do
    {
      CFTypeRef v6 = sub_184B1C(*((_DWORD *)v5 + 7));
      sub_14E44(cf, v6);
      if (cf[0])
      {
        sub_20C54((uint64_t)buf, (const __CFString *)cf[0]);
        uint64_t v7 = BYTE3(v88);
        int v8 = SBYTE3(v88);
        uint64_t v9 = *(void **)buf;
        if (SBYTE3(v88) >= 0)
        {
          char v10 = buf;
        }
        else
        {
          uint64_t v7 = *(void *)&buf[8];
          char v10 = *(unsigned char **)buf;
        }
        uint64_t v11 = &v10[v7];
        if (v7 >= 19)
        {
          int v12 = v10;
          do
          {
            BOOL v13 = (char *)memchr(v12, 86, v7 - 18);
            if (!v13) {
              break;
            }
            BOOL v14 = *(void *)v13 == 0x416C617574726956 && *((void *)v13 + 1) == 0x697665446F696475;
            if (v14 && *(void *)(v13 + 11) == 0x5F6563697665446FLL) {
              goto LABEL_23;
            }
            int v12 = v13 + 1;
            uint64_t v7 = v11 - (unsigned char *)v12;
          }
          while (v11 - (unsigned char *)v12 > 18);
        }
        BOOL v13 = v11;
LABEL_23:
        BOOL v17 = v13 == v11 || v13 - v10 == -1;
        if (v8 < 0)
        {
          operator delete(v9);
          if (v17)
          {
LABEL_36:
            if (!cf[0])
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            sub_20C54((uint64_t)buf, (const __CFString *)cf[0]);
            char v21 = BYTE3(v88);
            BOOL v22 = v77;
            if (v76 != v77)
            {
              if (SBYTE3(v88) >= 0) {
                char v23 = (char *)BYTE3(v88);
              }
              else {
                char v23 = *(char **)&buf[8];
              }
              if (SBYTE3(v88) >= 0) {
                char v24 = buf;
              }
              else {
                char v24 = *(unsigned char **)buf;
              }
              BOOL v22 = v76;
              do
              {
                uint64_t v25 = *((unsigned __int8 *)v22 + 55);
                if ((v25 & 0x80u) == 0) {
                  uint64_t v26 = (char *)*((unsigned __int8 *)v22 + 55);
                }
                else {
                  uint64_t v26 = v22[5];
                }
                if (v26 == v23)
                {
                  if ((v25 & 0x80) != 0)
                  {
                    if (!memcmp(v22[4], v24, (size_t)v22[5])) {
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)v22 + 55)) {
                      goto LABEL_63;
                    }
                    uint64_t v27 = 0;
                    while (*((unsigned __int8 *)v22 + v27 + 32) == v24[v27])
                    {
                      if (v25 == ++v27) {
                        goto LABEL_63;
                      }
                    }
                  }
                }
                os_log_t v28 = v22[1];
                if (v28)
                {
                  do
                  {
                    std::string v29 = (char **)v28;
                    os_log_t v28 = *(char **)v28;
                  }
                  while (v28);
                }
                else
                {
                  do
                  {
                    std::string v29 = (char **)v22[2];
                    BOOL v14 = *v29 == (char *)v22;
                    BOOL v22 = v29;
                  }
                  while (!v14);
                }
                BOOL v22 = v29;
              }
              while (v29 != v77);
              BOOL v22 = v77;
            }
LABEL_63:
            int v30 = v75 != 3;
            int v31 = v77 == v22;
            if (v21 < 0) {
              operator delete(*(void **)buf);
            }
            if (v30 != v31)
            {
              uint64_t v32 = (os_log_t *)sub_32A48(7);
              std::string v33 = *v32;
              if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_INFO))
              {
                int v34 = *((_DWORD *)v5 + 7);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "DeviceListener_Aspen.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 195;
                __int16 v87 = 2112;
                CFTypeRef v88 = cf[0];
                __int16 v89 = 1024;
                int v90 = v34;
                _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_INFO, "%25s:%-5d Newly connected device located. UID: \"%@\", AudioObjectID: %u", buf, 0x22u);
              }
              uint64_t v35 = *((void *)&v62 + 1);
              uint64_t v36 = v63;
              uint64_t v37 = 32 * (v63 - *((void *)&v62 + 1)) - 1;
              if ((void)v63 == *((void *)&v62 + 1)) {
                uint64_t v37 = 0;
              }
              if (v37 == *((void *)&v64 + 1) + (void)v64)
              {
                sub_185178(&v62);
                uint64_t v35 = *((void *)&v62 + 1);
                uint64_t v36 = v63;
              }
              if (v36 == v35) {
                uint64_t v38 = 0;
              }
              else {
                uint64_t v38 = *(void *)(v35 + (((*((void *)&v64 + 1) + (void)v64) >> 5) & 0x7FFFFFFFFFFFFF8))
              }
                    + 16 * (BYTE8(v64) + v64);
              int v39 = *((_DWORD *)v5 + 7);
              CFTypeRef v40 = cf[0];
              if (cf[0])
              {
                CFRetain(cf[0]);
                *(_DWORD *)uint64_t v38 = v39;
                CFRetain(v40);
                *(void *)(v38 + 8) = v40;
                CFRelease(v40);
              }
              else
              {
                *(_DWORD *)uint64_t v38 = v39;
                *(void *)(v38 + 8) = 0;
              }
              ++*((void *)&v64 + 1);
            }
            else
            {
              sub_14DE4C(&v73, *((_DWORD *)v5 + 7));
            }
          }
        }
        else if (v17)
        {
          goto LABEL_36;
        }
      }
      else
      {
        int v18 = (os_log_t *)sub_32A48(7);
        __int16 v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          int v20 = *((_DWORD *)v5 + 7);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "DeviceListener_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 186;
          __int16 v87 = 1024;
          LODWORD(v88) = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d UID is NULL for newly connected device with AudioObjectID %u ... ignoring device", buf, 0x18u);
        }
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      char v41 = v5[1];
      if (v41)
      {
        do
        {
          long long v42 = (void **)v41;
          char v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          long long v42 = (void **)v5[2];
          BOOL v14 = *v42 == v5;
          uint64_t v5 = v42;
        }
        while (!v14);
      }
      uint64_t v5 = v42;
    }
    while (v42 != v72);
  }
  char v43 = *(void (**)(long long *, void, void))(a1 + 120);
  if (v43) {
    v43(&v62, 0, *(void *)(a1 + 128));
  }
  long long v60 = 0u;
  long long v61 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  sub_3D04((uint64_t)buf);
  std::string v44 = v69;
  if (v69 != v70)
  {
    do
    {
      unint64_t v45 = (char *)cf[1];
      if ((CFTypeRef)v60 == cf[1]) {
        unint64_t v46 = 0;
      }
      else {
        unint64_t v46 = 32 * (v60 - (unint64_t)cf[1]) - 1;
      }
      uint64_t v47 = *((void *)&v61 + 1);
      unint64_t v48 = *((void *)&v61 + 1) + v61;
      if (v46 == *((void *)&v61 + 1) + (void)v61)
      {
        sub_185178(cf);
        uint64_t v47 = *((void *)&v61 + 1);
        unint64_t v45 = (char *)cf[1];
        unint64_t v48 = v61 + *((void *)&v61 + 1);
      }
      uint64_t v49 = *(void *)&v45[(v48 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v48;
      *(_DWORD *)uint64_t v49 = *((_DWORD *)v44 + 7);
      *(void *)(v49 + 8) = 0;
      *((void *)&v61 + 1) = v47 + 1;
      uint64_t v50 = (os_log_t *)sub_32A48(7);
      unint64_t v51 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_INFO))
      {
        int v52 = *((_DWORD *)v44 + 7);
        *(_DWORD *)long long v81 = 136315650;
        *(void *)&v81[4] = "DeviceListener_Aspen.cpp";
        __int16 v82 = 1024;
        int v83 = 225;
        __int16 v84 = 1024;
        int v85 = v52;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_INFO, "%25s:%-5d Newly disconnected device located. AudioObjectID: %u", v81, 0x18u);
      }
      uint64_t v53 = v44[1];
      if (v53)
      {
        do
        {
          CFTypeRef v54 = (void **)v53;
          uint64_t v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          CFTypeRef v54 = (void **)v44[2];
          BOOL v14 = *v54 == v44;
          std::string v44 = v54;
        }
        while (!v14);
      }
      std::string v44 = v54;
    }
    while (v54 != v70);
  }
  int v55 = *(void (**)(CFTypeRef *, uint64_t, void))(a1 + 120);
  if (v55) {
    v55(cf, 1, *(void *)(a1 + 128));
  }
  BOOL v56 = sub_3B9AC(v2);
  if (v58 != &v73) {
    sub_C6650(v58, v73, v74);
  }
  if (v56) {
    sub_3A944(v2);
  }
  if (v92 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  sub_184FD8((uint64_t)cf);
  sub_184FD8((uint64_t)&v62);
  sub_463E0((void *)v68[1]);
  sub_463E0((void *)v67[1]);
  sub_463E0((void *)v66[1]);
  sub_463E0((void *)v65.n128_u64[1]);
  sub_463E0(v70[0]);
  sub_463E0(v72[0]);
  sub_463E0(v74[0]);
  sub_8F90(v77[0]);
  sub_463E0(v79[0]);
}

void sub_1841E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55,uint64_t a56,uint64_t a57,void *a58)
{
}

void *sub_18452C(void *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v4 = (void **)(a2 + 1);
  uint64_t v5 = (void **)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_F42BC((uint64_t)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      CFTypeRef v6 = (void **)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          CFTypeRef v6 = (void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void **)v5[2];
          BOOL v8 = *v7 == v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1845C4(_Unwind_Exception *a1)
{
  sub_8F90(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1845D8(uint64_t *a1)
{
  uint64_t inAddress_8 = 0;
  uint64_t inAddress = 0x676C6F6272647623;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(1u, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, (UInt32 *)&inAddress_8 + 1);
  int v3 = PropertyDataSize;
  if (PropertyDataSize)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "DeviceListener_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 251;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"failed to read the property size for kAudioHardwarePropertyPhysicalDevices\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v3;
  }
  HIDWORD(inAddress_8) += 40;
  __chkstk_darwin(PropertyDataSize);
  uint64_t v5 = (unsigned int *)((char *)&inAddress - ((v4 + 15) & 0x1FFFFFFF0));
  unint64_t result = (uint64_t *)AudioObjectGetPropertyData(1u, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, (UInt32 *)&inAddress_8 + 1, v5);
  int v7 = (int)result;
  if (result)
  {
    BOOL v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "DeviceListener_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 262;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"failed to read current device list\"", buf, 0x12u);
    }
    long long v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v16 = &off_6414D8;
    v16[2] = v7;
  }
  unint64_t v8 = HIDWORD(inAddress_8);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (v8 >= 4)
  {
    unint64_t v9 = v8 >> 2;
    do
    {
      unsigned int v10 = *v5++;
      unint64_t result = sub_6CB40(a1, v10, v10);
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_184870(_Unwind_Exception *exception_object)
{
}

void sub_18488C(void *a1, uint64_t a2)
{
  if (a2)
  {
    if (a1[2])
    {
      uint64_t v4 = (os_log_t *)sub_32A48(7);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          int v20 = "DeviceListener_Aspen.cpp";
          __int16 v21 = 1024;
          int v22 = 302;
          __int16 v23 = 2080;
          v24[0] = a2;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d %s", buf, 0x1Cu);
        }
      }
    }
  }
  unint64_t v8 = (void *)*a1;
  CFTypeRef v6 = a1 + 1;
  int v7 = v8;
  if (v6 != v8)
  {
    do
    {
      AudioObjectID v9 = *((_DWORD *)v7 + 7);
      CFStringRef v10 = (const __CFString *)sub_184B1C(v9);
      uint64_t v11 = (os_log_t *)sub_32A48(7);
      int v12 = *v11;
      if (v10)
      {
        if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
        {
          sub_21B7C(__p, v10);
          BOOL v13 = __p;
          if (v18 < 0) {
            BOOL v13 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          int v20 = "DeviceListener_Aspen.cpp";
          __int16 v21 = 1024;
          int v22 = 311;
          __int16 v23 = 1024;
          LODWORD(v24[0]) = v9;
          WORD2(v24[0]) = 2080;
          *(void *)((char *)v24 + 6) = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d AudioObjectID: %u, UID = \"%s\"", buf, 0x22u);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
        CFRelease(v10);
      }
      else if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v20 = "DeviceListener_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 316;
        __int16 v23 = 1024;
        LODWORD(v24[0]) = v9;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d AudioObjectID: %u, UID is NULL", buf, 0x18u);
      }
      BOOL v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          int v7 = v15;
        }
        while (!v16);
      }
      int v7 = v15;
    }
    while (v6 != v15);
  }
}

CFTypeRef sub_184B1C(AudioObjectID a1)
{
  CFTypeRef outData = 0;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.mSelector = 0x676C6F6275696420;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  if (PropertyData || (ioDataSize == 8 ? (BOOL v3 = outData == 0) : (BOOL v3 = 1), v3))
  {
    uint64_t v4 = (os_log_t *)sub_32A48(7);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316418;
      __int16 v19 = "DeviceListener_Aspen.cpp";
      __int16 v20 = 1024;
      *(_DWORD *)CFTypeRef cf = 284;
      *(_WORD *)&cf[4] = 1024;
      *(_DWORD *)&cf[6] = a1;
      __int16 v22 = 1024;
      *(_DWORD *)__int16 v23 = PropertyData;
      *(_WORD *)&void v23[4] = 1024;
      *(_DWORD *)&v23[6] = ioDataSize;
      __int16 v24 = 2048;
      CFTypeRef v25 = outData;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d failed to read device UID for device %u; device may have already been removed (status = %d, propSize = %u, uid = %p)",
        buf,
        0x2Eu);
    }
    if (outData)
    {
      CFRelease(outData);
      CFTypeRef outData = 0;
    }
  }
  uint64_t v6 = sub_32A48(7);
  if (*(unsigned char *)(v6 + 8))
  {
    int v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(void *)&v13.mSelector = 0x676C6F626C6E616DLL;
        v13.mElement = 0;
        if (AudioObjectHasProperty(a1, &v13))
        {
          AudioObjectID v17 = a1;
          uint64_t v11 = 0x676C6F626C6E616DLL;
          LODWORD(v12) = 0;
          sub_CDE9C((uint64_t)buf, &v17, (AudioObjectPropertyAddress *)&v11, 0, 0);
          if (*(_DWORD *)buf || !(_BYTE)v22)
          {
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            int v10 = *(_DWORD *)buf;
            *(void *)exceptiouint64_t n = &off_6414D8;
            exception[2] = v10;
          }
          sub_5505C(&v11, *(CFTypeRef *)&cf[2]);
          uint64_t v11 = (uint64_t)off_63E5A8;
          if ((_BYTE)v22) {
            sub_49A90((const char **)((char *)&v19 + 4));
          }
          *(_DWORD *)buf = 136315906;
          __int16 v19 = "DeviceListener_Aspen.cpp";
          __int16 v20 = 1024;
          *(_DWORD *)CFTypeRef cf = 292;
          *(_WORD *)&cf[4] = 1024;
          *(_DWORD *)&cf[6] = a1;
          __int16 v22 = 2112;
          *(void *)__int16 v23 = v12;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioObjectID %u is kAudioObjectPropertyName \"%@\".", buf, 0x22u);
          sub_49A90(&v11);
        }
        else
        {
          *(_DWORD *)buf = 136315906;
          __int16 v19 = "DeviceListener_Aspen.cpp";
          __int16 v20 = 1024;
          *(_DWORD *)CFTypeRef cf = 292;
          *(_WORD *)&cf[4] = 1024;
          *(_DWORD *)&cf[6] = a1;
          __int16 v22 = 2112;
          *(void *)__int16 v23 = @"<unknown>";
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioObjectID %u is kAudioObjectPropertyName \"%@\".", buf, 0x22u);
        }
      }
    }
  }
  return outData;
}

void sub_184E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_184E90(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(7);
  BOOL v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "DeviceListener_Aspen.cpp";
    __int16 v6 = 1024;
    int v7 = 165;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Error Occured handling a Device Update", (uint8_t *)&v4, 0x12u);
  }
  sub_18488C((void *)(a1 + 72), (uint64_t)"Cached Devices");
  sub_18488C((void *)(a1 + 48), (uint64_t)"Fetched Devices");
}

uint64_t **sub_184F70(void *a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t **a5)
{
  if (a2 != a4)
  {
    int v7 = a2;
    do
    {
      unsigned int v9 = *v7++;
      sub_14DE4C(a5, v9);
      if ((unsigned int *)((char *)v7 - *a1) == &stru_FF0.dylib.current_version)
      {
        int v10 = (unsigned int *)a1[1];
        ++a1;
        int v7 = v10;
      }
    }
    while (v7 != a4);
  }
  return a5;
}

uint64_t sub_184FD8(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    int v4 = (void *)(a1 + 40);
    BOOL v3 = *(void ***)(a1 + 8);
  }
  else
  {
    int v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    __int16 v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        int v10 = *(const void **)(v8 + 8);
        if (v10)
        {
          CFRelease(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      BOOL v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_185134(void **a1)
{
  return a1;
}

void sub_185178(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    __int16 v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      char v41 = (char *)sub_106EC(v40);
      long long v42 = &v41[8 * (v40 >> 2)];
      std::string v44 = &v41[8 * v43];
      unint64_t v45 = (uint64_t *)a1[1];
      __int16 v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        __int16 v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        unint64_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)unint64_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    __int16 v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  __int16 v20 = (char *)a1[2];
  __int16 v19 = (char *)a1[3];
  __int16 v21 = (char *)*a1;
  __int16 v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    CFTypeRef v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)__int16 v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      uint64_t v53 = (char *)sub_106EC(v51);
      __int16 v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      int v55 = (uint64_t *)a1[1];
      BOOL v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        BOOL v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        double v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)double v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      long long v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        __int16 v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    __int16 v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)__int16 v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      char v41 = (char *)sub_106EC(v85);
      long long v42 = &v41[8 * (v85 >> 2)];
      std::string v44 = &v41[8 * v86];
      __int16 v87 = (uint64_t *)a1[1];
      __int16 v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        __int16 v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        int v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)int v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      uint64_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        __int16 v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  std::string v29 = (char *)sub_106EC(v28);
  uint64_t v31 = v30;
  uint64_t v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  int v34 = operator new(0x1000uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    long long v64 = (char *)sub_106EC(v63);
    uint64_t v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)uint64_t v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    long long v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      uint64_t v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        int v75 = (char *)sub_106EC(v74);
        uint64_t v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        __int16 v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          __int16 v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          uint64_t v80 = v68;
          long long v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)uint64_t v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        uint64_t v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          uint64_t v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      uint64_t v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  __int16 v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_185638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_185668(uint64_t a1)
{
  sub_8F90(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_8F90((char *)v2);
  }
  return a1;
}

unsigned char *sub_1856B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v26 = a1 + 8;
  char v9 = (*(uint64_t (**)(void))(v8 + 16))();
  uint64_t v10 = *(void *)(a1 + 120);
  char v27 = v9;
  if ((a2 == 0) != (v10 != 0))
  {
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "DeviceListener_Aspen.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 69;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"DeviceListener_Aspen::SetDeviceListener requires that either proc be valid (non-NULL) if no listener is registered, or NULL, if a listener is already registered.\"", block, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "DeviceListener_Aspen::SetDeviceListener requires that either proc be valid (non-NULL) if no listener is registered, or NULL, if a listener is already registered.");
LABEL_21:
  }
  if (!a2 && a3)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    __int16 v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "DeviceListener_Aspen.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 70;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"DeviceListener_Aspen::SetDeviceListener requires that clientData be NULL if proc is NULL\"", block, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "DeviceListener_Aspen::SetDeviceListener requires that clientData be NULL if proc is NULL");
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)a4;
  *(void *)(a1 + 120) = a2;
  *(void *)(a1 + 128) = a3;
  if (a1 + 136 != a4)
  {
    sub_183404((uint64_t **)(a1 + 144), *(void **)(a4 + 8), (void *)(a4 + 16));
    a2 = *(void *)(a1 + 120);
  }
  if (a2)
  {
    uint64_t v25 = a1;
    uint64_t v11 = sub_13910();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      sub_1838A0(a1);
    }
    else
    {
      *(void *)&inAddress.mSelector = &v25;
      *(void *)blocuint64_t k = _NSConcreteStackBlock;
      *(void *)&block[8] = 0x40000000;
      *(void *)&block[16] = sub_185D54;
      std::string v29 = &unk_624EE8;
      p_AudioObjectPropertyAddress inAddress = &inAddress;
      dispatch_sync(v11, block);
    }
    *(void *)&inAddress.mSelector = 0x676C6F6272647623;
    inAddress.mElement = 0;
    OSStatus v14 = AudioObjectAddPropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_186040, (void *)a1);
    if (v14)
    {
      __int16 v21 = (os_log_t *)sub_32A48(13);
      __int16 v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)blocuint64_t k = 136315394;
        *(void *)&block[4] = "DeviceListener_Aspen.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 98;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"failed to add device listener\"", block, 0x12u);
      }
      unint64_t v23 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v23 = &off_6414D8;
      void v23[2] = v14;
    }
  }
  else
  {
    strcpy(block, "#vdrbolg");
    block[9] = 0;
    *(_WORD *)&block[10] = 0;
    AudioObjectRemovePropertyListener(1u, (const AudioObjectPropertyAddress *)block, (AudioObjectPropertyListenerProc)sub_186040, (void *)a1);
    uint64_t v13 = *(void **)(a1 + 104);
    BOOL v12 = (void *)(a1 + 104);
    sub_463E0(v13);
    *(v12 - 1) = v12;
    void *v12 = 0;
    v12[1] = 0;
  }
  return sub_3BCAC(&v26);
}

void sub_185AA4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    void *v2 = 0;
    v2[1] = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_185AC0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_end_catch();
  if (a2 == 3)
  {
    __int16 v22 = __cxa_begin_catch(a1);
    unint64_t v23 = (os_log_t *)sub_32A48(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 35;
      uint64_t v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v27 = v24;
      uint32_t v28 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else
  {
    std::string v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v30 = v29;
      uint64_t v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 35;
        uint64_t v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 35;
        uint64_t v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x18584CLL);
}

void sub_185CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_end_catch();
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_185D54(uint64_t a1)
{
}

void sub_185DC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  __cxa_rethrow();
}

void sub_185DE4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    JUMPOUT(0x185DC8);
  }
  __cxa_end_catch();
  if (a2 == 3)
  {
    uint64_t v16 = __cxa_begin_catch(a1);
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    os_log_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v19 = v16[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v19;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      __int16 v20 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v21 = v18;
      uint32_t v22 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&a9, v22);
    }
  }
  else
  {
    unint64_t v23 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v24 = v23;
      int v25 = (os_log_t *)sub_32A48(13);
      os_log_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v24 + 16))(v24);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v27;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        __int16 v20 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v21 = v26;
        uint32_t v22 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint32_t v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        __int16 v20 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v21 = v29;
        uint32_t v22 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x185D90);
}

void sub_186000()
{
}

void sub_18600C()
{
}

void sub_186018()
{
}

void sub_186024(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x185DC8);
}

void sub_186040(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        for (uint64_t i = 0; i != a2; ++i)
        {
          int v5 = *a3;
          a3 += 3;
          if (v5 == 1919186467)
          {
            sub_13910();
            operator new();
          }
        }
        __int16 v6 = (os_log_t *)sub_32A48(13);
        uint64_t v7 = *v6;
        if (*v6)
        {
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
          {
            int v17 = 136315394;
            os_log_t v18 = "DeviceListener_Aspen.cpp";
            __int16 v19 = 1024;
            int v20 = 137;
            _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate kAudioHardwarePropertyPhysicalDevices in inAddresses\"", (uint8_t *)&v17, 0x12u);
          }
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        char v9 = (void (*)(void *))&std::runtime_error::~runtime_error;
        std::runtime_error::runtime_error(exception, "Unable to locate kAudioHardwarePropertyPhysicalDevices in inAddresses");
LABEL_11:
        __cxa_throw(exception, v10, v9);
      }
      uint64_t v15 = (os_log_t *)sub_32A48(13);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        int v17 = 136315394;
        os_log_t v18 = "DeviceListener_Aspen.cpp";
        __int16 v19 = 1024;
        int v20 = 123;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
      }
    }
    else
    {
      uint64_t v13 = (os_log_t *)sub_32A48(13);
      OSStatus v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        int v17 = 136315394;
        os_log_t v18 = "DeviceListener_Aspen.cpp";
        __int16 v19 = 1024;
        int v20 = 122;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
      }
    }
  }
  else
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    BOOL v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      os_log_t v18 = "DeviceListener_Aspen.cpp";
      __int16 v19 = 1024;
      int v20 = 121;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
    }
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  char v9 = (void (*)(void *))&std::logic_error::~logic_error;
  std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
  goto LABEL_11;
}

void sub_18639C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v14);
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(exception_object);
    os_log_t v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v20;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 138;
      __int16 v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint32_t v22 = v19;
      uint32_t v23 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&a9, v23);
    }
  }
  else
  {
    os_log_t v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v25 = v24;
      os_log_t v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v28;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 138;
        __int16 v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint32_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      os_log_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 138;
        __int16 v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint32_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x186198);
}

void sub_1865F0()
{
}

void sub_1865FC()
{
}

void sub_186608()
{
}

void sub_186618()
{
}

void sub_186620(uint64_t *a1)
{
}

void sub_18669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    uint32_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      os_log_t v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x186654);
}

void sub_18690C(void *a1)
{
  sub_186944(a1);

  operator delete();
}

void *sub_186944(void *a1)
{
  uint64_t v3 = (uint64_t)(a1 + 1);
  uint64_t v2 = a1[1];
  *a1 = off_624EB0;
  uint64_t v7 = a1 + 1;
  char v8 = 0;
  char v8 = (*(uint64_t (**)(void *))(v2 + 16))(a1 + 1);
  if (a1[15] || a1[16])
  {
    unint64_t v4 = (os_log_t *)sub_32A48(7);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      buf.mSelector = 136315394;
      *(void *)&buf.mScope = "DeviceListener_Aspen.cpp";
      __int16 v10 = 1024;
      int v11 = 54;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Destructor of DeviceListener_Aspen called while the DeviceListenerProc / client data was still valid...", (uint8_t *)&buf, 0x12u);
    }
  }
  strcpy((char *)&buf, "#vdrbolg");
  BYTE1(buf.mElement) = 0;
  HIWORD(buf.mElement) = 0;
  AudioObjectRemovePropertyListener(1u, &buf, (AudioObjectPropertyListenerProc)sub_186040, a1);
  sub_3BCAC(&v7);
  sub_8F90((char *)a1[19]);
  sub_463E0((void *)a1[13]);
  sub_AEF0C(v3);
  return a1;
}

void sub_186AC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_186AD8(void *a1)
{
  id v4 = +[NSFileManager defaultManager];
  uint64_t v2 = [v4 temporaryDirectory];
  id v3 = [v2 path];
  sub_21C8C(a1, (char *)[v3 UTF8String]);
}

void sub_186B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_186B90(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886216809)
  {
    id v3 = (os_log_t *)sub_32A48(17);
    id v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      int v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 117;
      __int16 v16 = 2080;
      os_log_t v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 118;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_186D48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_186D64(uint64_t a1)
{
  sub_42E5FC((os_unfair_lock_s *)a1);
  if (((*(void *)(a1 + 280) - *(void *)(a1 + 272)) & 0xFFFFFFFF0) == 0)
  {
    __int16 v10 = (os_log_t *)sub_32A48(13);
    char v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_log_t v28 = 136315394;
      *(void *)&v28[4] = "Device_Puffin.cpp";
      __int16 v29 = 1024;
      *(_DWORD *)os_log_t v30 = 89;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Puffin audio device has no input streams\"", v28, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Puffin audio device has no input streams");
  }
  sub_105048((uint64_t)v28, qword_64C3B8);
  uint64_t v2 = (os_log_t *)sub_32A48(17);
  id v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)&v30[2];
    if (!*(void *)&v30[2]) {
      uint64_t v4 = *(void *)v28;
    }
    if (v31[0]) {
      uint64_t v5 = v31[0];
    }
    else {
      uint64_t v5 = v4;
    }
    __int16 v6 = *(const void **)(a1 + 448);
    int v18 = v6;
    LOBYTE(v19) = *(unsigned char *)(a1 + 456);
    if ((_BYTE)v19 && v6) {
      CFRetain(v6);
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Puffin.cpp";
    __int16 v22 = 1024;
    int v23 = 95;
    __int16 v24 = 2112;
    uint64_t v25 = v5;
    __int16 v26 = 2112;
    os_log_t v27 = v6;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a Puffin output port with name \"%@\" and UID \"%@\"", buf, 0x26u);
    sub_72924((uint64_t)&v18);
  }
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v7 = *(const void **)(a1 + 448);
  uint64_t v13 = v7;
  char v14 = *(unsigned char *)(a1 + 456);
  if (v14 && v7) {
    CFRetain(v7);
  }
  char v8 = operator new(0x228uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = off_640AB8;
  sub_21C8C(buf, "");
  sub_105158((uint64_t)(v8 + 3), &qword_64C3B8, a1, (uint64_t)&v18, (uint64_t)v28, (uint64_t)&v13, (uint64_t)v17, (long long *)buf);
  void v8[3] = &off_621AD0;
  *((_WORD *)v8 + 272) = 0;
  if (SBYTE3(v25) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)&long long v15 = v8 + 3;
  *((void *)&v15 + 1) = v8;
  sub_56E64((uint64_t)&v15, v8 + 13, (uint64_t)(v8 + 3));
  long long v16 = v15;
  sub_436484(a1, (void ***)&v16);
  if (*((void *)&v16 + 1)) {
    sub_4636C(*((std::__shared_weak_count **)&v16 + 1));
  }
  sub_72924((uint64_t)&v13);
  *(void *)AudioObjectPropertyAddress buf = v17;
  sub_74004((void ***)buf);
  sub_72924((uint64_t)v31);
  sub_72924((uint64_t)&v30[2]);
  sub_72924((uint64_t)v28);
  return 1;
}

void sub_18708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_78FF8(v26 - 112);
  _Unwind_Resume(a1);
}

void sub_187124(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_187160(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886613611)
  {
    id v3 = (os_log_t *)sub_32A48(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 264;
      __int16 v16 = 2080;
      os_log_t v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 265;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_187318(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_187334(uint64_t a1)
{
  sub_42E5FC((os_unfair_lock_s *)a1);
  if (((*(void *)(a1 + 304) - *(void *)(a1 + 296)) & 0xFFFFFFFF0) != 0) {
    operator new();
  }
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  id v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      v5[0] = 136315394;
      *(void *)&v5[1] = "Device_Puffin.cpp";
      __int16 v6 = 1024;
      int v7 = 229;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Puffin audio device has no output streams\"", (uint8_t *)v5, 0x12u);
    }
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Puffin audio device has no output streams");
}

void sub_1876D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_78FF8(v26 - 112);
  _Unwind_Resume(a1);
}

void sub_18778C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (a2->mSelector == 1064725619)
  {
    if (a2->mScope != 1869968496)
    {
LABEL_3:
      BOOL v12 = (os_log_t *)sub_32A48(13);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
        if (v36 >= 0) {
          __int16 v14 = __p;
        }
        else {
          __int16 v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v38 = "Device_Puffin.cpp";
        __int16 v39 = 1024;
        int v40 = 200;
        __int16 v41 = 2080;
        long long v42 = (const char *)v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 2003332927;
    }
  }
  else
  {
    sub_50848((std::mutex *)a1);
    if (!AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2)) {
      goto LABEL_3;
    }
  }
  if ((a3 != 0) == (a4 == 0))
  {
    os_log_t v17 = (os_log_t *)sub_32A48(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      uint64_t v19 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v38 = "Device_Puffin.cpp";
      __int16 v39 = 1024;
      int v40 = 201;
      __int16 v41 = 2080;
      long long v42 = (const char *)v19;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = &off_6414D8;
    v20[2] = 561211770;
  }
  if (!a6)
  {
    uint32_t v21 = (os_log_t *)sub_32A48(13);
    __int16 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      int v23 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v38 = "Device_Puffin.cpp";
      __int16 v39 = 1024;
      int v40 = 202;
      __int16 v41 = 2080;
      long long v42 = "outData";
      __int16 v43 = 2080;
      v44[0] = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v24 = &off_6414D8;
    void v24[2] = 561211770;
  }
  if (a2->mSelector == 1064725619)
  {
    UInt32 v16 = *a5;
    if (v16 != sub_187D88(a1, a2, a3, a4))
    {
      uint64_t v25 = (os_log_t *)sub_32A48(13);
      uint64_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
        int v27 = v36;
        os_log_t v28 = (void **)__p[0];
        UInt32 v29 = *a5;
        int v30 = sub_187D88(a1, a2, a3, a4);
        uint64_t v31 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        uint64_t v38 = "Device_Puffin.cpp";
        if (v27 < 0) {
          uint64_t v31 = v28;
        }
        __int16 v39 = 1024;
        int v40 = 207;
        __int16 v41 = 2080;
        long long v42 = (const char *)v31;
        __int16 v43 = 1024;
        LODWORD(v44[0]) = v29;
        WORD2(v44[0]) = 1024;
        *(_DWORD *)((char *)v44 + 6) = v30;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      os_log_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)os_log_t v32 = &off_6414D8;
      v32[2] = 561211770;
    }
    *(_DWORD *)a6 = 1;
  }
  else
  {
    sub_432AE8(a1, a2, a3, a4, a5, a6);
  }
}

void sub_187D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_187D88(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (a2->mSelector == 1064725619)
  {
    if (a2->mScope != 1869968496)
    {
LABEL_3:
      char v8 = (os_log_t *)sub_32A48(13);
      char v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
        if (v20 >= 0) {
          __int16 v10 = __p;
        }
        else {
          __int16 v10 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __int16 v22 = "Device_Puffin.cpp";
        __int16 v23 = 1024;
        int v24 = 178;
        __int16 v25 = 2080;
        uint64_t v26 = v10;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 2003332927;
    }
  }
  else
  {
    sub_50848((std::mutex *)a1);
    if (!AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2)) {
      goto LABEL_3;
    }
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      int v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v22 = "Device_Puffin.cpp";
      __int16 v23 = 1024;
      int v24 = 179;
      __int16 v25 = 2080;
      uint64_t v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      int v30 = a4;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    UInt32 v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)UInt32 v16 = &off_6414D8;
    v16[2] = 561211770;
  }
  if (a2->mSelector == 1064725619) {
    return 4;
  }

  return sub_433254(a1, a2, a3, a4);
}

BOOL sub_1880D8(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1064725619 && sub_43356C(a1, a2);
}

BOOL sub_1880F8(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1064725619) {
    return a2->mScope == 1869968496;
  }
  sub_50848((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

void sub_188160(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

void sub_18819C()
{
  v0[0] = 0;
  v0[4] = 0;
  v0[8] = 0;
  v0[12] = 0;
  sub_20A0D0();
  char v2 = 1;
  *(_OWORD *)id v3 = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  long long v5 = 0u;
  sub_6CBEC();
  uint64_t v8 = 0x101010101010000;
  __int16 v9 = 0;
  int v10 = 16777473;
  v12[0] = 0;
  v12[1] = 0;
  char v11 = v12;
  __int16 v13 = 0;
  char v14 = 0;
  int v15 = -1044381696;
  char v16 = 1;
  int v17 = -1044381696;
  char v18 = 1;
  int v19 = 0;
  char v20 = 1;
  int v21 = -1056964608;
  char v22 = 1;
  int v23 = -1033371648;
  char v24 = 1;
  int v25 = 0;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1044381696;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1033371648;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = -1055916032;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = 0;
  char v46 = 1;
  int v47 = -1055916032;
  char v48 = 1;
  int v49 = -1033371648;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = 0;
  char v56 = 1;
  int v57 = -1055916032;
  char v58 = 1;
  int v59 = -1043333120;
  char v60 = 1;
  int v61 = 0x40000000;
  char v62 = 1;
  int v63 = 16777472;
  int v64 = 0;
  char v65 = 1;
  int v66 = 0;
  char v67 = 1;
  int v68 = 1103626240;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1094713344;
  char v73 = 1;
  int v74 = 1094713344;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = -1061158912;
  char v79 = 1;
  int v80 = 1107296256;
  char v81 = 1;
  int v82 = 1107296256;
  char v83 = 1;
  int v84 = 1092616192;
  char v85 = 1;
  int v86 = 0;
  char v87 = 1;
  int v88 = 0;
  char v89 = 1;
  int v90 = 16777472;
  v91[0] = 0;
  v91[72] = 0;
  v91[80] = 0;
  v91[120] = 0;
  v91[128] = 0;
  v91[200] = 0;
  v91[208] = 0;
  v91[248] = 0;
  v91[256] = 0;
  v91[260] = 0;
  v91[264] = 0;
  v91[268] = 0;
  LOBYTE(v92) = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  LOBYTE(v104) = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 1;
  char v123 = 0;
  char v124 = 0;
  LOBYTE(v125) = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 0;
  char v132 = 0;
  __int16 v133 = 0;
  char v134 = 0;
  char v135 = 0;
  char v136 = 0;
  char v137 = 0;
  char v138 = 0;
  char v139 = 0;
  char v140 = 0;
  char v141 = 0;
  char v142 = 0;
  char v143 = 0;
  LOBYTE(v144) = 0;
  char v145 = 0;
  LOBYTE(v146) = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  char v152 = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(__p) = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  char v164 = 0;
  int v165 = 256;
  char v166 = 0;
  char v167 = 0;
  char v168 = 0;
  char v169 = 0;
  char v170 = 0;
  char v171 = 0;
  __int16 v172 = 0;
  int v6 = 16843009;
  __int16 v7 = 257;
  int v1 = 4;
  *(void *)&long long __src = 0x300000002;
  sub_8732C((char *)&v4[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  LODWORD(__src) = 3;
  sub_8732C((char *)v3, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  int v88 = 1090519040;
  char v89 = 1;
  int v84 = 1077936128;
  char v85 = 1;
  HIWORD(v63) = 257;
  int v146 = 39;
  char v147 = 1;
  int v125 = 36;
  char v126 = 1;
  int v144 = 14;
  char v145 = 1;
  int v98 = 7;
  char v99 = 1;
  int v100 = 25;
  char v101 = 1;
  int v102 = 32;
  char v103 = 1;
  int v104 = 7;
  char v105 = 1;
  int v106 = 5;
  char v107 = 1;
  int v110 = 5;
  char v111 = 1;
  if (!v155) {
    char v155 = 1;
  }
  int v154 = 2;
  if (!v93) {
    char v93 = 1;
  }
  int v92 = 2;
  sub_208140(&__src, 24);
  if (v158)
  {
    if (SHIBYTE(v157) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v157 = v174;
  }
  else
  {
    long long __p = __src;
    uint64_t v157 = v174;
    char v158 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)v91);
  sub_463E0(v12[0]);
  if (v4[1])
  {
    *(void **)&long long v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_1886F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_188714()
{
  return 1;
}

uint64_t sub_18871C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((result & 1) == 0)
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v25);
      int v15 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v30 = "Port_CarPlay_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 197;
      __int16 v33 = 2080;
      char v34 = (const char *)v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v17 = (os_log_t *)sub_32A48(13);
    char v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v25);
      int v19 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v30 = "Port_CarPlay_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 198;
      __int16 v33 = 2080;
      char v34 = (const char *)v19;
      __int16 v35 = 1024;
      LODWORD(v36[0]) = a3;
      WORD2(v36[0]) = 2048;
      *(void *)((char *)v36 + 6) = a4;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    char v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v20 = &off_6414D8;
    v20[2] = 561211770;
  }
  if (!a6)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    char v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v25);
      int v23 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v30 = "Port_CarPlay_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 199;
      __int16 v33 = 2080;
      char v34 = "outData";
      __int16 v35 = 2080;
      v36[0] = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    char v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v24 = &off_6414D8;
    void v24[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1886810226)
  {
    *a6 = 1;
  }
  else
  {
    return sub_102FDC(a1, (uint64_t *)a2, a3, a4, v12, (uint64_t)a6);
  }
  return result;
}

uint64_t sub_188B84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    __int16 v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)a2;
      int v18 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      char v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v22 = "Port_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 176;
      __int16 v25 = 2080;
      int v26 = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)a2;
      int v18 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      int v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v22 = "Port_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 177;
      __int16 v25 = 2080;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = a4;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    char v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v16 = &off_6414D8;
    v16[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1886810226) {
    return 4;
  }
  sub_1033C8(a1, (uint64_t *)a2, a3, a4);
  return 0;
}

uint64_t sub_188E88()
{
  return 0;
}

BOOL sub_188E90(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1886810226;
}

void sub_188EA8(void *a1)
{
  sub_104C04(a1);

  operator delete();
}

BOOL sub_188EE4(uint64_t a1, int a2)
{
  return a2 == 1768776806 || a2 == 1987208039 || a2 == 1987211117;
}

void *sub_188F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v2 = *(const __CFString **)(*(void *)(a1 + 192) + 496);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }

  return sub_20C54(a2, v2);
}

void sub_188F78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_188F8C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 504);
}

BOOL sub_188F98(uint64_t a1)
{
  return sub_255B60(*(const __CFString **)(*(void *)(a1 + 192) + 496));
}

uint64_t sub_188FA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 424))();
}

void sub_188FD0(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

void sub_18900C(uint64_t a1, int a2, int a3)
{
  if (((a2 - 1886614625) > 0xE || ((1 << (a2 - 97)) & 0x4101) == 0)
    && a2 != 1885565044
    && a2 != 1886609775)
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v16 = 136315394;
      *(void *)&v16[4] = "Port_CarPlay_Aspen.cpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 31;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v16, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 != 1885544823 && a3 != 1885566825)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    char v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v16 = 136315394;
      *(void *)&v16[4] = "Port_CarPlay_Aspen.cpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 32;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v16, 0x12u);
    }
    uint64_t v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Precondition failure.");
  }
  *(void *)&v16[8] = 0;
  *(void *)&v16[16] = 0;
  *(void *)char v16 = &v16[8];
  if (a2 > 1886614632)
  {
    if (a2 != 1886614633 && a2 != 1886614639) {
      goto LABEL_21;
    }
  }
  else if (a2 != 1885565044)
  {
    if (a2 == 1886614625)
    {
      sub_6CB40((uint64_t *)v16, 0x76737972u, 1987279218);
      *(_DWORD *)a1 = 1886614625;
      *(_DWORD *)(a1 + 4) = a3;
      *(_DWORD *)(a1 + 8) = 1701869160;
      *(unsigned char *)(a1 + 12) = 1;
      sub_46A4C((uint64_t *)(a1 + 16), (uint64_t)v16);
LABEL_22:
      __int16 v9 = *(_WORD *)(a1 + 40) & 0xF800;
      __int16 v7 = 660;
      goto LABEL_23;
    }
LABEL_21:
    sub_6CB40((uint64_t *)v16, 0x76737269u, 1987277417);
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a3;
    *(_DWORD *)(a1 + 8) = 1701869160;
    *(unsigned char *)(a1 + 12) = 1;
    sub_46A4C((uint64_t *)(a1 + 16), (uint64_t)v16);
    goto LABEL_22;
  }
  sub_6CB40((uint64_t *)v16, 0x76646566u, 1986291046);
  if (a2 == 1886614633) {
    sub_6CB40((uint64_t *)v16, 0x76737064u, 1987276900);
  }
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = 1701869160;
  *(unsigned char *)(a1 + 12) = 1;
  sub_46A4C((uint64_t *)(a1 + 16), (uint64_t)v16);
  __int16 v6 = a2 == 1886614633;
  if (a2 == 1885565044) {
    __int16 v6 = 1;
  }
  __int16 v7 = *(_WORD *)(a1 + 40) & 0xF800;
  if (a2 == 1885565044) {
    __int16 v8 = 710;
  }
  else {
    __int16 v8 = 726;
  }
  __int16 v9 = v8 | v6;
LABEL_23:
  *(_WORD *)(a1 + 40) = v9 | v7;
  sub_463E0(*(void **)&v16[8]);
}

void sub_1893BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void *sub_1893FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  sub_18900C((uint64_t)buf, a5, a6);
  memset(v27, 0, sizeof(v27));
  memset(v26, 0, sizeof(v26));
  sub_21C8C(__p, "CarPlayPartnershipUID");
  sub_1066F4((uint64_t)a1, (uint64_t *)buf, a2, (uint64_t)v27, a3, a4, (uint64_t)v26, (long long *)__p, 0, 1);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v26;
  sub_74004((void ***)__p);
  sub_463E0(*(void **)&v32[4]);
  *a1 = &off_6252E8;
  if (a5 != 1885565044 && a5 != 1886614633 && a5 != 1886614639)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    char v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_CarPlay_Aspen.cpp";
      __int16 v29 = 1024;
      int v30 = 131;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v11 = sub_32A48(23);
  uint64_t v12 = sub_32A48(27);
  char v13 = 0;
  uint64_t v14 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v15 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v16 = *(int *)&buf[4 * v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1;
    if (v17) {
      goto LABEL_12;
    }
  }
  if ((v15 & v16) == 0) {
    uint64_t v11 = v12;
  }
LABEL_12:
  int v18 = *(NSObject **)v11;
  if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v19 = "Input";
    *(void *)&uint8_t buf[4] = "Port_CarPlay_Aspen.cpp";
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    if (a5 == 1886614639) {
      int v19 = "Output";
    }
    __int16 v29 = 1024;
    int v30 = 132;
    __int16 v31 = 2080;
    *(void *)int v32 = v19;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating CarPlay Main Audio %s port", buf, 0x1Cu);
  }
  return a1;
}

void sub_1896E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_104C04(v25);
  _Unwind_Resume(a1);
}

void sub_189754(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

void sub_189790(int a1, unsigned char *a2)
{
  *a2 = 1;
  if (a1 <= 193)
  {
    switch(a1)
    {
      case 9:
        sub_4642A4();
        return;
      case 10:
        goto LABEL_239;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 21:
      case 22:
      case 23:
      case 44:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 76:
      case 79:
      case 82:
      case 89:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
        goto LABEL_288;
      case 17:
      case 18:
        buf[0] = 0;
        LOBYTE(v83) = 0;
        BYTE4(v83) = 0;
        LOBYTE(v84) = 0;
        sub_20A0D0();
        LOBYTE(v86) = 1;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        sub_6CBEC();
        __int16 v91 = 0;
        int v92 = 16777473;
        uint64_t v95 = 0;
        char v94 = 0;
        char v93 = (uint64_t *)&v94;
        __int16 v96 = 0;
        char v97 = 0;
        int v98 = -1044381696;
        char v99 = 1;
        int v100 = -1044381696;
        char v101 = 1;
        int v102 = 0;
        char v103 = 1;
        int v104 = -1056964608;
        char v105 = 1;
        int v106 = -1033371648;
        char v107 = 1;
        int v108 = 0;
        char v109 = 1;
        int v110 = -1033371648;
        char v111 = 1;
        int v112 = 0;
        char v113 = 1;
        int v114 = -1044381696;
        char v115 = 1;
        int v116 = 0;
        char v117 = 1;
        int v118 = -1033371648;
        char v119 = 1;
        int v120 = 0;
        char v121 = 1;
        int v122 = -1033371648;
        char v123 = 1;
        int v124 = -1055916032;
        char v125 = 1;
        int v126 = -1033371648;
        char v127 = 1;
        int v128 = 0;
        char v129 = 1;
        int v130 = -1055916032;
        char v131 = 1;
        int v132 = -1033371648;
        char v133 = 1;
        int v134 = -1055916032;
        char v135 = 1;
        int v136 = -1033371648;
        char v137 = 1;
        int v138 = 0;
        char v139 = 1;
        int v140 = -1055916032;
        char v141 = 1;
        int v142 = -1043333120;
        char v143 = 1;
        int v144 = 0x40000000;
        char v145 = 1;
        int v146 = 16777472;
        int v147 = 0;
        char v148 = 1;
        int v149 = 0;
        char v150 = 1;
        int v151 = 1103626240;
        char v152 = 1;
        int v153 = 0;
        char v154 = 1;
        int v155 = 1094713344;
        char v156 = 1;
        int v157 = 1094713344;
        char v158 = 1;
        int v159 = 1094713344;
        char v160 = 1;
        int v161 = -1061158912;
        char v162 = 1;
        int v163 = 1107296256;
        char v164 = 1;
        int v165 = 1107296256;
        char v166 = 1;
        int v167 = 1092616192;
        char v168 = 1;
        int v169 = 0;
        char v170 = 1;
        int v171 = 0;
        char v172 = 1;
        int v173 = 16777472;
        v174[0].__r_.__value_.__s.__data_[0] = 0;
        char v175 = 0;
        LOBYTE(v176[0]) = 0;
        char v177 = 0;
        v178[0] = 0;
        char v179 = 0;
        LOBYTE(v180[0]) = 0;
        char v181 = 0;
        char v182 = 0;
        char v183 = 0;
        LOBYTE(v184) = 0;
        char v185 = 0;
        LOBYTE(v186) = 0;
        char v187 = 0;
        LOBYTE(v188) = 0;
        char v189 = 0;
        char v190 = 0;
        char v191 = 0;
        char v192 = 0;
        char v193 = 0;
        char v194 = 0;
        char v195 = 0;
        char v196 = 0;
        char v197 = 0;
        char v198 = 0;
        char v199 = 0;
        char v200 = 0;
        char v201 = 0;
        char v202 = 0;
        char v203 = 0;
        char v204 = 0;
        char v205 = 0;
        char v206 = 0;
        char v207 = 0;
        char v208 = 0;
        char v209 = 0;
        char v210 = 0;
        char v211 = 0;
        char v212 = 0;
        char v213 = 0;
        char v214 = 0;
        char v215 = 0;
        char v216 = 1;
        char v217 = 0;
        char v218 = 0;
        char v219 = 0;
        char v220 = 0;
        char v221 = 0;
        char v222 = 0;
        char v223 = 0;
        char v224 = 0;
        char v225 = 0;
        char v226 = 0;
        __int16 v227 = 0;
        char v228 = 0;
        char v229 = 0;
        char v230 = 0;
        char v231 = 0;
        char v232 = 0;
        char v233 = 0;
        char v234 = 0;
        char v235 = 0;
        char v236 = 0;
        char v237 = 0;
        char v238 = 0;
        char v239 = 0;
        char v240 = 0;
        char v241 = 0;
        char v242 = 0;
        char v243 = 0;
        char v244 = 0;
        char v245 = 0;
        char v246 = 0;
        char v247 = 0;
        LOBYTE(v248) = 0;
        char v249 = 0;
        char v250 = 0;
        char v251 = 0;
        char v252 = 0;
        char v253 = 0;
        char v254 = 0;
        char v255 = 0;
        char v256 = 0;
        char v257 = 0;
        int v258 = 256;
        char v259 = 0;
        char v260 = 0;
        LOBYTE(v261) = 0;
        char v262 = 0;
        LOBYTE(v263) = 0;
        char v264 = 0;
        __int16 v265 = 0;
        *(_WORD *)&v90[8] = 257;
        *(void *)int v90 = 0x10101010101;
        *(_DWORD *)&v90[10] = 16843009;
        *(_DWORD *)&v85[2] = 4;
        __src.__pn_.__r_.__value_.__r.__words[0] = 0x300000002;
        sub_8732C((char *)&v88 + 8, (char *)&__src, (uint64_t)&__src.__pn_.__r_.__value_.__l.__size_, 2uLL);
        LODWORD(__src.__pn_.__r_.__value_.__l.__data_) = 4;
        sub_8732C((char *)&v87, (char *)&__src, (uint64_t)__src.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
        HIWORD(v92) = 257;
        *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_ = xmmword_4E78E0;
        sub_6C4EC(&v93, (unsigned int *)&__src, (unsigned int *)&__src.__pn_.__r_.__value_.__r.__words[2]);
        int v167 = 1077936128;
        char v168 = 1;
        HIWORD(v146) = 257;
        if (!v249) {
          char v249 = 1;
        }
        int v248 = 2;
        sub_21C8C(&v75, "graph_configurations.plist");
        sub_460658((std::__fs::filesystem::path *)&__p, &v75);
        sub_45D7BC((uint64_t)&__src, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        HIBYTE(v96) = 1;
        sub_6CEC4(v174, &v70);
        sub_6CFE4((uint64_t)v176, (uint64_t)&__src);
        sub_3C72AC((uint64_t)&__p);
        sub_6D31C((uint64_t)v180, (uint64_t *)&__p);
        sub_6D600((uint64_t)v178, (long long *)v36);
        if (SHIBYTE(v43) < 0) {
          operator delete(v41);
        }
        if (v40 < 0) {
          operator delete(v38);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
        sub_6C7E4((void *)__p.__r_.__value_.__r.__words[2]);
        char v20 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v20) {
          operator delete(v20);
        }
        if (!v262) {
          char v262 = 1;
        }
        int v261 = 2;
        if (!v264) {
          char v264 = 1;
        }
        int v263 = 33;
        if (v74 < 0) {
          operator delete(v73);
        }
        if (v72 < 0) {
          operator delete(v71);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        sub_6C7E4((void *)__src.__pn_.__r_.__value_.__r.__words[2]);
        int v21 = (void *)__src.__pn_.__r_.__value_.__r.__words[0];
        __src.__pn_.__r_.__value_.__r.__words[0] = 0;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_213;
      case 19:
      case 20:
      case 40:
      case 41:
      case 45:
        buf[0] = 0;
        LOBYTE(v83) = 0;
        BYTE4(v83) = 0;
        LOBYTE(v84) = 0;
        *(_DWORD *)&v85[2] = sub_20A0D0();
        LOBYTE(v86) = 1;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        sub_6CBEC();
        __int16 v91 = 0;
        int v92 = 16843009;
        uint64_t v95 = 0;
        char v94 = 0;
        char v93 = (uint64_t *)&v94;
        __int16 v96 = 0;
        char v97 = 0;
        int v98 = -1044381696;
        char v99 = 1;
        int v100 = -1044381696;
        char v101 = 1;
        int v102 = 0;
        char v103 = 1;
        int v104 = -1056964608;
        char v105 = 1;
        int v106 = -1033371648;
        char v107 = 1;
        int v108 = 0;
        char v109 = 1;
        int v110 = -1033371648;
        char v111 = 1;
        int v112 = 0;
        char v113 = 1;
        int v114 = -1044381696;
        char v115 = 1;
        int v116 = 0;
        char v117 = 1;
        int v118 = -1033371648;
        char v119 = 1;
        int v120 = 0;
        char v121 = 1;
        int v122 = -1033371648;
        char v123 = 1;
        int v124 = -1055916032;
        char v125 = 1;
        int v126 = -1033371648;
        char v127 = 1;
        int v128 = 0;
        char v129 = 1;
        int v130 = -1055916032;
        char v131 = 1;
        int v132 = -1033371648;
        char v133 = 1;
        int v134 = -1055916032;
        char v135 = 1;
        int v136 = -1033371648;
        char v137 = 1;
        int v138 = 0;
        char v139 = 1;
        int v140 = -1055916032;
        char v141 = 1;
        int v142 = -1043333120;
        char v143 = 1;
        int v144 = 0x40000000;
        char v145 = 1;
        int v146 = 16777472;
        int v147 = 0;
        char v148 = 1;
        int v149 = 0;
        char v150 = 1;
        int v151 = 1103626240;
        char v152 = 1;
        int v153 = 0;
        char v154 = 1;
        int v155 = 1094713344;
        char v156 = 1;
        int v157 = 1094713344;
        char v158 = 1;
        int v159 = 1094713344;
        char v160 = 1;
        int v161 = -1061158912;
        char v162 = 1;
        int v163 = 1107296256;
        char v164 = 1;
        int v165 = 1107296256;
        char v166 = 1;
        int v167 = 1092616192;
        char v168 = 1;
        int v169 = 0;
        char v170 = 1;
        int v171 = 0;
        char v172 = 1;
        int v173 = 16777472;
        v174[0].__r_.__value_.__s.__data_[0] = 0;
        char v175 = 0;
        LOBYTE(v176[0]) = 0;
        char v177 = 0;
        v178[0] = 0;
        char v179 = 0;
        LOBYTE(v180[0]) = 0;
        char v181 = 0;
        char v182 = 0;
        char v183 = 0;
        LOBYTE(v184) = 0;
        char v185 = 0;
        LOBYTE(v186) = 0;
        char v187 = 0;
        LOBYTE(v188) = 0;
        char v189 = 0;
        char v190 = 0;
        char v191 = 0;
        char v192 = 0;
        char v193 = 0;
        char v194 = 0;
        char v195 = 0;
        char v196 = 0;
        char v197 = 0;
        char v198 = 0;
        char v199 = 0;
        char v200 = 0;
        char v201 = 0;
        char v202 = 0;
        char v203 = 0;
        char v204 = 0;
        char v205 = 0;
        char v206 = 0;
        char v207 = 0;
        char v208 = 0;
        char v209 = 0;
        char v210 = 0;
        char v211 = 0;
        char v212 = 0;
        char v213 = 0;
        char v214 = 0;
        char v215 = 0;
        char v216 = 1;
        char v217 = 0;
        char v218 = 0;
        char v219 = 0;
        char v220 = 0;
        char v221 = 0;
        char v222 = 0;
        char v223 = 0;
        char v224 = 0;
        char v225 = 0;
        char v226 = 0;
        __int16 v227 = 0;
        char v228 = 0;
        char v229 = 0;
        char v230 = 0;
        char v231 = 0;
        char v232 = 0;
        char v233 = 0;
        char v234 = 0;
        char v235 = 0;
        char v236 = 0;
        char v237 = 0;
        char v238 = 0;
        char v239 = 0;
        char v240 = 0;
        char v241 = 0;
        char v242 = 0;
        char v243 = 0;
        char v244 = 0;
        char v245 = 0;
        char v246 = 0;
        char v247 = 0;
        LOBYTE(v248) = 0;
        char v249 = 0;
        char v250 = 0;
        char v251 = 0;
        char v252 = 0;
        char v253 = 0;
        char v254 = 0;
        char v255 = 0;
        char v256 = 0;
        char v257 = 0;
        int v258 = 256;
        char v259 = 0;
        char v260 = 0;
        LOBYTE(v261) = 0;
        char v262 = 0;
        LOBYTE(v263) = 0;
        char v264 = 0;
        __int16 v265 = 0;
        *(_DWORD *)&v90[8] = 16843009;
        *(void *)int v90 = 0x10001010101;
        *(_WORD *)&v90[12] = 257;
        *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_ = xmmword_4E78E0;
        sub_6C4EC(&v93, (unsigned int *)&__src, (unsigned int *)&__src.__pn_.__r_.__value_.__r.__words[2]);
        int v167 = 1077936128;
        char v168 = 1;
        HIWORD(v146) = 257;
        if (!v249) {
          char v249 = 1;
        }
        int v248 = 2;
        sub_21C8C(&v75, "graph_configurations.plist");
        sub_460658((std::__fs::filesystem::path *)&__p, &v75);
        sub_45D7BC((uint64_t)&__src, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        HIBYTE(v96) = 1;
        sub_6CEC4(v174, &v70);
        sub_6CFE4((uint64_t)v176, (uint64_t)&__src);
        sub_3C72AC((uint64_t)&__p);
        sub_6D31C((uint64_t)v180, (uint64_t *)&__p);
        sub_6D600((uint64_t)v178, (long long *)v36);
        if (SHIBYTE(v43) < 0) {
          operator delete(v41);
        }
        if (v40 < 0) {
          operator delete(v38);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
        sub_6C7E4((void *)__p.__r_.__value_.__r.__words[2]);
        uint64_t v4 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v4) {
          operator delete(v4);
        }
        if (!v262) {
          char v262 = 1;
        }
        int v261 = 2;
        if (!v264) {
          char v264 = 1;
        }
        int v263 = 33;
        if (v74 < 0) {
          operator delete(v73);
        }
        if (v72 < 0) {
          operator delete(v71);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        sub_6C7E4((void *)__src.__pn_.__r_.__value_.__r.__words[2]);
        long long v5 = (void *)__src.__pn_.__r_.__value_.__r.__words[0];
        __src.__pn_.__r_.__value_.__r.__words[0] = 0;
        if (v5) {
          operator delete(v5);
        }
        goto LABEL_213;
      case 24:
        sub_18819C();
        return;
      case 25:
        sub_272A6C();
        return;
      case 26:
        sub_1676C8();
        return;
      case 27:
        sub_385A04();
        return;
      case 28:
        sub_385AE8();
        return;
      case 29:
      case 30:
      case 42:
      case 43:
        buf[0] = 0;
        LOBYTE(v83) = 0;
        BYTE4(v83) = 0;
        LOBYTE(v84) = 0;
        *(_DWORD *)&v85[2] = sub_20A0D0();
        LOBYTE(v86) = 1;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        v90[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
        v90[5] = 1;
        *(_WORD *)&v90[6] = 0;
        __int16 v91 = 0;
        int v92 = 16843009;
        uint64_t v95 = 0;
        char v94 = 0;
        char v93 = (uint64_t *)&v94;
        __int16 v96 = 0;
        char v97 = 0;
        int v98 = -1044381696;
        char v99 = 1;
        int v100 = -1044381696;
        char v101 = 1;
        int v102 = 0;
        char v103 = 1;
        int v104 = -1056964608;
        char v105 = 1;
        int v106 = -1033371648;
        char v107 = 1;
        int v108 = 0;
        char v109 = 1;
        int v110 = -1033371648;
        char v111 = 1;
        int v112 = 0;
        char v113 = 1;
        int v114 = -1044381696;
        char v115 = 1;
        int v116 = 0;
        char v117 = 1;
        int v118 = -1033371648;
        char v119 = 1;
        int v120 = 0;
        char v121 = 1;
        int v122 = -1033371648;
        char v123 = 1;
        int v124 = -1055916032;
        char v125 = 1;
        int v126 = -1033371648;
        char v127 = 1;
        int v128 = 0;
        char v129 = 1;
        int v130 = -1055916032;
        char v131 = 1;
        int v132 = -1033371648;
        char v133 = 1;
        int v134 = -1055916032;
        char v135 = 1;
        int v136 = -1033371648;
        char v137 = 1;
        int v138 = 0;
        char v139 = 1;
        int v140 = -1055916032;
        char v141 = 1;
        int v142 = -1043333120;
        char v143 = 1;
        int v144 = 0x40000000;
        char v145 = 1;
        int v146 = 16777472;
        int v147 = 0;
        char v148 = 1;
        int v149 = 0;
        char v150 = 1;
        int v151 = 1103626240;
        char v152 = 1;
        int v153 = 0;
        char v154 = 1;
        int v155 = 1094713344;
        char v156 = 1;
        int v157 = 1094713344;
        char v158 = 1;
        int v159 = 1094713344;
        char v160 = 1;
        int v161 = -1061158912;
        char v162 = 1;
        int v163 = 1107296256;
        char v164 = 1;
        int v165 = 1107296256;
        char v166 = 1;
        int v167 = 1092616192;
        char v168 = 1;
        int v169 = 0;
        char v170 = 1;
        int v171 = 0;
        char v172 = 1;
        int v173 = 16777472;
        v174[0].__r_.__value_.__s.__data_[0] = 0;
        char v175 = 0;
        LOBYTE(v176[0]) = 0;
        char v177 = 0;
        v178[0] = 0;
        char v179 = 0;
        LOBYTE(v180[0]) = 0;
        char v181 = 0;
        char v182 = 0;
        char v183 = 0;
        LOBYTE(v184) = 0;
        char v185 = 0;
        LOBYTE(v186) = 0;
        char v187 = 0;
        LOBYTE(v188) = 0;
        char v189 = 0;
        char v190 = 0;
        char v191 = 0;
        char v192 = 0;
        char v193 = 0;
        char v194 = 0;
        char v195 = 0;
        char v196 = 0;
        char v197 = 0;
        char v198 = 0;
        char v199 = 0;
        char v200 = 0;
        char v201 = 0;
        char v202 = 0;
        char v203 = 0;
        char v204 = 0;
        char v205 = 0;
        char v206 = 0;
        char v207 = 0;
        char v208 = 0;
        char v209 = 0;
        char v210 = 0;
        char v211 = 0;
        char v212 = 0;
        char v213 = 0;
        char v214 = 0;
        char v215 = 0;
        char v216 = 1;
        char v217 = 0;
        char v218 = 0;
        char v219 = 0;
        char v220 = 0;
        char v221 = 0;
        char v222 = 0;
        char v223 = 0;
        char v224 = 0;
        char v225 = 0;
        char v226 = 0;
        __int16 v227 = 0;
        char v228 = 0;
        char v229 = 0;
        char v230 = 0;
        char v231 = 0;
        char v232 = 0;
        char v233 = 0;
        char v234 = 0;
        char v235 = 0;
        char v236 = 0;
        char v237 = 0;
        char v238 = 0;
        char v239 = 0;
        char v240 = 0;
        char v241 = 0;
        char v242 = 0;
        char v243 = 0;
        char v244 = 0;
        char v245 = 0;
        char v246 = 0;
        char v247 = 0;
        LOBYTE(v248) = 0;
        char v249 = 0;
        char v250 = 0;
        char v251 = 0;
        char v252 = 0;
        char v253 = 0;
        char v254 = 0;
        char v255 = 0;
        char v256 = 0;
        char v257 = 0;
        int v258 = 256;
        char v259 = 0;
        char v260 = 0;
        LOBYTE(v261) = 0;
        char v262 = 0;
        LOBYTE(v263) = 0;
        char v264 = 0;
        __int16 v265 = 0;
        *(_DWORD *)&v90[8] = 16843009;
        *(_DWORD *)int v90 = 16843009;
        *(_WORD *)&v90[12] = 257;
        *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_ = xmmword_4E78E0;
        sub_6C4EC(&v93, (unsigned int *)&__src, (unsigned int *)&__src.__pn_.__r_.__value_.__r.__words[2]);
        int v167 = 1077936128;
        char v168 = 1;
        HIWORD(v146) = 257;
        if (!v249) {
          char v249 = 1;
        }
        int v248 = 2;
        sub_21C8C(&__p, "graph_configurations.plist");
        sub_460658(&__src, &__p);
        sub_45D7BC((uint64_t)&v75, (uint64_t)&__src);
        if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__src.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        HIBYTE(v96) = 1;
        sub_6CEC4(v174, &v76);
        sub_6CFE4((uint64_t)v176, (uint64_t)&v75);
        sub_21C8C(&v64, "speaker_protection");
        sub_21C8C(&__p, "speaker_hal");
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        v36[0] = 0;
        sub_21C8C(&v36[1], "speaker_hal");
        sub_21C8C(&v39, "speaker_hal");
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        int v45 = 1684434036;
        LODWORD(v67.__r_.__value_.__l.__data_) = 1936749683;
        v67.__r_.__value_.__l.__size_ = 0;
        int v47 = 0;
        char v48 = 0;
        char v46 = 0;
        v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
        v81.__r_.__value_.__s.__data_[8] = 0;
        char v46 = (char *)operator new(0x10uLL);
        int v47 = v46;
        uint64_t v12 = v46 + 16;
        char v48 = v46 + 16;
        sub_6D16C((uint64_t)v46, 1936749683, 0);
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        long long v49 = 0u;
        long long v50 = 0u;
        int v47 = v12;
        int v51 = &v52;
        int v55 = 0;
        char v56 = 0;
        char v54 = 0;
        char v13 = operator new(0x10uLL);
        char v54 = v13;
        _OWORD *v13 = xmmword_4E7910;
        int v55 = v13 + 1;
        char v56 = v13 + 1;
        char v57 = 0;
        char v58 = 0;
        long long v60 = 0u;
        long long v59 = 0u;
        uint64_t v61 = 0;
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = xmmword_5968C4;
        v81.__r_.__value_.__r.__words[2] = 2;
        sub_6D1AC((uint64_t)&v59, (int *)&v81, 3);
        char v62 = 0;
        uint64_t v63 = 0;
        sub_6D224(&__src, (long long *)&v64, (long long *)&__p);
        sub_6D2A0((uint64_t)v65, (unsigned __int8 *)&__src, 1);
        sub_6D31C((uint64_t)v180, (uint64_t *)v65);
        sub_6C7E4(v66);
        uint64_t v14 = v65[0];
        v65[0] = 0;
        if (v14) {
          operator delete(v14);
        }
        sub_6C878((uint64_t)v69);
        if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__src.__pn_.__r_.__value_.__l.__data_);
        }
        sub_6C878((uint64_t)&__p);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        sub_21C8C(&__p, "");
        sub_21C8C(v65, "");
        sub_21C8C(&v81, off_648B50);
        sub_21C8C(&v64, "AU");
        sub_21C8C(&v67, off_648B48[0]);
        sub_6D364((char *)&__src, (long long *)&__p, (uint64_t)v65, &v81, &v64, &v67);
        sub_6D600((uint64_t)v178, (long long *)&__src);
        if (SHIBYTE(v71) < 0) {
          operator delete((void *)v70.__r_.__value_.__l.__size_);
        }
        if (v70.__r_.__value_.__s.__data_[7] < 0) {
          operator delete(v69[0]);
        }
        if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__src.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66) < 0) {
          operator delete(v65[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (!v262) {
          char v262 = 1;
        }
        int v261 = 2;
        if (!v264) {
          char v264 = 1;
        }
        int v263 = 33;
        if (v80 < 0) {
          operator delete(v79);
        }
        if (v78 < 0) {
          operator delete(v77);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        sub_6C7E4((void *)v75.__r_.__value_.__r.__words[2]);
        uint64_t v15 = (void *)v75.__r_.__value_.__r.__words[0];
        v75.__r_.__value_.__r.__words[0] = 0;
        if (v15) {
          operator delete(v15);
        }
        goto LABEL_213;
      case 31:
        sub_214594();
        return;
      case 32:
        sub_18DDDC();
        return;
      case 33:
        sub_18E0DC();
        return;
      case 34:
        sub_18E1C0();
        return;
      case 35:
        sub_18E2A4();
        return;
      case 36:
        sub_1CE8CC();
        return;
      case 37:
        sub_1CE948();
        return;
      case 38:
      case 39:
        buf[0] = 0;
        LOBYTE(v83) = 0;
        BYTE4(v83) = 0;
        LOBYTE(v84) = 0;
        sub_20A0D0();
        LOBYTE(v86) = 1;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        sub_6CBEC();
        __int16 v91 = 0;
        int v92 = 16777473;
        uint64_t v95 = 0;
        char v94 = 0;
        char v93 = (uint64_t *)&v94;
        __int16 v96 = 0;
        char v97 = 0;
        int v98 = -1044381696;
        char v99 = 1;
        int v100 = -1044381696;
        char v101 = 1;
        int v102 = 0;
        char v103 = 1;
        int v104 = -1056964608;
        char v105 = 1;
        int v106 = -1033371648;
        char v107 = 1;
        int v108 = 0;
        char v109 = 1;
        int v110 = -1033371648;
        char v111 = 1;
        int v112 = 0;
        char v113 = 1;
        int v114 = -1044381696;
        char v115 = 1;
        int v116 = 0;
        char v117 = 1;
        int v118 = -1033371648;
        char v119 = 1;
        int v120 = 0;
        char v121 = 1;
        int v122 = -1033371648;
        char v123 = 1;
        int v124 = -1055916032;
        char v125 = 1;
        int v126 = -1033371648;
        char v127 = 1;
        int v128 = 0;
        char v129 = 1;
        int v130 = -1055916032;
        char v131 = 1;
        int v132 = -1033371648;
        char v133 = 1;
        int v134 = -1055916032;
        char v135 = 1;
        int v136 = -1033371648;
        char v137 = 1;
        int v138 = 0;
        char v139 = 1;
        int v140 = -1055916032;
        char v141 = 1;
        int v142 = -1043333120;
        char v143 = 1;
        int v144 = 0x40000000;
        char v145 = 1;
        int v146 = 16777472;
        int v147 = 0;
        char v148 = 1;
        int v149 = 0;
        char v150 = 1;
        int v151 = 1103626240;
        char v152 = 1;
        int v153 = 0;
        char v154 = 1;
        int v155 = 1094713344;
        char v156 = 1;
        int v157 = 1094713344;
        char v158 = 1;
        int v159 = 1094713344;
        char v160 = 1;
        int v161 = -1061158912;
        char v162 = 1;
        int v163 = 1107296256;
        char v164 = 1;
        int v165 = 1107296256;
        char v166 = 1;
        int v167 = 1092616192;
        char v168 = 1;
        int v169 = 0;
        char v170 = 1;
        int v171 = 0;
        char v172 = 1;
        int v173 = 16777472;
        v174[0].__r_.__value_.__s.__data_[0] = 0;
        char v175 = 0;
        LOBYTE(v176[0]) = 0;
        char v177 = 0;
        v178[0] = 0;
        char v179 = 0;
        LOBYTE(v180[0]) = 0;
        char v181 = 0;
        char v182 = 0;
        char v183 = 0;
        LOBYTE(v184) = 0;
        char v185 = 0;
        LOBYTE(v186) = 0;
        char v187 = 0;
        LOBYTE(v188) = 0;
        char v189 = 0;
        char v190 = 0;
        char v191 = 0;
        char v192 = 0;
        char v193 = 0;
        char v194 = 0;
        char v195 = 0;
        char v196 = 0;
        char v197 = 0;
        char v198 = 0;
        char v199 = 0;
        char v200 = 0;
        char v201 = 0;
        char v202 = 0;
        char v203 = 0;
        char v204 = 0;
        char v205 = 0;
        char v206 = 0;
        char v207 = 0;
        char v208 = 0;
        char v209 = 0;
        char v210 = 0;
        char v211 = 0;
        char v212 = 0;
        char v213 = 0;
        char v214 = 0;
        char v215 = 0;
        char v216 = 1;
        char v217 = 0;
        char v218 = 0;
        char v219 = 0;
        char v220 = 0;
        char v221 = 0;
        char v222 = 0;
        char v223 = 0;
        char v224 = 0;
        char v225 = 0;
        char v226 = 0;
        __int16 v227 = 0;
        char v228 = 0;
        char v229 = 0;
        char v230 = 0;
        char v231 = 0;
        char v232 = 0;
        char v233 = 0;
        char v234 = 0;
        char v235 = 0;
        char v236 = 0;
        char v237 = 0;
        char v238 = 0;
        char v239 = 0;
        char v240 = 0;
        char v241 = 0;
        char v242 = 0;
        char v243 = 0;
        char v244 = 0;
        char v245 = 0;
        char v246 = 0;
        char v247 = 0;
        LOBYTE(v248) = 0;
        char v249 = 0;
        char v250 = 0;
        char v251 = 0;
        char v252 = 0;
        char v253 = 0;
        char v254 = 0;
        char v255 = 0;
        char v256 = 0;
        char v257 = 0;
        int v258 = 256;
        char v259 = 0;
        char v260 = 0;
        LOBYTE(v261) = 0;
        char v262 = 0;
        LOBYTE(v263) = 0;
        char v264 = 0;
        __int16 v265 = 0;
        *(_WORD *)&v90[8] = 257;
        *(void *)int v90 = 0x10101010101;
        *(_DWORD *)&v90[10] = 16843009;
        *(_DWORD *)&v85[2] = 4;
        __src.__pn_.__r_.__value_.__r.__words[0] = 0x300000002;
        sub_8732C((char *)&v88 + 8, (char *)&__src, (uint64_t)&__src.__pn_.__r_.__value_.__l.__size_, 2uLL);
        LODWORD(__src.__pn_.__r_.__value_.__l.__data_) = 4;
        sub_8732C((char *)&v87, (char *)&__src, (uint64_t)__src.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
        HIWORD(v92) = 257;
        *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_ = xmmword_4E78E0;
        sub_6C4EC(&v93, (unsigned int *)&__src, (unsigned int *)&__src.__pn_.__r_.__value_.__r.__words[2]);
        int v167 = 1077936128;
        char v168 = 1;
        HIWORD(v146) = 257;
        if (!v249) {
          char v249 = 1;
        }
        int v248 = 2;
        sub_21C8C(&v75, "graph_configurations.plist");
        sub_460658((std::__fs::filesystem::path *)&__p, &v75);
        sub_45D7BC((uint64_t)&__src, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        sub_6CEC4(v174, &v70);
        sub_6CFE4((uint64_t)v176, (uint64_t)&__src);
        HIBYTE(v96) = 1;
        sub_3C72AC((uint64_t)&__p);
        sub_6D31C((uint64_t)v180, (uint64_t *)&__p);
        sub_6D600((uint64_t)v178, (long long *)v36);
        if (SHIBYTE(v43) < 0) {
          operator delete(v41);
        }
        if (v40 < 0) {
          operator delete(v38);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
        sub_6C7E4((void *)__p.__r_.__value_.__r.__words[2]);
        uint64_t v16 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v16) {
          operator delete(v16);
        }
        if (!v262) {
          char v262 = 1;
        }
        int v261 = 2;
        if (!v264) {
          char v264 = 1;
        }
        int v263 = 33;
        if (v74 < 0) {
          operator delete(v73);
        }
        if (v72 < 0) {
          operator delete(v71);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        sub_6C7E4((void *)__src.__pn_.__r_.__value_.__r.__words[2]);
        char v17 = (void *)__src.__pn_.__r_.__value_.__r.__words[0];
        __src.__pn_.__r_.__value_.__r.__words[0] = 0;
        if (v17) {
          operator delete(v17);
        }
LABEL_213:
        sub_2A8EDC(buf);
        goto LABEL_283;
      case 46:
        sub_190AB4();
        return;
      case 72:
        sub_194408();
        return;
      case 73:
        sub_3D704C();
        return;
      case 74:
        sub_387A1C();
        return;
      case 75:
        sub_38D8E4();
        return;
      case 77:
        sub_27F348();
        return;
      case 78:
        sub_27FDD4();
        return;
      case 80:
      case 81:
        sub_20A0D0();
        LOBYTE(v86) = 1;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        *(_DWORD *)int v90 = 0;
        v90[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
        v90[5] = 1;
        *(void *)&v90[6] = 0;
        __int16 v91 = 0;
        int v92 = 16777473;
        uint64_t v95 = 0;
        char v94 = 0;
        char v93 = (uint64_t *)&v94;
        __int16 v96 = 0;
        char v97 = 0;
        int v98 = -1044381696;
        char v99 = 1;
        int v100 = -1044381696;
        char v101 = 1;
        int v102 = 0;
        char v103 = 1;
        int v104 = -1056964608;
        char v105 = 1;
        int v106 = -1033371648;
        char v107 = 1;
        int v108 = 0;
        char v109 = 1;
        int v110 = -1033371648;
        char v111 = 1;
        int v112 = 0;
        char v113 = 1;
        int v114 = -1044381696;
        char v115 = 1;
        int v116 = 0;
        char v117 = 1;
        int v118 = -1033371648;
        char v119 = 1;
        int v120 = 0;
        char v121 = 1;
        int v122 = -1033371648;
        char v123 = 1;
        int v124 = -1055916032;
        char v125 = 1;
        int v126 = -1033371648;
        char v127 = 1;
        int v128 = 0;
        char v129 = 1;
        int v130 = -1055916032;
        char v131 = 1;
        int v132 = -1033371648;
        char v133 = 1;
        int v134 = -1055916032;
        char v135 = 1;
        int v136 = -1033371648;
        char v137 = 1;
        int v138 = 0;
        char v139 = 1;
        int v140 = -1055916032;
        char v141 = 1;
        int v142 = -1043333120;
        char v143 = 1;
        int v144 = 0x40000000;
        char v145 = 1;
        int v146 = 16777472;
        int v147 = 0;
        char v148 = 1;
        int v149 = 0;
        char v150 = 1;
        int v151 = 1103626240;
        char v152 = 1;
        int v153 = 0;
        char v154 = 1;
        int v155 = 1094713344;
        char v156 = 1;
        int v157 = 1094713344;
        char v158 = 1;
        int v159 = 1094713344;
        char v160 = 1;
        int v161 = -1061158912;
        char v162 = 1;
        int v163 = 1107296256;
        char v164 = 1;
        int v165 = 1107296256;
        char v166 = 1;
        int v167 = 1092616192;
        char v168 = 1;
        int v169 = 0;
        char v170 = 1;
        int v171 = 0;
        char v172 = 1;
        int v173 = 16777472;
        v174[0].__r_.__value_.__s.__data_[0] = 0;
        char v175 = 0;
        LOBYTE(v176[0]) = 0;
        char v177 = 0;
        v178[0] = 0;
        char v179 = 0;
        LOBYTE(v180[0]) = 0;
        char v181 = 0;
        char v182 = 0;
        char v183 = 0;
        LOBYTE(v184) = 0;
        char v185 = 0;
        LOBYTE(v186) = 0;
        char v187 = 0;
        LOBYTE(v188) = 0;
        char v189 = 0;
        char v190 = 0;
        char v191 = 0;
        char v192 = 0;
        char v193 = 0;
        char v194 = 0;
        char v195 = 0;
        char v196 = 0;
        char v197 = 0;
        char v198 = 0;
        char v199 = 0;
        char v200 = 0;
        char v201 = 0;
        char v202 = 0;
        char v203 = 0;
        char v204 = 0;
        char v205 = 0;
        char v206 = 0;
        char v207 = 0;
        char v208 = 0;
        char v209 = 0;
        char v210 = 0;
        char v211 = 0;
        char v212 = 0;
        char v213 = 0;
        char v214 = 0;
        char v215 = 0;
        char v216 = 1;
        char v217 = 0;
        char v218 = 0;
        char v219 = 0;
        char v220 = 0;
        char v221 = 0;
        char v222 = 0;
        char v223 = 0;
        char v224 = 0;
        char v225 = 0;
        char v226 = 0;
        __int16 v227 = 0;
        char v228 = 0;
        char v229 = 0;
        char v230 = 0;
        char v231 = 0;
        char v232 = 0;
        char v233 = 0;
        char v234 = 0;
        char v235 = 0;
        char v236 = 0;
        char v237 = 0;
        char v238 = 0;
        char v239 = 0;
        char v240 = 0;
        char v241 = 0;
        char v242 = 0;
        char v243 = 0;
        char v244 = 0;
        char v245 = 0;
        char v246 = 0;
        char v247 = 0;
        LOBYTE(v248) = 0;
        char v249 = 0;
        char v250 = 0;
        char v251 = 0;
        char v252 = 0;
        char v253 = 0;
        char v254 = 0;
        char v255 = 0;
        char v256 = 0;
        char v257 = 0;
        int v258 = 256;
        char v259 = 0;
        char v260 = 0;
        LOBYTE(v261) = 0;
        char v262 = 0;
        LOBYTE(v263) = 0;
        char v264 = 0;
        __int16 v265 = 0;
        LOBYTE(v83) = 1;
        *(_DWORD *)AudioObjectPropertyAddress buf = 1953460273;
        LOBYTE(v84) = 1;
        HIDWORD(v83) = 1;
        *(_DWORD *)&v85[2] = 2;
        LODWORD(__src.__pn_.__r_.__value_.__l.__data_) = 1;
        sub_8732C((char *)&v87, (char *)&__src, (uint64_t)__src.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
        __src.__pn_.__r_.__value_.__r.__words[0] = 0x200000001;
        sub_8732C((char *)&v88 + 8, (char *)&__src, (uint64_t)&__src.__pn_.__r_.__value_.__l.__size_, 2uLL);
        *(void *)int v90 = 0x101010101000101;
        *(_WORD *)&v90[12] = 257;
        int v92 = 16843009;
        int v142 = -1047527424;
        char v143 = 1;
        int v151 = 1103101952;
        char v152 = 1;
        int v157 = 0;
        char v158 = 1;
        int v159 = 0;
        char v160 = 1;
        int v155 = 0;
        char v156 = 1;
        int v171 = 0;
        char v172 = 1;
        int v161 = -1040187392;
        char v162 = 1;
        int v144 = 0;
        char v145 = 1;
        int v173 = 16843009;
        if (!v185) {
          char v185 = 1;
        }
        int v184 = 2;
        if (!v187) {
          char v187 = 1;
        }
        int v186 = 2;
        if (!v189) {
          char v189 = 1;
        }
        int v188 = 0;
        sub_21C8C(&v75, "graph_configurations.plist");
        sub_460658((std::__fs::filesystem::path *)&__p, &v75);
        sub_45D7BC((uint64_t)&__src, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        sub_6CEC4(v174, &v70);
        sub_6CFE4((uint64_t)v176, (uint64_t)&__src);
        HIBYTE(v96) = 1;
        sub_3C72AC((uint64_t)&__p);
        sub_6D31C((uint64_t)v180, (uint64_t *)&__p);
        sub_6D600((uint64_t)v178, (long long *)v36);
        if (SHIBYTE(v43) < 0) {
          operator delete(v41);
        }
        if (v40 < 0) {
          operator delete(v38);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
        sub_6C7E4((void *)__p.__r_.__value_.__r.__words[2]);
        int v18 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v18) {
          operator delete(v18);
        }
        if (v74 < 0) {
          operator delete(v73);
        }
        if (v72 < 0) {
          operator delete(v71);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        sub_6C7E4((void *)__src.__pn_.__r_.__value_.__r.__words[2]);
        int v19 = (void *)__src.__pn_.__r_.__value_.__r.__words[0];
        __src.__pn_.__r_.__value_.__r.__words[0] = 0;
        if (v19) {
          operator delete(v19);
        }
        goto LABEL_282;
      case 83:
        sub_3652AC();
        return;
      case 84:
        sub_2236E0();
        return;
      case 85:
        sub_2071FC();
        return;
      case 86:
        sub_292BD0();
        return;
      case 87:
        sub_FE6B4();
        return;
      case 88:
        sub_18E388();
        return;
      case 90:
      case 91:
        *(_DWORD *)&v85[2] = sub_20A0D0();
        LOBYTE(v86) = 1;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        *(_DWORD *)int v90 = 0;
        v90[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
        v90[5] = 1;
        *(void *)&v90[6] = 0;
        __int16 v91 = 0;
        int v92 = 16777473;
        uint64_t v95 = 0;
        char v94 = 0;
        char v93 = (uint64_t *)&v94;
        __int16 v96 = 256;
        char v97 = 0;
        int v98 = -1044381696;
        char v99 = 1;
        int v100 = -1044381696;
        char v101 = 1;
        int v102 = 0;
        char v103 = 1;
        int v104 = -1056964608;
        char v105 = 1;
        int v106 = -1033371648;
        char v107 = 1;
        int v108 = 0;
        char v109 = 1;
        int v110 = -1033371648;
        char v111 = 1;
        int v112 = 0;
        char v113 = 1;
        int v114 = -1044381696;
        char v115 = 1;
        int v116 = 0;
        char v117 = 1;
        int v118 = -1033371648;
        char v119 = 1;
        int v120 = 0;
        char v121 = 1;
        int v122 = -1033371648;
        char v123 = 1;
        int v124 = -1055916032;
        char v125 = 1;
        int v126 = -1033371648;
        char v127 = 1;
        int v128 = 0;
        char v129 = 1;
        int v130 = -1055916032;
        char v131 = 1;
        int v132 = -1033371648;
        char v133 = 1;
        int v134 = -1055916032;
        char v135 = 1;
        int v136 = -1033371648;
        char v137 = 1;
        int v138 = 0;
        char v139 = 1;
        int v140 = -1055916032;
        char v141 = 1;
        int v142 = -1043333120;
        char v143 = 1;
        int v144 = 0x40000000;
        char v145 = 1;
        int v146 = 16777472;
        int v147 = 0;
        char v148 = 1;
        int v149 = 0;
        char v150 = 1;
        int v151 = 1103626240;
        char v152 = 1;
        int v153 = 0;
        char v154 = 1;
        int v155 = 1094713344;
        char v156 = 1;
        int v157 = 1094713344;
        char v158 = 1;
        int v159 = 1094713344;
        char v160 = 1;
        int v161 = -1061158912;
        char v162 = 1;
        int v163 = 1107296256;
        char v164 = 1;
        int v165 = 1107296256;
        char v166 = 1;
        int v167 = 1092616192;
        char v168 = 1;
        int v169 = 0;
        char v170 = 1;
        int v171 = 0;
        char v172 = 1;
        int v173 = 16777472;
        v174[0].__r_.__value_.__s.__data_[0] = 0;
        char v175 = 0;
        LOBYTE(v176[0]) = 0;
        char v177 = 0;
        v178[0] = 0;
        char v179 = 0;
        LOBYTE(v180[0]) = 0;
        char v181 = 0;
        char v182 = 0;
        char v183 = 0;
        LOBYTE(v184) = 0;
        char v185 = 0;
        LOBYTE(v186) = 0;
        char v187 = 0;
        LOBYTE(v188) = 0;
        char v189 = 0;
        char v190 = 0;
        char v191 = 0;
        char v192 = 0;
        char v193 = 0;
        char v194 = 0;
        char v195 = 0;
        char v196 = 0;
        char v197 = 0;
        char v198 = 0;
        char v199 = 0;
        char v200 = 0;
        char v201 = 0;
        char v202 = 0;
        char v203 = 0;
        char v204 = 0;
        char v205 = 0;
        char v206 = 0;
        char v207 = 0;
        char v208 = 0;
        char v209 = 0;
        char v210 = 0;
        char v211 = 0;
        char v212 = 0;
        char v213 = 0;
        char v214 = 0;
        char v215 = 0;
        char v216 = 1;
        char v217 = 0;
        char v218 = 0;
        char v219 = 0;
        char v220 = 0;
        char v221 = 0;
        char v222 = 0;
        char v223 = 0;
        char v224 = 0;
        char v225 = 0;
        char v226 = 0;
        __int16 v227 = 0;
        char v228 = 0;
        char v229 = 0;
        char v230 = 0;
        char v231 = 0;
        char v232 = 0;
        char v233 = 0;
        char v234 = 0;
        char v235 = 0;
        char v236 = 0;
        char v237 = 0;
        char v238 = 0;
        char v239 = 0;
        char v240 = 0;
        char v241 = 0;
        char v242 = 0;
        char v243 = 0;
        char v244 = 0;
        char v245 = 0;
        char v246 = 0;
        char v247 = 0;
        LOBYTE(v248) = 0;
        char v249 = 0;
        char v250 = 0;
        char v251 = 0;
        char v252 = 0;
        char v253 = 0;
        char v254 = 0;
        char v255 = 0;
        char v256 = 0;
        char v257 = 0;
        int v258 = 256;
        char v259 = 0;
        char v260 = 0;
        LOBYTE(v261) = 0;
        char v262 = 0;
        LOBYTE(v263) = 0;
        char v264 = 0;
        __int16 v265 = 0;
        LOBYTE(v83) = 1;
        *(_DWORD *)AudioObjectPropertyAddress buf = 1953460273;
        LOBYTE(v84) = 1;
        HIDWORD(v83) = 1;
        *(_DWORD *)&v85[2] = sub_20A0D0();
        LOBYTE(v86) = 1;
        LODWORD(__src.__pn_.__r_.__value_.__l.__data_) = 1;
        sub_8732C((char *)&v87, (char *)&__src, (uint64_t)__src.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
        __src.__pn_.__r_.__value_.__r.__words[0] = 0x200000001;
        sub_8732C((char *)&v88 + 8, (char *)&__src, (uint64_t)&__src.__pn_.__r_.__value_.__l.__size_, 2uLL);
        *(_DWORD *)int v90 = 16777473;
        *(_WORD *)&v90[6] = 257;
        int v92 = 16843009;
        int v142 = -1047527424;
        char v143 = 1;
        int v151 = 1103101952;
        char v152 = 1;
        int v157 = 0;
        char v158 = 1;
        int v159 = 0;
        char v160 = 1;
        int v155 = 0;
        char v156 = 1;
        int v171 = 0;
        char v172 = 1;
        int v161 = -1040187392;
        char v162 = 1;
        int v144 = 0;
        char v145 = 1;
        int v173 = 16843009;
        if (!v187) {
          char v187 = 1;
        }
        int v186 = 2;
        sub_21C8C(&v75, "graph_configurations.plist");
        sub_460658((std::__fs::filesystem::path *)&__p, &v75);
        sub_45D7BC((uint64_t)&__src, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        sub_6CEC4(v174, &v70);
        sub_6CFE4((uint64_t)v176, (uint64_t)&__src);
        sub_21C8C(&__p, "multicam_recording");
        *(_WORD *)&v90[12] = (sub_2D4480(v176, (unsigned __int8 *)&__p) != 0) | 0x100;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_3C72AC((uint64_t)&__p);
        sub_6D31C((uint64_t)v180, (uint64_t *)&__p);
        sub_6D600((uint64_t)v178, (long long *)v36);
        if (SHIBYTE(v43) < 0) {
          operator delete(v41);
        }
        if (v40 < 0) {
          operator delete(v38);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
        sub_6C7E4((void *)__p.__r_.__value_.__r.__words[2]);
        char v22 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v22) {
          operator delete(v22);
        }
        if (v74 < 0) {
          operator delete(v73);
        }
        if (v72 < 0) {
          operator delete(v71);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        sub_6C7E4((void *)__src.__pn_.__r_.__value_.__r.__words[2]);
        __int16 v23 = (void *)__src.__pn_.__r_.__value_.__r.__words[0];
        __src.__pn_.__r_.__value_.__r.__words[0] = 0;
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_282;
      case 92:
        sub_445870();
        return;
      case 93:
        sub_20697C();
        return;
      case 94:
        sub_182B6C();
        return;
      case 95:
        sub_1832A8();
        return;
      case 96:
        sub_46F8D0();
        return;
      case 97:
        sub_86C60();
        return;
      case 98:
      case 99:
        goto LABEL_32;
      case 100:
        sub_1D407C();
        return;
      case 101:
        sub_3D21AC();
        return;
      case 102:
      case 103:
        goto LABEL_246;
      case 104:
      case 105:
        sub_32A02C((uint64_t)buf);
        sub_402E04(buf);
        goto LABEL_283;
      case 106:
      case 107:
        goto LABEL_70;
      case 125:
        sub_E37C8();
        return;
      default:
        if (a1 == 180)
        {
LABEL_239:
          sub_464320((uint64_t)buf);
          sub_2A8EDC(buf);
          goto LABEL_283;
        }
        if (a1 != 193) {
          goto LABEL_288;
        }
        sub_3D2F04();
        break;
    }
    return;
  }
  if (a1 > 2026)
  {
    if ((a1 - 2028) >= 2)
    {
      if (a1 != 2027) {
        goto LABEL_288;
      }
LABEL_246:
      BYTE4(v83) = 0;
      LOBYTE(v84) = 0;
      *(_DWORD *)&v85[2] = sub_20A0D0();
      LOBYTE(v86) = 1;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      sub_6CBEC();
      *(_DWORD *)&v90[6] = 0;
      __int16 v91 = 0;
      int v92 = 16777473;
      uint64_t v95 = 0;
      char v94 = 0;
      char v93 = (uint64_t *)&v94;
      __int16 v96 = 0;
      char v97 = 0;
      int v98 = -1044381696;
      char v99 = 1;
      int v100 = -1044381696;
      char v101 = 1;
      int v102 = 0;
      char v103 = 1;
      int v104 = -1056964608;
      char v105 = 1;
      int v106 = -1033371648;
      char v107 = 1;
      int v108 = 0;
      char v109 = 1;
      int v110 = -1033371648;
      char v111 = 1;
      int v112 = 0;
      char v113 = 1;
      int v114 = -1044381696;
      char v115 = 1;
      int v116 = 0;
      char v117 = 1;
      int v118 = -1033371648;
      char v119 = 1;
      int v120 = 0;
      char v121 = 1;
      int v122 = -1033371648;
      char v123 = 1;
      int v124 = -1055916032;
      char v125 = 1;
      int v126 = -1033371648;
      char v127 = 1;
      int v128 = 0;
      char v129 = 1;
      int v130 = -1055916032;
      char v131 = 1;
      int v132 = -1033371648;
      char v133 = 1;
      int v134 = -1055916032;
      char v135 = 1;
      int v136 = -1033371648;
      char v137 = 1;
      int v138 = 0;
      char v139 = 1;
      int v140 = -1055916032;
      char v141 = 1;
      int v142 = -1043333120;
      char v143 = 1;
      int v144 = 0x40000000;
      char v145 = 1;
      int v146 = 16777472;
      int v147 = 0;
      char v148 = 1;
      int v149 = 0;
      char v150 = 1;
      int v151 = 1103626240;
      char v152 = 1;
      int v153 = 0;
      char v154 = 1;
      int v155 = 1094713344;
      char v156 = 1;
      int v157 = 1094713344;
      char v158 = 1;
      int v159 = 1094713344;
      char v160 = 1;
      int v161 = -1061158912;
      char v162 = 1;
      int v163 = 1107296256;
      char v164 = 1;
      int v165 = 1107296256;
      char v166 = 1;
      int v167 = 1092616192;
      char v168 = 1;
      int v169 = 0;
      char v170 = 1;
      int v171 = 0;
      char v172 = 1;
      int v173 = 16777472;
      v174[0].__r_.__value_.__s.__data_[0] = 0;
      char v175 = 0;
      LOBYTE(v176[0]) = 0;
      char v177 = 0;
      v178[0] = 0;
      char v179 = 0;
      LOBYTE(v180[0]) = 0;
      char v181 = 0;
      char v182 = 0;
      char v183 = 0;
      LOBYTE(v184) = 0;
      char v185 = 0;
      LOBYTE(v186) = 0;
      char v187 = 0;
      LOBYTE(v188) = 0;
      char v189 = 0;
      char v190 = 0;
      char v191 = 0;
      char v192 = 0;
      char v193 = 0;
      char v194 = 0;
      char v195 = 0;
      char v196 = 0;
      char v197 = 0;
      char v198 = 0;
      char v199 = 0;
      char v200 = 0;
      char v201 = 0;
      char v202 = 0;
      char v203 = 0;
      char v204 = 0;
      char v205 = 0;
      char v206 = 0;
      char v207 = 0;
      char v208 = 0;
      char v209 = 0;
      char v210 = 0;
      char v211 = 0;
      char v212 = 0;
      char v213 = 0;
      char v214 = 0;
      char v215 = 0;
      char v216 = 1;
      char v217 = 0;
      char v218 = 0;
      char v219 = 0;
      char v220 = 0;
      char v221 = 0;
      char v222 = 0;
      char v223 = 0;
      char v224 = 0;
      char v225 = 0;
      char v226 = 0;
      __int16 v227 = 0;
      char v228 = 0;
      char v229 = 0;
      char v230 = 0;
      char v231 = 0;
      char v232 = 0;
      char v233 = 0;
      char v234 = 0;
      char v235 = 0;
      char v236 = 0;
      char v237 = 0;
      char v238 = 0;
      char v239 = 0;
      char v240 = 0;
      char v241 = 0;
      char v242 = 0;
      char v243 = 0;
      char v244 = 0;
      char v245 = 0;
      char v246 = 0;
      char v247 = 0;
      LOBYTE(v248) = 0;
      char v249 = 0;
      char v250 = 0;
      char v251 = 0;
      char v252 = 0;
      char v253 = 0;
      char v254 = 0;
      char v255 = 0;
      char v256 = 0;
      char v257 = 0;
      int v258 = 256;
      char v259 = 0;
      char v260 = 0;
      LOBYTE(v261) = 0;
      char v262 = 0;
      LOBYTE(v263) = 0;
      char v264 = 0;
      __int16 v265 = 0;
      LOBYTE(v83) = 1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 1953460273;
      *(_DWORD *)int v90 = 16777473;
      *(_WORD *)&v90[4] = 257;
      *(_DWORD *)&v90[10] = 16843009;
      __src.__pn_.__r_.__value_.__r.__words[0] = 0x100000002;
      sub_8732C((char *)&v88 + 8, (char *)&__src, (uint64_t)&__src.__pn_.__r_.__value_.__l.__size_, 2uLL);
      LODWORD(__src.__pn_.__r_.__value_.__l.__data_) = 1;
      sub_8732C((char *)&v87, (char *)&__src, (uint64_t)__src.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
      HIWORD(v92) = 257;
      if (!v187) {
        char v187 = 1;
      }
      int v186 = 4;
      *(_WORD *)&v90[6] = 257;
      *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_ = xmmword_4E78E0;
      sub_6C4EC(&v93, (unsigned int *)&__src, (unsigned int *)&__src.__pn_.__r_.__value_.__r.__words[2]);
      int v171 = 1090519040;
      char v172 = 1;
      int v167 = 1077936128;
      char v168 = 1;
      HIWORD(v146) = 257;
      int v142 = -1047527424;
      char v143 = 1;
      int v151 = 1103101952;
      char v152 = 1;
      int v157 = 0;
      char v158 = 1;
      int v159 = 0;
      char v160 = 1;
      int v155 = 0;
      char v156 = 1;
      int v161 = -1040187392;
      char v162 = 1;
      int v144 = 0;
      char v145 = 1;
      int v173 = 16843009;
      sub_21C8C(&__p, "graph_configurations.plist");
      sub_460658(&__src, &__p);
      sub_45D7BC((uint64_t)&v75, (uint64_t)&__src);
      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__src.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_6CEC4(v174, &v76);
      sub_6CFE4((uint64_t)v176, (uint64_t)&v75);
      HIBYTE(v96) = 1;
      sub_21C8C(&v64, "speaker_protection");
      sub_21C8C(&__p, "speaker_hal");
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      v36[0] = 0;
      sub_21C8C(&v36[1], "speaker_hal");
      sub_21C8C(&v39, "speaker_hal");
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      int v45 = 1684434036;
      LODWORD(v67.__r_.__value_.__l.__data_) = 1936749683;
      v67.__r_.__value_.__l.__size_ = 0;
      int v47 = 0;
      char v48 = 0;
      char v46 = 0;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      v81.__r_.__value_.__s.__data_[8] = 0;
      char v46 = (char *)operator new(0x10uLL);
      int v47 = v46;
      int v24 = v46 + 16;
      char v48 = v46 + 16;
      sub_6D16C((uint64_t)v46, 1936749683, 0);
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      long long v49 = 0u;
      long long v50 = 0u;
      int v47 = v24;
      int v51 = &v52;
      int v55 = 0;
      char v56 = 0;
      char v54 = 0;
      char v25 = operator new(0x10uLL);
      char v54 = v25;
      _OWORD *v25 = xmmword_4E7900;
      int v55 = v25 + 1;
      char v56 = v25 + 1;
      char v57 = 0;
      char v58 = 0;
      long long v60 = 0u;
      long long v59 = 0u;
      uint64_t v61 = 0;
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = xmmword_5968C4;
      v81.__r_.__value_.__r.__words[2] = 2;
      sub_6D1AC((uint64_t)&v59, (int *)&v81, 3);
      char v62 = 0;
      uint64_t v63 = 0;
      sub_6D224(&__src, (long long *)&v64, (long long *)&__p);
      sub_6D2A0((uint64_t)v65, (unsigned __int8 *)&__src, 1);
      sub_6D31C((uint64_t)v180, (uint64_t *)v65);
      sub_6C7E4(v66);
      int v26 = v65[0];
      v65[0] = 0;
      if (v26) {
        operator delete(v26);
      }
      sub_6C878((uint64_t)v69);
      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__src.__pn_.__r_.__value_.__l.__data_);
      }
      sub_6C878((uint64_t)&__p);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      sub_21C8C(&__p, "");
      sub_21C8C(v65, "");
      sub_21C8C(&v81, off_648B50);
      sub_21C8C(&v64, "AU");
      sub_21C8C(&v67, off_648B48[0]);
      sub_6D364((char *)&__src, (long long *)&__p, (uint64_t)v65, &v81, &v64, &v67);
      sub_6D600((uint64_t)v178, (long long *)&__src);
      if (SHIBYTE(v71) < 0) {
        operator delete((void *)v70.__r_.__value_.__l.__size_);
      }
      if (v70.__r_.__value_.__s.__data_[7] < 0) {
        operator delete(v69[0]);
      }
      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__src.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66) < 0) {
        operator delete(v65[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v80 < 0) {
        operator delete(v79);
      }
      if (v78 < 0) {
        operator delete(v77);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      sub_6C7E4((void *)v75.__r_.__value_.__r.__words[2]);
      __int16 v27 = (void *)v75.__r_.__value_.__r.__words[0];
      v75.__r_.__value_.__r.__words[0] = 0;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
LABEL_70:
      sub_32A02C((uint64_t)buf);
      *(_WORD *)&v90[2] = 256;
      HIWORD(v92) = 257;
      *(_WORD *)&v90[10] = 257;
      __src.__pn_.__r_.__value_.__r.__words[0] = 0x400000003;
      sub_8732C((char *)&v88 + 8, (char *)&__src, (uint64_t)&__src.__pn_.__r_.__value_.__l.__size_, 2uLL);
      LODWORD(__src.__pn_.__r_.__value_.__l.__data_) = 3;
      sub_8732C((char *)&v87, (char *)&__src, (uint64_t)__src.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
      int v167 = 1077936128;
      char v168 = 1;
      HIWORD(v146) = 257;
      *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_ = xmmword_4E78E0;
      sub_6C4EC(&v93, (unsigned int *)&__src, (unsigned int *)&__src.__pn_.__r_.__value_.__r.__words[2]);
      sub_21C8C(&v75, "graph_configurations.plist");
      sub_460658((std::__fs::filesystem::path *)&__p, &v75);
      sub_45D7BC((uint64_t)&__src, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      sub_6CEC4(v174, &v70);
      sub_6CFE4((uint64_t)v176, (uint64_t)&__src);
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = xmmword_4E78F0;
      sub_21C8C(&__p, "speaker_protection");
      int v10 = sub_32CA70(v180, (unsigned __int8 *)&__p);
      if (!v10) {
        sub_8251C("unordered_map::at: key not found");
      }
      sub_32CF54((void *)v10 + 31, (uint64_t *)&v75, (uint64_t *)&v75.__r_.__value_.__r.__words[2], 2uLL);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v74 < 0) {
        operator delete(v73);
      }
      if (v72 < 0) {
        operator delete(v71);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      sub_6C7E4((void *)__src.__pn_.__r_.__value_.__r.__words[2]);
      uint64_t v11 = (void *)__src.__pn_.__r_.__value_.__r.__words[0];
      __src.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (v11) {
        operator delete(v11);
      }
    }
LABEL_282:
    sub_402E04(buf);
LABEL_283:
    sub_6C690((uint64_t)v174);
    sub_463E0(v94);
    if (*((void *)&v88 + 1))
    {
      *(void *)&long long v89 = *((void *)&v88 + 1);
      operator delete(*((void **)&v88 + 1));
    }
    if ((void)v87)
    {
      *((void *)&v87 + 1) = v87;
      operator delete((void *)v87);
    }
    return;
  }
  if ((a1 - 2025) < 2)
  {
LABEL_32:
    BYTE4(v83) = 0;
    LOBYTE(v84) = 0;
    *(_DWORD *)&v85[2] = sub_20A0D0();
    LOBYTE(v86) = 1;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    sub_6CBEC();
    *(void *)&v90[6] = 0x101010100000000;
    __int16 v91 = 0;
    int v92 = 16777473;
    uint64_t v95 = 0;
    char v94 = 0;
    char v93 = (uint64_t *)&v94;
    __int16 v96 = 0;
    char v97 = 0;
    int v98 = -1044381696;
    char v99 = 1;
    int v100 = -1044381696;
    char v101 = 1;
    int v102 = 0;
    char v103 = 1;
    int v104 = -1056964608;
    char v105 = 1;
    int v106 = -1033371648;
    char v107 = 1;
    int v108 = 0;
    char v109 = 1;
    int v110 = -1033371648;
    char v111 = 1;
    int v112 = 0;
    char v113 = 1;
    int v114 = -1044381696;
    char v115 = 1;
    int v116 = 0;
    char v117 = 1;
    int v118 = -1033371648;
    char v119 = 1;
    int v120 = 0;
    char v121 = 1;
    int v122 = -1033371648;
    char v123 = 1;
    int v124 = -1055916032;
    char v125 = 1;
    int v126 = -1033371648;
    char v127 = 1;
    int v128 = 0;
    char v129 = 1;
    int v130 = -1055916032;
    char v131 = 1;
    int v132 = -1033371648;
    char v133 = 1;
    int v134 = -1055916032;
    char v135 = 1;
    int v136 = -1033371648;
    char v137 = 1;
    int v138 = 0;
    char v139 = 1;
    int v140 = -1055916032;
    char v141 = 1;
    int v142 = -1043333120;
    char v143 = 1;
    int v144 = 0x40000000;
    char v145 = 1;
    int v146 = 16777472;
    int v147 = 0;
    char v148 = 1;
    int v149 = 0;
    char v150 = 1;
    int v151 = 1103626240;
    char v152 = 1;
    int v153 = 0;
    char v154 = 1;
    int v155 = 1094713344;
    char v156 = 1;
    int v157 = 1094713344;
    char v158 = 1;
    int v159 = 1094713344;
    char v160 = 1;
    int v161 = -1061158912;
    char v162 = 1;
    int v163 = 1107296256;
    char v164 = 1;
    int v165 = 1107296256;
    char v166 = 1;
    int v167 = 1092616192;
    char v168 = 1;
    int v169 = 0;
    char v170 = 1;
    int v171 = 0;
    char v172 = 1;
    int v173 = 16777472;
    v174[0].__r_.__value_.__s.__data_[0] = 0;
    char v175 = 0;
    LOBYTE(v176[0]) = 0;
    char v177 = 0;
    v178[0] = 0;
    char v179 = 0;
    LOBYTE(v180[0]) = 0;
    char v181 = 0;
    char v182 = 0;
    char v183 = 0;
    LOBYTE(v184) = 0;
    char v185 = 0;
    LOBYTE(v186) = 0;
    char v187 = 0;
    LOBYTE(v188) = 0;
    char v189 = 0;
    char v190 = 0;
    char v191 = 0;
    char v192 = 0;
    char v193 = 0;
    char v194 = 0;
    char v195 = 0;
    char v196 = 0;
    char v197 = 0;
    char v198 = 0;
    char v199 = 0;
    char v200 = 0;
    char v201 = 0;
    char v202 = 0;
    char v203 = 0;
    char v204 = 0;
    char v205 = 0;
    char v206 = 0;
    char v207 = 0;
    char v208 = 0;
    char v209 = 0;
    char v210 = 0;
    char v211 = 0;
    char v212 = 0;
    char v213 = 0;
    char v214 = 0;
    char v215 = 0;
    char v216 = 1;
    char v217 = 0;
    char v218 = 0;
    char v219 = 0;
    char v220 = 0;
    char v221 = 0;
    char v222 = 0;
    char v223 = 0;
    char v224 = 0;
    char v225 = 0;
    char v226 = 0;
    __int16 v227 = 0;
    char v228 = 0;
    char v229 = 0;
    char v230 = 0;
    char v231 = 0;
    char v232 = 0;
    char v233 = 0;
    char v234 = 0;
    char v235 = 0;
    char v236 = 0;
    char v237 = 0;
    char v238 = 0;
    char v239 = 0;
    char v240 = 0;
    char v241 = 0;
    char v242 = 0;
    char v243 = 0;
    char v244 = 0;
    char v245 = 0;
    char v246 = 0;
    char v247 = 0;
    LOBYTE(v248) = 0;
    char v249 = 0;
    char v250 = 0;
    char v251 = 0;
    char v252 = 0;
    char v253 = 0;
    char v254 = 0;
    char v255 = 0;
    char v256 = 0;
    char v257 = 0;
    int v258 = 256;
    char v259 = 0;
    char v260 = 0;
    LOBYTE(v261) = 0;
    char v262 = 0;
    LOBYTE(v263) = 0;
    char v264 = 0;
    __int16 v265 = 0;
    LOBYTE(v83) = 1;
    *(_DWORD *)AudioObjectPropertyAddress buf = 1953460273;
    *(_DWORD *)int v90 = 16777473;
    *(_WORD *)&v90[4] = 257;
    __src.__pn_.__r_.__value_.__r.__words[0] = 0x100000002;
    sub_8732C((char *)&v88 + 8, (char *)&__src, (uint64_t)&__src.__pn_.__r_.__value_.__l.__size_, 2uLL);
    LODWORD(__src.__pn_.__r_.__value_.__l.__data_) = 1;
    sub_8732C((char *)&v87, (char *)&__src, (uint64_t)__src.__pn_.__r_.__value_.__r.__words + 4, 1uLL);
    HIWORD(v92) = 257;
    if (!v187) {
      char v187 = 1;
    }
    int v186 = 2;
    *(_WORD *)&v90[6] = 257;
    *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_ = xmmword_4E78E0;
    sub_6C4EC(&v93, (unsigned int *)&__src, (unsigned int *)&__src.__pn_.__r_.__value_.__r.__words[2]);
    int v171 = 1090519040;
    char v172 = 1;
    int v167 = 1077936128;
    char v168 = 1;
    HIWORD(v146) = 257;
    int v142 = -1047527424;
    char v143 = 1;
    int v151 = 1103101952;
    char v152 = 1;
    int v157 = 0;
    char v158 = 1;
    int v159 = 0;
    char v160 = 1;
    int v155 = 0;
    char v156 = 1;
    int v161 = -1040187392;
    char v162 = 1;
    int v144 = 0;
    char v145 = 1;
    int v173 = 16843009;
    sub_21C8C(&__p, "graph_configurations.plist");
    sub_460658(&__src, &__p);
    sub_45D7BC((uint64_t)&v75, (uint64_t)&__src);
    if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__src.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_6CEC4(v174, &v76);
    sub_6CFE4((uint64_t)v176, (uint64_t)&v75);
    HIBYTE(v96) = 1;
    sub_21C8C(&v64, "speaker_protection");
    sub_21C8C(&__p, "speaker_hal");
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    v36[0] = 0;
    sub_21C8C(&v36[1], "speaker_hal");
    sub_21C8C(&v39, "speaker_hal");
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v45 = 1684434036;
    LODWORD(v67.__r_.__value_.__l.__data_) = 1936749683;
    v67.__r_.__value_.__l.__size_ = 0;
    int v47 = 0;
    char v48 = 0;
    char v46 = 0;
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    v81.__r_.__value_.__s.__data_[8] = 0;
    char v46 = (char *)operator new(0x10uLL);
    int v47 = v46;
    __int16 v6 = v46 + 16;
    char v48 = v46 + 16;
    sub_6D16C((uint64_t)v46, 1936749683, 0);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    int v47 = v6;
    int v51 = &v52;
    int v55 = 0;
    char v56 = 0;
    char v54 = 0;
    __int16 v7 = operator new(0x10uLL);
    char v54 = v7;
    *__int16 v7 = xmmword_4E78D0;
    int v55 = v7 + 1;
    char v56 = v7 + 1;
    char v57 = 0;
    char v58 = 0;
    long long v60 = 0u;
    long long v59 = 0u;
    uint64_t v61 = 0;
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = xmmword_5968C4;
    v81.__r_.__value_.__r.__words[2] = 2;
    sub_6D1AC((uint64_t)&v59, (int *)&v81, 3);
    char v62 = 0;
    uint64_t v63 = 0;
    sub_6D224(&__src, (long long *)&v64, (long long *)&__p);
    sub_6D2A0((uint64_t)v65, (unsigned __int8 *)&__src, 1);
    sub_6D31C((uint64_t)v180, (uint64_t *)v65);
    sub_6C7E4(v66);
    __int16 v8 = v65[0];
    v65[0] = 0;
    if (v8) {
      operator delete(v8);
    }
    sub_6C878((uint64_t)v69);
    if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__src.__pn_.__r_.__value_.__l.__data_);
    }
    sub_6C878((uint64_t)&__p);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    sub_21C8C(&__p, "");
    sub_21C8C(v65, "");
    sub_21C8C(&v81, off_648B50);
    sub_21C8C(&v64, "AU");
    sub_21C8C(&v67, off_648B48[0]);
    sub_6D364((char *)&__src, (long long *)&__p, (uint64_t)v65, &v81, &v64, &v67);
    sub_6D600((uint64_t)v178, (long long *)&__src);
    if (SHIBYTE(v71) < 0) {
      operator delete((void *)v70.__r_.__value_.__l.__size_);
    }
    if (v70.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(v69[0]);
    }
    if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__src.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    if (v78 < 0) {
      operator delete(v77);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    sub_6C7E4((void *)v75.__r_.__value_.__r.__words[2]);
    __int16 v9 = (void *)v75.__r_.__value_.__r.__words[0];
    v75.__r_.__value_.__r.__words[0] = 0;
    if (v9) {
      operator delete(v9);
    }
    goto LABEL_282;
  }
  if (a1 != 194)
  {
LABEL_288:
    int v28 = (os_log_t *)sub_32A48(20);
    __int16 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v83 = "RoutingSettingsFactory_Aspen.cpp";
      __int16 v84 = 1024;
      *(_DWORD *)char v85 = 238;
      *(_WORD *)&v85[4] = 1024;
      int v86 = a1;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown product ID (%d): unable to return a valid iOS RoutingDatabase", buf, 0x18u);
    }
    int v30 = (os_log_t *)sub_32A48(20);
    __int16 v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      int v32 = sub_207A20();
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v83 = "RoutingSettingsFactory_Aspen.cpp";
      __int16 v84 = 1024;
      *(_DWORD *)char v85 = 428;
      *(_WORD *)&v85[4] = 1024;
      int v86 = v32;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown product ID (%d): unable to return a valid RoutingDatabase", buf, 0x18u);
    }
    *a2 = 0;
    sub_291928();
    return;
  }

  sub_270AFC();
}

void sub_18D848(_Unwind_Exception *a1)
{
}

void sub_18DDDC()
{
  sub_18DEC0((uint64_t)v0);
  sub_208140(&v10, 32);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    uint64_t v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    CFStringRef v2 = v1;
    operator delete(v1);
  }
}

void sub_18DEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **sub_18DEC0(uint64_t a1)
{
  uint64_t v2 = sub_6C174(a1);
  *(_DWORD *)(v2 + 80) = 16843009;
  *(_DWORD *)(v2 + 72) = 16843009;
  *(_WORD *)(v2 + 76) = 257;
  *(_WORD *)(v2 + 84) = 257;
  if (!*(unsigned char *)(v2 + 20)) {
    *(unsigned char *)(a1 + 20) = 1;
  }
  *(_DWORD *)(a1 + 16) = 4;
  *(void *)&long long v4 = 0x300000002;
  sub_8732C((char *)(a1 + 48), (char *)&v4, (uint64_t)&v4 + 8, 2uLL);
  LODWORD(v4) = 4;
  sub_8732C((char *)(a1 + 24), (char *)&v4, (uint64_t)&v4 + 4, 1uLL);
  *(_WORD *)(a1 + 90) = 257;
  long long v4 = xmmword_4E78E0;
  uint64_t result = sub_6C4EC((uint64_t **)(a1 + 96), (unsigned int *)&v4, &v5);
  *(_DWORD *)(a1 + 420) = 1090519040;
  *(unsigned char *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 404) = 1077936128;
  *(unsigned char *)(a1 + 408) = 1;
  *(_WORD *)(a1 + 322) = 257;
  *(_DWORD *)(a1 + 920) = 37;
  *(unsigned char *)(a1 + 924) = 1;
  *(_DWORD *)(a1 + 836) = 37;
  *(unsigned char *)(a1 + 840) = 1;
  *(_DWORD *)(a1 + 912) = 14;
  *(unsigned char *)(a1 + 916) = 1;
  *(_DWORD *)(a1 + 728) = 36;
  *(unsigned char *)(a1 + 732) = 1;
  *(_DWORD *)(a1 + 736) = 36;
  *(unsigned char *)(a1 + 740) = 1;
  *(_DWORD *)(a1 + 744) = 36;
  *(unsigned char *)(a1 + 748) = 1;
  *(_DWORD *)(a1 + 752) = 36;
  *(unsigned char *)(a1 + 756) = 1;
  *(_DWORD *)(a1 + 760) = 36;
  *(unsigned char *)(a1 + 764) = 1;
  *(_DWORD *)(a1 + 776) = 36;
  *(unsigned char *)(a1 + 780) = 1;
  if (!*(unsigned char *)(a1 + 956)) {
    *(unsigned char *)(a1 + 956) = 1;
  }
  *(_DWORD *)(a1 + 952) = 2;
  if (!*(unsigned char *)(a1 + 700)) {
    *(unsigned char *)(a1 + 700) = 1;
  }
  *(_DWORD *)(a1 + 696) = 2;
  if (!*(unsigned char *)(a1 + 708)) {
    *(unsigned char *)(a1 + 708) = 1;
  }
  *(_DWORD *)(a1 + 704) = 2;
  if (!*(unsigned char *)(a1 + 716)) {
    *(unsigned char *)(a1 + 716) = 1;
  }
  *(_DWORD *)(a1 + 712) = 4;
  if (!*(unsigned char *)(a1 + 876)) {
    *(unsigned char *)(a1 + 876) = 1;
  }
  *(_DWORD *)(a1 + 872) = 4;
  if (!*(unsigned char *)(a1 + 892)) {
    *(unsigned char *)(a1 + 892) = 1;
  }
  *(_DWORD *)(a1 + 888) = 2;
  if (!*(unsigned char *)(a1 + 884)) {
    *(unsigned char *)(a1 + 884) = 1;
  }
  *(_DWORD *)(a1 + 880) = 2;
  return result;
}

void sub_18E0C0(_Unwind_Exception *a1)
{
  sub_6C63C(v1);
  _Unwind_Resume(a1);
}

void sub_18E0DC()
{
  sub_18DEC0((uint64_t)v0);
  sub_208140(&v10, 33);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    long long v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_18E1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18E1C0()
{
  sub_18DEC0((uint64_t)v0);
  sub_208140(&v10, 34);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    long long v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_18E28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18E2A4()
{
  sub_18DEC0((uint64_t)v0);
  sub_208140(&v10, 35);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    long long v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_18E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18E388()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)__int16 v7 = 0u;
  long long v8 = 0u;
  int v9 = 0;
  BOOL v10 = (unsigned __int16)sub_6CBEC() > 0x100u;
  char v11 = 1;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v95[80] = 0;
  v95[120] = 0;
  v95[128] = 0;
  v95[200] = 0;
  v95[208] = 0;
  v95[248] = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  LOBYTE(v108) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  LOBYTE(v116) = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 1;
  char v131 = 0;
  char v132 = 0;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  LOBYTE(v137) = 0;
  char v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  __int16 v141 = 0;
  char v142 = 0;
  char v143 = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  LOBYTE(v152) = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(v156) = 0;
  char v157 = 0;
  LOBYTE(v158) = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  LOBYTE(__p) = 0;
  char v166 = 0;
  v167.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  v169.__r_.__value_.__s.__data_[0] = 0;
  char v170 = 0;
  v171.__r_.__value_.__s.__data_[0] = 0;
  char v172 = 0;
  int v173 = 256;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  __int16 v180 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 2;
  int v4 = 5;
  LODWORD(__src) = 1;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x400000003;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  int v9 = 16843009;
  LOWORD(v12) = 257;
  HIWORD(v12) = 257;
  LOWORD(v14) = 256;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 1090519040;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  LOWORD(v67) = 257;
  int v94 = 16843009;
  if (!v97) {
    char v97 = 1;
  }
  int v96 = 1836282987;
  if (!v99) {
    char v99 = 1;
  }
  int v98 = 2;
  if (!v101) {
    char v101 = 1;
  }
  int v100 = 8;
  if (!v103) {
    char v103 = 1;
  }
  int v102 = 8;
  int v106 = 36;
  char v107 = 1;
  int v108 = 36;
  char v109 = 1;
  int v110 = 36;
  char v111 = 1;
  int v116 = 36;
  char v117 = 1;
  int v133 = 40;
  char v134 = 1;
  int v135 = 3;
  char v136 = 1;
  int v137 = 25;
  char v138 = 1;
  int v139 = 40;
  char v140 = 1;
  int v152 = 13;
  char v153 = 1;
  int v154 = 40;
  char v155 = 1;
  int v156 = 23;
  char v157 = 1;
  int v158 = 7;
  char v159 = 1;
  __int16 v141 = 257;
  sub_208140(&__src, 88);
  if (v166)
  {
    if (SHIBYTE(v165) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v165 = v182;
  }
  else
  {
    long long __p = __src;
    uint64_t v165 = v182;
    char v166 = 1;
  }
  sub_87428(&v167, "_top_mic_general");
  sub_87428(&v169, "_top_mic_measurement");
  sub_87428(&v171, "_top_mic_hearing_accessibility");
  sub_402E04(&v0);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_18E9E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18EA0C(uint64_t a1)
{
  uint64_t v4 = a1 + 520;
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 520) + 16))(a1 + 520);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 608);
  sub_3BCAC(&v4);
  return v2;
}

unsigned char *sub_18EA74(uint64_t a1)
{
  uint64_t v3 = a1 + 520;
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 520) + 16))(a1 + 520);
  *(unsigned char *)(a1 + 608) = 0;
  sub_3BCAC(&v3);
  return sub_101D9C(a1);
}

uint64_t sub_18EAE0(os_unfair_lock_s *a1)
{
  return 1;
}

unsigned char *sub_18EB10(uint64_t a1)
{
  uint64_t v6 = a1 + 520;
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 520) + 16))(a1 + 520);
  int v2 = *(_DWORD *)(a1 + 144);
  uint64_t v3 = (void *)sub_23EE78();
  if (v2 == 1886745455) {
    unsigned int v4 = 1684500341;
  }
  else {
    unsigned int v4 = 1819176821;
  }
  *(unsigned char *)(a1 + 608) = sub_23DF48(v3, v4);
  return sub_3BCAC(&v6);
}

void sub_18EBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_18EBB4(void *a1)
{
  *a1 = off_625978;
  sub_AEF0C((uint64_t)(a1 + 65));
  sub_103C0C((uint64_t)a1);

  operator delete();
}

uint64_t sub_18EC20(void *a1)
{
  *a1 = off_625978;
  sub_AEF0C((uint64_t)(a1 + 65));

  return sub_103C0C((uint64_t)a1);
}

unsigned char *sub_18EC78(unsigned char *a1, unsigned int *a2, uint64_t a3, CFStringRef *a4)
{
  long long v8 = (char *)operator new(0xCuLL);
  v16[1] = v8 + 12;
  v16[2] = v8 + 12;
  qmemcpy(v8, "gcrvmorvtshv", 12);
  v16[0] = v8;
  sub_105048((uint64_t)&v14, *a2);
  memset(v13, 0, sizeof(v13));
  sub_21C8C(__p, "");
  sub_105158((uint64_t)a1, (uint64_t *)a2, a3, (uint64_t)v16, (uint64_t)&v14, (uint64_t)a4, (uint64_t)v13, (long long *)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v13;
  sub_74004((void ***)__p);
  sub_72924((uint64_t)&v15);
  sub_72924((uint64_t)&v14.__r_.__value_.__r.__words[2]);
  sub_72924((uint64_t)&v14);
  operator delete(v8);
  *(void *)a1 = off_625978;
  sub_21B7C(&v14, *a4);
  std::string::append(&v14, " Port_IAPLineOut_Aspen mutex", 0x1CuLL);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = &v14;
  }
  else {
    int v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  sub_AEF58((uint64_t)(a1 + 520), (uint64_t)v9);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  a1[608] = 0;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 104))(a1, 1768513904);
  return a1;
}

void sub_18EE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_AEF0C(v25);
  sub_103C0C(v24);
  _Unwind_Resume(a1);
}

std::string *sub_18EEB8(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2[9])
  {
    sub_21C8C(v11, "Persistent input ports");
    sub_18F0C4(&__p, (uint64_t)(a2 + 6), (const void **)v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  if (a2[19])
  {
    sub_21C8C(v11, "Persistent tapStream ports");
    sub_18F0C4(&__p, (uint64_t)(a2 + 16), (const void **)v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &__p;
    }
    else {
      uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v6, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  if (a2[14])
  {
    sub_21C8C(v11, "Persistent output ports");
    sub_18F0C4(&__p, (uint64_t)(a2 + 11), (const void **)v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = &__p;
    }
    else {
      long long v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_18F05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_18F0C4(std::string *a1, uint64_t a2, const void **a3)
{
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t v7 = sub_5E220((uint64_t)a1, v6 + 4);
  if (*(char *)(v7 + 23) >= 0) {
    long long v8 = (void *)v7;
  }
  else {
    long long v8 = *(void **)v7;
  }
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      std::string::size_type v9 = a3;
    }
    else {
      std::string::size_type v9 = *a3;
    }
    memmove(v8, v9, v6);
  }
  strcpy((char *)v8 + v6, ": [ ");
  BOOL v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    while (1)
    {
      std::string::append(a1, "(", 1uLL);
      sub_2417C(&__p, *((_DWORD *)v10 + 4));
      if ((v23 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v23 & 0x80u) == 0) {
        std::string::size_type v12 = v23;
      }
      else {
        std::string::size_type v12 = v22;
      }
      std::string::append(a1, p_p, v12);
      if ((char)v23 < 0) {
        operator delete(__p);
      }
      std::string::append(a1, ", ", 2uLL);
      std::string v14 = (const __CFString **)v10[3];
      __int16 v13 = (const __CFString **)v10[4];
      memset(&v20, 0, sizeof(v20));
      std::string::append(&v20, "{ ", 2uLL);
      if (v14 != v13)
      {
        while (1)
        {
          sub_168A8C((uint64_t)&__p, *v14);
          if ((v23 & 0x80u) == 0) {
            uint64_t v15 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v15 = (const std::string::value_type *)__p;
          }
          if ((v23 & 0x80u) == 0) {
            std::string::size_type v16 = v23;
          }
          else {
            std::string::size_type v16 = v22;
          }
          std::string::append(&v20, v15, v16);
          if ((char)v23 < 0) {
            operator delete(__p);
          }
          if (++v14 == v13) {
            break;
          }
          std::string::append(&v20, ", ", 2uLL);
        }
      }
      std::string::append(&v20, " }", 2uLL);
      __int16 v17 = (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v20
          : (std::string *)v20.__r_.__value_.__r.__words[0];
      std::string::size_type v18 = (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v20.__r_.__value_.__r.__words[2])
          : v20.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v17, v18);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      std::string::append(a1, ")", 1uLL);
      BOOL v10 = (uint64_t *)*v10;
      if (!v10) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " ] ", 3uLL);
}

void sub_18F304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_18F378(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)(a1 + 8) || *(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    sub_BCAD8(&v46, a2, "", 110);
    uint64_t v3 = v47;
    if (v47 != &v46)
    {
      while (1)
      {
        int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3[2] + 152))(v3[2]);
        uint64_t v5 = v3[2];
        if (v4) {
          break;
        }
        if (sub_18F8C0((const __CFString ***)a1, v3[2]))
        {
          __int16 v11 = *(_WORD *)(v5 + 184);
          unsigned int v12 = *(_DWORD *)(v5 + 144);
          __int16 v13 = *(_DWORD **)(v5 + 248);
          int v49 = v13;
          LOBYTE(v50) = *(unsigned char *)(v5 + 256);
          if ((_BYTE)v50) {
            BOOL v14 = v13 == 0;
          }
          else {
            BOOL v14 = 1;
          }
          if (!v14)
          {
            CFRetain(v13);
            goto LABEL_20;
          }
          if (v13) {
LABEL_20:
          }
            CFRetain(v13);
          sub_14E44(&v51, v13);
          sub_72924((uint64_t)&v49);
          BOOL v15 = sub_25009C(v12);
          std::string::size_type v16 = (void *)(a1 + 48);
          if ((v11 & 1) == 0) {
            std::string::size_type v16 = (void *)(a1 + 88);
          }
          if (v15) {
            __int16 v17 = (void *)(a1 + 128);
          }
          else {
            __int16 v17 = v16;
          }
          if (sub_18FB50(v17, v12))
          {
            std::string::size_type v18 = sub_18FB50(v17, v12);
            if (!v18) {
              sub_8251C("unordered_map::at: key not found");
            }
            int v19 = v18;
            uint64_t v20 = (const __CFString **)v18[3];
            int v21 = (const __CFString **)v18[4];
            if (v20 == v21)
            {
              std::string::size_type v22 = (const __CFString **)v18[3];
            }
            else
            {
              while (sub_152A4(*v20, (const __CFString **)&v51))
              {
                if (++v20 == v21)
                {
                  uint64_t v20 = v21;
                  break;
                }
              }
              std::string::size_type v22 = v20;
              uint64_t v20 = (const __CFString **)v19[4];
            }
            if (v22 != v20)
            {
              char v32 = v22 + 1;
              if (v22 + 1 != v20)
              {
                CFStringRef v33 = *v22;
                do
                {
                  std::string::size_type v22 = v32;
                  *(v32 - 1) = *v32;
                  *v32++ = v33;
                }
                while (v32 != v20);
                uint64_t v20 = (const __CFString **)v19[4];
              }
              while (v20 != v22)
              {
                char v34 = *--v20;
                sub_7E20C(v34);
              }
              v19[4] = (uint64_t)v22;
              if ((const __CFString **)v19[3] == v22)
              {
                int v35 = sub_18FB50(v17, v12);
                if (v35)
                {
                  int8x8_t v36 = (int8x8_t)v17[1];
                  unint64_t v37 = v35[1];
                  uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36);
                  v38.i16[0] = vaddlv_u8(v38);
                  if (v38.u32[0] > 1uLL)
                  {
                    if (v37 >= *(void *)&v36) {
                      v37 %= *(void *)&v36;
                    }
                  }
                  else
                  {
                    v37 &= *(void *)&v36 - 1;
                  }
                  char v40 = *(uint64_t **)(*v17 + 8 * v37);
                  do
                  {
                    int v41 = v40;
                    char v40 = (uint64_t *)*v40;
                  }
                  while (v40 != v35);
                  if (v41 == v17 + 2) {
                    goto LABEL_85;
                  }
                  unint64_t v42 = v41[1];
                  if (v38.u32[0] > 1uLL)
                  {
                    if (v42 >= *(void *)&v36) {
                      v42 %= *(void *)&v36;
                    }
                  }
                  else
                  {
                    v42 &= *(void *)&v36 - 1;
                  }
                  if (v42 != v37)
                  {
LABEL_85:
                    if (!*v35) {
                      goto LABEL_86;
                    }
                    unint64_t v43 = *(void *)(*v35 + 8);
                    if (v38.u32[0] > 1uLL)
                    {
                      if (v43 >= *(void *)&v36) {
                        v43 %= *(void *)&v36;
                      }
                    }
                    else
                    {
                      v43 &= *(void *)&v36 - 1;
                    }
                    if (v43 != v37) {
LABEL_86:
                    }
                      *(void *)(*v17 + 8 * v37) = 0;
                  }
                  uint64_t v44 = *v35;
                  if (*v35)
                  {
                    unint64_t v45 = *(void *)(v44 + 8);
                    if (v38.u32[0] > 1uLL)
                    {
                      if (v45 >= *(void *)&v36) {
                        v45 %= *(void *)&v36;
                      }
                    }
                    else
                    {
                      v45 &= *(void *)&v36 - 1;
                    }
                    if (v45 != v37)
                    {
                      *(void *)(*v17 + 8 * v45) = v41;
                      uint64_t v44 = *v35;
                    }
                  }
                  *int v41 = v44;
                  *int v35 = 0;
                  --v17[3];
                  sub_7E074(1, (void **)v35);
                }
              }
            }
          }
          CFTypeRef v39 = v51;
          if (!v51) {
            goto LABEL_97;
          }
LABEL_96:
          CFRelease(v39);
        }
LABEL_97:
        uint64_t v3 = (uint64_t *)v3[1];
        if (v3 == &v46) {
          goto LABEL_98;
        }
      }
      if (!sub_18F8C0((const __CFString ***)a1, v3[2])) {
        goto LABEL_97;
      }
      __int16 v6 = *(_WORD *)(v5 + 184);
      unsigned int v7 = *(_DWORD *)(v5 + 144);
      BOOL v8 = sub_25009C(v7);
      std::string::size_type v9 = *(_DWORD **)(v5 + 248);
      int v49 = v9;
      LOBYTE(v50) = *(unsigned char *)(v5 + 256);
      if ((_BYTE)v50) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        if (!v9)
        {
LABEL_34:
          sub_14E44(&v51, v9);
          sub_72924((uint64_t)&v49);
          uint64_t v23 = a1 + 48;
          if (v8) {
            uint64_t v23 = a1 + 128;
          }
          if (v6) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = a1 + 88;
          }
          int v25 = sub_18FC74(v24, v7, (const __CFString **)&v51);
          if (v6) {
            int v26 = 0;
          }
          else {
            int v26 = v25;
          }
          if (v26 == 1)
          {
            sub_2503E4(&v49, v5);
            int v27 = v50;
            if (v50)
            {
              char v28 = std::__shared_weak_count::lock(v50);
              int v29 = v49;
              std::__shared_weak_count::__release_weak(v27);
              if (v28 && v29)
              {
                unsigned int v30 = v29[36];
                int v31 = (_DWORD *)*((void *)v29 + 31);
                int v49 = v31;
                LOBYTE(v50) = *((unsigned char *)v29 + 256);
                if ((_BYTE)v50 && v31)
                {
                  CFRetain(v31);
                }
                else if (!v31)
                {
                  goto LABEL_65;
                }
                CFRetain(v31);
LABEL_65:
                sub_14E44(&cf, v31);
                sub_72924((uint64_t)&v49);
                sub_18FC74(a1 + 128, v30, (const __CFString **)&cf);
                if (cf) {
                  CFRelease(cf);
                }
                goto LABEL_67;
              }
              if (v28) {
LABEL_67:
              }
                sub_4636C(v28);
            }
          }
          CFTypeRef v39 = v51;
          if (v51) {
            goto LABEL_96;
          }
          goto LABEL_97;
        }
      }
      else
      {
        CFRetain(v9);
      }
      CFRetain(v9);
      goto LABEL_34;
    }
LABEL_98:
    sub_B8E4(&v46);
  }
}

void sub_18F834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_4636C(v2);
  sub_6393C((const void **)va1);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_18F8C0(const __CFString ***a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 184))
  {
    if (sub_25009C(*(_DWORD *)(a2 + 144)))
    {
      std::string::size_type v16 = off_6286E0;
      std::string::size_type v18 = &v16;
      sub_2501D4(&cf, a2, (uint64_t)&v16);
      sub_6AFD4(&v16);
      uint64_t v6 = v15;
      if (v15)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v15);
        uint64_t v8 = cf;
        std::__shared_weak_count::__release_weak(v6);
        if (v7 && v8)
        {
          uint64_t v9 = (uint64_t (**)())v8[31];
          std::string::size_type v16 = v9;
          char v17 = *((unsigned char *)v8 + 256);
          if (v17 && v9)
          {
            CFRetain(v9);
          }
          else if (!v9)
          {
LABEL_31:
            sub_14E44(&cf, v9);
            sub_72924((uint64_t)&v16);
            BOOL v10 = sub_18FC04(a1 + 3, (const __CFString **)&cf);
            if (cf) {
              CFRelease(cf);
            }
            sub_4636C(v7);
            return v10;
          }
          CFRetain(v9);
          goto LABEL_31;
        }
        if (v7) {
          sub_4636C(v7);
        }
      }
      return 0;
    }
    unsigned int v12 = *(uint64_t (***)())(a2 + 248);
    std::string::size_type v16 = v12;
    char v17 = *(unsigned char *)(a2 + 256);
    if (v17 && v12)
    {
      CFRetain(v12);
    }
    else if (!v12)
    {
      goto LABEL_24;
    }
    CFRetain(v12);
LABEL_24:
    sub_14E44(&cf, v12);
    sub_72924((uint64_t)&v16);
    BOOL v10 = sub_18FC04(a1, (const __CFString **)&cf);
    CFTypeRef v11 = cf;
    if (!cf) {
      return v10;
    }
    goto LABEL_18;
  }
  uint64_t v4 = *(uint64_t (***)())(a2 + 248);
  std::string::size_type v16 = v4;
  char v17 = *(unsigned char *)(a2 + 256);
  if (v17) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFRetain(v4);
LABEL_16:
    CFRetain(v4);
    goto LABEL_17;
  }
  if (v4) {
    goto LABEL_16;
  }
LABEL_17:
  sub_14E44(&cf, v4);
  sub_72924((uint64_t)&v16);
  BOOL v10 = sub_18FC04(a1 + 3, (const __CFString **)&cf);
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_18:
  }
    CFRelease(v11);
  return v10;
}

void sub_18FAE4(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_18FB50(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  BOOL v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_18FC04(const __CFString ***a1, const __CFString **a2)
{
  unint64_t v2 = *a1;
  uint8x8_t v3 = a1[1];
  if (*a1 == v3)
  {
    uint64_t v6 = *a1;
  }
  else
  {
    while (sub_152A4(*v2, a2))
    {
      if (++v2 == v3)
      {
        unint64_t v2 = v3;
        break;
      }
    }
    uint64_t v6 = v2;
    unint64_t v2 = a1[1];
  }
  return v6 != v2;
}

uint64_t sub_18FC74(uint64_t a1, unsigned int a2, const __CFString **a3)
{
  unint64_t v7 = sub_18FB50((void *)a1, a2);
  if (v7 && sub_18FC04((const __CFString ***)v7 + 3, a3)) {
    return 0;
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v9 <= a2) {
        unint64_t v3 = a2 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & a2;
    }
    CFTypeRef v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unsigned int v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == a2)
          {
            if (*((_DWORD *)v12 + 4) == a2) {
              goto LABEL_43;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          unsigned int v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  unsigned int v12 = (char *)operator new(0x30uLL);
  *(void *)unsigned int v12 = 0;
  *((void *)v12 + 1) = a2;
  *((_DWORD *)v12 + 4) = a2;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 3) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_6DEC4(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v3 = a2 % v9;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & a2;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)unsigned int v12 = *v21;
  }
  else
  {
    *(void *)unsigned int v12 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v12;
    *(void *)(v20 + 8 * v3) = a1 + 16;
    if (!*(void *)v12) {
      goto LABEL_42;
    }
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
  }
  void *v21 = v12;
LABEL_42:
  ++*(void *)(a1 + 24);
LABEL_43:
  unint64_t v23 = *((void *)v12 + 5);
  uint64_t v24 = (void *)*((void *)v12 + 4);
  if ((unint64_t)v24 >= v23)
  {
    uint64_t v26 = *((void *)v12 + 3);
    uint64_t v27 = ((uint64_t)v24 - v26) >> 3;
    if ((unint64_t)(v27 + 1) >> 61) {
      sub_60548();
    }
    uint64_t v28 = v23 - v26;
    uint64_t v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
      uint64_t v29 = v27 + 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    uint64_t v44 = v12 + 40;
    if (v30)
    {
      char v32 = (char *)sub_106EC(v30);
    }
    else
    {
      char v32 = 0;
      uint64_t v31 = 0;
    }
    CFStringRef v33 = &v32[8 * v27];
    char v34 = &v32[8 * v31];
    unint64_t v43 = v34;
    int v35 = sub_136810(v33, *a3);
    int v25 = v35 + 1;
    v42.i64[1] = (uint64_t)(v35 + 1);
    unint64_t v37 = (void *)*((void *)v12 + 3);
    int8x8_t v36 = (void *)*((void *)v12 + 4);
    if (v36 == v37)
    {
      int64x2_t v39 = vdupq_n_s64((unint64_t)v36);
    }
    else
    {
      do
      {
        uint64_t v38 = *--v36;
        *--int v35 = v38;
        *int8x8_t v36 = 0;
      }
      while (v36 != v37);
      int64x2_t v39 = *(int64x2_t *)(v12 + 24);
      int v25 = (void *)v42.i64[1];
      char v34 = v43;
    }
    *((void *)v12 + 3) = v35;
    *((void *)v12 + 4) = v25;
    int64x2_t v42 = v39;
    char v40 = (char *)*((void *)v12 + 5);
    *((void *)v12 + 5) = v34;
    unint64_t v43 = v40;
    uint64_t v41 = v39.i64[0];
    sub_F3E94((uint64_t)&v41);
  }
  else
  {
    int v25 = sub_136810(v24, *a3) + 1;
  }
  *((void *)v12 + 4) = v25;
  return 1;
}

void sub_18FF98(_Unwind_Exception *a1)
{
  sub_7E074(1, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18FFB0()
{
  return 1;
}

void sub_18FFC0(uint64_t a1, void *a2)
{
  *a2 = off_625BA8;
}

void *sub_18FFE0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_625BA8;
  return result;
}

void sub_190018()
{
}

uint64_t *sub_190030(void *a1, unsigned int a2)
{
  unint64_t v4 = sub_18FB50(a1 + 11, a2);
  if (v4) {
    return v4 + 3;
  }
  unint64_t v4 = sub_18FB50(a1 + 6, a2);
  if (v4) {
    return v4 + 3;
  }
  uint64_t v6 = sub_18FB50(a1 + 16, a2);
  if (v6) {
    return v6 + 3;
  }
  else {
    return (uint64_t *)&unk_64C698;
  }
}

BOOL sub_190098(void *a1, void *a2, void *a3, void *a4)
{
  BOOL v4 = a3 == a4;
  if (a3 != a4 && a1 != a2)
  {
    while (1)
    {
      unsigned int v5 = *((_DWORD *)a3 + 7);
      unsigned int v6 = *((_DWORD *)a1 + 7);
      if (v5 < v6) {
        break;
      }
      if (v6 >= v5)
      {
        uint64_t v8 = (void *)a3[1];
        if (v8)
        {
          do
          {
            unint64_t v7 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            unint64_t v7 = (void *)a3[2];
            BOOL v9 = *v7 == (void)a3;
            a3 = v7;
          }
          while (!v9);
        }
      }
      else
      {
        unint64_t v7 = a3;
      }
      uint8x8_t v10 = (void *)a1[1];
      if (v10)
      {
        do
        {
          CFTypeRef v11 = v10;
          uint8x8_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          CFTypeRef v11 = (void *)a1[2];
          BOOL v9 = *v11 == (void)a1;
          a1 = v11;
        }
        while (!v9);
      }
      BOOL v4 = v7 == a4;
      if (v7 != a4)
      {
        a1 = v11;
        a3 = v7;
        if (v11 != a2) {
          continue;
        }
      }
      return v4;
    }
    return 0;
  }
  return v4;
}

uint64_t sub_190150(uint64_t a1)
{
  int v12 = *(_DWORD *)(a1 + 16);
  uint64_t v13 = 1735159650;
  uint64_t result = (*(uint64_t (**)(void, int *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &v12);
  if (result)
  {
    unint64_t v3 = (os_log_t *)sub_32A48(19);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, *(_DWORD *)(a1 + 16));
      int v5 = v11;
      unsigned int v6 = (void **)__p[0];
      int v7 = *(_DWORD *)(a1 + 24);
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128))(v9);
      uint64_t v8 = __p;
      if (v5 < 0) {
        uint64_t v8 = v6;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      float v15 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
      __int16 v16 = 1024;
      int v17 = 50;
      __int16 v18 = 2080;
      size_t v19 = v8;
      __int16 v20 = 1024;
      int v21 = v7;
      __int16 v22 = 2112;
      uint64_t v23 = v9[0];
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Resetting property(%s) = %u for device %@ back to its old value", buf, 0x2Cu);
      sub_72924((uint64_t)v9);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    return (*(uint64_t (**)(void, int *, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), &v12, 0, 0, 4, a1 + 24);
  }
  return result;
}

void sub_19032C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190350(uint64_t a1)
{
  unsigned int v27 = *(_DWORD *)(a1 + 16);
  uint64_t v28 = 1735159650;
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8));
  if ((v2 & 0xFF00000000) == 0 || v2 == 0)
  {
    BOOL v4 = (os_log_t *)sub_32A48(19);
    int v5 = *v4;
    if (!*v4 || !os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_2417C(__p, 0x73777370u);
    int v6 = v26;
    int v7 = (void **)__p[0];
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128))(v24);
    uint64_t v8 = __p;
    if (v6 < 0) {
      uint64_t v8 = v7;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
    __int16 v31 = 1024;
    int v32 = 19;
    __int16 v33 = 2080;
    char v34 = v8;
    __int16 v35 = 2112;
    v36[0] = v24[0];
    BOOL v9 = "%25s:%-5d Software volume mode (%s) is not supported on device %@";
  }
  else
  {
    char v10 = (*(uint64_t (**)(void, unsigned int *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &v27);
    if (v10)
    {
      char v11 = (*(uint64_t (**)(void, unsigned int *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), &v27);
      int v12 = (os_log_t *)sub_32A48(19);
      int v5 = *v12;
      if (v11)
      {
        if (v5 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(__p, *(_DWORD *)(a1 + 16));
          int v13 = v26;
          float v14 = (void **)__p[0];
          int v15 = *(_DWORD *)(a1 + 20);
          (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128))(v24);
          __int16 v16 = __p;
          if (v13 < 0) {
            __int16 v16 = v14;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
          __int16 v31 = 1024;
          int v32 = 38;
          __int16 v33 = 2080;
          char v34 = v16;
          __int16 v35 = 1024;
          LODWORD(v36[0]) = v15;
          WORD2(v36[0]) = 2112;
          *(void *)((char *)v36 + 6) = v24[0];
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property(%s) = %u for device %@", buf, 0x2Cu);
          sub_72924((uint64_t)v24);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        (*(void (**)(void, unsigned int *, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), &v27, 0, 0, 4, a1 + 20);
        return;
      }
      if (!v5 || !os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      sub_2417C(__p, v27);
      int v21 = v26;
      __int16 v22 = (void **)__p[0];
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128))(v24);
      uint64_t v23 = __p;
      if (v21 < 0) {
        uint64_t v23 = v22;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
      __int16 v31 = 1024;
      int v32 = 33;
      __int16 v33 = 2080;
      char v34 = v23;
      __int16 v35 = 2112;
      v36[0] = v24[0];
      BOOL v9 = "%25s:%-5d Property %s is not settable on device %@";
    }
    else
    {
      int v17 = (os_log_t *)sub_32A48(19);
      int v5 = *v17;
      if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      sub_2417C(__p, v27);
      int v18 = v26;
      size_t v19 = (void **)__p[0];
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128))(v24);
      __int16 v20 = __p;
      if (v18 < 0) {
        __int16 v20 = v19;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
      __int16 v31 = 1024;
      int v32 = 26;
      __int16 v33 = 2080;
      char v34 = v20;
      __int16 v35 = 2112;
      v36[0] = v24[0];
      BOOL v9 = "%25s:%-5d Property %s is not available on device %@";
    }
  }
  _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, v9, buf, 0x26u);
  sub_72924((uint64_t)v24);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190844()
{
}

void sub_19085C(uint64_t a1)
{
  uint64_t v2 = sub_6C174(a1);
  *(_DWORD *)(v2 + 80) = 16843009;
  *(_DWORD *)(v2 + 72) = 16843009;
  *(_WORD *)(v2 + 76) = 257;
  *(_WORD *)(v2 + 84) = 257;
  if (!*(unsigned char *)(v2 + 20)) {
    *(unsigned char *)(a1 + 20) = 1;
  }
  *(_DWORD *)(a1 + 16) = 4;
  __p[0] = (void *)0x300000002;
  sub_8732C((char *)(a1 + 48), (char *)__p, (uint64_t)&__p[1], 2uLL);
  LODWORD(__p[0]) = 4;
  sub_8732C((char *)(a1 + 24), (char *)__p, (uint64_t)__p + 4, 1uLL);
  *(_OWORD *)std::string __p = xmmword_4E78E0;
  sub_6C4EC((uint64_t **)(a1 + 96), (unsigned int *)__p, &v4);
  *(_DWORD *)(a1 + 420) = 1090519040;
  *(unsigned char *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 404) = 1077936128;
  *(unsigned char *)(a1 + 408) = 1;
  *(_WORD *)(a1 + 322) = 257;
  *(_DWORD *)(a1 + 920) = 37;
  *(unsigned char *)(a1 + 924) = 1;
  *(_DWORD *)(a1 + 836) = 37;
  *(unsigned char *)(a1 + 840) = 1;
  *(_DWORD *)(a1 + 912) = 14;
  *(unsigned char *)(a1 + 916) = 1;
  *(_DWORD *)(a1 + 728) = 8;
  *(unsigned char *)(a1 + 732) = 1;
  *(_DWORD *)(a1 + 736) = 26;
  *(unsigned char *)(a1 + 740) = 1;
  *(_DWORD *)(a1 + 744) = 33;
  *(unsigned char *)(a1 + 748) = 1;
  *(_DWORD *)(a1 + 752) = 8;
  *(unsigned char *)(a1 + 756) = 1;
  *(_DWORD *)(a1 + 760) = 6;
  *(unsigned char *)(a1 + 764) = 1;
  *(_DWORD *)(a1 + 776) = 8;
  *(unsigned char *)(a1 + 780) = 1;
  if (!*(unsigned char *)(a1 + 956)) {
    *(unsigned char *)(a1 + 956) = 1;
  }
  *(_DWORD *)(a1 + 952) = 2;
  if (!*(unsigned char *)(a1 + 700)) {
    *(unsigned char *)(a1 + 700) = 1;
  }
  *(_DWORD *)(a1 + 696) = 2;
  if (!*(unsigned char *)(a1 + 708)) {
    *(unsigned char *)(a1 + 708) = 1;
  }
  *(_DWORD *)(a1 + 704) = 2;
  if (!*(unsigned char *)(a1 + 716)) {
    *(unsigned char *)(a1 + 716) = 1;
  }
  *(_DWORD *)(a1 + 712) = 4;
  *(_WORD *)(a1 + 868) = 257;
  if (!*(unsigned char *)(a1 + 876)) {
    *(unsigned char *)(a1 + 876) = 1;
  }
  *(_DWORD *)(a1 + 872) = 4;
  if (!*(unsigned char *)(a1 + 892)) {
    *(unsigned char *)(a1 + 892) = 1;
  }
  *(_DWORD *)(a1 + 888) = 2;
  if (!*(unsigned char *)(a1 + 884)) {
    *(unsigned char *)(a1 + 884) = 1;
  }
  *(_DWORD *)(a1 + 880) = 2;
  sub_208140(__p, 46);
  sub_FE638(a1 + 960, (long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190A94(_Unwind_Exception *a1)
{
  sub_6C63C(v1);
  _Unwind_Resume(a1);
}

void sub_190AB4()
{
  sub_19085C((uint64_t)v0);
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    unsigned int v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_190B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190B34(void *a1@<X8>)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
}

uint64_t sub_190B40(uint64_t a1, uint64_t a2, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    char v56 = (os_log_t *)sub_32A48(13);
    int v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      buf.mSelector = 136315394;
      *(void *)&buf.mScope = "Stream_HAL_Common.cpp";
      __int16 v96 = 1024;
      int v97 = 389;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", (uint8_t *)&buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }
  uint64_t v6 = sub_32A48(22);
  uint64_t v7 = sub_32A48(35);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)&buf.mSelector = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *((int *)&buf.mSelector + v9);
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_9;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_9:
  int v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    float v14 = a3 == 1885762592 ? "physical" : "virtual";
    sub_259A4((std::string *)&v106, a2);
    int v15 = v106.__m_.__opaque[15] >= 0 ? &v106 : (std::mutex *)v106.__m_.__sig;
    int v16 = *(_DWORD *)(a1 + 80);
    buf.mSelector = 136316162;
    *(void *)&buf.mScope = "Stream_HAL_Common.cpp";
    __int16 v96 = 1024;
    int v97 = 391;
    __int16 v98 = 2080;
    *(void *)char v99 = v14;
    *(_WORD *)&v99[8] = 2080;
    *(void *)&v99[10] = v15;
    *(_WORD *)&v99[18] = 1024;
    *(_DWORD *)&v99[20] = v16;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously setting %s format to %s on stream %u.", (uint8_t *)&buf, 0x2Cu);
    if (v106.__m_.__opaque[15] < 0) {
      operator delete((void *)v106.__m_.__sig);
    }
  }
  if (a3 != 1936092532 && a3 != 1885762592) {
    return 2003332927;
  }
  AudioObjectID v17 = *(_DWORD *)(a1 + 80);
  inAddress.mSelector = a3;
  *(void *)&inAddress.mScope = 1735159650;
  uint64_t v18 = sub_32A48(13);
  if (*(unsigned char *)(v18 + 8))
  {
    size_t v19 = *(NSObject **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        *(AudioObjectPropertyAddress *)&long long v83 = inAddress;
        sub_16C9C4((uint64_t)&v106, (unsigned int *)&v83);
        __int16 v20 = v106.__m_.__opaque[15] >= 0 ? &v106 : (std::mutex *)v106.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v96 = 1024;
        int v97 = 166;
        __int16 v98 = 2080;
        *(void *)char v99 = v20;
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = v17;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v106.__m_.__opaque[15] < 0) {
          operator delete((void *)v106.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress v92 = inAddress;
  AudioObjectID v91 = v17;
  int v93 = 0;
  uint64_t v94 = 0;
  sub_1917AC((uint64_t)&v106, (uint64_t)&v91);
  if (!*(_DWORD *)&v106.__m_.__opaque[32])
  {
    v89[0] = *(_OWORD *)&v106.__m_.__sig;
    v89[1] = *(_OWORD *)&v106.__m_.__opaque[8];
    uint64_t v90 = *(void *)&v106.__m_.__opaque[24];
    long long v21 = *(_OWORD *)(a2 + 16);
    v87[0] = *(_OWORD *)a2;
    v87[1] = v21;
    uint64_t v88 = *(void *)(a2 + 32);
    if (sub_1919B8((uint64_t)v89, (uint64_t)v87))
    {
      uint64_t v22 = sub_32A48(13);
      if ((*(unsigned char *)(v22 + 8) & 1) == 0) {
        return 0;
      }
      uint64_t v23 = *(NSObject **)v22;
      if (!*(void *)v22 || !os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v96 = 1024;
      int v97 = 191;
      __int16 v98 = 1024;
      *(_DWORD *)char v99 = v17;
LABEL_62:
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
      return 0;
    }
  }
  uint64_t v24 = sub_32A48(13);
  if (*(unsigned char *)(v24 + 8))
  {
    int v25 = *(NSObject **)v24;
    if (*(void *)v24)
    {
      if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
      {
        v105.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v105.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v83, (unsigned int *)&v105);
        char v26 = (SBYTE7(v84) & 0x80u) == 0 ? &v83 : (long long *)v83;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v96 = 1024;
        int v97 = 199;
        __int16 v98 = 2080;
        *(void *)char v99 = v26;
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = v17;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (SBYTE7(v84) < 0) {
          operator delete((void *)v83);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = inAddress;
  uint64_t v27 = AudioObjectSetPropertyData(v17, &buf, 0, 0, 0x28u, (const void *)a2);
  if (!v27)
  {
    sub_1917AC((uint64_t)&v83, (uint64_t)&v91);
    if (!v86)
    {
      v81[0] = v83;
      v81[1] = v84;
      uint64_t v82 = v85;
      long long v34 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v34;
      uint64_t v80 = *(void *)(a2 + 32);
      if (sub_1919B8((uint64_t)v81, (uint64_t)v79))
      {
        uint64_t v35 = sub_32A48(13);
        if ((*(unsigned char *)(v35 + 8) & 1) == 0) {
          return 0;
        }
        uint64_t v23 = *(NSObject **)v35;
        if (!*(void *)v35 || !os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG)) {
          return 0;
        }
        buf.mSelector = 136315650;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v96 = 1024;
        int v97 = 219;
        __int16 v98 = 1024;
        *(_DWORD *)char v99 = v17;
        goto LABEL_62;
      }
    }
    memset(v106.__m_.__opaque, 0, sizeof(v106.__m_.__opaque));
    v105.__cv_.__uint64_t sig = 1018212795;
    memset(v105.__cv_.__opaque, 0, sizeof(v105.__cv_.__opaque));
    v106.__m_.__uint64_t sig = 850045863;
    char v78 = 0;
    AudioObjectID v59 = v17;
    sub_662FC(inClientData, v17, &inAddress, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v78);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v38.__d_.__rep_) / -1000)
    {
      sub_1917AC((uint64_t)&v73, (uint64_t)&v91);
      if (v76) {
        break;
      }
      v71[0] = v73;
      v71[1] = v74;
      uint64_t v72 = v75;
      long long v37 = *(_OWORD *)(a2 + 16);
      v69[0] = *(_OWORD *)a2;
      v69[1] = v37;
      uint64_t v70 = *(void *)(a2 + 32);
      if (sub_1919B8((uint64_t)v71, (uint64_t)v69))
      {
        uint64_t v47 = sub_32A48(13);
        if (*(unsigned char *)(v47 + 8))
        {
          char v48 = *(NSObject **)v47;
          if (*(void *)v47)
          {
            if (os_log_type_enabled(*(os_log_t *)v47, OS_LOG_TYPE_DEBUG))
            {
              __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
              *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
              sub_16C9C4((uint64_t)&v73, (unsigned int *)&__lk);
              int v49 = (SBYTE7(v74) & 0x80u) == 0 ? &v73 : (std::unique_lock<std::mutex> *)v73.__m_;
              buf.mSelector = 136315906;
              *(void *)&buf.mScope = "HALPropertySynchronizer.h";
              __int16 v96 = 1024;
              int v97 = 288;
              __int16 v98 = 2080;
              *(void *)char v99 = v49;
              *(_WORD *)&v99[8] = 1024;
              *(_DWORD *)&v99[10] = v59;
              _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
              if (SBYTE7(v74) < 0) {
                operator delete(v73.__m_);
              }
            }
          }
        }
        uint64_t v27 = 0;
        goto LABEL_111;
      }
      if (i <= 0)
      {
        char v50 = (os_log_t *)sub_32A48(13);
        CFTypeRef v51 = *v50;
        if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
        {
          AudioObjectPropertyAddress v66 = inAddress;
          char v52 = __p;
          sub_16C9C4((uint64_t)__p, &v66.mSelector);
          if (v68 < 0) {
            char v52 = (void **)__p[0];
          }
          __luint64_t k = v73;
          long long v64 = v74;
          uint64_t v65 = v75;
          long long v53 = *(_OWORD *)(a2 + 16);
          v61[0] = *(_OWORD *)a2;
          v61[1] = v53;
          uint64_t v62 = *(void *)(a2 + 32);
          int v54 = sub_1919B8((uint64_t)&__lk, (uint64_t)v61);
          buf.mSelector = 136316930;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v96 = 1024;
          int v97 = 248;
          __int16 v98 = 2080;
          *(void *)char v99 = "set";
          *(_WORD *)&v99[8] = 2080;
          *(void *)&v99[10] = v52;
          *(_WORD *)&v99[18] = 2080;
          *(void *)&v99[20] = "set";
          *(_WORD *)&v99[28] = 1024;
          int v100 = v54;
          __int16 v101 = 1024;
          int v102 = 0;
          __int16 v103 = 1024;
          AudioObjectID v104 = v59;
          _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v68 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v27 = 2003329396;
        goto LABEL_111;
      }
      v38.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v39 = sub_32A48(13);
      if (*(unsigned char *)(v39 + 8))
      {
        char v40 = *(NSObject **)v39;
        if (*(void *)v39)
        {
          if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            __int16 v96 = 1024;
            int v97 = 257;
            __int16 v98 = 2080;
            *(void *)char v99 = "with timeout";
            *(_WORD *)&v99[8] = 1024;
            *(_DWORD *)&v99[10] = v59;
            _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v106;
      __lk.__owns_ = 1;
      std::mutex::lock(&v106);
      v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v78)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v42 = v41.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v42 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_73;
          }
          v43.__d_.__rep_ = v42 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v43.__d_.__rep_ >= 1) {
            break;
          }
LABEL_91:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v42 || v78) {
            goto LABEL_73;
          }
        }
        std::chrono::steady_clock::now();
        v44.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v44.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = 0;
          goto LABEL_87;
        }
        if (v44.__d_.__rep_ < 1)
        {
          if ((unint64_t)v44.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_86;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v44.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_87;
          }
LABEL_86:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = 1000 * v44.__d_.__rep_;
LABEL_87:
          if (v45 > (v43.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v46.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_90:
            std::condition_variable::__do_timed_wait(&v105, &__lk, v46);
            std::chrono::steady_clock::now();
            goto LABEL_91;
          }
        }
        v46.__d_.__rep_ = v45 + v43.__d_.__rep_;
        goto LABEL_90;
      }
LABEL_73:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v27 = v76;
LABEL_111:
    sub_6651C((uint64_t)inClientData);
    std::condition_variable::~condition_variable(&v105);
    std::mutex::~mutex(&v106);
    return v27;
  }
  uint64_t v28 = (os_log_t *)sub_32A48(13);
  uint64_t v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v83, v27);
    int v30 = SBYTE7(v84);
    __int16 v31 = (long long *)v83;
    *(AudioObjectPropertyAddress *)&v73.__m_ = inAddress;
    sub_16C9C4((uint64_t)&v105, (unsigned int *)&v73);
    int v32 = &v83;
    if (v30 < 0) {
      int v32 = v31;
    }
    if (v105.__cv_.__opaque[15] >= 0) {
      uint64_t sig = (uint64_t)&v105;
    }
    else {
      uint64_t sig = v105.__cv_.__sig;
    }
    buf.mSelector = 136316418;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v96 = 1024;
    int v97 = 207;
    __int16 v98 = 1024;
    *(_DWORD *)char v99 = v27;
    *(_WORD *)&v99[4] = 2080;
    *(void *)&v99[6] = v32;
    *(_WORD *)&v99[14] = 2080;
    *(void *)&v99[16] = sig;
    *(_WORD *)&v99[24] = 1024;
    *(_DWORD *)&v99[26] = v17;
    _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (v105.__cv_.__opaque[15] < 0) {
      operator delete((void *)v105.__cv_.__sig);
    }
    if (SBYTE7(v84) < 0) {
      operator delete((void *)v83);
    }
  }
  return v27;
}

void sub_191718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_6651C((uint64_t)&a47);
  std::condition_variable::~condition_variable((std::condition_variable *)(v47 - 216));
  std::mutex::~mutex((std::mutex *)(v47 - 168));
  _Unwind_Resume(a1);
}

__n128 sub_1917AC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (uint64_t *)(a2 + 4);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 12);
  sub_191A70((uint64_t)&v23, (AudioObjectID *)a2, (AudioObjectPropertyAddress *)buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v23;
  if (v23)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    char v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v21, v6);
        int v9 = v22;
        uint64_t v10 = (void **)v21[0];
        uint64_t v17 = *v4;
        int v18 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
        uint64_t v11 = v21;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v20 >= 0) {
          char v12 = __p;
        }
        else {
          char v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a2;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 176;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v6;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = v11;
        *(_WORD *)&buf[34] = 2080;
        *(void *)&unsigned char buf[36] = v12;
        __int16 v26 = 1024;
        AudioObjectID v27 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", buf, 0x32u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
    }
  }
  float v14 = v24;
  memset(buf, 0, 40);
  if (!v24[40]) {
    float v14 = buf;
  }
  __n128 result = *(__n128 *)v14;
  long long v16 = *((_OWORD *)v14 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 16) = v16;
  *(void *)(a1 + 32) = *((void *)v14 + 4);
  *(_DWORD *)(a1 + 40) = v6;
  return result;
}

void sub_191994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1919B8(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != 0.0 && *(double *)a2 != 0.0 && *(double *)a1 != *(double *)a2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    if (v4 && v3 != v4) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + 16);
    if (v7)
    {
      if (v6 != v7) {
        return 0;
      }
    }
  }
  int v8 = *(_DWORD *)(a1 + 20);
  if (v8)
  {
    int v9 = *(_DWORD *)(a2 + 20);
    if (v9)
    {
      if (v8 != v9) {
        return 0;
      }
    }
  }
  int v10 = *(_DWORD *)(a1 + 24);
  if (v10)
  {
    int v11 = *(_DWORD *)(a2 + 24);
    if (v11)
    {
      if (v10 != v11) {
        return 0;
      }
    }
  }
  int v12 = *(_DWORD *)(a1 + 28);
  if (v12)
  {
    int v13 = *(_DWORD *)(a2 + 28);
    if (v13)
    {
      if (v12 != v13) {
        return 0;
      }
    }
  }
  int v14 = *(_DWORD *)(a1 + 32);
  if (v14 && (int v15 = *(_DWORD *)(a2 + 32)) != 0 && v14 != v15) {
    return 0;
  }
  else {
    return sub_EBDC(a1, a2);
  }
}

uint64_t sub_191A70(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    uint64_t result = sub_26E94(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = result;
    if (result)
    {
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, v12);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        long long v11 = v12[1];
        *(_OWORD *)(a1 + 8) = v12[0];
        *(_OWORD *)(a1 + 24) = v11;
        *(void *)(a1 + 40) = v13;
        *(unsigned char *)(a1 + 48) = 1;
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 48) = 0;
  }
  return result;
}

uint64_t sub_191B54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, a2, 1936092532);
}

uint64_t sub_191B80(uint64_t a1, const void *a2, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    int v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v30 = 1024;
        int v31 = 365;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", buf, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }
  uint64_t v7 = sub_32A48(22);
  uint64_t v8 = sub_32A48(35);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_12;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_12:
  int v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = a3 == 1885762592 ? "physical" : "virtual";
    sub_259A4(&__p, (uint64_t)a2);
    long long v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    int v17 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
    __int16 v30 = 1024;
    int v31 = 367;
    __int16 v32 = 2080;
    *(void *)__int16 v33 = v15;
    *(_WORD *)&v33[8] = 2080;
    *(void *)&v33[10] = v16;
    *(_WORD *)&v33[18] = 1024;
    int v34 = v17;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting %s format to %s on stream %u.", buf, 0x2Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  inAddress.mSelector = a3;
  *(void *)&inAddress.mScope = 1735159650;
  uint64_t v18 = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 80), &inAddress, 0, 0, 0x28u, a2);
  if (v18)
  {
    size_t v19 = (os_log_t *)sub_32A48(22);
    char v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&__p, v18);
        long long v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        int v22 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v30 = 1024;
        int v31 = 371;
        __int16 v32 = 1024;
        *(_DWORD *)__int16 v33 = v18;
        *(_WORD *)&v33[4] = 2080;
        *(void *)&v33[6] = v21;
        *(_WORD *)&v33[14] = 1024;
        *(_DWORD *)&v33[16] = v22;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') setting the current stream format for stream %u", buf, 0x28u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return v18;
}

void sub_191EE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_191F00(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2, 1936092532);
}

uint64_t sub_191F2C(uint64_t a1, void **a2, AudioObjectPropertySelector a3)
{
  if (*a2 != a2[1])
  {
    char v60 = (os_log_t *)sub_32A48(13);
    int v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 279;
      _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"specified StreamFormatList is not empty\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "specified StreamFormatList is not empty");
  }
  AudioObjectID v6 = *(_DWORD *)(a1 + 80);
  if (a3 != 1885762657 && a3 != 1936092513)
  {
    int v63 = (os_log_t *)sub_32A48(13);
    long long v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 280;
      _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", buf, 0x12u);
    }
    uint64_t v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v65, "specified inSelector is not valid");
  }
  UInt32 outDataSize = 0;
  inAddress.mSelector = a3;
  *(void *)&inAddress.mScope = 1735159650;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v6, &inAddress, 0, 0, &outDataSize);
  uint64_t PropertyData = PropertyDataSize;
  if (PropertyDataSize)
  {
    char v9 = (os_log_t *)sub_32A48(22);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v68, PropertyData);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = &v68;
      }
      else {
        uint64_t v11 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      int v12 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 290;
      __int16 v75 = 1024;
      *(_DWORD *)unsigned int v76 = PropertyData;
      *(_WORD *)&v76[4] = 2080;
      *(void *)&v76[6] = v11;
      __int16 v77 = 1024;
      int v78 = v12;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') determining the number of stream formats for stream %u", buf, 0x28u);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (outDataSize >= 0x38)
  {
    int v67 = &v66;
    UInt32 v15 = outDataSize / 0x38;
    __chkstk_darwin(PropertyDataSize);
    int v17 = (char *)&v66 - v16;
    UInt32 outDataSize = 56 * v15;
    uint64_t PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 80), &inAddress, 0, 0, &outDataSize, (char *)&v66 - v16);
    if (PropertyData)
    {
      uint64_t v18 = (os_log_t *)sub_32A48(22);
      size_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v68, PropertyData);
        char v20 = (v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v68
            : (std::string *)v68.__r_.__value_.__r.__words[0];
        int v21 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        uint64_t v72 = "Stream_HAL_Common.cpp";
        __int16 v73 = 1024;
        int v74 = 303;
        __int16 v75 = 1024;
        *(_DWORD *)unsigned int v76 = PropertyData;
        *(_WORD *)&v76[4] = 2080;
        *(void *)&v76[6] = v20;
        __int16 v77 = 1024;
        int v78 = v21;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') reading the stream formats for stream %u", buf, 0x28u);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      UInt32 v22 = outDataSize / 0x38;
      if (outDataSize / 0x38 < v15)
      {
        unsigned int v23 = (os_log_t *)sub_32A48(22);
        uint64_t v24 = *v23;
        if (*v23)
        {
          if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v72 = "Stream_HAL_Common.cpp";
            __int16 v73 = 1024;
            int v74 = 308;
            __int16 v75 = 1024;
            *(_DWORD *)unsigned int v76 = v22;
            *(_WORD *)&v76[4] = 1024;
            *(_DWORD *)&v76[6] = v15;
            _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d The HAL returned fewer stream formats (%u) than were expected (%u)", buf, 0x1Eu);
          }
        }
      }
      if (v22 > v15)
      {
        int v25 = (os_log_t *)sub_32A48(22);
        __int16 v26 = *v25;
        if (*v25)
        {
          if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v72 = "Stream_HAL_Common.cpp";
            __int16 v73 = 1024;
            int v74 = 309;
            __int16 v75 = 1024;
            *(_DWORD *)unsigned int v76 = v22;
            *(_WORD *)&v76[4] = 1024;
            *(_DWORD *)&v76[6] = v15;
            _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d The HAL returned more stream formats (%u) than were expected (%u)", buf, 0x1Eu);
          }
        }
      }
      uint64_t v27 = sub_32A48(22);
      if (*(unsigned char *)(v27 + 8))
      {
        uint64_t v29 = *(NSObject **)v27;
        if (*(void *)v27)
        {
          if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
          {
            __int16 v30 = "virtual";
            int v31 = *(_DWORD *)(a1 + 80);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v72 = "Stream_HAL_Common.cpp";
            __int16 v73 = 1024;
            int v74 = 312;
            if (a3 == 1885762657) {
              __int16 v30 = "physical";
            }
            __int16 v75 = 2080;
            *(void *)unsigned int v76 = v30;
            *(_WORD *)&v76[8] = 1024;
            *(_DWORD *)&v76[10] = v31;
            _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Querying HAL for %s formats on stream ID %u:", buf, 0x22u);
          }
        }
      }
      if (v22 >= v15) {
        uint64_t v32 = v15;
      }
      else {
        uint64_t v32 = v22;
      }
      if (v32)
      {
        uint64_t v33 = 0;
        *(void *)&long long v28 = 136315906;
        long long v66 = v28;
        do
        {
          int v34 = &v17[56 * v33];
          uint64_t v35 = (char *)a2[1];
          int8x8_t v36 = (char *)a2[2];
          if (v35 >= v36)
          {
            uint64_t v41 = 0x6DB6DB6DB6DB6DB7 * ((v35 - (unsigned char *)*a2) >> 3);
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) > 0x492492492492492) {
              sub_60548();
            }
            unint64_t v43 = 0x6DB6DB6DB6DB6DB7 * ((v36 - (unsigned char *)*a2) >> 3);
            if (2 * v43 > v42) {
              unint64_t v42 = 2 * v43;
            }
            if (v43 >= 0x249249249249249) {
              unint64_t v44 = 0x492492492492492;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44) {
              unint64_t v44 = (unint64_t)sub_1927E0(v44);
            }
            else {
              uint64_t v45 = 0;
            }
            unint64_t v46 = v44 + 56 * v41;
            long long v47 = *(_OWORD *)v34;
            long long v48 = *((_OWORD *)v34 + 1);
            long long v49 = *((_OWORD *)v34 + 2);
            *(void *)(v46 + 48) = *((void *)v34 + 6);
            *(_OWORD *)(v46 + 16) = v48;
            *(_OWORD *)(v46 + 32) = v49;
            *(_OWORD *)unint64_t v46 = v47;
            CFTypeRef v51 = (char *)*a2;
            char v50 = (char *)a2[1];
            char v52 = (char *)v46;
            if (v50 != *a2)
            {
              do
              {
                long long v53 = *(_OWORD *)(v50 - 56);
                long long v54 = *(_OWORD *)(v50 - 40);
                long long v55 = *(_OWORD *)(v50 - 24);
                *((void *)v52 - 1) = *((void *)v50 - 1);
                *(_OWORD *)(v52 - 24) = v55;
                *(_OWORD *)(v52 - 40) = v54;
                *(_OWORD *)(v52 - 56) = v53;
                v52 -= 56;
                v50 -= 56;
              }
              while (v50 != v51);
              char v50 = (char *)*a2;
            }
            char v40 = (void *)(v46 + 56);
            *a2 = v52;
            a2[1] = (void *)(v46 + 56);
            a2[2] = (void *)(v44 + 56 * v45);
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            long long v37 = *(_OWORD *)v34;
            long long v38 = *((_OWORD *)v34 + 1);
            long long v39 = *((_OWORD *)v34 + 2);
            *((void *)v35 + 6) = *((void *)v34 + 6);
            *((_OWORD *)v35 + 1) = v38;
            *((_OWORD *)v35 + 2) = v39;
            *(_OWORD *)uint64_t v35 = v37;
            char v40 = v35 + 56;
          }
          a2[1] = v40;
          uint64_t v56 = sub_32A48(22);
          if (*(unsigned char *)(v56 + 8))
          {
            int v57 = *(NSObject **)v56;
            if (*(void *)v56)
            {
              if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
              {
                sub_16BC04(&v68, (uint64_t)&v17[56 * v33]);
                char v58 = &v68;
                if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  char v58 = (std::string *)v68.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = v66;
                uint64_t v72 = "Stream_HAL_Common.cpp";
                __int16 v73 = 1024;
                int v74 = 317;
                __int16 v75 = 1024;
                *(_DWORD *)unsigned int v76 = v33;
                *(_WORD *)&v76[4] = 2080;
                *(void *)&v76[6] = v58;
                _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d %u: %s.", buf, 0x22u);
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v68.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          ++v33;
        }
        while (v33 != v32);
      }
    }
  }
  else
  {
    char v13 = (os_log_t *)sub_32A48(22);
    uint64_t PropertyData = 2003329396;
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 322;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream does not have any virtual formats", buf, 0x12u);
    }
  }
  return PropertyData;
}

void sub_1927C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1927E0(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    sub_60560();
  }
  return operator new(56 * a1);
}

uint64_t sub_19282C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2, 1936092513);
}

uint64_t sub_192858(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

void sub_192860(os_unfair_lock_s *a1)
{
  sub_D26B4((uint64_t)a1);
  uint64_t v2 = (os_log_t *)sub_32A48(22);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    sub_4F64((uint64_t)__p, a1 + 2);
    if (v6 >= 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v8 = "Stream_HAL_Common.cpp";
    __int16 v9 = 1024;
    int v10 = 83;
    __int16 v11 = 2080;
    int v12 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created Stream: %s.", buf, 0x1Cu);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

BOOL sub_192964(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 80), a2, a3, a4) == 0;
}

BOOL sub_192988(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  OSStatus v6 = AudioObjectAddPropertyListener(*(_DWORD *)(a1 + 80), a2, a3, a4);
  if (v6)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(22);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        int v10 = (void **)v19[0];
        int v11 = *(_DWORD *)(a1 + 80);
        sub_2417C(__p, a2->mSelector);
        int v12 = v19;
        if (v9 < 0) {
          int v12 = v10;
        }
        if (v18 >= 0) {
          char v13 = __p;
        }
        else {
          char v13 = (void **)__p[0];
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        AudioObjectPropertyElement mElement = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316930;
        UInt32 v22 = "Stream_HAL_Common.cpp";
        __int16 v23 = 1024;
        int v24 = 235;
        __int16 v25 = 1024;
        OSStatus v26 = v6;
        __int16 v27 = 2080;
        long long v28 = v12;
        __int16 v29 = 1024;
        int v30 = v11;
        __int16 v31 = 2080;
        uint64_t v32 = v13;
        __int16 v33 = 1024;
        AudioObjectPropertyScope v34 = mScope;
        __int16 v35 = 1024;
        AudioObjectPropertyElement v36 = mElement;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %d (\"%s\"): mStreamID %u; selector \"%s\"; scope %u; element %u",
          buf,
          0x3Eu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  return v6 == 0;
}

void sub_192B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_192B3C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v18, *(_DWORD *)(a1 + 80));
  int v4 = std::string::insert(&v18, 0, "[ id: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v20 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    OSStatus v6 = __p;
  }
  else {
    OSStatus v6 = (void **)__p[0];
  }
  if (v20 >= 0) {
    std::string::size_type v7 = HIBYTE(v20);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_21C8C(&v18, __str);
  uint64_t v8 = std::string::insert(&v18, 0, "; addr: ", 8uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v20 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if (v20 >= 0) {
    std::string::size_type v11 = HIBYTE(v20);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 84)) {
    int v12 = "out";
  }
  else {
    int v12 = "in";
  }
  sub_21C8C(&v18, v12);
  char v13 = std::string::insert(&v18, 0, "; dir: ", 7uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v20 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    UInt32 v15 = __p;
  }
  else {
    UInt32 v15 = (void **)__p[0];
  }
  if (v20 >= 0) {
    std::string::size_type v16 = HIBYTE(v20);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_192D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192DC8(os_unfair_lock_s *a1, AudioObjectPropertyAddress *inAddress, UInt32 a3, const void *a4, UInt32 inDataSize, void *inData)
{
  if (inAddress->mSelector == 1936092532 || inAddress->mSelector == 1885762592)
  {
    if ((*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                          + 32))(a1, inAddress) != inDataSize)
    {
      long long v28 = (os_log_t *)sub_32A48(13);
      __int16 v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v43 = 1024;
        int v44 = 206;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Bad data size for property kAudioStreamPropertyPhysical/VirtualFormat\"", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 561211770;
    }
    uint64_t v10 = sub_32A48(22);
    uint64_t v11 = sub_32A48(35);
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_13;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_13:
    int v17 = *(NSObject **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v38 = *(void *)&inAddress->mSelector;
      AudioObjectPropertyElement mElement = inAddress->mElement;
      std::string v18 = v40;
      sub_16C9C4((uint64_t)v40, (unsigned int *)&v38);
      if (v41 < 0) {
        std::string v18 = (void **)v40[0];
      }
      sub_4F64((uint64_t)v36, a1 + 2);
      int v19 = v37;
      int64_t v20 = (void **)v36[0];
      sub_259A4(&__p, (uint64_t)inData);
      uint64_t v21 = v36;
      if (v19 < 0) {
        uint64_t v21 = v20;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      __int16 v43 = 1024;
      int v44 = 207;
      __int16 v45 = 2080;
      unint64_t v46 = v18;
      __int16 v47 = 2080;
      long long v48 = v21;
      __int16 v49 = 2080;
      char v50 = p_p;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on stream %s: %s.", buf, 0x30u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }
    uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, void *))(*(void *)&a1->_os_unfair_lock_opaque + 128))(a1, inData);
    int v23 = result;
    if (result)
    {
      int v24 = (os_log_t *)sub_32A48(13);
      __int16 v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v43 = 1024;
        int v44 = 209;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"error setting stream format\"", buf, 0x12u);
      }
      OSStatus v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)OSStatus v26 = &off_6414D8;
      v26[2] = v23;
    }
  }
  else
  {
    uint64_t result = AudioObjectSetPropertyData(a1[20]._os_unfair_lock_opaque, inAddress, a3, a4, inDataSize, inData);
    if (result)
    {
      int v31 = result;
      uint64_t v32 = (os_log_t *)sub_32A48(13);
      __int16 v33 = *v32;
      if (*v32)
      {
        if (os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
          __int16 v43 = 1024;
          int v44 = 216;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to set property data.\"", buf, 0x12u);
        }
      }
      AudioObjectPropertyScope v34 = __cxa_allocate_exception(0x10uLL);
      *(void *)AudioObjectPropertyScope v34 = &off_6414D8;
      v34[2] = v31;
    }
  }
  return result;
}

void sub_193294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1932D0(os_unfair_lock_s *a1, AudioObjectPropertyAddress *inAddress, UInt32 a3, const void *a4, UInt32 *ioDataSize, void *a6)
{
  AudioObjectPropertySelector mSelector = inAddress->mSelector;
  if ((int)inAddress->mSelector > 1936092512)
  {
    if (mSelector == 1936092513) {
      goto LABEL_13;
    }
    if (mSelector != 1936092532) {
      goto LABEL_75;
    }
  }
  else if (mSelector != 1885762592)
  {
    if (mSelector != 1885762657)
    {
LABEL_75:
      OSStatus PropertyData = AudioObjectGetPropertyData(a1[20]._os_unfair_lock_opaque, inAddress, a3, a4, ioDataSize, a6);
      if (PropertyData)
      {
        OSStatus v71 = PropertyData;
        uint64_t v72 = (os_log_t *)sub_32A48(13);
        __int16 v73 = *v72;
        if (*v72)
        {
          if (os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
            __int16 v84 = 1024;
            int v85 = 190;
            _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to obtain property data.\"", buf, 0x12u);
          }
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = v71;
      }
      return;
    }
LABEL_13:
    uint64_t v80 = 0;
    char v81 = 0;
    uint64_t v82 = 0;
    int v19 = (*(uint64_t (**)(os_unfair_lock_s *, void **))(*(void *)&a1->_os_unfair_lock_opaque + 96))(a1, &v80);
    if (v19)
    {
      std::string v68 = (os_log_t *)sub_32A48(13);
      char v69 = *v68;
      if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v84 = 1024;
        int v85 = 166;
        _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"error obtaining stream formats.\"", buf, 0x12u);
      }
      uint64_t v70 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v70 = &off_6414D8;
      v70[2] = v19;
    }
    int64_t v20 = v80;
    if (0x6DB6DB6DB6DB6DB7 * ((v81 - (unsigned char *)v80) >> 3) >= *ioDataSize / 0x38uLL) {
      unint64_t v21 = *ioDataSize / 0x38uLL;
    }
    else {
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((v81 - (unsigned char *)v80) >> 3);
    }
    if (v21)
    {
      UInt32 v22 = a6;
      unint64_t v23 = v21;
      do
      {
        long long v24 = *v20;
        long long v25 = v20[1];
        long long v26 = v20[2];
        v22[6] = *((void *)v20 + 6);
        *((_OWORD *)v22 + 1) = v25;
        *((_OWORD *)v22 + 2) = v26;
        *(_OWORD *)UInt32 v22 = v24;
        v22 += 7;
        int64_t v20 = (_OWORD *)((char *)v20 + 56);
        --v23;
      }
      while (v23);
    }
    *UInt32 ioDataSize = 56 * v21;
    uint64_t v27 = sub_32A48(22);
    uint64_t v28 = sub_32A48(35);
    char v29 = 0;
    uint64_t v30 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = *(int *)&buf[4 * v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1;
      if (v33) {
        goto LABEL_43;
      }
    }
    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_43:
    char v41 = *(NSObject **)v27;
    if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      if ((*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1)) {
        unint64_t v42 = "output";
      }
      else {
        unint64_t v42 = "input";
      }
      sub_21C8C(&v77, v42);
      int v43 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
      std::string::size_type v44 = v77.__r_.__value_.__r.__words[0];
      uint32_t os_unfair_lock_opaque = a1[20]._os_unfair_lock_opaque;
      sub_2417C(&__p, inAddress->mScope);
      unint64_t v46 = &v77;
      if (v43 < 0) {
        unint64_t v46 = (std::string *)v44;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      AudioObjectPropertyScope mScope = inAddress->mScope;
      AudioObjectPropertyElement mElement = inAddress->mElement;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      __int16 v84 = 1024;
      int v85 = 179;
      __int16 v86 = 2080;
      *(void *)char v87 = v46;
      *(_WORD *)&v87[8] = 1024;
      *(_DWORD *)&v87[10] = os_unfair_lock_opaque;
      *(_WORD *)&v87[14] = 2080;
      *(void *)&v87[16] = p_p;
      *(_WORD *)&v87[24] = 1024;
      *(_DWORD *)&v87[26] = mScope;
      __int16 v88 = 1024;
      AudioObjectPropertyElement v89 = mElement;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get %s stream's available formats from HAL stream %u (scope: '%s' (%u); element: %u):",
        buf,
        0x38u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        uint64_t v51 = sub_32A48(22);
        uint64_t v52 = sub_32A48(35);
        char v53 = 0;
        uint64_t v54 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v55 = *(void *)(v51 + 8);
        while (1)
        {
          uint64_t v56 = *(int *)&buf[4 * v54];
          char v57 = v53;
          if (((v55 & v56) != 0) != ((*(void *)(v52 + 8) & v56) != 0)) {
            break;
          }
          char v53 = 1;
          uint64_t v54 = 1;
          if (v57) {
            goto LABEL_65;
          }
        }
        if ((v55 & v56) == 0) {
          uint64_t v51 = v52;
        }
LABEL_65:
        char v58 = *(NSObject **)v51;
        if (v58 && os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          sub_16BC04(&v77, (uint64_t)a6 + 56 * i);
          AudioObjectID v59 = &v77;
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            AudioObjectID v59 = (std::string *)v77.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
          __int16 v84 = 1024;
          int v85 = 182;
          __int16 v86 = 1024;
          *(_DWORD *)char v87 = i + 1;
          *(_WORD *)&v87[4] = 2080;
          *(void *)&v87[6] = v59;
          _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format %u: %s", buf, 0x22u);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    char v40 = v80;
    if (v80)
    {
      char v81 = v80;
      goto LABEL_74;
    }
    return;
  }
  UInt32 v10 = *ioDataSize;
  if (v10 != (*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                               + 32))(a1, inAddress))
  {
    int v61 = (os_log_t *)sub_32A48(13);
    uint64_t v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      __int16 v84 = 1024;
      int v85 = 153;
      _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Bad data size for property kAudioStreamPropertyPhysical/VirtualFormat\"", buf, 0x12u);
    }
    int v63 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v63 = &off_6414D8;
    v63[2] = 561211770;
  }
  int v11 = (*(uint64_t (**)(os_unfair_lock_s *, void *))(*(void *)&a1->_os_unfair_lock_opaque + 112))(a1, a6);
  if (v11)
  {
    int v64 = v11;
    uint64_t v65 = (os_log_t *)sub_32A48(13);
    long long v66 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      __int16 v84 = 1024;
      int v85 = 155;
      _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"error obtaining format\"", buf, 0x12u);
    }
    int v67 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v67 = &off_6414D8;
    v67[2] = v64;
  }
  uint64_t v12 = sub_32A48(22);
  uint64_t v13 = sub_32A48(35);
  char v14 = 0;
  uint64_t v15 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1;
    if (v18) {
      goto LABEL_26;
    }
  }
  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_26:
  AudioObjectPropertyScope v34 = *(NSObject **)v12;
  if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v78 = *(void *)&inAddress->mSelector;
    AudioObjectPropertyElement v79 = inAddress->mElement;
    __int16 v35 = &v80;
    sub_16C9C4((uint64_t)&v80, (unsigned int *)&v78);
    if (v82 < 0) {
      __int16 v35 = v80;
    }
    sub_4F64((uint64_t)&v77, a1 + 2);
    int v36 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
    std::string::size_type v37 = v77.__r_.__value_.__r.__words[0];
    sub_259A4(&__p, (uint64_t)a6);
    uint64_t v38 = &v77;
    if (v36 < 0) {
      uint64_t v38 = (std::string *)v37;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v39 = &__p;
    }
    else {
      long long v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
    __int16 v84 = 1024;
    int v85 = 157;
    __int16 v86 = 2080;
    *(void *)char v87 = v35;
    *(_WORD *)&v87[8] = 2080;
    *(void *)&v87[10] = v38;
    *(_WORD *)&v87[18] = 2080;
    *(void *)&v87[20] = v39;
    _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on stream %s: %s.", buf, 0x30u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82) < 0)
    {
      char v40 = v80;
LABEL_74:
      operator delete(v40);
    }
  }
}

void sub_193C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_193CC0(_DWORD *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  AudioObjectID v4 = a1[20];
  UInt32 outDataSize = 0;
  if (a2->mSelector == 1936092513 || a2->mSelector == 1885762657)
  {
    memset(__p, 0, sizeof(__p));
    int v6 = (*(uint64_t (**)(_DWORD *, void **))(*(void *)a1 + 96))(a1, __p);
    if (v6)
    {
      int v11 = (os_log_t *)sub_32A48(13);
      uint64_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v19 = "Stream_HAL_Common.cpp";
        __int16 v20 = 1024;
        int v21 = 126;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"error obtaining stream formats.\"", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v6;
    }
    uint64_t v7 = (LODWORD(__p[1]) - LODWORD(__p[0])) & 0xFFFFFFF8;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(v4, a2, a3, a4, &outDataSize);
    OSStatus v9 = PropertyDataSize;
    if (PropertyDataSize)
    {
      char v14 = (os_log_t *)sub_32A48(13);
      uint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "Stream_HAL_Common.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 135;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to determine the property's data size.\"", (uint8_t *)__p, 0x12u);
      }
      uint64_t v16 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v16 = &off_6414D8;
      v16[2] = v9;
    }
    return outDataSize;
  }
  return v7;
}

void sub_193F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_193F3C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectID v2 = *(_DWORD *)(a1 + 80);
  Boolean outIsSettable = 0;
  OSStatus IsPropertySettable = AudioObjectIsPropertySettable(v2, a2, &outIsSettable);
  if (IsPropertySettable)
  {
    long long v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Stream_HAL_Common.cpp";
      __int16 v14 = 1024;
      int v15 = 106;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to determine whether the property is settable.\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = IsPropertySettable;
  }
  if (outIsSettable >= 2u)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    OSStatus v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Stream_HAL_Common.cpp";
      __int16 v14 = 1024;
      int v15 = 107;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a bad value\"", buf, 0x12u);
    }
    UInt32 v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "The HAL returned a bad value");
  }
  return outIsSettable != 0;
}

void sub_194114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_194130(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 80), a2) != 0;
}

void sub_194154(void *a1)
{
  *a1 = off_625BF0;
  sub_FE920((uint64_t)a1);

  operator delete();
}

uint64_t sub_1941A8(uint64_t a1)
{
  *(void *)a1 = off_625BF0;
  return sub_FE920(a1);
}

uint64_t sub_1941C8(uint64_t a1, AudioObjectID inObjectID)
{
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_625BF0;
  *(_DWORD *)(a1 + 80) = inObjectID;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6273646972;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 ioDataSize = 4;
  unsigned int outData = 2;
  OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    AudioObjectID v4 = (os_log_t *)sub_32A48(22);
    long long v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, PropertyData);
      if (v12 >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v17 = "Stream_HAL_Common.cpp";
      __int16 v18 = 1024;
      int v19 = 55;
      __int16 v20 = 1024;
      OSStatus v21 = PropertyData;
      __int16 v22 = 2080;
      unint64_t v23 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') determining stream direction", buf, 0x22u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
LABEL_15:
    BOOL v7 = 1;
    goto LABEL_16;
  }
  if (ioDataSize != 4 || outData > 1)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(22);
    OSStatus v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v17 = "Stream_HAL_Common.cpp";
      __int16 v18 = 1024;
      int v19 = 50;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d The HAL returned unexpected results upon reading the stream direction", buf, 0x12u);
    }
    goto LABEL_15;
  }
  BOOL v7 = outData != 1;
LABEL_16:
  *(unsigned char *)(a1 + 84) = v7;
  return a1;
}

void sub_1943F4(_Unwind_Exception *a1)
{
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

void sub_194408()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)int v6 = 0u;
  *(_OWORD *)BOOL v7 = 0u;
  long long v8 = 0u;
  int v9 = 0;
  BOOL v10 = (unsigned __int16)sub_6CBEC() > 0x100u;
  char v11 = 1;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  int v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v95[80] = 0;
  v95[120] = 0;
  v95[128] = 0;
  v95[200] = 0;
  v95[208] = 0;
  v95[248] = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  LOBYTE(v108) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  LOBYTE(v116) = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  LOBYTE(v128) = 0;
  char v129 = 0;
  char v130 = 1;
  char v131 = 0;
  char v132 = 0;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  LOBYTE(v137) = 0;
  char v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  __int16 v141 = 0;
  char v142 = 0;
  char v143 = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  LOBYTE(v152) = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(v156) = 0;
  char v157 = 0;
  LOBYTE(v158) = 0;
  char v159 = 0;
  LOBYTE(v160) = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  LOBYTE(__p) = 0;
  char v166 = 0;
  v167.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  v169.__r_.__value_.__s.__data_[0] = 0;
  char v170 = 0;
  v171.__r_.__value_.__s.__data_[0] = 0;
  char v172 = 0;
  int v173 = 256;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  __int16 v180 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 1;
  int v4 = 0;
  sub_8732C((char *)v6, 0, 0, 0);
  sub_8732C((char *)&v7[1], 0, 0, 0);
  int v9 = 16777472;
  LOWORD(v12) = 257;
  int v63 = -1047527424;
  char v64 = 1;
  int v65 = 0;
  char v66 = 1;
  LOWORD(v67) = 257;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v94 = 16843009;
  int v82 = -1040187392;
  char v83 = 1;
  if (!v97) {
    char v97 = 1;
  }
  int v96 = 1836282987;
  if (!v99) {
    char v99 = 1;
  }
  int v98 = 2;
  if (!v101) {
    char v101 = 1;
  }
  int v100 = 4;
  if (!v103) {
    char v103 = 1;
  }
  int v102 = 0;
  int v106 = 13;
  char v107 = 1;
  int v108 = 29;
  char v109 = 1;
  int v110 = 35;
  char v111 = 1;
  int v116 = 12;
  char v117 = 1;
  int v128 = 1;
  char v129 = 1;
  int v158 = 6;
  char v159 = 1;
  int v133 = 35;
  char v134 = 1;
  int v135 = 2;
  char v136 = 1;
  int v137 = 24;
  char v138 = 1;
  int v139 = 33;
  char v140 = 1;
  int v152 = 12;
  char v153 = 1;
  int v154 = 35;
  char v155 = 1;
  int v156 = 22;
  char v157 = 1;
  int v160 = 1;
  char v161 = 1;
  sub_208140(&v181, 72);
  if (v166)
  {
    if (SHIBYTE(v165) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v181;
    uint64_t v165 = v182;
  }
  else
  {
    long long __p = v181;
    uint64_t v165 = v182;
    char v166 = 1;
  }
  sub_87428(&v167, "_top_mic_general");
  sub_87428(&v169, "_top_mic_measurement");
  sub_87428(&v171, "_top_mic_hearing_accessibility");
  sub_402E04(&v0);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_194A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_194A34(uint64_t result)
{
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  strcpy((char *)(result + 48), "tlfd");
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(void *)(result + 256) = 0;
  strcpy((char *)(result + 264), "tlfd");
  *(unsigned char *)(result + 272) = 0;
  *(unsigned char *)(result + 344) = 0;
  *(void *)(result + 472) = 0;
  *(_OWORD *)(result + 440) = 0u;
  *(_OWORD *)(result + 456) = 0u;
  *(_OWORD *)(result + 408) = 0u;
  *(_OWORD *)(result + 424) = 0u;
  *(_OWORD *)(result + 376) = 0u;
  *(_OWORD *)(result + 392) = 0u;
  *(_OWORD *)(result + 360) = 0u;
  strcpy((char *)(result + 480), "tlfd");
  *(unsigned char *)(result + 488) = 0;
  *(unsigned char *)(result + 560) = 0;
  *(_OWORD *)(result + 576) = 0u;
  *(_OWORD *)(result + 592) = 0u;
  *(_OWORD *)(result + 608) = 0u;
  *(_OWORD *)(result + 624) = 0u;
  *(_OWORD *)(result + 640) = 0u;
  *(_OWORD *)(result + 656) = 0u;
  *(_OWORD *)(result + 672) = 0u;
  *(void *)(result + 688) = 0;
  strcpy((char *)(result + 696), "tlfd");
  *(unsigned char *)(result + 704) = 0;
  *(unsigned char *)(result + 776) = 0;
  *(_OWORD *)(result + 792) = 0u;
  *(_OWORD *)(result + 808) = 0u;
  *(_OWORD *)(result + 824) = 0u;
  *(_OWORD *)(result + 840) = 0u;
  *(_OWORD *)(result + 856) = 0u;
  *(_OWORD *)(result + 872) = 0u;
  *(_OWORD *)(result + 888) = 0u;
  *(void *)(result + 904) = 0;
  strcpy((char *)(result + 912), "tlfd");
  *(unsigned char *)(result + 920) = 0;
  *(unsigned char *)(result + 992) = 0;
  *(_OWORD *)(result + 1008) = 0u;
  *(_OWORD *)(result + 1024) = 0u;
  *(_OWORD *)(result + 1040) = 0u;
  *(_OWORD *)(result + 1056) = 0u;
  *(_OWORD *)(result + 1072) = 0u;
  *(_OWORD *)(result + 1088) = 0u;
  *(_OWORD *)(result + 1104) = 0u;
  *(void *)(result + 1120) = 0;
  strcpy((char *)(result + 1128), "tlfd");
  *(unsigned char *)(result + 1136) = 0;
  *(unsigned char *)(result + 1208) = 0;
  *(void *)(result + 1336) = 0;
  *(_OWORD *)(result + 1304) = 0u;
  *(_OWORD *)(result + 1320) = 0u;
  *(_OWORD *)(result + 1272) = 0u;
  *(_OWORD *)(result + 1288) = 0u;
  *(_OWORD *)(result + 1240) = 0u;
  *(_OWORD *)(result + 1256) = 0u;
  *(_OWORD *)(result + 1224) = 0u;
  strcpy((char *)(result + 1344), "tlfd");
  *(unsigned char *)(result + 1352) = 0;
  *(unsigned char *)(result + 1424) = 0;
  *(void *)(result + 1552) = 0;
  *(_OWORD *)(result + 1536) = 0u;
  *(_OWORD *)(result + 1520) = 0u;
  *(_OWORD *)(result + 1504) = 0u;
  *(_OWORD *)(result + 1488) = 0u;
  *(_OWORD *)(result + 1472) = 0u;
  *(_OWORD *)(result + 1456) = 0u;
  *(_OWORD *)(result + 1440) = 0u;
  strcpy((char *)(result + 1560), "tlfd");
  *(unsigned char *)(result + 1568) = 0;
  *(unsigned char *)(result + 1640) = 0;
  *(void *)(result + 1768) = 0;
  *(_OWORD *)(result + 1736) = 0u;
  *(_OWORD *)(result + 1752) = 0u;
  *(_OWORD *)(result + 1704) = 0u;
  *(_OWORD *)(result + 1720) = 0u;
  *(_OWORD *)(result + 1672) = 0u;
  *(_OWORD *)(result + 1688) = 0u;
  *(_OWORD *)(result + 1656) = 0u;
  strcpy((char *)(result + 1776), "tlfd");
  *(unsigned char *)(result + 1784) = 0;
  *(unsigned char *)(result + 1856) = 0;
  *(void *)(result + 1984) = 0;
  *(_OWORD *)(result + 1968) = 0u;
  *(_OWORD *)(result + 1952) = 0u;
  *(_OWORD *)(result + 1936) = 0u;
  *(_OWORD *)(result + 1920) = 0u;
  *(_OWORD *)(result + 1904) = 0u;
  *(_OWORD *)(result + 1888) = 0u;
  *(_OWORD *)(result + 1872) = 0u;
  strcpy((char *)(result + 1992), "tlfd");
  *(unsigned char *)(result + 2000) = 0;
  *(unsigned char *)(result + 2072) = 0;
  *(void *)(result + 2200) = 0;
  *(_OWORD *)(result + 2168) = 0u;
  *(_OWORD *)(result + 2184) = 0u;
  *(_OWORD *)(result + 2136) = 0u;
  *(_OWORD *)(result + 2152) = 0u;
  *(_OWORD *)(result + 2104) = 0u;
  *(_OWORD *)(result + 2120) = 0u;
  *(_OWORD *)(result + 2088) = 0u;
  strcpy((char *)(result + 2208), "tlfd");
  *(unsigned char *)(result + 2216) = 0;
  *(unsigned char *)(result + 2288) = 0;
  *(void *)(result + 2416) = 0;
  *(_OWORD *)(result + 2400) = 0u;
  *(_OWORD *)(result + 2384) = 0u;
  *(_OWORD *)(result + 2368) = 0u;
  *(_OWORD *)(result + 2352) = 0u;
  *(_OWORD *)(result + 2336) = 0u;
  *(_OWORD *)(result + 2320) = 0u;
  *(_OWORD *)(result + 2304) = 0u;
  strcpy((char *)(result + 2424), "tlfd");
  *(unsigned char *)(result + 2432) = 0;
  *(unsigned char *)(result + 2504) = 0;
  *(void *)(result + 2632) = 0;
  *(_OWORD *)(result + 2600) = 0u;
  *(_OWORD *)(result + 2616) = 0u;
  *(_OWORD *)(result + 2568) = 0u;
  *(_OWORD *)(result + 2584) = 0u;
  *(_OWORD *)(result + 2536) = 0u;
  *(_OWORD *)(result + 2552) = 0u;
  *(_OWORD *)(result + 2520) = 0u;
  strcpy((char *)(result + 2640), "tlfd");
  *(unsigned char *)(result + 2648) = 0;
  *(unsigned char *)(result + 2720) = 0;
  *(void *)(result + 2848) = 0;
  *(_OWORD *)(result + 2832) = 0u;
  *(_OWORD *)(result + 2816) = 0u;
  *(_OWORD *)(result + 2800) = 0u;
  *(_OWORD *)(result + 2784) = 0u;
  *(_OWORD *)(result + 2768) = 0u;
  *(_OWORD *)(result + 2752) = 0u;
  *(_OWORD *)(result + 2736) = 0u;
  strcpy((char *)(result + 2856), "tlfd");
  *(unsigned char *)(result + 2864) = 0;
  *(unsigned char *)(result + 2936) = 0;
  *(void *)(result + 3064) = 0;
  *(_OWORD *)(result + 3032) = 0u;
  *(_OWORD *)(result + 3048) = 0u;
  *(_OWORD *)(result + 3000) = 0u;
  *(_OWORD *)(result + 3016) = 0u;
  *(_OWORD *)(result + 2968) = 0u;
  *(_OWORD *)(result + 2984) = 0u;
  *(_OWORD *)(result + 2952) = 0u;
  strcpy((char *)(result + 3072), "tlfd");
  *(unsigned char *)(result + 3080) = 0;
  *(unsigned char *)(result + 3152) = 0;
  *(void *)(result + 3280) = 0;
  *(_OWORD *)(result + 3264) = 0u;
  *(_OWORD *)(result + 3248) = 0u;
  *(_OWORD *)(result + 3232) = 0u;
  *(_OWORD *)(result + 3216) = 0u;
  *(_OWORD *)(result + 3200) = 0u;
  *(_OWORD *)(result + 3184) = 0u;
  *(_OWORD *)(result + 3168) = 0u;
  strcpy((char *)(result + 3288), "tlfd");
  *(unsigned char *)(result + 3296) = 0;
  *(unsigned char *)(result + 3368) = 0;
  *(void *)(result + 3496) = 0;
  *(_OWORD *)(result + 3464) = 0u;
  *(_OWORD *)(result + 3480) = 0u;
  *(_OWORD *)(result + 3432) = 0u;
  *(_OWORD *)(result + 3448) = 0u;
  *(_OWORD *)(result + 3400) = 0u;
  *(_OWORD *)(result + 3416) = 0u;
  *(_OWORD *)(result + 3384) = 0u;
  strcpy((char *)(result + 3504), "tlfd");
  *(unsigned char *)(result + 3512) = 0;
  *(unsigned char *)(result + 3584) = 0;
  *(void *)(result + 3712) = 0;
  *(_OWORD *)(result + 3696) = 0u;
  *(_OWORD *)(result + 3680) = 0u;
  *(_OWORD *)(result + 3664) = 0u;
  *(_OWORD *)(result + 3648) = 0u;
  *(_OWORD *)(result + 3632) = 0u;
  *(_OWORD *)(result + 3616) = 0u;
  *(_OWORD *)(result + 3600) = 0u;
  strcpy((char *)(result + 3720), "tlfd");
  *(unsigned char *)(result + 3728) = 0;
  *(unsigned char *)(result + 3800) = 0;
  *(void *)(result + 3928) = 0;
  *(_OWORD *)(result + 3896) = 0u;
  *(_OWORD *)(result + 3912) = 0u;
  *(_OWORD *)(result + 3864) = 0u;
  *(_OWORD *)(result + 3880) = 0u;
  *(_OWORD *)(result + 3832) = 0u;
  *(_OWORD *)(result + 3848) = 0u;
  *(_OWORD *)(result + 3816) = 0u;
  strcpy((char *)(result + 3936), "tlfd");
  *(unsigned char *)(result + 3944) = 0;
  *(unsigned char *)(result + 4016) = 0;
  *(void *)(result + 4144) = 0;
  *(_OWORD *)(result + 4128) = 0u;
  *(_OWORD *)(result + 4112) = 0u;
  *(_OWORD *)(result + 4096) = 0u;
  *(_OWORD *)(result + 4080) = 0u;
  *(_OWORD *)(result + 4064) = 0u;
  *(_OWORD *)(result + 4048) = 0u;
  *(_OWORD *)(result + 4032) = 0u;
  strcpy((char *)(result + 4152), "tlfd");
  *(unsigned char *)(result + 4160) = 0;
  *(unsigned char *)(result + 4232) = 0;
  *(void *)(result + 4360) = 0;
  *(_OWORD *)(result + 4328) = 0u;
  *(_OWORD *)(result + 4344) = 0u;
  *(_OWORD *)(result + 4296) = 0u;
  *(_OWORD *)(result + 4312) = 0u;
  *(_OWORD *)(result + 4264) = 0u;
  *(_OWORD *)(result + 4280) = 0u;
  *(_OWORD *)(result + 4248) = 0u;
  strcpy((char *)(result + 4368), "tlfd");
  *(unsigned char *)(result + 4376) = 0;
  *(unsigned char *)(result + 4448) = 0;
  *(void *)(result + 4576) = 0;
  *(_OWORD *)(result + 4560) = 0u;
  *(_OWORD *)(result + 4544) = 0u;
  *(_OWORD *)(result + 4528) = 0u;
  *(_OWORD *)(result + 4512) = 0u;
  *(_OWORD *)(result + 4496) = 0u;
  *(_OWORD *)(result + 4480) = 0u;
  *(_OWORD *)(result + 4464) = 0u;
  strcpy((char *)(result + 4584), "tlfd");
  *(unsigned char *)(result + 4592) = 0;
  *(unsigned char *)(result + 4664) = 0;
  *(void *)(result + 4792) = 0;
  *(_OWORD *)(result + 4760) = 0u;
  *(_OWORD *)(result + 4776) = 0u;
  *(_OWORD *)(result + 4728) = 0u;
  *(_OWORD *)(result + 4744) = 0u;
  *(_OWORD *)(result + 4696) = 0u;
  *(_OWORD *)(result + 4712) = 0u;
  *(_OWORD *)(result + 4680) = 0u;
  strcpy((char *)(result + 4800), "tlfd");
  *(unsigned char *)(result + 4808) = 0;
  *(unsigned char *)(result + 4880) = 0;
  *(void *)(result + 5008) = 0;
  *(_OWORD *)(result + 4992) = 0u;
  *(_OWORD *)(result + 4976) = 0u;
  *(_OWORD *)(result + 4960) = 0u;
  *(_OWORD *)(result + 4944) = 0u;
  *(_OWORD *)(result + 4928) = 0u;
  *(_OWORD *)(result + 4912) = 0u;
  *(_OWORD *)(result + 4896) = 0u;
  strcpy((char *)(result + 5016), "tlfd");
  *(unsigned char *)(result + 5024) = 0;
  *(unsigned char *)(result + 5096) = 0;
  *(void *)(result + 5224) = 0;
  *(_OWORD *)(result + 5192) = 0u;
  *(_OWORD *)(result + 5208) = 0u;
  *(_OWORD *)(result + 5160) = 0u;
  *(_OWORD *)(result + 5176) = 0u;
  *(_OWORD *)(result + 5128) = 0u;
  *(_OWORD *)(result + 5144) = 0u;
  *(_OWORD *)(result + 5112) = 0u;
  strcpy((char *)(result + 5232), "tlfd");
  *(unsigned char *)(result + 5240) = 0;
  *(unsigned char *)(result + 5312) = 0;
  *(void *)(result + 5440) = 0;
  *(_OWORD *)(result + 5424) = 0u;
  *(_OWORD *)(result + 5408) = 0u;
  *(_OWORD *)(result + 5392) = 0u;
  *(_OWORD *)(result + 5376) = 0u;
  *(_OWORD *)(result + 5360) = 0u;
  *(_OWORD *)(result + 5344) = 0u;
  *(_OWORD *)(result + 5328) = 0u;
  strcpy((char *)(result + 5448), "tlfd");
  *(unsigned char *)(result + 5456) = 0;
  *(unsigned char *)(result + 5528) = 0;
  *(void *)(result + 5656) = 0;
  *(_OWORD *)(result + 5624) = 0u;
  *(_OWORD *)(result + 5640) = 0u;
  *(_OWORD *)(result + 5592) = 0u;
  *(_OWORD *)(result + 5608) = 0u;
  *(_OWORD *)(result + 5560) = 0u;
  *(_OWORD *)(result + 5576) = 0u;
  *(_OWORD *)(result + 5544) = 0u;
  strcpy((char *)(result + 5664), "tlfd");
  *(unsigned char *)(result + 5672) = 0;
  *(unsigned char *)(result + 5744) = 0;
  *(void *)(result + 5872) = 0;
  *(_OWORD *)(result + 5856) = 0u;
  *(_OWORD *)(result + 5840) = 0u;
  *(_OWORD *)(result + 5824) = 0u;
  *(_OWORD *)(result + 5808) = 0u;
  *(_OWORD *)(result + 5792) = 0u;
  *(_OWORD *)(result + 5776) = 0u;
  *(_OWORD *)(result + 5760) = 0u;
  strcpy((char *)(result + 5880), "tlfd");
  *(unsigned char *)(result + 5888) = 0;
  *(unsigned char *)(result + 5960) = 0;
  *(void *)(result + 6040) = 0;
  *(_OWORD *)(result + 6008) = 0u;
  *(_OWORD *)(result + 6024) = 0u;
  *(_OWORD *)(result + 5976) = 0u;
  *(_OWORD *)(result + 5992) = 0u;
  return result;
}

uint64_t sub_194F34(uint64_t a1, uint64_t a2)
{
  sub_195E70((uint64_t *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v4 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)int v4 = v5;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  char v6 = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = v6;
  BOOL v7 = (void **)(a1 + 56);
  long long v8 = (long long *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*(unsigned char *)(a1 + 128))
    {
      if (*(char *)(a1 + 79) < 0) {
        operator delete(*v7);
      }
      long long v9 = *v8;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)BOOL v7 = v9;
      *(unsigned char *)(a2 + 79) = 0;
      *(unsigned char *)(a2 + 56) = 0;
      BOOL v10 = (void **)(a1 + 80);
      if (*(char *)(a1 + 103) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)BOOL v10 = v11;
      *(unsigned char *)(a2 + 103) = 0;
      *(unsigned char *)(a2 + 80) = 0;
      uint64_t v12 = (void **)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(_OWORD *)uint64_t v12 = v13;
      *(unsigned char *)(a2 + 127) = 0;
      *(unsigned char *)(a2 + 104) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 128))
  {
    sub_195EE8(a1 + 56);
  }
  else
  {
    long long v14 = *v8;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)BOOL v7 = v14;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)long long v8 = 0;
    long long v15 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v15;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 80) = 0;
    long long v16 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v16;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 104) = 0;
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  __int16 v17 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)__int16 v17 = v18;
  *(unsigned char *)(a2 + 167) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  sub_195EAC((uint64_t *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  sub_195EAC((uint64_t *)(a1 + 192));
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  return a1;
}

void sub_195138(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_195E24((uint64_t *)v2);
    char v3 = **a1;
    operator delete(v3);
  }
}

void sub_19518C(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_195DCC((uint64_t *)v2);
    char v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1951E0(void **a1)
{
  int v2 = (char *)a1 + 6095;
  int v4 = a1 + 834;
  sub_195138(&v4);
  int v4 = a1 + 831;
  sub_195138(&v4);
  if (v2[552] < 0) {
    operator delete(a1[828]);
  }
  sub_6C788((uint64_t)(a1 + 817));
  if (v2[432] < 0) {
    operator delete(a1[813]);
  }
  int v4 = a1 + 810;
  sub_19518C(&v4);
  int v4 = a1 + 807;
  sub_195138(&v4);
  int v4 = a1 + 804;
  sub_195138(&v4);
  if (v2[336] < 0) {
    operator delete(a1[801]);
  }
  sub_6C788((uint64_t)(a1 + 790));
  if (v2[216] < 0) {
    operator delete(a1[786]);
  }
  int v4 = a1 + 783;
  sub_19518C(&v4);
  int v4 = a1 + 780;
  sub_195138(&v4);
  int v4 = a1 + 777;
  sub_195138(&v4);
  if (v2[120] < 0) {
    operator delete(a1[774]);
  }
  sub_6C788((uint64_t)(a1 + 763));
  if (*v2 < 0) {
    operator delete(a1[759]);
  }
  int v4 = a1 + 756;
  sub_19518C(&v4);

  return sub_195364((uint64_t)a1);
}

uint64_t sub_195364(uint64_t a1)
{
  int v2 = (char *)(a1 + 4151);
  int v4 = (void **)(a1 + 6024);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 6000);
  sub_195138(&v4);
  if (v2[1848] < 0) {
    operator delete(*(void **)(a1 + 5976));
  }
  sub_6C788(a1 + 5888);
  if (v2[1728] < 0) {
    operator delete(*(void **)(a1 + 5856));
  }
  int v4 = (void **)(a1 + 5832);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 5808);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 5784);
  sub_195138(&v4);
  if (v2[1632] < 0) {
    operator delete(*(void **)(a1 + 5760));
  }
  sub_6C788(a1 + 5672);
  if (v2[1512] < 0) {
    operator delete(*(void **)(a1 + 5640));
  }
  int v4 = (void **)(a1 + 5616);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 5592);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 5568);
  sub_195138(&v4);
  if (v2[1416] < 0) {
    operator delete(*(void **)(a1 + 5544));
  }
  sub_6C788(a1 + 5456);
  if (v2[1296] < 0) {
    operator delete(*(void **)(a1 + 5424));
  }
  int v4 = (void **)(a1 + 5400);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 5376);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 5352);
  sub_195138(&v4);
  if (v2[1200] < 0) {
    operator delete(*(void **)(a1 + 5328));
  }
  sub_6C788(a1 + 5240);
  if (v2[1080] < 0) {
    operator delete(*(void **)(a1 + 5208));
  }
  int v4 = (void **)(a1 + 5184);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 5160);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 5136);
  sub_195138(&v4);
  if (v2[984] < 0) {
    operator delete(*(void **)(a1 + 5112));
  }
  sub_6C788(a1 + 5024);
  if (v2[864] < 0) {
    operator delete(*(void **)(a1 + 4992));
  }
  int v4 = (void **)(a1 + 4968);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 4944);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 4920);
  sub_195138(&v4);
  if (v2[768] < 0) {
    operator delete(*(void **)(a1 + 4896));
  }
  sub_6C788(a1 + 4808);
  if (v2[648] < 0) {
    operator delete(*(void **)(a1 + 4776));
  }
  int v4 = (void **)(a1 + 4752);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 4728);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 4704);
  sub_195138(&v4);
  if (v2[552] < 0) {
    operator delete(*(void **)(a1 + 4680));
  }
  sub_6C788(a1 + 4592);
  if (v2[432] < 0) {
    operator delete(*(void **)(a1 + 4560));
  }
  int v4 = (void **)(a1 + 4536);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 4512);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 4488);
  sub_195138(&v4);
  if (v2[336] < 0) {
    operator delete(*(void **)(a1 + 4464));
  }
  sub_6C788(a1 + 4376);
  if (v2[216] < 0) {
    operator delete(*(void **)(a1 + 4344));
  }
  int v4 = (void **)(a1 + 4320);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 4296);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 4272);
  sub_195138(&v4);
  if (v2[120] < 0) {
    operator delete(*(void **)(a1 + 4248));
  }
  sub_6C788(a1 + 4160);
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4128));
  }
  int v4 = (void **)(a1 + 4104);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 4080);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 4056);
  sub_195138(&v4);
  if (*(char *)(a1 + 4055) < 0) {
    operator delete(*(void **)(a1 + 4032));
  }
  sub_6C788(a1 + 3944);
  if (*(char *)(a1 + 3935) < 0) {
    operator delete(*(void **)(a1 + 3912));
  }
  int v4 = (void **)(a1 + 3888);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 3864);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 3840);
  sub_195138(&v4);
  if (*(char *)(a1 + 3839) < 0) {
    operator delete(*(void **)(a1 + 3816));
  }
  sub_6C788(a1 + 3728);
  if (*(char *)(a1 + 3719) < 0) {
    operator delete(*(void **)(a1 + 3696));
  }
  int v4 = (void **)(a1 + 3672);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 3648);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 3624);
  sub_195138(&v4);
  if (*(char *)(a1 + 3623) < 0) {
    operator delete(*(void **)(a1 + 3600));
  }
  sub_6C788(a1 + 3512);
  if (*(char *)(a1 + 3503) < 0) {
    operator delete(*(void **)(a1 + 3480));
  }
  int v4 = (void **)(a1 + 3456);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 3432);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 3408);
  sub_195138(&v4);
  if (*(char *)(a1 + 3407) < 0) {
    operator delete(*(void **)(a1 + 3384));
  }
  sub_6C788(a1 + 3296);
  if (*(char *)(a1 + 3287) < 0) {
    operator delete(*(void **)(a1 + 3264));
  }
  int v4 = (void **)(a1 + 3240);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 3216);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 3192);
  sub_195138(&v4);
  if (*(char *)(a1 + 3191) < 0) {
    operator delete(*(void **)(a1 + 3168));
  }
  sub_6C788(a1 + 3080);
  if (*(char *)(a1 + 3071) < 0) {
    operator delete(*(void **)(a1 + 3048));
  }
  int v4 = (void **)(a1 + 3024);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 3000);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 2976);
  sub_195138(&v4);
  if (*(char *)(a1 + 2975) < 0) {
    operator delete(*(void **)(a1 + 2952));
  }
  sub_6C788(a1 + 2864);
  if (*(char *)(a1 + 2855) < 0) {
    operator delete(*(void **)(a1 + 2832));
  }
  int v4 = (void **)(a1 + 2808);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 2784);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 2760);
  sub_195138(&v4);
  if (*(char *)(a1 + 2759) < 0) {
    operator delete(*(void **)(a1 + 2736));
  }
  sub_6C788(a1 + 2648);
  if (*(char *)(a1 + 2639) < 0) {
    operator delete(*(void **)(a1 + 2616));
  }
  int v4 = (void **)(a1 + 2592);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 2568);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 2544);
  sub_195138(&v4);
  if (*(char *)(a1 + 2543) < 0) {
    operator delete(*(void **)(a1 + 2520));
  }
  sub_6C788(a1 + 2432);
  if (*(char *)(a1 + 2423) < 0) {
    operator delete(*(void **)(a1 + 2400));
  }
  int v4 = (void **)(a1 + 2376);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 2352);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 2328);
  sub_195138(&v4);
  if (*(char *)(a1 + 2327) < 0) {
    operator delete(*(void **)(a1 + 2304));
  }
  sub_6C788(a1 + 2216);
  if (*(char *)(a1 + 2207) < 0) {
    operator delete(*(void **)(a1 + 2184));
  }
  int v4 = (void **)(a1 + 2160);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 2136);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 2112);
  sub_195138(&v4);
  if (*(char *)(a1 + 2111) < 0) {
    operator delete(*(void **)(a1 + 2088));
  }
  sub_6C788(a1 + 2000);
  if (*(char *)(a1 + 1991) < 0) {
    operator delete(*(void **)(a1 + 1968));
  }
  int v4 = (void **)(a1 + 1944);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 1920);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 1896);
  sub_195138(&v4);
  if (*(char *)(a1 + 1895) < 0) {
    operator delete(*(void **)(a1 + 1872));
  }
  sub_6C788(a1 + 1784);
  if (*(char *)(a1 + 1775) < 0) {
    operator delete(*(void **)(a1 + 1752));
  }
  int v4 = (void **)(a1 + 1728);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 1704);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 1680);
  sub_195138(&v4);
  if (*(char *)(a1 + 1679) < 0) {
    operator delete(*(void **)(a1 + 1656));
  }
  sub_6C788(a1 + 1568);
  if (*(char *)(a1 + 1559) < 0) {
    operator delete(*(void **)(a1 + 1536));
  }
  int v4 = (void **)(a1 + 1512);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 1488);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 1464);
  sub_195138(&v4);
  if (*(char *)(a1 + 1463) < 0) {
    operator delete(*(void **)(a1 + 1440));
  }
  sub_6C788(a1 + 1352);
  if (*(char *)(a1 + 1343) < 0) {
    operator delete(*(void **)(a1 + 1320));
  }
  int v4 = (void **)(a1 + 1296);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 1272);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 1248);
  sub_195138(&v4);
  if (*(char *)(a1 + 1247) < 0) {
    operator delete(*(void **)(a1 + 1224));
  }
  sub_6C788(a1 + 1136);
  if (*(char *)(a1 + 1127) < 0) {
    operator delete(*(void **)(a1 + 1104));
  }
  int v4 = (void **)(a1 + 1080);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 1056);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 1032);
  sub_195138(&v4);
  if (*(char *)(a1 + 1031) < 0) {
    operator delete(*(void **)(a1 + 1008));
  }
  sub_6C788(a1 + 920);
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*(void **)(a1 + 888));
  }
  int v4 = (void **)(a1 + 864);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 840);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 816);
  sub_195138(&v4);
  if (*(char *)(a1 + 815) < 0) {
    operator delete(*(void **)(a1 + 792));
  }
  sub_6C788(a1 + 704);
  if (*(char *)(a1 + 695) < 0) {
    operator delete(*(void **)(a1 + 672));
  }
  int v4 = (void **)(a1 + 648);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 624);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 600);
  sub_195138(&v4);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*(void **)(a1 + 576));
  }
  sub_6C788(a1 + 488);
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  int v4 = (void **)(a1 + 432);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 408);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 384);
  sub_195138(&v4);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  sub_6C788(a1 + 272);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  int v4 = (void **)(a1 + 216);
  sub_19518C(&v4);
  int v4 = (void **)(a1 + 192);
  sub_195138(&v4);
  int v4 = (void **)(a1 + 168);
  sub_195138(&v4);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  sub_6C788(a1 + 56);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  int v4 = (void **)a1;
  sub_19518C(&v4);
  return a1;
}

void sub_195DCC(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      char v6 = *(void **)(v4 - 24);
      v4 -= 24;
      long long v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_195E24(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      sub_4636C(v4);
    }
  }
  a1[1] = v2;
}

void sub_195E70(uint64_t *a1)
{
  if (*a1)
  {
    sub_195DCC(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_195EAC(uint64_t *a1)
{
  if (*a1)
  {
    sub_195E24(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_195EE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
}

uint64_t sub_195F44(void **a1)
{
  uint64_t v2 = (char *)a1 + 6095;
  uint64_t v4 = a1 + 807;
  sub_195138(&v4);
  uint64_t v4 = a1 + 804;
  sub_195138(&v4);
  if (v2[336] < 0) {
    operator delete(a1[801]);
  }
  sub_6C788((uint64_t)(a1 + 790));
  if (v2[216] < 0) {
    operator delete(a1[786]);
  }
  uint64_t v4 = a1 + 783;
  sub_19518C(&v4);
  uint64_t v4 = a1 + 780;
  sub_195138(&v4);
  uint64_t v4 = a1 + 777;
  sub_195138(&v4);
  if (v2[120] < 0) {
    operator delete(a1[774]);
  }
  sub_6C788((uint64_t)(a1 + 763));
  if (*v2 < 0) {
    operator delete(a1[759]);
  }
  uint64_t v4 = a1 + 756;
  sub_19518C(&v4);

  return sub_195364((uint64_t)a1);
}

void sub_196060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 6536);
  long long v5 = (unsigned char *)(a1 + 6100);
  uint64_t v6 = sub_194A34(a1);
  *(_OWORD *)(v6 + 6080) = 0u;
  *(_OWORD *)(v6 + 6064) = 0u;
  *(_OWORD *)(v6 + 6048) = 0u;
  *(_DWORD *)(v6 + 6096) = 1684434036;
  *long long v5 = 0;
  int v5[4] = 0;
  v5[76] = 0;
  *(_OWORD *)(v6 + 6192) = 0u;
  *(_OWORD *)(v6 + 6208) = 0u;
  *(_OWORD *)(v6 + 6224) = 0u;
  *(_OWORD *)(v6 + 6240) = 0u;
  *(_OWORD *)(v6 + 6256) = 0u;
  *(_OWORD *)(v6 + 6272) = 0u;
  *(_OWORD *)(v6 + 6288) = 0u;
  *(void *)(v6 + 6304) = 0;
  *(_DWORD *)(v6 + 6312) = 1684434036;
  v5[216] = 0;
  v5[220] = 0;
  v5[292] = 0;
  *(void *)(v6 + 6520) = 0;
  *(_OWORD *)(v6 + 6488) = 0u;
  *(_OWORD *)(v6 + 6504) = 0u;
  *(_OWORD *)(v6 + 6456) = 0u;
  *(_OWORD *)(v6 + 6472) = 0u;
  *(_OWORD *)(v6 + 6424) = 0u;
  *(_OWORD *)(v6 + 6440) = 0u;
  *(_OWORD *)(v6 + 6408) = 0u;
  *(_DWORD *)(v6 + 6528) = 1684434036;
  v5[432] = 0;
  unsigned char *v4 = 0;
  v4[72] = 0;
  *(_OWORD *)(v6 + 6624) = 0u;
  *(_OWORD *)(v6 + 6640) = 0u;
  *(_OWORD *)(v6 + 6656) = 0u;
  *(_OWORD *)(v6 + 6672) = 0u;
  *(void *)(v6 + 6688) = 0;
  sub_3B7CA4(v7, 0, "headset_general", a2, 0x77646566u, 0, 0);
  sub_194F34(a1, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 0, "headset_general", a2, 0x61613264u, 1, 1);
  sub_194F34(a1 + 216, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 1, "headset_latenight_general", a2, 0x61613264u, 1, 1);
  sub_194F34(a1 + 432, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 3, "headset_latenight_movie", a2, 0x61613264u, 1, 1);
  sub_194F34(a1 + 648, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 0, "headset_general", a2, 0x48623135u, 1, 0);
  sub_194F34(a1 + 864, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 1, "headset_latenight_general", a2, 0x48623135u, 1, 0);
  sub_194F34(a1 + 1080, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 2, "headset_movie", a2, 0x48623135u, 1, 0);
  sub_194F34(a1 + 1296, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 3, "headset_latenight_movie", a2, 0x48623135u, 1, 0);
  sub_194F34(a1 + 1512, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 0, "headset_general", a2, 0x48613336u, 1, 0);
  sub_194F34(a1 + 1728, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 1, "headset_latenight_general", a2, 0x48613336u, 1, 0);
  sub_194F34(a1 + 1944, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 2, "headset_movie", a2, 0x48613336u, 1, 0);
  sub_194F34(a1 + 2160, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 3, "headset_latenight_movie", a2, 0x48613336u, 1, 0);
  sub_194F34(a1 + 2376, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 0, "headset_general", a2, 0x62363066u, 1, 0);
  sub_194F34(a1 + 2592, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 1, "headset_latenight_general", a2, 0x62363066u, 1, 0);
  sub_194F34(a1 + 2808, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 2, "headset_movie", a2, 0x62363066u, 1, 0);
  sub_194F34(a1 + 3024, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 3, "headset_latenight_movie", a2, 0x62363066u, 1, 0);
  sub_194F34(a1 + 3240, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 0, "headset_general", a2, 0x62363067u, 1, 0);
  sub_194F34(a1 + 3456, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 1, "headset_latenight_general", a2, 0x62363067u, 1, 0);
  sub_194F34(a1 + 3672, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 2, "headset_movie", a2, 0x62363067u, 1, 0);
  sub_194F34(a1 + 3888, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 3, "headset_latenight_movie", a2, 0x62363067u, 1, 0);
  sub_194F34(a1 + 4104, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 0, "headset_general", a2, 0, 1, 0);
  sub_194F34(a1 + 4320, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 1, "headset_latenight_general", a2, 0, 1, 0);
  sub_194F34(a1 + 4536, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 2, "headset_movie", a2, 0, 1, 0);
  sub_194F34(a1 + 4752, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 3, "headset_latenight_movie", a2, 0, 1, 0);
  sub_194F34(a1 + 4968, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 0, "headset_general", a2, 0x68783930u, 0, 0);
  sub_194F34(a1 + 5184, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 1, "headset_latenight_general", a2, 0x68783930u, 0, 0);
  sub_194F34(a1 + 5400, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 2, "headset_movie", a2, 0x68783930u, 0, 0);
  sub_194F34(a1 + 5616, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B7CA4(v7, 3, "headset_latenight_movie", a2, 0x68783930u, 0, 0);
  sub_194F34(a1 + 5832, (uint64_t)v7);
  *(void *)AudioObjectPropertyAddress buf = v14;
  sub_195138((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = v13;
  sub_195138((void ***)buf);
  if (v12 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v10);
  if (v9 < 0) {
    operator delete(v8);
  }
  *(void *)AudioObjectPropertyAddress buf = v7;
  sub_19518C((void ***)buf);
  sub_3B3B48((uint64_t)v7);
}

void sub_197410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_297864((uint64_t)&a9);
  sub_1951E0(v9);
  _Unwind_Resume(a1);
}

void sub_19745C(uint64_t a1, std::string::size_type a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 6536);
  long long v5 = (unsigned char *)(a1 + 6100);
  uint64_t v6 = sub_194A34(a1);
  *(_OWORD *)(v6 + 6080) = 0u;
  *(_OWORD *)(v6 + 6064) = 0u;
  *(_OWORD *)(v6 + 6048) = 0u;
  *(_DWORD *)(v6 + 6096) = 1684434036;
  *long long v5 = 0;
  int v5[4] = 0;
  v5[76] = 0;
  *(_OWORD *)(v6 + 6192) = 0u;
  *(_OWORD *)(v6 + 6208) = 0u;
  *(_OWORD *)(v6 + 6224) = 0u;
  *(_OWORD *)(v6 + 6240) = 0u;
  *(_OWORD *)(v6 + 6256) = 0u;
  *(_OWORD *)(v6 + 6272) = 0u;
  *(_OWORD *)(v6 + 6288) = 0u;
  *(void *)(v6 + 6304) = 0;
  *(_DWORD *)(v6 + 6312) = 1684434036;
  v5[216] = 0;
  v5[220] = 0;
  v5[292] = 0;
  *(void *)(v6 + 6520) = 0;
  *(_OWORD *)(v6 + 6488) = 0u;
  *(_OWORD *)(v6 + 6504) = 0u;
  *(_OWORD *)(v6 + 6456) = 0u;
  *(_OWORD *)(v6 + 6472) = 0u;
  *(_OWORD *)(v6 + 6424) = 0u;
  *(_OWORD *)(v6 + 6440) = 0u;
  *(_OWORD *)(v6 + 6408) = 0u;
  *(_DWORD *)(v6 + 6528) = 1684434036;
  v5[432] = 0;
  unsigned char *v4 = 0;
  v4[72] = 0;
  *(_OWORD *)(v6 + 6624) = 0u;
  *(_OWORD *)(v6 + 6640) = 0u;
  *(_OWORD *)(v6 + 6656) = 0u;
  *(_OWORD *)(v6 + 6672) = 0u;
  *(void *)(v6 + 6688) = 0;
  uint64_t v23 = 0;
  *(_OWORD *)int v21 = 0u;
  *(_OWORD *)char v22 = 0u;
  uint64_t v45 = 2;
  long long v44 = xmmword_5968C4;
  sub_6D1AC((uint64_t)v21, (int *)&v44, 3);
  sub_19780C(a1, "headset_general", "headset_latenight_general", "headset_movie", "headset_latenight_general", "headset_latenight_movie", a2, v21, 0, 1, v7, v8, v9, v10, v11, v12, (uint64_t)v13, v14, v15,
    v16,
    v17,
    v18,
    v19,
    v21[0],
    v21[1],
    (uint64_t)v22[0],
    (uint64_t)v22[1],
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29[0],
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39);
  sub_6C954((uint64_t)v21);
  sub_3B5460(v21, 0x200000002uLL);
  sub_194F34(a1 + 6048, (uint64_t)v21);
  *(void *)&long long v44 = &v43;
  sub_195138((void ***)&v44);
  *(void *)&long long v44 = &v42;
  sub_195138((void ***)&v44);
  if (v41 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v29);
  if (SHIBYTE(v24) < 0) {
    operator delete(v22[1]);
  }
  *(void *)&long long v44 = v21;
  sub_19518C((void ***)&v44);
  int v20 = -1046478848;
  sub_3B77B8((uint64_t)v21, (float *)&v20);
}

void sub_1977B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  sub_6C954((uint64_t)&a11);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1951E0(v24);
  _Unwind_Resume(a1);
}

void sub_19780C(uint64_t a1, char *__s, char *a3, char *a4, char *a5, char *a6, std::string::size_type a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_3B8D10((uint64_t)v58, 0, __s, __s, a7, 0x77646566u, 0, 0, __s, a8);
  sub_194F34(a1, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_21C8C(&v57, __s);
  sub_6E644((uint64_t)v56, (uint64_t)a8);
  sub_198920((uint64_t)v58, 0, &v57, v56, a7, 1);
  sub_194F34(a1 + 216, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_6C954((uint64_t)v56);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  sub_21C8C(&v55, a3);
  sub_6E644((uint64_t)v54, (uint64_t)a8);
  sub_198920((uint64_t)v58, 1, &v55, v54, a7, 1);
  sub_194F34(a1 + 432, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_6C954((uint64_t)v54);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  sub_21C8C(&v53, a5);
  sub_6E644((uint64_t)v52, (uint64_t)a8);
  sub_198920((uint64_t)v58, 3, &v53, v52, a7, 1);
  sub_194F34(a1 + 648, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_6C954((uint64_t)v52);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  sub_3B8D10((uint64_t)v58, 0, __s, __s, a7, 0x48623135u, 1, 0, __s, a8);
  sub_194F34(a1 + 864, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 1, a3, a3, a7, 0x48623135u, 1, 0, a3, a8);
  sub_194F34(a1 + 1080, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 2, a4, a4, a7, 0x48623135u, 1, 0, a4, a8);
  sub_194F34(a1 + 1296, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 3, a5, a6, a7, 0x48623135u, 1, 0, a6, a8);
  sub_194F34(a1 + 1512, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 0, __s, __s, a7, 0x48613336u, 1, 0, __s, a8);
  sub_194F34(a1 + 1728, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 1, a3, a3, a7, 0x48613336u, 1, 0, a3, a8);
  sub_194F34(a1 + 1944, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 2, a4, a4, a7, 0x48613336u, 1, 0, a4, a8);
  sub_194F34(a1 + 2160, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 3, a5, a6, a7, 0x48613336u, 1, 0, a6, a8);
  sub_194F34(a1 + 2376, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 0, __s, __s, a7, 0x62363066u, 1, 0, __s, a8);
  sub_194F34(a1 + 2592, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 1, a3, a3, a7, 0x62363066u, 1, 0, a3, a8);
  sub_194F34(a1 + 2808, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 2, a4, a4, a7, 0x62363066u, 1, 0, a4, a8);
  sub_194F34(a1 + 3024, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 3, a5, a6, a7, 0x62363066u, 1, 0, a6, a8);
  sub_194F34(a1 + 3240, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 0, __s, __s, a7, 0x62363067u, 1, 0, __s, a8);
  sub_194F34(a1 + 3456, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 1, a3, a3, a7, 0x62363067u, 1, 0, a3, a8);
  sub_194F34(a1 + 3672, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 2, a4, a4, a7, 0x62363067u, 1, 0, a4, a8);
  sub_194F34(a1 + 3888, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 3, a5, a6, a7, 0x62363067u, 1, 0, a6, a8);
  sub_194F34(a1 + 4104, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 0, __s, __s, a7, 0, 1, 0, __s, a8);
  sub_194F34(a1 + 4320, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 1, a3, a3, a7, 0, 1, 0, a3, a8);
  sub_194F34(a1 + 4536, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 2, a4, a4, a7, 0, 1, 0, a4, a8);
  sub_194F34(a1 + 4752, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 3, a5, a6, a7, 0, 1, 0, a6, a8);
  sub_194F34(a1 + 4968, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 0, __s, __s, a7, 0x68783930u, 0, 0, __s, a8);
  sub_194F34(a1 + 5184, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 1, a3, a3, a7, 0x68783930u, 0, 0, a3, a8);
  sub_194F34(a1 + 5400, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 2, a4, a4, a7, 0x68783930u, 0, 0, a4, a8);
  sub_194F34(a1 + 5616, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
  sub_3B8D10((uint64_t)v58, 3, a5, a6, a7, 0x68783930u, 0, 0, a6, a8);
  sub_194F34(a1 + 5832, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_195138(v66);
  v66[0] = (void **)v64;
  sub_195138(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_6C788((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_19518C(v66);
}

void sub_198920(uint64_t a1, int a2, std::string *a3, void *a4, std::string::size_type a5, BOOL a6)
{
  if (_os_feature_enabled_impl()
    && (char *)sub_198AD0((const char **)off_625CA0, (const char **)off_625CD0, (const void **)&a3->__r_.__value_.__l.__data_)- (char *)off_625CA0 != 48)
  {
    a6 = 1;
    sub_198B60((uint64_t)v19, (uint64_t)a4, 1);
    sub_198D88((uint64_t)a4, v19);
    sub_6C954((uint64_t)v19);
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    int v13 = (char)size;
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    if (size == 11)
    {
      if (v13 >= 0) {
        uint64_t v14 = (uint64_t *)a3;
      }
      else {
        uint64_t v14 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
      }
      uint64_t v15 = *v14;
      uint64_t v16 = *(uint64_t *)((char *)v14 + 3);
      a6 = v15 != 0x74756F5F69726973 || v16 != 0x74757074756F5F69;
    }
    if ((char *)sub_198AD0((const char **)off_625CD0, (const char **)&unk_625CE8, (const void **)&a3->__r_.__value_.__l.__data_)- (char *)off_625CD0 != 24)
    {
      sub_198B60((uint64_t)v19, (uint64_t)a4, 2);
      sub_198D88((uint64_t)a4, v19);
      sub_6C954((uint64_t)v19);
    }
    std::string::append(a3, "_av", 3uLL);
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
    a3 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (a6) {
    __s = (char *)a3;
  }
  else {
    __s = 0;
  }
  sub_3B8D10(a1, a2, (char *)a3, (char *)a3, a5, 0x61613264u, 1, 1, __s, a4);
}

const char **sub_198AD0(const char **a1, const char **a2, const void **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v6 = (size_t)a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    while (v6 != strlen(*v3) || memcmp(v7, *v3, v6))
    {
      if (++v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void sub_198B60(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = *(void *)(sub_6E644(a1, a2) + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = a3;
      if (v6 <= a3) {
        unint64_t v3 = a3 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & a3;
    }
    char v8 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == a3)
          {
            if (*((_DWORD *)v9 + 4) == a3) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  uint64_t v9 = operator new(0x18uLL);
  void *v9 = 0;
  v9[1] = a3;
  *((_DWORD *)v9 + 4) = a3;
  *((unsigned char *)v9 + 20) = 0;
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_6DEC4(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a3) {
        unint64_t v3 = a3 % v6;
      }
      else {
        unint64_t v3 = a3;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & a3;
    }
  }
  uint64_t v17 = *(void *)a1;
  char v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    void *v9 = *v18;
LABEL_38:
    *char v18 = v9;
    goto LABEL_39;
  }
  void *v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v9)
  {
    unint64_t v19 = *(void *)(*v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v19 >= v6) {
        v19 %= v6;
      }
    }
    else
    {
      v19 &= v6 - 1;
    }
    char v18 = (void *)(*(void *)a1 + 8 * v19);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
LABEL_40:
  *((unsigned char *)v9 + 20) = 1;
}

void sub_198D64(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_6C954(v1);
  _Unwind_Resume(a1);
}

void sub_198D88(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        char v5 = (void *)*v4;
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  float v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    *float v11 = 0;
    v11[1] = 0;
  }
}

#error "198FA4: call analysis failed (funcsize=177)"

void sub_199164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_6C954((uint64_t)&a14);
  sub_6C954((uint64_t)&a9);
  sub_195F44(v14);
  _Unwind_Resume(a1);
}

void sub_19919C(uint64_t a1, char **a2, char **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_195E70((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_60548();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_21924((void *)a1, v11);
    uint64_t v12 = sub_19982C(v8, (uint64_t)a2, (uint64_t)a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 8) - v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(*(void *)(a1 + 8) - v9) >> 3];
    sub_1996B0(a2, v13, v9);
    uint64_t v12 = sub_19982C(v8, (uint64_t)v13, (uint64_t)a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = sub_1996B0(a2, a3, v9);
  unint64_t v15 = *(char ***)(a1 + 8);
  if (v15 != v14)
  {
    unint64_t v16 = *(char ***)(a1 + 8);
    do
    {
      char v18 = *(v16 - 3);
      v16 -= 3;
      uint64_t v17 = v18;
      if (v18)
      {
        *(v15 - 2) = v17;
        operator delete(v17);
      }
      unint64_t v15 = v16;
    }
    while (v16 != v14);
  }
  *(void *)(a1 + 8) = v14;
}

void sub_199304(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19930C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_199314(std::string *__dst, std::string *__str)
{
  if (__dst[3].__r_.__value_.__s.__data_[0] == __str[3].__r_.__value_.__s.__data_[0])
  {
    if (__dst[3].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, __str);
      std::string::operator=(__dst + 1, __str + 1);
      std::string::operator=(__dst + 2, __str + 2);
    }
  }
  else if (__dst[3].__r_.__value_.__s.__data_[0])
  {
    sub_195EE8((uint64_t)__dst);
  }
  else
  {
    sub_1995C8((char *)__dst, (long long *)__str);
    __dst[3].__r_.__value_.__s.__data_[0] = 1;
  }
}

void sub_1993C0(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 2;
  uint64_t v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_195EAC(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_60548();
    }
    unint64_t v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_21924(a1, v11);
    uint64_t v12 = a1[1];
    uint64_t v13 = (uint64_t)v8;
    uint64_t v14 = (uint64_t)a2;
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v9) >> 3) < a4)
  {
    unint64_t v15 = &a2[(a1[1] - v9) >> 3];
    sub_199510(a2, v15, v9);
    uint64_t v12 = a1[1];
    uint64_t v13 = (uint64_t)v8;
    uint64_t v14 = (uint64_t)v15;
LABEL_11:
    a1[1] = sub_199588(v13, v14, (uint64_t)a3, v12);
    return;
  }
  uint64_t v16 = sub_199510(a2, a3, v9);
  for (uint64_t i = a1[1]; i != v16; i -= 24)
  {
    char v18 = *(std::__shared_weak_count **)(i - 16);
    if (v18) {
      sub_4636C(v18);
    }
  }
  a1[1] = v16;
}

uint64_t sub_199510(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    char v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = v6;
      if (v8) {
        sub_4636C(v8);
      }
      *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
      a3 += 24;
      v5 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_199588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 24)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)uint64_t result = *(void *)a2;
    *(void *)(result + 8) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    result += 24;
  }
  return result;
}

char *sub_1995C8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_21E8C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  uint64_t v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_21E8C(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_19967C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char **sub_1996B0(char **a1, char **a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    long long v4 = a2;
    long long v5 = a1;
    uint64_t v6 = (char **)(a3 + 8);
    while (v5 == v6 - 1)
    {
LABEL_26:
      v5 += 3;
      v3 += 24;
      v6 += 3;
      if (v5 == v4) {
        return v6 - 1;
      }
    }
    long long v7 = *v5;
    uint64_t v8 = v5[1];
    int64_t v9 = v8 - *v5;
    unint64_t v10 = v9 >> 3;
    uint64_t v11 = (uint64_t)v6[1];
    uint64_t v12 = *(v6 - 1);
    if (v9 >> 3 > (unint64_t)((v11 - (uint64_t)v12) >> 3))
    {
      if (v12)
      {
        *uint64_t v6 = v12;
        operator delete(v12);
        uint64_t v11 = 0;
        *(v6 - 1) = 0;
        *uint64_t v6 = 0;
        v6[1] = 0;
      }
      if (v9 < 0) {
        sub_60548();
      }
      uint64_t v13 = v11 >> 2;
      if (v11 >> 2 <= v10) {
        uint64_t v13 = v9 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      sub_66F48(v6 - 1, v14);
      uint64_t v12 = *v6;
      if (v8 != v7) {
        memmove(*v6, v7, v9);
      }
      unint64_t v15 = v6;
      goto LABEL_25;
    }
    unint64_t v15 = (char **)(v3 + 8);
    int64_t v16 = *v6 - v12;
    uint64_t v17 = v16 >> 3;
    if (v16 >> 3 >= v10)
    {
      if (v8 == v7)
      {
LABEL_24:
        long long v4 = a2;
LABEL_25:
        *unint64_t v15 = &v12[v9];
        goto LABEL_26;
      }
      unint64_t v19 = *(v6 - 1);
      char v18 = *v5;
    }
    else
    {
      if (*v6 != v12)
      {
        memmove(*(v6 - 1), *v5, v16);
        uint64_t v12 = *v6;
      }
      char v18 = &v7[8 * v17];
      int64_t v9 = v8 - v18;
      if (v8 == v18) {
        goto LABEL_24;
      }
      unint64_t v19 = v12;
    }
    memmove(v19, v18, v9);
    goto LABEL_24;
  }
  return (char **)v3;
}

void *sub_19982C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v4 = a4;
  unint64_t v14 = a4;
  unint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      uint64_t v8 = *(const void **)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      int64_t v9 = v7 - *(void *)v6;
      if (v7 != *(void *)v6)
      {
        sub_66F48(v4, v9 >> 3);
        unint64_t v10 = (char *)v4[1];
        memmove(v10, v8, v9);
        v4[1] = &v10[8 * (v9 >> 3)];
        long long v4 = v15;
      }
      v4 += 3;
      unint64_t v15 = v4;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v13 = 1;
  sub_15BA74((uint64_t)v12);
  return v4;
}

void sub_199900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_15BA74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_199924(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v5 = a5;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  sub_199DAC((uint64_t)a1, a2, a3, a4);
}

void sub_199D64()
{
}

void sub_199DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  operator new();
}

void sub_19A944()
{
}

void sub_19A9DC(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  sub_199DAC((uint64_t)a1, a2, a3, a4);
}

void sub_19AB14()
{
}

void sub_19AB3C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  uint64_t v27 = 0x696D646600000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[1]);
  uint64_t v10 = a3[1];
  uint64_t v27 = 0x696D646600000001;
  *(void *)&long long v28 = 2;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, v10);
  uint64_t v27 = 0x696D646600000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37E544(a1, (int *)&v27, a5, 0);
  sub_E5310((uint64_t)&v27, 1, 1768776806, 1214394677);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[14]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1214394677);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[14]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1768776806, 1214329654);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[10]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1214329654);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[10]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1768776806, 1647718502);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[18]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1647718502);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[18]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1768776806, 1647718503);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[22]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1647718503);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[22]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1768776806, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1768776806, 1752709424);
  sub_37E544(a1, (int *)&v27, a4, 0);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  if ((sub_207DFC() & 1) != 0 || MGGetBoolAnswer() && MGGetBoolAnswer())
  {
    char v11 = 0;
    *(void *)&long long v33 = 0x4864667468646674;
    uint64_t v12 = 1;
    char v13 = (int *)&v33;
    do
    {
      char v14 = v11;
      sub_E5310((uint64_t)&v27, 1, 1768776806, *v13);
      sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[1]);
      if (__p)
      {
        uint64_t v31 = __p;
        operator delete(__p);
      }
      sub_E5310((uint64_t)&v27, 1, 1768776806, *v13);
      sub_37E544(a1, (int *)&v27, (uint64_t)&unk_4E8388, 0);
      if (__p)
      {
        uint64_t v31 = __p;
        operator delete(__p);
      }
      char v13 = (int *)&v33 + v12;
      char v11 = 1;
      uint64_t v12 = 2;
    }
    while ((v14 & 1) == 0);
  }
  __int16 v26 = (uint64_t **)a1;
  sub_19C360(&v26, 1768776806);
  for (uint64_t i = 0; i != 20; i += 4)
    sub_19C360(&v26, *(_DWORD *)&aOvpvivpvcgpvcv[i]);
  for (uint64_t j = 0; j != 12; j += 4)
    sub_19C360(&v26, *(_DWORD *)&aOvpvivpvcgpvcv[j + 20]);
  uint64_t v27 = 0x696D646600000001;
  *(void *)&long long v28 = 1;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[2]);
  uint64_t v17 = a3[2];
  uint64_t v27 = 0x696D646600000001;
  *(void *)&long long v28 = 3;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, v17);
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1214394677);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[15]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1214394677);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[15]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1214329654);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[11]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1214329654);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[11]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1647718502);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[19]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1647718502);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[19]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1647718503);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[23]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1647718503);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[23]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[27]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1768776806, &v33, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[27]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v27 = 0x6D6F767000000001;
  *(void *)&long long v28 = 1;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37E084((uint64_t **)a1, &v27, a2[4]);
  uint64_t v18 = a3[4];
  uint64_t v27 = 0x6D6F767000000001;
  *(void *)&long long v28 = 3;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37E084((uint64_t **)a1, &v27, v18);
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1214394677);
  sub_37E084((uint64_t **)a1, &v27, a2[17]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1214394677);
  sub_37E084((uint64_t **)a1, &v27, a3[17]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1214329654);
  sub_37E084((uint64_t **)a1, &v27, a2[13]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1214329654);
  sub_37E084((uint64_t **)a1, &v27, a3[13]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1647718502);
  sub_37E084((uint64_t **)a1, &v27, a2[21]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1647718502);
  sub_37E084((uint64_t **)a1, &v27, a3[21]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1647718503);
  sub_37E084((uint64_t **)a1, &v27, a2[25]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1647718503);
  sub_37E084((uint64_t **)a1, &v27, a3[25]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 1;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1752709424);
  sub_37E084((uint64_t **)a1, &v27, a2[29]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 3;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1752709424);
  sub_37E084((uint64_t **)a1, &v27, a3[29]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v27 = 0x6D6F767000000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37E084((uint64_t **)a1, &v27, a2[3]);
  uint64_t v19 = a3[3];
  uint64_t v27 = 0x6D6F767000000001;
  *(void *)&long long v28 = 2;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37E084((uint64_t **)a1, &v27, v19);
  sub_E5310((uint64_t)&v27, 1, 1836021360, 1214394677);
  sub_37E084((uint64_t **)a1, &v27, a2[16]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1214394677);
  sub_37E084((uint64_t **)a1, &v27, a3[16]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836021360, 1214329654);
  sub_37E084((uint64_t **)a1, &v27, a2[12]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1214329654);
  sub_37E084((uint64_t **)a1, &v27, a3[12]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836021360, 1647718502);
  sub_37E084((uint64_t **)a1, &v27, a2[20]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1647718502);
  sub_37E084((uint64_t **)a1, &v27, a3[20]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836021360, 1647718503);
  sub_37E084((uint64_t **)a1, &v27, a2[24]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1647718503);
  sub_37E084((uint64_t **)a1, &v27, a3[24]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836021360, 1752709424);
  sub_37E084((uint64_t **)a1, &v27, a2[28]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836021360, &v33, 1752709424);
  sub_37E084((uint64_t **)a1, &v27, a3[28]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v27 = 0x6D736D7400000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37E084((uint64_t **)a1, &v27, a2[5]);
  uint64_t v20 = a3[5];
  uint64_t v27 = 0x6D736D7400000001;
  *(void *)&long long v28 = 2;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37E084((uint64_t **)a1, &v27, v20);
  sub_E5310((uint64_t)&v27, 1, 1836281204, 1214394677);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[14]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836281204, &v33, 1214394677);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[14]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836281204, 1214329654);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[10]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836281204, &v33, 1214329654);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[10]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836281204, 1647718502);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[18]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836281204, &v33, 1647718502);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[18]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836281204, 1647718503);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[22]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836281204, &v33, 1647718503);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[22]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_E5310((uint64_t)&v27, 1, 1836281204, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1836281204, &v33, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v27 = 0x7261772000000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[37]);
  uint64_t v27 = 0x696D766300000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[9]);
  uint64_t v21 = a3[9];
  uint64_t v27 = 0x696D766300000001;
  *(void *)&long long v28 = 2;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, v21);
  sub_E5310((uint64_t)&v27, 1, 1768781411, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1768781411, &v33, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v27 = 0x696D6F6300000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[9]);
  uint64_t v22 = a3[9];
  uint64_t v27 = 0x696D6F6300000001;
  *(void *)&long long v28 = 2;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, v22);
  sub_E5310((uint64_t)&v27, 1, 1768779619, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1768779619, &v33, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v27 = 0x676D637400000001;
  long long v28 = *(_OWORD *)sub_3AEE60();
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[9]);
  uint64_t v23 = a3[9];
  uint64_t v27 = 0x676D637400000001;
  *(void *)&long long v28 = 2;
  DWORD2(v28) = 0;
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, v23);
  sub_E5310((uint64_t)&v27, 1, 1735222132, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  DWORD2(v33) = 0;
  *(void *)&long long v33 = 2;
  sub_19C2F8((uint64_t)&v27, 1735222132, &v33, 1752709424);
  sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a3[26]);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  for (uint64_t k = 0; k != 20; k += 4)
  {
    int v25 = *(_DWORD *)&aOvpvivpvcgpvcv_0[k];
    LODWORD(v27) = 1;
    HIDWORD(v27) = v25;
    long long v28 = *(_OWORD *)sub_3AEE60();
    int v29 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    long long __p = 0;
    sub_37D10C((uint64_t **)a1, (uint64_t)&v27, a2[36]);
    LODWORD(v27) = 1;
    HIDWORD(v27) = v25;
    long long v28 = *(_OWORD *)sub_3AEE60();
    int v29 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    long long __p = 0;
    sub_37E544(a1, (int *)&v27, qword_6681E0, 0);
  }
  sub_E5310((uint64_t)&v27, 1, 1987077987, 1752709424);
  sub_37E544(a1, (int *)&v27, qword_6681E0, 0);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
}

void sub_19C06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2F8(uint64_t a1, int a2, _OWORD *a3, int a4)
{
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  *(_OWORD *)(a1 + 8) = *a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_374BB4((_DWORD *)a1);
  return a1;
}

void sub_19C340(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C360(uint64_t ***a1, int a2)
{
  char v4 = 0;
  uint64_t v13 = 0x757362446A333237;
  uint64_t v5 = 1;
  uint64_t v6 = (int *)&v13;
  do
  {
    char v7 = v4;
    uint64_t v8 = *a1;
    sub_E5310((uint64_t)v10, 1, a2, *v6);
    sub_37D10C(v8, (uint64_t)v10, (uint64_t)&unk_6678A8);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    uint64_t v9 = (uint64_t)*a1;
    sub_E5310((uint64_t)v10, 1, a2, *v6);
    sub_37E544(v9, v10, qword_6681E0, 0);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    uint64_t v6 = (int *)&v13 + v5;
    char v4 = 1;
    uint64_t v5 = 2;
  }
  while ((v7 & 1) == 0);
}

void sub_19C488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C4B0(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 664);
  if (!v3)
  {
    char v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "Device_Codec_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 1006;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No valid support policy present\"", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No valid support policy present");
  }

  sub_3901F4(v3, a2, a3);
}

void sub_19C5C0(_Unwind_Exception *exception_object)
{
}

char *sub_19C5DC@<X0>(char *result@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = (uint64_t)result;
  int v5 = *(_DWORD *)(a2 + 144);
  switch(v5)
  {
    case 1886216809:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_2091A4((uint64_t)&theData);
      if (v84)
      {
        CFDataRef v6 = theData;
        if (theData && (BytePtr = CFDataGetBytePtr(theData), unint64_t Length = CFDataGetLength(v6), BytePtr))
        {
          uint64_t v9 = Length;
          if (Length > 3)
          {
            LODWORD(v10) = *(_DWORD *)BytePtr;
            char v11 = (os_log_t *)sub_32A48(17);
            uint64_t v12 = *v11;
            if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              int v86 = "Device_Codec_Aspen.cpp";
              __int16 v87 = 1024;
              int v88 = 1738;
              __int16 v89 = 1024;
              *(_DWORD *)int v90 = WORD1(v10);
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = BYTE1(v10);
              LOWORD(v91) = 1024;
              *(_DWORD *)((char *)&v91 + 2) = v10;
              _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Mic Trim gains: version %d, size %d, entries %d", buf, 0x24u);
            }
            if (WORD1(v10) != 1 || (v10 & 0xFF00) != 0x200)
            {
              char v75 = (os_log_t *)sub_32A48(13);
              int v76 = *v75;
              if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                int v86 = "Device_Codec_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1740;
                _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
              }
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }
            unint64_t v10 = v10;
            if ((_BYTE)v10)
            {
              if (v9 > 7)
              {
                uint64_t v13 = 0;
                unint64_t v39 = (unint64_t)&BytePtr[v9 - 4];
                char v40 = (int *)(BytePtr + 4);
                unint64_t v10 = v10;
                long long v14 = 0uLL;
                do
                {
                  char v41 = (char *)*((void *)&v14 + 1);
                  uint64_t v42 = (char *)v14;
                  unint64_t v43 = (uint64_t)(*((void *)&v14 + 1) - v14) >> 2;
                  if (v43 >= v10) {
                    break;
                  }
                  int v44 = *v40;
                  float v45 = (double)(*v40 >> 16) * 0.1;
                  if (*((void *)&v14 + 1) >= (unint64_t)v13)
                  {
                    unint64_t v47 = (uint64_t)((uint64_t)v13 - v14) >> 1;
                    if (v47 <= v43 + 1) {
                      unint64_t v47 = v43 + 1;
                    }
                    if ((unint64_t)((unint64_t)v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v48 = v47;
                    }
                    int v49 = (char *)sub_46BF4(v48);
                    int v51 = (float *)&v49[4 * v43];
                    *int v51 = v45;
                    char v46 = v51 + 1;
                    while (v41 != v42)
                    {
                      int v52 = *((_DWORD *)v41 - 1);
                      v41 -= 4;
                      *((_DWORD *)v51-- - 1) = v52;
                    }
                    uint64_t v13 = (float *)&v49[4 * v50];
                    *(void *)&long long v14 = v51;
                    if (v42)
                    {
                      int v78 = v51;
                      operator delete(v42);
                      *(void *)&long long v14 = v78;
                    }
                  }
                  else
                  {
                    **((float **)&v14 + 1) = v45;
                    char v46 = (float *)(*((void *)&v14 + 1) + 4);
                  }
                  float v53 = (double)(__int16)v44 * 0.1;
                  char v79 = (float *)v14;
                  if (v46 >= v13)
                  {
                    std::string v55 = (float *)v14;
                    uint64_t v56 = (uint64_t)((uint64_t)v46 - v14) >> 2;
                    unint64_t v57 = v56 + 1;
                    if ((unint64_t)(v56 + 1) >> 62) {
                      sub_60548();
                    }
                    if ((uint64_t)((uint64_t)v13 - v14) >> 1 > v57) {
                      unint64_t v57 = (uint64_t)((uint64_t)v13 - v14) >> 1;
                    }
                    if ((unint64_t)((unint64_t)v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v58 = v57;
                    }
                    if (v58) {
                      unint64_t v58 = (unint64_t)sub_46BF4(v58);
                    }
                    else {
                      uint64_t v59 = 0;
                    }
                    char v60 = (float *)(v58 + 4 * v56);
                    *char v60 = v53;
                    char v54 = v60 + 1;
                    while (v46 != v55)
                    {
                      int v61 = *((_DWORD *)v46-- - 1);
                      *((_DWORD *)v60-- - 1) = v61;
                    }
                    uint64_t v13 = (float *)(v58 + 4 * v59);
                    char v79 = v60;
                    if (v55) {
                      operator delete(v55);
                    }
                  }
                  else
                  {
                    *char v46 = v53;
                    char v54 = v46 + 1;
                  }
                  *(void *)&long long v62 = v79;
                  *((void *)&v62 + 1) = v54;
                  long long v80 = v62;
                  char v63 = (os_log_t *)sub_32A48(17);
                  char v64 = *v63;
                  if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                    int v86 = "Device_Codec_Aspen.cpp";
                    __int16 v87 = 1024;
                    int v88 = 1759;
                    __int16 v89 = 2048;
                    *(double *)int v90 = v45;
                    *(_WORD *)&v90[8] = 2048;
                    double v91 = v53;
                    _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parsed trim gains: %f %f", buf, 0x26u);
                  }
                  ++v40;
                  long long v14 = v80;
                }
                while ((unint64_t)v40 <= v39);
              }
              else
              {
                uint64_t v13 = 0;
                long long v14 = 0uLL;
              }
              uint64_t v65 = *((void *)&v14 + 1);
              if (v10 < (uint64_t)(*((void *)&v14 + 1) - v14) >> 2)
              {
                uint64_t v66 = *((void *)&v14 + 1) - v14 - 4;
                do
                {
                  v65 -= 4;
                  BOOL v21 = v10 >= v66 >> 2;
                  v66 -= 4;
                }
                while (!v21);
                *((void *)&v14 + 1) = v65;
              }
            }
            else
            {
              __int16 v37 = (os_log_t *)sub_32A48(17);
              char v38 = *v37;
              long long v14 = 0uLL;
              if (*v37)
              {
                if (os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  int v86 = "Device_Codec_Aspen.cpp";
                  __int16 v87 = 1024;
                  int v88 = 1744;
                  _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of Mic trim gain entries is zero", buf, 0x12u);
                }
                uint64_t v13 = 0;
                long long v14 = 0uLL;
              }
              else
              {
                uint64_t v13 = 0;
              }
            }
            *(_OWORD *)a3 = v14;
            a3[2] = (char *)v13;
            return (char *)sub_19D11C((uint64_t)&theData);
          }
          int v72 = (os_log_t *)sub_32A48(13);
          char v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            int v86 = "Device_Codec_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1731;
            _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        else
        {
          int v67 = (os_log_t *)sub_32A48(13);
          int v68 = *v67;
          if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            int v86 = "Device_Codec_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1730;
            _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        int v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v74, "Precondition failure.");
      }
      uint64_t v15 = *(void *)(v3 + 664);
      uint64_t v18 = *(void *)(v15 + 72);
      uint64_t v16 = v15 + 72;
      uint64_t v17 = v18;
      if (!v18) {
        goto LABEL_115;
      }
      uint64_t v19 = v16;
      do
      {
        unsigned int v20 = *(_DWORD *)(v17 + 32);
        BOOL v21 = v20 >= 0x706D6269;
        if (v20 >= 0x706D6269) {
          uint64_t v22 = (uint64_t *)v17;
        }
        else {
          uint64_t v22 = (uint64_t *)(v17 + 8);
        }
        if (v21) {
          uint64_t v19 = v17;
        }
        uint64_t v17 = *v22;
      }
      while (*v22);
      if (v19 == v16 || *(_DWORD *)(v19 + 32) > 0x706D6269u)
      {
LABEL_115:
        char v69 = (os_log_t *)sub_32A48(13);
        int v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v86 = "Device_Codec_Aspen.cpp";
          __int16 v87 = 1024;
          int v88 = 1783;
          _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unable to locate built-in mic sub-port information\"", buf, 0x12u);
        }
        char v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v71, "Unable to locate built-in mic sub-port information");
      }
      uint64_t v23 = *(unsigned int **)(v19 + 40);
      if (*(unsigned int **)(v19 + 48) != v23)
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        __int16 v26 = 0;
        do
        {
          uint64_t v27 = sub_32A48(17);
          if (*(unsigned char *)(v27 + 8))
          {
            long long v28 = *(NSObject **)v27;
            if (*(void *)v27)
            {
              if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(__p, *v23);
                int v29 = __p;
                if (v82 < 0) {
                  int v29 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                int v86 = "Device_Codec_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1789;
                __int16 v89 = 2080;
                *(void *)int v90 = v29;
                _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting trim for Data Source ID %s", buf, 0x1Cu);
                if (v82 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 0;
          if (sub_19D060(v3, 1768845428, *v23, (uint64_t)buf))
          {
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v31 = (v26 - v24) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                sub_60548();
              }
              if ((uint64_t)(v25 - (void)v24) >> 1 > v32) {
                unint64_t v32 = (uint64_t)(v25 - (void)v24) >> 1;
              }
              if (v25 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v32;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)sub_46BF4(v33);
              }
              else {
                uint64_t v34 = 0;
              }
              uint64_t v35 = (char *)(v33 + 4 * v31);
              *(_DWORD *)uint64_t v35 = *(_DWORD *)buf;
              uint64_t v30 = v35 + 4;
              while (v26 != v24)
              {
                int v36 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              unint64_t v25 = v33 + 4 * v34;
              *a3 = v35;
              a3[1] = v30;
              a3[2] = (char *)v25;
              if (v24) {
                operator delete(v24);
              }
              uint64_t v24 = v35;
            }
            else
            {
              *(_DWORD *)__int16 v26 = *(_DWORD *)buf;
              uint64_t v30 = v26 + 4;
            }
            a3[1] = v30;
            __int16 v26 = v30;
          }
          ++v23;
        }
        while (*(unsigned int **)(v19 + 48) != v23);
      }
      return (char *)sub_19D11C((uint64_t)&theData);
    case 1886545251:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_19D060((uint64_t)result, 1869968496, 3, (uint64_t)buf);
      if (result)
      {
LABEL_7:
        uint64_t result = (char *)operator new(4uLL);
        *(_DWORD *)uint64_t result = *(_DWORD *)buf;
        *a3 = result;
        a3[1] = result + 4;
        a3[2] = result + 4;
      }
      break;
    case 1886613611:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_19D060((uint64_t)result, 1869968496, 4, (uint64_t)buf);
      if (result) {
        goto LABEL_7;
      }
      break;
    default:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      break;
  }
  return result;
}

void sub_19CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_19D11C((uint64_t)va);
  char v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19D060(uint64_t a1, int a2, int a3, uint64_t a4)
{
  v9[0] = 1635021667;
  v9[1] = a2;
  void v9[2] = a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, v9);
  if (v6)
  {
    int v8 = 4;
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, uint64_t))(*(void *)a1 + 40))(a1, v9, 0, 0, &v8, a4);
  }
  return v6;
}

uint64_t sub_19D11C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

void *sub_19D158@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1886216809)
  {
    uint64_t v3 = *(void *)(result[84] + 24);
    if (!v3)
    {
      unint64_t v10 = (os_log_t *)sub_32A48(13);
      char v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        __int32 v13 = 136315394;
        long long v14 = "Device_Codec_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1015;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: \"No default sub-port specified for built-in mic.\"", (uint8_t *)&v13, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
    }
    char v4 = *(__int32 **)(v3 + 32);
    int v5 = *(__int32 **)(v3 + 40);
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x41 && v4 != v5)
    {
      int v7 = v4;
      while (v7[8] != 1869442665)
      {
        v7 += 16;
        if (v7 == v5) {
          goto LABEL_17;
        }
      }
      char v4 = v7;
    }
LABEL_17:
    __int32 v13 = *v4;
    return sub_72300(a3, &v13, 1);
  }
  else
  {
    uint64_t v9 = result[83];
    if (v9)
    {
      return sub_3921D0(a3, v9, a2);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
  }
  return result;
}

void sub_19D318(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19D334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_32A48(17);
  if (*(unsigned char *)(v4 + 8))
  {
    int v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 16);
        sub_19D4F8(&__p, *(void *)(a2 + 8), a2);
        int v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int32 v13 = "Device_Codec_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 995;
        __int16 v16 = 2048;
        uint64_t v17 = v6;
        __int16 v18 = 2080;
        uint64_t v19 = v7;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inPortList (%zu): %s.", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  BOOL v8 = sub_24AA28(1886154613, a2);
  if (!sub_19D610(a1) && v8)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    unint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int32 v13 = "Device_Codec_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 998;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected lineout port\"", buf, 0x12u);
      }
    }
  }
  *(unsigned char *)(a1 + 656) = v8;
}

std::string *sub_19D4F8(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_136B74(__p, a2 + 16);
      uint64_t v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      int v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      if ((char)v10 < 0) {
        operator delete(__p[0]);
      }
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_19D5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19D610(uint64_t a1)
{
  AudioObjectID v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  *(void *)&v3.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
  v3.AudioObjectPropertyElement mElement = 2;
  return AudioObjectHasProperty(v1, &v3) != 0;
}

uint64_t sub_19D678(uint64_t a1, signed int a2)
{
  if (a2 > 1886545250)
  {
    switch(a2)
    {
      case 1886545251:
        return 3;
      case 1886613611:
        return 4;
      case 1886680175:
        return 1;
      default:
        goto LABEL_13;
    }
  }
  else
  {
    if (a2 != 1885888867)
    {
      if (a2 != 1885892727)
      {
        if (a2 == 1886154613) {
          return 2;
        }
LABEL_13:
        AudioObjectPropertyAddress v3 = (os_log_t *)sub_32A48(17);
        uint64_t v4 = *v3;
        if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, a2);
          int v5 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v14 = "Device_Codec_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 984;
          __int16 v17 = 2080;
          __int16 v18 = v5;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v6 = (os_log_t *)sub_32A48(13);
        int v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, a2);
          if (v12 >= 0) {
            BOOL v8 = __p;
          }
          else {
            BOOL v8 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v14 = "Device_Codec_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 985;
          __int16 v17 = 2080;
          __int16 v18 = v8;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType: %s.\"", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
      }
      return 1;
    }
    return 5;
  }
}

void sub_19D8EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19D908()
{
  if (sub_20A008()) {
    return 0;
  }
  AudioObjectID v1 = (void *)sub_F820C();
  CFStringRef v3 = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_F832C(v1, &v3);
  sub_72924((uint64_t)&v3);
  return v0;
}

void sub_19D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D994(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 656)) {
    sub_19D9A8(a1, 0);
  }
}

void sub_19D9A8(uint64_t a1, int a2)
{
  if (!sub_19D610(a1))
  {
    char v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v17 = 136315394;
        __int16 v18 = "Device_Codec_Aspen.cpp";
        __int16 v19 = 1024;
        int v20 = 1671;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Does not support lineout\"", (uint8_t *)&v17, 0x12u);
      }
    }
  }
  if (*(unsigned char *)(a1 + 656))
  {
    uint64_t v6 = sub_32A48(17);
    if (*(unsigned char *)(v6 + 8))
    {
      int v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          BOOL v8 = "down";
          __int16 v18 = "Device_Codec_Aspen.cpp";
          int v17 = 136315650;
          if (a2) {
            BOOL v8 = "up";
          }
          __int16 v19 = 1024;
          int v20 = 1674;
          __int16 v21 = 2080;
          uint64_t v22 = v8;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will attempt to power %s the output accessory.", (uint8_t *)&v17, 0x1Cu);
        }
      }
    }
    sub_23EE78();
    if (a2)
    {
      int started = IAPAudioStartPlaybackForTransport();
      unsigned __int8 v10 = (os_log_t *)sub_32A48(11);
      char v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136315650;
        __int16 v18 = "IAPManager.cpp";
        __int16 v19 = 1024;
        int v20 = 306;
        __int16 v21 = 1024;
        LODWORD(v22) = started;
        char v12 = "%25s:%-5d IAPAudioStartPlaybackForTransport() returned %u.";
LABEL_19:
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, v12, (uint8_t *)&v17, 0x18u);
      }
    }
    else
    {
      int started = IAPAudioStopPlaybackForTransport();
      __int32 v13 = (os_log_t *)sub_32A48(11);
      char v11 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136315650;
        __int16 v18 = "IAPManager.cpp";
        __int16 v19 = 1024;
        int v20 = 311;
        __int16 v21 = 1024;
        LODWORD(v22) = started;
        char v12 = "%25s:%-5d IAPAudioStopPlaybackForTransport() returned %u.";
        goto LABEL_19;
      }
    }
    if (started != 1)
    {
      __int16 v14 = (os_log_t *)sub_32A48(13);
      __int16 v15 = *v14;
      if (*v14)
      {
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315394;
          __int16 v18 = "Device_Codec_Aspen.cpp";
          __int16 v19 = 1024;
          int v20 = 1676;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"IAPManager::SetPlaybackAccessoryEnabled failed.\"", (uint8_t *)&v17, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 2003329396;
    }
  }
}