void sub_33F8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t vars8;

  v2 = (uint64_t)(a1 + 86);
  v5 = a1[87] != a1[86]
    && ((v3 = sub_4CD70((uint64_t)(a1 + 86), 0, 0), v4 = *(void *)(v3 + 192), *(unsigned char *)(v4 + 448))
     || *(void *)(v4 + 584)
     || *(void *)(v4 + 672))
    && *(_DWORD *)(v3 + 8) == 1819304813;
  if (a1[90] != a1[89])
  {
    v6 = sub_4CD70(v2, 1, 0);
    v7 = *(void *)(v6 + 192);
    if (*(unsigned char *)(v7 + 448) || *(void *)(v7 + 584) || *(void *)(v7 + 672))
    {
      v8 = *(_DWORD *)(v6 + 8) == 1819304813;
      if (!v5) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  v8 = 0;
  if (v5)
  {
LABEL_12:
    v9 = sub_4CD70(v2, 0, 0);
    sub_F718(*(unsigned char **)(v9 + 192));
  }
LABEL_13:
  if (v8)
  {
    v10 = *(unsigned char **)(sub_4CD70(v2, 1, 0) + 192);
    sub_F718(v10);
  }
}

uint64_t *sub_3524(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = a2; ; sub_3590(a1, i[2], i[3]))
  {
    i = (void *)i[1];
    if (i == a2) {
      break;
    }
  }
  return a1;
}

void sub_357C(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void *sub_3590(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a1;
  void *result = *a1;
  result[1] = a1;
  *(void *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void sub_35F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v21 = *(void *)(a1 + 32);
  if (v21 == v3)
  {
    v18 = (os_log_t *)sub_32A48(13);
    v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v29 = "DSPGraphChain.cpp";
      __int16 v30 = 1024;
      int v31 = 262;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    uint64_t v5 = *(void *)(v3 + 8);
    v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v27 = 0;
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v5 + 224))(v5, 1, &v27);
    if (v6)
    {
      v15 = (os_log_t *)sub_32A48(13);
      v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v29 = "DSPGraphChain.cpp";
        __int16 v30 = 1024;
        int v31 = 270;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unexpected error from GetBusCount\"", buf, 0x12u);
      }
      v17 = __cxa_allocate_exception(0x10uLL);
      *(void *)v17 = &off_6414D8;
      v17[2] = v6;
    }
    for (unint64_t i = *(void *)(a2 + 40); i < v27; ++i)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 128))(v5, 1, i);
      long long v9 = *(_OWORD *)(v8 + 16);
      v25[0] = *(_OWORD *)v8;
      v25[1] = v9;
      uint64_t v26 = *(void *)(v8 + 32);
      sub_4EF34((void *)a2, (uint64_t)v25);
      v10 = (os_log_t *)sub_32A48(24);
      v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_259A4(&v24, (uint64_t)v25);
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v12 = &v24;
        }
        else {
          v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
        }
        unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v5);
        sub_2417C(__p, v13);
        v14 = __p;
        if (v23 < 0) {
          v14 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        v29 = "DSPGraphChain.cpp";
        __int16 v30 = 1024;
        int v31 = 276;
        __int16 v32 = 1024;
        int v33 = i;
        __int16 v34 = 2080;
        v35 = v12;
        __int16 v36 = 2080;
        v37 = v14;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bus: %d Format: %s AU: %s", buf, 0x2Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v4) {
      sub_4636C(v4);
    }
    v3 += 24;
  }
  while (v3 != v21);
}

void sub_39D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void sub_3A34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  sub_13910();
  operator new();
}

void sub_3AC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_3ADC(uint64_t a1, uint64_t a2)
{
  if (!a2 || (sub_361384(a1, a2) & 1) != 0) {
    operator new();
  }
  v2 = (os_log_t *)sub_32A48(13);
  uint64_t v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v6 = "HP_Device.cpp";
      __int16 v7 = 1024;
      int v8 = 1298;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"IOProc wasn't previously added\"", buf, 0x12u);
    }
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 1852797029;
}

void sub_3CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_3D04(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_3E74(_Unwind_Exception *a1)
{
}

uint64_t sub_3E9C(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  sub_54618();
  __int16 v7 = pthread_self();
  if (pthread_equal(v7, (pthread_t)atomic_load_explicit(qword_65D808, memory_order_acquire)))
  {
    int v8 = (os_log_t *)sub_32A48(13);
    long long v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ListenerRelayManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 129;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"relayListMutex already held be current thread.\"", buf, 0x12u);
      }
    }
  }
  sub_54550(&v13, a4);
  if (v13)
  {
    if (!*((_DWORD *)v13 + 14))
    {
      uint64_t v10 = *v13;
      uint64_t v11 = v13[3];
      uint64_t v23 = 0;
      uint64_t v24 = v11;
      int v25 = *((_DWORD *)v13 + 8);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      sub_66880(&v21, a3, (uint64_t)a3 + 12 * a2, a2);
      uint64_t v15 = v10;
      v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      sub_39B3CC(&v16, v21, v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - (uint64_t)v21) >> 2));
      uint64_t v19 = v24;
      int v20 = v25;
      sub_13910();
      *(void *)buf = v15;
      *(_OWORD *)&buf[8] = 0uLL;
      uint64_t v27 = 0;
      sub_39B3CC(&buf[8], v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v16) >> 2));
      uint64_t v28 = v24;
      int v29 = v25;
      operator new();
    }
    sub_5036C((uint64_t)v13, a2, (uint64_t)a3);
  }
  if (v14) {
    sub_4636C(v14);
  }
  return 0;
}

void sub_4130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p)
{
  if (v12) {
    operator delete(v12);
  }
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_4188(uint64_t *a1, uint64_t *a2, char *a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  __int16 v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        v14 = strrchr(a3, 47);
        if (v14) {
          unsigned int v13 = v14 + 1;
        }
        else {
          unsigned int v13 = a3;
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      *(_DWORD *)buf = 136315906;
      uint64_t v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_42FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_432C(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v10 = a1;
  v11[0] = v1;
  v11[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v3 = *(unsigned __int8 *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 16);
  sub_67EC(&v15, v11, 179);
  uint64_t v4 = v15;
  if (v15)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(24);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(v4 + 47) < 0)
      {
        sub_21E8C(__p, *(void **)(v4 + 24), *(void *)(v4 + 32));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v4 + 24);
        uint64_t v14 = *(void *)(v4 + 40);
      }
      __int16 v7 = __p;
      if (v14 < 0) {
        __int16 v7 = (void **)__p[0];
      }
      __int16 v18 = "SpeakerInterferenceMitigationIODelegate.cpp";
      __int16 v19 = 1024;
      int v20 = 185;
      int v8 = "false";
      *(_DWORD *)buf = 136315906;
      if (v3) {
        int v8 = "true";
      }
      __int16 v21 = 2080;
      __int16 v22 = v7;
      __int16 v23 = 2080;
      uint64_t v24 = v8;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Handling speaker interference mitigation IO delegate for chain %s. Mitigating? %s", buf, 0x26u);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_4F86C(v4 + 48, v3 != 0);
  }
  if (v16) {
    sub_4636C(v16);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_5098(&v10);
}

void sub_44D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, long long buf, long long a20,__int16 a21,__int16 a22,int a23,int a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a18) {
    sub_4636C(a18);
  }
  if (a2 == 3)
  {
    uint64_t v26 = __cxa_begin_catch(exception_object);
    uint64_t v27 = (os_log_t *)sub_32A48(13);
    os_log_t v28 = *v27;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    int v29 = v26[2];
    LODWORD(buf) = 136316162;
    *(void *)((char *)&buf + 4) = "StandardUtilities.h";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 429;
    WORD1(a20) = 1024;
    DWORD1(a20) = v29;
    WORD4(a20) = 2080;
    *(void *)((char *)&a20 + 10) = "";
    a22 = 1024;
    a23 = 188;
    __int16 v30 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
    int v31 = v28;
    uint32_t v32 = 40;
  }
  else
  {
    int v33 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v34 = v33;
      v35 = (os_log_t *)sub_32A48(13);
      os_log_t v36 = *v35;
      if (!*v35 || !os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v34 + 16))(v34);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 430;
      WORD1(a20) = 2080;
      *(void *)((char *)&a20 + 4) = v37;
      WORD6(a20) = 2080;
      *(void *)((char *)&a20 + 14) = "";
      HIWORD(a23) = 1024;
      a24 = 188;
      __int16 v30 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
      int v31 = v36;
      uint32_t v32 = 44;
    }
    else
    {
      v38 = (os_log_t *)sub_32A48(13);
      os_log_t v39 = *v38;
      if (!*v38 || !os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 431;
      WORD1(a20) = 2080;
      *(void *)((char *)&a20 + 4) = "";
      WORD6(a20) = 1024;
      *(_DWORD *)((char *)&a20 + 14) = 188;
      __int16 v30 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
      int v31 = v39;
      uint32_t v32 = 34;
    }
  }
  _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&buf, v32);
LABEL_16:
  __cxa_end_catch();
  if (!a11) {
    JUMPOUT(0x44A0);
  }
  JUMPOUT(0x4498);
}

uint64_t sub_49D8(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 1008))
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3832;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 664), memory_order_acquire)))
  {
    uint64_t v5 = pthread_self();
    if (!pthread_equal(v5, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 752), memory_order_acquire)))
    {
      __int16 v7 = (os_log_t *)sub_32A48(1);
      int v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = *(void *)(a1 + 576);
          sub_4D60(&__p, (unsigned int *)&v13);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3834;
          __int16 v16 = 2080;
          uint64_t v17 = p_p;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d The IO monitor should be held prior to calling StartIOEngine on VAD: '%s'.", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  sub_3B7EC();
  *(void *)buf = &qword_64CC40;
  *(void *)&buf[8] = a1;
  buf[16] = sub_571C(a1);
  *(_DWORD *)(a1 + 1076) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 1008) + 240))(*(void *)(a1 + 1008), a2);
  uint64_t result = sub_54E58((uint64_t)buf);
  *(_DWORD *)(a1 + 912) = 0;
  return result;
}

void sub_4C1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_4C2C(_Unwind_Exception *a1)
{
}

void sub_4C34(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    sub_54E58((uint64_t)&buf);
    __cxa_begin_catch(a1);
    if (a2 == 2) {
      __cxa_rethrow();
    }
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    __int16 v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 3854;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"error starting IO on the active device\"", (uint8_t *)&buf, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  _Unwind_Resume(a1);
}

void sub_4D2C(_Unwind_Exception *a1)
{
}

void sub_4D3C(_Unwind_Exception *a1)
{
}

void sub_4D48(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x4D50);
  }
  sub_564E4(a1);
}

std::string *sub_4D60(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[", 1uLL);
  sub_2417C(&__p, *a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a2[1])
  {
    std::string::append(a1, "_", 1uLL);
    std::to_string(&__p, a2[1]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = &__p;
    }
    else {
      int v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v6, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a1, "]", 1uLL);
}

void sub_4E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4E9C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  int v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 102;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      std::string::size_type v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4F64(uint64_t a1, os_unfair_lock_t lock)
{
  os_unfair_lock_lock(lock);
  if (SHIBYTE(lock[7]._os_unfair_lock_opaque) < 0)
  {
    sub_21E8C((unsigned char *)a1, *(void **)&lock[2]._os_unfair_lock_opaque, *(void *)&lock[4]._os_unfair_lock_opaque);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)&lock[2]._os_unfair_lock_opaque;
    *(void *)(a1 + 16) = *(void *)&lock[6]._os_unfair_lock_opaque;
  }

  os_unfair_lock_unlock(lock);
}

void sub_4FD0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_4FE4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2 + 16), 1uLL, memory_order_relaxed);
  }
  sub_13910();
  operator new();
}

void sub_5080(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_5098(uint64_t *result)
{
  uint64_t v1 = *result;
  std::__shared_weak_count *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_50EC(uint64_t a1, void *outData, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    char v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v20 = "Stream_HAL_Common.cpp";
        __int16 v21 = 1024;
        int v22 = 342;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }
  AudioObjectID v5 = *(_DWORD *)(a1 + 80);
  *(void *)&inAddress.mScope = 1735159650;
  UInt32 ioDataSize = 40;
  inAddress.mSelector = a3;
  uint64_t PropertyData = AudioObjectGetPropertyData(v5, &inAddress, 0, 0, &ioDataSize, outData);
  if (PropertyData)
  {
    std::string::size_type v7 = (os_log_t *)sub_32A48(22);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, PropertyData);
        uint64_t v9 = v16 >= 0 ? __p : (void **)__p[0];
        int v10 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)buf = 136316162;
        int v20 = "Stream_HAL_Common.cpp";
        __int16 v21 = 1024;
        int v22 = 347;
        __int16 v23 = 1024;
        int v24 = PropertyData;
        __int16 v25 = 2080;
        uint64_t v26 = v9;
        __int16 v27 = 1024;
        int v28 = v10;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') getting the current stream format for stream %u", buf, 0x28u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return PropertyData;
}

void sub_5304(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_5320(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 528))(a1, 1735159650);
  int v3 = v2;
  uint64_t v11 = v2;
  uint64_t v4 = v2 & 0xFF00000000;
  AudioObjectID v5 = (os_log_t *)sub_32A48(16);
  uint64_t v6 = *v5;
  if (v4)
  {
    if (v6 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 268);
      sub_4D60(&__p, (unsigned int *)&v9);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
      __int16 v13 = 1024;
      int v14 = 123;
      __int16 v15 = 1024;
      LODWORD(v16[0]) = v3;
      WORD2(v16[0]) = 2080;
      *(void *)((char *)v16 + 6) = p_p;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting fixed buffer size of %u on VAD %s", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    strcpy(buf, "zisfbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, unsigned char *, void, void, uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, buf, 0, 0, 4, &v11);
  }
  else if (v6 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a1 + 268);
    sub_4D60(&__p, (unsigned int *)&v9);
    uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
    __int16 v13 = 1024;
    int v14 = 129;
    __int16 v15 = 2080;
    v16[0] = v8;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Could not find fixed buffer size for VAD %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_5578(uint64_t a1)
{
  sub_1329C(&v2, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  uint64_t v1 = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v1);
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_13910();
  operator new();
}

void sub_562C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_564C(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    sub_60560();
  }
  return operator new(12 * a1);
}

void sub_5694(uint64_t a1, uint64_t a2)
{
}

void sub_56FC(void *a1)
{
}

void sub_5708(_Unwind_Exception *a1)
{
}

BOOL sub_571C(uint64_t a1)
{
  uint64_t v2 = pthread_self();
  int v3 = pthread_equal(v2, (pthread_t)atomic_load_explicit(qword_64CC50, memory_order_acquire));
  if (v3)
  {
    ++dword_64CCCC;
    uint64_t v4 = operator new(0x18uLL);
    uint64_t v5 = qword_64CCD0;
    v4[1] = &qword_64CCD0;
    v4[2] = a1;
    void *v4 = v5;
    *(void *)(v5 + 8) = v4;
    qword_64CCD0 = (uint64_t)v4;
    ++qword_64CCE0;
    sub_3A944((uint64_t)&qword_64CC40);
  }
  return v3 != 0;
}

uint64_t **sub_57B0(uint64_t **result)
{
  uint64_t v1 = *result;
  std::__shared_weak_count *result = 0;
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t *v1 = 0;
    if (v2)
    {
      int v3 = *(void **)v2;
      if (*(void *)v2)
      {
        *(void *)(v2 + 8) = v3;
        operator delete(v3);
      }
      operator delete();
    }
    operator delete();
  }
  return result;
}

void *sub_5834(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  *a1 = off_63E5A8;
  a1[1] = v5;
  return a1;
}

uint64_t sub_58A0(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t result = sub_26E94(*a2, inAddress, 0, 0);
    UInt32 ioDataSize = result;
    if (result)
    {
      uint64_t outData = 0;
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, 0, 0, &ioDataSize, &outData);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        uint64_t v7 = outData;
        v8[0] = &off_637B38;
        v8[1] = 0;
        *(void *)(a1 + 8) = &off_637B38;
        *(void *)(a1 + 16) = v7;
        *(unsigned char *)(a1 + 24) = 1;
        return (uint64_t)sub_49A90(v8);
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_59B0(int *a1)
{
  int v2 = *a1;
  switch(*a1)
  {
    case 1:
      int v3 = (os_log_t *)*((void *)a1 + 1);
      os_log_t v4 = *v3;
      if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *((void *)a1 + 2);
        int v6 = a1[6];
        uint64_t v7 = *((void *)a1 + 4);
        int v37 = 136316418;
        v38 = "VirtualAudioQueue.h";
        __int16 v39 = 1024;
        int v40 = 163;
        __int16 v41 = 2080;
        uint64_t v42 = v5;
        __int16 v43 = 1024;
        int v44 = v6;
        __int16 v45 = 2080;
        uint64_t v46 = v7;
        __int16 v47 = 2080;
        v48 = a1 + 10;
        uint64_t v8 = "%25s:%-5d %s:%d:%s: %s";
        uint64_t v9 = v4;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        goto LABEL_26;
      }
      break;
    case 2:
      int v14 = (os_log_t *)*((void *)a1 + 1);
      os_log_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a1 + 2);
        int v17 = a1[6];
        uint64_t v18 = *((void *)a1 + 4);
        int v37 = 136316418;
        v38 = "VirtualAudioQueue.h";
        __int16 v39 = 1024;
        int v40 = 166;
        __int16 v41 = 2080;
        uint64_t v42 = v16;
        __int16 v43 = 1024;
        int v44 = v17;
        __int16 v45 = 2080;
        uint64_t v46 = v18;
        __int16 v47 = 2080;
        v48 = a1 + 10;
        uint64_t v8 = "%25s:%-5d %s:%d:%s: %s";
        goto LABEL_14;
      }
      break;
    case 3:
      __int16 v19 = (os_log_t *)*((void *)a1 + 1);
      os_log_t v15 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *((void *)a1 + 2);
        int v21 = a1[6];
        uint64_t v22 = *((void *)a1 + 4);
        int v37 = 136316418;
        v38 = "VirtualAudioQueue.h";
        __int16 v39 = 1024;
        int v40 = 169;
        __int16 v41 = 2080;
        uint64_t v42 = v20;
        __int16 v43 = 1024;
        int v44 = v21;
        __int16 v45 = 2080;
        uint64_t v46 = v22;
        __int16 v47 = 2080;
        v48 = a1 + 10;
        uint64_t v8 = "%25s:%-5d %s:%d:%s: %s";
LABEL_14:
        uint64_t v9 = v15;
        os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_26;
      }
      break;
    case 4:
      __int16 v23 = (os_log_t *)*((void *)a1 + 1);
      os_log_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = *((void *)a1 + 2);
        int v26 = a1[6];
        uint64_t v27 = *((void *)a1 + 4);
        int v37 = 136316418;
        v38 = "VirtualAudioQueue.h";
        __int16 v39 = 1024;
        int v40 = 171;
        __int16 v41 = 2080;
        uint64_t v42 = v25;
        __int16 v43 = 1024;
        int v44 = v26;
        __int16 v45 = 2080;
        uint64_t v46 = v27;
        __int16 v47 = 2080;
        v48 = a1 + 10;
        uint64_t v8 = "%25s:%-5d %s:%d:%s: %s";
        uint64_t v9 = v24;
        os_log_type_t v10 = OS_LOG_TYPE_INFO;
        goto LABEL_26;
      }
      break;
    case 5:
      int v28 = (os_log_t *)*((void *)a1 + 1);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *((void *)a1 + 2);
        int v31 = a1[6];
        uint64_t v32 = *((void *)a1 + 4);
        int v37 = 136316418;
        v38 = "VirtualAudioQueue.h";
        __int16 v39 = 1024;
        int v40 = 174;
        __int16 v41 = 2080;
        uint64_t v42 = v30;
        __int16 v43 = 1024;
        int v44 = v31;
        __int16 v45 = 2080;
        uint64_t v46 = v32;
        __int16 v47 = 2080;
        v48 = a1 + 10;
        uint64_t v8 = "%25s:%-5d %s:%d:%s: %s";
        goto LABEL_25;
      }
      break;
    case 6:
      uint64_t v33 = *((void *)a1 + 1);
      if (*(unsigned char *)(v33 + 8))
      {
        os_log_t v29 = *(os_log_t *)v33;
        if (*(void *)v33)
        {
          if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v34 = *((void *)a1 + 2);
            int v35 = a1[6];
            uint64_t v36 = *((void *)a1 + 4);
            int v37 = 136316418;
            v38 = "VirtualAudioQueue.h";
            __int16 v39 = 1024;
            int v40 = 177;
            __int16 v41 = 2080;
            uint64_t v42 = v34;
            __int16 v43 = 1024;
            int v44 = v35;
            __int16 v45 = 2080;
            uint64_t v46 = v36;
            __int16 v47 = 2080;
            v48 = a1 + 10;
            uint64_t v8 = "%25s:%-5d %s:%d:%s: %s";
LABEL_25:
            uint64_t v9 = v29;
            os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
LABEL_26:
            uint32_t v13 = 54;
            goto LABEL_27;
          }
        }
      }
      break;
    case 7:
      return;
    default:
      uint64_t v11 = (os_log_t *)*((void *)a1 + 1);
      os_log_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v37 = 136315650;
        v38 = "VirtualAudioQueue.h";
        __int16 v39 = 1024;
        int v40 = 181;
        __int16 v41 = 1024;
        LODWORD(v42) = v2;
        uint64_t v8 = "%25s:%-5d va::VirtualAudioQueue::SendLogMsg unknown priority = %d";
        uint64_t v9 = v12;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        uint32_t v13 = 24;
LABEL_27:
        _os_log_impl(&def_1E50E8, v9, v10, v8, (uint8_t *)&v37, v13);
      }
      break;
  }
}

uint64_t sub_5E28(uint64_t a1, AudioStreamBasicDescription *inSourceFormat, AudioStreamBasicDescription *inDestinationFormat)
{
  int v6 = *(OpaqueAudioConverter **)(a1 + 80);
  if (v6)
  {
    AudioConverterDispose(v6);
    *(void *)(a1 + 80) = 0;
  }
  if (inSourceFormat->mSampleRate != 0.0
    && inDestinationFormat->mSampleRate != 0.0
    && inSourceFormat->mSampleRate != inDestinationFormat->mSampleRate)
  {
    goto LABEL_27;
  }
  AudioFormatID mFormatID = inSourceFormat->mFormatID;
  if (mFormatID)
  {
    AudioFormatID v9 = inDestinationFormat->mFormatID;
    if (v9)
    {
      if (mFormatID != v9) {
        goto LABEL_27;
      }
    }
  }
  UInt32 mBytesPerPacket = inSourceFormat->mBytesPerPacket;
  if (mBytesPerPacket)
  {
    UInt32 v11 = inDestinationFormat->mBytesPerPacket;
    if (v11)
    {
      if (mBytesPerPacket != v11) {
        goto LABEL_27;
      }
    }
  }
  UInt32 mFramesPerPacket = inSourceFormat->mFramesPerPacket;
  if (mFramesPerPacket)
  {
    UInt32 v13 = inDestinationFormat->mFramesPerPacket;
    if (v13)
    {
      if (mFramesPerPacket != v13) {
        goto LABEL_27;
      }
    }
  }
  if ((UInt32 mBytesPerFrame = inSourceFormat->mBytesPerFrame) != 0
    && (UInt32 v15 = inDestinationFormat->mBytesPerFrame) != 0
    && mBytesPerFrame != v15
    || (UInt32 mChannelsPerFrame = inSourceFormat->mChannelsPerFrame) != 0
    && (UInt32 v17 = inDestinationFormat->mChannelsPerFrame) != 0
    && mChannelsPerFrame != v17
    || (UInt32 mBitsPerChannel = inSourceFormat->mBitsPerChannel) != 0
    && (UInt32 v19 = inDestinationFormat->mBitsPerChannel) != 0
    && mBitsPerChannel != v19)
  {
LABEL_27:
    AudioConverterRef outAudioConverter = 0;
  }
  else
  {
    AudioConverterRef outAudioConverter = 0;
    if (sub_EBDC((uint64_t)inSourceFormat, (uint64_t)inDestinationFormat)) {
      goto LABEL_46;
    }
  }
  uint64_t v20 = AudioConverterNew(inSourceFormat, inDestinationFormat, &outAudioConverter);
  if (v20)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v50 = "DSPReformatter.cpp";
      __int16 v51 = 1024;
      int v52 = 82;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
    }
    return v20;
  }
  UInt32 v23 = inSourceFormat->mChannelsPerFrame;
  if (v23 == 1)
  {
    uint64_t v24 = inDestinationFormat->mChannelsPerFrame;
    if (v24 >= 2)
    {
      uint64_t v25 = 4 * v24;
      __chkstk_darwin();
      bzero((char *)&v45 - ((v25 + 15) & 0x7FFFFFFF0), v25);
      OSStatus v26 = AudioConverterSetProperty(outAudioConverter, 0x63686D70u, v25, (char *)&v45 - ((v25 + 15) & 0x7FFFFFFF0));
      if (v26)
      {
        uint64_t v27 = (os_log_t *)sub_32A48(24);
        int v28 = *v27;
        if (*v27)
        {
          if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v50 = "DSPReformatter.cpp";
            __int16 v51 = 1024;
            int v52 = 92;
            __int16 v53 = 1024;
            LODWORD(v54) = v26;
            _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting mono channel map property on converter", buf, 0x18u);
          }
        }
      }
    }
  }
  else if (v23 == 2 && inDestinationFormat->mChannelsPerFrame == 1)
  {
    LODWORD(inPropertyData.__r_.__value_.__l.__data_) = 1;
    OSStatus v29 = AudioConverterSetProperty(outAudioConverter, 0x646D6978u, 4u, &inPropertyData);
    if (v29)
    {
      uint64_t v30 = (os_log_t *)sub_32A48(24);
      int v31 = *v30;
      if (*v30)
      {
        if (os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v50 = "DSPReformatter.cpp";
          __int16 v51 = 1024;
          int v52 = 100;
          __int16 v53 = 1024;
          LODWORD(v54) = v29;
          _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting perform downmix property on converter", buf, 0x18u);
        }
      }
    }
  }
LABEL_46:
  long long v32 = *(_OWORD *)&inSourceFormat->mSampleRate;
  long long v33 = *(_OWORD *)&inSourceFormat->mBytesPerPacket;
  *(void *)(a1 + 32) = *(void *)&inSourceFormat->mBitsPerChannel;
  *(_OWORD *)a1 = v32;
  *(_OWORD *)(a1 + 16) = v33;
  long long v34 = *(_OWORD *)&inDestinationFormat->mSampleRate;
  uint64_t v35 = *(void *)&inDestinationFormat->mBitsPerChannel;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&inDestinationFormat->mBytesPerPacket;
  *(_OWORD *)(a1 + 40) = v34;
  AudioConverterRef v36 = outAudioConverter;
  *(void *)(a1 + 72) = v35;
  *(void *)(a1 + 80) = v36;
  uint64_t v37 = sub_32A48(24);
  if (*(unsigned char *)(v37 + 8))
  {
    v38 = *(NSObject **)v37;
    if (*(void *)v37)
    {
      if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        sub_259A4(&inPropertyData, a1);
        int v39 = SHIBYTE(inPropertyData.__r_.__value_.__r.__words[2]);
        std::string::size_type v40 = inPropertyData.__r_.__value_.__r.__words[0];
        sub_259A4(&v46, a1 + 40);
        p_inuint64_t PropertyData = &inPropertyData;
        if (v39 < 0) {
          p_inuint64_t PropertyData = (std::string *)v40;
        }
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v42 = &v46;
        }
        else {
          uint64_t v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        uint64_t v43 = *(void *)(a1 + 80);
        *(_DWORD *)buf = 136316418;
        v50 = "DSPReformatter.cpp";
        __int16 v51 = 1024;
        int v52 = 110;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        __int16 v55 = 2080;
        v56 = p_inPropertyData;
        __int16 v57 = 2080;
        v58 = v42;
        __int16 v59 = 2048;
        uint64_t v60 = v43;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Reformatter config (this %p): mInputFormat = %s, mOutputFormat = %s, mConverterRef = %p", buf, 0x3Au);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(inPropertyData.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(inPropertyData.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return 0;
}

void sub_62C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  _Unwind_Resume(exception_object);
}

void *sub_62E4(unint64_t a1)
{
  if (a1 >= 0x13B13B13B13B13CLL) {
    sub_60560();
  }
  return operator new(208 * a1);
}

unsigned char *sub_6330(uint64_t a1)
{
  uint64_t v7 = a1 + 48;
  char v8 = 1;
  sub_F648(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v2)
  {
    unint64_t v3 = v2 / 24;
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v3;
    }
    uint64_t v5 = 8;
    do
    {
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 24) + v5) + 32))(*(void *)(*(void *)(a1 + 24) + v5));
      v5 += 24;
      --v4;
    }
    while (v4);
  }
  return sub_C7D4(&v7);
}

void sub_63E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_63F8(uint64_t a1, AudioUnitPropertyID a2, UInt32 *outDataSize, BOOL *a4, AudioUnitScope inScope, AudioUnitElement inElement)
{
  Boolean outWritable = 0;
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    char v8 = *(OpaqueAudioComponentInstance **)(v7 + 16);
  }
  else {
    char v8 = 0;
  }
  uint64_t result = AudioUnitGetPropertyInfo(v8, a2, inScope, inElement, outDataSize, &outWritable);
  if (a4) {
    *a4 = outWritable != 0;
  }
  return result;
}

uint64_t sub_6468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(a1 + 768) & 0xFFFFFFFDLL) != 1)
  {
    UInt32 v17 = (os_log_t *)sub_32A48(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 678;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 776) + 88))(*(void *)(a1 + 776), 0) <= **(_DWORD **)(a1 + 808))
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Simple.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 679;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Precondition failure.");
  }
  uint64_t v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 776) + 96))(*(void *)(a1 + 776), 0);
  (*(void (**)(uint64_t, void))(*(void *)v8 + 112))(v8, *(void *)(a1 + 832));
  **(double **)(a1 + 832) = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
  double v9 = sub_4FF1C(a1, 1);
  long long v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)buf = *(_OWORD *)a4;
  *(_OWORD *)&buf[16] = v10;
  *(void *)uint64_t v27 = *(void *)(a4 + 32);
  uint64_t v11 = *(void *)(a1 + 832);
  *(_OWORD *)&v27[8] = *(_OWORD *)v11;
  *(_OWORD *)&v27[24] = *(_OWORD *)(v11 + 16);
  *(void *)&v27[40] = *(void *)(v11 + 32);
  os_log_t v12 = operator new(0x50uLL);
  uint64_t v24 = v12 + 5;
  uint64_t v25 = v12 + 5;
  long long v13 = *(_OWORD *)&v27[16];
  v12[2] = *(_OWORD *)v27;
  v12[3] = v13;
  v12[4] = *(_OWORD *)&v27[32];
  long long v14 = *(_OWORD *)&buf[16];
  _OWORD *v12 = *(_OWORD *)buf;
  v12[1] = v14;
  std::string __p = v12;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)a2 + 136))(a2, a4, &__p, a3, v9);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_67B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_67EC(uint64_t *a1, uint64_t *a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (!v5
    || (uint64_t result = std::__shared_weak_count::lock(v5), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v8 = *a2, *a1 = *a2, !v8))
  {
    double v9 = (os_log_t *)sub_32A48(13);
    long long v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        long long v13 = "StandardUtilities.h";
        __int16 v14 = 1024;
        int v15 = 267;
        __int16 v16 = 2080;
        UInt32 v17 = "";
        __int16 v18 = 1024;
        int v19 = a3;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_6944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6974(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char *__format, ...)
{
  va_start(va, __format);
  LODWORD(__src[0]) = a1;
  __src[1] = a2;
  __src[2] = a3;
  LODWORD(__src[3]) = a4;
  __src[4] = a5;
  vsnprintf((char *)&__src[5], 0x100uLL, __format, va);
  sub_54694();
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 320, 8);
  *(void *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  memcpy((void *)(v6 + 24), __src, 0x128uLL);
  *(void *)uint64_t v6 = &off_6351A8;
  return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v6);
}

void sub_6A7C(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1) & 1) == 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    if (v4 > 1836343850)
    {
      BOOL v5 = v4 == 1836343851;
      int v6 = 1836344107;
    }
    else
    {
      BOOL v5 = v4 == 1667443507;
      int v6 = 1667509043;
    }
    if (!v5 && v4 != v6)
    {
      double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
      if (v8 != *(double *)a2)
      {
        uint64_t v9 = sub_32A48(22);
        uint64_t v10 = sub_32A48(36);
        char v11 = 0;
        uint64_t v12 = 0;
        *(void *)__int16 v18 = 0x100000002;
        uint64_t v13 = *(void *)(v9 + 8);
        while (1)
        {
          uint64_t v14 = *(int *)&v18[4 * v12];
          char v15 = v11;
          if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
            break;
          }
          char v11 = 1;
          uint64_t v12 = 1;
          if (v15) {
            goto LABEL_18;
          }
        }
        if ((v13 & v14) == 0) {
          uint64_t v9 = v10;
        }
LABEL_18:
        __int16 v16 = *(NSObject **)v9;
        if (v16)
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            double v17 = *(double *)a2;
            *(_DWORD *)__int16 v18 = 136315906;
            *(void *)&v18[4] = "VirtualStream.cpp";
            __int16 v19 = 1024;
            int v20 = 80;
            __int16 v21 = 2048;
            double v22 = v8;
            __int16 v23 = 2048;
            double v24 = v17;
            _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Reporting virtual format sample rate as %f (rate from physical device is %f)", v18, 0x26u);
          }
        }
      }
      *(double *)a2 = v8;
    }
  }
}

uint64_t sub_6C74()
{
  return 0;
}

void sub_6C7C(uint64_t a1)
{
  sub_463E0(*(void **)(a1 + 40));
  sub_463E0(*(void **)(a1 + 16));

  operator delete();
}

uint64_t sub_6CD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && ((int v5 = *(_DWORD *)(a2 + 8), v5 != 1047097200) ? (v6 = v5 == 1013868911) : (v6 = 1), v6))
  {
    if (!sub_3B9AC(a1 + 648))
    {
      uint64_t v7 = (os_log_t *)sub_32A48(13);
      double v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 86;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Could not take io monitor core lock in the start thread.\"", (uint8_t *)&v13, 0x12u);
        }
      }
    }
    if (sub_3B9AC(a1 + 824))
    {
      uint64_t v9 = 2;
    }
    else
    {
      uint64_t v10 = (os_log_t *)sub_32A48(13);
      char v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "IOMonitor.h";
        __int16 v15 = 1024;
        int v16 = 89;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Could not take mIOThreadCallingNormalMutex in the start thread.\"", (uint8_t *)&v13, 0x12u);
      }
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = sub_B3FB4(a1 + 648);
  }
  *a3 = v9;
  return 1;
}

void sub_6E68(uint64_t a1)
{
  uint64_t v2 = sub_32A48(16);
  uint64_t v3 = sub_32A48(26);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8)
    {
      if ((v6 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
  if (*(void *)(v2 + 8))
  {
LABEL_9:
    uint64_t v9 = *(NSObject **)v2;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 32));
      *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
      *(_DWORD *)buf = 136315650;
      if (v10) {
        char v11 = "enabled";
      }
      else {
        char v11 = "disabled";
      }
      __int16 v17 = 1024;
      int v18 = 91;
      __int16 v19 = 2080;
      int v20 = v11;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current enabled state is %s", buf, 0x1Cu);
    }
  }
LABEL_15:
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a1 + 32));
  if (v12)
  {
    if ((atomic_exchange((atomic_uchar *volatile)(a1 + 64), 1u) & 1) == 0)
    {
      int v13 = sub_86BBC(**(_DWORD **)(a1 + 24), COERCE_DOUBLE(1735159650));
      uint64_t v14 = (os_log_t *)sub_32A48(16);
      __int16 v15 = *v14;
      if (*v14)
      {
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
          __int16 v17 = 1024;
          int v18 = 99;
          __int16 v19 = 1024;
          LODWORD(v20) = v13;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Buffer Frame Size: %u", buf, 0x18u);
        }
      }
      operator new();
    }
    sub_2743A0(a1);
  }
}

void sub_74DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf, long long a18)
{
  __cxa_free_exception(v19);
  if (a2 == 1)
  {
    double v22 = __cxa_begin_catch(a1);
    atomic_store(0, (unsigned __int8 *)(v18 + 64));
    __int16 v23 = (os_log_t *)sub_32A48(16);
    double v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "HapticDebugIODelegate.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 120;
      WORD1(a18) = 2080;
      *(void *)((char *)&a18 + 4) = v25;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Caught exception %s while configuring haptic debug captures", (uint8_t *)&buf, 0x1Cu);
    }
    __cxa_end_catch();
    JUMPOUT(0x7308);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_7670(int a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    int v16 = (os_log_t *)sub_32A48(13);
    __int16 v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 57;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inNumberAddresses is 0.\"", v25, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }
  if (!a4)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 58;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: \"inClientData is NULL.\"", v25, 0x12u);
    }
    __int16 v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "inClientData is NULL.");
  }
  if (!a3)
  {
    double v22 = (os_log_t *)sub_32A48(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 59;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: \"inAddresses is NULL.\"", v25, 0x12u);
    }
    double v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "inAddresses is NULL.");
  }
  uint64_t v6 = sub_32A48(1);
  uint64_t v7 = sub_32A48(31);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)uint64_t v25 = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&v25[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
  if (*(void *)(v6 + 8))
  {
LABEL_12:
    int v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v25 = 136315650;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 63;
      __int16 v28 = 1024;
      int v29 = a1;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d IO State for VAD %u changed.", v25, 0x18u);
    }
  }
LABEL_15:
  sub_54694();
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 40, 8);
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = a4;
  *(void *)uint64_t v14 = &off_61F6D8;
  *(void *)(v14 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v14);
  return 0;
}

void sub_7A2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7A50(unsigned int *a1, int a2, int a3)
{
  long long __p = 0uLL;
  uint64_t v25 = 0;
  if (a2)
  {
    if (a2 != 1)
    {
      __int16 v21 = (os_log_t *)sub_32A48(13);
      double v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v27 = 1024;
        int v28 = 490;
        __int16 v29 = 1024;
        int v30 = a2;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unexpected IOProc type %d\"", buf, 0x18u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected IOProc type %d");
    }
    HIBYTE(v25) = 10;
    WORD4(__p) = 25455;
    *(void *)&long long __p = *(void *)"NullIOProc";
    uint64_t v6 = (atomic_uint *)(a1 + 90);
    unsigned int v7 = 1;
    if (!a3) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v8 = atomic_fetch_or(v6, v7);
    goto LABEL_7;
  }
  HIBYTE(v25) = 13;
  qmemcpy(&__p, "NonNullIOProc", 13);
  uint64_t v6 = (atomic_uint *)(a1 + 90);
  unsigned int v7 = 2;
  if (a3) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v8 = atomic_fetch_and(v6, ~v7);
LABEL_7:
  uint64_t v9 = sub_32A48(16);
  uint64_t v10 = sub_32A48(31);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_13;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_13:
  int v16 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 120))(a1);
  p_p = (const char *)&__p;
  if (v25 < 0) {
    p_p = (const char *)__p;
  }
  uint64_t v18 = "not running";
  if (a3) {
    uint64_t v18 = "running";
  }
  unsigned int v19 = atomic_load(a1 + 90);
  sub_6974(3, v9, (uint64_t)"", 492, (uint64_t)"", "IOProc (AggregateDevice %u, IO type %s) running state is now %s (%u).", v16, p_p, v18, v19);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__p);
  }
  return v8;
}

void sub_7CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_7D10(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, uint64_t a8)
{
  long long v11 = *a2;
  long long v12 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v12;
  long long v13 = *a3;
  long long v14 = a3[1];
  *(void *)(a1 + 72) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 40) = v13;
  long long v15 = *a6;
  long long v16 = a6[1];
  *(void *)(a1 + 112) = *((void *)a6 + 4);
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 96) = v16;
  long long v17 = *a7;
  long long v18 = a7[1];
  *(void *)(a1 + 152) = *((void *)a7 + 4);
  *(_OWORD *)(a1 + 136) = v18;
  *(_OWORD *)(a1 + 120) = v17;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  sub_10CBC((unsigned int **)(a1 + 160), a4);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  sub_10CBC((unsigned int **)(a1 + 176), a5);
  *(void *)(a1 + 192) = a8;
  *(void *)(a1 + 200) = 0;
  return a1;
}

void sub_7DBC(_Unwind_Exception *a1)
{
  sub_1216C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7DD0(uint64_t a1, unint64_t *a2)
{
  if (memcmp((const void *)a1, a2, 0x24uLL)
    || memcmp((const void *)(a1 + 40), a2 + 5, 0x24uLL)
    || memcmp((const void *)(a1 + 80), a2 + 10, 0x24uLL)
    || memcmp((const void *)(a1 + 120), a2 + 15, 0x24uLL)
    || *(void *)(a1 + 192) != a2[24]
    || !sub_1250C(*(unsigned int **)(a1 + 160), a2[20]))
  {
    return 0;
  }
  char v4 = *(unsigned int **)(a1 + 176);
  unint64_t v5 = a2[22];

  return sub_1250C(v4, v5);
}

void sub_7E84(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = 0;
    char v9 = 8;
    strcpy((char *)__p, "00000000");
    uint64_t v5 = 7;
    do
    {
      if ((*(void *)(a1 + 80) >> v4))
      {
        if (v9 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *((unsigned char *)v6 + v5) = 49;
      }
      ++v4;
      --v5;
    }
    while (v4 != 8);
    unsigned int v7 = __p;
    if (v9 < 0) {
      unsigned int v7 = (void **)__p[0];
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "AggregateDevice_Common.cpp";
    __int16 v11 = 1024;
    int v12 = 1446;
    __int16 v13 = 2080;
    long long v14 = v7;
    __int16 v15 = 2080;
    long long v16 = "anc|tel|sec|pri|hal";
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags : %s (%s)", (uint8_t *)buf, 0x26u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_8108(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_weak(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_8180(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4)
  {
    dispatch_get_global_queue(0, 0);
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v5 = v4;
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    char v6 = 0;
  }
  else
  {
    char v6 = 1;
  }
  if (AudioObjectPropertiesChanged())
  {
    unsigned int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        v10[0] = 136315394;
        *(void *)&v10[1] = "HP_Object.cpp";
        __int16 v11 = 1024;
        int v12 = 291;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE (theError): \"got an error calling the listeners\"", (uint8_t *)v10, 0x12u);
      }
    }
  }
  if (v5) {
    char v9 = v6;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
}

void sub_8408(_Unwind_Exception *exception_object)
{
}

BOOL sub_8458(uint64_t a1)
{
  uint64_t v2 = pthread_self();
  return pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)) != 0;
}

void sub_8490(atomic_ullong **a1, uint64_t a2, int *a3, char a4)
{
  if ((*(unsigned int (**)(atomic_ullong *))(*a1[1] + 48))(a1[1]))
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    char v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 513;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Cache mutex is held.\"", buf, 0x12u);
      }
    }
  }
  if (!a2) {
    return;
  }
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)v10 + 3);
  if (v11 > 1836414052)
  {
    if (v11 == 1836414053)
    {
      (*(void (**)(atomic_ullong *))(*v10 + 168))(v10);
      return;
    }
    if (v11 == 1986817381)
    {
      sub_ADDDC((uint64_t)v10, a2, (uint64_t)a3);
      return;
    }
    goto LABEL_23;
  }
  if (v11 != 1633969526)
  {
    if (v11 == 1634956402)
    {
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      a2 = a2;
      uint64_t v62 = 0;
      do
      {
        if (*a3 == 1936092532)
        {
          memset(buf, 0, 32);
          long long v64 = 0u;
          long long v65 = 0u;
          int v12 = sub_EBD70((uint64_t)v10, (unint64_t *)buf, (unint64_t *)&v64);
          __int16 v13 = (void *)v64;
          if (v12)
          {
            sub_EE798(&v60, *((_DWORD *)v10 + 2), -1431655765 * ((*((void *)&v64 + 1) - (void)v64) >> 2), (int *)v64);
            sub_EE798(&v60, *(_DWORD *)(v10[14] + 8), -1431655765 * ((*(void *)&buf[8] - *(void *)buf) >> 2), *(int **)buf);
          }
          if (v13) {
            operator delete(v13);
          }
          if (*(void *)buf) {
            operator delete(*(void **)buf);
          }
        }
        else
        {
          long long v14 = (unint64_t *)sub_EE470(&v60, *((_DWORD *)v10 + 2));
          sub_74758(v14, a3);
        }
        a3 += 3;
        --a2;
      }
      while (a2);
      sub_EE7F4(v60, v61);
      *(void *)buf = &v60;
      sub_EE3E4((void ***)buf);
      return;
    }
LABEL_23:
    (*(void (**)(atomic_ullong *, uint64_t, int *, uint64_t))(*v10 + 72))(v10, a2, a3, 1);
    return;
  }
  int v57 = 0;
  __int16 v15 = 0;
  long long v16 = 0;
  unint64_t v58 = 0;
  uint64_t v17 = 0;
  unsigned int v56 = a2;
  uint64_t v18 = a2;
  do
  {
    unsigned int v19 = (unsigned int *)&a3[3 * v17];
    int v20 = *v19;
    if ((int)*v19 > 1735354733)
    {
      if (v20 > 1935762280)
      {
        if (v20 == 1935762281)
        {
          sub_C7754((uint64_t)v10);
        }
        else if (v20 == 1953002354 || v20 == 1986225266)
        {
          sub_C683C((uint64_t)v10);
        }
        goto LABEL_80;
      }
      if (v20 != 1735354734)
      {
        int v22 = 1886807154;
LABEL_43:
        if (v20 == v22)
        {
          __int16 v23 = (os_log_t *)sub_32A48(41);
          double v24 = *v23;
          if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(&v64, *v19);
            uint64_t v25 = &v64;
            if (SBYTE7(v65) < 0) {
              uint64_t v25 = (long long *)v64;
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3165;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v25;
            _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Forwarding '%s' property change.", buf, 0x1Cu);
            if (SBYTE7(v65) < 0) {
              operator delete((void *)v64);
            }
          }
          sub_C8674((unint64_t)v10);
        }
        goto LABEL_80;
      }
      if ((a4 & 1) == 0)
      {
        v10[80] = (atomic_ullong)pthread_self();
        int v57 = 1;
      }
      *(void *)buf = *(void *)v19;
      *(_DWORD *)&buf[8] = v19[2];
      if ((unint64_t)v16 >= v58)
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 2) + 1;
        if (v33 > 0x1555555555555555) {
          sub_60548();
        }
        if (0x5555555555555556 * ((uint64_t)(v58 - (void)v15) >> 2) > v33) {
          unint64_t v33 = 0x5555555555555556 * ((uint64_t)(v58 - (void)v15) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)v15) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v34 = 0x1555555555555555;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34) {
          unint64_t v34 = (unint64_t)sub_564C(v34);
        }
        else {
          uint64_t v35 = 0;
        }
        unint64_t v36 = v34 + 4 * ((v16 - v15) >> 2);
        *(void *)unint64_t v36 = *(void *)buf;
        *(_DWORD *)(v36 + 8) = *(_DWORD *)&buf[8];
        uint64_t v37 = (char *)v36;
        while (v16 != v15)
        {
          uint64_t v38 = *(void *)(v16 - 12);
          v16 -= 12;
          int v39 = *((_DWORD *)v16 + 2);
          *(void *)(v37 - 12) = v38;
          v37 -= 12;
          *((_DWORD *)v37 + 2) = v39;
        }
        unint64_t v58 = v34 + 12 * v35;
        long long v16 = (char *)(v36 + 12);
        if (v15) {
          operator delete(v15);
        }
        __int16 v15 = v37;
      }
      else
      {
        uint64_t v30 = *(void *)v19;
        *((_DWORD *)v16 + 2) = v19[2];
        *(void *)long long v16 = v30;
        v16 += 12;
      }
    }
    else if (v20 <= 1635153006)
    {
      if (v20 != 1165513555)
      {
        int v22 = 1633973868;
        goto LABEL_43;
      }
      __int16 v26 = (os_log_t *)sub_32A48(1);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3154;
        int v28 = v27;
        __int16 v29 = "%25s:%-5d ExclavesSensorStatus changed";
LABEL_61:
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, v29, buf, 0x12u);
      }
    }
    else
    {
      switch(v20)
      {
        case 1635153007:
          int v31 = (os_log_t *)sub_32A48(1);
          os_log_t v32 = *v31;
          if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3150;
            int v28 = v32;
            __int16 v29 = "%25s:%-5d voice trigger occurred";
            goto LABEL_61;
          }
          break;
        case 1684103987:
          sub_CBCD0(v10);
          break;
        case 1718839674:
          sub_B1470((uint64_t)v10);
          break;
      }
    }
LABEL_80:
    ++v17;
  }
  while (v17 != v18);
  BOOL v59 = 0;
  std::string::size_type v40 = pthread_self();
  if (pthread_equal(v40, (pthread_t)atomic_load_explicit(v10 + 83, memory_order_acquire)))
  {
    BOOL v59 = 1;
    goto LABEL_85;
  }
  __int16 v41 = pthread_self();
  int v42 = pthread_equal(v41, (pthread_t)atomic_load_explicit(v10 + 94, memory_order_acquire));
  BOOL v59 = v42 != 0;
  if (v42) {
LABEL_85:
  }
    sub_B3DBC(v10 + 81);
  *(void *)&long long v64 = off_6203F0;
  *((void *)&v64 + 1) = &v59;
  *(void *)&long long v65 = v10;
  *((void *)&v65 + 1) = &v64;
  sub_528DC(buf, 1, (uint64_t)&v64);
  sub_4F750(&v64);
  if (v15 == v16)
  {
    (*(void (**)(atomic_ullong *, void, int *, uint64_t))(*v10 + 72))(v10, v56, a3, 1);
  }
  else
  {
    uint64_t v43 = 0;
    int v44 = 0;
    unint64_t v45 = 0;
    std::string v46 = &a3[3 * v18];
    do
    {
      __int16 v47 = v15;
      while (a3[1] != *((_DWORD *)v47 + 1) || *a3 != *(_DWORD *)v47 || a3[2] != *((_DWORD *)v47 + 2))
      {
        v47 += 12;
        if (v47 == v16) {
          goto LABEL_93;
        }
      }
      if (v47 != v16) {
        goto LABEL_112;
      }
LABEL_93:
      uint64_t v60 = *(void *)a3;
      LODWORD(v61) = a3[2];
      if ((unint64_t)v44 >= v45)
      {
        unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 2) + 1;
        if (v49 > 0x1555555555555555) {
          sub_60548();
        }
        if (0x5555555555555556 * ((uint64_t)(v45 - (void)v43) >> 2) > v49) {
          unint64_t v49 = 0x5555555555555556 * ((uint64_t)(v45 - (void)v43) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (void)v43) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v50 = 0x1555555555555555;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50) {
          unint64_t v50 = (unint64_t)sub_564C(v50);
        }
        else {
          uint64_t v51 = 0;
        }
        unint64_t v52 = v50 + 4 * ((v44 - v43) >> 2);
        *(void *)unint64_t v52 = v60;
        *(_DWORD *)(v52 + 8) = v61;
        __int16 v53 = (char *)v52;
        while (v44 != v43)
        {
          uint64_t v54 = *(void *)(v44 - 12);
          v44 -= 12;
          int v55 = *((_DWORD *)v44 + 2);
          *(void *)(v53 - 12) = v54;
          v53 -= 12;
          *((_DWORD *)v53 + 2) = v55;
        }
        unint64_t v45 = v50 + 12 * v51;
        int v44 = (char *)(v52 + 12);
        if (v43) {
          operator delete(v43);
        }
        uint64_t v43 = v53;
      }
      else
      {
        uint64_t v48 = *(void *)a3;
        *((_DWORD *)v44 + 2) = a3[2];
        *(void *)int v44 = v48;
        v44 += 12;
      }
LABEL_112:
      a3 += 3;
    }
    while (a3 != v46);
    if (v44 != v43) {
      (*(void (**)(atomic_ullong *, void, char *, uint64_t))(*v10 + 72))(v10, -1431655765 * ((unint64_t)(v44 - v43) >> 2), v43, 1);
    }
    (*(void (**)(atomic_ullong *, void, char *, void))(*v10 + 72))(v10, -1431655765 * ((unint64_t)(v16 - v15) >> 2), v15, 0);
    if (v43) {
      operator delete(v43);
    }
  }
  sub_52A2C((uint64_t)buf);
  sub_52588((uint64_t)buf);
  if (v57) {
    v10[80] = 0;
  }
  if (v15) {
    operator delete(v15);
  }
}

void sub_8E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,long long buf)
{
  if (a2)
  {
    if (a15) {
      *(void *)(v21 + 640) = 0;
    }
    if (v22) {
      operator delete(v22);
    }
    __cxa_begin_catch(exception_object);
    double v24 = (os_log_t *)sub_32A48(1);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "VirtualAudio_DevicePropertyCache.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 549;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Exception thrown from notification.", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x8DC8);
  }
  _Unwind_Resume(exception_object);
}

void sub_8F90(char *a1)
{
  if (a1)
  {
    sub_8F90(*(void *)a1);
    sub_8F90(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t *sub_8FEC(uint64_t *result)
{
  uint64_t v1 = *result;
  std::__shared_weak_count *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

void sub_9040(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      char v6 = v5;
      uint64_t v7 = *(void *)(a1 + 8);
      if (v7)
      {
        uint64_t v15 = v7 + 48;
        char v16 = 1;
        sub_F648(v7 + 48);
        id v8 = *(id *)sub_32A48(24);
        char v9 = v8;
        if (v8)
        {
          uint64_t v10 = v8;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(v7 + 735) < 0)
            {
              sub_21E8C(__p, *(void **)(v7 + 712), *(void *)(v7 + 720));
            }
            else
            {
              *(_OWORD *)long long __p = *(_OWORD *)(v7 + 712);
              uint64_t v14 = *(void *)(v7 + 728);
            }
            int v11 = __p;
            if (v14 < 0) {
              int v11 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315906;
            uint64_t v18 = "DSPChain.mm";
            __int16 v19 = 1024;
            int v20 = 2248;
            __int16 v21 = 2080;
            int v22 = v11;
            __int16 v23 = 1024;
            int v24 = v4;
            _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating graph %s with speaker interference mitigation state: %d", buf, 0x22u);
            if (SHIBYTE(v14) < 0) {
              operator delete(__p[0]);
            }
          }
        }
        v12.n128_u32[0] = 1.0;
        if (!v4) {
          v12.n128_f32[0] = 0.0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)v7 + 72))(v7, 1685287015, 1717789543, 0, v12);
        sub_C7D4(&v15);
      }
      sub_4636C(v6);
    }
  }
}

void sub_9224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_C7D4(va);
  sub_4636C(v5);
  _Unwind_Resume(a1);
}

std::string *sub_9264(std::string *a1, uint64_t a2, int a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 != a2)
  {
    while (1)
    {
      uint64_t v7 = (uint64_t *)(v6 + 16);
      if (a3)
      {
        sub_136B74(__p, (uint64_t)v7);
        id v8 = v18 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        char v9 = v18 >= 0 ? (void *)HIBYTE(v18) : __p[1];
        std::string::append(a1, v8, (std::string::size_type)v9);
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        sub_549A4((uint64_t *)&v15, v7, "", 3079);
        uint64_t v10 = v15;
        int v11 = v15 + 116;
        os_unfair_lock_lock(v15 + 116);
        if (SHIBYTE(v10[129]._os_unfair_lock_opaque) < 0)
        {
          sub_21E8C(__p, *(void **)&v10[124]._os_unfair_lock_opaque, *(void *)&v10[126]._os_unfair_lock_opaque);
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)&v10[124]._os_unfair_lock_opaque;
          uint64_t v18 = *(void *)&v10[128]._os_unfair_lock_opaque;
        }
        os_unfair_lock_unlock(v11);
        if (v18 >= 0) {
          __n128 v12 = __p;
        }
        else {
          __n128 v12 = (void **)__p[0];
        }
        if (v18 >= 0) {
          std::string::size_type v13 = HIBYTE(v18);
        }
        else {
          std::string::size_type v13 = (std::string::size_type)__p[1];
        }
        std::string::append(a1, (const std::string::value_type *)v12, v13);
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[0]);
        }
        if (v16) {
          sub_4636C(v16);
        }
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_93F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_9468(uint64_t a1, unsigned __int8 a2)
{
  *(void *)&inAddress.mSelector = 0x676C6F6264617463;
  inAddress.mElement = 0;
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  int HasProperty = AudioObjectHasProperty(v4, &inAddress);
  if (!HasProperty)
  {
    std::string::size_type v13 = (os_log_t *)sub_32A48(16);
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)__p, &inAddress.mSelector);
        uint64_t v15 = v23 >= 0 ? __p : (void **)__p[0];
        buf.mSelector = 136315650;
        *(void *)&buf.mScope = "AggregateDevice.cpp";
        __int16 v25 = 1024;
        int v26 = 410;
        __int16 v27 = 2080;
        int v28 = v15;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HasProperty returned false for %s", (uint8_t *)&buf, 0x1Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (sub_55020(v6, &inAddress))
  {
    if (!HasProperty) {
      return;
    }
    if (a2)
    {
      int v9 = 1;
    }
    else
    {
      if ((a2 & 0x20) == 0)
      {
        uint64_t v7 = "Disabling";
        if ((a2 & 0x80) != 0) {
          uint64_t v7 = "Enabling";
        }
        if ((a2 & 0x40) != 0) {
          id v8 = "Enabling";
        }
        else {
          id v8 = v7;
        }
        if ((a2 & 0x40) != 0) {
          int v9 = 3;
        }
        else {
          int v9 = (unint64_t)(a2 & 0x80) >> 5;
        }
        goto LABEL_31;
      }
      int v9 = 2;
    }
    id v8 = "Enabling";
LABEL_31:
    uint64_t v16 = (os_log_t *)sub_32A48(16);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      buf.mSelector = 136315906;
      *(void *)&buf.mScope = "AggregateDevice.cpp";
      __int16 v25 = 1024;
      int v26 = 434;
      __int16 v27 = 2080;
      int v28 = (void *)v8;
      __int16 v29 = 1024;
      int v30 = v9;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s HAL data taps, Setting kAudioDevicePropertyEnableCaptureFile to %d", (uint8_t *)&buf, 0x22u);
    }
    AudioObjectID v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    LODWORD(__p[0]) = v9;
    strcpy((char *)&buf, "ctadbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    OSStatus v19 = AudioObjectSetPropertyData(v18, &buf, 0, 0, 4u, __p);
    if (v19)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v19;
    }
    return;
  }
  uint64_t v10 = (os_log_t *)sub_32A48(16);
  int v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
  {
    sub_16C9C4((uint64_t)__p, &inAddress.mSelector);
    __n128 v12 = v23 >= 0 ? __p : (void **)__p[0];
    buf.mSelector = 136315650;
    *(void *)&buf.mScope = "AggregateDevice.cpp";
    __int16 v25 = 1024;
    int v26 = 413;
    __int16 v27 = 2080;
    int v28 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d IsPropertySettable is false for %s", (uint8_t *)&buf, 0x1Cu);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_9814(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_9828(atomic_ullong *a1, uint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v4 = (uint64_t)(a1 + 81);
    uint64_t v5 = pthread_self();
    if (!pthread_equal(v5, (pthread_t)atomic_load_explicit(a1 + 105, memory_order_acquire)))
    {
      uint64_t v7 = (os_log_t *)sub_32A48(13);
      id v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          __n128 v12 = "IOMonitor.h";
          __int16 v13 = 1024;
          int v14 = 115;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"It is illegal to Unlock_FromStartOrNullStopThread from a thread that does not own mIOThreadCallingNormalMutex.\"", (uint8_t *)&v11, 0x12u);
        }
      }
    }
    sub_3A944((uint64_t)(a1 + 103));
    AudioObjectID v6 = pthread_self();
    if (!pthread_equal(v6, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
    {
      int v9 = (os_log_t *)sub_32A48(13);
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          __n128 v12 = "IOMonitor.h";
          __int16 v13 = 1024;
          int v14 = 118;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"It is illegal to call Unlock_FromStartOrNullStopThread from a thread that does not own the IO Monitor.\"", (uint8_t *)&v11, 0x12u);
        }
      }
    }
    sub_3A944(v4);
  }
  else if (a2 == 1)
  {
    uint64_t v3 = a1 + 81;
    sub_B3DBC(v3);
  }
}

void sub_99F4(uint64_t a1, unsigned int a2)
{
  sub_50020(a1);
  if (!*(void *)(a1 + 416))
  {
    int v28 = (os_log_t *)sub_32A48(13);
    __int16 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      __int16 v48 = 1024;
      int v49 = 379;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: \"No HAL IO Proc has been set.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No HAL IO Proc has been set.");
  }
  if (!*(void *)(a1 + 456))
  {
    int v31 = (os_log_t *)sub_32A48(13);
    os_log_t v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      __int16 v48 = 1024;
      int v49 = 380;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mClientIOProc is NULL]: \"No client IO Proc has been set.\"", buf, 0x12u);
    }
    unint64_t v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "No client IO Proc has been set.");
  }
  char v4 = sub_7A50((unsigned int *)a1, a2, 1);
  if ((v4 & 3) == 0)
  {
    __int16 v13 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v13) {
      caulk::concurrent::messenger::drain(v13);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 616))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
    sub_7E84(a1);
  }
  char v5 = v4;
  uint64_t v6 = sub_32A48(16);
  uint64_t v7 = sub_32A48(31);
  if (a2 == 1 && (v5 & 1) != 0)
  {
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_30;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_30:
    __int16 v25 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        __int16 v48 = 1024;
        int v49 = 447;
        __int16 v50 = 1024;
        LODWORD(v51) = v26;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.", buf, 0x18u);
      }
    }
  }
  else
  {
    char v14 = 0;
    uint64_t v15 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v16 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&buf[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v7 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1;
      if (v18) {
        goto LABEL_19;
      }
    }
    if ((v16 & v17) == 0) {
      uint64_t v6 = v7;
    }
LABEL_19:
    OSStatus v19 = *(NSObject **)v6;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a2);
      int v20 = v46;
      __int16 v21 = (void **)__p[0];
      int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      char v23 = v20 >= 0 ? __p : v21;
      __int16 v48 = 1024;
      int v49 = 452;
      __int16 v50 = 2080;
      uint64_t v51 = v23;
      __int16 v52 = 1024;
      LODWORD(v53) = v22;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting IO type %s on AggregateDevice %u.", buf, 0x22u);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
    }
    kdebug_trace();
    if (a2 == 1) {
      int v24 = 0;
    }
    else {
      int v24 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    OSStatus v27 = AudioDeviceStart(*(_DWORD *)(a1 + 128), v24);
    kdebug_trace();
    if (v27)
    {
      sub_7A50((unsigned int *)a1, a2, 0);
      unint64_t v34 = (os_log_t *)sub_32A48(16);
      uint64_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v27);
        int v36 = v46;
        uint64_t v37 = (void **)__p[0];
        sub_4F64((uint64_t)v43, (os_unfair_lock_t)(a1 + 8));
        uint64_t v38 = __p;
        if (v36 < 0) {
          uint64_t v38 = v37;
        }
        if (v44 >= 0) {
          int v39 = v43;
        }
        else {
          int v39 = (void **)v43[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        __int16 v48 = 1024;
        int v49 = 460;
        __int16 v50 = 2080;
        uint64_t v51 = v38;
        __int16 v52 = 2080;
        __int16 v53 = v39;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", buf, 0x26u);
        if (v44 < 0) {
          operator delete(v43[0]);
        }
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }
      std::string::size_type v40 = (os_log_t *)sub_32A48(13);
      __int16 v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        __int16 v48 = 1024;
        int v49 = 461;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (startResult): \"Unable to start IO.\"", buf, 0x12u);
      }
      int v42 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v42 = &off_6414D8;
      v42[2] = v27;
    }
  }
}

void sub_A62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A670(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    int v22 = (os_log_t *)sub_32A48(13);
    char v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v28 = 1024;
      int v29 = 679;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceStart: no plug-in\"", buf, 0x12u);
    }
    int v21 = 1852797029;
LABEL_30:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v21;
  }
  sub_3A8A8();
  uint64_t v5 = sub_33438(a2);
  if (!v5 || ((v6 = v5, int v7 = *(_DWORD *)(v5 + 12), v7 != 1633773415) ? (v8 = v7 == 1633969526) : (v8 = 1), !v8))
  {
    OSStatus v19 = (os_log_t *)sub_32A48(13);
    int v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
        __int16 v28 = 1024;
        int v29 = 683;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceStart: no device with given ID\"", buf, 0x12u);
      }
    }
    int v21 = 560227702;
    goto LABEL_30;
  }
  uint64_t v9 = sub_32A48(5);
  uint64_t v10 = sub_32A48(31);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_14;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_14:
  uint64_t v16 = *(NSObject **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 96))(__p, v6);
    uint64_t v17 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v28 = 1024;
    int v29 = 686;
    __int16 v30 = 2048;
    uint64_t v31 = a3;
    __int16 v32 = 2080;
    unint64_t v33 = v17;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client request to start IO proc ID %p on VAD: '%s'.", buf, 0x26u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 344))(v6, a3);
  return 0;
}

void sub_A9C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, __int16 a17, __int16 a18, long long a19)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v21 = (os_log_t *)sub_32A48(5);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 694;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
        goto LABEL_20;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96))(&__p, v19);
      char v23 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 694;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
      if (a15 < 0) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    int v24 = (os_log_t *)sub_32A48(5);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 701;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
        goto LABEL_20;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96))(&__p, v19);
      char v26 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 701;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
      if (a15 < 0) {
LABEL_18:
      }
        operator delete(__p);
    }
  }
LABEL_20:
  __cxa_end_catch();
  JUMPOUT(0xA854);
}

uint64_t *sub_ACF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  __int16 v32 = a1;
  v33[0] = v1;
  v33[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_13A4C(&v34, v33, 53);
  uint64_t v3 = v34;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 80))
    {
      int v29 = (os_log_t *)sub_32A48(13);
      __int16 v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 63;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    sub_1329C(buf, *(void *)(v34 + 8), *(std::__shared_weak_count **)(v34 + 16));
    uint64_t v5 = *(void *)buf;
    char v4 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
      sub_4636C(v4);
    }
    uint64_t v6 = sub_32A48(16);
    uint64_t v7 = sub_32A48(24);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12)
      {
        if ((v10 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_15;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
    if (*(void *)(v6 + 8))
    {
LABEL_15:
      uint64_t v13 = *(NSObject **)v6;
      if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = (void *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0) {
          uint64_t v14 = (void *)*v14;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 67;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Registering %s for Device Orientation Updates", buf, 0x1Cu);
      }
    }
LABEL_20:
    char v15 = *(uint64_t (**)(uint64_t, unsigned char *))(v3 + 96);
    uint64_t v16 = (void *)(v3 + 24);
    if (*(char *)(v3 + 47) >= 0) {
      uint64_t v17 = (char *)(v3 + 24);
    }
    else {
      uint64_t v17 = *(char **)(v3 + 24);
    }
    sub_5834(v36, v17);
    uint64_t v18 = *(void *)&v36[8];
    *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 1174405120;
    *(void *)&buf[16] = sub_12700;
    *(void *)&unsigned char buf[24] = &unk_634A20;
    uint64_t v42 = v5;
    uint64_t v43 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = v15(v18, buf);
    sub_49A90(v36);
    *(_DWORD *)(v3 + 80) = v19 == 0;
    if (v19)
    {
      uint64_t v20 = sub_32A48(16);
      uint64_t v21 = sub_32A48(24);
      char v22 = 0;
      uint64_t v23 = 0;
      *(void *)int v36 = 0x100000002;
      uint64_t v24 = *(void *)(v20 + 8);
      while (1)
      {
        uint64_t v25 = *(int *)&v36[4 * v23];
        char v26 = v22;
        if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
          break;
        }
        char v22 = 1;
        uint64_t v23 = 1;
        if (v26) {
          goto LABEL_32;
        }
      }
      if ((v24 & v25) == 0) {
        uint64_t v20 = v21;
      }
LABEL_32:
      OSStatus v27 = *(NSObject **)v20;
      if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v3 + 47) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        *(_DWORD *)int v36 = 136315906;
        *(void *)&v36[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 80;
        __int16 v37 = 1024;
        int v38 = v19;
        __int16 v39 = 2080;
        std::string::size_type v40 = v16;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed [%d] to register %s for Device Orientation Updates", v36, 0x22u);
      }
    }
    if (v43) {
      std::__shared_weak_count::__release_weak(v43);
    }
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v35) {
    sub_4636C(v35);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_8FEC((uint64_t *)&v32);
}

void sub_B120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v20);
  if (a14) {
    sub_4636C(a14);
  }
  if (a2 == 3)
  {
    uint64_t v23 = __cxa_begin_catch(exception_object);
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    os_log_t v25 = *v24;
    if (!*v24 || !os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    int v26 = v23[2];
    LODWORD(buf) = 136316162;
    *(void *)((char *)&buf + 4) = "StandardUtilities.h";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 429;
    WORD1(a16) = 1024;
    DWORD1(a16) = v26;
    WORD4(a16) = 2080;
    *(void *)((char *)&a16 + 10) = "";
    a18 = 1024;
    a19 = 57;
    OSStatus v27 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
    __int16 v28 = v25;
    uint32_t v29 = 40;
  }
  else
  {
    __int16 v30 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v31 = v30;
      __int16 v32 = (os_log_t *)sub_32A48(13);
      os_log_t v33 = *v32;
      if (!*v32 || !os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 430;
      WORD1(a16) = 2080;
      *(void *)((char *)&a16 + 4) = v34;
      WORD6(a16) = 2080;
      *(void *)((char *)&a16 + 14) = "";
      HIWORD(a19) = 1024;
      a20 = 57;
      OSStatus v27 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
      __int16 v28 = v33;
      uint32_t v29 = 44;
    }
    else
    {
      uint64_t v35 = (os_log_t *)sub_32A48(13);
      os_log_t v36 = *v35;
      if (!*v35 || !os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 431;
      WORD1(a16) = 2080;
      *(void *)((char *)&a16 + 4) = "";
      WORD6(a16) = 1024;
      *(_DWORD *)((char *)&a16 + 14) = 57;
      OSStatus v27 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
      __int16 v28 = v36;
      uint32_t v29 = 34;
    }
  }
  _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, v29);
LABEL_16:
  __cxa_end_catch();
  if (!a12) {
    JUMPOUT(0xB038);
  }
  JUMPOUT(0xB030);
}

void sub_B680(uint64_t *a1, void *a2, char *a3, int a4)
{
  os_log_t v25 = &v25;
  int v26 = (uint64_t *)&v25;
  uint64_t v27 = 0;
  uint64_t v5 = (void *)a2[1];
  if (v5 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    uint64_t v9 = a1 + 2;
    goto LABEL_10;
  }
  uint64_t v9 = &v27;
  do
  {
    uint64_t v10 = (std::__shared_weak_count *)v5[3];
    if (!v10 || (uint64_t v11 = std::__shared_weak_count::lock(v10)) == 0 || (v12 = v5[2]) == 0)
    {
      uint64_t v20 = (os_log_t *)sub_32A48(13);
      uint64_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        if (a3)
        {
          uint64_t v23 = strrchr(a3, 47);
          if (v23) {
            char v22 = v23 + 1;
          }
          else {
            char v22 = a3;
          }
        }
        else
        {
          char v22 = 0;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint32_t v29 = "StandardUtilities.h";
        __int16 v30 = 1024;
        int v31 = 267;
        __int16 v32 = 2080;
        os_log_t v33 = v22;
        __int16 v34 = 1024;
        int v35 = a4;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
    }
    uint64_t v13 = operator new(0x20uLL);
    *(void *)&long long v14 = v12;
    *((void *)&v14 + 1) = v11;
    v13[1] = v14;
    uint64_t v15 = (uint64_t)v25;
    *(void *)uint64_t v13 = v25;
    *((void *)v13 + 1) = &v25;
    *(void *)(v15 + 8) = v13;
    uint64_t v16 = v27 + 1;
    os_log_t v25 = v13;
    ++v27;
    uint64_t v5 = (void *)v5[1];
  }
  while (v5 != a2);
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (v16)
  {
    uint64_t v17 = v26;
    uint64_t v18 = *v26;
    *(void *)(v18 + 8) = *((void *)v13 + 1);
    **((void **)v13 + 1) = v18;
    uint64_t v19 = *a1;
    *(void *)(v19 + 8) = v17;
    uint64_t *v17 = v19;
    *a1 = (uint64_t)v13;
    *((void *)v13 + 1) = a1;
    a1[2] = v16;
LABEL_10:
    *uint64_t v9 = 0;
  }
  sub_B8E4((uint64_t *)&v25);
}

void sub_B8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_4636C(v2);
  }
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B8E4(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          sub_4636C(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_B95C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      __int16 v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 443;
      uint64_t v21 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_ObjectSetPro"
            "pertyData: no plug-in\"";
LABEL_17:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v27, 0x12u);
    }
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a3)
  {
    char v22 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      __int16 v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 444;
      uint64_t v21 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: \"HP_HardwarePlugIn_ObjectSet"
            "PropertyData: no address\"";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  sub_3A8A8();
  uint64_t v13 = sub_33438(a2);
  uint64_t v14 = v13;
  if (!v13)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    os_log_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      __int16 v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 447;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theObject is NULL]: \"HP_HardwarePlugIn_ObjectSetPropertyData: no object with given ID\"", (uint8_t *)&v27, 0x12u);
    }
    int v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v26 = &off_6414D8;
    v26[2] = 560947818;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  uint64_t v16 = v15;
  if (v15) {
    int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  }
  else {
    int v17 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 64))(v14, a3, a4, a5, a6, a7, 0);
  if (v16 && v17) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  return 0;
}

void sub_BCCC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0xBA84);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_BD28(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  os_log_t v36 = a1;
  uint64_t v37 = v2;
  int v38 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_67EC(&v39, &v37, 138);
  uint64_t v3 = v39;
  if (v39)
  {
    uint64_t v5 = *(void *)(v39 + 8);
    uint64_t v4 = *(std::__shared_weak_count **)(v39 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_54050(&v41);
    if (v4)
    {
      uint64_t v6 = v41;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = std::__shared_weak_count::lock(v4);
      if (v7 && v5)
      {
        char v8 = (os_log_t *)sub_32A48(24);
        uint64_t v9 = *v8;
        if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
        {
          if (*(char *)(v5 + 47) < 0)
          {
            sub_21E8C(__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)(v5 + 24);
            uint64_t v44 = *(void *)(v5 + 40);
          }
          uint64_t v14 = __p;
          if (v44 < 0) {
            uint64_t v14 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v48 = "SpeakerInterferenceMitigationIODelegate.cpp";
          __int16 v49 = 1024;
          int v50 = 55;
          __int16 v51 = 2080;
          __int16 v52 = v14;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Adding speaker interference mitigation IO delegate %s", buf, 0x1Cu);
          if (SHIBYTE(v44) < 0) {
            operator delete(__p[0]);
          }
        }
        std::mutex::lock((std::mutex *)v6);
        uint64_t v16 = (void **)(v6 + 72);
        uint64_t v15 = *(void ***)(v6 + 72);
        int v35 = (void ***)(v6 + 64);
        if (v15)
        {
          int v17 = (void **)(v6 + 72);
          uint64_t v18 = *(void **)(v6 + 72);
          do
          {
            char v19 = sub_15E8C(v18 + 4, (void **)(v3 + 24));
            if (v19 >= 0) {
              uint64_t v20 = v18;
            }
            else {
              uint64_t v20 = v18 + 1;
            }
            if (v19 >= 0) {
              int v17 = (void **)v18;
            }
            uint64_t v18 = (void *)*v20;
          }
          while (*v20);
          if (v17 == v16)
          {
            char v22 = (void **)(v6 + 72);
          }
          else
          {
            if ((sub_15E8C((void *)(v3 + 24), v17 + 4) & 0x80) == 0)
            {
              atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              uint64_t v21 = (std::__shared_weak_count *)v17[8];
              v17[7] = (void *)v5;
              v17[8] = v4;
              if (v21) {
                std::__shared_weak_count::__release_weak(v21);
              }
              goto LABEL_88;
            }
            char v22 = (void **)(v6 + 72);
            if (v16 != v17)
            {
              if ((sub_15E8C((void *)(v3 + 24), v17 + 4) & 0x80) == 0)
              {
                if ((sub_15E8C(v17 + 4, (void **)(v3 + 24)) & 0x80) == 0)
                {
                  unint64_t v45 = v17;
                  char v46 = v17;
                  char v22 = (void **)&v45;
                  goto LABEL_81;
                }
                int v26 = v17[1];
                if (v26)
                {
                  int v27 = (void **)v17[1];
                  do
                  {
                    char v22 = v27;
                    int v27 = (void **)*v27;
                  }
                  while (v27);
                }
                else
                {
                  __int16 v28 = v17;
                  do
                  {
                    char v22 = (void **)v28[2];
                    BOOL v29 = *v22 == v28;
                    __int16 v28 = v22;
                  }
                  while (!v29);
                }
                if (v22 == v16 || (sub_15E8C((void *)(v3 + 24), v22 + 4) & 0x80) != 0)
                {
                  if (!v26)
                  {
                    char v46 = v17;
                    char v22 = v17 + 1;
                    goto LABEL_80;
                  }
                  goto LABEL_79;
                }
                goto LABEL_60;
              }
              uint64_t v15 = (void **)*v17;
              char v22 = v17;
            }
          }
          if (*v35 == v22)
          {
            uint64_t v24 = v22;
LABEL_66:
            if (v15)
            {
              char v46 = v24;
              char v22 = v24 + 1;
              goto LABEL_80;
            }
LABEL_79:
            char v46 = v22;
            goto LABEL_80;
          }
          if (v15)
          {
            uint64_t v23 = v15;
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = (void **)v23[1];
            }
            while (v23);
            goto LABEL_59;
          }
        }
        else
        {
          char v22 = (void **)(v6 + 72);
          if (*(void ***)(v6 + 64) == v16) {
            goto LABEL_79;
          }
          uint64_t v15 = 0;
          char v22 = (void **)(v6 + 72);
        }
        uint64_t v24 = v22;
        do
        {
          os_log_t v25 = v24;
          uint64_t v24 = (void **)v24[2];
        }
        while (*v24 == v25);
LABEL_59:
        if ((sub_15E8C(v24 + 4, (void **)(v3 + 24)) & 0x80) == 0)
        {
LABEL_60:
          char v22 = (void **)sub_15DF8((uint64_t)v35, &v46, (void **)(v3 + 24));
LABEL_80:
          int v17 = (void **)*v22;
LABEL_81:
          if (!v17)
          {
            int v30 = operator new(0x48uLL);
            __p[0] = v30;
            __p[1] = (void *)(v6 + 72);
            LOBYTE(v44) = 0;
            int v31 = v30 + 4;
            if (*(char *)(v3 + 47) < 0)
            {
              sub_21E8C(v31, *(void **)(v3 + 24), *(void *)(v3 + 32));
            }
            else
            {
              long long v32 = *(_OWORD *)(v3 + 24);
              v30[6] = *(void *)(v3 + 40);
              *(_OWORD *)int v31 = v32;
            }
            v30[7] = v5;
            v30[8] = v4;
            atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            LOBYTE(v44) = 1;
            os_log_t v33 = v46;
            *int v30 = 0;
            v30[1] = 0;
            v30[2] = v33;
            *char v22 = v30;
            __int16 v34 = (void **)**v35;
            if (v34)
            {
              os_log_t *v35 = v34;
              int v30 = *v22;
            }
            sub_46D00(*(uint64_t **)(v6 + 72), v30);
            ++*(void *)(v6 + 80);
            __p[0] = 0;
            sub_4F650((uint64_t)__p);
          }
LABEL_88:
          std::mutex::unlock((std::mutex *)v6);
          atomic_load((unsigned __int8 *)(v6 + 88));
          sub_4FE4(*(void *)(v5 + 8), *(void *)(v5 + 16));
        }
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v10 = (os_log_t *)sub_32A48(24);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 47) >= 0) {
        uint64_t v12 = v3 + 24;
      }
      else {
        uint64_t v12 = *(void *)(v3 + 24);
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v48 = "SpeakerInterferenceMitigationIODelegate.cpp";
      __int16 v49 = 1024;
      int v50 = 70;
      __int16 v51 = 2080;
      __int16 v52 = (void **)v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add speaker interference mitigation IO delegate for chain %s to central callback handler", buf, 0x1Cu);
    }
    if (v7)
    {
      sub_4636C(v7);
      if (!v4) {
        goto LABEL_23;
      }
    }
    else if (!v4)
    {
LABEL_23:
      if (v42) {
        sub_4636C(v42);
      }
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      goto LABEL_27;
    }
    std::__shared_weak_count::__release_weak(v4);
    goto LABEL_23;
  }
LABEL_27:
  if (v40) {
    sub_4636C(v40);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  return sub_8FEC((uint64_t *)&v36);
}

void sub_C250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf,long long a26,__int16 a27,__int16 a28,int a29,int a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_4F650((uint64_t)&a19);
  std::mutex::unlock(v32);
  sub_4636C(v31);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (a18) {
    sub_4636C(a18);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (a16) {
    sub_4636C(a16);
  }
  if (a2 == 3)
  {
    int v35 = __cxa_begin_catch(exception_object);
    os_log_t v36 = (os_log_t *)sub_32A48(13);
    os_log_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      int v38 = v35[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a26) = 1024;
      DWORD1(a26) = v38;
      WORD4(a26) = 2080;
      *(void *)((char *)&a26 + 10) = "";
      a28 = 1024;
      a29 = 142;
      uint64_t v39 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      std::string::size_type v40 = v37;
      uint32_t v41 = 40;
LABEL_21:
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, v41);
    }
  }
  else
  {
    uint64_t v42 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v43 = v42;
      uint64_t v44 = (os_log_t *)sub_32A48(13);
      os_log_t v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v46 = (*(uint64_t (**)(void *))(*(void *)v43 + 16))(v43);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a26) = 2080;
        *(void *)((char *)&a26 + 4) = v46;
        WORD6(a26) = 2080;
        *(void *)((char *)&a26 + 14) = "";
        HIWORD(a29) = 1024;
        a30 = 142;
        uint64_t v39 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        std::string::size_type v40 = v45;
        uint32_t v41 = 44;
        goto LABEL_21;
      }
    }
    else
    {
      __int16 v47 = (os_log_t *)sub_32A48(13);
      os_log_t v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a26) = 2080;
        *(void *)((char *)&a26 + 4) = "";
        WORD6(a26) = 1024;
        *(_DWORD *)((char *)&a26 + 14) = 142;
        uint64_t v39 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        std::string::size_type v40 = v48;
        uint32_t v41 = 34;
        goto LABEL_21;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0xBED8);
}

unsigned char *sub_C7D4(unsigned char *a1)
{
  if (a1[8])
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (std::recursive_mutex *)(*(void *)a1 + 168);
    std::recursive_mutex::lock(v3);
    unint64_t v4 = *(void *)(v2 + 240);
    if (v4 < 2)
    {
      *(void *)(v2 + 232) = 0;
      *(void *)(v2 + 240) = 0;
      std::recursive_mutex::unlock(v3);
      std::__shared_mutex_base::unlock((std::__shared_mutex_base *)v2);
    }
    else
    {
      *(void *)(v2 + 240) = v4 - 1;
      std::recursive_mutex::unlock(v3);
    }
  }
  return a1;
}

void sub_C850(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 64);
  sub_CD90((uint64_t)v8, (void *)(a1 + 8));
  sub_CD90((uint64_t)v9, (void *)(a1 + 32));
  uint64_t v10 = *(void *)(a1 + 56);
  if (!*(void *)v2)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v12 = 1024;
      int v13 = 502;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(unsigned char *)(v2 + 8))
  {
    sub_13910();
    *(void *)AudioObjectPropertyAddress buf = v2;
    sub_CD90((uint64_t)&buf[8], v8);
    sub_CD90((uint64_t)v14, v9);
    v14[3] = v10;
    operator new();
  }
  uint64_t v3 = (os_log_t *)sub_32A48(12);
  unint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    __int16 v12 = 1024;
    int v13 = 506;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
  }
  sub_463E0((void *)v9[1]);
  sub_463E0((void *)v8[1]);
}

void sub_CACC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf, long long a18, __int16 a19, __int16 a20,int a21,int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  if (a2 == 3)
  {
    os_log_t v25 = __cxa_begin_catch(a1);
    int v26 = (os_log_t *)sub_32A48(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v28 = v25[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a18) = 1024;
      DWORD1(a18) = v28;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 514;
      BOOL v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v30 = v27;
      uint32_t v31 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
    }
  }
  else
  {
    long long v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v33 = v32;
      __int16 v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v36;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 514;
        BOOL v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v30 = v35;
        uint32_t v31 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      os_log_t v37 = (os_log_t *)sub_32A48(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 514;
        BOOL v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v30 = v38;
        uint32_t v31 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0xC970);
}

void sub_CD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_CD90(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = (unsigned int *)(v5 + 4);
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      char v8 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = v3;
      if (v7)
      {
        do
        {
          char v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          char v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          uint64_t v10 = v8;
        }
        while (v11);
      }
      unsigned int v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7) {
          int v13 = v8;
        }
        else {
          int v13 = v3;
        }
        if (v7) {
          uint64_t v14 = v8 + 1;
        }
        else {
          uint64_t v14 = v3;
        }
      }
      else
      {
        int v13 = v3;
        uint64_t v14 = v3;
        if (v7)
        {
          uint64_t v14 = v3;
          while (1)
          {
            while (1)
            {
              int v13 = (uint64_t **)v7;
              unsigned int v18 = *((_DWORD *)v7 + 8);
              if (v12 >= v18) {
                break;
              }
              uint64_t v7 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }
            if (v18 >= v12) {
              break;
            }
            uint64_t v14 = v13 + 1;
            uint64_t v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_15:
        uint64_t v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_46CA8((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }
      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          uint64_t v5 = v17;
        }
        while (!v11);
      }
      uint64_t v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_CF00(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_CF14(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = sub_32A48(1);
  uint64_t v10 = sub_32A48(31);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)os_log_t v37 = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&v37[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_7;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_7:
  uint64_t v16 = *(NSObject **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 48);
    *(_DWORD *)os_log_t v37 = 136316162;
    *(void *)&v37[4] = "VirtualAudio_IONotificationManager.cpp";
    __int16 v38 = 1024;
    int v39 = 184;
    __int16 v40 = 2048;
    uint32_t v41 = (const char *)(v8 != a2);
    __int16 v42 = 2048;
    uint64_t v43 = a2;
    __int16 v44 = 2048;
    uint64_t v45 = v17;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d UpdateAndNotify() - need to notify I/O state = %lu new I/O running state = %lu previous I/O running state = %lu", v37, 0x30u);
  }
  *(void *)(a1 + 48) = a2;
  if (v8 != a2 || a4)
  {
    uint64_t v18 = sub_32A48(1);
    uint64_t v19 = sub_32A48(31);
    char v20 = 0;
    uint64_t v21 = 0;
    *(void *)os_log_t v37 = 0x100000002;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&v37[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1;
      if (v24) {
        goto LABEL_18;
      }
    }
    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_18:
    os_log_t v25 = *(NSObject **)v18;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a1 + 48);
      *(_DWORD *)os_log_t v37 = 136316162;
      *(void *)&v37[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v38 = 1024;
      int v39 = 192;
      __int16 v40 = 2080;
      uint32_t v41 = "com.apple.coreaudio.IORunning";
      __int16 v42 = 2048;
      uint64_t v43 = v26;
      __int16 v44 = 2048;
      uint64_t v45 = a4;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sending notification \"%s\" of I/O running state %lu forced notification = %lu", v37, 0x30u);
    }
    sub_D2B4(*(void *)a1, *(void *)(a1 + 48));
  }
  uint64_t v27 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = a3;
  if (v27 != a3 || a4)
  {
    uint64_t v28 = sub_32A48(1);
    uint64_t v29 = sub_32A48(31);
    char v30 = 0;
    uint64_t v31 = 0;
    *(void *)os_log_t v37 = 0x100000002;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&v37[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1;
      if (v34) {
        goto LABEL_30;
      }
    }
    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
LABEL_30:
    os_log_t v35 = *(NSObject **)v28;
    if (v35)
    {
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = *(void *)(a1 + 56);
        *(_DWORD *)os_log_t v37 = 136316162;
        *(void *)&v37[4] = "VirtualAudio_IONotificationManager.cpp";
        __int16 v38 = 1024;
        int v39 = 204;
        __int16 v40 = 2080;
        uint32_t v41 = "com.apple.coreaudio.ActivePorts";
        __int16 v42 = 2048;
        uint64_t v43 = v36;
        __int16 v44 = 2048;
        uint64_t v45 = a4;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sending notification \"%s\" with active ports %lu forced notification = %lu", v37, 0x30u);
      }
    }
    sub_D2B4(*(void *)(a1 + 8), *(void *)(a1 + 56));
  }
}

uint64_t sub_D2B4(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 12))
  {
    uint64_t v2 = (const char **)result;
    notify_set_state(*(_DWORD *)(result + 8), a2);
    uint64_t v3 = *v2;
    return notify_post(v3);
  }
  return result;
}

uint64_t sub_D304(uint64_t a1)
{
  uint64_t v5 = a1 + 48;
  char v6 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v2) {
    uint64_t v3 = a1 + 456;
  }
  else {
    uint64_t v3 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v2 + 8) + 128))(*(void *)(v2 + 8), 1, 0);
  }
  sub_3A3E8((uint64_t)&v5);
  return v3;
}

void sub_D394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_D3A8(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, double a5)
{
  uint64_t v8 = a1;
  *(void *)&long long v265 = a1 + 48;
  BYTE8(v265) = 1;
  uint64_t v246 = a1 + 48;
  sub_F648(a1 + 48);
  uint64_t v9 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
  uint64_t v254 = v8;
  if (v9)
  {
    uint64_t v248 = a2;
    uint64_t v10 = 0;
    unint64_t v249 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    LOBYTE(v11) = 1;
    while (1)
    {
      char v12 = 0;
      uint64_t v13 = 0;
      uint64_t v250 = v10;
      uint64_t v14 = (void *)(*(void *)(v8 + 24) + 24 * v10 + 8);
      *(void *)&long long v269 = 0x200000001;
      while (1)
      {
        char v15 = v12;
        uint64_t v16 = *((unsigned int *)&v269 + v13);
        LODWORD(v263.__r_.__value_.__l.__data_) = 0;
        (*(void (**)(void, uint64_t, std::string *))(*(void *)*v14 + 224))(*v14, v16, &v263);
        unsigned int data = v263.__r_.__value_.__l.__data_;
        if (!LODWORD(v263.__r_.__value_.__l.__data_))
        {
          int v11 = v11 != 0;
          goto LABEL_118;
        }
        uint64_t v18 = *a3;
        uint64_t v19 = (char *)a3[1] - (char *)*a3;
        if (!v19)
        {
          unint64_t v21 = 0;
          int v63 = 1;
          goto LABEL_108;
        }
        char v251 = v11;
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v19 >> 3);
        do
        {
          unint64_t v23 = v21;
          if (v16 != 2) {
            goto LABEL_54;
          }
          BOOL v24 = sub_4F900(v8);
          uint64_t v18 = *a3;
          uint64_t v25 = ((char *)a3[1] - (char *)*a3) >> 3;
          if (!v24)
          {
            unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * v25;
LABEL_54:
            if (v22 <= v21) {
              sub_131250();
            }
            uint64_t v28 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128))(*v14, v16, v21);
            __int16 v42 = (char *)v18 + v20;
            double v43 = *(double *)((char *)v18 + v20);
            if (v43 == 0.0 || (*(double *)v28 != 0.0 ? (BOOL v44 = v43 == *(double *)v28) : (BOOL v44 = 1), v44))
            {
              int v45 = *(_DWORD *)((char *)v18 + v20 + 8);
              if (!v45 || ((int v46 = *(_DWORD *)(v28 + 8)) != 0 ? (v47 = v45 == v46) : (v47 = 1), v47))
              {
                int v48 = *(_DWORD *)((char *)v18 + v20 + 16);
                if (!v48 || ((int v49 = *(_DWORD *)(v28 + 16)) != 0 ? (v50 = v48 == v49) : (v50 = 1), v50))
                {
                  int v51 = *(_DWORD *)((char *)v18 + v20 + 20);
                  if (!v51 || ((int v52 = *(_DWORD *)(v28 + 20)) != 0 ? (v53 = v51 == v52) : (v53 = 1), v53))
                  {
                    int v54 = *(_DWORD *)((char *)v18 + v20 + 24);
                    if (!v54 || ((int v55 = *(_DWORD *)(v28 + 24)) != 0 ? (v56 = v54 == v55) : (v56 = 1), v56))
                    {
                      int v57 = *(_DWORD *)((char *)v18 + v20 + 28);
                      if (!v57 || ((v58 = *(_DWORD *)(v28 + 28)) != 0 ? (BOOL v59 = v57 == v58) : (BOOL v59 = 1), v59))
                      {
                        int v60 = *(_DWORD *)((char *)v18 + v20 + 32);
                        if (!v60) {
                          goto LABEL_97;
                        }
                        int v61 = *(_DWORD *)(v28 + 32);
                        if (!v61 || v60 == v61) {
                          goto LABEL_97;
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_98;
          }
          if (0xCCCCCCCCCCCCCCCDLL * v25 <= v21) {
            sub_131250();
          }
          *(_OWORD *)AudioObjectPropertyAddress buf = *(long long *)((char *)v18 + v20);
          *(_OWORD *)&buf[16] = *(long long *)((char *)v18 + v20 + 16);
          *(void *)&unsigned char buf[32] = *(void *)((char *)v18 + v20 + 32);
          int v26 = sub_1AAA6C(v8);
          sub_1AADCC((uint64_t)buf, v26, (buf[12] & 0x20) == 0);
          uint64_t v27 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128))(*v14, 2, v21);
          uint64_t v28 = v27;
          if (*(double *)buf == 0.0
            || (*(double *)v27 != 0.0 ? (BOOL v29 = *(double *)buf == *(double *)v27) : (BOOL v29 = 1), v29))
          {
            if (!*(_DWORD *)&buf[8]
              || ((int v30 = *(_DWORD *)(v27 + 8)) != 0 ? (v31 = *(_DWORD *)&buf[8] == v30) : (v31 = 1), v31))
            {
              if (!*(_DWORD *)&buf[16]
                || ((int v32 = *(_DWORD *)(v27 + 16)) != 0 ? (v33 = *(_DWORD *)&buf[16] == v32) : (v33 = 1), v33))
              {
                if (!*(_DWORD *)&buf[20]
                  || ((int v34 = *(_DWORD *)(v27 + 20)) != 0 ? (v35 = *(_DWORD *)&buf[20] == v34) : (v35 = 1), v35))
                {
                  if (!*(_DWORD *)&buf[24]
                    || ((int v36 = *(_DWORD *)(v27 + 24)) != 0 ? (v37 = *(_DWORD *)&buf[24] == v36) : (v37 = 1), v37))
                  {
                    if (!*(_DWORD *)&buf[28]
                      || ((v38 = *(_DWORD *)(v27 + 28)) != 0 ? (BOOL v39 = *(_DWORD *)&buf[28] == v38) : (BOOL v39 = 1), v39))
                    {
                      if (!*(_DWORD *)&buf[32]
                        || ((int v40 = *(_DWORD *)(v27 + 32)) != 0 ? (v41 = *(_DWORD *)&buf[32] == v40) : (v41 = 1), v41))
                      {
                        __int16 v42 = buf;
LABEL_97:
                        int v63 = sub_EBDC((uint64_t)v42, v28);
                        goto LABEL_99;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_98:
          int v63 = 0;
LABEL_99:
          ++v21;
          unsigned int data = v263.__r_.__value_.__l.__data_;
          if (v23 + 1 >= LODWORD(v263.__r_.__value_.__l.__data_)) {
            goto LABEL_105;
          }
          uint64_t v18 = *a3;
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 3);
          if (v22 > v21) {
            int v64 = v63;
          }
          else {
            int v64 = 0;
          }
          v20 += 40;
        }
        while (v64 == 1);
        unint64_t v21 = v23 + 1;
LABEL_105:
        LOBYTE(v11) = v251;
LABEL_108:
        if (v21 < data && v63 != 0)
        {
          do
          {
            double v66 = *((double *)a3[1] - 5);
            double v67 = *(double *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128))(*v14, v16, v21);
            int v63 = v66 == v67;
            unint64_t v21 = (v21 + 1);
          }
          while (v21 < LODWORD(v263.__r_.__value_.__l.__data_) && v66 == v67);
        }
        int v11 = (_BYTE)v11 ? v63 : 0;
        if ((v63 & 1) == 0) {
          break;
        }
LABEL_118:
        char v12 = 1;
        uint64_t v13 = 1;
        if (v15)
        {
          unsigned int v68 = 0;
          goto LABEL_171;
        }
      }
      (*(void (**)(void))(*(void *)*v14 + 24))();
      int v252 = v11;
      char v69 = 0;
      uint64_t v70 = 0;
      do
      {
        while (1)
        {
          char v71 = v69;
          uint64_t v72 = *((unsigned int *)&v269 + v70);
          LODWORD(v261) = 0;
          (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*v14 + 224))(*v14, v72, &v261);
          unint64_t v73 = v261;
          if (!v261)
          {
            unsigned int v68 = 0;
            goto LABEL_166;
          }
          v74 = a3[1];
          if (v74 == *a3)
          {
            unsigned int v68 = 0;
            unint64_t v76 = 0;
            v85 = a3[1];
          }
          else
          {
            uint64_t v75 = 0;
            unint64_t v76 = 0;
            while (1)
            {
              unint64_t v77 = v76;
              id v78 = *(id *)sub_32A48(24);
              v79 = v78;
              if (v78)
              {
                v80 = v78;
                if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
                {
                  sub_259A4(&v263, (uint64_t)*a3 + v75);
                  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v81 = &v263;
                  }
                  else {
                    v81 = (std::string *)v263.__r_.__value_.__r.__words[0];
                  }
                  unsigned int v82 = (*(uint64_t (**)(void))(*(void *)*v14 + 152))();
                  sub_2417C(&__p, v82);
                  p_p = &__p;
                  if (SHIBYTE(v257) < 0) {
                    p_p = __p;
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                  *(void *)&uint8_t buf[4] = "DSPChain.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1369;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v81;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v77;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v72;
                  __int16 v267 = 2080;
                  v268 = p_p;
                  _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting instance format to %s for bus %d scope %d on processor type %s", buf, 0x32u);
                  if (SHIBYTE(v257) < 0) {
                    operator delete(__p);
                  }
                  uint64_t v8 = v254;
                  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v263.__r_.__value_.__l.__data_);
                  }
                }
              }
              unsigned int v84 = (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(*(void *)*v14 + 120))(*v14, v72, v77, (uint64_t)*a3 + v75);
              unsigned int v68 = v84;
              unint64_t v76 = v77 + 1;
              unint64_t v73 = v261;
              v74 = *a3;
              v85 = a3[1];
              if (v77 + 1 >= v261) {
                break;
              }
              v75 += 40;
              if (0xCCCCCCCCCCCCCCCDLL * (((char *)v85 - (char *)v74) >> 3) <= v76 || v84 != 0)
              {
                unint64_t v76 = v77 + 1;
                break;
              }
            }
            if (v77 + 1 >= v261) {
              goto LABEL_166;
            }
          }
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v85 - (char *)v74) >> 3) < v73 && v68 == 0) {
            break;
          }
LABEL_166:
          char v69 = 1;
          uint64_t v70 = 1;
          if ((v68 != 0) | v71 & 1) {
            goto LABEL_170;
          }
        }
        uint64_t v88 = *((void *)v85 - 5);
        id v89 = *(id *)sub_32A48(24);
        v90 = v89;
        if (v89)
        {
          v91 = v89;
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v92 = (*(uint64_t (**)(void))(*(void *)*v14 + 152))();
            sub_2417C(&v263, v92);
            v93 = &v263;
            if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v93 = (std::string *)v263.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1378;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v93;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v88;
            _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Format was not specified for some busses on DSP processor of type '%s'.  Assuming these are auxiliary buses. Overwriting sample rate of unspecified busses' formats to %f, and marking as interleaved.", buf, 0x26u);
            if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v263.__r_.__value_.__l.__data_);
            }
          }
        }
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 3) >= 2)
        {
          v94 = *(id *)sub_32A48(24);
          v95 = v94;
          if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1379;
            _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d More than one bus format was specified.  Using sample rate of the last specified format", buf, 0x12u);
          }
        }
        if (v76 < v261)
        {
          do
          {
            uint64_t v96 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*v14 + 128))(*v14, v72, v76);
            uint64_t v97 = *(void *)(v96 + 32);
            long long v98 = *(_OWORD *)(v96 + 16);
            *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v96;
            *(_OWORD *)&buf[16] = v98;
            *(void *)&unsigned char buf[32] = v97;
            *(void *)AudioObjectPropertyAddress buf = v88;
            sub_1AADCC((uint64_t)buf, SHIDWORD(v98), 1);
            unsigned int v99 = (*(uint64_t (**)(void, uint64_t, unint64_t, unsigned char *))(*(void *)*v14 + 120))(*v14, v72, v76, buf);
            unsigned int v68 = v99;
            unint64_t v76 = (v76 + 1);
          }
          while (v76 < v261 && !v99);
          goto LABEL_166;
        }
        uint64_t v70 = 1;
        char v69 = 1;
      }
      while ((v71 & 1) == 0);
      unsigned int v68 = 0;
LABEL_170:
      (*(void (**)(void))(*(void *)*v14 + 16))();
      int v11 = v252;
LABEL_171:
      if (!v68)
      {
        uint64_t v10 = v250 + 1;
        if (v250 + 1 < v249) {
          continue;
        }
      }
      if (v11) {
        uint64_t v100 = 0x100000000;
      }
      else {
        uint64_t v100 = 0;
      }
      a2 = v248;
      if (!v68) {
        goto LABEL_179;
      }
      goto LABEL_181;
    }
  }
  uint64_t v100 = 0x100000000;
LABEL_179:
  v101 = *a3;
  unsigned int v68 = 0;
  if (a3[1] != *a3)
  {
    long long v102 = *v101;
    long long v103 = v101[1];
    *(void *)(v8 + 488) = *((void *)v101 + 4);
    *(_OWORD *)(v8 + 456) = v102;
    *(_OWORD *)(v8 + 472) = v103;
  }
LABEL_181:
  sub_C7D4(&v265);
  unint64_t v104 = v100 | v68;
  if (!v104)
  {
    if (!HIDWORD(v104)) {
      goto LABEL_292;
    }
    v107 = (double *)(v8 + 504);
    if (*(double *)a2 != 0.0 && *v107 != 0.0 && *(double *)a2 != *v107) {
      goto LABEL_292;
    }
    int v109 = *(_DWORD *)(a2 + 8);
    if (v109)
    {
      int v110 = *(_DWORD *)(v8 + 512);
      if (v110)
      {
        if (v109 != v110) {
          goto LABEL_292;
        }
      }
    }
    int v111 = *(_DWORD *)(a2 + 16);
    if (v111)
    {
      int v112 = *(_DWORD *)(v8 + 520);
      if (v112)
      {
        if (v111 != v112) {
          goto LABEL_292;
        }
      }
    }
    int v113 = *(_DWORD *)(a2 + 20);
    if (v113)
    {
      int v114 = *(_DWORD *)(v8 + 524);
      if (v114)
      {
        if (v113 != v114) {
          goto LABEL_292;
        }
      }
    }
    int v115 = *(_DWORD *)(a2 + 24);
    if (v115)
    {
      int v116 = *(_DWORD *)(v8 + 528);
      if (v116)
      {
        if (v115 != v116) {
          goto LABEL_292;
        }
      }
    }
    int v117 = *(_DWORD *)(a2 + 28);
    if (v117)
    {
      int v118 = *(_DWORD *)(v8 + 532);
      if (v118)
      {
        if (v117 != v118) {
          goto LABEL_292;
        }
      }
    }
    int v119 = *(_DWORD *)(a2 + 32);
    if (v119)
    {
      int v120 = *(_DWORD *)(v8 + 536);
      if (v120)
      {
        if (v119 != v120) {
          goto LABEL_292;
        }
      }
    }
    if (!sub_EBDC(a2, (uint64_t)v107)) {
      goto LABEL_292;
    }
    uint64_t v121 = sub_D304(v8);
    double v122 = *(double *)(v8 + 544);
    if (v122 != 0.0 && *(double *)v121 != 0.0 && v122 != *(double *)v121) {
      goto LABEL_292;
    }
    int v123 = *(_DWORD *)(v8 + 552);
    if (v123)
    {
      int v124 = *(_DWORD *)(v121 + 8);
      if (v124)
      {
        if (v123 != v124) {
          goto LABEL_292;
        }
      }
    }
    int v125 = *(_DWORD *)(v8 + 560);
    if (v125)
    {
      int v126 = *(_DWORD *)(v121 + 16);
      if (v126)
      {
        if (v125 != v126) {
          goto LABEL_292;
        }
      }
    }
    int v127 = *(_DWORD *)(v8 + 564);
    if (v127)
    {
      int v128 = *(_DWORD *)(v121 + 20);
      if (v128)
      {
        if (v127 != v128) {
          goto LABEL_292;
        }
      }
    }
    int v129 = *(_DWORD *)(v8 + 568);
    if (v129)
    {
      int v130 = *(_DWORD *)(v121 + 24);
      if (v130)
      {
        if (v129 != v130) {
          goto LABEL_292;
        }
      }
    }
    int v131 = *(_DWORD *)(v8 + 572);
    if (v131)
    {
      int v132 = *(_DWORD *)(v121 + 28);
      if (v132)
      {
        if (v131 != v132) {
          goto LABEL_292;
        }
      }
    }
    int v133 = *(_DWORD *)(v8 + 576);
    if (v133)
    {
      int v134 = *(_DWORD *)(v121 + 32);
      if (v134)
      {
        if (v133 != v134) {
          goto LABEL_292;
        }
      }
    }
    if (!sub_EBDC(v8 + 544, v121)) {
      goto LABEL_292;
    }
    uint64_t v135 = sub_F20C(v8);
    v136 = (double *)(v8 + 592);
    if (*(double *)v135 != 0.0 && *v136 != 0.0 && *(double *)v135 != *v136) {
      goto LABEL_292;
    }
    int v137 = *(_DWORD *)(v135 + 8);
    if (v137)
    {
      int v138 = *(_DWORD *)(v8 + 600);
      if (v138)
      {
        if (v137 != v138) {
          goto LABEL_292;
        }
      }
    }
    int v139 = *(_DWORD *)(v135 + 16);
    if (v139)
    {
      int v140 = *(_DWORD *)(v8 + 608);
      if (v140)
      {
        if (v139 != v140) {
          goto LABEL_292;
        }
      }
    }
    int v141 = *(_DWORD *)(v135 + 20);
    if (v141)
    {
      int v142 = *(_DWORD *)(v8 + 612);
      if (v142)
      {
        if (v141 != v142) {
          goto LABEL_292;
        }
      }
    }
    int v143 = *(_DWORD *)(v135 + 24);
    if (v143)
    {
      int v144 = *(_DWORD *)(v8 + 616);
      if (v144)
      {
        if (v143 != v144) {
          goto LABEL_292;
        }
      }
    }
    int v145 = *(_DWORD *)(v135 + 28);
    if (v145)
    {
      int v146 = *(_DWORD *)(v8 + 620);
      if (v146)
      {
        if (v145 != v146) {
          goto LABEL_292;
        }
      }
    }
    int v147 = *(_DWORD *)(v135 + 32);
    if (v147)
    {
      int v148 = *(_DWORD *)(v8 + 624);
      if (v148)
      {
        if (v147 != v148) {
          goto LABEL_292;
        }
      }
    }
    if (!sub_EBDC(v135, (uint64_t)v136)) {
      goto LABEL_292;
    }
    double v149 = *(double *)(v8 + 632);
    if (v149 != 0.0 && *(double *)a4 != 0.0 && v149 != *(double *)a4) {
      goto LABEL_292;
    }
    int v150 = *(_DWORD *)(v8 + 640);
    if (v150)
    {
      int v151 = *(_DWORD *)(a4 + 8);
      if (v151)
      {
        if (v150 != v151) {
          goto LABEL_292;
        }
      }
    }
    int v152 = *(_DWORD *)(v8 + 648);
    if (v152)
    {
      int v153 = *(_DWORD *)(a4 + 16);
      if (v153)
      {
        if (v152 != v153) {
          goto LABEL_292;
        }
      }
    }
    int v154 = *(_DWORD *)(v8 + 652);
    if (v154)
    {
      int v155 = *(_DWORD *)(a4 + 20);
      if (v155)
      {
        if (v154 != v155) {
          goto LABEL_292;
        }
      }
    }
    int v156 = *(_DWORD *)(v8 + 656);
    if (v156)
    {
      int v157 = *(_DWORD *)(a4 + 24);
      if (v157)
      {
        if (v156 != v157) {
          goto LABEL_292;
        }
      }
    }
    if ((int v158 = *(_DWORD *)(v8 + 660)) != 0 && (v159 = *(_DWORD *)(a4 + 28)) != 0 && v158 != v159
      || (int v160 = *(_DWORD *)(v8 + 664)) != 0 && (v161 = *(_DWORD *)(a4 + 32)) != 0 && v160 != v161
      || !sub_EBDC(v8 + 632, a4)
      || *(unsigned char *)(v8 + 448)
      && ((v162 = *(int **)(v8 + 944)) == 0
       || !*v162
       || (int v163 = *v162, v163 != sub_F2B0(v8))
       || *(void *)(v8 + 976) == *(void *)(v8 + 984)))
    {
LABEL_292:
      uint64_t v172 = sub_D304(v8);
      uint64_t v173 = sub_293350(v8 + 504, a2, v172);
      if (v173)
      {
        unint64_t v104 = v173;
        v174 = *(id *)sub_32A48(13);
        v106 = v174;
        if (v174 && os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1119;
          _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
        }
        goto LABEL_301;
      }
      uint64_t v175 = sub_F20C(v8);
      uint64_t v176 = sub_293350(v8 + 592, v175, a4);
      if (v176)
      {
        unint64_t v104 = v176;
        v177 = *(id *)sub_32A48(13);
        v106 = v177;
        if (v177 && os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1123;
          _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
        }
        goto LABEL_301;
      }
      v178 = (std::mutex *)(v8 + 880);
      std::mutex::lock((std::mutex *)(v8 + 880));
      for (unint64_t i = (uint64_t *)qword_64CA08; i != &qword_64CA00; unint64_t i = (uint64_t *)i[1])
      {
        if (i[4] == v8) {
          i[4] = 0;
        }
      }
      unsigned int v180 = *(_DWORD *)(v8 + 480);
      *(void *)AudioObjectPropertyAddress buf = v246;
      buf[8] = 1;
      sub_39ECC(v246);
      uint64_t v181 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
      if (v181)
      {
        uint64_t v182 = 0;
        unint64_t v183 = v181 / 24;
        if (v183 <= 1) {
          uint64_t v184 = 1;
        }
        else {
          uint64_t v184 = v183;
        }
        do
        {
          char v185 = 0;
          v186 = (void *)(*(void *)(v8 + 24) + 24 * v182 + 8);
          uint64_t v187 = 1;
          do
          {
            char v188 = v185;
            unsigned int v189 = *(_DWORD *)((*(uint64_t (**)(void, uint64_t, void))(*(void *)*v186 + 128))(*v186, v187, 0)+ 24);
            if (v189 > v180) {
              unsigned int v180 = v189;
            }
            uint64_t v187 = 2;
            char v185 = 1;
          }
          while ((v188 & 1) == 0);
          ++v182;
          uint64_t v8 = v254;
        }
        while (v182 != v184);
      }
      sub_3A3E8((uint64_t)buf);
      if (*(unsigned char *)(v8 + 448) || *(void *)(v8 + 584) || *(void *)(v8 + 672))
      {
        int v190 = sub_F2B0(v8);
        sub_125EC((uint64_t)buf, v190);
        sub_10CBC((unsigned int **)(v8 + 944), (uint64_t)buf);
        sub_1216C((unsigned int **)buf);
        size_t v191 = v180 << 12;
        if (**(_DWORD **)(v8 + 944))
        {
          uint64_t v192 = 0;
          unint64_t v193 = 0;
          do
          {
            v194 = sub_1AA7D8(v8, v191);
            v195 = *(_DWORD **)(v8 + 944);
            v196 = &v195[v192];
            *((void *)v196 + 2) = v194;
            v196[3] = v191;
            if ((*(unsigned char *)(v8 + 468) & 0x20) != 0) {
              int v197 = 1;
            }
            else {
              int v197 = *(_DWORD *)(v8 + 484);
            }
            v196[2] = v197;
            ++v193;
            unint64_t v198 = *v195;
            v192 += 4;
          }
          while (v193 < v198);
          if (*v195)
          {
            unint64_t v199 = 0;
            v200 = (void **)(v195 + 4);
            do
            {
              if (*v200)
              {
                bzero(*v200, *((unsigned int *)v200 - 1));
                unint64_t v198 = *v195;
              }
              ++v199;
              v200 += 2;
            }
            while (v199 < v198);
          }
        }
        if (*(unsigned char *)(v8 + 448))
        {
          *(void *)AudioObjectPropertyAddress buf = v246;
          buf[8] = 1;
          sub_39ECC(v246);
          uint64_t v201 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
          if (v201)
          {
            unint64_t v202 = 0xAAAAAAAAAAAAAAABLL * (v201 >> 3);
            unint64_t v203 = 1;
            uint64_t v204 = 8;
            do
            {
              int v205 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v254 + 24) + v204) + 216))(*(void *)(*(void *)(v254 + 24) + v204));
              int v206 = v205;
              if (v203 >= v202) {
                char v207 = 1;
              }
              else {
                char v207 = v205;
              }
              ++v203;
              v204 += 24;
            }
            while ((v207 & 1) == 0);
            sub_3A3E8((uint64_t)buf);
            uint64_t v8 = v254;
            if (v206)
            {
              int v208 = sub_F2B0(v254);
              sub_125EC((uint64_t)buf, v208);
              sub_10CBC((unsigned int **)(v254 + 960), (uint64_t)buf);
              sub_1216C((unsigned int **)buf);
              if (**(_DWORD **)(v254 + 960))
              {
                uint64_t v209 = 0;
                unint64_t v210 = 0;
                do
                {
                  v211 = sub_1AA7D8(v254, v191);
                  v212 = *(_DWORD **)(v254 + 960);
                  v213 = &v212[v209];
                  *((void *)v213 + 2) = v211;
                  v213[3] = v191;
                  if ((*(unsigned char *)(v254 + 468) & 0x20) != 0) {
                    int v214 = 1;
                  }
                  else {
                    int v214 = *(_DWORD *)(v254 + 484);
                  }
                  v213[2] = v214;
                  ++v210;
                  unint64_t v215 = *v212;
                  v209 += 4;
                }
                while (v210 < v215);
                if (*v212)
                {
                  unint64_t v216 = 0;
                  v217 = (void **)(v212 + 4);
                  do
                  {
                    if (*v217)
                    {
                      bzero(*v217, *((unsigned int *)v217 - 1));
                      unint64_t v215 = *v212;
                    }
                    ++v216;
                    v217 += 2;
                  }
                  while (v216 < v215);
                }
              }
            }
          }
          else
          {
            sub_3A3E8((uint64_t)buf);
          }
        }
      }
      v218 = (uint64_t *)qword_64CA08;
      if ((uint64_t *)qword_64CA08 != &qword_64CA00)
      {
        do
        {
          if (v218[4])
          {
            v219 = (uint64_t *)v218[1];
          }
          else
          {
            v219 = (uint64_t *)v218[1];
            v220 = (void *)v218[2];
            uint64_t v221 = *v218;
            *(void *)(v221 + 8) = v219;
            *(void *)v218[1] = v221;
            --qword_64CA10;
            operator delete(v218);
            if (v220) {
              free(v220);
            }
          }
          v218 = v219;
        }
        while (v219 != &qword_64CA00);
      }
      std::mutex::unlock(v178);
      v222 = (uint64_t *)(v8 + 976);
      sub_1AA65C(v8 + 976, *(unsigned int ***)(v8 + 976));
      uint64_t v261 = v246;
      char v262 = 1;
      sub_39ECC(v246);
      uint64_t v223 = *(void *)(v8 + 24);
      if (v223 != *(void *)(v8 + 32))
      {
        v224 = 0;
        v225 = (uint64_t *)(v8 + 984);
        v226 = (uint64_t *)(v8 + 992);
        do
        {
          if (!v224) {
            v224 = *(_DWORD **)(v8 + 944);
          }
          uint64_t v227 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v223 + 8) + 128))(*(void *)(v223 + 8), 1, 0);
          if ((*(_DWORD *)(v227 + 12) & 0x20) != 0) {
            unsigned int v228 = *(_DWORD *)(v227 + 28);
          }
          else {
            unsigned int v228 = 1;
          }
          sub_12654((uint64_t)v260, v224, v228);
          if ((*(unsigned int (**)(void))(**(void **)(v223 + 8) + 216))(*(void *)(v223 + 8))) {
            v224 = *(_DWORD **)(v8 + 960);
          }
          uint64_t v229 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v223 + 8) + 128))(*(void *)(v223 + 8), 2, 0);
          if ((*(_DWORD *)(v229 + 12) & 0x20) != 0) {
            unsigned int v230 = *(_DWORD *)(v229 + 28);
          }
          else {
            unsigned int v230 = 1;
          }
          sub_12654((uint64_t)v259, v224, v230);
          long long __p = 0;
          int v256 = 0;
          sub_10CBC((unsigned int **)&__p, (uint64_t)v260);
          v257 = 0;
          int v258 = 0;
          sub_10CBC(&v257, (uint64_t)v259);
          uint64_t v231 = *v225;
          if (*v225 >= (unint64_t)*v226)
          {
            uint64_t v233 = (v231 - *v222) >> 5;
            if ((unint64_t)(v233 + 1) >> 59) {
              sub_60548();
            }
            uint64_t v234 = *v226 - *v222;
            uint64_t v235 = v234 >> 4;
            if (v234 >> 4 <= (unint64_t)(v233 + 1)) {
              uint64_t v235 = v233 + 1;
            }
            if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v236 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v236 = v235;
            }
            *(void *)&unsigned char buf[32] = v226;
            if (v236)
            {
              if (v236 >> 59) {
                sub_60560();
              }
              v237 = (char *)operator new(32 * v236);
            }
            else
            {
              v237 = 0;
            }
            *(void *)AudioObjectPropertyAddress buf = v237;
            *(void *)&buf[8] = &v237[32 * v233];
            *(void *)&buf[16] = *(void *)&buf[8];
            *(void *)&unsigned char buf[24] = &v237[32 * v236];
            sub_1AA6B8(*(uint64_t *)&buf[8], (uint64_t)&__p);
            uint64_t v238 = *(void *)&buf[8];
            *(void *)&buf[16] += 32;
            uint64_t v239 = *v225;
            uint64_t v240 = *v222;
            *(void *)&long long v265 = *(void *)&buf[8];
            *((void *)&v265 + 1) = *(void *)&buf[8];
            long long v269 = v265;
            v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
            v263.__r_.__value_.__l.__size_ = (std::string::size_type)&v269;
            v263.__r_.__value_.__r.__words[2] = (std::string::size_type)&v265;
            for (char j = 0; v239 != v240; v239 -= 32)
            {
              *(void *)(v238 - 32) = 0;
              *(_DWORD *)(v238 - 24) = 0;
              sub_10CBC((unsigned int **)(v238 - 32), v239 - 32);
              *(void *)(v238 - 16) = 0;
              uint64_t v241 = v238 - 16;
              *(_DWORD *)(v241 + 8) = 0;
              sub_10CBC((unsigned int **)v241, v239 - 16);
              uint64_t v238 = *((void *)&v265 + 1) - 32;
              *((void *)&v265 + 1) -= 32;
            }
            char j = 1;
            sub_1AA778((uint64_t)&v263);
            uint64_t v242 = *v226;
            uint64_t v253 = *(void *)&buf[16];
            long long v243 = *(_OWORD *)&buf[16];
            long long v244 = *(_OWORD *)v222;
            uint64_t *v222 = v238;
            *(_OWORD *)&buf[8] = v244;
            *(_OWORD *)v225 = v243;
            *(void *)&unsigned char buf[24] = v242;
            *(void *)AudioObjectPropertyAddress buf = v244;
            sub_1AA714((uint64_t)buf);
            uint64_t v232 = v253;
            uint64_t v8 = v254;
          }
          else
          {
            sub_1AA6B8(*v225, (uint64_t)&__p);
            uint64_t v232 = v231 + 32;
            uint64_t *v225 = v231 + 32;
          }
          *(void *)(v8 + 984) = v232;
          sub_1216C(&v257);
          sub_1216C((unsigned int **)&__p);
          sub_1216C(v259);
          sub_1216C(v260);
          v223 += 24;
        }
        while (v223 != *(void *)(v8 + 32));
      }
      sub_3A3E8((uint64_t)&v261);
      sub_4FAE0(v8, a5);
    }
    else
    {
      std::mutex::lock((std::mutex *)(v8 + 880));
      v164 = *(unsigned int **)(v8 + 944);
      if (v164)
      {
        unint64_t v165 = *v164;
        if (v165)
        {
          unint64_t v166 = 0;
          v167 = (void **)(v164 + 4);
          do
          {
            if (*v167)
            {
              bzero(*v167, *((unsigned int *)v167 - 1));
              unint64_t v165 = *v164;
            }
            ++v166;
            v167 += 2;
          }
          while (v166 < v165);
        }
      }
      v168 = *(unsigned int **)(v254 + 960);
      if (v168)
      {
        unint64_t v169 = *v168;
        if (v169)
        {
          unint64_t v170 = 0;
          v171 = (void **)(v168 + 4);
          do
          {
            if (*v171)
            {
              bzero(*v171, *((unsigned int *)v171 - 1));
              unint64_t v169 = *v168;
            }
            ++v170;
            v171 += 2;
          }
          while (v170 < v169);
        }
      }
      sub_4FAE0(v254, a5);
      std::mutex::unlock((std::mutex *)(v8 + 880));
    }
    return 0;
  }
  v105 = *(id *)sub_32A48(13);
  v106 = v105;
  if (v105 && os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1094;
    _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
  }
LABEL_301:

  return v104;
}

void sub_EA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  std::mutex::unlock(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_EBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(_OWORD *)(a2 + 8);
  v4.i64[0] = *(void *)(a2 + 8);
  v4.i64[1] = v2;
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v4)))) {
    return 1;
  }
  unsigned int v6 = HIDWORD(*(void *)(a2 + 8));
  if (v2 != 1819304813) {
    return HIDWORD(v2) == DWORD1(v3);
  }
  int v7 = HIDWORD(v2) & 0x7FFFFFFF;
  if ((v2 & 0x7FFFFFFF00000000) == 0) {
    int v7 = HIDWORD(v2);
  }
  unsigned int v8 = v7 & 0xFFFFFFBF;
  unsigned int v9 = *(_DWORD *)(a1 + 24);
  if (v9)
  {
    int v10 = *(_DWORD *)(a1 + 28);
    if ((v2 & 0x2000000000) != 0) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a1 + 28);
    }
    if (v11)
    {
      unsigned int v9 = 8 * (v9 / v11);
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      unsigned int v13 = v8 | 8;
      BOOL v14 = v9 == v12;
      goto LABEL_16;
    }
    unsigned int v9 = 0;
    unsigned int v12 = *(_DWORD *)(a1 + 32);
    unsigned int v13 = v8 | 8;
  }
  else
  {
    unsigned int v13 = v7 & 0xFFFFFFB7 | 8;
    int v10 = *(_DWORD *)(a1 + 28);
    unsigned int v12 = *(_DWORD *)(a1 + 32);
  }
  BOOL v14 = v12 == 0;
LABEL_16:
  if (v14) {
    unsigned int v8 = v13;
  }
  BOOL v16 = (v12 & 7) == 0 && v9 == v12;
  unsigned int v17 = v8 & 0xFFFFFFEF;
  if (!v16) {
    unsigned int v17 = v8;
  }
  if (v17) {
    v17 &= ~4u;
  }
  BOOL v18 = (v17 & 8) == 0 || v12 > 8;
  int v19 = v17 & 2;
  if (v18) {
    int v19 = v17;
  }
  if (v10 == 1) {
    unsigned int v20 = v19 & 0xFFFFFFDF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (!v20) {
    unsigned int v20 = 0x80000000;
  }
  if (v3 != 1819304813) {
    return v20 == v6;
  }
  int v21 = DWORD1(v3) & 0x7FFFFFFF;
  if ((DWORD1(v3) & 0x7FFFFFFF) == 0) {
    int v21 = HIDWORD(*(void *)(a2 + 8));
  }
  unsigned int v22 = v21 & 0xFFFFFFBF;
  unsigned int v23 = *(_DWORD *)(a2 + 24);
  if (!v23)
  {
    unsigned int v27 = v21 & 0xFFFFFFB7 | 8;
    int v24 = *(_DWORD *)(a2 + 28);
    unsigned int v26 = *(_DWORD *)(a2 + 32);
LABEL_46:
    BOOL v28 = v26 == 0;
    goto LABEL_47;
  }
  int v24 = *(_DWORD *)(a2 + 28);
  if ((BYTE4(v3) & 0x20) != 0) {
    unsigned int v25 = 1;
  }
  else {
    unsigned int v25 = *(_DWORD *)(a2 + 28);
  }
  if (!v25)
  {
    unsigned int v23 = 0;
    unsigned int v26 = *(_DWORD *)(a2 + 32);
    unsigned int v27 = v22 | 8;
    goto LABEL_46;
  }
  unsigned int v23 = 8 * (v23 / v25);
  unsigned int v26 = *(_DWORD *)(a2 + 32);
  unsigned int v27 = v22 | 8;
  BOOL v28 = v23 == v26;
LABEL_47:
  if (v28) {
    unsigned int v22 = v27;
  }
  BOOL v29 = (v26 & 7) == 0 && v23 == v26;
  unsigned int v30 = v22 & 0xFFFFFFEF;
  if (!v29) {
    unsigned int v30 = v22;
  }
  if (v30) {
    v30 &= ~4u;
  }
  BOOL v31 = (v30 & 8) == 0 || v26 > 8;
  unsigned int v6 = v30 & 2;
  if (v31) {
    unsigned int v6 = v30;
  }
  if (v24 == 1) {
    v6 &= ~0x20u;
  }
  if (!v6) {
    unsigned int v6 = 0x80000000;
  }
  return v20 == v6;
}

uint64_t sub_ED84(uint64_t a1, AudioUnitScope inScope, void *outData)
{
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    unsigned int v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      UInt32 v12 = 136315394;
      unsigned int v13 = "DSPProcessorManager.cpp";
      __int16 v14 = 1024;
      int v15 = 769;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input\"", (uint8_t *)&v12, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }
  UInt32 v12 = 4;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    int32x4_t v4 = *(OpaqueAudioComponentInstance **)(v3 + 16);
  }
  else {
    int32x4_t v4 = 0;
  }
  uint64_t Property = AudioUnitGetProperty(v4, 0xBu, inScope, 0, outData, &v12);
  if (Property)
  {
    unsigned int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        UInt32 v12 = 136315394;
        unsigned int v13 = "DSPProcessorManager.cpp";
        __int16 v14 = 1024;
        int v15 = 771;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&v12, 0x12u);
      }
    }
  }
  return Property;
}

void sub_EF34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_EF50(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int **a5, unsigned int a6, unsigned int **a7)
{
  if (*(unsigned char *)(result + 448))
  {
    uint64_t v7 = result;
    WORD1(v39) = *(_WORD *)(result + 682);
    LOWORD(v39) = *(_WORD *)(result + 682);
    WORD1(v38) = *(_WORD *)(result + 682) == 0;
    LOWORD(v38) = *(_WORD *)(result + 682);
    int v8 = (int)v39;
    atomic_compare_exchange_strong((atomic_uint *volatile)(result + 680), (unsigned int *)&v8, v38);
    uint64_t v9 = *(_WORD *)(result + 682) ? 400 : 424;
    uint64_t v10 = *(_WORD *)(result + 682) ? result + 400 : result + 424;
    uint64_t v11 = *(void *)(v10 + 8) - *(void *)(result + v9);
    if (v11)
    {
      uint64_t v14 = 0;
      unint64_t v15 = v11 / 24;
      unint64_t v16 = v15 - 1;
      if (v15 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v15;
      }
      do
      {
        uint64_t v18 = *(void *)(v7 + v9) + 24 * v14;
        uint64_t v20 = *(void *)(v18 + 8);
        int v19 = (void *)(v18 + 8);
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v20 + 128))(v20, 1, 0);
        uint64_t v22 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*v19 + 128))(*v19, 2, 0);
        BOOL v39 = 0;
        if (v14)
        {
          unsigned int v23 = *(unsigned int **)(*(void *)(v7 + 976) + 32 * v14);
          BOOL v39 = v23;
          if (v23)
          {
            uint64_t v24 = *v23;
            if (v24)
            {
              unint64_t v25 = 0;
              unsigned int v26 = *(_DWORD *)(v21 + 24) * a3;
              uint64_t v27 = 16 * v24;
              do
              {
                v23[v25 / 4 + 3] = v26;
                v25 += 16;
              }
              while (v27 != v25);
            }
          }
        }
        else
        {
          unsigned int v23 = 0;
        }
        int v38 = 0;
        BOOL v28 = a7;
        if (v16 != v14)
        {
          BOOL v29 = *(unsigned int **)(*(void *)(v7 + 976) + 32 * v14 + 16);
          int v38 = v29;
          BOOL v28 = a7;
          if (v29)
          {
            uint64_t v30 = *v29;
            if (v30)
            {
              int v31 = *(_DWORD *)(v22 + 24) * a3;
              int v32 = v29 + 3;
              do
              {
                *int v32 = v31;
                v32 += 4;
                --v30;
              }
              while (v30);
            }
            BOOL v28 = &v38;
          }
        }
        if ((*(unsigned int (**)(void))(*(void *)*v19 + 216))())
        {
          if (v23) {
            BOOL v33 = &v39;
          }
          else {
            BOOL v33 = a5;
          }
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, unsigned int **, void, unsigned int **))(*(void *)*v19 + 112))(*v19, a2, a3, a4, v33, a6, v28);
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned int *))(*(void *)*v19 + 104))(*v19, a2, a3, *v28);
        }
        ++v14;
      }
      while (v14 != v17);
    }
  }
  return result;
}

uint64_t sub_F20C(uint64_t a1)
{
  uint64_t v5 = a1 + 48;
  char v6 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 == *(void *)(a1 + 24)) {
    uint64_t v3 = a1 + 456;
  }
  else {
    uint64_t v3 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v2 - 16) + 128))(*(void *)(v2 - 16), 2, 0);
  }
  sub_3A3E8((uint64_t)&v5);
  return v3;
}

void sub_F29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_F2B0(uint64_t a1)
{
  uint64_t v2 = 1;
  if ((*(unsigned char *)(a1 + 468) & 0x20) != 0) {
    uint64_t v2 = *(unsigned int *)(a1 + 484);
  }
  uint64_t v14 = a1 + 48;
  char v15 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = v3 / 24;
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    do
    {
      char v7 = 0;
      int v8 = (void *)(*(void *)(a1 + 24) + 24 * v4 + 8);
      uint64_t v9 = 1;
      do
      {
        char v10 = v7;
        uint64_t v11 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*v8 + 128))(*v8, v9, 0);
        if ((*(unsigned char *)(v11 + 12) & 0x20) != 0)
        {
          uint64_t v12 = *(unsigned int *)(v11 + 28);
          if (v12 <= v2) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v2) {
            goto LABEL_13;
          }
          uint64_t v12 = 1;
        }
        uint64_t v2 = v12;
LABEL_13:
        uint64_t v9 = 2;
        char v7 = 1;
      }
      while ((v10 & 1) == 0);
      ++v4;
    }
    while (v4 != v6);
  }
  sub_3A3E8((uint64_t)&v14);
  return v2;
}

void sub_F3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_F3E8(uint64_t a1, int a2, unsigned int a3)
{
  if ((a2 - 3) <= 0xFFFFFFFD)
  {
    char v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v19 = "DSPProcessorManager.cpp";
      __int16 v20 = 1024;
      int v21 = 525;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }
  uint64_t v3 = 112;
  if (a2 == 1)
  {
    uint64_t v3 = 88;
    uint64_t v4 = a1 + 88;
  }
  else
  {
    uint64_t v4 = a1 + 112;
  }
  uint64_t v5 = *(void *)(a1 + v3);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4 + 8) - v5) >> 4) <= a3)
  {
    uint64_t v15 = v3;
    char v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (*(void *)(v4 + 8) - *(void *)(a1 + v15)) >> 4;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v19 = "DSPProcessorManager.cpp";
      __int16 v20 = 1024;
      int v21 = 529;
      __int16 v22 = 1024;
      unsigned int v23 = a3;
      __int16 v24 = 1024;
      int v25 = -1431655765 * v12;
      __int16 v26 = 1024;
      int v27 = a2;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"inElement (%u) cannot exceed bus count (%u) for scope: %u\"", buf, 0x24u);
    }
    unsigned int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(v13, "inElement (%u) cannot exceed bus count (%u) for scope: %u");
  }
  return v5 + 48 * a3;
}

void sub_F628(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F648(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  uint64_t v3 = *(_opaque_pthread_t **)(a1 + 232);
  if (v2)
  {
    if (v3 && v2 == v3) {
      goto LABEL_4;
    }
  }
  else if (!v3)
  {
LABEL_4:
    uint64_t v4 = *(void *)(a1 + 240) + 1;
    goto LABEL_9;
  }
  if (sub_3A50C(a1))
  {
    sub_3A740((void *)(a1 + 248), (unint64_t)v2);
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  uint64_t v4 = 1;
  *(void *)(a1 + 232) = v2;
LABEL_9:
  *(void *)(a1 + 240) = v4;

  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
}

void sub_F700(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_F718(unsigned char *a1)
{
  if (!a1[448]) {
    return;
  }
  unint64_t v2 = sub_4FD74((uint64_t)a1);
  if (HIDWORD(v2)) {
    int v3 = v2;
  }
  else {
    int v3 = 24;
  }
  v83.mSampleRate = *(Float64 *)sub_D304((uint64_t)a1);
  *(_OWORD *)&v83.AudioFormatID mFormatID = xmmword_4E7930;
  *(_OWORD *)&v83.UInt32 mBytesPerFrame = xmmword_4E7940;
  memset(v82, 0, sizeof(v82));
  uint64_t v79 = 0;
  v80 = 0;
  unint64_t v81 = 0;
  sub_10504(&v79, 4uLL);
  unint64_t v76 = 0;
  unint64_t v77 = 0;
  unint64_t v78 = 0;
  sub_10504((uint64_t *)&v76, 2uLL);
  sub_107AC((unsigned int **)inInputData, (uint64_t)&v83, v3);
  (*(void (**)(uint64_t *__return_ptr, unsigned char *))(*(void *)a1 + 184))(&v70, a1);
  unsigned int v69 = v3;
  uint64_t v68 = (uint64_t)a1;
  if (v72 == v71
    || (unint64_t v4 = *(void *)(v71 + 8 * (v73 / 0x66)) + 40 * (v73 % 0x66),
        unint64_t v5 = *(void *)(v71 + 8 * ((v74 + v73) / 0x66)) + 40 * ((v74 + v73) % 0x66),
        v4 == v5))
  {
    uint64_t v6 = 0;
    char v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (void *)(v71 + 8 * (v73 / 0x66));
    do
    {
      long long v10 = *(_OWORD *)v4;
      long long v11 = *(_OWORD *)(v4 + 16);
      uint64_t v89 = *(void *)(v4 + 32);
      v88[0] = v10;
      v88[1] = v11;
      uint64_t v12 = v80;
      if ((unint64_t)v80 >= v81)
      {
        uint64_t v14 = ((uint64_t)v80 - v79) >> 4;
        if ((unint64_t)(v14 + 1) >> 60) {
          sub_60548();
        }
        unint64_t v15 = (uint64_t)(v81 - v79) >> 3;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if (v81 - v79 >= 0x7FFFFFFFFFFFFFF0) {
          Float64 v16 = 1.28822975e-231;
        }
        else {
          Float64 v16 = *(double *)&v15;
        }
        *(void *)&buf.UInt32 mBitsPerChannel = &v81;
        if (v16 == 0.0) {
          uint64_t v17 = 0;
        }
        else {
          Float64 v16 = COERCE_DOUBLE(sub_10724(*(unint64_t *)&v16));
        }
        buf.mSampleRate = v16;
        *(void *)&buf.AudioFormatID mFormatID = *(void *)&v16 + 16 * v14;
        *(void *)&buf.UInt32 mBytesPerPacket = *(void *)&buf.mFormatID;
        *(void *)&buf.UInt32 mBytesPerFrame = *(void *)&v16 + 16 * v17;
        sub_107AC(*(unsigned int ***)&buf.mFormatID, (uint64_t)v88, v3);
        *(void *)&buf.mBytesPerPacket += 16;
        sub_10590(&v79, &buf);
        unsigned int v13 = v80;
        sub_1075C((uint64_t)&buf);
      }
      else
      {
        sub_107AC(v80, (uint64_t)v88, v3);
        unsigned int v13 = v12 + 2;
      }
      v80 = v13;
      uint64_t v18 = (AudioBufferList *)*(v13 - 2);
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v19 = (v7 - (char *)v6) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          sub_60548();
        }
        if ((uint64_t)(v8 - (void)v6) >> 2 > v20) {
          unint64_t v20 = (uint64_t)(v8 - (void)v6) >> 2;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_106EC(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unsigned int v23 = (AudioBufferList **)(v21 + 8 * v19);
        *unsigned int v23 = v18;
        __int16 v24 = (char *)(v23 + 1);
        while (v7 != (char *)v6)
        {
          int v25 = (AudioBufferList *)*((void *)v7 - 1);
          v7 -= 8;
          *--unsigned int v23 = v25;
        }
        unint64_t v8 = v21 + 8 * v22;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v23;
        char v7 = v24;
        int v3 = v69;
      }
      else
      {
        *(void *)char v7 = v18;
        v7 += 8;
      }
      v4 += 40;
      if (v4 - *v9 == 4080)
      {
        unint64_t v26 = v9[1];
        ++v9;
        unint64_t v4 = v26;
      }
    }
    while (v4 != v5);
  }
  unsigned int v84 = 0;
  *(void *)&buf.mSampleRate = v68 + 48;
  LOBYTE(buf.mFormatID) = 1;
  sub_39ECC(v68 + 48);
  uint64_t v28 = *(void *)(v68 + 24);
  uint64_t v27 = *(void *)(v68 + 32);
  sub_3A3E8((uint64_t)&buf);
  uint64_t v29 = v27 - v28;
  if (!v29)
  {
    uint64_t v50 = sub_32A48(13);
    int v51 = sub_7D5E8(1, *(void **)v50, *(void *)(v50 + 8));
    int v52 = v51;
    if (v51 && os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1288;
      _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(void *)&v88[0] = v68 + 48;
  BYTE8(v88[0]) = 1;
  sub_39ECC(v68 + 48);
  uint64_t v30 = *(void *)(v29 + *(void *)(v68 + 24) - 16);
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v30 + 224))(v30, 2, &v84);
  if (v31)
  {
    uint64_t v54 = sub_32A48(13);
    int v55 = sub_7D5E8(1, *(void **)v54, *(void *)(v54 + 8));
    BOOL v56 = v55;
    if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1295;
      _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unexpected error from GetBusCount\"", (uint8_t *)&buf, 0x12u);
    }

    int v57 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v57 = &off_6414D8;
    v57[2] = v31;
  }
  unsigned int v32 = v84;
  sub_3A3E8((uint64_t)v88);
  if (v32 > 1)
  {
    uint64_t v58 = sub_32A48(13);
    BOOL v59 = sub_7D5E8(1, *(void **)v58, *(void *)(v58 + 8));
    int v60 = v59;
    if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1248;
      _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
    }
LABEL_84:

    int v63 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v63, "Invariant failure.");
  }
  if (v32 == 1)
  {
    uint64_t v33 = sub_F20C(v68);
    int v34 = v77;
    if ((unint64_t)v77 >= v78)
    {
      uint64_t v38 = ((char *)v77 - v76) >> 4;
      if ((unint64_t)(v38 + 1) >> 60) {
        sub_60548();
      }
      unint64_t v39 = (uint64_t)(v78 - (void)v76) >> 3;
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      if (v78 - (unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
        Float64 v40 = 1.28822975e-231;
      }
      else {
        Float64 v40 = *(double *)&v39;
      }
      *(void *)&buf.UInt32 mBitsPerChannel = &v78;
      if (v40 == 0.0) {
        uint64_t v41 = 0;
      }
      else {
        Float64 v40 = COERCE_DOUBLE(sub_10724(*(unint64_t *)&v40));
      }
      buf.mSampleRate = v40;
      *(void *)&buf.AudioFormatID mFormatID = *(void *)&v40 + 16 * v38;
      *(void *)&buf.UInt32 mBytesPerPacket = *(void *)&buf.mFormatID;
      *(void *)&buf.UInt32 mBytesPerFrame = *(void *)&v40 + 16 * v41;
      sub_107AC(*(unsigned int ***)&buf.mFormatID, v33, v69);
      *(void *)&buf.mBytesPerPacket += 16;
      sub_10590((uint64_t *)&v76, &buf);
      BOOL v35 = v77;
      sub_1075C((uint64_t)&buf);
    }
    else
    {
      sub_107AC(v77, v33, v69);
      BOOL v35 = v34 + 2;
    }
    unint64_t v77 = v35;
    if (v35 == (unsigned int **)v76) {
      sub_131250();
    }
    uint64_t v42 = *(void *)v76;
    int v36 = (char *)sub_106EC(1uLL);
    *(void *)int v36 = v42;
    BOOL v37 = v36 + 8;
  }
  else
  {
    int v36 = 0;
    BOOL v37 = 0;
  }
  if (!v74)
  {
    uint64_t v61 = sub_32A48(13);
    uint64_t v62 = sub_7D5E8(1, *(void **)v61, *(void *)(v61 + 8));
    int v60 = v62;
    if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1255;
      _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_84;
  }
  std::mutex::lock((std::mutex *)(v68 + 880));
  double v43 = inInputData[0];
  size_t mDataByteSize = inInputData[0]->mBuffers[0].mDataByteSize;
  if (mDataByteSize <= 0x5F)
  {
    uint64_t v64 = sub_32A48(13);
    long long v65 = sub_7D5E8(1, *(void **)v64, *(void *)(v64 + 8));
    double v66 = v65;
    if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "DSPChain.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1262;
      _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
    }

    double v67 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v67, "Invariant failure.");
  }
  bzero(inInputData[0]->mBuffers[0].mData, mDataByteSize);
  mData = v43->mBuffers[0].mData;
  _OWORD *mData = xmmword_4E8468;
  mData[1] = unk_4E8478;
  mData[2] = xmmword_4E8488;
  mData[3] = unk_4E8498;
  mData[4] = xmmword_4E84A8;
  mData[5] = unk_4E84B8;
  unint64_t v46 = *(void *)(v71 + 8 * (v73 / 0x66)) + 40 * (v73 % 0x66);
  AudioStreamBasicDescription buf = v83;
  long long v47 = *(_OWORD *)v46;
  long long v48 = *(_OWORD *)(v46 + 16);
  uint64_t v49 = *(void *)(v46 + 32);
  *(_OWORD *)&v86.UInt32 mBytesPerPacket = v48;
  *(_OWORD *)&v86.mSampleRate = v47;
  *(void *)&v86.UInt32 mBitsPerChannel = v49;
  *(void *)v87 = 0;
  sub_5E28((uint64_t)&buf, &buf, &v86);
  sub_5586C(*(OpaqueAudioConverter **)v87, v69, inInputData[0], *v6);
  (*(void (**)(uint64_t, _OWORD *, void, unint64_t, AudioBufferList **, unint64_t, char *))(*(void *)v68 + 144))(v68, v82, v69, (unint64_t)(v7 - (char *)v6) >> 3, v6, (unint64_t)(v37 - v36) >> 3, v36);
  sub_6330(v68);
  sub_55834((uint64_t)&buf);
  std::mutex::unlock((std::mutex *)(v68 + 880));
  sub_4E9C((uint64_t)&v70);
  sub_1216C((unsigned int **)inInputData);
  if (v36) {
    operator delete(v36);
  }
  *(void *)&buf.mSampleRate = &v76;
  sub_10668((void ***)&buf);
  operator delete(v6);
  *(void *)&buf.mSampleRate = &v79;
  sub_10668((void ***)&buf);
}

void sub_10140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::mutex::unlock(v41);
  sub_4E9C((uint64_t)&a11);
  sub_1216C(&a17);
  if (v40) {
    operator delete(v40);
  }
  a11 = &a19;
  sub_10668((void ***)&a11);
  if (v39) {
    operator delete(v39);
  }
  a11 = &a22;
  sub_10668((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_10504(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    unint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_10724(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    sub_10590(v2, v5);
    return (uint64_t *)sub_1075C((uint64_t)v5);
  }
  return result;
}

void sub_1057C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1075C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10590(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 16; ; i -= 16)
  {
    uint64_t result = v6 + i;
    uint64_t v9 = v4 + i;
    if (v4 + i - 16 == v5) {
      break;
    }
    *(void *)(result - 32) = 0;
    uint64_t v10 = result - 32;
    *(_DWORD *)(v10 + 8) = 0;
    sub_10CBC((unsigned int **)v10, v9 - 32);
  }
  a2[1] = result - 16;
  uint64_t v11 = *a1;
  *a1 = result - 16;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_10668(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (unsigned int **)**a1;
  if (v2)
  {
    uint64_t v4 = (unsigned int **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_1216C(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_106EC(unint64_t a1)
{
  if (a1 >> 61) {
    sub_60560();
  }
  return operator new(8 * a1);
}

void *sub_10724(unint64_t a1)
{
  if (a1 >> 60) {
    sub_60560();
  }
  return operator new(16 * a1);
}

uint64_t sub_1075C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_1216C((unsigned int **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned int **sub_107AC(unsigned int **a1, uint64_t a2, int a3)
{
  if ((*(unsigned char *)(a2 + 12) & 0x20) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 28);
    if (!v6)
    {
LABEL_12:
      *a1 = 0;
      *((_DWORD *)a1 + 2) = 0;
      return a1;
    }
  }
  else
  {
    int v6 = 1;
  }
  char v7 = (unsigned int *)malloc_type_calloc(1uLL, (16 * v6) | 8u, 0xC517D68uLL);
  if (!v7) {
    goto LABEL_12;
  }
  *char v7 = v6;
  *a1 = v7;
  *((_DWORD *)a1 + 2) = 1;
  if (!a3)
  {
    unint64_t v15 = (os_log_t *)sub_32A48(13);
    Float64 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "VAAudioBufferList.cpp";
      __int16 v20 = 1024;
      int v21 = 57;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"data buffer frame size must be non-zero\"", (uint8_t *)&v18, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "data buffer frame size must be non-zero");
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  int v10 = *(_DWORD *)(a2 + 24);
  if ((*(unsigned char *)(a2 + 12) & 0x20) != 0) {
    int v11 = 1;
  }
  else {
    int v11 = *(_DWORD *)(a2 + 28);
  }
  size_t v12 = (v10 * a3);
  do
  {
    uint64_t v13 = &v7[v8];
    v13[2] = v11;
    v13[3] = v12;
    *((void *)v13 + 2) = malloc_type_calloc(1uLL, v12, 0xCA1A88D8uLL);
    ++v9;
    char v7 = *a1;
    v8 += 4;
  }
  while (v9 < **a1);
  return a1;
}

void sub_1096C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10988(uint64_t a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = a2[6];
  long long v9 = a2[7];
  long long v10 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  sub_10CBC((unsigned int **)(a1 + 160), (uint64_t)(a2 + 10));
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  sub_10CBC((unsigned int **)(a1 + 176), (uint64_t)(a2 + 11));
  *(_OWORD *)(a1 + 192) = a2[12];
  return a1;
}

void sub_10A14(_Unwind_Exception *a1)
{
  sub_1216C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10A28(uint64_t a1, _OWORD **a2, _OWORD **a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_10B2C((void *)a1, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * (a2[1] - *a2));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10B2C((void *)(a1 + 24), *a3, a3[1], 0x4EC4EC4EC4EC4EC5 * (a3[1] - *a3));
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  sub_10CBC((unsigned int **)(a1 + 48), a4);
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  sub_10CBC((unsigned int **)(a1 + 64), a5);
  return a1;
}

void sub_10AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1216C(v2);
  sub_121EC((void ***)va);
  sub_121EC((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_10B2C(void *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_4ED64(result, a4);
    uint64_t result = (void *)sub_10BB4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_121EC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10BB4(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a2 != a3)
  {
    do
    {
      long long v6 = a2[1];
      *(_OWORD *)uint64_t v4 = *a2;
      *(_OWORD *)(v4 + 16) = v6;
      long long v7 = a2[2];
      long long v8 = a2[3];
      long long v9 = a2[5];
      *(_OWORD *)(v4 + 64) = a2[4];
      *(_OWORD *)(v4 + 80) = v9;
      *(_OWORD *)(v4 + 32) = v7;
      *(_OWORD *)(v4 + 48) = v8;
      long long v10 = a2[6];
      long long v11 = a2[7];
      long long v12 = a2[9];
      *(_OWORD *)(v4 + 128) = a2[8];
      *(_OWORD *)(v4 + 144) = v12;
      *(_OWORD *)(v4 + 96) = v10;
      *(_OWORD *)(v4 + 112) = v11;
      *(void *)(v4 + 160) = 0;
      *(_DWORD *)(v4 + 168) = 0;
      uint64_t v13 = (uint64_t)(a2 + 10);
      sub_10CBC((unsigned int **)(v4 + 160), (uint64_t)(a2 + 10));
      *(void *)(v4 + 176) = 0;
      *(_DWORD *)(v4 + 184) = 0;
      v13 += 16;
      sub_10CBC((unsigned int **)(v4 + 176), v13);
      *(_OWORD *)(v4 + 192) = *(_OWORD *)(v13 + 16);
      uint64_t v4 = v18 + 208;
      v18 += 208;
      a2 = (_OWORD *)(v13 + 32);
    }
    while ((_OWORD *)(v13 + 32) != a3);
  }
  char v16 = 1;
  sub_4F4E8((uint64_t)v15);
  return v4;
}

void sub_10C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1216C(v9);
  sub_4F4E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10CBC(unsigned int **a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int **)a2;
  if (*(unsigned int **)a2 != *a1)
  {
    sub_1216C(a1);
    if (v2)
    {
      unsigned int v5 = *v2;
      long long v6 = (unsigned int *)malloc_type_calloc(1uLL, (16 * *v2) | 8, 0xC517D68uLL);
      *long long v6 = v5;
      *a1 = v6;
      *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
      if (v5)
      {
        uint64_t v7 = 0;
        for (unint64_t i = 0; i < v5; ++i)
        {
          long long v9 = &v6[v7];
          long long v10 = (const void **)&v2[v7];
          *(void *)&v6[v7 + 2] = *(void *)&v2[v7 + 2];
          if (*(_DWORD *)(a2 + 8) == 1)
          {
            long long v11 = malloc_type_malloc(*((unsigned int *)v10 + 3), 0xF87685CuLL);
            *((void *)v9 + 2) = v11;
            memcpy(v11, v10[2], *((unsigned int *)v10 + 3));
            long long v6 = *a1;
            unsigned int v5 = **a1;
          }
          else
          {
            *((void *)v9 + 2) = v10[2];
          }
          v7 += 4;
        }
      }
    }
  }
}

void sub_10DA8(uint64_t a1)
{
  uint64_t v1 = a1;
  char v2 = 0;
  uint64_t v3 = 0;
  int v4 = 0;
  int v5 = 0;
  int v161 = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  uint64_t v132 = a1 + 520;
  int v158 = 0;
  uint64_t v159 = 0;
  uint64_t v131 = a1 + 544;
  uint64_t v141 = a1 + 144;
  uint64_t v160 = 0;
  __int16 v157 = 256;
  unsigned int v142 = 1;
  do
  {
    char v133 = v2;
    int v6 = *((unsigned __int8 *)&v157 + v3);
    if (*((unsigned char *)&v157 + v3)) {
      uint64_t v7 = (std::string::size_type *)&v158;
    }
    else {
      uint64_t v7 = (std::string::size_type *)&v161;
    }
    int v143 = v7;
    if (*((unsigned char *)&v157 + v3)) {
      uint64_t v8 = 544;
    }
    else {
      uint64_t v8 = 520;
    }
    uint64_t v9 = v132;
    if (*((unsigned char *)&v157 + v3)) {
      uint64_t v9 = v131;
    }
    uint64_t v140 = v8;
    uint64_t v10 = *(void *)(v9 + 8) - *(void *)(v1 + v8);
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = v10 >> 4;
      if (v12 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v12;
      }
      uint64_t v14 = v154;
      if (*((unsigned char *)&v157 + v3)) {
        unint64_t v15 = v154;
      }
      else {
        unint64_t v15 = (void **)&v151;
      }
      if (*((unsigned char *)&v157 + v3)) {
        uint64_t v14 = (void **)&v151;
      }
      uint64_t v135 = v14;
      v136 = v15;
      if (*((unsigned char *)&v157 + v3)) {
        char v16 = &v158;
      }
      else {
        char v16 = &v161;
      }
      uint64_t v17 = &v163;
      if (*((unsigned char *)&v157 + v3)) {
        uint64_t v17 = &v160;
      }
      uint64_t v138 = v13;
      std::string::size_type v139 = (std::string::size_type)v17;
      uint64_t v18 = "output";
      if (!*((unsigned char *)&v157 + v3)) {
        uint64_t v18 = "input";
      }
      __s = (char *)v18;
      do
      {
        uint64_t v19 = (uint64_t *)(*(void *)(v1 + v140) + 16 * v11);
        uint64_t v156 = 0;
        *(_OWORD *)int v154 = 0u;
        long long v155 = 0u;
        int v20 = sub_513F8(*v19, (uint64_t)v154);
        if (v20)
        {
          int v119 = (os_log_t *)sub_32A48(13);
          int v120 = *v119;
          if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1067;
            _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Stream::GetCurrentFormat() returned an error.\"", buf, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_6414D8;
          exception[2] = v20;
        }
        if (!DWORD2(v155))
        {
          int v125 = (os_log_t *)sub_32A48(13);
          int v126 = *v125;
          if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1068;
            _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Stream::GetCurrentFormat() returned mBytesPerFrame of 0.\"", buf, 0x12u);
          }
          int v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v127, "Stream::GetCurrentFormat() returned mBytesPerFrame of 0.");
        }
        uint64_t v153 = 0;
        long long v151 = 0u;
        long long v152 = 0u;
        int v21 = sub_51340(*v19, (uint64_t)&v151);
        if (v21)
        {
          double v122 = (os_log_t *)sub_32A48(13);
          int v123 = *v122;
          if (*v122 && os_log_type_enabled(*v122, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1072;
            _os_log_impl(&def_1E50E8, v123, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"VirtualStream::GetCurrentHALIOProcFormat() returned an error.\"", buf, 0x12u);
          }
          int v124 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v124 = &off_6414D8;
          v124[2] = v21;
        }
        if (!DWORD2(v152))
        {
          int v128 = (os_log_t *)sub_32A48(13);
          int v129 = *v128;
          if (*v128 && os_log_type_enabled(*v128, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1073;
            _os_log_impl(&def_1E50E8, v129, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.\"", buf, 0x12u);
          }
          int v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v130, "VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.");
        }
        uint64_t v22 = (os_log_t *)sub_32A48(16);
        unsigned int v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
        {
          sub_259A4((std::string *)__p, (uint64_t)&v151);
          __int16 v24 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1075;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v24;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Current HAL IOProc format is %s", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        int v25 = 0;
        uint64_t v26 = *(void *)(*v19 + 136);
        if (LODWORD(v154[1]) == 1819304813 && DWORD2(v151) == 1819304813)
        {
          int v27 = (*(uint64_t (**)(uint64_t, BOOL, void, long long *, void **))(*(void *)v1 + 592))(v1, v6 != 0, *(void *)(*v19 + 136), &v151, v154);
          if (v27)
          {
            uint64_t v28 = (os_log_t *)sub_32A48(16);
            uint64_t v29 = *v28;
            if (*v28)
            {
              if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1089;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", buf, 0x18u);
              }
            }
          }
          if (*(unsigned char *)(v26 + 448) || *(void *)(v26 + 584) || *(void *)(v26 + 672))
          {
            int v25 = 1;
          }
          else
          {
            uint64_t v67 = sub_32A48(16);
            uint64_t v68 = sub_32A48(24);
            char v69 = 0;
            uint64_t v70 = 0;
            *(void *)AudioStreamBasicDescription buf = 0x100000002;
            uint64_t v71 = *(void *)(v67 + 8);
            while (1)
            {
              uint64_t v72 = *(int *)&buf[4 * v70];
              char v73 = v69;
              if (((v71 & v72) != 0) != ((*(void *)(v68 + 8) & v72) != 0)) {
                break;
              }
              char v69 = 1;
              uint64_t v70 = 1;
              if (v73) {
                goto LABEL_130;
              }
            }
            if ((v71 & v72) == 0) {
              uint64_t v67 = v68;
            }
LABEL_130:
            uint64_t v74 = *(NSObject **)v67;
            if (v74 && os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
            {
              sub_247DC(__p, v26);
              uint64_t v75 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1091;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v75;
              _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_INFO, "%25s:%-5d DSP is disabled:\n%s", buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            int v25 = 0;
          }
        }
        uint64_t v30 = (os_log_t *)sub_32A48(16);
        int v31 = *v30;
        unsigned int v32 = v142;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_INFO))
        {
          sub_247DC(__p, v26);
          uint64_t v33 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1094;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v33;
          _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_INFO, "%25s:%-5d Chain Description: %s", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        sub_3524(v150, (void *)(*v19 + 112));
        if (sub_548CC(v150))
        {
          sub_9264(&v164, (uint64_t)v150, 0);
          std::operator+<char>();
          long long v34 = *((_OWORD *)v136 + 1);
          *(_OWORD *)AudioStreamBasicDescription buf = *(_OWORD *)v136;
          *(_OWORD *)&buf[16] = v34;
          unint64_t v170 = v136[4];
          sub_1229C(v141, v142, (uint64_t *)&v149, (uint64_t)buf, v6 == 0);
          unsigned int v35 = v142 + 1;
          if (v25)
          {
            std::operator+<char>();
            long long v36 = *((_OWORD *)v135 + 1);
            *(_OWORD *)long long __p = *(_OWORD *)v135;
            *(_OWORD *)&__p[16] = v36;
            *(void *)&__p[32] = v135[4];
            sub_1229C(v141, v142 + 1, (uint64_t *)&v148, (uint64_t)__p, v6 == 0);
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            unsigned int v37 = v142 + 1;
            unsigned int v35 = v142 + 2;
          }
          else
          {
            unsigned int v37 = 0;
          }
          sub_50894(v141);
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v149.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v164.__r_.__value_.__l.__data_);
          }
          unsigned int v142 = v35;
        }
        else
        {
          unsigned int v32 = 0;
          unsigned int v37 = 0;
        }
        if ((BYTE4(v154[1]) & 0x20) != 0) {
          int v38 = HIDWORD(v155);
        }
        else {
          int v38 = 1;
        }
        if (v6) {
          int v39 = v5;
        }
        else {
          int v39 = v4;
        }
        int v40 = v38 + v39;
        if (v6) {
          int v5 = v40;
        }
        else {
          int v4 = v40;
        }
        if (v25)
        {
          if (*(void *)(v26 + 984) == *(void *)(v26 + 976)) {
            uint64_t v41 = (_DWORD **)(v26 + 944);
          }
          else {
            uint64_t v41 = *(_DWORD ***)(v26 + 976);
          }
          sub_12654((uint64_t)&v146, *v41, 0);
          uint64_t v42 = *(void *)(v26 + 984);
          if (v42 == *(void *)(v26 + 976)) {
            double v43 = (_DWORD **)(v26 + 944);
          }
          else {
            double v43 = (_DWORD **)(v42 - 16);
          }
          sub_12654((uint64_t)&v144, *v43, 0);
          if (!v146 || !*v146 || !v144 || !*v144)
          {
            int v116 = (os_log_t *)sub_32A48(13);
            int v117 = *v116;
            if (*v116)
            {
              if (os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1130;
                _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"DSP chain ABL should not be invalid if DSP processing is enabled\"", buf, 0x12u);
              }
            }
            int v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v118, "DSP chain ABL should not be invalid if DSP processing is enabled");
          }
        }
        else
        {
          int v146 = 0;
          int v147 = 0;
          int v144 = 0;
          int v145 = 0;
        }
        BOOL v44 = (long long *)sub_D304(v26);
        int v45 = (long long *)sub_F20C(v26);
        sub_7D10((uint64_t)buf, (long long *)v154, &v151, (uint64_t)&v146, (uint64_t)&v144, v44, v45, v26);
        unsigned int v175 = v32;
        unsigned int v176 = v37;
        unint64_t v46 = v16[1];
        long long v47 = &v163;
        if (v6) {
          long long v47 = &v160;
        }
        if ((unint64_t)v46 >= *v47)
        {
          uint64_t v49 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)((uint64_t)v46 - *v143) >> 4);
          unint64_t v50 = v49 + 1;
          uint64_t v1 = a1;
          if ((unint64_t)(v49 + 1) > 0x13B13B13B13B13BLL) {
            sub_60548();
          }
          if (0x9D89D89D89D89D8ALL * ((uint64_t)((uint64_t)v16[2] - *v143) >> 4) > v50) {
            unint64_t v50 = 0x9D89D89D89D89D8ALL * ((uint64_t)((uint64_t)v16[2] - *v143) >> 4);
          }
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)((uint64_t)v16[2] - *v143) >> 4)) >= 0x9D89D89D89D89DLL) {
            unint64_t v51 = 0x13B13B13B13B13BLL;
          }
          else {
            unint64_t v51 = v50;
          }
          *(void *)&__p[32] = v139;
          if (v51) {
            unint64_t v51 = (unint64_t)sub_62E4(v51);
          }
          else {
            uint64_t v52 = 0;
          }
          *(void *)long long __p = v51;
          *(void *)&__p[8] = v51 + 208 * v49;
          *(void *)&__p[16] = *(void *)&__p[8];
          *(void *)&__p[24] = v51 + 208 * v52;
          sub_10988(*(uint64_t *)&__p[8], buf);
          std::string::size_type v53 = *(void *)&__p[8];
          *(void *)&__p[16] += 208;
          uint64_t v54 = v16[1];
          int v55 = (_OWORD *)*v143;
          v149.__r_.__value_.__r.__words[0] = *(void *)&__p[8];
          v149.__r_.__value_.__l.__size_ = *(void *)&__p[8];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
          v164.__r_.__value_.__r.__words[0] = v139;
          v164.__r_.__value_.__l.__size_ = (std::string::size_type)&v148;
          v164.__r_.__value_.__r.__words[2] = (std::string::size_type)&v149;
          char v165 = 0;
          while (v54 != v55)
          {
            v54 -= 13;
            sub_10988(v53 - 208, v54);
            std::string::size_type v53 = v149.__r_.__value_.__l.__size_ - 208;
            v149.__r_.__value_.__l.__size_ -= 208;
          }
          char v165 = 1;
          sub_4F550((uint64_t)&v164);
          std::string::size_type v56 = *v143;
          *int v143 = v53;
          int v57 = v16[1];
          uint64_t v58 = v16[2];
          long long v48 = *(_OWORD **)&__p[16];
          BOOL v59 = *(_OWORD **)&__p[24];
          v16[1] = *(_OWORD **)&__p[16];
          void v16[2] = v59;
          *(void *)&__p[16] = v57;
          *(void *)&__p[24] = v58;
          *(void *)long long __p = v56;
          *(void *)&__p[8] = v56;
          sub_4F5B0((uint64_t)__p);
        }
        else
        {
          sub_10988((uint64_t)v16[1], buf);
          uint64_t v1 = a1;
          long long v48 = v46 + 13;
          v16[1] = v46 + 13;
        }
        v16[1] = v48;
        uint64_t v60 = sub_32A48(16);
        if (*(unsigned char *)(v60 + 8))
        {
          uint64_t v61 = *(NSObject **)v60;
          if (*(void *)v60)
          {
            if (os_log_type_enabled(*(os_log_t *)v60, OS_LOG_TYPE_DEBUG))
            {
              sub_21C8C(&v164, __s);
              if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v62 = &v164;
              }
              else {
                uint64_t v62 = (std::string *)v164.__r_.__value_.__r.__words[0];
              }
              sub_259A4(&v149, (uint64_t)(v16[1] - 13));
              int v63 = SHIBYTE(v149.__r_.__value_.__r.__words[2]);
              std::string::size_type v64 = v149.__r_.__value_.__r.__words[0];
              sub_259A4(&v148, (uint64_t)v16[1] - 168);
              long long v65 = &v149;
              if (v63 < 0) {
                long long v65 = (std::string *)v64;
              }
              double v66 = &v148;
              if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                double v66 = (std::string *)v148.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)long long __p = 136316418;
              *(void *)&__p[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1139;
              *(_WORD *)&__p[18] = 2080;
              *(void *)&__p[20] = v62;
              *(_WORD *)&__p[28] = 2048;
              *(void *)&__p[30] = v11;
              *(_WORD *)&__p[38] = 2080;
              *(void *)&__p[40] = v65;
              __int16 v167 = 2080;
              v168 = v66;
              _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Cached %s stream %lu data. mVirtualizedStreamFormat: %s; mNonVirtualizedStreamFormat: %s",
                __p,
                0x3Au);
              if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v148.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v149.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v164.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        sub_1216C(&v174);
        sub_1216C(&v173);
        sub_1216C(&v144);
        sub_1216C(&v146);
        sub_8108(v150);
        ++v11;
      }
      while (v11 != v138);
    }
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v133 & 1) == 0);
  sub_125EC((uint64_t)&v151, v4);
  sub_125EC((uint64_t)&v164, v5);
  char v76 = 0;
  uint64_t v77 = 0;
  *(_WORD *)AudioStreamBasicDescription buf = 256;
  do
  {
    char v78 = v76;
    int v79 = buf[v77];
    if (buf[v77]) {
      v80 = (uint64_t *)&v158;
    }
    else {
      v80 = (uint64_t *)&v161;
    }
    if (v79) {
      unint64_t v81 = (long long *)&v164;
    }
    else {
      unint64_t v81 = &v151;
    }
    unsigned int v82 = &v162;
    if (v79) {
      unsigned int v82 = &v159;
    }
    uint64_t v83 = *v82;
    uint64_t v84 = v83 - *v80;
    if (v83 != *v80)
    {
      uint64_t v85 = 0;
      int v86 = 0;
      unint64_t v87 = v84 / 208;
      if (v87 <= 1) {
        unint64_t v87 = 1;
      }
      do
      {
        uint64_t v88 = *v80;
        uint64_t v89 = *v80 + 208 * v85;
        if ((*(unsigned char *)(v89 + 12) & 0x20) != 0)
        {
          uint64_t v93 = *(unsigned int *)(v89 + 28);
          uint64_t v94 = v88 + 208 * v85;
          v95 = (unsigned int **)(v94 + 176);
          v91 = (unsigned int **)(v94 + 160);
          if (!v79) {
            v91 = v95;
          }
          if (!v93) {
            goto LABEL_171;
          }
        }
        else
        {
          uint64_t v90 = v88 + 208 * v85;
          v91 = (unsigned int **)(v90 + 176);
          unsigned int v92 = (unsigned int **)(v90 + 160);
          if (v79) {
            v91 = v92;
          }
          uint64_t v93 = 1;
        }
        unint64_t v96 = 0;
        uint64_t v97 = 2;
        do
        {
          unsigned int v98 = v86 + v96;
          unsigned int v99 = *v91;
          if (!*v91 || ((unint64_t v100 = *v99, v100) ? (v101 = v96 >= v100) : (v101 = 1), v101))
          {
            if ((*(unsigned char *)(v89 + 12) & 0x20) != 0) {
              int v102 = 1;
            }
            else {
              int v102 = *(_DWORD *)(v89 + 28);
            }
            *(_DWORD *)(*(void *)v81 + 16 * v98 + 8) = v102;
          }
          else
          {
            *(_OWORD *)(*(void *)v81 + 16 * v98 + 8) = *(_OWORD *)&v99[v97];
          }
          ++v96;
          v97 += 4;
        }
        while (v93 != v96);
        v86 += v96;
LABEL_171:
        ++v85;
      }
      while (v85 != v87);
    }
    char v76 = 1;
    uint64_t v77 = 1;
  }
  while ((v78 & 1) == 0);
  sub_10A28((uint64_t)buf, &v161, &v158, (uint64_t)&v151, (uint64_t)&v164);
  if (!sub_1250C(v171[0], *(void *)(v1 + 736))) {
    goto LABEL_184;
  }
  if (!sub_1250C(v172[0], *(void *)(v1 + 752))) {
    goto LABEL_184;
  }
  uint64_t v103 = *(void *)&buf[8];
  uint64_t v104 = *(void *)buf;
  v105 = *(unint64_t **)(v1 + 688);
  if (*(void *)&buf[8] - *(void *)buf != *(void *)(v1 + 696) - (void)v105) {
    goto LABEL_184;
  }
  while (v104 != v103)
  {
    if (!sub_7DD0(v104, v105)) {
      goto LABEL_184;
    }
    v104 += 208;
    v105 += 26;
  }
  v106 = v170;
  uint64_t v107 = *(void *)&buf[24];
  v108 = *(unint64_t **)(v1 + 712);
  if ((_OWORD *)((char *)v170 - *(void *)&buf[24]) != (_OWORD *)(*(void *)(v1 + 720) - (void)v108)) {
    goto LABEL_184;
  }
  if (*(_OWORD **)&buf[24] != v170)
  {
    do
    {
      int v109 = sub_7DD0(v107, v108);
      if (!v109) {
        break;
      }
      v107 += 208;
      v108 += 26;
    }
    while ((_OWORD *)v107 != v106);
    if ((v109 & 1) == 0)
    {
LABEL_184:
      if ((unsigned char *)(v1 + 688) != buf)
      {
        sub_2811AC((uint64_t *)(v1 + 688), *(_OWORD **)buf, *(_OWORD **)&buf[8], 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4));
        sub_2811AC((uint64_t *)(v1 + 712), *(_OWORD **)&buf[24], v170, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v170 - *(void *)&buf[24]) >> 4));
      }
      sub_10CBC((unsigned int **)(v1 + 736), (uint64_t)v171);
      sub_10CBC((unsigned int **)(v1 + 752), (uint64_t)v172);
      int v110 = (os_log_t *)sub_32A48(16);
      int v111 = *v110;
      if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(v154, *(_DWORD *)(v1 + 268));
        int v112 = (SBYTE7(v155) & 0x80u) == 0 ? v154 : (void **)v154[0];
        uint64_t v113 = *(void *)(v1 + 712);
        int v114 = -991146299 * ((unint64_t)(*(void *)(v1 + 720) - v113) >> 4);
        if (*(void *)(v1 + 720) == v113 && (uint64_t v113 = *(void *)(v1 + 688), *(void *)(v1 + 696) == v113)) {
          uint64_t v115 = 0;
        }
        else {
          uint64_t v115 = *(void *)(v113 + 40);
        }
        *(_DWORD *)long long __p = 136316162;
        *(void *)&__p[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1191;
        *(_WORD *)&__p[18] = 2080;
        *(void *)&__p[20] = v112;
        *(_WORD *)&__p[28] = 1024;
        *(_DWORD *)&__p[30] = v114;
        *(_WORD *)&__p[34] = 2048;
        *(void *)&__p[36] = v115;
        _os_log_impl(&def_1E50E8, v111, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Updated IOProcCache for VAD '%s'. NumStreams: %u SampleRate: %f", __p, 0x2Cu);
        if (SBYTE7(v155) < 0) {
          operator delete(v154[0]);
        }
      }
    }
  }
  sub_1216C(v172);
  sub_1216C(v171);
  *(void *)long long __p = &buf[24];
  sub_121EC((void ***)__p);
  *(void *)long long __p = buf;
  sub_121EC((void ***)__p);
  sub_1216C((unsigned int **)&v164);
  sub_1216C((unsigned int **)&v151);
  *(void *)AudioStreamBasicDescription buf = &v158;
  sub_121EC((void ***)buf);
  *(void *)AudioStreamBasicDescription buf = &v161;
  sub_121EC((void ***)buf);
}

void sub_11F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,unsigned int *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  sub_281348((uint64_t)&STACK[0x220]);
  sub_1216C((unsigned int **)&a65);
  sub_1216C(&a47);
  STACK[0x220] = (unint64_t)&a59;
  sub_121EC((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a62;
  sub_121EC((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_1216C(unsigned int **a1)
{
  char v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 2) == 1)
    {
      unint64_t v3 = *v2;
      if (v3)
      {
        unint64_t v4 = 0;
        uint64_t v5 = 4;
        do
        {
          if (*(void *)&v2[v5])
          {
            free(*(void **)&v2[v5]);
            char v2 = *a1;
            unint64_t v3 = **a1;
          }
          ++v4;
          v5 += 4;
        }
        while (v4 < v3);
      }
    }
    free(v2);
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
  }
}

void sub_121EC(void ***a1)
{
  char v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_12240((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_12240(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 208)
  {
    sub_1216C((unsigned int **)(i - 32));
    sub_1216C((unsigned int **)(i - 48));
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1229C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10 = sub_32A48(16);
  if (*(unsigned char *)(v10 + 8))
  {
    uint64_t v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v12 = a5 ? "input" : "output";
        uint64_t v13 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        sub_259A4(&__p, a4);
        uint64_t v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        uint64_t v22 = "AggregateDevice.h";
        __int16 v23 = 1024;
        int v24 = 642;
        __int16 v25 = 2080;
        *(void *)uint64_t v26 = v12;
        *(_WORD *)&v26[8] = 1024;
        *(_DWORD *)&v26[10] = a2;
        __int16 v27 = 2080;
        uint64_t v28 = v13;
        __int16 v29 = 2080;
        uint64_t v30 = v14;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting %s node %u format: %s %s", buf, 0x36u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v15 = *(void *)(a1 + 24);
  if (qword_65D920 != -1) {
    dispatch_once(&qword_65D920, &stru_62A808);
  }
  if (off_65D948)
  {
    int v16 = off_65D948(v15, a3, a2, a5 ^ 1u, a4, 4096);
    if (!v16) {
      return;
    }
  }
  else
  {
    int v16 = -1;
  }
  uint64_t v17 = (os_log_t *)sub_32A48(16);
  uint64_t v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v19 = a3;
    }
    else {
      uint64_t v19 = (uint64_t *)*a3;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    uint64_t v22 = "AggregateDevice.h";
    __int16 v23 = 1024;
    int v24 = 644;
    __int16 v25 = 1024;
    *(_DWORD *)uint64_t v26 = v16;
    *(_WORD *)&v26[4] = 2080;
    *(void *)&v26[6] = v19;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting node format: %s", buf, 0x22u);
  }
}

uint64_t sub_1250C(unsigned int *a1, unint64_t a2)
{
  if (!((unint64_t)a1 | a2)) {
    return 1;
  }
  uint64_t v4 = 0;
  if (a1 && a2)
  {
    uint64_t v7 = v2;
    uint64_t v8 = v3;
    BOOL v6 = 0;
    sub_12564(a1, (_DWORD *)a2, &v6);
    return v6;
  }
  return v4;
}

BOOL sub_12564(unsigned int *a1, _DWORD *a2, BOOL *a3)
{
  unint64_t v3 = *a1;
  BOOL v4 = v3 == *a2;
  if (v3 != *a2 || v3 == 0)
  {
    BOOL result = v3 == *a2;
  }
  else
  {
    uint64_t v7 = a2 + 4;
    uint64_t v8 = a1 + 4;
    unint64_t v9 = 1;
    BOOL v4 = 1;
    do
    {
      BOOL v10 = v4;
      int v11 = *((_DWORD *)v8 - 2);
      int v12 = *((_DWORD *)v7 - 2);
      BOOL result = v11 == v12;
      BOOL v4 = 0;
      if (v10 && v11 == v12) {
        BOOL v4 = *v8 == *v7;
      }
      BOOL v13 = v11 != v12 || v9++ >= v3;
      v7 += 2;
      v8 += 2;
    }
    while (!v13);
  }
  if (a3) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_125EC(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v4 = malloc_type_calloc(1uLL, (16 * a2) | 8u, 0xC517D68uLL);
    if (v4) {
      _DWORD *v4 = a2;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 2 * (v4 != 0);
  return a1;
}

uint64_t sub_12654(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if (!a2) {
    goto LABEL_10;
  }
  unsigned int v4 = a3;
  if (!a3) {
    unsigned int v4 = *a2;
  }
  BOOL v6 = malloc_type_calloc(1uLL, (16 * v4) | 8, 0xC517D68uLL);
  if (v6)
  {
    *BOOL v6 = v4;
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 8) = 2;
    if (v4)
    {
      unsigned int v9 = *a2;
      uint64_t v8 = (uint64_t *)(a2 + 4);
      uint64_t v7 = v9;
      uint64_t v10 = v4;
      int v11 = v6 + 4;
      do
      {
        if (!v7) {
          break;
        }
        *(v11 - 1) = *(v8 - 1);
        uint64_t v12 = *v8;
        v8 += 2;
        void *v11 = v12;
        v11 += 2;
        --v7;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
LABEL_10:
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 2;
  }
  return a1;
}

void sub_12700(uint64_t a1, int a2)
{
  sub_13A4C(&v13, (uint64_t *)(a1 + 32), 72);
  uint64_t v3 = v13;
  if (v13)
  {
    uint64_t v4 = sub_32A48(16);
    uint64_t v5 = sub_32A48(24);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioStreamBasicDescription buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10)
      {
        if ((v8 & 1) == 0) {
          goto LABEL_13;
        }
LABEL_10:
        int v11 = *(NSObject **)v4;
        if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          *(void *)&uint8_t buf[4] = "OrientationIODelegate.cpp";
          __int16 v18 = 1024;
          int v19 = 94;
          __int16 v20 = 1024;
          int v21 = a2;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Received Device Orientation [%d] Update", buf, 0x18u);
        }
LABEL_13:
        sub_1329C(&v15, *(void *)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
        uint64_t v12 = v16;
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v12);
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_13910();
        operator new();
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
    if (*(void *)(v4 + 8)) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  if (v14) {
    sub_4636C(v14);
  }
}

void sub_128F4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_1290C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (a2)
  {
    if (v18)
    {
      std::__shared_weak_count::__release_weak(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    if (a10) {
      sub_4636C(a10);
    }
    if (a2 == 3)
    {
      int v21 = __cxa_begin_catch(a1);
      uint64_t v22 = (os_log_t *)sub_32A48(13);
      __int16 v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        int v24 = v21[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a14) = 1024;
        DWORD1(a14) = v24;
        WORD4(a14) = 2080;
        *(void *)((char *)&a14 + 10) = "";
        a16 = 1024;
        a17 = 76;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).", (uint8_t *)&buf, 0x28u);
      }
    }
    else
    {
      __int16 v25 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v26 = v25;
        __int16 v27 = (os_log_t *)sub_32A48(13);
        uint64_t v28 = *v27;
        if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = v29;
          WORD6(a14) = 2080;
          *(void *)((char *)&a14 + 14) = "";
          HIWORD(a17) = 1024;
          a18 = 76;
          _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).", (uint8_t *)&buf, 0x2Cu);
        }
      }
      else
      {
        uint64_t v30 = (os_log_t *)sub_32A48(13);
        int v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = "";
          WORD6(a14) = 1024;
          *(_DWORD *)((char *)&a14 + 14) = 76;
          _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).", (uint8_t *)&buf, 0x22u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x128C0);
  }
  JUMPOUT(0x128FCLL);
}

void sub_12B74()
{
}

void sub_12B80()
{
}

void sub_12B8C()
{
}

void sub_12B9C()
{
}

uint64_t *sub_12BA4(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)a1;
      if (*(void *)a1)
      {
        uint64_t v6 = sub_32A48(16);
        uint64_t v7 = sub_32A48(24);
        char v8 = 0;
        uint64_t v9 = 0;
        *(void *)AudioStreamBasicDescription buf = 0x100000002;
        uint64_t v10 = *(void *)(v6 + 8);
        while (1)
        {
          uint64_t v11 = *(int *)&buf[4 * v9];
          char v12 = v8;
          if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
            break;
          }
          char v8 = 1;
          uint64_t v9 = 1;
          if (v12)
          {
            if ((v10 & 1) == 0) {
              goto LABEL_17;
            }
            goto LABEL_12;
          }
        }
        if ((v10 & v11) == 0) {
          uint64_t v6 = v7;
        }
        if (*(void *)(v6 + 8))
        {
LABEL_12:
          uint64_t v13 = *(NSObject **)v6;
          if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v14 = (void *)(v5 + 24);
            if (*(char *)(v5 + 47) < 0) {
              uint64_t v14 = (void *)*v14;
            }
            int v15 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "OrientationIODelegate.cpp";
            __int16 v21 = 1024;
            int v22 = 105;
            __int16 v23 = 2080;
            int v24 = v14;
            __int16 v25 = 1024;
            int v26 = v15;
            _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Notifying %s about Device Orientation %d", buf, 0x22u);
          }
        }
LABEL_17:
        int v19 = *(_DWORD *)(a1 + 16);
        uint64_t v16 = *(void *)(v5 + 72);
        if (!v16) {
          sub_56964();
        }
        (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v19);
      }
      sub_4636C(v4);
    }
  }
  return sub_13248(&v18);
}

void sub_12D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_4636C(v16);
  if (a2 == 3)
  {
    int v19 = __cxa_begin_catch(exception_object);
    __int16 v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v22;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 108;
      __int16 v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    int v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v27 = v26;
      uint64_t v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v30;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 108;
        __int16 v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 108;
        __int16 v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x12D34);
}

uint64_t *sub_13248(uint64_t *result)
{
  uint64_t v1 = *result;
  std::__shared_weak_count *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

void *sub_1329C(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    sub_5CABC();
  }
  uint64_t v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_132E0(void *a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BCA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BCA0))
  {
    byte_64BC98 = sub_164E1C();
    __cxa_guard_release(&qword_64BCA0);
  }
  if (byte_64BC98)
  {
    uint64_t v4 = *(id *)sub_32A48(24);
    uint64_t v5 = v4;
    if (v4)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        os_log_t v32 = "DSPChain.mm";
        __int16 v33 = 1024;
        int v34 = 2213;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No device orientation based stereo channel swap due to defaults", buf, 0x12u);
      }
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)a1[2];
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = a1[1];
        if (v8)
        {
          int v24 = v7;
          uint64_t v29 = v8 + 48;
          char v30 = 1;
          sub_39ECC(v8 + 48);
          uint64_t v10 = (unsigned int *)a1[3];
          for (uint64_t i = (unsigned int *)a1[4]; v10 != i; v10 += 2)
          {
            unsigned int v12 = *v10;
            uint64_t v11 = v10[1];
            uint64_t v13 = sub_13714(v8, *v10, v11, 0);
            if (!v13)
            {
              os_log_t v21 = *(id *)sub_32A48(13);
              int v22 = v21;
              if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                os_log_t v32 = "DSPChain.mm";
                __int16 v33 = 1024;
                int v34 = 2224;
                _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", buf, 0x12u);
              }

              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Postcondition failure.");
            }
            uint64_t v14 = sub_32A48(24);
            if (*(unsigned char *)(v14 + 8))
            {
              id v15 = *(id *)v14;
              if (v15)
              {
                uint64_t v16 = v15;
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                {
                  sub_2417C(v27, v12);
                  int v17 = v28;
                  uint64_t v18 = (void **)v27[0];
                  sub_2417C(__p, v11);
                  int v19 = v27;
                  if (v17 < 0) {
                    int v19 = v18;
                  }
                  __int16 v20 = __p;
                  if (v26 < 0) {
                    __int16 v20 = (void **)__p[0];
                  }
                  *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
                  os_log_t v32 = "DSPChain.mm";
                  __int16 v33 = 1024;
                  int v34 = 2226;
                  __int16 v35 = 2080;
                  long long v36 = v19;
                  __int16 v37 = 2080;
                  int v38 = v20;
                  __int16 v39 = 1024;
                  unsigned int v40 = v3;
                  _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating {%s, %s} with orientation of %d", buf, 0x2Cu);
                  if (v26 < 0) {
                    operator delete(__p[0]);
                  }
                  if (v28 < 0) {
                    operator delete(v27[0]);
                  }
                }
              }
            }
            (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v13 + 72))(v13, v11, 0, 0, (float)v3);
          }
          sub_3A3E8((uint64_t)&v29);
          uint64_t v7 = v24;
        }
        sub_4636C(v7);
      }
    }
  }
}

void sub_13690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

uint64_t sub_13714(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a1 + 48;
  char v16 = 1;
  sub_39ECC(a1 + 48);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
LABEL_6:
    uint64_t v12 = 0;
  }
  else
  {
    unsigned int v8 = 1;
    while (1)
    {
      uint64_t v9 = sub_1385C(a1, v8 - 1);
      uint64_t v10 = v9;
      if (v9)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 152))(v9) == a2) {
          break;
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) <= v8++) {
        goto LABEL_6;
      }
    }
    int v14 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, void))(*(void *)v10 + 64))(v10, a3, &v14, a4, 0))
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = v10;
    }
  }
  sub_3A3E8((uint64_t)&v15);
  return v12;
}

void sub_13844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A3E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1385C(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = a1 + 48;
  char v8 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v4) >> 3) <= a2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 24 * a2 + 8);
  }
  sub_3A3E8((uint64_t)&v7);
  return v5;
}

uint64_t sub_138E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_138E8(uint64_t a1, AudioUnitParameterID a2, AudioUnitParameterValue *outValue, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    return AudioUnitGetParameter(*(AudioUnit *)(v5 + 16), a2, inScope, inElement, outValue);
  }
  else {
    return 4294967246;
  }
}

uint64_t sub_13910()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669CF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_669CF8))
  {
    qword_669CF0 = 0;
    __cxa_guard_release(&qword_669CF8);
  }
  uint64_t result = qword_669CF0;
  if (!qword_669CF0)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(6);
    uint64_t v2 = *v1;
    if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136315394;
      uint64_t v6 = "VirtualAudioQueue.h";
      __int16 v7 = 1024;
      int v8 = 78;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create VirtualAudio queue.", (uint8_t *)&v5, 0x12u);
    }
    unsigned int v3 = dispatch_queue_create("VirtualAudio Queue", 0);
    uint64_t v4 = qword_669CF0;
    qword_669CF0 = (uint64_t)v3;
    if (v4)
    {
      dispatch_release(v4);
      unsigned int v3 = qword_669CF0;
    }
    dispatch_queue_set_specific(v3, "VirtualAudioQueueKey", "VirtualAudioQueueKey", 0);
    return qword_669CF0;
  }
  return result;
}

std::__shared_weak_count *sub_13A4C(uint64_t *a1, uint64_t *a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  int v5 = (std::__shared_weak_count *)a2[1];
  if (!v5
    || (uint64_t result = std::__shared_weak_count::lock(v5), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v8 = *a2, *a1 = *a2, !v8))
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
        uint64_t v13 = "StandardUtilities.h";
        __int16 v14 = 1024;
        int v15 = 267;
        __int16 v16 = 2080;
        int v17 = "";
        __int16 v18 = 1024;
        int v19 = a3;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_13BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13BD4(void *a1, unsigned int a2, AudioUnitScope a3, AudioUnitElement a4, AudioUnitParameterValue a5)
{
  uint64_t v10 = sub_32A48(24);
  if (*(unsigned char *)(v10 + 8))
  {
    uint64_t v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, a2);
        int v12 = v21;
        uint64_t v13 = (void **)__p[0];
        uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 160))(a1);
        uint64_t v18 = v14;
        int v15 = __p;
        char v19 = 1;
        if (v12 < 0) {
          int v15 = v13;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        __int16 v23 = "DSPProcessorManager.cpp";
        __int16 v24 = 1024;
        int v25 = 465;
        __int16 v26 = 2080;
        __int16 v27 = v15;
        __int16 v28 = 1024;
        unsigned int v29 = a2;
        __int16 v30 = 2112;
        uint64_t v31 = v14;
        __int16 v32 = 2048;
        double v33 = a5;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting parameter '%s' (%u) on Audio Unit with name \"%@\" to value %f", buf, 0x36u);
        sub_72924((uint64_t)&v18);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v16 = a1[9];
  if (v16) {
    return AudioUnitSetParameter(*(AudioUnit *)(v16 + 16), a2, a3, a4, a5, 0);
  }
  else {
    return 4294967246;
  }
}

void sub_13D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_13DB8(void *a1)
{
  uint64_t v2 = (const void *)kCTAudioInputsKey;
  if (kCTAudioInputsKey)
  {
    CFRetain(kCTAudioInputsKey);
    sub_14E44(&v41, v2);
  }
  else
  {
    CFTypeRef v41 = 0;
  }
  sub_1449C((CFDictionaryRef *)&v40, (uint64_t)(a1 + 3), 1);
  sub_15350(buf, v41, &v40);
  unsigned int v3 = (const void *)kCTAudioOutputsKey;
  if (kCTAudioOutputsKey) {
    CFRetain(kCTAudioOutputsKey);
  }
  sub_14E44(&v39, v3);
  sub_1449C((CFDictionaryRef *)&v38, (uint64_t)(a1 + 3), 0);
  sub_15350((int *)((char *)&v49 + 2), v39, &v38);
  uint64_t v4 = (const void *)kCTAudioNoiseReductionEnabledKey;
  if (kCTAudioNoiseReductionEnabledKey) {
    CFRetain(kCTAudioNoiseReductionEnabledKey);
  }
  sub_14E44(&cf, v4);
  uint64_t v5 = a1[9];
  CFTypeRef v6 = cf;
  if (cf) {
    CFRetain(cf);
  }
  __int16 v7 = &kCFBooleanTrue;
  if (!v5) {
    __int16 v7 = &kCFBooleanFalse;
  }
  CFBooleanRef v8 = *v7;
  CFTypeRef v52 = v6;
  CFBooleanRef v53 = v8;
  uint64_t v9 = (const void *)kCTAudioConnectedPortsKey;
  if (kCTAudioConnectedPortsKey) {
    CFRetain(kCTAudioConnectedPortsKey);
  }
  sub_14E44(&v36, v9);
  uint64_t v10 = (void *)a1[10];
  if (v10 == a1 + 11)
  {
LABEL_22:
    std::string::size_type v56 = 0;
    int v57 = 0;
    uint64_t v58 = 0;
    sub_4ECEC(&__p, 0);
    uint64_t v14 = v56;
    int v15 = v57;
    if (v56 != v57)
    {
      uint64_t v16 = __p;
      do
      {
        uint64_t v17 = *v14++;
        *v16++ = v17;
      }
      while (v14 != v15);
    }
    CFArrayRef v18 = sub_55EFC((const void **)__p, (uint64_t)v44);
    if (__p)
    {
      BOOL v44 = __p;
      operator delete(__p);
    }
    std::string __p = &v56;
    sub_4EDB8((void ***)&__p);
  }
  else
  {
    while (*((_DWORD *)v10 + 7) != 1885892727)
    {
      uint64_t v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v10[2];
          BOOL v13 = *v12 == (void)v10;
          uint64_t v10 = v12;
        }
        while (!v13);
      }
      uint64_t v10 = v12;
      if (v12 == a1 + 11) {
        goto LABEL_22;
      }
    }
    char v19 = (const void *)kCTAudioHeadphonesWiredPort;
    if (kCTAudioHeadphonesWiredPort) {
      CFRetain(kCTAudioHeadphonesWiredPort);
    }
    sub_14E44(&v56, v19);
    sub_4ECEC(&__p, 1uLL);
    *(void *)std::string __p = v56;
    CFArrayRef v18 = sub_55EFC((const void **)__p, (uint64_t)v44);
    if (__p)
    {
      BOOL v44 = __p;
      operator delete(__p);
    }
    if (v56) {
      CFRelease(v56);
    }
  }
  CFTypeRef v20 = v36;
  if (v36) {
    CFRetain(v36);
  }
  CFTypeRef v54 = v20;
  if (v18) {
    CFRetain(v18);
  }
  CFArrayRef v55 = v18;
  v42[0] = buf;
  v42[1] = 4;
  CFDictionaryRef v21 = sub_4D3D8((uint64_t)v42);
  for (uint64_t i = 0; i != -64; i -= 16)
  {
    __int16 v23 = *(CFArrayRef *)((char *)&v55 + i);
    if (v23) {
      CFRelease(v23);
    }
    __int16 v24 = *(CFTypeRef *)((char *)&v54 + i);
    if (v24) {
      CFRelease(v24);
    }
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v41) {
    CFRelease(v41);
  }
  int v25 = (const void *)a1[2];
  if (!v25 || !CFEqual(v21, v25))
  {
    uint64_t v26 = sub_32A48(12);
    if (*(unsigned char *)(v26 + 8))
    {
      __int16 v27 = *(NSObject **)v26;
      if (*(void *)v26)
      {
        if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v28 = CFCopyDescription(v21);
          sub_20B40((uint64_t)&__p, v28);
          if (v28) {
            CFRelease(v28);
          }
          p_p = &__p;
          if (v45 < 0) {
            p_p = __p;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          long long v47 = "CoreTelephonyInterface.cpp";
          __int16 v48 = 1024;
          int v49 = 633;
          __int16 v50 = 2080;
          *(void *)unint64_t v51 = p_p;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Sending route info '%s' to Core Telephony", buf, 0x1Cu);
          if (v45 < 0) {
            operator delete(__p);
          }
        }
      }
    }
    unint64_t active = _CTServerConnectionSetActiveAudioSystemConfiguration();
    int v31 = active;
    unint64_t v32 = HIDWORD(active);
    if (active)
    {
      double v33 = (os_log_t *)sub_32A48(12);
      int v34 = *v33;
      if (*v33)
      {
        if (os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
          long long v47 = "CoreTelephonyInterface.cpp";
          __int16 v48 = 1024;
          int v49 = 639;
          __int16 v50 = 1024;
          *(_DWORD *)unint64_t v51 = v31;
          *(_WORD *)&v51[4] = 1024;
          *(_DWORD *)&v51[6] = v32;
          _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d _CTServerConnectionSetActiveAudioSystemConfiguration returned error: {domain, error} : {%d, %d}", buf, 0x1Eu);
        }
      }
    }
    __int16 v35 = (const void *)a1[2];
    a1[2] = v21;
    CFRetain(v21);
    if (v35) {
      CFRelease(v35);
    }
  }
  CFRelease(v21);
}

void sub_142CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_1449C(CFDictionaryRef *a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 24;
  }
  if (a3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a2 + 24;
  }
  if (a3)
  {
    CFTypeRef v6 = (const void *)kCTAudioBuiltInMic1Key;
    if (kCTAudioBuiltInMic1Key)
    {
      CFRetain(kCTAudioBuiltInMic1Key);
      sub_14E44(v70, v6);
      CFTypeRef v7 = v70[0];
    }
    else
    {
      CFTypeRef v7 = 0;
    }
    *(void *)AudioStreamBasicDescription buf = v7;
    v70[0] = 0;
    buf[8] = 0;
    uint64_t v10 = (const void *)kCTAudioBuiltInMic2Key;
    if (kCTAudioBuiltInMic2Key) {
      CFRetain(kCTAudioBuiltInMic2Key);
    }
    sub_14E44(&v72, v10);
    *(void *)&buf[16] = v72;
    CFTypeRef v72 = 0;
    unsigned char buf[24] = 0;
    uint64_t v11 = (const void *)kCTAudioBuiltInMic3Key;
    if (kCTAudioBuiltInMic3Key) {
      CFRetain(kCTAudioBuiltInMic3Key);
    }
    sub_14E44(&cf, v11);
    *(void *)&unsigned char buf[32] = cf;
    CFTypeRef cf = 0;
    char v74 = 0;
    sub_15048((uint64_t)&v66, (uint64_t)buf, 3);
    for (uint64_t i = 32; i != -16; i -= 16)
    {
      BOOL v13 = *(const void **)&buf[i];
      if (v13) {
        CFRelease(v13);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v72) {
      CFRelease(v72);
    }
    CFTypeRef v14 = v70[0];
    if (v70[0]) {
LABEL_41:
    }
      CFRelease(v14);
  }
  else
  {
    CFBooleanRef v8 = (const void *)kCTAudioSpeakerKey;
    if (kCTAudioSpeakerKey)
    {
      CFRetain(kCTAudioSpeakerKey);
      sub_14E44(v70, v8);
      CFTypeRef v9 = v70[0];
    }
    else
    {
      CFTypeRef v9 = 0;
    }
    *(void *)AudioStreamBasicDescription buf = v9;
    v70[0] = 0;
    buf[8] = 0;
    int v15 = (const void *)kCTAudioOtherKey;
    if (kCTAudioOtherKey) {
      CFRetain(kCTAudioOtherKey);
    }
    sub_14E44(&v72, v15);
    *(void *)&buf[16] = v72;
    CFTypeRef v72 = 0;
    unsigned char buf[24] = 0;
    uint64_t v16 = (const void *)kCTAudioReceiverKey;
    if (kCTAudioReceiverKey) {
      CFRetain(kCTAudioReceiverKey);
    }
    sub_14E44(&cf, v16);
    *(void *)&unsigned char buf[32] = cf;
    CFTypeRef cf = 0;
    char v74 = 0;
    sub_15048((uint64_t)&v66, (uint64_t)buf, 3);
    for (uint64_t j = 32; j != -16; j -= 16)
    {
      CFArrayRef v18 = *(const void **)&buf[j];
      if (v18) {
        CFRelease(v18);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v72) {
      CFRelease(v72);
    }
    CFTypeRef v14 = v70[0];
    if (v70[0]) {
      goto LABEL_41;
    }
  }
  char v19 = *(void **)(a2 + v4);
  CFTypeRef v20 = (void *)(v5 + 8);
  if (v19 != (void *)(v5 + 8))
  {
    CFDictionaryRef v21 = "Output";
    int v22 = (const void *)kCTAudioReceiverKey;
    if (a3) {
      CFDictionaryRef v21 = "Input";
    }
    uint64_t v62 = v21;
    __int16 v23 = (const void *)kCTAudioOtherKey;
    __int16 v24 = (const void *)kCTAudioBuiltInMic3Key;
    int v25 = (const void *)kCTAudioSpeakerKey;
    uint64_t v26 = (const void *)kCTAudioBuiltInMic2Key;
    __int16 v27 = (const void *)kCTAudioBuiltInMic1Key;
    std::string::size_type v64 = (const void *)kCTAudioSpeakerKey;
    while (!v19[5])
    {
LABEL_90:
      BOOL v44 = (void *)v19[1];
      if (v44)
      {
        do
        {
          char v45 = v44;
          BOOL v44 = (void *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          char v45 = (void *)v19[2];
          BOOL v29 = *v45 == (void)v19;
          char v19 = v45;
        }
        while (!v29);
      }
      char v19 = v45;
      if (v45 == v20) {
        goto LABEL_96;
      }
    }
    int v28 = *((_DWORD *)v19 + 8);
    if (a3)
    {
      if (v28 <= 1768778033)
      {
        if (v28 != 1718446435)
        {
          unsigned __int16 v31 = 26929;
LABEL_66:
          if (v28 != (v31 | 0x696D0000))
          {
            CFTypeRef v72 = 0;
            goto LABEL_81;
          }
          if (v27)
          {
            CFRetain(v27);
            __int16 v30 = v27;
            goto LABEL_72;
          }
          goto LABEL_71;
        }
        if (v24)
        {
          CFRetain(v24);
          __int16 v30 = v24;
          goto LABEL_72;
        }
      }
      else
      {
        BOOL v29 = v28 == 1768778034 || v28 == 1936550243;
        if (!v29)
        {
          unsigned __int16 v31 = 26979;
          goto LABEL_66;
        }
        if (v26)
        {
          CFRetain(v26);
          __int16 v30 = v26;
          goto LABEL_72;
        }
      }
    }
    else if (v28 == 1886613611)
    {
      if (v25)
      {
        CFRetain(v25);
        __int16 v30 = v25;
        goto LABEL_72;
      }
    }
    else if (v28 == 1886545251)
    {
      if (v22)
      {
        CFRetain(v22);
        __int16 v30 = v22;
        goto LABEL_72;
      }
    }
    else if (v23)
    {
      CFRetain(v23);
      __int16 v30 = v23;
      goto LABEL_72;
    }
LABEL_71:
    __int16 v30 = 0;
LABEL_72:
    sub_14E44(&v72, v30);
    if (v72)
    {
      unint64_t v32 = v20;
      double v33 = v27;
      int v34 = v26;
      __int16 v35 = (void **)sub_15208((uint64_t)&v66, v70, (const __CFString **)&v72);
      CFTypeRef v36 = *v35;
      if (!*v35)
      {
        __int16 v37 = v35;
        CFTypeRef v36 = operator new(0x30uLL);
        *(void *)&buf[8] = &v67;
        CFTypeRef v38 = v72;
        if (v72) {
          CFRetain(v72);
        }
        v36[4] = v38;
        *((unsigned char *)v36 + 40) = 0;
        buf[16] = 1;
        CFTypeRef v39 = v70[0];
        *CFTypeRef v36 = 0;
        v36[1] = 0;
        v36[2] = v39;
        *__int16 v37 = v36;
        CFTypeRef v40 = v36;
        if (*v66)
        {
          double v66 = (uint64_t *)*v66;
          CFTypeRef v40 = (uint64_t *)*v37;
        }
        sub_46D00(v67, v40);
        ++v68;
        *(void *)AudioStreamBasicDescription buf = 0;
        sub_151B0((uint64_t)buf);
        int v25 = v64;
      }
      *((unsigned char *)v36 + 40) = 1;
      uint64_t v26 = v34;
      __int16 v27 = v33;
      CFTypeRef v20 = v32;
LABEL_88:
      if (v72) {
        CFRelease(v72);
      }
      goto LABEL_90;
    }
LABEL_81:
    uint64_t v41 = sub_32A48(12);
    if (*(unsigned char *)(v41 + 8))
    {
      uint64_t v42 = *(NSObject **)v41;
      if (*(void *)v41)
      {
        if (os_log_type_enabled(*(os_log_t *)v41, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v70, *((_DWORD *)v19 + 8));
          double v43 = v70;
          if ((v71 & 0x8000000000000000) != 0) {
            double v43 = (CFTypeRef *)v70[0];
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
          *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 202;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v62;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v43;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to determine CTkey for %s %s", buf, 0x26u);
          if (SHIBYTE(v71) < 0) {
            operator delete((void *)v70[0]);
          }
        }
      }
    }
    goto LABEL_88;
  }
LABEL_96:
  v70[0] = 0;
  v70[1] = 0;
  unint64_t v71 = 0;
  sub_162D4(v70, v68);
  unint64_t v46 = v66;
  if (v66 != (uint64_t *)&v67)
  {
    long long v47 = (char *)v70[1];
    do
    {
      if ((unint64_t)v47 >= v71)
      {
        uint64_t v48 = (v47 - (char *)v70[0]) >> 4;
        if ((unint64_t)(v48 + 1) >> 60) {
          sub_60548();
        }
        unint64_t v49 = (uint64_t)(v71 - (unint64_t)v70[0]) >> 3;
        if (v49 <= v48 + 1) {
          unint64_t v49 = v48 + 1;
        }
        if (v71 - (unint64_t)v70[0] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        *(void *)&unsigned char buf[32] = &v71;
        if (v50) {
          unint64_t v50 = (unint64_t)sub_10724(v50);
        }
        else {
          uint64_t v51 = 0;
        }
        CFTypeRef v52 = (void *)(v50 + 16 * v48);
        *(void *)AudioStreamBasicDescription buf = v50;
        *(void *)&buf[8] = v52;
        *(void *)&unsigned char buf[24] = v50 + 16 * v51;
        sub_14F1C(v52, (CFTypeRef)v46[4], (unsigned char *)v46 + 40);
        long long v47 = (char *)(v52 + 2);
        *(void *)&buf[16] = v52 + 2;
        CFTypeRef v54 = v70[0];
        CFBooleanRef v53 = v70[1];
        CFArrayRef v55 = *(void **)&buf[8];
        if (v70[1] == v70[0])
        {
          int64x2_t v57 = vdupq_n_s64((unint64_t)v70[1]);
        }
        else
        {
          do
          {
            uint64_t v56 = *(v53 - 2);
            v53 -= 2;
            *(v55 - 2) = v56;
            v55 -= 2;
            *CFBooleanRef v53 = 0;
            v55[1] = v53[1];
            v53[1] = 0;
          }
          while (v53 != v54);
          int64x2_t v57 = *(int64x2_t *)v70;
          long long v47 = *(char **)&buf[16];
        }
        v70[0] = v55;
        v70[1] = v47;
        *(int64x2_t *)&buf[8] = v57;
        unint64_t v58 = v71;
        unint64_t v71 = *(void *)&buf[24];
        *(void *)&unsigned char buf[24] = v58;
        *(void *)AudioStreamBasicDescription buf = v57.i64[0];
        sub_16358((uint64_t)buf);
      }
      else
      {
        sub_14F1C(v47, (CFTypeRef)v46[4], (unsigned char *)v46 + 40);
        v47 += 16;
      }
      v70[1] = v47;
      BOOL v59 = (uint64_t *)v46[1];
      if (v59)
      {
        do
        {
          uint64_t v60 = (uint64_t **)v59;
          BOOL v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          uint64_t v60 = (uint64_t **)v46[2];
          BOOL v29 = *v60 == v46;
          unint64_t v46 = (uint64_t *)v60;
        }
        while (!v29);
      }
      unint64_t v46 = (uint64_t *)v60;
    }
    while (v60 != &v67);
  }
  CFDictionaryRef v61 = sub_4D69C((void ***)v70);
  *(void *)AudioStreamBasicDescription buf = v70;
  sub_14F84((void ***)buf);
  *a1 = v61;
  sub_14DF0(v67);
}

void sub_14C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_14DF0(void *a1)
{
  if (a1)
  {
    sub_14DF0(*a1);
    sub_14DF0(a1[1]);
    sub_14EFC((const void *)a1[4]);
    operator delete(a1);
  }
}

void *sub_14E44(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return a1;
}

void sub_14ECC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_14EFC(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void *sub_14F1C(void *a1, CFTypeRef cf, unsigned char *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (*a3) {
    CFTypeRef v6 = &kCFBooleanTrue;
  }
  else {
    CFTypeRef v6 = &kCFBooleanFalse;
  }
  CFBooleanRef v7 = *v6;
  *a1 = cf;
  a1[1] = v7;
  return a1;
}

void sub_14F84(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_15008(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_15008(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

uint64_t sub_15048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a2 + 16 * a3;
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v4) {
        break;
      }
      CFBooleanRef v8 = v4;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          uint64_t v7 = *(void *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t)v8[2];
          BOOL v10 = *(void *)v9 == (void)v8;
          CFBooleanRef v8 = (uint64_t **)v9;
        }
        while (v10);
      }
      if ((unint64_t)sub_152A4(*(const __CFString **)(v9 + 32), (const __CFString **)v5) >= 2)
      {
        if (!*v4) {
          goto LABEL_10;
        }
LABEL_12:
        uint64_t v17 = (void *)v9;
        uint64_t v11 = (uint64_t **)(v9 + 8);
        goto LABEL_14;
      }
      uint64_t v11 = (uint64_t **)sub_15208(a1, &v17, (const __CFString **)v5);
LABEL_14:
      if (!*v11) {
        goto LABEL_15;
      }
LABEL_18:
      v5 += 16;
      if (v5 == v6) {
        return a1;
      }
    }
    uint64_t v9 = (uint64_t)v4;
    if (!v7)
    {
LABEL_10:
      uint64_t v17 = v4;
      uint64_t v11 = v4;
LABEL_15:
      int v12 = operator new(0x30uLL);
      v15[1] = v4;
      CFStringRef v13 = *(const __CFString **)v5;
      if (*(void *)v5) {
        CFRetain(*(CFTypeRef *)v5);
      }
      v12[4] = v13;
      *((unsigned char *)v12 + 40) = *(unsigned char *)(v5 + 8);
      char v16 = 1;
      sub_46CA8((uint64_t **)a1, (uint64_t)v17, v11, v12);
      v15[0] = 0;
      sub_151B0((uint64_t)v15);
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  return a1;
}

void sub_1519C(_Unwind_Exception *a1)
{
  sub_14DF0(*v1);
  _Unwind_Resume(a1);
}

void sub_151B0(uint64_t a1)
{
  uint64_t v1 = *(const void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_14EFC(v1[4]);
    }
    operator delete(v1);
  }
}

void *sub_15208(uint64_t a1, void *a2, const __CFString **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        CFBooleanRef v8 = (const __CFString **)(v4 + 32);
        if ((unint64_t)sub_152A4(*a3, (const __CFString **)(v4 + 32)) < 2) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((unint64_t)sub_152A4(*v8, a3) < 2) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

CFComparisonResult sub_152A4(const __CFString *cf, const __CFString **a2)
{
  if (cf)
  {
    CFRetain(cf);
    CFStringRef v4 = *a2;
    if (!v4)
    {
      CFComparisonResult v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(cf);
      return v5;
    }
  }
  else
  {
    CFStringRef v4 = *a2;
    if (!*a2) {
      return 0;
    }
  }
  CFRetain(v4);
  if (cf) {
    CFComparisonResult v5 = CFStringCompare(cf, v4, 0);
  }
  else {
    CFComparisonResult v5 = kCFCompareLessThan;
  }
  CFRelease(v4);
  if (cf) {
    goto LABEL_9;
  }
  return v5;
}

void *sub_15350(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  uint64_t v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

void sub_153B0(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    CFTypeID v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      CFStringRef v4 = v3;
      uint64_t v5 = *a1;
      if (!v5 || (unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 16)), (v6 & 1) == 0))
      {
LABEL_94:
        sub_4636C(v4);
        return;
      }
      uint64_t v8 = *(void *)(v5 + 32);
      uint64_t v7 = *(std::__shared_weak_count **)(v5 + 40);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(unsigned int *)(v5 + 48);
      v75[0] = 0;
      v75[1] = 0;
      char v74 = v75;
      BOOL v10 = *(void ***)(v5 + 56);
      if (v10 != (void **)(v5 + 64))
      {
        do
        {
          sub_15C0C((uint64_t)&v74, (uint64_t)v75, v10 + 4, (uint64_t)(v10 + 4));
          uint64_t v11 = (void **)v10[1];
          if (v11)
          {
            do
            {
              int v12 = v11;
              uint64_t v11 = (void **)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              int v12 = (void **)v10[2];
              BOOL v13 = *v12 == v10;
              BOOL v10 = v12;
            }
            while (!v13);
          }
          BOOL v10 = v12;
        }
        while (v12 != (void **)(v5 + 64));
      }
      if (v7)
      {
        CFTypeRef v14 = std::__shared_weak_count::lock(v7);
        if (v14)
        {
          int v15 = v14;
          if (v8)
          {
            int64x2_t v80 = 0uLL;
            unint64_t v81 = 0;
            sub_21C8C(buf, "measuredWattsParameterID");
            int v16 = *(_DWORD *)sub_15BCC((uint64_t)&v74, (void **)buf);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v16 != -1)
            {
              sub_21C8C(buf, "measuredWattsParameterID");
              uint64_t v17 = (unsigned int *)sub_15BCC((uint64_t)&v74, (void **)buf);
              uint64_t v18 = sub_15F24(v8, v9, *v17);
              unsigned int v82 = (_OWORD *)v18;
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if ((v18 & 0xFF00000000) != 0)
              {
                sub_2213C((uint64_t)&v78, "Avg Watts Measured", (int *)&v82);
                uint64_t v19 = v80.i64[1];
                if (v80.i64[1] >= (unint64_t)v81)
                {
                  uint64_t v23 = (v80.i64[1] - v80.i64[0]) >> 4;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 60) {
                    sub_60548();
                  }
                  uint64_t v25 = (uint64_t)&v81[-v80.i64[0]];
                  if ((uint64_t)&v81[-v80.i64[0]] >> 3 > v24) {
                    unint64_t v24 = v25 >> 3;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  uint64_t v85 = &v81;
                  __int16 v27 = (char *)sub_10724(v26);
                  int v28 = (CFTypeRef *)&v27[16 * v23];
                  uint64_t v84 = &v27[16 * v29];
                  *int v28 = v78;
                  CFTypeRef v78 = 0;
                  v28[1] = cf;
                  CFTypeRef cf = 0;
                  __int16 v30 = v28 + 2;
                  *(void *)&buf[16] = v28 + 2;
                  unsigned __int16 v31 = (void *)v80.i64[1];
                  unint64_t v32 = (void *)v80.i64[0];
                  if (v80.i64[1] == v80.i64[0])
                  {
                    int64x2_t v34 = vdupq_n_s64(v80.u64[1]);
                  }
                  else
                  {
                    do
                    {
                      double v33 = (const void *)*(v31 - 2);
                      v31 -= 2;
                      *(v28 - 2) = v33;
                      v28 -= 2;
                      *unsigned __int16 v31 = 0;
                      v28[1] = (CFTypeRef)v31[1];
                      v31[1] = 0;
                    }
                    while (v31 != v32);
                    int64x2_t v34 = v80;
                    __int16 v30 = *(void **)&buf[16];
                  }
                  v80.i64[0] = (uint64_t)v28;
                  v80.i64[1] = (uint64_t)v30;
                  *(int64x2_t *)&buf[8] = v34;
                  __int16 v35 = v81;
                  unint64_t v81 = v84;
                  uint64_t v84 = v35;
                  *(void *)AudioStreamBasicDescription buf = v34.i64[0];
                  sub_16358((uint64_t)buf);
                  v80.i64[1] = (uint64_t)v30;
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v78) {
                    CFRelease(v78);
                  }
                }
                else
                {
                  *(void *)v80.i64[1] = v78;
                  *(void *)(v19 + 8) = cf;
                  v80.i64[1] = v19 + 16;
                }
              }
            }
            sub_21C8C(buf, "modelledWattsParameterID");
            int v36 = *(_DWORD *)sub_15BCC((uint64_t)&v74, (void **)buf);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v36 != -1)
            {
              sub_21C8C(buf, "modelledWattsParameterID");
              unsigned int v82 = buf;
              __int16 v37 = sub_231DC((uint64_t **)&v74, (void **)buf, &v82);
              uint64_t v38 = sub_15F24(v8, v9, *((unsigned int *)v37 + 14));
              uint64_t v77 = v38;
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if ((v38 & 0xFF00000000) != 0)
              {
                sub_2213C((uint64_t)&v78, "Avg Watts Modelled", (int *)&v77);
                uint64_t v39 = v80.i64[1];
                if (v80.i64[1] >= (unint64_t)v81)
                {
                  uint64_t v40 = (v80.i64[1] - v80.i64[0]) >> 4;
                  unint64_t v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 60) {
                    sub_60548();
                  }
                  uint64_t v42 = (uint64_t)&v81[-v80.i64[0]];
                  if ((uint64_t)&v81[-v80.i64[0]] >> 3 > v41) {
                    unint64_t v41 = v42 >> 3;
                  }
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v41;
                  }
                  uint64_t v85 = &v81;
                  BOOL v44 = (char *)sub_10724(v43);
                  unint64_t v46 = (CFTypeRef *)&v44[16 * v40];
                  *unint64_t v46 = v78;
                  CFTypeRef v78 = 0;
                  v46[1] = cf;
                  CFTypeRef cf = 0;
                  long long v47 = v46 + 2;
                  uint64_t v48 = (void *)v80.i64[1];
                  unint64_t v49 = (void *)v80.i64[0];
                  if (v80.i64[1] == v80.i64[0])
                  {
                    int64x2_t v51 = vdupq_n_s64(v80.u64[1]);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v50 = (const void *)*(v48 - 2);
                      v48 -= 2;
                      *(v46 - 2) = v50;
                      v46 -= 2;
                      void *v48 = 0;
                      v46[1] = (CFTypeRef)v48[1];
                      v48[1] = 0;
                    }
                    while (v48 != v49);
                    int64x2_t v51 = v80;
                  }
                  v80.i64[0] = (uint64_t)v46;
                  v80.i64[1] = (uint64_t)v47;
                  *(int64x2_t *)&buf[8] = v51;
                  CFTypeRef v52 = v81;
                  unint64_t v81 = &v44[16 * v45];
                  uint64_t v84 = v52;
                  *(void *)AudioStreamBasicDescription buf = v51.i64[0];
                  sub_16358((uint64_t)buf);
                  v80.i64[1] = (uint64_t)v47;
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v78) {
                    CFRelease(v78);
                  }
                }
                else
                {
                  *(void *)v80.i64[1] = v78;
                  *(void *)(v39 + 8) = cf;
                  v80.i64[1] = v39 + 16;
                }
              }
            }
            CFDictionaryRef v22 = sub_4D69C((void ***)&v80);
            CFTypeRef v76 = v22;
            *(void *)AudioStreamBasicDescription buf = &v80;
            sub_14F84((void ***)buf);
            sub_4636C(v15);
LABEL_67:
            sub_8F90(v75[0]);
            if (v7) {
              std::__shared_weak_count::__release_weak(v7);
            }
            if (v22 && CFDictionaryGetCount(v22))
            {
              std::recursive_mutex::lock((std::recursive_mutex *)(v5 + 80));
              unint64_t v53 = *(void *)(v5 + 160);
              CFTypeRef v54 = *(void **)(v5 + 152);
              if ((unint64_t)v54 >= v53)
              {
                uint64_t v56 = *(void *)(v5 + 144);
                uint64_t v57 = ((uint64_t)v54 - v56) >> 3;
                if ((unint64_t)(v57 + 1) >> 61) {
                  sub_60548();
                }
                uint64_t v58 = v53 - v56;
                uint64_t v59 = v58 >> 2;
                if (v58 >> 2 <= (unint64_t)(v57 + 1)) {
                  uint64_t v59 = v57 + 1;
                }
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v60 = v59;
                }
                uint64_t v85 = (char **)(v5 + 160);
                if (v60)
                {
                  uint64_t v62 = sub_106EC(v60);
                }
                else
                {
                  uint64_t v62 = 0;
                  uint64_t v61 = 0;
                }
                int v63 = (char *)&v62[v61];
                uint64_t v84 = v63;
                std::string::size_type v64 = sub_4F614(&v62[v57], v22);
                CFArrayRef v55 = v64 + 1;
                *(void *)&buf[16] = v64 + 1;
                double v66 = *(void **)(v5 + 144);
                long long v65 = *(void **)(v5 + 152);
                if (v65 == v66)
                {
                  int64x2_t v68 = vdupq_n_s64((unint64_t)v65);
                }
                else
                {
                  do
                  {
                    uint64_t v67 = *--v65;
                    *--std::string::size_type v64 = v67;
                    *long long v65 = 0;
                  }
                  while (v65 != v66);
                  int64x2_t v68 = *(int64x2_t *)(v5 + 144);
                  CFArrayRef v55 = *(void **)&buf[16];
                  int v63 = v84;
                }
                *(void *)(v5 + 144) = v64;
                *(void *)(v5 + 152) = v55;
                *(int64x2_t *)&buf[8] = v68;
                char v69 = *(char **)(v5 + 160);
                *(void *)(v5 + 160) = v63;
                uint64_t v84 = v69;
                *(void *)AudioStreamBasicDescription buf = v68.i64[0];
                sub_A78F0((uint64_t)buf);
              }
              else
              {
                CFArrayRef v55 = sub_4F614(v54, v22) + 1;
              }
              *(void *)(v5 + 152) = v55;
              if ((unint64_t)v55 - *(void *)(v5 + 144) >= 0x59) {
                sub_A6F94(v5);
              }
              std::recursive_mutex::unlock((std::recursive_mutex *)(v5 + 80));
            }
            dispatch_time_t v70 = dispatch_time(0, 5000000000);
            unint64_t v71 = sub_13910();
            block[0] = _NSConcreteStackBlock;
            block[1] = 1174405120;
            block[2] = sub_A7448;
            block[3] = &unk_61FA20;
            block[4] = v5;
            char v73 = v4;
            atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
            dispatch_after(v70, v71, block);
            if (v73) {
              sub_4636C(v73);
            }
            if (v76) {
              CFRelease(v76);
            }
            goto LABEL_94;
          }
          sub_4636C(v14);
        }
      }
      CFTypeRef v20 = (os_log_t *)sub_32A48(13);
      CFDictionaryRef v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "PowerLogManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 155;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to lock DSPChain.", buf, 0x12u);
      }
      CFDictionaryRef v22 = 0;
      CFTypeRef v76 = 0;
      goto LABEL_67;
    }
  }
}

void sub_15AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_15BCC(uint64_t a1, void **a2)
{
  uint64_t v2 = *sub_15DF8(a1, &v4, a2);
  if (!v2) {
    sub_8251C("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t sub_15C0C(uint64_t result, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t **)result;
  uint64_t v8 = (void **)(result + 8);
  if (result + 8 != a2)
  {
    uint64_t result = sub_15E8C(a3, (void **)(a2 + 32));
    if ((result & 0x80) == 0)
    {
      uint64_t result = sub_15E8C((void *)(a2 + 32), a3);
      if ((result & 0x80) == 0)
      {
        uint64_t v20 = a2;
        CFDictionaryRef v21 = (void *)a2;
        uint64_t v9 = (void **)&v20;
        if (a2) {
          return result;
        }
        goto LABEL_25;
      }
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        CFTypeRef v14 = *(void ***)(a2 + 8);
        do
        {
          uint64_t v9 = v14;
          CFTypeRef v14 = (void **)*v14;
        }
        while (v14);
      }
      else
      {
        uint64_t v19 = (void **)a2;
        do
        {
          uint64_t v9 = (void **)v19[2];
          BOOL v16 = *v9 == v19;
          uint64_t v19 = v9;
        }
        while (!v16);
      }
      if (v9 == v8 || (uint64_t result = sub_15E8C(a3, v9 + 4), (result & 0x80) != 0))
      {
        if (v13)
        {
          CFDictionaryRef v21 = v9;
        }
        else
        {
          CFDictionaryRef v21 = (void *)a2;
          uint64_t v9 = (void **)(a2 + 8);
        }
LABEL_22:
        if (*v9) {
          return result;
        }
        goto LABEL_25;
      }
LABEL_19:
      uint64_t result = (uint64_t)sub_15DF8((uint64_t)v7, &v21, a3);
      uint64_t v9 = (void **)result;
      goto LABEL_22;
    }
  }
  BOOL v10 = *(void **)a2;
  if (*v7 == (uint64_t *)a2)
  {
    int v12 = (void *)a2;
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = *(void **)a2;
      do
      {
        int v12 = v11;
        uint64_t v11 = (void *)v11[1];
      }
      while (v11);
    }
    else
    {
      int v15 = (void *)a2;
      do
      {
        int v12 = (void *)v15[2];
        BOOL v16 = *v12 == (void)v15;
        int v15 = v12;
      }
      while (v16);
    }
    uint64_t result = sub_15E8C(v12 + 4, a3);
    if ((result & 0x80) == 0) {
      goto LABEL_19;
    }
  }
  if (v10)
  {
    CFDictionaryRef v21 = v12;
    uint64_t v9 = (void **)(v12 + 1);
    goto LABEL_22;
  }
  CFDictionaryRef v21 = (void *)a2;
  uint64_t v9 = (void **)a2;
LABEL_25:
  uint64_t v17 = (char *)operator new(0x40uLL);
  uint64_t v18 = v17 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_21E8C(v18, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)a4;
    *((void *)v17 + 6) = *(void *)(a4 + 16);
  }
  *((_DWORD *)v17 + 14) = *(_DWORD *)(a4 + 24);
  return (uint64_t)sub_46CA8(v7, (uint64_t)v21, (uint64_t **)v9, (uint64_t *)v17);
}

void sub_15DE0(_Unwind_Exception *a1)
{
  sub_79970(0, v1);
  _Unwind_Resume(a1);
}

void *sub_15DF8(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if ((sub_15E8C(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_15E8C(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_15E8C(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_15EC4(a1, v2, v5, v6);
}

uint64_t sub_15EC4(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t sub_15F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  unsigned int v13 = 0;
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, void))(*(void *)a1 + 64))(a1, a2, a3, &v13, 0);
  if (v4)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    size_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, v3);
      if (v12 >= 0) {
        size_t v7 = __p;
      }
      else {
        size_t v7 = (void **)__p[0];
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      int v15 = "PowerLogManager.cpp";
      __int16 v16 = 1024;
      int v17 = 124;
      __int16 v18 = 2080;
      uint64_t v19 = v7;
      __int16 v20 = 1024;
      LODWORD(v21) = v4;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get power param (%s): %d", buf, 0x22u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v13;
    uint64_t v8 = 0x100000000;
  }
  return v9 | v8;
}

void sub_16294(_Unwind_Exception *a1)
{
}

void sub_162A0(_Unwind_Exception *a1)
{
}

void sub_162AC(_Unwind_Exception *a1)
{
}

void sub_162B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_162D4(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      sub_60548();
    }
    size_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_10724(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    sub_163A8(v2, v5);
    return (void *)sub_16358((uint64_t)v5);
  }
  return result;
}

uint64_t sub_16358(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_15008(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_163A8(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  size_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(v2 - 2);
    v2 -= 2;
    *(void *)(v4 - 16) = v5;
    v4 -= 16;
    void *v2 = 0;
    *(void *)(v4 + 8) = v2[1];
    v2[1] = 0;
  }
  a2[1] = v4;
  size_t v6 = (void *)*result;
  std::__shared_weak_count *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_16410(uint64_t a1, char a2, int a3, void *a4)
{
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v5 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v5 = 1869968496;
  }
  inAddress.mSelector = 1684500589;
  inAddress.mScope = v5;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 0;
  AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  return AudioObjectGetPropertyData(v6, &inAddress, 4u, &inQualifierData, &ioDataSize, a4);
}

unsigned char *sub_164A4(std::string::size_type a1, int *a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  int v11 = *a2;
  BOOL v12 = *a2 == 1769304164 || v11 == 1987016304;
  if (!v12 && v11 != 1920230246) {
    operator new();
  }
  v613 = 0;
  if (*(_DWORD *)(a1 + 108) != 2)
  {
    uint64_t v389 = sub_32A48(13);
    v390 = sub_7D5E8(1, *(void **)v389, *(void *)(v389 + 8));
    v391 = v390;
    if (v390 && os_log_type_enabled(v390, OS_LOG_TYPE_ERROR))
    {
      buf[0].AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6405;
      _os_log_impl(&def_1E50E8, v391, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"VirtualAudio PlugIn is not initialized yet\"", (uint8_t *)buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
LABEL_821:
  }
  if (((*(uint64_t (**)(std::string::size_type, int *))(*(void *)a1 + 32))(a1, a2) & 1) == 0)
  {
    uint64_t v393 = sub_32A48(13);
    v394 = sub_7D5E8(1, *(void **)v393, *(void *)(v393 + 8));
    int v395 = 2003332927;
    if (v394)
    {
      v396 = v394;
      if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
      {
        *(void *)v633 = *(void *)a2;
        *(_DWORD *)&v633[8] = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
        if (__p[23] >= 0) {
          v397 = __p;
        }
        else {
          v397 = *(unsigned char **)__p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6407;
        HIWORD(buf[1].mScope) = 2080;
        *(void *)&buf[1].mElement = v397;
        _os_log_impl(&def_1E50E8, v396, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)buf, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        int v395 = 2003332927;
      }
      goto LABEL_917;
    }
    goto LABEL_843;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v398 = sub_32A48(13);
    int v395 = 561211770;
    v399 = sub_7D5E8(1, *(void **)v398, *(void *)(v398 + 8));
    if (!v399) {
      goto LABEL_843;
    }
    v396 = v399;
    if (!os_log_type_enabled(v396, OS_LOG_TYPE_ERROR)) {
      goto LABEL_917;
    }
    *(void *)v633 = *(void *)a2;
    *(_DWORD *)&v633[8] = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
    if (__p[23] >= 0) {
      v400 = __p;
    }
    else {
      v400 = *(unsigned char **)__p;
    }
    buf[0].AudioObjectPropertySelector mSelector = 136316162;
    *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6408;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].mElement = v400;
    LOWORD(buf[2].mScope) = 1024;
    *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a3;
    HIWORD(buf[2].mElement) = 2048;
    *(void *)&buf[3].AudioObjectPropertySelector mSelector = a4;
    v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NU"
           "LL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).";
    v402 = v396;
    uint32_t v403 = 44;
LABEL_915:
    _os_log_impl(&def_1E50E8, v402, OS_LOG_TYPE_ERROR, v401, (uint8_t *)buf, v403);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_917;
  }
  if (!a6)
  {
    uint64_t v404 = sub_32A48(13);
    int v395 = 561211770;
    v405 = sub_7D5E8(1, *(void **)v404, *(void *)(v404 + 8));
    if (!v405) {
      goto LABEL_843;
    }
    v396 = v405;
    if (!os_log_type_enabled(v396, OS_LOG_TYPE_ERROR)) {
      goto LABEL_917;
    }
    *(void *)v633 = *(void *)a2;
    *(_DWORD *)&v633[8] = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
    if (__p[23] >= 0) {
      v406 = __p;
    }
    else {
      v406 = *(unsigned char **)__p;
    }
    buf[0].AudioObjectPropertySelector mSelector = 136315906;
    *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6409;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].mElement = "inData";
    LOWORD(buf[2].mScope) = 2080;
    *(void *)((char *)&buf[2].mScope + 2) = v406;
    v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.";
    v402 = v396;
    uint32_t v403 = 38;
    goto LABEL_915;
  }
  if (((*(uint64_t (**)(std::string::size_type, int *))(*(void *)a1 + 40))(a1, a2) & 1) == 0)
  {
    uint64_t v407 = sub_32A48(13);
    int v395 = 1852797029;
    v408 = sub_7D5E8(1, *(void **)v407, *(void *)(v407 + 8));
    if (!v408) {
      goto LABEL_843;
    }
    v396 = v408;
    if (!os_log_type_enabled(v396, OS_LOG_TYPE_ERROR)) {
      goto LABEL_917;
    }
    *(void *)v633 = *(void *)a2;
    *(_DWORD *)&v633[8] = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
    if (__p[23] >= 0) {
      v411 = __p;
    }
    else {
      v411 = *(unsigned char **)__p;
    }
    buf[0].AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6410;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].mElement = v411;
    v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.";
    v402 = v396;
    uint32_t v403 = 28;
    goto LABEL_915;
  }
  int v14 = *a2;
  if (*a2 == 1886350709)
  {
    uint64_t v15 = sub_32A48(2);
    uint64_t v16 = sub_32A48(38);
    char v17 = 0;
    uint64_t v18 = 0;
    *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *((int *)&buf[0].mSelector + v18);
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1;
      if (v21) {
        goto LABEL_21;
      }
    }
    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
LABEL_21:
    id v22 = *(id *)v15;
    uint64_t v23 = v22;
    if (v22)
    {
      unint64_t v24 = v22;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)v633 = *(void *)a2;
        *(_DWORD *)&v633[8] = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
        uint64_t v25 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        AudioObjectPropertyScope v26 = *(_DWORD *)a6;
        buf[0].AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6414;
        HIWORD(buf[1].mScope) = 2080;
        *(void *)&buf[1].mElement = v25;
        LOWORD(buf[2].mScope) = 1024;
        *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = v26;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: %u.", (uint8_t *)buf, 0x22u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    int v14 = *a2;
  }
  if (v14 <= 1936028520)
  {
    if (v14 <= 1769304163)
    {
      switch(v14)
      {
        case 1667329392:
          if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) == a5)
          {
            sub_30A5F8(a1, *(void *)(a1 + 224), *(void *)(a1 + 232), (CFTypeRef)*a6);
            goto LABEL_808;
          }
          uint64_t v468 = sub_32A48(13);
          int v395 = 561211770;
          v469 = sub_7D5E8(1, *(void **)v468, *(void *)(v468 + 8));
          if (v469)
          {
            v396 = v469;
            if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
            {
              *(void *)v633 = *(void *)a2;
              *(_DWORD *)&v633[8] = a2[2];
              sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
              int v470 = __p[23];
              v471 = *(unsigned char **)__p;
              AudioObjectPropertySelector v472 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
              v473 = __p;
              buf[0].AudioObjectPropertySelector mSelector = 136316162;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              if (v470 < 0) {
                v473 = v471;
              }
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6927;
              HIWORD(buf[1].mScope) = 2080;
              *(void *)&buf[1].mElement = v473;
              LOWORD(buf[2].mScope) = 1024;
              *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
              HIWORD(buf[2].mElement) = 1024;
              buf[3].AudioObjectPropertySelector mSelector = v472;
              v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_914;
            }
            goto LABEL_917;
          }
          goto LABEL_843;
        case 1685283955:
          if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
          {
            uint64_t v450 = sub_32A48(13);
            int v395 = 561211770;
            v451 = sub_7D5E8(1, *(void **)v450, *(void *)(v450 + 8));
            if (v451)
            {
              v396 = v451;
              if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
              {
                *(void *)v633 = *(void *)a2;
                *(_DWORD *)&v633[8] = a2[2];
                sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
                int v452 = __p[23];
                v453 = *(unsigned char **)__p;
                AudioObjectPropertySelector v454 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
                v455 = __p;
                buf[0].AudioObjectPropertySelector mSelector = 136316162;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                if (v452 < 0) {
                  v455 = v453;
                }
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6693;
                HIWORD(buf[1].mScope) = 2080;
                *(void *)&buf[1].mElement = v455;
                LOWORD(buf[2].mScope) = 1024;
                *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
                HIWORD(buf[2].mElement) = 1024;
                buf[3].AudioObjectPropertySelector mSelector = v454;
                v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_914;
              }
              goto LABEL_917;
            }
            goto LABEL_843;
          }
          uint64_t v61 = sub_F820C();
          int v62 = *(_DWORD *)a6;
          int v63 = *(_DWORD *)a6 != 0;
          *(void *)std::string __p = v61;
          __p[8] = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 16))(v61);
          if (*(unsigned __int8 *)(v61 + 128) != v63)
          {
            uint64_t v64 = *(void *)(v61 + 112);
            if (v64 != v61 + 104)
            {
              if (v62) {
                long long v65 = "En";
              }
              else {
                long long v65 = "Dis";
              }
              do
              {
                v629.__r_.__value_.__r.__words[0] = 0x676C6F6264736473;
                LODWORD(v629.__r_.__value_.__r.__words[1]) = 0;
                if ((*(unsigned int (**)(void, std::string *))(**(void **)(v64 + 16) + 16))(*(void *)(v64 + 16), &v629))
                {
                  LODWORD(__dst) = v62 != 0;
                  (*(void (**)(void, std::string *, void, void, uint64_t, long long *))(**(void **)(v64 + 16) + 48))(*(void *)(v64 + 16), &v629, 0, 0, 4, &__dst);
                  uint64_t v66 = sub_32A48(7);
                  uint64_t v67 = sub_32A48(27);
                  char v68 = 0;
                  uint64_t v69 = 0;
                  *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0x100000002;
                  uint64_t v70 = *(void *)(v66 + 8);
                  while (1)
                  {
                    uint64_t v71 = *((int *)&buf[0].mSelector + v69);
                    char v72 = v68;
                    if (((v70 & v71) != 0) != ((*(void *)(v67 + 8) & v71) != 0)) {
                      break;
                    }
                    char v68 = 1;
                    uint64_t v69 = 1;
                    if (v72)
                    {
                      if ((v70 & 1) == 0) {
                        goto LABEL_144;
                      }
                      goto LABEL_141;
                    }
                  }
                  if ((v70 & v71) == 0) {
                    uint64_t v66 = v67;
                  }
                  if (*(void *)(v66 + 8))
                  {
LABEL_141:
                    char v73 = *(NSObject **)v66;
                    if (v73 && os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                    {
                      AudioObjectPropertyScope v74 = (*(uint64_t (**)(void))(**(void **)(v64 + 16) + 120))(*(void *)(v64 + 16));
                      (*(void (**)(uint8_t *__return_ptr))(**(void **)(v64 + 16) + 128))(v633);
                      buf[0].AudioObjectPropertySelector mSelector = 136316162;
                      *(void *)&buf[0].mScope = "DeviceManager.cpp";
                      LOWORD(buf[1].mSelector) = 1024;
                      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 231;
                      HIWORD(buf[1].mScope) = 2080;
                      *(void *)&buf[1].mElement = v65;
                      LOWORD(buf[2].mScope) = 1024;
                      *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = v74;
                      HIWORD(buf[2].mElement) = 2112;
                      *(void *)&buf[3].AudioObjectPropertySelector mSelector = *(void *)v633;
                      _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d %sabled port discovery on device ID %u (uid '%@').", (uint8_t *)buf, 0x2Cu);
                      sub_72924((uint64_t)v633);
                    }
                  }
                }
LABEL_144:
                uint64_t v64 = *(void *)(v64 + 8);
              }
              while (v64 != v61 + 104);
            }
            *(unsigned char *)(v61 + 128) = v63;
            uint64_t v75 = sub_32A48(7);
            uint64_t v76 = sub_32A48(27);
            char v77 = 0;
            uint64_t v78 = 0;
            *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0x100000002;
            uint64_t v79 = *(void *)(v75 + 8);
            while (1)
            {
              uint64_t v80 = *((int *)&buf[0].mSelector + v78);
              char v81 = v77;
              if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
                break;
              }
              char v77 = 1;
              uint64_t v78 = 1;
              if (v81) {
                goto LABEL_530;
              }
            }
            if ((v79 & v80) == 0) {
              uint64_t v75 = v76;
            }
LABEL_530:
            char v251 = *(NSObject **)v75;
            if (v251 && os_log_type_enabled(v251, OS_LOG_TYPE_DEBUG))
            {
              int v252 = "Dis";
              *(void *)&buf[0].mScope = "DeviceManager.cpp";
              buf[0].AudioObjectPropertySelector mSelector = 136315650;
              if (v62) {
                int v252 = "En";
              }
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 236;
              HIWORD(buf[1].mScope) = 2080;
              *(void *)&buf[1].mElement = v252;
              _os_log_impl(&def_1E50E8, v251, OS_LOG_TYPE_DEBUG, "%25s:%-5d %sabled port discovery for the VAD.", (uint8_t *)buf, 0x1Cu);
            }
          }
          sub_3BCAC(__p);
          break;
        case 1701737068:
          *(unsigned char *)(a1 + 488) = *(_DWORD *)a6 != 0;
          uint64_t v43 = *(void *)(a1 + 144);
          uint64_t v44 = *(void *)(a1 + 152);
          while (v43 != v44)
          {
            if (*(void *)v43) {
              sub_CC45C(*(void *)(*(void *)v43 + 1008), *(unsigned char *)(a1 + 488));
            }
            v43 += 8;
          }
          break;
        default:
          goto LABEL_238;
      }
      goto LABEL_808;
    }
    if (v14 <= 1920230245)
    {
      if (v14 != 1769304164)
      {
        if (v14 != 1886350709) {
          goto LABEL_238;
        }
        if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
        {
          uint64_t v416 = sub_32A48(13);
          int v395 = 561211770;
          v417 = sub_7D5E8(1, *(void **)v416, *(void *)(v416 + 8));
          if (v417)
          {
            v396 = v417;
            if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
            {
              *(void *)v633 = *(void *)a2;
              *(_DWORD *)&v633[8] = a2[2];
              sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
              int v418 = __p[23];
              v419 = *(unsigned char **)__p;
              AudioObjectPropertySelector v420 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
              v421 = __p;
              buf[0].AudioObjectPropertySelector mSelector = 136316162;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              if (v418 < 0) {
                v421 = v419;
              }
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6645;
              HIWORD(buf[1].mScope) = 2080;
              *(void *)&buf[1].mElement = v421;
              LOWORD(buf[2].mScope) = 1024;
              *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
              HIWORD(buf[2].mElement) = 1024;
              buf[3].AudioObjectPropertySelector mSelector = v420;
              v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_914;
            }
            goto LABEL_917;
          }
          goto LABEL_843;
        }
        int v28 = sub_209D00();
        AudioObjectPropertyElement v29 = *(_DWORD *)a6;
        if (v28)
        {
          if (v29)
          {
            int v30 = sub_2F34DC(a1, 1);
            *(unsigned char *)(a1 + 168) = v30;
            if (v30)
            {
              uint64_t v31 = sub_32A48(2);
              unint64_t v32 = sub_7D5E8(3, *(void **)v31, *(void *)(v31 + 8));
              double v33 = v32;
              if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                buf[0].AudioObjectPropertySelector mSelector = 136315650;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6663;
                HIWORD(buf[1].mScope) = 1024;
                buf[1].mElement = v29;
                _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Queuing up PolicyMute route change command for mute (%u)", (uint8_t *)buf, 0x18u);
              }

              sub_298DA4();
              operator new();
            }
          }
          else
          {
            *(void *)&buf[0].AudioObjectPropertySelector mSelector = sub_30A5AC(a1);
            *(void *)&buf[0].mElement = v253;
            if ((sub_2F68BC(buf) & 1) == 0)
            {
              *(unsigned char *)(a1 + 168) = 0;
              uint64_t v254 = sub_32A48(2);
              v255 = sub_7D5E8(3, *(void **)v254, *(void *)(v254 + 8));
              int v256 = v255;
              if (v255 && os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
              {
                buf[0].AudioObjectPropertySelector mSelector = 136315650;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6676;
                HIWORD(buf[1].mScope) = 1024;
                buf[1].mElement = 0;
                _os_log_impl(&def_1E50E8, v256, OS_LOG_TYPE_DEFAULT, "%25s:%-5d queuing up PolicyMute route change command for mute (%u)", (uint8_t *)buf, 0x18u);
              }

              sub_298DA4();
              operator new();
            }
          }
        }
        else
        {
          *(unsigned char *)(a1 + 168) = sub_2F34DC(a1, v29 != 0);
        }
        goto LABEL_808;
      }
      kdebug_trace();
      if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        uint64_t v477 = sub_32A48(13);
        int v395 = 561211770;
        v478 = sub_7D5E8(1, *(void **)v477, *(void *)(v477 + 8));
        if (v478)
        {
          v396 = v478;
          if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
          {
            *(void *)v633 = *(void *)a2;
            *(_DWORD *)&v633[8] = a2[2];
            sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
            int v479 = __p[23];
            v480 = *(unsigned char **)__p;
            AudioObjectPropertySelector v481 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            v482 = __p;
            buf[0].AudioObjectPropertySelector mSelector = 136316162;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            if (v479 < 0) {
              v482 = v480;
            }
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6430;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = v482;
            LOWORD(buf[2].mScope) = 1024;
            *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
            HIWORD(buf[2].mElement) = 1024;
            buf[3].AudioObjectPropertySelector mSelector = v481;
            v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_914;
          }
          goto LABEL_917;
        }
        goto LABEL_843;
      }
      if (*((_DWORD *)a6 + 2) == 8)
      {
        if (*a6)
        {
          *(void *)&long long theArray = *a6;
          *(void *)&v633[8] = 0;
          *(void *)&v633[16] = 0;
          *(void *)v633 = &v633[8];
          v600 = (uint64_t **)(a1 + 144);
          uint64_t v53 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
          if (sub_F40C0())
          {
            v629.__r_.__value_.__r.__words[0] = a1;
            if (atomic_load_explicit((atomic_ullong *volatile)&qword_6588E0, memory_order_acquire) != -1)
            {
              *(void *)&buf[0].AudioObjectPropertySelector mSelector = &v629;
              *(void *)std::string __p = buf;
              std::__call_once(&qword_6588E0, __p, (void (__cdecl *)(void *))sub_30F2B8);
            }
          }
          CFTypeRef v54 = (void *)sub_F820C();
          *(void *)&buf[0].AudioObjectPropertySelector mSelector = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
          LOBYTE(buf[0].mElement) = 1;
          if (sub_F832C(v54, (CFStringRef *)buf))
          {
            sub_72924((uint64_t)buf);
          }
          else
          {
            sub_3CD68C();
            int v190 = qword_65E378;
            sub_72924((uint64_t)buf);
            if (v190 != 1)
            {
              int v192 = 0;
              goto LABEL_401;
            }
          }
          if (!v53)
          {
            uint64_t v548 = sub_32A48(13);
            v549 = sub_7D5E8(1, *(void **)v548, *(void *)(v548 + 8));
            v550 = v549;
            if (v549 && os_log_type_enabled(v549, OS_LOG_TYPE_ERROR))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6453;
              _os_log_impl(&def_1E50E8, v550, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [defaultDevice is NULL]: \"No default VAD could be found!\"", (uint8_t *)buf, 0x12u);
            }

            v551 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v551, "No default VAD could be found!");
          }
          sub_3B7EC();
          *(void *)&buf[0].AudioObjectPropertySelector mSelector = &qword_64CC40;
          LOBYTE(buf[0].mElement) = 0;
          LOBYTE(buf[0].mElement) = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
          size_t v191 = (uint8_t *)sub_BC8B0(v53, 1);
          if (v633 != v191) {
            sub_C6650((uint64_t **)v633, *(void **)v191, (void *)v191 + 1);
          }
          int v192 = sub_306C58(a1, v633, 1886545251);
          sub_3BCAC(buf);
LABEL_401:
          v621[0] = off_633220;
          v621[1] = a1;
          v621[2] = &theArray;
          v621[3] = v621;
          sub_306D48((uint64_t)&v629, a1, (uint64_t)v621);
          sub_307370(v621);
          if (!v629.__r_.__value_.__l.__size_)
          {
            uint64_t v511 = sub_32A48(13);
            v512 = sub_7D5E8(1, *(void **)v511, *(void *)(v511 + 8));
            v513 = v512;
            if (v512 && os_log_type_enabled(v512, OS_LOG_TYPE_ERROR))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6463;
              _os_log_impl(&def_1E50E8, v513, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
            }

            v514 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v514, "Postcondition failure.");
          }
          unsigned int v193 = sub_3073F4(a1);
          if (LODWORD(v629.__r_.__value_.__l.__data_) == 1919118966)
          {
            buf[0].AudioObjectPropertySelector mSelector = 0;
            if (sub_1D4800((const __CFDictionary *)v629.__r_.__value_.__l.__size_, @"category", buf))*(_DWORD *)(a1 + 224) = buf[0].mSelector; {
            *(_DWORD *)std::string __p = 0;
            }
            if (sub_1D4800((const __CFDictionary *)v629.__r_.__value_.__l.__size_, @"mode", __p)) {
              *(_DWORD *)(a1 + 228) = *(_DWORD *)__p;
            }
          }
          if (v629.__r_.__value_.__l.__size_)
          {
            if (*(_DWORD *)(a1 + 224) == 1668509810) {
              int v194 = 1668309362;
            }
            else {
              int v194 = *(_DWORD *)(a1 + 224);
            }
            sub_1D4AF4((uint64_t)&v629.__r_.__value_.__l.__size_, @"category", v194);
            sub_1D4AF4((uint64_t)&v629.__r_.__value_.__l.__size_, @"mode", *(_DWORD *)(a1 + 228));
            CFDictionaryRef size = (const __CFDictionary *)v629.__r_.__value_.__l.__size_;
          }
          else
          {
            CFDictionaryRef size = 0;
          }
          LODWORD(v624) = 0;
          sub_1D4800(size, @"route change reason", &v624);
          BOOL v196 = sub_128688(v624);
          BOOL v197 = v196;
          BOOL v603 = v196;
          if ((v196 & v193) == 1)
          {
            id v198 = *(id *)sub_32A48(2);
            unint64_t v199 = v198;
            if (v198)
            {
              v200 = v198;
              if (os_log_type_enabled(v200, OS_LOG_TYPE_DEBUG))
              {
                buf[0].AudioObjectPropertySelector mSelector = 136315394;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6498;
                _os_log_impl(&def_1E50E8, v200, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change was redundant, but the beam direction changed. Updating the route change description.", (uint8_t *)buf, 0x12u);
              }
            }
            sub_1D4AF4((uint64_t)&v629.__r_.__value_.__l.__size_, @"route change reason", 1919050851);
            BOOL v197 = v603;
            sub_3B7EC();
            *(void *)&buf[0].AudioObjectPropertySelector mSelector = &qword_64CC40;
            LOBYTE(buf[0].mElement) = 0;
            LOBYTE(buf[0].mElement) = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
            sub_302080((uint64_t)__p, a1, *(void **)(a1 + 120));
            if (v629.__r_.__value_.__s.__data_[17] && *(void *)__p && v629.__r_.__value_.__l.__size_) {
              CFDictionarySetValue((CFMutableDictionaryRef)v629.__r_.__value_.__l.__size_, @"active devices", *(const void **)__p);
            }
            sub_3D61C((uint64_t)__p);
            sub_3BCAC(buf);
          }
          sub_307CF8(v600);
          uint64_t v201 = *(unint64_t **)(a1 + 144);
          unint64_t v202 = *(unint64_t **)(a1 + 152);
          while (v201 != v202)
          {
            if (*v201) {
              sub_C8674(*v201);
            }
            ++v201;
          }
          sub_F2720(buf, *(void *)(a1 + 216) + 8);
          if (LOBYTE(buf[1].mScope))
          {
            sub_80594((uint64_t)buf);
            sub_F2720(buf, *(void *)(a1 + 216) + 8);
            if (!LOBYTE(buf[1].mScope)) {
              sub_7F218();
            }
            *(void *)std::string __p = *(void *)&buf[0].mSelector;
            *(_WORD *)&__p[8] = buf[0].mElement;
            if (!LOBYTE(buf[0].mElement)
              || !*(void *)&buf[0].mSelector
              || (CFRetain(*(CFTypeRef *)&buf[0].mSelector), LOBYTE(buf[1].mScope)))
            {
              sub_80594((uint64_t)buf);
            }
            if (*(void *)__p
              && CFDictionaryGetCount(*(CFDictionaryRef *)__p)
              && **(unsigned char **)(a1 + 216)
              && v629.__r_.__value_.__s.__data_[17]
              && *(void *)__p
              && v629.__r_.__value_.__l.__size_)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)v629.__r_.__value_.__l.__size_, @"voice processing configuration", *(const void **)__p);
            }
            sub_80594((uint64_t)__p);
          }
          unint64_t v203 = *(int **)(a1 + 280);
          uint64_t v204 = *(uint64_t **)(a1 + 144);
          int v205 = *(uint64_t **)(a1 + 152);
          if (v203)
          {
            if (!sub_2EA964(*v203, 0, v204, v205))
            {
              uint64_t v206 = sub_32A48(2);
              char v207 = sub_7D5E8(3, *(void **)v206, *(void *)(v206 + 8));
              int v208 = v207;
              if (v207)
              {
                uint64_t v209 = v207;
                if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
                {
                  sub_2417C(__p, **(_DWORD **)(a1 + 280));
                  unint64_t v210 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
                  buf[0].AudioObjectPropertySelector mSelector = 136315650;
                  *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6526;
                  HIWORD(buf[1].mScope) = 2080;
                  *(void *)&buf[1].mElement = v210;
                  _os_log_impl(&def_1E50E8, v209, OS_LOG_TYPE_DEFAULT, "%25s:%-5d WHA VAD %s removed after route change, clearing state", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
              }
              int v211 = **(_DWORD **)(a1 + 280);
              if (v211 != 1986095474 && v211 != 1986884979)
              {
                uint64_t v596 = sub_32A48(13);
                v597 = sub_7D5E8(1, *(void **)v596, *(void *)(v596 + 8));
                v598 = v597;
                if (v597 && os_log_type_enabled(v597, OS_LOG_TYPE_ERROR))
                {
                  buf[0].AudioObjectPropertySelector mSelector = 136315394;
                  *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6529;
                  _os_log_impl(&def_1E50E8, v598, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                }

                v599 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v599, "Precondition failure.");
              }
              if (v211 == 1986884979) {
                int v212 = 19;
              }
              else {
                int v212 = 20;
              }
              sub_14CE94(*(void *)(a1 + 112), v212);
              BOOL v197 = v603;
              uint64_t v213 = *(void *)(a1 + 280);
              *(void *)(a1 + 280) = 0;
              if (v213) {
                sub_307DE4(v213);
              }
            }
            uint64_t v204 = *(uint64_t **)(a1 + 144);
            int v205 = *(uint64_t **)(a1 + 152);
          }
          if (*(_DWORD *)(a1 + 400))
          {
            uint64_t v214 = sub_2EA964(1986291046, 0, v204, v205);
            if (!v53)
            {
              uint64_t v554 = sub_32A48(13);
              v555 = sub_7D5E8(1, *(void **)v554, *(void *)(v554 + 8));
              v556 = v555;
              if (v555 && os_log_type_enabled(v555, OS_LOG_TYPE_ERROR))
              {
                buf[0].AudioObjectPropertySelector mSelector = 136315394;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6544;
                _os_log_impl(&def_1E50E8, v556, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
              }

              v557 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v557, "Precondition failure.");
            }
            uint64_t v215 = v214;
            sub_3B7EC();
            *(void *)std::string __p = &qword_64CC40;
            __p[8] = 0;
            __p[8] = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
            uint64_t v216 = sub_BC8B0(v215, 1);
            sub_46A4C((uint64_t *)buf, v216);
            uint64_t v217 = 0;
            do
            {
              int v218 = sub_306C58(a1, buf, *(_DWORD *)&aBphpbphpoelpcp[v217]);
              if (v217 == 8) {
                int v219 = 1;
              }
              else {
                int v219 = v218;
              }
              v217 += 4;
            }
            while (v219 != 1);
            if ((v218 & 1) == 0) {
              sub_280454(a1 + 400);
            }
            sub_463E0(*(void **)&buf[0].mElement);
            sub_3BCAC(__p);
            uint64_t v204 = *(uint64_t **)(a1 + 144);
            int v205 = *(uint64_t **)(a1 + 152);
          }
          uint64_t v220 = sub_2EA964(1986291046, 0, v204, v205);
          sub_3CD68C();
          if (qword_65E378 == 1)
          {
            sub_3B7EC();
            *(void *)std::string __p = &qword_64CC40;
            __p[8] = 0;
            __p[8] = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
            uint64_t v221 = sub_BC8B0(v220, 1);
            sub_46A4C((uint64_t *)buf, v221);
            int v222 = sub_306C58(a1, buf, 1886613611);
            if (v192) {
              int v223 = v222;
            }
            else {
              int v223 = 0;
            }
            if (v223 == 1) {
              sub_307E38(*(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
            }
            sub_463E0(*(void **)&buf[0].mElement);
            sub_3BCAC(__p);
          }
          if (v197)
          {
            if (!*(void *)sub_32A48(2))
            {
              if (*(_DWORD *)(theArray + 8))
              {
                uint64_t v224 = sub_32A48(2);
                v225 = sub_7D5E8(5, *(void **)v224, *(void *)(v224 + 8));
                v226 = v225;
                if (v225)
                {
                  uint64_t v227 = v225;
                  if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
                  {
                    buf[0].AudioObjectPropertySelector mSelector = 136315650;
                    *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                    LOWORD(buf[1].mSelector) = 1024;
                    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6589;
                    HIWORD(buf[1].mScope) = 2080;
                    *(void *)&buf[1].mElement = "internal update";
                    _os_log_impl(&def_1E50E8, v227, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route configuration change completed [ %s ]. Route description: Redundant.", (uint8_t *)buf, 0x1Cu);
                  }
                }
              }
              else
              {
                uint64_t v373 = sub_32A48(2);
                v374 = sub_7D5E8(3, *(void **)v373, *(void *)(v373 + 8));
                v226 = v374;
                if (v374)
                {
                  v375 = v374;
                  if (os_log_type_enabled(v375, OS_LOG_TYPE_DEFAULT))
                  {
                    buf[0].AudioObjectPropertySelector mSelector = 136315650;
                    *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                    LOWORD(buf[1].mSelector) = 1024;
                    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6585;
                    HIWORD(buf[1].mScope) = 2080;
                    *(void *)&buf[1].mElement = "internal update";
                    _os_log_impl(&def_1E50E8, v375, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change completed [ %s ]. Route description: Redundant.", (uint8_t *)buf, 0x1Cu);
                  }
                }
              }

LABEL_793:
              if (*(_DWORD *)(theArray + 8) != 1)
              {
                sub_3B7EC();
                *(void *)&buf[0].AudioObjectPropertySelector mSelector = &qword_64CC40;
                LOBYTE(buf[0].mElement) = 0;
                LOBYTE(buf[0].mElement) = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
                sub_309E4C(a1);
                sub_3BCAC(buf);
              }
              *((_DWORD *)a6 + 6) = 8;
              if (v629.__r_.__value_.__l.__size_)
              {
                CFRetain((CFTypeRef)v629.__r_.__value_.__l.__size_);
                std::string::size_type v376 = v629.__r_.__value_.__l.__size_;
              }
              else
              {
                std::string::size_type v376 = 0;
              }
              *(void *)a6[2] = v376;
              id v377 = *(id *)sub_32A48(2);
              v378 = v377;
              if (v377)
              {
                v379 = v377;
                if (os_log_type_enabled(v379, OS_LOG_TYPE_DEBUG))
                {
                  sub_168E34((std::string *)__p, (const __CFDictionary *)v629.__r_.__value_.__l.__size_);
                  v380 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
                  buf[0].AudioObjectPropertySelector mSelector = 136315650;
                  *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6638;
                  HIWORD(buf[1].mScope) = 2080;
                  *(void *)&buf[1].mElement = v380;
                  _os_log_impl(&def_1E50E8, v379, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change dictionary: %s", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
              }
              kdebug_trace();
              sub_80594((uint64_t)&v629.__r_.__value_.__l.__size_);
              sub_463E0(*(void **)&v633[8]);
              uint64_t v381 = theArray;
              *(void *)&long long theArray = 0;
              if (v381) {
                (*(void (**)(uint64_t))(*(void *)v381 + 8))(v381);
              }
              goto LABEL_808;
            }
          }
          else if (*(_DWORD *)(theArray + 8) == 1)
          {
            uint64_t v228 = sub_32A48(2);
            uint64_t v229 = sub_7D5E8(1, *(void **)v228, *(void *)(v228 + 8));
            unsigned int v230 = v229;
            if (v229)
            {
              uint64_t v231 = v229;
              if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
              {
                buf[0].AudioObjectPropertySelector mSelector = 136315394;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6574;
                _os_log_impl(&def_1E50E8, v231, OS_LOG_TYPE_ERROR, "%25s:%-5d Logic Error: An internal update labeled kWillNotReconfigureRoutes effected a non-redundant route change.", (uint8_t *)buf, 0x12u);
              }
            }
          }
          CFDictionaryRef v232 = (const __CFDictionary *)v629.__r_.__value_.__l.__size_;
          sub_21C8C(v611, "  ");
          sub_16A67C((uint64_t *)__p, v232, 2, (const void **)v611);
          if (v612 < 0) {
            operator delete(v611[0]);
          }
          id v233 = *(id *)sub_32A48(2);
          uint64_t v234 = v233;
          if (v233)
          {
            uint64_t v235 = v233;
            if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315650;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6578;
              HIWORD(buf[1].mScope) = 2080;
              *(void *)&buf[1].mElement = "internal update";
              _os_log_impl(&def_1E50E8, v235, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change completed [ %s ]. Route description:", (uint8_t *)buf, 0x1Cu);
            }
          }
          for (uint64_t i = *(void *)&__p[8]; (unsigned char *)i != __p; uint64_t i = *(void *)(i + 8))
          {
            id v237 = *(id *)sub_32A48(2);
            uint64_t v238 = v237;
            if (v237)
            {
              uint64_t v239 = v237;
              if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v240 = (void *)(i + 16);
                if (*(char *)(i + 39) < 0) {
                  uint64_t v240 = (void *)*v240;
                }
                buf[0].AudioObjectPropertySelector mSelector = 136315650;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6578;
                HIWORD(buf[1].mScope) = 2080;
                *(void *)&buf[1].mElement = v240;
                _os_log_impl(&def_1E50E8, v239, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", (uint8_t *)buf, 0x1Cu);
              }
            }
          }
          sub_16A560(__p);
          sub_2E9DAC(a1);
          if (!v603)
          {
            sub_307FB0((uint64_t)__p, a1);
            unsigned int v241 = *(_DWORD *)__p;
            sub_1D4AF4((uint64_t)&v629.__r_.__value_.__l.__size_, @"siri input source", *(int *)__p);
            id v242 = *(id *)sub_32A48(2);
            long long v243 = v242;
            if (v242)
            {
              long long v244 = v242;
              if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
              {
                sub_2417C(&__dst, v241);
                v245 = v631 >= 0 ? &__dst : (long long *)__dst;
                buf[0].AudioObjectPropertySelector mSelector = 136315650;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6600;
                HIWORD(buf[1].mScope) = 2080;
                *(void *)&buf[1].mElement = v245;
                _os_log_impl(&def_1E50E8, v244, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source: %s.", (uint8_t *)buf, 0x1Cu);
                if (SHIBYTE(v631) < 0) {
                  operator delete((void *)__dst);
                }
              }
            }
            if (v241 == 1936679529 || v241 == 1936024681)
            {
              if ((__p[31] & 0x80000000) != 0)
              {
                sub_21E8C(&__dst, *(void **)&__p[8], *(unint64_t *)&__p[16]);
              }
              else
              {
                long long __dst = *(_OWORD *)&__p[8];
                uint64_t v631 = *(void *)&__p[24];
              }
              uint64_t v309 = HIBYTE(v631);
              char v310 = HIBYTE(v631);
              if (v631 < 0) {
                uint64_t v309 = *((void *)&__dst + 1);
              }
              if (!v309)
              {
                uint64_t v311 = sub_32A48(13);
                v312 = sub_7D5E8(1, *(void **)v311, *(void *)(v311 + 8));
                v313 = v312;
                if (v312)
                {
                  v314 = v312;
                  if (os_log_type_enabled(v314, OS_LOG_TYPE_ERROR))
                  {
                    buf[0].AudioObjectPropertySelector mSelector = 136315394;
                    *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                    LOWORD(buf[1].mSelector) = 1024;
                    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6606;
                    _os_log_impl(&def_1E50E8, v314, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid UUID for out of band speech input device\"", (uint8_t *)buf, 0x12u);
                  }
                }
                char v310 = HIBYTE(v631);
              }
              if (v310 >= 0) {
                p_dst = (char *)&__dst;
              }
              else {
                p_dst = (char *)__dst;
              }
              sub_1D4C8C((uint64_t)&v629.__r_.__value_.__l.__size_, @"siri input source UUID", p_dst);
              id v316 = *(id *)sub_32A48(2);
              v317 = v316;
              if (v316)
              {
                v318 = v316;
                if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
                {
                  v319 = &__dst;
                  if (v631 < 0) {
                    v319 = (long long *)__dst;
                  }
                  buf[0].AudioObjectPropertySelector mSelector = 136315650;
                  *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6609;
                  HIWORD(buf[1].mScope) = 2080;
                  *(void *)&buf[1].mElement = v319;
                  _os_log_impl(&def_1E50E8, v318, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source UUID: %s.", (uint8_t *)buf, 0x1Cu);
                }
              }
              if (SHIBYTE(v631) < 0) {
                operator delete((void *)__dst);
              }
            }
            sub_3B7EC();
            *(void *)&long long __dst = &qword_64CC40;
            BYTE8(__dst) = 0;
            BYTE8(__dst) = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
            sub_F2720(v610, *(void *)(a1 + 216) + 8);
            sub_F2778((uint64_t)buf, a1 + 224, (uint64_t)v610, *(_DWORD *)(a1 + 492), a1 + 440);
            sub_308F48(a1, v600, *(unint64_t *)&buf[0].mSelector, *(uint64_t *)&buf[0].mElement, *(_DWORD *)(a1 + 400) != 0);
            sub_463E0(*(void **)&buf[2].mSelector);
            if (v610[16]) {
              sub_80594((uint64_t)v610);
            }
            uint64_t v320 = *(void *)(a1 + 144);
            uint64_t v321 = *(void *)(a1 + 152);
            while (v320 != v321)
            {
              if (*(void *)v320) {
                sub_CC45C(*(void *)(*(void *)v320 + 1008), *(unsigned char *)(a1 + 488));
              }
              v320 += 8;
            }
            sub_3BCAC(&__dst);
            if ((__p[31] & 0x80000000) != 0) {
              operator delete(*(void **)&__p[8]);
            }
          }
          goto LABEL_793;
        }
        uint64_t v497 = sub_32A48(13);
        v498 = sub_7D5E8(1, *(void **)v497, *(void *)(v497 + 8));
        v488 = v498;
        if (v498 && os_log_type_enabled(v498, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6436;
          _os_log_impl(&def_1E50E8, v488, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }
      }
      else
      {
        uint64_t v486 = sub_32A48(13);
        v487 = sub_7D5E8(1, *(void **)v486, *(void *)(v486 + 8));
        v488 = v487;
        if (v487 && os_log_type_enabled(v487, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6435;
          _os_log_impl(&def_1E50E8, v488, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }
      }

      v499 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v499, "Precondition failure.");
    }
    if (v14 != 1920230246)
    {
      if (v14 == 1920426613)
      {
        if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) == a5)
        {
          *(_OWORD *)(a1 + 200) = *(_OWORD *)a6;
          goto LABEL_808;
        }
        uint64_t v422 = sub_32A48(13);
        int v395 = 561211770;
        v423 = sub_7D5E8(1, *(void **)v422, *(void *)(v422 + 8));
        if (v423)
        {
          v396 = v423;
          if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
          {
            *(void *)v633 = *(void *)a2;
            *(_DWORD *)&v633[8] = a2[2];
            sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
            int v424 = __p[23];
            v425 = *(unsigned char **)__p;
            AudioObjectPropertySelector v426 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            v427 = __p;
            buf[0].AudioObjectPropertySelector mSelector = 136316162;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            if (v424 < 0) {
              v427 = v425;
            }
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6700;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = v427;
            LOWORD(buf[2].mScope) = 1024;
            *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
            HIWORD(buf[2].mElement) = 1024;
            buf[3].AudioObjectPropertySelector mSelector = v426;
            v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_914;
          }
          goto LABEL_917;
        }
        goto LABEL_843;
      }
      goto LABEL_238;
    }
    if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
    {
      uint64_t v444 = sub_32A48(13);
      int v395 = 561211770;
      v445 = sub_7D5E8(1, *(void **)v444, *(void *)(v444 + 8));
      if (v445)
      {
        v396 = v445;
        if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
        {
          *(void *)v633 = *(void *)a2;
          *(_DWORD *)&v633[8] = a2[2];
          sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
          int v446 = __p[23];
          v447 = *(unsigned char **)__p;
          AudioObjectPropertySelector v448 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          v449 = __p;
          buf[0].AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          if (v446 < 0) {
            v449 = v447;
          }
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6707;
          HIWORD(buf[1].mScope) = 2080;
          *(void *)&buf[1].mElement = v449;
          LOWORD(buf[2].mScope) = 1024;
          *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
          HIWORD(buf[2].mElement) = 1024;
          buf[3].AudioObjectPropertySelector mSelector = v448;
          v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_914;
        }
        goto LABEL_917;
      }
      goto LABEL_843;
    }
    *(_OWORD *)&v629.__r_.__value_.__r.__words[1] = 0uLL;
    v629.__r_.__value_.__r.__words[0] = (std::string::size_type)&v629.__r_.__value_.__l.__size_;
    uint64_t v602 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
    sub_3CD68C();
    if (qword_65E378 == 1)
    {
      if (!v602)
      {
        uint64_t v558 = sub_32A48(13);
        v559 = sub_7D5E8(1, *(void **)v558, *(void *)(v558 + 8));
        v560 = v559;
        if (v559 && os_log_type_enabled(v559, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6714;
          _os_log_impl(&def_1E50E8, v560, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [defaultDevice is NULL]: \"No default VAD could be found!\"", (uint8_t *)buf, 0x12u);
        }

        v561 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v561, "No default VAD could be found!");
      }
      sub_3B7EC();
      *(void *)&buf[0].AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf[0].mElement) = 0;
      LOBYTE(buf[0].mElement) = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
      CFArrayRef v55 = (std::string *)sub_BC8B0(v602, 1);
      if (&v629 != v55) {
        sub_C6650((uint64_t **)&v629, v55->__r_.__value_.__l.__data_, &v55->__r_.__value_.__l.__size_);
      }
      sub_3BCAC(buf);
    }
    CFDictionaryRef v622 = (CFDictionaryRef)*a6;
    LOWORD(v623) = 0;
    CFMutableDictionaryRef theDict = v622;
    LOWORD(v616) = 256;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BD78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64BD78))
    {
      sub_165BF0();
      __cxa_guard_release(&qword_64BD78);
    }
    memset(__p, 0, 24);
    sub_2189C(__p, (long long *)qword_64BD60, *(long long **)algn_64BD68, 0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_64BD68 - qword_64BD60) >> 3));
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BD58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64BD58))
    {
      sub_165A60();
      __cxa_guard_release(&qword_64BD58);
    }
    memset(v633, 0, 24);
    sub_2189C((char *)v633, (long long *)qword_64BD40, *(long long **)algn_64BD48, 0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_64BD48 - qword_64BD40) >> 3));
    if (*(void *)__p != *(void *)&__p[8] || *(void *)v633 != *(void *)&v633[8])
    {
      *(void *)&long long __dst = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      WORD4(__dst) = 257;
      *(void *)&long long theArray = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      WORD4(theArray) = 257;
      *(void *)&long long v624 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      WORD4(v624) = 257;
      uint64_t v56 = *(void *)__p;
      uint64_t v57 = *(void *)&__p[8];
      while (1)
      {
        if (v56 == v57)
        {
          if ((void)theArray)
          {
            int v137 = (os_log_t *)sub_32A48(2);
            uint64_t v138 = *v137;
            if (*v137)
            {
              if (os_log_type_enabled(*v137, OS_LOG_TYPE_DEBUG))
              {
                buf[0].AudioObjectPropertySelector mSelector = 136315650;
                *(void *)&buf[0].mScope = "VirtualAudio_Utilities.cpp";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1064;
                HIWORD(buf[1].mScope) = 2112;
                *(void *)&buf[1].mElement = theArray;
                _os_log_impl(&def_1E50E8, v138, OS_LOG_TYPE_DEBUG, "%25s:%-5d Persistent fake input ports = %@", (uint8_t *)buf, 0x1Cu);
              }
            }
          }
          uint64_t v139 = *(void *)v633;
          uint64_t v140 = *(void *)&v633[8];
LABEL_279:
          if (v139 == v140)
          {
            if ((void)v624)
            {
              int v144 = (os_log_t *)sub_32A48(2);
              int v145 = *v144;
              if (*v144)
              {
                if (os_log_type_enabled(*v144, OS_LOG_TYPE_DEBUG))
                {
                  buf[0].AudioObjectPropertySelector mSelector = 136315650;
                  *(void *)&buf[0].mScope = "VirtualAudio_Utilities.cpp";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1070;
                  HIWORD(buf[1].mScope) = 2112;
                  *(void *)&buf[1].mElement = v624;
                  _os_log_impl(&def_1E50E8, v145, OS_LOG_TYPE_DEBUG, "%25s:%-5d Persistent fake output ports = %@", (uint8_t *)buf, 0x1Cu);
                }
              }
            }
            int v146 = (__CFDictionary *)__dst;
            if (BYTE9(__dst))
            {
              if (!(void)theArray
                || !(void)__dst
                || (CFDictionarySetValue((CFMutableDictionaryRef)__dst, @"input port UIDs", (const void *)theArray), int v146 = (__CFDictionary *)__dst, BYTE9(__dst)))
              {
                if ((void)v624 && v146)
                {
                  CFDictionarySetValue(v146, @"output port UIDs", (const void *)v624);
                  int v146 = (__CFDictionary *)__dst;
                }
              }
            }
            if (v146 && theDict) {
              CFDictionarySetValue(theDict, @"persistent route", v146);
            }
            sub_3D61C((uint64_t)&v624);
            sub_3D61C((uint64_t)&theArray);
            sub_80594((uint64_t)&__dst);
            break;
          }
          if (*(char *)(v139 + 23) < 0)
          {
            unsigned int v142 = *(const UInt8 **)v139;
            if (*(void *)v139)
            {
              CFIndex v141 = *(void *)(v139 + 8);
              goto LABEL_284;
            }
            CFStringRef v143 = 0;
            *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0;
          }
          else
          {
            CFIndex v141 = *(unsigned __int8 *)(v139 + 23);
            unsigned int v142 = (const UInt8 *)v139;
LABEL_284:
            CFStringRef v143 = CFStringCreateWithBytes(0, v142, v141, 0x8000100u, 0);
            *(void *)&buf[0].AudioObjectPropertySelector mSelector = v143;
            if (!v143)
            {
              v410 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v410, "Could not construct");
            }
          }
          if ((void)v624 && BYTE9(v624)) {
            CFArrayAppendValue((CFMutableArrayRef)v624, v143);
          }
          if (v143) {
            CFRelease(v143);
          }
          v139 += 24;
          goto LABEL_279;
        }
        if (*(char *)(v56 + 23) < 0)
        {
          uint64_t v59 = *(const UInt8 **)v56;
          if (!*(void *)v56)
          {
            CFStringRef v60 = 0;
            *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0;
            goto LABEL_119;
          }
          CFIndex v58 = *(void *)(v56 + 8);
        }
        else
        {
          CFIndex v58 = *(unsigned __int8 *)(v56 + 23);
          uint64_t v59 = (const UInt8 *)v56;
        }
        CFStringRef v60 = CFStringCreateWithBytes(0, v59, v58, 0x8000100u, 0);
        *(void *)&buf[0].AudioObjectPropertySelector mSelector = v60;
        if (!v60)
        {
          v409 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v409, "Could not construct");
        }
LABEL_119:
        if ((void)theArray && BYTE9(theArray)) {
          CFArrayAppendValue((CFMutableArrayRef)theArray, v60);
        }
        if (v60) {
          CFRelease(v60);
        }
        v56 += 24;
      }
    }
    *(void *)&buf[0].AudioObjectPropertySelector mSelector = v633;
    sub_217F8((void ***)buf);
    *(void *)&buf[0].AudioObjectPropertySelector mSelector = __p;
    sub_217F8((void ***)buf);
    v620[0] = off_6332F8;
    v620[1] = a1;
    v620[2] = &v622;
    v620[3] = v620;
    sub_306D48((uint64_t)v633, a1, (uint64_t)v620);
    sub_307370(v620);
    if (!*(void *)&v633[8])
    {
      uint64_t v544 = sub_32A48(13);
      v545 = sub_7D5E8(1, *(void **)v544, *(void *)(v544 + 8));
      v546 = v545;
      if (v545 && os_log_type_enabled(v545, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6729;
        _os_log_impl(&def_1E50E8, v546, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }

      v547 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v547, "Postcondition failure.");
    }
    unsigned int v601 = sub_3073F4(a1);
    BOOL v604 = sub_128688(*(signed int *)v633);
    unsigned int v147 = sub_2FE750(&v622, *(_DWORD *)(*(void *)(a1 + 112) + 144), *(unsigned __int8 *)(*(void *)(a1 + 112) + 384));
    sub_1D4800(v622, @"category", (void *)(a1 + 224));
    sub_1D4800(v622, @"mode", (void *)(a1 + 228));
    LODWORD(v624) = 0;
    if ((sub_1D4800(v622, @"optional output mode", &v624) & 1) != 0
      || sub_1D4800(*(const __CFDictionary **)&v633[8], @"optional output mode", &v624))
    {
      *(_DWORD *)(a1 + 232) = v624;
      *(unsigned char *)(a1 + 236) = 1;
    }
    if (sub_20ADDC()
      && (sub_1D4800(v622, @"echo cancelled input", (void *)(a1 + 492)) & 1) == 0)
    {
      *(_DWORD *)(a1 + 492) = 0;
    }
    *(void *)&long long theArray = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    WORD4(theArray) = 257;
    sub_1D49BC(&v622, @"initiation context", (uint64_t)&theArray);
    if ((void)theArray)
    {
      AudioObjectPropertySelector mSelector = sub_F0BCC((unint64_t *)(a1 + 224), (CFDictionaryRef *)&theArray);
      if (mSelector != 1635087471)
      {
        sub_EFD34((std::string *)__p, (const __CFDictionary **)&theArray, mSelector);
        buf[0].AudioObjectPropertySelector mSelector = mSelector;
        if ((__p[23] & 0x80000000) != 0)
        {
          sub_21E8C(&buf[0].mElement, *(void **)__p, *(unint64_t *)&__p[8]);
          AudioObjectPropertySelector mSelector = buf[0].mSelector;
        }
        else
        {
          *(_OWORD *)&buf[0].mElement = *(_OWORD *)__p;
          *(void *)&buf[2].AudioObjectPropertySelector mSelector = *(void *)&__p[16];
        }
        *(void *)&buf[2].mElement = 0x756E64656175746FLL;
        *(_DWORD *)(a1 + 240) = mSelector;
        v274 = (void **)(a1 + 248);
        if (*(char *)(a1 + 271) < 0)
        {
          operator delete(*v274);
          uint64_t v275 = *(void *)&buf[2].mElement;
        }
        else
        {
          uint64_t v275 = 0x756E64656175746FLL;
        }
        *(_OWORD *)v274 = *(_OWORD *)&buf[0].mElement;
        *(void *)(a1 + 264) = *(void *)&buf[2].mSelector;
        *(void *)(a1 + 272) = v275;
        uint64_t v276 = sub_32A48(8);
        v277 = sub_7D5E8(6, *(void **)v276, *(void *)(v276 + 8));
        v278 = v277;
        if (v277)
        {
          v279 = v277;
          if (os_log_type_enabled(v279, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(&__dst, *(_DWORD *)(a1 + 240));
            v280 = v631 >= 0 ? &__dst : (long long *)__dst;
            buf[0].AudioObjectPropertySelector mSelector = 136315650;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6771;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = v280;
            _os_log_impl(&def_1E50E8, v279, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updated to mClientRequestedActivationInfo %s.", (uint8_t *)buf, 0x1Cu);
            if (SHIBYTE(v631) < 0) {
              operator delete((void *)__dst);
            }
          }
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    else
    {
      if (v147)
      {
        uint64_t v246 = sub_32A48(8);
        v247 = sub_7D5E8(6, *(void **)v246, *(void *)(v246 + 8));
        uint64_t v248 = v247;
        if (v247)
        {
          unint64_t v249 = v247;
          if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, *(_DWORD *)(a1 + 240));
            uint64_t v250 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
            buf[0].AudioObjectPropertySelector mSelector = 136315650;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6777;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = v250;
            _os_log_impl(&def_1E50E8, v249, OS_LOG_TYPE_DEBUG, "%25s:%-5d Keeping mClientRequestedActivationInfo %s.", (uint8_t *)buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(a1 + 240) = 1852796517;
        long long v269 = (void **)(a1 + 248);
        if (*(char *)(a1 + 271) < 0) {
          operator delete(*v269);
        }
        *long long v269 = 0;
        *(void *)(a1 + 256) = 0;
        *(void *)(a1 + 264) = 0;
        *(void *)(a1 + 272) = 0x756E64656175746FLL;
        uint64_t v270 = sub_32A48(8);
        v271 = sub_7D5E8(6, *(void **)v270, *(void *)(v270 + 8));
        uint64_t v248 = v271;
        if (v271)
        {
          v272 = v271;
          if (os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, *(_DWORD *)(a1 + 240));
            v273 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
            buf[0].AudioObjectPropertySelector mSelector = 136315650;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6784;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = v273;
            _os_log_impl(&def_1E50E8, v272, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resetting mClientRequestedActivationInfo %s.", (uint8_t *)buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }
    }
    sub_80594((uint64_t)&theArray);
    if (v622)
    {
      Value = CFDictionaryGetValue(v622, @"camera parameters");
      v282 = Value;
      if (Value)
      {
        CFTypeID v283 = CFGetTypeID(Value);
        if (v283 == CFDictionaryGetTypeID()) {
          sub_30A5F8(a1, *(void *)(a1 + 224), *(void *)(a1 + 232), v282);
        }
      }
    }
    AudioObjectPropertyElement v284 = *(_DWORD *)(a1 + 228);
    AudioObjectPropertySelector v285 = *(_DWORD *)(a1 + 240);
    uint64_t v286 = sub_2EA964(1987276900, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
    if (!v286) {
      goto LABEL_628;
    }
    uint64_t v287 = v286;
    v288 = *(id *)sub_32A48(2);
    v289 = v288;
    if (v288 && os_log_type_enabled(v288, OS_LOG_TYPE_DEBUG))
    {
      buf[0].AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7290;
      HIWORD(buf[1].mScope) = 1024;
      buf[1].mElement = v284;
      LOWORD(buf[2].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[2].mSelector + 2) = v285;
      _os_log_impl(&def_1E50E8, v289, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConfigureSpeechDetectionDSP inMode=%u inInitiationContext=%u\n", (uint8_t *)buf, 0x1Eu);
    }

    if (v285 != 1886352244)
    {
      if (v285 == 1752396914)
      {
        if ((MGGetBoolAnswer() & 1) == 0) {
          goto LABEL_624;
        }
        goto LABEL_610;
      }
      if (v284 == 1987208039 || v284 == 1986098036)
      {
LABEL_610:
        strcpy((char *)buf, "dsedtpni");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v287 + 32))(v287, buf))
        {
          *(_DWORD *)std::string __p = *(_DWORD *)(v287 + 8);
          strcpy((char *)buf, "dsedtpni");
          BYTE1(buf[0].mElement) = 0;
          HIWORD(buf[0].mElement) = 0;
          unint64_t v290 = sub_26DAC((AudioObjectID *)__p, buf, 0, 0);
          *((void *)&v293 + 1) = v291;
          *(void *)&long long v293 = v290;
          uint64_t v292 = v293 >> 32;
          if ((v292 & 0xFF00000000) != 0 && v292 != 1)
          {
            AudioObjectID v294 = *(_DWORD *)(v287 + 8);
            strcpy((char *)buf, "dsedtpni");
            BYTE1(buf[0].mElement) = 0;
            HIWORD(buf[0].mElement) = 0;
            OSStatus v295 = AudioObjectSetPropertyData(v294, buf, 0, 0, 4u, &unk_4E812C);
            if (v295) {
              goto LABEL_1054;
            }
          }
        }
        sub_F1258(v287, 1u);
        unsigned int v297 = v285 == 1752132965 || v285 == 1969840752;
        sub_F131C(v287, v297);
        if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v287 + 1008) + 352))(*(void *)(v287 + 1008), 1685287015, 1684628340, 0))
        {
          v298.n128_u64[0] = 0;
          if (v285 == 1684628340) {
            v298.n128_f32[0] = 1.0;
          }
          (*(void (**)(void, uint64_t, uint64_t, void, __n128))(**(void **)(v287 + 1008) + 368))(*(void *)(v287 + 1008), 1685287015, 1684628340, 0, v298);
        }
LABEL_628:
        uint64_t v304 = *(void *)(a1 + 144);
        uint64_t v305 = *(void *)(a1 + 152);
        if (v304 != v305)
        {
          while (1)
          {
            if (*(void *)v304)
            {
              if ((*(void *)(*(void *)(*(void *)v304 + 1008) + 292) & 0xFF00000000) != 0
                && *(void *)(*(void *)(*(void *)v304 + 1008) + 292) == 1936290409)
              {
                break;
              }
            }
            v304 += 8;
            if (v304 == v305) {
              goto LABEL_689;
            }
          }
        }
        if (v304 != v305)
        {
          v307 = *(_DWORD **)v304;
          if (*(void *)v304)
          {
            if (v285 == 1886352244)
            {
              int v308 = 0;
            }
            else if (v285 == 1752396914)
            {
              int v308 = MGGetBoolAnswer();
            }
            else
            {
              int v308 = v284 == 1987208039 || v284 == 1986098036;
            }
            v323 = *(id *)sub_32A48(2);
            v324 = v323;
            if (v323 && os_log_type_enabled(v323, OS_LOG_TYPE_DEBUG))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315906;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7322;
              HIWORD(buf[1].mScope) = 1024;
              buf[1].mElement = v284;
              LOWORD(buf[2].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[2].mSelector + 2) = v285;
              _os_log_impl(&def_1E50E8, v324, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConfigureSecureSpeechDetectionDSP inMode=%u inInitiationContext=%u\n", (uint8_t *)buf, 0x1Eu);
            }

            if (v285 == 1752132965 || v285 == 1969840752) {
              int v326 = v308;
            }
            else {
              int v326 = 0;
            }
            LODWORD(theArray) = v326;
            strcpy(__p, "mpgdtpni");
            __p[9] = 0;
            *(_WORD *)&__p[10] = 0;
            LODWORD(v624) = 1651797616;
            LODWORD(__dst) = v307[2];
            strcpy((char *)buf, "mhgdtpni");
            BYTE1(buf[0].mElement) = 0;
            HIWORD(buf[0].mElement) = 0;
            unint64_t v327 = sub_26DAC((AudioObjectID *)&__dst, buf, 4u, &v624);
            *((void *)&v330 + 1) = v328;
            *(void *)&long long v330 = v327;
            uint64_t v329 = v330 >> 32;
            if ((v329 & 0xFF00000000) != 0 && v329) {
              (*(void (**)(_DWORD *, unsigned char *, uint64_t, long long *, uint64_t, long long *, void))(*(void *)v307 + 64))(v307, __p, 4, &v624, 4, &theArray, 0);
            }
          }
        }
LABEL_689:
        if (*(_DWORD *)(a1 + 224) == 1668509810) {
          int v331 = 1668309362;
        }
        else {
          int v331 = *(_DWORD *)(a1 + 224);
        }
        sub_1D4AF4((uint64_t)&v633[8], @"category", v331);
        sub_1D4AF4((uint64_t)&v633[8], @"mode", *(_DWORD *)(a1 + 228));
        if ((v604 & v601) == 1)
        {
          id v332 = *(id *)sub_32A48(2);
          v333 = v332;
          if (v332)
          {
            v334 = v332;
            if (os_log_type_enabled(v334, OS_LOG_TYPE_DEBUG))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6808;
              _os_log_impl(&def_1E50E8, v334, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change was redundant, but the beam direction changed.  Updating the route change description.", (uint8_t *)buf, 0x12u);
            }
          }
          sub_1D4AF4((uint64_t)&v633[8], @"route change reason", 1919050851);
          sub_3B7EC();
          *(void *)&buf[0].AudioObjectPropertySelector mSelector = &qword_64CC40;
          LOBYTE(buf[0].mElement) = 0;
          LOBYTE(buf[0].mElement) = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
          sub_302080((uint64_t)__p, a1, *(void **)(a1 + 120));
          if (v633[17] && *(void *)__p && *(void *)&v633[8]) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)&v633[8], @"active devices", *(const void **)__p);
          }
          sub_3D61C((uint64_t)__p);
          sub_3BCAC(buf);
        }
        sub_307CF8((uint64_t **)(a1 + 144));
        v336 = *(unint64_t **)(a1 + 144);
        v335 = *(unint64_t **)(a1 + 152);
        if (v336 == v335)
        {
          v337 = *(uint64_t **)(a1 + 144);
        }
        else
        {
          do
          {
            if (*v336) {
              sub_C8674(*v336);
            }
            ++v336;
          }
          while (v336 != v335);
          v337 = *(uint64_t **)(a1 + 144);
          v336 = *(unint64_t **)(a1 + 152);
        }
        uint64_t v338 = sub_2EA964(1986291046, 0, v337, (uint64_t *)v336);
        if (!v604)
        {
          uint64_t v339 = v338;
          sub_3CD68C();
          if (qword_65E378 == 1)
          {
            sub_3B7EC();
            *(void *)std::string __p = &qword_64CC40;
            __p[8] = 0;
            __p[8] = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
            uint64_t v340 = sub_BC8B0(v339, 1);
            sub_46A4C((uint64_t *)buf, v340);
            int v341 = sub_306C58(a1, &v629, 1886545251);
            if ((sub_306C58(a1, buf, 1886613611) & v341) == 1) {
              sub_307E38(*(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
            }
            sub_463E0(*(void **)&buf[0].mElement);
            sub_3BCAC(__p);
          }
          sub_3B7EC();
          *(void *)std::string __p = &qword_64CC40;
          __p[8] = 0;
          __p[8] = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
          sub_309E4C(a1);
          sub_F2720(v609, *(void *)(a1 + 216) + 8);
          sub_F2778((uint64_t)buf, a1 + 224, (uint64_t)v609, *(_DWORD *)(a1 + 492), a1 + 440);
          sub_308F48(a1, (uint64_t **)(a1 + 144), *(unint64_t *)&buf[0].mSelector, *(uint64_t *)&buf[0].mElement, *(_DWORD *)(a1 + 400) != 0);
          sub_463E0(*(void **)&buf[2].mSelector);
          if (v609[16]) {
            sub_80594((uint64_t)v609);
          }
          sub_3BCAC(__p);
        }
        sub_F2720(&__dst, *(void *)(a1 + 216) + 8);
        if ((_BYTE)v631
          && (void)__dst
          && CFDictionaryContainsKey((CFDictionaryRef)__dst, @"network uplink clock uses baseband"))
        {
          __p[0] = 0;
          sub_1D4750((const __CFDictionary *)__dst, @"network uplink clock uses baseband", __p);
          uint64_t v342 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
          if (!v602)
          {
            uint64_t v591 = sub_32A48(13);
            v592 = sub_7D5E8(1, *(void **)v591, *(void *)(v591 + 8));
            v593 = v592;
            if (v592 && os_log_type_enabled(v592, OS_LOG_TYPE_ERROR))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6860;
              _os_log_impl(&def_1E50E8, v593, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
            }

            v594 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v594, "Precondition failure.");
          }
          sub_CD984(*(void *)(*(void *)(v342 + 1008) + 312), __p[0]);
        }
        sub_307FB0((uint64_t)buf, a1);
        AudioObjectPropertySelector v343 = buf[0].mSelector;
        sub_1D4AF4((uint64_t)&v633[8], @"siri input source", buf[0].mSelector);
        id v344 = *(id *)sub_32A48(2);
        v345 = v344;
        if (v344)
        {
          v346 = v344;
          if (os_log_type_enabled(v346, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(&theArray, v343);
            v347 = v628 >= 0 ? &theArray : (long long *)theArray;
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 6872;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&__p[20] = v347;
            _os_log_impl(&def_1E50E8, v346, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source: %s.", __p, 0x1Cu);
            if (SHIBYTE(v628) < 0) {
              operator delete((void *)theArray);
            }
          }
        }
        if (v343 == 1936679529 || v343 == 1936024681)
        {
          if (SHIBYTE(buf[2].mScope) < 0)
          {
            sub_21E8C(&theArray, *(void **)&buf[0].mElement, *(unint64_t *)&buf[1].mScope);
          }
          else
          {
            long long theArray = *(_OWORD *)&buf[0].mElement;
            uint64_t v628 = *(void *)&buf[2].mSelector;
          }
          uint64_t v348 = HIBYTE(v628);
          char v349 = HIBYTE(v628);
          if (v628 < 0) {
            uint64_t v348 = *((void *)&theArray + 1);
          }
          if (!v348)
          {
            id v350 = *(id *)sub_32A48(13);
            v351 = v350;
            if (v350)
            {
              v352 = v350;
              if (os_log_type_enabled(v352, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 6878;
                _os_log_impl(&def_1E50E8, v352, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid UUID for out of band speech input device\"", __p, 0x12u);
              }
            }
            char v349 = HIBYTE(v628);
          }
          if (v349 >= 0) {
            p_long long theArray = (char *)&theArray;
          }
          else {
            p_long long theArray = (char *)theArray;
          }
          sub_1D4C8C((uint64_t)&v633[8], @"siri input source UUID", p_theArray);
          id v354 = *(id *)sub_32A48(2);
          v355 = v354;
          if (v354)
          {
            v356 = v354;
            if (os_log_type_enabled(v356, OS_LOG_TYPE_DEFAULT))
            {
              v357 = &theArray;
              if (v628 < 0) {
                v357 = (long long *)theArray;
              }
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 6881;
              *(_WORD *)&__p[18] = 2080;
              *(void *)&__p[20] = v357;
              _os_log_impl(&def_1E50E8, v356, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source UUID: %s.", __p, 0x1Cu);
            }
          }
          if (SHIBYTE(v628) < 0) {
            operator delete((void *)theArray);
          }
        }
        if (SHIBYTE(buf[2].mScope) < 0) {
          operator delete(*(void **)&buf[0].mElement);
        }
        if (v604)
        {
          if (!*(void *)sub_32A48(2))
          {
            id v370 = *(id *)sub_32A48(2);
            v371 = v370;
            if (v370)
            {
              v372 = v370;
              if (os_log_type_enabled(v372, OS_LOG_TYPE_DEFAULT))
              {
                buf[0].AudioObjectPropertySelector mSelector = 136315650;
                *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                LOWORD(buf[1].mSelector) = 1024;
                *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6903;
                HIWORD(buf[1].mScope) = 2080;
                *(void *)&buf[1].mElement = "client request";
                _os_log_impl(&def_1E50E8, v372, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change completed [ %s ]. Route description: Redundant.", (uint8_t *)buf, 0x1Cu);
              }
            }
            goto LABEL_772;
          }
        }
        else
        {
          uint64_t v368 = *(void *)(a1 + 144);
          uint64_t v369 = *(void *)(a1 + 152);
          while (v368 != v369)
          {
            if (*(void *)v368) {
              sub_CC45C(*(void *)(*(void *)v368 + 1008), *(unsigned char *)(a1 + 488));
            }
            v368 += 8;
          }
        }
        CFDictionaryRef v358 = *(const __CFDictionary **)&v633[8];
        sub_21C8C(v607, "  ");
        sub_16A67C((uint64_t *)__p, v358, 2, (const void **)v607);
        if (v608 < 0) {
          operator delete(v607[0]);
        }
        id v359 = *(id *)sub_32A48(2);
        v360 = v359;
        if (v359)
        {
          v361 = v359;
          if (os_log_type_enabled(v361, OS_LOG_TYPE_DEFAULT))
          {
            buf[0].AudioObjectPropertySelector mSelector = 136315650;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6898;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = "client request";
            _os_log_impl(&def_1E50E8, v361, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change completed [ %s ]. Route description:", (uint8_t *)buf, 0x1Cu);
          }
        }
        for (uint64_t j = *(void *)&__p[8]; (unsigned char *)j != __p; uint64_t j = *(void *)(j + 8))
        {
          id v363 = *(id *)sub_32A48(2);
          v364 = v363;
          if (v363)
          {
            v365 = v363;
            if (os_log_type_enabled(v365, OS_LOG_TYPE_DEFAULT))
            {
              v366 = (void *)(j + 16);
              if (*(char *)(j + 39) < 0) {
                v366 = (void *)*v366;
              }
              buf[0].AudioObjectPropertySelector mSelector = 136315650;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6898;
              HIWORD(buf[1].mScope) = 2080;
              *(void *)&buf[1].mElement = v366;
              _os_log_impl(&def_1E50E8, v365, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", (uint8_t *)buf, 0x1Cu);
            }
          }
        }
        sub_16A560(__p);
        sub_2E9DAC(a1);
LABEL_772:
        *((_DWORD *)a6 + 6) = 8;
        if (*(void *)&v633[8])
        {
          CFRetain(*(CFTypeRef *)&v633[8]);
          uint64_t v367 = *(void *)&v633[8];
        }
        else
        {
          uint64_t v367 = 0;
        }
        *(void *)a6[2] = v367;
        if ((_BYTE)v631) {
          sub_80594((uint64_t)&__dst);
        }
        sub_80594((uint64_t)&v633[8]);
        sub_80594((uint64_t)&theDict);
        sub_80594((uint64_t)&v622);
        sub_463E0((void *)v629.__r_.__value_.__l.__size_);
        goto LABEL_808;
      }
    }
LABEL_624:
    sub_F1258(v287, 0);
    sub_F131C(v287, 0);
    strcpy((char *)buf, "dbedtpni");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    if (!(*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v287 + 32))(v287, buf)) {
      goto LABEL_628;
    }
    *(_DWORD *)std::string __p = *(_DWORD *)(v287 + 8);
    strcpy((char *)buf, "dbedtpni");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    unint64_t v299 = sub_26DAC((AudioObjectID *)__p, buf, 0, 0);
    *((void *)&v302 + 1) = v300;
    *(void *)&long long v302 = v299;
    uint64_t v301 = v302 >> 32;
    if ((v301 & 0xFF00000000) == 0) {
      goto LABEL_628;
    }
    if (v301 == 1) {
      goto LABEL_628;
    }
    AudioObjectID v303 = *(_DWORD *)(v287 + 8);
    strcpy((char *)buf, "dbedtpni");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    OSStatus v295 = AudioObjectSetPropertyData(v303, buf, 0, 0, 4u, &unk_4E812C);
    if (!v295) {
      goto LABEL_628;
    }
LABEL_1054:
    v595 = __cxa_allocate_exception(0x10uLL);
    *(void *)v595 = &off_6414D8;
    v595[2] = v295;
  }
  if (v14 <= 1986094178)
  {
    if (v14 <= 1936745572)
    {
      if (v14 != 1936028521)
      {
        if (v14 == 1936225648)
        {
          sub_13910();
          id v27 = (id)objc_claimAutoreleasedReturnValue();
          operator new();
        }
        goto LABEL_238;
      }
      if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) == a5)
      {
        CFTypeRef v82 = (CFTypeRef)*a6;
        if (*a6) {
          CFRetain((CFTypeRef)*a6);
        }
        sub_22084(__p, v82);
        sub_1FD7C((uint64_t)buf, (const __CFDictionary **)__p);
        if (*(void *)__p) {
          CFRelease(*(CFTypeRef *)__p);
        }
        sub_20EB4(a1, (unsigned __int8 *)buf);
        if (BYTE1(buf[0].mSelector))
        {
          sub_303BF0((CFDictionaryRef *)v633, a1, (long long **)buf);
          uint64_t v83 = *(const void **)v633;
          if (*(void *)v633) {
            CFRetain(*(CFTypeRef *)v633);
          }
          v606 = v83;
          memset(__p, 0, 24);
          sub_4CAB0(__p, v618, (uint64_t)v619, (v619 - (unsigned char *)v618) >> 3);
          uint64_t v84 = *(void **)__p;
          sub_F3FF0((uint64_t *)&v606, *(uint64_t **)__p, *(uint64_t **)&__p[8], 8, 0);
          if (v84) {
            operator delete(v84);
          }
          if (v83)
          {
            CFRelease(v83);
            CFRelease(v83);
          }
        }
        if (v618)
        {
          v619 = v618;
          operator delete(v618);
        }
        *(void *)std::string __p = &buf[2].mElement;
        sub_217F8((void ***)__p);
        *(void *)std::string __p = &buf[0].mElement;
        sub_217F8((void ***)__p);
        goto LABEL_808;
      }
      uint64_t v456 = sub_32A48(13);
      int v395 = 561211770;
      v457 = sub_7D5E8(1, *(void **)v456, *(void *)(v456 + 8));
      if (v457)
      {
        v396 = v457;
        if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
        {
          *(void *)v633 = *(void *)a2;
          *(_DWORD *)&v633[8] = a2[2];
          sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
          int v458 = __p[23];
          v459 = *(unsigned char **)__p;
          AudioObjectPropertySelector v460 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          v461 = __p;
          buf[0].AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          if (v458 < 0) {
            v461 = v459;
          }
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6981;
          HIWORD(buf[1].mScope) = 2080;
          *(void *)&buf[1].mElement = v461;
          LOWORD(buf[2].mScope) = 1024;
          *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
          HIWORD(buf[2].mElement) = 1024;
          buf[3].AudioObjectPropertySelector mSelector = v460;
          v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
LABEL_914:
          v402 = v396;
          uint32_t v403 = 40;
          goto LABEL_915;
        }
        goto LABEL_917;
      }
      goto LABEL_843;
    }
    if (v14 == 1936745573)
    {
      if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        uint64_t v462 = sub_32A48(13);
        int v395 = 561211770;
        v463 = sub_7D5E8(1, *(void **)v462, *(void *)(v462 + 8));
        if (v463)
        {
          v396 = v463;
          if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
          {
            *(void *)v633 = *(void *)a2;
            *(_DWORD *)&v633[8] = a2[2];
            sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
            int v464 = __p[23];
            v465 = *(unsigned char **)__p;
            AudioObjectPropertySelector v466 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            v467 = __p;
            buf[0].AudioObjectPropertySelector mSelector = 136316162;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            if (v464 < 0) {
              v467 = v465;
            }
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6935;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = v467;
            LOWORD(buf[2].mScope) = 1024;
            *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
            HIWORD(buf[2].mElement) = 1024;
            buf[3].AudioObjectPropertySelector mSelector = v466;
            v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_914;
          }
          goto LABEL_917;
        }
        goto LABEL_843;
      }
      if (*(void *)(a1 + 112))
      {
        sub_298DA4();
        operator new();
      }
      uint64_t v484 = sub_32A48(13);
      v485 = sub_7D5E8(1, *(void **)v484, *(void *)(v484 + 8));
      v476 = v485;
      if (v485 && os_log_type_enabled(v485, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6936;
        _os_log_impl(&def_1E50E8, v476, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
LABEL_908:

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
      goto LABEL_821;
    }
    if (v14 == 1936882284)
    {
      if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        uint64_t v432 = sub_32A48(13);
        int v395 = 561211770;
        v433 = sub_7D5E8(1, *(void **)v432, *(void *)(v432 + 8));
        if (v433)
        {
          v396 = v433;
          if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
          {
            *(void *)v633 = *(void *)a2;
            *(_DWORD *)&v633[8] = a2[2];
            sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
            int v434 = __p[23];
            v435 = *(unsigned char **)__p;
            AudioObjectPropertySelector v436 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            v437 = __p;
            buf[0].AudioObjectPropertySelector mSelector = 136316162;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            if (v434 < 0) {
              v437 = v435;
            }
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6914;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].mElement = v437;
            LOWORD(buf[2].mScope) = 1024;
            *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
            HIWORD(buf[2].mElement) = 1024;
            buf[3].AudioObjectPropertySelector mSelector = v436;
            v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_914;
          }
LABEL_917:

          goto LABEL_918;
        }
LABEL_843:
        v396 = 0;
        goto LABEL_918;
      }
      if (*(void *)(a1 + 112))
      {
        uint64_t v45 = sub_298DA4();
        (*(void (**)(uint64_t, void, void, void))(*(void *)v45 + 320))(v45, *(void *)(a1 + 112), *a6, a6[1]);
        unint64_t v46 = *(id *)sub_32A48(2);
        long long v47 = v46;
        if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6920;
          _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SerializationContext is ready. Allowing all devices", (uint8_t *)buf, 0x12u);
        }

        uint64_t v48 = sub_F820C();
        (*(void (**)(void, int *))(**(void **)(v48 + 88) + 24))(*(void *)(v48 + 88), &dword_64AC80);
        goto LABEL_808;
      }
      uint64_t v474 = sub_32A48(13);
      v475 = sub_7D5E8(1, *(void **)v474, *(void *)(v474 + 8));
      v476 = v475;
      if (v475 && os_log_type_enabled(v475, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6915;
        _os_log_impl(&def_1E50E8, v476, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      goto LABEL_908;
    }
LABEL_238:
    sub_3A60D0(a1, a2, a3, a4, a5, (uint64_t)a6);
    goto LABEL_808;
  }
  if (v14 > 1987016303)
  {
    if (v14 == 1987016304)
    {
      sub_3B7EC();
      (*(void (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
      *(void *)&long long __dst = off_633388;
      v632 = &__dst;
      sub_528DC(v633, 0, (uint64_t)&__dst);
      sub_4F750(&__dst);
      if (*(_DWORD *)(a1 + 400))
      {
        uint64_t v117 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
        if (v117)
        {
          int v118 = (void *)sub_BC8B0(v117, 1);
          if (v118[2])
          {
            uint64_t v119 = sub_E1B78(*(void *)(a1 + 128), *(_DWORD *)(*v118 + 28));
            if (v119)
            {
              int v120 = *(std::__shared_weak_count **)(v119 + 96);
              *(void *)std::string __p = *(void *)(v119 + 88);
              *(void *)&__p[8] = v120;
              if (v120) {
                atomic_fetch_add_explicit(&v120->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              sub_43F38((uint64_t *)buf, (uint64_t *)__p, "", 7050);
              unsigned int v121 = *(_DWORD *)(*(void *)&buf[0].mSelector + 144);
              if (*(void *)&buf[0].mElement) {
                sub_4636C(*(std::__shared_weak_count **)&buf[0].mElement);
              }
              if (v120) {
                std::__shared_weak_count::__release_weak(v120);
              }
              if (v121 == 1885892674 || v121 == 1885892706 || v121 == 1886152047)
              {
                if (v121 == 1886152047) {
                  operator new();
                }
                operator new();
              }
              uint64_t v585 = sub_32A48(13);
              v586 = sub_7D5E8(1, *(void **)v585, *(void *)(v585 + 8));
              v587 = v586;
              if (v586)
              {
                v588 = v586;
                if (os_log_type_enabled(v588, OS_LOG_TYPE_ERROR))
                {
                  sub_2417C(__p, v121);
                  v589 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
                  buf[0].AudioObjectPropertySelector mSelector = 136315650;
                  *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7055;
                  HIWORD(buf[1].mScope) = 2080;
                  *(void *)&buf[1].mElement = v589;
                  _os_log_impl(&def_1E50E8, v588, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - Default VAD not routed to bluetooth (routed to %s)\"", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
              }
              v590 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v590, "Error routing to partner port - Default VAD not routed to bluetooth (routed to %s)");
            }
          }
          uint64_t v412 = sub_32A48(13);
          v413 = sub_7D5E8(1, *(void **)v412, *(void *)(v412 + 8));
          v414 = v413;
          if (v413 && os_log_type_enabled(v413, OS_LOG_TYPE_ERROR))
          {
            buf[0].AudioObjectPropertySelector mSelector = 136315394;
            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7048;
            _os_log_impl(&def_1E50E8, v414, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - No output port found for default vad\"", (uint8_t *)buf, 0x12u);
          }

          v415 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v415, "Error routing to partner port - No output port found for default vad");
        }
        uint64_t v500 = sub_32A48(13);
        v501 = sub_7D5E8(1, *(void **)v500, *(void *)(v500 + 8));
        v502 = v501;
        if (v501 && os_log_type_enabled(v501, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7043;
          _os_log_impl(&def_1E50E8, v502, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No default VAD found\"", (uint8_t *)buf, 0x12u);
        }

        v503 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v503, "No default VAD found");
      }
      uint64_t v489 = sub_32A48(13);
      v490 = sub_7D5E8(1, *(void **)v489, *(void *)(v489 + 8));
      v491 = v490;
      if (v490 && os_log_type_enabled(v490, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7040;
        _os_log_impl(&def_1E50E8, v491, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - Not in colistening route\"", (uint8_t *)buf, 0x12u);
      }

      v492 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v492, "Error routing to partner port - Not in colistening route");
    }
    if (v14 != 2019714413) {
      goto LABEL_238;
    }
    if ((*(unsigned int (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
    {
      uint64_t v438 = sub_32A48(13);
      int v395 = 561211770;
      v439 = sub_7D5E8(1, *(void **)v438, *(void *)(v438 + 8));
      if (v439)
      {
        v396 = v439;
        if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
        {
          *(void *)v633 = *(void *)a2;
          *(_DWORD *)&v633[8] = a2[2];
          sub_16C9C4((uint64_t)__p, (unsigned int *)v633);
          int v440 = __p[23];
          v441 = *(unsigned char **)__p;
          AudioObjectPropertySelector v442 = (*(uint64_t (**)(std::string::size_type, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          v443 = __p;
          buf[0].AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          if (v440 < 0) {
            v443 = v441;
          }
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6420;
          HIWORD(buf[1].mScope) = 2080;
          *(void *)&buf[1].mElement = v443;
          LOWORD(buf[2].mScope) = 1024;
          *(AudioObjectPropertyScope *)((char *)&buf[2].mScope + 2) = a5;
          HIWORD(buf[2].mElement) = 1024;
          buf[3].AudioObjectPropertySelector mSelector = v442;
          v401 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_914;
        }
        goto LABEL_917;
      }
      goto LABEL_843;
    }
    uint64_t v49 = *(void *)(a1 + 216);
    if (*a6 && *(void *)(v49 + 32))
    {
      uint64_t v552 = sub_32A48(13);
      int v395 = 2003329396;
      v553 = sub_7D5E8(1, *(void **)v552, *(void *)(v552 + 8));
      v396 = v553;
      if (v553 && os_log_type_enabled(v553, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 342;
        _os_log_impl(&def_1E50E8, v396, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Attempt to register an external beamforming handler while one is already registered.\"", (uint8_t *)buf, 0x12u);
      }
LABEL_918:

      v483 = __cxa_allocate_exception(0x10uLL);
      *(void *)v483 = &off_6414D8;
      v483[2] = v395;
    }
    *(_OWORD *)(v49 + 32) = *(_OWORD *)a6;
    if (*(void *)(v49 + 32))
    {
      unint64_t v50 = *(id *)sub_32A48(2);
      int64x2_t v51 = v50;
      if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyElement v52 = *(_DWORD *)(v49 + 48);
        buf[0].AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 346;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].mElement = v52;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling client with beam index %u.", (uint8_t *)buf, 0x18u);
      }

      (*(void (**)(void, void))(v49 + 32))(*(unsigned int *)(v49 + 48), *(void *)(v49 + 40));
    }
    goto LABEL_808;
  }
  if (v14 == 1986094179)
  {
    CFDictionaryRef v623 = (CFDictionaryRef)CFRetain((CFTypeRef)*a6);
    CFDictionaryRef v622 = (CFDictionaryRef)&off_6412B0;
    id v85 = *(id *)sub_32A48(2);
    int v86 = v85;
    if (v85)
    {
      unint64_t v87 = v85;
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
      {
        sub_168E34((std::string *)__p, v623);
        uint64_t v88 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        buf[0].AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 6957;
        HIWORD(buf[1].mScope) = 2080;
        *(void *)&buf[1].mElement = v88;
        _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_DEFAULT, "%25s:%-5d input dictionary: %s", (uint8_t *)buf, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    if (sub_1FE074(v623, @"VAD type 4cc"))
    {
      sub_1FE09C((uint64_t)buf, v623, @"VAD type 4cc");
      unsigned int v89 = sub_517B0(*(const __CFNumber **)&buf[0].mElement);
      sub_49A90(buf);
      if (v89 != 1986095474 && v89 != 1986884979)
      {
        uint64_t v562 = sub_32A48(13);
        v563 = sub_7D5E8(1, *(void **)v562, *(void *)(v562 + 8));
        v564 = v563;
        if (v563 && os_log_type_enabled(v563, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7755;
          _os_log_impl(&def_1E50E8, v564, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }

        v565 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v565, "Precondition failure.");
      }
      id v90 = *(id *)sub_32A48(2);
      v91 = v90;
      if (v90)
      {
        unsigned int v92 = v90;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(__p, v89);
          uint64_t v93 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          buf[0].AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7757;
          HIWORD(buf[1].mScope) = 2080;
          *(void *)&buf[1].mElement = v93;
          _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating VAD of type %s", (uint8_t *)buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
      if (sub_1FE074(v623, @"VAD type 4cc"))
      {
        unsigned int v94 = sub_1FE074(v623, @"mirror vad");
        unsigned int v95 = sub_1FE074(v623, @"port id array");
        unsigned int v96 = v95;
        if (v94 & 1) != 0 || (v95)
        {
          *((void *)&theArray + 1) = 0;
          *(void *)&long long theArray = &off_637B38;
          sub_1FE09C((uint64_t)buf, v623, @"VAD type 4cc");
          unsigned int v97 = sub_517B0(*(const __CFNumber **)&buf[0].mElement);
          sub_49A90(buf);
          if (v94)
          {
            sub_1FE09C((uint64_t)buf, v623, @"mirror vad");
            unsigned int v94 = sub_517B0(*(const __CFNumber **)&buf[0].mElement);
            sub_49A90(buf);
          }
          if (v96)
          {
            sub_30C394((uint64_t)buf, v623, @"port id array");
            uint64_t v98 = *((void *)&theArray + 1);
            *((void *)&theArray + 1) = *(void *)&buf[0].mElement;
            *(void *)&buf[0].mElement = v98;
            sub_49A90(buf);
            unint64_t v99 = 0;
            unint64_t v100 = 0;
            BOOL v101 = 0;
            unsigned int v102 = 0;
            while (1)
            {
              if ((unint64_t)sub_4C694(*((const __CFArray **)&theArray + 1)) <= v102) {
                goto LABEL_321;
              }
              unsigned int v103 = v102;
              *(void *)&buf[0].AudioObjectPropertySelector mSelector = &off_637B18;
              *(void *)&buf[0].mElement = 0;
              if (*((void *)&theArray + 1) && CFArrayGetCount(*((CFArrayRef *)&theArray + 1)) > v102)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)&theArray + 1), v102);
                v105 = ValueAtIndex;
                CFTypeID v106 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
                if (v106 == CFNumberGetTypeID())
                {
                  if (v105)
                  {
                    CFRetain(v105);
                    uint64_t v107 = *(const void **)&buf[0].mElement;
                    *(void *)&buf[0].mElement = v105;
                    if (!v107) {
                      goto LABEL_202;
                    }
                  }
                  else
                  {
                    uint64_t v107 = *(const void **)&buf[0].mElement;
                    *(void *)&buf[0].mElement = 0;
                    if (!v107) {
                      goto LABEL_202;
                    }
                  }
                  CFRelease(v107);
                }
              }
LABEL_202:
              unsigned int v108 = sub_517B0(*(const __CFNumber **)&buf[0].mElement);
              unsigned int v109 = v108;
              if ((unint64_t)v100 >= v99)
              {
                uint64_t v111 = v100 - v101;
                unint64_t v112 = v111 + 1;
                if ((unint64_t)(v111 + 1) >> 62) {
                  sub_60548();
                }
                if ((uint64_t)(v99 - (void)v101) >> 1 > v112) {
                  unint64_t v112 = (uint64_t)(v99 - (void)v101) >> 1;
                }
                if (v99 - (unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v113 = v112;
                }
                if (v113) {
                  unint64_t v113 = (unint64_t)sub_46BF4(v113);
                }
                else {
                  uint64_t v114 = 0;
                }
                uint64_t v115 = (unsigned int *)(v113 + 4 * v111);
                *uint64_t v115 = v109;
                int v110 = v115 + 1;
                while (v100 != v101)
                {
                  unsigned int v116 = *--v100;
                  *--uint64_t v115 = v116;
                }
                unint64_t v99 = v113 + 4 * v114;
                if (v101) {
                  operator delete(v101);
                }
                BOOL v101 = v115;
              }
              else
              {
                *unint64_t v100 = v108;
                int v110 = v100 + 1;
              }
              sub_49A90(buf);
              unsigned int v102 = v103 + 1;
              unint64_t v100 = v110;
            }
          }
          unint64_t v100 = 0;
          BOOL v101 = 0;
LABEL_321:
          id v149 = *(id *)sub_32A48(2);
          int v150 = v149;
          if (v149)
          {
            long long v151 = v149;
            if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
            {
              long long v152 = v633;
              sub_2417C(v633, v97);
              unsigned int v153 = v94;
              if ((v633[23] & 0x80u) != 0) {
                long long v152 = *(uint8_t **)v633;
              }
              sub_168B00(&v629, *((const __CFArray **)&theArray + 1));
              int v154 = SHIBYTE(v629.__r_.__value_.__r.__words[2]);
              std::string::size_type v155 = v629.__r_.__value_.__r.__words[0];
              sub_2417C(&__dst, v153);
              uint64_t v156 = &v629;
              if (v154 < 0) {
                uint64_t v156 = (std::string *)v155;
              }
              __int16 v157 = &__dst;
              if (v631 < 0) {
                __int16 v157 = (long long *)__dst;
              }
              buf[0].AudioObjectPropertySelector mSelector = 136316162;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1052;
              HIWORD(buf[1].mScope) = 2080;
              *(void *)&buf[1].mElement = v152;
              LOWORD(buf[2].mScope) = 2080;
              *(void *)((char *)&buf[2].mScope + 2) = v156;
              HIWORD(buf[3].mSelector) = 2080;
              *(void *)&buf[3].mScope = v157;
              _os_log_impl(&def_1E50E8, v151, OS_LOG_TYPE_DEFAULT, "%25s:%-5d create VAD of type %s with ports %s, mirroring %s", (uint8_t *)buf, 0x30u);
              if (SHIBYTE(v631) < 0) {
                operator delete((void *)__dst);
              }
              unsigned int v94 = v153;
              if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v629.__r_.__value_.__l.__data_);
              }
              if ((char)v633[23] < 0) {
                operator delete(*(void **)v633);
              }
            }
          }
          *(_DWORD *)std::string __p = v97;
          *(_DWORD *)&__p[4] = v94;
          memset(&__p[8], 0, 24);
          sub_46B38(&__p[8], v101, (uint64_t)v100, v100 - v101);
          if (v101) {
            operator delete(v101);
          }
          sub_49A90(&theArray);
          id v158 = *(id *)sub_32A48(2);
          uint64_t v159 = v158;
          if (v158)
          {
            uint64_t v160 = v158;
            if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(v633, *(unsigned int *)__p);
              int v161 = (v633[23] & 0x80u) == 0 ? v633 : *(uint8_t **)v633;
              buf[0].AudioObjectPropertySelector mSelector = 136315650;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7760;
              HIWORD(buf[1].mScope) = 2080;
              *(void *)&buf[1].mElement = v161;
              _os_log_impl(&def_1E50E8, v160, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating VAD of type %s", (uint8_t *)buf, 0x1Cu);
              if ((char)v633[23] < 0) {
                operator delete(*(void **)v633);
              }
            }
          }
          if (*(_DWORD *)__p == 1986095474 || *(_DWORD *)__p == 1986884979)
          {
            if (*(_DWORD *)&__p[4] || *(void *)&__p[16] != *(void *)&__p[8])
            {
              if (*(_DWORD *)__p == 1986884979) {
                int v162 = 19;
              }
              else {
                int v162 = 20;
              }
              LODWORD(v614) = v162;
              if (sub_14D4C0(*(void *)(a1 + 112), v162))
              {
                if (*(void *)&__p[16] - *(void *)&__p[8] == 4)
                {
                  uint64_t v163 = *(void *)(a1 + 128);
                  AudioObjectPropertyElement v164 = **(_DWORD **)&__p[8];
                  uint64_t v165 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
                  if (v165)
                  {
                    unint64_t v166 = (void *)sub_BC8B0(v165, 1);
                    unint64_t v169 = (void *)*v166;
                    __int16 v167 = v166 + 1;
                    v168 = v169;
                    if (v169 == v167)
                    {
LABEL_364:
                      uint64_t v172 = sub_E1B78(v163, v164);
                      uint64_t v173 = v172;
                      if (v172)
                      {
                        v174 = *(std::__shared_weak_count **)(v172 + 96);
                        *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(v172 + 88);
                        *(void *)&buf[0].mElement = v174;
                        if (v174) {
                          atomic_fetch_add_explicit(&v174->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                        }
                        sub_43F38((uint64_t *)&v629, (uint64_t *)buf, "", 1001);
                        if (v174) {
                          std::__shared_weak_count::__release_weak(v174);
                        }
                        id v175 = *(id *)sub_32A48(2);
                        unsigned int v176 = v175;
                        if (v175)
                        {
                          v177 = v175;
                          if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
                          {
                            v178 = *(const void **)(v629.__r_.__value_.__r.__words[0] + 248);
                            *(void *)v633 = v178;
                            v633[8] = *(unsigned char *)(v629.__r_.__value_.__r.__words[0] + 256);
                            if (v633[8] && v178) {
                              CFRetain(v178);
                            }
                            buf[0].AudioObjectPropertySelector mSelector = 136315650;
                            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                            LOWORD(buf[1].mSelector) = 1024;
                            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1003;
                            HIWORD(buf[1].mScope) = 2112;
                            *(void *)&buf[1].mElement = v178;
                            _os_log_impl(&def_1E50E8, v177, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Requested port is %@", (uint8_t *)buf, 0x1Cu);
                            sub_72924((uint64_t)v633);
                          }
                        }
                        std::string::size_type v179 = v629.__r_.__value_.__r.__words[0];
                        int v180 = *(_DWORD *)(v629.__r_.__value_.__r.__words[0] + 144);
                        if (v180 == 1885433953 || v180 == 1885433975)
                        {
                          if ((*(_WORD *)(v629.__r_.__value_.__r.__words[0] + 184) & 0x40) != 0) {
                            sub_DD634(v173, 1);
                          }
                          uint64_t v181 = (std::__shared_weak_count *)v629.__r_.__value_.__l.__size_;
                          *(void *)&long long v624 = v179;
                          *((void *)&v624 + 1) = v629.__r_.__value_.__l.__size_;
                          if (v629.__r_.__value_.__l.__size_)
                          {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v629.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
                            sub_4636C(v181);
                          }
                          *(void *)&buf[2].AudioObjectPropertySelector mSelector = 0;
                          uint64_t v182 = operator new(0x28uLL);
                          *uint64_t v182 = off_633460;
                          v182[1] = __p;
                          v182[2] = &v624;
                          v182[3] = a1;
                          v182[4] = &v614;
                          *(void *)&buf[2].AudioObjectPropertySelector mSelector = v182;
                          sub_306D48((uint64_t)&v629, a1, (uint64_t)buf);
                          sub_307370(buf);
                          CFDictionaryRef v183 = (const __CFDictionary *)v629.__r_.__value_.__l.__size_;
                          if (v629.__r_.__value_.__l.__size_)
                          {
                            sub_21C8C(&theArray, "  ");
                            sub_16A67C((uint64_t *)&__dst, v183, 2, (const void **)&theArray);
                            if (SHIBYTE(v628) < 0) {
                              operator delete((void *)theArray);
                            }
                            uint64_t v184 = *(id *)sub_32A48(2);
                            char v185 = v184;
                            if (v184 && os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)v633 = 136315650;
                              *(void *)&v633[4] = "VirtualAudio_PlugIn.mm";
                              *(_WORD *)&v633[12] = 1024;
                              *(_DWORD *)&v633[14] = 7790;
                              *(_WORD *)&v633[18] = 2080;
                              *(void *)&v633[20] = "VAD Creation";
                              _os_log_impl(&def_1E50E8, v185, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change completed [ %s ]. Route description:", v633, 0x1Cu);
                            }

                            for (uint64_t k = *((void *)&__dst + 1); (long long *)k != &__dst; uint64_t k = *(void *)(k + 8))
                            {
                              uint64_t v187 = *(id *)sub_32A48(2);
                              char v188 = v187;
                              if (v187 && os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                              {
                                unsigned int v189 = (void *)(k + 16);
                                if (*(char *)(k + 39) < 0) {
                                  unsigned int v189 = (void *)*v189;
                                }
                                *(_DWORD *)v633 = 136315650;
                                *(void *)&v633[4] = "VirtualAudio_PlugIn.mm";
                                *(_WORD *)&v633[12] = 1024;
                                *(_DWORD *)&v633[14] = 7790;
                                *(_WORD *)&v633[18] = 2080;
                                *(void *)&v633[20] = v189;
                                _os_log_impl(&def_1E50E8, v188, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", v633, 0x1Cu);
                              }
                            }
                            sub_16A560(&__dst);
                            operator new();
                          }
                          uint64_t v540 = sub_32A48(13);
                          v541 = sub_7D5E8(1, *(void **)v540, *(void *)(v540 + 8));
                          v542 = v541;
                          if (v541 && os_log_type_enabled(v541, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)v633 = 136315394;
                            *(void *)&v633[4] = "VirtualAudio_PlugIn.mm";
                            *(_WORD *)&v633[12] = 1024;
                            *(_DWORD *)&v633[14] = 7788;
                            _os_log_impl(&def_1E50E8, v542, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", v633, 0x12u);
                          }

                          v543 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                          std::logic_error::logic_error(v543, "Postcondition failure.");
                        }
                        uint64_t v576 = sub_32A48(13);
                        v577 = sub_7D5E8(1, *(void **)v576, *(void *)(v576 + 8));
                        v578 = v577;
                        if (v577)
                        {
                          v579 = v577;
                          if (os_log_type_enabled(v579, OS_LOG_TYPE_ERROR))
                          {
                            sub_2417C(v633, *(_DWORD *)(v179 + 144));
                            v580 = (v633[23] & 0x80u) == 0 ? v633 : *(uint8_t **)v633;
                            buf[0].AudioObjectPropertySelector mSelector = 136315650;
                            *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                            LOWORD(buf[1].mSelector) = 1024;
                            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1006;
                            HIWORD(buf[1].mScope) = 2080;
                            *(void *)&buf[1].mElement = v580;
                            _os_log_impl(&def_1E50E8, v579, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported port type %s specified for VAD creation\"", (uint8_t *)buf, 0x1Cu);
                            if ((char)v633[23] < 0) {
                              operator delete(*(void **)v633);
                            }
                          }
                        }
                        v581 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        std::logic_error::logic_error(v581, "Unsupported port type %s specified for VAD creation");
                      }
                      uint64_t v533 = sub_32A48(13);
                      v534 = sub_7D5E8(1, *(void **)v533, *(void *)(v533 + 8));
                      v535 = v534;
                      if (v534 && os_log_type_enabled(v534, OS_LOG_TYPE_ERROR))
                      {
                        buf[0].AudioObjectPropertySelector mSelector = 136315650;
                        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                        LOWORD(buf[1].mSelector) = 1024;
                        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 999;
                        HIWORD(buf[1].mScope) = 1024;
                        buf[1].mElement = v164;
                        _os_log_impl(&def_1E50E8, v535, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"No virtual audio port found with port id %u\"", (uint8_t *)buf, 0x18u);
                      }

                      v386 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      v387 = (void (*)(void *))&std::logic_error::~logic_error;
                      std::logic_error::logic_error(v386, "No virtual audio port found with port id %u");
LABEL_816:
                      __cxa_throw(v386, v388, v387);
                    }
                    while (*((_DWORD *)v168 + 7) != v164)
                    {
                      unint64_t v170 = (void *)v168[1];
                      if (v170)
                      {
                        do
                        {
                          v171 = v170;
                          unint64_t v170 = (void *)*v170;
                        }
                        while (v170);
                      }
                      else
                      {
                        do
                        {
                          v171 = (void *)v168[2];
                          BOOL v12 = *v171 == (void)v168;
                          v168 = v171;
                        }
                        while (!v12);
                      }
                      v168 = v171;
                      if (v171 == v167) {
                        goto LABEL_364;
                      }
                    }
                    uint64_t v383 = sub_32A48(13);
                    v384 = sub_7D5E8(1, *(void **)v383, *(void *)(v383 + 8));
                    v385 = v384;
                    if (v384 && os_log_type_enabled(v384, OS_LOG_TYPE_ERROR))
                    {
                      buf[0].AudioObjectPropertySelector mSelector = 136315650;
                      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                      LOWORD(buf[1].mSelector) = 1024;
                      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 995;
                      HIWORD(buf[1].mScope) = 1024;
                      buf[1].mElement = v164;
                      _os_log_impl(&def_1E50E8, v385, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Default VAD is using the requested port %u\"", (uint8_t *)buf, 0x18u);
                    }

                    v386 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    v387 = (void (*)(void *))&std::runtime_error::~runtime_error;
                    std::runtime_error::runtime_error((std::runtime_error *)v386, "Default VAD is using the requested port %u");
                  }
                  else
                  {
                    uint64_t v526 = sub_32A48(13);
                    v527 = sub_7D5E8(1, *(void **)v526, *(void *)(v526 + 8));
                    v528 = v527;
                    if (v527 && os_log_type_enabled(v527, OS_LOG_TYPE_ERROR))
                    {
                      buf[0].AudioObjectPropertySelector mSelector = 136315394;
                      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                      LOWORD(buf[1].mSelector) = 1024;
                      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 989;
                      _os_log_impl(&def_1E50E8, v528, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No default VAD found !\"", (uint8_t *)buf, 0x12u);
                    }

                    v386 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    v387 = (void (*)(void *))&std::runtime_error::~runtime_error;
                    std::runtime_error::runtime_error((std::runtime_error *)v386, "No default VAD found !");
                  }
                  goto LABEL_816;
                }
                uint64_t v523 = sub_32A48(13);
                v524 = sub_7D5E8(1, *(void **)v523, *(void *)(v523 + 8));
                v525 = v524;
                if (v524 && os_log_type_enabled(v524, OS_LOG_TYPE_ERROR))
                {
                  buf[0].AudioObjectPropertySelector mSelector = 136315650;
                  *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7771;
                  HIWORD(buf[1].mScope) = 1024;
                  buf[1].mElement = (*(void *)&__p[16] - *(void *)&__p[8]) >> 2;
                  _os_log_impl(&def_1E50E8, v525, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Only one port ID can be specified (actual specified = %u)\"", (uint8_t *)buf, 0x18u);
                }

                v522 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v522, "Only one port ID can be specified (actual specified = %u)");
              }
              else
              {
                uint64_t v519 = sub_32A48(13);
                v520 = sub_7D5E8(1, *(void **)v519, *(void *)(v519 + 8));
                v521 = v520;
                if (v520 && os_log_type_enabled(v520, OS_LOG_TYPE_ERROR))
                {
                  buf[0].AudioObjectPropertySelector mSelector = 136315394;
                  *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
                  LOWORD(buf[1].mSelector) = 1024;
                  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7768;
                  _os_log_impl(&def_1E50E8, v521, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                }

                v522 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v522, "Precondition failure.");
              }
            }
            uint64_t v582 = sub_32A48(13);
            v583 = sub_7D5E8(1, *(void **)v582, *(void *)(v582 + 8));
            v571 = v583;
            if (v583 && os_log_type_enabled(v583, OS_LOG_TYPE_ERROR))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7764;
              _os_log_impl(&def_1E50E8, v571, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
            }
          }
          else
          {
            uint64_t v569 = sub_32A48(13);
            v570 = sub_7D5E8(1, *(void **)v569, *(void *)(v569 + 8));
            v571 = v570;
            if (v570 && os_log_type_enabled(v570, OS_LOG_TYPE_ERROR))
            {
              buf[0].AudioObjectPropertySelector mSelector = 136315394;
              *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
              LOWORD(buf[1].mSelector) = 1024;
              *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7763;
              _os_log_impl(&def_1E50E8, v571, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
            }
          }

          v584 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v584, "Precondition failure.");
        }
        uint64_t v508 = sub_32A48(13);
        v509 = sub_7D5E8(1, *(void **)v508, *(void *)(v508 + 8));
        v495 = v509;
        if (v509 && os_log_type_enabled(v509, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1031;
          HIWORD(buf[1].mScope) = 1024;
          buf[1].mElement = 0;
          LOWORD(buf[2].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[2].mSelector + 2) = 0;
          v496 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyCreateVAD - eit"
                 "her kVirtualAudioPlugInMirrorVADKey or kVirtualAudioPlugInPortIDsKey is \" \"required. has mirror vad k"
                 "ey: %d has portIDs key: %d\"";
          v506 = v495;
          uint32_t v507 = 30;
          goto LABEL_953;
        }
LABEL_954:

        v510 = __cxa_allocate_exception(0x10uLL);
        *(void *)v510 = &off_6414D8;
        v510[2] = 1852797029;
      }
      uint64_t v504 = sub_32A48(13);
      v505 = sub_7D5E8(1, *(void **)v504, *(void *)(v504 + 8));
      v495 = v505;
      if (!v505 || !os_log_type_enabled(v505, OS_LOG_TYPE_ERROR)) {
        goto LABEL_954;
      }
      buf[0].AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1024;
      v496 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyCreateVAD - kVirtua"
             "lAudioPlugInPropertyVADKey is required\"";
    }
    else
    {
      uint64_t v493 = sub_32A48(13);
      v494 = sub_7D5E8(1, *(void **)v493, *(void *)(v493 + 8));
      v495 = v494;
      if (!v494 || !os_log_type_enabled(v494, OS_LOG_TYPE_ERROR)) {
        goto LABEL_954;
      }
      buf[0].AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7753;
      v496 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyCreateVAD - kVirtua"
             "lAudioPlugInPropertyVADKey is required\"";
    }
    v506 = v495;
    uint32_t v507 = 18;
LABEL_953:
    _os_log_impl(&def_1E50E8, v506, OS_LOG_TYPE_ERROR, v496, (uint8_t *)buf, v507);
    goto LABEL_954;
  }
  if (v14 != 1986094180) {
    goto LABEL_238;
  }
  CFDictionaryRef v623 = (CFDictionaryRef)CFRetain((CFTypeRef)*a6);
  CFDictionaryRef v622 = (CFDictionaryRef)&off_6412B0;
  if ((sub_1FE074(v623, @"VAD type 4cc") & 1) == 0)
  {
    uint64_t v428 = sub_32A48(13);
    v429 = sub_7D5E8(1, *(void **)v428, *(void *)(v428 + 8));
    v430 = v429;
    if (v429 && os_log_type_enabled(v429, OS_LOG_TYPE_ERROR))
    {
      buf[0].AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7800;
      _os_log_impl(&def_1E50E8, v430, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyCreateVAD - the id key is required\"", (uint8_t *)buf, 0x12u);
    }

    v431 = __cxa_allocate_exception(0x10uLL);
    *(void *)v431 = &off_6414D8;
    v431[2] = 1852797029;
  }
  sub_1FE09C((uint64_t)buf, v623, @"VAD type 4cc");
  AudioObjectPropertyElement v34 = sub_517B0(*(const __CFNumber **)&buf[0].mElement);
  sub_49A90(buf);
  __int16 v35 = *(id *)sub_32A48(2);
  int v36 = v35;
  if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7803;
    HIWORD(buf[1].mScope) = 1024;
    buf[1].mElement = v34;
    _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting VAD (ID: %u)", (uint8_t *)buf, 0x18u);
  }

  __int16 v37 = *(uint64_t **)(a1 + 144);
  uint64_t v38 = *(uint64_t **)(a1 + 152);
  if (v37 != v38)
  {
    while (!*v37 || *(_DWORD *)(*v37 + 8) != v34)
    {
      if (++v37 == v38) {
        goto LABEL_59;
      }
    }
  }
  if (v37 == v38 || (uint64_t v122 = *v37) == 0)
  {
LABEL_59:
    uint64_t v39 = sub_32A48(13);
    uint64_t v40 = sub_7D5E8(1, *(void **)v39, *(void *)(v39 + 8));
    unint64_t v41 = v40;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      buf[0].AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7806;
      HIWORD(buf[1].mScope) = 1024;
      buf[1].mElement = v34;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [vad is NULL]: \"No VAD of id %u found\"", (uint8_t *)buf, 0x18u);
    }

    uint64_t v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v42, "No VAD of id %u found");
    goto LABEL_63;
  }
  int v123 = *(_DWORD *)(v122 + 576);
  if (v123 != 1986095474 && v123 != 1986884979)
  {
    uint64_t v566 = sub_32A48(13);
    v567 = sub_7D5E8(1, *(void **)v566, *(void *)(v566 + 8));
    v568 = v567;
    if (v567 && os_log_type_enabled(v567, OS_LOG_TYPE_ERROR))
    {
      buf[0].AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7809;
      _os_log_impl(&def_1E50E8, v568, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }

    uint64_t v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v42, "Precondition failure.");
LABEL_63:
  }
  if (v123 == 1986884979) {
    int v125 = 19;
  }
  else {
    int v125 = 20;
  }
  LODWORD(v614) = v125;
  uint64_t v126 = sub_BC8B0(v122, 1);
  sub_46A4C((uint64_t *)v633, v126);
  if (*(void *)&v633[16] != 1)
  {
    uint64_t v515 = sub_32A48(13);
    v516 = sub_7D5E8(1, *(void **)v515, *(void *)(v515 + 8));
    v517 = v516;
    if (v516 && os_log_type_enabled(v516, OS_LOG_TYPE_ERROR))
    {
      buf[0].AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7815;
      _os_log_impl(&def_1E50E8, v517, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }

    v518 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v518, "Precondition failure.");
  }
  int v127 = *(uint8_t **)v633;
  if (*(uint8_t **)v633 != &v633[8])
  {
    do
    {
      uint64_t v128 = sub_E1B78(*(void *)(a1 + 128), *((_DWORD *)v127 + 7));
      uint64_t v129 = v128;
      if (v128)
      {
        int v130 = *(std::__shared_weak_count **)(v128 + 96);
        *(void *)std::string __p = *(void *)(v128 + 88);
        *(void *)&__p[8] = v130;
        if (v130) {
          atomic_fetch_add_explicit(&v130->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_43F38((uint64_t *)buf, (uint64_t *)__p, "", 7819);
        __int16 v131 = *(_WORD *)(*(void *)&buf[0].mSelector + 184);
        if (*(void *)&buf[0].mElement) {
          sub_4636C(*(std::__shared_weak_count **)&buf[0].mElement);
        }
        if (v130) {
          std::__shared_weak_count::__release_weak(v130);
        }
        if ((v131 & 0x40) != 0) {
          sub_DD634(v129, 0);
        }
      }
      uint64_t v132 = (uint8_t *)*((void *)v127 + 1);
      if (v132)
      {
        do
        {
          char v133 = v132;
          uint64_t v132 = *(uint8_t **)v132;
        }
        while (v132);
      }
      else
      {
        do
        {
          char v133 = (uint8_t *)*((void *)v127 + 2);
          BOOL v12 = *(void *)v133 == (void)v127;
          int v127 = v133;
        }
        while (!v12);
      }
      int v127 = v133;
    }
    while (v133 != &v633[8]);
  }
  *(_OWORD *)&v629.__r_.__value_.__r.__words[1] = 0uLL;
  v629.__r_.__value_.__r.__words[0] = (std::string::size_type)&v629.__r_.__value_.__l.__size_;
  uint64_t v134 = *(void *)(a1 + 280);
  if (*(_DWORD *)v134 == 1986095474)
  {
    int v135 = *(_DWORD *)(*(void *)v633 + 28);
    if (v135 != **(_DWORD **)(v134 + 8))
    {
      uint64_t v572 = sub_32A48(13);
      v573 = sub_7D5E8(1, *(void **)v572, *(void *)(v572 + 8));
      v574 = v573;
      if (v573 && os_log_type_enabled(v573, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7834;
        _os_log_impl(&def_1E50E8, v574, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }

      v575 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v575, "Precondition failure.");
    }
    sub_30264C(&theArray, *(void *)(a1 + 128), v135);
    v136 = (std::__shared_weak_count *)*((void *)&theArray + 1);
    if (!*((void *)&theArray + 1) || *(void *)(*((void *)&theArray + 1) + 8) == -1)
    {
      uint64_t v529 = sub_32A48(13);
      v530 = sub_7D5E8(1, *(void **)v529, *(void *)(v529 + 8));
      v531 = v530;
      if (v530 && os_log_type_enabled(v530, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].mScope = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 7836;
        _os_log_impl(&def_1E50E8, v531, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }

      v532 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v532, "Precondition failure.");
    }
    long long v624 = theArray;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&theArray + 1) + 16), 1uLL, memory_order_relaxed);
    sub_3028E8((uint64_t)&__dst, (unint64_t *)&v624, 1);
    buf[0].AudioObjectPropertySelector mSelector = 1986291046;
    *(_OWORD *)&buf[0].mElement = __dst;
    *(void *)&buf[2].AudioObjectPropertySelector mSelector = v631;
    if (v631)
    {
      *(void *)(*((void *)&__dst + 1) + 16) = &buf[1].mScope;
      *(void *)&long long __dst = (char *)&__dst + 8;
      *((void *)&__dst + 1) = 0;
      uint64_t v631 = 0;
    }
    else
    {
      *(void *)&buf[0].mElement = &buf[1].mScope;
    }
    sub_30BDD0((uint64_t)__p, &buf[0].mSelector, 1);
    sub_12B050((void *)v629.__r_.__value_.__l.__size_);
    v257 = *(void **)&__p[8];
    std::string v629 = *(std::string *)__p;
    if (*(void *)&__p[16])
    {
      *(void *)(*(void *)&__p[8] + 16) = &v629.__r_.__value_.__l.__size_;
      *(void *)std::string __p = &__p[8];
      *(void *)&__p[8] = 0;
      *(void *)&__p[16] = 0;
      v257 = 0;
    }
    else
    {
      v629.__r_.__value_.__r.__words[0] = (std::string::size_type)&v629.__r_.__value_.__l.__size_;
    }
    sub_12B050(v257);
    sub_10E118(*(void **)&buf[1].mScope);
    sub_10E118(*((void **)&__dst + 1));
    if (*((void *)&v624 + 1)) {
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v624 + 1));
    }
    std::__shared_weak_count::__release_weak(v136);
  }
  *(void *)&buf[2].AudioObjectPropertySelector mSelector = 0;
  int v258 = operator new(0x20uLL);
  *int v258 = off_6334A8;
  v258[1] = a1;
  v258[2] = &v614;
  v258[3] = &v629;
  *(void *)&buf[2].AudioObjectPropertySelector mSelector = v258;
  sub_306D48((uint64_t)&__dst, a1, (uint64_t)buf);
  sub_307370(buf);
  CFDictionaryRef v259 = (const __CFDictionary *)*((void *)&__dst + 1);
  if (!*((void *)&__dst + 1))
  {
    uint64_t v536 = sub_32A48(13);
    v537 = sub_7D5E8(1, *(void **)v536, *(void *)(v536 + 8));
    v538 = v537;
    if (v537 && os_log_type_enabled(v537, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 7847;
      _os_log_impl(&def_1E50E8, v538, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    v539 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v539, "Postcondition failure.");
  }
  sub_21C8C(&v624, "  ");
  sub_16A67C((uint64_t *)&theArray, v259, 2, (const void **)&v624);
  if (SHIBYTE(v625) < 0) {
    operator delete((void *)v624);
  }
  v260 = *(id *)sub_32A48(2);
  uint64_t v261 = v260;
  if (v260 && os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 7849;
    *(_WORD *)&__p[18] = 2080;
    *(void *)&__p[20] = "VAD Deletion";
    _os_log_impl(&def_1E50E8, v261, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change completed [ %s ]. Route description:", __p, 0x1Cu);
  }

  for (uint64_t m = *((void *)&theArray + 1); (long long *)m != &theArray; uint64_t m = *(void *)(m + 8))
  {
    std::string v263 = *(id *)sub_32A48(2);
    v264 = v263;
    if (v263 && os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
    {
      long long v265 = (void *)(m + 16);
      if (*(char *)(m + 39) < 0) {
        long long v265 = (void *)*v265;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 7849;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v265;
      _os_log_impl(&def_1E50E8, v264, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __p, 0x1Cu);
    }
  }
  sub_16A560(&theArray);
  uint64_t v266 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v266) {
    sub_307DE4(v266);
  }
  __int16 v267 = (const void *)*((void *)&__dst + 1);
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)*((void *)&__dst + 1);
  LOWORD(v616) = v631;
  if ((_BYTE)v631 && *((void *)&__dst + 1)) {
    CFRetain(*((CFTypeRef *)&__dst + 1));
  }
  sub_80594((uint64_t)&__dst + 8);
  sub_12B050((void *)v629.__r_.__value_.__l.__size_);
  sub_463E0(*(void **)&v633[8]);
  *((_DWORD *)a6 + 6) = 8;
  if (v267)
  {
    CFRetain(v267);
    CFMutableDictionaryRef v268 = theDict;
  }
  else
  {
    CFMutableDictionaryRef v268 = 0;
  }
  *(void *)a6[2] = v268;
  sub_80594((uint64_t)&theDict);
  sub_49A90(&v622);
LABEL_808:
  uint64_t result = v613;
  if (v613)
  {
    sub_3BCAC(v613);
    operator delete();
  }
  return result;
}

void sub_1E814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned char *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t buf)
{
  __cxa_guard_abort(&qword_64BD58);
  AudioStreamBasicDescription buf = (uint64_t)&STACK[0x260];
  sub_217F8((void ***)&buf);
  sub_80594((uint64_t)&a44);
  sub_80594((uint64_t)&STACK[0x220]);
  sub_463E0(*(void **)(v47 - 224));
  sub_10C7E4(&a34);
  _Unwind_Resume(a1);
}

void sub_1FD7C(uint64_t a1, const __CFDictionary **a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFBooleanRef v4 = (const __CFBoolean *)sub_2080C(*a2, "session going active");
  if (v4)
  {
    LOWORD(v4) = sub_20610(v4);
    int v5 = BYTE1(v4);
  }
  else
  {
    int v5 = 0;
  }
  unsigned int v6 = v4 | (v5 << 8);
  if (v6 <= 0x100) {
    LOBYTE(v6) = 0;
  }
  *(unsigned char *)a1 = v6 != 0;
  CFDictionaryRef v7 = *a2;
  if (!*a2)
  {
    unsigned int v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"session active", 14, 0x8000100u, 0);
  if (!v8)
  {
    int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v7, v8);
  CFRelease(v8);
  if (Value)
  {
    __int16 v10 = sub_20610(Value);
    int v11 = HIBYTE(v10);
  }
  else
  {
    int v11 = 0;
    LOBYTE(v10) = 0;
  }
  unsigned int v15 = v10 | (v11 << 8);
  if (v15 <= 0x100) {
    LOBYTE(v15) = 0;
  }
  *(unsigned char *)(a1 + 1) = v15 != 0;
  CFDictionaryRef v16 = *a2;
  if (!*a2)
  {
    char v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
  }
  CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"session input running", 21, 0x8000100u, 0);
  if (!v17)
  {
    id v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
  }
  CFBooleanRef v18 = (const __CFBoolean *)CFDictionaryGetValue(v16, v17);
  CFRelease(v17);
  if (v18)
  {
    __int16 v19 = sub_20610(v18);
    int v20 = HIBYTE(v19);
  }
  else
  {
    int v20 = 0;
    LOBYTE(v19) = 0;
  }
  unsigned int v23 = v19 | (v20 << 8);
  if (v23 <= 0x100) {
    LOBYTE(v23) = 0;
  }
  *(unsigned char *)(a1 + 2) = v23 != 0;
  if (!*a2)
  {
    unint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }
  CFBooleanRef v24 = (const __CFBoolean *)sub_20714(*a2, "session output running");
  if (v24)
  {
    LOWORD(v24) = sub_20610(v24);
    int v25 = BYTE1(v24);
  }
  else
  {
    int v25 = 0;
  }
  unsigned int v26 = v24 | (v25 << 8);
  if (v26 <= 0x100) {
    LOBYTE(v26) = 0;
  }
  *(unsigned char *)(a1 + 3) = v26 != 0;
  CFDictionaryRef v27 = *a2;
  if (!*a2)
  {
    double v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
  }
  CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)"session app state", 17, 0x8000100u, 0);
  if (!v28)
  {
    AudioObjectPropertyElement v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
  }
  CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, v28);
  CFRelease(v28);
  if (v29)
  {
    CFNumberRef v30 = sub_22314(v29);
    int v31 = 0;
    if ((unint64_t)v30 > 0x100000000) {
      int v31 = (int)v30;
    }
  }
  else
  {
    int v31 = 0;
  }
  *(_DWORD *)(a1 + 4) = v31;
  if (!*a2)
  {
    unint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
  }
  CFArrayRef v35 = (const __CFArray *)sub_2080C(*a2, "session reporter IDs");
  if (v35)
  {
    sub_225D8((uint64_t)&v51, v35);
    uint64_t v50 = 0;
    long long v49 = 0uLL;
    if (v53)
    {
      int v36 = (void *)v51;
      sub_4CAB0(&v49, (const void *)v51, *((uint64_t *)&v51 + 1), (uint64_t)(*((void *)&v51 + 1) - v51) >> 3);
      if (v53)
      {
        if (v36) {
          operator delete(v36);
        }
      }
    }
  }
  else
  {
    LOBYTE(v51) = 0;
    char v53 = 0;
    uint64_t v50 = 0;
    long long v49 = 0uLL;
  }
  __int16 v37 = *(void **)(a1 + 56);
  if (v37)
  {
    operator delete(v37);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = v49;
  *(void *)(a1 + 72) = v50;
  if (!*a2)
  {
    uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
  }
  uint64_t v38 = sub_20714(*a2, "session input VAD UIDs");
  if (v38)
  {
    uint64_t v39 = v38;
    CFRetain(v38);
    CFTypeID v40 = CFGetTypeID(v39);
    if (v40 == CFArrayGetTypeID())
    {
      *(void *)&long long v49 = v39;
      BYTE8(v49) = 1;
      CFRetain(v39);
      sub_206D8((uint64_t)&v49);
      sub_20918((uint64_t *)&v51, v39);
      char v41 = 0;
      goto LABEL_57;
    }
    CFRelease(v39);
  }
  LOBYTE(v49) = 0;
  BYTE8(v49) = 0;
  sub_206D8((uint64_t)&v49);
  uint64_t v39 = 0;
  uint64_t v52 = 0;
  char v41 = 1;
  long long v51 = 0uLL;
LABEL_57:
  sub_2069C((uint64_t *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = v51;
  *(void *)(a1 + 24) = v52;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  *(void *)&long long v49 = &v51;
  sub_217F8((void ***)&v49);
  if ((v41 & 1) == 0) {
    CFRelease(v39);
  }
  if (!*a2)
  {
    uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
  }
  uint64_t v42 = sub_21F8C(*a2, "session output VAD UIDs");
  if (v42)
  {
    uint64_t v43 = v42;
    CFRetain(v42);
    CFTypeID v44 = CFGetTypeID(v43);
    if (v44 == CFArrayGetTypeID())
    {
      *(void *)&long long v49 = v43;
      BYTE8(v49) = 1;
      CFRetain(v43);
      sub_206D8((uint64_t)&v49);
      sub_20918((uint64_t *)&v51, v43);
      char v45 = 0;
      goto LABEL_65;
    }
    CFRelease(v43);
  }
  LOBYTE(v49) = 0;
  BYTE8(v49) = 0;
  sub_206D8((uint64_t)&v49);
  uint64_t v43 = 0;
  uint64_t v52 = 0;
  char v45 = 1;
  long long v51 = 0uLL;
LABEL_65:
  sub_2069C((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = v51;
  *(void *)(a1 + 48) = v52;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  *(void *)&long long v49 = &v51;
  sub_217F8((void ***)&v49);
  if ((v45 & 1) == 0) {
    CFRelease(v43);
  }
}

void sub_2058C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_205D4(_Unwind_Exception *a1)
{
  sub_7E9D4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20610(const __CFBoolean *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    LOBYTE(v3) = CFBooleanGetValue(a1) != 0;
    int v4 = 1;
  }
  else
  {
    CFTypeID v5 = CFNumberGetTypeID();
    if (v5 == CFGetTypeID(a1))
    {
      __int16 v3 = sub_6CC7C(a1);
      int v4 = HIBYTE(v3);
    }
    else
    {
      LOBYTE(v3) = 0;
      int v4 = 0;
    }
  }
  return v3 | (v4 << 8);
}

void sub_2069C(uint64_t *a1)
{
  if (*a1)
  {
    sub_2184C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_206D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    size_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

const void *sub_20714(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFBooleanRef Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_207C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

const void *sub_2080C(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    CFBooleanRef Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_208D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_20918(uint64_t *a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  int Count = CFArrayGetCount((CFArrayRef)a2);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_20CF8(a1, Count);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, i);
      sub_20C54((uint64_t)__p, ValueAtIndex);
      unint64_t v9 = a1[1];
      unint64_t v8 = a1[2];
      if (v9 >= v8)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *a1) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        v23[4] = a1 + 2;
        if (v14) {
          unint64_t v14 = (unint64_t)sub_21974(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = v14 + 24 * v11;
        v23[0] = v14;
        v23[1] = v16;
        v23[3] = v14 + 24 * v15;
        long long v17 = *(_OWORD *)__p;
        *(void *)(v16 + 16) = v22;
        *(_OWORD *)unint64_t v16 = v17;
        __p[1] = 0;
        uint64_t v22 = 0;
        __p[0] = 0;
        v23[2] = v16 + 24;
        sub_20D9C(a1, v23);
        uint64_t v18 = a1[1];
        sub_20E50((uint64_t)v23);
        int v19 = SHIBYTE(v22);
        a1[1] = v18;
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)__p;
        *(void *)(v9 + 16) = v22;
        *(_OWORD *)unint64_t v9 = v10;
        a1[1] = v9 + 24;
      }
    }
  }
}

void sub_20AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void *sub_20B40(uint64_t a1, CFStringRef theString)
{
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    return sub_21C8C((void *)a1, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(theString);
    CFIndex maxBufLen = 0;
    v10.location = 0;
    v10.length = Length;
    CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    sub_65D94((void *)a1, maxBufLen, 0);
    if (*(char *)(a1 + 23) >= 0) {
      CFDictionaryRef v7 = (UInt8 *)a1;
    }
    else {
      CFDictionaryRef v7 = *(UInt8 **)a1;
    }
    v11.location = 0;
    v11.length = Length;
    return (void *)CFStringGetBytes(theString, v11, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
  }
}

void sub_20C38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20C54(uint64_t a1, const __CFString *a2)
{
  if (!a2 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }

  return sub_20B40(a1, a2);
}

void sub_20CE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20CF8(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_60548();
    }
    size_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_21974(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    sub_20D9C(v2, v5);
    return (uint64_t *)sub_20E50((uint64_t)v5);
  }
  return result;
}

uint64_t sub_20D9C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20E14((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 24)
  {
    long long v8 = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
    *(void *)(a3 - 24) = 0;
  }
  return result;
}

uint64_t sub_20E50(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  size_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      size_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20EB4(uint64_t a1, unsigned __int8 *a2)
{
  memset(buf, 0, 24);
  sub_2189C((char *)buf, *((long long **)a2 + 1), *((long long **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  uint64_t v4 = (uint64_t **)(a1 + 144);
  uint64_t v5 = sub_219BC(*(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t **)(a1 + 144));
  __p[0] = buf;
  sub_217F8((void ***)__p);
  if (!v5)
  {
    uint64_t v44 = sub_32A48(13);
    char v45 = sub_7D5E8(1, *(void **)v44, *(void *)(v44 + 8));
    unint64_t v46 = v45;
    if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&AudioObjectPropertyAddress buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7909;
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [inputVAD is NULL]: \"No input VAD\"", buf, 0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No input VAD");
  }
  memset(buf, 0, 24);
  sub_2189C((char *)buf, *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  uint64_t v6 = sub_219BC(*(uint64_t *)buf, *(uint64_t *)&buf[8], v4);
  __p[0] = buf;
  sub_217F8((void ***)__p);
  if (!v6)
  {
    uint64_t v48 = sub_32A48(13);
    long long v49 = sub_7D5E8(1, *(void **)v48, *(void *)(v48 + 8));
    uint64_t v50 = v49;
    if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&AudioObjectPropertyAddress buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7912;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [outputVAD is NULL]: \"No output VAD\"", buf, 0x12u);
    }

    long long v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "No output VAD");
  }
  uint64_t v7 = sub_32A48(2);
  if (*(unsigned char *)(v7 + 8))
  {
    id v8 = *(id *)v7;
    if (v8)
    {
      unint64_t v9 = v8;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        sub_21B7C(__p, *(CFStringRef *)(v5 + 592));
        CFRange v10 = v56 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&AudioObjectPropertyAddress buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7914;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v10;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found input VAD: %s", buf, 0x1Cu);
        if (SHIBYTE(v56) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v11 = sub_32A48(2);
  if (*(unsigned char *)(v11 + 8))
  {
    id v12 = *(id *)v11;
    if (v12)
    {
      unint64_t v13 = v12;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        sub_21B7C(__p, *(CFStringRef *)(v6 + 592));
        unint64_t v14 = v56 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&AudioObjectPropertyAddress buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7915;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found output VAD: %s", buf, 0x1Cu);
        if (SHIBYTE(v56) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v15 = sub_32A48(2);
  if (*(unsigned char *)(v15 + 8))
  {
    id v16 = *(id *)v15;
    if (v16)
    {
      long long v17 = v16;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        memset(&v52, 0, sizeof(v52));
        std::string::append(&v52, "[ ", 2uLL);
        std::to_string(&v53, (*a2 | a2[1]) != 0);
        uint64_t v18 = std::string::insert(&v53, 0, "activating: ", 0xCuLL);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        int v20 = std::string::append(&v54, "; ", 2uLL);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        int64_t v56 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (v56 >= 0) {
          uint64_t v22 = __p;
        }
        else {
          uint64_t v22 = (void **)__p[0];
        }
        if (v56 >= 0) {
          std::string::size_type v23 = HIBYTE(v56);
        }
        else {
          std::string::size_type v23 = (std::string::size_type)__p[1];
        }
        std::string::append(&v52, (const std::string::value_type *)v22, v23);
        if (SHIBYTE(v56) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        std::to_string(&v53, a2[2]);
        CFBooleanRef v24 = std::string::insert(&v53, 0, "input IO: ", 0xAuLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        unsigned int v26 = std::string::append(&v54, "; ", 2uLL);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        int64_t v56 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (v56 >= 0) {
          CFStringRef v28 = __p;
        }
        else {
          CFStringRef v28 = (void **)__p[0];
        }
        if (v56 >= 0) {
          std::string::size_type v29 = HIBYTE(v56);
        }
        else {
          std::string::size_type v29 = (std::string::size_type)__p[1];
        }
        std::string::append(&v52, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v56) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        std::to_string(&v53, a2[3]);
        CFNumberRef v30 = std::string::insert(&v53, 0, "output IO: ", 0xBuLL);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        unint64_t v32 = std::string::append(&v54, "; ", 2uLL);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        int64_t v56 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (v56 >= 0) {
          AudioObjectPropertyElement v34 = __p;
        }
        else {
          AudioObjectPropertyElement v34 = (void **)__p[0];
        }
        if (v56 >= 0) {
          std::string::size_type v35 = HIBYTE(v56);
        }
        else {
          std::string::size_type v35 = (std::string::size_type)__p[1];
        }
        std::string::append(&v52, (const std::string::value_type *)v34, v35);
        if (SHIBYTE(v56) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        std::string::append(&v52, "IDs: { ", 7uLL);
        __p[0] = 0;
        __p[1] = 0;
        int64_t v56 = 0;
        sub_4CAB0(__p, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
        int v36 = __p[0];
        if (__p[1] != __p[0])
        {
          unint64_t v37 = 0;
          unint64_t v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v39 = v38 - 1;
          if (v38 <= 1) {
            int64_t v40 = 1;
          }
          else {
            int64_t v40 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          }
          do
          {
            std::to_string(&v54, v36[v37]);
            if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v41 = &v54;
            }
            else {
              char v41 = (std::string *)v54.__r_.__value_.__r.__words[0];
            }
            if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v54.__r_.__value_.__l.__size_;
            }
            std::string::append(&v52, (const std::string::value_type *)v41, size);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v54.__r_.__value_.__l.__data_);
            }
            if (v37 < v39) {
              std::string::append(&v52, ", ", 2uLL);
            }
            ++v37;
          }
          while (v40 != v37);
        }
        std::string::append(&v52, " } ]", 4uLL);
        if (v36) {
          operator delete(v36);
        }
        uint64_t v43 = &v52;
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v43 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&AudioObjectPropertyAddress buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7916;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v43;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session info: %s", buf, 0x1Cu);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_4C7EC(*(void *)(v5 + 1008), a2);
  if (v5 != v6) {
    sub_4C7EC(*(void *)(v6 + 1008), a2);
  }
}

void sub_216D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

void sub_217F8(void ***a1)
{
  size_t v2 = *a1;
  if (*v2)
  {
    sub_2184C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2184C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

char *sub_2189C(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21924(result, a4);
    uint64_t result = sub_21DCC((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_21904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_217F8(&a9);
  _Unwind_Resume(a1);
}

char *sub_21924(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_60548();
  }
  uint64_t result = (char *)sub_21974(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_21974(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_60560();
  }
  return operator new(24 * a1);
}

uint64_t sub_219BC(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (a1 == a2)
  {
    uint64_t v6 = a3[1];
    return sub_2EA964(1986291046, 0, *a3, v6);
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a3[1];
    while (1)
    {
      uint64_t v7 = *a3;
      if (*(char *)(v5 + 23) < 0)
      {
        sub_21E8C(v18, *(void **)v5, *(void *)(v5 + 8));
      }
      else
      {
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v5;
        uint64_t v19 = *(void *)(v5 + 16);
      }
      while (v7 != v6)
      {
        if (*v7)
        {
          sub_21B7C(&__p, *(CFStringRef *)(*v7 + 592));
          if ((v22 & 0x80u) == 0) {
            size_t v8 = v22;
          }
          else {
            size_t v8 = __n;
          }
          uint64_t v9 = (void *)HIBYTE(v19);
          if (v19 < 0) {
            uint64_t v9 = v18[1];
          }
          if ((void *)v8 == v9)
          {
            if (v19 >= 0) {
              uint64_t v10 = v18;
            }
            else {
              uint64_t v10 = (void **)v18[0];
            }
            if ((v22 & 0x80) != 0)
            {
              uint64_t v15 = __p;
              int v16 = memcmp(__p, v10, __n);
              operator delete(v15);
              if (!v16) {
                goto LABEL_32;
              }
            }
            else
            {
              if (!v22) {
                goto LABEL_32;
              }
              uint64_t v11 = 0;
              do
              {
                int v12 = *((unsigned __int8 *)&__p + v11);
                int v13 = *((unsigned __int8 *)v10 + v11);
              }
              while (v12 == v13 && v22 - 1 != v11++);
              if (v12 == v13) {
                goto LABEL_32;
              }
            }
          }
          else if ((v22 & 0x80) != 0)
          {
            operator delete(__p);
          }
        }
        ++v7;
      }
      uint64_t v7 = v6;
LABEL_32:
      if (SHIBYTE(v19) < 0) {
        operator delete(v18[0]);
      }
      uint64_t v6 = a3[1];
      if (v7 != v6)
      {
        uint64_t result = *v7;
        if (*v7) {
          break;
        }
      }
      v5 += 24;
      if (v5 == a2) {
        return sub_2EA964(1986291046, 0, *a3, v6);
      }
    }
  }
  return result;
}

void sub_21B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21B7C(void *result, CFStringRef theString)
{
  uint64_t v2 = result;
  if (theString
    && (CFIndex v6 = 0,
        v7.length = CFStringGetLength(theString),
        v7.location = 0,
        uint64_t result = (void *)CFStringGetBytes(theString, v7, 0x8000100u, 0, 0, 0, 0x7FFFFFFFLL, &v6),
        v6))
  {
    LODWORD(v6) = v6 + 1;
    __chkstk_darwin(result);
    uint64_t v5 = (UInt8 *)&v6 - ((v4 + 15) & 0x1FFFFFFF0);
    sub_21D40(theString, v5, &v6);
    return sub_21C8C(v2, (char *)v5);
  }
  else
  {
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  return result;
}

void *sub_21C8C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_4F8C0();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    CFIndex v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    CFIndex v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

CFStringRef sub_21D40(const __CFString *result, UInt8 *a2, _DWORD *a3)
{
  if (*a3)
  {
    CFStringRef v5 = result;
    CFIndex usedBufLen = 0;
    v8.length = CFStringGetLength(result);
    v8.location = 0;
    uint64_t result = (const __CFString *)CFStringGetBytes(v5, v8, 0x8000100u, 0, 0, a2, (*a3 - 1), &usedBufLen);
    int v6 = usedBufLen;
    a2[usedBufLen] = 0;
    *a3 = v6 + 1;
  }
  return result;
}

char *sub_21DCC(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  size_t v4 = __dst;
  uint64_t v11 = __dst;
  int v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_21E8C(v4, *(void **)v6, *((void *)v6 + 1));
        size_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)size_t v4 = v7;
      }
      int v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      int v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_21F2C((uint64_t)v9);
  return v4;
}

void sub_21E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21E8C(unsigned char *__dst, void *__src, unint64_t a3)
{
  CFStringRef v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_4F8C0();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    CFRange v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *CFStringRef v5 = v8;
    CFStringRef v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_21F2C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

const void *sub_21F8C(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFBooleanRef Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_22040(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_22084(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return a1;
}

void sub_2210C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2213C(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_221D4(_Unwind_Exception *a1)
{
  CFTypeID v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

CFStringRef *sub_22210(CFStringRef *a1, char *a2)
{
  sub_21C8C(__p, a2);
  if ((v9 & 0x80u) == 0) {
    CFTypeID v3 = __p;
  }
  else {
    CFTypeID v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v4 = v9;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_222D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*v15) {
    CFRelease(*v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFNumberRef sub_22314(const __CFNumber *result)
{
  if (result)
  {
    CFNumberRef v1 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_22;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_35;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          uint64_t v11 = Value != 0;
          if (Value) {
            unsigned __int8 v12 = LOBYTE(valuePtr);
          }
          else {
            unsigned __int8 v12 = 0;
          }
          int v13 = -256;
          if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
            int v13 = 0;
          }
          uint64_t v8 = v11 << 32;
          LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
          int v7 = v5 & 0xFFFFFF00;
          break;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_22:
          if (v9) {
            uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
          }
          else {
            uint64_t v5 = 0;
          }
          goto LABEL_38;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_29:
          uint64_t v14 = *(float *)&valuePtr;
          goto LABEL_36;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_35;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_33;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_33:
          uint64_t v14 = LODWORD(valuePtr);
          goto LABEL_36;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_35:
          uint64_t v14 = valuePtr;
LABEL_36:
          uint64_t v5 = v14 | 0x100000000;
          if (!v10) {
            uint64_t v5 = 0;
          }
LABEL_38:
          int v7 = v5 & 0xFFFFFF00;
          uint64_t v8 = v5 & 0x100000000;
          break;
        default:
          int v7 = 0;
          uint64_t v8 = 0;
          LOBYTE(v5) = 0;
          break;
      }
      uint64_t v6 = v8 | v7 & 0xFFFFFF00;
      uint64_t v5 = v5;
    }
    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
      {
        uint64_t v5 = CFBooleanGetValue(v1);
        uint64_t v6 = 0x100000000;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    return (const __CFNumber *)(v6 | v5);
  }
  return result;
}

void sub_225D8(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    int Count = CFArrayGetCount(a2);
    unsigned __int8 v22 = 0;
    std::string::size_type v23 = 0;
    unint64_t v24 = 0;
    sub_22784((void **)&v22, Count);
    if (Count <= 0)
    {
      int v9 = v22;
      uint64_t v15 = v23;
      unint64_t v8 = v24;
LABEL_26:
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      CFIndex v6 = 0;
      uint64_t v7 = Count;
      unint64_t v8 = v24;
      int v9 = v22;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, v6);
        CFNumberRef v11 = sub_7E53C(ValueAtIndex);
        if (!v12) {
          break;
        }
        CFNumberRef v13 = v11;
        uint64_t v14 = v23;
        if ((unint64_t)v23 >= v8)
        {
          uint64_t v16 = (v23 - (char *)v9) >> 3;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61) {
            sub_60548();
          }
          if ((uint64_t)(v8 - (void)v9) >> 2 > v17) {
            unint64_t v17 = (uint64_t)(v8 - (void)v9) >> 2;
          }
          if (v8 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            unint64_t v18 = (unint64_t)sub_106EC(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          int v20 = (const __CFNumber **)(v18 + 8 * v16);
          *int v20 = v13;
          uint64_t v15 = (char *)(v20 + 1);
          while (v14 != (char *)v9)
          {
            CFNumberRef v21 = (const __CFNumber *)*((void *)v14 - 1);
            v14 -= 8;
            *--int v20 = v21;
          }
          unint64_t v8 = v18 + 8 * v19;
          if (v9) {
            operator delete(v9);
          }
          int v9 = v20;
        }
        else
        {
          *(void *)std::string::size_type v23 = v11;
          uint64_t v15 = v14 + 8;
        }
        std::string::size_type v23 = v15;
        if (++v6 == v7) {
          goto LABEL_26;
        }
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      if (v9) {
        operator delete(v9);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void sub_22784(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_60548();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    CFTypeID v4 = (char *)sub_106EC(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    unint64_t v8 = (char *)*a1;
    int v9 = (char *)a1[1];
    int v10 = v5;
    if (v9 != *a1)
    {
      int v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_2282C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(v1 + 360) + 16));
  if (v2) {
    sub_A7F4C(*(void *)(v1 + 360));
  }
  uint64_t v3 = *(void *)(v1 + 360);
  sub_1329C(&v37, *(void *)(v1 + 8), *(std::__shared_weak_count **)(v1 + 16));
  uint64_t v5 = v37;
  CFTypeID v4 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 40);
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v4;
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v5 = v37;
  }
  if (!v5) {
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 80))(v5)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 120))(v5, 1936748595) & 1) != 0)
  {
    *(_DWORD *)(v3 + 48) = 1685287015;
    uint64_t v7 = (int *)(v3 + 48);
    int v8 = 1836281975;
    goto LABEL_14;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 120))(v5, 1936748595))
  {
    *(_DWORD *)(v3 + 48) = 1936748595;
    uint64_t v7 = (int *)(v3 + 48);
    int v8 = 16;
  }
  else
  {
LABEL_13:
    *(_DWORD *)(v3 + 48) = 0;
    uint64_t v7 = (int *)(v3 + 48);
    int v8 = -1;
  }
LABEL_14:
  sub_21C8C(__p, "measuredWattsParameterID");
  unint64_t v39 = __p;
  *((_DWORD *)sub_231DC((uint64_t **)(v3 + 56), (void **)__p, &v39) + 14) = v8;
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  int v9 = *v7;
  sub_21C8C(__p, "modelledWattsParameterID");
  unint64_t v39 = __p;
  int v10 = sub_231DC((uint64_t **)(v3 + 56), (void **)__p, &v39);
  if (v9 == 1685287015) {
    int v11 = 1835298935;
  }
  else {
    int v11 = -1;
  }
  if (v9 == 1936748595) {
    int v11 = 15;
  }
  *((_DWORD *)v10 + 14) = v11;
  if (v43 < 0) {
    operator delete(*(void **)__p);
  }
  char v12 = *(std::__shared_weak_count **)(v3 + 40);
  if (v12)
  {
    CFNumberRef v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)(v3 + 32);
      if (v15)
      {
        uint64_t v16 = *(void **)(v3 + 56);
        if (v16 != (void *)(v3 + 64))
        {
          do
          {
            char v17 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v15 + 56))(v15, *(unsigned int *)(v3 + 48), *((unsigned int *)v16 + 14), 0);
            int v18 = *((_DWORD *)v16 + 14);
            *(void *)std::string __p = v16 + 4;
            uint64_t v19 = sub_23124((uint64_t **)(v3 + 56), (void **)v16 + 4, (long long **)__p);
            if (v17) {
              int v20 = v18;
            }
            else {
              int v20 = -1;
            }
            *((_DWORD *)v19 + 14) = v20;
            CFNumberRef v21 = (void *)v16[1];
            if (v21)
            {
              do
              {
                unsigned __int8 v22 = v21;
                CFNumberRef v21 = (void *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                unsigned __int8 v22 = (void *)v16[2];
                BOOL v23 = *v22 == (void)v16;
                uint64_t v16 = v22;
              }
              while (!v23);
            }
            uint64_t v16 = v22;
          }
          while (v22 != (void *)(v3 + 64));
        }
      }
      sub_4636C(v14);
    }
  }
  if (v38) {
    sub_4636C(v38);
  }
  uint64_t v24 = *(void *)(v1 + 360);
  unsigned __int8 v25 = atomic_load((unsigned __int8 *)(v24 + 16));
  BOOL v26 = (v25 & 1) == 0;
  uint64_t v27 = sub_32A48(13);
  if (!v26)
  {
    std::string::size_type v35 = *(NSObject **)v27;
    if (*(void *)v27 && os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "PowerLogManager.cpp";
      __int16 v41 = 1024;
      int v42 = 253;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"BeginPowerLogTracking()/EndPowerLogTracking() mismatch.\"", __p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BeginPowerLogTracking()/EndPowerLogTracking() mismatch.");
  }
  if (*(unsigned char *)(v27 + 8))
  {
    CFStringRef v28 = *(NSObject **)v27;
    if (*(void *)v27)
    {
      if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "PowerLogManager.cpp";
        __int16 v41 = 1024;
        int v42 = 255;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d BeginPowerLogTracking()", __p, 0x12u);
      }
    }
  }
  std::string::size_type v29 = *(void **)(v24 + 56);
  if (v29 != (void *)(v24 + 64))
  {
    do
    {
      if (*((_DWORD *)v29 + 14) != -1)
      {
        AudioObjectPropertyElement v34 = *(std::__shared_weak_count **)(v24 + 8);
        if (v34 && std::__shared_weak_count::lock(v34)) {
          operator new();
        }
        sub_5CABC();
      }
      CFNumberRef v30 = (void *)v29[1];
      if (v30)
      {
        do
        {
          long long v31 = v30;
          CFNumberRef v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          long long v31 = (void *)v29[2];
          BOOL v23 = *v31 == (void)v29;
          std::string::size_type v29 = v31;
        }
        while (!v23);
      }
      std::string::size_type v29 = v31;
    }
    while (v31 != (void *)(v24 + 64));
  }
  uint64_t v32 = sub_32A48(13);
  if (*(unsigned char *)(v32 + 8))
  {
    long long v33 = *(NSObject **)v32;
    if (*(void *)v32)
    {
      if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "PowerLogManager.cpp";
        __int16 v41 = 1024;
        int v42 = 262;
        _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d No power parameters to measure.", __p, 0x12u);
      }
    }
  }
}

void sub_2306C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_4636C(v24);
  if (a17) {
    sub_4636C(a17);
  }
  _Unwind_Resume(v25);
}

char *sub_23124(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v5 = (void **)sub_15DF8((uint64_t)a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x40uLL);
    int v8 = v6 + 32;
    int v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_21E8C(v8, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)int v8 = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    sub_46CA8(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_231C4(_Unwind_Exception *a1)
{
  sub_79970(0, v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_231DC(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t v5 = (void **)sub_15DF8((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *int v8 = 0;
    v8[1] = 0;
    void v8[2] = 0;
    *((_DWORD *)v6 + 14) = 0;
    sub_46CA8(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t sub_2326C(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 148)) {
    unsigned int v4 = 1768845428;
  }
  else {
    unsigned int v4 = 1869968496;
  }
  LODWORD(__p[0]) = v3;
  buf.AudioObjectPropertySelector mSelector = 1684498541;
  *(void *)&buf.mScope = v4;
  unint64_t v5 = sub_26DAC((AudioObjectID *)__p, &buf, 4u, &v17);
  *((void *)&v8 + 1) = v6;
  *(void *)&long long v8 = v5;
  uint64_t v7 = v8 >> 32;
  BOOL v9 = (v7 & 0xFF00000000) == 0 || v7 == 0;
  uint64_t v10 = !v9;
  if (v9)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(24);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, v17);
        if (v16 >= 0) {
          CFNumberRef v13 = __p;
        }
        else {
          CFNumberRef v13 = (void **)__p[0];
        }
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "DSPHALInterface.cpp";
        __int16 v19 = 1024;
        int v20 = 166;
        __int16 v21 = 2080;
        unsigned __int8 v22 = v13;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPHALInterface::HasDSPParameter(%s) = %u", (uint8_t *)&buf, 0x22u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v10;
}

uint64_t sub_23404(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

uint64_t sub_2340C(uint64_t a1, unsigned int a2, unsigned int a3, void *a4, uint64_t a5)
{
  unint64_t v10 = sub_23BA8(a2, a3);
  if (HIDWORD(v10))
  {
    uint64_t v18 = v10;
    if (sub_23B50(v10))
    {
      uint64_t v19 = *(void *)(a1 + 1160);
      if (!v19)
      {
        unsigned __int8 v22 = (os_log_t *)sub_32A48(13);
        __int16 v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_21E8C(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }
          else
          {
            *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 712);
            uint64_t v29 = *(void *)(a1 + 728);
          }
          int v24 = __dst;
          if (v29 < 0) {
            int v24 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          long long v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v32 = 1024;
          int v33 = 97;
          __int16 v34 = 2080;
          std::string::size_type v35 = v24;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL Speaker Protection is not available for DSP chain %s\"", buf, 0x1Cu);
          if (SHIBYTE(v29) < 0) {
            operator delete(__dst[0]);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }
      uint64_t v20 = *(void *)(v19 + 16);
      char v21 = *(unsigned char *)(v19 + 148);
      return sub_16410(v20, v21, v18, a4);
    }
    else
    {
      return sub_69CCC(a1, 0x64737067u, v18, (uint64_t)a4, a5);
    }
  }
  else
  {
    uint64_t v11 = (os_log_t *)sub_32A48(24);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, a2);
      int v13 = SHIBYTE(v29);
      uint64_t v14 = (void **)__dst[0];
      sub_2417C(__p, a3);
      uint64_t v15 = __dst;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v27 >= 0) {
        char v16 = __p;
      }
      else {
        char v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      long long v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v32 = 1024;
      int v33 = 108;
      __int16 v34 = 2080;
      std::string::size_type v35 = v15;
      __int16 v36 = 2080;
      uint64_t v37 = v16;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d TranslateToDSPGraphParameter failure for AU subtype %s as graph parameter %s", buf, 0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(__dst[0]);
      }
    }
    return 4294967246;
  }
}

void sub_2373C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_23770(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = sub_23BA8(a2, a3);
  if (HIDWORD(v8))
  {
    uint64_t v16 = v8;
    if (sub_23B50(v8))
    {
      uint64_t v17 = *(void *)(a1 + 1160);
      if (!v17)
      {
        uint64_t v18 = (os_log_t *)sub_32A48(13);
        uint64_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_21E8C(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }
          else
          {
            *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 712);
            uint64_t v25 = *(void *)(a1 + 728);
          }
          uint64_t v20 = __dst;
          if (v25 < 0) {
            uint64_t v20 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          char v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v28 = 1024;
          int v29 = 71;
          __int16 v30 = 2080;
          long long v31 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL Speaker Protection is not available for DSP chain %s\"", buf, 0x1Cu);
          if (SHIBYTE(v25) < 0) {
            operator delete(__dst[0]);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }
      return sub_2326C(v17, v16);
    }
    else
    {
      return sub_69D58(a1, 0x64737067u, v16, a4);
    }
  }
  else
  {
    BOOL v9 = (os_log_t *)sub_32A48(24);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, a2);
      int v11 = SHIBYTE(v25);
      uint64_t v12 = (void **)__dst[0];
      sub_2417C(__p, a3);
      int v13 = __dst;
      if (v11 < 0) {
        int v13 = v12;
      }
      if (v23 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v28 = 1024;
      int v29 = 82;
      __int16 v30 = 2080;
      long long v31 = v13;
      __int16 v32 = 2080;
      int v33 = v14;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d TranslateToDSPGraphParameter failure for AU subtype %s as graph parameter %s", buf, 0x26u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__dst[0]);
      }
    }
    return 0;
  }
}

void sub_23A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_23AC0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D1C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D1C8))
  {
    int v1 = sub_207A20();
    int v2 = sub_209AB8(v1);
    if (v2) {
      LOBYTE(v2) = _os_feature_enabled_impl();
    }
    byte_64D1C0 = v2;
    __cxa_guard_release(&qword_64D1C8);
  }
  return byte_64D1C0;
}

void sub_23B38(_Unwind_Exception *a1)
{
}

uint64_t sub_23B50(int a1)
{
  if (a1 <= 1836281974)
  {
    if (a1 != 1650550370)
    {
      int v1 = 1835298935;
      goto LABEL_6;
    }
    return sub_23AC0();
  }
  if (a1 == 1986358383) {
    return sub_23AC0();
  }
  int v1 = 1836281975;
LABEL_6:
  if (a1 == v1) {
    return sub_23AC0();
  }
  return 0;
}

uint64_t sub_23BA8(unsigned int a1, unsigned int a2)
{
  LOBYTE(v2) = a2;
  if (a1 == 1685287015)
  {
    unsigned int v3 = a2 & 0xFFFFFF00;
    uint64_t v4 = 0x100000000;
  }
  else
  {
    unint64_t v5 = sub_D8AD4((uint64_t)&unk_64A7A0, a1, a2);
    if (v5 == (uint64_t *)&unk_64A7A8)
    {
      uint64_t v4 = 0;
      LOBYTE(v2) = 0;
      unsigned int v3 = 0;
    }
    else
    {
      int v2 = *((_DWORD *)v5 + 9);
      unsigned int v3 = v2 & 0xFFFFFF00;
      uint64_t v4 = 0x100000000;
    }
  }
  return v4 | v3 | v2;
}

uint64_t sub_23C30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v11);
  uint64_t v4 = *(void *)(a1 + 128);
  for (uint64_t i = *(void *)(a1 + 136); v4 != i; v4 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v4 + 200))(v15);
    if ((v16 & 0x80u) == 0) {
      uint64_t v6 = v15;
    }
    else {
      uint64_t v6 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = v16;
    }
    else {
      uint64_t v7 = (uint64_t)v15[1];
    }
    sub_256E4(&v12, (uint64_t)v6, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)&v13[-1] + *(void *)(v12 - 24)));
    unint64_t v8 = std::locale::use_facet(&v17, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
  }
  sub_246E4(a2, (uint64_t)v13);
  *(void *)((char *)v11
  uint64_t v12 = v9;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_23E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5E32C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23EDC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v14);
  sub_2417C(__p, 0x64737067u);
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_256E4(&v15, (uint64_t)v4, v5);
  sub_256E4(&v15, (uint64_t)" ", 1);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_256E4(v6, (uint64_t)" ", 1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v7 == 1684234860) {
    unint64_t v8 = "dB";
  }
  else {
    unint64_t v8 = "Scalar";
  }
  if (v7 == 1684234860) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 6;
  }
  sub_256E4(v6, (uint64_t)v8, v9);
  sub_256E4(v6, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_246E4(a2, (uint64_t)v16);
  *(void *)((char *)v14
  uint64_t v15 = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_2414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_2417C(void *a1, unsigned int a2)
{
  sub_2440C((uint64_t)v9);
  if (a2 <= 0x7Fu)
  {
    if ((_DefaultRuneLocale.__runetype[a2] & 0x40000) == 0) {
      goto LABEL_18;
    }
  }
  else if (!__maskrune(a2, 0x40000uLL))
  {
    goto LABEL_18;
  }
  if (BYTE1(a2) <= 0x7Fu)
  {
    if ((_DefaultRuneLocale.__runetype[BYTE1(a2)] & 0x40000) == 0) {
      goto LABEL_18;
    }
  }
  else if (!__maskrune(BYTE1(a2), 0x40000uLL))
  {
    goto LABEL_18;
  }
  if (BYTE2(a2) <= 0x7Fu)
  {
    if ((_DefaultRuneLocale.__runetype[BYTE2(a2)] & 0x40000) == 0) {
      goto LABEL_18;
    }
  }
  else if (!__maskrune(BYTE2(a2), 0x40000uLL))
  {
    goto LABEL_18;
  }
  if ((a2 & 0x80000000) != 0) {
    __uint32_t v4 = __maskrune(HIBYTE(a2), 0x40000uLL);
  }
  else {
    __uint32_t v4 = _DefaultRuneLocale.__runetype[HIBYTE(a2)] & 0x40000;
  }
  if (v4)
  {
    __s[0] = HIBYTE(a2);
    __s[1] = BYTE2(a2);
    __s[2] = BYTE1(a2);
    __s[3] = a2;
    __s[4] = 0;
    size_t v5 = strlen(__s);
    sub_256E4(&v10, (uint64_t)__s, v5);
    goto LABEL_19;
  }
LABEL_18:
  std::ostream::operator<<();
LABEL_19:
  sub_246E4(a1, (uint64_t)v11);
  *(void *)((char *)v9
  uint64_t v10 = v6;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_243F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5E32C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2440C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  size_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_246BC(_Unwind_Exception *a1)
{
}

uint64_t sub_246E4(void *a1, uint64_t a2)
{
  uint64_t result = sub_24788(a2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_4F8C0();
  }
  size_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a1[1] = v6;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v9;
    a1 = v9;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a1, v5, v6);
LABEL_9:
  *((unsigned char *)a1 + v6) = 0;
  return result;
}

uint64_t sub_24788(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_247D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_247DC(void *a1, uint64_t a2)
{
  sub_3D04((uint64_t)&v58);
  std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
  unint64_t v3 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&v57);
  std::ostream::put();
  std::ostream::flush();
  sub_256E4(&v58, (uint64_t)"================", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
  unint64_t v4 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v57);
  std::ostream::put();
  std::ostream::flush();
  sub_256E4(&v58, (uint64_t)"Chain Name:", 11);
  size_t v5 = (const char *)(a2 + 712);
  if (*(char *)(a2 + 735) < 0) {
    size_t v5 = *(const char **)v5;
  }
  size_t v6 = strlen(v5);
  sub_256E4(&v58, (uint64_t)v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
  uint64_t v7 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)&v57);
  std::ostream::put();
  std::ostream::flush();
  sub_256E4(&v58, (uint64_t)"Before processing reformatting:", 31);
  uint64_t v8 = *(void *)(a2 + 584);
  if (v8) {
    uint64_t v9 = "";
  }
  else {
    uint64_t v9 = " unneeded";
  }
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 9;
  }
  sub_256E4(&v58, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
  int v11 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)&v57);
  std::ostream::put();
  std::ostream::flush();
  if (*(void *)(a2 + 584))
  {
    sub_256E4(&v58, (uint64_t)"    from: ", 10);
    sub_259A4(&v57, a2 + 504);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v12 = &v57;
    }
    else {
      char v12 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    size_t v13 = strlen((const char *)v12);
    sub_256E4(&v58, (uint64_t)v12, v13);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    char v14 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    sub_256E4(&v58, (uint64_t)"    to  : ", 10);
    sub_259A4(&v57, a2 + 544);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v57;
    }
    else {
      uint64_t v15 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    size_t v16 = strlen((const char *)v15);
    sub_256E4(&v58, (uint64_t)v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    char v17 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  v55.__locale_ = (std::locale::__imp *)(a2 + 48);
  char v56 = 1;
  sub_39ECC(a2 + 48);
  sub_256E4(&v58, (uint64_t)"DSPChain ", 9);
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  if (v18 == v19) {
    uint64_t v20 = "is empty.";
  }
  else {
    uint64_t v20 = "items:";
  }
  if (v18 == v19) {
    uint64_t v21 = 9;
  }
  else {
    uint64_t v21 = 6;
  }
  sub_256E4(&v58, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
  unsigned __int8 v22 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)&v57);
  std::ostream::put();
  std::ostream::flush();
  if (*(void *)(a2 + 32) != *(void *)(a2 + 24))
  {
    uint64_t v23 = 0;
    unsigned int v24 = 1;
    do
    {
      sub_256E4(&v58, (uint64_t)"    ", 4);
      uint64_t v25 = (void *)std::ostream::operator<<();
      sub_256E4(v25, (uint64_t)": DSPProcessorType ", 19);
      uint64_t v26 = *(void *)(*(void *)(a2 + 24) + 24 * v23 + 8);
      unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 152))(v26);
      sub_2417C(&v57, v27);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v28 = &v57;
      }
      else {
        __int16 v28 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      size_t v29 = strlen((const char *)v28);
      sub_256E4(v25, (uint64_t)v28, v29);
      sub_256E4(v25, (uint64_t)" InstanceID ", 12);
      uint64_t v30 = *(void *)(*(void *)(a2 + 24) + 24 * v23 + 8);
      (*(void (**)(uint64_t))(*(void *)v30 + 144))(v30);
      long long v31 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
      __int16 v32 = std::locale::use_facet(&v61, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale(&v61);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = v24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3) > v24++);
  }
  sub_3A3E8((uint64_t)&v55);
  sub_256E4(&v58, (uint64_t)"After processing reformatting:", 30);
  if (*(void *)(a2 + 672)) {
    __int16 v34 = "";
  }
  else {
    __int16 v34 = " unneeded";
  }
  if (*(void *)(a2 + 672)) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = 9;
  }
  sub_256E4(&v58, (uint64_t)v34, v35);
  std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
  __int16 v36 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale((std::locale *)&v57);
  std::ostream::put();
  std::ostream::flush();
  if (*(void *)(a2 + 672))
  {
    sub_256E4(&v58, (uint64_t)"    from: ", 10);
    sub_259A4(&v57, a2 + 592);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &v57;
    }
    else {
      uint64_t v37 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    size_t v38 = strlen((const char *)v37);
    sub_256E4(&v58, (uint64_t)v37, v38);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    unint64_t v39 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    sub_256E4(&v58, (uint64_t)"    to  : ", 10);
    sub_259A4(&v57, a2 + 632);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v40 = &v57;
    }
    else {
      int64_t v40 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    size_t v41 = strlen((const char *)v40);
    sub_256E4(&v58, (uint64_t)v40, v41);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    int v42 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v43 = *(void *)(a2 + 1040);
  if (v43 && *(void *)(v43 + 136) != *(void *)(v43 + 128))
  {
    sub_256E4(&v58, (uint64_t)"Software Volume Commands: ", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    uint64_t v44 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 1040) + 200))(&v57);
    char v45 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v57
        : (std::string *)v57.__r_.__value_.__r.__words[0];
    uint64_t v46 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v57.__r_.__value_.__r.__words[2])
        : v57.__r_.__value_.__l.__size_;
    sub_256E4(&v58, (uint64_t)v45, v46);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    uint64_t v47 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)(a2 + 1056))
  {
    sub_256E4(&v58, (uint64_t)"Thermal Volume Commands: ", 25);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    uint64_t v48 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 1056) + 200))(&v57);
    long long v49 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v57
        : (std::string *)v57.__r_.__value_.__r.__words[0];
    uint64_t v50 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v57.__r_.__value_.__r.__words[2])
        : v57.__r_.__value_.__l.__size_;
    sub_256E4(&v58, (uint64_t)v49, v50);
    std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
    long long v51 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  sub_256E4(&v58, (uint64_t)"================", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)&v59[-1] + *(void *)(v58 - 24)));
  std::string v52 = std::locale::use_facet((const std::locale *)&v57, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale((std::locale *)&v57);
  std::ostream::put();
  std::ostream::flush();
  sub_246E4(a1, (uint64_t)v59);
  if (v60 < 0) {
    operator delete((void *)v59[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_255E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
}

void *sub_256E4(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v20)
  {
    size_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_23;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    int64_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      sub_65D94(&__b, v16, (char)v9);
      char v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v17, v16);
      if (v22 < 0) {
        operator delete(__b.__locale_);
      }
      if (v18 != v16) {
        goto LABEL_23;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_25924(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x25900);
}

void sub_25990(_Unwind_Exception *a1)
{
}

std::string *sub_259A4(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a1, 0x40uLL);
  std::to_string(&v44, *(_DWORD *)(a2 + 32));
  unint64_t v4 = std::string::insert(&v44, 0, "[ ", 2uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  size_t v6 = std::string::append(&v45, "/", 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v43, *(double *)a2);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v43;
  }
  else {
    int v8 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v43.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v46, (const std::string::value_type *)v8, size);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v50, "/", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v42, *(_DWORD *)(a2 + 28));
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v14 = &v42;
  }
  else {
    BOOL v14 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v42.__r_.__value_.__l.__size_;
  }
  int64_t v16 = std::string::append(&v47, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t v49 = v16->__r_.__value_.__r.__words[2];
  long long v48 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0) {
    uint64_t v18 = (const std::string::value_type *)&v48;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)v48;
  }
  if (v49 >= 0) {
    std::string::size_type v19 = HIBYTE(v49);
  }
  else {
    std::string::size_type v19 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v18, v19);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  unsigned int v20 = *(_DWORD *)(a2 + 8);
  if (v20 != 1819304813)
  {
    sub_2417C(&v47, v20);
    uint64_t v21 = std::string::insert(&v47, 0, "; fmt: ", 7uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v49 = v21->__r_.__value_.__r.__words[2];
    long long v48 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v49 >= 0) {
      uint64_t v23 = (const std::string::value_type *)&v48;
    }
    else {
      uint64_t v23 = (const std::string::value_type *)v48;
    }
    if (v49 >= 0) {
      std::string::size_type v24 = HIBYTE(v49);
    }
    else {
      std::string::size_type v24 = *((void *)&v48 + 1);
    }
    std::string::append(a1, v23, v24);
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
  snprintf((char *)&v50, 0x13uLL, "%p", (const void *)*(unsigned int *)(a2 + 12));
  sub_21C8C(&v47, (char *)&v50);
  uint64_t v25 = std::string::insert(&v47, 0, "; flags: ", 9uLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  int64_t v49 = v25->__r_.__value_.__r.__words[2];
  long long v48 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0) {
    unsigned int v27 = (const std::string::value_type *)&v48;
  }
  else {
    unsigned int v27 = (const std::string::value_type *)v48;
  }
  if (v49 >= 0) {
    std::string::size_type v28 = HIBYTE(v49);
  }
  else {
    std::string::size_type v28 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v27, v28);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::to_string(&v47, *(_DWORD *)(a2 + 16));
  size_t v29 = std::string::insert(&v47, 0, "; bpp: ", 7uLL);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  int64_t v49 = v29->__r_.__value_.__r.__words[2];
  long long v48 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0) {
    long long v31 = (const std::string::value_type *)&v48;
  }
  else {
    long long v31 = (const std::string::value_type *)v48;
  }
  if (v49 >= 0) {
    std::string::size_type v32 = HIBYTE(v49);
  }
  else {
    std::string::size_type v32 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v31, v32);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::to_string(&v47, *(_DWORD *)(a2 + 20));
  int v33 = std::string::insert(&v47, 0, "; fpp: ", 7uLL);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  int64_t v49 = v33->__r_.__value_.__r.__words[2];
  long long v48 = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0) {
    uint64_t v35 = (const std::string::value_type *)&v48;
  }
  else {
    uint64_t v35 = (const std::string::value_type *)v48;
  }
  if (v49 >= 0) {
    std::string::size_type v36 = HIBYTE(v49);
  }
  else {
    std::string::size_type v36 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v35, v36);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::to_string(&v47, *(_DWORD *)(a2 + 24));
  uint64_t v37 = std::string::insert(&v47, 0, "; Bpf: ", 7uLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t v49 = v37->__r_.__value_.__r.__words[2];
  long long v48 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0) {
    unint64_t v39 = (const std::string::value_type *)&v48;
  }
  else {
    unint64_t v39 = (const std::string::value_type *)v48;
  }
  if (v49 >= 0) {
    std::string::size_type v40 = HIBYTE(v49);
  }
  else {
    std::string::size_type v40 = *((void *)&v48 + 1);
  }
  std::string::append(a1, v39, v40);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_25EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v48 - 89) < 0) {
    operator delete(*(void **)(v48 - 112));
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_25FEC(caulk::concurrent::message *a1)
{
  std::string::size_type v40 = a1;
  uint64_t v37 = *((void *)a1 + 3);
  int v1 = *(unsigned int **)(v37 + 24);
  long long v38 = *(unsigned int **)(v37 + 32);
  if (v1 != v38)
  {
    uint64_t v2 = 0;
    uint64_t v39 = 0;
    while (1)
    {
      unsigned int v3 = *v1;
      sub_3A8A8();
      uint64_t inAddress = (uint64_t)&unk_65DB00;
      LOBYTE(inAddress_8) = 1;
      sub_39ECC((uint64_t)&unk_65DB00);
      unint64_t v4 = sub_3AACC(v3);
      if (!v4)
      {
        long long v30 = (os_log_t *)sub_32A48(13);
        long long v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].mScope = "HP_ObjectManager.h";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 51;
          _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"ExecuteSynchronized: no object with given ID\"", (uint8_t *)buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 560947818;
      }
      uint64_t v5 = v4[3];
      sub_3A3E8((uint64_t)&inAddress);
      uint64_t v41 = v5 + 8;
      char v42 = 1;
      sub_39ECC(v5 + 8);
      LODWORD(inAddress) = v3;
      strcpy((char *)buf, "niogbolg");
      BYTE1(buf[0].mElement) = 0;
      HIWORD(buf[0].mElement) = 0;
      unint64_t v6 = sub_26DAC((AudioObjectID *)&inAddress, buf, 0, 0);
      int v8 = v6;
      if (v6 || !v7)
      {
        int v33 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v33 = &off_6414D8;
        uint64_t v33[2] = v8;
      }
      v39 += HIDWORD(v6);
      if (HIDWORD(v6)) {
        break;
      }
LABEL_58:
      sub_3A3E8((uint64_t)&v41);
      if (++v1 == v38) {
        goto LABEL_68;
      }
    }
    AudioObjectID v47 = v3;
    uint64_t inAddress = 0x676C6F6264616370;
    LODWORD(inAddress_8) = 0;
    sub_58A0((uint64_t)buf, &v47, (AudioObjectPropertyAddress *)&inAddress);
    if (buf[0].mSelector || !(_BYTE)v49)
    {
      long long v34 = __cxa_allocate_exception(0x10uLL);
      AudioObjectPropertySelector mSelector = buf[0].mSelector;
      *(void *)long long v34 = &off_6414D8;
      v34[2] = mSelector;
    }
    sub_5505C(&v45, *(CFTypeRef *)&buf[1].mScope);
    std::string v45 = &off_637B38;
    if ((_BYTE)v49) {
      sub_49A90(&buf[0].mElement);
    }
    for (unsigned int i = 0; ; unsigned int i = v10 + 1)
    {
      if ((unint64_t)sub_4C694(theArray) <= i)
      {
        sub_49A90(&v45);
        goto LABEL_58;
      }
      unsigned int v10 = i;
      uint64_t inAddress = (uint64_t)off_640A60;
      CFTypeRef inAddress_8 = 0;
      if (!theArray)
      {
LABEL_22:
        CFTypeRef v12 = 0;
        goto LABEL_23;
      }
      if (CFArrayGetCount(theArray) > i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        CFTypeRef v12 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          CFTypeRef v13 = inAddress_8;
          CFTypeRef inAddress_8 = v12;
          if (!v13) {
            goto LABEL_21;
          }
        }
        else
        {
          CFTypeRef v13 = inAddress_8;
          CFTypeRef inAddress_8 = 0;
          if (!v13) {
            goto LABEL_22;
          }
        }
        CFRelease(v13);
      }
      CFTypeRef v12 = inAddress_8;
      if (inAddress_8) {
LABEL_21:
      }
        CFTypeRef v12 = (CFTypeRef)CFGetTypeID(v12);
LABEL_23:
      if (v12 == (CFTypeRef)CFNumberGetTypeID())
      {
        CFNumberRef v14 = (const __CFNumber *)inAddress_8;
        if (inAddress_8) {
          CFRetain(inAddress_8);
        }
        *(void *)&buf[0].mElement = v14;
      }
      else
      {
        CFNumberRef v14 = 0;
        *(void *)&buf[0].mElement = 0;
      }
      *(void *)&buf[0].AudioObjectPropertySelector mSelector = &off_637B18;
      AudioObjectPropertyElement v15 = sub_517B0(v14);
      sub_49A90(buf);
      sub_49A90(&inAddress);
      LODWORD(inAddress) = v15;
      strcpy((char *)buf, "pytpbolg");
      BYTE1(buf[0].mElement) = 0;
      HIWORD(buf[0].mElement) = 0;
      unint64_t v17 = sub_26DAC((AudioObjectID *)&inAddress, buf, 0, 0);
      if (v17 || !v16)
      {
        size_t v29 = __cxa_allocate_exception(0x10uLL);
        *(void *)size_t v29 = &off_6414D8;
        v29[2] = v17;
      }
      uint64_t v18 = sub_32A48(1);
      uint64_t v19 = sub_32A48(31);
      char v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = HIDWORD(v17);
      *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0x100000002;
      uint64_t v23 = *(void *)(v18 + 8);
      while (1)
      {
        uint64_t v24 = *((int *)&buf[0].mSelector + v21);
        char v25 = v20;
        if (((v23 & v24) != 0) != ((*(void *)(v19 + 8) & v24) != 0)) {
          break;
        }
        char v20 = 1;
        uint64_t v21 = 1;
        if (v25)
        {
          if ((v23 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_38;
        }
      }
      if ((v23 & v24) == 0) {
        uint64_t v18 = v19;
      }
      if (*(void *)(v18 + 8))
      {
LABEL_38:
        long long v26 = *(NSObject **)v18;
        if (*(void *)v18 && os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf[0].mScope = "VirtualAudio_IONotificationManager.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 138;
          HIWORD(buf[1].mScope) = 1024;
          buf[1].mElement = v15;
          __int16 v49 = 1024;
          LODWORD(v50) = v22;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Active port %u, type %u", (uint8_t *)buf, 0x1Eu);
        }
      }
LABEL_41:
      if ((int)v22 <= 1886216808)
      {
        if (v22 == 1885892674)
        {
          BOOL v28 = !sub_89D24(v15);
          uint64_t v27 = 4;
        }
        else
        {
          if (v22 != 1885892706) {
            continue;
          }
          BOOL v28 = !sub_89D24(v15);
          uint64_t v27 = 8;
        }
        if (v28) {
          uint64_t v27 = 0;
        }
      }
      else
      {
        switch(v22)
        {
          case 0x706D6269:
            uint64_t v27 = 1;
            break;
          case 0x70726563:
            uint64_t v27 = 16;
            break;
          case 0x7073706B:
            uint64_t v27 = 2;
            break;
          default:
            continue;
        }
      }
      v2 |= v27;
    }
  }
  uint64_t v39 = 0;
  uint64_t v2 = 0;
LABEL_68:
  sub_CF14(v37, v39, v2, 0);
  return sub_522A0(&v40);
}

void sub_26D38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

unint64_t sub_26DAC(AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (AudioObjectHasProperty(*a1, a2))
  {
    ioDataSize[0] = 2003329396;
    *(void *)&ioDataSize[1] = 0;
    unsigned int PropertyData = 2003329396;
    uint64_t v9 = 0;
    ioDataSize[0] = sub_26E94(*a1, a2, a3, a4);
    if (ioDataSize[0])
    {
      outData[0] = 0;
      unsigned int PropertyData = AudioObjectGetPropertyData(*a1, a2, a3, a4, ioDataSize, outData);
      if (PropertyData) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = outData[0];
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int PropertyData = 2003332927;
  }
  return PropertyData | (unint64_t)(v9 << 32);
}

uint64_t sub_26E94(AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  UInt32 outDataSize = 0;
  if (AudioObjectGetPropertyDataSize(a1, a2, a3, a4, &outDataSize)) {
    return 0;
  }
  else {
    return outDataSize;
  }
}

void sub_26ECC(uint64_t a1, uint64_t a2, uint64_t a3, __CFDictionary *a4, unsigned int *a5, uint64_t a6)
{
  CFMutableDictionaryRef Mutable = a4;
  if (*(_DWORD *)a2 == 1986095470)
  {
    unsigned int v12 = *a5;
    if (v12 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __CFDictionary *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      uint64_t v343 = sub_32A48(13);
      id v344 = sub_7D5E8(1, *(void **)v343, *(void *)(v343 + 8));
      v345 = v344;
      if (v344)
      {
        v346 = v344;
        if (os_log_type_enabled(v346, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
          int v347 = v921[23];
          uint64_t v348 = *(unsigned char **)v921;
          unsigned int v349 = *a5;
          int v350 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
          v351 = v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v347 < 0) {
            v351 = v348;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5466;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v351;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v349;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v350;
          _os_log_impl(&def_1E50E8, v346, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if ((v921[23] & 0x80000000) != 0) {
            operator delete(*(void **)v921);
          }
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 561211770;
    }
    CFTypeRef v13 = *(id *)sub_32A48(2);
    CFNumberRef v14 = v13;
    if (v13)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5468;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Get on queue to get initialization state", buf, 0x12u);
      }
    }

    v910[0] = _NSConcreteStackBlock;
    v910[1] = 3221225472;
    v910[2] = sub_30F320;
    v910[3] = &unk_632EB8;
    v910[4] = a1;
    AudioObjectPropertyElement v15 = v910;
    char v16 = *(void **)(a1 + 496);
    v18 = id v17 = v16;
    dispatch_sync(v18, v15);

    *(_DWORD *)a6 = *(_DWORD *)(a1 + 108) != 2;
    return;
  }
  sub_3B7EC();
  v908 = &qword_64CC40;
  char v909 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  if (*(_DWORD *)(a1 + 108) != 2)
  {
    uint64_t v353 = sub_32A48(13);
    id v354 = sub_7D5E8(1, *(void **)v353, *(void *)(v353 + 8));
    v355 = v354;
    if (v354 && os_log_type_enabled(v354, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5483;
      _os_log_impl(&def_1E50E8, v355, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"VirtualAudio PlugIn is not initialized yet\"", buf, 0x12u);
    }

    v356 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v356, "VirtualAudio PlugIn is not initialized yet");
LABEL_723:
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2) & 1) == 0)
  {
    uint64_t v357 = sub_32A48(13);
    CFDictionaryRef v358 = sub_7D5E8(1, *(void **)v357, *(void *)(v357 + 8));
    int v359 = 2003332927;
    if (v358)
    {
      v360 = v358;
      if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
      {
        *(void *)std::string __p = *(void *)a2;
        *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
        if (v921[23] >= 0) {
          v361 = v921;
        }
        else {
          v361 = *(unsigned char **)v921;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5485;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v361;
        _os_log_impl(&def_1E50E8, v360, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
        if ((v921[23] & 0x80000000) != 0) {
          operator delete(*(void **)v921);
        }
        int v359 = 2003332927;
      }
      goto LABEL_973;
    }
    goto LABEL_739;
  }
  if ((a3 == 0) != (Mutable == 0))
  {
    uint64_t v362 = sub_32A48(13);
    int v359 = 561211770;
    id v363 = sub_7D5E8(1, *(void **)v362, *(void *)(v362 + 8));
    if (!v363) {
      goto LABEL_739;
    }
    v360 = v363;
    if (!os_log_type_enabled(v360, OS_LOG_TYPE_ERROR)) {
      goto LABEL_973;
    }
    *(void *)std::string __p = *(void *)a2;
    *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
    if (v921[23] >= 0) {
      v364 = v921;
    }
    else {
      v364 = *(unsigned char **)v921;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5486;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v364;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = a3;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = Mutable;
    v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NU"
           "LL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).";
    v366 = v360;
    uint32_t v367 = 44;
LABEL_971:
    _os_log_impl(&def_1E50E8, v366, OS_LOG_TYPE_ERROR, v365, buf, v367);
    if ((v921[23] & 0x80000000) != 0) {
      operator delete(*(void **)v921);
    }
    goto LABEL_973;
  }
  if (!a6)
  {
    uint64_t v368 = sub_32A48(13);
    int v359 = 561211770;
    uint64_t v369 = sub_7D5E8(1, *(void **)v368, *(void *)(v368 + 8));
    if (!v369) {
      goto LABEL_739;
    }
    v360 = v369;
    if (!os_log_type_enabled(v360, OS_LOG_TYPE_ERROR)) {
      goto LABEL_973;
    }
    *(void *)std::string __p = *(void *)a2;
    *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
    if (v921[23] >= 0) {
      id v370 = v921;
    }
    else {
      id v370 = *(unsigned char **)v921;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5487;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "outData";
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v370;
    v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.";
    v366 = v360;
    uint32_t v367 = 38;
    goto LABEL_971;
  }
  int v19 = *(_DWORD *)a2;
  if (*(int *)a2 > 1768845420)
  {
    if (v19 > 1936225647)
    {
      if (v19 > 1986094178)
      {
        if (v19 > 1987077485)
        {
          if (v19 != 1987077486)
          {
            if (v19 == 2019714413)
            {
              unsigned int v90 = *a5;
              if (v90 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
              {
                *(_OWORD *)a6 = *(_OWORD *)(*(void *)(a1 + 216) + 32);
                *a5 = 16;
                goto LABEL_693;
              }
              uint64_t v501 = sub_32A48(13);
              int v359 = 561211770;
              v502 = sub_7D5E8(1, *(void **)v501, *(void *)(v501 + 8));
              if (v502)
              {
                v360 = v502;
                if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
                {
                  *(void *)std::string __p = *(void *)a2;
                  *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                  sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                  int v503 = v921[23];
                  uint64_t v504 = *(unsigned char **)v921;
                  unsigned int v505 = *a5;
                  int v506 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                  uint32_t v507 = v921;
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  if (v503 < 0) {
                    uint32_t v507 = v504;
                  }
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6219;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v507;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v505;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v506;
                  v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required s"
                         "ize (passed: %u; required: %u).";
                  goto LABEL_970;
                }
                goto LABEL_973;
              }
              goto LABEL_739;
            }
            goto LABEL_409;
          }
          unsigned int v163 = *a5;
          if (v163 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            uint64_t v585 = sub_32A48(13);
            int v359 = 561211770;
            v586 = sub_7D5E8(1, *(void **)v585, *(void *)(v585 + 8));
            if (v586)
            {
              v360 = v586;
              if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                int v587 = v921[23];
                v588 = *(unsigned char **)v921;
                unsigned int v589 = *a5;
                int v590 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                uint64_t v591 = v921;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v587 < 0) {
                  uint64_t v591 = v588;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6273;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v591;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v589;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v590;
                v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_970;
              }
              goto LABEL_973;
            }
            goto LABEL_739;
          }
          int v101 = **(unsigned __int8 **)(a1 + 216);
          goto LABEL_460;
        }
        if ((v19 - 1986094179) >= 2)
        {
          if (v19 == 1987016304)
          {
            uint64_t v65 = sub_32A48(2);
            uint64_t v66 = sub_7D5E8(3, *(void **)v65, *(void *)(v65 + 8));
            uint64_t v67 = v66;
            if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6321;
              _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d GetProperty kVirtualAudioPlugInPropertyOverrideToPartnerPort not supported", buf, 0x12u);
            }

            goto LABEL_693;
          }
          goto LABEL_409;
        }
      }
      else
      {
        if (v19 > 1936745572)
        {
          if (v19 != 1936745573)
          {
            if (v19 != 1936746862)
            {
              if (v19 == 1936882284)
              {
                unsigned int v47 = *a5;
                if (v47 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
                {
                  uint64_t v48 = sub_298DA4();
                  (*(void (**)(unsigned char *__return_ptr))(*(void *)v48 + 312))(buf);
                  uint64_t v49 = *(void *)&buf[8];
                  uint64_t v50 = sub_298DA4();
                  (*(void (**)(unsigned char *__return_ptr))(*(void *)v50 + 312))(v921);
                  uint64_t v51 = *(void *)&v921[16];
                  *(void *)a6 = v49;
                  *(void *)(a6 + 8) = v51;
                  goto LABEL_693;
                }
                uint64_t v466 = sub_32A48(13);
                int v359 = 561211770;
                v467 = sub_7D5E8(1, *(void **)v466, *(void *)(v466 + 8));
                if (v467)
                {
                  v360 = v467;
                  if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
                  {
                    *(void *)std::string __p = *(void *)a2;
                    *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                    sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                    int v468 = v921[23];
                    v469 = *(unsigned char **)v921;
                    unsigned int v470 = *a5;
                    int v471 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                    AudioObjectPropertySelector v472 = v921;
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                    if (v468 < 0) {
                      AudioObjectPropertySelector v472 = v469;
                    }
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 6258;
                    *(_WORD *)&unsigned char buf[18] = 2080;
                    *(void *)&buf[20] = v472;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v470;
                    *(_WORD *)&buf[34] = 1024;
                    *(_DWORD *)&buf[36] = v471;
                    v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required"
                           " size (passed: %u; required: %u).";
                    goto LABEL_970;
                  }
                  goto LABEL_973;
                }
                goto LABEL_739;
              }
              goto LABEL_409;
            }
LABEL_153:
            unsigned int v73 = *a5;
            if (v73 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
            {
              int v22 = sub_F40C0();
              goto LABEL_198;
            }
            uint64_t v400 = sub_32A48(13);
            int v359 = 561211770;
            v401 = sub_7D5E8(1, *(void **)v400, *(void *)(v400 + 8));
            if (v401)
            {
              v360 = v401;
              if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                int v402 = v921[23];
                uint32_t v403 = *(unsigned char **)v921;
                unsigned int v404 = *a5;
                int v405 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                v406 = v921;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v402 < 0) {
                  v406 = v403;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6294;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v406;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v404;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v405;
                v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_970;
              }
              goto LABEL_973;
            }
            goto LABEL_739;
          }
          unsigned int v99 = *a5;
          if (v99 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            uint64_t v529 = sub_32A48(13);
            int v359 = 561211770;
            v530 = sub_7D5E8(1, *(void **)v529, *(void *)(v529 + 8));
            if (v530)
            {
              v360 = v530;
              if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                int v531 = v921[23];
                v532 = *(unsigned char **)v921;
                unsigned int v533 = *a5;
                int v534 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                v535 = v921;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v531 < 0) {
                  v535 = v532;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6284;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v535;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v533;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v534;
                v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_970;
              }
              goto LABEL_973;
            }
            goto LABEL_739;
          }
          uint64_t v100 = *(void *)(a1 + 112);
          if (!v100)
          {
            uint64_t v648 = sub_32A48(13);
            v649 = sub_7D5E8(1, *(void **)v648, *(void *)(v648 + 8));
            v647 = v649;
            if (v649 && os_log_type_enabled(v649, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6285;
              _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }
            goto LABEL_1311;
          }
          int v101 = !sub_14D4C0(v100, 6);
LABEL_460:
          *(_DWORD *)a6 = v101;
          goto LABEL_693;
        }
        if (v19 != 1936225648)
        {
          if (v19 == 1936745332)
          {
            unsigned int v74 = *a5;
            if (v74 >= (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
            {
              sub_13BE14(buf, *(void ***)(a1 + 112));
              sub_313D6C((uint64_t)buf, a5, a6);
              sub_45F50(buf);
              goto LABEL_693;
            }
            uint64_t v487 = sub_32A48(13);
            int v359 = 561211770;
            v488 = sub_7D5E8(1, *(void **)v487, *(void *)(v487 + 8));
            if (v488)
            {
              v360 = v488;
              if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                int v489 = v921[23];
                v490 = *(unsigned char **)v921;
                unsigned int v491 = *a5;
                int v492 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                uint64_t v493 = v921;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v489 < 0) {
                  uint64_t v493 = v490;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6268;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v493;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v491;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v492;
                v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
                goto LABEL_970;
              }
              goto LABEL_973;
            }
            goto LABEL_739;
          }
          goto LABEL_409;
        }
      }
      goto LABEL_166;
    }
    if (v19 > 1886549106)
    {
      if (v19 <= 1920297327)
      {
        if (v19 == 1886549107)
        {
          unsigned int v156 = *a5;
          if (v156 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            memset(buf, 0, 24);
            strcpy(&buf[24], "cwdv");
            unsigned char buf[32] = 0;
            *(_DWORD *)&uint8_t buf[40] = 3;
            v933 = 0;
            *(void *)&buf[56] = 0;
            *(void *)&uint8_t buf[48] = &buf[56];
            uint64_t v935 = 0;
            LODWORD(v934) = 44731050;
            memset(v921, 0, 24);
            sub_45ED4(v921, Mutable, (uint64_t)Mutable + 4 * (a3 >> 2), a3 >> 2);
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
            *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v921;
            *(void *)&buf[16] = *(void *)&v921[16];
            int v157 = *(_DWORD *)(a2 + 4);
            if (v157 == 1768845428)
            {
              int v158 = v934 & 0xFFFFFFCF;
            }
            else if (v157 == 1869968496)
            {
              int v158 = v934 & 0xFFFFFFCF | 0x10;
            }
            else
            {
              int v158 = v934 & 0xFFFFFFCF | 0x20;
            }
            LODWORD(v934) = v158;
            sub_460BC((uint64_t *)__p, *(void *)(a1 + 128), (uint64_t)buf);
            sub_47020((uint64_t)&v903, *(uint64_t *)&__p[8], (uint64_t)__p);
            uint64_t v303 = sub_32A48(2);
            uint64_t v304 = sub_32A48(34);
            char v305 = 0;
            uint64_t v306 = 0;
            *(void *)v921 = 0x100000002;
            uint64_t v307 = *(void *)(v303 + 8);
            while (1)
            {
              uint64_t v308 = *(int *)&v921[4 * v306];
              char v309 = v305;
              if (((v307 & v308) != 0) != ((*(void *)(v304 + 8) & v308) != 0)) {
                break;
              }
              char v305 = 1;
              uint64_t v306 = 1;
              if (v309) {
                goto LABEL_641;
              }
            }
            if ((v307 & v308) == 0) {
              uint64_t v303 = v304;
            }
LABEL_641:
            char v310 = sub_7D5E8(6, *(void **)v303, *(void *)(v303 + 8));
            uint64_t v311 = v310;
            if (v310)
            {
              v312 = v310;
              if (os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
              {
                v313 = &v919;
                sub_2417C(&v919, *(_DWORD *)(a2 + 4));
                if ((v919.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v313 = (std::string *)v919.__r_.__value_.__r.__words[0];
                }
                sub_1001A8((std::string *)v918, *(unsigned int **)buf, *(unsigned int **)&buf[8]);
                int v314 = v918[23];
                v315 = *(unsigned char **)v918;
                sub_168B00(&v906, (const __CFArray *)v903.__r_.__value_.__l.__data_);
                id v316 = v918;
                if (v314 < 0) {
                  id v316 = v315;
                }
                if ((v906.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v317 = &v906;
                }
                else {
                  v317 = (std::string *)v906.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)v921 = 136316162;
                *(void *)&v921[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v921[12] = 1024;
                *(_DWORD *)&v921[14] = 6093;
                *(_WORD *)&v921[18] = 2080;
                *(void *)&v921[20] = v313;
                *(_WORD *)&v921[28] = 2080;
                *(void *)&v921[30] = v316;
                __int16 v922 = 2080;
                v923 = v317;
                _os_log_impl(&def_1E50E8, v312, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning connected ports for scope '%s' and VirtualAudioPortTypes %s: %s", v921, 0x30u);
                if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v906.__r_.__value_.__l.__data_);
                }
                if ((v918[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v918);
                }
                if (SHIBYTE(v919.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v919.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v903.__r_.__value_.__r.__words[0])
            {
              CFRetain(v903.__r_.__value_.__l.__data_);
              std::string::size_type v318 = v903.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v318 = 0;
            }
            *(void *)a6 = v318;
            sub_3D61C((uint64_t)&v903);
            sub_45F50(__p);
            sub_470A4((uint64_t)buf);
            goto LABEL_693;
          }
          uint64_t v564 = sub_32A48(13);
          int v359 = 561211770;
          v565 = sub_7D5E8(1, *(void **)v564, *(void *)(v564 + 8));
          if (v565)
          {
            v360 = v565;
            if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              int v566 = v921[23];
              v567 = *(unsigned char **)v921;
              unsigned int v568 = *a5;
              int v569 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
              v570 = v921;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v566 < 0) {
                v570 = v567;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6065;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v570;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v568;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v569;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_970;
            }
            goto LABEL_973;
          }
          goto LABEL_739;
        }
        if (v19 == 1903653475)
        {
          unsigned int v183 = *a5;
          if (v183 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            uint64_t v613 = sub_32A48(13);
            int v359 = 561211770;
            v614 = sub_7D5E8(1, *(void **)v613, *(void *)(v613 + 8));
            if (v614)
            {
              v360 = v614;
              if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                int v615 = v921[23];
                CFTypeRef v616 = *(unsigned char **)v921;
                unsigned int v617 = *a5;
                int v618 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                v619 = v921;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v615 < 0) {
                  v619 = v616;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6195;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v619;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v617;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v618;
                v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_970;
              }
              goto LABEL_973;
            }
            goto LABEL_739;
          }
          if (!a3)
          {
            int v184 = sub_E1AEC(*(void *)(a1 + 128));
            *(void *)std::string __p = 0;
            if (v184)
            {
              sub_313BBC((CFNumberRef *)&v919, v184);
              *(void *)AudioObjectPropertyAddress buf = &v919;
              *(void *)&buf[8] = 1;
              CFArrayRef v185 = sub_313C74((uint64_t)buf);
              uint64_t v186 = *(void *)__p;
              *(void *)std::string __p = v185;
              *(void *)v921 = v186;
              sub_63908((const void **)v921);
              if (v919.__r_.__value_.__r.__words[0]) {
                CFRelease(v919.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v187 = sub_32A48(2);
            uint64_t v188 = sub_32A48(34);
            char v189 = 0;
            uint64_t v190 = 0;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002;
            uint64_t v191 = *(void *)(v187 + 8);
            while (1)
            {
              uint64_t v192 = *(int *)&buf[4 * v190];
              char v193 = v189;
              if (((v191 & v192) != 0) != ((*(void *)(v188 + 8) & v192) != 0)) {
                break;
              }
              char v189 = 1;
              uint64_t v190 = 1;
              if (v193) {
                goto LABEL_463;
              }
            }
            if ((v191 & v192) == 0) {
              uint64_t v187 = v188;
            }
LABEL_463:
            id v233 = sub_7D5E8(6, *(void **)v187, *(void *)(v187 + 8));
            uint64_t v234 = v233;
            if (v233)
            {
              uint64_t v235 = v233;
              if (os_log_type_enabled(v235, OS_LOG_TYPE_DEBUG))
              {
                if (v184)
                {
                  sub_313D08((uint64_t)v921, *(CFTypeRef *)__p);
                  if (v921[23] >= 0) {
                    unint64_t v236 = v921;
                  }
                  else {
                    unint64_t v236 = *(unsigned char **)v921;
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6211;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v236;
                  _os_log_impl(&def_1E50E8, v235, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning Last connected quiesceable wired port: %s", buf, 0x1Cu);
                  if ((v921[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v921);
                  }
                }
                else
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 6211;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = "None";
                  _os_log_impl(&def_1E50E8, v235, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning Last connected quiesceable wired port: %s", buf, 0x1Cu);
                }
              }
            }
            uint64_t v332 = *(void *)__p;
            *(void *)std::string __p = 0;
            *(void *)a6 = v332;
            sub_63908((const void **)__p);
            goto LABEL_693;
          }
          uint64_t v662 = sub_32A48(13);
          v663 = sub_7D5E8(1, *(void **)v662, *(void *)(v662 + 8));
          v647 = v663;
          if (v663 && os_log_type_enabled(v663, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6196;
            _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          goto LABEL_1311;
        }
        if (v19 != 1919120504) {
          goto LABEL_409;
        }
        unsigned int v23 = *a5;
        if (v23 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
        {
          uint64_t v452 = sub_32A48(13);
          int v359 = 561211770;
          v453 = sub_7D5E8(1, *(void **)v452, *(void *)(v452 + 8));
          if (v453)
          {
            v360 = v453;
            if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              int v454 = v921[23];
              v455 = *(unsigned char **)v921;
              unsigned int v456 = *a5;
              int v457 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
              int v458 = v921;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v454 < 0) {
                int v458 = v455;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6015;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v458;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v456;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v457;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_970;
            }
            goto LABEL_973;
          }
          goto LABEL_739;
        }
        uint64_t v24 = sub_32A48(2);
        uint64_t v25 = sub_32A48(34);
        char v26 = 0;
        uint64_t v27 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v28 = *(void *)(v24 + 8);
        while (1)
        {
          uint64_t v29 = *(int *)&buf[4 * v27];
          char v30 = v26;
          if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
            break;
          }
          char v26 = 1;
          uint64_t v27 = 1;
          if (v30) {
            goto LABEL_440;
          }
        }
        if ((v28 & v29) == 0) {
          uint64_t v24 = v25;
        }
LABEL_440:
        v225 = sub_7D5E8(6, *(void **)v24, *(void *)(v24 + 8));
        v226 = v225;
        if (v225)
        {
          uint64_t v227 = v225;
          if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(v921, *(_DWORD *)(a1 + 224));
            uint64_t v228 = v921[23] >= 0 ? v921 : *(unsigned char **)v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6017;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v228;
            _os_log_impl(&def_1E50E8, v227, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning current category: '%s'", buf, 0x1Cu);
            if ((v921[23] & 0x80000000) != 0) {
              operator delete(*(void **)v921);
            }
          }
        }
        int v101 = *(_DWORD *)(a1 + 224);
        goto LABEL_460;
      }
      if (v19 != 1920297328)
      {
        if (v19 == 1920426613)
        {
          unsigned int v194 = *a5;
          if (v194 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            *(_OWORD *)a6 = *(_OWORD *)(a1 + 200);
            goto LABEL_693;
          }
          uint64_t v620 = sub_32A48(13);
          int v359 = 561211770;
          v621 = sub_7D5E8(1, *(void **)v620, *(void *)(v620 + 8));
          if (v621)
          {
            v360 = v621;
            if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              int v622 = v921[23];
              CFDictionaryRef v623 = *(unsigned char **)v921;
              unsigned int v624 = *a5;
              int v625 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
              v626 = v921;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v622 < 0) {
                v626 = v623;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6242;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v626;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v624;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v625;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_970;
            }
            goto LABEL_973;
          }
          goto LABEL_739;
        }
        if (v19 != 1936028521) {
          goto LABEL_409;
        }
        goto LABEL_166;
      }
      unsigned int v160 = *a5;
      if (v160 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
      {
        uint64_t v578 = sub_32A48(13);
        int v359 = 561211770;
        v579 = sub_7D5E8(1, *(void **)v578, *(void *)(v578 + 8));
        if (v579)
        {
          v360 = v579;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v580 = v921[23];
            v581 = *(unsigned char **)v921;
            unsigned int v582 = *a5;
            int v583 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v584 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v580 < 0) {
              v584 = v581;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6252;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v584;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v582;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v583;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      BOOL v98 = *(void *)(a1 + 192) == 0;
      goto LABEL_351;
    }
    if (v19 <= 1868853874)
    {
      if (v19 != 1768845421)
      {
        if (v19 == 1819173229)
        {
          unsigned int v92 = *a5;
          if (v92 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            *(void *)a6 = @"com.apple.audio.CoreAudio.VirtualAudio";
            CFRetain(@"com.apple.audio.CoreAudio.VirtualAudio");
            goto LABEL_693;
          }
          uint64_t v515 = sub_32A48(13);
          int v359 = 561211770;
          v516 = sub_7D5E8(1, *(void **)v515, *(void *)(v515 + 8));
          if (v516)
          {
            v360 = v516;
            if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              int v517 = v921[23];
              v518 = *(unsigned char **)v921;
              unsigned int v519 = *a5;
              int v520 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
              v521 = v921;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v517 < 0) {
                v521 = v518;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5492;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v521;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v519;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v520;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_970;
            }
            goto LABEL_973;
          }
          goto LABEL_739;
        }
        goto LABEL_409;
      }
      unsigned int v196 = *a5;
      if (v196 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
      {
        uint64_t v627 = sub_32A48(13);
        int v359 = 561211770;
        uint64_t v628 = sub_7D5E8(1, *(void **)v627, *(void *)(v627 + 8));
        if (v628)
        {
          v360 = v628;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v629 = v921[23];
            v630 = *(unsigned char **)v921;
            unsigned int v631 = *a5;
            int v632 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v633 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v629 < 0) {
              v633 = v630;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6228;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v633;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v631;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v632;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      uint64_t v197 = sub_32A48(2);
      uint64_t v198 = sub_32A48(34);
      char v199 = 0;
      uint64_t v200 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v201 = *(void *)(v197 + 8);
      while (1)
      {
        uint64_t v202 = *(int *)&buf[4 * v200];
        char v203 = v199;
        if (((v201 & v202) != 0) != ((*(void *)(v198 + 8) & v202) != 0)) {
          break;
        }
        char v199 = 1;
        uint64_t v200 = 1;
        if (v203) {
          goto LABEL_451;
        }
      }
      if ((v201 & v202) == 0) {
        uint64_t v197 = v198;
      }
LABEL_451:
      uint64_t v229 = sub_7D5E8(6, *(void **)v197, *(void *)(v197 + 8));
      unsigned int v230 = v229;
      if (v229)
      {
        uint64_t v231 = v229;
        if (os_log_type_enabled(v231, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v921, *(_DWORD *)(a1 + 228));
          CFDictionaryRef v232 = v921[23] >= 0 ? v921 : *(unsigned char **)v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6230;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v232;
          _os_log_impl(&def_1E50E8, v231, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning current mode: '%s'", buf, 0x1Cu);
          if ((v921[23] & 0x80000000) != 0) {
            operator delete(*(void **)v921);
          }
        }
      }
      int v101 = *(_DWORD *)(a1 + 228);
      goto LABEL_460;
    }
    if (v19 == 1868853875)
    {
      unsigned int v117 = *a5;
      if (v117 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
      {
        uint64_t v543 = sub_32A48(13);
        int v359 = 561211770;
        uint64_t v544 = sub_7D5E8(1, *(void **)v543, *(void *)(v543 + 8));
        if (v544)
        {
          v360 = v544;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v545 = v921[23];
            v546 = *(unsigned char **)v921;
            unsigned int v547 = *a5;
            int v548 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v549 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v545 < 0) {
              v549 = v546;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6335;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v549;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v547;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v548;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      if (a3 == 8)
      {
        if (Mutable)
        {
          sub_7BFEC((uint64_t)buf, Mutable);
          if (*(void *)&buf[16] != 1)
          {
            uint64_t v690 = sub_32A48(13);
            v691 = sub_7D5E8(1, *(void **)v690, *(void *)(v690 + 8));
            v692 = v691;
            if (v691 && os_log_type_enabled(v691, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v921 = 136315394;
              *(void *)&v921[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v921[12] = 1024;
              *(_DWORD *)&v921[14] = 6341;
              _os_log_impl(&def_1E50E8, v692, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v921, 0x12u);
            }

            v693 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v693, "Precondition failure.");
          }
          sub_7F2C0((uint64_t *)v921, buf);
          if (*(void *)&v921[8] == *(void *)v921) {
            int v118 = 0;
          }
          else {
            int v118 = sub_14D6B4(**(void **)(a1 + 112), *(uint64_t *)v921);
          }
          *(_DWORD *)a6 = v118;
          *(void *)std::string __p = v921;
          sub_81CEC((void ***)__p);
          sub_7DB7C(*(void **)&buf[8]);
          goto LABEL_693;
        }
        uint64_t v680 = sub_32A48(13);
        v681 = sub_7D5E8(1, *(void **)v680, *(void *)(v680 + 8));
        v647 = v681;
        if (v681 && os_log_type_enabled(v681, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6337;
          _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
      else
      {
        uint64_t v650 = sub_32A48(13);
        v651 = sub_7D5E8(1, *(void **)v650, *(void *)(v650 + 8));
        v647 = v651;
        if (v651 && os_log_type_enabled(v651, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6336;
          _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
      goto LABEL_1311;
    }
    if (v19 == 1886350709)
    {
      unsigned int v174 = *a5;
      if (v174 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
      {
        uint64_t v599 = sub_32A48(13);
        int v359 = 561211770;
        v600 = sub_7D5E8(1, *(void **)v599, *(void *)(v599 + 8));
        if (v600)
        {
          v360 = v600;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v601 = v921[23];
            uint64_t v602 = *(unsigned char **)v921;
            unsigned int v603 = *a5;
            int v604 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v605 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v601 < 0) {
              v605 = v602;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6236;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v605;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v603;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v604;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      uint64_t v175 = sub_32A48(2);
      uint64_t v176 = sub_32A48(38);
      char v177 = 0;
      uint64_t v178 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v179 = *(void *)(v175 + 8);
      while (1)
      {
        uint64_t v180 = *(int *)&buf[4 * v178];
        char v181 = v177;
        if (((v179 & v180) != 0) != ((*(void *)(v176 + 8) & v180) != 0)) {
          break;
        }
        char v177 = 1;
        uint64_t v178 = 1;
        if (v181) {
          goto LABEL_434;
        }
      }
      if ((v179 & v180) == 0) {
        uint64_t v175 = v176;
      }
LABEL_434:
      int v222 = sub_7D5E8(3, *(void **)v175, *(void *)(v175 + 8));
      int v223 = v222;
      if (v222 && os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
      {
        int v224 = *(unsigned __int8 *)(a1 + 168);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6237;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v224;
        _os_log_impl(&def_1E50E8, v223, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Returning policy mute: %u.", buf, 0x18u);
      }

      int v101 = *(unsigned __int8 *)(a1 + 168);
      goto LABEL_460;
    }
    if (v19 != 1886548848) {
      goto LABEL_409;
    }
    unsigned int v69 = *a5;
    if (v69 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
    {
      uint64_t v480 = sub_32A48(13);
      int v359 = 561211770;
      AudioObjectPropertySelector v481 = sub_7D5E8(1, *(void **)v480, *(void *)(v480 + 8));
      if (v481)
      {
        v360 = v481;
        if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
          int v482 = v921[23];
          v483 = *(unsigned char **)v921;
          unsigned int v484 = *a5;
          int v485 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
          uint64_t v486 = v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v482 < 0) {
            uint64_t v486 = v483;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5745;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v486;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v484;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v485;
          v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_970;
        }
        goto LABEL_973;
      }
      goto LABEL_739;
    }
    if ((a3 | 8) != 8)
    {
      uint64_t v866 = sub_32A48(13);
      v867 = sub_7D5E8(1, *(void **)v866, *(void *)(v866 + 8));
      v647 = v867;
      if (v867 && os_log_type_enabled(v867, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5746;
        _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      goto LABEL_1311;
    }
    unsigned int v70 = *(_DWORD *)(a2 + 8);
    if (!Mutable)
    {
      sub_2F6834(buf, a1);
      sub_3036C0((uint64_t)v921, (uint64_t)buf);
      sub_2E9FD8((uint64_t)buf);
      int v71 = sub_14DBA0(**(void **)(a1 + 112), *(unint64_t *)v921, *(uint64_t *)&v921[8], v70, (uint64_t)v929, (uint64_t)v930, v931);
      sub_143D84((uint64_t)v921);
      goto LABEL_379;
    }
    *(void *)std::string __p = Mutable;
    *(_WORD *)&__p[8] = 0;
    if (CFDictionaryContainsKey(Mutable, @"category"))
    {
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"mode"))
      {
        if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"overridden ports"))
        {
          uint64_t v789 = sub_32A48(13);
          v790 = sub_7D5E8(1, *(void **)v789, *(void *)(v789 + 8));
          v767 = v790;
          if (!v790 || !os_log_type_enabled(v790, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5769;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"routable ports"))
        {
          uint64_t v802 = sub_32A48(13);
          v803 = sub_7D5E8(1, *(void **)v802, *(void *)(v802 + 8));
          v767 = v803;
          if (!v803 || !os_log_type_enabled(v803, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5773;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"unroutable ports"))
        {
          uint64_t v810 = sub_32A48(13);
          v811 = sub_7D5E8(1, *(void **)v810, *(void *)(v810 + 8));
          v767 = v811;
          if (!v811 || !os_log_type_enabled(v811, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5777;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"preferred sub-ports"))
        {
          uint64_t v818 = sub_32A48(13);
          v819 = sub_7D5E8(1, *(void **)v818, *(void *)(v818 + 8));
          v767 = v819;
          if (!v819 || !os_log_type_enabled(v819, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5781;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"active data sources"))
        {
          uint64_t v826 = sub_32A48(13);
          v827 = sub_7D5E8(1, *(void **)v826, *(void *)(v826 + 8));
          v767 = v827;
          if (!v827 || !os_log_type_enabled(v827, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5785;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"initiation context"))
        {
          uint64_t v837 = sub_32A48(13);
          v838 = sub_7D5E8(1, *(void **)v837, *(void *)(v837 + 8));
          v767 = v838;
          if (!v838 || !os_log_type_enabled(v838, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5789;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationInitiationContextKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"voice processing configuration"))
        {
          uint64_t v839 = sub_32A48(13);
          v840 = sub_7D5E8(1, *(void **)v839, *(void *)(v839 + 8));
          v767 = v840;
          if (!v840 || !os_log_type_enabled(v840, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5793;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"sub-port preferences"))
        {
          uint64_t v847 = sub_32A48(13);
          v848 = sub_7D5E8(1, *(void **)v847, *(void *)(v847 + 8));
          v767 = v848;
          if (!v848 || !os_log_type_enabled(v848, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5797;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"screen dark policy enabled"))
        {
          uint64_t v849 = sub_32A48(13);
          v850 = sub_7D5E8(1, *(void **)v849, *(void *)(v849 + 8));
          v767 = v850;
          if (!v850 || !os_log_type_enabled(v850, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5801;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationScreenDarkPolicyEnabledKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"device hints"))
        {
          uint64_t v851 = sub_32A48(13);
          v852 = sub_7D5E8(1, *(void **)v851, *(void *)(v851 + 8));
          v767 = v852;
          if (!v852 || !os_log_type_enabled(v852, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5805;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationDeviceHintsKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"default to speaker"))
        {
          uint64_t v853 = sub_32A48(13);
          v854 = sub_7D5E8(1, *(void **)v853, *(void *)(v853 + 8));
          v767 = v854;
          if (!v854 || !os_log_type_enabled(v854, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5809;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationDefaultToSpeakerKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"disallow hfp"))
        {
          uint64_t v855 = sub_32A48(13);
          v856 = sub_7D5E8(1, *(void **)v855, *(void *)(v855 + 8));
          v767 = v856;
          if (!v856 || !os_log_type_enabled(v856, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5813;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationDisallowHFPKey.\"";
        }
        else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"create speaker vad"))
        {
          uint64_t v857 = sub_32A48(13);
          v858 = sub_7D5E8(1, *(void **)v857, *(void *)(v857 + 8));
          v767 = v858;
          if (!v858 || !os_log_type_enabled(v858, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5817;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationCreateSpeakerAlertVADKey.\"";
        }
        else
        {
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"disallowed ports"))
          {
            if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"disable speaker vad"))
            {
              sub_2F69B0(buf, a1, (const __CFDictionary **)__p, 0, 1);
              sub_3036C0((uint64_t)v921, (uint64_t)buf);
              sub_2E9FD8((uint64_t)buf);
              int v71 = sub_14DBA0(**(void **)(a1 + 112), *(unint64_t *)v921, *(uint64_t *)&v921[8], v70, (uint64_t)v929, (uint64_t)v930, v931);
              sub_143D84((uint64_t)v921);
              char v72 = __p;
LABEL_378:
              sub_80594((uint64_t)v72);
LABEL_379:
              *(_DWORD *)a6 = v71;
              goto LABEL_693;
            }
            uint64_t v861 = sub_32A48(13);
            v862 = sub_7D5E8(1, *(void **)v861, *(void *)(v861 + 8));
            v767 = v862;
            if (v862 && os_log_type_enabled(v862, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5825;
              v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfig"
                     "urationSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationDisableSpeakerAlertVADKey.\"";
              goto LABEL_1278;
            }
LABEL_1279:

            v863 = __cxa_allocate_exception(0x10uLL);
            *(void *)v863 = &off_6414D8;
            v863[2] = 1852797029;
          }
          uint64_t v859 = sub_32A48(13);
          v860 = sub_7D5E8(1, *(void **)v859, *(void *)(v859 + 8));
          v767 = v860;
          if (!v860 || !os_log_type_enabled(v860, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1279;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5821;
          v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurat"
                 "ionSupportsPortType doesn't support \" \"kVirtualAudioPlugInRouteConfigurationDisallowedPortsKey.\"";
        }
      }
      else
      {
        uint64_t v781 = sub_32A48(13);
        v782 = sub_7D5E8(1, *(void **)v781, *(void *)(v781 + 8));
        v767 = v782;
        if (!v782 || !os_log_type_enabled(v782, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1279;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5763;
        v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfiguratio"
               "nSupportsPortType requires that RouteConfiguration dictionary has \" \"kVirtualAudioPlugInRouteConfigurationModeKey.\"";
      }
    }
    else
    {
      uint64_t v765 = sub_32A48(13);
      v766 = sub_7D5E8(1, *(void **)v765, *(void *)(v765 + 8));
      v767 = v766;
      if (!v766 || !os_log_type_enabled(v766, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1279;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5759;
      v768 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationS"
             "upportsPortType requires that RouteConfiguration dictionary has \" \"kVirtualAudioPlugInRouteConfigurationCategoryKey.\"";
    }
LABEL_1278:
    _os_log_impl(&def_1E50E8, v767, OS_LOG_TYPE_ERROR, v768, buf, 0x12u);
    goto LABEL_1279;
  }
  if (v19 <= 1651077730)
  {
    if (v19 <= 1634629489)
    {
      if (v19 > 1634624370)
      {
        if (v19 != 1634624371)
        {
          if (v19 != 1634627952)
          {
            if (v19 != 1634627954) {
              goto LABEL_409;
            }
            unsigned int v31 = *a5;
            if (v31 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
            {
              uint64_t v459 = sub_32A48(13);
              int v359 = 561211770;
              AudioObjectPropertySelector v460 = sub_7D5E8(1, *(void **)v459, *(void *)(v459 + 8));
              if (v460)
              {
                v360 = v460;
                if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
                {
                  *(void *)std::string __p = *(void *)a2;
                  *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                  sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                  int v461 = v921[23];
                  uint64_t v462 = *(unsigned char **)v921;
                  unsigned int v463 = *a5;
                  int v464 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                  v465 = v921;
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  if (v461 < 0) {
                    v465 = v462;
                  }
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 5526;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v465;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v463;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v464;
                  v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required s"
                         "ize (passed: %u; required: %u).";
                  goto LABEL_970;
                }
                goto LABEL_973;
              }
              goto LABEL_739;
            }
            if (a3 != 8 || !Mutable)
            {
              uint64_t v674 = sub_32A48(13);
              int v359 = 561211770;
              v675 = sub_7D5E8(1, *(void **)v674, *(void *)(v674 + 8));
              if (!v675) {
                goto LABEL_739;
              }
              v360 = v675;
              if (!os_log_type_enabled(v360, OS_LOG_TYPE_ERROR)) {
                goto LABEL_973;
              }
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              if (v921[23] >= 0) {
                v676 = v921;
              }
              else {
                v676 = *(unsigned char **)v921;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5528;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v676;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 8;
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = "non-";
              *(_WORD *)&buf[44] = 1024;
              *(_DWORD *)&buf[46] = a3;
              *(_WORD *)&buf[50] = 2048;
              *(void *)&buf[52] = Mutable;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifi"
                     "er data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).";
LABEL_1027:
              v366 = v360;
              uint32_t v367 = 60;
              goto LABEL_971;
            }
            theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
            LOWORD(theDict.__r_.__value_.__r.__words[1]) = 0;
            if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
            {
              uint64_t v682 = sub_32A48(13);
              v683 = sub_7D5E8(1, *(void **)v682, *(void *)(v682 + 8));
              v684 = v683;
              if (!v683 || !os_log_type_enabled(v683, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1121;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5535;
              v685 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationOverr"
                     "iddenPortsKey.\"";
            }
            else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"routable ports"))
            {
              uint64_t v694 = sub_32A48(13);
              v695 = sub_7D5E8(1, *(void **)v694, *(void *)(v694 + 8));
              v684 = v695;
              if (!v695 || !os_log_type_enabled(v695, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1121;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5539;
              v685 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"";
            }
            else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"unroutable ports"))
            {
              uint64_t v719 = sub_32A48(13);
              v720 = sub_7D5E8(1, *(void **)v719, *(void *)(v719 + 8));
              v684 = v720;
              if (!v720 || !os_log_type_enabled(v720, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1121;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5543;
              v685 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationUnrou"
                     "tablePortsKey.\"";
            }
            else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"preferred sub-ports"))
            {
              uint64_t v723 = sub_32A48(13);
              v724 = sub_7D5E8(1, *(void **)v723, *(void *)(v723 + 8));
              v684 = v724;
              if (!v724 || !os_log_type_enabled(v724, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1121;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5547;
              v685 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPrefe"
                     "rredSubPortsKey.\"";
            }
            else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"active data sources"))
            {
              uint64_t v727 = sub_32A48(13);
              v728 = sub_7D5E8(1, *(void **)v727, *(void *)(v727 + 8));
              v684 = v728;
              if (!v728 || !os_log_type_enabled(v728, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1121;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5551;
              v685 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiv"
                     "eDataSourcesKey.\"";
            }
            else
            {
              if (!CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"voice processing configuration"))
              {
                if (!CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"sub-port preferences"))
                {
                  sub_2F69B0(buf, a1, (const __CFDictionary **)&theDict, 0, 1);
                  if (v968) {
                    std::string::size_type v32 = (uint64_t *)v967;
                  }
                  else {
                    std::string::size_type v32 = &qword_6588A0;
                  }
                  sub_ED624((uint64_t)&v919, v32);
                  sub_147760((uint64_t)v921, *(uint64_t **)(a1 + 112), (uint64_t)buf, &v919, 2);
                  switch(*(_DWORD *)v921)
                  {
                    case 0:
                      sub_30FA38((uint64_t)&cf, a1, (uint64_t *)&v921[8], &v919);
                      int v33 = (uint64_t *)sub_32A48(2);
                      if (sub_30FEC0(*v33, v33[1]))
                      {
                        sub_383858(&v903, (uint64_t)buf);
                        sub_15885C(&v906, "Returning active non-quiesceable ports for category/mode ", &v903);
                        __n128 v34 = sub_1587FC((std::string *)__p, &v906, ":");
                        sub_30FED0((uint64_t *)v918, (CFArrayRef *)&cf, (uint64_t)__p, v34);
                        if ((__p[23] & 0x80000000) != 0) {
                          operator delete(*(void **)__p);
                        }
                        if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v906.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v903.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v903.__r_.__value_.__l.__data_);
                        }
                        for (uint64_t i = *(void *)&v918[8]; (unsigned char *)i != v918; uint64_t i = *(void *)(i + 8))
                        {
                          uint64_t v36 = sub_32A48(2);
                          uint64_t v37 = sub_32A48(34);
                          char v38 = 0;
                          uint64_t v39 = 0;
                          *(void *)std::string __p = 0x100000002;
                          uint64_t v40 = *(void *)(v36 + 8);
                          do
                          {
                            uint64_t v41 = *(int *)&__p[4 * v39];
                            char v42 = v38;
                            if (((v40 & v41) != 0) != ((*(void *)(v37 + 8) & v41) != 0))
                            {
                              if ((v40 & v41) == 0) {
                                uint64_t v36 = v37;
                              }
                              if (*(void *)(v36 + 8)) {
                                goto LABEL_66;
                              }
                              goto LABEL_72;
                            }
                            char v38 = 1;
                            uint64_t v39 = 1;
                          }
                          while ((v42 & 1) == 0);
                          if ((v40 & 1) == 0) {
                            continue;
                          }
LABEL_66:
                          std::string v43 = *(id *)v36;
                          if (v43)
                          {
                            std::string v44 = v43;
                            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                            {
                              std::string v45 = (void *)(i + 16);
                              if (*(char *)(i + 39) < 0) {
                                std::string v45 = (void *)*v45;
                              }
                              *(_DWORD *)std::string __p = 136315650;
                              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                              *(_WORD *)&unsigned char __p[12] = 1024;
                              *(_DWORD *)&__p[14] = 5571;
                              *(_WORD *)&__p[18] = 2080;
                              *(void *)&__p[20] = v45;
                              _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", __p, 0x1Cu);
                            }
                          }
LABEL_72:
                          ;
                        }
                        sub_16A560(v918);
                      }
                      if (cf)
                      {
                        CFRetain(cf);
                        CFTypeRef v46 = cf;
                      }
                      else
                      {
                        CFTypeRef v46 = 0;
                      }
                      *(void *)a6 = v46;
                      sub_3D61C((uint64_t)&cf);
                      *(void *)std::string __p = &v921[8];
                      sub_1486D0((void ***)__p);
                      sub_7DB7C((void *)v919.__r_.__value_.__l.__size_);
                      sub_2E9FD8((uint64_t)buf);
                      p_std::string theDict = &theDict;
LABEL_622:
                      sub_80594((uint64_t)p_theDict);
                      goto LABEL_693;
                    case 2:
                      uint64_t v753 = sub_32A48(13);
                      int v395 = 1852793716;
                      v754 = sub_7D5E8(1, *(void **)v753, *(void *)(v753 + 8));
                      v394 = v754;
                      if (!v754 || !os_log_type_enabled(v754, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_1134;
                      }
                      *(_DWORD *)std::string __p = 136315394;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&unsigned char __p[12] = 1024;
                      *(_DWORD *)&__p[14] = 5566;
                      v755 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVi"
                             "rtualAudioPlugInPropertyActiveNonQuiesceablePortsForRouteConfiguration.\")";
                      break;
                    case 1:
                      uint64_t v392 = sub_32A48(13);
                      uint64_t v393 = sub_7D5E8(1, *(void **)v392, *(void *)(v392 + 8));
                      v394 = v393;
                      int v395 = 1852797556;
                      if (v393 && os_log_type_enabled(v393, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)std::string __p = 136315394;
                        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                        *(_WORD *)&unsigned char __p[12] = 1024;
                        *(_DWORD *)&__p[14] = 5566;
                        _os_log_impl(&def_1E50E8, v394, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyActiveNonQuiesceablePortsForRouteConfiguration.\")", __p, 0x12u);
                        int v395 = 1852797556;
                      }
LABEL_1134:

                      v758 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v758 = &off_6414D8;
                      v758[2] = v395;
                    default:
                      uint64_t v756 = sub_32A48(13);
                      int v395 = 2003329396;
                      v757 = sub_7D5E8(1, *(void **)v756, *(void *)(v756 + 8));
                      v394 = v757;
                      if (!v757 || !os_log_type_enabled(v757, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_1134;
                      }
                      *(_DWORD *)std::string __p = 136315394;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&unsigned char __p[12] = 1024;
                      *(_DWORD *)&__p[14] = 5566;
                      v755 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlug"
                             "InPropertyActiveNonQuiesceablePortsForRouteConfiguration.\")";
                      break;
                  }
                  _os_log_impl(&def_1E50E8, v394, OS_LOG_TYPE_ERROR, v755, __p, 0x12u);
                  goto LABEL_1134;
                }
                uint64_t v747 = sub_32A48(13);
                v748 = sub_7D5E8(1, *(void **)v747, *(void *)(v747 + 8));
                v684 = v748;
                if (v748 && os_log_type_enabled(v748, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 5559;
                  v685 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveN"
                         "onQuiesceablePortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurat"
                         "ionSubPortPreferencesKey.\"";
                  goto LABEL_1120;
                }
LABEL_1121:

                v749 = __cxa_allocate_exception(0x10uLL);
                *(void *)v749 = &off_6414D8;
                v749[2] = 1852797029;
              }
              uint64_t v731 = sub_32A48(13);
              v732 = sub_7D5E8(1, *(void **)v731, *(void *)(v731 + 8));
              v684 = v732;
              if (!v732 || !os_log_type_enabled(v732, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1121;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5555;
              v685 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonQu"
                     "iesceablePortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlo"
                     "ckConfigurationKey.\"";
            }
LABEL_1120:
            _os_log_impl(&def_1E50E8, v684, OS_LOG_TYPE_ERROR, v685, buf, 0x12u);
            goto LABEL_1121;
          }
          unsigned int v119 = *a5;
          if (v119 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            uint64_t v550 = sub_32A48(13);
            int v359 = 561211770;
            v551 = sub_7D5E8(1, *(void **)v550, *(void *)(v550 + 8));
            if (v551)
            {
              v360 = v551;
              if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                int v552 = v921[23];
                v553 = *(unsigned char **)v921;
                unsigned int v554 = *a5;
                int v555 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                v556 = v921;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v552 < 0) {
                  v556 = v553;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5501;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v556;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v554;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v555;
                v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required siz"
                       "e (passed: %u; required: %u).";
                goto LABEL_970;
              }
              goto LABEL_973;
            }
            goto LABEL_739;
          }
          if ((a3 | 4) != 4)
          {
            uint64_t v872 = sub_32A48(13);
            v873 = sub_7D5E8(1, *(void **)v872, *(void *)(v872 + 8));
            v647 = v873;
            if (v873 && os_log_type_enabled(v873, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5502;
              _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }
            goto LABEL_1311;
          }
          *(void *)AudioObjectPropertyAddress buf = sub_30F3F8(a1, a3, (unsigned int *)Mutable);
          *(void *)&buf[8] = v120;
          sub_F2720(v907, *(void *)(a1 + 216) + 8);
          sub_F26A4((uint64_t)v921, (uint64_t)buf, (uint64_t)v907);
          if (v907[16]) {
            sub_80594((uint64_t)v907);
          }
          int v121 = 1852793716;
          *(_DWORD *)std::string __p = 1852796517;
          memset(&__p[8], 0, 24);
          *(void *)&unsigned char __p[32] = 0x756E64656175746FLL;
          *(_OWORD *)&v919.__r_.__value_.__r.__words[1] = 0uLL;
          v919.__r_.__value_.__r.__words[0] = (std::string::size_type)&v919.__r_.__value_.__l.__size_;
          *(void *)&v918[8] = 0;
          *(void *)&v918[16] = 0;
          *(void *)v918 = &v918[8];
          *(_OWORD *)&v906.__r_.__value_.__r.__words[1] = 0uLL;
          v906.__r_.__value_.__r.__words[0] = (std::string::size_type)&v906.__r_.__value_.__l.__size_;
          sub_30F620((uint64_t)buf, v921, &v919, (uint64_t)&v921[16], (uint64_t **)v918, (uint64_t)&v906, (uint64_t)__p, 0);
          sub_463E0((void *)v906.__r_.__value_.__l.__size_);
          sub_10E118(*(void **)&v918[8]);
          sub_10E118((void *)v919.__r_.__value_.__l.__size_);
          sub_147760((uint64_t)&v919, *(uint64_t **)(a1 + 112), (uint64_t)buf, &qword_6588A0, 2);
          switch(LODWORD(v919.__r_.__value_.__l.__data_))
          {
            case 0:
              sub_30FA38((uint64_t)&cf, a1, (uint64_t *)&v919.__r_.__value_.__l.__size_, &qword_6588A0);
              uint64_t v122 = (uint64_t *)sub_32A48(2);
              if (sub_30FEC0(*v122, v122[1]))
              {
                sub_2417C(&theDict, *(unsigned int *)v921);
                sub_15885C(&v903, "Returning active non-quiesceable ports for category [", &theDict);
                __n128 v123 = sub_1587FC((std::string *)v918, &v903, "]:");
                sub_30FED0((uint64_t *)&v906, (CFArrayRef *)&cf, (uint64_t)v918, v123);
                if ((v918[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v918);
                }
                if (SHIBYTE(v903.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v903.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(theDict.__r_.__value_.__l.__data_);
                }
                for (uint64_t j = (std::string *)v906.__r_.__value_.__l.__size_;
                      j != &v906;
                      uint64_t j = (std::string *)j->__r_.__value_.__l.__size_)
                {
                  uint64_t v125 = sub_32A48(2);
                  uint64_t v126 = sub_32A48(34);
                  char v127 = 0;
                  uint64_t v128 = 0;
                  *(void *)v918 = 0x100000002;
                  uint64_t v129 = *(void *)(v125 + 8);
                  do
                  {
                    uint64_t v130 = *(int *)&v918[4 * v128];
                    char v131 = v127;
                    if (((v129 & v130) != 0) != ((*(void *)(v126 + 8) & v130) != 0))
                    {
                      if ((v129 & v130) == 0) {
                        uint64_t v125 = v126;
                      }
                      if (*(void *)(v125 + 8)) {
                        goto LABEL_292;
                      }
                      goto LABEL_298;
                    }
                    char v127 = 1;
                    uint64_t v128 = 1;
                  }
                  while ((v131 & 1) == 0);
                  if ((v129 & 1) == 0) {
                    continue;
                  }
LABEL_292:
                  uint64_t v132 = *(id *)v125;
                  if (v132)
                  {
                    char v133 = v132;
                    if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v134 = &j->__r_.__value_.__r.__words[2];
                      if (j[1].__r_.__value_.__s.__data_[15] < 0) {
                        uint64_t v134 = (std::string::size_type *)*v134;
                      }
                      *(_DWORD *)v918 = 136315650;
                      *(void *)&v918[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&v918[12] = 1024;
                      *(_DWORD *)&v918[14] = 5518;
                      *(_WORD *)&v918[18] = 2080;
                      *(void *)&v918[20] = v134;
                      _os_log_impl(&def_1E50E8, v133, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v918, 0x1Cu);
                    }
                  }
LABEL_298:
                  ;
                }
                sub_16A560(&v906);
              }
              if (cf)
              {
                CFRetain(cf);
                CFTypeRef v135 = cf;
              }
              else
              {
                CFTypeRef v135 = 0;
              }
              *(void *)a6 = v135;
              sub_3D61C((uint64_t)&cf);
              *(void *)v918 = &v919.__r_.__value_.__l.__size_;
              sub_1486D0((void ***)v918);
              sub_143D84((uint64_t)buf);
              uint64_t v301 = *(void **)&v921[24];
LABEL_630:
              sub_463E0(v301);
              goto LABEL_693;
            case 2:
              uint64_t v714 = sub_32A48(13);
              v715 = sub_7D5E8(1, *(void **)v714, *(void *)(v714 + 8));
              uint64_t v383 = v715;
              if (!v715 || !os_log_type_enabled(v715, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1329;
              }
              *(_DWORD *)v918 = 136315394;
              *(void *)&v918[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v918[12] = 1024;
              *(_DWORD *)&v918[14] = 5513;
              v716 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAud"
                     "ioPlugInPropertyActiveNonQuiesceablePortsForCategory.\")";
              break;
            case 1:
              uint64_t v381 = sub_32A48(13);
              v382 = sub_7D5E8(1, *(void **)v381, *(void *)(v381 + 8));
              uint64_t v383 = v382;
              if (v382 && os_log_type_enabled(v382, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v918 = 136315394;
                *(void *)&v918[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v918[12] = 1024;
                *(_DWORD *)&v918[14] = 5513;
                _os_log_impl(&def_1E50E8, v383, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyActiveNonQuiesceablePortsForCategory.\")", v918, 0x12u);
                int v121 = 1852797556;
              }
              else
              {
                int v121 = 1852797556;
              }
LABEL_1329:

              v894 = __cxa_allocate_exception(0x10uLL);
              *(void *)v894 = &off_6414D8;
              v894[2] = v121;
            default:
              uint64_t v717 = sub_32A48(13);
              int v121 = 2003329396;
              v718 = sub_7D5E8(1, *(void **)v717, *(void *)(v717 + 8));
              uint64_t v383 = v718;
              if (!v718 || !os_log_type_enabled(v718, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1329;
              }
              *(_DWORD *)v918 = 136315394;
              *(void *)&v918[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v918[12] = 1024;
              *(_DWORD *)&v918[14] = 5513;
              v716 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInProper"
                     "tyActiveNonQuiesceablePortsForCategory.\")";
              break;
          }
          _os_log_impl(&def_1E50E8, v383, OS_LOG_TYPE_ERROR, v716, v918, 0x12u);
          goto LABEL_1329;
        }
        unsigned int v96 = *a5;
        if (v96 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
        {
          uint64_t v522 = sub_32A48(13);
          int v359 = 561211770;
          uint64_t v523 = sub_7D5E8(1, *(void **)v522, *(void *)(v522 + 8));
          if (v523)
          {
            v360 = v523;
            if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              int v524 = v921[23];
              v525 = *(unsigned char **)v921;
              unsigned int v526 = *a5;
              int v527 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
              v528 = v921;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v524 < 0) {
                v528 = v525;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6278;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v528;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v526;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v527;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_970;
            }
            goto LABEL_973;
          }
          goto LABEL_739;
        }
        uint64_t v97 = sub_3EFF58();
        BOOL v98 = *(void *)(v97 + 64) == *(void *)(v97 + 72);
LABEL_351:
        int v101 = !v98;
        goto LABEL_460;
      }
      if (v19 != 1633907299)
      {
        if (v19 == 1633969267)
        {
          int v22 = sub_20AA78();
          goto LABEL_198;
        }
        goto LABEL_409;
      }
LABEL_203:
      unsigned int v93 = *a5;
      if (v93 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
      {
        uint64_t v407 = sub_32A48(13);
        int v359 = 561211770;
        v408 = sub_7D5E8(1, *(void **)v407, *(void *)(v407 + 8));
        if (v408)
        {
          v360 = v408;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v409 = v921[23];
            v410 = *(unsigned char **)v921;
            unsigned int v411 = *a5;
            int v412 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v413 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v409 < 0) {
              v413 = v410;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5950;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v413;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v411;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v412;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      if ((a3 | 8) != 8)
      {
        uint64_t v645 = sub_32A48(13);
        v646 = sub_7D5E8(1, *(void **)v645, *(void *)(v645 + 8));
        v647 = v646;
        if (v646 && os_log_type_enabled(v646, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5951;
          _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_1311;
      }
      *(void *)std::string __p = Mutable;
      *(_WORD *)&__p[8] = 0;
      if (!Mutable) {
        goto LABEL_216;
      }
      if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
      {
        uint64_t v426 = sub_32A48(13);
        v427 = sub_7D5E8(1, *(void **)v426, *(void *)(v426 + 8));
        uint64_t v428 = v427;
        if (!v427 || !os_log_type_enabled(v427, OS_LOG_TYPE_ERROR)) {
          goto LABEL_834;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5960;
        v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.\"";
      }
      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"routable ports"))
      {
        uint64_t v430 = sub_32A48(13);
        v431 = sub_7D5E8(1, *(void **)v430, *(void *)(v430 + 8));
        uint64_t v428 = v431;
        if (!v431 || !os_log_type_enabled(v431, OS_LOG_TYPE_ERROR)) {
          goto LABEL_834;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5964;
        v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"";
      }
      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"unroutable ports"))
      {
        uint64_t v432 = sub_32A48(13);
        v433 = sub_7D5E8(1, *(void **)v432, *(void *)(v432 + 8));
        uint64_t v428 = v433;
        if (!v433 || !os_log_type_enabled(v433, OS_LOG_TYPE_ERROR)) {
          goto LABEL_834;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5968;
        v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.\"";
      }
      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"preferred sub-ports"))
      {
        uint64_t v434 = sub_32A48(13);
        v435 = sub_7D5E8(1, *(void **)v434, *(void *)(v434 + 8));
        uint64_t v428 = v435;
        if (!v435 || !os_log_type_enabled(v435, OS_LOG_TYPE_ERROR)) {
          goto LABEL_834;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5972;
        v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.\"";
      }
      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"active data sources"))
      {
        uint64_t v436 = sub_32A48(13);
        v437 = sub_7D5E8(1, *(void **)v436, *(void *)(v436 + 8));
        uint64_t v428 = v437;
        if (!v437 || !os_log_type_enabled(v437, OS_LOG_TYPE_ERROR)) {
          goto LABEL_834;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5976;
        v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.\"";
      }
      else if (CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"initiation context"))
      {
        uint64_t v438 = sub_32A48(13);
        v439 = sub_7D5E8(1, *(void **)v438, *(void *)(v438 + 8));
        uint64_t v428 = v439;
        if (!v439 || !os_log_type_enabled(v439, OS_LOG_TYPE_ERROR)) {
          goto LABEL_834;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5980;
        v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationInitiationContextKey.\"";
      }
      else
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"voice processing configuration"))
        {
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)__p, @"sub-port preferences"))
          {
            if (*(void *)__p)
            {
              sub_2F69B0(buf, a1, (const __CFDictionary **)__p, 0, 1);
              goto LABEL_217;
            }
LABEL_216:
            sub_2F6834(buf, a1);
LABEL_217:
            sub_3036C0((uint64_t)v921, (uint64_t)buf);
            sub_2E9FD8((uint64_t)buf);
            *(_OWORD *)&v919.__r_.__value_.__l.__data_ = *(_OWORD *)v921;
            uint64_t v94 = sub_E1B78(*(void *)(a1 + 128), *(_DWORD *)(a2 + 8));
            if (!v94)
            {
              uint64_t v414 = sub_32A48(13);
              v415 = sub_7D5E8(1, *(void **)v414, *(void *)(v414 + 8));
              uint64_t v416 = v415;
              if (v415 && os_log_type_enabled(v415, OS_LOG_TYPE_ERROR))
              {
                int v417 = *(_DWORD *)(a2 + 8);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5998;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v417;
                _os_log_impl(&def_1E50E8, v416, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [vaPort is NULL]: \"VirtualAudio_Port could not be located for ID: %u\"", buf, 0x18u);
              }

              int v418 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v418, "VirtualAudio_Port could not be located for ID: %u");
            }
            if (*(_DWORD *)a2 == 1635152483)
            {
              sub_DB2B4((uint64_t)buf, v94);
              unsigned int v95 = *(const void **)buf;
              if (*(void *)buf) {
                goto LABEL_411;
              }
            }
            else
            {
              sub_DB544((uint64_t)buf, v94, (uint64_t)&v919);
              unsigned int v95 = *(const void **)buf;
              if (*(void *)buf)
              {
LABEL_411:
                CFRetain(v95);
                uint64_t v204 = *(void *)buf;
LABEL_413:
                sub_3D61C((uint64_t)buf);
                *(void *)a6 = v204;
LABEL_544:
                sub_143D84((uint64_t)v921);
                p_std::string theDict = (std::string *)__p;
                goto LABEL_622;
              }
            }
            uint64_t v204 = 0;
            goto LABEL_413;
          }
          uint64_t v442 = sub_32A48(13);
          v443 = sub_7D5E8(1, *(void **)v442, *(void *)(v442 + 8));
          uint64_t v428 = v443;
          if (v443 && os_log_type_enabled(v443, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5988;
            v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPort"
                   "sForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.\"";
            goto LABEL_833;
          }
LABEL_834:

          uint64_t v444 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v444 = &off_6414D8;
          v444[2] = 1852797029;
        }
        uint64_t v440 = sub_32A48(13);
        v441 = sub_7D5E8(1, *(void **)v440, *(void *)(v440 + 8));
        uint64_t v428 = v441;
        if (!v441 || !os_log_type_enabled(v441, OS_LOG_TYPE_ERROR)) {
          goto LABEL_834;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5984;
        v429 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveSubPortsFor"
               "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.\"";
      }
LABEL_833:
      _os_log_impl(&def_1E50E8, v428, OS_LOG_TYPE_ERROR, v429, buf, 0x12u);
      goto LABEL_834;
    }
    if (v19 > 1634759266)
    {
      if (v19 != 1634759267)
      {
        if (v19 == 1635152483) {
          goto LABEL_203;
        }
        if (v19 != 1651077236) {
          goto LABEL_409;
        }
        unsigned int v52 = *a5;
        if (v52 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
        {
          uint64_t v473 = sub_32A48(13);
          int v359 = 561211770;
          uint64_t v474 = sub_7D5E8(1, *(void **)v473, *(void *)(v473 + 8));
          if (v474)
          {
            v360 = v474;
            if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              int v475 = v921[23];
              v476 = *(unsigned char **)v921;
              unsigned int v477 = *a5;
              int v478 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
              int v479 = v921;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v475 < 0) {
                int v479 = v476;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5846;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v479;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v477;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v478;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_970;
            }
            goto LABEL_973;
          }
          goto LABEL_739;
        }
        if ((a3 | 4) != 4)
        {
          uint64_t v864 = sub_32A48(13);
          v865 = sub_7D5E8(1, *(void **)v864, *(void *)(v864 + 8));
          v647 = v865;
          if (v865 && os_log_type_enabled(v865, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5847;
            _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          goto LABEL_1311;
        }
        *(void *)AudioObjectPropertyAddress buf = sub_30F3F8(a1, a3, (unsigned int *)Mutable);
        *(void *)&buf[8] = v53;
        sub_F2720(v900, *(void *)(a1 + 216) + 8);
        sub_F26A4((uint64_t)&v919, (uint64_t)buf, (uint64_t)v900);
        if (v900[16]) {
          sub_80594((uint64_t)v900);
        }
        int v54 = 1852793716;
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)&v919.__r_.__value_.__l.__data_;
        *(void *)&unsigned char buf[24] = 0;
        *(void *)&buf[16] = &buf[24];
        *(void *)&buf[56] = 0;
        *(void *)&uint8_t buf[48] = 0;
        *(void *)&unsigned char buf[32] = 0;
        *(void *)&uint8_t buf[40] = &buf[48];
        uint64_t v934 = 0;
        v933 = &v934;
        uint64_t v938 = 0;
        uint64_t v937 = 0;
        uint64_t v935 = 0;
        v936 = &v937;
        uint64_t v941 = 0;
        uint64_t v940 = 0;
        v939 = &v940;
        char v942 = 0;
        char v943 = 0;
        int v944 = 1668248944;
        int v945 = 1852796517;
        uint64_t v947 = 0;
        uint64_t v946 = 0;
        uint64_t v948 = 0;
        uint64_t v949 = 0x756E64656175746FLL;
        long long v950 = 0u;
        long long v951 = 0u;
        long long v952 = 0u;
        long long v953 = 0u;
        long long v954 = 0u;
        uint64_t v955 = 1065353216;
        long long v956 = 0u;
        long long v957 = 0u;
        uint64_t v958 = 1065353216;
        long long v960 = 0u;
        long long v959 = 0u;
        uint64_t v961 = 1065353216;
        char v962 = 0;
        char v963 = 0;
        char v965 = 0;
        char v966 = 0;
        int v964 = 0;
        memset(v921, 0, 24);
        LODWORD(v923) = 3;
        uint64_t v926 = 0;
        uint64_t v925 = 0;
        v924 = &v925;
        uint64_t v928 = 0;
        int v927 = 44698266;
        *(_DWORD *)&v921[24] = 1986295651;
        *(_DWORD *)&v921[28] = HIDWORD(v919.__r_.__value_.__r.__words[0]);
        v921[32] = 1;
        sub_148758((uint64_t)v918, *(uint64_t **)(a1 + 112), (uint64_t)buf, (uint64_t)v921);
        switch(*(_DWORD *)v918)
        {
          case 0:
            sub_313294((void *)0x6F757470, &v918[8]);
            theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            LOWORD(theDict.__r_.__value_.__r.__words[1]) = 257;
            sub_BCAD8((uint64_t *)&v906, (uint64_t)&v918[8], "", 5864);
            for (uint64_t k = (std::string *)v906.__r_.__value_.__l.__size_;
                  k != &v906;
                  uint64_t k = (std::string *)k->__r_.__value_.__l.__size_)
            {
              uint64_t v56 = k->__r_.__value_.__r.__words[2];
              memset(__p, 0, 24);
              strcpy(&__p[24], "cwdv");
              unsigned char __p[32] = 0;
              LODWORD(v912) = 3;
              v914 = 0;
              uint64_t v915 = 0;
              v913 = &v914;
              CFTypeRef v917 = 0;
              int v916 = 44731050;
              int v57 = sub_E00F4(*(void *)(a1 + 128), v56, (uint64_t)__p);
              sub_451D0((uint64_t)&theDict, v57);
              if (v917) {
                CFRelease(v917);
              }
              sub_463E0(v914);
              if (*(void *)__p)
              {
                *(void *)&__p[8] = *(void *)__p;
                operator delete(*(void **)__p);
              }
            }
            sub_B8E4((uint64_t *)&v906);
            uint64_t v58 = sub_32A48(2);
            uint64_t v59 = sub_32A48(34);
            char v60 = 0;
            uint64_t v61 = 0;
            *(void *)std::string __p = 0x100000002;
            uint64_t v62 = *(void *)(v58 + 8);
            while (1)
            {
              uint64_t v63 = *(int *)&__p[4 * v61];
              char v64 = v60;
              if (((v62 & v63) != 0) != ((*(void *)(v59 + 8) & v63) != 0)) {
                break;
              }
              char v60 = 1;
              uint64_t v61 = 1;
              if (v64) {
                goto LABEL_509;
              }
            }
            if ((v62 & v63) == 0) {
              uint64_t v58 = v59;
            }
LABEL_509:
            uint64_t v254 = sub_7D5E8(6, *(void **)v58, *(void *)(v58 + 8));
            v255 = v254;
            if (v254)
            {
              int v256 = v254;
              if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(&v906, v919.__r_.__value_.__l.__data_);
                int v257 = SHIBYTE(v906.__r_.__value_.__r.__words[2]);
                std::string::size_type v258 = v906.__r_.__value_.__r.__words[0];
                sub_168B00(&v903, (const __CFArray *)theDict.__r_.__value_.__l.__data_);
                CFDictionaryRef v259 = &v906;
                if (v257 < 0) {
                  CFDictionaryRef v259 = (std::string *)v258;
                }
                if ((v903.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v260 = &v903;
                }
                else {
                  v260 = (std::string *)v903.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string __p = 136315906;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 5871;
                *(_WORD *)&__p[18] = 2080;
                *(void *)&__p[20] = v259;
                *(_WORD *)&__p[28] = 2080;
                *(void *)&__p[30] = v260;
                _os_log_impl(&def_1E50E8, v256, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning built-in ports for category '%s': %s", __p, 0x26u);
                if (SHIBYTE(v903.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v903.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v906.__r_.__value_.__l.__data_);
                }
              }
            }
            if (theDict.__r_.__value_.__r.__words[0])
            {
              CFRetain(theDict.__r_.__value_.__l.__data_);
              std::string::size_type v261 = theDict.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v261 = 0;
            }
            *(void *)a6 = v261;
            sub_3D61C((uint64_t)&theDict);
            goto LABEL_629;
          case 2:
            uint64_t v696 = sub_32A48(13);
            v697 = sub_7D5E8(1, *(void **)v696, *(void *)(v696 + 8));
            uint64_t v373 = v697;
            if (!v697 || !os_log_type_enabled(v697, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1325;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 5859;
            v698 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAudio"
                   "PlugInPropertyBuiltInPortsForCategory.\")";
            break;
          case 1:
            uint64_t v371 = sub_32A48(13);
            v372 = sub_7D5E8(1, *(void **)v371, *(void *)(v371 + 8));
            uint64_t v373 = v372;
            if (v372 && os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 5859;
              _os_log_impl(&def_1E50E8, v373, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyBuiltInPortsForCategory.\")", __p, 0x12u);
              int v54 = 1852797556;
            }
            else
            {
              int v54 = 1852797556;
            }
LABEL_1325:

            v892 = __cxa_allocate_exception(0x10uLL);
            *(void *)v892 = &off_6414D8;
            v892[2] = v54;
          default:
            uint64_t v699 = sub_32A48(13);
            int v54 = 2003329396;
            v700 = sub_7D5E8(1, *(void **)v699, *(void *)(v699 + 8));
            uint64_t v373 = v700;
            if (!v700 || !os_log_type_enabled(v700, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1325;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 5859;
            v698 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInProperty"
                   "BuiltInPortsForCategory.\")";
            break;
        }
        _os_log_impl(&def_1E50E8, v373, OS_LOG_TYPE_ERROR, v698, __p, 0x12u);
        goto LABEL_1325;
      }
      unsigned int v102 = *a5;
      if (v102 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
      {
        uint64_t v536 = sub_32A48(13);
        int v359 = 561211770;
        v537 = sub_7D5E8(1, *(void **)v536, *(void *)(v536 + 8));
        if (v537)
        {
          v360 = v537;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v538 = v921[23];
            v539 = *(unsigned char **)v921;
            unsigned int v540 = *a5;
            int v541 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v542 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v538 < 0) {
              v542 = v539;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5669;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v542;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v540;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v541;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      if ((a3 | 8) != 8)
      {
        uint64_t v870 = sub_32A48(13);
        v871 = sub_7D5E8(1, *(void **)v870, *(void *)(v870 + 8));
        v647 = v871;
        if (v871 && os_log_type_enabled(v871, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5670;
          _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_1311;
      }
      theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      LOWORD(theDict.__r_.__value_.__r.__words[1]) = 257;
      if (!Mutable)
      {
        sub_302080((uint64_t)buf, a1, *(void **)(a1 + 120));
        sub_2EB458((uint64_t)&theDict, (uint64_t)buf);
        sub_3D61C((uint64_t)buf);
        v271 = (uint64_t *)sub_32A48(2);
        if (sub_30FEC0(*v271, v271[1]))
        {
          sub_21C8C(buf, "Returning active ports for category/mode [null]:");
          sub_30FED0((uint64_t *)v921, (CFArrayRef *)&theDict, (uint64_t)buf, v272);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          for (uint64_t m = *(void *)&v921[8]; (unsigned char *)m != v921; uint64_t m = *(void *)(m + 8))
          {
            uint64_t v274 = sub_32A48(2);
            uint64_t v275 = sub_32A48(34);
            char v276 = 0;
            uint64_t v277 = 0;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002;
            uint64_t v278 = *(void *)(v274 + 8);
            do
            {
              uint64_t v279 = *(int *)&buf[4 * v277];
              char v280 = v276;
              if (((v278 & v279) != 0) != ((*(void *)(v275 + 8) & v279) != 0))
              {
                if ((v278 & v279) == 0) {
                  uint64_t v274 = v275;
                }
                if (*(void *)(v274 + 8)) {
                  goto LABEL_558;
                }
                goto LABEL_564;
              }
              char v276 = 1;
              uint64_t v277 = 1;
            }
            while ((v280 & 1) == 0);
            if ((v278 & 1) == 0) {
              continue;
            }
LABEL_558:
            v281 = *(id *)v274;
            if (v281)
            {
              v282 = v281;
              if (os_log_type_enabled(v281, OS_LOG_TYPE_DEBUG))
              {
                CFTypeID v283 = (void *)(m + 16);
                if (*(char *)(m + 39) < 0) {
                  CFTypeID v283 = (void *)*v283;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5724;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v283;
                _os_log_impl(&def_1E50E8, v282, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
              }
            }
LABEL_564:
            ;
          }
          sub_16A560(v921);
        }
        goto LABEL_566;
      }
      CFTypeRef cf = Mutable;
      __int16 v905 = 0;
      if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
      {
        uint64_t v773 = sub_32A48(13);
        v774 = sub_7D5E8(1, *(void **)v773, *(void *)(v773 + 8));
        v775 = v774;
        if (!v774 || !os_log_type_enabled(v774, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1234;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5681;
        v776 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.\"";
      }
      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"routable ports"))
      {
        uint64_t v785 = sub_32A48(13);
        v786 = sub_7D5E8(1, *(void **)v785, *(void *)(v785 + 8));
        v775 = v786;
        if (!v786 || !os_log_type_enabled(v786, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1234;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5685;
        v776 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"";
      }
      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"unroutable ports"))
      {
        uint64_t v791 = sub_32A48(13);
        v792 = sub_7D5E8(1, *(void **)v791, *(void *)(v791 + 8));
        v775 = v792;
        if (!v792 || !os_log_type_enabled(v792, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1234;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5689;
        v776 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.\"";
      }
      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"preferred sub-ports"))
      {
        uint64_t v804 = sub_32A48(13);
        v805 = sub_7D5E8(1, *(void **)v804, *(void *)(v804 + 8));
        v775 = v805;
        if (!v805 || !os_log_type_enabled(v805, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1234;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5693;
        v776 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.\"";
      }
      else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"active data sources"))
      {
        uint64_t v814 = sub_32A48(13);
        v815 = sub_7D5E8(1, *(void **)v814, *(void *)(v814 + 8));
        v775 = v815;
        if (!v815 || !os_log_type_enabled(v815, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1234;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5697;
        v776 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.\"";
      }
      else
      {
        if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"voice processing configuration"))
        {
          if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"sub-port preferences"))
          {
            sub_2F69B0(buf, a1, (const __CFDictionary **)&cf, 0, 1);
            if (v968) {
              unsigned int v103 = (uint64_t *)v967;
            }
            else {
              unsigned int v103 = &qword_6588A0;
            }
            sub_ED624((uint64_t)&v919, v103);
            sub_147760((uint64_t)v921, *(uint64_t **)(a1 + 112), (uint64_t)buf, &v919, 0);
            switch(*(_DWORD *)v921)
            {
              case 0:
                sub_30FA38((uint64_t)__p, a1, (uint64_t *)&v921[8], &v919);
                sub_2EB458((uint64_t)&theDict, (uint64_t)__p);
                sub_3D61C((uint64_t)__p);
                uint64_t v104 = (uint64_t *)sub_32A48(2);
                if (sub_30FEC0(*v104, v104[1]))
                {
                  sub_383858(&v903, (uint64_t)buf);
                  sub_15885C(&v906, "Returning active ports for category/mode ", &v903);
                  __n128 v105 = sub_1587FC((std::string *)__p, &v906, ":");
                  sub_30FED0((uint64_t *)v918, (CFArrayRef *)&theDict, (uint64_t)__p, v105);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v906.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v903.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v903.__r_.__value_.__l.__data_);
                  }
                  for (uint64_t n = *(void *)&v918[8]; (unsigned char *)n != v918; uint64_t n = *(void *)(n + 8))
                  {
                    uint64_t v107 = sub_32A48(2);
                    uint64_t v108 = sub_32A48(34);
                    char v109 = 0;
                    uint64_t v110 = 0;
                    *(void *)std::string __p = 0x100000002;
                    uint64_t v111 = *(void *)(v107 + 8);
                    do
                    {
                      uint64_t v112 = *(int *)&__p[4 * v110];
                      char v113 = v109;
                      if (((v111 & v112) != 0) != ((*(void *)(v108 + 8) & v112) != 0))
                      {
                        if ((v111 & v112) == 0) {
                          uint64_t v107 = v108;
                        }
                        if (*(void *)(v107 + 8)) {
                          goto LABEL_256;
                        }
                        goto LABEL_262;
                      }
                      char v109 = 1;
                      uint64_t v110 = 1;
                    }
                    while ((v113 & 1) == 0);
                    if ((v111 & 1) == 0) {
                      continue;
                    }
LABEL_256:
                    uint64_t v114 = *(id *)v107;
                    if (v114)
                    {
                      uint64_t v115 = v114;
                      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
                      {
                        unsigned int v116 = (void *)(n + 16);
                        if (*(char *)(n + 39) < 0) {
                          unsigned int v116 = (void *)*v116;
                        }
                        *(_DWORD *)std::string __p = 136315650;
                        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                        *(_WORD *)&unsigned char __p[12] = 1024;
                        *(_DWORD *)&__p[14] = 5718;
                        *(_WORD *)&__p[18] = 2080;
                        *(void *)&__p[20] = v116;
                        _os_log_impl(&def_1E50E8, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", __p, 0x1Cu);
                      }
                    }
LABEL_262:
                    ;
                  }
                  sub_16A560(v918);
                }
                *(void *)std::string __p = &v921[8];
                sub_1486D0((void ***)__p);
                sub_7DB7C((void *)v919.__r_.__value_.__l.__size_);
                sub_2E9FD8((uint64_t)buf);
                sub_80594((uint64_t)&cf);
LABEL_566:
                if (theDict.__r_.__value_.__r.__words[0])
                {
                  CFRetain(theDict.__r_.__value_.__l.__data_);
                  std::string::size_type v284 = theDict.__r_.__value_.__r.__words[0];
                }
                else
                {
                  std::string::size_type v284 = 0;
                }
                *(void *)a6 = v284;
                long long v302 = &theDict;
                goto LABEL_689;
              case 2:
                uint64_t v841 = sub_32A48(13);
                int v425 = 1852793716;
                v842 = sub_7D5E8(1, *(void **)v841, *(void *)(v841 + 8));
                int v424 = v842;
                if (!v842 || !os_log_type_enabled(v842, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_1253;
                }
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 5712;
                v843 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualA"
                       "udioPlugInPropertyActivePortsForRouteConfiguration.\")";
                break;
              case 1:
                uint64_t v422 = sub_32A48(13);
                v423 = sub_7D5E8(1, *(void **)v422, *(void *)(v422 + 8));
                int v424 = v423;
                int v425 = 1852797556;
                if (v423 && os_log_type_enabled(v423, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string __p = 136315394;
                  *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&unsigned char __p[12] = 1024;
                  *(_DWORD *)&__p[14] = 5712;
                  _os_log_impl(&def_1E50E8, v424, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyActivePortsForRouteConfiguration.\")", __p, 0x12u);
                  int v425 = 1852797556;
                }
LABEL_1253:

                v846 = __cxa_allocate_exception(0x10uLL);
                *(void *)v846 = &off_6414D8;
                v846[2] = v425;
              default:
                uint64_t v844 = sub_32A48(13);
                int v425 = 2003329396;
                v845 = sub_7D5E8(1, *(void **)v844, *(void *)(v844 + 8));
                int v424 = v845;
                if (!v845 || !os_log_type_enabled(v845, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_1253;
                }
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 5712;
                v843 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInProp"
                       "ertyActivePortsForRouteConfiguration.\")";
                break;
            }
            _os_log_impl(&def_1E50E8, v424, OS_LOG_TYPE_ERROR, v843, __p, 0x12u);
            goto LABEL_1253;
          }
          uint64_t v831 = sub_32A48(13);
          v832 = sub_7D5E8(1, *(void **)v831, *(void *)(v831 + 8));
          v775 = v832;
          if (v832 && os_log_type_enabled(v832, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5705;
            v776 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActivePortsFo"
                   "rRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.\"";
            goto LABEL_1233;
          }
LABEL_1234:

          v833 = __cxa_allocate_exception(0x10uLL);
          *(void *)v833 = &off_6414D8;
          v833[2] = 1852797029;
        }
        uint64_t v822 = sub_32A48(13);
        v823 = sub_7D5E8(1, *(void **)v822, *(void *)(v822 + 8));
        v775 = v823;
        if (!v823 || !os_log_type_enabled(v823, OS_LOG_TYPE_ERROR)) {
          goto LABEL_1234;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5701;
        v776 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActivePortsForRou"
               "teConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.\"";
      }
LABEL_1233:
      _os_log_impl(&def_1E50E8, v775, OS_LOG_TYPE_ERROR, v776, buf, 0x12u);
      goto LABEL_1234;
    }
    if (v19 != 1634629490)
    {
      if (v19 != 1634756195) {
        goto LABEL_409;
      }
      unsigned int v86 = *a5;
      if (v86 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
      {
        uint64_t v494 = sub_32A48(13);
        int v359 = 561211770;
        v495 = sub_7D5E8(1, *(void **)v494, *(void *)(v494 + 8));
        if (v495)
        {
          v360 = v495;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v496 = v921[23];
            uint64_t v497 = *(unsigned char **)v921;
            unsigned int v498 = *a5;
            int v499 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            uint64_t v500 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v496 < 0) {
              uint64_t v500 = v497;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5635;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v500;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v498;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v499;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      if ((a3 | 4) != 4)
      {
        uint64_t v868 = sub_32A48(13);
        v869 = sub_7D5E8(1, *(void **)v868, *(void *)(v868 + 8));
        v647 = v869;
        if (v869 && os_log_type_enabled(v869, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5636;
          _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_1311;
      }
      v903.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      LOWORD(v903.__r_.__value_.__r.__words[1]) = 257;
      *(void *)AudioObjectPropertyAddress buf = sub_30F3F8(a1, a3, (unsigned int *)Mutable);
      *(void *)&buf[8] = v87;
      sub_F2720(v901, *(void *)(a1 + 216) + 8);
      sub_F26A4((uint64_t)v921, (uint64_t)buf, (uint64_t)v901);
      if (v901[16]) {
        sub_80594((uint64_t)v901);
      }
      if (!Mutable)
      {
        sub_302080((uint64_t)buf, a1, *(void **)(a1 + 120));
        sub_2EB458((uint64_t)&v903, (uint64_t)buf);
        sub_3D61C((uint64_t)buf);
        goto LABEL_607;
      }
      int v88 = 1852793716;
      *(_DWORD *)std::string __p = 1852796517;
      memset(&__p[8], 0, 24);
      *(void *)&unsigned char __p[32] = 0x756E64656175746FLL;
      *(_OWORD *)&v919.__r_.__value_.__r.__words[1] = 0uLL;
      v919.__r_.__value_.__r.__words[0] = (std::string::size_type)&v919.__r_.__value_.__l.__size_;
      *(void *)&v918[8] = 0;
      *(void *)&v918[16] = 0;
      *(void *)v918 = &v918[8];
      int v89 = *(_DWORD *)(a1 + 400);
      v906.__r_.__value_.__r.__words[0] = (std::string::size_type)&v906.__r_.__value_.__l.__size_;
      *(_OWORD *)&v906.__r_.__value_.__r.__words[1] = 0uLL;
      sub_30F620((uint64_t)buf, v921, &v919, (uint64_t)&v921[16], (uint64_t **)v918, (uint64_t)&v906, (uint64_t)__p, v89 != 0);
      sub_463E0((void *)v906.__r_.__value_.__l.__size_);
      sub_10E118(*(void **)&v918[8]);
      sub_10E118((void *)v919.__r_.__value_.__l.__size_);
      sub_147760((uint64_t)&v919, *(uint64_t **)(a1 + 112), (uint64_t)buf, &qword_6588A0, 0);
      switch(LODWORD(v919.__r_.__value_.__l.__data_))
      {
        case 0:
          sub_30FA38((uint64_t)v918, a1, (uint64_t *)&v919.__r_.__value_.__l.__size_, &qword_6588A0);
          sub_2EB458((uint64_t)&v903, (uint64_t)v918);
          sub_3D61C((uint64_t)v918);
          *(void *)v918 = &v919.__r_.__value_.__l.__size_;
          sub_1486D0((void ***)v918);
          sub_143D84((uint64_t)buf);
LABEL_607:
          uint64_t v300 = (uint64_t *)sub_32A48(2);
          if (sub_30FEC0(*v300, v300[1]))
          {
            if (Mutable) {
              sub_2417C(v918, *(unsigned int *)v921);
            }
            else {
              sub_21C8C(v918, "null");
            }
            sub_15885C(&v919, "Returning active ports for category [", (std::string *)v918);
            __n128 v319 = sub_1587FC((std::string *)buf, &v919, "]:");
            sub_30FED0((uint64_t *)__p, (CFArrayRef *)&v903, (uint64_t)buf, v319);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (SHIBYTE(v919.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v919.__r_.__value_.__l.__data_);
            }
            if ((v918[23] & 0x80000000) != 0) {
              operator delete(*(void **)v918);
            }
            for (iuint64_t i = *(void *)&__p[8]; (unsigned char *)ii != __p; iuint64_t i = *(void *)(ii + 8))
            {
              uint64_t v321 = sub_32A48(2);
              uint64_t v322 = sub_32A48(34);
              char v323 = 0;
              uint64_t v324 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v325 = *(void *)(v321 + 8);
              do
              {
                uint64_t v326 = *(int *)&buf[4 * v324];
                char v327 = v323;
                if (((v325 & v326) != 0) != ((*(void *)(v322 + 8) & v326) != 0))
                {
                  if ((v325 & v326) == 0) {
                    uint64_t v321 = v322;
                  }
                  if (*(void *)(v321 + 8)) {
                    goto LABEL_677;
                  }
                  goto LABEL_683;
                }
                char v323 = 1;
                uint64_t v324 = 1;
              }
              while ((v327 & 1) == 0);
              if ((v325 & 1) == 0) {
                continue;
              }
LABEL_677:
              uint64_t v328 = *(id *)v321;
              if (v328)
              {
                uint64_t v329 = v328;
                if (os_log_type_enabled(v328, OS_LOG_TYPE_DEBUG))
                {
                  long long v330 = (void *)(ii + 16);
                  if (*(char *)(ii + 39) < 0) {
                    long long v330 = (void *)*v330;
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 5661;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v330;
                  _os_log_impl(&def_1E50E8, v329, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
                }
              }
LABEL_683:
              ;
            }
            sub_16A560(__p);
          }
          if (v903.__r_.__value_.__r.__words[0])
          {
            CFRetain(v903.__r_.__value_.__l.__data_);
            std::string::size_type v331 = v903.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::size_type v331 = 0;
          }
          *(void *)a6 = v331;
          sub_463E0(*(void **)&v921[24]);
          long long v302 = &v903;
LABEL_689:
          sub_3D61C((uint64_t)v302);
          goto LABEL_693;
        case 2:
          uint64_t v797 = sub_32A48(13);
          v798 = sub_7D5E8(1, *(void **)v797, *(void *)(v797 + 8));
          v421 = v798;
          if (!v798 || !os_log_type_enabled(v798, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1331;
          }
          *(_DWORD *)v918 = 136315394;
          *(void *)&v918[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v918[12] = 1024;
          *(_DWORD *)&v918[14] = 5650;
          v799 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAudioPl"
                 "ugInPropertyActivePortsForCategory.\")";
          break;
        case 1:
          uint64_t v419 = sub_32A48(13);
          AudioObjectPropertySelector v420 = sub_7D5E8(1, *(void **)v419, *(void *)(v419 + 8));
          v421 = v420;
          if (v420 && os_log_type_enabled(v420, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v918 = 136315394;
            *(void *)&v918[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v918[12] = 1024;
            *(_DWORD *)&v918[14] = 5650;
            _os_log_impl(&def_1E50E8, v421, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyActivePortsForCategory.\")", v918, 0x12u);
            int v88 = 1852797556;
          }
          else
          {
            int v88 = 1852797556;
          }
LABEL_1331:

          v895 = __cxa_allocate_exception(0x10uLL);
          *(void *)v895 = &off_6414D8;
          v895[2] = v88;
        default:
          uint64_t v800 = sub_32A48(13);
          int v88 = 2003329396;
          v801 = sub_7D5E8(1, *(void **)v800, *(void *)(v800 + 8));
          v421 = v801;
          if (!v801 || !os_log_type_enabled(v801, OS_LOG_TYPE_ERROR)) {
            goto LABEL_1331;
          }
          *(_DWORD *)v918 = 136315394;
          *(void *)&v918[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v918[12] = 1024;
          *(_DWORD *)&v918[14] = 5650;
          v799 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInPropertyAc"
                 "tivePortsForCategory.\")";
          break;
      }
      _os_log_impl(&def_1E50E8, v421, OS_LOG_TYPE_ERROR, v799, v918, 0x12u);
      goto LABEL_1331;
    }
    sub_311150((os_signpost_id_t *)v896);
    unsigned int v161 = *a5;
    if (v161 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
    {
      uint64_t v652 = sub_32A48(13);
      v653 = sub_7D5E8(1, *(void **)v652, *(void *)(v652 + 8));
      v654 = v653;
      if (v653)
      {
        v655 = v653;
        if (os_log_type_enabled(v655, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
          int v656 = v921[23];
          v657 = *(unsigned char **)v921;
          unsigned int v658 = *a5;
          int v659 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
          v660 = v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v656 < 0) {
            v660 = v657;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5582;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v660;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v658;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v659;
          _os_log_impl(&def_1E50E8, v655, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if ((v921[23] & 0x80000000) != 0) {
            operator delete(*(void **)v921);
          }
        }
      }
      v661 = __cxa_allocate_exception(0x10uLL);
      *(void *)v661 = &off_6414D8;
      v661[2] = 561211770;
    }
    if ((a3 | 8) != 8)
    {
      uint64_t v884 = sub_32A48(13);
      v885 = sub_7D5E8(1, *(void **)v884, *(void *)(v884 + 8));
      v886 = v885;
      if (v885 && os_log_type_enabled(v885, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5583;
        _os_log_impl(&def_1E50E8, v886, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      v887 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v887, "Precondition failure.");
    }
    if (Mutable)
    {
      std::string::value_type v162 = 0;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      std::string::value_type v162 = 1;
    }
    theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    theDict.__r_.__value_.__s.__data_[8] = v162;
    theDict.__r_.__value_.__s.__data_[9] = v162;
    if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
    {
      uint64_t v686 = sub_32A48(13);
      v687 = sub_7D5E8(1, *(void **)v686, *(void *)(v686 + 8));
      v688 = v687;
      if (!v687 || !os_log_type_enabled(v687, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1126;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5591;
      v689 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"routable ports"))
    {
      uint64_t v712 = sub_32A48(13);
      v713 = sub_7D5E8(1, *(void **)v712, *(void *)(v712 + 8));
      v688 = v713;
      if (!v713 || !os_log_type_enabled(v713, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1126;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5595;
      v689 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"unroutable ports"))
    {
      uint64_t v721 = sub_32A48(13);
      v722 = sub_7D5E8(1, *(void **)v721, *(void *)(v721 + 8));
      v688 = v722;
      if (!v722 || !os_log_type_enabled(v722, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1126;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5599;
      v689 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"preferred sub-ports"))
    {
      uint64_t v725 = sub_32A48(13);
      v726 = sub_7D5E8(1, *(void **)v725, *(void *)(v725 + 8));
      v688 = v726;
      if (!v726 || !os_log_type_enabled(v726, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1126;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5603;
      v689 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"active data sources"))
    {
      uint64_t v729 = sub_32A48(13);
      v730 = sub_7D5E8(1, *(void **)v729, *(void *)(v729 + 8));
      v688 = v730;
      if (!v730 || !os_log_type_enabled(v730, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1126;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5607;
      v689 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.\"";
    }
    else
    {
      if (!CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"voice processing configuration"))
      {
        if (!CFDictionaryContainsKey((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"sub-port preferences"))
        {
          sub_2F69B0(buf, a1, (const __CFDictionary **)&theDict, 0, 1);
          if (v968) {
            AudioObjectPropertySelector v285 = (uint64_t *)v967;
          }
          else {
            AudioObjectPropertySelector v285 = &qword_6588A0;
          }
          sub_ED624((uint64_t)&v919, v285);
          sub_147760((uint64_t)v921, *(uint64_t **)(a1 + 112), (uint64_t)buf, &v919, 1);
          switch(*(_DWORD *)v921)
          {
            case 0:
              sub_30FA38((uint64_t)&cf, a1, (uint64_t *)&v921[8], &v919);
              uint64_t v286 = (uint64_t *)sub_32A48(2);
              if (sub_30FEC0(*v286, v286[1]))
              {
                sub_383858(&v903, (uint64_t)buf);
                sub_15885C(&v906, "Returning active non-wireless ports for category/mode ", &v903);
                __n128 v287 = sub_1587FC((std::string *)__p, &v906, ":");
                sub_30FED0((uint64_t *)v918, (CFArrayRef *)&cf, (uint64_t)__p, v287);
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v906.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v903.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v903.__r_.__value_.__l.__data_);
                }
                for (juint64_t j = *(void *)&v918[8]; (unsigned char *)jj != v918; juint64_t j = *(void *)(jj + 8))
                {
                  uint64_t v289 = sub_32A48(2);
                  uint64_t v290 = sub_32A48(34);
                  char v291 = 0;
                  uint64_t v292 = 0;
                  *(void *)std::string __p = 0x100000002;
                  uint64_t v293 = *(void *)(v289 + 8);
                  do
                  {
                    uint64_t v294 = *(int *)&__p[4 * v292];
                    char v295 = v291;
                    if (((v293 & v294) != 0) != ((*(void *)(v290 + 8) & v294) != 0))
                    {
                      if ((v293 & v294) == 0) {
                        uint64_t v289 = v290;
                      }
                      if (*(void *)(v289 + 8)) {
                        goto LABEL_596;
                      }
                      goto LABEL_602;
                    }
                    char v291 = 1;
                    uint64_t v292 = 1;
                  }
                  while ((v295 & 1) == 0);
                  if ((v293 & 1) == 0) {
                    continue;
                  }
LABEL_596:
                  v296 = *(id *)v289;
                  if (v296)
                  {
                    unsigned int v297 = v296;
                    if (os_log_type_enabled(v296, OS_LOG_TYPE_DEBUG))
                    {
                      __n128 v298 = (void *)(jj + 16);
                      if (*(char *)(jj + 39) < 0) {
                        __n128 v298 = (void *)*v298;
                      }
                      *(_DWORD *)std::string __p = 136315650;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&unsigned char __p[12] = 1024;
                      *(_DWORD *)&__p[14] = 5627;
                      *(_WORD *)&__p[18] = 2080;
                      *(void *)&__p[20] = v298;
                      _os_log_impl(&def_1E50E8, v297, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", __p, 0x1Cu);
                    }
                  }
LABEL_602:
                  ;
                }
                sub_16A560(v918);
              }
              if (cf)
              {
                CFRetain(cf);
                CFTypeRef v299 = cf;
              }
              else
              {
                CFTypeRef v299 = 0;
              }
              *(void *)a6 = v299;
              sub_3D61C((uint64_t)&cf);
              *(void *)std::string __p = &v921[8];
              sub_1486D0((void ***)__p);
              sub_7DB7C((void *)v919.__r_.__value_.__l.__size_);
              sub_2E9FD8((uint64_t)buf);
              sub_80594((uint64_t)&theDict);
              sub_311368((os_signpost_id_t *)v896);
              goto LABEL_693;
            case 2:
              uint64_t v759 = sub_32A48(13);
              int v399 = 1852793716;
              v760 = sub_7D5E8(1, *(void **)v759, *(void *)(v759 + 8));
              uint64_t v398 = v760;
              if (!v760 || !os_log_type_enabled(v760, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1142;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 5622;
              v761 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAud"
                     "ioPlugInPropertyActiveNonWirelessPortsForRouteConfiguration.\")";
              break;
            case 1:
              uint64_t v396 = sub_32A48(13);
              v397 = sub_7D5E8(1, *(void **)v396, *(void *)(v396 + 8));
              uint64_t v398 = v397;
              int v399 = 1852797556;
              if (v397 && os_log_type_enabled(v397, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 5622;
                _os_log_impl(&def_1E50E8, v398, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyActiveNonWirelessPortsForRouteConfiguration.\")", __p, 0x12u);
                int v399 = 1852797556;
              }
LABEL_1142:

              v764 = __cxa_allocate_exception(0x10uLL);
              *(void *)v764 = &off_6414D8;
              v764[2] = v399;
            default:
              uint64_t v762 = sub_32A48(13);
              int v399 = 2003329396;
              v763 = sub_7D5E8(1, *(void **)v762, *(void *)(v762 + 8));
              uint64_t v398 = v763;
              if (!v763 || !os_log_type_enabled(v763, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1142;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 5622;
              v761 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInProper"
                     "tyActiveNonWirelessPortsForRouteConfiguration.\")";
              break;
          }
          _os_log_impl(&def_1E50E8, v398, OS_LOG_TYPE_ERROR, v761, __p, 0x12u);
          goto LABEL_1142;
        }
        uint64_t v750 = sub_32A48(13);
        v751 = sub_7D5E8(1, *(void **)v750, *(void *)(v750 + 8));
        v688 = v751;
        if (v751 && os_log_type_enabled(v751, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5615;
          v689 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonWirele"
                 "ssPortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.\"";
          goto LABEL_1125;
        }
LABEL_1126:

        v752 = __cxa_allocate_exception(0x10uLL);
        *(void *)v752 = &off_6414D8;
        v752[2] = 1852797029;
      }
      uint64_t v745 = sub_32A48(13);
      v746 = sub_7D5E8(1, *(void **)v745, *(void *)(v745 + 8));
      v688 = v746;
      if (!v746 || !os_log_type_enabled(v746, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1126;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5611;
      v689 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyActiveNonWirelessPo"
             "rtsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.\"";
    }
LABEL_1125:
    _os_log_impl(&def_1E50E8, v688, OS_LOG_TYPE_ERROR, v689, buf, 0x12u);
    goto LABEL_1126;
  }
  if (v19 <= 1668575345)
  {
    if (v19 > 1667329391)
    {
      if (v19 != 1667329392)
      {
        if (v19 != 1668310627)
        {
          if (v19 != 1668313699) {
            goto LABEL_409;
          }
          sub_3137F0(&v897);
          unsigned int v68 = *a5;
          if (v68 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
          {
            uint64_t v635 = sub_32A48(13);
            v636 = sub_7D5E8(1, *(void **)v635, *(void *)(v635 + 8));
            v637 = v636;
            if (v636)
            {
              v638 = v636;
              if (os_log_type_enabled(v638, OS_LOG_TYPE_ERROR))
              {
                *(void *)std::string __p = *(void *)a2;
                *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
                int v639 = v921[23];
                v640 = *(unsigned char **)v921;
                unsigned int v641 = *a5;
                int v642 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
                v643 = v921;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                if (v639 < 0) {
                  v643 = v640;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6132;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v643;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v641;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v642;
                _os_log_impl(&def_1E50E8, v638, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                  buf,
                  0x28u);
                if ((v921[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v921);
                }
              }
            }
            v644 = __cxa_allocate_exception(0x10uLL);
            *(void *)v644 = &off_6414D8;
            v644[2] = 561211770;
          }
          if ((a3 | 8) != 8)
          {
            uint64_t v880 = sub_32A48(13);
            v881 = sub_7D5E8(1, *(void **)v880, *(void *)(v880 + 8));
            v882 = v881;
            if (v881 && os_log_type_enabled(v881, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6133;
              _os_log_impl(&def_1E50E8, v882, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }

            v883 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v883, "Precondition failure.");
          }
          CFTypeRef cf = Mutable;
          __int16 v905 = 0;
          if (!Mutable) {
            goto LABEL_414;
          }
          if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
          {
            uint64_t v769 = sub_32A48(13);
            v770 = sub_7D5E8(1, *(void **)v769, *(void *)(v769 + 8));
            v771 = v770;
            if (!v770 || !os_log_type_enabled(v770, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1229;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6142;
            v772 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.\"";
          }
          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"routable ports"))
          {
            uint64_t v783 = sub_32A48(13);
            v784 = sub_7D5E8(1, *(void **)v783, *(void *)(v783 + 8));
            v771 = v784;
            if (!v784 || !os_log_type_enabled(v784, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1229;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6146;
            v772 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"";
          }
          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"unroutable ports"))
          {
            uint64_t v793 = sub_32A48(13);
            v794 = sub_7D5E8(1, *(void **)v793, *(void *)(v793 + 8));
            v771 = v794;
            if (!v794 || !os_log_type_enabled(v794, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1229;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6150;
            v772 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.\"";
          }
          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"preferred sub-ports"))
          {
            uint64_t v806 = sub_32A48(13);
            v807 = sub_7D5E8(1, *(void **)v806, *(void *)(v806 + 8));
            v771 = v807;
            if (!v807 || !os_log_type_enabled(v807, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1229;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6154;
            v772 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.\"";
          }
          else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"active data sources"))
          {
            uint64_t v812 = sub_32A48(13);
            v813 = sub_7D5E8(1, *(void **)v812, *(void *)(v812 + 8));
            v771 = v813;
            if (!v813 || !os_log_type_enabled(v813, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1229;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6158;
            v772 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.\"";
          }
          else
          {
            if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"voice processing configuration"))
            {
              if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"sub-port preferences"))
              {
                if (cf)
                {
                  sub_2F69B0(buf, a1, (const __CFDictionary **)&cf, 0, 1);
                  goto LABEL_415;
                }
LABEL_414:
                sub_2F6834(buf, a1);
LABEL_415:
                sub_3036C0((uint64_t)v921, (uint64_t)buf);
                sub_2E9FD8((uint64_t)buf);
                memset(buf, 0, 24);
                *(_DWORD *)&uint8_t buf[40] = 3;
                v933 = 0;
                *(void *)&buf[56] = 0;
                *(void *)&uint8_t buf[48] = &buf[56];
                uint64_t v935 = 0;
                LODWORD(v934) = 44731048;
                *(_DWORD *)&unsigned char buf[24] = 1986295651;
                *(_DWORD *)&buf[28] = *(_DWORD *)&v921[4];
                unsigned char buf[32] = 1;
                sub_148758((uint64_t)&v919, *(uint64_t **)(a1 + 112), (uint64_t)v921, (uint64_t)buf);
                switch(LODWORD(v919.__r_.__value_.__l.__data_))
                {
                  case 0:
                    sub_313294((void *)*(unsigned int *)(a2 + 4), &v919.__r_.__value_.__l.__size_);
                    memset(__p, 0, 24);
                    strcpy(&__p[24], "cwdv");
                    unsigned char __p[32] = 0;
                    LODWORD(v912) = 3;
                    v914 = 0;
                    uint64_t v915 = 0;
                    v913 = &v914;
                    CFTypeRef v917 = 0;
                    int v916 = 44731050;
                    sub_2E3690((uint64_t *)v918, a1, (uint64_t)&v919.__r_.__value_.__l.__size_, (uint64_t)__p);
                    sub_470A4((uint64_t)__p);
                    sub_45120((uint64_t)v896, *(void **)v918, &v918[8]);
                    uint64_t v205 = sub_32A48(2);
                    uint64_t v206 = sub_32A48(34);
                    char v207 = 0;
                    uint64_t v208 = 0;
                    *(void *)std::string __p = 0x100000002;
                    uint64_t v209 = *(void *)(v205 + 8);
                    while (1)
                    {
                      uint64_t v210 = *(int *)&__p[4 * v208];
                      char v211 = v207;
                      if (((v209 & v210) != 0) != ((*(void *)(v206 + 8) & v210) != 0)) {
                        break;
                      }
                      char v207 = 1;
                      uint64_t v208 = 1;
                      if (v211) {
                        goto LABEL_489;
                      }
                    }
                    if ((v209 & v210) == 0) {
                      uint64_t v205 = v206;
                    }
LABEL_489:
                    v245 = sub_7D5E8(6, *(void **)v205, *(void *)(v205 + 8));
                    uint64_t v246 = v245;
                    if (v245)
                    {
                      v247 = v245;
                      if (os_log_type_enabled(v247, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v248 = &v906;
                        sub_383858(&v906, (uint64_t)v921);
                        if ((v906.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          uint64_t v248 = (std::string *)v906.__r_.__value_.__r.__words[0];
                        }
                        sub_2417C(&v903, *(_DWORD *)(a2 + 4));
                        int v249 = SHIBYTE(v903.__r_.__value_.__r.__words[2]);
                        std::string::size_type v250 = v903.__r_.__value_.__r.__words[0];
                        sub_168B00(&theDict, (const __CFArray *)v896[0]);
                        char v251 = &v903;
                        if (v249 < 0) {
                          char v251 = (std::string *)v250;
                        }
                        if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          int v252 = &theDict;
                        }
                        else {
                          int v252 = (std::string *)theDict.__r_.__value_.__r.__words[0];
                        }
                        *(_DWORD *)std::string __p = 136316162;
                        *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                        *(_WORD *)&unsigned char __p[12] = 1024;
                        *(_DWORD *)&__p[14] = 6187;
                        *(_WORD *)&__p[18] = 2080;
                        *(void *)&__p[20] = v248;
                        *(_WORD *)&__p[28] = 2080;
                        *(void *)&__p[30] = v251;
                        *(_WORD *)&__p[38] = 2080;
                        v912 = v252;
                        _os_log_impl(&def_1E50E8, v247, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning for category/mode: %s; scope: %s; connected ports: %s",
                          __p,
                          0x30u);
                        if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(theDict.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v903.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v903.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v906.__r_.__value_.__l.__data_);
                        }
                      }
                    }
                    if (v896[0])
                    {
                      CFRetain(v896[0]);
                      CFTypeRef v253 = v896[0];
                    }
                    else
                    {
                      CFTypeRef v253 = 0;
                    }
                    *(void *)a6 = v253;
                    sub_3D61C((uint64_t)v896);
                    sub_463E0(*(void **)&v918[8]);
                    sub_8108((uint64_t *)&v919.__r_.__value_.__l.__size_);
                    sub_470A4((uint64_t)buf);
                    sub_143D84((uint64_t)v921);
                    sub_80594((uint64_t)&cf);
                    sub_313A08(&v897);
                    goto LABEL_693;
                  case 2:
                    uint64_t v733 = sub_32A48(13);
                    int v387 = 1852793716;
                    v734 = sub_7D5E8(1, *(void **)v733, *(void *)(v733 + 8));
                    v386 = v734;
                    if (!v734 || !os_log_type_enabled(v734, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_1105;
                    }
                    *(_DWORD *)std::string __p = 136315394;
                    *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                    *(_WORD *)&unsigned char __p[12] = 1024;
                    *(_DWORD *)&__p[14] = 6178;
                    v735 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirt"
                           "ualAudioPlugInPropertyConnectedPortsForCategory.\")";
                    break;
                  case 1:
                    uint64_t v384 = sub_32A48(13);
                    v385 = sub_7D5E8(1, *(void **)v384, *(void *)(v384 + 8));
                    v386 = v385;
                    int v387 = 1852797556;
                    if (v385 && os_log_type_enabled(v385, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)std::string __p = 136315394;
                      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                      *(_WORD *)&unsigned char __p[12] = 1024;
                      *(_DWORD *)&__p[14] = 6178;
                      _os_log_impl(&def_1E50E8, v386, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyConnectedPortsForCategory.\")", __p, 0x12u);
                      int v387 = 1852797556;
                    }
LABEL_1105:

                    v738 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v738 = &off_6414D8;
                    v738[2] = v387;
                  default:
                    uint64_t v736 = sub_32A48(13);
                    int v387 = 2003329396;
                    v737 = sub_7D5E8(1, *(void **)v736, *(void *)(v736 + 8));
                    v386 = v737;
                    if (!v737 || !os_log_type_enabled(v737, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_1105;
                    }
                    *(_DWORD *)std::string __p = 136315394;
                    *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                    *(_WORD *)&unsigned char __p[12] = 1024;
                    *(_DWORD *)&__p[14] = 6178;
                    v735 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugIn"
                           "PropertyConnectedPortsForCategory.\")";
                    break;
                }
                _os_log_impl(&def_1E50E8, v386, OS_LOG_TYPE_ERROR, v735, __p, 0x12u);
                goto LABEL_1105;
              }
              uint64_t v828 = sub_32A48(13);
              v829 = sub_7D5E8(1, *(void **)v828, *(void *)(v828 + 8));
              v771 = v829;
              if (v829 && os_log_type_enabled(v829, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 6166;
                v772 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyConnected"
                       "PortsForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.\"";
                goto LABEL_1228;
              }
LABEL_1229:

              v830 = __cxa_allocate_exception(0x10uLL);
              *(void *)v830 = &off_6414D8;
              v830[2] = 1852797029;
            }
            uint64_t v820 = sub_32A48(13);
            v821 = sub_7D5E8(1, *(void **)v820, *(void *)(v820 + 8));
            v771 = v821;
            if (!v821 || !os_log_type_enabled(v821, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1229;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6162;
            v772 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyConnectedPort"
                   "sForRouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.\"";
          }
LABEL_1228:
          _os_log_impl(&def_1E50E8, v771, OS_LOG_TYPE_ERROR, v772, buf, 0x12u);
          goto LABEL_1229;
        }
        unsigned int v164 = *a5;
        if (v164 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
        {
          uint64_t v592 = sub_32A48(13);
          int v359 = 561211770;
          v593 = sub_7D5E8(1, *(void **)v592, *(void *)(v592 + 8));
          if (v593)
          {
            v360 = v593;
            if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
            {
              *(void *)std::string __p = *(void *)a2;
              *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
              int v594 = v921[23];
              v595 = *(unsigned char **)v921;
              unsigned int v596 = *a5;
              int v597 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
              v598 = v921;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              if (v594 < 0) {
                v598 = v595;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6101;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v598;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v596;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v597;
              v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size "
                     "(passed: %u; required: %u).";
              goto LABEL_970;
            }
            goto LABEL_973;
          }
          goto LABEL_739;
        }
        if ((a3 | 4) != 4)
        {
          uint64_t v878 = sub_32A48(13);
          v879 = sub_7D5E8(1, *(void **)v878, *(void *)(v878 + 8));
          v647 = v879;
          if (v879 && os_log_type_enabled(v879, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6102;
            _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          goto LABEL_1311;
        }
        *(void *)AudioObjectPropertyAddress buf = sub_30F3F8(a1, a3, (unsigned int *)Mutable);
        *(void *)&buf[8] = v165;
        sub_F2720(v898, *(void *)(a1 + 216) + 8);
        sub_F26A4((uint64_t)&v919, (uint64_t)buf, (uint64_t)v898);
        if (v898[16]) {
          sub_80594((uint64_t)v898);
        }
        int v166 = 1852793716;
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)&v919.__r_.__value_.__l.__data_;
        *(void *)&unsigned char buf[24] = 0;
        *(void *)&buf[16] = &buf[24];
        *(void *)&buf[56] = 0;
        *(void *)&uint8_t buf[48] = 0;
        *(void *)&unsigned char buf[32] = 0;
        *(void *)&uint8_t buf[40] = &buf[48];
        uint64_t v934 = 0;
        v933 = &v934;
        uint64_t v938 = 0;
        uint64_t v937 = 0;
        uint64_t v935 = 0;
        v936 = &v937;
        uint64_t v941 = 0;
        uint64_t v940 = 0;
        v939 = &v940;
        char v942 = 0;
        char v943 = 0;
        int v944 = 1668248944;
        int v945 = 1852796517;
        uint64_t v947 = 0;
        uint64_t v946 = 0;
        uint64_t v948 = 0;
        uint64_t v949 = 0x756E64656175746FLL;
        long long v950 = 0u;
        long long v951 = 0u;
        long long v952 = 0u;
        long long v953 = 0u;
        long long v954 = 0u;
        uint64_t v955 = 1065353216;
        long long v956 = 0u;
        long long v957 = 0u;
        uint64_t v958 = 1065353216;
        long long v960 = 0u;
        long long v959 = 0u;
        uint64_t v961 = 1065353216;
        char v962 = 0;
        char v963 = 0;
        char v965 = 0;
        char v966 = 0;
        int v964 = 0;
        memset(v921, 0, 24);
        LODWORD(v923) = 3;
        uint64_t v926 = 0;
        uint64_t v925 = 0;
        v924 = &v925;
        uint64_t v928 = 0;
        int v927 = 44731048;
        *(_DWORD *)&v921[24] = 1986295651;
        *(_DWORD *)&v921[28] = HIDWORD(v919.__r_.__value_.__r.__words[0]);
        v921[32] = 1;
        sub_148758((uint64_t)v918, *(uint64_t **)(a1 + 112), (uint64_t)buf, (uint64_t)v921);
        switch(*(_DWORD *)v918)
        {
          case 0:
            sub_313294((void *)*(unsigned int *)(a2 + 4), &v918[8]);
            memset(__p, 0, 24);
            strcpy(&__p[24], "cwdv");
            unsigned char __p[32] = 0;
            LODWORD(v912) = 3;
            v914 = 0;
            uint64_t v915 = 0;
            v913 = &v914;
            CFTypeRef v917 = 0;
            int v916 = 44731050;
            sub_2E3690((uint64_t *)&v906, a1, (uint64_t)&v918[8], (uint64_t)__p);
            sub_470A4((uint64_t)__p);
            sub_45120((uint64_t)&cf, v906.__r_.__value_.__l.__data_, &v906.__r_.__value_.__l.__size_);
            uint64_t v167 = sub_32A48(2);
            uint64_t v168 = sub_32A48(34);
            char v169 = 0;
            uint64_t v170 = 0;
            *(void *)std::string __p = 0x100000002;
            uint64_t v171 = *(void *)(v167 + 8);
            while (1)
            {
              uint64_t v172 = *(int *)&__p[4 * v170];
              char v173 = v169;
              if (((v171 & v172) != 0) != ((*(void *)(v168 + 8) & v172) != 0)) {
                break;
              }
              char v169 = 1;
              uint64_t v170 = 1;
              if (v173) {
                goto LABEL_473;
              }
            }
            if ((v171 & v172) == 0) {
              uint64_t v167 = v168;
            }
LABEL_473:
            id v237 = sub_7D5E8(6, *(void **)v167, *(void *)(v167 + 8));
            uint64_t v238 = v237;
            if (v237)
            {
              uint64_t v239 = v237;
              if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(&v903, v919.__r_.__value_.__l.__data_);
                int v240 = SHIBYTE(v903.__r_.__value_.__r.__words[2]);
                std::string::size_type v241 = v903.__r_.__value_.__r.__words[0];
                sub_168B00(&theDict, (const __CFArray *)cf);
                id v242 = &v903;
                if (v240 < 0) {
                  id v242 = (std::string *)v241;
                }
                if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v243 = &theDict;
                }
                else {
                  long long v243 = (std::string *)theDict.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string __p = 136315906;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 6122;
                *(_WORD *)&__p[18] = 2080;
                *(void *)&__p[20] = v242;
                *(_WORD *)&__p[28] = 2080;
                *(void *)&__p[30] = v243;
                _os_log_impl(&def_1E50E8, v239, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning connected ports for category '%s': %s", __p, 0x26u);
                if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(theDict.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v903.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v903.__r_.__value_.__l.__data_);
                }
              }
            }
            if (cf)
            {
              CFRetain(cf);
              CFTypeRef v244 = cf;
            }
            else
            {
              CFTypeRef v244 = 0;
            }
            *(void *)a6 = v244;
            sub_3D61C((uint64_t)&cf);
            sub_463E0((void *)v906.__r_.__value_.__l.__size_);
LABEL_629:
            sub_8108((uint64_t *)&v918[8]);
            sub_470A4((uint64_t)v921);
            sub_143D84((uint64_t)buf);
            uint64_t v301 = v920;
            goto LABEL_630;
          case 2:
            uint64_t v707 = sub_32A48(13);
            v708 = sub_7D5E8(1, *(void **)v707, *(void *)(v707 + 8));
            v380 = v708;
            if (!v708 || !os_log_type_enabled(v708, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1327;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 6113;
            v709 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAudio"
                   "PlugInPropertyConnectedPortsForCategory.\")";
            break;
          case 1:
            uint64_t v378 = sub_32A48(13);
            v379 = sub_7D5E8(1, *(void **)v378, *(void *)(v378 + 8));
            v380 = v379;
            if (v379 && os_log_type_enabled(v379, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 6113;
              _os_log_impl(&def_1E50E8, v380, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyConnectedPortsForCategory.\")", __p, 0x12u);
              int v166 = 1852797556;
            }
            else
            {
              int v166 = 1852797556;
            }
LABEL_1327:

            v893 = __cxa_allocate_exception(0x10uLL);
            *(void *)v893 = &off_6414D8;
            v893[2] = v166;
          default:
            uint64_t v710 = sub_32A48(13);
            int v166 = 2003329396;
            v711 = sub_7D5E8(1, *(void **)v710, *(void *)(v710 + 8));
            v380 = v711;
            if (!v711 || !os_log_type_enabled(v711, OS_LOG_TYPE_ERROR)) {
              goto LABEL_1327;
            }
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 6113;
            v709 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInProperty"
                   "ConnectedPortsForCategory.\")";
            break;
        }
        _os_log_impl(&def_1E50E8, v380, OS_LOG_TYPE_ERROR, v709, __p, 0x12u);
        goto LABEL_1327;
      }
LABEL_166:
      uint64_t v75 = sub_32A48(2);
      uint64_t v76 = sub_32A48(34);
      char v77 = 0;
      uint64_t v78 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v79 = *(void *)(v75 + 8);
      while (1)
      {
        uint64_t v80 = *(int *)&buf[4 * v78];
        char v81 = v77;
        if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
          break;
        }
        char v77 = 1;
        uint64_t v78 = 1;
        if (v81) {
          goto LABEL_172;
        }
      }
      if ((v79 & v80) == 0) {
        uint64_t v75 = v76;
      }
LABEL_172:
      id v82 = *(id *)v75;
      uint64_t v83 = v82;
      if (v82)
      {
        uint64_t v84 = v82;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v921, *(_DWORD *)a2);
          id v85 = v921[23] >= 0 ? v921 : *(unsigned char **)v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6307;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v85;
          _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d GetPropertyData() unsupported for '%s'", buf, 0x1Cu);
          if ((v921[23] & 0x80000000) != 0) {
            operator delete(*(void **)v921);
          }
        }
      }
      goto LABEL_693;
    }
    if (v19 != 1651077731)
    {
      if (v19 == 1651664755)
      {
        unsigned int v91 = *a5;
        if (v91 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
        {
          int v22 = MGGetBoolAnswer();
          goto LABEL_198;
        }
        uint64_t v508 = sub_32A48(13);
        int v359 = 561211770;
        v509 = sub_7D5E8(1, *(void **)v508, *(void *)(v508 + 8));
        if (v509)
        {
          v360 = v509;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v510 = v921[23];
            uint64_t v511 = *(unsigned char **)v921;
            unsigned int v512 = *a5;
            int v513 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v514 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v510 < 0) {
              v514 = v511;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6313;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v514;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v512;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v513;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
            goto LABEL_970;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
      goto LABEL_409;
    }
    sub_313424((os_signpost_id_t *)&cf);
    unsigned int v195 = *a5;
    if (v195 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
    {
      uint64_t v664 = sub_32A48(13);
      v665 = sub_7D5E8(1, *(void **)v664, *(void *)(v664 + 8));
      v666 = v665;
      if (v665)
      {
        v667 = v665;
        if (os_log_type_enabled(v667, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
          int v668 = v921[23];
          v669 = *(unsigned char **)v921;
          unsigned int v670 = *a5;
          int v671 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
          v672 = v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v668 < 0) {
            v672 = v669;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5882;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v672;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v670;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v671;
          _os_log_impl(&def_1E50E8, v667, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if ((v921[23] & 0x80000000) != 0) {
            operator delete(*(void **)v921);
          }
        }
      }
      v673 = __cxa_allocate_exception(0x10uLL);
      *(void *)v673 = &off_6414D8;
      v673[2] = 561211770;
    }
    if ((a3 | 8) != 8)
    {
      uint64_t v888 = sub_32A48(13);
      v889 = sub_7D5E8(1, *(void **)v888, *(void *)(v888 + 8));
      v890 = v889;
      if (v889 && os_log_type_enabled(v889, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5883;
        _os_log_impl(&def_1E50E8, v890, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      v891 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v891, "Precondition failure.");
    }
    v903.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    LOWORD(v903.__r_.__value_.__r.__words[1]) = 0;
    if (!Mutable) {
      goto LABEL_420;
    }
    if (CFDictionaryContainsKey(Mutable, @"overridden ports"))
    {
      uint64_t v777 = sub_32A48(13);
      v778 = sub_7D5E8(1, *(void **)v777, *(void *)(v777 + 8));
      v779 = v778;
      if (!v778 || !os_log_type_enabled(v778, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1239;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5892;
      v780 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)v903.__r_.__value_.__l.__data_, @"routable ports"))
    {
      uint64_t v787 = sub_32A48(13);
      v788 = sub_7D5E8(1, *(void **)v787, *(void *)(v787 + 8));
      v779 = v788;
      if (!v788 || !os_log_type_enabled(v788, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1239;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5896;
      v780 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)v903.__r_.__value_.__l.__data_, @"unroutable ports"))
    {
      uint64_t v795 = sub_32A48(13);
      v796 = sub_7D5E8(1, *(void **)v795, *(void *)(v795 + 8));
      v779 = v796;
      if (!v796 || !os_log_type_enabled(v796, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1239;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5900;
      v780 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)v903.__r_.__value_.__l.__data_, @"preferred sub-ports"))
    {
      uint64_t v808 = sub_32A48(13);
      v809 = sub_7D5E8(1, *(void **)v808, *(void *)(v808 + 8));
      v779 = v809;
      if (!v809 || !os_log_type_enabled(v809, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1239;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5904;
      v780 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.\"";
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)v903.__r_.__value_.__l.__data_, @"active data sources"))
    {
      uint64_t v816 = sub_32A48(13);
      v817 = sub_7D5E8(1, *(void **)v816, *(void *)(v816 + 8));
      v779 = v817;
      if (!v817 || !os_log_type_enabled(v817, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1239;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5908;
      v780 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.\"";
    }
    else
    {
      if (!CFDictionaryContainsKey((CFDictionaryRef)v903.__r_.__value_.__l.__data_, @"voice processing configuration"))
      {
        if (!CFDictionaryContainsKey((CFDictionaryRef)v903.__r_.__value_.__l.__data_, @"sub-port preferences"))
        {
          if (v903.__r_.__value_.__r.__words[0])
          {
            sub_2F69B0(buf, a1, (const __CFDictionary **)&v903, 0, 1);
            goto LABEL_421;
          }
LABEL_420:
          sub_2F6834(buf, a1);
LABEL_421:
          sub_3036C0((uint64_t)v921, (uint64_t)buf);
          sub_2E9FD8((uint64_t)buf);
          memset(buf, 0, 24);
          *(_DWORD *)&uint8_t buf[40] = 3;
          v933 = 0;
          *(void *)&buf[56] = 0;
          *(void *)&uint8_t buf[48] = &buf[56];
          uint64_t v935 = 0;
          LODWORD(v934) = 44698266;
          *(_DWORD *)&unsigned char buf[24] = 1986295651;
          *(_DWORD *)&buf[28] = *(_DWORD *)&v921[4];
          unsigned char buf[32] = 1;
          sub_148758((uint64_t)&v919, *(uint64_t **)(a1 + 112), (uint64_t)v921, (uint64_t)buf);
          switch(LODWORD(v919.__r_.__value_.__l.__data_))
          {
            case 0:
              sub_313294((void *)0x6F757470, &v919.__r_.__value_.__l.__size_);
              theDict.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
              LOWORD(theDict.__r_.__value_.__r.__words[1]) = 257;
              sub_BCAD8((uint64_t *)v918, (uint64_t)&v919.__r_.__value_.__l.__size_, "", 5934);
              for (kuint64_t k = *(void *)&v918[8]; (unsigned char *)kk != v918; kuint64_t k = *(void *)(kk + 8))
              {
                uint64_t v213 = *(void *)(kk + 16);
                memset(__p, 0, 24);
                strcpy(&__p[24], "cwdv");
                unsigned char __p[32] = 0;
                LODWORD(v912) = 3;
                v914 = 0;
                uint64_t v915 = 0;
                v913 = &v914;
                CFTypeRef v917 = 0;
                int v916 = 44731050;
                int v214 = sub_E00F4(*(void *)(a1 + 128), v213, (uint64_t)__p);
                sub_451D0((uint64_t)&theDict, v214);
                if (v917) {
                  CFRelease(v917);
                }
                sub_463E0(v914);
                if (*(void *)__p)
                {
                  *(void *)&__p[8] = *(void *)__p;
                  operator delete(*(void **)__p);
                }
              }
              sub_B8E4((uint64_t *)v918);
              uint64_t v215 = sub_32A48(2);
              uint64_t v216 = sub_32A48(34);
              char v217 = 0;
              uint64_t v218 = 0;
              *(void *)std::string __p = 0x100000002;
              uint64_t v219 = *(void *)(v215 + 8);
              while (1)
              {
                uint64_t v220 = *(int *)&__p[4 * v218];
                char v221 = v217;
                if (((v219 & v220) != 0) != ((*(void *)(v216 + 8) & v220) != 0)) {
                  break;
                }
                char v217 = 1;
                uint64_t v218 = 1;
                if (v221) {
                  goto LABEL_525;
                }
              }
              if ((v219 & v220) == 0) {
                uint64_t v215 = v216;
              }
LABEL_525:
              char v262 = sub_7D5E8(6, *(void **)v215, *(void *)(v215 + 8));
              std::string v263 = v262;
              if (v262)
              {
                v264 = v262;
                if (os_log_type_enabled(v264, OS_LOG_TYPE_DEBUG))
                {
                  sub_2417C(v918, *(unsigned int *)v921);
                  int v265 = v918[23];
                  uint64_t v266 = *(unsigned char **)v918;
                  sub_168B00(&v906, (const __CFArray *)theDict.__r_.__value_.__l.__data_);
                  __int16 v267 = v918;
                  if (v265 < 0) {
                    __int16 v267 = v266;
                  }
                  if ((v906.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    CFMutableDictionaryRef v268 = &v906;
                  }
                  else {
                    CFMutableDictionaryRef v268 = (std::string *)v906.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)std::string __p = 136315906;
                  *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&unsigned char __p[12] = 1024;
                  *(_DWORD *)&__p[14] = 5941;
                  *(_WORD *)&__p[18] = 2080;
                  *(void *)&__p[20] = v267;
                  *(_WORD *)&__p[28] = 2080;
                  *(void *)&__p[30] = v268;
                  _os_log_impl(&def_1E50E8, v264, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning built-in ports for category '%s': %s", __p, 0x26u);
                  if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v906.__r_.__value_.__l.__data_);
                  }
                  if ((v918[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v918);
                  }
                }
              }
              if (theDict.__r_.__value_.__r.__words[0])
              {
                CFRetain(theDict.__r_.__value_.__l.__data_);
                std::string::size_type v269 = theDict.__r_.__value_.__r.__words[0];
              }
              else
              {
                std::string::size_type v269 = 0;
              }
              *(void *)a6 = v269;
              sub_3D61C((uint64_t)&theDict);
              sub_8108((uint64_t *)&v919.__r_.__value_.__l.__size_);
              sub_470A4((uint64_t)buf);
              sub_143D84((uint64_t)v921);
              sub_80594((uint64_t)&v903);
              sub_31363C((os_signpost_id_t *)&cf);
              goto LABEL_693;
            case 2:
              uint64_t v739 = sub_32A48(13);
              int v391 = 1852793716;
              v740 = sub_7D5E8(1, *(void **)v739, *(void *)(v739 + 8));
              v390 = v740;
              if (!v740 || !os_log_type_enabled(v740, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1113;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 5929;
              v741 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAud"
                     "ioPlugInPropertyBuiltInPortsForCategory.\")";
              break;
            case 1:
              uint64_t v388 = sub_32A48(13);
              uint64_t v389 = sub_7D5E8(1, *(void **)v388, *(void *)(v388 + 8));
              v390 = v389;
              int v391 = 1852797556;
              if (v389 && os_log_type_enabled(v389, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 5929;
                _os_log_impl(&def_1E50E8, v390, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyBuiltInPortsForCategory.\")", __p, 0x12u);
                int v391 = 1852797556;
              }
LABEL_1113:

              v744 = __cxa_allocate_exception(0x10uLL);
              *(void *)v744 = &off_6414D8;
              v744[2] = v391;
            default:
              uint64_t v742 = sub_32A48(13);
              int v391 = 2003329396;
              v743 = sub_7D5E8(1, *(void **)v742, *(void *)(v742 + 8));
              v390 = v743;
              if (!v743 || !os_log_type_enabled(v743, OS_LOG_TYPE_ERROR)) {
                goto LABEL_1113;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 5929;
              v741 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInProper"
                     "tyBuiltInPortsForCategory.\")";
              break;
          }
          _os_log_impl(&def_1E50E8, v390, OS_LOG_TYPE_ERROR, v741, __p, 0x12u);
          goto LABEL_1113;
        }
        uint64_t v834 = sub_32A48(13);
        v835 = sub_7D5E8(1, *(void **)v834, *(void *)(v834 + 8));
        v779 = v835;
        if (v835 && os_log_type_enabled(v835, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5916;
          v780 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyBuiltInPortsFor"
                 "RouteConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.\"";
          goto LABEL_1238;
        }
LABEL_1239:

        v836 = __cxa_allocate_exception(0x10uLL);
        *(void *)v836 = &off_6414D8;
        v836[2] = 1852797029;
      }
      uint64_t v824 = sub_32A48(13);
      v825 = sub_7D5E8(1, *(void **)v824, *(void *)(v824 + 8));
      v779 = v825;
      if (!v825 || !os_log_type_enabled(v825, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1239;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5912;
      v780 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyBuiltInPortsForRout"
             "eConfiguration doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.\"";
    }
LABEL_1238:
    _os_log_impl(&def_1E50E8, v779, OS_LOG_TYPE_ERROR, v780, buf, 0x12u);
    goto LABEL_1239;
  }
  if (v19 > 1701013874)
  {
    if (v19 != 1701013875)
    {
      if (v19 != 1701737068)
      {
        if (v19 != 1751480691) {
          goto LABEL_409;
        }
        goto LABEL_153;
      }
      int v101 = *(unsigned __int8 *)(a1 + 488);
      goto LABEL_460;
    }
    unsigned int v159 = *a5;
    if (v159 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
    {
      uint64_t v571 = sub_32A48(13);
      int v359 = 561211770;
      uint64_t v572 = sub_7D5E8(1, *(void **)v571, *(void *)(v571 + 8));
      if (v572)
      {
        v360 = v572;
        if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
          int v573 = v921[23];
          v574 = *(unsigned char **)v921;
          unsigned int v575 = *a5;
          int v576 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
          v577 = v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v573 < 0) {
            v577 = v574;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6353;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v577;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v575;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v576;
          v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_970;
        }
        goto LABEL_973;
      }
      goto LABEL_739;
    }
    if ((a3 | 8) != 8)
    {
      uint64_t v876 = sub_32A48(13);
      v877 = sub_7D5E8(1, *(void **)v876, *(void *)(v876 + 8));
      v647 = v877;
      if (v877 && os_log_type_enabled(v877, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6354;
        _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      goto LABEL_1311;
    }
    *(_DWORD *)a6 = 0;
    *(void *)std::string __p = Mutable;
    *(_WORD *)&__p[8] = 0;
    if (Mutable) {
      sub_2F69B0(buf, a1, (const __CFDictionary **)__p, 0, 1);
    }
    else {
      sub_2F6834(buf, a1);
    }
    sub_3036C0((uint64_t)v921, (uint64_t)buf);
    sub_2E9FD8((uint64_t)buf);
    if (*(_DWORD *)v921 == 1668309362 && *(_DWORD *)&v921[4] == 1768776806 && !v921[12]) {
      *(_DWORD *)a6 = 1;
    }
    goto LABEL_544;
  }
  if (v19 != 1668575346)
  {
    if (v19 != 1684632434)
    {
      if (v19 == 1685283955)
      {
        unsigned int v20 = *a5;
        if (v20 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
        {
          uint64_t v21 = (unsigned __int8 *)sub_F820C();
          int v22 = sub_F8434(v21);
LABEL_198:
          *(_DWORD *)a6 = v22;
          goto LABEL_693;
        }
        uint64_t v445 = sub_32A48(13);
        int v359 = 561211770;
        int v446 = sub_7D5E8(1, *(void **)v445, *(void *)(v445 + 8));
        if (v446)
        {
          v360 = v446;
          if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
          {
            *(void *)std::string __p = *(void *)a2;
            *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
            int v447 = v921[23];
            AudioObjectPropertySelector v448 = *(unsigned char **)v921;
            unsigned int v449 = *a5;
            int v450 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
            v451 = v921;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            if (v447 < 0) {
              v451 = v448;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6247;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v451;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v449;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v450;
            v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (p"
                   "assed: %u; required: %u).";
LABEL_970:
            v366 = v360;
            uint32_t v367 = 40;
            goto LABEL_971;
          }
          goto LABEL_973;
        }
        goto LABEL_739;
      }
LABEL_409:
      sub_3A66B8(a1, (_DWORD *)a2, a3, (uint64_t)Mutable, a5, a6);
      goto LABEL_693;
    }
    unsigned int v182 = *a5;
    if (v182 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
    {
      uint64_t v606 = sub_32A48(13);
      int v359 = 561211770;
      v607 = sub_7D5E8(1, *(void **)v606, *(void *)(v606 + 8));
      if (v607)
      {
        v360 = v607;
        if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
          int v608 = v921[23];
          v609 = *(unsigned char **)v921;
          unsigned int v610 = *a5;
          int v611 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
          char v612 = v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          if (v608 < 0) {
            char v612 = v609;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5733;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v612;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v610;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v611;
          v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pas"
                 "sed: %u; required: %u).";
          goto LABEL_970;
        }
LABEL_973:

LABEL_974:
        v634 = __cxa_allocate_exception(0x10uLL);
        *(void *)v634 = &off_6414D8;
        v634[2] = v359;
      }
LABEL_739:
      v360 = 0;
      goto LABEL_974;
    }
    if (a3 == 8 && Mutable)
    {
      *(void *)AudioObjectPropertyAddress buf = Mutable;
      *(_WORD *)&buf[8] = 0;
      int v71 = sub_31151C(a1, (CFDictionaryRef *)buf);
      char v72 = buf;
      goto LABEL_378;
    }
    uint64_t v677 = sub_32A48(13);
    int v359 = 561211770;
    v678 = sub_7D5E8(1, *(void **)v677, *(void *)(v677 + 8));
    if (!v678) {
      goto LABEL_739;
    }
    v360 = v678;
    if (!os_log_type_enabled(v360, OS_LOG_TYPE_ERROR)) {
      goto LABEL_973;
    }
    *(void *)std::string __p = *(void *)a2;
    *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
    if (v921[23] >= 0) {
      v679 = v921;
    }
    else {
      v679 = *(unsigned char **)v921;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5735;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v679;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 8;
    *(_WORD *)&buf[34] = 2080;
    *(void *)&buf[36] = "non-";
    *(_WORD *)&buf[44] = 1024;
    *(_DWORD *)&buf[46] = a3;
    *(_WORD *)&buf[50] = 2048;
    *(void *)&buf[52] = Mutable;
    v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is"
           " %sNULL (inQualifierDataSize: %u; inQualifierData: %p).";
    goto LABEL_1027;
  }
  unsigned int v136 = *a5;
  if (v136 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable))
  {
    uint64_t v557 = sub_32A48(13);
    int v359 = 561211770;
    uint64_t v558 = sub_7D5E8(1, *(void **)v557, *(void *)(v557 + 8));
    if (v558)
    {
      v360 = v558;
      if (os_log_type_enabled(v360, OS_LOG_TYPE_ERROR))
      {
        *(void *)std::string __p = *(void *)a2;
        *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
        int v559 = v921[23];
        v560 = *(unsigned char **)v921;
        unsigned int v561 = *a5;
        int v562 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(*(void *)a1 + 48))(a1, a2, a3, Mutable);
        v563 = v921;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        if (v559 < 0) {
          v563 = v560;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6024;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v563;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v561;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v562;
        v365 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passe"
               "d: %u; required: %u).";
        goto LABEL_970;
      }
      goto LABEL_973;
    }
    goto LABEL_739;
  }
  if ((a3 | 4) != 4)
  {
    uint64_t v874 = sub_32A48(13);
    v875 = sub_7D5E8(1, *(void **)v874, *(void *)(v874 + 8));
    v647 = v875;
    if (v875 && os_log_type_enabled(v875, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6025;
      _os_log_impl(&def_1E50E8, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_1311:

    v356 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v356, "Precondition failure.");
    goto LABEL_723;
  }
  *(void *)&__p[8] = 0;
  *(void *)&__p[16] = 0;
  *(void *)std::string __p = &__p[8];
  *(void *)v921 = sub_30F3F8(a1, a3, (unsigned int *)Mutable);
  *(void *)&v921[8] = v137;
  sub_F2720(v899, *(void *)(a1 + 216) + 8);
  sub_F26A4((uint64_t)buf, (uint64_t)v921, (uint64_t)v899);
  if (v899[16]) {
    sub_80594((uint64_t)v899);
  }
  int v138 = sub_14739C(*(void **)(a1 + 112), *(unsigned int *)buf, (uint64_t *)__p);
  if (v138)
  {
    if (v138 == 2)
    {
      uint64_t v701 = sub_32A48(13);
      int v377 = 1852793716;
      v702 = sub_7D5E8(1, *(void **)v701, *(void *)(v701 + 8));
      std::string::size_type v376 = v702;
      if (!v702 || !os_log_type_enabled(v702, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1059;
      }
      *(_DWORD *)v921 = 136315394;
      *(void *)&v921[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v921[12] = 1024;
      *(_DWORD *)&v921[14] = 6032;
      v703 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAudioPlugIn"
             "PropertyCategoryInfo.\")";
    }
    else
    {
      if (v138 == 1)
      {
        uint64_t v374 = sub_32A48(13);
        v375 = sub_7D5E8(1, *(void **)v374, *(void *)(v374 + 8));
        std::string::size_type v376 = v375;
        int v377 = 1852797556;
        if (v375 && os_log_type_enabled(v375, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v921 = 136315394;
          *(void *)&v921[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v921[12] = 1024;
          *(_DWORD *)&v921[14] = 6032;
          _os_log_impl(&def_1E50E8, v376, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyCategoryInfo.\")", v921, 0x12u);
          int v377 = 1852797556;
        }
LABEL_1059:

        v706 = __cxa_allocate_exception(0x10uLL);
        *(void *)v706 = &off_6414D8;
        v706[2] = v377;
      }
      uint64_t v704 = sub_32A48(13);
      int v377 = 2003329396;
      v705 = sub_7D5E8(1, *(void **)v704, *(void *)(v704 + 8));
      std::string::size_type v376 = v705;
      if (!v705 || !os_log_type_enabled(v705, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1059;
      }
      *(_DWORD *)v921 = 136315394;
      *(void *)&v921[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v921[12] = 1024;
      *(_DWORD *)&v921[14] = 6032;
      v703 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInPropertyCategoryInfo.\")";
    }
    _os_log_impl(&def_1E50E8, v376, OS_LOG_TYPE_ERROR, v703, v921, 0x12u);
    goto LABEL_1059;
  }
  CFMutableDictionaryRef v139 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)v918 = v139;
  *(_WORD *)&v918[8] = 257;
  if (!*(void *)&__p[16]) {
    goto LABEL_337;
  }
  uint64_t v140 = *(unsigned char **)__p;
  if (*(unsigned char **)__p == &__p[8]) {
    goto LABEL_337;
  }
  do
  {
    uint64_t v141 = sub_32A48(2);
    if (*(unsigned char *)(v141 + 8))
    {
      id v142 = *(id *)v141;
      if (v142)
      {
        CFStringRef v143 = v142;
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(&v919, *((_DWORD *)v140 + 7));
          int v144 = &v919;
          if ((v919.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v144 = (std::string *)v919.__r_.__value_.__r.__words[0];
          }
          int v145 = v140[32];
          *(_DWORD *)v921 = 136315906;
          *(void *)&v921[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v921[12] = 1024;
          *(_DWORD *)&v921[14] = 6040;
          *(_WORD *)&v921[18] = 2080;
          *(void *)&v921[20] = v144;
          *(_WORD *)&v921[28] = 1024;
          *(_DWORD *)&v921[30] = v145;
          _os_log_impl(&def_1E50E8, v143, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found category info key / value pair. key: '%s'; value: %u",
            v921,
            0x22u);
          if (SHIBYTE(v919.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v919.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    int v146 = v140[32];
    int v147 = *((_DWORD *)v140 + 7);
    if (v147 == 1667850851)
    {
      std::string v148 = @"broadcast";
      goto LABEL_321;
    }
    if (v147 == 1667854445)
    {
      std::string v148 = @"policyMute";
LABEL_321:
      sub_1D4A4C((uint64_t)v918, v148, v146 != 0);
      goto LABEL_330;
    }
    id v149 = *(id *)sub_32A48(2);
    int v150 = v149;
    if (v149)
    {
      long long v151 = v149;
      if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v919, *((_DWORD *)v140 + 7));
        long long v152 = &v919;
        if ((v919.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v152 = (std::string *)v919.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v921 = 136315906;
        *(void *)&v921[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v921[12] = 1024;
        *(_DWORD *)&v921[14] = 6053;
        *(_WORD *)&v921[18] = 2080;
        *(void *)&v921[20] = v152;
        *(_WORD *)&v921[28] = 1024;
        *(_DWORD *)&v921[30] = v146;
        _os_log_impl(&def_1E50E8, v151, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown key / value pair stored in a CategoryInfoMap. key: '%s'; value: %u",
          v921,
          0x22u);
        if (SHIBYTE(v919.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v919.__r_.__value_.__l.__data_);
        }
      }
    }
LABEL_330:
    unsigned int v153 = (void *)*((void *)v140 + 1);
    if (v153)
    {
      do
      {
        int v154 = v153;
        unsigned int v153 = (void *)*v153;
      }
      while (v153);
    }
    else
    {
      do
      {
        int v154 = (unsigned char *)*((void *)v140 + 2);
        BOOL v98 = *(void *)v154 == (void)v140;
        uint64_t v140 = v154;
      }
      while (!v98);
    }
    uint64_t v140 = v154;
  }
  while (v154 != &__p[8]);
  CFMutableDictionaryRef v139 = *(CFMutableDictionaryRef *)v918;
LABEL_337:
  if (v139)
  {
    CFRetain(v139);
    uint64_t v155 = *(void *)v918;
  }
  else
  {
    uint64_t v155 = 0;
  }
  *(void *)a6 = v155;
  sub_80594((uint64_t)v918);
  sub_463E0(*(void **)&buf[24]);
  sub_463E0(*(void **)&__p[8]);
LABEL_693:
  if (*(_DWORD *)a2 == 1668575346)
  {
    uint64_t v333 = sub_32A48(2);
    uint64_t v334 = sub_32A48(34);
    char v335 = 0;
    uint64_t v336 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v337 = *(void *)(v333 + 8);
    while (1)
    {
      uint64_t v338 = *(int *)&buf[4 * v336];
      char v339 = v335;
      if (((v337 & v338) != 0) != ((*(void *)(v334 + 8) & v338) != 0)) {
        break;
      }
      char v335 = 1;
      uint64_t v336 = 1;
      if (v339)
      {
        if ((v337 & 1) == 0) {
          goto LABEL_710;
        }
        goto LABEL_702;
      }
    }
    if ((v337 & v338) == 0) {
      uint64_t v333 = v334;
    }
    if (*(void *)(v333 + 8))
    {
LABEL_702:
      id v340 = *(id *)v333;
      if (v340)
      {
        int v341 = v340;
        if (os_log_type_enabled(v341, OS_LOG_TYPE_DEBUG))
        {
          *(void *)std::string __p = *(void *)a2;
          *(_DWORD *)&__p[8] = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)v921, (unsigned int *)__p);
          uint64_t v342 = v921[23] >= 0 ? v921 : *(unsigned char **)v921;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6376;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v342;
          _os_log_impl(&def_1E50E8, v341, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
          if ((v921[23] & 0x80000000) != 0) {
            operator delete(*(void **)v921);
          }
        }
      }
    }
  }
LABEL_710:
  sub_3BCAC(&v908);
}

void sub_3183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,os_signpost_id_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,__int16 a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }

  sub_31363C(&a32);
  sub_3BCAC(&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_32A48(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BA60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BA60))
  {
    sub_15F310();
  }
  return qword_64B908[a1];
}

void sub_32AA8(_Unwind_Exception *a1)
{
}

uint64_t sub_32AC0(uint64_t a1, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  if (!a1)
  {
    CFTypeRef v13 = (os_log_t *)sub_32A48(13);
    CFNumberRef v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v22 = 136315394;
    unsigned int v23 = "HP_HardwarePlugInInterface.cpp";
    __int16 v24 = 1024;
    int v25 = 286;
    AudioObjectPropertyElement v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_ObjectIsProper"
          "tySettable: no plug-in\"";
LABEL_21:
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v22, 0x12u);
    goto LABEL_22;
  }
  if (!a3)
  {
    char v16 = (os_log_t *)sub_32A48(13);
    CFNumberRef v14 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v22 = 136315394;
    unsigned int v23 = "HP_HardwarePlugInInterface.cpp";
    __int16 v24 = 1024;
    int v25 = 287;
    AudioObjectPropertyElement v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: \"HP_HardwarePlugIn_ObjectIsPro"
          "pertySettable: no address\"";
    goto LABEL_21;
  }
  if (!a4)
  {
    id v17 = (os_log_t *)sub_32A48(13);
    CFNumberRef v14 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      unsigned int v23 = "HP_HardwarePlugInInterface.cpp";
      __int16 v24 = 1024;
      int v25 = 288;
      AudioObjectPropertyElement v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIsSettable is NULL]: \"HP_HardwarePlugIn_Objec"
            "tIsPropertySettable: no place to store return value\"";
      goto LABEL_21;
    }
LABEL_22:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  uint64_t v7 = sub_33438(a2);
  uint64_t v8 = v7;
  if (!v7)
  {
    int v19 = (os_log_t *)sub_32A48(13);
    unsigned int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      unsigned int v23 = "HP_HardwarePlugInInterface.cpp";
      __int16 v24 = 1024;
      int v25 = 291;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theObject is NULL]: \"HP_HardwarePlugIn_ObjectIsPropertySettable: no object with given ID\"", (uint8_t *)&v22, 0x12u);
    }
    uint64_t v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v21 = &off_6414D8;
    v21[2] = 560947818;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  uint64_t v10 = v9;
  if (v9) {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  else {
    int v11 = 0;
  }
  *a4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a3);
  if (v10 && v11) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  return 0;
}

void sub_32E6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x32BCCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_32ED4(uint64_t a1, int *a2)
{
  if (*a2 != 1986095470)
  {
    sub_3B7EC();
    CFNumberRef v14 = &qword_64CC40;
    char v15 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    if (*(_DWORD *)(a1 + 108) != 2)
    {
      uint64_t v10 = sub_32A48(13);
      int v11 = sub_7D5E8(1, *(void **)v10, *(void *)(v10 + 8));
      unsigned int v12 = v11;
      if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        id v17 = "VirtualAudio_PlugIn.mm";
        __int16 v18 = 1024;
        int v19 = 5225;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"VirtualAudio PlugIn is not initialized yet\"", buf, 0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
    }
    uint64_t v2 = 0;
    int v5 = *a2;
    if (*a2 <= 1769304163)
    {
      if (v5 <= 1651664754)
      {
        if (v5 <= 1634629489)
        {
          if (v5 <= 1634624370)
          {
            if (v5 == 1633907299) {
              goto LABEL_66;
            }
            int v6 = 1633969267;
          }
          else
          {
            if (v5 == 1634624371 || v5 == 1634627952) {
              goto LABEL_66;
            }
            int v6 = 1634627954;
          }
        }
        else if (v5 > 1635152482)
        {
          if (v5 == 1635152483 || v5 == 1651077236) {
            goto LABEL_66;
          }
          int v6 = 1651077731;
        }
        else
        {
          if (v5 == 1634629490 || v5 == 1634756195) {
            goto LABEL_66;
          }
          int v6 = 1634759267;
        }
        goto LABEL_58;
      }
      if (v5 > 1684632433)
      {
        if (v5 > 1701737067)
        {
          if (v5 != 1701737068)
          {
            if (v5 == 1751480691) {
              goto LABEL_66;
            }
            int v6 = 1768845421;
            goto LABEL_58;
          }
        }
        else
        {
          if (v5 == 1684632434) {
            goto LABEL_66;
          }
          if (v5 != 1685283955)
          {
            int v6 = 1701013875;
            goto LABEL_58;
          }
        }
LABEL_65:
        uint64_t v2 = 1;
        goto LABEL_66;
      }
      if (v5 > 1668310626)
      {
        if (v5 == 1668310627 || v5 == 1668313699) {
          goto LABEL_66;
        }
        int v6 = 1668575346;
        goto LABEL_58;
      }
      if (v5 == 1651664755) {
        goto LABEL_66;
      }
      int v7 = 1667329392;
LABEL_64:
      if (v5 != v7)
      {
LABEL_70:
        uint64_t v9 = sub_3A6BA8(a1, a2);
        goto LABEL_71;
      }
      goto LABEL_65;
    }
    if (v5 > 1936028520)
    {
      if (v5 > 1986094178)
      {
        if (v5 > 1987077485)
        {
          if (v5 == 1987077486) {
            goto LABEL_66;
          }
          int v7 = 2019714413;
        }
        else
        {
          if ((v5 - 1986094179) < 2) {
            goto LABEL_65;
          }
          int v7 = 1987016304;
        }
        goto LABEL_64;
      }
      if (v5 > 1936745572)
      {
        if (v5 == 1936745573)
        {
          if ((MGGetBoolAnswer() & 1) == 0)
          {
            uint64_t v9 = sub_8B774();
LABEL_71:
            uint64_t v2 = v9;
            goto LABEL_66;
          }
          goto LABEL_65;
        }
        if (v5 == 1936746862) {
          goto LABEL_66;
        }
        int v7 = 1936882284;
        goto LABEL_64;
      }
      if (v5 == 1936028521 || v5 == 1936225648) {
        goto LABEL_65;
      }
      int v6 = 1936745332;
    }
    else
    {
      if (v5 > 1886549106)
      {
        if (v5 <= 1920230245)
        {
          if (v5 == 1886549107 || v5 == 1903653475) {
            goto LABEL_66;
          }
          int v6 = 1919120504;
          goto LABEL_58;
        }
        if (v5 == 1920230246) {
          goto LABEL_65;
        }
        if (v5 == 1920297328) {
          goto LABEL_66;
        }
        int v7 = 1920426613;
        goto LABEL_64;
      }
      if (v5 <= 1868853874)
      {
        if (v5 == 1769304164) {
          goto LABEL_65;
        }
        int v6 = 1819173229;
      }
      else
      {
        if (v5 == 1868853875) {
          goto LABEL_66;
        }
        if (v5 == 1886350709) {
          goto LABEL_65;
        }
        int v6 = 1886548848;
      }
    }
LABEL_58:
    if (v5 != v6) {
      goto LABEL_70;
    }
LABEL_66:
    sub_3BCAC(&v14);
    return v2;
  }
  return 0;
}

void sub_33404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_33438(unsigned int a1)
{
  uint64_t v9 = &unk_65DB00;
  char v10 = 1;
  sub_39ECC((uint64_t)&unk_65DB00);
  if (!*((void *)&xmmword_65DC20 + 1)) {
    goto LABEL_17;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_65DC20 + 8));
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = a1;
    if (*((void *)&xmmword_65DC20 + 1) <= (unint64_t)a1) {
      unint64_t v3 = (unint64_t)a1 % *((void *)&xmmword_65DC20 + 1);
    }
  }
  else
  {
    unint64_t v3 = (DWORD2(xmmword_65DC20) - 1) & a1;
  }
  unint64_t v4 = *(uint64_t ***)(xmmword_65DC20 + 8 * v3);
  if (!v4 || (int v5 = *v4) == 0)
  {
LABEL_17:
    uint64_t v8 = 0;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v6 = v5[1];
    if (v6 == a1) {
      break;
    }
    if (v2.u32[0] > 1uLL)
    {
      if (v6 >= *((void *)&xmmword_65DC20 + 1)) {
        v6 %= *((void *)&xmmword_65DC20 + 1);
      }
    }
    else
    {
      v6 &= *((void *)&xmmword_65DC20 + 1) - 1;
    }
    if (v6 != v3) {
      goto LABEL_17;
    }
LABEL_16:
    int v5 = (uint64_t *)*v5;
    if (!v5) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v5 + 4) != a1) {
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)v5[3];
LABEL_18:
  sub_3A3E8((uint64_t)&v9);
  return v8;
}

uint64_t sub_33544(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (!a1)
  {
    int v22 = (os_log_t *)sub_32A48(13);
    unsigned int v23 = *v22;
    if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 331;
    __int16 v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_ObjectGetPrope"
          "rtyDataSize: no plug-in\"";
LABEL_26:
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    goto LABEL_27;
  }
  if (!a3)
  {
    int v25 = (os_log_t *)sub_32A48(13);
    unsigned int v23 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 332;
    __int16 v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: \"HP_HardwarePlugIn_ObjectGetPr"
          "opertyDataSize: no address\"";
    goto LABEL_26;
  }
  if (!a6)
  {
    char v26 = (os_log_t *)sub_32A48(13);
    unsigned int v23 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v43 = 1024;
      int v44 = 333;
      __int16 v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outDataSize is NULL]: \"HP_HardwarePlugIn_ObjectG"
            "etPropertyDataSize: no place to store return value\"";
      goto LABEL_26;
    }
LABEL_27:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (*a3 == 1651798132)
  {
    sub_3A8A8();
    uint64_t v40 = &unk_65DB00;
    char v41 = sub_470F0((uint64_t)&unk_65DB00);
    if ((v41 & 1) == 0)
    {
      uint64_t v28 = (os_log_t *)sub_32A48(13);
      uint64_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 66;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"TryExecuteSynchronized: unable to lock object map mutex\"", buf, 0x12u);
      }
      char v30 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v30 = &off_6414D8;
      v30[2] = 560947818;
    }
    int v11 = sub_3AACC(a2);
    if (!v11)
    {
      __n128 v34 = (os_log_t *)sub_32A48(13);
      uint64_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 69;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"ExecuteSynchronized: no object with given ID\"", buf, 0x12u);
      }
      uint64_t v36 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v36 = &off_6414D8;
      v36[2] = 560947818;
    }
    unsigned int v12 = (void *)v11[3];
    sub_3A3E8((uint64_t)&v40);
    uint64_t v40 = v12 + 1;
    char v41 = sub_470F0((uint64_t)(v12 + 1));
    if ((v41 & 1) == 0)
    {
      uint64_t v37 = (os_log_t *)sub_32A48(13);
      char v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 75;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"TryExecuteSynchronized: unable to lock object mutex\"", buf, 0x12u);
      }
      uint64_t v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v39 = &off_6414D8;
      v39[2] = 560947818;
    }
    int v13 = (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t))(*(void *)*v12 + 48))(*v12, a3, a4, a5);
    sub_3A3E8((uint64_t)&v40);
    *a6 = v13;
  }
  else
  {
    sub_3A8A8();
    uint64_t v40 = &unk_65DB00;
    char v41 = 1;
    sub_39ECC((uint64_t)&unk_65DB00);
    CFNumberRef v14 = sub_3AACC(a2);
    if (!v14)
    {
      unsigned int v31 = (os_log_t *)sub_32A48(13);
      std::string::size_type v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 51;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"ExecuteSynchronized: no object with given ID\"", buf, 0x12u);
      }
      int v33 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v33 = &off_6414D8;
      uint64_t v33[2] = 560947818;
    }
    char v15 = (void *)v14[3];
    sub_3A3E8((uint64_t)&v40);
    *(void *)AudioObjectPropertyAddress buf = v15 + 1;
    buf[8] = 1;
    sub_39ECC((uint64_t)(v15 + 1));
    uint64_t v16 = *v15;
    uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v15 + 16))(*v15);
    uint64_t v18 = v17;
    if (v17) {
      int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
    }
    else {
      int v19 = 0;
    }
    int v20 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v16 + 48))(v16, a3, a4, a5);
    sub_3A3E8((uint64_t)buf);
    *a6 = v20;
    if (v18 && v19) {
      (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
    }
  }
  return 0;
}

void sub_33C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    sub_3A3E8((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x33740);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_33CE8(unsigned int *a1, int *a2, uint64_t a3, const void *a4, UInt32 *a5, double *a6)
{
  if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 32))(a1) & 1) == 0)
  {
    uint64_t v210 = (os_log_t *)sub_32A48(13);
    char v211 = *v210;
    if (*v210 && os_log_type_enabled(*v210, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v357) = a2[2];
      sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
      int v212 = cf[23] >= 0 ? cf : *(unsigned char **)cf;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2343;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v212;
      _os_log_impl(&def_1E50E8, v211, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if ((cf[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 == 0) == (a4 != 0))
  {
    int v214 = (os_log_t *)sub_32A48(13);
    uint64_t v215 = *v214;
    if (*v214 && os_log_type_enabled(*v214, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v357) = a2[2];
      sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
      uint64_t v216 = cf[23] >= 0 ? cf : *(unsigned char **)cf;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2344;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v216;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)uint64_t v369 = a3;
      *(_WORD *)&v369[4] = 2048;
      *(void *)&v369[6] = a4;
      _os_log_impl(&def_1E50E8, v215, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if ((cf[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf);
      }
    }
    char v217 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v217 = &off_6414D8;
    v217[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v218 = (os_log_t *)sub_32A48(13);
    uint64_t v219 = *v218;
    if (*v218 && os_log_type_enabled(*v218, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v357) = a2[2];
      sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
      uint64_t v220 = cf[23] >= 0 ? cf : *(unsigned char **)cf;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2345;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "outData";
      *(_WORD *)&buf[28] = 2080;
      *(void *)uint64_t v369 = v220;
      _os_log_impl(&def_1E50E8, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if ((cf[23] & 0x80000000) != 0) {
        operator delete(*(void **)cf);
      }
    }
    char v221 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v221 = &off_6414D8;
    v221[2] = 561211770;
  }
  if (*a2 == 1651798132)
  {
    AudioObjectID v12 = atomic_load(a1 + 272);
    return (unsigned char *)AudioObjectGetPropertyData(v12, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
  }
  sub_3B7EC();
  int v359 = &qword_64CC40;
  char v360 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  int v14 = *a2;
  if (*a2 > 1701733223)
  {
    if (v14 <= 1935762280)
    {
      if (v14 <= 1869838182)
      {
        if (v14 > 1769302371)
        {
          if (v14 <= 1853059618)
          {
            if (v14 == 1769302372 || v14 == 1818326127) {
              goto LABEL_217;
            }
            if (v14 == 1852012899)
            {
              UInt32 v48 = *a5;
              if (v48 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))goto LABEL_218; {
              __int16 v267 = (os_log_t *)sub_32A48(13);
              }
              uint64_t v51 = *v267;
              if (!*v267 || !os_log_type_enabled(*v267, OS_LOG_TYPE_ERROR)) {
                goto LABEL_604;
              }
              std::string __p = *(void **)a2;
              LODWORD(v357) = a2[2];
              sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
              int v268 = cf[23];
              std::string::size_type v269 = *(unsigned char **)cf;
              UInt32 v270 = *a5;
              int v271 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              __n128 v272 = cf;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v268 < 0) {
                __n128 v272 = v269;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2371;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v272;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)uint64_t v369 = v270;
              *(_WORD *)&v369[4] = 1024;
              *(_DWORD *)&v369[6] = v271;
              int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_494;
            }
            goto LABEL_303;
          }
          if (v14 <= 1869574755)
          {
            if (v14 == 1853059619)
            {
              UInt32 v146 = *a5;
              if (v146 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
              {
                sub_B9FE8((uint64_t **)buf, a1, a2[1]);
                sub_BB10C(buf, a5, a6);
                sub_463E0(*(void **)&buf[8]);
                goto LABEL_220;
              }
              uint64_t v279 = (os_log_t *)sub_32A48(13);
              uint64_t v51 = *v279;
              if (!*v279 || !os_log_type_enabled(*v279, OS_LOG_TYPE_ERROR)) {
                goto LABEL_604;
              }
              std::string __p = *(void **)a2;
              LODWORD(v357) = a2[2];
              sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
              int v280 = cf[23];
              v281 = *(unsigned char **)cf;
              UInt32 v282 = *a5;
              int v283 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              std::string::size_type v284 = cf;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v280 < 0) {
                std::string::size_type v284 = v281;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2394;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v284;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)uint64_t v369 = v282;
              *(_WORD *)&v369[4] = 1024;
              *(_DWORD *)&v369[6] = v283;
              int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_494;
            }
            if (v14 != 1853059700) {
              goto LABEL_303;
            }
            UInt32 v16 = *a5;
            if (v16 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              sub_471DC((int *)a1, a2, a3, (uint64_t)a4, a5, (char *)a6);
              if (sub_B70B8(*((void *)a1 + 65), *((void *)a1 + 66))
                && sub_B7158(*((void *)a1 + 126)))
              {
                *a6 = *a6 * 0.0625;
              }
              uint64_t v17 = sub_32A48(1);
              uint64_t v18 = sub_32A48(36);
              char v19 = 0;
              uint64_t v20 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v21 = *(void *)(v17 + 8);
              while (1)
              {
                uint64_t v22 = *(int *)&buf[4 * v20];
                char v23 = v19;
                if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
                  break;
                }
                char v19 = 1;
                uint64_t v20 = 1;
                if (v23) {
                  goto LABEL_398;
                }
              }
              if ((v21 & v22) == 0) {
                uint64_t v17 = v18;
              }
              uint64_t v21 = *(void *)(v17 + 8);
LABEL_398:
              if ((v21 & 1) == 0) {
                goto LABEL_220;
              }
              uint64_t v191 = *(NSObject **)v17;
              if (!v191 || !os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_220;
              }
              double v192 = *a6;
              std::string __p = (void *)*((void *)a1 + 72);
              sub_4D60((std::string *)cf, (unsigned int *)&__p);
              char v193 = cf[23] >= 0 ? cf : *(unsigned char **)cf;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2389;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(double *)&buf[20] = v192;
              *(_WORD *)&buf[28] = 2080;
              *(void *)uint64_t v369 = v193;
              _os_log_impl(&def_1E50E8, v191, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client request to get nominal sample rate (%f) on VAD: '%s'.", buf, 0x26u);
              if ((cf[23] & 0x80000000) == 0) {
                goto LABEL_220;
              }
              int v158 = *(void **)cf;
              goto LABEL_459;
            }
            id v237 = (os_log_t *)sub_32A48(13);
            uint64_t v51 = *v237;
            if (*v237 && os_log_type_enabled(*v237, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              LODWORD(v357) = a2[2];
              sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
              int v238 = cf[23];
              uint64_t v239 = *(unsigned char **)cf;
              UInt32 v240 = *a5;
              int v241 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              id v242 = cf;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v238 < 0) {
                id v242 = v239;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2380;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v242;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)uint64_t v369 = v240;
              *(_WORD *)&v369[4] = 1024;
              *(_DWORD *)&v369[6] = v241;
              int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_494;
            }
            goto LABEL_604;
          }
          if (v14 == 1869574756) {
            goto LABEL_217;
          }
          int v15 = 1869575794;
          goto LABEL_216;
        }
        if (v14 > 1719165554)
        {
          if (v14 == 1719165555)
          {
            UInt32 v161 = *a5;
            if (v161 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              char v309 = (os_log_t *)sub_32A48(13);
              uint64_t v51 = *v309;
              if (*v309 && os_log_type_enabled(*v309, OS_LOG_TYPE_ERROR))
              {
                std::string __p = *(void **)a2;
                LODWORD(v357) = a2[2];
                sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
                int v310 = cf[23];
                uint64_t v311 = *(unsigned char **)cf;
                UInt32 v312 = *a5;
                int v313 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                int v314 = cf;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                if (v310 < 0) {
                  int v314 = v311;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2617;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v314;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)uint64_t v369 = v312;
                *(_WORD *)&v369[4] = 1024;
                *(_DWORD *)&v369[6] = v313;
                int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size"
                      " (passed: %u; required: %u).";
                goto LABEL_494;
              }
              goto LABEL_604;
            }
            uint64_t v162 = (*(uint64_t (**)(void, void))(**((void **)a1 + 126) + 528))(*((void *)a1 + 126), a2[1]);
            if ((v162 & 0xFF00000000) != 0) {
              unsigned int v43 = v162;
            }
            else {
              unsigned int v43 = 0;
            }
            goto LABEL_359;
          }
          if (v14 == 1735682404) {
            goto LABEL_217;
          }
          if (v14 != 1752657012) {
            goto LABEL_303;
          }
          UInt32 v39 = *a5;
          if (v39 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            v255 = (os_log_t *)sub_32A48(13);
            uint64_t v51 = *v255;
            if (*v255 && os_log_type_enabled(*v255, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              LODWORD(v357) = a2[2];
              sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
              int v256 = cf[23];
              int v257 = *(unsigned char **)cf;
              UInt32 v258 = *a5;
              int v259 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              v260 = cf;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v256 < 0) {
                v260 = v257;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2555;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v260;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)uint64_t v369 = v258;
              *(_WORD *)&v369[4] = 1024;
              *(_DWORD *)&v369[6] = v259;
              int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_494;
            }
            goto LABEL_604;
          }
          int v40 = sub_BBE34(*((void *)a1 + 126), a2[1] == 1768845428);
LABEL_375:
          *(_DWORD *)a6 = v40;
          goto LABEL_220;
        }
        if (v14 == 1701733224)
        {
          unsigned int v151 = *a5;
          if (v151 < (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            unsigned int v297 = (os_log_t *)sub_32A48(13);
            uint64_t v51 = *v297;
            if (*v297 && os_log_type_enabled(*v297, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              LODWORD(v357) = a2[2];
              sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
              int v298 = cf[23];
              CFTypeRef v299 = *(unsigned char **)cf;
              UInt32 v300 = *a5;
              int v301 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              long long v302 = cf;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v298 < 0) {
                long long v302 = v299;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2538;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v302;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)uint64_t v369 = v300;
              *(_WORD *)&v369[4] = 1024;
              *(_DWORD *)&v369[6] = v301;
              int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
              goto LABEL_494;
            }
            goto LABEL_604;
          }
          strcpy(buf, "scapbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          sub_BB5C8((CFArrayRef)cf, (uint64_t)a1, (const AudioObjectPropertyAddress *)buf);
          uint64_t v152 = sub_32A48(1);
          if (*(unsigned char *)(v152 + 8))
          {
            char v64 = *(NSObject **)v152;
            if (*(void *)v152)
            {
              if (os_log_type_enabled(*(os_log_t *)v152, OS_LOG_TYPE_DEBUG))
              {
                v354.__r_.__value_.__r.__words[0] = *(void *)a2;
                LODWORD(v354.__r_.__value_.__r.__words[1]) = a2[2];
                sub_16C9C4((uint64_t)&__p, (unsigned int *)&v354);
                int v153 = SHIBYTE(v358);
                int v154 = (void **)__p;
                sub_82188(&v355, *(unsigned int **)cf, *(unsigned int **)&cf[8]);
                p_p = &__p;
                if (v153 < 0) {
                  p_p = v154;
                }
                if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unsigned int v156 = &v355;
                }
                else {
                  unsigned int v156 = (std::string *)v355.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2540;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = p_p;
                *(_WORD *)&buf[28] = 2080;
                *(void *)uint64_t v369 = v156;
                goto LABEL_343;
              }
            }
          }
LABEL_347:
          int v145 = *(void **)cf;
          int v157 = *(_DWORD *)&cf[8] - *(_DWORD *)cf;
          if (*(void *)&cf[8] != *(void *)cf) {
            memmove(a6, *(const void **)cf, *(void *)&cf[8] - *(void *)cf);
          }
          *a5 = v157 & 0xFFFFFFFC;
LABEL_350:
          if (!v145) {
            goto LABEL_220;
          }
          int v158 = v145;
LABEL_459:
          operator delete(v158);
          goto LABEL_220;
        }
        if (v14 != 1718383987)
        {
          if (v14 != 1718641517) {
            goto LABEL_303;
          }
          std::string::size_type v32 = (char *)*((void *)a1 + 66);
          int v33 = (char *)*((void *)a1 + 65);
          if (((v32 - v33) & 0x7FFFFFFF8) != 0)
          {
            if (v32 == v33) {
              uint64_t v34 = 0;
            }
            else {
              uint64_t v34 = *(void *)v33;
            }
            goto LABEL_463;
          }
LABEL_387:
          sub_9EC7C(0, a5, a6);
          goto LABEL_220;
        }
        uint64_t v134 = (os_log_t *)sub_32A48(1);
        uint64_t v129 = *v134;
        if (!*v134 || !os_log_type_enabled(*v134, OS_LOG_TYPE_ERROR)) {
          goto LABEL_328;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2583;
        uint64_t v130 = "%25s:%-5d kVirtualAudioDeviceSilenceOutputImmediately is a write-only property";
LABEL_327:
        _os_log_impl(&def_1E50E8, v129, OS_LOG_TYPE_ERROR, v130, buf, 0x12u);
        goto LABEL_328;
      }
      if (v14 > 1886807153)
      {
        if (v14 <= 1919773027)
        {
          if (v14 == 1886807154) {
            goto LABEL_217;
          }
          if (v14 == 1902539642)
          {
            UInt32 v150 = *a5;
            if (v150 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              char v291 = (os_log_t *)sub_32A48(13);
              uint64_t v51 = *v291;
              if (*v291 && os_log_type_enabled(*v291, OS_LOG_TYPE_ERROR))
              {
                std::string __p = *(void **)a2;
                LODWORD(v357) = a2[2];
                sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
                int v292 = cf[23];
                uint64_t v293 = *(unsigned char **)cf;
                UInt32 v294 = *a5;
                int v295 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                v296 = cf;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                if (v292 < 0) {
                  v296 = v293;
                }
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2418;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v296;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)uint64_t v369 = v294;
                *(_WORD *)&v369[4] = 1024;
                *(_DWORD *)&v369[6] = v295;
                int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size"
                      " (passed: %u; required: %u).";
                goto LABEL_494;
              }
              goto LABEL_604;
            }
            unsigned int v43 = a1[122];
            goto LABEL_359;
          }
          int v30 = 1918987632;
        }
        else
        {
          if (v14 > 1920165218)
          {
            if (v14 == 1920165219)
            {
              if (sub_20ADDC() && *(void *)(*((void *)a1 + 126) + 276) == 0x6563696D63706172) {
                int v147 = sub_BC65C((uint64_t)a1);
              }
              else {
                int v147 = 0;
              }
              char v189 = (os_log_t *)sub_32A48(1);
              uint64_t v190 = *v189;
              if (*v189 && os_log_type_enabled(*v189, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2776;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v147;
                _os_log_impl(&def_1E50E8, v190, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route has Echo cancelled input : %u", buf, 0x18u);
              }
              sub_9EC7C(v147, a5, a6);
              goto LABEL_220;
            }
            int v15 = 1934456180;
            goto LABEL_216;
          }
          if (v14 == 1919773028) {
            goto LABEL_217;
          }
          int v30 = 1919774835;
        }
        goto LABEL_177;
      }
      if (v14 <= 1886216546)
      {
        if (v14 != 1869838183)
        {
          if (v14 == 1885434482) {
            goto LABEL_217;
          }
          int v15 = 1885631346;
          goto LABEL_216;
        }
        UInt32 v159 = *a5;
        if (v159 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          uint64_t v303 = (os_log_t *)sub_32A48(13);
          uint64_t v51 = *v303;
          if (*v303 && os_log_type_enabled(*v303, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v357) = a2[2];
            sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
            int v304 = cf[23];
            char v305 = *(unsigned char **)cf;
            UInt32 v306 = *a5;
            int v307 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v308 = cf;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v304 < 0) {
              uint64_t v308 = v305;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2605;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v308;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)uint64_t v369 = v306;
            *(_WORD *)&v369[4] = 1024;
            *(_DWORD *)&v369[6] = v307;
            int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_494;
          }
          goto LABEL_604;
        }
        uint64_t v42 = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(*((void *)a1 + 135) + 8), v160);
        goto LABEL_354;
      }
      if (v14 == 1886216547)
      {
        UInt32 v173 = *a5;
        if (v173 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          char v327 = (os_log_t *)sub_32A48(13);
          uint64_t v51 = *v327;
          if (*v327 && os_log_type_enabled(*v327, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v357) = a2[2];
            sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
            int v328 = cf[23];
            uint64_t v329 = *(unsigned char **)cf;
            UInt32 v330 = *a5;
            int v331 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v332 = cf;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v328 < 0) {
              uint64_t v332 = v329;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2613;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v332;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)uint64_t v369 = v330;
            *(_WORD *)&v369[4] = 1024;
            *(_DWORD *)&v369[6] = v331;
            int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_494;
          }
          goto LABEL_604;
        }
        int v40 = (*(uint64_t (**)(void))(**((void **)a1 + 126) + 224))(*((void *)a1 + 126));
        goto LABEL_375;
      }
      if (v14 == 1886413412) {
        goto LABEL_217;
      }
      int v15 = 1886413426;
      goto LABEL_216;
    }
    if (v14 > 1953719147)
    {
      if (v14 <= 1986225265)
      {
        if (v14 <= 1970303086)
        {
          if (v14 == 1953719148) {
            goto LABEL_217;
          }
          if (v14 == 1969318244)
          {
            int v135 = (*(uint64_t (**)(void))(**((void **)a1 + 126) + 120))(*((void *)a1 + 126));
            sub_9EC7C(v135, a5, a6);
            goto LABEL_220;
          }
          int v15 = 1969844082;
          goto LABEL_216;
        }
        if (v14 != 1970303087)
        {
          if (v14 == 1983996971) {
            goto LABEL_217;
          }
          int v15 = 1983997011;
          goto LABEL_216;
        }
        goto LABEL_293;
      }
      if (v14 > 1986294895)
      {
        if (v14 > 2020111982)
        {
          if (v14 == 2020111983)
          {
            std::string v148 = (os_log_t *)sub_32A48(1);
            uint64_t v129 = *v148;
            if (!*v148 || !os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR)) {
              goto LABEL_328;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2577;
            uint64_t v130 = "%25s:%-5d kVolumeControlSetExternalHWVolumeNotificationHandler is a write-only property";
            goto LABEL_327;
          }
          if (v14 != 2021027692) {
            goto LABEL_303;
          }
          uint64_t v128 = (os_log_t *)sub_32A48(1);
          uint64_t v129 = *v128;
          if (!*v128 || !os_log_type_enabled(*v128, OS_LOG_TYPE_ERROR)) {
            goto LABEL_328;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2571;
          uint64_t v130 = "%25s:%-5d kVirtualAudioDeviceSetExternalVolumeHandler is a write-only property";
          goto LABEL_327;
        }
        if (v14 == 1986294896)
        {
          unsigned int v43 = a1[144];
          goto LABEL_359;
        }
        int v15 = 1986361444;
LABEL_216:
        if (v14 == v15) {
          goto LABEL_217;
        }
LABEL_303:
        sub_471DC((int *)a1, a2, a3, (uint64_t)a4, a5, (char *)a6);
        goto LABEL_220;
      }
      if (v14 != 1986225266 && v14 != 1986225268)
      {
        int v30 = 1986225518;
LABEL_177:
        if (v14 != v30) {
          goto LABEL_303;
        }
        goto LABEL_178;
      }
    }
    else
    {
      if (v14 <= 1936879203)
      {
        if (v14 <= 1936876402)
        {
          if (v14 == 1935762281 || v14 == 1935962992) {
            goto LABEL_217;
          }
          int v15 = 1936744803;
          goto LABEL_216;
        }
        if (v14 == 1936876403) {
          goto LABEL_156;
        }
        if (v14 == 1936876644)
        {
          unsigned int v136 = *a5;
          if (v136 >= (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))goto LABEL_218; {
          uint64_t v137 = (os_log_t *)sub_32A48(13);
          }
          uint64_t v51 = *v137;
          if (!*v137 || !os_log_type_enabled(*v137, OS_LOG_TYPE_ERROR)) {
            goto LABEL_604;
          }
          std::string __p = *(void **)a2;
          LODWORD(v357) = a2[2];
          sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
          int v138 = cf[23];
          CFMutableDictionaryRef v139 = *(unsigned char **)cf;
          UInt32 v140 = *a5;
          int v141 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          id v142 = cf;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v138 < 0) {
            id v142 = v139;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2366;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v142;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)uint64_t v369 = v140;
          *(_WORD *)&v369[4] = 1024;
          *(_DWORD *)&v369[6] = v141;
          int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_494;
        }
        int v30 = 1936878960;
        goto LABEL_177;
      }
      if (v14 <= 1952997987)
      {
        if (v14 == 1936879204)
        {
          unsigned int v182 = *a5;
          if (v182 >= (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))goto LABEL_218; {
          unsigned int v183 = (os_log_t *)sub_32A48(13);
          }
          uint64_t v51 = *v183;
          if (!*v183 || !os_log_type_enabled(*v183, OS_LOG_TYPE_ERROR)) {
            goto LABEL_604;
          }
          std::string __p = *(void **)a2;
          LODWORD(v357) = a2[2];
          sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
          int v184 = cf[23];
          CFArrayRef v185 = *(unsigned char **)cf;
          UInt32 v186 = *a5;
          int v187 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v188 = cf;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v184 < 0) {
            uint64_t v188 = v185;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2413;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v188;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)uint64_t v369 = v186;
          *(_WORD *)&v369[4] = 1024;
          *(_DWORD *)&v369[6] = v187;
          int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_494;
        }
        if (v14 == 1936946787)
        {
          UInt32 v149 = *a5;
          if (v149 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            *(float *)a6 = sub_BBFAC((void **)a1);
            goto LABEL_220;
          }
          AudioObjectPropertySelector v285 = (os_log_t *)sub_32A48(13);
          uint64_t v51 = *v285;
          if (!*v285 || !os_log_type_enabled(*v285, OS_LOG_TYPE_ERROR)) {
            goto LABEL_604;
          }
          std::string __p = *(void **)a2;
          LODWORD(v357) = a2[2];
          sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
          int v286 = cf[23];
          __n128 v287 = *(unsigned char **)cf;
          UInt32 v288 = *a5;
          int v289 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v290 = cf;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v286 < 0) {
            uint64_t v290 = v287;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2601;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v290;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)uint64_t v369 = v288;
          *(_WORD *)&v369[4] = 1024;
          *(_DWORD *)&v369[6] = v289;
          int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_494;
        }
        int v15 = 1937138532;
        goto LABEL_216;
      }
      if (v14 <= 1953002092)
      {
        if (v14 == 1952997988) {
          goto LABEL_217;
        }
        int v15 = 1952998002;
        goto LABEL_216;
      }
      if (v14 == 1953002093) {
        goto LABEL_217;
      }
      if (v14 != 1953002354) {
        goto LABEL_303;
      }
    }
    UInt32 v76 = *a5;
    if (v76 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      char v77 = (os_log_t *)sub_32A48(13);
      uint64_t v51 = *v77;
      if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v357) = a2[2];
        sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
        int v78 = cf[23];
        uint64_t v79 = *(unsigned char **)cf;
        UInt32 v80 = *a5;
        int v81 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        id v82 = cf;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v78 < 0) {
          id v82 = v79;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2562;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v82;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)uint64_t v369 = v80;
        *(_WORD *)&v369[4] = 1024;
        *(_DWORD *)&v369[6] = v81;
        int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed"
              ": %u; required: %u).";
        goto LABEL_494;
      }
      goto LABEL_604;
    }
    goto LABEL_218;
  }
  if (v14 > 1668443503)
  {
    if (v14 <= 1684500593)
    {
      if (v14 > 1684238450)
      {
        if (v14 > 1684370275)
        {
          if (v14 > 1684498543)
          {
            if (v14 == 1684498544) {
              goto LABEL_217;
            }
            unsigned __int16 v24 = 28781;
          }
          else
          {
            if (v14 == 1684370276) {
              goto LABEL_217;
            }
            unsigned __int16 v24 = 26733;
          }
          int v15 = v24 | 0x64670000;
          goto LABEL_216;
        }
        if (v14 == 1684238451)
        {
          UInt32 v174 = *a5;
          if (v174 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            memset(cf, 0, 24);
            sub_45ED4(cf, a4, (uint64_t)a4 + 4 * (a3 >> 2), a3 >> 2);
            *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)cf;
            *(void *)&buf[16] = *(void *)&cf[16];
            strcpy(&buf[24], "cwdv");
            v369[2] = 0;
            *(_DWORD *)&v369[10] = 3;
            *((void *)&v370 + 1) = 0;
            uint64_t v371 = 0;
            *(void *)&long long v370 = (char *)&v370 + 8;
            int v372 = 44739242;
            uint64_t v373 = 0;
            (*(void (**)(unsigned char *__return_ptr))(**((void **)a1 + 126) + 480))(cf);
            sub_BB33C((uint64_t *)&__p, (uint64_t)a1, (uint64_t)cf, a2[1]);
            sub_8108((uint64_t *)cf);
            sub_45120((uint64_t)&v350, __p, &v357);
            uint64_t v175 = sub_32A48(2);
            uint64_t v176 = sub_32A48(34);
            char v177 = 0;
            uint64_t v178 = 0;
            *(void *)CFTypeRef cf = 0x100000002;
            uint64_t v179 = *(void *)(v175 + 8);
            while (1)
            {
              uint64_t v180 = *(int *)&cf[4 * v178];
              char v181 = v177;
              if (((v179 & v180) != 0) != ((*(void *)(v176 + 8) & v180) != 0)) {
                break;
              }
              char v177 = 1;
              uint64_t v178 = 1;
              if (v181) {
                goto LABEL_434;
              }
            }
            if ((v179 & v180) == 0) {
              uint64_t v175 = v176;
            }
            uint64_t v179 = *(void *)(v175 + 8);
LABEL_434:
            if (v179)
            {
              uint64_t v202 = *(NSObject **)v175;
              if (v202)
              {
                if (os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
                {
                  char v203 = &v355;
                  std::to_string(&v355, a1[2]);
                  if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v203 = (std::string *)v355.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v204 = &v354;
                  sub_2417C(&v354, a2[1]);
                  if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v204 = (std::string *)v354.__r_.__value_.__r.__words[0];
                  }
                  sub_82188(&v353, *(unsigned int **)buf, *(unsigned int **)&buf[8]);
                  int v205 = SHIBYTE(v353.__r_.__value_.__r.__words[2]);
                  std::string::size_type v206 = v353.__r_.__value_.__r.__words[0];
                  sub_168B00(&v352, (const __CFArray *)v350.__r_.__value_.__l.__data_);
                  char v207 = &v353;
                  if (v205 < 0) {
                    char v207 = (std::string *)v206;
                  }
                  if ((v352.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v208 = &v352;
                  }
                  else {
                    uint64_t v208 = (std::string *)v352.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)CFTypeRef cf = 136316418;
                  *(void *)&cf[4] = "VirtualAudio_Device.cpp";
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 2463;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v203;
                  __int16 v362 = 2080;
                  id v363 = v204;
                  __int16 v364 = 2080;
                  v365 = v207;
                  __int16 v366 = 2080;
                  uint32_t v367 = v208;
                  _os_log_impl(&def_1E50E8, v202, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning connected ports for device id %s, scope '%s' and VirtualAudioPortTypes %s: %s", cf, 0x3Au);
                  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v352.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v353.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v354.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v355.__r_.__value_.__l.__data_);
                  }
                }
              }
            }
            if (v350.__r_.__value_.__r.__words[0])
            {
              CFRetain(v350.__r_.__value_.__l.__data_);
              std::string::size_type v209 = v350.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v209 = 0;
            }
            *(void *)a6 = v209;
            sub_3D61C((uint64_t)&v350);
            sub_463E0(v357);
            sub_470A4((uint64_t)buf);
            goto LABEL_220;
          }
          uint64_t v333 = (os_log_t *)sub_32A48(13);
          uint64_t v51 = *v333;
          if (!*v333 || !os_log_type_enabled(*v333, OS_LOG_TYPE_ERROR)) {
            goto LABEL_604;
          }
          std::string __p = *(void **)a2;
          LODWORD(v357) = a2[2];
          sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
          int v334 = cf[23];
          char v335 = *(unsigned char **)cf;
          UInt32 v336 = *a5;
          int v337 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v338 = cf;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v334 < 0) {
            uint64_t v338 = v335;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2451;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v338;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)uint64_t v369 = v336;
          *(_WORD *)&v369[4] = 1024;
          *(_DWORD *)&v369[6] = v337;
          int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_494;
        }
        if (v14 != 1684304756)
        {
          int v15 = 1684365924;
          goto LABEL_216;
        }
LABEL_156:
        UInt32 v49 = *a5;
        if (v49 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          uint64_t v50 = (os_log_t *)sub_32A48(13);
          uint64_t v51 = *v50;
          if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v357) = a2[2];
            sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
            int v52 = cf[23];
            uint64_t v53 = *(unsigned char **)cf;
            UInt32 v54 = *a5;
            int v55 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v56 = cf;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v52 < 0) {
              uint64_t v56 = v53;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2550;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v56;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)uint64_t v369 = v54;
            *(_WORD *)&v369[4] = 1024;
            *(_DWORD *)&v369[6] = v55;
            int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_494;
          }
          goto LABEL_604;
        }
        goto LABEL_218;
      }
      if (v14 <= 1684104050)
      {
        if (v14 != 1668443504 && v14 != 1668705648)
        {
          if (v14 != 1684104048) {
            goto LABEL_303;
          }
LABEL_293:
          UInt32 v131 = *a5;
          if (v131 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            uint64_t v231 = (os_log_t *)sub_32A48(13);
            uint64_t v51 = *v231;
            if (*v231 && os_log_type_enabled(*v231, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              LODWORD(v357) = a2[2];
              sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
              int v232 = cf[23];
              id v233 = *(unsigned char **)cf;
              UInt32 v234 = *a5;
              int v235 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              unint64_t v236 = cf;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              if (v232 < 0) {
                unint64_t v236 = v233;
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2431;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v236;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)uint64_t v369 = v234;
              *(_WORD *)&v369[4] = 1024;
              *(_DWORD *)&v369[6] = v235;
              int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_494;
            }
            goto LABEL_604;
          }
          if ((a3 | 4) == 4)
          {
            *(void *)&buf[8] = 0;
            *(void *)&buf[16] = 0;
            *(void *)AudioObjectPropertyAddress buf = &buf[8];
            int v132 = a2[1];
            if (v132 == 1768845428 || v132 == 1735159650)
            {
              sub_46AA0((uint64_t *)buf, *((void **)a1 + 127), (void *)a1 + 128);
              int v132 = a2[1];
            }
            if (v132 == 1869968496 || v132 == 1735159650) {
              sub_46AA0((uint64_t *)buf, *((void **)a1 + 130), (void *)a1 + 131);
            }
            sub_45120((uint64_t)cf, *(void **)buf, &buf[8]);
            if (*(void *)cf)
            {
              CFRetain(*(CFTypeRef *)cf);
              uint64_t v133 = *(void *)cf;
            }
            else
            {
              uint64_t v133 = 0;
            }
            *(void *)a6 = v133;
            sub_3D61C((uint64_t)cf);
            sub_463E0(*(void **)&buf[8]);
            goto LABEL_220;
          }
          char v339 = (os_log_t *)sub_32A48(13);
          id v340 = *v339;
          if (*v339 && os_log_type_enabled(*v339, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2432;
            _os_log_impl(&def_1E50E8, v340, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
LABEL_499:
          unsigned int v230 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v230, "Precondition failure.");
        }
LABEL_178:
        char v60 = (void *)*((void *)a1 + 116);
        if (v60)
        {
          uint64_t v61 = (void (**)(void))(*v60 + 56);
LABEL_219:
          (*v61)();
          goto LABEL_220;
        }
        uint64_t v228 = (os_log_t *)sub_32A48(13);
        uint64_t v229 = *v228;
        if (*v228 && os_log_type_enabled(*v228, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2596;
          _os_log_impl(&def_1E50E8, v229, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_499;
      }
      if (v14 == 1684104051)
      {
        UInt32 v163 = *a5;
        if (v163 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          memset(cf, 0, 24);
          sub_45ED4(cf, a4, (uint64_t)a4 + 4 * (a3 >> 2), a3 >> 2);
          uint64_t v357 = 0;
          uint64_t v358 = 0;
          v355.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
          std::string __p = &v357;
          v355.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
          v355.__r_.__value_.__l.__size_ = (std::string::size_type)cf;
          int v164 = a2[1];
          if (v164 == 1768845428 || v164 == 1735159650)
          {
            sub_BB4D4(&v355, 1);
            int v164 = a2[1];
          }
          if (v164 == 1869968496 || v164 == 1735159650) {
            sub_BB4D4(&v355, 0);
          }
          sub_45120((uint64_t)v351, __p, &v357);
          uint64_t v165 = sub_32A48(2);
          uint64_t v166 = sub_32A48(34);
          char v167 = 0;
          uint64_t v168 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v169 = *(void *)(v165 + 8);
          while (1)
          {
            uint64_t v170 = *(int *)&buf[4 * v168];
            char v171 = v167;
            if (((v169 & v170) != 0) != ((*(void *)(v166 + 8) & v170) != 0)) {
              break;
            }
            char v167 = 1;
            uint64_t v168 = 1;
            if (v171) {
              goto LABEL_409;
            }
          }
          if ((v169 & v170) == 0) {
            uint64_t v165 = v166;
          }
          uint64_t v169 = *(void *)(v165 + 8);
LABEL_409:
          if (v169)
          {
            unsigned int v194 = *(NSObject **)v165;
            if (v194)
            {
              if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v195 = &v354;
                std::to_string(&v354, a1[2]);
                if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unsigned int v195 = (std::string *)v354.__r_.__value_.__r.__words[0];
                }
                unsigned int v196 = &v353;
                sub_2417C(&v353, a2[1]);
                if ((v353.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unsigned int v196 = (std::string *)v353.__r_.__value_.__r.__words[0];
                }
                sub_82188(&v352, *(unsigned int **)cf, *(unsigned int **)&cf[8]);
                int v197 = SHIBYTE(v352.__r_.__value_.__r.__words[2]);
                std::string::size_type v198 = v352.__r_.__value_.__r.__words[0];
                sub_168B00(&v350, (const __CFArray *)v351[0]);
                char v199 = &v352;
                if (v197 < 0) {
                  char v199 = (std::string *)v198;
                }
                if ((v350.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v200 = &v350;
                }
                else {
                  uint64_t v200 = (std::string *)v350.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2509;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v195;
                *(_WORD *)&buf[28] = 2080;
                *(void *)uint64_t v369 = v196;
                *(_WORD *)&v369[8] = 2080;
                *(void *)&v369[10] = v199;
                LOWORD(v370) = 2080;
                *(void *)((char *)&v370 + 2) = v200;
                _os_log_impl(&def_1E50E8, v194, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning active streams for device id %s, scope '%s' and VirtualAudioPortTypes %s: %s", buf, 0x3Au);
                if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v350.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v352.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v353.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v354.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          if (v351[0])
          {
            CFRetain(v351[0]);
            CFTypeRef v201 = v351[0];
          }
          else
          {
            CFTypeRef v201 = 0;
          }
          *(void *)a6 = v201;
          sub_3D61C((uint64_t)v351);
          sub_463E0(v357);
          int v158 = *(void **)cf;
          if (!*(void *)cf) {
            goto LABEL_220;
          }
          *(void *)&cf[8] = *(void *)cf;
          goto LABEL_459;
        }
        v315 = (os_log_t *)sub_32A48(13);
        uint64_t v51 = *v315;
        if (*v315 && os_log_type_enabled(*v315, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          LODWORD(v357) = a2[2];
          sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
          int v316 = cf[23];
          v317 = *(unsigned char **)cf;
          UInt32 v318 = *a5;
          int v319 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v320 = cf;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v316 < 0) {
            uint64_t v320 = v317;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2470;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v320;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)uint64_t v369 = v318;
          *(_WORD *)&v369[4] = 1024;
          *(_DWORD *)&v369[6] = v319;
          int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_494;
        }
        goto LABEL_604;
      }
      if (v14 == 1684107364) {
        goto LABEL_217;
      }
      if (v14 != 1684236338
        || a2[1] != 1869968496
        || !(*(unsigned int (**)(void))(**((void **)a1 + 126) + 336))(*((void *)a1 + 126)))
      {
        goto LABEL_303;
      }
      unsigned int v41 = *a5;
      if (v41 < (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        uint64_t v343 = (os_log_t *)sub_32A48(13);
        uint64_t v51 = *v343;
        if (*v343 && os_log_type_enabled(*v343, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          LODWORD(v357) = a2[2];
          sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
          int v344 = cf[23];
          v345 = *(unsigned char **)cf;
          UInt32 v346 = *a5;
          int v347 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v348 = cf;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v344 < 0) {
            uint64_t v348 = v345;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2401;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v348;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)uint64_t v369 = v346;
          *(_WORD *)&v369[4] = 1024;
          *(_DWORD *)&v369[6] = v347;
          int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_494;
        }
        goto LABEL_604;
      }
      uint64_t v42 = (*(uint64_t (**)(void))(**((void **)a1 + 126) + 344))(*((void *)a1 + 126));
LABEL_354:
      *(void *)a6 = v42;
      goto LABEL_220;
    }
    if (v14 <= 1685287010)
    {
      if (v14 > 1685087595)
      {
        if ((v14 - 1685278561) <= 0x11 && ((1 << (v14 - 97)) & 0x20003) != 0) {
          goto LABEL_217;
        }
        int v15 = 1685087596;
        goto LABEL_216;
      }
      if (v14 == 1684500594 || v14 == 1684893796) {
        goto LABEL_217;
      }
      if (v14 != 1685025633) {
        goto LABEL_303;
      }
      uint64_t v58 = (char *)*((void *)a1 + 66);
      uint64_t v59 = (char *)*((void *)a1 + 65);
      if (((v58 - v59) & 0x7FFFFFFF8) != 0)
      {
        if (v58 == v59) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = *(void *)v59;
        }
LABEL_463:
        (*(void (**)(uint64_t, int *, uint64_t, const void *, UInt32 *, double *))(*(void *)v34 + 56))(v34, a2, a3, a4, a5, a6);
        goto LABEL_220;
      }
      goto LABEL_387;
    }
    if (v14 <= 1685288050)
    {
      if ((v14 - 1685287011) < 2) {
        goto LABEL_217;
      }
      if (v14 != 1685287523) {
        goto LABEL_303;
      }
      goto LABEL_156;
    }
    if (v14 == 1685288051) {
      goto LABEL_156;
    }
    if (v14 != 1685483630)
    {
      int v30 = 1685484390;
      goto LABEL_177;
    }
    CFStringRef v143 = (os_log_t *)sub_32A48(1);
    uint64_t v129 = *v143;
    if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2423;
      uint64_t v130 = "%25s:%-5d kAudioDevicePropertyVoiceProcessingIsEnabled is a write-only property";
      goto LABEL_327;
    }
LABEL_328:
    *a5 = 0;
    goto LABEL_220;
  }
  if (v14 <= 1635020146)
  {
    if (v14 <= 1633970531)
    {
      if (v14 > 1633904998)
      {
        if (v14 == 1633904999) {
          goto LABEL_195;
        }
        if (v14 == 1633906541) {
          goto LABEL_217;
        }
        unsigned __int16 v31 = 29554;
      }
      else
      {
        if (v14 == 1165513555) {
          goto LABEL_217;
        }
        if (v14 == 1633776747) {
          goto LABEL_195;
        }
        unsigned __int16 v31 = 25449;
      }
      int v38 = v31 | 0x61630000;
      goto LABEL_194;
    }
    if (v14 > 1634300530)
    {
      if (v14 <= 1634755427)
      {
        if (v14 != 1634300531)
        {
          int v15 = 1634692199;
          goto LABEL_216;
        }
        uint64_t v144 = *((void *)a1 + 126);
        memset(buf, 0, 24);
        sub_4CAB0(buf, *(const void **)(v144 + 144), *(void *)(v144 + 152), (uint64_t)(*(void *)(v144 + 152) - *(void *)(v144 + 144)) >> 3);
        int v145 = *(void **)buf;
        sub_A12B4(*(unsigned char **)buf, *(unsigned char **)&buf[8], a5, a6);
        goto LABEL_350;
      }
      if (v14 != 1634755428)
      {
        int v38 = 1634890859;
LABEL_194:
        if (v14 != v38) {
          goto LABEL_303;
        }
LABEL_195:
        UInt32 v69 = *a5;
        if (v69 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          unsigned int v70 = (os_log_t *)sub_32A48(13);
          uint64_t v51 = *v70;
          if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            LODWORD(v357) = a2[2];
            sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
            int v71 = cf[23];
            char v72 = *(unsigned char **)cf;
            UInt32 v73 = *a5;
            int v74 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v75 = cf;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            if (v71 < 0) {
              uint64_t v75 = v72;
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2736;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v75;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)uint64_t v369 = v73;
            *(_WORD *)&v369[4] = 1024;
            *(_DWORD *)&v369[6] = v74;
            int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
LABEL_494:
            _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, v57, buf, 0x28u);
            if ((cf[23] & 0x80000000) != 0) {
              operator delete(*(void **)cf);
            }
            goto LABEL_604;
          }
          goto LABEL_604;
        }
LABEL_218:
        uint64_t v61 = (void (**)(void))(**((void **)a1 + 126) + 40);
        goto LABEL_219;
      }
LABEL_217:
      UInt32 v83 = *a5;
      if (v83 == (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))goto LABEL_218; {
      int v222 = (os_log_t *)sub_32A48(13);
      }
      uint64_t v51 = *v222;
      if (!*v222 || !os_log_type_enabled(*v222, OS_LOG_TYPE_ERROR)) {
        goto LABEL_604;
      }
      std::string __p = *(void **)a2;
      LODWORD(v357) = a2[2];
      sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
      int v223 = cf[23];
      int v224 = *(unsigned char **)cf;
      UInt32 v225 = *a5;
      int v226 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
      uint64_t v227 = cf;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      if (v223 < 0) {
        uint64_t v227 = v224;
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2727;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v227;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)uint64_t v369 = v225;
      *(_WORD *)&v369[4] = 1024;
      *(_DWORD *)&v369[6] = v226;
      int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: "
            "%u; required: %u).";
      goto LABEL_494;
    }
    if (v14 == 1633970532 || v14 == 1633973868) {
      goto LABEL_217;
    }
    if (v14 != 1634035054) {
      goto LABEL_303;
    }
    UInt32 v44 = *a5;
    if (v44 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      std::string::size_type v261 = (os_log_t *)sub_32A48(13);
      uint64_t v51 = *v261;
      if (*v261 && os_log_type_enabled(*v261, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v357) = a2[2];
        sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
        int v262 = cf[23];
        std::string v263 = *(unsigned char **)cf;
        UInt32 v264 = *a5;
        int v265 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        uint64_t v266 = cf;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v262 < 0) {
          uint64_t v266 = v263;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2515;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v266;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)uint64_t v369 = v264;
        *(_WORD *)&v369[4] = 1024;
        *(_DWORD *)&v369[6] = v265;
        int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed"
              ": %u; required: %u).";
        goto LABEL_494;
      }
LABEL_604:
      int v342 = 561211770;
LABEL_605:
      unsigned int v349 = __cxa_allocate_exception(0x10uLL);
      *(void *)unsigned int v349 = &off_6414D8;
      v349[2] = v342;
    }
    int v45 = a2[1];
    if (v45 == 1768845428 || v45 == 1869968496)
    {
      BOOL v46 = v45 == 1768845428;
      uint64_t v47 = 600;
      if (!v46) {
        uint64_t v47 = 601;
      }
      unsigned int v43 = *((unsigned __int8 *)a1 + v47);
      goto LABEL_359;
    }
    int v341 = (os_log_t *)sub_32A48(13);
    uint64_t v28 = *v341;
    if (*v341 && os_log_type_enabled(*v341, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2516;
      uint64_t v29 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"invalid property scope for kVirtualAudioDevicePr"
            "opertyAudioEnhancementProcessingIsEnabled\"";
      goto LABEL_597;
    }
    goto LABEL_598;
  }
  if (v14 <= 1651664738)
  {
    if (v14 > 1635152992)
    {
      if ((v14 - 1635152993) <= 0xE && ((1 << (v14 - 97)) & 0x4015) != 0) {
        goto LABEL_217;
      }
      if (v14 != 1650881394) {
        goto LABEL_303;
      }
      UInt32 v25 = *a5;
      if (v25 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        long long v243 = (os_log_t *)sub_32A48(13);
        uint64_t v51 = *v243;
        if (*v243 && os_log_type_enabled(*v243, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          LODWORD(v357) = a2[2];
          sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
          int v244 = cf[23];
          v245 = *(unsigned char **)cf;
          UInt32 v246 = *a5;
          int v247 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v248 = cf;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          if (v244 < 0) {
            uint64_t v248 = v245;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2521;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v248;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)uint64_t v369 = v246;
          *(_WORD *)&v369[4] = 1024;
          *(_DWORD *)&v369[6] = v247;
          int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_494;
        }
        goto LABEL_604;
      }
      int v26 = a2[1];
      if (v26 == 1768845428 || v26 == 1869968496) {
        goto LABEL_218;
      }
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      uint64_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2522;
        uint64_t v29 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"invalid property scope for kVirtualAudioDevice"
              "PropertyBufferFrameSizeIsRestricted\"";
LABEL_597:
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
      }
LABEL_598:
      int v342 = 2003332927;
      goto LABEL_605;
    }
    if (v14 == 1635020147) {
      goto LABEL_217;
    }
    if (v14 != 1635148648) {
      goto LABEL_303;
    }
    unsigned int v62 = *a5;
    if (v62 < (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      v273 = (os_log_t *)sub_32A48(13);
      uint64_t v51 = *v273;
      if (*v273 && os_log_type_enabled(*v273, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v357) = a2[2];
        sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
        int v274 = cf[23];
        uint64_t v275 = *(unsigned char **)cf;
        UInt32 v276 = *a5;
        int v277 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        uint64_t v278 = cf;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v274 < 0) {
          uint64_t v278 = v275;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2528;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v278;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)uint64_t v369 = v276;
        *(_WORD *)&v369[4] = 1024;
        *(_DWORD *)&v369[6] = v277;
        int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
        goto LABEL_494;
      }
      goto LABEL_604;
    }
    strcpy(buf, "bsapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_BB5C8((CFArrayRef)cf, (uint64_t)a1, (const AudioObjectPropertyAddress *)buf);
    uint64_t v63 = sub_32A48(1);
    if (*(unsigned char *)(v63 + 8))
    {
      char v64 = *(NSObject **)v63;
      if (*(void *)v63)
      {
        if (os_log_type_enabled(*(os_log_t *)v63, OS_LOG_TYPE_DEBUG))
        {
          v354.__r_.__value_.__r.__words[0] = *(void *)a2;
          LODWORD(v354.__r_.__value_.__r.__words[1]) = a2[2];
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v354);
          int v65 = SHIBYTE(v358);
          uint64_t v66 = (void **)__p;
          sub_82188(&v355, *(unsigned int **)cf, *(unsigned int **)&cf[8]);
          uint64_t v67 = &__p;
          if (v65 < 0) {
            uint64_t v67 = v66;
          }
          if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v68 = &v355;
          }
          else {
            unsigned int v68 = (std::string *)v355.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2530;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v67;
          *(_WORD *)&buf[28] = 2080;
          *(void *)uint64_t v369 = v68;
LABEL_343:
          _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioObjectGetPropertyData(%s) will return %s.", buf, 0x26u);
          if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v355.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v358) < 0) {
            operator delete(__p);
          }
          goto LABEL_347;
        }
      }
    }
    goto LABEL_347;
  }
  if (v14 > 1667658617)
  {
    if (v14 != 1667658618)
    {
      if (v14 == 1668047203) {
        goto LABEL_217;
      }
      if (v14 != 1668247661) {
        goto LABEL_303;
      }
      unsigned int v43 = (*(float (**)(void, uint64_t, uint64_t, void))(**((void **)a1 + 126) + 360))(*((void *)a1 + 126), 1685287015, 2019976293, 0);
LABEL_359:
      *(_DWORD *)a6 = v43;
      goto LABEL_220;
    }
    UInt32 v172 = *a5;
    if (v172 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      uint64_t v321 = (os_log_t *)sub_32A48(13);
      uint64_t v51 = *v321;
      if (*v321 && os_log_type_enabled(*v321, OS_LOG_TYPE_ERROR))
      {
        std::string __p = *(void **)a2;
        LODWORD(v357) = a2[2];
        sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
        int v322 = cf[23];
        char v323 = *(unsigned char **)cf;
        UInt32 v324 = *a5;
        int v325 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        uint64_t v326 = cf;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        if (v322 < 0) {
          uint64_t v326 = v323;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2361;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v326;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)uint64_t v369 = v324;
        *(_WORD *)&v369[4] = 1024;
        *(_DWORD *)&v369[6] = v325;
        int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed"
              ": %u; required: %u).";
        goto LABEL_494;
      }
      goto LABEL_604;
    }
    int v40 = sub_BAEA8((uint64_t)a1, *(unsigned int *)a6);
    goto LABEL_375;
  }
  if (v14 == 1651664739 || v14 == 1651798898) {
    goto LABEL_217;
  }
  if (v14 != 1651861092) {
    goto LABEL_303;
  }
  UInt32 v35 = *a5;
  if (v35 != (*(unsigned int (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4))
  {
    int v249 = (os_log_t *)sub_32A48(13);
    uint64_t v51 = *v249;
    if (*v249 && os_log_type_enabled(*v249, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      LODWORD(v357) = a2[2];
      sub_16C9C4((uint64_t)cf, (unsigned int *)&__p);
      int v250 = cf[23];
      char v251 = *(unsigned char **)cf;
      UInt32 v252 = *a5;
      int v253 = (*(uint64_t (**)(unsigned int *, int *, uint64_t, const void *))(*(void *)a1 + 48))(a1, a2, a3, a4);
      uint64_t v254 = cf;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      if (v250 < 0) {
        uint64_t v254 = v251;
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2622;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v254;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)uint64_t v369 = v252;
      *(_WORD *)&v369[4] = 1024;
      *(_DWORD *)&v369[6] = v253;
      int v57 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: "
            "%u; required: %u).";
      goto LABEL_494;
    }
    goto LABEL_604;
  }
  *(_DWORD *)CFTypeRef cf = 0;
  LODWORD(__p) = 4;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1718839674;
  *(void *)&uint8_t buf[4] = *(void *)(a2 + 1);
  (*(void (**)(unsigned int *, unsigned char *, void, void, void **, unsigned char *))(*(void *)a1 + 56))(a1, buf, 0, 0, &__p, cf);
  double v36 = (*(double (**)(unsigned int *))(*(void *)a1 + 632))(a1);
  LODWORD(v37) = *(_DWORD *)cf;
  sub_BC56C(a5, a6, (double)v37 / v36);
LABEL_220:
  int v84 = *a2;
  if (*a2 == 1987013741)
  {
    uint64_t v85 = sub_32A48(1);
    uint64_t v86 = sub_32A48(38);
    char v87 = 0;
    uint64_t v88 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v89 = *(void *)(v85 + 8);
    while (1)
    {
      uint64_t v90 = *(int *)&buf[4 * v88];
      char v91 = v87;
      if (((v89 & v90) != 0) != ((*(void *)(v86 + 8) & v90) != 0)) {
        break;
      }
      char v87 = 1;
      uint64_t v88 = 1;
      if (v91)
      {
        if ((v89 & 1) == 0) {
          goto LABEL_240;
        }
        goto LABEL_229;
      }
    }
    if ((v89 & v90) == 0) {
      uint64_t v85 = v86;
    }
    if (*(void *)(v85 + 8))
    {
LABEL_229:
      unsigned int v92 = *(NSObject **)v85;
      if (v92 && os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
      {
        v355.__r_.__value_.__r.__words[0] = *(void *)a2;
        LODWORD(v355.__r_.__value_.__r.__words[1]) = a2[2];
        sub_16C9C4((uint64_t)cf, (unsigned int *)&v355);
        int v93 = cf[23];
        uint64_t v94 = *(unsigned char **)cf;
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)a1 + 96))(&__p, a1);
        unsigned int v95 = cf;
        if (v93 < 0) {
          unsigned int v95 = v94;
        }
        if (v358 >= 0) {
          unsigned int v96 = &__p;
        }
        else {
          unsigned int v96 = __p;
        }
        double v97 = *(float *)a6;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2788;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v95;
        *(_WORD *)&buf[28] = 2080;
        *(void *)uint64_t v369 = v96;
        *(_WORD *)&v369[8] = 2048;
        *(double *)&v369[10] = v97;
        _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on VAD '%s': %f.", buf, 0x30u);
        if (SHIBYTE(v358) < 0) {
          operator delete(__p);
        }
        if ((cf[23] & 0x80000000) != 0) {
          operator delete(*(void **)cf);
        }
      }
    }
LABEL_240:
    int v84 = *a2;
    if (*a2 == 1987013741)
    {
      if (a2[2])
      {
        uint64_t v98 = sub_32A48(1);
        if (*(unsigned char *)(v98 + 8))
        {
          unsigned int v99 = *(NSObject **)v98;
          if (*(void *)v98)
          {
            if (os_log_type_enabled(*(os_log_t *)v98, OS_LOG_TYPE_DEBUG))
            {
              double v100 = *(float *)a6;
              int v101 = a2[2];
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2790;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(double *)&buf[20] = v100;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)uint64_t v369 = v101;
              _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d Individual volume %f for %u", buf, 0x22u);
            }
          }
        }
      }
      int v84 = *a2;
    }
  }
  if (v84 == 1836414053)
  {
    uint64_t v102 = sub_32A48(1);
    uint64_t v103 = sub_32A48(38);
    char v104 = 0;
    uint64_t v105 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v106 = *(void *)(v102 + 8);
    while (1)
    {
      uint64_t v107 = *(int *)&buf[4 * v105];
      char v108 = v104;
      if (((v106 & v107) != 0) != ((*(void *)(v103 + 8) & v107) != 0)) {
        break;
      }
      char v104 = 1;
      uint64_t v105 = 1;
      if (v108)
      {
        if ((v106 & 1) == 0) {
          goto LABEL_267;
        }
        goto LABEL_256;
      }
    }
    if ((v106 & v107) == 0) {
      uint64_t v102 = v103;
    }
    if (*(void *)(v102 + 8))
    {
LABEL_256:
      char v109 = *(NSObject **)v102;
      if (v109 && os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
      {
        v355.__r_.__value_.__r.__words[0] = *(void *)a2;
        LODWORD(v355.__r_.__value_.__r.__words[1]) = a2[2];
        sub_16C9C4((uint64_t)cf, (unsigned int *)&v355);
        int v110 = cf[23];
        uint64_t v111 = *(unsigned char **)cf;
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)a1 + 96))(&__p, a1);
        uint64_t v112 = cf;
        if (v110 < 0) {
          uint64_t v112 = v111;
        }
        if (v358 >= 0) {
          char v113 = &__p;
        }
        else {
          char v113 = __p;
        }
        int v114 = *(_DWORD *)a6;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2793;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v112;
        *(_WORD *)&buf[28] = 2080;
        *(void *)uint64_t v369 = v113;
        *(_WORD *)&v369[8] = 1024;
        *(_DWORD *)&v369[10] = v114;
        _os_log_impl(&def_1E50E8, v109, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on VAD '%s': %u.", buf, 0x2Cu);
        if (SHIBYTE(v358) < 0) {
          operator delete(__p);
        }
        if ((cf[23] & 0x80000000) != 0) {
          operator delete(*(void **)cf);
        }
      }
    }
  }
LABEL_267:
  if (*a2 == 1064725619)
  {
    uint64_t v115 = sub_32A48(1);
    uint64_t v116 = sub_32A48(38);
    char v117 = 0;
    uint64_t v118 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v119 = *(void *)(v115 + 8);
    while (1)
    {
      uint64_t v120 = *(int *)&buf[4 * v118];
      char v121 = v117;
      if (((v119 & v120) != 0) != ((*(void *)(v116 + 8) & v120) != 0)) {
        break;
      }
      char v117 = 1;
      uint64_t v118 = 1;
      if (v121)
      {
        if ((v119 & 1) == 0) {
          return sub_3BCAC(&v359);
        }
        goto LABEL_276;
      }
    }
    if ((v119 & v120) == 0) {
      uint64_t v115 = v116;
    }
    if (*(void *)(v115 + 8))
    {
LABEL_276:
      uint64_t v122 = *(NSObject **)v115;
      if (v122 && os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        v355.__r_.__value_.__r.__words[0] = *(void *)a2;
        LODWORD(v355.__r_.__value_.__r.__words[1]) = a2[2];
        sub_16C9C4((uint64_t)cf, (unsigned int *)&v355);
        int v123 = cf[23];
        int v124 = *(unsigned char **)cf;
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)a1 + 96))(&__p, a1);
        uint64_t v125 = cf;
        if (v123 < 0) {
          uint64_t v125 = v124;
        }
        if (v358 >= 0) {
          uint64_t v126 = &__p;
        }
        else {
          uint64_t v126 = __p;
        }
        int v127 = *(_DWORD *)a6;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2796;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v125;
        *(_WORD *)&buf[28] = 2080;
        *(void *)uint64_t v369 = v126;
        *(_WORD *)&v369[8] = 1024;
        *(_DWORD *)&v369[10] = v127;
        _os_log_impl(&def_1E50E8, v122, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on VAD '%s': %u.", buf, 0x2Cu);
        if (SHIBYTE(v358) < 0) {
          operator delete(__p);
        }
        if ((cf[23] & 0x80000000) != 0) {
          operator delete(*(void **)cf);
        }
      }
    }
  }
  return sub_3BCAC(&v359);
}

void sub_37F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_3BCAC(&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_382BC(void **a1, uint64_t a2, int a3, uint64_t a4)
{
  if ((((uint64_t (*)(void **))(*a1)[4])(a1) & 1) == 0)
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      AudioObjectPropertyAddress v32 = *(AudioObjectPropertyAddress *)a2;
      sub_16C9C4((uint64_t)&v33, &v32.mSelector);
      char v23 = v35 >= 0 ? &v33 : (void **)v33;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 2125;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", __p, 0x1Cu);
      if (v35 < 0) {
        operator delete(v33);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    UInt32 v25 = (os_log_t *)sub_32A48(13);
    int v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      AudioObjectPropertyAddress v32 = *(AudioObjectPropertyAddress *)a2;
      sub_16C9C4((uint64_t)&v33, &v32.mSelector);
      uint64_t v27 = v35 >= 0 ? &v33 : (void **)v33;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 2126;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v27;
      __int16 v37 = 1024;
      int v38 = a3;
      __int16 v39 = 2048;
      uint64_t v40 = a4;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (v35 < 0) {
        operator delete(v33);
      }
    }
    uint64_t v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v28 = &off_6414D8;
    v28[2] = 561211770;
  }
  if (*(_DWORD *)a2 != 1651798132)
  {
    sub_3B7EC();
    int v33 = &qword_64CC40;
    char v34 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
    int v9 = *(_DWORD *)a2;
    uint64_t v8 = 4;
    if (*(int *)a2 <= 1701733223)
    {
      if (v9 <= 1668443503)
      {
        if (v9 <= 1635020146)
        {
          if (v9 > 1633970531)
          {
            if (v9 > 1634300530)
            {
              if (v9 <= 1634755427)
              {
                if (v9 != 1634300531)
                {
                  int v10 = 1634692199;
                  goto LABEL_149;
                }
                goto LABEL_158;
              }
              if (v9 != 1634755428)
              {
                int v10 = 1634890859;
                goto LABEL_149;
              }
LABEL_150:
              UInt32 v16 = (uint64_t (**)(void))(*a1[126] + 32);
LABEL_151:
              uint64_t v17 = (*v16)();
LABEL_152:
              uint64_t v8 = v17;
              goto LABEL_153;
            }
            if (v9 != 1633970532)
            {
              if (v9 == 1633973868) {
                goto LABEL_150;
              }
              int v12 = 1634035054;
              goto LABEL_126;
            }
LABEL_146:
            uint64_t v8 = 8;
            goto LABEL_153;
          }
          if (v9 > 1633904998)
          {
            if (v9 == 1633904999 || v9 == 1633906541) {
              goto LABEL_150;
            }
            unsigned __int16 v14 = 29554;
          }
          else
          {
            if (v9 == 1165513555 || v9 == 1633776747) {
              goto LABEL_150;
            }
            unsigned __int16 v14 = 25449;
          }
          int v10 = v14 | 0x61630000;
LABEL_149:
          if (v9 == v10) {
            goto LABEL_150;
          }
LABEL_164:
          uint64_t v17 = sub_3D658(a1, (int *)a2);
          goto LABEL_152;
        }
        if (v9 <= 1651664738)
        {
          if (v9 > 1635152992)
          {
            if ((v9 - 1635152993) <= 0xE && ((1 << (v9 - 97)) & 0x4015) != 0) {
              goto LABEL_150;
            }
            int v12 = 1650881394;
            goto LABEL_126;
          }
          if (v9 == 1635020147) {
            goto LABEL_150;
          }
          if (v9 != 1635148648) {
            goto LABEL_164;
          }
          *(void *)&v32.AudioObjectPropertySelector mSelector = 0x676C6F6270617362;
          v32.mElement = 0;
          sub_BB5C8((CFArrayRef)__p, (uint64_t)a1, &v32);
LABEL_162:
          uint64_t v20 = *(void **)__p;
          uint64_t v8 = (*(_DWORD *)&__p[8] - *(_DWORD *)__p) & 0xFFFFFFFC;
          if (!*(void *)__p) {
            goto LABEL_153;
          }
LABEL_163:
          operator delete(v20);
          goto LABEL_153;
        }
        if (v9 > 1667658617)
        {
          if (v9 == 1667658618) {
            goto LABEL_153;
          }
          if (v9 == 1668047203) {
            goto LABEL_150;
          }
          int v12 = 1668247661;
          goto LABEL_126;
        }
        if (v9 == 1651664739 || v9 == 1651798898) {
          goto LABEL_150;
        }
        int v11 = 1651861092;
LABEL_145:
        if (v9 != v11) {
          goto LABEL_164;
        }
        goto LABEL_146;
      }
      if (v9 <= 1684500593)
      {
        if (v9 > 1684238450)
        {
          if (v9 <= 1684370275)
          {
            if (v9 != 1684238451 && v9 != 1684304756)
            {
              int v10 = 1684365924;
              goto LABEL_149;
            }
            goto LABEL_146;
          }
          if (v9 <= 1684498543)
          {
            if (v9 == 1684370276) {
              goto LABEL_150;
            }
            int v12 = 1684498541;
            goto LABEL_126;
          }
          if (v9 == 1684498544) {
            goto LABEL_153;
          }
          int v10 = 1684500589;
          goto LABEL_149;
        }
        if (v9 > 1684104050)
        {
          if (v9 == 1684104051) {
            goto LABEL_146;
          }
          if (v9 == 1684107364) {
            goto LABEL_150;
          }
          int v11 = 1684236338;
          goto LABEL_145;
        }
        if (v9 != 1668443504 && v9 != 1668705648)
        {
          int v11 = 1684104048;
          goto LABEL_145;
        }
LABEL_132:
        int v15 = a1[116];
        if (!v15)
        {
          uint64_t v29 = (os_log_t *)sub_32A48(13);
          int v30 = *v29;
          if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 2172;
            _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
          }
          unsigned __int16 v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v31, "Precondition failure.");
        }
        UInt32 v16 = (uint64_t (**)(void))(*v15 + 48);
        goto LABEL_151;
      }
      if (v9 <= 1685287010)
      {
        if (v9 > 1685087595)
        {
          if ((v9 - 1685278561) <= 0x11 && ((1 << (v9 - 97)) & 0x20003) != 0) {
            goto LABEL_150;
          }
          int v10 = 1685087596;
          goto LABEL_149;
        }
        if (v9 == 1684500594 || v9 == 1684893796) {
          goto LABEL_150;
        }
        int v12 = 1685025633;
        goto LABEL_126;
      }
      if (v9 <= 1685288050)
      {
        if ((v9 - 1685287011) < 2) {
          goto LABEL_150;
        }
        int v11 = 1685287523;
        goto LABEL_145;
      }
      if (v9 == 1685288051) {
        goto LABEL_146;
      }
      if (v9 == 1685483630) {
        goto LABEL_153;
      }
      int v13 = 1685484390;
LABEL_131:
      if (v9 != v13) {
        goto LABEL_164;
      }
      goto LABEL_132;
    }
    if (v9 > 1935762280)
    {
      if (v9 > 1953719147)
      {
        if (v9 <= 1986225265)
        {
          if (v9 > 1970303086)
          {
            if (v9 != 1970303087)
            {
              if (v9 != 1983996971)
              {
                int v10 = 1983997011;
                goto LABEL_149;
              }
              goto LABEL_150;
            }
            goto LABEL_146;
          }
          if (v9 == 1953719148) {
            goto LABEL_150;
          }
          if (v9 != 1969318244)
          {
            int v10 = 1969844082;
            goto LABEL_149;
          }
        }
        else
        {
          if (v9 <= 1986294895)
          {
            if (v9 == 1986225266) {
              goto LABEL_146;
            }
            if (v9 == 1986225268) {
              goto LABEL_153;
            }
            int v13 = 1986225518;
            goto LABEL_131;
          }
          if (v9 > 2020111982)
          {
            if (v9 == 2020111983 || v9 == 2021027692)
            {
              uint64_t v8 = 16;
              goto LABEL_153;
            }
            goto LABEL_164;
          }
          if (v9 != 1986294896)
          {
            int v10 = 1986361444;
            goto LABEL_149;
          }
        }
      }
      else
      {
        if (v9 <= 1936879203)
        {
          if (v9 <= 1936876402)
          {
            if (v9 == 1935762281 || v9 == 1935962992) {
              goto LABEL_150;
            }
            int v10 = 1936744803;
            goto LABEL_149;
          }
          if (v9 == 1936876403) {
            goto LABEL_146;
          }
          if (v9 == 1936876644) {
            goto LABEL_150;
          }
          int v13 = 1936878960;
          goto LABEL_131;
        }
        if (v9 > 1952997987)
        {
          if (v9 <= 1953002092)
          {
            if (v9 != 1952997988)
            {
              int v10 = 1952998002;
              goto LABEL_149;
            }
            goto LABEL_150;
          }
          if (v9 == 1953002093) {
            goto LABEL_150;
          }
          int v11 = 1953002354;
          goto LABEL_145;
        }
        if (v9 == 1936879204) {
          goto LABEL_150;
        }
        if (v9 != 1936946787)
        {
          int v10 = 1937138532;
          goto LABEL_149;
        }
      }
    }
    else
    {
      if (v9 <= 1869838182)
      {
        if (v9 > 1769302371)
        {
          if (v9 <= 1853059618)
          {
            if (v9 == 1769302372) {
              goto LABEL_153;
            }
            if (v9 == 1818326127) {
              goto LABEL_150;
            }
            int v12 = 1852012899;
            goto LABEL_126;
          }
          if (v9 > 1869574755)
          {
            if (v9 == 1869574756) {
              goto LABEL_150;
            }
            int v10 = 1869575794;
            goto LABEL_149;
          }
          if (v9 == 1853059619)
          {
            sub_B9FE8((uint64_t **)__p, a1, *(_DWORD *)(a2 + 4));
            uint64_t v8 = (16 * *(_DWORD *)&__p[16]);
            sub_463E0(*(void **)&__p[8]);
            goto LABEL_153;
          }
          int v11 = 1853059700;
          goto LABEL_145;
        }
        if (v9 > 1719165554)
        {
          if (v9 == 1719165555) {
            goto LABEL_153;
          }
          if (v9 == 1735682404)
          {
LABEL_158:
            char v19 = a1[126];
            memset(__p, 0, 24);
            sub_4CAB0(__p, (const void *)v19[18], v19[19], (uint64_t)(v19[19] - v19[18]) >> 3);
            uint64_t v20 = *(void **)__p;
            uint64_t v8 = (*(_DWORD *)&__p[8] - *(_DWORD *)__p) & 0xFFFFFFF8;
            if (!*(void *)__p) {
              goto LABEL_153;
            }
            goto LABEL_163;
          }
          int v12 = 1752657012;
          goto LABEL_126;
        }
        if (v9 == 1701733224)
        {
          *(void *)&v32.AudioObjectPropertySelector mSelector = 0x676C6F6270616373;
          v32.mElement = 0;
          sub_BB5C8((CFArrayRef)__p, (uint64_t)a1, &v32);
          goto LABEL_162;
        }
        if (v9 == 1718383987) {
          goto LABEL_146;
        }
        int v12 = 1718641517;
LABEL_126:
        if (v9 != v12) {
          goto LABEL_164;
        }
        goto LABEL_153;
      }
      if (v9 <= 1886807153)
      {
        if (v9 > 1886216546)
        {
          if (v9 != 1886216547)
          {
            if (v9 != 1886413412)
            {
              int v10 = 1886413426;
              goto LABEL_149;
            }
            goto LABEL_150;
          }
        }
        else
        {
          if (v9 == 1869838183) {
            goto LABEL_146;
          }
          if (v9 != 1885434482)
          {
            int v10 = 1885631346;
            goto LABEL_149;
          }
        }
      }
      else
      {
        if (v9 > 1919773027)
        {
          if (v9 > 1920165218)
          {
            if (v9 == 1920165219) {
              goto LABEL_153;
            }
            int v10 = 1934456180;
            goto LABEL_149;
          }
          if (v9 == 1919773028) {
            goto LABEL_146;
          }
          int v13 = 1919774835;
          goto LABEL_131;
        }
        if (v9 == 1886807154) {
          goto LABEL_150;
        }
        if (v9 != 1902539642)
        {
          int v13 = 1918987632;
          goto LABEL_131;
        }
      }
    }
LABEL_153:
    sub_3BCAC(&v33);
    return v8;
  }
  return *((unsigned int *)a1 + 273);
}

void sub_39034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_39074(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    uint64_t v22 = (os_log_t *)sub_32A48(13);
    char v23 = *v22;
    if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 386;
    unsigned __int16 v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_ObjectGetPrope"
          "rtyData: no plug-in\"";
LABEL_26:
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    goto LABEL_27;
  }
  if (!a3)
  {
    UInt32 v25 = (os_log_t *)sub_32A48(13);
    char v23 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v43 = 1024;
    int v44 = 387;
    unsigned __int16 v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: \"HP_HardwarePlugIn_ObjectGetPr"
          "opertyData: no address\"";
    goto LABEL_26;
  }
  if (!a6)
  {
    int v26 = (os_log_t *)sub_32A48(13);
    char v23 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v43 = 1024;
      int v44 = 388;
      unsigned __int16 v24 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioDataSize is NULL]: \"HP_HardwarePlugIn_ObjectGe"
            "tPropertyData: no info about the size of the property data\"";
      goto LABEL_26;
    }
LABEL_27:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (*a3 == 1651798132)
  {
    sub_3A8A8();
    uint64_t v40 = &unk_65DB00;
    char v41 = sub_470F0((uint64_t)&unk_65DB00);
    if ((v41 & 1) == 0)
    {
      uint64_t v28 = (os_log_t *)sub_32A48(13);
      uint64_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 66;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"TryExecuteSynchronized: unable to lock object map mutex\"", buf, 0x12u);
      }
      int v30 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v30 = &off_6414D8;
      v30[2] = 560947818;
    }
    int v13 = sub_3AACC(a2);
    if (!v13)
    {
      char v34 = (os_log_t *)sub_32A48(13);
      char v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 69;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"ExecuteSynchronized: no object with given ID\"", buf, 0x12u);
      }
      double v36 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v36 = &off_6414D8;
      v36[2] = 560947818;
    }
    unsigned __int16 v14 = (void *)v13[3];
    sub_3A3E8((uint64_t)&v40);
    uint64_t v40 = v14 + 1;
    char v41 = sub_470F0((uint64_t)(v14 + 1));
    if ((v41 & 1) == 0)
    {
      __int16 v37 = (os_log_t *)sub_32A48(13);
      int v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 75;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"TryExecuteSynchronized: unable to lock object mutex\"", buf, 0x12u);
      }
      __int16 v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v39 = &off_6414D8;
      v39[2] = 560947818;
    }
    (*(void (**)(void, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v14 + 56))(*v14, a3, a4, a5, a6, a7);
    sub_3A3E8((uint64_t)&v40);
  }
  else
  {
    sub_3A8A8();
    uint64_t v40 = &unk_65DB00;
    char v41 = 1;
    sub_39ECC((uint64_t)&unk_65DB00);
    int v15 = sub_3AACC(a2);
    if (!v15)
    {
      unsigned __int16 v31 = (os_log_t *)sub_32A48(13);
      AudioObjectPropertyAddress v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v43 = 1024;
        int v44 = 51;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"ExecuteSynchronized: no object with given ID\"", buf, 0x12u);
      }
      int v33 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v33 = &off_6414D8;
      uint64_t v33[2] = 560947818;
    }
    UInt32 v16 = (void *)v15[3];
    sub_3A3E8((uint64_t)&v40);
    *(void *)AudioObjectPropertyAddress buf = v16 + 1;
    buf[8] = 1;
    sub_39ECC((uint64_t)(v16 + 1));
    uint64_t v17 = *v16;
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)*v16 + 16))(*v16);
    uint64_t v19 = v18;
    if (v18) {
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      int v20 = 0;
    }
    (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 56))(v17, a3, a4, a5, a6, a7);
    sub_3A3E8((uint64_t)buf);
    if (v19 && v20) {
      (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
    }
  }
  return 0;
}

void sub_39744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    sub_3A3E8((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x39274);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3981C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (!a1)
  {
    int v15 = (os_log_t *)sub_32A48(13);
    UInt32 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v35 = 1024;
      int v36 = 235;
      uint64_t v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_ObjectHasPro"
            "perty: no plug-in\"";
LABEL_22:
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x12u);
    }
LABEL_23:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a3)
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    UInt32 v16 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v35 = 1024;
      int v36 = 236;
      uint64_t v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inAddress is NULL]: \"HP_HardwarePlugIn_ObjectHas"
            "Property: no address\"";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  if (*a3 == 1651798132)
  {
    sub_3A8A8();
    AudioObjectPropertyAddress v32 = &unk_65DB00;
    char v33 = sub_470F0((uint64_t)&unk_65DB00);
    if ((v33 & 1) == 0)
    {
      int v20 = (os_log_t *)sub_32A48(13);
      uint64_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 66;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"TryExecuteSynchronized: unable to lock object map mutex\"", buf, 0x12u);
      }
      uint64_t v22 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v22 = &off_6414D8;
      v22[2] = 560947818;
    }
    int v5 = sub_3AACC(a2);
    if (!v5)
    {
      int v26 = (os_log_t *)sub_32A48(13);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 69;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"ExecuteSynchronized: no object with given ID\"", buf, 0x12u);
      }
      uint64_t v28 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v28 = &off_6414D8;
      v28[2] = 560947818;
    }
    unint64_t v6 = (void *)v5[3];
    sub_3A3E8((uint64_t)&v32);
    AudioObjectPropertyAddress v32 = v6 + 1;
    char v33 = sub_470F0((uint64_t)(v6 + 1));
    if ((v33 & 1) == 0)
    {
      uint64_t v29 = (os_log_t *)sub_32A48(13);
      int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 75;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"TryExecuteSynchronized: unable to lock object mutex\"", buf, 0x12u);
      }
      unsigned __int16 v31 = __cxa_allocate_exception(0x10uLL);
      *(void *)unsigned __int16 v31 = &off_6414D8;
      v31[2] = 560947818;
    }
    uint64_t v7 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*v6 + 32))(*v6, a3);
    sub_3A3E8((uint64_t)&v32);
  }
  else
  {
    sub_3A8A8();
    AudioObjectPropertyAddress v32 = &unk_65DB00;
    char v33 = 1;
    sub_39ECC((uint64_t)&unk_65DB00);
    uint64_t v8 = sub_3AACC(a2);
    if (!v8)
    {
      char v23 = (os_log_t *)sub_32A48(13);
      unsigned __int16 v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_ObjectManager.h";
        __int16 v35 = 1024;
        int v36 = 51;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): \"ExecuteSynchronized: no object with given ID\"", buf, 0x12u);
      }
      UInt32 v25 = __cxa_allocate_exception(0x10uLL);
      *(void *)UInt32 v25 = &off_6414D8;
      _OWORD v25[2] = 560947818;
    }
    int v9 = (void *)v8[3];
    sub_3A3E8((uint64_t)&v32);
    *(void *)AudioObjectPropertyAddress buf = v9 + 1;
    buf[8] = 1;
    sub_39ECC((uint64_t)(v9 + 1));
    uint64_t v10 = *v9;
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))(*v9);
    uint64_t v12 = v11;
    if (v11) {
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    }
    else {
      int v13 = 0;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v10 + 32))(v10, a3);
    sub_3A3E8((uint64_t)buf);
    if (v12 && v13) {
      (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
    }
  }
  return v7;
}

void sub_39E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    sub_3A3E8((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x39A10);
  }
  _Unwind_Resume(exception_object);
}

void sub_39ECC(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  pthread_t v5 = v2;
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  unint64_t v3 = *(_opaque_pthread_t **)(a1 + 232);
  if (v2)
  {
    if (v3 && v2 == v3) {
      goto LABEL_4;
    }
  }
  else if (!v3)
  {
LABEL_4:
    unint64_t v4 = (void *)(a1 + 240);
    goto LABEL_8;
  }
  if (!sub_3A50C(a1))
  {
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
    sub_39FB8((float *)(a1 + 248), (unint64_t)v2, &v5)[3] = 1;
    goto LABEL_10;
  }
  unint64_t v4 = sub_39FB8((float *)(a1 + 248), (unint64_t)v2, &v5) + 3;
LABEL_8:
  ++*v4;
LABEL_10:
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
}

void sub_39F9C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_39FB8(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          uint64_t v14 = i[2];
          if (v14)
          {
            if (a2 && v14 == a2) {
              return i;
            }
          }
          else if (!a2)
          {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unsigned __int16 v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *unsigned __int16 v24 = *v30;
                  *int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_59:
                unsigned __int16 v24 = v30;
                int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        int v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  AudioObjectPropertyAddress v32 = *(void **)a1;
  char v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    void *i = *v33;
LABEL_76:
    *char v33 = i;
    goto LABEL_77;
  }
  void *i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v32[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    char v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return i;
}

void sub_3A3D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3A3E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(void *)a1;
    pthread_t v3 = pthread_self();
    pthread_t v9 = v3;
    std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 168));
    unint64_t v4 = *(_opaque_pthread_t **)(v2 + 232);
    if (v3)
    {
      if (v4) {
        BOOL v5 = v3 == v4;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5) {
        goto LABEL_10;
      }
    }
    else if (v4)
    {
LABEL_10:
      if (!sub_3A50C(v2))
      {
LABEL_15:
        std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 168));
        return a1;
      }
      unint64_t v7 = sub_3A648((void *)(v2 + 248), (unint64_t)v3);
      if (!v7) {
        sub_8251C("unordered_map::at: key not found");
      }
      if (v7[3] < 2uLL)
      {
        sub_3A740((void *)(v2 + 248), (unint64_t)v3);
        std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 168));
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v2);
        return a1;
      }
      unint64_t v6 = sub_39FB8((float *)(v2 + 248), (unint64_t)v3, &v9) + 3;
LABEL_14:
      --*v6;
      goto LABEL_15;
    }
    unint64_t v6 = (void *)(v2 + 240);
    goto LABEL_14;
  }
  return a1;
}

void sub_3A4EC(void *a1)
{
  std::recursive_mutex::unlock(v1);
  sub_564E4(a1);
}

BOOL sub_3A50C(uint64_t a1)
{
  uint64_t v2 = (std::recursive_mutex *)(a1 + 168);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  pthread_t v3 = pthread_self();
  int8x8_t v4 = *(int8x8_t *)(a1 + 256);
  if (v4)
  {
    unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ ((unint64_t)v3 >> 32));
    unint64_t v6 = 0x9DDFEA08EB382D69 * (((unint64_t)v3 >> 32) ^ (v5 >> 47) ^ v5);
    unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = v7;
      if (v7 >= *(void *)&v4) {
        unint64_t v9 = v7 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v9 = v7 & (*(void *)&v4 - 1);
    }
    uint64_t i = *(void **)(*(void *)(a1 + 248) + 8 * v9);
    if (i)
    {
      for (uint64_t i = (void *)*i; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v7 == v11)
        {
          uint64_t v12 = (_opaque_pthread_t *)i[2];
          if (v12)
          {
            if (v3 && v12 == v3) {
              break;
            }
          }
          else if (!v3)
          {
            break;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *(void *)&v4) {
              v11 %= *(void *)&v4;
            }
          }
          else
          {
            v11 &= *(void *)&v4 - 1;
          }
          if (v11 != v9) {
            goto LABEL_22;
          }
        }
      }
    }
  }
  else
  {
LABEL_22:
    uint64_t i = 0;
  }
  BOOL v13 = i != 0;
  std::recursive_mutex::unlock(v2);
  return v13;
}

void *sub_3A648(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint8x8_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        uint64_t v11 = result[2];
        if (v11)
        {
          if (a2 && v11 == a2) {
            return result;
          }
        }
        else if (!a2)
        {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_3A740(void *a1, unint64_t a2)
{
  unint64_t v3 = sub_3A648(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    unint64_t v7 = *(void **)(*a1 + 8 * v5);
    do
    {
      uint8x8_t v8 = v7;
      unint64_t v7 = (void *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }
    *uint8x8_t v8 = v11;
    *unint64_t v3 = 0;
    --a1[3];
    operator delete(v3);
  }
}

void sub_3A8A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DC48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65DC48))
  {
    sub_89EC8((uint64_t)&unk_65DB00);
    xmmword_65DC20 = 0u;
    *(_OWORD *)&qword_65DC30 = 0u;
    dword_65DC40 = 1065353216;
    __cxa_guard_release(&qword_65DC48);
  }
}

void sub_3A92C(_Unwind_Exception *a1)
{
}

void sub_3A944(uint64_t a1)
{
  int8x8_t v2 = pthread_self();
  if (pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
  {
    atomic_store(0, (unint64_t *)(a1 + 16));
    int v3 = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
    if (v3)
    {
      int v4 = v3;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        unint64_t v7 = "CAMutex.cpp";
        __int16 v8 = 1024;
        int v9 = 152;
        _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Unlock: Could not unlock the mutex", (uint8_t *)&v6, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v4;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    unint64_t v7 = "CAMutex.cpp";
    __int16 v8 = 1024;
    int v9 = 160;
    _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CAMutex::Unlock: A thread is attempting to unlock a Mutex it doesn't own", (uint8_t *)&v6, 0x12u);
  }
}

uint64_t *sub_3AACC(unsigned int a1)
{
  if (!*((void *)&xmmword_65DC20 + 1)) {
    return 0;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_65DC20 + 8));
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
    if (*((void *)&xmmword_65DC20 + 1) <= (unint64_t)a1) {
      unint64_t v2 = (unint64_t)a1 % *((void *)&xmmword_65DC20 + 1);
    }
  }
  else
  {
    unint64_t v2 = (DWORD2(xmmword_65DC20) - 1) & a1;
  }
  uint64_t i = *(uint64_t **)(xmmword_65DC20 + 8 * v2);
  if (i)
  {
    for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= *((void *)&xmmword_65DC20 + 1)) {
            v4 %= *((void *)&xmmword_65DC20 + 1);
          }
        }
        else
        {
          v4 &= *((void *)&xmmword_65DC20 + 1) - 1;
        }
        if (v4 != v2) {
          return 0;
        }
      }
    }
  }
  return i;
}

BOOL sub_3AB8C(uint64_t a1, int *a2)
{
  if (*a2 != 1651798132)
  {
    sub_3B7EC();
    __int16 v35 = &qword_64CC40;
    char v36 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
    int v6 = *a2;
    BOOL v4 = 1;
    if (*a2 > 1701733223)
    {
      if (v6 > 1935762280)
      {
        if (v6 > 1953719147)
        {
          if (v6 <= 1986225265)
          {
            if (v6 > 1970303086)
            {
              if (v6 == 1970303087) {
                goto LABEL_168;
              }
              if (v6 != 1983996971)
              {
                int v7 = 1983997011;
                goto LABEL_164;
              }
              goto LABEL_165;
            }
            if (v6 == 1953719148) {
              goto LABEL_165;
            }
            if (v6 == 1969318244) {
              goto LABEL_168;
            }
            int v7 = 1969844082;
            goto LABEL_164;
          }
          if (v6 > 1986294895)
          {
            if (v6 <= 2020111982)
            {
              if (v6 == 1986294896) {
                goto LABEL_168;
              }
              int v7 = 1986361444;
              goto LABEL_164;
            }
            if (v6 != 2020111983 && v6 != 2021027692) {
              goto LABEL_182;
            }
            int v25 = a2[1];
            int v26 = 1869968496;
LABEL_173:
            BOOL v22 = v25 == v26;
            goto LABEL_174;
          }
          if (v6 == 1986225266 || v6 == 1986225268) {
            goto LABEL_165;
          }
          int v12 = 1986225518;
        }
        else
        {
          if (v6 > 1936879203)
          {
            if (v6 <= 1952997987)
            {
              if (v6 == 1936879204) {
                goto LABEL_165;
              }
              if (v6 == 1936946787) {
                goto LABEL_168;
              }
              int v7 = 1937138532;
            }
            else
            {
              if (v6 > 1953002092)
              {
                if (v6 == 1953002093) {
                  goto LABEL_165;
                }
                unsigned __int16 v10 = 29554;
              }
              else
              {
                if (v6 == 1952997988) {
                  goto LABEL_165;
                }
                unsigned __int16 v10 = 25202;
              }
              int v7 = v10 | 0x74680000;
            }
            goto LABEL_164;
          }
          if (v6 <= 1936876402)
          {
            if (v6 == 1935762281 || v6 == 1935962992) {
              goto LABEL_165;
            }
            int v7 = 1936744803;
            goto LABEL_164;
          }
          if (v6 == 1936876403) {
            goto LABEL_177;
          }
          if (v6 == 1936876644) {
            goto LABEL_165;
          }
          int v12 = 1936878960;
        }
      }
      else
      {
        if (v6 <= 1869838182)
        {
          if (v6 <= 1769302371)
          {
            if (v6 > 1719165554)
            {
              if (v6 == 1719165555)
              {
                BOOL v4 = ((*(uint64_t (**)(void, void))(**(void **)(a1 + 1008) + 528))(*(void *)(a1 + 1008), a2[1]) & 0xFF00000000) != 0;
                goto LABEL_168;
              }
              if (v6 == 1735682404) {
                goto LABEL_168;
              }
              int v11 = 1752657012;
              goto LABEL_122;
            }
            if (v6 == 1701733224) {
              goto LABEL_151;
            }
            if (v6 == 1718383987) {
              goto LABEL_168;
            }
            int v8 = 1718641517;
          }
          else if (v6 <= 1853059618)
          {
            if (v6 == 1769302372 || v6 == 1818326127) {
              goto LABEL_165;
            }
            int v8 = 1852012899;
          }
          else
          {
            if (v6 > 1869574755)
            {
              if (v6 == 1869574756) {
                goto LABEL_165;
              }
              int v7 = 1869575794;
              goto LABEL_164;
            }
            if (v6 == 1853059619) {
              goto LABEL_168;
            }
            int v8 = 1853059700;
          }
          goto LABEL_141;
        }
        if (v6 <= 1886807153)
        {
          if (v6 > 1886216546)
          {
            if (v6 == 1886216547) {
              goto LABEL_168;
            }
            if (v6 != 1886413412)
            {
              int v7 = 1886413426;
              goto LABEL_164;
            }
          }
          else
          {
            if (v6 == 1869838183) {
              goto LABEL_168;
            }
            if (v6 != 1885434482)
            {
              int v7 = 1885631346;
              goto LABEL_164;
            }
          }
          goto LABEL_165;
        }
        if (v6 <= 1919773027)
        {
          if (v6 == 1886807154) {
            goto LABEL_165;
          }
          if (v6 == 1902539642) {
            goto LABEL_168;
          }
          int v12 = 1918987632;
        }
        else
        {
          if (v6 > 1920165218)
          {
            if (v6 == 1920165219) {
              goto LABEL_168;
            }
            int v7 = 1934456180;
            goto LABEL_164;
          }
          if (v6 == 1919773028) {
            goto LABEL_168;
          }
          int v12 = 1919774835;
        }
      }
    }
    else
    {
      if (v6 <= 1668443503)
      {
        if (v6 <= 1635020146)
        {
          if (v6 > 1633970531)
          {
            if (v6 > 1634300530)
            {
              if (v6 <= 1634755427)
              {
                if (v6 != 1634300531)
                {
                  int v7 = 1634692199;
                  goto LABEL_164;
                }
LABEL_168:
                sub_3BCAC(&v35);
                return v4;
              }
              if (v6 != 1634755428)
              {
                int v7 = 1634890859;
                goto LABEL_164;
              }
LABEL_165:
              unsigned __int16 v24 = (uint64_t (**)(void))(**(void **)(a1 + 1008) + 16);
LABEL_166:
              uint64_t v20 = (*v24)();
              goto LABEL_167;
            }
            if (v6 == 1633970532) {
              goto LABEL_168;
            }
            if (v6 == 1633973868) {
              goto LABEL_165;
            }
            int v11 = 1634035054;
            goto LABEL_122;
          }
          if (v6 > 1633904998)
          {
            if (v6 == 1633904999 || v6 == 1633906541) {
              goto LABEL_165;
            }
            unsigned __int16 v13 = 29554;
          }
          else
          {
            if (v6 == 1165513555 || v6 == 1633776747) {
              goto LABEL_165;
            }
            unsigned __int16 v13 = 25449;
          }
          int v7 = v13 | 0x61630000;
LABEL_164:
          if (v6 == v7) {
            goto LABEL_165;
          }
LABEL_182:
          uint64_t v20 = sub_3C9E0((void *)a1, a2);
          goto LABEL_167;
        }
        if (v6 <= 1651664738)
        {
          if (v6 > 1635152992)
          {
            if ((v6 - 1635152993) <= 0xE && ((1 << (v6 - 97)) & 0x4015) != 0) {
              goto LABEL_165;
            }
            int v11 = 1650881394;
LABEL_122:
            if (v6 != v11) {
              goto LABEL_182;
            }
            int v21 = a2[1];
            BOOL v22 = v21 == 1869968496 || v21 == 1768845428;
LABEL_174:
            BOOL v4 = v22;
            goto LABEL_168;
          }
          if (v6 == 1635020147) {
            goto LABEL_165;
          }
          if (v6 != 1635148648) {
            goto LABEL_182;
          }
LABEL_151:
          int v25 = a2[1];
          int v26 = 1768845428;
          goto LABEL_173;
        }
        if (v6 <= 1667658617)
        {
          if (v6 == 1651664739 || v6 == 1651798898) {
            goto LABEL_165;
          }
          int v8 = 1651861092;
          goto LABEL_141;
        }
        if (v6 == 1667658618) {
          goto LABEL_168;
        }
        if (v6 == 1668047203) {
          goto LABEL_165;
        }
        if (v6 != 1668247661) {
          goto LABEL_182;
        }
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 1008) + 472))(buf);
        uint64_t v14 = *(void *)&v38[4];
        if (!*(void *)&v38[4]) {
          goto LABEL_107;
        }
        float v15 = (uint64_t *)&v38[4];
        do
        {
          float v16 = (uint64_t *)v14;
          BOOL v17 = v15;
          unsigned int v18 = *(_DWORD *)(v14 + 28);
          unint64_t v19 = (uint64_t *)(v14 + 8);
          if (v18 >= 0x70636F70)
          {
            unint64_t v19 = v16;
            float v15 = v16;
          }
          uint64_t v14 = *v19;
        }
        while (v14);
        if (v15 == (uint64_t *)&v38[4]) {
          goto LABEL_107;
        }
        if (v18 < 0x70636F70) {
          float v16 = v17;
        }
        if (*((_DWORD *)v16 + 7) > 0x70636F70u) {
LABEL_107:
        }
          float v15 = (uint64_t *)&v38[4];
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 1008) + 472))(&v33);
        sub_463E0(v34);
        sub_463E0(*(void **)&v38[4]);
        if (v15 != (uint64_t *)&v34)
        {
          uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 352))(*(void *)(a1 + 1008), 1685287015, 2019976293, 0);
LABEL_167:
          BOOL v4 = v20;
          goto LABEL_168;
        }
LABEL_180:
        BOOL v4 = 0;
        goto LABEL_168;
      }
      if (v6 <= 1684500593)
      {
        if (v6 > 1684238450)
        {
          if (v6 > 1684370275)
          {
            if (v6 > 1684498543)
            {
              if (v6 == 1684498544) {
                goto LABEL_165;
              }
              unsigned __int16 v9 = 28781;
            }
            else
            {
              if (v6 == 1684370276) {
                goto LABEL_165;
              }
              unsigned __int16 v9 = 26733;
            }
            int v7 = v9 | 0x64670000;
            goto LABEL_164;
          }
          if (v6 == 1684238451) {
            goto LABEL_168;
          }
          if (v6 != 1684304756)
          {
            int v7 = 1684365924;
            goto LABEL_164;
          }
          goto LABEL_178;
        }
        if (v6 <= 1684104050)
        {
          if (v6 != 1668443504 && v6 != 1668705648)
          {
            int v8 = 1684104048;
            goto LABEL_141;
          }
LABEL_147:
          uint64_t v23 = *(void **)(a1 + 928);
          if (!v23)
          {
            int v30 = (os_log_t *)sub_32A48(13);
            unint64_t v31 = *v30;
            if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)int v38 = "VirtualAudio_Device.cpp";
              *(_WORD *)&v38[8] = 1024;
              *(_DWORD *)&v38[10] = 1869;
              _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }
            exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Precondition failure.");
          }
          unsigned __int16 v24 = (uint64_t (**)(void))(*v23 + 32);
          goto LABEL_166;
        }
        if (v6 == 1684104051) {
          goto LABEL_168;
        }
        if (v6 == 1684107364) {
          goto LABEL_165;
        }
        int v8 = 1684236338;
LABEL_141:
        if (v6 != v8) {
          goto LABEL_182;
        }
        goto LABEL_168;
      }
      if (v6 <= 1685287010)
      {
        if (v6 > 1685087595)
        {
          if ((v6 - 1685278561) <= 0x11 && ((1 << (v6 - 97)) & 0x20003) != 0) {
            goto LABEL_165;
          }
          int v7 = 1685087596;
          goto LABEL_164;
        }
        if (v6 == 1684500594 || v6 == 1684893796) {
          goto LABEL_165;
        }
        int v8 = 1685025633;
        goto LABEL_141;
      }
      if (v6 <= 1685288050)
      {
        if ((v6 - 1685287011) < 2) {
          goto LABEL_165;
        }
        if (v6 != 1685287523) {
          goto LABEL_182;
        }
LABEL_177:
        int v28 = a2[1];
        int v29 = 1768845428;
        goto LABEL_179;
      }
      if (v6 == 1685288051)
      {
LABEL_178:
        int v28 = a2[1];
        int v29 = 1869968496;
LABEL_179:
        if (v28 == v29) {
          goto LABEL_165;
        }
        goto LABEL_180;
      }
      if (v6 == 1685483630) {
        goto LABEL_165;
      }
      int v12 = 1685484390;
    }
    if (v6 != v12) {
      goto LABEL_182;
    }
    goto LABEL_147;
  }
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 1088));
  return v3 != 0;
}

void sub_3B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_3B7EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64CCE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64CCE8))
  {
    v0 = (void *)sub_43DC84((uint64_t)&qword_64CC40, (uint64_t)"Global Routing Mutex");
    void *v0 = off_626828;
    v0[17] = 0;
    v0[18] = v0 + 18;
    v0[19] = v0 + 18;
    v0[20] = 0;
    __cxa_guard_release(&qword_64CCE8);
  }
}

void sub_3B888(_Unwind_Exception *a1)
{
}

BOOL sub_3B8A0(uint64_t a1)
{
  BOOL v2 = sub_3B9AC(a1);
  if ((sub_3BAEC(a1) & 1) == 0)
  {
    unsigned int v3 = pthread_self();
    if (!pthread_equal(v3, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
    {
      unint64_t v5 = (os_log_t *)sub_32A48(13);
      int v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v7 = 136315394;
          int v8 = "RoutingMutex.cpp";
          __int16 v9 = 1024;
          int v10 = 217;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mutex not owned by current thread\"", (uint8_t *)&v7, 0x12u);
        }
      }
    }
    do
      sub_43DA28(a1);
    while (!sub_3BAEC(a1));
  }
  return v2;
}

BOOL sub_3B9AC(uint64_t a1)
{
  BOOL v2 = pthread_self();
  int v3 = pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire));
  if (!v3)
  {
    int v4 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
    if (v4)
    {
      int v6 = v4;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        __int16 v9 = "CAMutex.cpp";
        __int16 v10 = 1024;
        int v11 = 106;
        _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Lock: Could not lock the mutex", (uint8_t *)&v8, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v6;
    }
    atomic_store((unint64_t)v2, (unint64_t *)(a1 + 16));
  }
  return v3 == 0;
}

uint64_t sub_3BAEC(uint64_t a1)
{
  BOOL v2 = pthread_self();
  if (!pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
  {
    int v4 = (os_log_t *)sub_32A48(13);
    unint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        unsigned __int16 v13 = "RoutingMutex.cpp";
        __int16 v14 = 1024;
        int v15 = 199;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mutex not owned by current thread\"", (uint8_t *)&v12, 0x12u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 136)) {
    return AudioObjectIsOnListenerThread() != 0;
  }
  if (!*(_DWORD *)(a1 + 140)) {
    return 1;
  }
  int v6 = pthread_self();
  if (!pthread_equal(v6, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
  {
    __int16 v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        unsigned __int16 v13 = "RoutingMutex.cpp";
        __int16 v14 = 1024;
        int v15 = 229;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mutex not owned by current thread\"", (uint8_t *)&v12, 0x12u);
      }
    }
  }
  uint64_t v7 = a1 + 144;
  uint64_t v8 = *(void *)(a1 + 152);
  if (v7 == v8) {
    return 0;
  }
  do
  {
    uint64_t result = sub_51CA0(*(void *)(*(void *)(v8 + 16) + 640));
    uint64_t v8 = *(void *)(v8 + 8);
    if (v7 == v8) {
      int v9 = 1;
    }
    else {
      int v9 = result;
    }
  }
  while (v9 != 1);
  return result;
}

unsigned char *sub_3BCAC(unsigned char *a1)
{
  if (a1[8]) {
    (*(void (**)(void))(**(void **)a1 + 24))();
  }
  return a1;
}

uint64_t *sub_3BD04()
{
  return &qword_64CC40;
}

BOOL sub_3BD24(uint64_t a1, int *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v2 & 1) == 0)
  {
    unsigned __int16 v13 = (os_log_t *)sub_32A48(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 205;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Underlying Port is not valid\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }
  int v4 = *a2;
  BOOL v5 = 1;
  if (*a2 > 1886417761)
  {
    if (v4 > 1936746610)
    {
      if (v4 > 1953653605)
      {
        if (v4 > 1986164322)
        {
          if (v4 > 1986947427)
          {
            if (v4 == 1986947428 || v4 == 2004050279) {
              goto LABEL_133;
            }
            int v8 = 2004054901;
            goto LABEL_132;
          }
          if (v4 != 1986164323)
          {
            int v8 = 1986814563;
            goto LABEL_132;
          }
          goto LABEL_133;
        }
        if (v4 > 1953719141)
        {
          if (v4 == 1953719142)
          {
            sub_44A7E8((uint64_t *)buf);
            BOOL v5 = *(void *)buf != 0;
            sub_63908((const void **)buf);
            return v5;
          }
          if (v4 == 1970040164) {
            goto LABEL_133;
          }
          int v8 = 1970496630;
          goto LABEL_132;
        }
        if (v4 != 1953653606)
        {
          if (v4 == 1953655149)
          {
            sub_43F38((uint64_t *)&v16, (uint64_t *)(a1 + 88), "", 273);
            (*(void (**)(unsigned char *__return_ptr))(*v16[24] + 288))(buf);
            BOOL v5 = *(void *)buf != *(void *)&buf[8];
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
            int v11 = v17;
            if (v17) {
              goto LABEL_136;
            }
            return v5;
          }
          goto LABEL_145;
        }
        sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 277);
        sub_24F760((uint64_t *)&v16, *(uint64_t *)buf);
        BOOL v5 = v16 != 0;
        sub_63908((const void **)&v16);
        goto LABEL_135;
      }
      if (v4 > 1936749679)
      {
        if (v4 > 1937204589)
        {
          if (v4 == 1937204590) {
            goto LABEL_133;
          }
          if (v4 == 1952609377)
          {
            sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 293);
            uint64_t v10 = (*(uint64_t (**)(void, int *))(**(void **)buf + 16))(*(void *)buf, a2);
            goto LABEL_134;
          }
          if (v4 != 1952740208) {
            goto LABEL_145;
          }
          sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 285);
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 360))(*(void *)buf);
          goto LABEL_134;
        }
        if (v4 != 1936749680)
        {
          if (v4 != 1936945763) {
            goto LABEL_145;
          }
          sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 344);
          uint64_t v10 = (*(uint64_t (**)(void, int *))(**(void **)buf + 16))(*(void *)buf, a2);
          goto LABEL_134;
        }
        goto LABEL_124;
      }
      if (v4 > 1936748140)
      {
        if (v4 != 1936748141)
        {
          if (v4 != 1936748656) {
            goto LABEL_145;
          }
          sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 269);
          uint64_t v10 = sub_1013AC(*(uint64_t *)buf, a2[2]);
          goto LABEL_134;
        }
        sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 261);
LABEL_125:
        int v11 = *(std::__shared_weak_count **)&buf[8];
        BOOL v5 = *(void *)(*(void *)buf + 96) != *(void *)(*(void *)buf + 104);
        if (!*(void *)&buf[8]) {
          return v5;
        }
        goto LABEL_136;
      }
      if ((v4 - 1936747876) < 2) {
        goto LABEL_133;
      }
      unsigned __int16 v7 = 26739;
    }
    else
    {
      if (v4 <= 1886742883)
      {
        if (v4 > 1886613618)
        {
          if (v4 <= 1886614624)
          {
            if (v4 == 1886613619) {
              return v5;
            }
            int v8 = 1886614381;
            goto LABEL_132;
          }
          if (v4 == 1886614625 || v4 == 1886614882) {
            return v5;
          }
          int v9 = 1886681456;
        }
        else
        {
          if (v4 <= 1886484337)
          {
            if (v4 != 1886417762)
            {
              if (v4 != 1886417783) {
                goto LABEL_145;
              }
              sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 242);
              uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 328))(*(void *)buf);
              goto LABEL_134;
            }
            goto LABEL_124;
          }
          if (v4 == 1886484338 || v4 == 1886611810) {
            return v5;
          }
          int v9 = 1886613101;
        }
LABEL_110:
        if (v4 == v9) {
          return v5;
        }
        goto LABEL_145;
      }
      if (v4 <= 1936221549)
      {
        if (v4 <= 1886810225)
        {
          if (v4 == 1886742884) {
            return v5;
          }
          int v9 = 1886808435;
        }
        else
        {
          if (v4 == 1886810226) {
            return v5;
          }
          if (v4 == 1935762278) {
            goto LABEL_133;
          }
          int v9 = 1935895923;
        }
        goto LABEL_110;
      }
      if (v4 > 1936745317)
      {
        if (v4 == 1936745318) {
          goto LABEL_133;
        }
        if (v4 == 1936745586)
        {
          sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 265);
          uint64_t v10 = sub_105B60(*(uint64_t *)buf, a2[2]);
          goto LABEL_134;
        }
        unsigned __int16 v7 = 25966;
      }
      else
      {
        if (v4 == 1936221550 || v4 == 1936225136) {
          goto LABEL_133;
        }
        unsigned __int16 v7 = 24944;
      }
    }
    int v8 = v7 | 0x73700000;
    goto LABEL_132;
  }
  if (v4 <= 1819503986)
  {
    if (v4 <= 1685021039)
    {
      if (v4 <= 1651797099)
      {
        if (v4 > 1651796324)
        {
          if ((v4 - 1651796325) <= 0xE && ((1 << (v4 - 101)) & 0x4801) != 0) {
            goto LABEL_133;
          }
          goto LABEL_145;
        }
        if (v4 == 1650551140 || v4 == 1651271025) {
          goto LABEL_133;
        }
        unsigned __int16 v6 = 24946;
        goto LABEL_100;
      }
      if (v4 > 1651798885)
      {
        if (v4 == 1651798886 || v4 == 1668051827) {
          goto LABEL_133;
        }
        int v8 = 1684826732;
LABEL_132:
        if (v4 == v8) {
          goto LABEL_133;
        }
LABEL_145:
        if (v4 != 1818850145 && v4 != 1818850162) {
          return sub_3A6620(a1, a2) != 0;
        }
        return v5;
      }
      if (v4 != 1651797100)
      {
        unsigned __int16 v6 = 28787;
LABEL_100:
        int v8 = v6 | 0x62740000;
        goto LABEL_132;
      }
LABEL_133:
      sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 340);
      uint64_t v10 = (*(uint64_t (**)(void, int *))(**(void **)buf + 16))(*(void *)buf, a2);
      goto LABEL_134;
    }
    if (v4 > 1752327776)
    {
      if (v4 <= 1767989615)
      {
        if (v4 == 1752327777) {
          return v5;
        }
        int v8 = 1752462195;
      }
      else
      {
        if (v4 == 1767989616 || v4 == 1768382832) {
          goto LABEL_133;
        }
        int v8 = 1819046768;
      }
      goto LABEL_132;
    }
    if (v4 > 1685287025)
    {
      if ((v4 - 1685287026) < 2) {
        return v5;
      }
      int v8 = 1685484390;
      goto LABEL_132;
    }
    if (v4 != 1685021040 && v4 != 1685088612) {
      goto LABEL_145;
    }
    sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 238);
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 424))(*(void *)buf);
LABEL_134:
    BOOL v5 = v10;
    goto LABEL_135;
  }
  if (v4 > 1885955427)
  {
    if (v4 > 1886282098)
    {
      if (v4 <= 1886353261)
      {
        if (v4 == 1886282099)
        {
          sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 257);
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 256))(*(void *)buf);
          goto LABEL_134;
        }
        if (v4 != 1886283375) {
          goto LABEL_145;
        }
        sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 246);
        uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 344))(*(void *)buf);
        goto LABEL_134;
      }
      if (v4 == 1886353262 || v4 == 1886415204) {
        return v5;
      }
      int v9 = 1886417524;
    }
    else if (v4 <= 1885959025)
    {
      if (v4 == 1885955428) {
        goto LABEL_133;
      }
      int v9 = 1885956208;
    }
    else
    {
      if (v4 == 1885959026 || v4 == 1886218596) {
        return v5;
      }
      int v9 = 1886282093;
    }
    goto LABEL_110;
  }
  if (v4 <= 1885497709)
  {
    if (v4 <= 1869832546)
    {
      if (v4 != 1819503987)
      {
        int v8 = 1819505773;
        goto LABEL_132;
      }
      goto LABEL_133;
    }
    if (v4 == 1869832547) {
      goto LABEL_133;
    }
    if (v4 != 1885430643 && v4 != 1885434722) {
      goto LABEL_145;
    }
LABEL_124:
    sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 253);
    goto LABEL_125;
  }
  if (v4 <= 1885566063)
  {
    if (v4 == 1885497710) {
      return v5;
    }
    if (v4 != 1885561196) {
      goto LABEL_145;
    }
    sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 297);
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)buf + 376))(*(void *)buf);
    goto LABEL_134;
  }
  if (v4 == 1885566064) {
    return v5;
  }
  if (v4 != 1885696116)
  {
    int v9 = 1885890929;
    goto LABEL_110;
  }
  sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 289);
  BOOL v5 = ((*(uint64_t (**)(void))(**(void **)buf + 112))(*(void *)buf) & 0xFF00000000) != 0;
LABEL_135:
  int v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]) {
LABEL_136:
  }
    sub_4636C(v11);
  return v5;
}

void sub_3C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3C9E0(void *a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1;
  if (*a2 <= 1818850144)
  {
    if (v2 <= 1735354733)
    {
      if (v2 <= 1684434035)
      {
        if (v2 <= 1667330159)
        {
          if (v2 == 1634429294) {
            return v3;
          }
          int v4 = 1634955892;
          goto LABEL_55;
        }
        if (v2 != 1667330160)
        {
          int v4 = 1668049764;
          goto LABEL_55;
        }
        unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 168))(a1);
        if (v6) {
          goto LABEL_76;
        }
        return 0;
      }
      if (v2 > 1718839673)
      {
        if (v2 == 1718839674) {
          return v3;
        }
        int v4 = 1718843939;
        goto LABEL_55;
      }
      if (v2 != 1684434036)
      {
        int v4 = 1684629094;
        goto LABEL_55;
      }
      goto LABEL_48;
    }
    if (v2 <= 1768124269)
    {
      if (v2 > 1751412336)
      {
        if (v2 == 1751412337) {
          return v3;
        }
        int v4 = 1751737454;
      }
      else
      {
        if (v2 == 1735354734) {
          return v3;
        }
        int v4 = 1735356005;
      }
      goto LABEL_55;
    }
    if (v2 > 1818454125)
    {
      if (v2 == 1818454126)
      {
        unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 144))(a1);
        if (v6) {
          goto LABEL_76;
        }
        return 0;
      }
      if (v2 == 1818455662)
      {
        unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 160))(a1);
        if (v6) {
          goto LABEL_76;
        }
        return 0;
      }
    }
    else
    {
      if (v2 == 1768124270)
      {
        unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 136))(a1);
        if (v6) {
          goto LABEL_76;
        }
        return 0;
      }
      if (v2 == 1818452846)
      {
        unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 152))(a1);
        if (v6) {
          goto LABEL_76;
        }
        return 0;
      }
    }
    goto LABEL_85;
  }
  if (v2 <= 1870030193)
  {
    if (v2 <= 1819173228)
    {
      if (v2 <= 1818850925)
      {
        if (v2 == 1818850145) {
          return v3;
        }
        int v4 = 1818850162;
        goto LABEL_55;
      }
      if (v2 == 1818850926) {
        return v3;
      }
      if (v2 != 1819107691) {
        goto LABEL_85;
      }
      unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 128))(a1);
      if (v6) {
        goto LABEL_76;
      }
      return 0;
    }
    if (v2 > 1836411235)
    {
      if (v2 != 1836411236)
      {
        int v4 = 1869180523;
LABEL_55:
        if (v2 == v4) {
          return v3;
        }
        goto LABEL_85;
      }
      unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 184))(a1);
      if (v6)
      {
LABEL_76:
        CFRelease(v6);
        return 1;
      }
      return 0;
    }
    if (v2 == 1819173229)
    {
      unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 120))(a1);
      if (v6) {
        goto LABEL_76;
      }
      return 0;
    }
    int v5 = 1819569763;
    goto LABEL_34;
  }
  if (v2 <= 1937009954)
  {
    if (v2 > 1936092275)
    {
      if (v2 == 1936092276) {
        return a2[1] == 1869968496;
      }
      if (v2 == 1936482681)
      {
LABEL_48:
        int v10 = a2[1];
        return v10 == 1768845428 || v10 == 1869968496;
      }
LABEL_85:
      BOOL v13 = sub_3A6620((uint64_t)a1, a2) == 0;
      return !v13;
    }
    if (v2 == 1870030194) {
      return v3;
    }
    int v5 = 1935763060;
LABEL_34:
    if (v2 == v5)
    {
      int v7 = a2[1];
      if (v7 == 1869968496)
      {
        uint64_t v8 = a1[66];
        uint64_t v9 = a1[65];
      }
      else
      {
        if (v7 != 1768845428) {
          return 0;
        }
        uint64_t v9 = a1[62];
        uint64_t v8 = a1[63];
      }
      BOOL v13 = ((v8 - v9) & 0x7FFFFFFF8) == 0;
      return !v13;
    }
    goto LABEL_85;
  }
  if (v2 > 1953653101)
  {
    if (v2 == 1953653102) {
      return v3;
    }
    if (v2 == 1969841184)
    {
      unsigned __int16 v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 176))(a1);
      if (v6) {
        goto LABEL_76;
      }
      return 0;
    }
    goto LABEL_85;
  }
  if (v2 != 1937009955)
  {
    int v5 = 1937077093;
    goto LABEL_34;
  }
  int v12 = a2[1];
  uint64_t v3 = 1;
  if (v12 != 1735159650 && v12 != 1768845428 && v12 != 1869968496) {
    return 0;
  }
  return v3;
}

uint64_t sub_3CF28()
{
  return 0;
}

uint64_t sub_3CF30(uint64_t a1, int *a2)
{
  if (*a2 != 1986095470)
  {
    sub_3B7EC();
    uint64_t v20 = &qword_64CC40;
    char v21 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    if (*(_DWORD *)(a1 + 108) != 2)
    {
      uint64_t v11 = sub_32A48(13);
      int v12 = sub_7D5E8(1, *(void **)v11, *(void *)(v11 + 8));
      BOOL v13 = v12;
      if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v23 = (uint64_t)"VirtualAudio_PlugIn.mm";
        __int16 v24 = 1024;
        int v25 = 5134;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"VirtualAudio PlugIn is not initialized yet\"", buf, 0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
    }
    int v5 = *a2;
    BOOL v2 = 1;
    if (*a2 > 1818850144)
    {
      if (v5 <= 1936028520)
      {
        if (v5 > 1886549106)
        {
          if (v5 > 1920230245)
          {
            if (v5 == 1920230246 || v5 == 1920297328) {
              goto LABEL_66;
            }
            int v6 = 1920426613;
          }
          else
          {
            if (v5 == 1886549107 || v5 == 1903653475) {
              goto LABEL_66;
            }
            int v6 = 1919120504;
          }
        }
        else if (v5 > 1868853874)
        {
          if (v5 == 1868853875 || v5 == 1886350709) {
            goto LABEL_66;
          }
          int v6 = 1886548848;
        }
        else
        {
          if (v5 == 1818850145 || v5 == 1818850162) {
            goto LABEL_66;
          }
          int v6 = 1819173229;
        }
        goto LABEL_64;
      }
      if (v5 > 1986094178)
      {
        if (v5 > 1987077485)
        {
          if (v5 == 1987077486) {
            goto LABEL_66;
          }
          int v6 = 2019714413;
        }
        else
        {
          if ((v5 - 1986094179) < 2) {
            goto LABEL_66;
          }
          int v6 = 1987016304;
        }
        goto LABEL_64;
      }
      if (v5 <= 1936745572)
      {
        if (v5 == 1936028521 || v5 == 1936225648) {
          goto LABEL_66;
        }
        int v6 = 1936745332;
        goto LABEL_64;
      }
      if (v5 != 1936745573)
      {
        if (v5 == 1936746862) {
          goto LABEL_66;
        }
        int v6 = 1936882284;
        goto LABEL_64;
      }
      if (MGGetBoolAnswer()) {
        goto LABEL_66;
      }
      uint64_t v10 = sub_8B774();
    }
    else if (v5 <= 1651664754)
    {
      if (v5 <= 1634629489)
      {
        if (v5 > 1634624370)
        {
          if (v5 == 1634624371 || v5 == 1634627952) {
            goto LABEL_66;
          }
          int v6 = 1634627954;
          goto LABEL_64;
        }
        if (v5 != 1633907299)
        {
          int v6 = 1633969267;
          goto LABEL_64;
        }
      }
      else
      {
        if (v5 <= 1635152482)
        {
          if (v5 == 1634629490 || v5 == 1634756195) {
            goto LABEL_66;
          }
          int v6 = 1634759267;
          goto LABEL_64;
        }
        if (v5 != 1635152483)
        {
          if (v5 == 1651077236) {
            goto LABEL_66;
          }
          int v6 = 1651077731;
          goto LABEL_64;
        }
      }
      uint64_t v8 = sub_E1B78(*(void *)(a1 + 128), a2[2]);
      if (!v8)
      {
        uint64_t v15 = sub_32A48(13);
        float v16 = sub_7D5E8(1, *(void **)v15, *(void *)(v15 + 8));
        BOOL v17 = v16;
        if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v18 = a2[2];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v23 = (uint64_t)"VirtualAudio_PlugIn.mm";
          __int16 v24 = 1024;
          int v25 = 5199;
          __int16 v26 = 1024;
          int v27 = v18;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [vaPort is NULL]: \"VirtualAudio_Port could not be located for ID: %u\"", buf, 0x18u);
        }

        unint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v19, "VirtualAudio_Port could not be located for ID: %u");
      }
      if (*a2 == 1635152483) {
        int v9 = 1885434722;
      }
      else {
        int v9 = 1885430643;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = v9;
      uint64_t v23 = 1735159650;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v8 + 32))(v8, buf);
    }
    else
    {
      if (v5 <= 1685283954)
      {
        if (v5 <= 1668313698)
        {
          if (v5 != 1651664755 && v5 != 1667329392)
          {
            int v6 = 1668310627;
            goto LABEL_64;
          }
LABEL_66:
          sub_3BCAC(&v20);
          return v2;
        }
        if (v5 == 1668313699 || v5 == 1668575346) {
          goto LABEL_66;
        }
        int v6 = 1684632434;
LABEL_64:
        if (v5 != v6) {
          BOOL v2 = sub_3A6620(a1, a2) != 0;
        }
        goto LABEL_66;
      }
      if (v5 > 1751480690)
      {
        if (v5 == 1751480691 || v5 == 1768845421) {
          goto LABEL_66;
        }
        int v6 = 1769304164;
        goto LABEL_64;
      }
      if (v5 == 1685283955) {
        goto LABEL_66;
      }
      if (v5 != 1701013875)
      {
        int v6 = 1701737068;
        goto LABEL_64;
      }
      uint64_t v10 = sub_20ADDC();
    }
    BOOL v2 = v10;
    goto LABEL_66;
  }
  return 1;
}

void sub_3D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_3D5FC()
{
  return &qword_64CC40;
}

uint64_t sub_3D61C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    BOOL v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_3D658(void *a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 8;
  if (*a2 > 1818455661)
  {
    if (v2 <= 1870030193)
    {
      if (v2 <= 1819173228)
      {
        if (v2 == 1818455662) {
          return v3;
        }
        if (v2 == 1818850926) {
          return 4;
        }
        int v6 = 1819107691;
        goto LABEL_52;
      }
      if (v2 > 1836411235)
      {
        if (v2 != 1836411236)
        {
          int v4 = 1869180523;
          goto LABEL_56;
        }
      }
      else if (v2 != 1819173229)
      {
        int v4 = 1819569763;
        goto LABEL_56;
      }
    }
    else
    {
      int v5 = a2[1];
      if (v2 <= 1937009954)
      {
        if (v2 > 1936092275)
        {
          if (v2 != 1936092276)
          {
            if (v2 == 1936482681)
            {
              uint64_t v9 = 66;
              if (v5 == 1768845428) {
                uint64_t v9 = 63;
              }
              uint64_t v10 = 65;
              if (v5 == 1768845428) {
                uint64_t v10 = 62;
              }
              return (16 * ((LODWORD(a1[v9]) - LODWORD(a1[v10])) >> 3)) | 8;
            }
            return sub_3A69A4((uint64_t)a1, a2);
          }
        }
        else if (v2 != 1870030194)
        {
          int v4 = 1935763060;
          goto LABEL_56;
        }
        return 4;
      }
      if (v2 <= 1953653101)
      {
        if (v2 == 1937009955)
        {
          int v12 = a1 + 62;
          if (v5 == 1735159650) {
            return 4 * (((a1[63] - *v12) >> 3) + ((a1[66] - a1[65]) >> 3));
          }
          BOOL v13 = v5 == 1768845428;
          if (v5 == 1768845428) {
            __int16 v14 = a1 + 63;
          }
          else {
            __int16 v14 = a1 + 66;
          }
          if (!v13) {
            int v12 = a1 + 65;
          }
          return ((*v14 - *v12) >> 1) & 0xFFFFFFFCLL;
        }
        if (v2 == 1937077093)
        {
          uint64_t v7 = 66;
          if (v5 == 1768845428) {
            uint64_t v7 = 63;
          }
          uint64_t v8 = 65;
          if (v5 == 1768845428) {
            uint64_t v8 = 62;
          }
          return (((a1[v7] - a1[v8]) >> 1) & 0xFFFFFFFC) + 12;
        }
        return sub_3A69A4((uint64_t)a1, a2);
      }
      if (v2 != 1969841184)
      {
        int v4 = 1953653102;
        goto LABEL_56;
      }
    }
    return v3;
  }
  if (v2 <= 1718843938)
  {
    if (v2 > 1668049763)
    {
      if (v2 > 1684629093)
      {
        if (v2 != 1684629094)
        {
          int v4 = 1718839674;
          goto LABEL_56;
        }
      }
      else if (v2 != 1668049764)
      {
        int v4 = 1684434036;
        goto LABEL_56;
      }
      return 4;
    }
    if (v2 == 1634429294) {
      return 4;
    }
    if (v2 != 1634955892)
    {
      int v6 = 1667330160;
LABEL_52:
      if (v2 != v6) {
        return sub_3A69A4((uint64_t)a1, a2);
      }
    }
    return v3;
  }
  if (v2 > 1751737453)
  {
    if (v2 > 1818452845)
    {
      if (v2 == 1818452846) {
        return v3;
      }
      int v6 = 1818454126;
    }
    else
    {
      if (v2 == 1751737454) {
        return 4;
      }
      int v6 = 1768124270;
    }
    goto LABEL_52;
  }
  if (v2 > 1735356004)
  {
    if (v2 != 1735356005)
    {
      int v4 = 1751412337;
      goto LABEL_56;
    }
    return 4;
  }
  if (v2 == 1718843939) {
    return 16;
  }
  int v4 = 1735354734;
LABEL_56:
  if (v2 == v4) {
    return 4;
  }
  return sub_3A69A4((uint64_t)a1, a2);
}

void sub_3DA00(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, void *a6)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v6 & 1) == 0)
  {
    uint64_t v115 = (os_log_t *)sub_32A48(13);
    uint64_t v116 = *v115;
    if (*v115 && os_log_type_enabled(*v115, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFTypeRef cf = 136315394;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 665;
      _os_log_impl(&def_1E50E8, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Underlying Port is not valid\"", cf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0)
  {
    uint64_t v118 = (os_log_t *)sub_32A48(13);
    uint64_t v119 = *v118;
    if (*v118 && os_log_type_enabled(*v118, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef Mutable = *(CFTypeRef *)a2;
      LODWORD(v480) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
      uint64_t v120 = v485 >= 0 ? &v483 : (CFTypeRef *)v483;
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 667;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = v120;
      _os_log_impl(&def_1E50E8, v119, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", cf, 0x1Cu);
      if (v485 < 0) {
        operator delete((void *)v483);
      }
    }
    char v121 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v121 = &off_6414D8;
    v121[2] = 2003332927;
  }
  if ((a3 == 0) != (a4 == 0))
  {
    uint64_t v122 = (os_log_t *)sub_32A48(13);
    int v123 = *v122;
    if (*v122 && os_log_type_enabled(*v122, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef Mutable = *(CFTypeRef *)a2;
      LODWORD(v480) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
      int v124 = v485 >= 0 ? &v483 : (CFTypeRef *)v483;
      *(_DWORD *)CFTypeRef cf = 136316162;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 668;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = v124;
      *(_WORD *)&unsigned char cf[28] = 1024;
      *(_DWORD *)uint64_t v487 = a3;
      *(_WORD *)&v487[4] = 2048;
      *(void *)&v487[6] = a4;
      _os_log_impl(&def_1E50E8, v123, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        cf,
        0x2Cu);
      if (v485 < 0) {
        operator delete((void *)v483);
      }
    }
    uint64_t v125 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v125 = &off_6414D8;
    v125[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v126 = (os_log_t *)sub_32A48(13);
    int v127 = *v126;
    if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef Mutable = *(CFTypeRef *)a2;
      LODWORD(v480) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
      uint64_t v128 = v485 >= 0 ? &v483 : (CFTypeRef *)v483;
      *(_DWORD *)CFTypeRef cf = 136315906;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 669;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = "outData";
      *(_WORD *)&unsigned char cf[28] = 2080;
      *(void *)uint64_t v487 = v128;
      _os_log_impl(&def_1E50E8, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", cf, 0x26u);
      if (v485 < 0) {
        operator delete((void *)v483);
      }
    }
    uint64_t v129 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v129 = &off_6414D8;
    v129[2] = 561211770;
  }
  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1886417761)
  {
    if (v13 > 1819046767)
    {
      if (v13 > 1885890928)
      {
        if (v13 > 1886282092)
        {
          if (v13 <= 1886353261)
          {
            if (v13 != 1886282093)
            {
              if (v13 != 1886282099)
              {
                if (v13 == 1886283375)
                {
                  unsigned int v14 = *a5;
                  if (v14 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
                  {
                    int v138 = (os_log_t *)sub_32A48(13);
                    CFMutableDictionaryRef v139 = *v138;
                    if (*v138 && os_log_type_enabled(*v138, OS_LOG_TYPE_ERROR))
                    {
                      CFTypeRef Mutable = *(CFTypeRef *)a2;
                      LODWORD(v480) = *(_DWORD *)(a2 + 8);
                      sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                      int v140 = v485;
                      int v141 = (CFTypeRef *)v483;
                      unsigned int v142 = *a5;
                      int v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                      uint64_t v144 = &v483;
                      *(_DWORD *)CFTypeRef cf = 136316162;
                      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                      if (v140 < 0) {
                        uint64_t v144 = v141;
                      }
                      *(_WORD *)&cf[12] = 1024;
                      *(_DWORD *)&cf[14] = 797;
                      *(_WORD *)&cf[18] = 2080;
                      *(void *)&cf[20] = v144;
                      *(_WORD *)&unsigned char cf[28] = 1024;
                      *(_DWORD *)uint64_t v487 = v142;
                      *(_WORD *)&v487[4] = 1024;
                      *(_DWORD *)&v487[6] = v143;
                      _os_log_impl(&def_1E50E8, v139, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                        cf,
                        0x28u);
                      if (v485 < 0) {
                        operator delete((void *)v483);
                      }
                    }
                    int v145 = __cxa_allocate_exception(0x10uLL);
                    *(void *)int v145 = &off_6414D8;
                    v145[2] = 561211770;
                  }
                  sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 798);
                  (*(void (**)(unsigned char *__return_ptr))(*(void *)v483 + 352))(cf);
                  uint64_t v15 = *(const void **)cf;
                  if (*(void *)cf)
                  {
LABEL_234:
                    CFRetain(v15);
                    uint64_t v84 = *(void *)cf;
LABEL_236:
                    *a6 = v84;
                    sub_80594((uint64_t)cf);
                    goto LABEL_302;
                  }
LABEL_235:
                  uint64_t v84 = 0;
                  goto LABEL_236;
                }
                goto LABEL_287;
              }
              unsigned int v97 = *a5;
              if (v97 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
              {
                uint64_t v442 = (os_log_t *)sub_32A48(13);
                v443 = *v442;
                if (*v442 && os_log_type_enabled(*v442, OS_LOG_TYPE_ERROR))
                {
                  CFTypeRef Mutable = *(CFTypeRef *)a2;
                  LODWORD(v480) = *(_DWORD *)(a2 + 8);
                  sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                  int v444 = v485;
                  uint64_t v445 = (CFTypeRef *)v483;
                  unsigned int v446 = *a5;
                  int v447 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                  AudioObjectPropertySelector v448 = &v483;
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  if (v444 < 0) {
                    AudioObjectPropertySelector v448 = v445;
                  }
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 807;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v448;
                  *(_WORD *)&unsigned char cf[28] = 1024;
                  *(_DWORD *)uint64_t v487 = v446;
                  *(_WORD *)&v487[4] = 1024;
                  *(_DWORD *)&v487[6] = v447;
                  _os_log_impl(&def_1E50E8, v443, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                    cf,
                    0x28u);
                  if (v485 < 0) {
                    operator delete((void *)v483);
                  }
                }
                unsigned int v449 = __cxa_allocate_exception(0x10uLL);
                *(void *)unsigned int v449 = &off_6414D8;
                v449[2] = 561211770;
              }
              uint64_t v98 = sub_30A5AC(*(void *)(a1 + 80));
              sub_DB3C8((uint64_t)cf, a1, SHIDWORD(v98));
              uint64_t v63 = *(const void **)cf;
              if (*(void *)cf) {
                goto LABEL_277;
              }
LABEL_279:
              uint64_t v99 = 0;
              goto LABEL_280;
            }
            unsigned int v95 = *a5;
            if (v95 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              uint64_t v426 = (os_log_t *)sub_32A48(13);
              v427 = *v426;
              if (*v426 && os_log_type_enabled(*v426, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                LODWORD(v480) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                int v428 = v485;
                v429 = (CFTypeRef *)v483;
                unsigned int v430 = *a5;
                int v431 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                uint64_t v432 = &v483;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v428 < 0) {
                  uint64_t v432 = v429;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 720;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v432;
                *(_WORD *)&unsigned char cf[28] = 1024;
                *(_DWORD *)uint64_t v487 = v430;
                *(_WORD *)&v487[4] = 1024;
                *(_DWORD *)&v487[6] = v431;
                _os_log_impl(&def_1E50E8, v427, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v485 < 0) {
                  operator delete((void *)v483);
                }
              }
              v433 = __cxa_allocate_exception(0x10uLL);
              *(void *)v433 = &off_6414D8;
              v433[2] = 561211770;
            }
            sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 721);
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v483 + 136))(cf);
            int v65 = *(const void **)cf;
            if (*(void *)cf) {
              goto LABEL_270;
            }
LABEL_300:
            uint64_t v107 = 0;
            goto LABEL_301;
          }
          if (v13 != 1886353262)
          {
            if (v13 != 1886415204)
            {
              if (v13 == 1886417524)
              {
                unsigned int v37 = *a5;
                if (v37 < (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
                {
                  uint64_t v202 = (os_log_t *)sub_32A48(13);
                  char v203 = *v202;
                  if (*v202 && os_log_type_enabled(*v202, OS_LOG_TYPE_ERROR))
                  {
                    CFTypeRef Mutable = *(CFTypeRef *)a2;
                    LODWORD(v480) = *(_DWORD *)(a2 + 8);
                    sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                    int v204 = v485;
                    int v205 = (CFTypeRef *)v483;
                    unsigned int v206 = *a5;
                    int v207 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                    uint64_t v208 = &v483;
                    *(_DWORD *)CFTypeRef cf = 136316162;
                    *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                    if (v204 < 0) {
                      uint64_t v208 = v205;
                    }
                    *(_WORD *)&cf[12] = 1024;
                    *(_DWORD *)&cf[14] = 773;
                    *(_WORD *)&cf[18] = 2080;
                    *(void *)&cf[20] = v208;
                    *(_WORD *)&unsigned char cf[28] = 1024;
                    *(_DWORD *)uint64_t v487 = v206;
                    *(_WORD *)&v487[4] = 1024;
                    *(_DWORD *)&v487[6] = v207;
                    _os_log_impl(&def_1E50E8, v203, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
                      cf,
                      0x28u);
                    if (v485 < 0) {
                      operator delete((void *)v483);
                    }
                  }
                  std::string::size_type v209 = __cxa_allocate_exception(0x10uLL);
                  *(void *)std::string::size_type v209 = &off_6414D8;
                  v209[2] = 561211770;
                }
                sub_DB0D8(cf, a1, *(_DWORD *)(a2 + 4));
                goto LABEL_185;
              }
LABEL_287:
              sub_3A66B8(a1, (_DWORD *)a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
              return;
            }
            unsigned int v101 = *a5;
            if (v101 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              int v450 = (os_log_t *)sub_32A48(13);
              v451 = *v450;
              if (*v450 && os_log_type_enabled(*v450, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                LODWORD(v480) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                int v452 = v485;
                v453 = (CFTypeRef *)v483;
                unsigned int v454 = *a5;
                int v455 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                unsigned int v456 = &v483;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v452 < 0) {
                  unsigned int v456 = v453;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 701;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v456;
                *(_WORD *)&unsigned char cf[28] = 1024;
                *(_DWORD *)uint64_t v487 = v454;
                *(_WORD *)&v487[4] = 1024;
                *(_DWORD *)&v487[6] = v455;
                _os_log_impl(&def_1E50E8, v451, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v485 < 0) {
                  operator delete((void *)v483);
                }
              }
              int v457 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v457 = &off_6414D8;
              v457[2] = 561211770;
            }
            uint64_t v102 = (uint64_t *)(a1 + 88);
            sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 702);
            (*(void (**)(const void **__return_ptr))(**(void **)(*(void *)cf + 192) + 448))(&v482);
            if (*(void *)&cf[8]) {
              sub_4636C(*(std::__shared_weak_count **)&cf[8]);
            }
            if (!v482)
            {
              uint64_t v111 = (os_log_t *)sub_32A48(23);
              unint64_t v31 = *v111;
              if (*v111)
              {
                if (os_log_type_enabled(*v111, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v112 = &v483;
                  sub_2417C(&v483, 0x70706964u);
                  if (v485 < 0) {
                    uint64_t v112 = (void *)v483;
                  }
                  sub_43F38((uint64_t *)valuePtr, v102, "", 704);
                  long long v113 = *(_OWORD *)valuePtr;
                  *(_OWORD *)double valuePtr = 0uLL;
                  unsigned int v477 = (std::__shared_weak_count *)*((void *)&v113 + 1);
                  sub_4F64((uint64_t)&Mutable, (os_unfair_lock_t)(v113 + 8));
                  if (v481 >= 0) {
                    int v114 = &Mutable;
                  }
                  else {
                    int v114 = (void *)Mutable;
                  }
                  *(_DWORD *)CFTypeRef cf = 136315906;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 704;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v112;
                  *(_WORD *)&unsigned char cf[28] = 2080;
                  *(void *)uint64_t v487 = v114;
LABEL_321:
                  _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, v35, cf, 0x26u);
                  if (v481 < 0) {
                    operator delete((void *)Mutable);
                  }
                  if (v477) {
                    sub_4636C(v477);
                  }
                  if (valuePtr[1]) {
                    sub_4636C((std::__shared_weak_count *)valuePtr[1]);
                  }
                  if (v485 < 0) {
                    operator delete((void *)v483);
                  }
                  goto LABEL_286;
                }
              }
            }
            goto LABEL_286;
          }
          unsigned int v96 = *a5;
          if (v96 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            uint64_t v434 = (os_log_t *)sub_32A48(13);
            v435 = *v434;
            if (*v434 && os_log_type_enabled(*v434, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v436 = v485;
              v437 = (CFTypeRef *)v483;
              unsigned int v438 = *a5;
              int v439 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              uint64_t v440 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v436 < 0) {
                uint64_t v440 = v437;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 871;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v440;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v438;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v439;
              _os_log_impl(&def_1E50E8, v435, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            v441 = __cxa_allocate_exception(0x10uLL);
            *(void *)v441 = &off_6414D8;
            v441[2] = 561211770;
          }
          sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 872);
          uint64_t v17 = *(void *)(*(void *)cf + 192);
          if (v17) {
            LODWORD(v17) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 120))(v17);
          }
          goto LABEL_274;
        }
        if (v13 > 1885956207)
        {
          if (v13 != 1885956208)
          {
            if (v13 != 1885959026)
            {
              if (v13 != 1886218596) {
                goto LABEL_287;
              }
              unsigned int v28 = *a5;
              if (v28 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
              {
                unsigned int v194 = (os_log_t *)sub_32A48(13);
                unsigned int v195 = *v194;
                if (*v194 && os_log_type_enabled(*v194, OS_LOG_TYPE_ERROR))
                {
                  CFTypeRef Mutable = *(CFTypeRef *)a2;
                  LODWORD(v480) = *(_DWORD *)(a2 + 8);
                  sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                  int v196 = v485;
                  int v197 = (CFTypeRef *)v483;
                  unsigned int v198 = *a5;
                  int v199 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                  uint64_t v200 = &v483;
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  if (v196 < 0) {
                    uint64_t v200 = v197;
                  }
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 711;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v200;
                  *(_WORD *)&unsigned char cf[28] = 1024;
                  *(_DWORD *)uint64_t v487 = v198;
                  *(_WORD *)&v487[4] = 1024;
                  *(_DWORD *)&v487[6] = v199;
                  _os_log_impl(&def_1E50E8, v195, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                    cf,
                    0x28u);
                  if (v485 < 0) {
                    operator delete((void *)v483);
                  }
                }
                CFTypeRef v201 = __cxa_allocate_exception(0x10uLL);
                *(void *)CFTypeRef v201 = &off_6414D8;
                v201[2] = 561211770;
              }
              int v29 = (uint64_t *)(a1 + 88);
              sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 712);
              (*(void (**)(const void **__return_ptr))(**(void **)(*(void *)cf + 192) + 456))(&v482);
              if (*(void *)&cf[8]) {
                sub_4636C(*(std::__shared_weak_count **)&cf[8]);
              }
              if (!v482)
              {
                int v30 = (os_log_t *)sub_32A48(23);
                unint64_t v31 = *v30;
                if (*v30)
                {
                  if (os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
                  {
                    AudioObjectPropertyAddress v32 = &v483;
                    sub_2417C(&v483, 0x706D6964u);
                    if (v485 < 0) {
                      AudioObjectPropertyAddress v32 = (void *)v483;
                    }
                    sub_43F38((uint64_t *)valuePtr, v29, "", 714);
                    long long v33 = *(_OWORD *)valuePtr;
                    *(_OWORD *)double valuePtr = 0uLL;
                    unsigned int v477 = (std::__shared_weak_count *)*((void *)&v33 + 1);
                    sub_4F64((uint64_t)&Mutable, (os_unfair_lock_t)(v33 + 8));
                    if (v481 >= 0) {
                      unint64_t v34 = &Mutable;
                    }
                    else {
                      unint64_t v34 = (void *)Mutable;
                    }
                    *(_DWORD *)CFTypeRef cf = 136315906;
                    *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                    *(_WORD *)&cf[12] = 1024;
                    *(_DWORD *)&cf[14] = 714;
                    *(_WORD *)&cf[18] = 2080;
                    *(void *)&cf[20] = v32;
                    *(_WORD *)&unsigned char cf[28] = 2080;
                    *(void *)uint64_t v487 = v34;
                    goto LABEL_321;
                  }
                }
              }
LABEL_286:
              uint64_t v103 = v482;
              int v482 = 0;
              *a6 = v103;
              sub_6393C(&v482);
              return;
            }
            unsigned int v93 = *a5;
            if (v93 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              v410 = (os_log_t *)sub_32A48(13);
              unsigned int v411 = *v410;
              if (*v410 && os_log_type_enabled(*v410, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                LODWORD(v480) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                int v412 = v485;
                v413 = (CFTypeRef *)v483;
                unsigned int v414 = *a5;
                int v415 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                uint64_t v416 = &v483;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v412 < 0) {
                  uint64_t v416 = v413;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 730;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v416;
                *(_WORD *)&unsigned char cf[28] = 1024;
                *(_DWORD *)uint64_t v487 = v414;
                *(_WORD *)&v487[4] = 1024;
                *(_DWORD *)&v487[6] = v415;
                _os_log_impl(&def_1E50E8, v411, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v485 < 0) {
                  operator delete((void *)v483);
                }
              }
              int v417 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v417 = &off_6414D8;
              v417[2] = 561211770;
            }
            sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 731);
            LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 160))(*(void *)cf);
            goto LABEL_274;
          }
          unsigned int v85 = *a5;
          if (v85 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            long long v370 = (os_log_t *)sub_32A48(13);
            uint64_t v371 = *v370;
            if (*v370 && os_log_type_enabled(*v370, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v372 = v485;
              uint64_t v373 = (CFTypeRef *)v483;
              unsigned int v374 = *a5;
              int v375 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              std::string::size_type v376 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v372 < 0) {
                std::string::size_type v376 = v373;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 905;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v376;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v374;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v375;
              _os_log_impl(&def_1E50E8, v371, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            int v377 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v377 = &off_6414D8;
            v377[2] = 561211770;
          }
          sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 906);
          if (((*(uint64_t (**)(void))(**(void **)cf + 112))(*(void *)cf) & 0xFF00000000) != 0)
          {
            sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 907);
            BOOL v41 = (*(uint64_t (**)(CFTypeRef))(*(void *)v483 + 112))(v483) == 1701865584;
            if (v484) {
              sub_4636C(v484);
            }
          }
          else
          {
            BOOL v41 = 0;
          }
LABEL_310:
          if (*(void *)&cf[8]) {
            sub_4636C(*(std::__shared_weak_count **)&cf[8]);
          }
          *(_DWORD *)a6 = v41;
          return;
        }
        if (v13 != 1885890929)
        {
          int v20 = 1885955428;
          goto LABEL_170;
        }
        unsigned int v91 = *a5;
        if (v91 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          v394 = (os_log_t *)sub_32A48(13);
          int v395 = *v394;
          if (*v394 && os_log_type_enabled(*v394, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            LODWORD(v480) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
            int v396 = v485;
            v397 = (CFTypeRef *)v483;
            unsigned int v398 = *a5;
            int v399 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v400 = &v483;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v396 < 0) {
              uint64_t v400 = v397;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 792;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v400;
            *(_WORD *)&unsigned char cf[28] = 1024;
            *(_DWORD *)uint64_t v487 = v398;
            *(_WORD *)&v487[4] = 1024;
            *(_DWORD *)&v487[6] = v399;
            _os_log_impl(&def_1E50E8, v395, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              cf,
              0x28u);
            if (v485 < 0) {
              operator delete((void *)v483);
            }
          }
          v401 = __cxa_allocate_exception(0x10uLL);
          *(void *)v401 = &off_6414D8;
          v401[2] = 561211770;
        }
        sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 793);
        uint64_t v51 = *(std::__shared_weak_count **)&cf[8];
        int v52 = (*(unsigned __int16 *)(*(void *)cf + 184) >> 9) & 1;
LABEL_260:
        *(_DWORD *)a6 = v52;
        if (!v51) {
          return;
        }
        goto LABEL_174;
      }
      if (v13 <= 1885434721)
      {
        if (v13 > 1819505772)
        {
          if (v13 != 1819505773 && v13 != 1869832547)
          {
            if (v13 == 1885430643)
            {
              unsigned int v21 = *a5;
              if (v21 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
              {
                int v154 = (os_log_t *)sub_32A48(13);
                uint64_t v155 = *v154;
                if (*v154 && os_log_type_enabled(*v154, OS_LOG_TYPE_ERROR))
                {
                  CFTypeRef Mutable = *(CFTypeRef *)a2;
                  LODWORD(v480) = *(_DWORD *)(a2 + 8);
                  sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                  int v156 = v485;
                  int v157 = (CFTypeRef *)v483;
                  unsigned int v158 = *a5;
                  int v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                  unsigned int v160 = &v483;
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                  if (v156 < 0) {
                    unsigned int v160 = v157;
                  }
                  *(_WORD *)&cf[12] = 1024;
                  *(_DWORD *)&cf[14] = 812;
                  *(_WORD *)&cf[18] = 2080;
                  *(void *)&cf[20] = v160;
                  *(_WORD *)&unsigned char cf[28] = 1024;
                  *(_DWORD *)uint64_t v487 = v158;
                  *(_WORD *)&v487[4] = 1024;
                  *(_DWORD *)&v487[6] = v159;
                  _os_log_impl(&def_1E50E8, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                    cf,
                    0x28u);
                  if (v485 < 0) {
                    operator delete((void *)v483);
                  }
                }
                UInt32 v161 = __cxa_allocate_exception(0x10uLL);
                *(void *)UInt32 v161 = &off_6414D8;
                v161[2] = 561211770;
              }
              CFTypeRef v483 = (CFTypeRef)sub_30A5AC(*(void *)(a1 + 80));
              unsigned int v484 = v22;
              sub_DB544((uint64_t)cf, a1, (uint64_t)&v483);
              if (*(void *)cf)
              {
                CFRetain(*(CFTypeRef *)cf);
LABEL_278:
                uint64_t v99 = *(void *)cf;
LABEL_280:
                *a6 = v99;
                p_CFTypeRef Mutable = (CFTypeRef *)cf;
LABEL_281:
                sub_3D61C((uint64_t)p_Mutable);
                return;
              }
              goto LABEL_279;
            }
            goto LABEL_287;
          }
          goto LABEL_171;
        }
        if (v13 != 1819046768)
        {
          int v20 = 1819503987;
          goto LABEL_170;
        }
        goto LABEL_171;
      }
      if (v13 > 1885561195)
      {
        if (v13 == 1885561196)
        {
          unsigned int v83 = *a5;
          if (v83 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            __int16 v362 = (os_log_t *)sub_32A48(13);
            id v363 = *v362;
            if (*v362 && os_log_type_enabled(*v362, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v364 = v485;
              v365 = (CFTypeRef *)v483;
              unsigned int v366 = *a5;
              int v367 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              uint64_t v368 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v364 < 0) {
                uint64_t v368 = v365;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 918;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v368;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v366;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v367;
              _os_log_impl(&def_1E50E8, v363, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            uint64_t v369 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v369 = &off_6414D8;
            v369[2] = 561211770;
          }
          sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 919);
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v483 + 384))(cf);
          uint64_t v15 = *(const void **)cf;
          if (*(void *)cf) {
            goto LABEL_234;
          }
          goto LABEL_235;
        }
        if (v13 == 1885566064)
        {
          unsigned int v92 = *a5;
          if (v92 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            int v402 = (os_log_t *)sub_32A48(13);
            uint32_t v403 = *v402;
            if (*v402 && os_log_type_enabled(*v402, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v404 = v485;
              int v405 = (CFTypeRef *)v483;
              unsigned int v406 = *a5;
              int v407 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              v408 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v404 < 0) {
                v408 = v405;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 684;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v408;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v406;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v407;
              _os_log_impl(&def_1E50E8, v403, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            int v409 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v409 = &off_6414D8;
            v409[2] = 561211770;
          }
          sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 685);
          uint64_t v51 = *(std::__shared_weak_count **)&cf[8];
          int v52 = *(_DWORD *)(*(void *)cf + 148);
          goto LABEL_260;
        }
        if (v13 != 1885696116) {
          goto LABEL_287;
        }
        unsigned int v27 = *a5;
        if (v27 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          UInt32 v186 = (os_log_t *)sub_32A48(13);
          int v187 = *v186;
          if (*v186 && os_log_type_enabled(*v186, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            LODWORD(v480) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
            int v188 = v485;
            char v189 = (CFTypeRef *)v483;
            unsigned int v190 = *a5;
            int v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            double v192 = &v483;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v188 < 0) {
              double v192 = v189;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 689;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v192;
            *(_WORD *)&unsigned char cf[28] = 1024;
            *(_DWORD *)uint64_t v487 = v190;
            *(_WORD *)&v487[4] = 1024;
            *(_DWORD *)&v487[6] = v191;
            _os_log_impl(&def_1E50E8, v187, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              cf,
              0x28u);
            if (v485 < 0) {
              operator delete((void *)v483);
            }
          }
          char v193 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v193 = &off_6414D8;
          v193[2] = 561211770;
        }
        sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 691);
        *(_DWORD *)a6 = (*(uint64_t (**)(void))(**(void **)cf + 112))(*(void *)cf);
        goto LABEL_173;
      }
      if (v13 != 1885434722)
      {
        if (v13 != 1885497710) {
          goto LABEL_287;
        }
        unsigned int v50 = *a5;
        if (v50 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          id v242 = (os_log_t *)sub_32A48(13);
          long long v243 = *v242;
          if (*v242 && os_log_type_enabled(*v242, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            LODWORD(v480) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
            int v244 = v485;
            v245 = (CFTypeRef *)v483;
            unsigned int v246 = *a5;
            int v247 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v248 = &v483;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v244 < 0) {
              uint64_t v248 = v245;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 752;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v248;
            *(_WORD *)&unsigned char cf[28] = 1024;
            *(_DWORD *)uint64_t v487 = v246;
            *(_WORD *)&v487[4] = 1024;
            *(_DWORD *)&v487[6] = v247;
            _os_log_impl(&def_1E50E8, v243, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              cf,
              0x28u);
            if (v485 < 0) {
              operator delete((void *)v483);
            }
          }
          int v249 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v249 = &off_6414D8;
          v249[2] = 561211770;
        }
        sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 753);
        uint64_t v51 = *(std::__shared_weak_count **)&cf[8];
        int v52 = (*(unsigned __int16 *)(*(void *)cf + 184) >> 5) & 1;
        goto LABEL_260;
      }
      unsigned int v89 = *a5;
      if (v89 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        v386 = (os_log_t *)sub_32A48(13);
        int v387 = *v386;
        if (*v386 && os_log_type_enabled(*v386, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v388 = v485;
          uint64_t v389 = (CFTypeRef *)v483;
          unsigned int v390 = *a5;
          int v391 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v392 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v388 < 0) {
            uint64_t v392 = v389;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 802;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v392;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v390;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v391;
          _os_log_impl(&def_1E50E8, v387, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        uint64_t v393 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v393 = &off_6414D8;
        v393[2] = 561211770;
      }
      CFTypeRef v483 = (CFTypeRef)sub_30A5AC(*(void *)(a1 + 80));
      unsigned int v484 = v90;
      sub_DB2B4((uint64_t)cf, a1);
      uint64_t v63 = *(const void **)cf;
      if (!*(void *)cf) {
        goto LABEL_279;
      }
LABEL_277:
      CFRetain(v63);
      goto LABEL_278;
    }
    if (v13 <= 1684826731)
    {
      if (v13 > 1651797099)
      {
        if (v13 > 1651798885)
        {
          if (v13 != 1651798886)
          {
            int v20 = 1668051827;
            goto LABEL_170;
          }
          goto LABEL_171;
        }
        if (v13 == 1651797100) {
          goto LABEL_171;
        }
        unsigned __int16 v19 = 28787;
LABEL_115:
        int v20 = v19 | 0x62740000;
        goto LABEL_170;
      }
      if (v13 > 1651796324)
      {
        unsigned int v36 = v13 - 1651796325;
        if (v36 > 0xE || ((1 << v36) & 0x4801) == 0) {
          goto LABEL_287;
        }
        goto LABEL_171;
      }
      if (v13 != 1650551140 && v13 != 1651271025)
      {
        unsigned __int16 v19 = 24946;
        goto LABEL_115;
      }
LABEL_171:
      unsigned int v53 = *a5;
      if (v53 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        uint64_t v130 = (os_log_t *)sub_32A48(13);
        UInt32 v131 = *v130;
        if (*v130 && os_log_type_enabled(*v130, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v132 = v485;
          uint64_t v133 = (CFTypeRef *)v483;
          unsigned int v134 = *a5;
          int v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          unsigned int v136 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v132 < 0) {
            unsigned int v136 = v133;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 961;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v136;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v134;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v135;
          _os_log_impl(&def_1E50E8, v131, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        uint64_t v137 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v137 = &off_6414D8;
        v137[2] = 561211770;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 962);
      (*(void (**)(void, uint64_t, uint64_t, unsigned int *, unsigned int *, void *))(**(void **)cf + 40))(*(void *)cf, a2, a3, a4, a5, a6);
      goto LABEL_173;
    }
    if (v13 > 1685484389)
    {
      if (v13 > 1752462194)
      {
        if (v13 != 1752462195 && v13 != 1767989616)
        {
          int v20 = 1768382832;
          goto LABEL_170;
        }
        goto LABEL_171;
      }
      if (v13 == 1685484390) {
        goto LABEL_171;
      }
      if (v13 != 1752327777) {
        goto LABEL_287;
      }
      unsigned int v54 = *a5;
      if (v54 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        int v250 = (os_log_t *)sub_32A48(13);
        char v251 = *v250;
        if (*v250 && os_log_type_enabled(*v250, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v252 = v485;
          int v253 = (CFTypeRef *)v483;
          unsigned int v254 = *a5;
          int v255 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          int v256 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v252 < 0) {
            int v256 = v253;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 965;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v256;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v254;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v255;
          _os_log_impl(&def_1E50E8, v251, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        int v257 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v257 = &off_6414D8;
        v257[2] = 561211770;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 966);
      LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 496))(*(void *)cf);
    }
    else
    {
      if (v13 > 1685088611)
      {
        if (v13 != 1685088612)
        {
          if (v13 == 1685287026)
          {
            unsigned int v94 = *a5;
            if (v94 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              int v418 = (os_log_t *)sub_32A48(13);
              uint64_t v419 = *v418;
              if (*v418 && os_log_type_enabled(*v418, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                LODWORD(v480) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                int v420 = v485;
                v421 = (CFTypeRef *)v483;
                unsigned int v422 = *a5;
                int v423 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                int v424 = &v483;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v420 < 0) {
                  int v424 = v421;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 890;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v424;
                *(_WORD *)&unsigned char cf[28] = 1024;
                *(_DWORD *)uint64_t v487 = v422;
                *(_WORD *)&v487[4] = 1024;
                *(_DWORD *)&v487[6] = v423;
                _os_log_impl(&def_1E50E8, v419, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v485 < 0) {
                  operator delete((void *)v483);
                }
              }
              int v425 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v425 = &off_6414D8;
              v425[2] = 561211770;
            }
            if (a3 != 8 || !a4)
            {
              uint64_t v462 = (os_log_t *)sub_32A48(13);
              unsigned int v463 = *v462;
              if (*v462 && os_log_type_enabled(*v462, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                LODWORD(v480) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                int v464 = v485 >= 0 ? &v483 : (CFTypeRef *)v483;
                *(_DWORD *)CFTypeRef cf = 136316674;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 891;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v464;
                *(_WORD *)&unsigned char cf[28] = 1024;
                *(_DWORD *)uint64_t v487 = 8;
                *(_WORD *)&v487[4] = 2080;
                *(void *)&v487[6] = "non-";
                __int16 v488 = 1024;
                *(_DWORD *)int v489 = a3;
                *(_WORD *)&v489[4] = 2048;
                *(void *)&v489[6] = a4;
                _os_log_impl(&def_1E50E8, v463, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                  cf,
                  0x3Cu);
                if (v485 < 0) {
                  operator delete((void *)v483);
                }
              }
              v465 = __cxa_allocate_exception(0x10uLL);
              *(void *)v465 = &off_6414D8;
              v465[2] = 561211770;
            }
            *(float *)a6 = sub_314FE8(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), *a4, a4[1]);
            return;
          }
          if (v13 == 1685287027)
          {
            unsigned int v23 = *a5;
            if (v23 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
            {
              uint64_t v162 = (os_log_t *)sub_32A48(13);
              UInt32 v163 = *v162;
              if (*v162 && os_log_type_enabled(*v162, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                LODWORD(v480) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                int v164 = v485;
                uint64_t v165 = (CFTypeRef *)v483;
                unsigned int v166 = *a5;
                int v167 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
                uint64_t v168 = &v483;
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                if (v164 < 0) {
                  uint64_t v168 = v165;
                }
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 877;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v168;
                *(_WORD *)&unsigned char cf[28] = 1024;
                *(_DWORD *)uint64_t v487 = v166;
                *(_WORD *)&v487[4] = 1024;
                *(_DWORD *)&v487[6] = v167;
                _os_log_impl(&def_1E50E8, v163, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                  cf,
                  0x28u);
                if (v485 < 0) {
                  operator delete((void *)v483);
                }
              }
              uint64_t v169 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v169 = &off_6414D8;
              v169[2] = 561211770;
            }
            if (a3 != 8 || !a4)
            {
              int v458 = (os_log_t *)sub_32A48(13);
              uint64_t v459 = *v458;
              if (*v458 && os_log_type_enabled(*v458, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef Mutable = *(CFTypeRef *)a2;
                LODWORD(v480) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
                AudioObjectPropertySelector v460 = v485 >= 0 ? &v483 : (CFTypeRef *)v483;
                *(_DWORD *)CFTypeRef cf = 136316674;
                *(void *)&cf[4] = "VirtualAudio_Port.cpp";
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 879;
                *(_WORD *)&cf[18] = 2080;
                *(void *)&cf[20] = v460;
                *(_WORD *)&unsigned char cf[28] = 1024;
                *(_DWORD *)uint64_t v487 = 8;
                *(_WORD *)&v487[4] = 2080;
                *(void *)&v487[6] = "non-";
                __int16 v488 = 1024;
                *(_DWORD *)int v489 = a3;
                *(_WORD *)&v489[4] = 2048;
                *(void *)&v489[6] = a4;
                _os_log_impl(&def_1E50E8, v459, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                  cf,
                  0x3Cu);
                if (v485 < 0) {
                  operator delete((void *)v483);
                }
              }
              int v461 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v461 = &off_6414D8;
              v461[2] = 561211770;
            }
            *(_DWORD *)a6 = sub_314E24(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), *a4, a4[1]);
            return;
          }
          goto LABEL_287;
        }
        unsigned int v86 = *a5;
        if (v86 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          uint64_t v378 = (os_log_t *)sub_32A48(13);
          v379 = *v378;
          if (*v378 && os_log_type_enabled(*v378, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            LODWORD(v480) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
            int v380 = v485;
            uint64_t v381 = (CFTypeRef *)v483;
            unsigned int v382 = *a5;
            int v383 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v384 = &v483;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v380 < 0) {
              uint64_t v384 = v381;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 986;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v384;
            *(_WORD *)&unsigned char cf[28] = 1024;
            *(_DWORD *)uint64_t v487 = v382;
            *(_WORD *)&v487[4] = 1024;
            *(_DWORD *)&v487[6] = v383;
            _os_log_impl(&def_1E50E8, v379, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              cf,
              0x28u);
            if (v485 < 0) {
              operator delete((void *)v483);
            }
          }
          v385 = __cxa_allocate_exception(0x10uLL);
          *(void *)v385 = &off_6414D8;
          v385[2] = 561211770;
        }
        sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 988);
        if ((*(unsigned int (**)(CFTypeRef))(*(void *)v483 + 424))(v483))
        {
          sub_43F38((uint64_t *)&Mutable, (uint64_t *)(a1 + 88), "", 989);
          (*(void (**)(unsigned char *__return_ptr))(*(void *)Mutable + 440))(cf);
          if (cf[23] >= 0) {
            char v87 = cf;
          }
          else {
            char v87 = *(const UInt8 **)cf;
          }
          if (cf[23] >= 0) {
            CFIndex v88 = cf[23];
          }
          else {
            CFIndex v88 = *(void *)&cf[8];
          }
          sub_DBE90(valuePtr, v87, v88);
          *a6 = valuePtr[0];
          sub_6393C((const void **)valuePtr);
          if ((cf[23] & 0x80000000) != 0) {
            operator delete(*(void **)cf);
          }
          if (v480) {
            sub_4636C(v480);
          }
        }
        else
        {
          *a6 = 0;
        }
LABEL_302:
        uint64_t v51 = v484;
        if (!v484) {
          return;
        }
LABEL_174:
        sub_4636C(v51);
        return;
      }
      if (v13 == 1684826732) {
        goto LABEL_171;
      }
      if (v13 != 1685021040) {
        goto LABEL_287;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 982);
      LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 424))(*(void *)cf);
    }
LABEL_274:
    *(_DWORD *)a6 = v17;
    goto LABEL_173;
  }
  if (v13 > 1936746610)
  {
    if (v13 > 1953653605)
    {
      if (v13 > 1986164322)
      {
        if (v13 <= 1986947427)
        {
          if (v13 != 1986164323)
          {
            int v20 = 1986814563;
            goto LABEL_170;
          }
        }
        else if (v13 != 1986947428)
        {
          if (v13 == 2004050279)
          {
            CFTypeRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            LOWORD(v480) = 257;
            sub_43F38((uint64_t *)valuePtr, (uint64_t *)(a1 + 88), "", 972);
            (*((void (**)(unsigned char *__return_ptr))valuePtr[0]->isa + 34))(cf);
            sub_DBD60((uint64_t *)&v483, (uint64_t)cf, "", 972);
            sub_8108((uint64_t *)cf);
            if (valuePtr[1]) {
              sub_4636C((std::__shared_weak_count *)valuePtr[1]);
            }
            for (uint64_t i = v484; i != (std::__shared_weak_count *)&v483; uint64_t i = (std::__shared_weak_count *)i->__shared_owners_)
            {
              uint64_t v79 = *(void *)(a1 + 80);
              uint64_t shared_weak_owners = i->__shared_weak_owners_;
              memset(cf, 0, 24);
              strcpy(&cf[24], "cwdv");
              v487[2] = 0;
              *(_DWORD *)&v487[10] = 3;
              *(void *)&v489[10] = 0;
              uint64_t v490 = 0;
              *(void *)&v489[2] = &v489[10];
              int v491 = 44739242;
              CFTypeRef v492 = 0;
              int v81 = sub_E00F4(*(void *)(v79 + 128), shared_weak_owners, (uint64_t)cf);
              if (v492) {
                CFRelease(v492);
              }
              sub_463E0(*(void **)&v489[10]);
              if (*(void *)cf)
              {
                *(void *)&cf[8] = *(void *)cf;
                operator delete(*(void **)cf);
              }
              sub_451D0((uint64_t)&Mutable, v81);
            }
            sub_B8E4((uint64_t *)&v483);
            if (Mutable)
            {
              CFRetain(Mutable);
              CFTypeRef v82 = Mutable;
            }
            else
            {
              CFTypeRef v82 = 0;
            }
            *a6 = v82;
            p_CFTypeRef Mutable = &Mutable;
            goto LABEL_281;
          }
          int v20 = 2004054901;
LABEL_170:
          if (v13 != v20) {
            goto LABEL_287;
          }
          goto LABEL_171;
        }
        goto LABEL_171;
      }
      if (v13 > 1953719141)
      {
        if (v13 == 1953719142)
        {
          unsigned int v59 = *a5;
          if (v59 < (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            uint64_t v266 = (os_log_t *)sub_32A48(13);
            __int16 v267 = *v266;
            if (*v266 && os_log_type_enabled(*v266, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v268 = v485;
              std::string::size_type v269 = (CFTypeRef *)v483;
              unsigned int v270 = *a5;
              int v271 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              __n128 v272 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v268 < 0) {
                __n128 v272 = v269;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 861;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v272;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v270;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v271;
              _os_log_impl(&def_1E50E8, v267, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            v273 = __cxa_allocate_exception(0x10uLL);
            *(void *)v273 = &off_6414D8;
            v273[2] = 561211770;
          }
          sub_44A7E8((uint64_t *)cf);
          uint64_t v60 = *(void *)cf;
          *(void *)CFTypeRef cf = 0;
          *a6 = v60;
          sub_63908((const void **)cf);
          return;
        }
        if (v13 != 1970040164)
        {
          int v20 = 1970496630;
          goto LABEL_170;
        }
        goto LABEL_171;
      }
      if (v13 != 1953653606)
      {
        if (v13 == 1953655149)
        {
          unsigned int v48 = *a5;
          if (v48 < (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            int v226 = (os_log_t *)sub_32A48(13);
            uint64_t v227 = *v226;
            if (*v226 && os_log_type_enabled(*v226, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v228 = v485;
              uint64_t v229 = (CFTypeRef *)v483;
              unsigned int v230 = *a5;
              int v231 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              int v232 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v228 < 0) {
                int v232 = v229;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 851;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v232;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v230;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v231;
              _os_log_impl(&def_1E50E8, v227, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            id v233 = __cxa_allocate_exception(0x10uLL);
            *(void *)id v233 = &off_6414D8;
            v233[2] = 561211770;
          }
          sub_DBC68(a1, a5, a6);
          return;
        }
        goto LABEL_287;
      }
      unsigned int v67 = *a5;
      if (v67 < (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        UInt32 v306 = (os_log_t *)sub_32A48(13);
        int v307 = *v306;
        if (*v306 && os_log_type_enabled(*v306, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v308 = v485;
          char v309 = (CFTypeRef *)v483;
          unsigned int v310 = *a5;
          int v311 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          UInt32 v312 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v308 < 0) {
            UInt32 v312 = v309;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 856;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v312;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v310;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v311;
          _os_log_impl(&def_1E50E8, v307, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        int v313 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v313 = &off_6414D8;
        v313[2] = 561211770;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 857);
      sub_24F760((uint64_t *)&v483, *(uint64_t *)cf);
      CFTypeRef v68 = v483;
      CFTypeRef v483 = 0;
      *a6 = v68;
      sub_63908(&v483);
      goto LABEL_173;
    }
    if (v13 > 1936749679)
    {
      if (v13 <= 1937204589)
      {
        if (v13 != 1936749680)
        {
          int v20 = 1936945763;
          goto LABEL_170;
        }
        unsigned int v69 = *a5;
        if (v69 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          int v314 = (os_log_t *)sub_32A48(13);
          v315 = *v314;
          if (*v314 && os_log_type_enabled(*v314, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            LODWORD(v480) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
            int v316 = v485;
            v317 = (CFTypeRef *)v483;
            unsigned int v318 = *a5;
            int v319 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v320 = &v483;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v316 < 0) {
              uint64_t v320 = v317;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 822;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v320;
            *(_WORD *)&unsigned char cf[28] = 1024;
            *(_DWORD *)uint64_t v487 = v318;
            *(_WORD *)&v487[4] = 1024;
            *(_DWORD *)&v487[6] = v319;
            _os_log_impl(&def_1E50E8, v315, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              cf,
              0x28u);
            if (v485 < 0) {
              operator delete((void *)v483);
            }
          }
          uint64_t v321 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v321 = &off_6414D8;
          v321[2] = 561211770;
        }
        sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 823);
        LODWORD(v17) = (*(uint64_t (**)(void, void))(**(void **)cf + 232))(*(void *)cf, *(unsigned int *)(a2 + 8));
        goto LABEL_274;
      }
      if (v13 == 1937204590) {
        goto LABEL_171;
      }
      if (v13 != 1952609377)
      {
        if (v13 == 1952740208)
        {
          unsigned int v26 = *a5;
          if (v26 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            uint64_t v178 = (os_log_t *)sub_32A48(13);
            uint64_t v179 = *v178;
            if (*v178 && os_log_type_enabled(*v178, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v180 = v485;
              char v181 = (CFTypeRef *)v483;
              unsigned int v182 = *a5;
              int v183 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              int v184 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v180 < 0) {
                int v184 = v181;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 866;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v184;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v182;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v183;
              _os_log_impl(&def_1E50E8, v179, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            CFArrayRef v185 = __cxa_allocate_exception(0x10uLL);
            *(void *)CFArrayRef v185 = &off_6414D8;
            v185[2] = 561211770;
          }
          sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 867);
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v483 + 368))(cf);
          uint64_t v15 = *(const void **)cf;
          if (*(void *)cf) {
            goto LABEL_234;
          }
          goto LABEL_235;
        }
        goto LABEL_287;
      }
      unsigned int v76 = *a5;
      if (v76 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        UInt32 v346 = (os_log_t *)sub_32A48(13);
        int v347 = *v346;
        if (*v346 && os_log_type_enabled(*v346, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v348 = v485;
          unsigned int v349 = (CFTypeRef *)v483;
          unsigned int v350 = *a5;
          int v351 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          std::string v352 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v348 < 0) {
            std::string v352 = v349;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 913;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v352;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v350;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v351;
          _os_log_impl(&def_1E50E8, v347, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        std::string v353 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::string v353 = &off_6414D8;
        v353[2] = 561211770;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 914);
      (*(void (**)(void, uint64_t, uint64_t, unsigned int *, unsigned int *, void *))(**(void **)cf + 40))(*(void *)cf, a2, a3, a4, a5, a6);
      goto LABEL_173;
    }
    if (v13 > 1936748140)
    {
      if (v13 != 1936748141)
      {
        if (v13 != 1936748656) {
          goto LABEL_287;
        }
        unsigned int v42 = *a5;
        if (v42 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          uint64_t v210 = (os_log_t *)sub_32A48(13);
          char v211 = *v210;
          if (*v210 && os_log_type_enabled(*v210, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            LODWORD(v480) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
            int v212 = v485;
            uint64_t v213 = (CFTypeRef *)v483;
            unsigned int v214 = *a5;
            int v215 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v216 = &v483;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v212 < 0) {
              uint64_t v216 = v213;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 845;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v216;
            *(_WORD *)&unsigned char cf[28] = 1024;
            *(_DWORD *)uint64_t v487 = v214;
            *(_WORD *)&v487[4] = 1024;
            *(_DWORD *)&v487[6] = v215;
            _os_log_impl(&def_1E50E8, v211, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              cf,
              0x28u);
            if (v485 < 0) {
              operator delete((void *)v483);
            }
          }
          char v217 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v217 = &off_6414D8;
          v217[2] = 561211770;
        }
        sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 847);
        CFTypeRef v43 = v483;
        uint64_t v44 = *(unsigned int *)(a2 + 8);
        CFTypeRef Mutable = (CFTypeRef)sub_DBA60(a1);
        LODWORD(valuePtr[0]) = (*(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(void *)v43 + 248))(v43, v44, &Mutable);
        CFNumberRef v45 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        *(void *)CFTypeRef cf = v45;
        cf[8] = 1;
        if (v45)
        {
          CFRetain(v45);
          uint64_t v46 = *(void *)cf;
        }
        else
        {
          uint64_t v46 = 0;
        }
        *a6 = v46;
        sub_45260((uint64_t)cf);
        goto LABEL_302;
      }
      unsigned int v64 = *a5;
      if (v64 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        uint64_t v290 = (os_log_t *)sub_32A48(13);
        char v291 = *v290;
        if (*v290 && os_log_type_enabled(*v290, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v292 = v485;
          uint64_t v293 = (CFTypeRef *)v483;
          unsigned int v294 = *a5;
          int v295 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          v296 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v292 < 0) {
            v296 = v293;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 827;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v296;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v294;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v295;
          _os_log_impl(&def_1E50E8, v291, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        unsigned int v297 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned int v297 = &off_6414D8;
        v297[2] = 561211770;
      }
      sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 828);
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v483 + 240))(cf);
      int v65 = *(const void **)cf;
      if (!*(void *)cf) {
        goto LABEL_300;
      }
      goto LABEL_270;
    }
    if ((v13 - 1936747876) < 2) {
      goto LABEL_171;
    }
    unsigned __int16 v18 = 26739;
    goto LABEL_159;
  }
  if (v13 > 1886808434)
  {
    if (v13 <= 1936225135)
    {
      if (v13 <= 1935762277)
      {
        if (v13 == 1886808435)
        {
          unsigned int v66 = *a5;
          if (v66 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            int v298 = (os_log_t *)sub_32A48(13);
            CFTypeRef v299 = *v298;
            if (*v298 && os_log_type_enabled(*v298, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v300 = v485;
              int v301 = (CFTypeRef *)v483;
              unsigned int v302 = *a5;
              int v303 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              int v304 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v300 < 0) {
                int v304 = v301;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 899;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v304;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v302;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v303;
              _os_log_impl(&def_1E50E8, v299, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            char v305 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v305 = &off_6414D8;
            v305[2] = 561211770;
          }
          sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 900);
          uint64_t v51 = *(std::__shared_weak_count **)&cf[8];
          int v52 = (*(unsigned __int16 *)(*(void *)cf + 184) >> 4) & 1;
          goto LABEL_260;
        }
        if (v13 != 1886810226) {
          goto LABEL_287;
        }
        unsigned int v47 = *a5;
        if (v47 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
        {
          uint64_t v218 = (os_log_t *)sub_32A48(13);
          uint64_t v219 = *v218;
          if (*v218 && os_log_type_enabled(*v218, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef Mutable = *(CFTypeRef *)a2;
            LODWORD(v480) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
            int v220 = v485;
            char v221 = (CFTypeRef *)v483;
            unsigned int v222 = *a5;
            int v223 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
            int v224 = &v483;
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "VirtualAudio_Port.cpp";
            if (v220 < 0) {
              int v224 = v221;
            }
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 782;
            *(_WORD *)&cf[18] = 2080;
            *(void *)&cf[20] = v224;
            *(_WORD *)&unsigned char cf[28] = 1024;
            *(_DWORD *)uint64_t v487 = v222;
            *(_WORD *)&v487[4] = 1024;
            *(_DWORD *)&v487[6] = v223;
            _os_log_impl(&def_1E50E8, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              cf,
              0x28u);
            if (v485 < 0) {
              operator delete((void *)v483);
            }
          }
          UInt32 v225 = __cxa_allocate_exception(0x10uLL);
          *(void *)UInt32 v225 = &off_6414D8;
          v225[2] = 561211770;
        }
        sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 783);
        LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 320))(*(void *)cf);
        goto LABEL_274;
      }
      if (v13 == 1935762278) {
        goto LABEL_171;
      }
      if (v13 != 1935895923)
      {
        int v20 = 1936221550;
        goto LABEL_170;
      }
      unsigned int v71 = *a5;
      if (v71 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        UInt32 v330 = (os_log_t *)sub_32A48(13);
        int v331 = *v330;
        if (*v330 && os_log_type_enabled(*v330, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v332 = v485;
          uint64_t v333 = (CFTypeRef *)v483;
          unsigned int v334 = *a5;
          int v335 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          UInt32 v336 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v332 < 0) {
            UInt32 v336 = v333;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 995;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v336;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v334;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v335;
          _os_log_impl(&def_1E50E8, v331, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        int v337 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v337 = &off_6414D8;
        v337[2] = 561211770;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 996);
      uint64_t v72 = *(void *)cf;
      int v73 = sub_209F54();
      if (*(_DWORD *)(v72 + 144) == 1886216809) {
        int v74 = v73;
      }
      else {
        int v74 = 0;
      }
      *(_DWORD *)a6 = v74;
LABEL_173:
      uint64_t v51 = *(std::__shared_weak_count **)&cf[8];
      if (!*(void *)&cf[8]) {
        return;
      }
      goto LABEL_174;
    }
    if (v13 > 1936745317)
    {
      if (v13 == 1936745318) {
        goto LABEL_171;
      }
      if (v13 != 1936745586)
      {
        unsigned __int16 v18 = 25966;
        goto LABEL_159;
      }
      unsigned int v77 = *a5;
      if (v77 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        std::string v354 = (os_log_t *)sub_32A48(13);
        std::string v355 = *v354;
        if (*v354 && os_log_type_enabled(*v354, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v356 = v485;
          uint64_t v357 = (CFTypeRef *)v483;
          unsigned int v358 = *a5;
          int v359 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          char v360 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v356 < 0) {
            char v360 = v357;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 833;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v360;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v358;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v359;
          _os_log_impl(&def_1E50E8, v355, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        v361 = __cxa_allocate_exception(0x10uLL);
        *(void *)v361 = &off_6414D8;
        v361[2] = 561211770;
      }
      if ((a3 | 8) != 8)
      {
        uint64_t v474 = (os_log_t *)sub_32A48(13);
        int v475 = *v474;
        if (*v474 && os_log_type_enabled(*v474, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 834;
          _os_log_impl(&def_1E50E8, v475, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", cf, 0x12u);
        }
        v476 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v476, "Precondition failure.");
      }
      if (a4)
      {
        *(void *)CFTypeRef cf = a4;
        *(_WORD *)&cf[8] = 0;
      }
      else
      {
        *(void *)CFTypeRef cf = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        *(_WORD *)&cf[8] = 257;
        if (!*(void *)cf)
        {
          uint64_t v108 = sub_30A5AC(*(void *)(a1 + 80));
          goto LABEL_307;
        }
      }
      uint64_t v108 = sub_315308(*(void *)(a1 + 80), (const __CFDictionary **)cf);
LABEL_307:
      int v109 = HIDWORD(v108);
      sub_43F38((uint64_t *)&Mutable, (uint64_t *)(a1 + 88), "", 840);
      sub_105768((uint64_t)&v483, (uint64_t)Mutable, v109, *(_DWORD *)(a2 + 8));
      if (v483)
      {
        CFRetain(v483);
        CFTypeRef v110 = v483;
      }
      else
      {
        CFTypeRef v110 = 0;
      }
      *a6 = v110;
      sub_80594((uint64_t)&v483);
      if (v480) {
        sub_4636C(v480);
      }
      sub_80594((uint64_t)cf);
      return;
    }
    if (v13 == 1936225136) {
      goto LABEL_171;
    }
    unsigned __int16 v18 = 24944;
LABEL_159:
    int v20 = v18 | 0x73700000;
    goto LABEL_170;
  }
  if (v13 > 1886614380)
  {
    if (v13 > 1886614881)
    {
      switch(v13)
      {
        case 1886614882:
          unsigned int v61 = *a5;
          if (v61 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            int v274 = (os_log_t *)sub_32A48(13);
            uint64_t v275 = *v274;
            if (*v274 && os_log_type_enabled(*v274, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v276 = v485;
              int v277 = (CFTypeRef *)v483;
              unsigned int v278 = *a5;
              int v279 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              int v280 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v276 < 0) {
                int v280 = v277;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 679;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v280;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v278;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v279;
              _os_log_impl(&def_1E50E8, v275, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            v281 = __cxa_allocate_exception(0x10uLL);
            *(void *)v281 = &off_6414D8;
            v281[2] = 561211770;
          }
          sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 680);
          uint64_t v51 = *(std::__shared_weak_count **)&cf[8];
          int v52 = *(_DWORD *)(*(void *)cf + 264);
          break;
        case 1886681456:
          unsigned int v75 = *a5;
          if (v75 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            uint64_t v338 = (os_log_t *)sub_32A48(13);
            char v339 = *v338;
            if (*v338 && os_log_type_enabled(*v338, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v340 = v485;
              int v341 = (CFTypeRef *)v483;
              unsigned int v342 = *a5;
              int v343 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              int v344 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v340 < 0) {
                int v344 = v341;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 674;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v344;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v342;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v343;
              _os_log_impl(&def_1E50E8, v339, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            v345 = __cxa_allocate_exception(0x10uLL);
            *(void *)v345 = &off_6414D8;
            v345[2] = 561211770;
          }
          sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 675);
          uint64_t v51 = *(std::__shared_weak_count **)&cf[8];
          int v52 = *(_DWORD *)(*(void *)cf + 144);
          break;
        case 1886742884:
          unsigned int v24 = *a5;
          if (v24 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
          {
            uint64_t v170 = (os_log_t *)sub_32A48(13);
            char v171 = *v170;
            if (*v170 && os_log_type_enabled(*v170, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef Mutable = *(CFTypeRef *)a2;
              LODWORD(v480) = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
              int v172 = v485;
              UInt32 v173 = (CFTypeRef *)v483;
              unsigned int v174 = *a5;
              int v175 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
              uint64_t v176 = &v483;
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "VirtualAudio_Port.cpp";
              if (v172 < 0) {
                uint64_t v176 = v173;
              }
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 695;
              *(_WORD *)&cf[18] = 2080;
              *(void *)&cf[20] = v176;
              *(_WORD *)&unsigned char cf[28] = 1024;
              *(_DWORD *)uint64_t v487 = v174;
              *(_WORD *)&v487[4] = 1024;
              *(_DWORD *)&v487[6] = v175;
              _os_log_impl(&def_1E50E8, v171, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                cf,
                0x28u);
              if (v485 < 0) {
                operator delete((void *)v483);
              }
            }
            char v177 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v177 = &off_6414D8;
            v177[2] = 561211770;
          }
          sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 696);
          int v25 = (const void *)*((void *)v483 + 31);
          *(void *)CFTypeRef cf = v25;
          cf[8] = *((unsigned char *)v483 + 256);
          if (cf[8] && v25)
          {
            CFRetain(v25);
          }
          else if (!v25)
          {
            goto LABEL_300;
          }
          CFRetain(v25);
          goto LABEL_299;
        default:
          goto LABEL_287;
      }
      goto LABEL_260;
    }
    if (v13 == 1886614381) {
      goto LABEL_171;
    }
    if (v13 != 1886614625) {
      goto LABEL_287;
    }
    unsigned int v49 = *a5;
    if (v49 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      UInt32 v234 = (os_log_t *)sub_32A48(13);
      int v235 = *v234;
      if (*v234 && os_log_type_enabled(*v234, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef Mutable = *(CFTypeRef *)a2;
        LODWORD(v480) = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
        int v236 = v485;
        id v237 = (CFTypeRef *)v483;
        unsigned int v238 = *a5;
        int v239 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        UInt32 v240 = &v483;
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        if (v236 < 0) {
          UInt32 v240 = v237;
        }
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 787;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v240;
        *(_WORD *)&unsigned char cf[28] = 1024;
        *(_DWORD *)uint64_t v487 = v238;
        *(_WORD *)&v487[4] = 1024;
        *(_DWORD *)&v487[6] = v239;
        _os_log_impl(&def_1E50E8, v235, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          cf,
          0x28u);
        if (v485 < 0) {
          operator delete((void *)v483);
        }
      }
      int v241 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v241 = &off_6414D8;
      v241[2] = 561211770;
    }
    sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 788);
    LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 96))(*(void *)cf);
    goto LABEL_274;
  }
  if (v13 <= 1886611809)
  {
    if (v13 != 1886417762)
    {
      if (v13 != 1886484338) {
        goto LABEL_287;
      }
      if (!sub_20ACA4())
      {
        char v104 = (os_log_t *)sub_32A48(23);
        uint64_t v105 = *v104;
        if (!*v104 || !os_log_type_enabled(*v104, OS_LOG_TYPE_ERROR)) {
          return;
        }
        sub_2417C(&v483, *(_DWORD *)a2);
        uint64_t v106 = v485 >= 0 ? &v483 : (CFTypeRef *)v483;
        *(_DWORD *)CFTypeRef cf = 136315650;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 746;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v106;
        _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d Property not supported: %s", cf, 0x1Cu);
        if ((v485 & 0x80000000) == 0) {
          return;
        }
        uint64_t v58 = (void *)v483;
LABEL_189:
        operator delete(v58);
        return;
      }
      unsigned int v38 = *a5;
      if (v38 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        uint64_t v466 = (os_log_t *)sub_32A48(13);
        v467 = *v466;
        if (*v466 && os_log_type_enabled(*v466, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v468 = v485;
          v469 = (CFTypeRef *)v483;
          unsigned int v470 = *a5;
          int v471 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          AudioObjectPropertySelector v472 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v468 < 0) {
            AudioObjectPropertySelector v472 = v469;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 738;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v472;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v470;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v471;
          _os_log_impl(&def_1E50E8, v467, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        uint64_t v473 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v473 = &off_6414D8;
        v473[2] = 561211770;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 740);
      uint64_t v39 = (*(uint64_t (**)(void))(**(void **)cf + 112))(*(void *)cf);
      BOOL v40 = (v39 & 0xFF00000000) != 0 && v39 == 1701867895;
      BOOL v41 = v40;
      goto LABEL_310;
    }
    unsigned int v62 = *a5;
    if (v62 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      UInt32 v282 = (os_log_t *)sub_32A48(13);
      int v283 = *v282;
      if (*v282 && os_log_type_enabled(*v282, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef Mutable = *(CFTypeRef *)a2;
        LODWORD(v480) = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
        int v284 = v485;
        AudioObjectPropertySelector v285 = (CFTypeRef *)v483;
        unsigned int v286 = *a5;
        int v287 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        UInt32 v288 = &v483;
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        if (v284 < 0) {
          UInt32 v288 = v285;
        }
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 817;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v288;
        *(_WORD *)&unsigned char cf[28] = 1024;
        *(_DWORD *)uint64_t v487 = v286;
        *(_WORD *)&v487[4] = 1024;
        *(_DWORD *)&v487[6] = v287;
        _os_log_impl(&def_1E50E8, v283, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          cf,
          0x28u);
        if (v485 < 0) {
          operator delete((void *)v483);
        }
      }
      int v289 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v289 = &off_6414D8;
      v289[2] = 561211770;
    }
    sub_DB994((uint64_t)cf, a1);
    uint64_t v63 = *(const void **)cf;
    if (!*(void *)cf) {
      goto LABEL_279;
    }
    goto LABEL_277;
  }
  if (v13 != 1886611810)
  {
    if (v13 != 1886613101)
    {
      if (v13 != 1886613619) {
        goto LABEL_287;
      }
      unsigned int v16 = *a5;
      if (v16 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        UInt32 v146 = (os_log_t *)sub_32A48(13);
        int v147 = *v146;
        if (*v146 && os_log_type_enabled(*v146, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef Mutable = *(CFTypeRef *)a2;
          LODWORD(v480) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
          int v148 = v485;
          UInt32 v149 = (CFTypeRef *)v483;
          unsigned int v150 = *a5;
          int v151 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v152 = &v483;
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "VirtualAudio_Port.cpp";
          if (v148 < 0) {
            uint64_t v152 = v149;
          }
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 757;
          *(_WORD *)&cf[18] = 2080;
          *(void *)&cf[20] = v152;
          *(_WORD *)&unsigned char cf[28] = 1024;
          *(_DWORD *)uint64_t v487 = v150;
          *(_WORD *)&v487[4] = 1024;
          *(_DWORD *)&v487[6] = v151;
          _os_log_impl(&def_1E50E8, v147, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            cf,
            0x28u);
          if (v485 < 0) {
            operator delete((void *)v483);
          }
        }
        int v153 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v153 = &off_6414D8;
        v153[2] = 561211770;
      }
      sub_43F38((uint64_t *)cf, (uint64_t *)(a1 + 88), "", 758);
      LODWORD(v17) = (*(uint64_t (**)(void))(**(void **)cf + 488))(*(void *)cf);
      goto LABEL_274;
    }
    unsigned int v70 = *a5;
    if (v70 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      int v322 = (os_log_t *)sub_32A48(13);
      char v323 = *v322;
      if (*v322 && os_log_type_enabled(*v322, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef Mutable = *(CFTypeRef *)a2;
        LODWORD(v480) = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
        int v324 = v485;
        int v325 = (CFTypeRef *)v483;
        unsigned int v326 = *a5;
        int v327 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        int v328 = &v483;
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "VirtualAudio_Port.cpp";
        if (v324 < 0) {
          int v328 = v325;
        }
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 725;
        *(_WORD *)&cf[18] = 2080;
        *(void *)&cf[20] = v328;
        *(_WORD *)&unsigned char cf[28] = 1024;
        *(_DWORD *)uint64_t v487 = v326;
        *(_WORD *)&v487[4] = 1024;
        *(_DWORD *)&v487[6] = v327;
        _os_log_impl(&def_1E50E8, v323, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          cf,
          0x28u);
        if (v485 < 0) {
          operator delete((void *)v483);
        }
      }
      uint64_t v329 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v329 = &off_6414D8;
      v329[2] = 561211770;
    }
    sub_43F38((uint64_t *)&v483, (uint64_t *)(a1 + 88), "", 726);
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v483 + 144))(cf);
    int v65 = *(const void **)cf;
    if (!*(void *)cf) {
      goto LABEL_300;
    }
LABEL_270:
    CFRetain(v65);
LABEL_299:
    uint64_t v107 = *(void *)cf;
LABEL_301:
    *a6 = v107;
    sub_72924((uint64_t)cf);
    goto LABEL_302;
  }
  unsigned int v55 = *a5;
  if (v55 < (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4))
  {
    UInt32 v258 = (os_log_t *)sub_32A48(13);
    int v259 = *v258;
    if (*v258 && os_log_type_enabled(*v258, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef Mutable = *(CFTypeRef *)a2;
      LODWORD(v480) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v483, (unsigned int *)&Mutable);
      int v260 = v485;
      std::string::size_type v261 = (CFTypeRef *)v483;
      unsigned int v262 = *a5;
      int v263 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
      UInt32 v264 = &v483;
      *(_DWORD *)CFTypeRef cf = 136316162;
      *(void *)&cf[4] = "VirtualAudio_Port.cpp";
      if (v260 < 0) {
        UInt32 v264 = v261;
      }
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 763;
      *(_WORD *)&cf[18] = 2080;
      *(void *)&cf[20] = v264;
      *(_WORD *)&unsigned char cf[28] = 1024;
      *(_DWORD *)uint64_t v487 = v262;
      *(_WORD *)&v487[4] = 1024;
      *(_DWORD *)&v487[6] = v263;
      _os_log_impl(&def_1E50E8, v259, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        cf,
        0x28u);
      if (v485 < 0) {
        operator delete((void *)v483);
      }
    }
    int v265 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v265 = &off_6414D8;
    v265[2] = 561211770;
  }
  sub_DAEFC(cf, a1, *(_DWORD *)(a2 + 4));
LABEL_185:
  uint64_t v56 = *(const void **)cf;
  size_t v57 = *(void *)&cf[8] - *(void *)cf;
  BOOL v40 = *(void *)&cf[8] == *(void *)cf;
  *a5 = (*(_DWORD *)&cf[8] - *(_DWORD *)cf) & 0xFFFFFFFC;
  if (!v40) {
    memmove(a6, v56, v57);
  }
  if (v56)
  {
    uint64_t v58 = (void *)v56;
    goto LABEL_189;
  }
}

void sub_43C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_43F38(uint64_t *a1, uint64_t *a2, char *a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        unsigned int v14 = strrchr(a3, 47);
        if (v14) {
          int v13 = v14 + 1;
        }
        else {
          int v13 = a3;
        }
      }
      else
      {
        int v13 = 0;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      unsigned int v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_440AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_440DC(uint64_t a1, int *a2, uint64_t a3, const char *a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v4 & 1) == 0)
  {
    AudioObjectPropertyAddress v32 = (os_log_t *)sub_32A48(13);
    long long v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 473;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Underlying Port is not valid\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0)
  {
    __int16 v35 = (os_log_t *)sub_32A48(13);
    unsigned int v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *(void *)a2;
      int v44 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v43);
      unsigned int v37 = v47 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 475;
      __int16 v49 = 2080;
      unsigned int v50 = v37;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v47 < 0) {
        operator delete(__p);
      }
    }
    unsigned int v38 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v38 = &off_6414D8;
    v38[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v39 = (os_log_t *)sub_32A48(13);
    BOOL v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *(void *)a2;
      int v44 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v43);
      BOOL v41 = v47 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 476;
      __int16 v49 = 2080;
      unsigned int v50 = v41;
      __int16 v51 = 1024;
      int v52 = a3;
      __int16 v53 = 2048;
      unsigned int v54 = a4;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v47 < 0) {
        operator delete(__p);
      }
    }
    unsigned int v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v42 = &off_6414D8;
    v42[2] = 561211770;
  }
  int v9 = *a2;
  uint64_t v10 = 4;
  if (*a2 > 1886417761)
  {
    if (v9 > 1936745837)
    {
      if (v9 > 1952740207)
      {
        if (v9 > 1970496629)
        {
          if (v9 > 1986947427)
          {
            if (v9 != 1986947428 && v9 != 2004050279)
            {
              int v12 = 2004054901;
              goto LABEL_141;
            }
          }
          else if (v9 != 1970496630 && v9 != 1986164323)
          {
            int v12 = 1986814563;
            goto LABEL_141;
          }
          goto LABEL_133;
        }
        if (v9 <= 1953655148)
        {
          if (v9 != 1952740208)
          {
            int v14 = 1953653606;
            goto LABEL_121;
          }
          sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 576);
          int v11 = (*(uint64_t (**)(void))(**(void **)buf + 360))(*(void *)buf);
          goto LABEL_150;
        }
        if (v9 == 1953655149)
        {
          sub_43F38((uint64_t *)&__p, (uint64_t *)(a1 + 88), "", 564);
          (*(void (**)(unsigned char *__return_ptr))(**((void **)__p + 24) + 288))(buf);
          int v27 = *(_DWORD *)&buf[8] - *(_DWORD *)buf;
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          uint64_t v10 = v27 & 0xFFFFFFFC;
          int v25 = v46;
          if (!v46) {
            return v10;
          }
          goto LABEL_136;
        }
        if (v9 == 1953719142) {
          return 8;
        }
        int v21 = 1970040164;
        goto LABEL_132;
      }
      if (v9 > 1936748655)
      {
        if (v9 > 1936945762)
        {
          if (v9 != 1936945763 && v9 != 1937204590)
          {
            if (v9 != 1952609377) {
              goto LABEL_165;
            }
            sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 590);
            uint64_t v20 = (*(uint64_t (**)(void, int *, uint64_t, const char *))(**(void **)buf + 32))(*(void *)buf, a2, a3, a4);
LABEL_134:
            uint64_t v10 = v20;
            goto LABEL_135;
          }
          goto LABEL_133;
        }
        if (v9 == 1936748656) {
          return 8;
        }
        unsigned __int16 v24 = 29808;
      }
      else
      {
        if (v9 > 1936747875)
        {
          if (v9 == 1936747876) {
            return v10;
          }
          if (v9 == 1936747877) {
            goto LABEL_133;
          }
          unsigned __int16 v15 = 28269;
          goto LABEL_91;
        }
        if (v9 == 1936745838) {
          return v10;
        }
        unsigned __int16 v24 = 26739;
      }
      int v12 = v24 | 0x73700000;
      goto LABEL_141;
    }
    if (v9 <= 1886742883)
    {
      if (v9 <= 1886613618)
      {
        if (v9 > 1886484337)
        {
          if (v9 == 1886484338) {
            return v10;
          }
          if (v9 == 1886611810)
          {
            int v23 = sub_DC15C(a1, a2[1]);
            return (4 * v23);
          }
          int v14 = 1886613101;
          goto LABEL_121;
        }
        if (v9 == 1886417762) {
          return 8;
        }
        if (v9 != 1886417783) {
          goto LABEL_165;
        }
        sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 529);
        int v11 = (*(uint64_t (**)(void))(**(void **)buf + 328))(*(void *)buf);
        goto LABEL_150;
      }
      if (v9 > 1886614624)
      {
        if (v9 == 1886614625 || v9 == 1886614882) {
          return v10;
        }
        int v12 = 1886681456;
        goto LABEL_141;
      }
      if (v9 == 1886613619) {
        return v10;
      }
      int v21 = 1886614381;
      goto LABEL_132;
    }
    if (v9 <= 1936221549)
    {
      if (v9 <= 1886810225)
      {
        if (v9 == 1886742884) {
          return 8;
        }
        int v12 = 1886808435;
      }
      else
      {
        if (v9 == 1886810226 || v9 == 1935762278) {
          return v10;
        }
        int v12 = 1935895923;
      }
      goto LABEL_141;
    }
    if (v9 <= 1936744815)
    {
      if (v9 == 1936221550) {
        return v10;
      }
      int v12 = 1936225136;
      goto LABEL_141;
    }
    if (v9 == 1936744816) {
      return v10;
    }
    if (v9 == 1936745318) {
      goto LABEL_133;
    }
    unsigned __int16 v15 = 25714;
LABEL_91:
    int v14 = v15 | 0x73700000;
    goto LABEL_121;
  }
  if (v9 <= 1819046767)
  {
    if (v9 <= 1684826731)
    {
      if (v9 <= 1651797099)
      {
        if (v9 > 1651796324)
        {
          unsigned int v22 = v9 - 1651796325;
          if (v22 <= 0xE && ((1 << v22) & 0x4801) != 0) {
            return v10;
          }
          goto LABEL_165;
        }
        if (v9 == 1650551140) {
          goto LABEL_133;
        }
        if (v9 == 1651271025) {
          return v10;
        }
        unsigned __int16 v13 = 24946;
LABEL_95:
        int v12 = v13 | 0x62740000;
        goto LABEL_141;
      }
      if (v9 <= 1651798885)
      {
        if (v9 == 1651797100) {
          return v10;
        }
        unsigned __int16 v13 = 28787;
        goto LABEL_95;
      }
      if (v9 != 1651798886)
      {
        int v21 = 1668051827;
        goto LABEL_132;
      }
LABEL_133:
      sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 652);
      uint64_t v20 = (*(uint64_t (**)(void, int *, uint64_t, const char *))(**(void **)buf + 32))(*(void *)buf, a2, a3, a4);
      goto LABEL_134;
    }
    if (v9 <= 1685484389)
    {
      if (v9 <= 1685088611)
      {
        if (v9 != 1684826732)
        {
          int v12 = 1685021040;
          goto LABEL_141;
        }
        goto LABEL_133;
      }
      if (v9 != 1685088612)
      {
        if (v9 == 1685287026)
        {
          if (a3 != 8 || !a4)
          {
            unsigned int v28 = (os_log_t *)sub_32A48(13);
            int v29 = *v28;
            if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
            {
              uint64_t v43 = *(void *)a2;
              int v44 = a2[2];
              sub_16C9C4((uint64_t)&__p, (unsigned int *)&v43);
              int v30 = v47 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 585;
              __int16 v49 = 2080;
              unsigned int v50 = v30;
              __int16 v51 = 1024;
              int v52 = 8;
              __int16 v53 = 2080;
              unsigned int v54 = "non-";
              __int16 v55 = 1024;
              int v56 = a3;
              __int16 v57 = 2048;
              uint64_t v58 = a4;
              _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                buf,
                0x3Cu);
              if (v47 < 0) {
                operator delete(__p);
              }
            }
            unint64_t v31 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v31 = &off_6414D8;
            v31[2] = 561211770;
          }
          return v10;
        }
        if (v9 == 1685287027)
        {
          if (a3 != 8 || !a4)
          {
            unsigned int v16 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v16;
            if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
            {
              uint64_t v43 = *(void *)a2;
              int v44 = a2[2];
              sub_16C9C4((uint64_t)&__p, (unsigned int *)&v43);
              __int16 v18 = v47 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 580;
              __int16 v49 = 2080;
              unsigned int v50 = v18;
              __int16 v51 = 1024;
              int v52 = 8;
              __int16 v53 = 2080;
              unsigned int v54 = "non-";
              __int16 v55 = 1024;
              int v56 = a3;
              __int16 v57 = 2048;
              uint64_t v58 = a4;
              _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                buf,
                0x3Cu);
              if (v47 < 0) {
                operator delete(__p);
              }
            }
            int v19 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v19 = &off_6414D8;
            v19[2] = 561211770;
          }
          return v10;
        }
        goto LABEL_165;
      }
      sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 628);
      int v11 = (*(uint64_t (**)(void))(**(void **)buf + 424))(*(void *)buf);
      goto LABEL_150;
    }
    if (v9 <= 1752462194)
    {
      if (v9 == 1685484390) {
        return 8;
      }
      int v12 = 1752327777;
      goto LABEL_141;
    }
    if (v9 == 1752462195 || v9 == 1767989616) {
      goto LABEL_133;
    }
    int v21 = 1768382832;
LABEL_132:
    if (v9 != v21) {
      goto LABEL_165;
    }
    goto LABEL_133;
  }
  if (v9 <= 1885890928)
  {
    if (v9 <= 1885434721)
    {
      if (v9 > 1819505772)
      {
        if (v9 != 1819505773)
        {
          if (v9 == 1869832547) {
            return v10;
          }
          int v14 = 1885430643;
LABEL_121:
          if (v9 != v14) {
            goto LABEL_165;
          }
          return 8;
        }
        goto LABEL_133;
      }
      if (v9 == 1819046768) {
        return v10;
      }
      int v21 = 1819503987;
      goto LABEL_132;
    }
    if (v9 <= 1885561195)
    {
      if (v9 == 1885434722) {
        return 8;
      }
      int v12 = 1885497710;
      goto LABEL_141;
    }
    if (v9 != 1885561196)
    {
      if (v9 == 1885566064) {
        return v10;
      }
      int v12 = 1885696116;
      goto LABEL_141;
    }
    sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 594);
    int v11 = (*(uint64_t (**)(void))(**(void **)buf + 376))(*(void *)buf);
LABEL_150:
    if (v11) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = 0;
    }
LABEL_135:
    int v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
LABEL_136:
    }
      sub_4636C(v25);
    return v10;
  }
  if (v9 <= 1886282092)
  {
    if (v9 > 1885956207)
    {
      if (v9 == 1885956208 || v9 == 1885959026) {
        return v10;
      }
      int v14 = 1886218596;
      goto LABEL_121;
    }
    if (v9 == 1885890929) {
      return v10;
    }
    int v12 = 1885955428;
LABEL_141:
    if (v9 == v12) {
      return v10;
    }
    goto LABEL_165;
  }
  if (v9 > 1886353261)
  {
    if (v9 == 1886353262) {
      return v10;
    }
    if (v9 != 1886415204)
    {
      if (v9 != 1886417524) {
        goto LABEL_165;
      }
      int v23 = sub_DC318(a1, a2[1]);
      return (4 * v23);
    }
    return 8;
  }
  if (v9 == 1886282093 || v9 == 1886282099) {
    return 8;
  }
  if (v9 == 1886283375)
  {
    sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 537);
    int v11 = (*(uint64_t (**)(void))(**(void **)buf + 344))(*(void *)buf);
    goto LABEL_150;
  }
LABEL_165:

  return sub_3A69A4(a1, a2);
}

void sub_450C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_4636C(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_45120(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  while (a2 != a3)
  {
    uint64_t v7 = (void *)a2[1];
    uint64_t v8 = a2;
    if (v7)
    {
      do
      {
        int v9 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v9 = (void *)v8[2];
        BOOL v10 = *v9 == (void)v8;
        uint64_t v8 = v9;
      }
      while (!v10);
    }
    uint64_t result = sub_451D0(a1, *((_DWORD *)a2 + 7));
    a2 = v9;
  }
  return result;
}

void sub_451BC(_Unwind_Exception *a1)
{
  sub_3D61C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_451D0(uint64_t result, int a2)
{
  if (*(void *)result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 9))
    {
      int valuePtr = a2;
      CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v4 = v3;
      char v5 = 1;
      if (v3 && *(void *)v2)
      {
        if (*(unsigned char *)(v2 + 9)) {
          CFArrayAppendValue(*(CFMutableArrayRef *)v2, v3);
        }
      }
      return sub_45260((uint64_t)&v4);
    }
  }
  return result;
}

void sub_4524C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_45260((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_45260(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_4529C(uint64_t a1, int *a2, int a3, const char *a4)
{
  if (*a2 != 1986095470)
  {
    sub_3B7EC();
    CFNumberRef v45 = &qword_64CC40;
    char v46 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
    if (*(_DWORD *)(a1 + 108) != 2)
    {
      uint64_t v26 = sub_32A48(13);
      int v27 = sub_7D5E8(1, *(void **)v26, *(void *)(v26 + 8));
      unsigned int v28 = v27;
      if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unsigned int v48 = "VirtualAudio_PlugIn.mm";
        __int16 v49 = 1024;
        *(_DWORD *)unsigned int v50 = 5304;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"VirtualAudio PlugIn is not initialized yet\"", buf, 0x12u);
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "VirtualAudio PlugIn is not initialized yet");
    }
    if ((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 32))(a1, a2))
    {
      if ((a3 == 0) == (a4 == 0))
      {
        int v9 = *a2;
        uint64_t v4 = 8;
        if (*a2 <= 1769304163)
        {
          if (v9 <= 1651664754)
          {
            if (v9 > 1634629489)
            {
              if (v9 > 1635152482)
              {
                if (v9 == 1635152483 || v9 == 1651077236) {
                  goto LABEL_85;
                }
                int v10 = 1651077731;
              }
              else
              {
                if (v9 == 1634629490 || v9 == 1634756195) {
                  goto LABEL_85;
                }
                int v10 = 1634759267;
              }
LABEL_84:
              if (v9 == v10) {
                goto LABEL_85;
              }
LABEL_96:
              uint64_t v4 = sub_3A69A4(a1, a2);
              goto LABEL_85;
            }
            if (v9 > 1634624370)
            {
              if (v9 != 1634624371)
              {
                if (v9 != 1634627952)
                {
                  if (v9 != 1634627954) {
                    goto LABEL_96;
                  }
                  if (a3 == 8 && a4) {
                    goto LABEL_85;
                  }
                  uint64_t v12 = sub_32A48(13);
                  unsigned __int16 v13 = sub_7D5E8(1, *(void **)v12, *(void *)(v12 + 8));
                  if (v13)
                  {
                    int v14 = v13;
                    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v41 = *(void *)a2;
                      int v42 = a2[2];
                      sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
                      if (v44 >= 0) {
                        unsigned __int16 v15 = __p;
                      }
                      else {
                        unsigned __int16 v15 = (void **)__p[0];
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
                      unsigned int v48 = "VirtualAudio_PlugIn.mm";
                      __int16 v49 = 1024;
                      *(_DWORD *)unsigned int v50 = 5324;
                      *(_WORD *)&v50[4] = 2080;
                      __int16 v51 = v15;
                      __int16 v52 = 1024;
                      int v53 = 8;
                      __int16 v54 = 2080;
                      __int16 v55 = "non-";
                      __int16 v56 = 1024;
                      int v57 = a3;
                      __int16 v58 = 2048;
                      unsigned int v59 = a4;
LABEL_126:
                      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                        buf,
                        0x3Cu);
                      if (v44 < 0) {
                        operator delete(__p[0]);
                      }
                      goto LABEL_128;
                    }
                    goto LABEL_128;
                  }
                  goto LABEL_95;
                }
                if ((a3 | 4) == 4) {
                  goto LABEL_85;
                }
                uint64_t v21 = sub_32A48(13);
                unsigned int v22 = sub_7D5E8(1, *(void **)v21, *(void *)(v21 + 8));
                __int16 v18 = v22;
                if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  unsigned int v48 = "VirtualAudio_PlugIn.mm";
                  __int16 v49 = 1024;
                  *(_DWORD *)unsigned int v50 = 5318;
                  _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                }
LABEL_91:

                int v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v23, "Precondition failure.");
              }
              goto LABEL_73;
            }
            if (v9 != 1633907299)
            {
              int v11 = 1633969267;
              goto LABEL_72;
            }
LABEL_85:
            sub_3BCAC(&v45);
            return v4;
          }
          if (v9 <= 1684632433)
          {
            if (v9 <= 1668310626)
            {
              if (v9 != 1651664755)
              {
                int v10 = 1667329392;
                goto LABEL_84;
              }
              goto LABEL_73;
            }
            if (v9 == 1668310627 || v9 == 1668313699) {
              goto LABEL_85;
            }
            if (v9 != 1668575346) {
              goto LABEL_96;
            }
            if ((a3 | 4) != 4)
            {
              uint64_t v16 = sub_32A48(13);
              uint64_t v17 = sub_7D5E8(1, *(void **)v16, *(void *)(v16 + 8));
              __int16 v18 = v17;
              if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                unsigned int v48 = "VirtualAudio_PlugIn.mm";
                __int16 v49 = 1024;
                *(_DWORD *)unsigned int v50 = 5349;
                _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
              }
              goto LABEL_91;
            }
            goto LABEL_85;
          }
          if (v9 > 1701737067)
          {
            if (v9 != 1701737068 && v9 != 1751480691)
            {
              int v11 = 1768845421;
              goto LABEL_72;
            }
          }
          else
          {
            if (v9 == 1684632434)
            {
              if (a3 != 8 || !a4)
              {
                uint64_t v24 = sub_32A48(13);
                int v25 = sub_7D5E8(1, *(void **)v24, *(void *)(v24 + 8));
                if (v25)
                {
                  int v14 = v25;
                  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v41 = *(void *)a2;
                    int v42 = a2[2];
                    sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
                    if (v44 >= 0) {
                      uint64_t v39 = __p;
                    }
                    else {
                      uint64_t v39 = (void **)__p[0];
                    }
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
                    unsigned int v48 = "VirtualAudio_PlugIn.mm";
                    __int16 v49 = 1024;
                    *(_DWORD *)unsigned int v50 = 5413;
                    *(_WORD *)&v50[4] = 2080;
                    __int16 v51 = v39;
                    __int16 v52 = 1024;
                    int v53 = 8;
                    __int16 v54 = 2080;
                    __int16 v55 = "non-";
                    __int16 v56 = 1024;
                    int v57 = a3;
                    __int16 v58 = 2048;
                    unsigned int v59 = a4;
                    goto LABEL_126;
                  }
LABEL_128:

LABEL_129:
                  BOOL v40 = __cxa_allocate_exception(0x10uLL);
                  *(void *)BOOL v40 = &off_6414D8;
                  v40[2] = 561211770;
                }
LABEL_95:
                int v14 = 0;
                goto LABEL_129;
              }
              goto LABEL_73;
            }
            if (v9 != 1685283955)
            {
              int v11 = 1701013875;
              goto LABEL_72;
            }
          }
LABEL_73:
          uint64_t v4 = 4;
          goto LABEL_85;
        }
        if (v9 <= 1936028520)
        {
          if (v9 <= 1886549106)
          {
            if (v9 > 1868853874)
            {
              if (v9 != 1868853875 && v9 != 1886350709)
              {
                int v11 = 1886548848;
                goto LABEL_72;
              }
              goto LABEL_73;
            }
            if (v9 != 1769304164)
            {
              int v10 = 1819173229;
              goto LABEL_84;
            }
          }
          else
          {
            if (v9 <= 1920230245)
            {
              if (v9 == 1886549107 || v9 == 1903653475) {
                goto LABEL_85;
              }
              int v11 = 1919120504;
LABEL_72:
              if (v9 != v11) {
                goto LABEL_96;
              }
              goto LABEL_73;
            }
            if (v9 != 1920230246)
            {
              if (v9 == 1920297328) {
                goto LABEL_73;
              }
              int v19 = 1920426613;
              goto LABEL_80;
            }
          }
          uint64_t v4 = 32;
          goto LABEL_85;
        }
        if (v9 > 1986094178)
        {
          if (v9 <= 1987077485)
          {
            if ((v9 - 1986094179) >= 2)
            {
              int v10 = 1987016304;
              goto LABEL_84;
            }
            uint64_t v4 = 0;
            goto LABEL_85;
          }
          if (v9 == 1987077486) {
            goto LABEL_73;
          }
          int v19 = 2019714413;
        }
        else
        {
          if (v9 <= 1936745572)
          {
            if (v9 == 1936028521) {
              goto LABEL_85;
            }
            if (v9 != 1936225648)
            {
              if (v9 != 1936745332) {
                goto LABEL_96;
              }
              sub_13BE14(buf, *(void ***)(a1 + 112));
              uint64_t v4 = (4 * *(_DWORD *)&v50[2]);
              sub_45F50(buf);
              goto LABEL_85;
            }
            goto LABEL_73;
          }
          if (v9 == 1936745573 || v9 == 1936746862) {
            goto LABEL_73;
          }
          int v19 = 1936882284;
        }
LABEL_80:
        if (v9 != v19) {
          goto LABEL_96;
        }
        uint64_t v4 = 16;
        goto LABEL_85;
      }
      uint64_t v34 = sub_32A48(13);
      __int16 v35 = sub_7D5E8(1, *(void **)v34, *(void *)(v34 + 8));
      if (!v35)
      {
        AudioObjectPropertyAddress v32 = 0;
        int v33 = 561211770;
        goto LABEL_120;
      }
      AudioObjectPropertyAddress v32 = v35;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *(void *)a2;
        int v42 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
        unsigned int v37 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        unsigned int v48 = "VirtualAudio_PlugIn.mm";
        __int16 v49 = 1024;
        *(_DWORD *)unsigned int v50 = 5307;
        *(_WORD *)&v50[4] = 2080;
        __int16 v51 = v37;
        __int16 v52 = 1024;
        int v53 = a3;
        __int16 v54 = 2048;
        __int16 v55 = a4;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x2Cu);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
      }
      int v33 = 561211770;
    }
    else
    {
      uint64_t v30 = sub_32A48(13);
      unint64_t v31 = sub_7D5E8(1, *(void **)v30, *(void *)(v30 + 8));
      if (!v31)
      {
        AudioObjectPropertyAddress v32 = 0;
        int v33 = 2003332927;
        goto LABEL_120;
      }
      AudioObjectPropertyAddress v32 = v31;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *(void *)a2;
        int v42 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
        unsigned int v36 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unsigned int v48 = "VirtualAudio_PlugIn.mm";
        __int16 v49 = 1024;
        *(_DWORD *)unsigned int v50 = 5306;
        *(_WORD *)&v50[4] = 2080;
        __int16 v51 = v36;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
      }
      int v33 = 2003332927;
    }

LABEL_120:
    unsigned int v38 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v38 = &off_6414D8;
    v38[2] = v33;
  }
  return 4;
}

void sub_45E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void *sub_45ED4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned __int8 v6 = result;
    uint64_t result = sub_46BB4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_45F34(_Unwind_Exception *exception_object)
{
  CFNumberRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_45F50(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_45FB4(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t result = 1;
  if (*a2 > 1986164322)
  {
    if (v3 == 1986164323) {
      return result;
    }
    if (v3 == 1986814563)
    {
      uint64_t v5 = *(void *)(a1 + 192);
      uint64_t v7 = 0x6F75747043567323;
      int v8 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v7);
    }
    return 0;
  }
  if (v3 != 1886614381)
  {
    if (v3 == 1937204590) {
      return result;
    }
    return 0;
  }
  unsigned __int8 v6 = *(uint64_t (**)(void))(**(void **)(a1 + 192) + 16);

  return v6();
}

unsigned char *sub_460BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  sub_3B7EC();
  int v23 = &qword_64CC40;
  char v24 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  unsigned __int8 v6 = *(void **)(a2 + 40);
  uint64_t v7 = (void *)(a2 + 48);
  if (v6 != (void *)(a2 + 48))
  {
    do
    {
      if (!v6[6])
      {
        uint64_t v20 = (os_log_t *)sub_32A48(13);
        uint64_t v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "VirtualAudio_PortManager.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 210;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      int v8 = (std::__shared_weak_count *)v6[5];
      if (v8)
      {
        int v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          int v10 = v9;
          uint64_t v11 = v6[4];
          if (v11)
          {
            sub_469A0((uint64_t)__p, a3);
            int v12 = sub_4642C(v11, (uint64_t)__p);
            if (cf) {
              CFRelease(cf);
            }
            sub_463E0(v26);
            if (*(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }
            if (v12)
            {
              int v13 = *(_DWORD *)(v6[6] + 8);
              int v14 = operator new(0x18uLL);
              v14[4] = v13;
              uint64_t v15 = *a1;
              *(void *)int v14 = *a1;
              *((void *)v14 + 1) = a1;
              *(void *)(v15 + 8) = v14;
              *a1 = (uint64_t)v14;
              ++a1[2];
            }
          }
          sub_4636C(v10);
        }
      }
      uint64_t v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v6[2];
          BOOL v18 = *v17 == (void)v6;
          unsigned __int8 v6 = v17;
        }
        while (!v18);
      }
      unsigned __int8 v6 = v17;
    }
    while (v17 != v7);
  }
  return sub_3BCAC(&v23);
}

void sub_46300(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

void sub_4636C(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_463E0(void *a1)
{
  if (a1)
  {
    sub_463E0(*a1);
    sub_463E0(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_4642C(uint64_t a1, uint64_t a2)
{
  if (sub_468DC(a2)) {
    return 1;
  }
  uint64_t v5 = *(__int32 **)(a2 + 8);
  if (*(__int32 **)a2 != v5)
  {
    unsigned __int8 v6 = wmemchr(*(__int32 **)a2, *(_DWORD *)(a1 + 144), ((uint64_t)v5 - *(void *)a2) >> 2);
    uint64_t v7 = v6 ? v6 : v5;
    if (v5 == v7) {
      goto LABEL_60;
    }
  }
  if (qword_64B458 == *(void *)(a1 + 176))
  {
    uint64_t v8 = qword_64B448;
    if ((_UNKNOWN *)qword_64B448 == &unk_64B450) {
      goto LABEL_25;
    }
    int v9 = *(void **)(a1 + 160);
    while (*(_DWORD *)(v8 + 28) == *((_DWORD *)v9 + 7))
    {
      int v10 = *(void **)(v8 + 8);
      uint64_t v11 = v8;
      if (v10)
      {
        do
        {
          uint64_t v8 = (uint64_t)v10;
          int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v8 = *(void *)(v11 + 16);
          BOOL v12 = *(void *)v8 == v11;
          uint64_t v11 = v8;
        }
        while (!v12);
      }
      int v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (void *)v9[2];
          BOOL v12 = *v14 == (void)v9;
          int v9 = v14;
        }
        while (!v12);
      }
      int v9 = v14;
      if ((_UNKNOWN *)v8 == &unk_64B450) {
        goto LABEL_25;
      }
    }
  }
  unsigned int v15 = *(_DWORD *)(a2 + 24);
  if (v15 != 1986295651)
  {
    uint64_t v24 = *(void *)(a1 + 168);
    if (!v24) {
      goto LABEL_60;
    }
    uint64_t v25 = a1 + 168;
    do
    {
      unsigned int v26 = *(_DWORD *)(v24 + 28);
      BOOL v27 = v26 >= v15;
      if (v26 >= v15) {
        unsigned int v28 = (uint64_t *)v24;
      }
      else {
        unsigned int v28 = (uint64_t *)(v24 + 8);
      }
      if (v27) {
        uint64_t v25 = v24;
      }
      uint64_t v24 = *v28;
    }
    while (*v28);
    if (v25 == a1 + 168 || v15 < *(_DWORD *)(v25 + 28))
    {
LABEL_60:
      int v19 = 1;
      return v19 ^ 1u;
    }
  }
LABEL_25:
  CFStringRef v16 = *(const __CFString **)(a2 + 80);
  if (v16)
  {
    CFStringRef v17 = *(const __CFString **)(a1 + 248);
    CFStringRef v29 = v17;
    char v30 = *(unsigned char *)(a1 + 256);
    CFStringRef v18 = v16;
    if (v30)
    {
      CFStringRef v18 = v16;
      if (v17)
      {
        CFRetain(v17);
        CFStringRef v18 = *(const __CFString **)(a2 + 80);
      }
    }
    if (CFStringCompare(v17, v18, 0))
    {
      int v19 = 1;
      goto LABEL_48;
    }
  }
  int v20 = *(_DWORD *)(a2 + 72);
  if ((v20 & 3) != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 152))(a1))
  {
    unsigned int v21 = *(_DWORD *)(a2 + 72);
    if (((v21 >> 2) & 3) != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1))
    {
      unsigned int v22 = *(_DWORD *)(a2 + 72);
      unsigned int v23 = *(unsigned __int16 *)(a1 + 184);
      if (((v22 >> 4) & 3) != (v23 & 1)
        && v22 >> 6 != ((v23 >> 1) & 1)
        && ((v22 >> 8) & 3) != ((v23 >> 2) & 1)
        && ((v22 >> 10) & 3) != ((v23 >> 3) & 1)
        && ((v22 >> 12) & 3) != ((v23 >> 4) & 1)
        && (unsigned __int16)v22 >> 14 != ((v23 >> 5) & 1)
        && (HIWORD(v22) & 3) != ((v23 >> 6) & 1)
        && ((v22 >> 18) & 3) != ((v23 >> 7) & 1)
        && ((v22 >> 20) & 3) != ((v23 >> 8) & 1)
        && ((v22 >> 22) & 3) != ((v23 >> 9) & 1)
        && (!*(unsigned char *)(a2 + 32) || sub_105654((__int32 **)a1, *(unsigned int *)(a2 + 28))))
      {
        int v19 = sub_1056F4(a2 + 40, *(_DWORD *)(a1 + 148)) ^ 1;
        if (!v16) {
          return v19 ^ 1u;
        }
        goto LABEL_48;
      }
    }
  }
  int v19 = 1;
  if (v16) {
LABEL_48:
  }
    sub_72924((uint64_t)&v29);
  return v19 ^ 1u;
}

void sub_46754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_46774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8) - (void)v4;
  uint64_t v7 = *(const void **)a2;
  if (v6 != *(void *)(a2 + 8) - (void)v7 || memcmp(v4, v7, v6) || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a2 + 32))
  {
    if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) != 0) != (*(unsigned char *)(a2 + 32) != 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40) && *(void *)(a1 + 64) == *(void *)(a2 + 64))
  {
    int v9 = *(void **)(a1 + 48);
    if (v9 == (void *)(a1 + 56))
    {
LABEL_25:
      if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)) {
        return sub_152A4(*(const __CFString **)(a1 + 80), (const __CFString **)(a2 + 80)) == kCFCompareEqualTo;
      }
    }
    else
    {
      int v10 = *(void **)(a2 + 48);
      while (*((_DWORD *)v9 + 7) == *((_DWORD *)v10 + 7))
      {
        uint64_t v11 = (void *)v9[1];
        BOOL v12 = v9;
        if (v11)
        {
          do
          {
            int v9 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            int v9 = (void *)v12[2];
            BOOL v13 = *v9 == (void)v12;
            BOOL v12 = v9;
          }
          while (!v13);
        }
        int v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            unsigned int v15 = v14;
            int v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            unsigned int v15 = (void *)v10[2];
            BOOL v13 = *v15 == (void)v10;
            int v10 = v15;
          }
          while (!v13);
        }
        int v10 = v15;
        if (v9 == (void *)(a1 + 56)) {
          goto LABEL_25;
        }
      }
    }
  }
  return 0;
}

BOOL sub_468DC(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660C58, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = a1;
    int v2 = __cxa_guard_acquire(&qword_660C58);
    a1 = v3;
    if (v2)
    {
      qword_660C00 = 0;
      *(void *)algn_660C08 = 0;
      qword_660C10 = 0;
      strcpy((char *)&dword_660C18, "cwdv");
      byte_660C20 = 0;
      dword_660C28 = 3;
      qword_660C40 = 0;
      qword_660C38 = 0;
      qword_660C30 = (uint64_t)&qword_660C38;
      dword_660C48 = 44739242;
      qword_660C50 = 0;
      __cxa_guard_release(&qword_660C58);
      a1 = v3;
    }
  }

  return sub_46774(a1, (uint64_t)&qword_660C00);
}

void *sub_469A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_46B38((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t result = sub_46A4C((uint64_t *)(a1 + 48), a2 + 48);
  int v5 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 72) = v5;
  size_t v6 = *(const void **)(a2 + 80);
  if (v6)
  {
    uint64_t result = (void *)CFRetain(v6);
    int v5 = *(_DWORD *)(a1 + 72);
  }
  *(void *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 72) = v5 & 0xFFFFFFFC;
  return result;
}

void sub_46A30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_46A4C(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_46AA0(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_46A8C(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_46AA0(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    size_t v6 = result + 1;
    do
    {
      uint64_t result = sub_46C2C(v5, v6, *((_DWORD *)v4 + 7), (_DWORD *)v4 + 7);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *sub_46B38(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    uint64_t result = sub_46BB4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_46B98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_46BB4(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_60548();
  }
  uint64_t result = (char *)sub_46BF4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_46BF4(unint64_t a1)
{
  if (a1 >> 62) {
    sub_60560();
  }
  return operator new(4 * a1);
}

uint64_t *sub_46C2C(uint64_t **a1, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  size_t v6 = sub_46E98(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_46CA8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_46CA8(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_46D00(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_46D00(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      int v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            BOOL v9 = (uint64_t **)a2[2];
          }
          else
          {
            BOOL v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *BOOL v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            int v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), int v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *int v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_46E98(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 7), v6 > a5))
  {
    uint64_t v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      BOOL v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      int v8 = (uint64_t *)*a2;
      do
      {
        BOOL v9 = v8;
        int v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      uint64_t v12 = a2;
      do
      {
        BOOL v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        uint64_t v12 = v9;
      }
      while (v13);
    }
    if (*((_DWORD *)v9 + 7) < a5) {
      goto LABEL_17;
    }
    uint64_t v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v15 = (uint64_t *)v14;
          unsigned int v16 = *(_DWORD *)(v14 + 28);
          if (v16 <= a5) {
            break;
          }
          uint64_t v14 = *v15;
          int v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }
        if (v16 >= a5) {
          break;
        }
        int v5 = v15 + 1;
        uint64_t v14 = v15[1];
      }
      while (v14);
      goto LABEL_43;
    }
LABEL_42:
    unsigned int v15 = a1 + 1;
LABEL_43:
    *a3 = v15;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v10 = a2[1];
  if (v10)
  {
    uint64_t v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    CFStringRef v17 = a2;
    do
    {
      a4 = (uint64_t *)v17[2];
      BOOL v13 = *a4 == (void)v17;
      CFStringRef v17 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && *((_DWORD *)a4 + 7) <= a5)
  {
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v15 = (uint64_t *)v18;
          unsigned int v19 = *(_DWORD *)(v18 + 28);
          if (v19 <= a5) {
            break;
          }
          uint64_t v18 = *v15;
          int v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }
        if (v19 >= a5) {
          break;
        }
        int v5 = v15 + 1;
        uint64_t v18 = v15[1];
      }
      while (v18);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v10)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_47020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  while (a2 != a3)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t result = sub_451D0(a1, *(_DWORD *)(a2 + 16));
    a2 = v7;
  }
  return result;
}

void sub_47090(_Unwind_Exception *a1)
{
  sub_3D61C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_470A4(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 80);
  if (v2) {
    CFRelease(v2);
  }
  sub_463E0(*(void **)(a1 + 56));
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_470F0(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  pthread_t v8 = v2;
  uint64_t v3 = (std::recursive_mutex *)(a1 + 168);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  uint64_t v4 = *(_opaque_pthread_t **)(a1 + 232);
  if (v2)
  {
    if (v4 && v2 == v4) {
      goto LABEL_7;
    }
  }
  else if (!v4)
  {
LABEL_7:
    sub_39ECC(a1);
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
    return 1;
  }
  if (sub_3A50C(a1)) {
    goto LABEL_7;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1)) {
    return 0;
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  uint64_t v7 = sub_39FB8((float *)(a1 + 248), (unint64_t)v2, &v8);
  uint64_t v5 = 1;
  v7[3] = 1;
  std::recursive_mutex::unlock(v3);
  return v5;
}

void sub_471C0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_471DC(int *a1, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, char *a6)
{
  int v10 = *a2;
  int v11 = a2[1];
  if (*a2 > 1818455661)
  {
    if (v10 <= 1870030193)
    {
      if (v10 <= 1819173228)
      {
        switch(v10)
        {
          case 1818455662:
            int v61 = *a5;
            if (v61 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
            {
              UInt32 v149 = (os_log_t *)sub_32A48(13);
              unsigned int v150 = *v149;
              if (*v149 && os_log_type_enabled(*v149, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                uint64_t v155 = "HP_Device.cpp";
                __int16 v156 = 1024;
                int v157 = 785;
                _os_log_impl(&def_1E50E8, v150, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyElementNumberName\"", buf, 0x12u);
              }
              exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
              *(void *)exceptiouint64_t n = &off_6414D8;
              exception[2] = 561211770;
            }
            uint64_t v18 = (*(uint64_t (**)(int *, int *))(*(void *)a1 + 160))(a1, a2);
            break;
          case 1818850926:
            int v59 = *a5;
            if (v59 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
            {
              UInt32 v146 = (os_log_t *)sub_32A48(13);
              int v147 = *v146;
              if (*v146 && os_log_type_enabled(*v146, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                uint64_t v155 = "HP_Device.cpp";
                __int16 v156 = 1024;
                int v157 = 828;
                _os_log_impl(&def_1E50E8, v147, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceIsAlive\"", buf, 0x12u);
              }
              int v148 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v148 = &off_6414D8;
              v148[2] = 561211770;
            }
            pid_t v13 = (*(uint64_t (**)(int *))(*(void *)a1 + 104))(a1);
            goto LABEL_120;
          case 1819107691:
            int v21 = *a5;
            if (v21 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
            {
              unsigned int v101 = (os_log_t *)sub_32A48(13);
              uint64_t v102 = *v101;
              if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                uint64_t v155 = "HP_Device.cpp";
                __int16 v156 = 1024;
                int v157 = 770;
                _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyManufacturer\"", buf, 0x12u);
              }
              uint64_t v103 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v103 = &off_6414D8;
              v103[2] = 561211770;
            }
            uint64_t v18 = (*(uint64_t (**)(int *))(*(void *)a1 + 128))(a1);
            break;
          default:
            goto LABEL_127;
        }
      }
      else if (v10 > 1836411235)
      {
        if (v10 != 1836411236)
        {
          if (v10 == 1869180523)
          {
            int v27 = *a5;
            if (v27 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
            {
              uint64_t v107 = (os_log_t *)sub_32A48(13);
              uint64_t v108 = *v107;
              if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                uint64_t v155 = "HP_Device.cpp";
                __int16 v156 = 1024;
                int v157 = 863;
                _os_log_impl(&def_1E50E8, v108, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyHogMode\"", buf, 0x12u);
              }
              int v109 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v109 = &off_6414D8;
              v109[2] = 561211770;
            }
            pid_t v13 = dword_6489A8;
            if (dword_6489A8 == -1)
            {
              pid_t v13 = getpid();
              dword_6489A8 = v13;
            }
            goto LABEL_120;
          }
          goto LABEL_127;
        }
        int v48 = *a5;
        if (v48 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          uint64_t v122 = (os_log_t *)sub_32A48(13);
          int v123 = *v122;
          if (*v122 && os_log_type_enabled(*v122, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 800;
            _os_log_impl(&def_1E50E8, v123, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyModelUID\"", buf, 0x12u);
          }
          int v124 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v124 = &off_6414D8;
          v124[2] = 561211770;
        }
        uint64_t v18 = (*(uint64_t (**)(int *))(*(void *)a1 + 184))(a1);
      }
      else
      {
        if (v10 != 1819173229)
        {
          if (v10 == 1819569763)
          {
            int v16 = *a5;
            if (v16 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
            {
              unsigned int v89 = (os_log_t *)sub_32A48(13);
              uint64_t v90 = *v89;
              if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                uint64_t v155 = "HP_Device.cpp";
                __int16 v156 = 1024;
                int v157 = 868;
                _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyLatency\"", buf, 0x12u);
              }
              unsigned int v91 = __cxa_allocate_exception(0x10uLL);
              *(void *)unsigned int v91 = &off_6414D8;
              v91[2] = 561211770;
            }
            pid_t v13 = (*(uint64_t (**)(int *, BOOL))(*(void *)a1 + 440))(a1, v11 == 1768845428);
            goto LABEL_120;
          }
          goto LABEL_127;
        }
        int v43 = *a5;
        if (v43 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          uint64_t v119 = (os_log_t *)sub_32A48(13);
          uint64_t v120 = *v119;
          if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 765;
            _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyName\"", buf, 0x12u);
          }
          char v121 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v121 = &off_6414D8;
          v121[2] = 561211770;
        }
        uint64_t v18 = (*(uint64_t (**)(int *))(*(void *)a1 + 120))(a1);
      }
      goto LABEL_125;
    }
    if (v10 > 1937009954)
    {
      if (v10 <= 1953653101)
      {
        if (v10 == 1937009955)
        {
          if (v11 == 1735159650)
          {
            *(_WORD *)AudioObjectPropertyAddress buf = 256;
            __int16 v51 = operator new(2uLL);
            *__int16 v51 = 256;
            __int16 v52 = v51 + 1;
            LODWORD(v53) = ((*((void *)a1 + 66) - *((void *)a1 + 65)) >> 3)
                         + ((*((void *)a1 + 63) - *((void *)a1 + 62)) >> 3);
          }
          else
          {
            LOBYTE(__p[0]) = v11 != 1768845428;
            __int16 v51 = operator new(1uLL);
            *(unsigned char *)__int16 v51 = v11 != 1768845428;
            __int16 v52 = (char *)v51 + 1;
            uint64_t v62 = 132;
            if (v11 == 1768845428) {
              uint64_t v62 = 126;
            }
            uint64_t v63 = 130;
            if (v11 == 1768845428) {
              uint64_t v63 = 124;
            }
            unint64_t v53 = (*(void *)&a1[v62] - *(void *)&a1[v63]) >> 3;
          }
          LODWORD(v64) = 0;
          unsigned int v65 = *a5 >> 2;
          if (v53 >= v65) {
            unint64_t v53 = v65;
          }
          else {
            unint64_t v53 = v53;
          }
          unsigned int v66 = v51;
          do
          {
            if (*v66) {
              uint64_t v67 = 132;
            }
            else {
              uint64_t v67 = 126;
            }
            if (*v66) {
              uint64_t v68 = 130;
            }
            else {
              uint64_t v68 = 124;
            }
            uint64_t v69 = *(void *)&a1[v67];
            uint64_t v70 = *(void *)&a1[v68];
            unint64_t v71 = v69 - v70;
            if ((v71 & 0x7FFFFFFF8) != 0 && v64 < v53)
            {
              unint64_t v73 = 0;
              unint64_t v74 = (v71 >> 3);
              uint64_t v75 = v64;
              unsigned int v76 = &a6[4 * v64];
              do
              {
                *(_DWORD *)&v76[4 * v73] = *(_DWORD *)(*(void *)(v70 + 8 * v73) + 8);
                ++v73;
                unint64_t v64 = v75 + v73;
              }
              while (v73 < v74 && v64 < v53);
            }
            ++v66;
          }
          while (v66 != v52);
          *a5 = 4 * v53;
          operator delete(v51);
          return;
        }
        if (v10 == 1937077093)
        {
          int v19 = *a5;
          if (v19 == (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2)) {
            operator new[]();
          }
          unsigned int v95 = (os_log_t *)sub_32A48(13);
          unsigned int v96 = *v95;
          if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 933;
            _os_log_impl(&def_1E50E8, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyIOProcStreamUsage\"", buf, 0x12u);
          }
          unsigned int v97 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v97 = &off_6414D8;
          v97[2] = 561211770;
        }
        goto LABEL_127;
      }
      if (v10 == 1953653102)
      {
        int v57 = *a5;
        if (v57 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          int v140 = (os_log_t *)sub_32A48(13);
          int v141 = *v140;
          if (*v140 && os_log_type_enabled(*v140, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 805;
            _os_log_impl(&def_1E50E8, v141, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyTransportType\"", buf, 0x12u);
          }
          unsigned int v142 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v142 = &off_6414D8;
          v142[2] = 561211770;
        }
        pid_t v13 = (*(uint64_t (**)(int *))(*(void *)a1 + 192))(a1);
        goto LABEL_120;
      }
      if (v10 != 1969841184) {
        goto LABEL_127;
      }
      int v38 = *a5;
      if (v38 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
      {
        uint64_t v116 = (os_log_t *)sub_32A48(13);
        char v117 = *v116;
        if (*v116 && os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v155 = "HP_Device.cpp";
          __int16 v156 = 1024;
          int v157 = 795;
          _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceUID\"", buf, 0x12u);
        }
        uint64_t v118 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v118 = &off_6414D8;
        v118[2] = 561211770;
      }
      uint64_t v18 = (*(uint64_t (**)(int *))(*(void *)a1 + 176))(a1);
      goto LABEL_125;
    }
    if (v10 > 1936092275)
    {
      if (v10 == 1936092276)
      {
        int v55 = *a5;
        if (v55 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          unsigned int v134 = (os_log_t *)sub_32A48(13);
          int v135 = *v134;
          if (*v134 && os_log_type_enabled(*v134, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 853;
            _os_log_impl(&def_1E50E8, v135, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice\"", buf, 0x12u);
          }
          unsigned int v136 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v136 = &off_6414D8;
          v136[2] = 561211770;
        }
        pid_t v13 = (*(uint64_t (**)(int *, BOOL, uint64_t))(*(void *)a1 + 208))(a1, v11 == 1768845428, 1);
        goto LABEL_120;
      }
      if (v10 == 1936482681)
      {
        unsigned int v29 = (*(uint64_t (**)(int *, int *))(*(void *)a1 + 48))(a1, a2);
        if (*a5 < v29)
        {
          CFTypeRef v110 = (os_log_t *)sub_32A48(13);
          uint64_t v111 = *v110;
          if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 916;
            _os_log_impl(&def_1E50E8, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyStreamConfiguration\"", buf, 0x12u);
          }
          uint64_t v112 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v112 = &off_6414D8;
          v112[2] = 561211770;
        }
        *a5 = v29;
        uint64_t v30 = 132;
        if (v11 == 1768845428) {
          uint64_t v30 = 126;
        }
        uint64_t v31 = *(void *)&a1[v30];
        if (v11 == 1768845428) {
          uint64_t v32 = 124;
        }
        else {
          uint64_t v32 = 130;
        }
        unint64_t v33 = (unint64_t)(v31 - *(void *)&a1[v32]) >> 3;
        *(_DWORD *)a6 = v33;
        if (v33)
        {
          unint64_t v34 = 0;
          __int16 v35 = a6 + 16;
          do
          {
            unsigned int v36 = *(_DWORD **)(*(void *)(*(void *)&a1[v32] + 8 * v34) + 104);
            *((_DWORD *)v35 - 2) = v36[11];
            *((_DWORD *)v35 - 1) = sub_1E7DD4(v36, a1[122]);
            void *v35 = 0;
            v35 += 2;
            ++v34;
          }
          while (v34 < *(unsigned int *)a6);
        }
        return;
      }
      goto LABEL_127;
    }
    if (v10 != 1870030194)
    {
      if (v10 == 1935763060)
      {
        int v14 = *a5;
        if (v14 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          unsigned int v83 = (os_log_t *)sub_32A48(13);
          uint64_t v84 = *v83;
          if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 909;
            _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertySafetyOffset\"", buf, 0x12u);
          }
          unsigned int v85 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v85 = &off_6414D8;
          v85[2] = 561211770;
        }
        pid_t v13 = (*(uint64_t (**)(int *, BOOL))(*(void *)a1 + 448))(a1, v11 == 1768845428);
        goto LABEL_120;
      }
      goto LABEL_127;
    }
    int v50 = *a5;
    if (v50 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
    {
      uint64_t v128 = (os_log_t *)sub_32A48(13);
      uint64_t v129 = *v128;
      if (*v128 && os_log_type_enabled(*v128, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v155 = "HP_Device.cpp";
        __int16 v156 = 1024;
        int v157 = 858;
        _os_log_impl(&def_1E50E8, v129, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDeviceProcessorOverload\"", buf, 0x12u);
      }
      uint64_t v130 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v130 = &off_6414D8;
      v130[2] = 561211770;
    }
LABEL_105:
    *(_DWORD *)a6 = 0;
    return;
  }
  if (v10 <= 1718843938)
  {
    if (v10 <= 1668049763)
    {
      if (v10 == 1634429294)
      {
        size_t v60 = *a5;
        if (v60 < 4)
        {
          bzero(a6, v60);
          *a5 = 0;
        }
        else
        {
          *(_DWORD *)a6 = a1[2];
          *a5 = 4;
        }
        return;
      }
      if (v10 == 1634955892)
      {
        int v58 = *a5;
        if (v58 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          int v143 = (os_log_t *)sub_32A48(13);
          uint64_t v144 = *v143;
          if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 961;
            _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyActualSampleRate\"", buf, 0x12u);
          }
          int v145 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v145 = &off_6414D8;
          v145[2] = 561211770;
        }
        *(double *)a6 = (*(double (**)(int *))(*(void *)a1 + 640))(a1);
        return;
      }
      if (v10 != 1667330160) {
        goto LABEL_127;
      }
      int v20 = *a5;
      if (v20 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
      {
        uint64_t v98 = (os_log_t *)sub_32A48(13);
        uint64_t v99 = *v98;
        if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v155 = "HP_Device.cpp";
          __int16 v156 = 1024;
          int v157 = 790;
          _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyConfigurationApplication\"", buf, 0x12u);
        }
        double v100 = __cxa_allocate_exception(0x10uLL);
        *(void *)double v100 = &off_6414D8;
        v100[2] = 561211770;
      }
      uint64_t v18 = (*(uint64_t (**)(int *))(*(void *)a1 + 168))(a1);
      goto LABEL_125;
    }
    if (v10 > 1684629093)
    {
      if (v10 != 1684629094)
      {
        if (v10 == 1718839674)
        {
          int v22 = *a5;
          if (v22 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
          {
            char v104 = (os_log_t *)sub_32A48(13);
            uint64_t v105 = *v104;
            if (*v104 && os_log_type_enabled(*v104, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v155 = "HP_Device.cpp";
              __int16 v156 = 1024;
              int v157 = 873;
              _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyBufferFrameSize\"", buf, 0x12u);
            }
            uint64_t v106 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v106 = &off_6414D8;
            v106[2] = 561211770;
          }
          *(_DWORD *)a6 = a1[122];
          uint64_t v23 = sub_32A48(5);
          if (*(unsigned char *)(v23 + 8))
          {
            uint64_t v24 = *(NSObject **)v23;
            if (*(void *)v23)
            {
              if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
              {
                int v25 = *(_DWORD *)a6;
                (*(void (**)(void **__return_ptr, int *))(*(void *)a1 + 96))(__p, a1);
                unsigned int v26 = v153 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                uint64_t v155 = "HP_Device.cpp";
                __int16 v156 = 1024;
                int v157 = 875;
                __int16 v158 = 1024;
                int v159 = v25;
                __int16 v160 = 2080;
                UInt32 v161 = v26;
                _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client request to get buffer frame size (%u) on VAD: '%s'.", buf, 0x22u);
                if (v153 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          return;
        }
        goto LABEL_127;
      }
      int v44 = *a5;
      if (v44 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
      {
        CFNumberRef v45 = (os_log_t *)sub_32A48(13);
        char v46 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v155 = "HP_Device.cpp";
          __int16 v156 = 1024;
          int v157 = 833;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceHasChanged\"", buf, 0x12u);
        }
        char v47 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v47 = &off_6414D8;
        v47[2] = 561211770;
      }
    }
    else
    {
      if (v10 != 1668049764)
      {
        if (v10 == 1684434036)
        {
          int v15 = *a5;
          if (v15 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
          {
            unsigned int v86 = (os_log_t *)sub_32A48(13);
            char v87 = *v86;
            if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v155 = "HP_Device.cpp";
              __int16 v156 = 1024;
              int v157 = 848;
              _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceCanBeDefaultDevice\"", buf, 0x12u);
            }
            CFIndex v88 = __cxa_allocate_exception(0x10uLL);
            *(void *)CFIndex v88 = &off_6414D8;
            _OWORD v88[2] = 561211770;
          }
          pid_t v13 = (*(uint64_t (**)(int *, BOOL, void))(*(void *)a1 + 208))(a1, v11 == 1768845428, 0);
          goto LABEL_120;
        }
        goto LABEL_127;
      }
      int v39 = *a5;
      if (v39 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
      {
        BOOL v40 = (os_log_t *)sub_32A48(13);
        uint64_t v41 = *v40;
        if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v155 = "HP_Device.cpp";
          __int16 v156 = 1024;
          int v157 = 823;
          _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyClockDomain\"", buf, 0x12u);
        }
        int v42 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v42 = &off_6414D8;
        v42[2] = 561211770;
      }
    }
    goto LABEL_105;
  }
  if (v10 > 1751737453)
  {
    if (v10 > 1818452845)
    {
      if (v10 == 1818452846)
      {
        int v56 = *a5;
        if (v56 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          uint64_t v137 = (os_log_t *)sub_32A48(13);
          int v138 = *v137;
          if (*v137 && os_log_type_enabled(*v137, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 780;
            _os_log_impl(&def_1E50E8, v138, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyElementCategoryName\"", buf, 0x12u);
          }
          CFMutableDictionaryRef v139 = __cxa_allocate_exception(0x10uLL);
          *(void *)CFMutableDictionaryRef v139 = &off_6414D8;
          v139[2] = 561211770;
        }
        uint64_t v18 = (*(uint64_t (**)(int *, int *))(*(void *)a1 + 152))(a1, a2);
      }
      else
      {
        if (v10 != 1818454126) {
          goto LABEL_127;
        }
        int v37 = *a5;
        if (v37 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          long long v113 = (os_log_t *)sub_32A48(13);
          int v114 = *v113;
          if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 775;
            _os_log_impl(&def_1E50E8, v114, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyElementName\"", buf, 0x12u);
          }
          uint64_t v115 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v115 = &off_6414D8;
          v115[2] = 561211770;
        }
        uint64_t v18 = (*(uint64_t (**)(int *, int *))(*(void *)a1 + 144))(a1, a2);
      }
    }
    else
    {
      if (v10 == 1751737454)
      {
LABEL_66:
        int v28 = *a5;
        if (v28 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
        {
          unsigned int v77 = (os_log_t *)sub_32A48(13);
          int v78 = *v77;
          if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 977;
            _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyIsHidden\"", buf, 0x12u);
          }
          uint64_t v79 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v79 = &off_6414D8;
          v79[2] = 561211770;
        }
        pid_t v13 = (*(uint64_t (**)(int *))(*(void *)a1 + 112))(a1);
        goto LABEL_120;
      }
      if (v10 != 1768124270)
      {
LABEL_127:
        sub_3A66B8((uint64_t)a1, a2, a3, a4, a5, (uint64_t)a6);
        return;
      }
      int v17 = *a5;
      if (v17 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
      {
        unsigned int v92 = (os_log_t *)sub_32A48(13);
        unsigned int v93 = *v92;
        if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v155 = "HP_Device.cpp";
          __int16 v156 = 1024;
          int v157 = 967;
          _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyIcon\"", buf, 0x12u);
        }
        unsigned int v94 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned int v94 = &off_6414D8;
        v94[2] = 561211770;
      }
      uint64_t v18 = (*(uint64_t (**)(int *))(*(void *)a1 + 136))(a1);
    }
LABEL_125:
    *(void *)a6 = v18;
    return;
  }
  if (v10 > 1735356004)
  {
    if (v10 == 1735356005)
    {
      int v54 = *a5;
      if (v54 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
      {
        UInt32 v131 = (os_log_t *)sub_32A48(13);
        int v132 = *v131;
        if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v155 = "HP_Device.cpp";
          __int16 v156 = 1024;
          int v157 = 843;
          _os_log_impl(&def_1E50E8, v132, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceIsRunningSomewhere\"", buf, 0x12u);
        }
        uint64_t v133 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v133 = &off_6414D8;
        v133[2] = 561211770;
      }
      pid_t v13 = (*(uint64_t (**)(int *))(*(void *)a1 + 520))(a1);
      goto LABEL_120;
    }
    if (v10 == 1751412337) {
      goto LABEL_66;
    }
    goto LABEL_127;
  }
  if (v10 != 1718843939)
  {
    if (v10 == 1735354734)
    {
      int v12 = *a5;
      if (v12 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
      {
        UInt32 v80 = (os_log_t *)sub_32A48(13);
        int v81 = *v80;
        if (*v80)
        {
          if (os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v155 = "HP_Device.cpp";
            __int16 v156 = 1024;
            int v157 = 838;
            _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceIsRunning\"", buf, 0x12u);
          }
        }
        CFTypeRef v82 = __cxa_allocate_exception(0x10uLL);
        *(void *)CFTypeRef v82 = &off_6414D8;
        v82[2] = 561211770;
      }
      pid_t v13 = (*(uint64_t (**)(int *))(*(void *)a1 + 512))(a1);
LABEL_120:
      *(_DWORD *)a6 = v13;
      return;
    }
    goto LABEL_127;
  }
  int v49 = *a5;
  if (v49 != (*(unsigned int (**)(int *, int *))(*(void *)a1 + 48))(a1, a2))
  {
    uint64_t v125 = (os_log_t *)sub_32A48(13);
    uint64_t v126 = *v125;
    if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v155 = "HP_Device.cpp";
      __int16 v156 = 1024;
      int v157 = 879;
      _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyBufferFrameSizeRange\"", buf, 0x12u);
    }
    int v127 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v127 = &off_6414D8;
    v127[2] = 561211770;
  }
  *(double *)a6 = (double)(*(unsigned int (**)(int *))(*(void *)a1 + 464))(a1);
  *((double *)a6 + 1) = (double)(*(unsigned int (**)(int *))(*(void *)a1 + 472))(a1);
}

BOOL sub_49828(uint64_t a1)
{
  sub_4C264(a1);
  if (!*(void *)(a1 + 416)) {
    return 0;
  }
  UInt32 ioDataSize = 4;
  unsigned int outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
  inAddress.mElement = 0;
  if (AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), &inAddress, 0, 0, &ioDataSize, &outData)) {
    return 0;
  }
  if (outData >= 2)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      pid_t v13 = "AggregateDevice_CommonBase.cpp";
      __int16 v14 = 1024;
      int v15 = 564;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a non-BOOLean value\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL returned a non-BOOLean value");
  }
  if (ioDataSize != 4)
  {
    unsigned int v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        pid_t v13 = "AggregateDevice_CommonBase.cpp";
        __int16 v14 = 1024;
        int v15 = 565;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned an oddly sized value\"", buf, 0x12u);
      }
    }
    pthread_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "The HAL returned an oddly sized value");
  }
  return outData == 1;
}

void sub_49A38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_49A58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 1008);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

void *sub_49A90(void *a1)
{
  *a1 = off_640A60;
  pthread_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

double sub_49AE0(uint64_t a1)
{
  if (!_os_feature_enabled_impl()) {
    goto LABEL_9;
  }
  sub_8BD08(&v8, a1);
  uint64_t v3 = v8;
  if (v8 && sub_8BFA8((unsigned __int8 *)v8))
  {
    double v1 = (*(double (**)(uint64_t))(*(void *)v3 + 104))(v3);
    int v4 = 0;
  }
  else
  {
    int v4 = 1;
  }
  if (v9) {
    sub_4636C(v9);
  }
  if (v4)
  {
LABEL_9:
    double v7 = 0.0;
    int v6 = 8;
    uint64_t v8 = 0x676C6F626E737274;
    LODWORD(v9) = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a1 + 40))(a1, &v8, 0, 0, &v6, &v7);
    return v7;
  }
  return v1;
}

void sub_49BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_49C08(AudioObjectID *a1, uint64_t a2, uint64_t a3, __CFString *a4, int *a5, int *a6)
{
  sub_4C264((uint64_t)a1);
  if (((*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 16))(a1, a2) & 1) == 0)
  {
    __int16 v52 = (os_log_t *)sub_32A48(13);
    unint64_t v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      unint64_t v74 = *(void **)a2;
      int v75 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v74);
      int v54 = v78 >= 0 ? &__p : (long long *)__p;
      buf[0] = 136315650;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1350;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v54;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)buf, 0x1Cu);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v56 = (os_log_t *)sub_32A48(13);
    int v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      unint64_t v74 = *(void **)a2;
      int v75 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v74);
      int v58 = v78 >= 0 ? &__p : (long long *)__p;
      buf[0] = 136316162;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1351;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v58;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = a3;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = a4;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }
    int v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v59 = &off_6414D8;
    v59[2] = 561211770;
  }
  if (!a6)
  {
    size_t v60 = (os_log_t *)sub_32A48(13);
    int v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      unint64_t v74 = *(void **)a2;
      int v75 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v74);
      uint64_t v62 = v78 >= 0 ? &__p : (long long *)__p;
      buf[0] = 136315906;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1352;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "outData";
      __int16 v80 = 2080;
      *(void *)int v81 = v62;
      _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)buf, 0x26u);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }
    uint64_t v63 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v63 = &off_6414D8;
    v63[2] = 561211770;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1718843938)
  {
    if (v12 <= 1651798897)
    {
      if (v12 > 1634890858)
      {
        if (v12 > 1635152992)
        {
          if ((v12 - 1635152993) <= 0xE && ((1 << (v12 - 97)) & 0x4015) != 0)
          {
LABEL_130:
            sub_B680((uint64_t *)buf, (void *)a1 + 23, "", 1404);
            uint64_t v25 = *(void *)&buf[2];
            if (*(_DWORD **)&buf[2] != buf)
            {
              while (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v25 + 16) + 16))(*(void *)(v25 + 16), a2))
              {
                uint64_t v25 = *(void *)(v25 + 8);
                if ((_DWORD *)v25 == buf) {
                  goto LABEL_135;
                }
              }
              (*(void (**)(void, uint64_t, uint64_t, __CFString *, int *, int *))(**(void **)(v25 + 16)
                                                                                           + 40))(*(void *)(v25 + 16), a2, a3, a4, a5, a6);
            }
            goto LABEL_135;
          }
          if (v12 == 1650881394)
          {
            sub_9AEB0((uint64_t)a1, 1650881394, *(_DWORD *)(a2 + 4), a6);
            goto LABEL_137;
          }
          int v13 = 1651664739;
          goto LABEL_129;
        }
        if (v12 != 1634890859)
        {
          if (v12 == 1635020147)
          {
            sub_B680((uint64_t *)buf, (void *)a1 + 23, "", 1527);
            int v23 = sub_329BE0((uint64_t)buf);
            sub_9EC7C(v23, a5, a6);
LABEL_135:
            p_p = (uint64_t *)buf;
LABEL_136:
            sub_B8E4(p_p);
            goto LABEL_137;
          }
          goto LABEL_182;
        }
      }
      else if (v12 <= 1633907569)
      {
        if (v12 > 1633903464)
        {
          if (v12 == 1633903465)
          {
            if ((_os_feature_enabled_impl() & 1) == 0)
            {
              uint64_t v67 = (os_log_t *)sub_32A48(13);
              uint64_t v68 = *v67;
              if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
              {
                buf[0] = 136315394;
                *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 1621;
                _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
              }
              uint64_t v69 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v69, "Precondition failure.");
            }
            sub_A185C((CFDictionaryRef *)buf, (uint64_t)a1);
            uint64_t v41 = *(void *)buf;
            *(void *)AudioObjectPropertyAddress buf = 0;
            *(void *)a6 = v41;
            sub_60394((const void **)buf);
            goto LABEL_137;
          }
          int v21 = 1633904999;
        }
        else
        {
          if (v12 == 1165513555) {
            goto LABEL_130;
          }
          int v21 = 1633776747;
        }
        if (v12 != v21) {
          goto LABEL_182;
        }
      }
      else
      {
        if (v12 > 1633973867)
        {
          if (v12 == 1633973868) {
            goto LABEL_130;
          }
          if (v12 == 1634169456)
          {
            sub_99FEC(a1, (_DWORD *)a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
            goto LABEL_137;
          }
          int v13 = 1634692199;
          goto LABEL_129;
        }
        if (v12 != 1633907570)
        {
          int v22 = 1633970532;
LABEL_120:
          if (v12 == v22)
          {
            uint64_t v24 = (os_log_t *)sub_32A48(16);
            int v17 = *v24;
            if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1588;
              uint64_t v18 = "%25s:%-5d GetPropertyData() is not applicable to AddReporterID or RemoveReporterID";
              goto LABEL_124;
            }
            goto LABEL_137;
          }
LABEL_182:
          sub_4B258(a1[32], (const AudioObjectPropertyAddress *)a2, a3, a4, (UInt32 *)a5, a6);
          goto LABEL_137;
        }
      }
      if ((_os_feature_enabled_impl() & 1) == 0)
      {
        unint64_t v64 = (os_log_t *)sub_32A48(13);
        unsigned int v65 = *v64;
        if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1632;
          _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }
        unsigned int v66 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v66, "Precondition failure.");
      }
LABEL_126:
      *a5 = 0;
      goto LABEL_137;
    }
    if (v12 > 1684500588)
    {
      if (v12 <= 1685287522)
      {
        if (v12 > 1685087595)
        {
          if (v12 == 1685087596) {
            goto LABEL_130;
          }
          if (v12 == 1685287011)
          {
            sub_9F548((uint64_t)a1, 1685287011, *(_DWORD *)(a2 + 4), a4, a6);
            goto LABEL_137;
          }
        }
        else
        {
          if (v12 == 1684500589)
          {
            sub_A014C((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, (unsigned int *)a4, (UInt32 *)a5, (float *)a6);
            goto LABEL_137;
          }
          if (v12 == 1684500594)
          {
            sub_A0644((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4, (UInt32 *)a5, a6);
            goto LABEL_137;
          }
        }
        goto LABEL_182;
      }
      if (v12 > 1685483629)
      {
        if (v12 == 1685483630)
        {
          int v39 = (os_log_t *)sub_32A48(16);
          BOOL v40 = *v39;
          if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1457;
            _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kAudioDevicePropertyVoiceProcessingIsEnabled is a write-only property", (uint8_t *)buf, 0x12u);
          }
          goto LABEL_126;
        }
        if (v12 == 1718383987) {
          goto LABEL_130;
        }
        if (v12 != 1718839674) {
          goto LABEL_182;
        }
LABEL_152:
        sub_9EE2C((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4, (UInt32 *)a5, a6);
        goto LABEL_137;
      }
      if (v12 == 1685287523) {
        goto LABEL_130;
      }
      int v13 = 1685288051;
      goto LABEL_129;
    }
    if (v12 > 1684365923)
    {
      if (v12 > 1684498540)
      {
        if (v12 == 1684498541)
        {
          sub_A096C(a1, (uint64_t *)a2, a3, (unsigned int *)a4, a5, a6);
          goto LABEL_137;
        }
        if (v12 == 1684498544)
        {
          sub_A0E10(a1, (uint64_t *)a2, a3, (unsigned int *)a4, a5, a6);
          goto LABEL_137;
        }
        goto LABEL_182;
      }
      if (v12 == 1684365924) {
        goto LABEL_130;
      }
      int v13 = 1684370276;
      goto LABEL_129;
    }
    if (v12 > 1684103986)
    {
      if (v12 == 1684103987)
      {
        sub_9A374((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
        goto LABEL_137;
      }
      int v13 = 1684304756;
      goto LABEL_129;
    }
    if (v12 == 1651798898)
    {
      sub_B680((uint64_t *)&__p, (void *)a1 + 23, "", 1421);
      uint64_t v42 = *((void *)&__p + 1);
      if (*((long long **)&__p + 1) != &__p)
      {
        while (1)
        {
          uint64_t v43 = *(void *)(v42 + 16);
          buf[0] = 1651798132;
          *(void *)&buf[1] = *(void *)(a2 + 4);
          if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)v43 + 16))(v43, buf)) {
            break;
          }
          uint64_t v42 = *(void *)(v42 + 8);
          if ((long long *)v42 == &__p) {
            goto LABEL_191;
          }
        }
        int v48 = (os_log_t *)sub_32A48(16);
        int v49 = *v48;
        if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT))
        {
          sub_4F64((uint64_t)&v74, (os_unfair_lock_t)(*(void *)(v42 + 16) + 8));
          int v50 = v76 >= 0 ? &v74 : (void **)v74;
          buf[0] = 136315650;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1426;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v50;
          _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting property kAudioDeviceProperty[Accessory]NominalSampleRate from device %s", (uint8_t *)buf, 0x1Cu);
          if (v76 < 0) {
            operator delete(v74);
          }
        }
        uint64_t v51 = *(void *)(v42 + 16);
        buf[0] = 1853059700;
        *(void *)&buf[1] = *(void *)(a2 + 4);
        (*(void (**)(uint64_t, _DWORD *, uint64_t, __CFString *, int *, int *))(*(void *)v51 + 40))(v51, buf, a3, a4, a5, a6);
      }
LABEL_191:
      p_p = (uint64_t *)&__p;
      goto LABEL_136;
    }
    if (v12 != 1668047203) {
      goto LABEL_182;
    }
    unsigned int v19 = *((unsigned __int8 *)a1 + 448);
LABEL_154:
    *a6 = v19;
    goto LABEL_137;
  }
  if (v12 <= 1935962991)
  {
    if (v12 > 1885631345)
    {
      if (v12 <= 1902539641)
      {
        if (v12 > 1886413425)
        {
          if (v12 == 1886413426)
          {
            sub_9B518((uint64_t)a1, (unsigned int *)a2, a3, (uint64_t)a4, (CFDictionaryRef *)a6);
            goto LABEL_137;
          }
          int v13 = 1886807154;
          goto LABEL_129;
        }
        if (v12 == 1885631346) {
          goto LABEL_130;
        }
        if (v12 == 1886413412)
        {
          if (*(_DWORD *)(a2 + 4) != 1869968496) {
            return;
          }
          sub_B680((uint64_t *)buf, (void *)a1 + 23, "", 1477);
          *(void *)&long long __p = 0x6F75747050504277;
          DWORD2(__p) = 0;
          uint64_t v20 = *(void *)&buf[2];
          int v73 = 0;
          uint64_t v72 = 0x6F75747050504277;
          if (*(_DWORD **)&buf[2] != buf)
          {
            while (((*(uint64_t (**)(void, uint64_t *))(**(void **)(v20 + 16) + 16))(*(void *)(v20 + 16), &v72) & 1) == 0)
            {
              uint64_t v20 = *(void *)(v20 + 8);
              if ((_DWORD *)v20 == buf) {
                goto LABEL_135;
              }
            }
            if ((_DWORD *)v20 != buf) {
              (*(void (**)(void, long long *, uint64_t, __CFString *, int *, int *))(**(void **)(v20 + 16)
            }
                                                                                              + 40))(*(void *)(v20 + 16), &__p, a3, a4, a5, a6);
          }
          goto LABEL_135;
        }
        goto LABEL_182;
      }
      if (v12 <= 1934456179)
      {
        if (v12 != 1902539642)
        {
          int v22 = 1919773028;
          goto LABEL_120;
        }
        goto LABEL_152;
      }
      if (v12 == 1934456180) {
        goto LABEL_130;
      }
      int v13 = 1935762281;
    }
    else
    {
      if (v12 > 1819569762)
      {
        if (v12 <= 1869575793)
        {
          if (v12 == 1819569763)
          {
            sub_99B14(a1, (const AudioObjectPropertyAddress *)a2, a3, (uint64_t)a4, a5, a6);
            goto LABEL_137;
          }
          if (v12 == 1869574756)
          {
            sub_9E0C8((uint64_t)a1, 1869574756, *(_DWORD *)(a2 + 4), a5, (uint64_t)a6);
            goto LABEL_137;
          }
          goto LABEL_182;
        }
        if (v12 == 1869575794)
        {
          sub_9E5B8((uint64_t)a1, 1869575794, *(_DWORD *)(a2 + 4), a5, a6);
          goto LABEL_137;
        }
        int v13 = 1885434482;
        goto LABEL_129;
      }
      if (v12 <= 1752657011)
      {
        if (v12 == 1718843939)
        {
          sub_9F1BC((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4, (UInt32 *)a5, (double *)a6);
          goto LABEL_137;
        }
        if (v12 != 1735682404) {
          goto LABEL_182;
        }
        memset(buf, 0, 24);
        sub_4CAB0(buf, *((const void **)a1 + 18), *((void *)a1 + 19), (uint64_t)(*((void *)a1 + 19) - *((void *)a1 + 18)) >> 3);
        __int16 v14 = *(void **)buf;
        sub_A12B4(*(unsigned char **)buf, *(unsigned char **)&buf[2], a5, a6);
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_137;
      }
      if (v12 == 1752657012)
      {
        LODWORD(__p) = 1819569763;
        *(void *)((char *)&__p + 4) = *(void *)(a2 + 4);
        OSStatus PropertyData = AudioObjectGetPropertyData(a1[32], (const AudioObjectPropertyAddress *)&__p, a3, a4, (UInt32 *)a5, a6);
        if (PropertyData)
        {
          CFNumberRef v45 = (os_log_t *)sub_32A48(13);
          char v46 = *v45;
          if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1438;
            _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error reading device latency from the HAL.\"", (uint8_t *)buf, 0x12u);
          }
          char v47 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v47 = &off_6414D8;
          v47[2] = PropertyData;
        }
        goto LABEL_137;
      }
      int v13 = 1818326127;
    }
LABEL_129:
    if (v12 == v13) {
      goto LABEL_130;
    }
    goto LABEL_182;
  }
  if (v12 > 1952998001)
  {
    if (v12 <= 1969844081)
    {
      if (v12 <= 1953002353)
      {
        if (v12 == 1952998002)
        {
          sub_9BFEC((uint64_t)a1, 1952998002, *(_DWORD *)(a2 + 4), a3, (int *)a4, a5, (CFDictionaryRef *)a6);
          goto LABEL_137;
        }
        int v13 = 1953002093;
        goto LABEL_129;
      }
      if (v12 == 1953002354) {
        goto LABEL_130;
      }
      if (v12 == 1953719148)
      {
        sub_9B068((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (uint64_t)a5, (float *)a6);
        goto LABEL_137;
      }
      goto LABEL_182;
    }
    if (v12 <= 1986225267)
    {
      if (v12 == 1969844082)
      {
        sub_9E88C(a1, 1969844082, *(_DWORD *)(a2 + 4), a5, a6);
        goto LABEL_137;
      }
      int v13 = 1986225266;
      goto LABEL_129;
    }
    if (v12 == 1986225268) {
      goto LABEL_130;
    }
    if (v12 != 1986361444)
    {
      int v13 = 2004053366;
      goto LABEL_129;
    }
    unsigned int v19 = (*(float (**)(AudioObjectID *, uint64_t, uint64_t, void))(*(void *)a1 + 360))(a1, 1818521197, 40, 0);
    goto LABEL_154;
  }
  if (v12 > 1936879203)
  {
    if (v12 <= 1937204589)
    {
      if (v12 == 1936879204)
      {
        sub_9A968((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (unsigned int *)a5, a6);
        goto LABEL_137;
      }
      int v13 = 1937138532;
      goto LABEL_129;
    }
    if (v12 == 1937204590) {
      goto LABEL_130;
    }
    if (v12 == 1952997988)
    {
      sub_9B98C((uint64_t)a1, (unsigned int *)a2, a3, (int *)a4, a5, (CFDictionaryRef *)a6);
      goto LABEL_137;
    }
    goto LABEL_182;
  }
  if (v12 > 1936876402)
  {
    if (v12 == 1936876403) {
      goto LABEL_130;
    }
    if (v12 == 1936876644)
    {
      sub_9A5A4((uint64_t)a1, (_DWORD *)a2, a3, (uint64_t)a4, (unsigned int *)a5, (uint64_t)a6);
      goto LABEL_137;
    }
    goto LABEL_182;
  }
  if (v12 == 1935962992)
  {
    sub_9FE44((uint64_t)a1, a5, (CFDictionaryRef *)a6);
    goto LABEL_137;
  }
  if (v12 != 1936744803) {
    goto LABEL_182;
  }
  *a6 = 0;
  LODWORD(__p) = 0;
  LODWORD(v74) = 0;
  int v70 = 4;
  int v71 = 4;
  if (!sub_A14E4(*((void *)a1 + 68), *((void *)a1 + 69), 21, (uint64_t)&v74, (uint64_t)&v70))
  {
    *a6 = v74 == 0;
    int v15 = sub_A14E4(*((void *)a1 + 68), *((void *)a1 + 69), 64004, (uint64_t)&__p, (uint64_t)&v71);
    if (!(v15 | __p))
    {
      int v16 = (os_log_t *)sub_32A48(16);
      int v17 = *v16;
      if (*v16)
      {
        if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1609;
          uint64_t v18 = "%25s:%-5d Closed loop speaker protection not present. Defaulting to open loop protection.";
LABEL_124:
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)buf, 0x12u);
        }
      }
    }
  }
LABEL_137:
  if (*(_DWORD *)a2 == 1853059700)
  {
    uint64_t v27 = sub_32A48(16);
    uint64_t v28 = sub_32A48(36);
    char v29 = 0;
    uint64_t v30 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = (int)buf[v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1;
      if (v33) {
        goto LABEL_144;
      }
    }
    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_144:
    unint64_t v34 = *(NSObject **)v27;
    if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *(void *)a6;
      sub_2417C(&__p, *(_DWORD *)(a2 + 4));
      if (v78 >= 0) {
        unsigned int v36 = &__p;
      }
      else {
        unsigned int v36 = (long long *)__p;
      }
      int v37 = *(_DWORD *)(a2 + 4);
      int v38 = *(_DWORD *)(a2 + 8);
      buf[0] = 136316418;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1646;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v35;
      __int16 v80 = 2080;
      *(void *)int v81 = v36;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v37;
      __int16 v82 = 1024;
      int v83 = v38;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get sample rate value of %f from AggregateDevice_Common2 (selector: kAudioDevicePropertyNominalSampleRate; scope: '%s' (%u); element: %u).",
        (uint8_t *)buf,
        0x32u);
      if (v78 < 0) {
        operator delete((void *)__p);
      }
    }
  }
}

void sub_4B1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4B258(AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, void *a6)
{
  uint64_t result = AudioObjectGetPropertyData(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    p_AudioObjectPropertySelector mSelector = &a2->mSelector;
    unsigned int v18 = result;
    uint64_t v8 = (os_log_t *)sub_32A48(16);
    BOOL v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v21, *p_mSelector);
      int v10 = v22;
      int v11 = (void **)v21[0];
      sub_2417C(__p, v18);
      int v12 = v21;
      if (v10 < 0) {
        int v12 = v11;
      }
      if (v20 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v24 = "AggregateDevice_CommonBase.cpp";
      __int16 v25 = 1024;
      int v26 = 3408;
      __int16 v27 = 2080;
      uint64_t v28 = v12;
      __int16 v29 = 2080;
      uint64_t v30 = v13;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyData() for selector '%s' returned status '%s'.", buf, 0x26u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }
    __int16 v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v24 = "AggregateDevice_CommonBase.cpp";
        __int16 v25 = 1024;
        int v26 = 3409;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to obtain property data.\"", buf, 0x12u);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v18;
  }
  return result;
}

void sub_4B460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B484(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  sub_4C264(a1);
  uint64_t v4 = 0;
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1718843938)
  {
    if (mSelector <= 1668576113)
    {
      if (mSelector <= 1634955891)
      {
        if (mSelector <= 1633970531)
        {
          if (mSelector <= 1633904998)
          {
            if (mSelector != 1165513555)
            {
              if (mSelector != 1633776747)
              {
                unsigned __int16 v6 = 25449;
LABEL_110:
                int v17 = v6 | 0x61630000;
                goto LABEL_120;
              }
LABEL_121:
              if ((_os_feature_enabled_impl() & 1) == 0)
              {
                uint64_t v31 = (os_log_t *)sub_32A48(13);
                uint64_t v32 = *v31;
                if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)unint64_t v34 = 136315394;
                  *(void *)&v34[4] = "AggregateDevice_CommonBase.cpp";
                  *(_WORD *)&v34[12] = 1024;
                  *(_DWORD *)&v34[14] = 942;
                  _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v34, 0x12u);
                }
                exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "Precondition failure.");
              }
              sub_8BD08(v34, a1);
              uint64_t v4 = *(void *)v34 != 0;
              if (*(void *)&v34[8]) {
                sub_4636C(*(std::__shared_weak_count **)&v34[8]);
              }
              return v4;
            }
            goto LABEL_151;
          }
          if (mSelector == 1633904999) {
            goto LABEL_121;
          }
          if (mSelector != 1633906541)
          {
            unsigned __int16 v6 = 29554;
            goto LABEL_110;
          }
          goto LABEL_132;
        }
        if (mSelector <= 1634692198)
        {
          if (mSelector == 1633970532) {
            return 1;
          }
          if (mSelector != 1633973868)
          {
            int v13 = 1634169456;
            goto LABEL_102;
          }
LABEL_151:
          sub_B680((uint64_t *)v34, (void *)(a1 + 184), "", 769);
          uint64_t v24 = *(void *)&v34[8];
          if (*(unsigned char **)&v34[8] == v34)
          {
            uint64_t v4 = 0;
          }
          else
          {
            do
            {
              uint64_t v4 = (*(uint64_t (**)(void, AudioObjectPropertyAddress *))(**(void **)(v24 + 16) + 16))(*(void *)(v24 + 16), a2);
              if (v4) {
                break;
              }
              uint64_t v24 = *(void *)(v24 + 8);
            }
            while ((unsigned char *)v24 != v34);
          }
          goto LABEL_156;
        }
        if (mSelector == 1634692199) {
          goto LABEL_151;
        }
        if (mSelector != 1634755428)
        {
          int v17 = 1634890859;
LABEL_120:
          if (mSelector == v17) {
            goto LABEL_121;
          }
          return v4;
        }
LABEL_132:
        int HasProperty = AudioObjectHasProperty(*(_DWORD *)(a1 + 128), a2);
        return HasProperty != 0;
      }
      if (mSelector <= 1650881393)
      {
        if ((mSelector - 1635152993) <= 0xE && ((1 << (mSelector - 97)) & 0x4015) != 0) {
          goto LABEL_151;
        }
        if (mSelector == 1634955892) {
          goto LABEL_132;
        }
        if (mSelector != 1635020147) {
          return v4;
        }
        return a2->mScope == 1869968496;
      }
      if (mSelector > 1651798897)
      {
        if (mSelector != 1651798898)
        {
          if (mSelector == 1667658618) {
            goto LABEL_132;
          }
          int v13 = 1668047203;
          goto LABEL_102;
        }
        *(_DWORD *)unint64_t v34 = 1651798132;
        *(void *)&v34[4] = *(void *)&a2->mScope;
        return (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v34);
      }
      if (mSelector != 1650881394)
      {
        int v7 = 1651664739;
        goto LABEL_150;
      }
LABEL_142:
      AudioObjectPropertyScope mScope = a2->mScope;
      return mScope == 1869968496 || mScope == 1768845428;
    }
    if (mSelector > 1685087595)
    {
      if (mSelector <= 1685287011)
      {
        if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0) {
          goto LABEL_132;
        }
        if (mSelector == 1685087596) {
          goto LABEL_151;
        }
        int v13 = 1685287011;
        goto LABEL_102;
      }
      if (mSelector > 1685483629)
      {
        if (mSelector == 1685483630 || mSelector == 1718383987) {
          goto LABEL_151;
        }
        int v16 = 1718839674;
        goto LABEL_131;
      }
      if (mSelector == 1685287012) {
        goto LABEL_132;
      }
      if (mSelector == 1685287523) {
        goto LABEL_151;
      }
      int v7 = 1685288051;
    }
    else
    {
      if (mSelector > 1684370275)
      {
        if (mSelector <= 1684500588)
        {
          if (mSelector == 1684370276) {
            goto LABEL_151;
          }
          if (mSelector == 1684498541) {
            goto LABEL_142;
          }
          int v8 = 1684498544;
          goto LABEL_28;
        }
        if (mSelector == 1684500589 || mSelector == 1684500594) {
          goto LABEL_142;
        }
        int v16 = 1684893796;
        goto LABEL_131;
      }
      if (mSelector <= 1684107363)
      {
        if (mSelector == 1668576114) {
          goto LABEL_151;
        }
        int v7 = 1684103987;
      }
      else
      {
        if (mSelector == 1684107364) {
          goto LABEL_132;
        }
        if (mSelector == 1684304756) {
          goto LABEL_151;
        }
        int v7 = 1684365924;
      }
    }
LABEL_150:
    if (mSelector != v7) {
      return v4;
    }
    goto LABEL_151;
  }
  if (mSelector <= 1934456179)
  {
    if (mSelector <= 1869574755)
    {
      if (mSelector <= 1769302371)
      {
        if (mSelector > 1735682403)
        {
          if (mSelector == 1735682404) {
            return 1;
          }
          if (mSelector != 1752135523)
          {
            if (mSelector != 1752657012) {
              return v4;
            }
            *(_DWORD *)unint64_t v34 = 1819569763;
            *(void *)&v34[4] = *(void *)&a2->mScope;
            int HasProperty = AudioObjectHasProperty(*(_DWORD *)(a1 + 128), (const AudioObjectPropertyAddress *)v34);
            return HasProperty != 0;
          }
          goto LABEL_132;
        }
        if (mSelector == 1718843939) {
          goto LABEL_132;
        }
        int v16 = 1735354734;
      }
      else
      {
        if (mSelector <= 1852012898)
        {
          if (mSelector == 1769302372) {
            goto LABEL_132;
          }
          if (mSelector == 1818326127) {
            goto LABEL_151;
          }
          int v8 = 1819569763;
LABEL_28:
          if (mSelector != v8) {
            return v4;
          }
          goto LABEL_142;
        }
        if (mSelector == 1852012899 || mSelector == 1853059619) {
          goto LABEL_132;
        }
        int v16 = 1853059700;
      }
LABEL_131:
      if (mSelector != v16) {
        return v4;
      }
      goto LABEL_132;
    }
    if (mSelector > 1885631345)
    {
      if (mSelector > 1886807153)
      {
        if (mSelector == 1886807154) {
          goto LABEL_151;
        }
        if (mSelector == 1902539642) {
          goto LABEL_132;
        }
        int v13 = 1919773028;
LABEL_102:
        if (mSelector != v13) {
          return v4;
        }
        return 1;
      }
      switch(mSelector)
      {
        case 1885631346:
          goto LABEL_151;
        case 1886413412:
          AudioObjectPropertyScope v26 = a2->mScope;
          p_AudioObjectPropertyScope mScope = (int *)&a2->mScope;
          if (v26 == 1869968496)
          {
            *(_DWORD *)unint64_t v34 = 1347437175;
            return sub_459F60((int *)v34, p_mScope, (void *)(a1 + 184));
          }
          break;
        case 1886413426:
          AudioObjectPropertyScope v10 = a2->mScope;
          BOOL v9 = (int *)&a2->mScope;
          if (v10 == 1869968496)
          {
            *(_DWORD *)unint64_t v34 = 1347437170;
            return sub_459F60((int *)v34, v9, (void *)(a1 + 184));
          }
          break;
        default:
          return v4;
      }
      return 0;
    }
    if (mSelector > 1869838182)
    {
      if (mSelector == 1869838183 || mSelector == 1870030194) {
        goto LABEL_132;
      }
      int v7 = 1885434482;
      goto LABEL_150;
    }
    if (mSelector != 1869574756 && mSelector != 1869575794) {
      return v4;
    }
    if (a2->mScope != 1768845428) {
      return 0;
    }
    char v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 376);
    return v22(a1, 1685287015, 1818980210, 0, 0);
  }
  else if (mSelector <= 1952997987)
  {
    if (mSelector <= 1936744802)
    {
      if (mSelector <= 1935763059)
      {
        if (mSelector == 1934456180) {
          goto LABEL_151;
        }
        int v7 = 1935762281;
        goto LABEL_150;
      }
      if (mSelector == 1935763060 || mSelector == 1935959154) {
        goto LABEL_132;
      }
      if (mSelector != 1935962992) {
        return v4;
      }
      return sub_A5C88(a1);
    }
    else
    {
      if (mSelector > 1936879203)
      {
        if (mSelector != 1936879204)
        {
          if (mSelector == 1937138532) {
            goto LABEL_151;
          }
          int v7 = 1937204590;
          goto LABEL_150;
        }
      }
      else
      {
        if (mSelector == 1936744803) {
          return 1;
        }
        if (mSelector == 1936876403) {
          goto LABEL_151;
        }
        if (mSelector != 1936876644) {
          return v4;
        }
      }
      return sub_A5A20(a1, a2);
    }
  }
  else
  {
    if (mSelector > 1983996970)
    {
      if (mSelector <= 1986225267)
      {
        if (mSelector == 1983996971 || mSelector == 1983997011) {
          goto LABEL_132;
        }
        int v7 = 1986225266;
        goto LABEL_150;
      }
      if (mSelector == 1986225268) {
        goto LABEL_151;
      }
      if (mSelector != 1986361444)
      {
        int v7 = 2004053366;
        goto LABEL_150;
      }
      uint64_t v4 = sub_A5DA8(a1);
      if ((sub_23AC0() & 1) == 0 && !v4) {
        return v4;
      }
      unsigned int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352);
      uint64_t v19 = a1;
      uint64_t v20 = 1818521197;
      uint64_t v21 = 40;
    }
    else
    {
      if (mSelector <= 1953002353)
      {
        if (mSelector == 1952997988)
        {
          AudioObjectPropertyScope v30 = a2->mScope;
          __int16 v29 = (int *)&a2->mScope;
          if (v30 == 1869968496)
          {
            if (sub_209270()) {
              return 1;
            }
            *(_DWORD *)unint64_t v34 = 1416118903;
            return sub_459F60((int *)v34, v29, (void *)(a1 + 184));
          }
        }
        else
        {
          if (mSelector != 1952998002)
          {
            int v7 = 1953002093;
            goto LABEL_150;
          }
          AudioObjectPropertyScope v28 = a2->mScope;
          __int16 v27 = (int *)&a2->mScope;
          if (v28 == 1869968496)
          {
            if (sub_209270()) {
              return 1;
            }
            *(_DWORD *)unint64_t v34 = 1416118898;
            return sub_459F60((int *)v34, v27, (void *)(a1 + 184));
          }
        }
        return 0;
      }
      if (mSelector == 1953002354) {
        goto LABEL_151;
      }
      if (mSelector == 1953719148)
      {
        if (a2->mScope == 1869968496)
        {
          sub_B680((uint64_t *)v34, (void *)(a1 + 184), "", 810);
          if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 376))(a1, 1987013737, 64001, 0, 1))uint64_t v4 = 1; {
          else
          }
            uint64_t v4 = sub_A5BF4(*(uint64_t *)&v34[8], (uint64_t)v34);
LABEL_156:
          sub_B8E4((uint64_t *)v34);
          return v4;
        }
        return 0;
      }
      if (mSelector != 1969844082) {
        return v4;
      }
      if (a2->mScope != 1768845428) {
        return 0;
      }
      uint64_t v4 = 0;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 376))(a1, 1685287015, 1818980210, 0, 0))return v4; {
      unsigned int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352);
      }
      uint64_t v19 = a1;
      uint64_t v20 = 1685287015;
      uint64_t v21 = 1969844082;
    }
    return v18(v19, v20, v21, 0);
  }
}

void sub_4C20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4C23C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_4C264(uint64_t result)
{
  if (!*(_DWORD *)(result + 128))
  {
    BOOL v9 = (os_log_t *)sub_32A48(13);
    AudioObjectPropertyScope v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "AggregateDevice_CommonBase.cpp";
      __int16 v20 = 1024;
      int v21 = 2195;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v18, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  if (!*(void *)(result + 416))
  {
    int v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "AggregateDevice_CommonBase.cpp";
      __int16 v20 = 1024;
      int v21 = 2196;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v18, 0x12u);
    }
    __int16 v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Invariant failure.");
  }
  for (uint64_t i = *(void **)(result + 520); i != *(void **)(result + 528); i += 2)
  {
    if (!*i)
    {
      uint64_t v3 = (os_log_t *)sub_32A48(13);
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          int v18 = 136315394;
          uint64_t v19 = "AggregateDevice_CommonBase.cpp";
          __int16 v20 = 1024;
          int v21 = 2197;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v18, 0x12u);
        }
      }
      uint64_t v5 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v5, "Invariant failure.");
    }
  }
  for (uint64_t j = *(void **)(result + 544); j != *(void **)(result + 552); j += 2)
  {
    if (!*j)
    {
      unsigned __int16 v6 = (os_log_t *)sub_32A48(13);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315394;
        uint64_t v19 = "AggregateDevice_CommonBase.cpp";
        __int16 v20 = 1024;
        int v21 = 2198;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v18, 0x12u);
      }
      int v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v8, "Invariant failure.");
    }
  }
  if ((*(void *)(result + 456) != 0) == (*(void *)(result + 464) == 0))
  {
    int v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "AggregateDevice_CommonBase.cpp";
      __int16 v20 = 1024;
      int v21 = 2199;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v18, 0x12u);
    }
    int v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Invariant failure.");
  }
  return result;
}

void sub_4C668(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_4C694(const __CFArray *result)
{
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

void sub_4C6B4(uint64_t a1)
{
  pthread_t v2 = *(void **)(a1 + 240);
  uint64_t v3 = *(void **)(a1 + 248);
  while (v2 != v3)
  {
    long long __p = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    sub_4CAB0(&__p, *(const void **)(a1 + 144), *(void *)(a1 + 152), (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
    (*(void (**)(void, void **))(*(void *)*v2 + 48))(*v2, &__p);
    (*(void (**)(void))(*(void *)*v2 + 16))();
    if (__p)
    {
      int v7 = __p;
      operator delete(__p);
    }
    v2 += 2;
  }
  sub_5320(a1);
  if (atomic_exchange((atomic_uchar *volatile)(a1 + 365), 0))
  {
    uint64_t v4 = sub_32A48(16);
    sub_6974(3, v4, (uint64_t)"", 358, (uint64_t)"", "IO Proc about to start. Applying deferred timesync update!");
    v5[0] = 0;
    v5[40] = 0;
    sub_21E95C(a1, (uint64_t)v5);
  }
}

void sub_4C7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4C7EC(uint64_t a1, unsigned __int8 *a2)
{
  char v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  sub_4CAB0(&v22, *(const void **)(a1 + 144), *(void *)(a1 + 152), (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
  uint64_t v19 = 0;
  __int16 v20 = 0;
  uint64_t v21 = 0;
  sub_4CAB0(&v19, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  uint64_t v5 = (char *)v22;
  uint64_t v4 = v23;
  std::__sort<std::__less<long long,long long> &,long long *>();
  int v7 = (char *)v19;
  unsigned __int16 v6 = v20;
  std::__sort<std::__less<long long,long long> &,long long *>();
  if (!(*a2 | a2[1]))
  {
    long long __p = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    __int16 v27 = v5;
    __src = 0;
    AudioObjectPropertyScope v26 = v7;
    if (v5 == v4) {
      goto LABEL_27;
    }
    while (1)
    {
      if (v7 == v6)
      {
        int v15 = (char *)__src;
        do
        {
          int v15 = sub_2214F8((uint64_t)&__p, v15, v5) + 8;
          v5 += 8;
        }
        while (v5 != v4);
        goto LABEL_27;
      }
      if (*(void *)v5 >= *(void *)v7)
      {
        int v13 = &v26;
        if (*(void *)v7 < *(void *)v5) {
          goto LABEL_19;
        }
        p_src = (void **)&v27;
      }
      else
      {
        int v12 = sub_2214F8((uint64_t)&__p, (char *)__src, v5);
        int v13 = &v27;
        p_src = &__src;
        int v7 = v5;
        uint64_t v5 = v12;
      }
      *p_src = v5 + 8;
LABEL_19:
      *int v13 = v7 + 8;
      uint64_t v5 = v27;
      if (v27 == v4) {
        goto LABEL_27;
      }
      int v7 = v26;
    }
  }
  long long __p = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  if (v5 == v4)
  {
    uint64_t v8 = 0;
LABEL_26:
    while (v7 != v6)
    {
      uint64_t v8 = sub_2214F8((uint64_t)&__p, v8, v7) + 8;
      v7 += 8;
    }
  }
  else
  {
    uint64_t v8 = 0;
    while (v7 != v6)
    {
      uint64_t v9 = *(void *)v7;
      uint64_t v10 = *(void *)v5;
      if (*(void *)v7 >= *(void *)v5)
      {
        int v11 = sub_2214F8((uint64_t)&__p, v8, v5);
        v7 += 8 * (v10 >= v9);
        v5 += 8;
      }
      else
      {
        int v11 = sub_2214F8((uint64_t)&__p, v8, v7);
        v7 += 8;
      }
      uint64_t v8 = v11 + 8;
      if (v5 == v4) {
        goto LABEL_26;
      }
    }
    do
    {
      uint64_t v8 = sub_2214F8((uint64_t)&__p, v8, v5) + 8;
      v5 += 8;
    }
    while (v5 != v4);
  }
LABEL_27:
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 496))(a1, &__p);
  if (__p)
  {
    int v17 = __p;
    operator delete(__p);
  }
  if (v19) {
    operator delete(v19);
  }
  if (v22) {
    operator delete(v22);
  }
}

void sub_4CA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4CAB0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned __int16 v6 = result;
    uint64_t result = sub_66F48(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_4CB10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_4CB2C(uint64_t a1, void *a2)
{
  sub_4CF38(a1, (uint64_t)a2);
  if (*(void *)(a1 + 720) == *(void *)(a1 + 712)) {
    return;
  }
  uint64_t v4 = a1 + 688;
  BOOL v5 = 1;
  uint64_t v6 = sub_4CD70(v4, 1, 0);
  uint64_t v7 = *(void *)(v6 + 192);
  if (!*(unsigned char *)(v7 + 448) && !*(void *)(v7 + 584)) {
    BOOL v5 = *(void *)(v7 + 672) != 0;
  }
  if (!v5) {
    return;
  }
  if (*(_DWORD *)(v6 + 8) != 1819304813) {
    return;
  }
  uint64_t v8 = *(void *)(sub_4CD70(v4, 1, 0) + 192);
  if (!*(unsigned char *)(v8 + 796)) {
    return;
  }
  uint64_t v9 = *(void *)(v8 + 736);
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_62A848);
  }
  if (off_64EEB0)
  {
    int v10 = off_64EEB0(v9, a2);
    if (!v10)
    {
      int v11 = (os_log_t *)sub_32A48(16);
      os_log_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = (uint64_t)(a2[1] - *a2) >> 3;
        int v20 = 136315906;
        uint64_t v21 = "AggregateDevice_Common.cpp";
        __int16 v22 = 1024;
        int v23 = 1560;
        __int16 v24 = 2048;
        uint64_t v25 = v9;
        __int16 v26 = 2048;
        uint64_t v27 = v13;
        __int16 v14 = "%25s:%-5d PlaybackDosimetry: updated reporter IDs for session %llu, # of IDs: %lu";
        int v15 = v12;
        os_log_type_t v16 = OS_LOG_TYPE_DEBUG;
        uint32_t v17 = 38;
LABEL_19:
        _os_log_impl(&def_1E50E8, v15, v16, v14, (uint8_t *)&v20, v17);
        return;
      }
      return;
    }
  }
  else
  {
    int v10 = 560033897;
  }
  uint64_t v18 = (os_log_t *)sub_32A48(16);
  os_log_t v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136315906;
    uint64_t v21 = "AggregateDevice_Common.cpp";
    __int16 v22 = 1024;
    int v23 = 1558;
    __int16 v24 = 2048;
    uint64_t v25 = v9;
    __int16 v26 = 1024;
    LODWORD(v27) = v10;
    __int16 v14 = "%25s:%-5d PlaybackDosimetry: unable to update reporter IDs for session:%llu, err: %d";
    int v15 = v19;
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    uint32_t v17 = 34;
    goto LABEL_19;
  }
}

uint64_t sub_4CD70(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 32;
  }
  uint64_t v4 = 24;
  if (!a2) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + v3);
  uint64_t v6 = *(void *)(a1 + v4);
  if (0x4EC4EC4EC4EC4EC5 * ((v5 - v6) >> 4) <= (unint64_t)a3)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      if (a2) {
        int v11 = "output";
      }
      else {
        int v11 = "input";
      }
      sub_21C8C(__p, v11);
      if (v16 >= 0) {
        os_log_t v12 = __p;
      }
      else {
        os_log_t v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v18 = "AggregateDevice_Common.cpp";
      __int16 v19 = 1024;
      int v20 = 1542;
      __int16 v21 = 2080;
      __int16 v22 = v12;
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"Requested stream does not exist: out of range. inDirection: %s; inIndex: %u\"",
        buf,
        0x22u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(exception, "Requested stream does not exist: out of range. inDirection: %s; inIndex: %u");
  }
  return v6 + 208 * a3;
}

void sub_4CF1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_4CF38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 168);
  if (qword_65D920 != -1) {
    dispatch_once(&qword_65D920, &stru_627960);
  }
  if (off_65D960)
  {
    int v5 = off_65D960(v4, a2);
    if (!v5)
    {
      if (a1 + 144 != a2) {
        sub_4D2CC((char *)(a1 + 144), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      }
      uint64_t v6 = (os_log_t *)sub_32A48(16);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v27 = "AggregateDevice.h";
        __int16 v28 = 1024;
        int v29 = 667;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current reporterIDs:", buf, 0x12u);
      }
      for (uint64_t i = *(void ****)(a1 + 144); i != *(void ****)(a1 + 152); ++i)
      {
        uint64_t v9 = (os_log_t *)sub_32A48(16);
        int v10 = *v9;
        if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
        {
          int v11 = *i;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v27 = "AggregateDevice.h";
          __int16 v28 = 1024;
          int v29 = 671;
          __int16 v30 = 2048;
          uint64_t v31 = v11;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d reporterID: %ld", buf, 0x1Cu);
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    int v5 = -1;
  }
  os_log_t v12 = (os_log_t *)sub_32A48(16);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v27 = "AggregateDevice.h";
    __int16 v28 = 1024;
    int v29 = 676;
    __int16 v30 = 1024;
    LODWORD(v31) = v5;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d updating reporter IDs", buf, 0x18u);
  }
LABEL_20:
  *(void *)&inAddress.int mSelector = 0x676C6F6261697273;
  inAddress.mElement = 0;
  __int16 v14 = *(char **)a2;
  UInt32 v15 = (*(_DWORD *)(a2 + 8) - *(void *)a2) & 0xFFFFFFF8;
  if (v14) {
    char v16 = v14;
  }
  else {
    char v16 = &v25;
  }
  AudioObjectID v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  OSStatus v18 = AudioObjectSetPropertyData(v17, &inAddress, 0, 0, v15, v16);
  if (v18)
  {
    __int16 v19 = (os_log_t *)sub_32A48(16);
    int v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v18);
        if (v23 >= 0) {
          __int16 v21 = __p;
        }
        else {
          __int16 v21 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v27 = "AggregateDevice.cpp";
        __int16 v28 = 1024;
        int v29 = 695;
        __int16 v30 = 2080;
        uint64_t v31 = v21;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL returned an error for kAudioDevicePropertyIssueReporterIDs: '%s'", buf, 0x1Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

char *sub_4D2CC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_60548();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_66F48(v7, v11);
    uint64_t v13 = (char *)v7[1];
    os_log_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      OSStatus v18 = v9;
      __int16 v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  os_log_t v12 = (void **)(result + 8);
  __int16 v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  char v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    OSStatus v18 = v9;
    __int16 v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  os_log_t *v12 = &v9[v17];
  return result;
}

CFDictionaryRef sub_4D3D8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  keys = 0;
  int v37 = 0;
  unint64_t v38 = 0;
  sub_4D9B4((void **)&keys, v2);
  values = 0;
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  sub_4D9B4((void **)&values, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = *(void *)a1 + 16 * v3;
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        uint64_t v9 = keys;
        uint64_t v10 = v37 - keys;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v12 = v38 - (void)keys;
        if ((uint64_t)(v38 - (void)keys) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_106EC(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (void **)(v13 + 8 * v10);
        NSObject *v15 = v6;
        uint64_t v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            char v16 = *--v7;
            *--unint64_t v15 = v16;
          }
          while (v7 != v9);
          uint64_t v7 = keys;
        }
        keys = v15;
        unint64_t v38 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *int v37 = v6;
        uint64_t v8 = v7 + 1;
      }
      int v37 = v8;
      size_t v17 = v4[1];
      OSStatus v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        int v20 = values;
        uint64_t v21 = v34 - values;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v23 = v35 - (void)values;
        if ((uint64_t)(v35 - (void)values) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)sub_106EC(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        __int16 v26 = (void **)(v24 + 8 * v21);
        *__int16 v26 = v17;
        __int16 v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            uint64_t v27 = *--v18;
            *--__int16 v26 = v27;
          }
          while (v18 != v20);
          OSStatus v18 = values;
        }
        values = v26;
        unint64_t v35 = v24 + 8 * v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *unint64_t v34 = v17;
        __int16 v19 = v18 + 1;
      }
      unint64_t v34 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  __int16 v28 = keys;
  int v29 = values;
  CFDictionaryRef v30 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v30)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (v29) {
    operator delete(v29);
  }
  if (v28) {
    operator delete(v28);
  }
  return v30;
}

void sub_4D64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_free_exception(v12);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_4D69C(void ***a1)
{
  uint64_t v2 = ((char *)a1[1] - (char *)*a1) >> 4;
  keys = 0;
  int v37 = 0;
  unint64_t v38 = 0;
  sub_4D9B4((void **)&keys, v2);
  values = 0;
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  sub_4D9B4((void **)&values, v2);
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      if (!*v3 || !v3[1])
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      uint64_t v6 = v37;
      if ((unint64_t)v37 >= v38)
      {
        uint64_t v8 = keys;
        uint64_t v9 = v37 - keys;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v11 = v38 - (void)keys;
        if ((uint64_t)(v38 - (void)keys) >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)sub_106EC(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (void **)(v12 + 8 * v9);
        unsigned char *v14 = v5;
        uint64_t v7 = v14 + 1;
        if (v6 != v8)
        {
          do
          {
            unint64_t v15 = *--v6;
            *--uint64_t v14 = v15;
          }
          while (v6 != v8);
          uint64_t v6 = keys;
        }
        keys = v14;
        unint64_t v38 = v12 + 8 * v13;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *int v37 = v5;
        uint64_t v7 = v6 + 1;
      }
      int v37 = v7;
      char v16 = v3[1];
      size_t v17 = v34;
      if ((unint64_t)v34 >= v35)
      {
        __int16 v19 = values;
        uint64_t v20 = v34 - values;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v22 = v35 - (void)values;
        if ((uint64_t)(v35 - (void)values) >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          unint64_t v23 = (unint64_t)sub_106EC(v23);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = (void **)(v23 + 8 * v20);
        *uint64_t v25 = v16;
        OSStatus v18 = v25 + 1;
        if (v17 != v19)
        {
          do
          {
            __int16 v26 = *--v17;
            *--uint64_t v25 = v26;
          }
          while (v17 != v19);
          size_t v17 = values;
        }
        values = v25;
        unint64_t v35 = v23 + 8 * v24;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *unint64_t v34 = v16;
        OSStatus v18 = v17 + 1;
      }
      unint64_t v34 = v18;
      v3 += 2;
    }
    while (v3 != v4);
  }
  uint64_t v27 = keys;
  __int16 v28 = values;
  CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v29)
  {
    uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }
  if (v28) {
    operator delete(v28);
  }
  if (v27) {
    operator delete(v27);
  }
  return v29;
}

void sub_4D95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_free_exception(v12);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_4D9B4(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_60548();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_106EC(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

unint64_t sub_4DA5C(_DWORD *a1, int a2)
{
  sub_4E004();
  uint64_t v4 = qword_64C560;
  if (!qword_64C560) {
    goto LABEL_12;
  }
  unsigned int v5 = a1[67];
  uint64_t v6 = &qword_64C560;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = (uint64_t *)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == &qword_64C560 || *((_DWORD *)v6 + 8) > v5)
  {
LABEL_12:
    sub_4E004();
    goto LABEL_13;
  }
  sub_4E004();
  uint64_t v13 = (*(double (**)(_DWORD *))(*(void *)a1 + 104))(a1);
  uint64_t v15 = v6[6];
  uint64_t v14 = v6[7];
  if (v15 != v14)
  {
    while (*(_DWORD *)v15 != -1 && *(_DWORD *)v15 != v13)
    {
      v15 += 8;
      if (v15 == v14) {
        goto LABEL_33;
      }
    }
  }
  if (v15 != v14)
  {
    size_t v17 = (os_log_t *)sub_32A48(16);
    OSStatus v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_INFO))
    {
      int v19 = *(_DWORD *)(v15 + 4);
      int v27 = 136315906;
      __int16 v28 = "RoutingTypes.cpp";
      __int16 v29 = 1024;
      int v30 = 3546;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 1024;
      LODWORD(v34) = v19;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d FindBufferSizeForSR sampleRate = %u bufferSizeSamples = %u\n", (uint8_t *)&v27, 0x1Eu);
    }
    LODWORD(v15) = *(_DWORD *)(v15 + 4);
    goto LABEL_32;
  }
LABEL_33:
  if (*((unsigned char *)v6 + 80))
  {
    uint64_t v21 = v6[9];
    if (v21)
    {
      uint64_t v22 = 1000 / v21;
      unint64_t v23 = (os_log_t *)sub_32A48(16);
      uint64_t v24 = *v23;
      uint64_t v15 = v13 / v22;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_INFO))
      {
        if (!*((unsigned char *)v6 + 80)) {
          sub_7F218();
        }
        uint64_t v25 = v6[9];
        int v27 = 136316162;
        __int16 v28 = "RoutingTypes.cpp";
        __int16 v29 = 1024;
        int v30 = 3554;
        __int16 v31 = 1024;
        int v32 = v13;
        __int16 v33 = 2048;
        uint64_t v34 = v15;
        __int16 v35 = 2048;
        uint64_t v36 = v25;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_INFO, "%25s:%-5d FindBufferSizeForSR sampleRate = %u bufferSizeSamples = %lu bufferSizeInMS = %lu\n", (uint8_t *)&v27, 0x2Cu);
      }
LABEL_32:
      int v20 = v15 & 0xFFFFFF00;
      uint64_t v21 = 0x100000000;
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  LOBYTE(v15) = 0;
  int v20 = 0;
LABEL_41:
  if (HIDWORD(v21))
  {
    uint64_t v10 = v21 | v20 | v15;
    goto LABEL_43;
  }
LABEL_13:
  if (a2 == 1869968496)
  {
    uint64_t v10 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 560))(a1, 1);
LABEL_43:
    unsigned int v11 = v10;
    goto LABEL_44;
  }
  if (a2 == 1768845428)
  {
    uint64_t v10 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 560))(a1, 0);
    unsigned int v11 = v10;
LABEL_44:
    uint64_t v12 = v10;
    return v10 & 0xFF00000000 | v11 | v12 & 0xFFFFFF0000000000;
  }
  uint64_t v10 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 560))(a1, 1);
  uint64_t v12 = v10;
  if ((v10 & 0xFF00000000) == 0) {
    uint64_t v10 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 560))(a1, 0);
  }
  unsigned int v11 = v10;
  return v10 & 0xFF00000000 | v11 | v12 & 0xFFFFFF0000000000;
}

unint64_t sub_4DE18(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 520;
  uint64_t v3 = 520;
  if (a2)
  {
    uint64_t v3 = 544;
    uint64_t v2 = a1 + 544;
  }
  uint64_t v4 = *(uint64_t **)(a1 + v3);
  unsigned int v5 = *(uint64_t **)(v2 + 8);
  if (v4 == v5)
  {
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    LOBYTE(v8) = 0;
    LOBYTE(v9) = 0;
  }
  else
  {
    while (1)
    {
      unint64_t v8 = *(void *)(*v4 + 432);
      if ((v8 & 0xFF00000000) != 0) {
        break;
      }
      v4 += 2;
      if (v4 == v5)
      {
        LOBYTE(v9) = 0;
        unsigned int v10 = v8 >> 8;
        unint64_t v11 = v8 >> 40;
        LOBYTE(v8) = 0;
        return (v11 << 40) | ((unint64_t)v9 << 32) | v8 | (v10 << 8);
      }
    }
    unsigned int v10 = v8 >> 8;
    unint64_t v11 = v8 >> 40;
    unint64_t v9 = HIDWORD(v8);
    uint64_t v12 = (os_log_t *)sub_32A48(19);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 268);
      sub_4D60(&__p, (unsigned int *)&v18);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v15 = "Input";
      uint64_t v16 = *v4;
      if (a2) {
        uint64_t v15 = "Output";
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      uint64_t v21 = "AggregateDevice_CommonBase.cpp";
      __int16 v22 = 1024;
      int v23 = 3195;
      __int16 v24 = 1024;
      int v25 = v8;
      __int16 v26 = 2080;
      int v27 = p_p;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = v16;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Found fixed block size %u for VAD %s and direction %s on virtual stream %p", buf, 0x36u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return (v11 << 40) | ((unint64_t)v9 << 32) | v8 | (v10 << 8);
}

void sub_4E004()
{
  char v1 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64C570, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64C570))
  {
    int v0 = sub_207A20();
    sub_189790(v0, &v1);
    __cxa_guard_release(&qword_64C570);
  }
}

void sub_4E080(_Unwind_Exception *a1)
{
}

uint64_t sub_4E098(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 544))(a1);
  uint64_t v4 = (uint64_t *)a1[30];
  uint64_t v3 = (uint64_t *)a1[31];
  while (v4 != v3)
  {
    uint64_t v5 = *v4;
    v4 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  return result;
}

uint64_t sub_4E120(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_4E13C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_4E158(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_32A48(12);
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        sub_1741E8(v22, a1 + 1);
        int v5 = v23;
        uint64_t v6 = (void **)v22[0];
        sub_1741E8(__p, (void *)(v2 + 24));
        unsigned int v7 = v22;
        if (v5 < 0) {
          unsigned int v7 = v6;
        }
        if (v21 >= 0) {
          unint64_t v8 = __p;
        }
        else {
          unint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        int v25 = "CoreTelephonyInterface.cpp";
        __int16 v26 = 1024;
        int v27 = 463;
        __int16 v28 = 2080;
        __int16 v29 = v7;
        __int16 v30 = 2080;
        uint64_t v31 = v8;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Activating Route: %s Current: %s", buf, 0x26u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
      }
    }
  }
  unint64_t v9 = (uint64_t *)a1[1];
  if (v9 != a1 + 2)
  {
    do
    {
      uint64_t v10 = v9[5];
      unint64_t v11 = sub_4EE88((uint64_t **)(v2 + 24), *((_DWORD *)v9 + 8), (_DWORD *)v9 + 8);
      v11[5] = (uint64_t *)((char *)v11[5] + v10);
      uint64_t v12 = (uint64_t *)v9[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          unint64_t v9 = v13;
        }
        while (!v14);
      }
      unint64_t v9 = v13;
    }
    while (v13 != a1 + 2);
  }
  uint64_t v15 = (uint64_t *)a1[4];
  if (v15 != a1 + 5)
  {
    do
    {
      uint64_t v16 = v15[5];
      size_t v17 = sub_4EE88((uint64_t **)(v2 + 48), *((_DWORD *)v15 + 8), (_DWORD *)v15 + 8);
      v17[5] = (uint64_t *)((char *)v17[5] + v16);
      uint64_t v18 = (uint64_t *)v15[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (uint64_t *)v15[2];
          BOOL v14 = *v19 == (void)v15;
          uint64_t v15 = v19;
        }
        while (!v14);
      }
      uint64_t v15 = v19;
    }
    while (v19 != a1 + 5);
  }
  *(void *)(v2 + 72) += a1[7];
  sub_13DB8((void *)v2);
}

void sub_4E398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_4E3BC(uint64_t *a1)
{
  uint64_t v4 = a1;
  if (AudioObjectPropertiesChanged())
  {
    char v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v6 = "HP_Object.cpp";
        __int16 v7 = 1024;
        int v8 = 308;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE (theError): \"got an error calling the listeners\"", buf, 0x12u);
      }
    }
  }
  return sub_57B0(&v4);
}

void sub_4E4C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    size_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 309;
      char v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    __int16 v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v25 = v24;
      __int16 v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 309;
        char v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      __int16 v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 309;
        char v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x4E488);
}

uint64_t *sub_4E720(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v4 = a1;
  v5[0] = v1;
  v5[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_153B0(v5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_8FEC((uint64_t *)&v4);
}

void sub_4E7B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (a2 == 3)
  {
    char v21 = __cxa_begin_catch(a1);
    __int16 v22 = (os_log_t *)sub_32A48(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v24;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 98;
      int v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v26 = v23;
      uint32_t v27 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }
  else
  {
    uint64_t v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v29 = v28;
      os_log_t v30 = (os_log_t *)sub_32A48(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v32;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 98;
        int v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      __int16 v33 = (os_log_t *)sub_32A48(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 98;
        int v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x4E778);
}

void sub_4EA1C(uint64_t *a1)
{
  if (a1) {
    sub_6C7C((uint64_t)a1);
  }
}

void sub_4EA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    __int16 v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      os_log_t v23 = v22;
      int v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint32_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x4EA4CLL);
}

void *sub_4ECEC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_66F48(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_4ED48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4ED64(void *a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL) {
    sub_60548();
  }
  uint64_t result = (char *)sub_62E4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[208 * v4];
  return result;
}

void sub_4EDB8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_7E20C(v6);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_4EE38(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_60548();
  }
  uint64_t result = (char *)sub_564C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

uint64_t **sub_4EE88(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        __int16 v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    __int16 v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((void *)v9 + 5) = 0;
    sub_46CA8(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

__n128 sub_4EF34(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  int v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 102 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x66)
    {
      a1[4] = v8 - 102;
      uint64_t v12 = *(void *)v5;
      uint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)sub_106EC(v41);
          int v44 = &v42[8 * (v41 >> 2)];
          CFNumberRef v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          int v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          int v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            __int16 v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            __int16 v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      int v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    int v24 = (char *)a1[3];
    os_log_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      uint32_t v27 = operator new(0xFF0uLL);
      os_log_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          unint64_t v53 = (char *)sub_106EC(v51);
          int v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v55 = (uint64_t *)a1[1];
          int v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            int v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            int v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)int v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          int v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            int v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v99 = 1;
            }
            else {
              unint64_t v99 = (uint64_t)&v63[-*a1] >> 2;
            }
            double v100 = (char *)sub_106EC(v99);
            uint64_t v102 = &v100[8 * (v99 >> 2)];
            uint64_t v103 = (uint64_t *)a1[1];
            uint64_t v63 = v102;
            uint64_t v104 = a1[2] - (void)v103;
            if (v104)
            {
              uint64_t v63 = &v102[v104 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v105 = 8 * (v104 >> 3);
              uint64_t v106 = &v100[8 * (v99 >> 2)];
              do
              {
                uint64_t v107 = *v103++;
                *(void *)uint64_t v106 = v107;
                v106 += 8;
                v105 -= 8;
              }
              while (v105);
            }
            uint64_t v108 = (char *)*a1;
            *a1 = v100;
            a1[1] = v102;
            a1[2] = v63;
            a1[3] = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            int v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    os_log_t v30 = (char *)sub_106EC(v29);
    uint64_t v32 = v31;
    __int16 v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v112 = v34;
    __int16 v35 = operator new(0xFF0uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v112;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      int v75 = (char *)sub_106EC(v74);
      __int16 v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v109 = v36;
      long long v112 = v38;
      operator delete(v30);
      long long v36 = v109;
    }
    long long v38 = v112;
LABEL_56:
    *(void *)__int16 v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      char v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        __int16 v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          unsigned int v86 = (char *)sub_106EC(v85);
          uint64_t v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          CFIndex v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            CFIndex v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            unsigned int v91 = v79;
            unsigned int v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)unsigned int v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v110 = v36;
            long long v114 = v38;
            operator delete(v78);
            long long v36 = v110;
            long long v38 = v114;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          uint64_t v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            __int16 v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v111 = *((void *)&v36 + 1);
            uint64_t v113 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v111;
            *(void *)&long long v38 = v113;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        uint64_t v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    unsigned int v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  unint64_t v96 = *(void *)&v5[8 * (v9 / 0x66)] + 40 * (v9 % 0x66);
  __n128 result = *(__n128 *)a2;
  long long v98 = *(_OWORD *)(a2 + 16);
  *(void *)(v96 + 32) = *(void *)(a2 + 32);
  *(__n128 *)unint64_t v96 = result;
  *(_OWORD *)(v96 + 16) = v98;
  ++a1[5];
  return result;
}

void sub_4F4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_4F4E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 208)
    {
      sub_1216C((unsigned int **)(v4 - 32));
      sub_1216C((unsigned int **)(v4 - 48));
    }
  }
  return a1;
}

uint64_t sub_4F550(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_1216C((unsigned int **)(v3 + 176));
      sub_1216C((unsigned int **)(v3 + 160));
      v3 += 208;
    }
  }
  return a1;
}

uint64_t sub_4F5B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 208;
    sub_1216C((unsigned int **)(i - 32));
    sub_1216C((unsigned int **)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_4F614(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

void sub_4F650(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_A99F8((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_4F6A8(uint64_t result)
{
  if (**(unsigned char **)(result + 8)) {
    return sub_B3FB4(*(void *)(result + 16) + 648);
  }
  return result;
}

void *sub_4F6C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_4F750(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_4F7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_4F86C(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_56964();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_4F8C0()
{
}

__n128 sub_4F8D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6203F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_4F900(uint64_t a1)
{
  uint64_t v12 = a1 + 48;
  char v13 = 1;
  sub_39ECC(a1 + 48);
  unsigned __int8 v11 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == *(void *)(a1 + 32))
  {
    BOOL v5 = 0;
  }
  else
  {
    while (1)
    {
      int v3 = (*(uint64_t (**)(void, uint64_t, void, unsigned __int8 *))(**(void **)(v2 + 8) + 248))(*(void *)(v2 + 8), 2, 0, &v11);
      if (v3)
      {
        uint64_t v7 = sub_32A48(13);
        unint64_t v8 = sub_7D5E8(1, *(void **)v7, *(void *)(v7 + 8));
        unint64_t v9 = v8;
        if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          BOOL v15 = "DSPChain.mm";
          __int16 v16 = 1024;
          int v17 = 1499;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stat) [error stat is an error]: \"Unexpected error from HasStaticChannelCountForBus\"", buf, 0x12u);
        }

        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = v3;
      }
      int v4 = v11;
      if (v11) {
        break;
      }
      v2 += 24;
      if (v2 == *(void *)(a1 + 32))
      {
        int v4 = 0;
        break;
      }
    }
    BOOL v5 = v4 != 0;
  }
  sub_3A3E8((uint64_t)&v12);
  return v5;
}

void sub_4FABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A3E8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_4FAE0(uint64_t a1, double a2)
{
  uint64_t v15 = a1 + 48;
  char v16 = 1;
  sub_F648(a1 + 48);
  double v14 = a2;
  for (uint64_t i = *(void *)(a1 + 24); i != *(void *)(a1 + 32); i += 24)
  {
    int v13 = 8;
    char v12 = 0;
    if ((*(unsigned int (**)(void, uint64_t, int *, char *, void, void))(**(void **)(i + 8) + 40))(*(void *)(i + 8), 3100, &v13, &v12, 0, 0))
    {
      BOOL v5 = 1;
    }
    else
    {
      BOOL v5 = v12 == 0;
    }
    if (!v5)
    {
      if (v13 != 8)
      {
        uint64_t v8 = sub_32A48(13);
        unint64_t v9 = sub_7D5E8(1, *(void **)v8, *(void *)(v8 + 8));
        uint64_t v10 = v9;
        if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v18 = "DSPChain.mm";
          __int16 v19 = 1024;
          int v20 = 1478;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Data size mismatch\"", buf, 0x12u);
        }

        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Data size mismatch");
      }
      (*(void (**)(void, uint64_t, double *, uint64_t, void, void))(**(void **)(i + 8) + 56))(*(void *)(i + 8), 3100, &v14, 8, 0, 0);
    }
    if ((*(unsigned int (**)(void))(**(void **)(i + 8) + 184))(*(void *)(i + 8)))
    {
      double v6 = (*(double (**)(void))(**(void **)(i + 8) + 200))(*(void *)(i + 8));
      double v14 = v6 + v14;
    }
  }
  return sub_C7D4(&v15);
}

void sub_4FD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_C7D4(va);
  _Unwind_Resume(a1);
}

unint64_t sub_4FD74(uint64_t a1)
{
  uint64_t v1 = sub_1385C(a1, 0);
  if (!v1
    || (uint64_t v2 = v1,
        int v12 = 0,
        char v11 = 0,
        (*(unsigned int (**)(uint64_t, uint64_t, int *, char *, void, void))(*(void *)v1 + 40))(v1, 3700, &v12, &v11, 0, 0))|| ((v10 = 0, !(*(unsigned int (**)(uint64_t, uint64_t, int *, int *, void, void))(*(void *)v2 + 48))(v2, 3700, &v10, &v12, 0, 0))? (BOOL v3 = v10 == 0): (BOOL v3 = 1), v3|| (*(unsigned int (**)(uint64_t, uint64_t, int *, char *, void, void))(*(void *)v2 + 40))(v2,
          14,
          &v12,
          &v11,
          0,
          0)))
  {
    unsigned __int8 v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    int v9 = 0;
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, int *, int *, void, void))(*(void *)v2 + 48))(v2, 14, &v9, &v12, 0, 0);
    uint64_t v6 = v8 == 0;
    unsigned __int8 v4 = v9;
    unsigned int v5 = v9 & 0xFFFFFF00;
    if (v8)
    {
      unsigned __int8 v4 = 0;
      unsigned int v5 = 0;
    }
  }
  return v5 & 0xFFFFFF00 | v4 | (unint64_t)(v6 << 32);
}

BOOL sub_4FEEC(uint64_t a1, int a2)
{
  return a2 == 1685287015 || a2 == 1936748595 || sub_6913C(a1, a2);
}

uint64_t sub_4FF14()
{
  return 1;
}

double sub_4FF1C(uint64_t a1, int a2)
{
  int v7 = 4;
  unsigned __int32 v8 = 0;
  if (a2) {
    int v3 = 1869968496;
  }
  else {
    int v3 = 1768845428;
  }
  v6[0] = 1752657012;
  v6[1] = v3;
  v6[2] = 0;
  __n128 v4 = ((__n128 (*)(uint64_t, _DWORD *, void, void, int *, unsigned __int32 *))*(void *)(*(void *)a1 + 40))(a1, v6, 0, 0, &v7, &v8);
  v4.n128_u32[0] = v8;
  return (double)v4.n128_u64[0] / (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
}

void sub_4FFE8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 544);
  uint64_t v2 = *(uint64_t **)(a1 + 552);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    v1 += 2;
    sub_2282C(v3);
  }
}

uint64_t sub_50020(uint64_t result)
{
  if (!*(_DWORD *)(result + 128))
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      double v14 = "AggregateDevice_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 1406;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  if (!*(void *)(result + 416))
  {
    __n128 v4 = (os_log_t *)sub_32A48(13);
    unsigned int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      double v14 = "AggregateDevice_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 1407;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    uint64_t v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v6, "Invariant failure.");
  }
  if (!*(void *)(result + 440))
  {
    int v7 = (os_log_t *)sub_32A48(13);
    unsigned __int32 v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      double v14 = "AggregateDevice_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 1408;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    int v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "Invariant failure.");
  }
  if ((*(void *)(result + 456) != 0) == (*(void *)(result + 464) == 0))
  {
    int v10 = (os_log_t *)sub_32A48(13);
    char v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        double v14 = "AggregateDevice_Common.cpp";
        __int16 v15 = 1024;
        int v16 = 1409;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
      }
    }
    int v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Invariant failure.");
  }
  return result;
}

void sub_50344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5036C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(a1 + 40))(*(void *)(a1 + 16), a2, a3, *(void *)(a1 + 48));
}

void sub_503D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    char v11 = __cxa_begin_catch(exception_object);
    int v12 = (os_log_t *)sub_32A48(14);
    os_log_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v14 = v11[2];
      LODWORD(a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "ListenerRelayManager.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 98;
      WORD1(a10) = 1024;
      DWORD1(a10) = v14;
      __int16 v15 = "%25s:%-5d CAException thrown from property listener: %d.";
      int v16 = v13;
      uint32_t v17 = 24;
LABEL_13:
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&a9, v17);
    }
  }
  else
  {
    uint64_t v18 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v19 = v18;
      int v20 = (os_log_t *)sub_32A48(14);
      os_log_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
        LODWORD(a9) = 136315650;
        *(void *)((char *)&a9 + 4) = "ListenerRelayManager.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 102;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v22;
        __int16 v15 = "%25s:%-5d Standard Library exception thrown from property listener: %s.";
        int v16 = v21;
        uint32_t v17 = 28;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v23 = (os_log_t *)sub_32A48(14);
      os_log_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "ListenerRelayManager.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 106;
        __int16 v15 = "%25s:%-5d Unknown exception thrown from property listener.";
        int v16 = v24;
        uint32_t v17 = 18;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x503A4);
}

uint64_t sub_505D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1936092532);
}

uint64_t sub_505FC(std::mutex *a1, int a2, unsigned int a3)
{
  sub_50848(a1);
  uint64_t v6 = &a1[4].__m_.__opaque[32];
  uint64_t v7 = 272;
  if (a2) {
    uint64_t v7 = 296;
  }
  else {
    uint64_t v6 = &a1[4].__m_.__opaque[8];
  }
  uint64_t v8 = *(uint64_t *)((char *)&a1->__m_.__sig + v7);
  if (a3 >= (unint64_t)((*((void *)v6 + 1) - v8) >> 4))
  {
    uint64_t v18 = v6;
    uint64_t v19 = v7;
    unsigned int v20 = a3;
    uint64_t v10 = sub_32A48(13);
    char v11 = sub_7D5E8(1, *(void **)v10, *(void *)(v10 + 8));
    int v12 = v11;
    if (v11)
    {
      os_log_t v13 = v11;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        if (a2) {
          int v14 = "output";
        }
        else {
          int v14 = "input";
        }
        sub_21C8C(__p, v14);
        __int16 v15 = (void **)__p[0];
        if (v22 >= 0) {
          __int16 v15 = __p;
        }
        uint64_t v16 = (*((void *)v18 + 1) - *(uint64_t *)((char *)&a1->__m_.__sig + v19)) >> 4;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        os_log_t v24 = "Device_HAL_Common.mm";
        __int16 v25 = 1024;
        int v26 = 387;
        __int16 v27 = 1024;
        unsigned int v28 = v20;
        __int16 v29 = 2080;
        os_log_t v30 = v15;
        __int16 v31 = 2048;
        uint64_t v32 = v16;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"Requested index %u, but %s stream has only %lu streams.\"", buf, 0x2Cu);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(exception, "Requested index %u, but %s stream has only %lu streams.");
  }
  return *(void *)(v8 + 16 * a3);
}

void sub_507EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_50818(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 272;
  uint64_t v3 = 272;
  if (a2)
  {
    uint64_t v3 = 296;
    uint64_t v2 = a1 + 296;
  }
  return (*(void *)(v2 + 8) - *(void *)(a1 + v3)) >> 4;
}

void sub_50848(std::mutex *a1)
{
  uint64_t v1 = a1 + 5;
  std::mutex::lock(a1 + 5);

  std::mutex::unlock(v1);
}

uint64_t sub_50884(uint64_t a1)
{
  char v1 = atomic_load((unsigned int *)(a1 + 360));
  return v1 & 1;
}

void sub_50894(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (qword_65D920 != -1) {
    dispatch_once(&qword_65D920, &stru_62A808);
  }
  if (off_65D930)
  {
    int v3 = off_65D930(v2);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    int v3 = -1;
  }
  __n128 v4 = (os_log_t *)sub_32A48(16);
  unsigned int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315650;
    int v9 = "AggregateDevice.h";
    __int16 v10 = 1024;
    int v11 = 650;
    __int16 v12 = 1024;
    int v13 = v3;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d initializing issue detector", (uint8_t *)&v8, 0x18u);
  }
LABEL_10:
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v6 = (os_log_t *)sub_32A48(16);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315394;
        int v9 = "AggregateDevice.h";
        __int16 v10 = 1024;
        int v11 = 651;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Issue detector is bypassed. Audio analysis errors will be silenced. ", (uint8_t *)&v8, 0x12u);
      }
    }
  }
}

uint64_t sub_50A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a1 + 440;
  char v50 = 1;
  sub_39ECC(a1 + 440);
  if (sub_55F80(*(void *)(a1 + 208), *(void *)(a1 + 216), a2, *(void *)(a1 + 232), *(void *)(a1 + 240), a3))
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 2003329396;
    if (*(unsigned char *)(a1 + 400))
    {
      uint64_t v7 = (os_log_t *)sub_32A48(22);
      int v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 96);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v57 = "VirtualStream.cpp";
        __int16 v58 = 1024;
        int v59 = 1378;
        __int16 v60 = 2048;
        *(void *)int v61 = a1;
        *(_WORD *)&v61[8] = 2048;
        *(void *)&v61[10] = v9;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to translate physical format to client format for virtual stream %p of aggregate device %p.", buf, 0x26u);
      }
      __int16 v10 = (os_log_t *)sub_32A48(22);
      int v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        sub_259A4((std::string *)__p, a2);
        __int16 v12 = SBYTE3(v53) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v57 = "VirtualStream.cpp";
        __int16 v58 = 1024;
        int v59 = 1379;
        __int16 v60 = 2080;
        *(void *)int v61 = v12;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d - Given physical format: %s", buf, 0x1Cu);
        if (SBYTE3(v53) < 0) {
          operator delete(*(void **)__p);
        }
      }
      int v13 = (os_log_t *)sub_32A48(22);
      int v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v57 = "VirtualStream.cpp";
        __int16 v58 = 1024;
        int v59 = 1380;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d - Cached formats:", buf, 0x12u);
      }
      if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
      {
        uint64_t v15 = 0;
        unsigned int v16 = 1;
        do
        {
          uint32_t v17 = (os_log_t *)sub_32A48(22);
          uint64_t v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            sub_16BC04((std::string *)__p, *(void *)(a1 + 232) + 56 * v15);
            uint64_t v19 = __p;
            if (SBYTE3(v53) < 0) {
              uint64_t v19 = *(unsigned char **)__p;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v57 = "VirtualStream.cpp";
            __int16 v58 = 1024;
            int v59 = 1384;
            __int16 v60 = 1024;
            *(_DWORD *)int v61 = v16 - 1;
            *(_WORD *)&v61[4] = 2080;
            *(void *)&v61[6] = v19;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d   %uv: %s", buf, 0x22u);
            if (SBYTE3(v53) < 0) {
              operator delete(*(void **)__p);
            }
          }
          unsigned int v20 = (os_log_t *)sub_32A48(22);
          os_log_t v21 = *v20;
          if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            sub_16BC04((std::string *)__p, *(void *)(a1 + 208) + 56 * v15);
            char v22 = __p;
            if (SBYTE3(v53) < 0) {
              char v22 = *(unsigned char **)__p;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v57 = "VirtualStream.cpp";
            __int16 v58 = 1024;
            int v59 = 1385;
            __int16 v60 = 1024;
            *(_DWORD *)int v61 = v16 - 1;
            *(_WORD *)&v61[4] = 2080;
            *(void *)&v61[6] = v22;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d   %ua: %s", buf, 0x22u);
            if (SBYTE3(v53) < 0) {
              operator delete(*(void **)__p);
            }
          }
          uint64_t v15 = v16;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) > (unint64_t)v16++);
      }
      uint64_t v24 = 1936092513;
      uint64_t v25 = *(void *)(a1 + 136);
      if (v25 && ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 176))(v25) & 1) != 0) {
        uint64_t v26 = 1936092532;
      }
      else {
        uint64_t v26 = 1885762592;
      }
      sub_4188((uint64_t *)__p, (uint64_t *)(a1 + 80), "", 1390);
      unsigned int v27 = (*(uint64_t (**)(void, uint8_t *, uint64_t))(**(void **)__p + 120))(*(void *)__p, buf, v26);
      if (*(void *)&__p[8]) {
        sub_4636C(*(std::__shared_weak_count **)&__p[8]);
      }
      if (v27)
      {
        unsigned int v28 = (os_log_t *)sub_32A48(22);
        __int16 v29 = *v28;
        if (*v28)
        {
          if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
          {
            sub_2417C(&v48, v27);
            int v30 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
            std::string::size_type v31 = v48.__r_.__value_.__r.__words[0];
            sub_4F64((uint64_t)&v47, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
            uint64_t v32 = &v48;
            if (v30 < 0) {
              uint64_t v32 = (std::string *)v31;
            }
            if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v33 = &v47;
            }
            else {
              __int16 v33 = (std::string *)v47.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 136315906;
            *(void *)&__p[4] = "VirtualStream.cpp";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 1393;
            __int16 v52 = 2080;
            unint64_t v53 = v32;
            __int16 v54 = 2080;
            int v55 = v33;
            _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Error (%s) getting physical stream format for owning aggregate %s.", __p, 0x26u);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v47.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      long long v34 = (os_log_t *)sub_32A48(22);
      __int16 v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        sub_259A4(&v48, (uint64_t)buf);
        long long v36 = (v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v48
            : (std::string *)v48.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 1395;
        __int16 v52 = 2080;
        unint64_t v53 = v36;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d - Current physical format: %s", __p, 0x1Cu);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
      }
      memset(&v48, 0, sizeof(v48));
      sub_4188((uint64_t *)__p, (uint64_t *)(a1 + 80), "", 1398);
      uint64_t v37 = *(void *)__p;
      uint64_t v38 = *(void *)(a1 + 136);
      if (!v38 || ((*(uint64_t (**)(uint64_t))(*(void *)v38 + 176))(v38) & 1) == 0) {
        uint64_t v24 = 1885762657;
      }
      unsigned int v39 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v37 + 104))(v37, &v48, v24);
      if (*(void *)&__p[8]) {
        sub_4636C(*(std::__shared_weak_count **)&__p[8]);
      }
      uint64_t v6 = 2003329396;
      if (v39)
      {
        unint64_t v40 = (os_log_t *)sub_32A48(22);
        unint64_t v41 = *v40;
        if (*v40)
        {
          if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
          {
            sub_2417C(&v47, v39);
            uint64_t v42 = (v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v47
                : (std::string *)v47.__r_.__value_.__r.__words[0];
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "VirtualStream.cpp";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 1401;
            __int16 v52 = 2080;
            unint64_t v53 = v42;
            _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting physical stream formats from actual stream.", __p, 0x1Cu);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v47.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      uint64_t v43 = (os_log_t *)sub_32A48(22);
      int v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        sub_31B128(&v47, (uint64_t)v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        CFNumberRef v45 = (v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v47
            : (std::string *)v47.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 1403;
        __int16 v52 = 2080;
        unint64_t v53 = v45;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d - Current physical formats: %s", __p, 0x1Cu);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
      }
      if (v48.__r_.__value_.__r.__words[0])
      {
        v48.__r_.__value_.__l.__size_ = v48.__r_.__value_.__r.__words[0];
        operator delete(v48.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_3A3E8((uint64_t)&v49);
  return v6;
}

void sub_51290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3A3E8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_51340(uint64_t a1, uint64_t a2)
{
  sub_4188(&v6, (uint64_t *)(a1 + 80), "", 764);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, a2, 1936092532);
  if (v7) {
    sub_4636C(v7);
  }
  sub_6A7C(*(void *)(a1 + 96), a2);
  return v4;
}

void sub_513E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_513F8(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1 + 440;
  char v24 = 1;
  sub_39ECC(a1 + 440);
  if (!*(unsigned char *)(a1 + 400))
  {
    uint64_t v4 = sub_32A48(22);
    if (*(unsigned char *)(v4 + 8))
    {
      unsigned int v5 = *(NSObject **)v4;
      if (*(void *)v4)
      {
        if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          std::string::size_type v31 = "VirtualStream.cpp";
          __int16 v32 = 1024;
          int v33 = 718;
          __int16 v34 = 2048;
          uint64_t v35 = a1;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d VirtualStream at %p is being queried for its current formats after it has already been flagged as untrustworthy -- any resulting errors will throw quietly", buf, 0x1Cu);
        }
      }
    }
  }
  sub_4188((uint64_t *)v25, (uint64_t *)(a1 + 80), "", 722);
  uint64_t v6 = *(void *)v25;
  uint64_t v7 = *(void *)(a1 + 136);
  if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7) & 1) != 0) {
    uint64_t v8 = 1936092532;
  }
  else {
    uint64_t v8 = 1885762592;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v6 + 120))(v6, buf, v8);
  if (*(void *)&v25[8]) {
    sub_4636C(*(std::__shared_weak_count **)&v25[8]);
  }
  if (v9)
  {
    __int16 v10 = (os_log_t *)sub_32A48(22);
    int v11 = *v10;
    if (!*v10 || !os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_32;
    }
    sub_2417C(__p, v9);
    if (v22 >= 0) {
      __int16 v12 = __p;
    }
    else {
      __int16 v12 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t v25 = 136315650;
    *(void *)&v25[4] = "VirtualStream.cpp";
    *(_WORD *)&unsigned char v25[12] = 1024;
    *(_DWORD *)&v25[14] = 725;
    __int16 v26 = 2080;
    unsigned int v27 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting physical stream format", v25, 0x1Cu);
    goto LABEL_19;
  }
  uint64_t v9 = sub_50A2C(a1, (uint64_t)buf, a2);
  if (!v9)
  {
    sub_6A7C(*(void *)(a1 + 96), a2);
    uint64_t v9 = 0;
    goto LABEL_32;
  }
  int v13 = (os_log_t *)sub_32A48(22);
  int v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(__p, v9);
    int v15 = v22;
    unsigned int v16 = (void **)__p[0];
    sub_259A4(&v20, (uint64_t)buf);
    uint32_t v17 = __p;
    if (v15 < 0) {
      uint32_t v17 = v16;
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v20;
    }
    else {
      uint64_t v18 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v25 = 136315906;
    *(void *)&v25[4] = "VirtualStream.cpp";
    *(_WORD *)&unsigned char v25[12] = 1024;
    *(_DWORD *)&v25[14] = 732;
    __int16 v26 = 2080;
    unsigned int v27 = v17;
    __int16 v28 = 2080;
    __int16 v29 = v18;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting client format for physical format %s", v25, 0x26u);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
LABEL_19:
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_32:
  sub_3A3E8((uint64_t)&v23);
  return v9;
}

void sub_51750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_3A3E8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_517A8()
{
  return 1;
}

CFNumberRef sub_517B0(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t sub_517E8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 141);
}

uint64_t sub_517F0(void *a1, AudioUnitScope inScope, unsigned int a3, unsigned char *a4)
{
  *a4 = 0;
  if (inScope - 3 <= 0xFFFFFFFD)
  {
    char v22 = (os_log_t *)sub_32A48(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      __int16 v34 = "DSPProcessorManager.cpp";
      __int16 v35 = 1024;
      int v36 = 682;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input\"", (uint8_t *)&ioDataSize, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "inScope must be kAudioUnitScope_Output or kAudioUnitScope_Input");
  }
  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  uint64_t v8 = a1[9];
  if (v8) {
    uint64_t v9 = *(OpaqueAudioComponentInstance **)(v8 + 16);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t Property = AudioUnitGetProperty(v9, 0xBu, inScope, 0, &outData, &ioDataSize);
  if (Property)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      UInt32 ioDataSize = 136315394;
      __int16 v34 = "DSPProcessorManager.cpp";
      __int16 v35 = 1024;
      int v36 = 685;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&ioDataSize, 0x12u);
    }
    int v13 = (os_log_t *)sub_32A48(24);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      unsigned int v15 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
      sub_2417C(v30, v15);
      int v16 = v31;
      uint32_t v17 = (void **)v30[0];
      sub_2417C(__p, Property);
      uint64_t v18 = v30;
      if (v16 < 0) {
        uint64_t v18 = v17;
      }
      if (v29 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      UInt32 ioDataSize = 136316162;
      __int16 v34 = "DSPProcessorManager.cpp";
      __int16 v35 = 1024;
      int v36 = 695;
      __int16 v37 = 2080;
      uint64_t v38 = v18;
      __int16 v39 = 1024;
      int v40 = Property;
      __int16 v41 = 2080;
      uint64_t v42 = v19;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP (%s) static channel query failed with error: (%d) %s", (uint8_t *)&ioDataSize, 0x2Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
  }
  else
  {
    if (outData <= a3)
    {
      uint64_t v25 = (os_log_t *)sub_32A48(13);
      __int16 v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        UInt32 ioDataSize = 136315650;
        __int16 v34 = "DSPProcessorManager.cpp";
        __int16 v35 = 1024;
        int v36 = 686;
        __int16 v37 = 1024;
        LODWORD(v38) = inScope;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"inElement cannot exceed bus count for scope: %u\"", (uint8_t *)&ioDataSize, 0x18u);
      }
      unsigned int v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_82578(v27, "inElement cannot exceed bus count for scope: %u");
    }
    uint64_t v20 = 14;
    if (inScope == 1) {
      uint64_t v20 = 11;
    }
    *a4 = *(unsigned char *)(a1[v20] + 48 * a3 + 40);
  }
  return Property;
}

void sub_51BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

double sub_51BF0(uint64_t a1)
{
  return sub_51CE0(*(OpaqueAudioComponentInstance **)(a1 + 72));
}

uint64_t sub_51BF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_51C00(uint64_t a1, AudioUnitPropertyID a2, void *outData, UInt32 *ioDataSize, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    uint64_t v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    uint64_t v7 = 0;
  }
  return AudioUnitGetProperty(v7, a2, inScope, inElement, outData, ioDataSize);
}

BOOL sub_51C30(uint64_t a1)
{
  UInt32 ioDataSize = 4;
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    uint64_t v2 = *(OpaqueAudioComponentInstance **)(v1 + 16);
  }
  else {
    uint64_t v2 = 0;
  }
  int outData = 0;
  return AudioUnitGetProperty(v2, 0x15u, 0, 0, &outData, &ioDataSize) || outData == 0;
}

void sub_51C94(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X8>)
{
}

BOOL sub_51CA0(BOOL result)
{
  if (result)
  {
    uint64_t v1 = (_opaque_pthread_t *)result;
    uint64_t v2 = pthread_self();
    return pthread_equal(v1, v2) != 0;
  }
  return result;
}

double sub_51CE0(OpaqueAudioComponentInstance *a1)
{
  UInt32 ioDataSize = 8;
  if (a1) {
    a1 = (OpaqueAudioComponentInstance *)*((void *)a1 + 2);
  }
  double outData = 0.0;
  OSStatus Property = AudioUnitGetProperty(a1, 0xCu, 0, 0, &outData, &ioDataSize);
  double result = outData;
  if (Property) {
    return 0.0;
  }
  return result;
}

uint64_t sub_51D38(void *a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 256))(a1);
  if (result)
  {
    uint64_t v46 = 0;
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t *))(*a1 + 264))(a1, *a2, &v46);
    if (result)
    {
      (*(void (**)(uint64_t, void *))(*(void *)*a2 + 16))(*a2, a1);
      return (*(uint64_t (**)(void *, uint64_t))(*a1 + 272))(a1, v46);
    }
    return result;
  }
  uint64_t v6 = (uint64_t *)a1[55];
  unint64_t v5 = a1[56];
  unint64_t v7 = a1[57];
  if (v5 < v7)
  {
    if (v6 == (uint64_t *)v5)
    {
      uint64_t v19 = *a2;
      *a2 = 0;
      *uint64_t v6 = v19;
      a1[56] = v6 + 1;
    }
    else
    {
      uint64_t v8 = v6 + 1;
      uint64_t v9 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        int v11 = (void *)a1[56];
      }
      else
      {
        __int16 v10 = (uint64_t *)(v5 - 8);
        int v11 = (void *)a1[56];
        do
        {
          uint64_t v12 = *v10;
          *v10++ = 0;
          *v11++ = v12;
        }
        while ((unint64_t)v10 < v5);
      }
      a1[56] = v11;
      if ((void *)v5 != v8)
      {
        uint64_t v30 = (uint64_t)(v5 - (void)v8) >> 3;
        char v31 = v6 - 1;
        do
        {
          uint64_t v32 = v31[v30];
          v31[v30] = 0;
          uint64_t v33 = *v9;
          *uint64_t v9 = v32;
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
          --v9;
          --v30;
        }
        while (v30 * 8);
      }
      uint64_t v34 = *a2;
      *a2 = 0;
      uint64_t result = *v6;
      *uint64_t v6 = v34;
      if (result)
      {
        __int16 v35 = *(uint64_t (**)(void))(*(void *)result + 8);
        return v35();
      }
    }
    return result;
  }
  unint64_t v13 = ((uint64_t)(v5 - (void)v6) >> 3) + 1;
  if (v13 >> 61) {
    sub_60548();
  }
  uint64_t v14 = v7 - (void)v6;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  __p[4] = a1 + 57;
  if (!v15)
  {
    memset(__p, 0, 32);
LABEL_21:
    unint64_t v51 = a1 + 57;
    uint64_t v20 = (char *)sub_106EC(1uLL);
    char v22 = (uint64_t *)__p[1];
    int64_t v23 = (char *)__p[2] - (char *)__p[1];
    if (__p[2] == __p[1])
    {
      int64x2_t v29 = vdupq_n_s64((unint64_t)__p[1]);
      uint64_t v25 = v20;
    }
    else
    {
      uint64_t v24 = v23 >> 3;
      uint64_t v25 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v26 = 8 * v24;
      unsigned int v27 = v20;
      do
      {
        uint64_t v28 = *v22;
        *v22++ = 0;
        *v27++ = v28;
        v26 -= 8;
      }
      while (v26);
      int64x2_t v29 = *(int64x2_t *)&__p[1];
    }
    int v36 = __p[3];
    *(void **)AudioObjectPropertyAddress buf = __p[0];
    __p[0] = v20;
    __p[1] = v20;
    int64x2_t v49 = v29;
    __p[2] = v25;
    __p[3] = &v20[8 * v21];
    char v50 = v36;
    sub_364104((uint64_t)buf);
    int v16 = (char *)__p[1];
    uint64_t v18 = __p[2];
    goto LABEL_37;
  }
  int v16 = (char *)sub_106EC(v15);
  __p[0] = v16;
  __p[1] = v16;
  __p[2] = v16;
  __p[3] = &v16[8 * v17];
  uint64_t v18 = v16;
  if (!v17) {
    goto LABEL_21;
  }
LABEL_37:
  uint64_t v37 = *a2;
  *a2 = 0;
  void *v18 = v37;
  __p[2] = (char *)__p[2] + 8;
  uint64_t v38 = (uint64_t *)a1[55];
  if (v6 != v38)
  {
    __int16 v39 = v6;
    do
    {
      uint64_t v40 = *--v39;
      *__int16 v39 = 0;
      *((void *)v16 - 1) = v40;
      v16 -= 8;
    }
    while (v39 != v38);
  }
  __p[1] = v16;
  __int16 v41 = (uint64_t *)a1[56];
  uint64_t v42 = (uint64_t *)__p[2];
  if (v6 != v41)
  {
    do
    {
      uint64_t v43 = *v6;
      *v6++ = 0;
      *v42++ = v43;
    }
    while (v6 != v41);
    int v16 = (char *)__p[1];
    uint64_t v6 = (uint64_t *)a1[56];
  }
  int v44 = (void *)a1[55];
  a1[55] = v16;
  a1[56] = v42;
  CFNumberRef v45 = (void *)a1[57];
  a1[57] = __p[3];
  __p[2] = v6;
  __p[3] = v45;
  __p[0] = v44;
  __p[1] = v44;
  return sub_364104((uint64_t)__p);
}

void sub_52210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17, int a18)
{
}

caulk::concurrent::message **sub_522A0(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 40, 8);
  return a1;
}

uint64_t sub_52310(int *a1)
{
  return (*(uint64_t (**)(void, int *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 24))(caulk::alloc::realtime_safe_resource, a1, 320, 8);
}

unsigned char *sub_52380(unsigned char *a1)
{
  if (a1[8]) {
    (*(void (**)(void))(**(void **)a1 + 16))();
  }
  return a1;
}

unsigned char *sub_523D8(unsigned char *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  a1[8] = v3;
  if (v3)
  {
    (*(void (**)(void))(**(void **)a1 + 24))();
  }
  else
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    unint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "Unlocker.cpp";
      __int16 v9 = 1024;
      int v10 = 32;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Major problem: Unlocker attempted to unlock a mutex not owned by the current thread!\"", (uint8_t *)&v7, 0x12u);
    }
  }
  return a1;
}

uint64_t sub_524FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v6 = sub_13714(a1, a2, a3, a4);
  if (!v6) {
    return 4294967246;
  }
  uint64_t v8 = *(uint64_t (**)(__n128))(*(void *)v6 + 72);
  v7.n128_f32[0] = a5;

  return v8(v7);
}

uint64_t sub_52588(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t v2 = (os_log_t *)sub_32A48(13);
      int v3 = *v2;
      if (*v2)
      {
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = 136315394;
          __n128 v7 = "Oath.h";
          __int16 v8 = 1024;
          int v9 = 41;
          _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Contract broken: object initialized to require a call to Fulfill, but no call was made. Manually executing Fulfill to avoid breaking the oath.", (uint8_t *)&v6, 0x12u);
        }
      }
    }
  }
  sub_52A2C(a1);
  uint64_t v4 = sub_4F6C8((void *)(a1 + 8));
  sub_4F750(v4);
  return a1;
}

void sub_52678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 43;
      uint64_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    char v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int64_t v23 = v22;
      uint64_t v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 43;
        uint64_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      unsigned int v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 43;
        uint64_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x52638);
}

unsigned char *sub_528DC(unsigned char *a1, char a2, uint64_t a3)
{
  *a1 = a2;
  sub_4F7D4((uint64_t)(a1 + 8), a3);
  if (!*(void *)(a3 + 24))
  {
    int v6 = (os_log_t *)sub_32A48(13);
    __n128 v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "Oath.h";
      __int16 v11 = 1024;
      int v12 = 34;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inFunction is NULL]: \"inFunction is a nullptr.\"", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inFunction is a nullptr.");
  }
  return a1;
}

void sub_52A04(_Unwind_Exception *a1)
{
  sub_4F750(v1);
  _Unwind_Resume(a1);
}

void *sub_52A2C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result)
  {
    int v3 = (void *)(a1 + 8);
    (*(void (**)(void *))(*result + 48))(result);
    return sub_4F6C8(v3);
  }
  return result;
}

void sub_52A9C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int **a7)
{
  if (*(void *)(a1 + 1160))
  {
    if (sub_23AC0())
    {
      sub_EF50(a1, a2, a3, a4, (unsigned int **)a5, a6, a7);
    }
    else
    {
      unsigned int v35 = a4;
      if (*(unsigned char *)(a1 + 448))
      {
        *(_WORD *)&AudioObjectPropertyAddress buf[2] = *(_WORD *)(a1 + 682);
        *(_WORD *)AudioObjectPropertyAddress buf = *(_WORD *)(a1 + 682);
        WORD1(__p[0]) = *(_WORD *)(a1 + 682) == 0;
        LOWORD(__p[0]) = *(_WORD *)(a1 + 682);
        int v20 = *(_DWORD *)buf;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 680), (unsigned int *)&v20, __p[0]);
        uint64_t v21 = 424;
        if (*(_WORD *)(a1 + 682))
        {
          uint64_t v21 = 400;
          uint64_t v22 = a1 + 400;
        }
        else
        {
          uint64_t v22 = a1 + 424;
        }
        uint64_t v36 = v21;
        uint64_t v23 = *(void *)(v22 + 8) - *(void *)(a1 + v21);
        if (v23)
        {
          uint64_t v24 = 0;
          unint64_t v25 = v23 / 24;
          unint64_t v26 = v25 - 1;
          if (v25 <= 1) {
            uint64_t v27 = 1;
          }
          else {
            uint64_t v27 = v25;
          }
          uint64_t v28 = 8;
          uint64_t v29 = 16;
          do
          {
            uint64_t v30 = (uint64_t *)a5;
            if (v24) {
              uint64_t v30 = (uint64_t *)(*(void *)(a1 + 976) + v29 - 16);
            }
            uint64_t v31 = *v30;
            __p[0] = 0;
            uint64_t v32 = (void **)a7;
            if (v26 != v24) {
              uint64_t v32 = (void **)(*(void *)(a1 + 976) + v29);
            }
            __p[0] = *v32;
            uint64_t v33 = *(void *)(a1 + v36);
            if ((*(unsigned int (**)(void))(**(void **)(v33 + v28) + 216))(*(void *)(v33 + v28)))
            {
              *(void *)AudioObjectPropertyAddress buf = v31;
              *(void *)&uint8_t buf[8] = 0;
              if (v35 >= 2) {
                *(void *)&uint8_t buf[8] = *(void *)(a5 + 8);
              }
              (*(void (**)(void, uint64_t, void))(**(void **)(v33 + v28) + 112))(*(void *)(v33 + v28), a2, a3);
            }
            else if (__p[0])
            {
              (*(void (**)(void, uint64_t, void))(**(void **)(v33 + v28) + 104))(*(void *)(v33 + v28), a2, a3);
            }
            ++v24;
            v28 += 24;
            v29 += 32;
          }
          while (v27 != v24);
        }
      }
    }
  }
  else
  {
    if (a6)
    {
      uint64_t v12 = 0;
      uint64_t v13 = a6;
      do
      {
        uint64_t v14 = a7[v12];
        unint64_t v15 = *v14;
        if (v15)
        {
          unint64_t v16 = 0;
          os_log_t v17 = (void **)(v14 + 4);
          do
          {
            if (*v17)
            {
              bzero(*v17, *((unsigned int *)v17 - 1));
              unint64_t v15 = *v14;
            }
            ++v16;
            v17 += 2;
          }
          while (v16 < v15);
        }
        ++v12;
      }
      while (v12 != v13);
    }
    int v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 735) < 0)
      {
        sub_21E8C(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
        uint64_t v40 = *(void *)(a1 + 728);
      }
      uint64_t v34 = __p;
      if (v40 < 0) {
        uint64_t v34 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 270;
      __int16 v42 = 2080;
      uint64_t v43 = v34;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: HAL Speaker Protection is not available for DSP chain %s", buf, 0x1Cu);
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t sub_52E7C(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, float a5)
{
  unint64_t v10 = sub_23BA8(a2, a3);
  if (HIDWORD(v10))
  {
    uint64_t v18 = v10;
    if (sub_23B50(v10))
    {
      uint64_t v19 = *(void *)(a1 + 1160);
      if (!v19)
      {
        uint64_t v22 = (os_log_t *)sub_32A48(13);
        uint64_t v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_21E8C(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }
          else
          {
            *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 712);
            uint64_t v29 = *(void *)(a1 + 728);
          }
          uint64_t v24 = __dst;
          if (v29 < 0) {
            uint64_t v24 = (void **)__dst[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v32 = 1024;
          int v33 = 123;
          __int16 v34 = 2080;
          unsigned int v35 = v24;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL Speaker Protection is not available for DSP chain %s\"", buf, 0x1Cu);
          if (SHIBYTE(v29) < 0) {
            operator delete(__dst[0]);
          }
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }
      uint64_t v20 = *(void *)(v19 + 16);
      char v21 = *(unsigned char *)(v19 + 148);
      return sub_68260(v20, v21, v18, a5);
    }
    else
    {
      return sub_54B48(a1, 0x64737067u, v18, a4, a5);
    }
  }
  else
  {
    __int16 v11 = (os_log_t *)sub_32A48(24);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, a2);
      int v13 = SHIBYTE(v29);
      uint64_t v14 = (void **)__dst[0];
      sub_2417C(__p, a3);
      unint64_t v15 = __dst;
      if (v13 < 0) {
        unint64_t v15 = v14;
      }
      if (v27 >= 0) {
        unint64_t v16 = __p;
      }
      else {
        unint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v31 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v32 = 1024;
      int v33 = 134;
      __int16 v34 = 2080;
      unsigned int v35 = v15;
      __int16 v36 = 2080;
      uint64_t v37 = v16;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d TranslateToDSPGraphParameter failure for AU subtype %s as graph parameter %s", buf, 0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(__dst[0]);
      }
    }
    return 4294967246;
  }
}

void sub_531BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void sub_531F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    goto LABEL_6;
  }
  int v3 = (os_log_t *)sub_32A48(16);
  uint64_t v4 = *v3;
  if (*v3)
  {
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "HapticDebugIODelegate.cpp";
      __int16 v7 = 1024;
      int v8 = 197;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HapticDebugDelegate not instantiated yet", (uint8_t *)&v5, 0x12u);
    }
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
LABEL_6:
  }
    sub_6E68(v2);
}

uint64_t sub_532C4(uint64_t a1)
{
  sub_B680(&v5, (void *)(a1 + 184), "", 2024);
  for (uint64_t i = v6; &v5 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    int v3 = (std::__shared_weak_count *)i[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 144))(v2);
    if (v3) {
      sub_4636C(v3);
    }
  }
  sub_B8E4(&v5);
  return 0;
}

void sub_533BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_4636C(v2);
  }
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_533E0(uint64_t a1)
{
  sub_B680(&v5, (void *)(a1 + 184), "", 2054);
  for (uint64_t i = v6; &v5 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    int v3 = (std::__shared_weak_count *)i[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 152))(v2);
    if (v3) {
      sub_4636C(v3);
    }
  }
  sub_B8E4(&v5);
  return 0;
}

void sub_534D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_4636C(v2);
  }
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_534FC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_537E0((void *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 768) & 0xFFFFFFFE) == 2)
  {
    uint64_t v6 = *a3;
    if (*a3)
    {
      if (*(void *)(a1 + 800))
      {
        if ((*(unsigned char *)a2 & 2) != 0)
        {
          int v7 = *(_DWORD *)(*(void *)(a1 + 808) + 4);
          uint64_t v8 = 0x100000000;
          int v9 = 0;
          int v10 = v7;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, &v8, *(void *)(a1 + 832) + 40, a1 + 784);
        }
      }
    }
  }
}

void sub_535B0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_535E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(*(_DWORD *)(a1 + 768))
  {
    case 0:
      goto LABEL_10;
    case 1:
      if (a2) {
        goto LABEL_14;
      }
      a2 = 0;
      goto LABEL_10;
    case 2:
      if ((a2 & 1) == 0) {
        goto LABEL_17;
      }
      a2 = 1;
LABEL_10:
      uint64_t result = sub_28195C(a1, a2, a3, a4, a5);
      break;
    case 3:
      if (a2)
      {
LABEL_14:
        uint64_t result = sub_6468(a1, a3, a4, a5);
      }
      else
      {
LABEL_17:
        uint64_t result = sub_268048(a1, a3, a4, a5);
      }
      break;
    default:
      uint64_t v5 = (os_log_t *)sub_32A48(13);
      uint64_t v6 = *v5;
      if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        int v9 = "AggregateDevice_Simple.cpp";
        __int16 v10 = 1024;
        int v11 = 758;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unsupported speaker input\"", (uint8_t *)&v8, 0x12u);
      }
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_537E0(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (byte_64A228 || byte_64A229)
  {
    sub_54750(buf, (uint64_t)a1, a2);
    uint64_t v6 = *(void *)buf;
    *a3 = *(void *)buf;
    uint64_t v7 = (uint64_t)(a1 + 86);
    if (a1[87] != a1[86])
    {
      uint64_t v8 = a1[65];
      if (a1[66] == v8)
      {
        __int16 v52 = (os_log_t *)sub_32A48(13);
        unint64_t v53 = *v52;
        if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1471;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Expected at least one input stream.  Found 0.\"", buf, 0x12u);
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Expected at least one input stream.  Found 0.");
      }
      sub_3524(v59, (void *)(*(void *)v8 + 112));
      if (v60)
      {
        uint64_t v9 = *a2;
        if ((*a2 & 2) != 0)
        {
          uint64_t v10 = sub_32A48(16);
          uint64_t v11 = sub_32A48(40);
          char v12 = 0;
          uint64_t v13 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v14 = *(void *)(v10 + 8);
          while (1)
          {
            uint64_t v15 = *(int *)&buf[4 * v13];
            char v16 = v12;
            if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
              break;
            }
            char v12 = 1;
            uint64_t v13 = 1;
            if (v16)
            {
              if ((v14 & 1) == 0) {
                goto LABEL_20;
              }
              goto LABEL_17;
            }
          }
          if ((v14 & v15) == 0) {
            uint64_t v10 = v11;
          }
          if (*(void *)(v10 + 8))
          {
LABEL_17:
            os_log_t v17 = *(NSObject **)v10;
            if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1480;
              _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitor for primary input streams", buf, 0x12u);
            }
          }
LABEL_20:
          uint64_t v18 = sub_4CD70((uint64_t)(a1 + 86), 0, 0);
          long long v19 = *(_OWORD *)(v18 + 56);
          *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v18 + 40);
          *(_OWORD *)&buf[16] = v19;
          uint64_t v62 = *(void *)(v18 + 72);
          long long v58 = xmmword_4E7990;
          if (v6) {
            (*(void (**)(uint64_t, long long *, unsigned char *, uint64_t *))(*(void *)v6 + 16))(v6, &v58, buf, v59);
          }
          uint64_t v9 = *a2;
        }
        if ((v9 & 4) != 0)
        {
          uint64_t v20 = sub_32A48(16);
          uint64_t v21 = sub_32A48(40);
          char v22 = 0;
          uint64_t v23 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v24 = *(void *)(v20 + 8);
          while (1)
          {
            uint64_t v25 = *(int *)&buf[4 * v23];
            char v26 = v22;
            if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
              break;
            }
            char v22 = 1;
            uint64_t v23 = 1;
            if (v26)
            {
              if ((v24 & 1) == 0) {
                goto LABEL_35;
              }
              goto LABEL_32;
            }
          }
          if ((v24 & v25) == 0) {
            uint64_t v20 = v21;
          }
          if (*(void *)(v20 + 8))
          {
LABEL_32:
            char v27 = *(NSObject **)v20;
            if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1487;
              _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitor for secondary input streams", buf, 0x12u);
            }
          }
LABEL_35:
          uint64_t v28 = sub_4CD70((uint64_t)(a1 + 86), 0, 0);
          long long v29 = *(_OWORD *)(v28 + 16);
          *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v28;
          *(_OWORD *)&buf[16] = v29;
          uint64_t v62 = *(void *)(v28 + 32);
          long long v58 = xmmword_4E7A30;
          if (v6) {
            (*(void (**)(uint64_t, long long *, unsigned char *, uint64_t *))(*(void *)v6 + 16))(v6, &v58, buf, v59);
          }
        }
      }
      sub_8108(v59);
    }
    if (a1[90] != a1[89])
    {
      uint64_t v30 = a1[68];
      if (a1[69] == v30)
      {
        int v55 = (os_log_t *)sub_32A48(13);
        int v56 = *v55;
        if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1498;
          _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Expected at least one output stream.  Found 0.\"", buf, 0x12u);
        }
        uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Expected at least one output stream.  Found 0.");
      }
      sub_3524(v59, (void *)(*(void *)v30 + 112));
      if (v60)
      {
        uint64_t v31 = *a2;
        if ((*a2 & 4) != 0)
        {
          uint64_t v32 = sub_32A48(16);
          uint64_t v33 = sub_32A48(40);
          char v34 = 0;
          uint64_t v35 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v36 = *(void *)(v32 + 8);
          while (1)
          {
            uint64_t v37 = *(int *)&buf[4 * v35];
            char v38 = v34;
            if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
              break;
            }
            char v34 = 1;
            uint64_t v35 = 1;
            if (v38)
            {
              if ((v36 & 1) == 0) {
                goto LABEL_53;
              }
              goto LABEL_50;
            }
          }
          if ((v36 & v37) == 0) {
            uint64_t v32 = v33;
          }
          if (*(void *)(v32 + 8))
          {
LABEL_50:
            __int16 v39 = *(NSObject **)v32;
            if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1507;
              _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitor for secondary ouput streams", buf, 0x12u);
            }
          }
LABEL_53:
          uint64_t v40 = sub_4CD70(v7, 1, 0);
          long long v41 = *(_OWORD *)(v40 + 16);
          *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v40;
          *(_OWORD *)&buf[16] = v41;
          uint64_t v62 = *(void *)(v40 + 32);
          long long v58 = xmmword_4E7A40;
          if (v6) {
            (*(void (**)(uint64_t, long long *, unsigned char *, uint64_t *))(*(void *)v6 + 16))(v6, &v58, buf, v59);
          }
          uint64_t v31 = *a2;
        }
        if ((v31 & 2) != 0)
        {
          uint64_t v42 = sub_32A48(16);
          uint64_t v43 = sub_32A48(40);
          char v44 = 0;
          uint64_t v45 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v46 = *(void *)(v42 + 8);
          while (1)
          {
            uint64_t v47 = *(int *)&buf[4 * v45];
            char v48 = v44;
            if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
              break;
            }
            char v44 = 1;
            uint64_t v45 = 1;
            if (v48)
            {
              if ((v46 & 1) == 0) {
                goto LABEL_68;
              }
              goto LABEL_65;
            }
          }
          if ((v46 & v47) == 0) {
            uint64_t v42 = v43;
          }
          if (*(void *)(v42 + 8))
          {
LABEL_65:
            int64x2_t v49 = *(NSObject **)v42;
            if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1514;
              _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitor for primary ouput streams", buf, 0x12u);
            }
          }
LABEL_68:
          uint64_t v50 = sub_4CD70(v7, 1, 0);
          long long v51 = *(_OWORD *)(v50 + 56);
          *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v50 + 40);
          *(_OWORD *)&buf[16] = v51;
          uint64_t v62 = *(void *)(v50 + 72);
          long long v58 = xmmword_4E7A50;
          if (v6) {
            (*(void (**)(uint64_t, long long *, unsigned char *, uint64_t *))(*(void *)v6 + 16))(v6, &v58, buf, v59);
          }
        }
      }
      sub_8108(v59);
    }
  }
}

void sub_53FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_8108((uint64_t *)va);
  void *v4 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

void sub_54050(void *a1)
{
  if (qword_64A2F8)
  {
    uint64_t v2 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_64A2F8);
    int v3 = v2;
    if (v2 && qword_64A2F0)
    {
      *a1 = qword_64A2F0;
      a1[1] = v2;
      return;
    }
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = off_61FBD0;
  *((void *)v4 + 3) = 850045863;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((void *)v4 + 10) = 0;
  *((void *)v4 + 11) = v4 + 96;
  v4[112] = 0;
  atomic_store(FigCaptureSpeakerInterferenceMitigationIsRequired() != 0, (unsigned __int8 *)v4 + 112);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, v4 + 24, (CFNotificationCallback)sub_A9AA0, kFigCaptureNotification_SpeakerInterferenceMitigationRequiredChanged, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v6 = (os_log_t *)sub_32A48(24);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    uint64_t v10 = "SpeakerInterferenceMitigationIODelegate.cpp";
    __int16 v11 = 1024;
    int v12 = 94;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Central speaker interference mitigation handler is created", (uint8_t *)&v9, 0x12u);
  }
  *a1 = v4 + 24;
  a1[1] = v4;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
  qword_64A2F0 = (uint64_t)(v4 + 24);
  uint64_t v8 = (std::__shared_weak_count *)qword_64A2F8;
  qword_64A2F8 = (uint64_t)v4;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v3) {
    sub_4636C(v3);
  }
}

void sub_54224(_Unwind_Exception *a1)
{
  sub_A9A4C(&v2[4].~__shared_weak_count);
  std::mutex::~mutex(v3);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(a1);
}

void sub_544BC(caulk::concurrent::message *this)
{
  *(void *)this = off_6351D0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

unsigned char *sub_54550(void *a1, uint64_t a2)
{
  int v9 = &qword_65D7F8;
  char v10 = (*(uint64_t (**)(uint64_t *))(qword_65D7F8 + 16))(&qword_65D7F8);
  for (uint64_t i = (uint64_t *)qword_65D7E8; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == &qword_65D7E0)
    {
      *a1 = 0;
      a1[1] = 0;
      return sub_3BCAC(&v9);
    }
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(i[2] + 60));
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = (void *)i[2];
      if (*v6 == a2) {
        break;
      }
    }
  }
  uint64_t v8 = i[3];
  *a1 = v6;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_3BCAC(&v9);
}

void sub_54618()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D858, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65D858))
  {
    sub_39B878();
    __cxa_guard_release(&qword_65D858);
  }
}

void sub_5467C(_Unwind_Exception *a1)
{
}

void sub_54694()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669CE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_669CE8))
  {
    int v0 = sub_13910();
    uint64_t v1 = v0;
    if (v0) {
      dispatch_retain(v0);
    }
    dispatch_object_t object = v1;
    caulk::concurrent::messenger::messenger((caulk::concurrent::messenger *)&unk_669CD8, (const queue *)&object);
    if (object) {
      dispatch_release(object);
    }
    __cxa_guard_release(&qword_669CE8);
  }
}

void sub_5471C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  __cxa_guard_abort(&qword_669CE8);
  _Unwind_Resume(a1);
}

void sub_54750(void *a1, uint64_t a2, void *a3)
{
  *a1 = 0;
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (byte_64A228 || byte_64A229) && ((*a3 >> 1))
  {
    sub_2417C(&v9, *(_DWORD *)(a2 + 268));
    std::to_string(&v8, *(_DWORD *)(a2 + 272));
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v5 = &v8;
    }
    else {
      unsigned __int8 v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v8.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = std::string::append(&v9, (const std::string::value_type *)v5, size);
    std::string __p = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_3DA6A4();
  }
}

void sub_54874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  *char v26 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_548CC(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  if (v1 == a1) {
    return 1;
  }
  while (1)
  {
    int v3 = (std::__shared_weak_count *)v1[3];
    if (!v3) {
      goto LABEL_20;
    }
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (!v4) {
      goto LABEL_20;
    }
    uint64_t v5 = v1[2];
    if (v5)
    {
      int v6 = *(_DWORD *)(v5 + 144);
      if (v6 > 1886155112)
      {
        if (v6 == 1886155113 || v6 == 1886155119 || v6 == 1886613618) {
          break;
        }
        goto LABEL_19;
      }
      if (v6 == 1885432182 || v6 == 1885891433) {
        break;
      }
    }
LABEL_19:
    sub_4636C(v4);
LABEL_20:
    uint64_t v1 = (void *)v1[1];
    if (v1 == a1) {
      return 1;
    }
  }
  sub_4636C(v4);
  return 0;
}

std::__shared_weak_count *sub_549A4(uint64_t *a1, uint64_t *a2, char *a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    __int16 v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        uint64_t v14 = strrchr(a3, 47);
        if (v14) {
          uint64_t v13 = v14 + 1;
        }
        else {
          uint64_t v13 = a3;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      os_log_t v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_54B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_54B48(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v10 = sub_23BA8(a2, a3);
  __int16 v11 = (os_log_t *)sub_32A48(24);
  int v12 = *v11;
  if (HIDWORD(v10))
  {
    if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v27, a3);
      if (v28 >= 0) {
        __int16 v18 = v27;
      }
      else {
        __int16 v18 = (void **)v27[0];
      }
      sub_2417C(__p, a2);
      int v19 = v26;
      __int16 v20 = (void **)__p[0];
      sub_2417C(v23, v10);
      uint64_t v21 = __p;
      if (v19 < 0) {
        uint64_t v21 = v20;
      }
      if (v24 >= 0) {
        __int16 v22 = v23;
      }
      else {
        __int16 v22 = (void **)v23[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v30 = "DSPGraphChain.cpp";
      __int16 v31 = 1024;
      int v32 = 223;
      __int16 v33 = 2080;
      char v34 = v18;
      __int16 v35 = 2080;
      uint64_t v36 = v21;
      __int16 v37 = 2080;
      double v38 = *(double *)&v22;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Translatating DSPParameter <%s, %s> as graph parameter %s", buf, 0x30u);
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    return sub_524FC(a1, 1685287015, v10, a4, a5);
  }
  else
  {
    if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v27, a3);
      int v13 = v28;
      uint64_t v14 = (void **)v27[0];
      sub_2417C(__p, a2);
      uint64_t v15 = v27;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v26 >= 0) {
        char v16 = __p;
      }
      else {
        char v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v30 = "DSPGraphChain.cpp";
      __int16 v31 = 1024;
      int v32 = 228;
      __int16 v33 = 2080;
      char v34 = v15;
      __int16 v35 = 2080;
      uint64_t v36 = v16;
      __int16 v37 = 2048;
      double v38 = a5;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting DSPParameter %s for AU subtype %s: %f", buf, 0x30u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    return sub_524FC(a1, a2, a3, a4, a5);
  }
}

void sub_54E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_54E58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    sub_3B9AC(*(void *)a1);
    uint64_t v4 = (uint64_t *)(v2 + 144);
    for (uint64_t i = *(uint64_t **)(v2 + 152); i != v4; uint64_t i = (uint64_t *)i[1])
    {
      if (i[2] == v3)
      {
        if (v4 != i)
        {
          uint64_t v6 = *i;
          *(void *)(v6 + 8) = i[1];
          *(void *)i[1] = v6;
          --*(void *)(v2 + 160);
          operator delete(i);
          goto LABEL_11;
        }
        break;
      }
    }
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    std::string v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "RoutingMutex.cpp";
      __int16 v15 = 1024;
      int v16 = 181;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"VAD instance not found in list\"", (uint8_t *)&v13, 0x12u);
    }
LABEL_11:
    int v9 = *(_DWORD *)(v2 + 140);
    if (v9) {
      goto LABEL_16;
    }
    unint64_t v10 = (os_log_t *)sub_32A48(13);
    __int16 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "RoutingMutex.cpp";
      __int16 v15 = 1024;
      int v16 = 187;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"no one was blocking on a VAD IO thread\"", (uint8_t *)&v13, 0x12u);
    }
    int v9 = *(_DWORD *)(v2 + 140);
    if (v9) {
LABEL_16:
    }
      *(_DWORD *)(v2 + 140) = v9 - 1;
    sub_43D580(v2);
  }
  return a1;
}

void sub_55014(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

BOOL sub_55020(AudioObjectID a1, const AudioObjectPropertyAddress *a2)
{
  Boolean outIsSettable = 0;
  if (AudioObjectIsPropertySettable(a1, a2, &outIsSettable)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = outIsSettable == 0;
  }
  return !v2;
}

void *sub_5505C(void *a1, CFTypeRef cf)
{
  *a1 = off_640A60;
  if (cf) {
    CFRetain(cf);
  }
  a1[1] = cf;
  return a1;
}

uint64_t sub_550B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    BOOL v2 = *(OpaqueAudioComponentInstance **)(v1 + 16);
  }
  else {
    BOOL v2 = 0;
  }
  return AudioUnitReset(v2, 0, 0);
}

uint64_t sub_550D4(uint64_t a1, AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, UInt32 inNumberInputBufferLists, const AudioBufferList **inInputBufferLists, UInt32 inNumberOutputBufferLists, AudioBufferList **ioOutputBufferLists)
{
  AudioUnitRenderActionFlags ioActionFlags = 512;
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    std::string v8 = *(OpaqueAudioComponentInstance **)(v7 + 16);
  }
  else {
    std::string v8 = 0;
  }
  return AudioUnitProcessMultiple(v8, &ioActionFlags, inTimeStamp, inNumberFrames, inNumberInputBufferLists, inInputBufferLists, inNumberOutputBufferLists, ioOutputBufferLists);
}

void sub_5512C()
{
}

uint64_t sub_55140(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 16);
    if (*(unsigned char *)(result + 92)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 368))(a2, v2, result + 24, *(unsigned int *)(result + 88));
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352))(a2, v2);
    }
  }
  return result;
}

BOOL sub_551C4(uint64_t a1)
{
  return !sub_51CA0(*(void *)(a1 + 640));
}

void sub_551E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1073))
  {
    int v2 = 100;
    while ((*(unsigned int (**)(void))(**(void **)(a1 + 1008) + 272))(*(void *)(a1 + 1008)))
    {
      usleep(0x1388u);
      uint64_t v3 = (os_log_t *)sub_32A48(1);
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v6 = "VirtualAudio_Device.cpp";
          __int16 v7 = 1024;
          int v8 = 3494;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Timeout waiting for Stop to finish.", buf, 0x12u);
        }
      }
      *(unsigned char *)(a1 + 1073) = 0;
      if (!--v2) {
        return;
      }
    }
    *(unsigned char *)(a1 + 1073) = 0;
  }
}

uint64_t sub_55328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 472);
  for (uint64_t i = *(void *)(v4 + 8); i != *(void *)(v4 + 16); i += 8)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B3830(v4, a2);
        sub_551E4(a1);
        uint64_t v6 = **(void **)(a1 + 1008);
        if (a2)
        {
          uint64_t result = (*(uint64_t (**)(void))(v6 + 448))();
          int v8 = *(_DWORD *)(*(void *)(a1 + 464) + 112);
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(void))(v6 + 440))();
          int v8 = *(_DWORD *)(*(void *)(a1 + 464) + 116);
        }
        if (v8 == 1 && (result & 1) == 0) {
          return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 560))(a1, a2 == 0);
        }
        return result;
      }
      break;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      goto LABEL_7;
    }
  }
  uint64_t result = *(void *)(a1 + 464);
  for (uint64_t j = *(void *)(result + 8); ; j += 8)
  {
    if (j == *(void *)(result + 16))
    {
      uint64_t v10 = 0;
      goto LABEL_16;
    }
    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8) == a2)
    {
      BOOL v11 = a2 == 0;
      goto LABEL_20;
    }
  }
  uint64_t v10 = a2;
LABEL_16:
  BOOL v11 = a2 == 0;
  if (a2 && !v10) {
    return result;
  }
LABEL_20:
  sub_55770(result, a2);
  sub_551E4(a1);
  uint64_t v12 = **(void **)(a1 + 1008);
  if (v11)
  {
    uint64_t result = (*(uint64_t (**)(void))(v12 + 440))();
    int v13 = *(_DWORD *)(*(void *)(a1 + 464) + 116);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v12 + 448))();
    int v13 = *(_DWORD *)(*(void *)(a1 + 464) + 112);
  }
  if (v13 == 1 && (result & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 560))(a1, v11);
  }
  return result;
}

void sub_5558C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0x5555CLL);
      }
    }
    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }
    sub_B242C(*(void *)(v10 + 472), v9);
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    __int16 v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3289;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error starting the io engine\"", (uint8_t *)&a9, 0x12u);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v13;
  }
  _Unwind_Resume(a1);
}

void sub_55770(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v4 = *i;
      if (*i == a2)
      {
        uint64_t v4 = a2;
LABEL_9:
        if (!*(unsigned char *)(v4 + 54))
        {
          *(unsigned char *)(v4 + 54) = 1;
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 72) = 0u;
          *(_OWORD *)(v4 + 88) = 0u;
          *(_OWORD *)(v4 + 104) = 0u;
          *(_DWORD *)(v4 + 120) = 0;
          ++*(_DWORD *)(a1 + 112);
          sub_B25F8(a1, v4);
          sub_B26A4((_DWORD **)a1);
        }
        return;
      }
      if (*(void *)(v4 + 8) == a2) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 116);
  }
}

uint64_t sub_55834(uint64_t a1)
{
  int v2 = *(OpaqueAudioConverter **)(a1 + 80);
  if (v2)
  {
    AudioConverterDispose(v2);
    *(void *)(a1 + 80) = 0;
  }
  return a1;
}

void sub_5586C(OpaqueAudioConverter *a1, UInt32 a2, AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  if (a1)
  {
    AudioConverterConvertComplexBuffer(a1, a2, inInputData, outOutputData);
  }
  else
  {
    BOOL v14 = 0;
    if (sub_12564(&inInputData->mNumberBuffers, outOutputData, &v14))
    {
      if (!v14)
      {
        uint64_t v6 = outOutputData->mNumberBuffers >= inInputData->mNumberBuffers
           ? inInputData->mNumberBuffers
           : outOutputData->mNumberBuffers;
        if (v6)
        {
          p_mData = &outOutputData->mBuffers[0].mData;
          int v8 = &inInputData->mBuffers[0].mData;
          do
          {
            if (*p_mData != *v8)
            {
              unsigned int v9 = *((_DWORD *)p_mData - 1);
              unsigned int v10 = *((_DWORD *)v8 - 1);
              size_t v11 = v9 >= v10 ? v10 : v9;
              if (v11) {
                memcpy(*p_mData, *v8, v11);
              }
            }
            p_mData += 2;
            v8 += 2;
            --v6;
          }
          while (v6);
        }
      }
    }
    else
    {
      uint64_t v12 = (os_log_t *)sub_32A48(13);
      int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v16 = "DSPReformatter.cpp";
        __int16 v17 = 1024;
        int v18 = 148;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"No converter in place even though buffer lists differ in structure\"", buf, 0x12u);
      }
    }
  }
}

void sub_559F8(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  if (!a1)
  {
    int v16 = (os_log_t *)sub_32A48(13);
    __int16 v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v28 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v29 = 1024;
      int v30 = 240;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inObject is NULL]: \"inObject is nullptr.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inObject is nullptr.");
  }
  if (a2 && !a3)
  {
    int v19 = (os_log_t *)sub_32A48(13);
    __int16 v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v28 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v29 = 1024;
      int v30 = 242;
      __int16 v31 = 1024;
      unsigned int v32 = a2;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inAddresses is nullptr, but inNumberAddresses is %u.\"", buf, 0x18u);
    }
    uint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "inAddresses is nullptr, but inNumberAddresses is %u.");
  }
  if (!a4)
  {
    __int16 v22 = (os_log_t *)sub_32A48(13);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v28 = "VirtualAudio_DevicePropertyCache.cpp";
      __int16 v29 = 1024;
      int v30 = 243;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: \"inClientData is nullptr.\"", buf, 0x12u);
    }
    char v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "inClientData is nullptr.");
  }
  uint64_t i = a3;
  if (a2)
  {
    uint64_t v7 = 12 * a2;
    for (uint64_t i = a3; i[1] != *(_DWORD *)(a4 + 36) || *i != *(_DWORD *)(a4 + 32) || i[2] != *(_DWORD *)(a4 + 40); i += 3)
    {
      v7 -= 12;
      if (!v7) {
        return;
      }
    }
  }
  if (i != &a3[3 * a2])
  {
    int v8 = *(std::__shared_weak_count **)(a4 + 16);
    if (!v8
      || (uint64_t v9 = *(void *)(a4 + 24), v10 = *(void *)(a4 + 8), (v11 = std::__shared_weak_count::lock(v8)) == 0))
    {
      sub_5CABC();
    }
    uint64_t v12 = v11;
    uint64_t v25 = *(void *)(v9 + 8);
    char v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
    uint64_t v13 = *(void *)(v9 + 16);
    if (v13 && v13 == a1 && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a1))
    {
      if (*(_DWORD *)(v10 + 32) == 1635153007)
      {
        BOOL v14 = (os_log_t *)sub_32A48(1);
        __int16 v15 = *v14;
        if (*v14)
        {
          if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            char v28 = "VirtualAudio_DevicePropertyCache.cpp";
            __int16 v29 = 1024;
            int v30 = 432;
            _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d The AOP driver reports a Hey Siri trigger.", buf, 0x12u);
          }
        }
      }
      if (*(unsigned char *)(v9 + 48))
      {
        if (!*(unsigned char *)(v10 + 46)) {
          sub_74758((unint64_t *)(v9 + 56), (int *)(v10 + 32));
        }
      }
      else
      {
        sub_523D8(buf, *(void *)(v9 + 8));
        sub_8490(v9, 1, v10 + 32, 0);
        sub_52380(buf);
      }
    }
    sub_3BCAC(&v25);
    sub_4636C(v12);
  }
}

void sub_55E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_3BCAC(&a9);
  sub_4636C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_55EA4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 56);
  BOOL v4 = sub_27BB40(a1, a2, &v5);
  if (!v4) {
    *(_DWORD *)(a1 + 52) = v5;
  }
  return !v4;
}

CFArrayRef sub_55EFC(const void **values, uint64_t a2)
{
  CFArrayRef result = CFArrayCreate(0, values, (a2 - (uint64_t)values) >> 3, &kCFTypeArrayCallBacks);
  if (!result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  return result;
}

void sub_55F6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_55F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  if (v6 != 0x6DB6DB6DB6DB6DB7 * ((a5 - a4) >> 3))
  {
    __int16 v37 = (os_log_t *)sub_32A48(13);
    double v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v43 = "VirtualStream.cpp";
      __int16 v44 = 1024;
      int v45 = 226;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"format lists differ in size\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "format lists differ in size");
  }
  uint64_t v7 = a1;
  if (a2 == a1) {
    return 0;
  }
  uint64_t v9 = 0;
  double v10 = *(double *)a3;
  int v11 = *(_DWORD *)(a3 + 8);
  int v12 = *(_DWORD *)(a3 + 16);
  int v13 = *(_DWORD *)(a3 + 20);
  int v15 = *(_DWORD *)(a3 + 24);
  int v14 = *(_DWORD *)(a3 + 28);
  if (v6 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  }
  int v17 = *(_DWORD *)(a3 + 32);
  while (1)
  {
    if (*(double *)v7 == 0.0 || (v10 != 0.0 ? (BOOL v18 = *(double *)v7 == v10) : (BOOL v18 = 1), v18))
    {
      int v19 = *(_DWORD *)(v7 + 8);
      BOOL v20 = !v19 || v11 == 0;
      if (v20 || v19 == v11)
      {
        int v22 = *(_DWORD *)(v7 + 16);
        BOOL v23 = !v22 || v12 == 0;
        if (v23 || v22 == v12)
        {
          int v25 = *(_DWORD *)(v7 + 20);
          if (!v25 || !v13 || v25 == v13)
          {
            int v26 = *(_DWORD *)(v7 + 24);
            if (!v26 || !v15 || v26 == v15)
            {
              int v27 = *(_DWORD *)(v7 + 28);
              if (!v27 || !v14 || v27 == v14)
              {
                int v28 = *(_DWORD *)(v7 + 32);
                if (!v28 || !v17 || v28 == v17)
                {
                  uint64_t v40 = a6;
                  uint64_t v41 = a4;
                  int v29 = sub_EBDC(v7, a3);
                  a6 = v40;
                  a4 = v41;
                  if (v29)
                  {
                    if (*(double *)(v7 + 40) <= v10 && *(double *)(v7 + 48) >= v10) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v9;
    v7 += 56;
    if (v16 == v9) {
      return 0;
    }
  }
  __int16 v31 = (long long *)(v41 + 56 * v9);
  long long v33 = *v31;
  long long v32 = v31[1];
  *(void *)(v40 + 32) = *((void *)v31 + 4);
  *(_OWORD *)uint64_t v40 = v33;
  *(_OWORD *)(v40 + 16) = v32;
  if (*(double *)v40 == 0.0)
  {
    uint64_t v34 = v41 + 56 * v9;
    double v35 = *(double *)(v34 + 48);
    if (v35 > *(double *)a3) {
      double v35 = *(double *)a3;
    }
    if (*(double *)(v34 + 40) >= *(double *)a3) {
      double v36 = *(double *)(v34 + 40);
    }
    else {
      double v36 = v35;
    }
    *(double *)uint64_t v40 = v36;
  }
  return 1;
}

void sub_56224(_Unwind_Exception *exception_object)
{
}

uint64_t sub_56240(uint64_t a1)
{
  *(void *)(a1 + 16) = a1;
  sub_56F38(a1 + 16, (void *)(a1 + 24));
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  return a1;
}

void sub_56294(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_4636C(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_562AC(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  sub_56AD8((uint64_t)v4, a2);
  sub_56328(v2, (uint64_t)v4);
  return sub_56A54(v4);
}

void sub_5631C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_56328(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v5);
  }
  unint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768;
    void v11[2] = sub_568AC;
    v11[3] = &unk_61D750;
    sub_56AD8((uint64_t)v12, a2);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    void v9[2] = sub_568C8;
    void v9[3] = &unk_61D780;
    v9[4] = a1;
    v9[5] = v4;
    double v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v7 >> 47) ^ v7);
    objc_msgSend(v6, "register_for_inference_monitor_eventsWithHash:eventCallback:completionHandler:", 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)), v11, v9);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    sub_56A54(v12);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_564D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_564E4(void *a1)
{
}

id sub_564F8(uint64_t *a1)
{
  return sub_56500(*a1);
}

id sub_56500(uint64_t a1)
{
  id result = *(id *)a1;
  if (result) {
    return objc_msgSend(result, "unregister_from_inference_monitorWithObserver:completionHandler:", *(void *)(a1 + 8), &stru_61D810);
  }
  return result;
}

uint64_t sub_56534(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  sub_5657C(a1 + 16);
  sub_569F0(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_4636C(v3);
  }
  return a1;
}

uint64_t sub_5657C(uint64_t result)
{
  if (*(void *)(result + 8))
  {
    uint64_t v1 = result;
    uint64_t v2 = (caulk::semaphore *)(result + 24);
    sub_1B3350((caulk::semaphore *)(result + 24));
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
    if (v3) {
      sub_4636C(v3);
    }
    id result = caulk::semaphore::timed_wait(v2, -1.0);
    __dmb(9u);
  }
  return result;
}

void sub_565D0()
{
}

void sub_56628(_Unwind_Exception *a1)
{
  sub_57190(v1, 0);
  _Unwind_Resume(a1);
}

void sub_56640()
{
}

void sub_56718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  operator delete();
}

id sub_5676C(uint64_t *a1)
{
  return sub_56774(*a1);
}

id sub_56774(uint64_t a1)
{
  id result = *(id *)a1;
  if (result) {
    return [result acquireInPolicy:*(void *)(a1 + 8) inDescription:*(void *)(a1 + 16) completionHandler:&stru_61D830];
  }
  return result;
}

void sub_567A8(void ***a1)
{
}

void sub_567B0(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    [v2 invalidateWithCompletionHandler:&stru_61D850];
    uint64_t v3 = *a1;
    *a1 = 0;
  }
}

void ***sub_5680C(void ***a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_5657C((uint64_t)(a1 + 1));
  sub_569F0(v2);
  sub_57190(a1, 0);
  return a1;
}

void *sub_56854@<X0>(void *a1@<X8>)
{
  return sub_57314(a1);
}

void sub_5687C(uint64_t a1, uint64_t a2)
{
  sub_5743C((uint64_t)&v2, a1, a2);
}

uint64_t sub_568AC(uint64_t a1, char a2)
{
  return sub_4F86C(a1 + 32, a2);
}

uint64_t sub_568B4(uint64_t a1, uint64_t a2)
{
  return sub_56AD8(a1 + 32, a2 + 32);
}

void *sub_568C0(uint64_t a1)
{
  return sub_56A54((void *)(a1 + 32));
}

void sub_568C8(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      if (a1[5]) {
        *(void *)(v5 + 8) = a2;
      }
      sub_4636C(v6);
    }
  }
}

uint64_t sub_56938(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_56954(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_56964()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = &off_61D7D8;
}

void sub_569B4(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_569F0(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    _os_assert_log();
    uint64_t v4 = _os_crash();
    sub_57664(v4);
  }
  if (*(unsigned char *)(a1 + 40)) {
    caulk::semaphore::~semaphore((caulk::semaphore *)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_4636C(v2);
  }
  return a1;
}

void *sub_56A54(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_56AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_56B70@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  id result = sub_56BBC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_56BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_56BBC(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_61D880;
  sub_56C98((uint64_t)(a1 + 3));
  return a1;
}

void sub_56C04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_56C18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61D880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_56C38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61D880;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id *sub_56C8C(uint64_t a1)
{
  return sub_56EEC((id *)(a1 + 24));
}

uint64_t sub_56C98(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1;
  sub_56D2C(a1 + 16, (void *)(a1 + 24));
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t v2 = objc_alloc_init(VAModelManagerMonitor);
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = v2;

  return a1;
}

void sub_56D08(_Unwind_Exception *a1)
{
  sub_569F0(v2);

  _Unwind_Resume(a1);
}

void sub_56D2C(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = off_61D8D0;
  void v4[4] = 0;
  v4[5] = a1;
  v4[3] = 0;
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_56E64((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_56DA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61D8D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_56DC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61D8D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_56E14(uint64_t a1)
{
  return sub_56E20(a1 + 24);
}

uint64_t sub_56E20(uint64_t a1)
{
  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(void *)(a1 + 16) + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_56E64(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_4636C(v5);
      }
    }
  }
}

id *sub_56EEC(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  sub_5657C((uint64_t)(a1 + 2));
  sub_56500((uint64_t)a1);
  sub_569F0(v2);

  return a1;
}

void sub_56F38(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = off_61D920;
  void v4[4] = 0;
  v4[5] = a1;
  v4[3] = 0;
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_56E64((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_56FAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61D920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_56FCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61D920;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_57020(uint64_t a1)
{
  return sub_56E20(a1 + 24);
}

void sub_5702C(const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_57088(exception, a1);
}

void sub_57074(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_57088(std::logic_error *a1, const char *a2)
{
  id result = std::logic_error::logic_error(a1, a2);
  return result;
}

VAModelManagerAssertion **sub_570BC(VAModelManagerAssertion **a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v6 = objc_alloc_init(VAModelManagerAssertion);
  unint64_t v7 = *a1;
  *a1 = v6;

  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  uint64_t v8 = +[NSString stringWithCString:a2 encoding:4];
  uint64_t v9 = a1[1];
  a1[1] = (VAModelManagerAssertion *)v8;

  if (*((char *)a3 + 23) < 0) {
    a3 = (uint64_t *)*a3;
  }
  uint64_t v10 = +[NSString stringWithCString:a3 encoding:4];
  int v11 = a1[2];
  a1[2] = (VAModelManagerAssertion *)v10;

  return a1;
}

void sub_5716C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **sub_57190(void ***a1, void **a2)
{
  id result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_571E0(result);
    operator delete();
  }
  return result;
}

void **sub_571E0(void **a1)
{
  return a1;
}

void sub_57220(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = off_61D970;
  void v4[4] = 0;
  v4[5] = a1;
  v4[3] = 0;
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_56E64((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_57294(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61D970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_572B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61D970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_57308(uint64_t a1)
{
  return sub_56E20(a1 + 24);
}

void *sub_57314@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  id result = sub_57360(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_5734C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_57360(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_61D9C0;
  sub_56240((uint64_t)(a1 + 3));
  return a1;
}

void sub_573A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_573BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61D9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_573DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61D9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_57430(uint64_t a1)
{
  return sub_56534(a1 + 24);
}

void sub_5743C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = operator new(0x50uLL);
  sub_574A0(v5, a2, a3);
}

void sub_5748C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_574A0(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_61DA10;
  sub_5757C((uint64_t)(a1 + 3), a2, a3);
}

void sub_574E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_574FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61DA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_5751C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61DA10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void ***sub_57570(uint64_t a1)
{
  return sub_5680C((void ***)(a1 + 24));
}

void sub_5757C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_21E8C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v5 = *(void *)(a3 + 16);
  }
  sub_565D0();
}

void sub_57630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_57668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  sub_5B5B4(&qword_648828);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_57700, v3, 0);
}

uint64_t sub_57700()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[8] + OBJC_IVAR___VAModelManagerMonitor_mEventObservers;
  os_unfair_lock_lock((os_unfair_lock_t)v4);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v24 = *(void *)(v4 + 8);
  *(void *)(v4 + 8) = 0x8000000000000000;
  uint64_t v7 = sub_5ACC4((uint64_t)sub_5B630, v5, v1, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 8) = v24;
  swift_bridgeObjectRelease();
  if (v7) {
    sub_5B7C0(v7);
  }
  uint64_t v8 = v0[8];
  os_unfair_lock_unlock((os_unfair_lock_t)v4);
  uint64_t v9 = OBJC_IVAR___VAModelManagerMonitor_mInferenceTask;
  if (!*(void *)(v8 + OBJC_IVAR___VAModelManagerMonitor_mInferenceTask))
  {
    uint64_t v10 = v0[8];
    uint64_t v11 = v0[9];
    uint64_t v23 = v11;
    uint64_t v12 = sub_48EF00();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = sub_5C1E0(&qword_648838, (void (*)(uint64_t))type metadata accessor for VAModelManagerMonitor);
    int v14 = (void *)swift_allocObject();
    void v14[2] = v10;
    v14[3] = v13;
    v14[4] = v10;
    swift_retain_n();
    *(void *)(v8 + v9) = sub_58788(v23, (uint64_t)&unk_648840, (uint64_t)v14);
    swift_release();
  }
  swift_getKeyPath();
  os_unfair_lock_lock((os_unfair_lock_t)v4);
  v0[2] = *(void *)(v4 + 8);
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  swift_bridgeObjectRelease();
  uint64_t v15 = v0[3];
  os_unfair_lock_unlock((os_unfair_lock_t)v4);
  swift_release();
  if (qword_648B60 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_48EEA0();
  sub_5B668(v16, (uint64_t)qword_669D00);
  int v17 = sub_48EE90();
  os_log_type_t v18 = sub_48EF30();
  if (os_log_type_enabled(v17, v18))
  {
    int v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int v19 = 134217984;
    v0[4] = v15;
    sub_48EF50();
    _os_log_impl(&def_1E50E8, v17, v18, "VA ModelManagerMonitor:: adding observer %ld", v19, 0xCu);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  BOOL v20 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v21 = v0[5];
  return v20(v21);
}

uint64_t sub_57A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v6 = sub_48EE30();
  v4[6] = v6;
  v4[7] = *(void *)(v6 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  sub_5B5B4(&qword_648970);
  v4[10] = swift_task_alloc();
  uint64_t v7 = sub_48EE50();
  v4[11] = v7;
  v4[12] = *(void *)(v7 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_57BC8, a4, 0);
}

uint64_t sub_57BC8()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[5] + OBJC_IVAR___VAModelManagerMonitor_mInferenceMonitor, v3);
  uint64_t v4 = sub_48EE10();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[2] = v4;
  uint64_t v5 = sub_5C1E0(&qword_648838, (void (*)(uint64_t))type metadata accessor for VAModelManagerMonitor);
  uint64_t v6 = OBJC_IVAR___VAModelManagerMonitor_mEventObservers;
  v0[14] = v5;
  v0[15] = v6;
  uint64_t v7 = sub_48EE00();
  uint64_t v8 = sub_5C1E0(&qword_648978, (void (*)(uint64_t))&type metadata accessor for InferenceMonitor.AsyncIterator);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[16] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_57D50;
  uint64_t v10 = v0[10];
  return dispatch thunk of AsyncIteratorProtocol.next()(v10, v7, v8);
}

uint64_t sub_57D50()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (*(void *)(v2 + 40))
    {
      swift_getObjectType();
      uint64_t v3 = sub_48EED0();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = sub_58120;
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v6 = sub_57EBC;
    uint64_t v7 = *(void *)(v2 + 40);
    uint64_t v5 = 0;
  }
  return _swift_task_switch(v6, v7, v5);
}

void sub_57EBC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
LABEL_4:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (void (*)(void))v0[1];
    v4();
    return;
  }
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[9], v1, v2);
  if (sub_48EF20())
  {
    (*(void (**)(void, void))(v0[7] + 8))(v0[9], v0[6]);
    goto LABEL_4;
  }
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[5] + v0[15];
  (*(void (**)(void, void, void))(v0[7] + 16))(v0[8], v0[9], v0[6]);
  os_unfair_lock_lock((os_unfair_lock_t)v6);
  sub_583E4((uint64_t *)(v6 + 8));
  os_unfair_lock_unlock((os_unfair_lock_t)v6);
  if (!v5)
  {
    uint64_t v7 = v0[8];
    uint64_t v8 = v0[6];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0[7] + 8);
    v9(v0[9], v8);
    v9(v7, v8);
    uint64_t v10 = sub_48EE00();
    uint64_t v11 = sub_5C1E0(&qword_648978, (void (*)(uint64_t))&type metadata accessor for InferenceMonitor.AsyncIterator);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[16] = v12;
    void *v12 = v0;
    v12[1] = sub_57D50;
    uint64_t v13 = v0[10];
    dispatch thunk of AsyncIteratorProtocol.next()(v13, v10, v11);
  }
}

uint64_t sub_58120()
{
  uint64_t v1 = v0[5];
  v0[3] = v0[17];
  sub_5B5B4(&qword_648980);
  swift_willThrowTypedImpl();
  return _swift_task_switch(sub_581B0, v1, 0);
}

uint64_t sub_581B0()
{
  swift_release();
  if (qword_648B60 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_48EEA0();
  sub_5B668(v1, (uint64_t)qword_669D00);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = sub_48EE90();
  os_log_type_t v3 = sub_48EF30();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    sub_48EF50();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_1E50E8, v2, v3, "ModelManagerMonitor:: exception while executing Task...%@", v4, 0xCu);
    sub_5B5B4(&qword_648988);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_583E4(uint64_t *a1)
{
  uint64_t v2 = sub_48EE30();
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 64);
  uint64_t v30 = *a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = enum case for InferenceMonitor.Event.inferencesRunning(_:);
  uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  uint64_t v13 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  *(void *)&long long v16 = 67109120;
  long long v28 = v16;
  int v29 = v13;
  while (1)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      uint64_t v18 = (v10 - 1) & v10;
      int64_t v34 = v15;
      unint64_t v19 = v17 | (v15 << 6);
      goto LABEL_21;
    }
    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v31) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v30 + 8 * v20);
    int64_t v22 = v15 + 1;
    if (!v21)
    {
      int64_t v22 = v15 + 2;
      if (v15 + 2 >= v31) {
        return swift_release();
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v15 + 3;
        if (v15 + 3 >= v31) {
          return swift_release();
        }
        unint64_t v21 = *(void *)(v30 + 8 * v22);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v18 = (v21 - 1) & v21;
    int64_t v34 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_21:
    long long v32 = *(void (**)(char *))(*(void *)(v6 + 56) + 16 * v19);
    unint64_t v33 = v18;
    (*v12)(v5, v11, v2);
    swift_retain();
    int v35 = sub_48EE20();
    (*v13)(v5, v2);
    if (qword_648B60 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_48EEA0();
    sub_5B668(v24, (uint64_t)qword_669D00);
    uint64_t v25 = sub_48EE90();
    os_log_type_t v26 = sub_48EF30();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = v28;
      *(_DWORD *)(v27 + 4) = v35 & 1;
      _os_log_impl(&def_1E50E8, v25, v26, "VA ModelManagerMonitor calling observer with inferencesRunning  = %{BOOL}d", (uint8_t *)v27, 8u);
      uint64_t v13 = v29;
      swift_slowDealloc();
    }

    char v36 = v35 & 1;
    v32(&v36);
    uint64_t result = swift_release();
    unint64_t v10 = v33;
    int64_t v15 = v34;
  }
  uint64_t v23 = v15 + 4;
  if (v15 + 4 >= v31) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v30 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v15 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v31) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v30 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_58788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_48EF00();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_48EEF0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_5BB54(a1, &qword_648828);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_48EED0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_58934@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 16);
  return result;
}

uint64_t sub_58AD0(uint64_t a1, void *aBlock, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v7 = _Block_copy(aBlock);
  v4[3] = _Block_copy(a3);
  uint64_t v8 = swift_allocObject();
  void v4[4] = v8;
  *(void *)(v8 + 16) = v7;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_58BD4;
  return sub_57668(a1, (uint64_t)sub_5C0F8, v8);
}

uint64_t sub_58BD4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 24);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a1);
  _Block_release(*(const void **)(v3 + 24));
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_58D48(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_58D68, v1, 0);
}

uint64_t sub_58D68()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (os_unfair_lock_s *)(v2 + OBJC_IVAR___VAModelManagerMonitor_mEventObservers);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + OBJC_IVAR___VAModelManagerMonitor_mEventObservers));
  sub_58DF8((uint64_t)&v3[2], v1, v2);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_58DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    swift_task_reportUnexpectedExecutor();
  }
  if (qword_648B60 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_48EEA0();
  sub_5B668(v6, (uint64_t)qword_669D00);
  uint64_t v7 = sub_48EE90();
  os_log_type_t v8 = sub_48EF30();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&def_1E50E8, v7, v8, "VA ModelManagerMonitor::unregister_from_inference_monitor", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = sub_5B268(a2);
  if (v10) {
    sub_5B7C0(v10);
  }
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = sub_48EE90();
  os_log_type_t v13 = sub_48EF30();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    sub_48EF50();
    _os_log_impl(&def_1E50E8, v12, v13, "VA ModelManagerMonitor:: remaining observers count %ld", v14, 0xCu);
    swift_slowDealloc();
  }

  if (!v11)
  {
    uint64_t v15 = OBJC_IVAR___VAModelManagerMonitor_mInferenceTask;
    if (*(void *)(a3 + OBJC_IVAR___VAModelManagerMonitor_mInferenceTask))
    {
      swift_retain();
      sub_48EF10();
      swift_release();
    }
    *(void *)(a3 + v15) = 0;
    swift_release();
  }
}

uint64_t sub_591B0(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  swift_retain();
  return _swift_task_switch(sub_59230, a3, 0);
}

uint64_t sub_59230()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v1 + OBJC_IVAR___VAModelManagerMonitor_mEventObservers);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + OBJC_IVAR___VAModelManagerMonitor_mEventObservers));
  sub_58DF8((uint64_t)&v4[2], v3, v1);
  os_unfair_lock_unlock(v4);
  swift_release();
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_592E8()
{
  uint64_t v1 = v0 + OBJC_IVAR___VAModelManagerMonitor_mEventObservers;
  os_unfair_lock_lock((os_unfair_lock_t)(v0 + OBJC_IVAR___VAModelManagerMonitor_mEventObservers));
  swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = &_swiftEmptyDictionarySingleton;
  os_unfair_lock_unlock((os_unfair_lock_t)v1);
  uint64_t v2 = OBJC_IVAR___VAModelManagerMonitor_mInferenceTask;
  if (*(void *)(v0 + OBJC_IVAR___VAModelManagerMonitor_mInferenceTask))
  {
    swift_retain();
    sub_48EF10();
    swift_release();
  }
  *(void *)(v0 + v2) = 0;
  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR___VAModelManagerMonitor_mInferenceMonitor;
  uint64_t v4 = sub_48EE50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  sub_5BB54(v1, &qword_648850);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_593F8()
{
  sub_592E8();

  return _swift_defaultActor_deallocate(v0);
}

id sub_59424()
{
  uint64_t v1 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  swift_retain();
  sub_48EE40();
  *(void *)&v1[OBJC_IVAR___VAModelManagerMonitor_mInferenceTask] = 0;
  uint64_t v2 = &v1[OBJC_IVAR___VAModelManagerMonitor_mEventObservers];
  unint64_t v3 = sub_5B4AC((uint64_t)&_swiftEmptyArrayStorage);
  *(_DWORD *)uint64_t v2 = 0;
  *((void *)v2 + 1) = v3;
  swift_release();
  v5.receiver = v1;
  v5.super_class = v0;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_594D0()
{
  swift_defaultActor_initialize();
  swift_retain();
  sub_48EE40();
  *(void *)&v0[OBJC_IVAR___VAModelManagerMonitor_mInferenceTask] = 0;
  uint64_t v1 = &v0[OBJC_IVAR___VAModelManagerMonitor_mEventObservers];
  unint64_t v2 = sub_5B4AC((uint64_t)&_swiftEmptyArrayStorage);
  *(_DWORD *)uint64_t v1 = 0;
  *((void *)v1 + 1) = v2;
  swift_release();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for VAModelManagerMonitor();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t sub_59590()
{
  return v0;
}

uint64_t sub_5959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_595C4, v4, 0);
}

uint64_t sub_595C4()
{
  if (qword_648B60 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_48EEA0();
  sub_5B668(v1, (uint64_t)qword_669D00);
  unint64_t v2 = sub_48EE90();
  os_log_type_t v3 = sub_48EF30();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&def_1E50E8, v2, v3, "VA ModelManagerAssertion:: acquiring model manager assertion", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[6];

  if (*(void *)(v5 + 112))
  {
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    sub_48EE80();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log_type_t v8 = (void *)swift_task_alloc();
    v0[7] = v8;
    *os_log_type_t v8 = v0;
    v8[1] = sub_59788;
    uint64_t v9 = v0[4];
    uint64_t v10 = v0[5];
    uint64_t v12 = v0[2];
    uint64_t v11 = v0[3];
    return Assertion.__allocating_init(policy:description:)(v12, v11, v9, v10);
  }
}

uint64_t sub_59788(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 48);
  if (v1)
  {
    swift_errorRelease();
    uint64_t v7 = sub_59938;
  }
  else
  {
    *(void *)(v5 + 64) = a1;
    uint64_t v7 = sub_598CC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_598CC()
{
  *(void *)(v0[6] + 112) = v0[8];
  swift_release();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_59938()
{
  *(void *)(*(void *)(v0 + 48) + 112) = 0;
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_59B28(int a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = sub_48EEC0();
  uint64_t v8 = v7;
  void v4[4] = v7;
  uint64_t v9 = sub_48EEC0();
  uint64_t v11 = v10;
  v4[5] = v10;
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  void *v12 = v4;
  v12[5] = v11;
  v12[6] = a4;
  v12[3] = v8;
  void v12[4] = v9;
  v12[1] = sub_59C34;
  v12[2] = v6;
  return _swift_task_switch(sub_595C4, a4, 0);
}

uint64_t sub_59C34()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  _Block_release(*(const void **)(v1 + 24));
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_59DBC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_59DDC, v0, 0);
}

uint64_t sub_59DDC()
{
  if (qword_648B60 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_48EEA0();
  sub_5B668(v1, (uint64_t)qword_669D00);
  uint64_t v2 = sub_48EE90();
  os_log_type_t v3 = sub_48EF30();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&def_1E50E8, v2, v3, "VA ModelManagerAssertion:: invalidating model manager assertion", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[2];

  uint64_t v6 = *(void *)(v5 + 112);
  v0[3] = v6;
  if (v6)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[4] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_59F78;
    return Assertion.invalidate()();
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_59F78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_5A0A4, v1, 0);
}

uint64_t sub_5A0A4()
{
  *(void *)(*(void *)(v0 + 16) + 112) = 0;
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_5A278(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_5A338;
  v4[2] = a2;
  return _swift_task_switch(sub_59DDC, a2, 0);
}

uint64_t sub_5A338()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  _Block_release(*(const void **)(v1 + 24));
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

id sub_5A480()
{
  uint64_t v1 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v1[14] = 0;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t sub_5A524()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_5A55C()
{
  uint64_t v0 = sub_48EEA0();
  sub_5C228(v0, qword_669D00);
  sub_5B668(v0, (uint64_t)qword_669D00);
  sub_5C28C();
  sub_48EF40();
  return sub_48EEB0();
}

uint64_t sub_5A5F0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_5A6CC;
  return v6(a1);
}

uint64_t sub_5A6CC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_5A7C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_5C2D0;
  return v6();
}

uint64_t sub_5A890(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_5C2D0;
  return v7();
}

uint64_t sub_5A95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_48EF00();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_48EEF0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_5BB54(a1, &qword_648828);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_48EED0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_5AB08(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_5C2DC;
  return v6(a1);
}

unint64_t sub_5ABE4(uint64_t a1)
{
  uint64_t v2 = sub_48EFB0();

  return sub_5AC28(a1, v2);
}

unint64_t sub_5AC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_5ACC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_5ABE4(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_5B0BC();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      unint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      uint64_t result = *v19;
      uint64_t *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v23 = (uint64_t *)(v18[7] + 16 * v12);
    *uint64_t v23 = a1;
    v23[1] = a2;
    uint64_t v24 = v18[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (!v25)
    {
      uint64_t result = 0;
      v18[2] = v26;
      return result;
    }
    goto LABEL_14;
  }
  sub_5AE08(v15, a4 & 1);
  unint64_t v21 = sub_5ABE4(a3);
  if ((v16 & 1) == (v22 & 1))
  {
    unint64_t v12 = v21;
    uint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_48EFA0();
  __break(1u);
  return result;
}

uint64_t sub_5AE08(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_5B5B4(&qword_648958);
  uint64_t result = sub_48EF80();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v31 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v29;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      long long v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = sub_48EFB0();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

void *sub_5B0BC()
{
  uint64_t v1 = v0;
  sub_5B5B4(&qword_648958);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_48EF70();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_5B268(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_5ABE4(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_5B0BC();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v5);
  sub_5B314(v5, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_5B314(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_48EF60();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = sub_48EFB0();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            unint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              void *v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              _OWORD *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_5B4AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_5B5B4(&qword_648958);
  int64_t v3 = (void *)sub_48EF90();
  uint64_t v4 = *(void *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 40);
  unint64_t result = sub_5ABE4(v4);
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    uint64_t v8 = v3[2];
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v11 = (_OWORD *)((char *)v7 + 24);
    uint64_t v4 = *((void *)v7 - 1);
    long long v13 = *v7;
    swift_retain();
    unint64_t result = sub_5ABE4(v4);
    uint64_t v7 = v11;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_5B5B4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_5B5F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_5B630(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void *sub_5B65C()
{
  return &protocol witness table for UInt64;
}

uint64_t sub_5B668(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for VAModelManagerMonitor()
{
  uint64_t result = qword_648C90;
  if (!qword_648C90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_5B6EC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_5B72C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  int64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *int64_t v3 = v1;
  v3[1] = sub_5C2D0;
  return sub_57A68((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_5B7C0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for VAModelManagerAssertion()
{
  return self;
}

uint64_t sub_5B7F4()
{
  return type metadata accessor for VAModelManagerMonitor();
}

uint64_t sub_5B7FC()
{
  uint64_t result = sub_48EE50();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *sub_5B8AC()
{
  if (&swift_runtimeSupportsNoncopyableTypes) {
    return (char *)sub_5B5B4(&qword_648850);
  }
  else {
    return (char *)&type metadata for () + 8;
  }
}

uint64_t sub_5B8D4()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_5B914()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_5C2D0;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_6488B8 + dword_6488B8);
  return v5(v2, v3);
}

uint64_t sub_5B9C4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_5C2D0;
  char v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_6488C8 + dword_6488C8);
  return v6(v2, v3, v4);
}

uint64_t sub_5BA88(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_5C2D0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_6488D8 + dword_6488D8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_5BB54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_5B5B4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_5BBB0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_5C2D0;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_6488E8 + dword_6488E8);
  return v6(a1, v4);
}

uint64_t sub_5BC68()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_5BCB8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  char v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *char v6 = v1;
  v6[1] = sub_5C2D0;
  uint64_t v7 = (uint64_t (*)(int, int, void *, uint64_t))((char *)&dword_6488F8 + dword_6488F8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_5BD80()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_5BDC0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_5BE74;
  char v6 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_648918 + dword_648918);
  return v6(v2, v3, v4);
}

uint64_t sub_5BE74()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_5BF70()
{
  _Block_release(*(const void **)(v0 + 24));
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_5BFB8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  char v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *char v6 = v1;
  v6[1] = sub_5C2D0;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, const void *, uint64_t))((char *)&dword_648938 + dword_648938);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_5C080()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_5C0C0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_5C0F8(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_5C128(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_5BE74;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_648960 + dword_648960);
  return v6(a1, v4);
}

uint64_t sub_5C1E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_5C228(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_5C28C()
{
  unint64_t result = qword_648990;
  if (!qword_648990)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_648990);
  }
  return result;
}

uint64_t sub_5C2E0(_DWORD *a1, _DWORD *a2, BOOL *a3)
{
  uint64_t result = 0;
  *a2 = 0;
  if (a1[2] == 1819304813)
  {
    if (a1[5] != 1) {
      return 0;
    }
    unsigned int v5 = a1[6];
    if (v5 != a1[4]) {
      return 0;
    }
    unsigned int v6 = a1[8];
    if (v5 < v6 >> 3) {
      return 0;
    }
    unsigned int v7 = a1[7];
    if (!v7) {
      return 0;
    }
    unsigned int v8 = a1[3];
    if (a3) {
      *a3 = (v8 & 0x20) == 0;
    }
    if ((v8 & 0x20) == 0)
    {
      BOOL v9 = v5 == v5 / v7 * v7;
      v5 /= v7;
      if (!v9) {
        return 0;
      }
    }
    uint64_t result = 1;
    if ((v8 & 2) == 0 && 8 * v5 == v6)
    {
      if (v8)
      {
        if ((v8 & 0x1F84) != 0) {
          return 0;
        }
        if (v5 != 4)
        {
          if (v5 != 8) {
            return result;
          }
          LODWORD(result) = 4;
        }
        goto LABEL_29;
      }
      if ((v8 & 4) == 0) {
        return result;
      }
      int v10 = (v8 >> 7) & 0x3F;
      if (v10 == 24 && v5 == 4)
      {
        LODWORD(result) = 3;
LABEL_29:
        *a2 = result;
        return 1;
      }
      if (!v10 && v5 == 4)
      {
        LODWORD(result) = 5;
        goto LABEL_29;
      }
      if (!v10 && v5 == 2)
      {
        LODWORD(result) = 2;
        goto LABEL_29;
      }
    }
  }
  return result;
}

const char *sub_5C3F0()
{
  return "CAException";
}

void sub_5C3FC(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_5C438()
{
  return 0;
}

uint64_t sub_5C440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 48 || v2[1] - *v2 < 0x808uLL || v2[4] - v2[3] < 0x808uLL) {
    return 0;
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    unsigned int v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      unsigned int v7 = v6;
      uint64_t v8 = *(void *)(a1 + 16);
      if (v8)
      {
        BOOL v9 = *(NSObject **)(v8 + 72);
        int v10 = *(_DWORD *)(a1 + 88);
        int v11 = *(_DWORD *)(a1 + 84) + 1;
        *(_DWORD *)(a1 + 84) = v11;
        float v12 = (float)((float)*(unsigned int *)(a1 + 68) / *(float *)(a1 + 64)) * (float)(v11 - v10);
        if (v12 >= *(float *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 88) = v11;
          *(unsigned char *)(a1 + 80) = 0;
        }
        else if (v12 >= *(float *)(a1 + 76) && !*(unsigned char *)(a1 + 80))
        {
          *(unsigned char *)(a1 + 80) = 1;
          long long v13 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v13 || (v14 = *(void *)(a1 + 32), (uint64_t v15 = std::__shared_weak_count::lock(v13)) == 0)) {
            sub_5CABC();
          }
          uint64_t v16 = v15;
          p_uint64_t shared_weak_owners = &v15->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v15);
          block[0] = _NSConcreteStackBlock;
          block[1] = 1174405120;
          block[2] = sub_5C6E8;
          block[3] = &unk_61DDE8;
          block[4] = a1;
          void block[5] = v14;
          char v36 = v16;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          uint64_t v37 = v8;
          double v38 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          dispatch_async(v9, block);
          if (v38) {
            sub_4636C(v38);
          }
          if (v36) {
            std::__shared_weak_count::__release_weak(v36);
          }
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      sub_4636C(v7);
    }
  }
  float v18 = *(float *)(a1 + 144);
  if (*(float *)(a1 + 148) == v18) {
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if (!v20 || *(void *)(a1 + 128) == *(void *)(a1 + 120)) {
    return 0;
  }
  *(float *)(a1 + 148) = v18;
  uint64_t v21 = **(_DWORD ***)a2;
  BOOL v22 = *(_DWORD **)(*(void *)a2 + 24);
  if (v20 >= 0x1000) {
    uint64_t v23 = 512;
  }
  else {
    uint64_t v23 = (v20 >> 3);
  }
  v21[1] = 4 * v23;
  char v24 = (float *)(v21 + 2);
  bzero(v21 + 2, 0x800uLL);
  if (v23)
  {
    unint64_t v25 = *(double **)(a1 + 96);
    do
    {
      double v26 = *v25++;
      float v27 = v26;
      *v24++ = v27;
      --v23;
    }
    while (v23);
  }
  int v28 = *(_DWORD *)(a1 + 144);
  *BOOL v22 = v28;
  *uint64_t v21 = v28;
  unint64_t v29 = *(void *)(a1 + 128) - *(void *)(a1 + 120);
  if (v29 >= 0x1000) {
    uint64_t v30 = 512;
  }
  else {
    uint64_t v30 = (v29 >> 3);
  }
  v22[1] = 4 * v30;
  int64_t v31 = (float *)(v22 + 2);
  bzero(v22 + 2, 0x800uLL);
  if (!v30) {
    return 4112;
  }
  long long v32 = *(double **)(a1 + 120);
  uint64_t result = 4112;
  do
  {
    double v33 = *v32++;
    float v34 = v33;
    *v31++ = v34;
    --v30;
  }
  while (v30);
  return result;
}

void sub_5C6D4(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_5C6E8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unsigned int v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = a1[7];
        *(void *)(v3 + 104) = *(void *)(v3 + 96);
        *(void *)(v3 + 128) = *(void *)(v3 + 120);
        unsigned int v7 = *(_DWORD *)(v3 + 84);
        float v9 = *(float *)(v3 + 64);
        unsigned int v8 = *(_DWORD *)(v3 + 68);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 176))(v6, 2344);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 176))(v6, 2569, v3 + 120);
        *(float *)(v3 + 144) = (float)((float)v8 / v9) * (float)v7;
      }
      sub_4636C(v5);
    }
  }
}

void sub_5C810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10)
{
  if (a2)
  {
    if (a2 == 3)
    {
      int v11 = __cxa_begin_catch(exception_object);
      float v12 = (os_log_t *)sub_32A48(25);
      long long v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
        LODWORD(a9) = 136315650;
        *(void *)((char *)&a9 + 4) = "AncFilterLoggerV4.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 170;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&a9, 0x1Cu);
      }
    }
    else
    {
      uint64_t v15 = (void **)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        uint64_t v16 = v15;
        uint64_t v17 = (os_log_t *)sub_32A48(25);
        float v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v16 + 23) < 0) {
            uint64_t v16 = (void **)*v16;
          }
          LODWORD(a9) = 136315650;
          *(void *)((char *)&a9 + 4) = "AncFilterLoggerV4.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 171;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v16;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&a9, 0x1Cu);
        }
      }
      else
      {
        uint64_t v19 = (os_log_t *)sub_32A48(25);
        unint64_t v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315394;
          *(void *)((char *)&a9 + 4) = "AncFilterLoggerV4.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 172;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown.", (uint8_t *)&a9, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x5C7D0);
  }
  _Unwind_Resume(exception_object);
}

void sub_5CA28(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x5CA20);
}

void sub_5CA38(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_4636C(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_5CA88(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_5CABC()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

uint64_t sub_5CB08(uint64_t result, float a2)
{
  *(float *)(result + 72) = a2;
  *(float *)(result + 76) = fmaxf(a2 + -0.1, 0.0);
  return result;
}

uint64_t sub_5CB24(uint64_t a1, int a2, float a3, float a4)
{
  *(float *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 68) = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)a1 + 64))(a1, a4);
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  return result;
}

BOOL sub_5CB78(uint64_t a1)
{
  return *(void *)(a1 + 56) != 0;
}

void sub_5CB88(uint64_t a1)
{
  if (sub_5CCA0(a1, 0x3E8u))
  {
    uint64_t v2 = *(FILE **)(a1 + 48);
    if (v2) {
      fclose(v2);
    }
    uint64_t v3 = *(FILE **)(a1 + 56);
    if (v3) {
      fclose(v3);
    }
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    atomic_store(0, (unsigned __int8 *)(a1 + 8));
  }
  else
  {
    uint64_t v4 = (os_log_t *)sub_32A48(25);
    unsigned int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315906;
      unsigned int v7 = "AncFilterLoggerV4.cpp";
      __int16 v8 = 1024;
      int v9 = 130;
      __int16 v10 = 2080;
      int v11 = "CloseFile";
      __int16 v12 = 1024;
      int v13 = 1000;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed to aquire lock after %u ms", (uint8_t *)&v6, 0x22u);
    }
  }
}

BOOL sub_5CCA0(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 / 5;
  if (atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 8), 1u, memory_order_acquire))
  {
    while (--v2)
    {
      usleep(0x1388u);
      if ((atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 8), 1u, memory_order_acquire) & 1) == 0)
      {
        unsigned int v2 = 1;
        return v2 != 0;
      }
    }
  }
  return v2 != 0;
}

BOOL sub_5CD0C(void *a1, const char **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3) {
    return 0;
  }
  unsigned int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (!a1[2]) {
    goto LABEL_14;
  }
  unsigned int v7 = *a2;
  if (a2[1] - *a2 != 48) {
    goto LABEL_14;
  }
  __int16 v8 = *a2;
  if (v7[23] < 0) {
    __int16 v8 = *(const char **)v7;
  }
  int v9 = v7 + 24;
  if (v7[47] < 0) {
    int v9 = *(const char **)v9;
  }
  if ((!a1[6] || !a1[7]) && (__int16 v10 = fopen(v8, "w"), (a1[6] = v10) != 0))
  {
    int v11 = fopen(v9, "w");
    a1[7] = v11;
    BOOL v12 = v11 != 0;
  }
  else
  {
LABEL_14:
    BOOL v12 = 0;
  }
  sub_4636C(v6);
  return v12;
}

void sub_5CDE0(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5CDF4()
{
  return 2056;
}

uint64_t sub_5CDFC()
{
  return 2056;
}

void sub_5CE04(void *a1)
{
  sub_5CE3C(a1);

  operator delete();
}

void *sub_5CE3C(void *a1)
{
  *a1 = off_61DD90;
  sub_5CB88((uint64_t)a1);
  unsigned int v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *a1 = off_633588;
  unsigned int v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

__n128 sub_5CEE4(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  int v6 = (char *)operator new(0xB0uLL);
  unsigned int v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_61DE28;
  unint64_t v8 = (unint64_t)(v6 + 24);
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v6 + 120) = 0u;
  v6[32] = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((void *)v6 + 3) = off_61DD90;
  *(void *)(v6 + 108) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  v6[104] = 0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *((void *)v6 + 21) = 0;
  if (!a3 || (int v9 = std::__shared_weak_count::lock(a3)) == 0 || !a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(exception, "ancManager expired");
  }
  if (*(_DWORD *)(a2 + 12) != 4)
  {
    uint64_t v14 = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(v14, "ancManager is not V4");
  }
  atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  __int16 v10 = (std::__shared_weak_count *)v7[2].__vftable;
  v7[1].__shared_weak_owners_ = a2;
  v7[2].__vftable = (std::__shared_weak_count_vtbl *)a3;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_4636C(v9);
  std::__shared_weak_count::__release_weak(a3);
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v7[2].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[2].__shared_owners_ = v8;
    v7[2].__shared_weak_owners_ = (uint64_t)v7;
    goto LABEL_13;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[2].__shared_owners_ = v8;
    v7[2].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_13:
    sub_4636C(v7);
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a1 = result;
  return result;
}

void sub_5D0F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v5);
  sub_4636C(v4);
  unint64_t v8 = v1[6].__vftable;
  if (v8)
  {
    v1[6].__shared_owners_ = (uint64_t)v8;
    operator delete(v8);
  }
  int v9 = *v6;
  if (*v6)
  {
    v1[5].__shared_owners_ = (uint64_t)v9;
    operator delete(v9);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  v1[1].__vftable = v3;
  int v11 = (std::__shared_weak_count *)v1[2].__vftable;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_5D180(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_5D1A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61DE28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_5D1F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61DE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unint64_t sub_5D218(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v4) {
    return 0;
  }
  unsigned int v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v7;
  if (*(void *)(a1 + 64))
  {
    if ((a2 == 0) != (*(void *)(a1 + 8) == 0))
    {
      int v9 = *(_DWORD *)(a1 + 56);
      int v10 = *(_DWORD *)(a1 + 52) + 1;
      *(_DWORD *)(a1 + 52) = v10;
      if ((float)((float)((float)*(unsigned int *)(a1 + 24) / *(float *)(a1 + 20)) * (float)(v10 - v9)) >= *(float *)(a1 + 28))
      {
        *(_DWORD *)(a1 + 56) = v10;
        int v13 = (const char *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
        {
          unint64_t v11 = *(void *)(a1 + 104);
          if (a2)
          {
            size_t v14 = a3 - 1;
            if (v11 >= a3 - 1) {
              unint64_t v11 = a3 - 1;
            }
            int v13 = *(const char **)v13;
            goto LABEL_19;
          }
        }
        else
        {
          unint64_t v11 = *(unsigned __int8 *)(a1 + 119);
          if (a2)
          {
            size_t v14 = a3 - 1;
            if (a3 - 1 < v11) {
              unint64_t v11 = a3 - 1;
            }
LABEL_19:
            strncpy(a2, v13, v14);
          }
        }
        uint64_t v15 = *(std::__shared_weak_count **)(a1 + 72);
        if (v15)
        {
          uint64_t v16 = std::__shared_weak_count::lock(v15);
          if (v16)
          {
            uint64_t v17 = v16;
            uint64_t v18 = *(void *)(a1 + 64);
            if (v18)
            {
              uint64_t v19 = *(std::__shared_weak_count **)(a1 + 88);
              if (!v19
                || (unint64_t v20 = *(NSObject **)(v18 + 72),
                    uint64_t v21 = *(void *)(a1 + 80),
                    (BOOL v22 = std::__shared_weak_count::lock(v19)) == 0))
              {
                sub_5CABC();
              }
              uint64_t v23 = v22;
              p_uint64_t shared_weak_owners = &v22->__shared_weak_owners_;
              atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_4636C(v22);
              block[0] = _NSConcreteStackBlock;
              block[1] = 1174405120;
              block[2] = sub_5D418;
              block[3] = &unk_61E528;
              block[4] = a1;
              void block[5] = v21;
              double v26 = v23;
              atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
              dispatch_async(v20, block);
              if (v26) {
                std::__shared_weak_count::__release_weak(v26);
              }
              std::__shared_weak_count::__release_weak(v23);
            }
            sub_4636C(v17);
          }
        }
        goto LABEL_7;
      }
    }
  }
  unint64_t v11 = 0;
LABEL_7:
  sub_4636C(v8);
  return v11;
}

void sub_5D3FC(_Unwind_Exception *a1)
{
  sub_4636C(v2);
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_5D418(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = a1[5];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  int v6 = *(std::__shared_weak_count **)(v2 + 72);
  if (v6)
  {
    unsigned int v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      unint64_t v8 = v7;
      if (v5)
      {
        int v9 = *(unsigned __int8 **)(v2 + 64);
        if (v9)
        {
          int v10 = 6;
          while ((atomic_exchange((atomic_uchar *volatile)(v2 + 16), 1u) & 1) != 0)
          {
            usleep(0x1388u);
            if (!--v10) {
              goto LABEL_167;
            }
          }
          if (*(char *)(v2 + 119) < 0)
          {
            **(unsigned char **)(v2 + 96) = 0;
            *(void *)(v2 + 104) = 0;
          }
          else
          {
            *(unsigned char *)(v2 + 96) = 0;
            *(unsigned char *)(v2 + 119) = 0;
          }
          unint64_t v11 = (const char *)(v2 + 96);
          if (*(unsigned char *)(v2 + 17)) {
            char v12 = 32;
          }
          else {
            char v12 = 44;
          }
          char v48 = v8;
          if (!*(_DWORD *)(v2 + 60))
          {
            *(_DWORD *)(v2 + 60) = *(_DWORD *)(v2 + 32);
            std::string::append((std::string *)(v2 + 96), "\n", 1uLL);
            memset(&v59, 0, sizeof(v59));
            memset(&v57, 0, sizeof(v57));
            uint64_t v13 = qword_648CA0;
            if (qword_648CA0 == qword_648CA8)
            {
              size_t v21 = 0;
            }
            else
            {
              do
              {
                if (*(unsigned char *)(v2 + 17))
                {
                  sub_21C8C(&v56, *(char **)(v13 + 16));
                  sub_21C8C(&v55, *(char **)(v13 + 24));
                  std::string::resize(&v56, *(unsigned int *)(v13 + 8), 32);
                  std::string::resize(&v55, *(unsigned int *)(v13 + 8), 32);
                  sub_5E2A8((uint64_t)&__p, (const void **)&v56.__r_.__value_.__l.__data_, v12);
                  if ((v54 & 0x80u) == 0) {
                    p_p = (const std::string::value_type *)&__p;
                  }
                  else {
                    p_p = (const std::string::value_type *)__p;
                  }
                  if ((v54 & 0x80u) == 0) {
                    std::string::size_type v15 = v54;
                  }
                  else {
                    std::string::size_type v15 = v53;
                  }
                  std::string::append(&v59, p_p, v15);
                  if ((char)v54 < 0) {
                    operator delete(__p);
                  }
                  sub_5E2A8((uint64_t)&__p, (const void **)&v55.__r_.__value_.__l.__data_, v12);
                  if ((v54 & 0x80u) == 0) {
                    uint64_t v16 = (const std::string::value_type *)&__p;
                  }
                  else {
                    uint64_t v16 = (const std::string::value_type *)__p;
                  }
                  if ((v54 & 0x80u) == 0) {
                    std::string::size_type v17 = v54;
                  }
                  else {
                    std::string::size_type v17 = v53;
                  }
                  std::string::append(&v57, v16, v17);
                  if ((char)v54 < 0) {
                    operator delete(__p);
                  }
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v55.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v56.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  if (*(_DWORD *)v13 == -1)
                  {
                    size_t v20 = strlen(*(const char **)(v13 + 16));
                    std::string::append(&v59, *(const std::string::value_type **)(v13 + 16), v20);
                  }
                  else
                  {
                    sub_2A657C(&v56, *(_DWORD *)v13);
                    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v18 = &v56;
                    }
                    else {
                      uint64_t v18 = (std::string *)v56.__r_.__value_.__r.__words[0];
                    }
                    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v56.__r_.__value_.__l.__size_;
                    }
                    std::string::append(&v59, (const std::string::value_type *)v18, size);
                    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v56.__r_.__value_.__l.__data_);
                    }
                  }
                  std::string::push_back(&v59, v12);
                }
                v13 += 32;
              }
              while (v13 != qword_648CA8);
              if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v21 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v21 = v59.__r_.__value_.__l.__size_;
              }
            }
            sub_5E220((uint64_t)&v56, v21 + 1);
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v22 = &v56;
            }
            else {
              BOOL v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
            }
            if (v21)
            {
              if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v23 = &v59;
              }
              else {
                uint64_t v23 = (std::string *)v59.__r_.__value_.__r.__words[0];
              }
              memmove(v22, v23, v21);
            }
            *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 10;
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v24 = &v56;
            }
            else {
              char v24 = (std::string *)v56.__r_.__value_.__r.__words[0];
            }
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v25 = v56.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v24, v25);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            char v26 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
            if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v27 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v27 = v57.__r_.__value_.__l.__size_;
            }
            if (v27)
            {
              sub_5E220((uint64_t)&v56, v27 + 1);
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v28 = &v56;
              }
              else {
                int v28 = (std::string *)v56.__r_.__value_.__r.__words[0];
              }
              if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v29 = &v57;
              }
              else {
                unint64_t v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
              }
              memmove(v28, v29, v27);
              *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v27) = 10;
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v30 = &v56;
              }
              else {
                uint64_t v30 = (std::string *)v56.__r_.__value_.__r.__words[0];
              }
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v31 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v31 = v56.__r_.__value_.__l.__size_;
              }
              std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v30, v31);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v56.__r_.__value_.__l.__data_);
              }
              char v26 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
            }
            if (v26 < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v59.__r_.__value_.__l.__data_);
            }
          }
          if (*(_DWORD *)(v2 + 32)) {
            int v32 = *(_DWORD *)(v2 + 60) - 1;
          }
          else {
            int v32 = 1;
          }
          *(_DWORD *)(v2 + 60) = v32;
          double v33 = (unsigned int *)qword_648CA0;
          if (qword_648CA0 != qword_648CA8)
          {
            while (2)
            {
              memset(&v57, 0, sizeof(v57));
              switch(v33[1])
              {
                case 0u:
                  if (*(float *)(v2 + 28) == 0.0)
                  {
                    float v38 = (float)sub_2969F8(*(void *)(v2 + 40)) / 1000.0;
                    if ((float)(v38 - *(float *)(v2 + 48)) > 5.0)
                    {
                      *(void *)(v2 + 40) = mach_absolute_time();
                      float v38 = 0.0;
                    }
                    *(float *)(v2 + 48) = v38;
                    std::to_string(&v59, v38);
                  }
                  else
                  {
                    std::to_string(&v59, (float)((float)*(unsigned int *)(v2 + 24) / *(float *)(v2 + 20))* (float)*(unsigned int *)(v2 + 52));
                  }
                  goto LABEL_122;
                case 1u:
                case 2u:
                case 3u:
                case 5u:
                  memset(&v56, 0, sizeof(v56));
                  if (!(*(unsigned int (**)(unsigned __int8 *, void, std::string *))(*(void *)v9 + 176))(v9, *v33, &v56)|| v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0] != 8)
                  {
                    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v57.__r_.__value_.__l.__size_ = 6;
                      uint64_t v37 = (std::string *)v57.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      *((unsigned char *)&v57.__r_.__value_.__s + 23) = 6;
                      uint64_t v37 = &v57;
                    }
                    strcpy((char *)v37, "!ERROR");
                    goto LABEL_113;
                  }
                  double v34 = *(double *)v56.__r_.__value_.__l.__data_;
                  unsigned int v35 = v33[1];
                  if (v35 == 3)
                  {
                    float v41 = v34;
                    double v34 = (float)(logf(v41) * 20.0);
                    std::to_string(&v59, v34);
                  }
                  else
                  {
                    if (v35 != 2) {
                      goto LABEL_143;
                    }
                    float v36 = v34;
                    double v34 = (float)(logf(v36) * 10.0);
                    std::to_string(&v59, v34);
                  }
                  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v57.__r_.__value_.__l.__data_);
                  }
                  std::string v57 = v59;
                  unsigned int v35 = v33[1];
LABEL_143:
                  if (v35 == 5)
                  {
                    sub_2440C((uint64_t)&v59);
                    *(_DWORD *)((char *)v60 + *(void *)(v59.__r_.__value_.__r.__words[2] - 24)) = *(_DWORD *)((unsigned char *)v60 + *(void *)(v59.__r_.__value_.__r.__words[2] - 24)) & 0xFFFFFFB5 | 8;
                    std::ostream::operator<<();
                    sub_21C8C(&v55, "0x");
                    sub_246E4(&__p, (uint64_t)v60);
                    if ((v54 & 0x80u) == 0) {
                      uint64_t v42 = (const std::string::value_type *)&__p;
                    }
                    else {
                      uint64_t v42 = (const std::string::value_type *)__p;
                    }
                    if ((v54 & 0x80u) == 0) {
                      std::string::size_type v43 = v54;
                    }
                    else {
                      std::string::size_type v43 = v53;
                    }
                    __int16 v44 = std::string::append(&v55, v42, v43);
                    std::string::size_type v45 = v44->__r_.__value_.__r.__words[0];
                    v58[0] = v44->__r_.__value_.__l.__size_;
                    *(void *)((char *)v58 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1]
                                                                             + 7);
                    char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
                    v44->__r_.__value_.__l.__size_ = 0;
                    v44->__r_.__value_.__r.__words[2] = 0;
                    v44->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v57.__r_.__value_.__l.__data_);
                    }
                    v57.__r_.__value_.__r.__words[0] = v45;
                    v57.__r_.__value_.__l.__size_ = v58[0];
                    *(std::string::size_type *)((char *)&v57.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v58 + 7);
                    *((unsigned char *)&v57.__r_.__value_.__s + 23) = v46;
                    if ((char)v54 < 0) {
                      operator delete(__p);
                    }
                    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v55.__r_.__value_.__l.__data_);
                    }
                    v59.__r_.__value_.__r.__words[0] = v51;
                    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + *(void *)(v51 - 24)) = v50;
                    v59.__r_.__value_.__r.__words[2] = v49;
                    if (v61 < 0) {
                      operator delete((void *)v60[8]);
                    }
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    std::ios::~ios();
                  }
                  else
                  {
                    std::to_string(&v59, v34);
                    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v57.__r_.__value_.__l.__data_);
                    }
                    std::string v57 = v59;
                  }
LABEL_113:
                  if (v56.__r_.__value_.__r.__words[0])
                  {
                    v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
                    operator delete(v56.__r_.__value_.__l.__data_);
                  }
LABEL_125:
                  if (*(unsigned char *)(v2 + 17)) {
                    std::string::resize(&v57, v33[2], 32);
                  }
                  sub_5E2A8((uint64_t)&v59, (const void **)&v57.__r_.__value_.__l.__data_, v12);
                  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    __int16 v39 = &v59;
                  }
                  else {
                    __int16 v39 = (std::string *)v59.__r_.__value_.__r.__words[0];
                  }
                  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v40 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v40 = v59.__r_.__value_.__l.__size_;
                  }
                  std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v39, v40);
                  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v59.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v57.__r_.__value_.__l.__data_);
                  }
                  v33 += 8;
                  if (v33 == (unsigned int *)qword_648CA8) {
                    break;
                  }
                  continue;
                case 4u:
                  std::to_string(&v59, v9[80]);
LABEL_122:
                  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v57.__r_.__value_.__l.__data_);
                  }
                  std::string v57 = v59;
                  goto LABEL_125;
                default:
                  *((unsigned char *)&v57.__r_.__value_.__s + 23) = 7;
                  qmemcpy(&v57, "!FORMAT", 7);
                  goto LABEL_125;
              }
              break;
            }
          }
          unint64_t v8 = v48;
          std::string::append((std::string *)(v2 + 96), "\n", 1uLL);
          uint64_t v47 = *(FILE **)(v2 + 8);
          if (v47)
          {
            if (*(char *)(v2 + 119) < 0) {
              unint64_t v11 = *(const char **)v11;
            }
            fputs(v11, v47);
          }
          atomic_store(0, (unsigned __int8 *)(v2 + 16));
        }
      }
LABEL_167:
      sub_4636C(v8);
    }
  }
  if (v4) {
    sub_4636C(v4);
  }
}

void sub_5DDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,long long buf,long long a44)
{
  if (a2)
  {
    if (a33 < 0) {
      operator delete(__p);
    }
    if (a39 < 0) {
      operator delete(a34);
    }
    if (SBYTE7(a44) < 0) {
      operator delete((void *)buf);
    }
    if (a2 == 3)
    {
      char v46 = __cxa_begin_catch(exception_object);
      uint64_t v47 = (os_log_t *)sub_32A48(25);
      char v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = (*(uint64_t (**)(void *))(*(void *)v46 + 16))(v46);
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AncLoggerV4.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 169;
        WORD1(a44) = 2080;
        *(void *)((char *)&a44 + 4) = v49;
        _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      std::string::size_type v50 = (void **)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        std::string::size_type v51 = v50;
        __int16 v52 = (os_log_t *)sub_32A48(25);
        std::string::size_type v53 = *v52;
        if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v51 + 23) < 0) {
            std::string::size_type v51 = (void **)*v51;
          }
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "AncLoggerV4.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 170;
          WORD1(a44) = 2080;
          *(void *)((char *)&a44 + 4) = v51;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        unsigned __int8 v54 = (os_log_t *)sub_32A48(25);
        std::string v55 = *v54;
        if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "AncLoggerV4.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 171;
          _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown.", (uint8_t *)&buf, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x5DD7CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_5E1F4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_5E204(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_5E220(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_4F8C0();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_5E2A8(uint64_t a1, const void **a2, char a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t result = sub_5E220(a1, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    unsigned int v7 = (char *)result;
  }
  else {
    unsigned int v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  int v9 = &v7[v5];
  *int v9 = a3;
  v9[1] = 0;
  return result;
}

uint64_t sub_5E32C(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

BOOL sub_5E464(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

uint64_t sub_5E474(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

uint64_t sub_5E47C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 17) = a2;
  return result;
}

void sub_5E484(uint64_t a1)
{
  sub_5E4BC(a1);

  operator delete();
}

uint64_t sub_5E4BC(uint64_t a1)
{
  *(void *)a1 = off_61E4E0;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = off_63ACC0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

__n128 sub_5E544(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  int v6 = (char *)operator new(0x90uLL);
  unsigned int v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_61E568;
  unint64_t v8 = (unint64_t)(v6 + 24);
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 15) = 0;
  *((_WORD *)v6 + 20) = 256;
  *(void *)(v6 + 44) = 0x400473B8000;
  *(void *)(v6 + 52) = 1065353216;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 3) = off_61E4E0;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 16) = 0;
  *((void *)v6 + 17) = 0;
  if (!a3 || (int v9 = std::__shared_weak_count::lock(a3)) == 0 || !a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(exception, "ancManager expired");
  }
  if (*(_DWORD *)(a2 + 12) != 4)
  {
    size_t v14 = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(v14, "ancManager is not V4");
  }
  atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v10 = (std::__shared_weak_count *)v7[4].__vftable;
  v7[3].__shared_weak_owners_ = a2;
  v7[4].__vftable = (std::__shared_weak_count_vtbl *)a3;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_4636C(v9);
  std::__shared_weak_count::__release_weak(a3);
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v7[4].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[4].__shared_owners_ = v8;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
    goto LABEL_13;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[4].__shared_owners_ = v8;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_13:
    sub_4636C(v7);
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a1 = result;
  return result;
}

void sub_5E768(_Unwind_Exception *a1)
{
  __cxa_free_exception(v5);
  sub_4636C(v4);
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(v1 + 112);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)(v1 + 24) = v3;
  int v9 = *(std::__shared_weak_count **)(v1 + 96);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_5E7E8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_5E80C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61E568;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_5E860(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61E568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL sub_5E880(uint64_t a1)
{
  unsigned int v21 = 0;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 83));
  if (v1) {
    return 1;
  }
  uint64_t v3 = (os_log_t *)sub_32A48(25);
  uint64_t v4 = *v3;
  if (*v3)
  {
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
    {
      double v5 = *(float *)(a1 + 56);
      double v6 = *(float *)(a1 + 60);
      double v7 = *(float *)(a1 + 64);
      double v8 = *(float *)(a1 + 68);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      uint64_t v23 = "AncManagerV4.cpp";
      __int16 v24 = 1024;
      int v25 = 281;
      __int16 v26 = 2048;
      double v27 = v5;
      __int16 v28 = 2048;
      double v29 = v6;
      __int16 v30 = 2048;
      double v31 = v7;
      __int16 v32 = 2048;
      double v33 = v8;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d ANC V4 ApplyTrimGains:%f:%f:%f:%f", buf, 0x3Au);
    }
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 200))(a1, 1469, &v21) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(25);
    size_t v14 = *v13;
    if (!*v13) {
      return 0;
    }
    BOOL result = os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v23 = "AncManagerV4.cpp";
    __int16 v24 = 1024;
    int v25 = 285;
    std::string::size_type v15 = "%25s:%-5d Failure reading mic_vx_scale_cal";
LABEL_31:
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
    return 0;
  }
  LODWORD(v9) = v21;
  unsigned int v21 = vcvtad_u64_f64((double)v9 * 0.000000953674316 * __exp10(*(float *)(a1 + 56) / 20.0) * 1048576.0);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, 1469) & 1) == 0)
  {
    uint64_t v16 = (os_log_t *)sub_32A48(25);
    size_t v14 = *v16;
    if (!*v16) {
      return 0;
    }
    BOOL result = os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v23 = "AncManagerV4.cpp";
    __int16 v24 = 1024;
    int v25 = 293;
    std::string::size_type v15 = "%25s:%-5d Failure writing mic_vx_scale_cal";
    goto LABEL_31;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 200))(a1, 2970, &v21) & 1) == 0)
  {
    std::string::size_type v17 = (os_log_t *)sub_32A48(25);
    size_t v14 = *v17;
    if (!*v17) {
      return 0;
    }
    BOOL result = os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v23 = "AncManagerV4.cpp";
    __int16 v24 = 1024;
    int v25 = 299;
    std::string::size_type v15 = "%25s:%-5d Failure reading kAncParam_mic_err_scale";
    goto LABEL_31;
  }
  LODWORD(v10) = v21;
  unsigned int v21 = vcvtad_u64_f64((double)v10 * 0.000000953674316 * __exp10(*(float *)(a1 + 64) / 20.0) * 1048576.0);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, 2970) & 1) == 0)
  {
    uint64_t v18 = (os_log_t *)sub_32A48(25);
    size_t v14 = *v18;
    if (!*v18) {
      return 0;
    }
    BOOL result = os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v23 = "AncManagerV4.cpp";
    __int16 v24 = 1024;
    int v25 = 307;
    std::string::size_type v15 = "%25s:%-5d Failure writing kAncParam_mic_err_scale";
    goto LABEL_31;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 200))(a1, 2973, &v21))
  {
    LODWORD(v11) = v21;
    unsigned int v21 = vcvtad_u64_f64((double)v11 * 0.000000953674316 * __exp10(*(float *)(a1 + 60) / 20.0) * 1048576.0);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, 2973))
    {
      BOOL result = 1;
      atomic_store(1u, (unsigned __int8 *)(a1 + 83));
      return result;
    }
    size_t v20 = (os_log_t *)sub_32A48(25);
    size_t v14 = *v20;
    if (!*v20) {
      return 0;
    }
    BOOL result = os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v23 = "AncManagerV4.cpp";
    __int16 v24 = 1024;
    int v25 = 321;
    std::string::size_type v15 = "%25s:%-5d Failure writing kAncParam_mic_ref1_scale";
    goto LABEL_31;
  }
  uint64_t v19 = (os_log_t *)sub_32A48(25);
  size_t v14 = *v19;
  if (*v19)
  {
    BOOL result = os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v23 = "AncManagerV4.cpp";
    __int16 v24 = 1024;
    int v25 = 313;
    std::string::size_type v15 = "%25s:%-5d Failure reading kAncParam_mic_ref1_scale";
    goto LABEL_31;
  }
  return 0;
}

void sub_5EDD8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 81));
    if (v2)
    {
      sub_1329C(&v9, *(void *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
      uint64_t v4 = v9;
      uint64_t v3 = v10;
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v3);
      }
      dispatch_time_t v5 = dispatch_time(0, 200000000);
      double v6 = *(NSObject **)(a1 + 72);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 1174405120;
      v7[2] = sub_5EED0;
      v7[3] = &unk_61E700;
      v7[4] = v4;
      double v8 = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_after(v5, v6, v7);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_5EED0(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 81));
        if (v6)
        {
          unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v5 + 82));
          if (v7)
          {
            uint64_t state64 = 0;
            notify_get_state(*(_DWORD *)(v5 + 40), &state64);
            *(unsigned char *)(v5 + 44) = state64 == 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 232))(v5, 2884);
          }
        }
        (*(void (**)(uint64_t, void))(*(void *)v5 + 280))(v5, 0);
      }
      sub_4636C(v4);
    }
  }
}

void sub_5EFB4(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_5EFCC(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_5EFDC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_5EFF8(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 82));
  return v1 & 1;
}

void sub_5F008(uint64_t a1, int a2)
{
  if ((byte_64BC0C & 1) == 0)
  {
    int v18 = 0;
    if (sub_1614F4(@"ANCPollRate", @"com.apple.audio.virtualaudio", &v18))
    {
      uint64_t v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        BOOL v6 = os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT);
        int v7 = v18;
        if (v6)
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1360;
          __int16 v20 = 2080;
          unsigned int v21 = "ANCPollRate";
          __int16 v22 = 1024;
          int v23 = v18;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }
      else
      {
        int v7 = v18;
      }
      dword_64BC08 = v7;
    }
    byte_64BC0C = 1;
  }
  int v8 = dword_64BC08;
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 81));
  if (v9)
  {
    if (!dword_64BC08) {
      int v8 = 10000;
    }
    uint64_t v10 = 1000000 * v8;
    sub_1329C(buf, *(void *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
    uint64_t v12 = *(void *)buf;
    unint64_t v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
      sub_4636C(v11);
    }
    if (a2) {
      int64_t v13 = 200000000;
    }
    else {
      int64_t v13 = v10;
    }
    dispatch_time_t v14 = dispatch_time(0, v13);
    std::string::size_type v15 = *(NSObject **)(a1 + 72);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1174405120;
    void v16[2] = sub_5F228;
    v16[3] = &unk_61E6D0;
    v16[4] = a1;
    v16[5] = v12;
    std::string::size_type v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_after(v14, v15, v16);
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_5F228(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && (uint64_t v3 = (_DWORD *)a1[4], (v4 = std::__shared_weak_count::lock(v2)) != 0))
  {
    uint64_t v5 = v4;
    BOOL v6 = (unsigned __int8 *)a1[5];
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    __int32 v49 = 0;
    if (v6)
    {
      unsigned __int8 v7 = atomic_load(v6 + 81);
      if (v7)
      {
        (*(void (**)(_DWORD *))(*(void *)v3 + 296))(v3);
        if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, int8x16_t *))(*(void *)v6 + 200))(v6, 2732, &v71) & 1) == 0)
        {
          int64_t v13 = (os_log_t *)sub_32A48(25);
          dispatch_time_t v14 = *v13;
          if (*v13)
          {
            if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              std::string::size_type v53 = "AncManagerV4.cpp";
              __int16 v54 = 1024;
              int v55 = 155;
              _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading clip 1", buf, 0x12u);
            }
          }
        }
        if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, __int8 *))(*(void *)v6 + 200))(v6, 2733, &v71.i8[4]) & 1) == 0)
        {
          std::string::size_type v15 = (os_log_t *)sub_32A48(25);
          uint64_t v16 = *v15;
          if (*v15)
          {
            if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              std::string::size_type v53 = "AncManagerV4.cpp";
              __int16 v54 = 1024;
              int v55 = 157;
              _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading clip 2", buf, 0x12u);
            }
          }
        }
        if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, unint64_t *))(*(void *)v6 + 200))(v6, 2734, &v71.u64[1]) & 1) == 0)
        {
          std::string::size_type v17 = (os_log_t *)sub_32A48(25);
          int v18 = *v17;
          if (*v17)
          {
            if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              std::string::size_type v53 = "AncManagerV4.cpp";
              __int16 v54 = 1024;
              int v55 = 159;
              _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading clip 3", buf, 0x12u);
            }
          }
        }
        if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, unint64_t))(*(void *)v6 + 200))(v6, 2735, (unint64_t)&v71 | 0xC) & 1) == 0)
        {
          uint64_t v19 = (os_log_t *)sub_32A48(25);
          __int16 v20 = *v19;
          if (*v19)
          {
            if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              std::string::size_type v53 = "AncManagerV4.cpp";
              __int16 v54 = 1024;
              int v55 = 161;
              _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading clip 4", buf, 0x12u);
            }
          }
        }
        if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, __int32 *))(*(void *)v6 + 200))(v6, 2736, &v72) & 1) == 0)
        {
          unsigned int v21 = (os_log_t *)sub_32A48(25);
          __int16 v22 = *v21;
          if (*v21)
          {
            if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              std::string::size_type v53 = "AncManagerV4.cpp";
              __int16 v54 = 1024;
              int v55 = 163;
              _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading clip 5", buf, 0x12u);
            }
          }
        }
        if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(void *)v6 + 200))(v6, 2915, &v69))
        {
          if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, char *))(*(void *)v6 + 200))(v6, 2916, (char *)&v69 + 4))
          {
            if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, int *))(*(void *)v6 + 200))(v6, 2917, &v70))
            {
              if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(void *)v6 + 200))(v6, 2238, &v51))
              {
                if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, char *))(*(void *)v6 + 200))(v6, 2433, (char *)&v50 + 4))
                {
                  if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(void *)v6 + 200))(v6, 2884, &v50))
                  {
                    if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, __int32 *))(*(void *)v6 + 200))(v6, 2864, &v49))
                    {
                      v23.i64[0] = v69;
                      v24.i32[0] = v72;
                      int8x16_t v25 = vextq_s8(vextq_s8(v24, v24, 4uLL), v23, 0xCuLL);
                      v25.i32[3] = v70;
                      int8x16_t v26 = vorrq_s8(v71, v25);
                      if (vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)))
                      {
                        double v27 = (os_log_t *)sub_32A48(25);
                        __int16 v28 = *v27;
                        if (*v27)
                        {
                          if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)AudioObjectPropertyAddress buf = 136317442;
                            std::string::size_type v53 = "AncManagerV4.cpp";
                            __int16 v54 = 1024;
                            int v55 = 202;
                            __int16 v56 = 1024;
                            *(_DWORD *)std::string v57 = v71.i32[0];
                            *(_WORD *)&v57[4] = 1024;
                            *(_DWORD *)&v57[6] = v71.i32[1];
                            *(_WORD *)long long v58 = 1024;
                            *(_DWORD *)&void v58[2] = v71.i32[2];
                            __int16 v59 = 1024;
                            __int32 v60 = v71.i32[3];
                            __int16 v61 = 1024;
                            __int32 v62 = v72;
                            __int16 v63 = 1024;
                            int v64 = v69;
                            __int16 v65 = 1024;
                            int v66 = HIDWORD(v69);
                            __int16 v67 = 1024;
                            int v68 = v70;
                            _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d BAD State Clip:%x:%x:%x:%x:%x overflow:%x:%x:%x", buf, 0x42u);
                          }
                        }
                      }
                      if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, char *))(*(void *)v6 + 200))(v6, 2765, (char *)&v51 + 4))
                      {
                        if (BYTE4(v51) == 6)
                        {
                          sub_60044((uint64_t)buf, (int *)&v51);
                          sub_60120((uint64_t)&v55 + 2, (int *)&v50 + 1);
                          sub_601FC((uint64_t)&v58[2], "Fifo1", (int *)&v69);
                          sub_601FC((uint64_t)&v63, "Fifo2", (int *)&v69 + 1);
                          sub_601FC((uint64_t)&v68 + 2, "Fifo3", &v70);
                          v47[0] = buf;
                          v47[1] = 5;
                          CFDictionaryRef v29 = sub_4D3D8((uint64_t)v47);
                          CFDictionaryRef v48 = v29;
                          for (uint64_t i = 64; i != -16; i -= 16)
                            sub_602D0((uint64_t)&buf[i]);
                          sub_60314((uint64_t)v29);
                          double v31 = (os_log_t *)sub_32A48(25);
                          __int16 v32 = *v31;
                          if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG))
                          {
                            int v33 = *((_DWORD *)v6 + 13);
                            *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
                            std::string::size_type v53 = "AncManagerV4.cpp";
                            __int16 v54 = 1024;
                            int v55 = 221;
                            __int16 v56 = 1024;
                            *(_DWORD *)std::string v57 = HIDWORD(v50);
                            *(_WORD *)&v57[4] = 1024;
                            *(_DWORD *)&v57[6] = v51;
                            *(_WORD *)long long v58 = 1024;
                            *(_DWORD *)&void v58[2] = v33;
                            __int16 v59 = 1024;
                            __int32 v60 = v50;
                            __int16 v61 = 1024;
                            __int32 v62 = v49;
                            _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d ANC status ok. SNLM:%x AncActive:%d Hang:%d offear:%d:%d", buf, 0x30u);
                          }
                          *((_DWORD *)v6 + 13) = 0;
                          v6[80] = 1;
                          atomic_store(1u, v6 + 82);
                          (*(void (**)(unsigned __int8 *, void))(*(void *)v6 + 264))(v6, 0);
                          sub_60394((const void **)&v48);
                        }
                        else
                        {
                          int v42 = *((_DWORD *)v6 + 13) + 1;
                          *((_DWORD *)v6 + 13) = v42;
                          HIDWORD(v43) = -858993459 * v42;
                          LODWORD(v43) = -858993459 * v42;
                          if ((v43 >> 1) <= 0x19999999)
                          {
                            __int16 v44 = (os_log_t *)sub_32A48(25);
                            std::string::size_type v45 = *v44;
                            if (*v44)
                            {
                              if (os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
                              {
                                LODWORD(v46) = v3[13];
                                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                                std::string::size_type v53 = "AncManagerV4.cpp";
                                __int16 v54 = 1024;
                                int v55 = 233;
                                __int16 v56 = 2048;
                                *(double *)std::string v57 = (double)v46 * 200.0 / 1000.0;
                                *(_WORD *)&v57[8] = 1024;
                                *(_DWORD *)long long v58 = HIDWORD(v51);
                                _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d Warning: ANC DSP program still not booted after %g seconds, clp_sw_state = 0x%x", buf, 0x22u);
                              }
                            }
                          }
                          (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)v6 + 264))(v6, 1);
                        }
                        goto LABEL_13;
                      }
                      float v41 = (os_log_t *)sub_32A48(25);
                      unsigned __int8 v9 = *v41;
                      if (!*v41 || !os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
                      {
LABEL_13:
                        sub_4636C(v5);
                        return;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                      std::string::size_type v53 = "AncManagerV4.cpp";
                      __int16 v54 = 1024;
                      int v55 = 207;
                      uint64_t v10 = "%25s:%-5d Failure reading clp_sw_state";
                    }
                    else
                    {
                      std::string::size_type v40 = (os_log_t *)sub_32A48(25);
                      unsigned __int8 v9 = *v40;
                      if (!*v40 || !os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_13;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                      std::string::size_type v53 = "AncManagerV4.cpp";
                      __int16 v54 = 1024;
                      int v55 = 197;
                      uint64_t v10 = "%25s:%-5d Failure reading offear_detection_result";
                    }
                  }
                  else
                  {
                    __int16 v39 = (os_log_t *)sub_32A48(25);
                    unsigned __int8 v9 = *v39;
                    if (!*v39 || !os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_13;
                    }
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    std::string::size_type v53 = "AncManagerV4.cpp";
                    __int16 v54 = 1024;
                    int v55 = 192;
                    uint64_t v10 = "%25s:%-5d Failure reading prox_offear";
                  }
                }
                else
                {
                  float v38 = (os_log_t *)sub_32A48(25);
                  unsigned __int8 v9 = *v38;
                  if (!*v38 || !os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_13;
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  std::string::size_type v53 = "AncManagerV4.cpp";
                  __int16 v54 = 1024;
                  int v55 = 187;
                  uint64_t v10 = "%25s:%-5d Failure reading SNLM";
                }
              }
              else
              {
                uint64_t v37 = (os_log_t *)sub_32A48(25);
                unsigned __int8 v9 = *v37;
                if (!*v37 || !os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_13;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                std::string::size_type v53 = "AncManagerV4.cpp";
                __int16 v54 = 1024;
                int v55 = 182;
                uint64_t v10 = "%25s:%-5d Failure reading power state";
              }
            }
            else
            {
              float v36 = (os_log_t *)sub_32A48(25);
              unsigned __int8 v9 = *v36;
              if (!*v36 || !os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR)) {
                goto LABEL_13;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              std::string::size_type v53 = "AncManagerV4.cpp";
              __int16 v54 = 1024;
              int v55 = 177;
              uint64_t v10 = "%25s:%-5d Failure reading fifo overflow 3";
            }
          }
          else
          {
            unsigned int v35 = (os_log_t *)sub_32A48(25);
            unsigned __int8 v9 = *v35;
            if (!*v35 || !os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR)) {
              goto LABEL_13;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            std::string::size_type v53 = "AncManagerV4.cpp";
            __int16 v54 = 1024;
            int v55 = 172;
            uint64_t v10 = "%25s:%-5d Failure reading fifo overflow 2";
          }
        }
        else
        {
          double v34 = (os_log_t *)sub_32A48(25);
          unsigned __int8 v9 = *v34;
          if (!*v34 || !os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR)) {
            goto LABEL_13;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          std::string::size_type v53 = "AncManagerV4.cpp";
          __int16 v54 = 1024;
          int v55 = 167;
          uint64_t v10 = "%25s:%-5d Failure reading fifo overflow 1";
        }
      }
      else
      {
        int v8 = (os_log_t *)sub_32A48(25);
        unsigned __int8 v9 = *v8;
        if (!*v8 || !os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_13;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        std::string::size_type v53 = "AncManagerV4.cpp";
        __int16 v54 = 1024;
        int v55 = 149;
        uint64_t v10 = "%25s:%-5d Client disabled";
      }
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    __int32 v49 = 0;
  }
  unint64_t v11 = (os_log_t *)sub_32A48(25);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    std::string::size_type v53 = "AncManagerV4.cpp";
    __int16 v54 = 1024;
    int v55 = 143;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid this", buf, 0x12u);
  }
  if (v5) {
    goto LABEL_13;
  }
}

void sub_5FF5C(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_60018(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_60028(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_60044(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "AncActive");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_600E4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_60120(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "SNLM");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_601C0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_601FC(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_60294(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_602D0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void sub_60314(uint64_t a1)
{
  if (qword_64AB90 != -1) {
    dispatch_once(&qword_64AB90, &stru_61E750);
  }
  if (off_64ABF0)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, void))off_64ABF0;
    v2(a1, 1, 0);
  }
}

const void **sub_60394(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_603C8(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (v1)
  {
    uint64_t v2 = v1;
    qword_64AB98 = (uint64_t)dlsym(v1, "CreateSharedCAReportingClient");
    qword_64ABA0 = (uint64_t)dlsym(v2, "CAReportingClientCreateReporterID");
    qword_64ABA8 = (uint64_t)dlsym(v2, "CAReportingClientCreateReporterIDFromSessionID");
    qword_64ABB0 = (uint64_t)dlsym(v2, "CAReportingClientCreatePerformanceReporterID");
    qword_64ABB8 = (uint64_t)dlsym(v2, "CAReportingClientStartReporter");
    qword_64ABC0 = (uint64_t)dlsym(v2, "CAReportingClientStopReporter");
    qword_64ABC8 = (uint64_t)dlsym(v2, "CAReportingClientSetAudioServiceType");
    qword_64ABD0 = (uint64_t)dlsym(v2, "CAReportingClientGetAudioServiceType");
    qword_64ABD8 = (uint64_t)dlsym(v2, "CAReportingClientSetConfiguration");
    qword_64ABE0 = (uint64_t)dlsym(v2, "CAReportingClientCopyConfiguration");
    off_64ABE8 = (uint64_t (*)(void, void, void, void))dlsym(v2, "CAReportingClientSendMessage");
    off_64ABF0 = dlsym(v2, "CAReportingClientSendSingleMessage");
    qword_64ABF8 = (uint64_t)dlsym(v2, "CAReportingClientDestroyReporterID");
    qword_64AC00 = (uint64_t)dlsym(v2, "CAReportingClientRequestMessage");
  }
}

void sub_60548()
{
}

void sub_60560()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

const void **sub_60594(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_605C8(uint64_t a1, uint64_t *a2, __n128 *a3, __n128 *a4)
{
  uint64_t v7 = *a2;
  int v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_5E544(&v14, v7, v8);
  unsigned __int8 v9 = (std::__shared_weak_count *)a3->n128_u64[1];
  *a3 = v14;
  if (v9) {
    sub_4636C(v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v10 = *a2;
  unint64_t v11 = (std::__shared_weak_count *)a2[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_5CEE4(&v14, v10, v11);
  uint64_t v12 = (std::__shared_weak_count *)a4->n128_u64[1];
  *a4 = v14;
  if (v12) {
    sub_4636C(v12);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  return 1;
}

void sub_60688(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_606B0()
{
  return 1;
}

BOOL sub_606BC(uint64_t a1, unsigned int a2)
{
  return a2 <= 0xDD5 && *(_DWORD *)(sub_2A64F8() + 40 * a2) != -1;
}

void sub_60708()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "unsupported");
}

void sub_60750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_60764(uint64_t a1, CFMutableStringRef theString, int a3)
{
  if (theString)
  {
    if (a3)
    {
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Voice mic trim:", *(float *)(a1 + 56));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Ref mic trim:", *(float *)(a1 + 60));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Error mic trim:", *(float *)(a1 + 64));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Receiver trim:", *(float *)(a1 + 68));
      CFStringAppendFormat(theString, 0, @"%-20s ", "ANC DSP SW version:");
    }
    else
    {
      CFStringAppendFormat(theString, 0, @"Voice mic trim, %-.6f\n", *(float *)(a1 + 56));
      CFStringAppendFormat(theString, 0, @"Ref mic trim, %-.6f\n", *(float *)(a1 + 60));
      CFStringAppendFormat(theString, 0, @"Error mic trim, %-.6f\n", *(float *)(a1 + 64));
      CFStringAppendFormat(theString, 0, @"Receiver trim, %-.6f\n", *(float *)(a1 + 68));
      CFStringAppend(theString, @"ANC DSP SW version, ");
    }
    unsigned int v6 = 0;
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, unsigned int *, void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16), 11572224, 1, 4, &v6, *(void *)(a1 + 24)))
    {
      CFStringAppend(theString, @"*** ERROR ***\n");
    }
    else
    {
      CFStringAppendFormat(theString, 0, @"0x%08x\n", v6);
    }
  }
  return theString != 0;
}

uint64_t sub_60970()
{
  return 0;
}

uint64_t sub_60978()
{
  return 0;
}

uint64_t sub_60980()
{
  return 0;
}

uint64_t sub_60988(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t sub_609AC()
{
  return 1;
}

uint64_t sub_609B4()
{
  return 1;
}

uint64_t sub_609BC()
{
  return 1;
}

uint64_t sub_609C4(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 81));
  return v1 & 1;
}

uint64_t sub_609D4()
{
  return 1;
}

uint64_t sub_609E0()
{
  return 1024;
}

float sub_609E8(uint64_t a1)
{
  float v4 = 48000.0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 48000.0;
  }
  (*(void (**)(uint64_t, float *, void))(*(void *)v2 + 168))(v2, &v4, *(void *)(a1 + 24));
  return v4;
}

uint64_t sub_60A58()
{
  return 0;
}

void sub_60A60(uint64_t a1)
{
  sub_60A98(a1);

  operator delete();
}

void *sub_60A98(uint64_t a1)
{
  *(void *)a1 = off_61E5A0;
  atomic_store(0, (unsigned __int8 *)(a1 + 81));
  *(unsigned char *)(a1 + 80) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 82));
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    notify_cancel(v2);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 72));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  return sub_78C00((void *)a1);
}

uint64_t sub_60B28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_60B58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_60B94()
{
  return 1;
}

uint64_t sub_60B9C()
{
  return 0;
}

uint64_t sub_60BA4()
{
  return 1970171760;
}

uint64_t sub_60BB0()
{
  return 0;
}

uint64_t sub_60BB8()
{
  return 0;
}

uint64_t sub_60BC0(void *a1, int a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  CFNumberRef v5 = a4;
  if (a4)
  {
    BOOL v7 = a4[3] != 0;
    BOOL v60 = a4[1] != 0;
    BOOL v61 = *a4 == 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v60 = 0;
    BOOL v61 = 1;
  }
  unsigned int v8 = *((_DWORD *)a1 + 4);
  if (!v8)
  {
    unsigned int v8 = (*(uint64_t (**)(void *, void, uint64_t))(*a1 + 64))(a1, a1[1], a5);
    *((_DWORD *)a1 + 4) = v8;
  }
  if (!v61 && v60)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(25);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v67 = "L77Device.cpp";
      __int16 v68 = 1024;
      int v69 = 196;
      __int16 v70 = 2080;
      int8x16_t v71 = "SetDataBlockWithOptions";
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s cannot write memory asynchronously with verifyWrite enabled.", buf, 0x1Cu);
    }
    return 5;
  }
  if (a3[1] == *a3)
  {
    int64_t v13 = (os_log_t *)sub_32A48(25);
    __n128 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v67 = "L77Device.cpp";
      __int16 v68 = 1024;
      int v69 = 202;
      __int16 v70 = 2080;
      int8x16_t v71 = "SetDataBlockWithOptions";
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s FAILED payload size", buf, 0x1Cu);
    }
    uint64_t v12 = 0;
    if (v7) {
      *((_DWORD *)v5 + 1) = 0;
    }
    return v12;
  }
  if (v5 && v5[3])
  {
    uint64_t v9 = mach_absolute_time();
    unsigned int v8 = *((_DWORD *)a1 + 4);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v60) {
    __int16 v65 = malloc_type_calloc(v8, 4uLL, 0x100004052888210uLL);
  }
  else {
    __int16 v65 = 0;
  }
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1] - *a3;
  if (!v16)
  {
    uint64_t v12 = 0;
    goto LABEL_91;
  }
  uint64_t v50 = v9;
  BOOL v51 = v7;
  int v59 = 0;
  unint64_t v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = v8 >> 2;
  unint64_t v20 = v16 >> 2;
  __int16 v63 = a1 + 3;
  unint64_t v54 = (unint64_t)v8 >> 2;
  std::string v57 = v5;
  unsigned int v53 = v8 >> 2;
  while (1)
  {
    if (v19 >= v20 - v18) {
      uint64_t v21 = v20 - v18;
    }
    else {
      uint64_t v21 = v19;
    }
    if (!*((_DWORD *)a1 + 4)) {
      *((_DWORD *)a1 + 4) = (*(uint64_t (**)(void *, void, uint64_t))(*a1 + 64))(a1, a1[1], a5);
    }
    unsigned int v58 = v18;
    uint64_t v22 = 4 * v18;
    if (!v5 || !v57[2]) {
      break;
    }
    if (v21)
    {
      uint64_t v23 = 0;
      unint64_t v24 = (v59 + v20);
      if (v54 < v24) {
        unint64_t v24 = (unint64_t)v8 >> 2;
      }
      int8x16_t v25 = (unsigned int *)(v15 + v22);
      do
      {
        unsigned int v26 = *v25++;
        v23 |= v26;
        --v24;
      }
      while (v24);
      if (v23) {
        break;
      }
    }
LABEL_74:
    unsigned int v19 = v8 >> 2;
    unint64_t v17 = v58 + v53;
    CFNumberRef v5 = v57;
    uint64_t v15 = *a3;
    unint64_t v20 = (a3[1] - *a3) >> 2;
    v59 -= v53;
    unsigned int v18 = v58 + v53;
    if (v20 <= v17)
    {
      uint64_t v12 = 0;
      goto LABEL_90;
    }
  }
  uint64_t v27 = a2 + 4 * v18;
  uint64_t v62 = v15 + 4 * v17;
  if (v54 >= (v59 + v20)) {
    unint64_t v28 = (v59 + v20);
  }
  else {
    unint64_t v28 = (unint64_t)v8 >> 2;
  }
  uint64_t v29 = v15 + v22;
  char v30 = 1;
  int v31 = 5;
  while (1)
  {
    uint64_t v32 = (*(uint64_t (**)(void *, void, void *, BOOL, uint64_t, uint64_t, void, uint64_t, uint64_t))(*a1 + 56))(a1, a1[1], v63, v61, v27, v21, (4 * v21), v62, a5);
    if (v32)
    {
      uint64_t v12 = v32;
      int v33 = (os_log_t *)sub_32A48(25);
      double v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        __int16 v67 = "L77Device.cpp";
        __int16 v68 = 1024;
        int v69 = 239;
        __int16 v70 = 2080;
        int8x16_t v71 = "SetDataBlockWithOptions";
        __int16 v72 = 1024;
        int v73 = v27;
        __int16 v74 = 1024;
        unsigned int v75 = v21;
        __int16 v76 = 1024;
        int v77 = v12;
        __int16 v78 = 1024;
        int v79 = v31 - 1;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s _SetRegister( addr=0x%x, len=%d) failed, status = %d. Tries remaining = %d", buf, 0x34u);
      }
      goto LABEL_51;
    }
    if (v60 && !sub_613F8((uint64_t)a1, v27)) {
      break;
    }
    if (v30) {
      goto LABEL_74;
    }
LABEL_50:
    uint64_t v12 = 0;
    char v30 = 0;
LABEL_51:
    if (!--v31)
    {
      if (v12) {
        goto LABEL_80;
      }
      if (v30) {
        goto LABEL_74;
      }
      uint64_t v47 = (os_log_t *)sub_32A48(25);
      CFDictionaryRef v48 = *v47;
      if (*v47)
      {
        BOOL v7 = v51;
        uint64_t v9 = v50;
        if (os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v67 = "L77Device.cpp";
          __int16 v68 = 1024;
          int v69 = 284;
          __int16 v70 = 2080;
          int8x16_t v71 = "SetDataBlockWithOptions";
          _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s verification failed", buf, 0x1Cu);
        }
        uint64_t v12 = 0xFFFFFFFFLL;
LABEL_87:
        CFNumberRef v5 = v57;
        goto LABEL_91;
      }
      uint64_t v12 = 0xFFFFFFFFLL;
      goto LABEL_89;
    }
  }
  uint64_t v35 = (*(uint64_t (**)(void *, void, void *, uint64_t, uint64_t, void, _DWORD *, uint64_t))(*a1 + 48))(a1, a1[1], v63, v27, v21, (4 * v21), v65, a5);
  if (!v35)
  {
    if (!v21) {
      goto LABEL_74;
    }
    uint64_t v36 = 0;
    BOOL v37 = 1;
    while (1)
    {
      int v38 = *(_DWORD *)(v29 + 4 * v36);
      unsigned int v39 = v65[v36];
      if (v38 != v39) {
        BOOL v37 = ((v39 ^ v38) & 0xFFFFFF) == 0 && (v38 & 0xFF800000) == 0x800000 && HIBYTE(v39) == 255;
      }
      if (!v37) {
        break;
      }
      if (v28 == ++v36) {
        goto LABEL_74;
      }
    }
    int v42 = *(NSObject **)sub_32A48(25);
    if (v42)
    {
      log = v42;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        __int16 v67 = "L77Device.cpp";
        __int16 v68 = 1024;
        int v69 = 269;
        __int16 v70 = 2080;
        int8x16_t v71 = "SetDataBlockWithOptions";
        __int16 v72 = 1024;
        int v73 = v38;
        __int16 v74 = 1024;
        unsigned int v75 = v39;
        __int16 v76 = 1024;
        int v77 = v27 + v36;
        __int16 v78 = 1024;
        int v79 = v31;
        _os_log_impl(&def_1E50E8, log, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s verify failed (0x%x != 0x%x), addr=0x%x. Tries remaining = %u", buf, 0x34u);
      }
    }
    goto LABEL_50;
  }
  uint64_t v12 = v35;
  unint64_t v43 = (os_log_t *)sub_32A48(25);
  __int16 v44 = *v43;
  if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    __int16 v67 = "L77Device.cpp";
    __int16 v68 = 1024;
    int v69 = 246;
    __int16 v70 = 2080;
    int8x16_t v71 = "SetDataBlockWithOptions";
    __int16 v72 = 1024;
    int v73 = v27;
    __int16 v74 = 1024;
    unsigned int v75 = v21;
    __int16 v76 = 1024;
    int v77 = v12;
    _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s _GetRegister( addr=0x%x, len=%d) failed, status = %d", buf, 0x2Eu);
  }
LABEL_80:
  std::string::size_type v45 = (os_log_t *)sub_32A48(25);
  unint64_t v46 = *v45;
  if (*v45)
  {
    BOOL v7 = v51;
    uint64_t v9 = v50;
    if (os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v67 = "L77Device.cpp";
      __int16 v68 = 1024;
      int v69 = 279;
      __int16 v70 = 2080;
      int8x16_t v71 = "SetDataBlockWithOptions";
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s Failed", buf, 0x1Cu);
    }
    goto LABEL_87;
  }
LABEL_89:
  CFNumberRef v5 = v57;
LABEL_90:
  BOOL v7 = v51;
  uint64_t v9 = v50;
LABEL_91:
  if (v60) {
    free(v65);
  }
  if (v7) {
    *((_DWORD *)v5 + 1) = sub_2969F8(v9);
  }
  return v12;
}

BOOL sub_613F8(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 5) <= a2
      && *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 5) + 4) >= a2;
}

uint64_t sub_61494()
{
  return 240;
}

uint64_t sub_6149C(int a1, uint64_t a2, NSObject **a3, uint64_t a4, int a5, int a6, size_t size, void *buffer, uint64_t a9)
{
  uint64_t v19 = 0;
  unint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = -1;
  if (!a9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  if (a6)
  {
    uint64_t v9 = a4;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000;
    void v14[2] = sub_6162C;
    v14[3] = &unk_61E7B0;
    int v15 = size;
    int v16 = a5;
    v14[6] = a2;
    v14[7] = a9;
    int v17 = a6;
    char v18 = a4;
    v14[4] = &v19;
    void v14[5] = dispatch_data_create(buffer, size, 0, 0);
    unint64_t v11 = *a3;
    if (v9)
    {
      dispatch_sync(v11, v14);
      uint64_t v9 = *((unsigned int *)v20 + 6);
    }
    else
    {
      dispatch_async(v11, v14);
      *((_DWORD *)v20 + 6) = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  _Block_object_dispose(&v19, 8);
  return v9;
}

void sub_61604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_6162C(uint64_t a1)
{
  size_t v11 = 0;
  buffer_ptr = 0;
  int v2 = dispatch_data_create_map(*(dispatch_data_t *)(a1 + 40), (const void **)&buffer_ptr, &v11);
  if (v11 >= *(unsigned int *)(a1 + 64))
  {
    int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x73627761u, 0, 0, 4, (float *)(a1 + 68), *(void *)(a1 + 56));
    if (!v6)
    {
      int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x7362776Cu, 0, 0, 4, (float *)(a1 + 72), *(void *)(a1 + 56));
      if (!v6)
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 0;
        int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x63616E63u, 4, (uint64_t)buf, *(unsigned int *)(a1 + 64), (float *)buffer_ptr, *(void *)(a1 + 56));
      }
    }
  }
  else
  {
    uint64_t v3 = (os_log_t *)sub_32A48(25);
    float v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __n128 v14 = "L77Device.cpp";
      __int16 v15 = 1024;
      int v16 = 59;
      __int16 v17 = 2080;
      char v18 = "SetRegister_block_invoke";
      __int16 v19 = 2048;
      *(void *)unint64_t v20 = v11;
      *(_WORD *)&v20[8] = 1024;
      v21[0] = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s Invalid data buffer size (%lu != %u)", buf, 0x2Cu);
    }
    int v6 = -2;
  }
  dispatch_release(v2);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  if (v6)
  {
    BOOL v7 = (os_log_t *)sub_32A48(25);
    unsigned int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = *(_DWORD *)(a1 + 68);
        int v10 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        __n128 v14 = "L77Device.cpp";
        __int16 v15 = 1024;
        int v16 = 73;
        __int16 v17 = 2080;
        char v18 = "SetRegister_block_invoke";
        __int16 v19 = 1024;
        *(_DWORD *)unint64_t v20 = v9;
        *(_WORD *)&v20[4] = 1024;
        *(_DWORD *)&v20[6] = v10;
        LOWORD(v21[0]) = 1024;
        *(_DWORD *)((char *)v21 + 2) = v6;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s failed, addr=0x%x, length=0x%x, status = 0x%x", buf, 0x2Eu);
      }
    }
  }
  if (*(unsigned char *)(a1 + 76)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
  }
}

uint64_t sub_61894(uint64_t a1, uint64_t a2, NSObject **a3, int a4, uint64_t a5, int a6, int *a7, uint64_t a8)
{
  uint64_t v27 = 0;
  unint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  int v30 = -1;
  if (!a8)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  uint64_t v8 = a5;
  if (a5)
  {
    size_t v11 = *a3;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 0x40000000;
    v23[2] = sub_61B7C;
    v23[3] = &unk_61E800;
    v23[4] = &v27;
    void v23[5] = a2;
    int v24 = a4;
    int v25 = a5;
    int v26 = a6;
    v23[6] = a8;
    v23[7] = a7;
    dispatch_sync(v11, v23);
    if (v8 >= 4)
    {
      uint64_t v12 = (os_log_t *)sub_32A48(25);
      int64_t v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
        {
          int v14 = *a7;
          int v15 = a7[1];
          int v16 = a7[3];
          int v17 = a7[4];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136317186;
          uint64_t v32 = "L77Device.cpp";
          __int16 v33 = 1024;
          int v34 = 114;
          __int16 v35 = 2080;
          uint64_t v36 = "GetRegister";
          __int16 v37 = 1024;
          int v38 = a4;
          __int16 v39 = 1024;
          int v40 = v8;
          __int16 v41 = 1024;
          int v42 = v14;
          __int16 v43 = 1024;
          int v44 = v15;
          __int16 v45 = 1024;
          int v46 = v16;
          __int16 v47 = 1024;
          int v48 = v17;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d L77Device::%s addr=0x%x, length=0x%x Data:%08x:%08x:%08x:%08x", buf, 0x40u);
        }
      }
    }
    if (*((_DWORD *)v28 + 6))
    {
      char v18 = (os_log_t *)sub_32A48(25);
      __int16 v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          int v20 = *((_DWORD *)v28 + 6);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
          uint64_t v32 = "L77Device.cpp";
          __int16 v33 = 1024;
          int v34 = 116;
          __int16 v35 = 2080;
          uint64_t v36 = "GetRegister";
          __int16 v37 = 1024;
          int v38 = a4;
          __int16 v39 = 1024;
          int v40 = v8;
          __int16 v41 = 1024;
          int v42 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s failed, addr=0x%x, length=0x%x, status = 0x%x", buf, 0x2Eu);
        }
      }
    }
    uint64_t v8 = *((unsigned int *)v28 + 6);
  }
  _Block_object_dispose(&v27, 8);
  return v8;
}

void sub_61B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_61B7C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_61C08;
  v3[3] = &unk_61E7D8;
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 72);
  long long v1 = *(_OWORD *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = v1;
  return sub_61CCC((uint64_t)v3);
}

uint64_t sub_61C08(uint64_t a1)
{
  uint64_t result = sub_3D3C98(*(uint64_t **)(a1 + 40), 0x73627261u, 0, 0, 4, (float *)(a1 + 64), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!result)
  {
    uint64_t result = sub_3D3C98(*(uint64_t **)(a1 + 40), 0x7362726Cu, 0, 0, 4, (float *)(a1 + 68), *(void *)(a1 + 48));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (!result)
    {
      int v3 = *(_DWORD *)(a1 + 72);
      int v4 = 0;
      uint64_t result = sub_3D3FC8(*(uint64_t **)(a1 + 40), 0x63616E63u, 4, (uint64_t)&v4, &v3, *(float **)(a1 + 56), *(void *)(a1 + 48));
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t sub_61CCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_61D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(exception_object);
    char v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      if (v15)
      {
        int v20 = strrchr(v15, 47);
        if (v20) {
          uint64_t v21 = v20 + 1;
        }
        else {
          uint64_t v21 = v15;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      int v33 = v17[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v33;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = v21;
      a12 = 1024;
      a13 = v14;
      int v34 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v35 = v19;
      uint32_t v36 = 40;
LABEL_28:
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&a9, v36);
    }
  }
  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      int v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        if (v15)
        {
          uint64_t v27 = strrchr(v15, 47);
          if (v27) {
            unint64_t v28 = v27 + 1;
          }
          else {
            unint64_t v28 = v15;
          }
        }
        else
        {
          unint64_t v28 = 0;
        }
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = v28;
        HIWORD(a13) = 1024;
        a14 = v14;
        int v34 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v35 = v25;
        uint32_t v36 = 44;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        if (v15)
        {
          int v31 = strrchr(v15, 47);
          if (v31) {
            uint64_t v32 = v31 + 1;
          }
          else {
            uint64_t v32 = v15;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v32;
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = v14;
        int v34 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v35 = v30;
        uint32_t v36 = 34;
        goto LABEL_28;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x61D0CLL);
}

uint64_t sub_61FDC()
{
  return 1;
}

char *sub_61FE4(uint64_t a1, int a2)
{
  return (char *)&unk_4E7D00 + 8 * a2;
}

void sub_61FF4(uint64_t a1)
{
  sub_633DC(a1);

  operator delete();
}

float sub_62030(uint64_t a1, float *a2, uint64_t a3)
{
  double v10 = 0.0;
  int v9 = 8;
  int v4 = sub_3D3FC8(*(uint64_t **)(a1 + 8), 0x6E737274u, 0, 0, &v9, (float *)&v10, a3);
  if (v4)
  {
    int v5 = v4;
    uint64_t v6 = (os_log_t *)sub_32A48(25);
    uint64_t v8 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v12 = "CodecDevice.cpp";
        __int16 v13 = 1024;
        int v14 = 406;
        __int16 v15 = 2080;
        int v16 = "getSampleRate";
        __int16 v17 = 1024;
        int v18 = v5;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d CodecDevice::%s failed to get sampleRate status:%x", buf, 0x22u);
      }
    }
  }
  else
  {
    float result = v10;
    *a2 = result;
  }
  return result;
}

uint64_t sub_62154(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v53 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, a2);
  unint64_t v54 = (void *)a1;
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  if (v12)
  {
    if (a3)
    {
LABEL_3:
      if (a5 && *(unsigned char *)(a5 + 3))
      {
        uint64_t v13 = mach_absolute_time();
        unsigned int v12 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        uint64_t v13 = 0;
      }
      int v14 = (unsigned __int8 *)malloc_type_calloc(v12, 1uLL, 0xA4C180AuLL);
      if (v53) {
        char v15 = 2;
      }
      else {
        char v15 = 0;
      }
      if (a3 < 1)
      {
        uint64_t v45 = 0;
        if (!a5)
        {
LABEL_73:
          free(v14);
          return v45;
        }
      }
      else
      {
        uint64_t v47 = v13;
        unsigned int v51 = *(_DWORD *)(a1 + 16) >> v15;
        uint64_t v50 = a1 + 24;
        if (v11) {
          char v16 = 2;
        }
        else {
          char v16 = 0;
        }
        char v48 = v16;
        char v49 = v15;
        while (1)
        {
          uint64_t v17 = a3 >= v51 ? v51 : a3;
          uint64_t v18 = (*(uint64_t (**)(void *, void, uint64_t, uint64_t, uint64_t, void, unsigned __int8 *, uint64_t))(*v54 + 48))(v54, v54[1], v50, a2, v17, (v17 << v15), v14, a6);
          if (v18) {
            break;
          }
          if (v53)
          {
            if (v17)
            {
              uint64_t v19 = 0;
              int v20 = *(_DWORD **)(a4 + 8);
              do
              {
                unint64_t v21 = *(void *)(a4 + 16);
                if ((unint64_t)v20 >= v21)
                {
                  uint64_t v23 = *(_DWORD **)a4;
                  uint64_t v24 = ((uint64_t)v20 - *(void *)a4) >> 2;
                  unint64_t v25 = v24 + 1;
                  if ((unint64_t)(v24 + 1) >> 62) {
                    goto LABEL_75;
                  }
                  uint64_t v26 = v21 - (void)v23;
                  if (v26 >> 1 > v25) {
                    unint64_t v25 = v26 >> 1;
                  }
                  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v27 = v25;
                  }
                  if (v27)
                  {
                    unint64_t v27 = (unint64_t)sub_46BF4(v27);
                    uint64_t v23 = *(_DWORD **)a4;
                    int v20 = *(_DWORD **)(a4 + 8);
                  }
                  else
                  {
                    uint64_t v28 = 0;
                  }
                  uint64_t v29 = (_DWORD *)(v27 + 4 * v24);
                  _DWORD *v29 = *(_DWORD *)&v14[4 * v19];
                  int v22 = v29 + 1;
                  while (v20 != v23)
                  {
                    int v30 = *--v20;
                    *--uint64_t v29 = v30;
                  }
                  *(void *)a4 = v29;
                  *(void *)(a4 + 8) = v22;
                  *(void *)(a4 + 16) = v27 + 4 * v28;
                  if (v23) {
                    operator delete(v23);
                  }
                }
                else
                {
                  *int v20 = *(_DWORD *)&v14[4 * v19];
                  int v22 = v20 + 1;
                }
                *(void *)(a4 + 8) = v22;
                ++v19;
                int v20 = v22;
              }
              while (v19 != v17);
            }
          }
          else if (v17)
          {
            uint64_t v31 = 0;
            uint64_t v32 = *(_DWORD **)(a4 + 8);
            do
            {
              int v33 = v14[v31];
              unint64_t v34 = *(void *)(a4 + 16);
              if ((unint64_t)v32 >= v34)
              {
                uint32_t v36 = *(_DWORD **)a4;
                uint64_t v37 = ((uint64_t)v32 - *(void *)a4) >> 2;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62) {
LABEL_75:
                }
                  sub_60548();
                uint64_t v39 = v34 - (void)v36;
                if (v39 >> 1 > v38) {
                  unint64_t v38 = v39 >> 1;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  unint64_t v40 = (unint64_t)sub_46BF4(v40);
                  uint32_t v36 = *(_DWORD **)a4;
                  uint64_t v32 = *(_DWORD **)(a4 + 8);
                }
                else
                {
                  uint64_t v41 = 0;
                }
                int v42 = (_DWORD *)(v40 + 4 * v37);
                *int v42 = v33;
                __int16 v35 = v42 + 1;
                while (v32 != v36)
                {
                  int v43 = *--v32;
                  *--int v42 = v43;
                }
                *(void *)a4 = v42;
                *(void *)(a4 + 8) = v35;
                *(void *)(a4 + 16) = v40 + 4 * v41;
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *uint64_t v32 = v33;
                __int16 v35 = v32 + 1;
              }
              *(void *)(a4 + 8) = v35;
              ++v31;
              uint64_t v32 = v35;
            }
            while (v31 != v17);
          }
          char v15 = v49;
          a2 = ((v17 << v48) + a2);
          BOOL v44 = __OFSUB__(a3, v17);
          a3 -= v17;
          if ((a3 < 0) ^ v44 | (a3 == 0))
          {
            uint64_t v45 = 0;
            goto LABEL_70;
          }
        }
        uint64_t v45 = v18;
LABEL_70:
        uint64_t v13 = v47;
        if (!a5) {
          goto LABEL_73;
        }
      }
      if (*(unsigned char *)(a5 + 3)) {
        *(_DWORD *)(a5 + 4) = sub_2969F8(v13);
      }
      goto LABEL_73;
    }
  }
  else
  {
    unsigned int v12 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, *(void *)(a1 + 8), a6);
    *(_DWORD *)(a1 + 16) = v12;
    if (a3) {
      goto LABEL_3;
    }
  }
  if (!a5 || !*(unsigned char *)(a5 + 3)) {
    return 0;
  }
  uint64_t v45 = 0;
  *(_DWORD *)(a5 + 4) = 0;
  return v45;
}

uint64_t sub_62524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 120))(a1, a2, a3, a4, 0, a5);
}

uint64_t sub_62550(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    return (*(uint64_t (**)(void *, void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 48))(a1, a1[1], a1 + 3, a2, a3, a4, a5, a6);
  }
  else {
    return 0;
  }
}

uint64_t sub_62598(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    if (a2[1] != *a2) {
      goto LABEL_6;
    }
    return 0;
  }
  if (a2[1] == *a2)
  {
    if (*(unsigned char *)(a3 + 3))
    {
      uint64_t v21 = 0;
      *(_DWORD *)(a3 + 4) = 0;
      return v21;
    }
    return 0;
  }
  if (!*(unsigned char *)(a3 + 3))
  {
LABEL_6:
    int v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  int v7 = 1;
  uint64_t v8 = mach_absolute_time();
LABEL_7:
  std::string __p = 0;
  uint32_t v36 = 0;
  unint64_t v37 = 0;
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0)) {
    int v9 = 4;
  }
  else {
    int v9 = 1;
  }
  uint64_t v10 = *a2;
  int v33 = v7;
  uint64_t v32 = v8;
  if (a2[1] != *a2)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    char v15 = 1;
    do
    {
      uint64_t v16 = v13;
      uint64_t v17 = (unsigned int *)(v10 + 8 * v11);
      uint64_t v13 = *v17;
      unsigned int v18 = v17[1];
      if (v15)
      {
        if (v36 != __p) {
          uint32_t v36 = (char *)__p;
        }
        uint64_t v16 = (v13 - v9);
        uint64_t v14 = v13;
      }
      if (v13 - v16 == v9)
      {
        uint64_t v19 = v36;
        if ((unint64_t)v36 >= v37)
        {
          int v22 = (char *)__p;
          uint64_t v23 = (v36 - (unsigned char *)__p) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v25 = v37 - (void)__p;
          if ((uint64_t)(v37 - (void)__p) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          BOOL v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v26) {
            unint64_t v27 = v24;
          }
          if (v27)
          {
            unint64_t v27 = (unint64_t)sub_46BF4(v27);
            int v22 = (char *)__p;
            uint64_t v19 = v36;
          }
          else
          {
            uint64_t v28 = 0;
          }
          uint64_t v29 = (unsigned int *)(v27 + 4 * v23);
          unsigned int *v29 = v18;
          int v20 = (char *)(v29 + 1);
          while (v19 != v22)
          {
            unsigned int v30 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *--uint64_t v29 = v30;
          }
          std::string __p = v29;
          uint32_t v36 = v20;
          unint64_t v37 = v27 + 4 * v28;
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)uint32_t v36 = v18;
          int v20 = v19 + 4;
        }
        uint32_t v36 = v20;
        unint64_t v11 = ++v12;
        if (v12 == (a2[1] - *a2) >> 3)
        {
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v14, &__p, a3, a4);
          if (v21) {
            goto LABEL_40;
          }
          char v15 = 1;
        }
        else
        {
          char v15 = 0;
        }
      }
      else
      {
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v14, &__p, a3, a4);
        if (v21) {
          goto LABEL_40;
        }
        unint64_t v11 = v12;
        char v15 = 1;
        uint64_t v13 = v16;
      }
      uint64_t v10 = *a2;
    }
    while (v11 < (a2[1] - *a2) >> 3);
  }
  uint64_t v21 = 0;
LABEL_40:
  if (v33) {
    *(_DWORD *)(a3 + 4) = sub_2969F8(v32);
  }
  if (__p)
  {
    uint32_t v36 = (char *)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_62878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_628A0(uint64_t a1, int a2, int **a3, uint64_t a4, uint64_t a5)
{
  int v83 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (a4)
  {
    BOOL v80 = *(unsigned char *)a4 == 0;
    BOOL v7 = *(unsigned char *)(a4 + 3) != 0;
    BOOL v77 = *(unsigned char *)(a4 + 1) != 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v77 = 0;
    BOOL v80 = 1;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    unsigned int v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, *(void *)(a1 + 8), a5);
    *(_DWORD *)(a1 + 16) = v8;
  }
  if (!v80 && v77)
  {
    int v9 = (os_log_t *)sub_32A48(25);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v85 = "CodecDevice.cpp";
      __int16 v86 = 1024;
      int v87 = 107;
      __int16 v88 = 2080;
      uint64_t v89 = "SetDataBlockWithOptions";
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s cannot write memory asynchronously with verifyWrite enabled.", buf, 0x1Cu);
    }
    return 5;
  }
  if (a3[1] == *a3)
  {
    uint64_t v11 = 0;
    if (v7) {
      *(_DWORD *)(a4 + 4) = 0;
    }
    return v11;
  }
  if (a4 && *(unsigned char *)(a4 + 3))
  {
    uint64_t v64 = mach_absolute_time();
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    uint64_t v64 = 0;
  }
  if (v83) {
    char v12 = 2;
  }
  else {
    char v12 = 0;
  }
  char v68 = v12;
  if (v77) {
    uint64_t v82 = malloc_type_calloc(v8, 4uLL, 0x100004052888210uLL);
  }
  else {
    uint64_t v82 = 0;
  }
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  if (v83)
  {
    char v15 = 0;
  }
  else
  {
    if (v14 == v13)
    {
      char v15 = 0;
      goto LABEL_118;
    }
    BOOL v65 = v7;
    char v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    do
    {
      int v18 = *v14;
      if (v17 >= v16)
      {
        int v20 = v15;
        uint64_t v21 = v17 - v15;
        unint64_t v22 = v21 + 1;
        unint64_t __p = (unint64_t)v20;
        if (v21 + 1 < 0) {
          sub_60548();
        }
        unint64_t v23 = v16 - v20;
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = v22;
        }
        if (v24) {
          uint64_t v25 = operator new(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        char v15 = &v25[v21];
        unsigned char *v15 = v18;
        uint64_t v19 = v15 + 1;
        if (v17 != (char *)__p)
        {
          BOOL v26 = &v17[~__p];
          do
          {
            char v27 = *--v17;
            (v26--)[(void)v25] = v27;
          }
          while (v17 != (char *)__p);
          char v15 = v25;
        }
        uint64_t v16 = &v25[v24];
        if (__p) {
          operator delete((void *)__p);
        }
      }
      else
      {
        char *v17 = v18;
        uint64_t v19 = v17 + 1;
      }
      ++v14;
      uint64_t v17 = v19;
    }
    while (v14 != v13);
    uint64_t v14 = *a3;
    uint64_t v13 = a3[1];
    BOOL v7 = v65;
  }
  if (v13 == v14)
  {
LABEL_118:
    uint64_t v11 = 0;
    goto LABEL_130;
  }
  BOOL v66 = v7;
  int v74 = 0;
  unint64_t v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = v8 >> v68;
  unint64_t v31 = v13 - v14;
  uint64_t v79 = a1 + 24;
  uint64_t v70 = a4;
  __pa = v15;
  unint64_t v72 = v8 >> v68;
  while (1)
  {
    unsigned int v73 = v29;
    unint64_t v32 = v30 >= v31 - v29 ? v31 - v29 : v30;
    int v33 = (int *)&v15[v28];
    unint64_t v34 = &v14[v28];
    __int16 v35 = v83 ? v34 : v33;
    uint32_t v36 = v83 ? (unsigned int *)v34 : 0;
    unint64_t v37 = v83 ? 0 : (unsigned __int8 *)v33;
    if (*(_DWORD *)(a1 + 16))
    {
      if (!a4) {
        break;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, *(void *)(a1 + 8), a5);
      if (!a4) {
        break;
      }
    }
    if (!*(unsigned char *)(v70 + 2)) {
      break;
    }
    if (v83)
    {
      if (!v32) {
        goto LABEL_115;
      }
      uint64_t v38 = 0;
      unint64_t v39 = (v74 + v31);
      if (v72 < v39) {
        unint64_t v39 = v72;
      }
      do
      {
        unsigned int v40 = *v36++;
        v38 |= v40;
        --v39;
      }
      while (v39);
    }
    else
    {
      if (!v32) {
        goto LABEL_115;
      }
      uint64_t v38 = 0;
      unint64_t v41 = (v74 + v31);
      if (v72 < v41) {
        unint64_t v41 = v72;
      }
      do
      {
        unsigned int v42 = *v37++;
        v38 |= v42;
        --v41;
      }
      while (v41);
    }
    if (v38) {
      break;
    }
LABEL_115:
    unsigned int v30 = v72;
    unint64_t v28 = v73 + v72;
    a4 = v70;
    uint64_t v14 = *a3;
    unint64_t v31 = a3[1] - *a3;
    v74 -= v72;
    unsigned int v29 = v73 + v72;
    char v15 = __pa;
    if (v31 <= v28)
    {
      uint64_t v11 = 0;
      BOOL v7 = v66;
      goto LABEL_130;
    }
  }
  uint64_t v43 = (v73 << v68) + a2;
  uint64_t v44 = (v32 << v68);
  if (v72 >= (v74 + v31)) {
    unint64_t v45 = (v74 + v31);
  }
  else {
    unint64_t v45 = v72;
  }
  __int16 v78 = &v14[v73];
  char v46 = 1;
  int v47 = 5;
  while (2)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t, BOOL, uint64_t, unint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 56))(a1, *(void *)(a1 + 8), v79, v80, v43, v32, v44, v35, a5);
    if (v11)
    {
      char v48 = (os_log_t *)sub_32A48(25);
      char v49 = *v48;
      if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        unint64_t v85 = "CodecDevice.cpp";
        __int16 v86 = 1024;
        int v87 = 169;
        __int16 v88 = 2080;
        uint64_t v89 = "SetDataBlockWithOptions";
        __int16 v90 = 1024;
        int v91 = (v73 << v68) + a2;
        __int16 v92 = 1024;
        int v93 = v32;
        __int16 v94 = 1024;
        int v95 = v11;
        __int16 v96 = 1024;
        int v97 = v47 - 1;
        _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s _SetRegister( addr=0x%x, len=%d) failed, status = %d. Tries remaining = %d", buf, 0x34u);
      }
LABEL_89:
      if (--v47) {
        continue;
      }
      if (v11) {
        goto LABEL_122;
      }
      if (v46) {
        goto LABEL_115;
      }
      BOOL v61 = (os_log_t *)sub_32A48(25);
      uint64_t v62 = *v61;
      BOOL v7 = v66;
      if (!*v61)
      {
        uint64_t v11 = 0xFFFFFFFFLL;
        a4 = v70;
        char v15 = __pa;
        goto LABEL_130;
      }
      char v15 = __pa;
      if (os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v85 = "CodecDevice.cpp";
        __int16 v86 = 1024;
        int v87 = 215;
        __int16 v88 = 2080;
        uint64_t v89 = "SetDataBlockWithOptions";
        _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s verification failed", buf, 0x1Cu);
      }
      uint64_t v11 = 0xFFFFFFFFLL;
LABEL_129:
      a4 = v70;
      goto LABEL_130;
    }
    break;
  }
  if (!v77 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v43) & 1) != 0)
  {
    if (v46) {
      goto LABEL_115;
    }
LABEL_88:
    uint64_t v11 = 0;
    char v46 = 0;
    goto LABEL_89;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *, uint64_t))(*(void *)a1 + 48))(a1, *(void *)(a1 + 8), v79, v43, v32, v44, v82, a5);
  if (!v11)
  {
    if (!v32) {
      goto LABEL_115;
    }
    uint64_t v50 = 0;
    BOOL v51 = 1;
    while (1)
    {
      if (v83)
      {
        int v52 = v78[v50];
        unsigned int v53 = v82[v50];
      }
      else
      {
        int v52 = __pa[v73 + v50];
        unsigned int v53 = *((unsigned __int8 *)v82 + v50);
      }
      if (v52 != v53) {
        BOOL v51 = ((v53 ^ v52) & 0xFFFFFF) == 0 && (v52 & 0xFF800000) == 0x800000 && HIBYTE(v53) == 255;
      }
      if (!v51) {
        break;
      }
      if (v45 == ++v50) {
        goto LABEL_115;
      }
    }
    __int16 v56 = *(NSObject **)sub_32A48(25);
    if (v56)
    {
      log = v56;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        unint64_t v85 = "CodecDevice.cpp";
        __int16 v86 = 1024;
        int v87 = 200;
        __int16 v88 = 2080;
        uint64_t v89 = "SetDataBlockWithOptions";
        __int16 v90 = 1024;
        int v91 = v52;
        __int16 v92 = 1024;
        int v93 = v53;
        __int16 v94 = 1024;
        int v95 = v43 + v50;
        __int16 v96 = 1024;
        int v97 = v47;
        _os_log_impl(&def_1E50E8, log, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s verify failed (0x%x != 0x%x), addr=0x%x. Tries remaining = %u", buf, 0x34u);
      }
    }
    goto LABEL_88;
  }
  std::string v57 = (os_log_t *)sub_32A48(25);
  unsigned int v58 = *v57;
  if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    unint64_t v85 = "CodecDevice.cpp";
    __int16 v86 = 1024;
    int v87 = 176;
    __int16 v88 = 2080;
    uint64_t v89 = "SetDataBlockWithOptions";
    __int16 v90 = 1024;
    int v91 = (v73 << v68) + a2;
    __int16 v92 = 1024;
    int v93 = v32;
    __int16 v94 = 1024;
    int v95 = v11;
    _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s _GetRegister( addr=0x%x, len=%d) failed, status = %d", buf, 0x2Eu);
  }
LABEL_122:
  int v59 = (os_log_t *)sub_32A48(25);
  BOOL v60 = *v59;
  BOOL v7 = v66;
  char v15 = __pa;
  if (!*v59) {
    goto LABEL_129;
  }
  a4 = v70;
  if (os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unint64_t v85 = "CodecDevice.cpp";
    __int16 v86 = 1024;
    int v87 = 210;
    __int16 v88 = 2080;
    uint64_t v89 = "SetDataBlockWithOptions";
    _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d L77Device::%s Failed", buf, 0x1Cu);
  }
LABEL_130:
  if (v77) {
    free(v82);
  }
  if (v7) {
    *(_DWORD *)(a4 + 4) = sub_2969F8(v64);
  }
  if (v15) {
    operator delete(v15);
  }
  return v11;
}

void sub_63248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6328C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 88))(a1, a2, a3, 0, a4);
}

uint64_t sub_632B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4) {
    return (*(uint64_t (**)(void *, void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a1[1], a1 + 3, a2, a3, a4, a5, a6, a7);
  }
  else {
    return 0;
  }
}

void sub_6332C(void *a1)
{
  *a1 = off_61E990;
  operator new();
}

uint64_t sub_633DC(uint64_t a1)
{
  *(void *)a1 = off_61E990;
  int v2 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_63488;
  block[3] = &unk_61EA60;
  block[4] = a1;
  dispatch_sync(v2, block);
  dispatch_release(*(dispatch_object_t *)(a1 + 24));
  sub_63504((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t sub_63488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_63568;
  v3[3] = &unk_61EA40;
  void v3[4] = v1;
  return sub_61CCC((uint64_t)v3);
}

uint64_t *sub_63504(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    int v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_63568(uint64_t a1)
{
  return sub_63504((uint64_t *)(*(void *)(a1 + 32) + 8));
}

std::string *sub_63574(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_635BC(a1, __s, v4);
}

std::string *sub_635BC(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    BOOL v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    BOOL v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

uint64_t sub_6367C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  size_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_46C2C((uint64_t **)a1, v4, *a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_636E4(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_636F8(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  size_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    int v5 = a2;
    uint64_t v6 = 0;
    BOOL v7 = (int *)&a2[6 * a3];
    unsigned int v8 = a1 + 1;
    while (1)
    {
      std::string::size_type v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      unint64_t v10 = v6;
      uint64_t v11 = v4;
      if (v6)
      {
        do
        {
          std::string::size_type v9 = v10;
          unint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          std::string::size_type v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 8) < *v5)
      {
LABEL_9:
        uint64_t v14 = v6 ? v9 : v4;
        char v15 = v6 ? v9 + 1 : v4;
      }
      else
      {
        uint64_t v14 = v4;
        char v15 = v4;
        if (v6)
        {
          char v15 = v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = v6;
              unsigned int v19 = *((_DWORD *)v6 + 8);
              if (v13 >= v19) {
                break;
              }
              uint64_t v6 = (uint64_t *)*v14;
              char v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v19 >= v13) {
              break;
            }
            char v15 = v14 + 1;
            uint64_t v6 = (uint64_t *)v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = operator new(0x38uLL);
        long long v17 = *(_OWORD *)v5;
        void v16[6] = *((void *)v5 + 2);
        *((_OWORD *)v16 + 2) = v17;
        void *v16 = 0;
        v16[1] = 0;
        void v16[2] = v14;
        uint64_t *v15 = (uint64_t)v16;
        int v18 = (uint64_t *)**a1;
        if (v18)
        {
          *a1 = v18;
          uint64_t v16 = (void *)*v15;
        }
        sub_46D00(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 6;
      if (v5 == (unsigned int *)v7) {
        break;
      }
      unsigned int v8 = (uint64_t **)*a1;
      uint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_63864(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_63878(uint64_t a1)
{
  sub_639BC(*(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_638B4(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_63970((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

const void **sub_63908(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_6393C(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_63970(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    size_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_4636C(v4);
    }
  }
  a1[1] = v2;
}

void sub_639BC(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_63A00((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_63A00(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_63A58(uint64_t a1, uint64_t a2, const void **a3, const void **a4, const void **a5, uint64_t a6)
{
  if (!*a3)
  {
    unint64_t v28 = (os_log_t *)sub_32A48(13);
    unsigned int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v31 = 136315394;
      *(void *)&v31[4] = "DSPHALInterface.cpp";
      *(_WORD *)&v31[12] = 1024;
      *(_DWORD *)&v31[14] = 54;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v31, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_66F88(a1);
  if (a1 + 24 != a2) {
    sub_6720C((char *)(a1 + 24), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  BOOL v12 = *(const void **)(a1 + 48);
  unsigned int v13 = *a3;
  *(void *)(a1 + 48) = *a3;
  if (v13) {
    CFRetain(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v14 = *(const void **)(a1 + 56);
  char v15 = *a4;
  *(void *)(a1 + 56) = *a4;
  if (v15) {
    CFRetain(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v16 = *(const void **)(a1 + 64);
  long long v17 = *a5;
  *(void *)(a1 + 64) = *a5;
  if (v17) {
    CFRetain(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  int v18 = (void *)(a1 + 104);
  if (a1 + 104 != a6)
  {
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a6 + 32);
    unsigned int v19 = *(uint64_t **)(a6 + 16);
    uint64_t v20 = *(void *)(a1 + 112);
    if (v20)
    {
      for (uint64_t i = 0; i != v20; ++i)
        *(void *)(*v18 + 8 * i) = 0;
      uint64_t v22 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      if (v22) {
        BOOL v23 = v19 == 0;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23)
      {
        size_t v24 = (void *)v22;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v22 + 16), (const std::string *)(v19 + 2));
          std::string::operator=((std::string *)(v22 + 40), (const std::string *)(v19 + 5));
          size_t v24 = *(void **)v22;
          sub_67314(a1 + 104, v22);
          unsigned int v19 = (uint64_t *)*v19;
          if (!v24) {
            break;
          }
          uint64_t v22 = (uint64_t)v24;
        }
        while (v19);
      }
      sub_639BC(v24);
    }
    if (v19)
    {
      uint64_t v25 = a1 + 120;
      do
      {
        BOOL v26 = operator new(0x40uLL);
        *(void *)unint64_t v31 = v26;
        *(void *)&v31[8] = v25;
        v31[16] = 0;
        *(void *)BOOL v26 = 0;
        *((void *)v26 + 1) = 0;
        char v27 = sub_67804((char *)v26 + 16, (long long *)v19 + 1);
        v31[16] = 1;
        *((void *)v26 + 1) = sub_6789C((uint64_t)v27);
        sub_67314((uint64_t)v18, (uint64_t)v26);
        *(void *)unint64_t v31 = 0;
        sub_677AC((uint64_t)v31);
        unsigned int v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
  }
}

void sub_63CF4(_Unwind_Exception *exception_object)
{
}

void sub_63CFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_63D24(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_639BC(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_63D48(_Unwind_Exception *a1)
{
}

void sub_63D54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_63D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_63D7C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 149)) {
    return;
  }
  uint64_t v2 = (os_log_t *)sub_32A48(24);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    size_t v4 = *(unsigned int **)(a1 + 24);
    int v5 = *(unsigned int **)(a1 + 32);
    memset(&v158, 0, sizeof(v158));
    std::string::append(&v158, "{ ", 2uLL);
    if (v4 != v5)
    {
      while (1)
      {
        std::to_string((std::string *)valuePtr, *v4);
        if (valuePtr[23] >= 0) {
          uint64_t v6 = valuePtr;
        }
        else {
          uint64_t v6 = *(const std::string::value_type **)valuePtr;
        }
        if (valuePtr[23] >= 0) {
          std::string::size_type v7 = valuePtr[23];
        }
        else {
          std::string::size_type v7 = *(void *)&valuePtr[8];
        }
        std::string::append(&v158, v6, v7);
        if ((valuePtr[23] & 0x80000000) != 0) {
          operator delete(*(void **)valuePtr);
        }
        if (++v4 == v5) {
          break;
        }
        std::string::append(&v158, ", ", 2uLL);
      }
    }
    std::string::append(&v158, " }", 2uLL);
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v8 = &v158;
    }
    else {
      unsigned int v8 = (std::string *)v158.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int valuePtr = 136315650;
    *(void *)&valuePtr[4] = "DSPHALInterface.cpp";
    *(_WORD *)&valuePtr[12] = 1024;
    *(_DWORD *)&valuePtr[14] = 68;
    *(_WORD *)&valuePtr[18] = 2080;
    *(void *)&valuePtr[20] = v8;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Loading HAL DSP. Input Streams: %s", valuePtr, 0x1Cu);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v158.__r_.__value_.__l.__data_);
    }
  }
  memset(&v158, 0, sizeof(v158));
  sub_22210((CFStringRef *)cf, "dsp graph");
  std::string::size_type v9 = *(const void **)(a1 + 48);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a1 + 48));
  }
  cf[1] = v9;
  std::string::size_type size = v158.__r_.__value_.__l.__size_;
  if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
  {
    uint64_t v11 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_60548();
    }
    int64_t v13 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
    char v15 = (char *)sub_10724(v14);
    uint64_t v16 = (CFTypeRef *)&v15[16 * v11];
    *(void *)&valuePtr[24] = &v15[16 * v17];
    CFTypeRef *v16 = cf[0];
    cf[0] = 0;
    v16[1] = cf[1];
    cf[1] = 0;
    std::string::size_type v18 = (std::string::size_type)(v16 + 2);
    *(void *)&valuePtr[16] = v16 + 2;
    unsigned int v19 = (void *)v158.__r_.__value_.__l.__size_;
    std::string::size_type v20 = v158.__r_.__value_.__r.__words[0];
    if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
    {
      int64x2_t v22 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
    }
    else
    {
      do
      {
        uint64_t v21 = (const void *)*(v19 - 2);
        v19 -= 2;
        *(v16 - 2) = v21;
        v16 -= 2;
        void *v19 = 0;
        v16[1] = (CFTypeRef)v19[1];
        v19[1] = 0;
      }
      while (v19 != (void *)v20);
      int64x2_t v22 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
      std::string::size_type v18 = *(void *)&valuePtr[16];
    }
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    v158.__r_.__value_.__l.__size_ = v18;
    *(int64x2_t *)&valuePtr[8] = v22;
    std::string::size_type v23 = v158.__r_.__value_.__r.__words[2];
    v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
    *(void *)&valuePtr[24] = v23;
    *(void *)int valuePtr = v22.i64[0];
    sub_16358((uint64_t)valuePtr);
    v158.__r_.__value_.__l.__size_ = v18;
    if (cf[1]) {
      CFRelease(cf[1]);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
    *(CFTypeRef *)(size + 8) = cf[1];
    v158.__r_.__value_.__l.__size_ = size + 16;
  }
  sub_64FD8((uint64_t)cf, (int *)(a1 + 144));
  std::string::size_type v24 = v158.__r_.__value_.__l.__size_;
  if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
  {
    uint64_t v25 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 60) {
      sub_60548();
    }
    int64_t v27 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v26) {
      unint64_t v26 = v27 >> 3;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
    unsigned int v29 = (char *)sub_10724(v28);
    unsigned int v30 = (CFTypeRef *)&v29[16 * v25];
    *(void *)&valuePtr[24] = &v29[16 * v31];
    *unsigned int v30 = cf[0];
    cf[0] = 0;
    v30[1] = cf[1];
    cf[1] = 0;
    std::string::size_type v32 = (std::string::size_type)(v30 + 2);
    *(void *)&valuePtr[16] = v30 + 2;
    int v33 = (void *)v158.__r_.__value_.__l.__size_;
    std::string::size_type v34 = v158.__r_.__value_.__r.__words[0];
    if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
    {
      int64x2_t v36 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
    }
    else
    {
      do
      {
        __int16 v35 = (const void *)*(v33 - 2);
        v33 -= 2;
        *(v30 - 2) = v35;
        v30 -= 2;
        *int v33 = 0;
        v30[1] = (CFTypeRef)v33[1];
        v33[1] = 0;
      }
      while (v33 != (void *)v34);
      int64x2_t v36 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
      std::string::size_type v32 = *(void *)&valuePtr[16];
    }
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    v158.__r_.__value_.__l.__size_ = v32;
    *(int64x2_t *)&valuePtr[8] = v36;
    std::string::size_type v37 = v158.__r_.__value_.__r.__words[2];
    v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
    *(void *)&valuePtr[24] = v37;
    *(void *)int valuePtr = v36.i64[0];
    sub_16358((uint64_t)valuePtr);
    v158.__r_.__value_.__l.__size_ = v32;
    if (cf[1]) {
      CFRelease(cf[1]);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
    *(CFTypeRef *)(v24 + 8) = cf[1];
    v158.__r_.__value_.__l.__size_ = v24 + 16;
  }
  if (*(void *)(a1 + 56))
  {
    sub_22210((CFStringRef *)cf, "au tuning strip");
    uint64_t v38 = *(const void **)(a1 + 56);
    if (v38) {
      CFRetain(*(CFTypeRef *)(a1 + 56));
    }
    cf[1] = v38;
    std::string::size_type v39 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
    {
      uint64_t v40 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60) {
        sub_60548();
      }
      int64_t v42 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
      uint64_t v44 = (char *)sub_10724(v43);
      unint64_t v45 = (CFTypeRef *)&v44[16 * v40];
      *(void *)&valuePtr[24] = &v44[16 * v46];
      *unint64_t v45 = cf[0];
      cf[0] = 0;
      v45[1] = cf[1];
      cf[1] = 0;
      std::string::size_type v47 = (std::string::size_type)(v45 + 2);
      *(void *)&valuePtr[16] = v45 + 2;
      char v48 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v49 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v51 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          uint64_t v50 = (const void *)*(v48 - 2);
          v48 -= 2;
          *(v45 - 2) = v50;
          v45 -= 2;
          void *v48 = 0;
          v45[1] = (CFTypeRef)v48[1];
          v48[1] = 0;
        }
        while (v48 != (void *)v49);
        int64x2_t v51 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v47 = *(void *)&valuePtr[16];
      }
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      v158.__r_.__value_.__l.__size_ = v47;
      *(int64x2_t *)&valuePtr[8] = v51;
      std::string::size_type v52 = v158.__r_.__value_.__r.__words[2];
      v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v52;
      *(void *)int valuePtr = v51.i64[0];
      sub_16358((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v47;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v39 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v39 + 16;
    }
  }
  if (*(void *)(a1 + 64))
  {
    sub_22210((CFStringRef *)cf, "property strip");
    unsigned int v53 = *(const void **)(a1 + 64);
    if (v53) {
      CFRetain(*(CFTypeRef *)(a1 + 64));
    }
    cf[1] = v53;
    std::string::size_type v54 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
    {
      uint64_t v55 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 60) {
        sub_60548();
      }
      int64_t v57 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v56) {
        unint64_t v56 = v57 >> 3;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
      int v59 = (char *)sub_10724(v58);
      BOOL v60 = (CFTypeRef *)&v59[16 * v55];
      *(void *)&valuePtr[24] = &v59[16 * v61];
      *BOOL v60 = cf[0];
      cf[0] = 0;
      v60[1] = cf[1];
      cf[1] = 0;
      std::string::size_type v62 = (std::string::size_type)(v60 + 2);
      *(void *)&valuePtr[16] = v60 + 2;
      __int16 v63 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v64 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v66 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          BOOL v65 = (const void *)*(v63 - 2);
          v63 -= 2;
          *(v60 - 2) = v65;
          v60 -= 2;
          *__int16 v63 = 0;
          v60[1] = (CFTypeRef)v63[1];
          v63[1] = 0;
        }
        while (v63 != (void *)v64);
        int64x2_t v66 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v62 = *(void *)&valuePtr[16];
      }
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      v158.__r_.__value_.__l.__size_ = v62;
      *(int64x2_t *)&valuePtr[8] = v66;
      std::string::size_type v67 = v158.__r_.__value_.__r.__words[2];
      v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v67;
      *(void *)int valuePtr = v66.i64[0];
      sub_16358((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v62;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v54 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v54 + 16;
    }
  }
  if (*(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    CFArrayRef v68 = sub_650B4((int **)(a1 + 24));
    *(void *)&inAddress.int mSelector = v68;
    sub_22210((CFStringRef *)cf, "input stream busses");
    if (v68) {
      CFRetain(v68);
    }
    cf[1] = v68;
    std::string::size_type v69 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
    {
      uint64_t v70 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 60) {
        sub_60548();
      }
      int64_t v72 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v71) {
        unint64_t v71 = v72 >> 3;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v71;
      }
      uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
      int v74 = (char *)sub_10724(v73);
      unsigned int v75 = (CFTypeRef *)&v74[16 * v70];
      *(void *)&valuePtr[24] = &v74[16 * v76];
      *unsigned int v75 = cf[0];
      cf[0] = 0;
      v75[1] = cf[1];
      cf[1] = 0;
      std::string::size_type v77 = (std::string::size_type)(v75 + 2);
      *(void *)&valuePtr[16] = v75 + 2;
      __int16 v78 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v79 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v81 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          BOOL v80 = (const void *)*(v78 - 2);
          v78 -= 2;
          *(v75 - 2) = v80;
          v75 -= 2;
          *__int16 v78 = 0;
          v75[1] = (CFTypeRef)v78[1];
          v78[1] = 0;
        }
        while (v78 != (void *)v79);
        int64x2_t v81 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v77 = *(void *)&valuePtr[16];
      }
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      v158.__r_.__value_.__l.__size_ = v77;
      *(int64x2_t *)&valuePtr[8] = v81;
      std::string::size_type v82 = v158.__r_.__value_.__r.__words[2];
      v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v82;
      *(void *)int valuePtr = v81.i64[0];
      sub_16358((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v77;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v69 + 8) = cf[1];
      cf[0] = 0;
      cf[1] = 0;
      v158.__r_.__value_.__l.__size_ = v69 + 16;
    }
    if (v68) {
      CFRelease(v68);
    }
  }
  if (*(void *)(a1 + 72))
  {
    sub_22210((CFStringRef *)cf, "initialization properties");
    int v83 = *(const void **)(a1 + 72);
    if (v83) {
      CFRetain(*(CFTypeRef *)(a1 + 72));
    }
    cf[1] = v83;
    std::string::size_type v84 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
    {
      uint64_t v85 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 60) {
        sub_60548();
      }
      int64_t v87 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v86) {
        unint64_t v86 = v87 >> 3;
      }
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v88 = v86;
      }
      uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
      uint64_t v89 = (char *)sub_10724(v88);
      __int16 v90 = (CFTypeRef *)&v89[16 * v85];
      *(void *)&valuePtr[24] = &v89[16 * v91];
      CFTypeRef *v90 = cf[0];
      cf[0] = 0;
      v90[1] = cf[1];
      cf[1] = 0;
      std::string::size_type v92 = (std::string::size_type)(v90 + 2);
      *(void *)&valuePtr[16] = v90 + 2;
      int v93 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v94 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v96 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          int v95 = (const void *)*(v93 - 2);
          v93 -= 2;
          *(v90 - 2) = v95;
          v90 -= 2;
          void *v93 = 0;
          v90[1] = (CFTypeRef)v93[1];
          v93[1] = 0;
        }
        while (v93 != (void *)v94);
        int64x2_t v96 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v92 = *(void *)&valuePtr[16];
      }
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
      v158.__r_.__value_.__l.__size_ = v92;
      *(int64x2_t *)&valuePtr[8] = v96;
      std::string::size_type v97 = v158.__r_.__value_.__r.__words[2];
      v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v97;
      *(void *)int valuePtr = v96.i64[0];
      sub_16358((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v92;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v84 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v84 + 16;
    }
  }
  unint64_t v98 = *(void *)(a1 + 128);
  if (v98)
  {
    memset(valuePtr, 0, 24);
    sub_162D4(valuePtr, v98);
    for (uint64_t i = (const UInt8 *)(a1 + 120); ; sub_669A8(valuePtr, i + 16, (uint64_t)(i + 40)))
    {
      uint64_t i = *(const UInt8 **)i;
      if (!i) {
        break;
      }
    }
    CFDictionaryRef v100 = sub_4D69C((void ***)valuePtr);
    *(void *)&inAddress.int mSelector = valuePtr;
    sub_14F84((void ***)&inAddress);
    CFDictionaryRef outData = v100;
    sub_22210((CFStringRef *)cf, "dsp graph string substitutions");
    if (v100) {
      CFRetain(v100);
    }
    cf[1] = v100;
    std::string::size_type v101 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
    {
      uint64_t v102 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 60) {
        sub_60548();
      }
      int64_t v104 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v103) {
        unint64_t v103 = v104 >> 3;
      }
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v105 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v105 = v103;
      }
      uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
      uint64_t v106 = (char *)sub_10724(v105);
      uint64_t v107 = (CFTypeRef *)&v106[16 * v102];
      *(void *)&valuePtr[24] = &v106[16 * v108];
      CFTypeRef *v107 = cf[0];
      cf[0] = 0;
      v107[1] = cf[1];
      cf[1] = 0;
      std::string::size_type v109 = (std::string::size_type)(v107 + 2);
      *(void *)&valuePtr[16] = v107 + 2;
      long long v110 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v111 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v113 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          long long v112 = (const void *)*(v110 - 2);
          v110 -= 2;
          *(v107 - 2) = v112;
          v107 -= 2;
          *long long v110 = 0;
          v107[1] = (CFTypeRef)v110[1];
          v110[1] = 0;
        }
        while (v110 != (void *)v111);
        int64x2_t v113 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v109 = *(void *)&valuePtr[16];
      }
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
      v158.__r_.__value_.__l.__size_ = v109;
      *(int64x2_t *)&valuePtr[8] = v113;
      std::string::size_type v114 = v158.__r_.__value_.__r.__words[2];
      v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v114;
      *(void *)int valuePtr = v113.i64[0];
      sub_16358((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v109;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v101 + 8) = cf[1];
      cf[0] = 0;
      cf[1] = 0;
      v158.__r_.__value_.__l.__size_ = v101 + 16;
    }
    if (v100) {
      CFRelease(v100);
    }
  }
  if (*(unsigned char *)(a1 + 156))
  {
    sub_22210((CFStringRef *)cf, "client channel count");
    *(_DWORD *)int valuePtr = *(_DWORD *)(a1 + 152);
    cf[1] = CFNumberCreate(0, kCFNumberIntType, valuePtr);
    if (!cf[1])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    std::string::size_type v115 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__r.__words[2])
    {
      uint64_t v116 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v117 = v116 + 1;
      if ((unint64_t)(v116 + 1) >> 60) {
        sub_60548();
      }
      int64_t v118 = v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v158.__r_.__value_.__r.__words[2] - v158.__r_.__value_.__r.__words[0]) >> 3 > v117) {
        unint64_t v117 = v118 >> 3;
      }
      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v119 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v119 = v117;
      }
      uint64_t v165 = &v158.__r_.__value_.__s.__data_[16];
      uint64_t v120 = (char *)sub_10724(v119);
      char v121 = (CFTypeRef *)&v120[16 * v116];
      *(void *)&valuePtr[24] = &v120[16 * v122];
      *char v121 = cf[0];
      cf[0] = 0;
      v121[1] = cf[1];
      cf[1] = 0;
      std::string::size_type v123 = (std::string::size_type)(v121 + 2);
      *(void *)&valuePtr[16] = v121 + 2;
      int v124 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v125 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v127 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          uint64_t v126 = (const void *)*(v124 - 2);
          v124 -= 2;
          *(v121 - 2) = v126;
          v121 -= 2;
          *int v124 = 0;
          v121[1] = (CFTypeRef)v124[1];
          v124[1] = 0;
        }
        while (v124 != (void *)v125);
        int64x2_t v127 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v123 = *(void *)&valuePtr[16];
      }
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
      v158.__r_.__value_.__l.__size_ = v123;
      *(int64x2_t *)&valuePtr[8] = v127;
      std::string::size_type v128 = v158.__r_.__value_.__r.__words[2];
      v158.__r_.__value_.__r.__words[2] = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v128;
      *(void *)int valuePtr = v127.i64[0];
      sub_16358((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v123;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v115 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v115 + 16;
    }
  }
  CFDictionaryRef v129 = sub_4D69C((void ***)&v158);
  CFDictionaryRef v159 = v129;
  sub_6528C(*(void *)(a1 + 16), (unint64_t *)&v159);
  *(void *)&inAddress.int mSelector = 0x6F75747068647370;
  inAddress.mElement = 0;
  CFDictionaryRef outData = 0;
  UInt32 ioDataSize = 8;
  AudioObjectID v130 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  if (AudioObjectGetPropertyData(v130, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    int v147 = (os_log_t *)sub_32A48(13);
    int v148 = *v147;
    if (*v147 && os_log_type_enabled(*v147, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "DSPHALInterface.cpp";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 211;
      _os_log_impl(&def_1E50E8, v148, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", valuePtr, 0x12u);
    }
    UInt32 v149 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v149, "Precondition failure.");
  }
  sub_22084(&v160, outData);
  if (!v160)
  {
    unsigned int v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v150, "Could not construct");
  }
  CFStringRef v131 = (const __CFString *)sub_65E40((const __CFDictionary *)v160, "dsp graph");
  if (!v131)
  {
    valuePtr[0] = 0;
    valuePtr[24] = 0;
    goto LABEL_181;
  }
  sub_65F38((CFTypeID)valuePtr, v131);
  if (!valuePtr[24])
  {
LABEL_181:
    sub_21C8C(cf, "");
    char v132 = valuePtr[23];
    goto LABEL_182;
  }
  char v132 = valuePtr[23];
  if ((valuePtr[23] & 0x80000000) == 0)
  {
    *(_OWORD *)CFTypeRef cf = *(_OWORD *)valuePtr;
    uint64_t v157 = *(void *)&valuePtr[16];
    goto LABEL_185;
  }
  sub_21E8C(cf, *(void **)valuePtr, *(unint64_t *)&valuePtr[8]);
LABEL_182:
  if (valuePtr[24] && v132 < 0) {
    operator delete(*(void **)valuePtr);
  }
LABEL_185:
  if (v160) {
    CFRelease(v160);
  }
  CFStringRef v133 = *(const __CFString **)(a1 + 48);
  if (!v133)
  {
    int v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v151, "Could not construct");
  }
  sub_20C54((uint64_t)valuePtr, v133);
  if (v157 >= 0) {
    CFTypeRef v134 = (CFTypeRef)HIBYTE(v157);
  }
  else {
    CFTypeRef v134 = cf[1];
  }
  CFTypeRef v135 = (CFTypeRef)valuePtr[23];
  int v136 = valuePtr[23];
  if (valuePtr[23] < 0) {
    CFTypeRef v135 = *(CFTypeRef *)&valuePtr[8];
  }
  if (v134 == v135)
  {
    if (valuePtr[23] >= 0) {
      uint64_t v137 = valuePtr;
    }
    else {
      uint64_t v137 = *(unsigned __int8 **)valuePtr;
    }
    if (v157 < 0)
    {
      BOOL v146 = memcmp(cf[0], v137, (size_t)cf[1]) == 0;
      goto LABEL_209;
    }
    if (HIBYTE(v157))
    {
      uint64_t v138 = HIBYTE(v157) - 1;
      CFMutableDictionaryRef v139 = cf;
      do
      {
        int v141 = *(unsigned __int8 *)v139;
        CFMutableDictionaryRef v139 = (CFTypeRef *)((char *)v139 + 1);
        int v140 = v141;
        int v143 = *v137++;
        int v142 = v143;
        BOOL v145 = v138-- != 0;
        BOOL v146 = v140 == v142;
      }
      while (v140 == v142 && v145);
LABEL_209:
      if ((v136 & 0x80000000) == 0) {
        goto LABEL_210;
      }
      goto LABEL_207;
    }
    BOOL v146 = 1;
    if ((valuePtr[23] & 0x80000000) == 0) {
      goto LABEL_210;
    }
LABEL_207:
    operator delete(*(void **)valuePtr);
    goto LABEL_210;
  }
  BOOL v146 = 0;
  if ((valuePtr[23] & 0x80000000) != 0) {
    goto LABEL_207;
  }
LABEL_210:
  if (!v146)
  {
    uint64_t v152 = (os_log_t *)sub_32A48(13);
    char v153 = *v152;
    if (*v152 && os_log_type_enabled(*v152, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "DSPHALInterface.cpp";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 98;
      _os_log_impl(&def_1E50E8, v153, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", valuePtr, 0x12u);
    }
    int v154 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v154, "Postcondition failure.");
  }
  *(unsigned char *)(a1 + 149) = 1;
  if (SHIBYTE(v157) < 0) {
    operator delete((void *)cf[0]);
  }
  CFRelease(v129);
  *(void *)int valuePtr = &v158;
  sub_14F84((void ***)valuePtr);
}

void sub_64DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, CFTypeRef cf, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_64FD8(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "target stream");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_65078(_Unwind_Exception *a1)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_650B4(int **a1)
{
  unint64_t v2 = a1[1] - *a1;
  int64x2_t v19 = 0uLL;
  unint64_t v20 = 0;
  sub_66C3C(&v19, v2);
  int v3 = *a1;
  CFNumberRef v4 = a1[1];
  if (*a1 != v4)
  {
    int v5 = (CFNumberRef *)v19.i64[1];
    do
    {
      int v6 = *v3;
      if ((unint64_t)v5 >= v20)
      {
        uint64_t v7 = ((uint64_t)v5 - v19.i64[0]) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v8 = (uint64_t)(v20 - v19.i64[0]) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v20 - v19.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        std::string::size_type v24 = &v20;
        if (v9) {
          unint64_t v9 = (unint64_t)sub_106EC(v9);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v21 = (int64x2_t *)v9;
        v22.i64[0] = v9 + 8 * v7;
        v22.i64[1] = v22.i64[0];
        unint64_t v23 = v9 + 8 * v10;
        sub_66D94((CFNumberRef *)v22.i64[0], v6);
        uint64_t v11 = v22.i64[0];
        int v5 = (CFNumberRef *)(v22.i64[1] + 8);
        v22.i64[1] += 8;
        unint64_t v12 = (void *)v19.i64[1];
        int64_t v13 = (void *)v19.i64[0];
        if (v19.i64[1] == v19.i64[0])
        {
          int64x2_t v15 = vdupq_n_s64(v19.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v14 = *--v12;
            *(void *)(v11 - 8) = v14;
            v11 -= 8;
            void *v12 = 0;
          }
          while (v12 != v13);
          int64x2_t v15 = v19;
          int v5 = (CFNumberRef *)v22.i64[1];
        }
        v19.i64[0] = v11;
        v19.i64[1] = (uint64_t)v5;
        int64x2_t v22 = v15;
        unint64_t v16 = v20;
        unint64_t v20 = v23;
        unint64_t v23 = v16;
        uint64_t v21 = (int64x2_t *)v15.i64[0];
        sub_66EEC((uint64_t)&v21);
      }
      else
      {
        sub_66D94(v5++, *v3);
      }
      v19.i64[1] = (uint64_t)v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v17 = sub_66CFC((uint64_t **)&v19);
  uint64_t v21 = &v19;
  sub_66E4C((void ***)&v21);
  return v17;
}

void sub_6524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_66E4C(&a13);
  _Unwind_Resume(a1);
}

void sub_6528C(uint64_t a1, unint64_t *a2)
{
  AudioObjectID inObjectID = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  *(void *)&inAddress.int mSelector = 0x6F75747068647370;
  inAddress.mElement = 0;
  unint64_t inData = *a2;
  uint64_t v3 = sub_32A48(13);
  if (*(unsigned char *)(v3 + 8))
  {
    CFNumberRef v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        v68.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v68.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v69, (unsigned int *)&v68);
        int v5 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 166;
        __int16 v61 = 2080;
        *(void *)std::string::size_type v62 = v5;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = inObjectID;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v54 = inObjectID;
  AudioObjectPropertyAddress v55 = inAddress;
  int v56 = 0;
  uint64_t v57 = 0;
  int v6 = sub_660A0((uint64_t)&v54);
  if (!v7)
  {
    if (v6 && inData)
    {
      if (!CFEqual(v6, (CFTypeRef)inData)) {
        goto LABEL_10;
      }
    }
    else if (v6 || inData)
    {
      goto LABEL_10;
    }
    uint64_t v30 = sub_32A48(13);
    if ((*(unsigned char *)(v30 + 8) & 1) == 0) {
      return;
    }
    uint64_t v31 = *(NSObject **)v30;
    if (!*(void *)v30 || !os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    buf.int mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v59 = 1024;
    int v60 = 191;
    __int16 v61 = 1024;
    *(_DWORD *)std::string::size_type v62 = inObjectID;
LABEL_85:
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    return;
  }
LABEL_10:
  uint64_t v8 = sub_32A48(13);
  if (*(unsigned char *)(v8 + 8))
  {
    unint64_t v9 = *(NSObject **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        v68.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v68.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v69, (unsigned int *)&v68);
        uint64_t v10 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 199;
        __int16 v61 = 2080;
        *(void *)std::string::size_type v62 = v10;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = inObjectID;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = inAddress;
  OSStatus v11 = AudioObjectSetPropertyData(inObjectID, &buf, 0, 0, 8u, &inData);
  if (v11)
  {
    std::string::size_type v37 = (os_log_t *)sub_32A48(13);
    uint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v69, v11);
      int v39 = v69.__m_.__opaque[15];
      uint64_t sig = v69.__m_.__sig;
      inClientData[0] = inAddress;
      sub_16C9C4((uint64_t)&v68, &inClientData[0].mSelector);
      unint64_t v41 = &v69;
      if (v39 < 0) {
        unint64_t v41 = (std::mutex *)sig;
      }
      if (v68.__cv_.__opaque[15] >= 0) {
        uint64_t v42 = (uint64_t)&v68;
      }
      else {
        uint64_t v42 = v68.__cv_.__sig;
      }
      buf.int mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v59 = 1024;
      int v60 = 207;
      __int16 v61 = 1024;
      *(_DWORD *)std::string::size_type v62 = v11;
      *(_WORD *)&v62[4] = 2080;
      *(void *)&v62[6] = v41;
      *(_WORD *)&v62[14] = 2080;
      *(void *)&v62[16] = v42;
      *(_WORD *)&v62[24] = 1024;
      *(_DWORD *)&v62[26] = inObjectID;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (v68.__cv_.__opaque[15] < 0) {
        operator delete((void *)v68.__cv_.__sig);
      }
      if (v69.__m_.__opaque[15] < 0) {
        operator delete((void *)v69.__m_.__sig);
      }
    }
    goto LABEL_108;
  }
  unint64_t v12 = sub_660A0((uint64_t)&v54);
  if (v13) {
    goto LABEL_20;
  }
  if (!v12 || !inData)
  {
    if (v12 || inData) {
      goto LABEL_20;
    }
    goto LABEL_81;
  }
  if (CFEqual(v12, (CFTypeRef)inData))
  {
LABEL_81:
    uint64_t v32 = sub_32A48(13);
    if ((*(unsigned char *)(v32 + 8) & 1) == 0) {
      return;
    }
    uint64_t v31 = *(NSObject **)v32;
    if (!*(void *)v32 || !os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    buf.int mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v59 = 1024;
    int v60 = 219;
    __int16 v61 = 1024;
    *(_DWORD *)std::string::size_type v62 = inObjectID;
    goto LABEL_85;
  }
LABEL_20:
  memset(v69.__m_.__opaque, 0, sizeof(v69.__m_.__opaque));
  v69.__m_.__uint64_t sig = 850045863;
  memset(v68.__cv_.__opaque, 0, sizeof(v68.__cv_.__opaque));
  v68.__cv_.__uint64_t sig = 1018212795;
  char v53 = 0;
  sub_662FC(inClientData, inObjectID, &inAddress, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v53);
  for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v18.__d_.__rep_) / -1000)
  {
    int64x2_t v15 = sub_660A0((uint64_t)&v54);
    if (v16) {
      goto LABEL_107;
    }
    unint64_t v17 = (unint64_t)v15;
    if (!v15 || !inData) {
      break;
    }
    if (CFEqual(v15, (CFTypeRef)inData)) {
      goto LABEL_55;
    }
LABEL_28:
    if (i <= 0)
    {
      int v33 = (os_log_t *)sub_32A48(13);
      std::string::size_type v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        AudioObjectPropertyAddress v49 = inAddress;
        p_luint64_t k = &__lk;
        sub_16C9C4((uint64_t)&__lk, &v49.mSelector);
        if (v51 < 0) {
          p_luint64_t k = __lk.__m_;
        }
        if (v17 && inData) {
          BOOL v36 = CFEqual((CFTypeRef)v17, (CFTypeRef)inData) != 0;
        }
        else {
          BOOL v36 = (v17 | inData) == 0;
        }
        buf.int mSelector = 136316930;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 248;
        __int16 v61 = 2080;
        *(void *)std::string::size_type v62 = "set";
        *(_WORD *)&v62[8] = 2080;
        *(void *)&v62[10] = p_lk;
        *(_WORD *)&v62[18] = 2080;
        *(void *)&v62[20] = "set";
        *(_WORD *)&v62[28] = 1024;
        BOOL v63 = v36;
        __int16 v64 = 1024;
        int v65 = 0;
        __int16 v66 = 1024;
        AudioObjectID v67 = inObjectID;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
        if (v51 < 0) {
          operator delete(__lk.__m_);
        }
      }
LABEL_107:
      sub_6651C((uint64_t)inClientData);
      std::condition_variable::~condition_variable(&v68);
      std::mutex::~mutex(&v69);
LABEL_108:
      unint64_t v43 = (os_log_t *)sub_32A48(13);
      uint64_t v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPHALInterface.cpp";
        __int16 v59 = 1024;
        int v60 = 235;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Postcondition failure.");
    }
    v18.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v19 = sub_32A48(13);
    if (*(unsigned char *)(v19 + 8))
    {
      unint64_t v20 = *(NSObject **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          buf.int mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v59 = 1024;
          int v60 = 257;
          __int16 v61 = 2080;
          *(void *)std::string::size_type v62 = "with timeout";
          *(_WORD *)&v62[8] = 1024;
          *(_DWORD *)&v62[10] = inObjectID;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
        }
      }
    }
    sub_3B7EC();
    *(void *)&buf.int mSelector = &qword_64CC40;
    LOBYTE(buf.mElement) = 0;
    LOBYTE(buf.mElement) = sub_1D4024();
    __lk.__m_ = &v69;
    __lk.__owns_ = 1;
    std::mutex::lock(&v69);
    v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (!v53)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = v21.__d_.__rep_ + 1000000 * i;
      while (1)
      {
        if (v22 <= std::chrono::steady_clock::now().__d_.__rep_) {
          goto LABEL_34;
        }
        v23.__d_.__rep_ = v22 - std::chrono::steady_clock::now().__d_.__rep_;
        if (v23.__d_.__rep_ >= 1) {
          break;
        }
LABEL_52:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v22 || v53) {
          goto LABEL_34;
        }
      }
      std::chrono::steady_clock::now();
      v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v24.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0;
        goto LABEL_48;
      }
      if (v24.__d_.__rep_ < 1)
      {
        if ((unint64_t)v24.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          goto LABEL_47;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v24.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_48;
        }
LABEL_47:
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 1000 * v24.__d_.__rep_;
LABEL_48:
        if (v25 > (v23.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v26.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_51:
          std::condition_variable::__do_timed_wait(&v68, &__lk, v26);
          std::chrono::steady_clock::now();
          goto LABEL_52;
        }
      }
      v26.__d_.__rep_ = v25 + v23.__d_.__rep_;
      goto LABEL_51;
    }
LABEL_34:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    sub_66410((uint64_t)&buf);
  }
  if (v15 || inData) {
    goto LABEL_28;
  }
LABEL_55:
  uint64_t v27 = sub_32A48(13);
  if (*(unsigned char *)(v27 + 8))
  {
    unint64_t v28 = *(NSObject **)v27;
    if (*(void *)v27)
    {
      if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyAddress v49 = inAddress;
        sub_16C9C4((uint64_t)&__lk, &v49.mSelector);
        if (v51 >= 0) {
          uint64_t m = &__lk;
        }
        else {
          uint64_t m = __lk.__m_;
        }
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 288;
        __int16 v61 = 2080;
        *(void *)std::string::size_type v62 = m;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = inObjectID;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v51 < 0) {
          operator delete(__lk.__m_);
        }
      }
    }
  }
  sub_6651C((uint64_t)inClientData);
  std::condition_variable::~condition_variable(&v68);
  std::mutex::~mutex(&v69);
}

void sub_65CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (*(char *)(v34 - 145) < 0) {
    operator delete(*(void **)(v34 - 168));
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *sub_65D88(std::runtime_error *a1)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

void *sub_65D94(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_4F8C0();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *std::locale __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    int v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

const void *sub_65E40(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_65EF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFTypeID sub_65F38(CFTypeID result, const __CFString *a2)
{
  CFTypeID v2 = result;
  if (a2 && (TypeID = CFStringGetTypeID(), float result = CFGetTypeID(a2), TypeID == result))
  {
    float result = (CFTypeID)sub_65FBC((uint64_t)&v5, a2);
    *(_OWORD *)CFTypeID v2 = v5;
    *(void *)(v2 + 16) = v6;
    *(unsigned char *)(v2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)CFTypeID v2 = 0;
    *(unsigned char *)(v2 + 24) = 0;
  }
  return result;
}

void *sub_65FBC(uint64_t a1, CFStringRef theString)
{
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr) {
    return sub_21C8C((void *)a1, CStringPtr);
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex maxBufLen = 0;
  v9.locatiouint64_t n = 0;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  sub_65D94((void *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0) {
    size_t v7 = (UInt8 *)a1;
  }
  else {
    size_t v7 = *(UInt8 **)a1;
  }
  v10.locatiouint64_t n = 0;
  v10.length = Length;
  return (void *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void *sub_660A0(uint64_t a1)
{
  CFTypeID v2 = (uint64_t *)(a1 + 4);
  *(void *)&inAddress.int mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  inAddress.mElement = *(_DWORD *)(a1 + 12);
  size_t v4 = *(const void **)(a1 + 24);
  if (AudioObjectHasProperty(*(_DWORD *)a1, &inAddress))
  {
    ioDataSize[0] = sub_26E94(*(_DWORD *)a1, &inAddress, v3, v4);
    if (ioDataSize[0])
    {
      outData[0] = 0;
      OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)a1, &inAddress, v3, v4, ioDataSize, outData);
      unsigned int v6 = PropertyData;
      BOOL v7 = PropertyData == 0;
      if (PropertyData) {
        size_t v8 = 0;
      }
      else {
        size_t v8 = outData[0];
      }
      if (!PropertyData) {
        goto LABEL_21;
      }
    }
    else
    {
      size_t v8 = 0;
      BOOL v7 = 0;
      unsigned int v6 = 2003329396;
    }
  }
  else
  {
    size_t v8 = 0;
    BOOL v7 = 0;
    unsigned int v6 = 2003332927;
  }
  CFRange v9 = (os_log_t *)sub_32A48(13);
  CFRange v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(outData, v6);
    int v11 = v22;
    unint64_t v12 = (void **)outData[0];
    uint64_t v17 = *v2;
    int v18 = *((_DWORD *)v2 + 2);
    sub_16C9C4((uint64_t)ioDataSize, (unsigned int *)&v17);
    int v13 = outData;
    if (v11 < 0) {
      int v13 = v12;
    }
    if (v20 >= 0) {
      uint64_t v14 = ioDataSize;
    }
    else {
      uint64_t v14 = *(UInt32 **)ioDataSize;
    }
    AudioObjectID v15 = *(_DWORD *)a1;
    inAddress.int mSelector = 136316418;
    *(void *)&inAddress.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v24 = 1024;
    int v25 = 176;
    __int16 v26 = 1024;
    unsigned int v27 = v6;
    __int16 v28 = 2080;
    unsigned int v29 = v13;
    __int16 v30 = 2080;
    uint64_t v31 = v14;
    __int16 v32 = 1024;
    AudioObjectID v33 = v15;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&inAddress, 0x32u);
    if (v20 < 0) {
      operator delete(*(void **)ioDataSize);
    }
    if (v22 < 0) {
      operator delete(outData[0]);
    }
  }
LABEL_21:
  if (v7) {
    return v8;
  }
  else {
    return 0;
  }
}

void sub_662C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_662FC(void *inClientData, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)inClientData = inObjectID;
  inClientData[1] = inAddress;
  inClientData[2] = a4;
  AudioObjectPropertyAddress inClientData[3] = a5;
  inClientData[4] = a6;
  OSStatus v7 = AudioObjectAddPropertyListener(inObjectID, inAddress, (AudioObjectPropertyListenerProc)sub_665F0, inClientData);
  if (v7)
  {
    OSStatus v8 = v7;
    CFRange v9 = (os_log_t *)sub_32A48(13);
    CFRange v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v11 = *(_DWORD *)inClientData;
        int v13 = 136315906;
        uint64_t v14 = "HALPropertySynchronizer.h";
        __int16 v15 = 1024;
        int v16 = 70;
        __int16 v17 = 1024;
        OSStatus v18 = v8;
        __int16 v19 = 1024;
        int v20 = v11;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d registering property listener on id %u.", (uint8_t *)&v13, 0x1Eu);
      }
    }
  }
  return inClientData;
}

uint64_t sub_66410(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(void *)a1;
    sub_3B9AC(*(void *)a1);
    int v3 = *(_DWORD *)(v2 + 136);
    if (v3) {
      goto LABEL_7;
    }
    size_t v4 = (os_log_t *)sub_32A48(13);
    long long v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      OSStatus v8 = "RoutingMutex.cpp";
      __int16 v9 = 1024;
      int v10 = 140;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"no one was blocking on the HAL run loop\"", (uint8_t *)&v7, 0x12u);
    }
    int v3 = *(_DWORD *)(v2 + 136);
    if (v3) {
LABEL_7:
    }
      *(_DWORD *)(v2 + 136) = v3 - 1;
    sub_43D580(v2);
  }
  return a1;
}

void sub_66510(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_6651C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))()) {
    operator new();
  }
  AudioObjectRemovePropertyListener(*(_DWORD *)a1, *(const AudioObjectPropertyAddress **)(a1 + 8), (AudioObjectPropertyListenerProc)sub_665F0, (void *)a1);
  return a1;
}

uint64_t sub_665F0(int a1, unsigned int a2, const void *a3, int *a4)
{
  if (a4)
  {
    uint64_t v8 = sub_32A48(13);
    if (*(unsigned char *)(v8 + 8))
    {
      __int16 v9 = *(NSObject **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v29 = 1024;
          int v30 = 110;
          __int16 v31 = 1024;
          LODWORD(v32) = a1;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d A property changed listener routine has been called for one or more properties on id %u", buf, 0x18u);
        }
      }
    }
    std::chrono::steady_clock::time_point v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0;
    sub_66880(&v21, a3, (uint64_t)a3 + 12 * a2, a2);
    int v10 = v21;
    if (*a4 == a1)
    {
      int v11 = v22;
      if (v21 != v22)
      {
        unint64_t v12 = (_DWORD *)*((void *)a4 + 1);
        int v13 = v21;
        while (1)
        {
          int v14 = v13[2];
          *(void *)AudioObjectPropertyAddress buf = *(void *)v13;
          *(_DWORD *)&uint8_t buf[8] = v14;
          if (sub_668FC((int *)buf, v12)) {
            break;
          }
          v13 += 3;
          if (v13 == v11) {
            goto LABEL_22;
          }
        }
        if (v13 != v11)
        {
          uint64_t v15 = sub_32A48(13);
          if (*(unsigned char *)(v15 + 8))
          {
            int v16 = *(NSObject **)v15;
            if (*(void *)v15)
            {
              if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v24 = *(void *)v13;
                int v25 = v13[2];
                sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
                __int16 v17 = v27 >= 0 ? __p : (void **)__p[0];
                int v18 = *a4;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
                __int16 v29 = 1024;
                int v30 = 130;
                __int16 v31 = 2080;
                __int16 v32 = v17;
                __int16 v33 = 1024;
                int v34 = v18;
                _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d In property changed listener routine, about to unlock sync primitive for property %s on id %u.", buf, 0x22u);
                if (v27 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          __int16 v19 = (std::mutex *)*((void *)a4 + 3);
          std::mutex::lock(v19);
          **((unsigned char **)a4 + 4) = 1;
          std::mutex::unlock(v19);
          std::condition_variable::notify_all(*((std::condition_variable **)a4 + 2));
        }
      }
    }
LABEL_22:
    if (v10) {
      operator delete(v10);
    }
  }
  return 0;
}

void sub_66860(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_66880(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    float result = sub_66958(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_668E0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_668FC(int *a1, _DWORD *a2)
{
  int v2 = a1[1];
  int v3 = a2[1];
  if (v3 != 707406378 && v2 != 707406378 && v2 != v3) {
    return 0;
  }
  int v6 = *a1;
  BOOL v7 = *a2 == 707406378 || v6 == 707406378;
  if (!v7 && v6 != *a2) {
    return 0;
  }
  int v9 = a1[2];
  int v10 = a2[2];
  return v9 == -1 || v9 == v10 || v10 == -1;
}

char *sub_66958(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_60548();
  }
  uint64_t v3 = 3 * a2;
  float result = (char *)operator new(12 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v3];
  return result;
}

uint64_t sub_669A8(void *a1, const UInt8 *a2, uint64_t a3)
{
  int v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_10724(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v14;
    __int16 v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_66AC8(v17, a2, a3);
    int v18 = v17 + 2;
    sub_163A8(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_16358((uint64_t)&v16);
  }
  else
  {
    uint64_t result = (uint64_t)sub_66AC8((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_66AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_16358((uint64_t)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_66AC8(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    int v9 = (const UInt8 *)a3;
  }
  else {
    int v9 = *(const UInt8 **)a3;
  }
  if (v8 >= 0) {
    CFIndex v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v10 = *(void *)(a3 + 8);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    unint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  return a1;
}

void sub_66BD8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_66C3C(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      sub_60548();
    }
    int v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    uint64_t v15 = result + 2;
    size_t v4 = (char *)sub_106EC(a2);
    CFStringRef v7 = *v2;
    CFIndex v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      int v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      int v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
        *(void *)CFIndex v6 = 0;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    uint64_t *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    CFStringRef v11 = v2[2];
    v2[2] = &v4[8 * v5];
    unint64_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_66EEC((uint64_t)&v12);
  }
  return result;
}

CFArrayRef sub_66CFC(uint64_t **a1)
{
  sub_4ECEC(&__p, a1[1] - *a1);
  int v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    size_t v4 = __p;
    do
    {
      uint64_t v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArrayRef v6 = sub_55EFC((const void **)__p, (uint64_t)v9);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_66D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFNumberRef *sub_66D94(CFNumberRef *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_66E20(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_66E4C(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    size_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFArrayRef v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_66ECC(v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_66ECC(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t sub_66EEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    size_t v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_66ECC(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::runtime_error *sub_66F3C(std::runtime_error *a1)
{
  return std::runtime_error::runtime_error(a1, "Could not construct");
}

char *sub_66F48(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_60548();
  }
  uint64_t result = (char *)sub_106EC(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_66F88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 149))
  {
    CFStringRef v2 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!v2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_14E44(&cf, v2);
    sub_22210((CFStringRef *)buf, "dsp graph");
    CFTypeRef v3 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *(void *)&v15[4] = v3;
    sub_64FD8((uint64_t)&v15[12], (int *)(a1 + 144));
    v12[0] = buf;
    v12[1] = 2;
    CFDictionaryRef v4 = sub_4D3D8((uint64_t)v12);
    uint64_t v5 = 0;
    CFDictionaryRef v13 = v4;
    do
    {
      CFArrayRef v6 = *(const void **)&v15[v5 + 20];
      if (v6) {
        CFRelease(v6);
      }
      CFStringRef v7 = *(const void **)&v15[v5 + 12];
      if (v7) {
        CFRelease(v7);
      }
      v5 -= 16;
    }
    while (v5 != -32);
    if (cf) {
      CFRelease(cf);
    }
    sub_6528C(*(void *)(a1 + 16), (unint64_t *)&v13);
    *(unsigned char *)(a1 + 149) = 0;
    int v8 = (os_log_t *)sub_32A48(24);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)uint64_t v15 = "DSPHALInterface.cpp";
        *(_WORD *)&v15[8] = 1024;
        *(_DWORD *)&v15[10] = 199;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unloading HAL DSP", buf, 0x12u);
      }
    }
    CFRelease(v4);
  }
}

void sub_6716C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

char *sub_6720C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  CFStringRef v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *CFStringRef v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_60548();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_46BB4(v7, v11);
    CFDictionaryRef v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  _DWORD *v12 = &v9[v17];
  return result;
}

void sub_67314(uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = (void *)a2;
  CFDictionaryRef v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = sub_6789C(a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        sub_60560();
      }
      uint64_t v12 = operator new(8 * *(void *)&prime);
      CFDictionaryRef v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      unint64_t v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      unint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        uint64_t v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              unint64_t v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              uint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                int v25 = (void *)v22;
                while (1)
                {
                  __int16 v26 = v24;
                  if (!sub_67CEC((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16)) {
                    break;
                  }
                  uint64_t v24 = (void *)*v26;
                  int v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                uint64_t v24 = v26;
                __int16 v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                __int16 v26 = (void *)v22;
              }
              uint64_t *v15 = (uint64_t)v24;
              *__int16 v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              unint64_t v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        CFStringRef v2 = v40;
        CFDictionaryRef v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        CFDictionaryRef v4 = v41;
      }
    }
    else
    {
      char v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  __int16 v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    __int16 v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      int v33 = 0;
      do
      {
        int v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && sub_67CEC(v34 + 16, v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        __int16 v32 = *(unsigned __int8 **)v34;
        __int16 v31 = v34;
      }
      while (*(void *)v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    void *v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v38) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  void *v2 = *(void *)v31;
  *(void *)__int16 v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

void sub_677AC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_63A00((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

char *sub_67804(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  unint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_21E8C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)unint64_t v5 = v6;
  }
  return __dst;
}

void sub_67880(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_6789C(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    long long v4 = (uint64_t *)a1;
  }
  else {
    long long v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      __int16 v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      unint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      unint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL sub_67CEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void *sub_67D90(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      sub_60548();
    }
    uint64_t v6 = result;
    int v7 = sub_10724(a4);
    *uint64_t v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[2 * v8];
    unint64_t result = sub_67E24((uint64_t)(v6 + 2), a2, a3, v7);
    v6[1] = result;
  }
  return result;
}

void sub_67E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_67E24(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  int v10 = a4;
  int v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    int v10 = v4;
  }
  char v8 = 1;
  sub_67EB4((uint64_t)v7);
  return v4;
}

uint64_t sub_67EB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        sub_4636C(v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

uint64_t sub_67F10(uint64_t a1, char a2, int a3, UInt32 a4, const void *a5)
{
  v10.mElement = 0;
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v7 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v7 = 1869968496;
  }
  v10.int mSelector = 1684500594;
  v10.AudioObjectPropertyScope mScope = v7;
  AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  return AudioObjectSetPropertyData(v8, &v10, 4u, &inQualifierData, a4, a5);
}

uint64_t sub_67FA0(uint64_t a1, char a2, int a3, UInt32 *a4, void *a5)
{
  v10.mElement = 0;
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v7 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v7 = 1869968496;
  }
  v10.int mSelector = 1684500594;
  v10.AudioObjectPropertyScope mScope = v7;
  AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  return AudioObjectGetPropertyData(v8, &v10, 4u, &inQualifierData, a4, a5);
}

BOOL sub_68030(uint64_t a1, char a2, int a3, UInt32 *a4, unsigned char *a5)
{
  v9.mElement = 0;
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v6 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v6 = 1869968496;
  }
  v9.int mSelector = 1684500594;
  v9.AudioObjectPropertyScope mScope = v6;
  *a5 = 1;
  AudioObjectID v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  return AudioObjectGetPropertyDataSize(v7, &v9, 4u, &inQualifierData, a4) == 0;
}

uint64_t sub_680C8(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 148)) {
    unsigned int v4 = 1768845428;
  }
  else {
    unsigned int v4 = 1869968496;
  }
  LODWORD(__p[0]) = v3;
  buf.int mSelector = 1684498544;
  *(void *)&buf.AudioObjectPropertyScope mScope = v4;
  unint64_t v5 = sub_26DAC((AudioObjectID *)__p, &buf, 4u, &v17);
  *((void *)&v8 + 1) = v6;
  *(void *)&long long v8 = v5;
  uint64_t v7 = v8 >> 32;
  BOOL v9 = (v7 & 0xFF00000000) == 0 || v7 == 0;
  uint64_t v10 = !v9;
  if (v9)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(24);
    BOOL v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, v17);
        if (v16 >= 0) {
          BOOL v13 = __p;
        }
        else {
          BOOL v13 = (void **)__p[0];
        }
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPHALInterface.cpp";
        __int16 v19 = 1024;
        int v20 = 148;
        __int16 v21 = 2080;
        uint64_t v22 = v13;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPHALInterface::HasDSPProperty(%s) = %u", (uint8_t *)&buf, 0x22u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v10;
}

uint64_t sub_68260(uint64_t a1, char a2, int a3, float a4)
{
  int inQualifierData = a3;
  float inData = a4;
  if (a2) {
    AudioObjectPropertyScope v4 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v4 = 1869968496;
  }
  inAddress.int mSelector = 1684500589;
  inAddress.AudioObjectPropertyScope mScope = v4;
  inAddress.mElement = 0;
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  return AudioObjectSetPropertyData(v5, &inAddress, 4u, &inQualifierData, 4u, &inData);
}

void *sub_682E8(void *a1)
{
  uint64_t v29 = &v29;
  uint64_t v30 = &v29;
  uint64_t v31 = 0;
  CFTypeRef v36 = 0;
  int v35 = 8;
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t, CFTypeRef *, int *, void, void))(*a1 + 104))(a1, 1685287015, 1734504312, &v36, &v35, 0, 0))
  {
    sub_68780(&cf, v36);
    uint64_t v8 = sub_32A48(24);
    if (*(unsigned char *)(v8 + 8))
    {
      BOOL v9 = *(NSObject **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v10 = CFCopyDescription(cf);
          sub_20B40((uint64_t)__p, v10);
          if (v10) {
            CFRelease(v10);
          }
          uint64_t v11 = __p;
          if (v33 < 0) {
            uint64_t v11 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
          __int16 v38 = 1024;
          int v39 = 76;
          __int16 v40 = 2080;
          unint64_t v41 = v11;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d boxes: %s", buf, 0x1Cu);
          if (v33 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    CFArrayRef v12 = (const __CFArray *)cf;
    if (cf)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      CFIndex v14 = Count;
      CFArrayRef v15 = (const __CFArray *)cf;
      if (cf)
      {
        CFIndex v16 = CFArrayGetCount((CFArrayRef)cf);
        if (!v14)
        {
LABEL_31:
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_2;
        }
      }
      else
      {
        CFIndex v16 = 0;
        if (!Count) {
          goto LABEL_31;
        }
      }
      unint64_t v17 = 0;
      do
      {
        if (v12 == v15 && v16 == v17) {
          break;
        }
        sub_68838(__p, v12, v17);
        uint64_t v18 = __p[0];
        if (__p[0])
        {
          CFTypeID v19 = CFGetTypeID(__p[0]);
          if (v19 == CFDictionaryGetTypeID()) {
            continue;
          }
        }
        uint64_t v26 = (os_log_t *)sub_32A48(13);
        uint64_t v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
          __int16 v38 = 1024;
          int v39 = 82;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Dictionary expected as value\"", buf, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Dictionary expected as value");
        sub_688E8(buf, (CFTypeRef *)__p);
        CFDictionaryRef v20 = (const __CFDictionary *)sub_689AC(*(const __CFDictionary **)buf, "audioComponentDescription");
        if (v20)
        {
          CFNumberRef v21 = (const __CFNumber *)sub_68AB8(v20, "componentSubType");
          if (v21)
          {
            CFNumberRef v22 = sub_22314(v21);
            if ((unint64_t)v22 >> 32)
            {
              int v23 = (int)v22;
              int v24 = operator new(0x18uLL);
              v24[4] = v23;
              uint64_t v25 = v29;
              *(void *)int v24 = v29;
              *((void *)v24 + 1) = &v29;
              *((void *)v25 + 1) = v24;
              uint64_t v29 = v24;
              ++v31;
            }
          }
        }
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        CFRelease(v18);
        ++v17;
      }
      while (v14 != v17);
      goto LABEL_31;
    }
  }
LABEL_2:
  sub_45F50(a1 + 142);
  uint64_t v2 = v31;
  if (v31)
  {
    AudioObjectPropertyScope v4 = v29;
    int v3 = v30;
    uint64_t v5 = *v30;
    *(void *)(v5 + 8) = *((void *)v29 + 1);
    **((void **)v4 + 1) = v5;
    uint64_t v6 = a1[142];
    *(void *)(v6 + 8) = v3;
    *int v3 = v6;
    a1[142] = v4;
    *((void *)v4 + 1) = a1 + 142;
    a1[144] += v2;
    uint64_t v31 = 0;
  }
  return sub_45F50(&v29);
}

void sub_686B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, CFTypeRef a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void *sub_68780(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return a1;
}

void sub_68808(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef sub_68838(void *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (uint64_t v7 = ValueAtIndex) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }
  CFTypeRef result = CFRetain(ValueAtIndex);
  *a1 = v7;
  return result;
}

void sub_688C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_688E8(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFDictionaryGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_66F3C(exception);
    }
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }
  else
  {
    CFTypeRef v5 = 0;
  }

  return sub_22084(a1, v5);
}

void sub_68990(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *sub_689AC(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_68A78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

const void *sub_68AB8(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_68B6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

std::runtime_error *sub_68BF0(std::runtime_error *a1)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

uint64_t sub_68BFC()
{
  return 0;
}

void sub_68C08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 796) && *(unsigned char *)(a1 + 797))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    float v8 = 0.0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, void))(*(void *)a1 + 64))(a1, 1685287015, 1935958625, (char *)&v10 + 4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(*(void *)a1 + 64))(a1, 1685287015, 1935958627, &v10, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, void))(*(void *)a1 + 64))(a1, 1685287015, 1936418419, (char *)&v9 + 4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64))(a1, 1685287015, 1935963506, &v8, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(*(void *)a1 + 64))(a1, 1685287015, 1937141612, &v9, 0);
    uint64_t v4 = *(void *)(a1 + 736);
    uint64_t v5 = v10;
    uint64_t v6 = v9;
    float v7 = v8;
    if (qword_64EE90 != -1) {
      dispatch_once(&qword_64EE90, &stru_61EB78);
    }
    if (off_64EEE8) {
      off_64EEE8(v4, 0, a2, *((float *)&v5 + 1), *(float *)&v5, *((float *)&v6 + 1), *(float *)&v6, v7);
    }
  }
}

void sub_68E1C(id a1)
{
  int v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    uint64_t v4 = dlerror();
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
  int v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_64EE98 = dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_64EEA0 = dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_64EEA8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_64EEB0 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_64EEB8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_64EEC0 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_64EEC8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_64EED0 = dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_64EED8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_64EEE0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_64EEE8 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_64EEF0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_64EEF8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_64EF00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_64EF08 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_64EF10 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    off_64EF18 = dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    off_64EF20 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_64EF28 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_64EF30 = dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_64EF38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    uint64_t v4 = v2;
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
}

BOOL sub_6913C(uint64_t a1, int a2)
{
  if (a2 == 1685287015) {
    return sub_1AB024(a1, 1685287015);
  }
  uint64_t v3 = a1 + 1136;
  for (uint64_t i = *(void *)(a1 + 1144); i != v3; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 16) == a2) {
      return i != v3;
    }
  }
  uint64_t i = a1 + 1136;
  return i != v3;
}

uint64_t sub_6918C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_D8B40(a2, a3);
  BOOL v13 = (os_log_t *)sub_32A48(24);
  CFIndex v14 = *v13;
  if (HIDWORD(v12))
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v29, a3);
      if (v30 >= 0) {
        CFDictionaryRef v20 = v29;
      }
      else {
        CFDictionaryRef v20 = (void **)v29[0];
      }
      sub_2417C(__p, a2);
      int v21 = v28;
      CFNumberRef v22 = (void **)__p[0];
      sub_2417C(v25, v12);
      int v23 = __p;
      if (v21 < 0) {
        int v23 = v22;
      }
      if (v26 >= 0) {
        int v24 = v25;
      }
      else {
        int v24 = (void **)v25[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 178;
      __int16 v35 = 2080;
      CFTypeRef v36 = v20;
      __int16 v37 = 2080;
      __int16 v38 = v23;
      __int16 v39 = 2080;
      __int16 v40 = v24;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s", buf, 0x30u);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    return sub_1AB0E0(a1, 1685287015, v12, a4, a5, a6);
  }
  else
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v29, a3);
      int v15 = v30;
      CFIndex v16 = (void **)v29[0];
      sub_2417C(__p, a2);
      unint64_t v17 = v29;
      if (v15 < 0) {
        unint64_t v17 = v16;
      }
      if (v28 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 183;
      __int16 v35 = 2080;
      CFTypeRef v36 = v17;
      __int16 v37 = 2080;
      __int16 v38 = v18;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting DSPProperty %s for AU subtype %s", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    return sub_1AB0E0(a1, a2, a3, a4, a5, a6);
  }
}

void sub_69458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_69498(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_D8B40(a2, a3);
  BOOL v13 = (os_log_t *)sub_32A48(24);
  CFIndex v14 = *v13;
  if (HIDWORD(v12))
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(v29, a3);
      if (v30 >= 0) {
        CFDictionaryRef v20 = v29;
      }
      else {
        CFDictionaryRef v20 = (void **)v29[0];
      }
      sub_2417C(__p, a2);
      int v21 = v28;
      CFNumberRef v22 = (void **)__p[0];
      sub_2417C(v25, v12);
      int v23 = __p;
      if (v21 < 0) {
        int v23 = v22;
      }
      if (v26 >= 0) {
        int v24 = v25;
      }
      else {
        int v24 = (void **)v25[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 164;
      __int16 v35 = 2080;
      CFTypeRef v36 = v20;
      __int16 v37 = 2080;
      __int16 v38 = v23;
      __int16 v39 = 2080;
      __int16 v40 = v24;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s", buf, 0x30u);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    return sub_1AB2A0(a1, 1685287015, v12, a4, a5, a6);
  }
  else
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(v29, a3);
      int v15 = v30;
      CFIndex v16 = (void **)v29[0];
      sub_2417C(__p, a2);
      unint64_t v17 = v29;
      if (v15 < 0) {
        unint64_t v17 = v16;
      }
      if (v28 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 169;
      __int16 v35 = 2080;
      CFTypeRef v36 = v17;
      __int16 v37 = 2080;
      __int16 v38 = v18;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting DSPProperty %s for AU subtype %s", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    return sub_1AB2A0(a1, a2, a3, a4, a5, a6);
  }
}

void sub_69764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_697A4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_D8B40(a2, a3);
  BOOL v13 = (os_log_t *)sub_32A48(24);
  CFIndex v14 = *v13;
  if (HIDWORD(v12))
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v29, a3);
      if (v30 >= 0) {
        CFDictionaryRef v20 = v29;
      }
      else {
        CFDictionaryRef v20 = (void **)v29[0];
      }
      sub_2417C(__p, a2);
      int v21 = v28;
      CFNumberRef v22 = (void **)__p[0];
      sub_2417C(v25, v12);
      int v23 = __p;
      if (v21 < 0) {
        int v23 = v22;
      }
      if (v26 >= 0) {
        int v24 = v25;
      }
      else {
        int v24 = (void **)v25[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 150;
      __int16 v35 = 2080;
      CFTypeRef v36 = v20;
      __int16 v37 = 2080;
      __int16 v38 = v23;
      __int16 v39 = 2080;
      __int16 v40 = v24;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s", buf, 0x30u);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    return sub_1AB338(a1, 1685287015, v12, a4, a5, a6);
  }
  else
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v29, a3);
      int v15 = v30;
      CFIndex v16 = (void **)v29[0];
      sub_2417C(__p, a2);
      unint64_t v17 = v29;
      if (v15 < 0) {
        unint64_t v17 = v16;
      }
      if (v28 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 155;
      __int16 v35 = 2080;
      CFTypeRef v36 = v17;
      __int16 v37 = 2080;
      __int16 v38 = v18;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting DSPPropertyInfo %s for AU subtype %s", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    return sub_1AB338(a1, a2, a3, a4, a5, a6);
  }
}

void sub_69A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_69AB0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_D8B40(a2, a3);
  if (HIDWORD(v8))
  {
    uint64_t v10 = v8;
    uint64_t v11 = (os_log_t *)sub_32A48(24);
    unint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v23, a3);
      if (v24 >= 0) {
        BOOL v13 = v23;
      }
      else {
        BOOL v13 = (void **)v23[0];
      }
      sub_2417C(v21, a2);
      int v14 = v22;
      int v15 = (void **)v21[0];
      sub_2417C(__p, v10);
      CFIndex v16 = v21;
      if (v14 < 0) {
        CFIndex v16 = v15;
      }
      if (v20 >= 0) {
        unint64_t v17 = __p;
      }
      else {
        unint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v26 = "DSPGraphChain.cpp";
      __int16 v27 = 1024;
      int v28 = 138;
      __int16 v29 = 2080;
      char v30 = v13;
      __int16 v31 = 2080;
      uint64_t v32 = v16;
      __int16 v33 = 2080;
      int v34 = v17;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s", buf, 0x30u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    uint64_t v9 = sub_1AB178(a1, 1685287015, v10, a4);
  }
  else
  {
    uint64_t v9 = sub_1AB178(a1, a2, a3, a4);
  }
  return v9 != 0;
}

void sub_69C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_69CCC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_23BA8(a2, a3);
  if (HIDWORD(v10))
  {
    uint64_t v13 = v10;
    uint64_t v11 = a1;
    int v12 = 1685287015;
  }
  else
  {
    uint64_t v11 = a1;
    int v12 = a2;
    uint64_t v13 = a3;
  }

  return sub_1AB3E0(v11, v12, v13, a4, a5);
}

BOOL sub_69D58(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_23BA8(a2, a3);
  if (HIDWORD(v8))
  {
    unsigned int v16 = v8;
    uint64_t v17 = sub_13714(a1, 1685287015, v8, a4);
    BOOL v15 = v17 != 0;
    uint64_t v18 = (os_log_t *)sub_32A48(24);
    CFTypeID v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v30, a3);
      if (v31 >= 0) {
        char v20 = v30;
      }
      else {
        char v20 = (void **)v30[0];
      }
      sub_2417C(__p, a2);
      int v21 = v29;
      char v22 = (void **)__p[0];
      sub_2417C(v26, v16);
      int v23 = __p;
      if (v21 < 0) {
        int v23 = v22;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      __int16 v33 = "DSPGraphChain.cpp";
      if (v27 >= 0) {
        char v24 = v26;
      }
      else {
        char v24 = (void **)v26[0];
      }
      __int16 v34 = 1024;
      int v35 = 196;
      __int16 v36 = 2080;
      __int16 v37 = v20;
      __int16 v38 = 2080;
      __int16 v39 = v23;
      __int16 v40 = 2080;
      unint64_t v41 = v24;
      __int16 v42 = 1024;
      BOOL v43 = v17 != 0;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Checking for presence of DSPParameter %s for AU subtype %s as graph parameter %s, found: %d", buf, 0x36u);
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
  }
  else
  {
    uint64_t v9 = (os_log_t *)sub_32A48(24);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v30, a3);
      int v11 = v31;
      int v12 = (void **)v30[0];
      sub_2417C(__p, a2);
      uint64_t v13 = v30;
      if (v11 < 0) {
        uint64_t v13 = v12;
      }
      if (v29 >= 0) {
        int v14 = __p;
      }
      else {
        int v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v33 = "DSPGraphChain.cpp";
      __int16 v34 = 1024;
      int v35 = 201;
      __int16 v36 = 2080;
      __int16 v37 = v13;
      __int16 v38 = 2080;
      __int16 v39 = v14;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Checking for presence of DSPProperty %s for AU subtype %s", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
    return sub_13714(a1, a2, a3, a4) != 0;
  }
  return v15;
}

void sub_6A038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_6A078()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  int v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "DSPGraphChain.cpp";
      __int16 v5 = 1024;
      int v6 = 131;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"unsupported method GetDSPProcessorInstanceIDAtChainIndex\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "unsupported method GetDSPProcessorInstanceIDAtChainIndex");
}

void sub_6A144(_Unwind_Exception *exception_object)
{
}

void sub_6A160()
{
  uint64_t v0 = (os_log_t *)sub_32A48(24);
  int v1 = *v0;
  if (*v0 && os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    int v6 = "DSPGraphChain.cpp";
    __int16 v7 = 1024;
    int v8 = 125;
    _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d unsupported DestroyDSPProcessorInstance", (uint8_t *)&v5, 0x12u);
  }
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  int v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "DSPGraphChain.cpp";
      __int16 v7 = 1024;
      int v8 = 126;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"unsupported method DestroyDSPProcessorInstance\"", (uint8_t *)&v5, 0x12u);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "unsupported method DestroyDSPProcessorInstance");
}

void sub_6A298(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_6A2B4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  *(void *)AudioObjectPropertyAddress buf = a1 + 48;
  uint8_t buf[8] = 1;
  sub_39ECC(a1 + 48);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  sub_3A3E8((uint64_t)buf);
  if (v6 >= 2)
  {
    unint64_t v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
      __int16 v15 = 1024;
      int v16 = 119;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Only one DSPProcessorInstance allowed in graph-based chain\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one DSPProcessorInstance allowed in graph-based chain");
  }
  uint64_t v7 = *a2;
  int v8 = (std::__shared_weak_count *)a2[1];
  v13[0] = v7;
  v13[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1AC370(a1, v13, a3);
  if (v8) {
    sub_4636C(v8);
  }
  return 0;
}

void sub_6A434(_Unwind_Exception *exception_object)
{
}

uint64_t sub_6A464(void *a1, uint64_t *a2)
{
  *(void *)AudioObjectPropertyAddress buf = a1 + 6;
  uint8_t buf[8] = 1;
  sub_39ECC((uint64_t)(a1 + 6));
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3);
  sub_3A3E8((uint64_t)buf);
  if (v4 >= 2)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
      __int16 v14 = 1024;
      int v15 = 113;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Only one DSPProcessorInstance allowed in graph-based chain\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one DSPProcessorInstance allowed in graph-based chain");
  }
  uint64_t v5 = *a2;
  unint64_t v6 = (std::__shared_weak_count *)a2[1];
  v12[0] = v5;
  v12[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = sub_1ACC1C(a1, v12);
  if (v6) {
    sub_4636C(v6);
  }
  return v7;
}

void sub_6A5E0(_Unwind_Exception *exception_object)
{
}

void sub_6A610(unint64_t a1)
{
  sub_6A648(a1);

  operator delete();
}

unint64_t sub_6A648(unint64_t a1)
{
  *(void *)a1 = off_61EA90;
  uint64_t v2 = (os_log_t *)sub_32A48(24);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_21E8C(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }
    else
    {
      *(_OWORD *)unint64_t __p = *(_OWORD *)(a1 + 712);
      uint64_t v7 = *(void *)(a1 + 728);
    }
    unint64_t v4 = __p;
    if (v7 < 0) {
      unint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v9 = "DSPGraphChain.cpp";
    __int16 v10 = 1024;
    int v11 = 108;
    __int16 v12 = 2080;
    uint64_t v13 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting DSPGraph chain %s", buf, 0x1Cu);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_45F50((void *)(a1 + 1136));
  sub_1B6728(a1);
  return a1;
}

void sub_6A798(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_6A7A8(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &off_625FB0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_89EC8(a1 + 48);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  sub_1B8520((void *)(a1 + 360));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_WORD *)(a1 + 448) = 256;
  long long v4 = xmmword_658CD8;
  long long v5 = unk_658CE8;
  *(_OWORD *)(a1 + 456) = xmmword_658CD8;
  *(_OWORD *)(a1 + 472) = v5;
  uint64_t v6 = qword_658CF8;
  *(void *)(a1 + 488) = qword_658CF8;
  *(_DWORD *)(a1 + 496) = 4096;
  *(void *)(a1 + 536) = v6;
  *(_OWORD *)(a1 + 504) = v4;
  *(_OWORD *)(a1 + 520) = v5;
  long long v7 = unk_658CE8;
  *(_OWORD *)(a1 + 544) = xmmword_658CD8;
  *(_OWORD *)(a1 + 560) = v7;
  *(void *)(a1 + 576) = qword_658CF8;
  *(void *)(a1 + 584) = 0;
  sub_5E28(a1 + 504, (AudioStreamBasicDescription *)(a1 + 504), (AudioStreamBasicDescription *)(a1 + 544));
  long long v8 = xmmword_658CD8;
  long long v9 = unk_658CE8;
  *(_OWORD *)(a1 + 592) = xmmword_658CD8;
  *(_OWORD *)(a1 + 608) = v9;
  uint64_t v10 = qword_658CF8;
  *(void *)(a1 + 624) = qword_658CF8;
  *(_OWORD *)(a1 + 632) = v8;
  *(_OWORD *)(a1 + 648) = v9;
  *(void *)(a1 + 664) = v10;
  *(void *)(a1 + 672) = 0;
  sub_5E28(a1 + 592, (AudioStreamBasicDescription *)(a1 + 592), (AudioStreamBasicDescription *)(a1 + 632));
  *(_WORD *)(a1 + 682) = 1;
  *(_WORD *)(a1 + 680) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 688) = a1 + 696;
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 712), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    *(void *)(a1 + 728) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 712) = v11;
  }
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 768) = a1 + 768;
  *(void *)(a1 + 776) = a1 + 768;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 790) = 0;
  *(unsigned char *)(a1 + 798) = 1;
  *(_DWORD *)(a1 + 800) = 1701868910;
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 848) = a1 + 856;
  *(void *)(a1 + 880) = 850045863;
  *(void *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(void *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 952) = 0;
  *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_5968C4;
  *(void *)&buf[16] = 2;
  sub_6D1AC(a1 + 1000, (int *)buf, 3);
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(void *)(a1 + 1104) = a1 + 1112;
  *(void *)(a1 + 1128) = 0;
  __int16 v12 = *(id *)sub_32A48(24);
  uint64_t v13 = v12;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      __int16 v14 = a2;
    }
    else {
      __int16 v14 = *(void **)a2;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 559;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v14;
    __int16 v20 = 1024;
    int v21 = 0;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating DSP chain \"%s\", AU Processing Block ? %d", buf, 0x22u);
  }

  *(void *)a1 = off_61EA90;
  *(void *)(a1 + 1136) = a1 + 1136;
  *(void *)(a1 + 1144) = a1 + 1136;
  *(void *)(a1 + 1152) = 0;
  int v15 = (os_log_t *)sub_32A48(24);
  int v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = *(void **)a2;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 103;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v17;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating DSPGraph chain \"%s\"", buf, 0x1Cu);
  }
  return a1;
}

void sub_6AB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, uint64_t a12, void *a13, void *a14, uint64_t a15)
{
  sub_463E0(*a11);
  sub_55834(v17);
  sub_55834(v16);
  a14 = v15 + 53;
  sub_1B6F4C((void ***)&a14);
  a14 = v15 + 50;
  sub_1B6F4C((void ***)&a14);
  uint64_t v18 = (std::__shared_weak_count *)v15[48];
  if (v18) {
    sub_4636C(v18);
  }
  CFTypeID v19 = (std::__shared_weak_count *)v15[46];
  if (v19) {
    sub_4636C(v19);
  }
  a14 = v15 + 42;
  sub_638B4((void ***)&a14);
  sub_1B6FA0(a12);
  a14 = a13;
  sub_1B6F4C((void ***)&a14);
  __int16 v20 = (std::__shared_weak_count *)v15[2];
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(a1);
}

void sub_6AD68()
{
}

uint64_t sub_6AD74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_6ADA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_6ADE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_6AE14(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_6AE54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_6AE84(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t *sub_6AEC0(uint64_t *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  long long v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_6BE90(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_6AF28(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_6AF3C(uint64_t a1, uint64_t a2, long long *a3, char a4)
{
  *(unsigned char *)(a1 + 8) = a4;
  *(void *)a1 = off_63E078;
  sub_6BA78(a1 + 16, a2);
  uint64_t v6 = (unsigned char *)(a1 + 48);
  if (*((char *)a3 + 23) < 0)
  {
    sub_21E8C(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return a1;
}

void sub_6AFC0(_Unwind_Exception *a1)
{
  sub_6AFD4(v1);
  _Unwind_Resume(a1);
}

void *sub_6AFD4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *sub_6B058(void *a1, const void *a2, uint64_t a3)
{
  uint64_t result = (char *)operator new(0x10uLL);
  long long v7 = result;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 16;
  size_t v8 = a3 - (void)a2;
  if (v8) {
    uint64_t result = (char *)memcpy(result, a2, v8);
  }
  a1[1] = &v7[v8];
  return result;
}

void sub_6B0C0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_6B0DC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_21C8C(&v9, "NOT ");
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 24))(__p);
  if ((v8 & 0x80u) == 0) {
    long long v4 = __p;
  }
  else {
    long long v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v9, (const std::string::value_type *)v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_6B1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_6B1D4()
{
}

uint64_t sub_6B1EC(uint64_t a1)
{
  return (***(unsigned int (****)(void))(a1 + 8))(*(void *)(a1 + 8)) ^ 1;
}

BOOL sub_6B22C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_6B24C(uint64_t a1, void *a2)
{
  *a2 = off_61EE00;
}

void *sub_6B26C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61EE00;
  return result;
}

void sub_6B2A4()
{
}

BOOL sub_6B2BC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_6B2DC(uint64_t a1, void *a2)
{
  *a2 = off_61EDB8;
}

void *sub_6B2FC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61EDB8;
  return result;
}

void sub_6B334()
{
}

uint64_t sub_6B34C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_6B3C0(uint64_t a1, void *a2)
{
  *a2 = off_61ED70;
}

void *sub_6B3E0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61ED70;
  return result;
}

void sub_6B418()
{
}

uint64_t sub_6B430(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_6B468(uint64_t a1, void *a2)
{
  *a2 = off_61ED28;
}

void *sub_6B488()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61ED28;
  return result;
}

void sub_6B4C0()
{
}

uint64_t sub_6B4D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_6B510(uint64_t a1, void *a2)
{
  *a2 = off_61ECE0;
}

void *sub_6B530()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61ECE0;
  return result;
}

void sub_6B568()
{
}

uint64_t sub_6B580@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_3D04((uint64_t)&v9);
  sub_256E4(&v9, (uint64_t)"Aggregate Connection Inclusion Policy: [ ", 41);
  uint64_t v4 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); v4 != i; v4 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v4 + 24))(v12);
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v12;
    }
    else {
      uint64_t v6 = (void **)v12[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v7 = v13;
    }
    else {
      uint64_t v7 = (uint64_t)v12[1];
    }
    sub_256E4(&v9, (uint64_t)v6, v7);
    sub_256E4(&v9, (uint64_t)"; ", 2);
    if ((char)v13 < 0) {
      operator delete(v12[0]);
    }
  }
  sub_256E4(&v9, (uint64_t)"]", 1);
  sub_246E4(a2, (uint64_t)v10);
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_6B768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_6B798(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_6B89C(void *a1)
{
  *a1 = off_63E0B0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

void *sub_6B90C(void *a1)
{
  *a1 = off_63E0B0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_6B95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = v3 + 8;
  do
  {
    uint64_t result = (***(uint64_t (****)(void, uint64_t, uint64_t))(v7 - 8))(*(void *)(v7 - 8), a2, a3);
    if (result) {
      BOOL v9 = v7 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 8;
  }
  while (!v9);
  return result;
}

BOOL sub_6B9E0(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_6BA08(uint64_t a1, void *a2)
{
  *a2 = off_61EC98;
}

void *sub_6BA28()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61EC98;
  return result;
}

void sub_6BA60()
{
}

uint64_t sub_6BA78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_6BB10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1) {
    sub_56964();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_6BB60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_3D04((uint64_t)&v12);
  sub_256E4(&v12, (uint64_t)"[ ", 2);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v4 = "src";
  }
  else {
    uint64_t v4 = "dst";
  }
  sub_256E4(&v12, (uint64_t)v4, 3);
  sub_256E4(&v12, (uint64_t)": ", 2);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = a1 + 48;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  sub_256E4(&v12, v9, v10);
  sub_256E4(&v12, (uint64_t)"]", 1);
  sub_246E4(a2, (uint64_t)v13);
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_6BD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6B798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_6BD24(uint64_t a1)
{
  sub_6BD5C(a1);

  operator delete();
}

uint64_t sub_6BD5C(uint64_t a1)
{
  *(void *)a1 = off_63E078;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_6AFD4((void *)(a1 + 16));
  return a1;
}

uint64_t sub_6BDB8(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (!a1[8]) {
    a2 = a3;
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 32))(a1, a2);
}

uint64_t sub_6BDE8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_6BE20(uint64_t a1, void *a2)
{
  *a2 = off_61EC50;
}

void *sub_6BE40()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61EC50;
  return result;
}

void sub_6BE78()
{
}

uint64_t *sub_6BE90(uint64_t *result, uint64_t *a2, int a3, int a4)
{
  uint64_t v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v10 = a2;
LABEL_16:
      if (v8) {
        unsigned __int8 v13 = (uint64_t **)v10;
      }
      else {
        unsigned __int8 v13 = (uint64_t **)a2;
      }
      if (v8) {
        char v11 = (uint64_t **)(v10 + 1);
      }
      else {
        char v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        int v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned __int8 v13 = (uint64_t **)v17;
          int v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      char v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    char v11 = (uint64_t **)(a2 + 1);
    uint64_t v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        char v11 = (uint64_t **)v12;
        uint64_t v12 = (uint64_t *)*v12;
        unsigned __int8 v13 = v11;
        char v14 = v11;
      }
      while (v12);
    }
    else
    {
      char v14 = (uint64_t **)a2;
      do
      {
        CFTypeID v19 = (uint64_t *)v14;
        char v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v19);
      unsigned __int8 v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    __int16 v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned __int8 v13 = (uint64_t **)v20;
          int v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3) {
            break;
          }
          __int16 v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        uint64_t v6 = v13 + 1;
        __int16 v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  unsigned __int8 v13 = (uint64_t **)(result + 1);
LABEL_44:
  char v22 = (uint64_t *)operator new(0x20uLL);
  *((_DWORD *)v22 + 7) = a4;

  return sub_46CA8(v5, (uint64_t)v13, v6, v22);
}

uint64_t **sub_6C05C(uint64_t a1)
{
  uint64_t v2 = sub_6C174(a1);
  *(_DWORD *)(v2 + 80) = 16843009;
  *(_DWORD *)(v2 + 72) = 16843009;
  unsigned int v4 = 1768776806;
  uint64_t result = sub_6C4EC((uint64_t **)(v2 + 96), &v4, (unsigned int *)&v5);
  *(_DWORD *)(a1 + 404) = 1077936128;
  *(unsigned char *)(a1 + 408) = 1;
  *(_DWORD *)(a1 + 420) = 1090519040;
  *(unsigned char *)(a1 + 424) = 1;
  *(_WORD *)(a1 + 322) = 257;
  if (!*(unsigned char *)(a1 + 956)) {
    *(unsigned char *)(a1 + 956) = 1;
  }
  *(_DWORD *)(a1 + 952) = 2;
  *(_DWORD *)(a1 + 920) = 36;
  *(unsigned char *)(a1 + 924) = 1;
  *(_DWORD *)(a1 + 836) = 36;
  *(unsigned char *)(a1 + 840) = 1;
  *(_DWORD *)(a1 + 912) = 14;
  *(unsigned char *)(a1 + 916) = 1;
  if (!*(unsigned char *)(a1 + 708)) {
    *(unsigned char *)(a1 + 708) = 1;
  }
  *(_DWORD *)(a1 + 704) = 2;
  *(_DWORD *)(a1 + 728) = 5;
  *(unsigned char *)(a1 + 732) = 1;
  *(_DWORD *)(a1 + 736) = 25;
  *(unsigned char *)(a1 + 740) = 1;
  *(_DWORD *)(a1 + 744) = 32;
  *(unsigned char *)(a1 + 748) = 1;
  *(_DWORD *)(a1 + 752) = 5;
  *(unsigned char *)(a1 + 756) = 1;
  *(_DWORD *)(a1 + 760) = 5;
  *(unsigned char *)(a1 + 764) = 1;
  *(_DWORD *)(a1 + 776) = 5;
  *(unsigned char *)(a1 + 780) = 1;
  return result;
}

void sub_6C160(_Unwind_Exception *a1)
{
  sub_6C63C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_6C174(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = sub_20A0D0();
  *(unsigned char *)(a1 + 20) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 76) = (unsigned __int16)sub_6CBEC() > 0x100u;
  *(unsigned char *)(a1 + 77) = 1;
  *(void *)(a1 + 78) = 0;
  *(_WORD *)(a1 + 86) = 0;
  *(_DWORD *)(a1 + 88) = 16777473;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  *(_WORD *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 122) = 0;
  *(_DWORD *)(a1 + 128) = -1044381696;
  *(unsigned char *)(a1 + 132) = 1;
  *(_DWORD *)(a1 + 136) = -1044381696;
  *(unsigned char *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 152) = -1056964608;
  *(unsigned char *)(a1 + 156) = 1;
  *(_DWORD *)(a1 + 160) = -1033371648;
  *(unsigned char *)(a1 + 164) = 1;
  *(_DWORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 172) = 1;
  *(_DWORD *)(a1 + 176) = -1033371648;
  *(unsigned char *)(a1 + 180) = 1;
  *(_DWORD *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 1;
  *(_DWORD *)(a1 + 192) = -1044381696;
  *(unsigned char *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 204) = 1;
  *(_DWORD *)(a1 + 208) = -1033371648;
  *(unsigned char *)(a1 + 212) = 1;
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 220) = 1;
  *(_DWORD *)(a1 + 224) = -1033371648;
  *(unsigned char *)(a1 + 228) = 1;
  *(_DWORD *)(a1 + 232) = -1055916032;
  *(unsigned char *)(a1 + 236) = 1;
  *(_DWORD *)(a1 + 240) = -1033371648;
  *(unsigned char *)(a1 + 244) = 1;
  *(_DWORD *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 252) = 1;
  *(_DWORD *)(a1 + 256) = -1055916032;
  *(unsigned char *)(a1 + 260) = 1;
  *(_DWORD *)(a1 + 264) = -1033371648;
  *(unsigned char *)(a1 + 268) = 1;
  *(_DWORD *)(a1 + 272) = -1055916032;
  *(unsigned char *)(a1 + 276) = 1;
  *(_DWORD *)(a1 + 280) = -1033371648;
  *(unsigned char *)(a1 + 284) = 1;
  *(_DWORD *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 292) = 1;
  *(_DWORD *)(a1 + 296) = -1055916032;
  *(unsigned char *)(a1 + 300) = 1;
  *(_DWORD *)(a1 + 304) = -1043333120;
  *(unsigned char *)(a1 + 308) = 1;
  *(_DWORD *)(a1 + 312) = 0x40000000;
  *(unsigned char *)(a1 + 316) = 1;
  *(_DWORD *)(a1 + 320) = 16777472;
  *(_DWORD *)(a1 + 324) = 0;
  *(unsigned char *)(a1 + 328) = 1;
  *(_DWORD *)(a1 + 332) = 0;
  *(unsigned char *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 340) = 1103626240;
  *(unsigned char *)(a1 + 344) = 1;
  *(_DWORD *)(a1 + 348) = 0;
  *(unsigned char *)(a1 + 352) = 1;
  *(_DWORD *)(a1 + 356) = 1094713344;
  *(unsigned char *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 364) = 1094713344;
  *(unsigned char *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 372) = 1094713344;
  *(unsigned char *)(a1 + 376) = 1;
  *(_DWORD *)(a1 + 380) = -1061158912;
  *(unsigned char *)(a1 + 384) = 1;
  *(_DWORD *)(a1 + 388) = 1107296256;
  *(unsigned char *)(a1 + 392) = 1;
  *(_DWORD *)(a1 + 396) = 1107296256;
  *(unsigned char *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 404) = 1092616192;
  *(unsigned char *)(a1 + 408) = 1;
  *(_DWORD *)(a1 + 412) = 0;
  *(unsigned char *)(a1 + 416) = 1;
  *(_DWORD *)(a1 + 420) = 0;
  *(unsigned char *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 428) = 16777472;
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(unsigned char *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 692) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 700) = 0;
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 708) = 0;
  *(unsigned char *)(a1 + 712) = 0;
  *(unsigned char *)(a1 + 716) = 0;
  *(unsigned char *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 724) = 0;
  *(unsigned char *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 732) = 0;
  *(unsigned char *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 740) = 0;
  *(unsigned char *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 748) = 0;
  *(unsigned char *)(a1 + 752) = 0;
  *(unsigned char *)(a1 + 756) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(unsigned char *)(a1 + 764) = 0;
  *(unsigned char *)(a1 + 768) = 0;
  *(unsigned char *)(a1 + 772) = 0;
  *(unsigned char *)(a1 + 776) = 0;
  *(unsigned char *)(a1 + 780) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 788) = 0;
  *(unsigned char *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 796) = 0;
  *(unsigned char *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 804) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(unsigned char *)(a1 + 812) = 0;
  *(unsigned char *)(a1 + 816) = 0;
  *(unsigned char *)(a1 + 820) = 0;
  *(unsigned char *)(a1 + 824) = 1;
  *(unsigned char *)(a1 + 828) = 0;
  *(unsigned char *)(a1 + 832) = 0;
  *(unsigned char *)(a1 + 836) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 844) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 852) = 0;
  *(unsigned char *)(a1 + 856) = 0;
  *(unsigned char *)(a1 + 860) = 0;
  *(unsigned char *)(a1 + 864) = 0;
  *(_WORD *)(a1 + 868) = 0;
  *(unsigned char *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 876) = 0;
  *(unsigned char *)(a1 + 880) = 0;
  *(unsigned char *)(a1 + 884) = 0;
  *(unsigned char *)(a1 + 888) = 0;
  *(unsigned char *)(a1 + 892) = 0;
  *(unsigned char *)(a1 + 896) = 0;
  *(unsigned char *)(a1 + 900) = 0;
  *(unsigned char *)(a1 + 904) = 0;
  *(unsigned char *)(a1 + 908) = 0;
  *(unsigned char *)(a1 + 912) = 0;
  *(unsigned char *)(a1 + 916) = 0;
  *(unsigned char *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 924) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 936) = 0;
  *(unsigned char *)(a1 + 940) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 948) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 956) = 0;
  *(unsigned char *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 984) = 0;
  *(unsigned char *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1016) = 0;
  *(unsigned char *)(a1 + 1024) = 0;
  *(unsigned char *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1088) = 256;
  *(unsigned char *)(a1 + 1092) = 0;
  *(unsigned char *)(a1 + 1096) = 0;
  *(unsigned char *)(a1 + 1100) = 0;
  *(unsigned char *)(a1 + 1104) = 0;
  *(unsigned char *)(a1 + 1108) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  *(_WORD *)(a1 + 1120) = 0;
  return a1;
}

uint64_t **sub_6C4EC(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = result;
  if (!result[2]) {
    goto LABEL_23;
  }
  v18[0] = result;
  uint64_t v6 = *result;
  int v8 = result + 1;
  int v7 = result[1];
  void *result = (uint64_t *)(result + 1);
  v7[2] = 0;
  result[1] = 0;
  result[2] = 0;
  if (v6[1]) {
    uint64_t v9 = v6[1];
  }
  else {
    uint64_t v9 = (uint64_t)v6;
  }
  if (!v9)
  {
    uint64_t v10 = 0;
    goto LABEL_21;
  }
  uint64_t v10 = sub_6CA9C(v9);
  if (a2 == a3) {
    goto LABEL_21;
  }
  while (1)
  {
    char v11 = *v8;
    unsigned int v12 = *a2;
    unsigned __int8 v13 = v5 + 1;
    char v14 = v5 + 1;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          char v14 = (uint64_t **)v11;
          unsigned int v15 = *((_DWORD *)v11 + 7);
          if (v12 >= v15) {
            break;
          }
          char v11 = *v14;
          unsigned __int8 v13 = v14;
          if (!*v14) {
            goto LABEL_14;
          }
        }
        if (v15 >= v12) {
          break;
        }
        char v11 = v14[1];
        if (!v11)
        {
          unsigned __int8 v13 = v14 + 1;
          goto LABEL_14;
        }
      }
      BOOL v16 = v10;
      goto LABEL_17;
    }
LABEL_14:
    *(_DWORD *)(v9 + 28) = v12;
    sub_46CA8(v5, (uint64_t)v14, v13, (uint64_t *)v9);
    if (!v10) {
      break;
    }
    BOOL v16 = sub_6CA9C((uint64_t)v10);
    uint64_t v9 = (uint64_t)v10;
    uint64_t v10 = v16;
LABEL_17:
    if (++a2 == a3)
    {
      uint64_t v10 = v16;
      a2 = a3;
      goto LABEL_21;
    }
  }
  uint64_t v9 = 0;
  ++a2;
LABEL_21:
  v18[1] = v10;
  v18[2] = v9;
  uint64_t result = (uint64_t **)sub_6CAF0((uint64_t)v18);
LABEL_23:
  while (a2 != a3)
  {
    unsigned int v17 = *a2++;
    uint64_t result = (uint64_t **)sub_6CB40((uint64_t *)v5, v17, v17);
  }
  return result;
}

uint64_t sub_6C63C(uint64_t a1)
{
  sub_6C690(a1 + 432);
  sub_463E0(*(void **)(a1 + 104));
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_6C690(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 648) && *(char *)(a1 + 647) < 0) {
    operator delete(*(void **)(a1 + 624));
  }
  if (*(unsigned char *)(a1 + 616) && *(char *)(a1 + 615) < 0) {
    operator delete(*(void **)(a1 + 592));
  }
  if (*(unsigned char *)(a1 + 584) && *(char *)(a1 + 583) < 0) {
    operator delete(*(void **)(a1 + 560));
  }
  if (*(unsigned char *)(a1 + 552) && *(char *)(a1 + 551) < 0) {
    operator delete(*(void **)(a1 + 528));
  }
  if (*(unsigned char *)(a1 + 248)) {
    sub_6C74C(a1 + 208);
  }
  sub_6C788(a1 + 128);
  if (*(unsigned char *)(a1 + 120)) {
    sub_6C74C(a1 + 80);
  }

  return sub_6C788(a1);
}

uint64_t sub_6C74C(uint64_t a1)
{
  sub_6C7E4(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_6C788(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void sub_6C7E4(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_6C828((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_6C828(uint64_t a1)
{
  sub_6C878(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_6C878(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 296);
  if (v2) {
    CFRelease(v2);
  }
  sub_6C954(a1 + 248);
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  sub_6C9A0(*(void **)(a1 + 192));
  unsigned int v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(void *)(a1 + 168) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 152);
  if (v5) {
    CFRelease(v5);
  }
  int v7 = (void **)(a1 + 128);
  sub_6C9F4(&v7);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_6C954(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unsigned int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_6C9A0(void *a1)
{
  if (a1)
  {
    sub_6C9A0(*a1);
    sub_6C9A0(a1[1]);
    sub_63A00((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_6C9F4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    unsigned int v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;
        sub_6CA7C(*(v4 - 1));
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_6CA7C(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void *sub_6CA9C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        unsigned int v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          unsigned int v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_6CAF0(uint64_t a1)
{
  sub_463E0(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_463E0(v2);
  }
  return a1;
}

uint64_t *sub_6CB40(uint64_t *result, unsigned int a2, int a3)
{
  unsigned int v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_46CA8(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t sub_6CBEC()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswerWithError();
  CFBooleanRef v1 = v0;
  if (v0)
  {
    __int16 v2 = sub_20610(v0);
    unsigned __int8 v3 = v2;
    int v4 = HIBYTE(v2);
    CFRelease(v1);
  }
  else
  {
    int v4 = 0;
    unsigned __int8 v3 = 0;
  }
  return v3 | (v4 << 8);
}

uint64_t sub_6CC7C(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v5 = a1;
      CFNumberType v6 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_25;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloat32Type;
      goto LABEL_21;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat64Type;
      goto LABEL_29;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOBYTE(valuePtr);
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v5 = a1;
      CFNumberType v6 = kCFNumberShortType;
LABEL_12:
      int Value = CFNumberGetValue(v5, v6, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOWORD(valuePtr);
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberIntType;
LABEL_14:
      int Value = CFNumberGetValue(v7, v8, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LODWORD(valuePtr);
LABEL_15:
      BOOL v18 = v16 || v17 == 0;
      goto LABEL_33;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongType;
      goto LABEL_25;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongLongType;
      goto LABEL_25;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloatType;
LABEL_21:
      int Value = CFNumberGetValue(v11, v12, &valuePtr);
      BOOL v19 = *(float *)&valuePtr == 0.0;
      goto LABEL_30;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberDoubleType;
      goto LABEL_29;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberCFIndexType;
      goto LABEL_25;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberNSIntegerType;
LABEL_25:
      int Value = CFNumberGetValue(v9, v10, &valuePtr);
      if (Value) {
        BOOL v18 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v18 = 1;
      }
      goto LABEL_33;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberCGFloatType;
LABEL_29:
      int Value = CFNumberGetValue(v13, v14, &valuePtr);
      BOOL v19 = valuePtr == 0.0;
LABEL_30:
      BOOL v18 = v19 || Value == 0;
LABEL_33:
      int v4 = !v18;
      if (!Value) {
        goto LABEL_38;
      }
      int v20 = 256;
      break;
    default:
      int v4 = 0;
LABEL_38:
      int v20 = 0;
      break;
  }
  return v20 | v4;
}

std::string *sub_6CEC4(std::string *__dst, std::string *__str)
{
  if (__dst[3].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, __str);
    std::string::operator=(__dst + 1, __str + 1);
    std::string::operator=(__dst + 2, __str + 2);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21E8C(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v4 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v4;
    }
    if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21E8C(&__dst[1], __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
    }
    else
    {
      long long v5 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
      __dst[1].__r_.__value_.__r.__words[2] = __str[1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v5;
    }
    CFNumberType v6 = __dst + 2;
    if (SHIBYTE(__str[2].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21E8C(v6, __str[2].__r_.__value_.__l.__data_, __str[2].__r_.__value_.__l.__size_);
    }
    else
    {
      long long v7 = *(_OWORD *)&__str[2].__r_.__value_.__l.__data_;
      __dst[2].__r_.__value_.__r.__words[2] = __str[2].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
    __dst[3].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

void sub_6CFB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6CFE4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      CFNumberType v3 = *(uint64_t **)(a2 + 16);
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        for (uint64_t i = 0; i != v4; ++i)
          *(void *)(*(void *)a1 + 8 * i) = 0;
        uint64_t v6 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        if (v6) {
          BOOL v7 = v3 == 0;
        }
        else {
          BOOL v7 = 1;
        }
        if (v7)
        {
          CFNumberType v8 = (void *)v6;
        }
        else
        {
          do
          {
            std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v3 + 2));
            sub_6EA40(v6 + 40, (uint64_t)(v3 + 5));
            CFNumberType v8 = *(void **)v6;
            sub_67314(a1, v6);
            CFNumberType v3 = (uint64_t *)*v3;
            if (!v8) {
              break;
            }
            uint64_t v6 = (uint64_t)v8;
          }
          while (v3);
        }
        sub_6C7E4(v8);
      }
      for (; v3; CFNumberType v3 = (uint64_t *)*v3)
      {
        CFNumberRef v9 = operator new(0x158uLL);
        v12[0] = (uint64_t)v9;
        v12[1] = a1 + 16;
        char v13 = 0;
        *CFNumberRef v9 = 0;
        v9[1] = 0;
        CFNumberType v10 = sub_6E118((unsigned char *)v9 + 16, (long long *)v3 + 1);
        char v13 = 1;
        v9[1] = sub_6789C((uint64_t)v10);
        sub_67314(a1, v12[0]);
        v12[0] = 0;
        sub_6E0C0((uint64_t)v12);
      }
    }
  }
  else
  {
    sub_6E9C8(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

void sub_6D12C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_6C7E4(v1);
  __cxa_rethrow();
}

void sub_6D144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6E0C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_6D16C(uint64_t a1, int a2, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 8) = cf;
  return a1;
}

uint64_t sub_6D1AC(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      sub_6E6BC(a1, *a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_6D210(_Unwind_Exception *a1)
{
  sub_6C954(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_6D224(unsigned char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  sub_6E190(__dst + 24, a3);
  return __dst;
}

void sub_6D284(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6D2A0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 328 * a3;
    do
    {
      sub_6DC6C(a1, a2, (long long *)a2);
      a2 += 328;
      v5 -= 328;
    }
    while (v5);
  }
  return a1;
}

void sub_6D308(_Unwind_Exception *a1)
{
  sub_6C74C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_6D31C(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_6DB24(a1, a2);
  }
  else
  {
    sub_6DBFC(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

char *sub_6D364(char *__dst, long long *a2, uint64_t a3, std::string *a4, std::string *a5, std::string *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v11;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  CFNumberType v12 = (void **)(__dst + 24);
  char v13 = (void **)(__dst + 48);
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  sub_6D838(&v18, a4);
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v14 = *(void *)(a3 + 8);
    if (v14)
    {
      sub_21E8C(&v16, *(void **)a3, v14);
      goto LABEL_10;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    std::string v16 = *(std::string *)a3;
    goto LABEL_10;
  }
  sub_208ED4(&v16);
LABEL_10:
  sub_6D838(&__p, &v16);
  sub_6D8A0(&__dsta, (uint64_t)&v18, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  sub_6D838(&__p, a6);
  sub_6D8A0((std::__fs::filesystem::path *)&v18, (uint64_t)&__dsta, (std::__fs::filesystem::path *)&__p);
  if (__dst[47] < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)CFNumberType v12 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  *((void *)__dst + 5) = *((void *)&v18.__r_.__value_.__l + 2);
  *((unsigned char *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_6D838(&__p, a5);
  sub_6D8A0((std::__fs::filesystem::path *)&v18, (uint64_t)&__dsta, (std::__fs::filesystem::path *)&__p);
  if (__dst[71] < 0) {
    operator delete(*v13);
  }
  *(_OWORD *)char v13 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  *((void *)__dst + 8) = *((void *)&v18.__r_.__value_.__l + 2);
  *((unsigned char *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dsta.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dsta.__pn_.__r_.__value_.__l.__data_);
  }
  return __dst;
}

void sub_6D548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 + 71) < 0) {
    operator delete(*v33);
  }
  if (*(char *)(v32 + 47) < 0) {
    operator delete(*v34);
  }
  if (*(char *)(v32 + 23) < 0) {
    operator delete(*(void **)v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6D600(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    uint64_t v5 = (void **)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*v5);
    }
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
    *((unsigned char *)a2 + 47) = 0;
    *((unsigned char *)a2 + 24) = 0;
    BOOL v7 = (void **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*v7);
    }
    long long v8 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)BOOL v7 = v8;
    *((unsigned char *)a2 + 71) = 0;
    *((unsigned char *)a2 + 48) = 0;
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v9;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v10 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v10;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v11 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v11;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

uint64_t sub_6D710(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_6D74C(uint64_t a1)
{
  CFNumberRef v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_6D780(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_6D7D4(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }

  return sub_6C74C(a1);
}

std::string *sub_6D838(std::string *a1, std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v4 = (v3 & 0x80000000) != 0;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v3 = v3;
  if (v4) {
    std::string::size_type v3 = size;
  }
  sub_6D960(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_6D884(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_6D8A0(std::__fs::filesystem::path *__dst, uint64_t a2, std::__fs::filesystem::path *this)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__dst->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __dst->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_) {
    return std::string::operator=(&__dst->__pn_, &this->__pn_);
  }
  if (std::__fs::filesystem::path::__filename(__dst).__size_) {
    std::string::push_back(&__dst->__pn_, 47);
  }
  int v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    BOOL v7 = this;
  }
  else {
    BOOL v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
  }
  return std::string::append(&__dst->__pn_, (const std::string::value_type *)v7, size);
}

void sub_6D944(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_6D960(std::string *this, std::string *a2, std::string *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    long long v10 = this;
  }
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    char v13 = this;
    if ((v6 & 0x80) != 0) {
      char v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    unint64_t v14 = (char *)v13 + size;
    do
    {
      std::string::value_type v15 = v4->__r_.__value_.__s.__data_[0];
      BOOL v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }
    while (v4 != a3);
    std::string::value_type *v14 = 0;
    std::string::size_type v16 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v16;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    }
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      sub_4F8C0();
    }
    if (v7 > 0x16)
    {
      uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v17 = v7 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      std::string::size_type v24 = v7;
      int64_t v25 = v18 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }
    do
    {
      std::string::value_type v19 = v4->__r_.__value_.__s.__data_[0];
      BOOL v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }
    while (v4 != a3);
    std::string::value_type *p_p = 0;
    if (v25 >= 0) {
      int v20 = (const std::string::value_type *)&__p;
    }
    else {
      int v20 = (const std::string::value_type *)__p;
    }
    if (v25 >= 0) {
      std::string::size_type v21 = HIBYTE(v25);
    }
    else {
      std::string::size_type v21 = v24;
    }
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
  }
  return this;
}

void sub_6DB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_6DB24(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_6C7E4(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  unint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  std::string::size_type v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *std::string::size_type v9 = 0;
    v9[1] = 0;
  }
}

uint64_t sub_6DBFC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  std::string::size_type v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *std::string::size_type v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void sub_6DC6C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = sub_6789C((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_67CEC(i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string::value_type v15 = (void *)(a1 + 16);
  std::string::size_type v16 = operator new(0x158uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v8;
  sub_6E118((unsigned char *)v16 + 16, a3);
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_6DEC4(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  std::string::size_type v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *v16 = *v24;
LABEL_38:
    *std::string::size_type v24 = v16;
    goto LABEL_39;
  }
  void *v16 = *v15;
  void *v15 = v16;
  *(void *)(v23 + 8 * v3) = v15;
  if (*v16)
  {
    unint64_t v25 = *(void *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    std::string::size_type v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  sub_6E0C0((uint64_t)v26);
}

void sub_6DEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6E0C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_6DEC4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      std::string::size_type v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_60560();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  unint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *unint64_t v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        unint64_t v8 = v14;
        unint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void sub_6E0C0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_6C828((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

unsigned char *sub_6E118(unsigned char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_6E190(__dst + 24, (long long *)((char *)a2 + 24));
  return __dst;
}

void sub_6E174(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_6E190(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_21E8C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_21E8C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_21E8C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_21E8C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  int v9 = *((_DWORD *)a2 + 30);
  *((void *)__dst + 16) = 0;
  *((_DWORD *)__dst + 30) = v9;
  *((void *)__dst + 17) = 0;
  *((void *)__dst + 18) = 0;
  uint64_t v10 = *((void *)a2 + 16);
  uint64_t v11 = *((void *)a2 + 17);
  char v27 = (uint64_t *)(__dst + 128);
  char v28 = 0;
  if (v11 != v10)
  {
    sub_6E988((void *)__dst + 16, (v11 - v10) >> 4);
    uint64_t v12 = *((void *)__dst + 17);
    do
    {
      uint64_t v12 = sub_6D16C(v12, *(_DWORD *)v10, *(CFTypeRef *)(v10 + 8)) + 16;
      v10 += 16;
    }
    while (v10 != v11);
    *((void *)__dst + 17) = v12;
  }
  uint64_t v13 = *((void *)a2 + 19);
  if (v13) {
    CFRetain(*((CFTypeRef *)a2 + 19));
  }
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 19) = v13;
  *((void *)__dst + 21) = 0;
  *((void *)__dst + 22) = 0;
  sub_46B38((void *)__dst + 20, *((const void **)a2 + 20), *((void *)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 2);
  *((void *)__dst + 24) = 0;
  unint64_t v14 = (char **)(__dst + 192);
  *((void *)__dst + 23) = __dst + 192;
  *((void *)__dst + 25) = 0;
  size_t v15 = (long long *)*((void *)a2 + 23);
  if (v15 != a2 + 12)
  {
    do
    {
      std::string::size_type v16 = *v14;
      float v17 = __dst + 192;
      if (*((char ***)__dst + 23) == v14) {
        goto LABEL_30;
      }
      float v18 = *v14;
      BOOL v19 = __dst + 192;
      if (v16)
      {
        do
        {
          float v17 = v18;
          float v18 = (char *)*((void *)v18 + 1);
        }
        while (v18);
      }
      else
      {
        do
        {
          float v17 = (char *)*((void *)v19 + 2);
          BOOL v20 = *(void *)v17 == (void)v19;
          BOOL v19 = v17;
        }
        while (v20);
      }
      if ((sub_15E8C((void *)v17 + 4, (void **)v15 + 4) & 0x80) != 0)
      {
LABEL_30:
        if (!v16)
        {
          char v29 = __dst + 192;
          unint64_t v21 = (uint64_t **)(__dst + 192);
LABEL_35:
          sub_6E8C8((uint64_t)&v27, (uint64_t)(__dst + 184), v15 + 2);
          sub_46CA8((uint64_t **)__dst + 23, (uint64_t)v29, v21, v27);
          char v27 = 0;
          sub_6E930((uint64_t)&v27);
          goto LABEL_36;
        }
        char v29 = v17;
        unint64_t v21 = (uint64_t **)(v17 + 8);
      }
      else
      {
        unint64_t v21 = (uint64_t **)sub_15DF8((uint64_t)(__dst + 184), &v29, (void **)v15 + 4);
      }
      if (!*v21) {
        goto LABEL_35;
      }
LABEL_36:
      size_t v22 = (long long *)*((void *)v15 + 1);
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          size_t v22 = *(long long **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (long long *)*((void *)v15 + 2);
          BOOL v20 = *(void *)v23 == (void)v15;
          size_t v15 = v23;
        }
        while (!v20);
      }
      size_t v15 = v23;
    }
    while (v23 != a2 + 12);
  }
  *((void *)__dst + 26) = 0;
  *((void *)__dst + 27) = 0;
  *((void *)__dst + 28) = 0;
  sub_6E5D0(__dst + 208, *((uint64_t **)a2 + 26), *((uint64_t **)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3);
  uint64_t v24 = *((void *)a2 + 29);
  *((_DWORD *)__dst + 60) = *((_DWORD *)a2 + 60);
  *((void *)__dst + 29) = v24;
  sub_6E644((uint64_t)(__dst + 248), (uint64_t)a2 + 248);
  __dst[288] = *((unsigned char *)a2 + 288);
  uint64_t v25 = *((void *)a2 + 37);
  if (v25) {
    CFRetain(*((CFTypeRef *)a2 + 37));
  }
  *((void *)__dst + 37) = v25;
  return __dst;
}

void sub_6E4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  if (*(char *)(v15 + 95) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v15 + 71) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v15 + 47) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

char *sub_6E5D0(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_66F48(result, a4);
    long long v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_6E628(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6E644(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_6DEC4(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_6E6BC(a1, *((_DWORD *)i + 4), i + 2);
  return a1;
}

void sub_6E6A4(_Unwind_Exception *a1)
{
  sub_6C954(v1);
  _Unwind_Resume(a1);
}

void sub_6E6BC(uint64_t a1, int a2, void *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = v6;
  uint64_t v12[2] = *a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_6DEC4(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v12 = *v20;
LABEL_38:
    *BOOL v20 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_6E8B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_6E8C8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = sub_67804(v6 + 32, a3);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_6E91C(_Unwind_Exception *a1)
{
  sub_6E930(v1);
  _Unwind_Resume(a1);
}

void sub_6E930(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_63A00((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

char *sub_6E988(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_60548();
  }
  uint64_t result = (char *)sub_10724(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_6E9C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_6DEC4(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_6DC6C(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_6EA28(_Unwind_Exception *a1)
{
  sub_6C74C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_6EA40(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 128);
    uint64_t v6 = *(void *)(a2 + 128);
    uint64_t v5 = *(void *)(a2 + 136);
    unint64_t v7 = (v5 - v6) >> 4;
    if (v7 <= (*(void *)(a1 + 144) - v4) >> 4)
    {
      uint64_t v12 = *(void *)(a1 + 136);
      unint64_t v13 = (v12 - v4) >> 4;
      if (v13 >= v7)
      {
        if (v6 != v5)
        {
          do
          {
            sub_6F61C(v4, *(_DWORD *)v6, *(CFTypeRef *)(v6 + 8));
            v4 += 16;
            v6 += 16;
          }
          while (v6 != v5);
          uint64_t v12 = *(void *)(a1 + 136);
        }
        if (v12 != v4)
        {
          do
          {
            uint64_t v16 = v12 - 16;
            sub_6CA7C(*(const void **)(v12 - 8));
            uint64_t v12 = v16;
          }
          while (v16 != v4);
        }
        *(void *)(a1 + 136) = v4;
      }
      else
      {
        uint64_t v14 = v6 + 16 * v13;
        if (v12 != v4)
        {
          do
          {
            sub_6F61C(v4, *(_DWORD *)v6, *(CFTypeRef *)(v6 + 8));
            v4 += 16;
            v6 += 16;
          }
          while (v6 != v14);
          uint64_t v4 = *(void *)(a1 + 136);
        }
        uint64_t v15 = v4;
        if (v14 != v5)
        {
          uint64_t v15 = v4;
          do
          {
            uint64_t v15 = sub_6D16C(v15, *(_DWORD *)v14, *(CFTypeRef *)(v14 + 8)) + 16;
            v14 += 16;
          }
          while (v14 != v5);
        }
        *(void *)(a1 + 136) = v15;
      }
    }
    else
    {
      sub_6F66C((void **)(a1 + 128));
      if (v5 - v6 < 0) {
        sub_60548();
      }
      uint64_t v8 = *(void *)(a1 + 144) - *(void *)(a1 + 128);
      uint64_t v9 = v8 >> 3;
      if (v8 >> 3 <= v7) {
        uint64_t v9 = (v5 - v6) >> 4;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      sub_6E988((void *)(a1 + 128), v10);
      uint64_t v11 = *(void *)(a1 + 136);
      while (v6 != v5)
      {
        uint64_t v11 = sub_6D16C(v11, *(_DWORD *)v6, *(CFTypeRef *)(v6 + 8)) + 16;
        v6 += 16;
      }
      *(void *)(a1 + 136) = v11;
    }
  }
  unint64_t v17 = *(const void **)(a1 + 152);
  size_t v18 = *(const void **)(a2 + 152);
  *(void *)(a1 + 152) = v18;
  if (v18) {
    CFRetain(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (a1 != a2)
  {
    sub_6720C((char *)(a1 + 160), *(char **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 2);
    uint64_t v19 = *(void **)(a2 + 184);
    BOOL v20 = (void *)(a2 + 192);
    if (*(void *)(a1 + 200))
    {
      uint64_t v21 = *(void *)(a1 + 192);
      size_t v22 = *(void **)(a1 + 184);
      *(void *)(a1 + 184) = a1 + 192;
      *(void *)(v21 + 16) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      if (v22[1]) {
        uint64_t v23 = (void *)v22[1];
      }
      else {
        uint64_t v23 = v22;
      }
      __int16 v37 = (uint64_t *)(a1 + 184);
      __int16 v38 = v23;
      __int16 v39 = v23;
      if (!v23 || (__int16 v38 = sub_6CA9C((uint64_t)v23), v19 == v20))
      {
        char v27 = v19;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v23 + 4), (const std::string *)(v19 + 4));
          std::string::operator=((std::string *)(v23 + 7), (const std::string *)(v19 + 7));
          uint64_t v24 = v39;
          uint64_t v25 = (uint64_t **)sub_6F554(a1 + 184, &v36, v39 + 4);
          sub_46CA8((uint64_t **)(a1 + 184), v36, v25, v24);
          uint64_t v23 = v38;
          __int16 v39 = v38;
          if (v38) {
            __int16 v38 = sub_6CA9C((uint64_t)v38);
          }
          char v26 = (void *)v19[1];
          if (v26)
          {
            do
            {
              char v27 = v26;
              char v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              char v27 = (void *)v19[2];
              BOOL v28 = *v27 == (void)v19;
              uint64_t v19 = v27;
            }
            while (!v28);
          }
          if (!v23) {
            break;
          }
          uint64_t v19 = v27;
        }
        while (v27 != v20);
      }
      sub_6F5CC((uint64_t)&v37);
      uint64_t v19 = v27;
    }
    if (v19 != v20)
    {
      do
      {
        sub_6E8C8((uint64_t)&v37, a1 + 184, (long long *)v19 + 2);
        char v29 = v37;
        char v30 = (uint64_t **)sub_6F554(a1 + 184, &v36, v37 + 4);
        sub_46CA8((uint64_t **)(a1 + 184), v36, v30, v29);
        __int16 v37 = 0;
        sub_6E930((uint64_t)&v37);
        char v31 = (void *)v19[1];
        if (v31)
        {
          do
          {
            uint64_t v32 = v31;
            char v31 = (void *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            uint64_t v32 = (void *)v19[2];
            BOOL v28 = *v32 == (void)v19;
            uint64_t v19 = v32;
          }
          while (!v28);
        }
        uint64_t v19 = v32;
      }
      while (v32 != v20);
    }
    sub_6EEA4((void *)(a1 + 208), *(uint64_t **)(a2 + 208), *(uint64_t **)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  }
  if (*(unsigned __int8 *)(a1 + 240) == *(unsigned __int8 *)(a2 + 240))
  {
    if (*(unsigned char *)(a1 + 240)) {
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
    }
  }
  else if (*(unsigned char *)(a1 + 240))
  {
    *(unsigned char *)(a1 + 240) = 0;
  }
  else
  {
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(unsigned char *)(a1 + 240) = 1;
  }
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
    sub_6EFDC((void *)(a1 + 248), *(uint64_t **)(a2 + 264));
  }
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  __int16 v33 = *(const void **)(a1 + 296);
  __int16 v34 = *(const void **)(a2 + 296);
  *(void *)(a1 + 296) = v34;
  if (v34) {
    CFRetain(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  return a1;
}

void sub_6EE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6F5CC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_6EEA4(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    size_t v18 = (char *)a1[1];
    unint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      uint64_t v25 = result;
      while (v6 != a3)
      {
        uint64_t v26 = *v6++;
        *(void *)uint64_t v25 = v26;
        v25 += 8;
      }
      unint64_t v17 = (char *)(v25 - result);
      uint64_t v12 = result;
    }
    else
    {
      BOOL v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          uint64_t v22 = *v6++;
          *(void *)uint64_t result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      uint64_t v23 = v12;
      while (v20 != a3)
      {
        uint64_t v24 = *v20++;
        *(void *)uint64_t v23 = v24;
        v23 += 8;
      }
      unint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      sub_60548();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_66F48(a1, v11);
    uint64_t v14 = (char *)a1[1];
    unint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    unint64_t v17 = (char *)(v15 - v12);
  }
  *unint64_t v13 = &v17[(void)v12];
  return result;
}

void sub_6EFDC(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v4; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      unint64_t v7 = *((int *)a2 + 4);
      *((_DWORD *)v6 + 4) = v7;
      *((unsigned char *)v6 + 20) = *((unsigned char *)a2 + 20);
      uint64_t v8 = (uint64_t *)*v6;
      v6[1] = v7;
      uint64_t v9 = sub_6F11C((uint64_t)a1, v7, (_DWORD *)v6 + 4);
      sub_6F46C(a1, v6, v9);
      a2 = (uint64_t *)*a2;
      uint64_t v6 = v8;
      if (!v8) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v13 = (uint64_t *)*v6;
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2)
    {
      uint64_t v10 = operator new(0x18uLL);
      void *v10 = 0;
      uint64_t v11 = a2[2];
      v10[2] = v11;
      v10[1] = (int)v11;
      uint64_t v12 = sub_6F11C((uint64_t)a1, (int)v11, (_DWORD *)v10 + 4);
      sub_6F46C(a1, v10, v12);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_6F0D8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_6F0F8(_Unwind_Exception *a1)
{
}

uint64_t *sub_6F11C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        sub_60560();
      }
      unint64_t v13 = operator new(8 * *(void *)&prime);
      uint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      uint64_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = *v16; *v16; uint64_t i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            uint64_t v16 = (uint64_t **)i;
          }
          else
          {
            uint64_t v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                uint64_t v25 = v24;
                uint64_t v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              char *v16 = v24;
              *uint64_t v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              uint64_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      int v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  BOOL v28 = *(uint64_t **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    uint64_t result = v28;
    BOOL v28 = (uint64_t *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *sub_6F46C(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void *sub_6F554(uint64_t a1, void *a2, void *a3)
{
  uint8x8_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint8x8_t v5 = (void *)v4;
        if ((sub_15E8C(a3, (void **)(v4 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t sub_6F5CC(uint64_t a1)
{
  sub_6C9A0(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int8x8_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int8x8_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_6C9A0(v2);
  }
  return a1;
}

uint64_t sub_6F61C(uint64_t a1, int a2, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  uint64_t v4 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

void sub_6F66C(void **a1)
{
  uint64_t v1 = (const void **)*a1;
  if (*a1)
  {
    int8x8_t v3 = (const void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint8x8_t v5 = v3 - 2;
        sub_6CA7C(*(v3 - 1));
        int8x8_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_6F6D8()
{
  long long v195 = xmmword_4E7880;
  *(_OWORD *)int v274 = xmmword_4E7880;
  sub_72300(__p, (__int32 *)v274, 4);
  sub_857F4((uint64_t)&qword_649418, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(void *)int v274 = 0x666D69636C6D6963;
  sub_72300(v271, (__int32 *)v274, 2);
  *(void *)int v274 = 0x666D6963736D6963;
  sub_72300(&v269, (__int32 *)v274, 2);
  *(void *)int v274 = 0x666D6963736D6963;
  sub_72300(v268, (__int32 *)v274, 2);
  *(_OWORD *)int v274 = v195;
  sub_72300(v267, (__int32 *)v274, 4);
  *(void *)int v274 = 0x736D6963696D6963;
  sub_72300(v266, (__int32 *)v274, 2);
  *(void *)int v274 = 0x666D6963696D6963;
  sub_72300(v265, (__int32 *)v274, 2);
  *(void *)int v274 = 0x666D6963736D6963;
  sub_72300(v264, (__int32 *)v274, 2);
  if (qword_649418 == qword_649420)
  {
    CFBooleanRef v0 = (char *)operator new(0x18uLL);
    v263[2] = v0 + 24;
    qmemcpy(v0, "ivpvovpvcgpvcvmrgcrvgsmv", 24);
    v263[0] = v0;
    v263[1] = v0 + 24;
    uint64_t v1 = (char *)operator new(0xCuLL);
    v262[2] = v1 + 12;
    qmemcpy(v1, " wargcrvgsmv", 12);
    v262[0] = v1;
    v262[1] = v1 + 12;
    uint64_t v2 = (char *)operator new(0x40uLL);
    v261[2] = v2 + 64;
    qmemcpy(v2, " wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmgcvmrplminkpstmsmmacmpcts", 64);
    v261[0] = v2;
    v261[1] = v2 + 64;
    LODWORD(v256) = 1768778083;
    sub_72300(v274, (__int32 *)&v256, 1);
    sub_72384((uint64_t)&v296, 1651797297, (uint64_t)v274, 1869442665, -1, (uint64_t)v263);
    if (*(void *)v274)
    {
      *(void *)&v274[8] = *(void *)v274;
      operator delete(*(void **)v274);
    }
    LODWORD(v250) = 1819109731;
    sub_72300(v274, (__int32 *)&v250, 1);
    sub_72384((uint64_t)&v256, 1651797298, (uint64_t)v274, 1869442665, -1, (uint64_t)v263);
    if (*(void *)v274)
    {
      *(void *)&v274[8] = *(void *)v274;
      operator delete(*(void **)v274);
    }
    LODWORD(v244) = 1936550243;
    sub_72300(v274, (__int32 *)&v244, 1);
    sub_72384((uint64_t)&v250, 1650551601, (uint64_t)v274, 1869442665, -1, (uint64_t)v263);
    if (*(void *)v274)
    {
      *(void *)&v274[8] = *(void *)v274;
      operator delete(*(void **)v274);
    }
    LODWORD(inAddress) = 1718446435;
    sub_72300(v274, (__int32 *)&inAddress, 1);
    sub_72384((uint64_t)&v244, 1718514737, (uint64_t)v274, 1869442665, -1, (uint64_t)v263);
    if (*(void *)v274)
    {
      *(void *)&v274[8] = *(void *)v274;
      operator delete(*(void **)v274);
    }
    sub_72384((uint64_t)&inAddress, 1650811245, (uint64_t)&v269, 1935827812, 1, (uint64_t)v262);
    sub_72384((uint64_t)&v238, 1650811245, (uint64_t)&v269, 1668441188, 0, (uint64_t)v262);
    sub_72384((uint64_t)&v232, 1986228839, (uint64_t)v268, 1668441188, 0, (uint64_t)v262);
    int8x8_t v3 = operator new(8uLL);
    *int8x8_t v3 = 0x766D736776726367;
    *(void *)&v274[16] = v3 + 1;
    *(void *)int v274 = v3;
    *(void *)&v274[8] = v3 + 1;
    sub_72384((uint64_t)&v227, 1634495520, (uint64_t)&unk_649470, 1852796517, -1, (uint64_t)v274);
    operator delete(v3);
    memset(v274, 0, 24);
    sub_72384((uint64_t)&v222, 1870033508, (uint64_t)&unk_649470, 1852796517, -1, (uint64_t)v274);
    sub_72424((uint64_t)&v217, 1668112945, (uint64_t)v266);
    sub_72424((uint64_t)&v212, 1668112946, (uint64_t)v265);
    sub_72424((uint64_t)&v207, 1668112947, (uint64_t)v264);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649510, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649510))
    {
      sub_7245C((uint64_t)v274, (uint64_t)&v296);
      sub_724F8(&v196, (uint64_t)v274, 1uLL);
      sub_7258C((uint64_t)&unk_6494D8, 1835216945, 1835229812, 0, 1819244402, 1651799149, (uint64_t *)&v196);
      int v204 = &v196;
      sub_72620((void ***)&v204);
      sub_726A4(v274);
      __cxa_guard_release(&qword_649510);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649550, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649550))
    {
      sub_7245C((uint64_t)v274, (uint64_t)&v256);
      sub_724F8(&v196, (uint64_t)v274, 1uLL);
      sub_7258C((uint64_t)&unk_649518, 1835216948, 1835229812, 1, 1819244402, 1651799149, (uint64_t *)&v196);
      int v204 = &v196;
      sub_72620((void ***)&v204);
      sub_726A4(v274);
      __cxa_guard_release(&qword_649550);
    }
    *(_DWORD *)int v274 = v244;
    memset(&v274[8], 0, 24);
    sub_46B38(&v274[8], v245, (uint64_t)p_info, ((char *)p_info - (char *)v245) >> 2);
    *(void *)&v274[32] = v247;
    *(void *)&v274[40] = 0;
    uint64_t v276 = 0;
    uint64_t v275 = 0;
    sub_46B38(&v274[40], v248, (uint64_t)v249, (v249 - (unsigned char *)v248) >> 2);
    int v277 = v238;
    uint64_t v280 = 0;
    uint64_t v278 = 0;
    uint64_t v279 = 0;
    sub_46B38(&v278, v239, (uint64_t)v240, (v240 - (unsigned char *)v239) >> 2);
    uint64_t v281 = v241;
    uint64_t v282 = 0;
    uint64_t v284 = 0;
    uint64_t v283 = 0;
    sub_46B38(&v282, v242, (uint64_t)v243, (v243 - (unsigned char *)v242) >> 2);
    int v285 = (int)v232;
    v287[1] = 0;
    uint64_t v286 = 0;
    v287[0] = 0;
    sub_46B38(&v286, v233, (uint64_t)v234, (v234 - (unsigned char *)v233) >> 2);
    v287[2] = v235;
    memset(v288, 0, sizeof(v288));
    sub_46B38(v288, v236, (uint64_t)v237, (v237 - (unsigned char *)v236) >> 2);
    int v204 = 0;
    int v205 = 0;
    unsigned int v206 = 0;
    int v196 = (void **)&v204;
    LOBYTE(v197) = 0;
    int v204 = (void ***)operator new(0xC0uLL);
    int v205 = (void **)v204;
    unsigned int v206 = (void **)(v204 + 24);
    uint64_t v4 = 0;
    int v205 = (void **)sub_726E8((uint64_t)v274, (uint64_t)&v289, (uint64_t)v204);
    do
    {
      uint8x8_t v5 = &v274[v4 * 8];
      unint64_t v6 = (void *)v288[v4];
      if (v6)
      {
        *((void *)v5 + 22) = v6;
        operator delete(v6);
      }
      float v7 = (void *)*((void *)v5 + 17);
      if (v7)
      {
        v287[v4] = v7;
        operator delete(v7);
      }
      v4 -= 8;
    }
    while (v4 != -24);
    *(_DWORD *)int v274 = v250;
    memset(&v274[8], 0, 24);
    sub_46B38(&v274[8], v251, (uint64_t)v252, (v252 - (unsigned char *)v251) >> 2);
    *(void *)&v274[32] = v253;
    *(void *)&v274[40] = 0;
    uint64_t v276 = 0;
    uint64_t v275 = 0;
    sub_46B38(&v274[40], v254, (uint64_t)v255, (v255 - (unsigned char *)v254) >> 2);
    int v277 = inAddress;
    uint64_t v280 = 0;
    uint64_t v278 = 0;
    uint64_t v279 = 0;
    sub_46B38(&v278, inAddress_8, (uint64_t)v292, (v292 - (unsigned char *)inAddress_8) >> 2);
    uint64_t v281 = v293;
    uint64_t v282 = 0;
    uint64_t v284 = 0;
    uint64_t v283 = 0;
    sub_46B38(&v282, v294, (uint64_t)v295, (v295 - (unsigned char *)v294) >> 2);
    CFTypeRef v201 = 0;
    uint64_t v202 = 0;
    char v203 = 0;
    int v196 = (void **)&v201;
    LOBYTE(v197) = 0;
    CFTypeRef v201 = (char *)operator new(0x80uLL);
    uint64_t v202 = (uint64_t)v201;
    char v203 = v201 + 128;
    uint64_t v8 = 0;
    uint64_t v202 = sub_726E8((uint64_t)v274, (uint64_t)&v285, (uint64_t)v201);
    do
    {
      BOOL v9 = &v274[v8];
      unint64_t v10 = *(void **)((char *)&v282 + v8);
      if (v10)
      {
        *((void *)v9 + 14) = v10;
        operator delete(v10);
      }
      unint64_t v11 = (void *)*((void *)v9 + 9);
      if (v11)
      {
        *(uint64_t *)((char *)&v279 + v8) = (uint64_t)v11;
        operator delete(v11);
      }
      v8 -= 64;
    }
    while (v8 != -128);
    if (MGGetBoolAnswer())
    {
      sub_72384((uint64_t)v274, 1937007986, (uint64_t)v267, 1937007986, 0, (uint64_t)v261);
      sub_72384((uint64_t)&v196, 1937007986, (uint64_t)v267, 1937007986, 1, (uint64_t)v261);
      sub_7277C((uint64_t *)&v204, (uint64_t)v274);
      sub_7277C((uint64_t *)&v201, (uint64_t)&v196);
      if (v199)
      {
        uint64_t v200 = v199;
        operator delete(v199);
      }
      if (v197)
      {
        unsigned int v198 = v197;
        operator delete(v197);
      }
      if (*(void *)&v274[40])
      {
        uint64_t v275 = *(void *)&v274[40];
        operator delete(*(void **)&v274[40]);
      }
      if (*(void *)&v274[8])
      {
        *(void *)&v274[16] = *(void *)&v274[8];
        operator delete(*(void **)&v274[8]);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649590, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649590))
    {
      sub_7258C((uint64_t)&unk_649558, 1835216946, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)&v204);
      __cxa_guard_release(&qword_649590);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6495D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_6495D0))
    {
      sub_7258C((uint64_t)&unk_649598, 1835216947, 1835229803, 0, 1970303090, 1650549611, (uint64_t *)&v201);
      __cxa_guard_release(&qword_6495D0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649610, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649610))
    {
      sub_7245C((uint64_t)v274, (uint64_t)&v227);
      sub_724F8(&v196, (uint64_t)v274, 1uLL);
      sub_72890((uint64_t)&unk_6495D8, 1634495520, 1835229548, 1, (uint64_t *)&v196);
      v273 = &v196;
      sub_72620((void ***)&v273);
      sub_726A4(v274);
      __cxa_guard_release(&qword_649610);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649650, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649650))
    {
      sub_7245C((uint64_t)v274, (uint64_t)&v217);
      sub_724F8(&v196, (uint64_t)v274, 1uLL);
      sub_72890((uint64_t)&unk_649618, 1668112945, 1835229548, 2, (uint64_t *)&v196);
      v273 = &v196;
      sub_72620((void ***)&v273);
      sub_726A4(v274);
      __cxa_guard_release(&qword_649650);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649690, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649690))
    {
      sub_7245C((uint64_t)v274, (uint64_t)&v212);
      sub_724F8(&v196, (uint64_t)v274, 1uLL);
      sub_72890((uint64_t)&unk_649658, 1668112946, 1835229548, 2, (uint64_t *)&v196);
      v273 = &v196;
      sub_72620((void ***)&v273);
      sub_726A4(v274);
      __cxa_guard_release(&qword_649690);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6496D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_6496D0))
    {
      sub_7245C((uint64_t)v274, (uint64_t)&v207);
      sub_724F8(&v196, (uint64_t)v274, 1uLL);
      sub_72890((uint64_t)&unk_649698, 1668112947, 1835229548, 2, (uint64_t *)&v196);
      v273 = &v196;
      sub_72620((void ***)&v273);
      sub_726A4(v274);
      __cxa_guard_release(&qword_6496D0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649710, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649710))
    {
      sub_7245C((uint64_t)v274, (uint64_t)&v222);
      sub_724F8(&v196, (uint64_t)v274, 1uLL);
      sub_72890((uint64_t)&unk_6496D8, 1870033508, 1735291491, 2, (uint64_t *)&v196);
      v273 = &v196;
      sub_72620((void ***)&v273);
      sub_726A4(v274);
      __cxa_guard_release(&qword_649710);
    }
    uint64_t v12 = qword_649420;
    if (qword_649420 >= (unint64_t)qword_649428)
    {
      uint64_t v14 = (qword_649420 - qword_649418) >> 3;
      if ((unint64_t)(v14 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v15 = (qword_649428 - qword_649418) >> 2;
      if (v15 <= v14 + 1) {
        unint64_t v15 = v14 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        unint64_t v16 = (unint64_t)sub_106EC(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint8x8_t v18 = (void *)(v16 + 8 * v14);
      uint64_t v19 = v16 + 8 * v17;
      void *v18 = &unk_6494D8;
      unint64_t v13 = v18 + 1;
      uint64_t v21 = qword_649418;
      uint8x8_t v20 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *--uint8x8_t v18 = v22;
        }
        while (v20 != (char *)v21);
        uint8x8_t v20 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v18;
      qword_649420 = (uint64_t)v13;
      qword_649428 = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)qword_649420 = &unk_6494D8;
      unint64_t v13 = (void *)(v12 + 8);
    }
    qword_649420 = (uint64_t)v13;
    if ((unint64_t)v13 >= qword_649428)
    {
      uint64_t v24 = ((uint64_t)v13 - qword_649418) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v25 = (qword_649428 - qword_649418) >> 2;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)sub_106EC(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      BOOL v28 = (void *)(v26 + 8 * v24);
      uint64_t v29 = v26 + 8 * v27;
      *BOOL v28 = &unk_649518;
      unint64_t v23 = v28 + 1;
      uint64_t v31 = qword_649418;
      char v30 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v32 = *((void *)v30 - 1);
          v30 -= 8;
          *--BOOL v28 = v32;
        }
        while (v30 != (char *)v31);
        char v30 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v28;
      qword_649420 = (uint64_t)v23;
      qword_649428 = v29;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *unint64_t v13 = &unk_649518;
      unint64_t v23 = v13 + 1;
    }
    qword_649420 = (uint64_t)v23;
    if ((unint64_t)v23 >= qword_649428)
    {
      uint64_t v34 = ((uint64_t)v23 - qword_649418) >> 3;
      if ((unint64_t)(v34 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v35 = (qword_649428 - qword_649418) >> 2;
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36) {
        unint64_t v36 = (unint64_t)sub_106EC(v36);
      }
      else {
        uint64_t v37 = 0;
      }
      __int16 v38 = (void *)(v36 + 8 * v34);
      uint64_t v39 = v36 + 8 * v37;
      void *v38 = &unk_649558;
      BOOL v33 = v38 + 1;
      uint64_t v41 = qword_649418;
      __int16 v40 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v42 = *((void *)v40 - 1);
          v40 -= 8;
          *--__int16 v38 = v42;
        }
        while (v40 != (char *)v41);
        __int16 v40 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v38;
      qword_649420 = (uint64_t)v33;
      qword_649428 = v39;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *unint64_t v23 = &unk_649558;
      BOOL v33 = v23 + 1;
    }
    qword_649420 = (uint64_t)v33;
    if ((unint64_t)v33 >= qword_649428)
    {
      uint64_t v44 = ((uint64_t)v33 - qword_649418) >> 3;
      if ((unint64_t)(v44 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v45 = (qword_649428 - qword_649418) >> 2;
      if (v45 <= v44 + 1) {
        unint64_t v45 = v44 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46) {
        unint64_t v46 = (unint64_t)sub_106EC(v46);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = (void *)(v46 + 8 * v44);
      uint64_t v49 = v46 + 8 * v47;
      void *v48 = &unk_649598;
      BOOL v43 = v48 + 1;
      uint64_t v51 = qword_649418;
      unint64_t v50 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v52 = *((void *)v50 - 1);
          v50 -= 8;
          *--uint64_t v48 = v52;
        }
        while (v50 != (char *)v51);
        unint64_t v50 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v48;
      qword_649420 = (uint64_t)v43;
      qword_649428 = v49;
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      *BOOL v33 = &unk_649598;
      BOOL v43 = v33 + 1;
    }
    qword_649420 = (uint64_t)v43;
    if ((unint64_t)v43 >= qword_649428)
    {
      uint64_t v54 = ((uint64_t)v43 - qword_649418) >> 3;
      if ((unint64_t)(v54 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v55 = (qword_649428 - qword_649418) >> 2;
      if (v55 <= v54 + 1) {
        unint64_t v55 = v54 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v55;
      }
      if (v56) {
        unint64_t v56 = (unint64_t)sub_106EC(v56);
      }
      else {
        uint64_t v57 = 0;
      }
      uint64_t v58 = (void *)(v56 + 8 * v54);
      uint64_t v59 = v56 + 8 * v57;
      void *v58 = &unk_6495D8;
      unint64_t v53 = v58 + 1;
      uint64_t v61 = qword_649418;
      uint64_t v60 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v62 = *((void *)v60 - 1);
          v60 -= 8;
          *--uint64_t v58 = v62;
        }
        while (v60 != (char *)v61);
        uint64_t v60 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v58;
      qword_649420 = (uint64_t)v53;
      qword_649428 = v59;
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *BOOL v43 = &unk_6495D8;
      unint64_t v53 = v43 + 1;
    }
    qword_649420 = (uint64_t)v53;
    if ((unint64_t)v53 >= qword_649428)
    {
      uint64_t v64 = ((uint64_t)v53 - qword_649418) >> 3;
      if ((unint64_t)(v64 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v65 = (qword_649428 - qword_649418) >> 2;
      if (v65 <= v64 + 1) {
        unint64_t v65 = v64 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66) {
        unint64_t v66 = (unint64_t)sub_106EC(v66);
      }
      else {
        uint64_t v67 = 0;
      }
      uint64_t v68 = (void *)(v66 + 8 * v64);
      uint64_t v69 = v66 + 8 * v67;
      *uint64_t v68 = &unk_649618;
      unint64_t v63 = v68 + 1;
      uint64_t v71 = qword_649418;
      uint64_t v70 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v72 = *((void *)v70 - 1);
          v70 -= 8;
          *--uint64_t v68 = v72;
        }
        while (v70 != (char *)v71);
        uint64_t v70 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v68;
      qword_649420 = (uint64_t)v63;
      qword_649428 = v69;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      *unint64_t v53 = &unk_649618;
      unint64_t v63 = v53 + 1;
    }
    qword_649420 = (uint64_t)v63;
    if ((unint64_t)v63 >= qword_649428)
    {
      uint64_t v74 = ((uint64_t)v63 - qword_649418) >> 3;
      if ((unint64_t)(v74 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v75 = (qword_649428 - qword_649418) >> 2;
      if (v75 <= v74 + 1) {
        unint64_t v75 = v74 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v76 = v75;
      }
      if (v76) {
        unint64_t v76 = (unint64_t)sub_106EC(v76);
      }
      else {
        uint64_t v77 = 0;
      }
      unint64_t v78 = (void *)(v76 + 8 * v74);
      uint64_t v79 = v76 + 8 * v77;
      *unint64_t v78 = &unk_649658;
      uint64_t v73 = v78 + 1;
      uint64_t v81 = qword_649418;
      unint64_t v80 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v82 = *((void *)v80 - 1);
          v80 -= 8;
          *--unint64_t v78 = v82;
        }
        while (v80 != (char *)v81);
        unint64_t v80 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v78;
      qword_649420 = (uint64_t)v73;
      qword_649428 = v79;
      if (v80) {
        operator delete(v80);
      }
    }
    else
    {
      *unint64_t v63 = &unk_649658;
      uint64_t v73 = v63 + 1;
    }
    qword_649420 = (uint64_t)v73;
    if ((unint64_t)v73 >= qword_649428)
    {
      uint64_t v84 = ((uint64_t)v73 - qword_649418) >> 3;
      if ((unint64_t)(v84 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v85 = (qword_649428 - qword_649418) >> 2;
      if (v85 <= v84 + 1) {
        unint64_t v85 = v84 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v85;
      }
      if (v86) {
        unint64_t v86 = (unint64_t)sub_106EC(v86);
      }
      else {
        uint64_t v87 = 0;
      }
      unint64_t v88 = (void *)(v86 + 8 * v84);
      uint64_t v89 = v86 + 8 * v87;
      *unint64_t v88 = &unk_649698;
      uint64_t v83 = v88 + 1;
      uint64_t v91 = qword_649418;
      __int16 v90 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v92 = *((void *)v90 - 1);
          v90 -= 8;
          *--unint64_t v88 = v92;
        }
        while (v90 != (char *)v91);
        __int16 v90 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v88;
      qword_649420 = (uint64_t)v83;
      qword_649428 = v89;
      if (v90) {
        operator delete(v90);
      }
    }
    else
    {
      *uint64_t v73 = &unk_649698;
      uint64_t v83 = v73 + 1;
    }
    qword_649420 = (uint64_t)v83;
    if ((unint64_t)v83 >= qword_649428)
    {
      uint64_t v94 = ((uint64_t)v83 - qword_649418) >> 3;
      if ((unint64_t)(v94 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v95 = (qword_649428 - qword_649418) >> 2;
      if (v95 <= v94 + 1) {
        unint64_t v95 = v94 + 1;
      }
      if ((unint64_t)(qword_649428 - qword_649418) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v96 = v95;
      }
      if (v96) {
        unint64_t v96 = (unint64_t)sub_106EC(v96);
      }
      else {
        uint64_t v97 = 0;
      }
      unint64_t v98 = (void *)(v96 + 8 * v94);
      uint64_t v99 = v96 + 8 * v97;
      *unint64_t v98 = &unk_6496D8;
      uint64_t v93 = (uint64_t)(v98 + 1);
      uint64_t v101 = qword_649418;
      CFDictionaryRef v100 = (char *)qword_649420;
      if (qword_649420 != qword_649418)
      {
        do
        {
          uint64_t v102 = *((void *)v100 - 1);
          v100 -= 8;
          *--unint64_t v98 = v102;
        }
        while (v100 != (char *)v101);
        CFDictionaryRef v100 = (char *)qword_649418;
      }
      qword_649418 = (uint64_t)v98;
      qword_649420 = v93;
      qword_649428 = v99;
      if (v100) {
        operator delete(v100);
      }
    }
    else
    {
      *uint64_t v83 = &unk_6496D8;
      uint64_t v93 = (uint64_t)(v83 + 1);
    }
    qword_649420 = v93;
    qword_649430 = (uint64_t)&unk_6494D8;
    sub_6720C(byte_649488, v269, (uint64_t)v270, (v270 - v269) >> 2);
    sub_6720C((char *)qword_6494A0, (char *)v245, (uint64_t)p_info, ((char *)p_info - (char *)v245) >> 2);
    sub_6720C((char *)&qword_6494A8[2], (char *)qword_6494A0[0], qword_6494A8[0], (qword_6494A8[0] - qword_6494A0[0]) >> 2);
    *(void *)int v274 = &v201;
    sub_72620((void ***)v274);
    *(void *)int v274 = &v204;
    sub_72620((void ***)v274);
    if (v210)
    {
      char v211 = v210;
      operator delete(v210);
    }
    if (v208)
    {
      std::string::size_type v209 = v208;
      operator delete(v208);
    }
    if (v215)
    {
      uint64_t v216 = v215;
      operator delete(v215);
    }
    if (v213)
    {
      unsigned int v214 = v213;
      operator delete(v213);
    }
    if (v220)
    {
      char v221 = v220;
      operator delete(v220);
    }
    if (v218)
    {
      uint64_t v219 = v218;
      operator delete(v218);
    }
    if (v225)
    {
      int v226 = v225;
      operator delete(v225);
    }
    if (v223)
    {
      int v224 = v223;
      operator delete(v223);
    }
    if (v230)
    {
      int v231 = v230;
      operator delete(v230);
    }
    if (v228)
    {
      uint64_t v229 = v228;
      operator delete(v228);
    }
    if (v236)
    {
      id v237 = v236;
      operator delete(v236);
    }
    if (v233)
    {
      UInt32 v234 = v233;
      operator delete(v233);
    }
    if (v242)
    {
      long long v243 = v242;
      operator delete(v242);
    }
    if (v239)
    {
      UInt32 v240 = v239;
      operator delete(v239);
    }
    if (v294)
    {
      int v295 = v294;
      operator delete(v294);
    }
    if (inAddress_8)
    {
      int v292 = inAddress_8;
      operator delete(inAddress_8);
    }
    if (v248)
    {
      int v249 = v248;
      operator delete(v248);
    }
    if (v245)
    {
      p_info = v245;
      operator delete(v245);
    }
    if (v254)
    {
      int v255 = v254;
      operator delete(v254);
    }
    if (v251)
    {
      int v252 = v251;
      operator delete(v251);
    }
    if (v259)
    {
      int v260 = v259;
      operator delete(v259);
    }
    if (v257)
    {
      UInt32 v258 = v257;
      operator delete(v257);
    }
    if (v299)
    {
      int v300 = v299;
      operator delete(v299);
    }
    if (v297)
    {
      int v298 = v297;
      operator delete(v297);
    }
    if (v261[0]) {
      operator delete(v261[0]);
    }
    if (v262[0]) {
      operator delete(v262[0]);
    }
    if (v263[0]) {
      operator delete(v263[0]);
    }
  }
  if (qword_649458 == qword_649460)
  {
    UInt32 v222 = 0;
    uint64_t inAddress = 0x676C6F6272647623;
    LODWORD(inAddress_8) = 0;
    uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(1u, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &v222);
    unsigned int v104 = PropertyDataSize;
    if (PropertyDataSize)
    {
      int v184 = (os_log_t *)sub_32A48(13);
      CFArrayRef v185 = *v184;
      if (*v184 && os_log_type_enabled(*v184, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&v296, (unsigned int *)&inAddress);
        int v186 = SHIBYTE(v298);
        int v187 = v296;
        sub_2417C(&v256, v104);
        int v188 = (void **)&v296;
        if (v186 < 0) {
          int v188 = v187;
        }
        if (SHIBYTE(v258) >= 0) {
          char v189 = (void **)&v256;
        }
        else {
          char v189 = v256;
        }
        *(_DWORD *)int v274 = 136316162;
        *(void *)&v274[4] = "DeviceSettings_D20Family.cpp";
        *(_WORD *)&v274[12] = 1024;
        *(_DWORD *)&v274[14] = 165;
        *(_WORD *)&v274[18] = 2080;
        *(void *)&v274[20] = v188;
        *(_WORD *)&v274[28] = 2080;
        *(void *)&v274[30] = v189;
        *(_WORD *)&v274[38] = 1024;
        *(_DWORD *)&v274[40] = v104;
        _os_log_impl(&def_1E50E8, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"AudioObjectGetPropertyDataSize(%s) returned error %s (%d).\"", v274, 0x2Cu);
        if (SHIBYTE(v258) < 0) {
          operator delete(v256);
        }
        if (SHIBYTE(v298) < 0) {
          operator delete(v296);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v104;
    }
    UInt32 v105 = v222;
    unint64_t v106 = (unint64_t)v222 >> 2;
    __chkstk_darwin(PropertyDataSize);
    uint64_t v108 = (int *)((char *)v194 - ((v107 + 15) & 0x1FFFFFFF0));
    OSStatus PropertyData = AudioObjectGetPropertyData(1u, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &v222, v108);
    v194[1] = v194;
    if (PropertyData)
    {
      int v191 = (os_log_t *)sub_32A48(13);
      double v192 = *v191;
      if (*v191 && os_log_type_enabled(*v191, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v274 = 136315394;
        *(void *)&v274[4] = "DeviceSettings_D20Family.cpp";
        *(_WORD *)&v274[12] = 1024;
        *(_DWORD *)&v274[14] = 171;
        _os_log_impl(&def_1E50E8, v192, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"failed to read current device list\"", v274, 0x12u);
      }
      char v193 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v193 = &off_6414D8;
      v193[2] = PropertyData;
    }
    if (v105 >= 4)
    {
      if (v106 <= 1) {
        uint64_t v111 = 1;
      }
      else {
        uint64_t v111 = v106;
      }
      *(void *)&long long v110 = 136316418;
      long long v195 = v110;
      while (1)
      {
        CFStringRef v227 = 0;
        UInt32 v217 = 8;
        uint64_t v238 = 0x676C6F6275696420;
        LODWORD(v239) = 0;
        OSStatus v112 = AudioObjectGetPropertyData(*v108, (const AudioObjectPropertyAddress *)&v238, 0, 0, &v217, &v227);
        CFStringRef v244 = v227;
        LOBYTE(v245) = 1;
        if (v112) {
          BOOL v113 = 0;
        }
        else {
          BOOL v113 = v217 == 8;
        }
        if (!v113 || v227 == 0)
        {
          std::string::size_type v115 = (os_log_t *)sub_32A48(20);
          uint64_t v116 = *v115;
          if (*v115)
          {
            if (os_log_type_enabled(*v115, OS_LOG_TYPE_DEBUG))
            {
              int v117 = *v108;
              *(_DWORD *)int v274 = v195;
              *(void *)&v274[4] = "DeviceSettings_D20Family.cpp";
              *(_WORD *)&v274[12] = 1024;
              *(_DWORD *)&v274[14] = 185;
              *(_WORD *)&v274[18] = 1024;
              *(_DWORD *)&v274[20] = v117;
              *(_WORD *)&v274[24] = 1024;
              *(_DWORD *)&v274[26] = v112;
              *(_WORD *)&v274[30] = 1024;
              *(_DWORD *)&v274[32] = v222;
              *(_WORD *)&v274[36] = 2048;
              *(void *)&v274[38] = v227;
              _os_log_impl(&def_1E50E8, v116, OS_LOG_TYPE_DEBUG, "%25s:%-5d failed to read device UID for device %u (status = %d, propSize = %u, uid = %p)", v274, 0x2Eu);
            }
          }
        }
        if (v227 && CFEqual(v227, @"Codec")) {
          break;
        }
        sub_72924((uint64_t)&v244);
        ++v108;
        if (!--v111) {
          goto LABEL_289;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649728, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_649728))
      {
        qword_649718 = 0x7074727545616E63;
        dword_649720 = 0;
        __cxa_guard_release(&qword_649728);
      }
      if (AudioObjectHasProperty(*v108, (const AudioObjectPropertyAddress *)&qword_649718))
      {
        qmemcpy(v274, "0dap1dapcimicimscimfmCNAMCNApCNA", 32);
        sub_72300(&v256, (__int32 *)v274, 8);
        sub_72424((uint64_t)v274, 1633775203, (uint64_t)&v256);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649768, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_649768))
        {
          sub_7245C((uint64_t)&v296, (uint64_t)v274);
          sub_724F8(&v250, (uint64_t)&v296, 1uLL);
          sub_72890((uint64_t)&unk_649730, 1633775203, 1735291491, 1, (uint64_t *)&v250);
          int v232 = (void **)&v250;
          sub_72620(&v232);
          sub_726A4(&v296);
          __cxa_guard_release(&qword_649768);
        }
        uint64_t v118 = qword_649460;
        if (qword_649460 >= (unint64_t)qword_649468)
        {
          uint64_t v120 = (qword_649460 - qword_649458) >> 3;
          if ((unint64_t)(v120 + 1) >> 61) {
            sub_60548();
          }
          unint64_t v121 = (qword_649468 - qword_649458) >> 2;
          if (v121 <= v120 + 1) {
            unint64_t v121 = v120 + 1;
          }
          if ((unint64_t)(qword_649468 - qword_649458) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v121;
          }
          if (v122) {
            unint64_t v122 = (unint64_t)sub_106EC(v122);
          }
          else {
            uint64_t v123 = 0;
          }
          int v124 = (void *)(v122 + 8 * v120);
          uint64_t v125 = v122 + 8 * v123;
          *int v124 = &unk_649730;
          uint64_t v119 = (uint64_t)(v124 + 1);
          uint64_t v127 = qword_649458;
          uint64_t v126 = (char *)qword_649460;
          if (qword_649460 != qword_649458)
          {
            do
            {
              uint64_t v128 = *((void *)v126 - 1);
              v126 -= 8;
              *--int v124 = v128;
            }
            while (v126 != (char *)v127);
            uint64_t v126 = (char *)qword_649458;
          }
          qword_649458 = (uint64_t)v124;
          qword_649460 = v119;
          qword_649468 = v125;
          if (v126) {
            operator delete(v126);
          }
        }
        else
        {
          *(void *)qword_649460 = &unk_649730;
          uint64_t v119 = v118 + 8;
        }
        qword_649460 = v119;
        if (*(void *)&v274[40])
        {
          uint64_t v275 = *(void *)&v274[40];
          operator delete(*(void **)&v274[40]);
        }
        if (*(void *)&v274[8])
        {
          *(void *)&v274[16] = *(void *)&v274[8];
          operator delete(*(void **)&v274[8]);
        }
        if (v256)
        {
          int v257 = v256;
          operator delete(v256);
        }
      }
      sub_72924((uint64_t)&v244);
    }
  }
LABEL_289:
  if (qword_649438 == qword_649440)
  {
    CFDictionaryRef v129 = (void **)operator new(8uLL);
    *CFDictionaryRef v129 = (void *)0x726D76637670766FLL;
    unsigned int v297 = v129 + 1;
    int v298 = v129 + 1;
    v296 = v129;
    sub_72384((uint64_t)v274, 1634495520, (uint64_t)&v269, 1935827812, 1, (uint64_t)&v296);
    operator delete(v129);
    AudioObjectID v130 = (void **)operator new(8uLL);
    *AudioObjectID v130 = (void *)0x726D76637670766FLL;
    UInt32 v258 = v130 + 1;
    int v256 = v130;
    int v257 = v130 + 1;
    sub_72384((uint64_t)&v296, 1634495520, (uint64_t)&v269, 1668441188, 0, (uint64_t)&v256);
    operator delete(v130);
    CFStringRef v131 = operator new(8uLL);
    *CFStringRef v131 = 0x726D76637670766FLL;
    int v252 = v131 + 1;
    int v250 = v131;
    char v251 = v131 + 1;
    sub_72384((uint64_t)&v256, 1668112945, (uint64_t)v266, 1852796517, -1, (uint64_t)&v250);
    operator delete(v131);
    char v132 = (__CFString *)operator new(8uLL);
    v132->isa = (void *)0x726D76637670766FLL;
    p_info = &v132->info;
    CFStringRef v244 = v132;
    v245 = &v132->info;
    sub_72384((uint64_t)&v250, 1634495520, (uint64_t)&unk_649470, 1852796517, -1, (uint64_t)&v244);
    operator delete(v132);
    uint64_t inAddress = 0;
    CFTypeRef inAddress_8 = 0;
    int v292 = 0;
    sub_72384((uint64_t)&v244, 1870033508, (uint64_t)&unk_649470, 1852796517, -1, (uint64_t)&inAddress);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6497A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_6497A8))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v296);
      sub_724F8(&v238, (uint64_t)&inAddress, 1uLL);
      sub_7258C((uint64_t)&unk_649770, 1835216946, 1835230834, 0, 1970303090, 1718775412, &v238);
      int v232 = (void **)&v238;
      sub_72620(&v232);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_6497A8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6497E8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_6497E8))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)v274);
      sub_724F8(&v238, (uint64_t)&inAddress, 1uLL);
      sub_7258C((uint64_t)&unk_6497B0, 1835216947, 1835229803, 0, 1970303090, 1650549611, &v238);
      int v232 = (void **)&v238;
      sub_72620(&v232);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_6497E8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649828, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649828))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v256);
      sub_724F8(&v238, (uint64_t)&inAddress, 1uLL);
      sub_72890((uint64_t)&unk_6497F0, 1668112945, 1835229548, 2, &v238);
      int v232 = (void **)&v238;
      sub_72620(&v232);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_649828);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649868, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649868))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v250);
      sub_724F8(&v238, (uint64_t)&inAddress, 1uLL);
      sub_72890((uint64_t)&unk_649830, 1634495520, 1835229548, 2, &v238);
      int v232 = (void **)&v238;
      sub_72620(&v232);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_649868);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6498A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_6498A8))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v244);
      sub_724F8(&v238, (uint64_t)&inAddress, 1uLL);
      sub_72890((uint64_t)&unk_649870, 1870033508, 1735291491, 2, &v238);
      int v232 = (void **)&v238;
      sub_72620(&v232);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_6498A8);
    }
    uint64_t v133 = qword_649440;
    if (qword_649440 >= (unint64_t)qword_649448)
    {
      uint64_t v135 = (qword_649440 - qword_649438) >> 3;
      if ((unint64_t)(v135 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v136 = (qword_649448 - qword_649438) >> 2;
      if (v136 <= v135 + 1) {
        unint64_t v136 = v135 + 1;
      }
      if ((unint64_t)(qword_649448 - qword_649438) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v137 = v136;
      }
      if (v137) {
        unint64_t v137 = (unint64_t)sub_106EC(v137);
      }
      else {
        uint64_t v138 = 0;
      }
      CFMutableDictionaryRef v139 = (void *)(v137 + 8 * v135);
      uint64_t v140 = v137 + 8 * v138;
      *CFMutableDictionaryRef v139 = &unk_649770;
      CFTypeRef v134 = v139 + 1;
      uint64_t v142 = qword_649438;
      int v141 = (char *)qword_649440;
      if (qword_649440 != qword_649438)
      {
        do
        {
          uint64_t v143 = *((void *)v141 - 1);
          v141 -= 8;
          *--CFMutableDictionaryRef v139 = v143;
        }
        while (v141 != (char *)v142);
        int v141 = (char *)qword_649438;
      }
      qword_649438 = (uint64_t)v139;
      qword_649440 = (uint64_t)v134;
      qword_649448 = v140;
      if (v141) {
        operator delete(v141);
      }
    }
    else
    {
      *(void *)qword_649440 = &unk_649770;
      CFTypeRef v134 = (void *)(v133 + 8);
    }
    qword_649440 = (uint64_t)v134;
    if ((unint64_t)v134 >= qword_649448)
    {
      uint64_t v145 = ((uint64_t)v134 - qword_649438) >> 3;
      if ((unint64_t)(v145 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v146 = (qword_649448 - qword_649438) >> 2;
      if (v146 <= v145 + 1) {
        unint64_t v146 = v145 + 1;
      }
      if ((unint64_t)(qword_649448 - qword_649438) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v147 = v146;
      }
      if (v147) {
        unint64_t v147 = (unint64_t)sub_106EC(v147);
      }
      else {
        uint64_t v148 = 0;
      }
      UInt32 v149 = (void *)(v147 + 8 * v145);
      uint64_t v150 = v147 + 8 * v148;
      *UInt32 v149 = &unk_6497B0;
      uint64_t v144 = v149 + 1;
      uint64_t v152 = qword_649438;
      int v151 = (char *)qword_649440;
      if (qword_649440 != qword_649438)
      {
        do
        {
          uint64_t v153 = *((void *)v151 - 1);
          v151 -= 8;
          *--UInt32 v149 = v153;
        }
        while (v151 != (char *)v152);
        int v151 = (char *)qword_649438;
      }
      qword_649438 = (uint64_t)v149;
      qword_649440 = (uint64_t)v144;
      qword_649448 = v150;
      if (v151) {
        operator delete(v151);
      }
    }
    else
    {
      *CFTypeRef v134 = &unk_6497B0;
      uint64_t v144 = v134 + 1;
    }
    qword_649440 = (uint64_t)v144;
    if ((unint64_t)v144 >= qword_649448)
    {
      uint64_t v155 = ((uint64_t)v144 - qword_649438) >> 3;
      if ((unint64_t)(v155 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v156 = (qword_649448 - qword_649438) >> 2;
      if (v156 <= v155 + 1) {
        unint64_t v156 = v155 + 1;
      }
      if ((unint64_t)(qword_649448 - qword_649438) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v157 = v156;
      }
      if (v157) {
        unint64_t v157 = (unint64_t)sub_106EC(v157);
      }
      else {
        uint64_t v158 = 0;
      }
      CFDictionaryRef v159 = (void *)(v157 + 8 * v155);
      uint64_t v160 = v157 + 8 * v158;
      *CFDictionaryRef v159 = &unk_6497F0;
      int v154 = v159 + 1;
      uint64_t v162 = qword_649438;
      UInt32 v161 = (char *)qword_649440;
      if (qword_649440 != qword_649438)
      {
        do
        {
          uint64_t v163 = *((void *)v161 - 1);
          v161 -= 8;
          *--CFDictionaryRef v159 = v163;
        }
        while (v161 != (char *)v162);
        UInt32 v161 = (char *)qword_649438;
      }
      qword_649438 = (uint64_t)v159;
      qword_649440 = (uint64_t)v154;
      qword_649448 = v160;
      if (v161) {
        operator delete(v161);
      }
    }
    else
    {
      *uint64_t v144 = &unk_6497F0;
      int v154 = v144 + 1;
    }
    qword_649440 = (uint64_t)v154;
    if ((unint64_t)v154 >= qword_649448)
    {
      uint64_t v165 = ((uint64_t)v154 - qword_649438) >> 3;
      if ((unint64_t)(v165 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v166 = (qword_649448 - qword_649438) >> 2;
      if (v166 <= v165 + 1) {
        unint64_t v166 = v165 + 1;
      }
      if ((unint64_t)(qword_649448 - qword_649438) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v167 = v166;
      }
      if (v167) {
        unint64_t v167 = (unint64_t)sub_106EC(v167);
      }
      else {
        uint64_t v168 = 0;
      }
      uint64_t v169 = (void *)(v167 + 8 * v165);
      uint64_t v170 = v167 + 8 * v168;
      *uint64_t v169 = &unk_649830;
      int v164 = v169 + 1;
      uint64_t v172 = qword_649438;
      char v171 = (char *)qword_649440;
      if (qword_649440 != qword_649438)
      {
        do
        {
          uint64_t v173 = *((void *)v171 - 1);
          v171 -= 8;
          *--uint64_t v169 = v173;
        }
        while (v171 != (char *)v172);
        char v171 = (char *)qword_649438;
      }
      qword_649438 = (uint64_t)v169;
      qword_649440 = (uint64_t)v164;
      qword_649448 = v170;
      if (v171) {
        operator delete(v171);
      }
    }
    else
    {
      *int v154 = &unk_649830;
      int v164 = v154 + 1;
    }
    qword_649440 = (uint64_t)v164;
    if ((unint64_t)v164 >= qword_649448)
    {
      uint64_t v175 = ((uint64_t)v164 - qword_649438) >> 3;
      if ((unint64_t)(v175 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v176 = (qword_649448 - qword_649438) >> 2;
      if (v176 <= v175 + 1) {
        unint64_t v176 = v175 + 1;
      }
      if ((unint64_t)(qword_649448 - qword_649438) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v177 = v176;
      }
      if (v177) {
        unint64_t v177 = (unint64_t)sub_106EC(v177);
      }
      else {
        uint64_t v178 = 0;
      }
      uint64_t v179 = (void *)(v177 + 8 * v175);
      uint64_t v180 = v177 + 8 * v178;
      *uint64_t v179 = &unk_649870;
      uint64_t v174 = (uint64_t)(v179 + 1);
      uint64_t v182 = qword_649438;
      char v181 = (char *)qword_649440;
      if (qword_649440 != qword_649438)
      {
        do
        {
          uint64_t v183 = *((void *)v181 - 1);
          v181 -= 8;
          *--uint64_t v179 = v183;
        }
        while (v181 != (char *)v182);
        char v181 = (char *)qword_649438;
      }
      qword_649438 = (uint64_t)v179;
      qword_649440 = v174;
      qword_649448 = v180;
      if (v181) {
        operator delete(v181);
      }
    }
    else
    {
      void *v164 = &unk_649870;
      uint64_t v174 = (uint64_t)(v164 + 1);
    }
    qword_649440 = v174;
    qword_649450 = (uint64_t)&unk_649770;
    if (v248)
    {
      int v249 = v248;
      operator delete(v248);
    }
    if (v245)
    {
      p_info = v245;
      operator delete(v245);
    }
    if (v254)
    {
      int v255 = v254;
      operator delete(v254);
    }
    if (v251)
    {
      int v252 = v251;
      operator delete(v251);
    }
    if (v259)
    {
      int v260 = v259;
      operator delete(v259);
    }
    if (v257)
    {
      UInt32 v258 = v257;
      operator delete(v257);
    }
    if (v299)
    {
      int v300 = v299;
      operator delete(v299);
    }
    if (v297)
    {
      int v298 = v297;
      operator delete(v297);
    }
    if (*(void *)&v274[40])
    {
      uint64_t v275 = *(void *)&v274[40];
      operator delete(*(void **)&v274[40]);
    }
    if (*(void *)&v274[8])
    {
      *(void *)&v274[16] = *(void *)&v274[8];
      operator delete(*(void **)&v274[8]);
    }
  }
  if (v264[0])
  {
    v264[1] = v264[0];
    operator delete(v264[0]);
  }
  if (v265[0])
  {
    v265[1] = v265[0];
    operator delete(v265[0]);
  }
  if (v266[0])
  {
    v266[1] = v266[0];
    operator delete(v266[0]);
  }
  if (v267[0])
  {
    v267[1] = v267[0];
    operator delete(v267[0]);
  }
  if (v268[0])
  {
    v268[1] = v268[0];
    operator delete(v268[0]);
  }
  if (v269)
  {
    unsigned int v270 = v269;
    operator delete(v269);
  }
  if (v271[0])
  {
    v271[1] = v271[0];
    operator delete(v271[0]);
  }
}

void sub_71B34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 464) = v2;
  sub_72620((void ***)(v1 + 464));
  sub_726A4((void *)(v3 - 184));
  __cxa_guard_abort(&qword_649768);
  sub_726A4((void *)(v1 + 1056));
  uint8x8_t v5 = *(void **)(v1 + 720);
  if (v5)
  {
    *(void *)(v1 + 728) = v5;
    operator delete(v5);
  }
  sub_72924(v1 + 592);
  unint64_t v6 = *(void **)(v1 + 856);
  if (v6)
  {
    *(void *)(v1 + 864) = v6;
    operator delete(v6);
  }
  float v7 = *(void **)(v1 + 880);
  if (v7)
  {
    *(void *)(v1 + 888) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(v1 + 904);
  if (v8)
  {
    *(void *)(v1 + 912) = v8;
    operator delete(v8);
  }
  BOOL v9 = *(void **)(v1 + 928);
  if (v9)
  {
    *(void *)(v1 + 936) = v9;
    operator delete(v9);
  }
  unint64_t v10 = *(void **)(v1 + 952);
  if (v10)
  {
    *(void *)(v1 + 960) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(v1 + 976);
  if (v11)
  {
    *(void *)(v1 + 984) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(v1 + 1000);
  if (v12)
  {
    *(void *)(v1 + 1008) = v12;
    operator delete(v12);
  }
  sub_72960((uint64_t)&qword_649418);
  _Unwind_Resume(a1);
}

void *sub_72300(void *a1, __int32 *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      __int32 v7 = *a2;
      sub_72D08((uint64_t)a1, &v7);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_72368(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_72384(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_46B38((void *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_46B38((void *)(a1 + 40), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  return a1;
}

void sub_72408(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_72424(uint64_t a1, int a2, uint64_t a3)
{
  memset(v4, 0, sizeof(v4));
  return sub_72384(a1, a2, a3, 1852796517, -1, (uint64_t)v4);
}

uint64_t sub_7245C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_46B38((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_46B38((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_724DC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_724F8(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_72A78(a1, a3);
    a1[1] = sub_726E8(a2, a2 + (a3 << 6), a1[1]);
  }
  return a1;
}

void sub_7256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_72620(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_7258C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t *a7)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(unsigned char *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = a6;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_729F4((void *)(a1 + 32), *a7, a7[1], (a7[1] - *a7) >> 6);
  sub_855DC(a1, *a7, a7[1]);
  return a1;
}

void sub_72608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_72620((void ***)va);
  _Unwind_Resume(a1);
}

void sub_72620(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_72CB0(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_726A4(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_726E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_72AF0(a3 + v6, a1 + v6);
      v6 += 64;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t sub_7277C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 6;
    if ((unint64_t)(v9 + 1) >> 58) {
      sub_60548();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint8x8_t v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_72AB8(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + (v9 << 6);
    unint64_t v17 = v12 + (v13 << 6);
    sub_72AF0(v15, a2);
    uint64_t v16 = v15 + 64;
    sub_72B8C(a1, &v14);
    uint64_t v8 = a1[1];
    uint64_t result = sub_72C60((uint64_t)&v14);
  }
  else
  {
    uint64_t result = sub_72AF0(a1[1], a2);
    uint64_t v8 = v6 + 64;
    a1[1] = v6 + 64;
  }
  a1[1] = v8;
  return result;
}

void sub_72870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_72890(uint64_t a1, int a2, int a3, int a4, uint64_t *a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_729F4((void *)(a1 + 32), *a5, a5[1], (a5[1] - *a5) >> 6);
  sub_855DC(a1, *a5, a5[1]);
  return a1;
}

void sub_7290C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_72620((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_72924(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_72960(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(void *)(a1 + 144) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 112);
  if (v4)
  {
    *(void *)(a1 + 120) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(void *)(a1 + 72) = v6;
    operator delete(v6);
  }
  __int32 v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(void *)(a1 + 40) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void *sub_729F4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_72A78(result, a4);
    uint64_t result = (void *)sub_726E8(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_72A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_72620(&a9);
  _Unwind_Resume(a1);
}

char *sub_72A78(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_60548();
  }
  uint64_t result = (char *)sub_72AB8(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_72AB8(unint64_t a1)
{
  if (a1 >> 58) {
    sub_60560();
  }
  return operator new(a1 << 6);
}

uint64_t sub_72AF0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_46B38((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_46B38((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_72B70(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_72B8C(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 64; ; i -= 64)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 64 == v5) {
      break;
    }
    uint64_t v9 = v4 + i - 128;
    uint64_t result = (uint64_t *)sub_72AF0(v8 - 128, v9);
  }
  uint64_t v10 = v8 - 64;
  a2[1] = v10;
  uint64_t v11 = *v3;
  *uint64_t v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_72C60(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    sub_72CB0((void *)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_72CB0(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_72D08(uint64_t a1, __int32 *a2)
{
  uint64_t v4 = *(__int32 **)(a1 + 8);
  uint64_t v5 = wmemchr(*(__int32 **)a1, *a2, ((uint64_t)v4 - *(void *)a1) >> 2);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  __int32 v7 = *(__int32 **)(a1 + 8);
  if (v6 == v7)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if ((unint64_t)v6 >= v8)
    {
      uint64_t v10 = *(__int32 **)a1;
      uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v15 = v12;
      }
      if (v15)
      {
        unint64_t v15 = (unint64_t)sub_46BF4(v15);
        uint64_t v10 = *(__int32 **)a1;
        uint64_t v6 = *(__int32 **)(a1 + 8);
      }
      else
      {
        uint64_t v16 = 0;
      }
      unint64_t v17 = (__int32 *)(v15 + 4 * v11);
      unint64_t v18 = v15 + 4 * v16;
      __int32 *v17 = *a2;
      uint64_t v9 = v17 + 1;
      while (v6 != v10)
      {
        __int32 v19 = *--v6;
        *--unint64_t v17 = v19;
      }
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v18;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *uint64_t v6 = *a2;
      uint64_t v9 = v6 + 1;
    }
    *(void *)(a1 + 8) = v9;
  }
}

void *sub_72E10(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = operator new(0x10uLL);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = v4 + 2;
  uint64_t v5 = a2[1];
  void *v4 = *a2;
  v4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a1[1] = v4 + 2;
  return a1;
}

void sub_72E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_72E94(void **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_31F498(result);
    operator delete();
  }
  return result;
}

void *sub_72EE8(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    sub_31F498(result);
    operator delete();
  }
  return result;
}

void sub_72F30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_72F6C(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_72FE0((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_72FE0(uint64_t a1)
{
  sub_73038(*(void **)(a1 + 88));
  sub_73038(*(void **)(a1 + 64));
  uint64_t v2 = (void **)(a1 + 32);
  sub_7308C(&v2);
  uint64_t v2 = (void **)(a1 + 8);
  sub_7308C(&v2);
}

void sub_73038(void *a1)
{
  if (a1)
  {
    sub_73038(*a1);
    sub_73038(a1[1]);
    sub_73110(a1 + 4);
    operator delete(a1);
  }
}

void sub_7308C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_8108(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_73110(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_73164(void *a1)
{
  uint64_t v2 = operator new(0x78uLL);
  void *v2 = 0;
  v2[1] = 0;
  sub_731B8(v2 + 2, a1);
  return v2;
}

void sub_731A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_731B8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_732A8(a1 + 1, a2[1], a2[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[2] - a2[1]) >> 3));
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_732A8(a1 + 4, a2[4], a2[5], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[5] - a2[4]) >> 3));
  sub_73370((uint64_t)(a1 + 7), a2 + 7);
  sub_73370((uint64_t)(a1 + 10), a2 + 10);
  return a1;
}

void sub_7326C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_73038(*(void **)(v2 + 64));
  sub_7308C((void ***)va);
  sub_7308C((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_732A8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_7373C(result, a4);
    uint64_t v7 = v6[1];
    if (a2 != a3)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t result = sub_3524((uint64_t *)(v7 + v8), (void *)(a2 + v8));
        v8 += 24;
      }
      while (a2 + v8 != a3);
      v7 += v8;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_73334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_73370(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      if (*(uint64_t **)a1 == v3) {
        break;
      }
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t *)v7[2];
          BOOL v9 = *v8 == (void)v7;
          uint64_t v7 = v8;
        }
        while (v9);
      }
      BOOL v10 = sub_73610((unint64_t *)v8 + 4, v5 + 4);
      uint64_t v6 = (uint64_t *)*v3;
      if (v10) {
        goto LABEL_17;
      }
      uint64_t v11 = (uint64_t **)v3;
      unint64_t v12 = (uint64_t **)v3;
      if (!v6) {
        goto LABEL_20;
      }
      unint64_t v12 = (uint64_t **)v3;
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (uint64_t **)v6;
          uint64_t v13 = (unint64_t *)(v6 + 4);
          if (!sub_73610(v5 + 4, (unint64_t *)v6 + 4)) {
            break;
          }
          uint64_t v6 = *v11;
          unint64_t v12 = v11;
          if (!*v11) {
            goto LABEL_20;
          }
        }
        if (!sub_73610(v13, v5 + 4)) {
          break;
        }
        unint64_t v12 = v11 + 1;
        uint64_t v6 = v11[1];
        if (!v6) {
          goto LABEL_20;
        }
      }
LABEL_19:
      if (!*v12)
      {
LABEL_20:
        sub_73518((uint64_t)v17, a1, (uint64_t)(v5 + 4));
        sub_46CA8((uint64_t **)a1, (uint64_t)v11, v12, v17[0]);
        v17[0] = 0;
        sub_735B8((uint64_t)v17);
      }
      BOOL v14 = (void *)v5[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (void *)v5[2];
          BOOL v9 = *v15 == (void)v5;
          uint64_t v5 = v15;
        }
        while (!v9);
      }
      uint64_t v5 = v15;
      if (v15 == v4) {
        return a1;
      }
    }
    uint64_t v8 = v3;
LABEL_17:
    uint64_t v11 = (uint64_t **)v3;
    unint64_t v12 = (uint64_t **)v3;
    if (!v6) {
      goto LABEL_20;
    }
    unint64_t v12 = (uint64_t **)(v8 + 1);
    uint64_t v11 = (uint64_t **)v8;
    goto LABEL_19;
  }
  return a1;
}

void sub_73504(_Unwind_Exception *a1)
{
  sub_73038(*v1);
  _Unwind_Resume(a1);
}

void *sub_73518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = *(void *)(a3 + 8);
  v6[4] = *(void *)a3;
  v6[5] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  v6[6] = 0;
  v6[7] = 0;
  v6[8] = 0;
  uint64_t result = sub_46B38(v6 + 6, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_73598(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_735B8(v1);
  _Unwind_Resume(a1);
}

void sub_735B8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_73110(v1 + 4);
    }
    operator delete(v1);
  }
}

BOOL sub_73610(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    uint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = *a1;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v5);
    }
    else
    {
      unint64_t v7 = 0;
    }
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    BOOL v9 = std::__shared_weak_count::lock(v8);
    BOOL v10 = v9;
    if (v9)
    {
      unint64_t v11 = *a2;
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v9);
      if (!v6)
      {
LABEL_16:
        unint64_t v7 = 0;
        unint64_t v12 = 0;
        if (!v10) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v11 = 0;
      if (!v6) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
    BOOL v10 = 0;
    if (!v6) {
      goto LABEL_16;
    }
  }
  unint64_t v12 = std::__shared_weak_count::lock(v6);
  if (!v12) {
    unint64_t v7 = 0;
  }
  if (!v10)
  {
LABEL_20:
    unint64_t v11 = 0;
    if (!v12) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v13 = std::__shared_weak_count::lock(v10);
  if (!v13) {
    goto LABEL_20;
  }
  sub_4636C(v13);
  if (v12) {
LABEL_21:
  }
    sub_4636C(v12);
LABEL_22:
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7 < v11;
}

char *sub_7373C(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_60548();
  }
  uint64_t v3 = 3 * a2;
  uint64_t result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

uint64_t sub_7378C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 768);
}

uint64_t *sub_73794@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_46A4C(a2, a1 + 216);
}

uint64_t sub_737A0()
{
  return 0;
}

uint64_t sub_737A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 636);
}

uint64_t sub_737B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 300);
}

void sub_737BC(uint64_t a1)
{
  sub_737F4(a1);

  operator delete();
}

uint64_t sub_737F4(uint64_t a1)
{
  *(void *)a1 = off_637180;
  sub_1216C((unsigned int **)(a1 + 896));
  sub_738D0((char *)(a1 + 872));
  if (*(void *)(a1 + 864))
  {
    uint64_t v2 = *(void **)(a1 + 856);
    uint64_t v3 = *(void *)(a1 + 848);
    uint64_t v4 = (void *)*v2;
    v4[1] = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *(void *)(a1 + 864) = 0;
    if (v2 != (void *)(a1 + 848))
    {
      do
      {
        uint64_t v5 = (void *)v2[1];
        sub_72E94((void **)v2 + 2);
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != (void *)(a1 + 848));
    }
  }
  uint64_t v6 = *(void **)(a1 + 824);
  if (v6)
  {
    *(void *)(a1 + 832) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)(a1 + 800);
  if (v7)
  {
    *(void *)(a1 + 808) = v7;
    operator delete(v7);
  }

  return sub_27D5B8((void *)a1);
}

void sub_738D0(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v3 + 1);
        sub_1216C((unsigned int **)v3 + 10);
        sub_1216C((unsigned int **)v3 + 8);
        uint64_t v6 = (void **)(v3 + 40);
        sub_121EC(&v6);
        uint64_t v6 = (void **)(v3 + 16);
        sub_121EC(&v6);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void *sub_73978(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_46BB4(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_739D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_739F0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_6E988(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_73A4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_73A68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_649990))
  {
    uint64_t v0 = 0x3F2666663EB33333;
    sub_73ADC((uint64_t)&v0);
    __cxa_guard_release(&qword_649990);
  }
}

float sub_73ADC(uint64_t a1)
{
  std::recursive_mutex::recursive_mutex(&stru_649910);
  xmmword_649950 = 0u;
  *(_OWORD *)&qword_649960 = 0u;
  dword_649970 = 1065353216;
  qword_649978 = 0;
  dword_649980 = 0;
  float v2 = *(float *)(a1 + 4);
  dword_649984 = *(_DWORD *)a1;
  unk_649988 = LODWORD(v2);
  float result = v2 - *(float *)&dword_649984;
  *(float *)&dword_64998C = v2 - *(float *)&dword_649984;
  return result;
}

void sub_73B3C(char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_73B98(uint64_t a1)
{
  if (dispatch_get_specific("VirtualAudioQueueKey") != "VirtualAudioQueueKey")
  {
    float v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControlEffortValueManager.cpp";
        __int16 v44 = 1024;
        int v45 = 111;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Must be called on the VirtualAudio queue!\"", buf, 0x12u);
      }
    }
  }
  float v4 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 104)));
  if (*(float *)(a1 + 120) <= v4)
  {
    atomic_store(0, (unsigned int *)(a1 + 112));
  }
  else
  {
    float v5 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 104)));
    float v6 = 1.0;
    float v7 = 1.0;
    if (*(float *)(a1 + 116) < v5)
    {
      float v8 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 104)));
      float v7 = 1.0 - (float)((float)(v8 - *(float *)(a1 + 116)) / *(float *)(a1 + 124));
    }
    float v9 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 108)));
    float v10 = v7 + v9;
    if (v10 <= 1.0) {
      float v6 = v10;
    }
    if (v10 < 0.0) {
      float v6 = 0.0;
    }
    atomic_store(LODWORD(v6), (unsigned int *)(a1 + 112));
  }
  __int16 v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  for (uint64_t i = *(void **)(a1 + 80); i; uint64_t i = (void *)*i)
  {
    unint64_t v12 = (std::__shared_weak_count *)i[4];
    if (v12)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v12);
      if (v13)
      {
        BOOL v14 = v13;
        uint64_t v15 = i[3];
        if (v15)
        {
          uint64_t v16 = v41;
          if (v41 >= v42)
          {
            unint64_t v18 = v40;
            uint64_t v19 = (v41 - v40) >> 4;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60) {
              sub_60548();
            }
            uint64_t v21 = v42 - v40;
            if ((v42 - v40) >> 3 > v20) {
              unint64_t v20 = v21 >> 3;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22 >> 60) {
              sub_60560();
            }
            unint64_t v23 = (char *)operator new(16 * v22);
            uint64_t v24 = &v23[16 * v19];
            *(void *)uint64_t v24 = v15;
            *((void *)v24 + 1) = v14;
            unint64_t v17 = v24 + 16;
            if (v16 == v18)
            {
              __int16 v40 = &v23[16 * v19];
              uint64_t v41 = v24 + 16;
              uint64_t v42 = &v23[16 * v22];
            }
            else
            {
              do
              {
                long long v25 = *((_OWORD *)v16 - 1);
                v16 -= 16;
                *((_OWORD *)v24 - 1) = v25;
                v24 -= 16;
                *(void *)uint64_t v16 = 0;
                *((void *)v16 + 1) = 0;
              }
              while (v16 != v18);
              uint64_t v16 = v40;
              unint64_t v26 = v41;
              __int16 v40 = v24;
              uint64_t v41 = v17;
              uint64_t v42 = &v23[16 * v22];
              while (v26 != v16)
              {
                uint64_t v27 = (std::__shared_weak_count *)*((void *)v26 - 1);
                if (v27) {
                  sub_4636C(v27);
                }
                v26 -= 16;
              }
            }
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(void *)uint64_t v41 = v15;
            *((void *)v16 + 1) = v13;
            unint64_t v17 = v16 + 16;
          }
          uint64_t v41 = v17;
        }
        else
        {
          sub_4636C(v13);
        }
      }
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  BOOL v28 = v40;
  for (uint64_t j = v41; v28 != j; v28 += 16)
  {
    char v30 = (os_log_t *)sub_32A48(24);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
    {
      float v32 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 112)));
      uint64_t v33 = *(void *)v28;
      if (*(char *)(*(void *)v28 + 735) < 0)
      {
        sub_21E8C(__p, *(void **)(v33 + 712), *(void *)(v33 + 720));
      }
      else
      {
        uint64_t v34 = v33 + 712;
        *(_OWORD *)std::string __p = *(_OWORD *)v34;
        uint64_t v39 = *(void *)(v34 + 16);
      }
      unint64_t v35 = __p;
      if (v39 < 0) {
        unint64_t v35 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "ControlEffortValueManager.cpp";
      __int16 v44 = 1024;
      int v45 = 152;
      __int16 v46 = 2048;
      double v47 = v32;
      __int16 v48 = 2080;
      uint64_t v49 = v35;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControlEffortValueManager - Setting control effort value of %f on registered DSP chain %s", buf, 0x26u);
      if (SHIBYTE(v39) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v36 = *(void *)v28;
    float v37 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 112)));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v36 + 72))(v36, 1685287015, 1668572518, 0, v37);
  }
  *(void *)AudioObjectPropertyAddress buf = &v40;
  sub_74004((void ***)buf);
}

void sub_73FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a14;
  sub_74004(&a17);
  _Unwind_Resume(a1);
}

void sub_74004(void ***a1)
{
  uint64_t v1 = *a1;
  float v2 = (char *)**a1;
  if (v2)
  {
    float v4 = (char *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        float v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          sub_4636C(v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_7408C(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (os_log_t *)sub_32A48(24);
  float v4 = *v3;
  if (*v3)
  {
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      double v5 = *(float *)(a1 + 8);
      int v6 = 136315650;
      float v7 = "ControlEffortValueManager.cpp";
      __int16 v8 = 1024;
      int v9 = 103;
      __int16 v10 = 2048;
      double v11 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControlEffortValueManager - Got an updated thermal budget of %f watts", (uint8_t *)&v6, 0x1Cu);
    }
  }
  atomic_store(*(_DWORD *)(a1 + 8), (unsigned int *)(v2 + 104));
  sub_73B98(v2);
  operator delete();
}

void sub_74198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      uint64_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    unint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      unint64_t v23 = v22;
      uint64_t v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        uint64_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        uint64_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x74150);
}

void sub_74408(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = ((char *)a2[1] - (char *)*a2) >> 2;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * v2;
  if (-1431655765 * v2)
  {
    (*(void (**)(void, unint64_t))(**(void **)(a1 + 80) + 72))(*(void *)(a1 + 80), v3);
    memset(v10, 0, 24);
    sub_74550((char *)v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 2));
    int v6 = (char *)v10[0];
    float v7 = (_DWORD *)sub_365170(*(void **)(a1 + 80), *(_DWORD *)(v10[0] + 4), *(_DWORD *)(v10[0] + 8));
    if (v7)
    {
      uint64_t v8 = 0;
      do
      {
        *(_DWORD *)&v6[v8 + 4] = 1735159650;
        int v9 = *(_DWORD *)&v6[v8 + 8];
        if (v9) {
          int v9 = v9 - v7[23] + 1;
        }
        *(_DWORD *)&v6[v8 + 8] = v9;
        v8 += 12;
      }
      while (12 * v3 != v8);
      (*(void (**)(_DWORD *, unint64_t, char *, uint64_t))(*(void *)v7 + 72))(v7, v3, v6, 1);
    }
    operator delete(v6);
  }
}

void sub_7453C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_74550(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    float result = sub_4EE38(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_745B4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_745D0(void **a1, unint64_t *a2)
{
  a2[1] = *a2;
  int v4 = (*(uint64_t (**)(void *, void **))(*a1[10] + 768))(a1[10], a1);
  int v5 = (*(uint64_t (**)(void))(*a1[10] + 784))();
  int v6 = ((uint64_t (*)(void **))(*a1)[17])(a1);
  int v8 = v4;
  int v9 = v5;
  int v10 = v6;
  if (v4) {
    sub_74758(a2, &v8);
  }
  int v7 = (*(uint64_t (**)(void *, void **))(*a1[10] + 776))(a1[10], a1);
  int v8 = v7;
  int v9 = (*(uint64_t (**)(void))(*a1[10] + 792))();
  if (v7) {
    sub_74758(a2, &v8);
  }
}

void sub_74758(unint64_t *a1, int *a2)
{
  int v4 = (_DWORD *)*a1;
  int v5 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 == v5)
  {
    int v5 = (_DWORD *)*a1;
LABEL_8:
    uint64_t v20 = *(void *)a2;
    int v21 = a2[2];
    unint64_t v7 = a1[2];
    if ((unint64_t)v5 >= v7)
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4) + 1;
      if (v10 > 0x1555555555555555) {
        sub_60548();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v4) >> 2);
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v12 = 0x1555555555555555;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12) {
        unint64_t v12 = (unint64_t)sub_564C(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      unint64_t v14 = v12 + 4 * (v5 - v4);
      unint64_t v15 = v12 + 12 * v13;
      *(void *)unint64_t v14 = v20;
      *(_DWORD *)(v14 + 8) = v21;
      int v9 = (_DWORD *)(v14 + 12);
      os_log_t v17 = (_DWORD *)*a1;
      uint64_t v16 = (_DWORD *)a1[1];
      if (v16 != (_DWORD *)*a1)
      {
        do
        {
          uint64_t v18 = *(void *)(v16 - 3);
          v16 -= 3;
          int v19 = v16[2];
          *(void *)(v14 - 12) = v18;
          v14 -= 12;
          *(_DWORD *)(v14 + 8) = v19;
        }
        while (v16 != v17);
        uint64_t v16 = (_DWORD *)*a1;
      }
      *a1 = v14;
      a1[1] = (unint64_t)v9;
      a1[2] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      uint64_t v8 = *(void *)a2;
      v5[2] = a2[2];
      *(void *)int v5 = v8;
      int v9 = v5 + 3;
    }
    a1[1] = (unint64_t)v9;
    return;
  }
  int v6 = (_DWORD *)*a1;
  while (!sub_668FC(a2, v6))
  {
    v6 += 3;
    if (v6 == v5) {
      goto LABEL_8;
    }
  }
  if (v6 == v5) {
    goto LABEL_8;
  }
}

void sub_748C8(void **a1, unint64_t *a2)
{
  a2[1] = *a2;
  int v4 = (*(uint64_t (**)(void *, void **))(*a1[10] + 704))(a1[10], a1);
  int v5 = (*(uint64_t (**)(void))(*a1[10] + 736))();
  int v6 = ((uint64_t (*)(void **))(*a1)[17])(a1);
  int v10 = v4;
  int v11 = v5;
  int v12 = v6;
  if (v4) {
    sub_74758(a2, &v10);
  }
  int v7 = (*(uint64_t (**)(void *, void **))(*a1[10] + 712))(a1[10], a1);
  int v10 = v7;
  int v11 = (*(uint64_t (**)(void))(*a1[10] + 744))();
  if (v7) {
    sub_74758(a2, &v10);
  }
  int v8 = (*(uint64_t (**)(void *, void **))(*a1[10] + 720))(a1[10], a1);
  int v10 = v8;
  int v11 = (*(uint64_t (**)(void))(*a1[10] + 752))();
  if (v8) {
    sub_74758(a2, &v10);
  }
  int v9 = (*(uint64_t (**)(void *, void **))(*a1[10] + 728))(a1[10], a1);
  int v10 = v9;
  int v11 = (*(uint64_t (**)(void))(*a1[10] + 760))();
  if (v9) {
    sub_74758(a2, &v10);
  }
}

void sub_74B70(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 192))(a1, __p);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 200))(a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_74C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_74C20(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 184))(a1, __p);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 200))(a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_74CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_74CD0()
{
  return 0;
}

uint64_t sub_74CD8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_74CE0()
{
  return 0;
}

uint64_t sub_74CE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 128))();
}

uint64_t sub_74D10()
{
  return 0;
}

uint64_t sub_74D18(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  int v8 = *a2;
  if (*a2 > 1819107690)
  {
    if (v8 == 1819107691)
    {
      int v13 = *a5;
      if (v13 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        int v19 = (os_log_t *)sub_32A48(13);
        unint64_t v15 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          int v21 = 136315394;
          unint64_t v22 = "HP_Control.cpp";
          __int16 v23 = 1024;
          int v24 = 236;
          uint64_t v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyManufacturer\"";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    }
    else
    {
      if (v8 != 1819173229) {
        goto LABEL_11;
      }
      int v11 = *a5;
      if (v11 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        os_log_t v17 = (os_log_t *)sub_32A48(13);
        unint64_t v15 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          int v21 = 136315394;
          unint64_t v22 = "HP_Control.cpp";
          __int16 v23 = 1024;
          int v24 = 231;
          uint64_t v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyName\"";
          goto LABEL_34;
        }
LABEL_35:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = 561211770;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    *a6 = result;
    return result;
  }
  if (v8 != 1667591277)
  {
    if (v8 == 1668506480)
    {
      int v9 = *a5;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      if (v9 == result)
      {
        if (a6)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
LABEL_17:
          *(_DWORD *)a6 = result;
          return result;
        }
        return result;
      }
      unint64_t v14 = (os_log_t *)sub_32A48(13);
      unint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v21 = 136315394;
        unint64_t v22 = "HP_Control.cpp";
        __int16 v23 = 1024;
        int v24 = 241;
        uint64_t v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioControlPropertyScope\"";
LABEL_34:
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v21, 0x12u);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
LABEL_11:
    return sub_3A66B8(a1, a2, a3, a4, a5, (uint64_t)a6);
  }
  int v12 = *a5;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v12 != result)
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    unint64_t v15 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      unint64_t v22 = "HP_Control.cpp";
      __int16 v23 = 1024;
      int v24 = 246;
      uint64_t v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioControlPropertyElement\"";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if (a6)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_75168(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1819107690)
  {
    if (v2 == 1819107691 || v2 == 1819173229) {
      return 8;
    }
  }
  else if (v2 == 1667591277 || v2 == 1668506480)
  {
    return 4;
  }
  return sub_3A69A4(a1, a2);
}

uint64_t sub_751CC(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1819107690)
  {
    BOOL v3 = v2 == 1819107691;
    int v4 = 1819173229;
  }
  else
  {
    BOOL v3 = v2 == 1667591277;
    int v4 = 1668506480;
  }
  if (v3 || v2 == v4) {
    return 0;
  }
  else {
    return sub_3A6BA8(a1, a2);
  }
}

uint64_t sub_75220(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1;
  if (*a2 > 1818850161)
  {
    switch(v2)
    {
      case 1818850162:
        return v3;
      case 1819107691:
        int v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        if (!v6) {
          return 0;
        }
        break;
      case 1819173229:
        int v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
        if (!v6) {
          return 0;
        }
        break;
      default:
        return sub_3A6620(a1, a2) != 0;
    }
    CFRelease(v6);
    return 1;
  }
  if (v2 != 1667591277 && v2 != 1668506480 && v2 != 1818850145) {
    return sub_3A6620(a1, a2) != 0;
  }
  return v3;
}

uint64_t sub_7531C(_DWORD *a1, uint8x8_t a2)
{
  a2.i32[0] = a1[3];
  int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
  *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
  unsigned __int32 v16 = vmovn_s16(v3).u32[0];
  char v17 = 0;
  uint64_t v14 = 0x676C6F626C6E616DLL;
  int v15 = 0;
  CFStringRef theString = 0;
  int v12 = 8;
  (*(void (**)(_DWORD *, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56))(a1, &v14, 0, 0, &v12, &theString);
  buffer[0] = 0;
  if (theString)
  {
    CFIndex usedBufLen = 0;
    v19.length = CFStringGetLength(theString);
    v19.locatiouint64_t n = 0;
    CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }
  int v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 128))(a1);
  int v5 = "Global";
  if (v4 == 1869968496) {
    int v5 = "Output";
  }
  if (v4 == 1886679669) {
    int v6 = "Play Through";
  }
  else {
    int v6 = v5;
  }
  if (v4 == 1768845428) {
    int v7 = "Input";
  }
  else {
    int v7 = v6;
  }
  int v8 = a1[2];
  int v9 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  return printf("AudioObjectID:\t\t0x%X\n\tAudioClassID:\t'%s'\n\tName:\t\t\t%s\n\tScope:\t\t\t%s\n\tChannel:\t\t%u\n", v8, (const char *)&v16, (const char *)buffer, v7, v9);
}

void sub_75500(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x753B4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_75518(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 16))();
}

uint64_t sub_75540()
{
  return 1818588780;
}

uint64_t sub_7554C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, unsigned __int32 *a6)
{
  if (*a2 == 1818453110)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) == a5)
    {
      v8.n128_u32[0] = *a6;
      int v9 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 232);
      uint64_t v10 = a1;
      return v9(v10, v8);
    }
    int v15 = (os_log_t *)sub_32A48(13);
    int v13 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "HP_Control.cpp";
      __int16 v19 = 1024;
      int v20 = 545;
      uint64_t v14 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioLevelControlPropertyDecibelValue\"";
      goto LABEL_20;
    }
LABEL_21:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 561211770;
  }
  if (*a2 == 1818456950)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) == a5)
    {
      v8.n128_u32[0] = *a6;
      int v9 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 248);
      uint64_t v10 = a1;
      return v9(v10, v8);
    }
    int v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "HP_Control.cpp";
      __int16 v19 = 1024;
      int v20 = 540;
      uint64_t v14 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioLevelControlPropertyScalarValue\"";
LABEL_20:
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v17, 0x12u);
      goto LABEL_21;
    }
    goto LABEL_21;
  }

  return sub_3A60D0(a1, a2, a3, a4, a5, (uint64_t)a6);
}

void sub_7582C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  int v8 = *a2;
  if (*a2 <= 1818453109)
  {
    if (v8 == 1818453106)
    {
      int v14 = *a5;
      if (v14 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        *(double *)a6 = (*(float (**)(uint64_t))(*(void *)a1 + 208))(a1);
        *((double *)a6 + 1) = (*(float (**)(uint64_t))(*(void *)a1 + 216))(a1);
        return;
      }
      int v20 = (os_log_t *)sub_32A48(13);
      unsigned __int32 v16 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        int v23 = 136315394;
        int v24 = "HP_Control.cpp";
        __int16 v25 = 1024;
        int v26 = 514;
        int v17 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioLevelControlPropertyDecibelRange\"";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (v8 == 1818453107)
    {
      int v11 = *a5;
      if (v11 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
      {
        (*(void (**)(uint64_t, float))(*(void *)a1 + 264))(a1, *(float *)a6);
        goto LABEL_15;
      }
      int v21 = (os_log_t *)sub_32A48(13);
      unsigned __int32 v16 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        int v23 = 136315394;
        int v24 = "HP_Control.cpp";
        __int16 v25 = 1024;
        int v26 = 525;
        int v17 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioLevelControlProperty"
              "ConvertDecibelsToScalar\"";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
  }
  else
  {
    switch(v8)
    {
      case 1818453110:
        int v12 = *a5;
        if (v12 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
          goto LABEL_15;
        }
        uint64_t v18 = (os_log_t *)sub_32A48(13);
        unsigned __int32 v16 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          int v23 = 136315394;
          int v24 = "HP_Control.cpp";
          __int16 v25 = 1024;
          int v26 = 509;
          int v17 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioLevelControlProper"
                "tyDecibelValue\"";
          goto LABEL_37;
        }
LABEL_38:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = 561211770;
      case 1818456932:
        int v13 = *a5;
        if (v13 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
        {
          float v10 = (*(float (**)(uint64_t, float))(*(void *)a1 + 256))(a1, *(float *)a6);
          goto LABEL_15;
        }
        __int16 v19 = (os_log_t *)sub_32A48(13);
        unsigned __int32 v16 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          int v23 = 136315394;
          int v24 = "HP_Control.cpp";
          __int16 v25 = 1024;
          int v26 = 520;
          int v17 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioLevelControlProper"
                "tyConvertScalarToDecibels\"";
          goto LABEL_37;
        }
        goto LABEL_38;
      case 1818456950:
        int v9 = *a5;
        if (v9 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 240))(a1);
LABEL_15:
          *(float *)a6 = v10;
          return;
        }
        int v15 = (os_log_t *)sub_32A48(13);
        unsigned __int32 v16 = *v15;
        if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          int v23 = 136315394;
          int v24 = "HP_Control.cpp";
          __int16 v25 = 1024;
          int v26 = 504;
          int v17 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioLevelControlPropertyScalarValue\"";
LABEL_37:
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v23, 0x12u);
          goto LABEL_38;
        }
        goto LABEL_38;
    }
  }

  sub_74D18(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_75D8C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t result = 4;
  if (*a2 <= 1818453109)
  {
    if (v3 == 1818453106)
    {
      return 16;
    }
    else if (v3 != 1818453107)
    {
      return sub_75168(a1, a2);
    }
  }
  else if (v3 != 1818453110 && v3 != 1818456932 && v3 != 1818456950)
  {
    return sub_75168(a1, a2);
  }
  return result;
}

uint64_t sub_75E04(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a2;
  if (*a2 <= 1818456931)
  {
    if ((v3 - 1818453106) >= 2)
    {
      unsigned __int16 v4 = 25718;
      goto LABEL_6;
    }
    return v2;
  }
  if (v3 == 1818456932) {
    return v2;
  }
  unsigned __int16 v4 = 29558;
LABEL_6:
  if (v3 == (v4 | 0x6C630000)) {
    return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1) ^ 1;
  }

  return sub_751CC(a1, a2);
}

uint64_t sub_75EB0(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if ((*a2 - 1818453106) <= 4 && ((1 << (*a2 - 114)) & 0x13) != 0 || v2 == 1818456932 || v2 == 1818456950) {
    return 1;
  }
  else {
    return sub_75220(a1, a2);
  }
}

uint64_t sub_75F00()
{
  return 1953458028;
}

uint64_t sub_75F0C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  if (*a2 == 1650685548)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != a5)
    {
      int v11 = (os_log_t *)sub_32A48(13);
      int v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        int v15 = "HP_Control.cpp";
        __int16 v16 = 1024;
        int v17 = 651;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioBooleanControlPropertyValue\"", (uint8_t *)&v14, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 561211770;
    }
    BOOL v8 = *a6 != 0;
    int v9 = *(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 216);
    return v9(a1, v8);
  }
  else
  {
    return sub_3A60D0(a1, a2, a3, a4, a5, (uint64_t)a6);
  }
}

uint64_t sub_760F4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  if (*a2 == 1650685548)
  {
    int v8 = *a5;
    if (v8 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
    {
      float v10 = (os_log_t *)sub_32A48(13);
      int v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          int v14 = "HP_Control.cpp";
          __int16 v15 = 1024;
          int v16 = 636;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioBooleanControlPropertyValue\"", (uint8_t *)&v13, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 561211770;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
    *(_DWORD *)a6 = result;
  }
  else
  {
    return sub_74D18(a1, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_762C4(uint64_t a1, int *a2)
{
  if (*a2 == 1650685548) {
    return 4;
  }
  else {
    return sub_75168(a1, a2);
  }
}

uint64_t sub_762E4(uint64_t a1, int *a2)
{
  if (*a2 == 1650685548) {
    return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1) ^ 1;
  }

  return sub_751CC(a1, a2);
}

uint64_t sub_7634C(uint64_t a1, int *a2)
{
  if (*a2 == 1650685548) {
    return 1;
  }
  else {
    return sub_75220(a1, a2);
  }
}

uint64_t sub_7636C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680))(*(void *)(a1 + 8));
  if (result)
  {
    uint64_t v15 = result;
    int v16 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 696))(*(void *)(a1 + 8), *a2);
    uint64_t v17 = 1735159650;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 64))(v15, &v16, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_76480(void **a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 680))(a1[1]);
  if (result)
  {
    uint64_t v13 = result;
    int v48 = (*(uint64_t (**)(void *, void))(*a1[1] + 696))(a1[1], *a2);
    uint64_t v49 = 1735159650;
    int v14 = *a2;
    if ((int)*a2 <= 1818456941)
    {
      if (v14 != 1668506475)
      {
        if (v14 == 1818455660)
        {
          int v19 = *a5;
          if (v19 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])(a1, a2, a3, a4))
          {
            uint64_t v29 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v29;
            if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1138;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDeviceProperty"
                    "ChannelNominalLineLevelNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 8) != 4)
          {
            char v30 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v30;
            if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1142;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong input data size for kAudioDevicePr"
                    "opertyChannelNominalLineLevelNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)a6)
          {
            uint64_t v31 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v31;
            if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1143;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: \""
                    "wrong input data buffer for kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 24) != 8)
          {
            float v32 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v32;
            if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1144;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong output data size for kAudioDeviceP"
                    "ropertyChannelNominalLineLevelNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)(a6 + 16))
          {
            int v20 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v20;
            if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1145;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                    "\"wrong output data buffer for kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString\"";
              goto LABEL_112;
            }
LABEL_113:
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            *(void *)exceptiouint64_t n = &off_6414D8;
            exception[2] = 561211770;
          }
          return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56))(v13, &v48, 4);
        }
        return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56))(v13, &v48, a3);
      }
      int v24 = *a5;
      if (v24 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])(a1, a2, a3, a4))
      {
        uint64_t v42 = (os_log_t *)sub_32A48(13);
        uint64_t v17 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v51 = "HP_Control.cpp";
          __int16 v52 = 1024;
          int v53 = 1095;
          uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyCloc"
                "kSourceKindForID\"";
          goto LABEL_112;
        }
        goto LABEL_113;
      }
      if (*(_DWORD *)(a6 + 8) != 4)
      {
        BOOL v43 = (os_log_t *)sub_32A48(13);
        uint64_t v17 = *v43;
        if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v51 = "HP_Control.cpp";
          __int16 v52 = 1024;
          int v53 = 1099;
          uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong input data size for kAudioDeviceProper"
                "tyClockSourceKindForID\"";
          goto LABEL_112;
        }
        goto LABEL_113;
      }
      if (!*(void *)a6)
      {
        __int16 v44 = (os_log_t *)sub_32A48(13);
        uint64_t v17 = *v44;
        if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v51 = "HP_Control.cpp";
          __int16 v52 = 1024;
          int v53 = 1100;
          uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: \"wro"
                "ng input data buffer for kAudioDevicePropertyClockSourceKindForID\"";
          goto LABEL_112;
        }
        goto LABEL_113;
      }
      if (*(_DWORD *)(a6 + 24) != 4)
      {
        int v45 = (os_log_t *)sub_32A48(13);
        uint64_t v17 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v51 = "HP_Control.cpp";
          __int16 v52 = 1024;
          int v53 = 1101;
          uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong output data size for kAudioDevicePrope"
                "rtyClockSourceKindForID\"";
          goto LABEL_112;
        }
        goto LABEL_113;
      }
      if (!*(void *)(a6 + 16))
      {
        __int16 v46 = (os_log_t *)sub_32A48(13);
        uint64_t v17 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v51 = "HP_Control.cpp";
          __int16 v52 = 1024;
          int v53 = 1102;
          uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: \"wr"
                "ong output data buffer for kAudioDevicePropertyClockSourceKindForID\"";
          goto LABEL_112;
        }
        goto LABEL_113;
      }
    }
    else
    {
      switch(v14)
      {
        case 1818456942:
          int v21 = *a5;
          if (v21 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])(a1, a2, a3, a4))
          {
            uint64_t v33 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v33;
            if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1073;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDeviceProperty"
                    "ClockSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 8) != 4)
          {
            uint64_t v34 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v34;
            if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1077;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong input data size for kAudioDevicePr"
                    "opertyClockSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)a6)
          {
            unint64_t v35 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v35;
            if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1078;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: \""
                    "wrong input data buffer for kAudioDevicePropertyClockSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 24) != 8)
          {
            uint64_t v36 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v36;
            if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1079;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong output data size for kAudioDeviceP"
                    "ropertyClockSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)(a6 + 16))
          {
            unint64_t v22 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v22;
            if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1080;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                    "\"wrong output data buffer for kAudioDevicePropertyClockSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          break;
        case 1835295843:
          int v23 = *a5;
          if (v23 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])(a1, a2, a3, a4))
          {
            float v37 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v37;
            if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1116;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDeviceProperty"
                    "PlayThruDestinationNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 8) != 4)
          {
            __int16 v38 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v38;
            if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1120;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong input data size for kAudioDevicePr"
                    "opertyPlayThruDestinationNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)a6)
          {
            uint64_t v39 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v39;
            if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1121;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: \""
                    "wrong input data buffer for kAudioDevicePropertyPlayThruDestinationNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 24) != 8)
          {
            __int16 v40 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v40;
            if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1122;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong output data size for kAudioDeviceP"
                    "ropertyPlayThruDestinationNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)(a6 + 16))
          {
            uint64_t v41 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v41;
            if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1123;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                    "\"wrong output data buffer for kAudioDevicePropertyPlayThruDestinationNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          break;
        case 1819501422:
          int v15 = *a5;
          if (v15 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])(a1, a2, a3, a4))
          {
            __int16 v25 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v25;
            if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1051;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDeviceProperty"
                    "DataSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 8) != 4)
          {
            int v26 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v26;
            if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1055;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong input data size for kAudioDevicePr"
                    "opertyDataSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)a6)
          {
            uint64_t v27 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v27;
            if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1056;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: \""
                    "wrong input data buffer for kAudioDevicePropertyDataSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (*(_DWORD *)(a6 + 24) != 8)
          {
            os_log_t v28 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v28;
            if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1057;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong output data size for kAudioDeviceP"
                    "ropertyDataSourceNameForIDCFString\"";
              goto LABEL_112;
            }
            goto LABEL_113;
          }
          if (!*(void *)(a6 + 16))
          {
            int v16 = (os_log_t *)sub_32A48(13);
            uint64_t v17 = *v16;
            if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1058;
              uint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                    "\"wrong output data buffer for kAudioDevicePropertyDataSourceNameForIDCFString\"";
LABEL_112:
              _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
              goto LABEL_113;
            }
            goto LABEL_113;
          }
          return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56))(v13, &v48, 4);
        default:
          return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56))(v13, &v48, a3);
      }
    }
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56))(v13, &v48, 4);
  }
  return result;
}

uint64_t sub_771EC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680))(*(void *)(a1 + 8));
  if (result)
  {
    uint64_t v9 = result;
    int v10 = *a2;
    uint64_t result = 32;
    if (*a2 <= 1818456941)
    {
      BOOL v11 = v10 == 1668506475;
      int v12 = 1818455660;
    }
    else
    {
      BOOL v11 = v10 == 1818456942 || v10 == 1819501422;
      int v12 = 1835295843;
    }
    if (!v11 && v10 != v12)
    {
      int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 696))(*(void *)(a1 + 8));
      uint64_t v15 = 1735159650;
      return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, &v14, a3, a4);
    }
  }
  return result;
}

uint64_t sub_77338(uint64_t a1, int *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680))(*(void *)(a1 + 8));
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = 0;
    int v6 = *a2;
    if (*a2 <= 1818456941)
    {
      BOOL v7 = v6 == 1668506475;
      int v8 = 1818455660;
    }
    else
    {
      BOOL v7 = v6 == 1818456942 || v6 == 1819501422;
      int v8 = 1835295843;
    }
    if (!v7 && v6 != v8)
    {
      int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 696))(*(void *)(a1 + 8));
      uint64_t v11 = 1735159650;
      return (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 40))(v5, &v10);
    }
  }
  return result;
}

BOOL sub_7746C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680))(*(void *)(a1 + 8)) != 0;
}

uint64_t sub_774B8(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = operator new(4uLL);
  std::string __p = v6;
  *int v6 = a3;
  int v10 = v6 + 1;
  uint64_t v11 = v6 + 1;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 216))(a1, a2, &__p);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  return v7;
}

void sub_7754C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_77568(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = (double *)operator new(8uLL);
  std::string __p = v6;
  *int v6 = a3;
  int v10 = v6 + 1;
  uint64_t v11 = v6 + 1;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, a2, &__p);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  return v7;
}

void sub_775FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_77618(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  if (result)
  {
    uint64_t v7 = (unsigned int *)sub_2A65A0(a2);
    uint64_t v8 = v7[2];
    if (v8 == (uint64_t)(a3[1] - *a3) >> 2) {
      return (*(unsigned int (**)(void, void, void *, void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16), v7[1], a3, *(void *)(a1 + 24)) == 0;
    }
    unsigned int v9 = *v7;
    int v10 = (os_log_t *)sub_32A48(25);
    uint64_t v11 = *v10;
    if (*v10)
    {
      uint64_t result = os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_2A657C(__p, v9);
      if (v15 >= 0) {
        int v12 = __p;
      }
      else {
        int v12 = (void **)__p[0];
      }
      uint64_t v13 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      uint64_t v17 = "AncManager.cpp";
      __int16 v18 = 1024;
      int v19 = 355;
      __int16 v20 = 2080;
      int v21 = "SetAncParameter";
      __int16 v22 = 2080;
      int v23 = v12;
      __int16 v24 = 2048;
      uint64_t v25 = v13;
      __int16 v26 = 1024;
      int v27 = v8;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d %s( %s) Size mismatch (%ld != %d)", buf, 0x36u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_777E8(uint64_t a1, uint64_t a2, double **a3)
{
  uint64_t v5 = a1;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1)) {
    return 0;
  }
  uint64_t v6 = sub_2A65A0(a2);
  int v7 = *(unsigned __int8 *)(v6 + 12);
  int v9 = *(_DWORD *)(v6 + 16);
  int v8 = *(_DWORD *)(v6 + 20);
  unsigned int v10 = v9 + v7 + v8;
  if (v10 >= 0x18 || *(_DWORD *)(v6 + 24) != 0 || v8 == 0) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = 24 - v10;
  }
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  std::string __p = 0;
  int v14 = *a3;
  char v15 = a3[1];
  if (*a3 != v15)
  {
    int v45 = (unsigned int *)v6;
    uint64_t v46 = v5;
    unsigned int v47 = a2;
    int v42 = v7;
    int v43 = v9;
    int v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    int v44 = v8;
    double v19 = (double)(1 << v8);
    uint64_t v20 = ~(-1 << v10);
    double v21 = (double)(1 << v9);
    double v22 = (double)(-1 << v9);
    do
    {
      double v23 = *v14;
      double v24 = *v14 * v19;
      if (*v14 <= 0.0)
      {
        unsigned int v25 = ((uint64_t)v24 & v20) << v13;
      }
      else
      {
        if (v23 == v21) {
          double v24 = v24 + -1.0;
        }
        unsigned int v25 = ((uint64_t)v24 & v20) << v13;
        if (v23 > v21)
        {
LABEL_46:
          uint64_t v36 = (os_log_t *)sub_32A48(25);
          float v37 = *v36;
          if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
          {
            sub_2A657C(v51, *v45);
            if (v52 >= 0) {
              __int16 v38 = v51;
            }
            else {
              __int16 v38 = (void **)v51[0];
            }
            unsigned int v39 = v45[1];
            if (v42) {
              int v40 = 83;
            }
            else {
              int v40 = 85;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136317442;
            uint64_t v54 = "AncParams.cpp";
            __int16 v55 = 1024;
            int v56 = 144;
            __int16 v57 = 2080;
            uint64_t v58 = v38;
            __int16 v59 = 1024;
            unsigned int v60 = v39;
            __int16 v61 = 1024;
            int v62 = v40;
            __int16 v63 = 1024;
            int v64 = v43;
            __int16 v65 = 1024;
            int v66 = v44;
            __int16 v67 = 1024;
            unsigned int v68 = v13;
            __int16 v69 = 2048;
            double v70 = v23;
            __int16 v71 = 1024;
            unsigned int v72 = v25;
            _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Parameter %s is out of range: addr=0x%08x, %c%u.%u shift=%u, inFloat=%g, outInt=0x%08x", buf, 0x4Au);
            if (v52 < 0) {
              operator delete(v51[0]);
            }
          }
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "out of range");
        }
      }
      if (v23 < 0.0 && v23 < v22) {
        goto LABEL_46;
      }
      if ((unint64_t)v16 >= v18)
      {
        uint64_t v27 = v16 - v17;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          sub_60548();
        }
        if ((uint64_t)(v18 - (void)v17) >> 1 > v28) {
          unint64_t v28 = (uint64_t)(v18 - (void)v17) >> 1;
        }
        if (v18 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          unint64_t v29 = (unint64_t)sub_46BF4(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v31 = (unsigned int *)(v29 + 4 * v27);
        *uint64_t v31 = v25;
        float v32 = v31 + 1;
        while (v16 != v17)
        {
          unsigned int v33 = *--v16;
          *--uint64_t v31 = v33;
        }
        unint64_t v18 = v29 + 4 * v30;
        if (v17) {
          operator delete(v17);
        }
        uint64_t v17 = v31;
        int v16 = v32;
      }
      else
      {
        *v16++ = v25;
      }
      ++v14;
    }
    while (v14 != v15);
    uint64_t v49 = v16;
    unint64_t v50 = v18;
    std::string __p = v17;
    a2 = v47;
    uint64_t v5 = v46;
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v5 + 216))(v5, a2, &__p);
  if (__p)
  {
    uint64_t v49 = __p;
    operator delete(__p);
  }
  return v34;
}

void sub_77BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_77C10(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  unsigned int v4 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD **))(*(void *)a1 + 184))(a1, a2, &v8);
  uint64_t v5 = v8;
  if (v9 == v8) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v6)
  {
    *a3 = *v8;
  }
  else if (!v8)
  {
    return 0;
  }
  int v9 = v5;
  operator delete(v5);
  return v6;
}

void sub_77CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_77CBC(uint64_t a1, uint64_t a2, void *a3)
{
  int v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  unsigned int v4 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 176))(a1, a2, &v8);
  uint64_t v5 = v8;
  if (v9 == v8) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v6)
  {
    *a3 = *v8;
  }
  else if (!v8)
  {
    return 0;
  }
  int v9 = v5;
  operator delete(v5);
  return v6;
}

void sub_77D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_77D68(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  if (result)
  {
    int v7 = (unsigned int *)sub_2A65A0(a2);
    unsigned int v9 = *v7;
    uint64_t v8 = v7[1];
    uint64_t v10 = v7[2];
    int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16), v8, v10, a3, *(void *)(a1 + 24));
    uint64_t result = v11 == 0;
    if (v11)
    {
      int v12 = (os_log_t *)sub_32A48(25);
      unsigned int v13 = *v12;
      if (*v12)
      {
        uint64_t result = os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        sub_2A657C(__p, v9);
        if (v16 >= 0) {
          int v14 = __p;
        }
        else {
          int v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        unint64_t v18 = "AncManager.cpp";
        __int16 v19 = 1024;
        int v20 = 318;
        __int16 v21 = 2080;
        double v22 = "GetAncParameter";
        __int16 v23 = 2080;
        double v24 = v14;
        __int16 v25 = 1024;
        int v26 = v8;
        __int16 v27 = 1024;
        int v28 = v10;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d %s( %s) Error calling GetDataBlock( address=0x%x, length=%u)", buf, 0x32u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_77F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = a2;
  std::string __p = 0;
  int v40 = 0;
  uint64_t v41 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 184))(a1, a2, &__p);
  if (v5)
  {
    uint64_t v6 = sub_2A65A0(v4);
    unsigned int v36 = v5;
    uint64_t v37 = a3;
    int v7 = (unsigned int *)__p;
    uint64_t v8 = v40;
    if (__p == v40)
    {
      unint64_t v9 = 0;
      long long v38 = 0u;
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      int v11 = *(unsigned __int8 *)(v6 + 12);
      uint64_t v12 = *(unsigned int *)(v6 + 20);
      unsigned int v13 = *(_DWORD *)(v6 + 16) + v11 + v12;
      if (v13 >= 0x18 || *(_DWORD *)(v6 + 24) != 0 || v12 == 0) {
        char v16 = 0;
      }
      else {
        char v16 = 24 - v13;
      }
      uint64_t v17 = ~(-1 << v13);
      uint64_t v18 = (1 << (v13 - 1));
      int v19 = -1 << (v13 - 1);
      double v20 = 1.0 / (double)(1 << v12);
      long long v38 = 0u;
      do
      {
        unint64_t v21 = ((unint64_t)*v7 >> v16) & v17;
        BOOL v22 = (v21 & v18) == 0 || v11 == 0;
        double v23 = (double)v21;
        if (!v22) {
          double v23 = (double)(int)(v19 | v21);
        }
        double v24 = v20 * v23;
        if ((unint64_t)v10 >= v9)
        {
          int v26 = (void *)v38;
          uint64_t v27 = (uint64_t)((uint64_t)v10 - v38) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            sub_60548();
          }
          if ((uint64_t)(v9 - v38) >> 2 > v28) {
            unint64_t v28 = (uint64_t)(v9 - v38) >> 2;
          }
          if (v9 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29)
          {
            unint64_t v29 = (unint64_t)sub_106EC(v29);
            uint64_t v10 = (double *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v30 = 0;
          }
          uint64_t v31 = (double *)(v29 + 8 * v27);
          *uint64_t v31 = v24;
          __int16 v25 = v31 + 1;
          while (v10 != (double *)v38)
          {
            uint64_t v32 = *((void *)v10-- - 1);
            *((void *)v31-- - 1) = v32;
          }
          unint64_t v9 = v29 + 8 * v30;
          *(void *)&long long v38 = v31;
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          double *v10 = v24;
          __int16 v25 = v10 + 1;
        }
        *(void *)&long long v33 = v38;
        *((void *)&v33 + 1) = v25;
        long long v38 = v33;
        ++v7;
        uint64_t v10 = v25;
      }
      while (v7 != v8);
    }
    uint64_t v34 = *(void **)v37;
    if (*(void *)v37)
    {
      *(void *)(v37 + 8) = v34;
      operator delete(v34);
      *(void *)uint64_t v37 = 0;
      *(void *)(v37 + 8) = 0;
      *(void *)(v37 + 16) = 0;
    }
    *(_OWORD *)uint64_t v37 = v38;
    *(void *)(v37 + 16) = v9;
    uint64_t v5 = v36;
  }
  if (__p)
  {
    int v40 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v5;
}

void sub_78174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_781B0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_782C4(*(_DWORD *)(a1 + 8));
  unint64_t v9 = v8[1] - *v8;
  int v10 = sub_786C4(*(_DWORD *)(a1 + 8));
  int v11 = *(_DWORD *)(a1 + 8);
  uint64_t v12 = 2;
  unsigned int v13 = v11 - 24;
  if (v11 == 125) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13 >= 3) {
    uint64_t v12 = v14;
  }
  uint64_t v15 = v9 & 0x3FFFFFFFCLL;
  if (v10 * a2 <= *(_DWORD *)(a3 + 12) >> 2)
  {
    if (v15)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a3 + 16) + 4 * v12;
      do
      {
        if (a2)
        {
          unsigned int v21 = 0;
          BOOL v22 = *(_DWORD **)(a4 + 16 * v19 + 16);
          uint64_t v23 = a2;
          do
          {
            *v22++ = *(_DWORD *)(v20 + 4 * v19 + 4 * v21);
            v21 += v10;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      while (v19 != (v9 >> 2));
    }
  }
  else if (v15)
  {
    uint64_t v16 = (v9 >> 2);
    uint64_t v17 = (void **)(a4 + 16);
    do
    {
      unsigned int v18 = *((_DWORD *)v17 - 1);
      if (v18 >= 4) {
        memset_pattern16(*v17, &unk_4E7CE0, v18 & 0xFFFFFFFC);
      }
      v17 += 2;
      --v16;
    }
    while (v16);
  }
}

void *sub_782C4(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6499B0, memory_order_acquire) & 1) == 0)
  {
    unsigned int v3 = a1;
    int v4 = __cxa_guard_acquire(&qword_6499B0);
    a1 = v3;
    if (v4)
    {
      *(void *)&v16[16] = 0x600000005;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)"";
      sub_7873C(qword_649998, v16, 6uLL);
      __cxa_guard_release(&qword_6499B0);
      a1 = v3;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6499D0, memory_order_acquire) & 1) == 0)
  {
    unsigned int v5 = a1;
    int v6 = __cxa_guard_acquire(&qword_6499D0);
    a1 = v5;
    if (v6)
    {
      *(void *)&v16[16] = 0x600000005;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)"";
      sub_7873C(qword_6499B8, v16, 6uLL);
      __cxa_guard_release(&qword_6499D0);
      a1 = v5;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6499F0, memory_order_acquire) & 1) == 0)
  {
    unsigned int v7 = a1;
    int v8 = __cxa_guard_acquire(&qword_6499F0);
    a1 = v7;
    if (v8)
    {
      *(void *)&v16[16] = 0x600000005;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)"";
      sub_7873C(qword_6499D8, v16, 6uLL);
      __cxa_guard_release(&qword_6499F0);
      a1 = v7;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649A10, memory_order_acquire) & 1) == 0)
  {
    unsigned int v9 = a1;
    int v10 = __cxa_guard_acquire(&qword_649A10);
    a1 = v9;
    if (v10)
    {
      *(void *)&v16[16] = 0x600000005;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)"";
      sub_7873C(qword_6499F8, v16, 6uLL);
      __cxa_guard_release(&qword_649A10);
      a1 = v9;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649A30, memory_order_acquire) & 1) == 0)
  {
    unsigned int v11 = a1;
    int v12 = __cxa_guard_acquire(&qword_649A30);
    a1 = v11;
    if (v12)
    {
      *(void *)&v16[16] = 0x600000005;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)"";
      sub_7873C(qword_649A18, v16, 6uLL);
      __cxa_guard_release(&qword_649A30);
      a1 = v11;
    }
  }
  uint64_t v1 = qword_6499F8;
  if (a1 <= 0x2E)
  {
    if (((1 << a1) & 0x400F18000000) != 0) {
      return qword_649A18;
    }
    if (((1 << a1) & 0x7000000) != 0) {
      return v1;
    }
  }
  if (a1 != 125)
  {
    unsigned int v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)&v16[4] = "AncManager.cpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 167;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unsupported product type\"", v16, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported product type");
  }
  return v1;
}

void sub_78654(_Unwind_Exception *a1)
{
}

uint64_t sub_786C4(unsigned int a1)
{
  uint64_t result = 8;
  if (a1 > 0x2E) {
    goto LABEL_6;
  }
  if (((1 << a1) & 0x400F18000000) != 0) {
    return 6;
  }
  if (((1 << a1) & 0x7000000) == 0)
  {
LABEL_6:
    if (a1 != 125)
    {
      unsigned int v3 = sub_782C4(a1);
      return (v3[1] - *v3) >> 2;
    }
  }
  return result;
}

void *sub_7873C(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_787C0(a1, a3);
    int v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_787A4(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_787C0(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_60548();
  }
  uint64_t result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

uint64_t sub_78804(float *a1, float a2, float a3, float a4, float a5)
{
  a1[14] = a2;
  a1[15] = a3;
  a1[16] = a4;
  a1[17] = a5;
  return 1;
}

uint64_t sub_78814()
{
  return 0;
}

uint64_t sub_7881C()
{
  return 1;
}

uint64_t sub_78824()
{
  return 1;
}

uint64_t sub_7882C()
{
  return 1;
}

uint64_t sub_78834(uint64_t a1, int a2, __CFString *a3)
{
  if ((atomic_exchange((atomic_uchar *volatile)(a1 + 81), a2) & 1) == a2) {
    return 1;
  }
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = -1;
  int v4 = *(NSObject **)(a1 + 72);
  if (a2)
  {
    unsigned int v5 = v12;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 0x40000000;
    int v6 = &unk_61F220;
    unsigned int v7 = sub_78994;
  }
  else
  {
    unsigned int v5 = block;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    int v6 = &unk_61F270;
    unsigned int v7 = sub_78A10;
  }
  v5[2] = v7;
  v5[3] = v6;
  v5[4] = &v13;
  void v5[5] = a1;
  dispatch_sync(v4, v5);
  uint64_t v9 = *((unsigned int *)v14 + 6);
  BOOL v8 = v9 == 0;
  if (a3 && v9) {
    CFStringAppendFormat(a3, 0, @"%s failed, status = 0x%x\n", "EnableANC", v9);
  }
  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_7897C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_78994(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_78B00;
  v2[3] = &unk_61F1F8;
  long long v3 = *(_OWORD *)(a1 + 32);
  return sub_61CCC((uint64_t)v2);
}

uint64_t sub_78A10(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_78A8C;
  v2[3] = &unk_61F248;
  long long v3 = *(_OWORD *)(a1 + 32);
  return sub_61CCC((uint64_t)v2);
}

uint64_t sub_78A8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  int v6 = 0;
  uint64_t result = sub_3D3C98(*(uint64_t **)(v4 + 8), 0x45616E63u, 0, 0, 4, (float *)&v6, v3);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  *(unsigned char *)(v2 + 80) = 0;
  atomic_store(0, (unsigned __int8 *)(v2 + 82));
  atomic_store(0, (unsigned __int8 *)(v2 + 83));
  return result;
}

uint64_t sub_78B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(unsigned char *)(v1 + 80) = 0;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  int v6 = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_3D3C98(*(uint64_t **)(v3 + 8), 0x45616E63u, 0, 0, 4, (float *)&v6, v2);
  *(void *)(v1 + 48) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 264))(v1, 1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void))(*(void *)v1 + 280);

  return v4(v1, 0);
}

void *sub_78C00(void *a1)
{
  *a1 = off_61F0D0;
  uint64_t v2 = (os_log_t *)sub_32A48(25);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    unsigned int v7 = "AncManager.cpp";
    __int16 v8 = 1024;
    int v9 = 36;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d AncManager removed", (uint8_t *)&v6, 0x12u);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_78D10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_78D1C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_78D24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_78D2C()
{
  return 1;
}

uint64_t sub_78D34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 521);
}

uint64_t sub_78D3C()
{
  return 0;
}

uint64_t sub_78D44()
{
  return 1;
}

uint64_t sub_78D4C()
{
  return 0;
}

uint64_t sub_78D54()
{
  return 0;
}

void sub_78D60(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_78D6C()
{
  return 0;
}

uint64_t sub_78D74()
{
  return 0;
}

uint64_t sub_78D7C()
{
  return 0;
}

uint64_t sub_78D84()
{
  return 0;
}

CFAllocatorRef sub_78D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 528);
  uint64_t v8 = 0x676C6F6241434461;
  int v9 = 0;
  CFAllocatorRef allocator = 0;
  int v6 = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFAllocatorRef *))(*(void *)v3 + 40))(v3, &v8, 0, 0, &v6, &allocator);
  CFAllocatorRef result = allocator;
  if (allocator)
  {
    char v5 = 0;
  }
  else
  {
    CFAllocatorRef result = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    char v5 = 1;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  *(unsigned char *)(a2 + 9) = v5;
  return result;
}

uint64_t sub_78E48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 528);
  uint64_t v3 = 0x676C6F6241434461;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 16))(v1, &v3);
}

CFMutableDictionaryRef sub_78EA0@<X0>(uint64_t a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  return result;
}

uint64_t sub_78EE8()
{
  return 0;
}

CFMutableDictionaryRef sub_78EF0@<X0>(uint64_t a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  return result;
}

uint64_t sub_78F38()
{
  return 0;
}

uint64_t sub_78F40()
{
  return 0;
}

uint64_t sub_78F48()
{
  return 0;
}

uint64_t sub_78F50()
{
  return 0;
}

BOOL sub_78F58(uint64_t a1)
{
  return (*(_WORD *)(a1 + 184) & 0x11) == 16;
}

uint64_t sub_78F70()
{
  return 1;
}

uint64_t sub_78F78()
{
  return 0;
}

uint64_t sub_78F80()
{
  return 0;
}

uint64_t sub_78F88()
{
  return 0;
}

uint64_t sub_78F90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

uint64_t sub_78F98()
{
  return 0;
}

uint64_t sub_78FA0(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t sub_78FA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 264) = a2;
  return result;
}

uint64_t sub_78FB0()
{
  return 1886613355;
}

void sub_78FBC(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_78FF8(uint64_t a1)
{
  sub_72924(a1 + 32);
  sub_72924(a1 + 16);

  return sub_72924(a1);
}

uint64_t sub_79040(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(a1 + 8), 0);

  return notify_post("com.apple.odeon.lla");
}

uint64_t sub_7907C(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(a1 + 8), 1uLL);

  return notify_post("com.apple.odeon.lla");
}

void sub_790B4(uint64_t a1)
{
  notify_cancel(*(_DWORD *)(a1 + 8));

  operator delete();
}

uint64_t sub_79104(uint64_t a1)
{
  return a1;
}

uint64_t sub_79138(uint64_t a1)
{
  return notify_cancel(*(_DWORD *)(a1 + 32));
}

void sub_79158(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61F520;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_791AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61F520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_791CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 8);
  sub_79218(&v3, (int)v1 - 1);
  return *((unsigned int *)v3 + 8);
}

void **sub_79218(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    unsigned int v7 = *result;
    do
    {
      uint64_t v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          int v4 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          int v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          unsigned int v7 = v4;
        }
        while (v5);
      }
      unsigned int v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          int v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  char *result = v4;
  return result;
}

double sub_792A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0.0;
  }
  uint64_t v3 = *(void **)(a1 + 8);
  sub_79218(&v3, (int)v1 - 1);
  LODWORD(result) = *((_DWORD *)v3 + 10);
  return result;
}

void sub_792F0(uint64_t a1, signed int a2, signed int a3, double a4, float a5)
{
  int v6 = (uint64_t **)(a1 + 8);
  BOOL v5 = *(uint64_t ***)(a1 + 8);
  unsigned int v7 = (uint64_t **)(a1 + 16);
  if (v5 == (uint64_t **)(a1 + 16)) {
    goto LABEL_26;
  }
  do
  {
    int v8 = *((_DWORD *)v5 + 7);
    BOOL v9 = *((_DWORD *)v5 + 8) > a2 && v8 < a3;
    char v10 = v9;
    if (v9 || v8 <= a2)
    {
      int v12 = v5;
    }
    else
    {
      unsigned int v11 = v5[1];
      if (v11)
      {
        do
        {
          int v12 = (uint64_t **)v11;
          unsigned int v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (uint64_t **)v5[2];
          BOOL v13 = *v12 == (uint64_t *)v5;
          BOOL v5 = v12;
        }
        while (!v13);
      }
    }
    if (v12 == v7) {
      char v14 = 1;
    }
    else {
      char v14 = v10;
    }
    if (v14) {
      break;
    }
    BOOL v5 = v12;
  }
  while (v8 > a2);
  if ((v10 & 1) == 0)
  {
LABEL_26:
    uint64_t v15 = *v7;
    int v16 = (uint64_t **)(a1 + 16);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          int v16 = (uint64_t **)v15;
          int v17 = *((_DWORD *)v15 + 7);
          if (v17 <= a2) {
            break;
          }
          uint64_t v15 = *v16;
          unsigned int v7 = v16;
          if (!*v16) {
            goto LABEL_33;
          }
        }
        if (v17 >= a2) {
          break;
        }
        uint64_t v15 = v16[1];
        if (!v15)
        {
          unsigned int v7 = v16 + 1;
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      *((float *)&a4 + 1) = a5;
      double v19 = a4;
      unint64_t v20 = __PAIR64__(a3, a2);
      unsigned int v18 = (uint64_t *)operator new(0x30uLL);
      *(uint64_t *)((char *)v18 + 28) = v20;
      *(double *)((char *)v18 + 36) = v19;
      sub_46CA8(v6, (uint64_t)v16, v7, v18);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    BOOL v22 = "CAVolumeCurve.cpp";
    __int16 v23 = 1024;
    int v24 = 214;
    _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CAVolumeCurve::AddRange: new point overlaps", buf, 0x12u);
  }
}

BOOL sub_794DC(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    float v2 = *(float *)(*(void *)(a1 + 8) + 36);
  }
  else {
    float v2 = 0.0;
  }
  double v3 = sub_792A4(a1);
  return (float)(*(float *)&v3 - v2) > 30.0 && *(unsigned char *)(a1 + 32) != 0;
}

float sub_7953C(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    float v5 = *(float *)(*(void *)(a1 + 8) + 36);
  }
  else {
    float v5 = 0.0;
  }
  double v6 = sub_792A4(a1);
  if (v5 <= a2) {
    float v7 = a2;
  }
  else {
    float v7 = v5;
  }
  if (v7 <= *(float *)&v6) {
    *(float *)&double v6 = v7;
  }
  int v8 = *(void **)(a1 + 8);
  int v9 = *((_DWORD *)v8 + 7);
  int v10 = v9;
  if (v8 != (void *)(a1 + 16))
  {
    do
    {
      int v11 = *((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 7);
      float v12 = *((float *)v8 + 10);
      if (*(float *)&v6 > v12)
      {
        v10 += v11;
      }
      else
      {
        unsigned int v13 = llroundf((float)(*(float *)&v6 - *((float *)v8 + 9)) / (float)((float)(v12 - *((float *)v8 + 9))
                                                                           / (float)v11));
        BOOL v14 = __OFADD__(v10, v13);
        int v15 = v10 + v13;
        int v16 = ((int)(v10 | v13) >> 31) ^ 0x7FFFFFFF;
        if (v14) {
          int v10 = v16;
        }
        else {
          int v10 = v15;
        }
      }
      int v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          unsigned int v18 = v17;
          int v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (void *)v8[2];
          BOOL v19 = *v18 == (void)v8;
          int v8 = v18;
        }
        while (!v19);
      }
      BOOL v19 = *(float *)&v6 <= v12 || v18 == (void *)(a1 + 16);
      int v8 = v18;
    }
    while (!v19);
  }
  if (v4) {
    int v20 = v9;
  }
  else {
    int v20 = 0;
  }
  int v21 = sub_791CC(a1);
  if (v20 <= v10) {
    int v22 = v10;
  }
  else {
    int v22 = v20;
  }
  if (v22 >= v21) {
    int v22 = v21;
  }
  float v23 = (float)(v22 - v20) / (float)(v21 - v20);
  if (!sub_794DC(a1)) {
    return v23;
  }
  float v24 = *(float *)(a1 + 40) / *(float *)(a1 + 44);

  return powf(v23, v24);
}

uint64_t sub_796B4(uint64_t a1, float a2)
{
  float v3 = fmaxf(a2, 0.0);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 8) + 28);
  }
  else {
    int v5 = 0;
  }
  float v6 = fminf(v3, 1.0);
  int v7 = sub_791CC(a1);
  if (sub_794DC(a1)) {
    float v6 = powf(v6, *(float *)(a1 + 44) / *(float *)(a1 + 40));
  }
  unsigned int v8 = llroundf(v6 * (float)(v7 - v5));
  BOOL v9 = __OFADD__(v5, v8);
  int v10 = v5 + v8;
  int v11 = ((int)(v5 | v8) >> 31) ^ 0x7FFFFFFF;
  if (v9) {
    int v12 = v11;
  }
  else {
    int v12 = v10;
  }
  if (v4) {
    LODWORD(v4) = *(_DWORD *)(*(void *)(a1 + 8) + 28);
  }
  uint64_t result = sub_791CC(a1);
  if ((int)v4 <= v12) {
    int v14 = v12;
  }
  else {
    int v14 = v4;
  }
  if (v14 >= (int)result) {
    int v14 = result;
  }
  int v15 = v14 - v4;
  int v16 = *(float **)(a1 + 8);
  float v17 = v16[9];
  unsigned int v18 = (float *)(a1 + 16);
  BOOL v19 = v15 < 1 || v16 == v18;
  if (!v19)
  {
    do
    {
      int v20 = *((_DWORD *)v16 + 8) - *((_DWORD *)v16 + 7);
      if (v15 >= v20) {
        int v21 = *((_DWORD *)v16 + 8) - *((_DWORD *)v16 + 7);
      }
      else {
        int v21 = v15;
      }
      int v22 = (float *)*((void *)v16 + 1);
      float v23 = v16;
      if (v22)
      {
        do
        {
          float v24 = v22;
          int v22 = *(float **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          float v24 = (float *)*((void *)v23 + 2);
          BOOL v19 = *(void *)v24 == (void)v23;
          float v23 = v24;
        }
        while (!v19);
      }
      float v17 = v17 + (float)((float)v21 * (float)((float)(v16[10] - v16[9]) / (float)v20));
      v15 -= v21;
      if (v15 < 1) {
        break;
      }
      int v16 = v24;
    }
    while (v24 != v18);
  }
  return result;
}

void *sub_7980C(void *result)
{
  if (!*result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  return result;
}

void sub_79860(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_79874(void *a1, void **a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_15C0C((uint64_t)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_798DC(_Unwind_Exception *a1)
{
  sub_8F90(*v1);
  _Unwind_Resume(a1);
}

void **sub_798F0(uint64_t a1, void **a2)
{
  float v2 = (void **)(a1 + 8);
  float v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_15E8C(v3 + 4, a2);
    if (v6 >= 0) {
      int v7 = v3;
    }
    else {
      int v7 = v3 + 1;
    }
    if (v6 >= 0) {
      int v5 = (void **)v3;
    }
    float v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_15E8C(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

void sub_79970(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_799D0(void *result, CFTypeRef cf)
{
  float v2 = result;
  if (cf)
  {
    CFRetain(cf);
    return sub_14E44(v2, cf);
  }
  else
  {
    char *result = 0;
  }
  return result;
}

uint64_t sub_79A2C(unsigned __int8 *a1, unsigned __int8 *a2, int a3, char a4)
{
  uint64_t v4 = 1668510307;
  uint64_t v5 = 1987208039;
  if (a4) {
    int v6 = a3;
  }
  else {
    int v6 = 0;
  }
  if (v6 > 1935962991)
  {
    if (v6 != 1935962992 && v6 != 1936290409) {
      goto LABEL_11;
    }
    return v4 | (v5 << 32);
  }
  if (!v6)
  {
    sub_7BF54(@"VoiceOver", &cf);
    if (!cf)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_20C54((uint64_t)__p, (const __CFString *)cf);
    uint64_t v10 = a1[23];
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a1[23];
    }
    else {
      uint64_t v11 = *((void *)a1 + 1);
    }
    uint64_t v12 = __p[23];
    int v13 = __p[23];
    if (__p[23] < 0) {
      uint64_t v12 = *(void *)&__p[8];
    }
    if (v11 == v12)
    {
      if (__p[23] >= 0) {
        int v14 = __p;
      }
      else {
        int v14 = *(unsigned __int8 **)__p;
      }
      if ((v10 & 0x80) != 0)
      {
        BOOL v23 = memcmp(*(const void **)a1, v14, *((void *)a1 + 1)) == 0;
        goto LABEL_35;
      }
      if (a1[23])
      {
        uint64_t v15 = v10 - 1;
        int v16 = a1;
        do
        {
          int v18 = *v16++;
          int v17 = v18;
          int v20 = *v14++;
          int v19 = v20;
          BOOL v21 = v15-- != 0;
          char v22 = v21;
          BOOL v23 = v17 == v19;
        }
        while (v17 == v19 && (v22 & 1) != 0);
LABEL_35:
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      }
      BOOL v23 = 1;
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_36;
      }
    }
    else
    {
      BOOL v23 = 0;
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_36:
        if (cf) {
          CFRelease(cf);
        }
        if (v23)
        {
          uint64_t v5 = 1986818931;
          uint64_t v4 = 1668505974;
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649B58, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_649B58))
          {
            sub_799D0(v243, @"AmbientSound");
            int v43 = (const __CFString **)sub_7980C(v243);
            sub_20C54((uint64_t)&cf, *v43);
            CFTypeRef v44 = cf;
            v235[0] = (void *)v225;
            *(void **)((char *)v235 + 7) = *(void **)((char *)&v225 + 7);
            char v45 = HIBYTE(v225);
            long long v225 = 0uLL;
            CFTypeRef cf = 0;
            *(void *)std::string __p = v44;
            *(void **)&__p[8] = v235[0];
            *(void **)&__p[15] = *(void **)((char *)v235 + 7);
            __p[23] = v45;
            v235[0] = 0;
            *(void **)((char *)v235 + 7) = 0;
            *(_DWORD *)&__p[24] = 1667394407;
            sub_799D0(v242, @"SoloAmbientSound");
            uint64_t v46 = (const __CFString **)sub_7980C(v242);
            sub_20C54((uint64_t)&v221, *v46);
            unsigned int v47 = v221;
            v233[0] = (void *)v222;
            *(void **)((char *)v233 + 7) = *(void **)((char *)&v222 + 7);
            char v48 = HIBYTE(v222);
            long long v222 = 0uLL;
            char v221 = 0;
            int v256 = v47;
            *(void **)int v257 = v233[0];
            *(void **)&v257[7] = *(void **)((char *)v233 + 7);
            char v258 = v48;
            v233[0] = 0;
            *(void **)((char *)v233 + 7) = 0;
            int v259 = 1667394407;
            sub_799D0(v241, @"MediaPlayback");
            uint64_t v49 = (const __CFString **)sub_7980C(v241);
            sub_20C54((uint64_t)&v218, *v49);
            unint64_t v50 = v218;
            v231[0] = (void *)v219;
            *(void **)((char *)v231 + 7) = *(void **)((char *)&v219 + 7);
            char v51 = HIBYTE(v219);
            long long v219 = 0uLL;
            uint64_t v218 = 0;
            int v260 = v50;
            *(void **)std::string::size_type v261 = v231[0];
            *(void **)&v261[7] = *(void **)((char *)v231 + 7);
            char v262 = v51;
            v231[0] = 0;
            *(void **)((char *)v231 + 7) = 0;
            int v263 = 1668505974;
            sub_799D0(v240, @"Record");
            char v52 = (const __CFString **)sub_7980C(v240);
            sub_20C54((uint64_t)&v215, *v52);
            int v53 = v215;
            v229[0] = (void *)v216;
            *(void **)((char *)v229 + 7) = *(void **)((char *)&v216 + 7);
            char v54 = HIBYTE(v216);
            long long v216 = 0uLL;
            int v215 = 0;
            UInt32 v264 = v53;
            *(void **)int v265 = v229[0];
            *(void **)&v265[7] = *(void **)((char *)v229 + 7);
            char v266 = v54;
            v229[0] = 0;
            *(void **)((char *)v229 + 7) = 0;
            int v267 = 1668441443;
            sub_799D0(v239, @"PlayAndRecord");
            __int16 v55 = (const __CFString **)sub_7980C(v239);
            sub_20C54((uint64_t)&v212, *v55);
            int v56 = v212;
            v227[0] = (void *)v213;
            *(void **)((char *)v227 + 7) = *(void **)((char *)&v213 + 7);
            char v57 = HIBYTE(v213);
            long long v213 = 0uLL;
            uint64_t v212 = 0;
            int v268 = v56;
            *(void **)std::string::size_type v269 = v227[0];
            *(void **)&v269[7] = *(void **)((char *)v227 + 7);
            char v270 = v57;
            v227[0] = 0;
            *(void **)((char *)v227 + 7) = 0;
            int v271 = 1668309362;
            sub_799D0(v238, @"Ringtone");
            uint64_t v58 = (const __CFString **)sub_7980C(v238);
            sub_20C54((uint64_t)&v209, *v58);
            __int16 v59 = v209;
            v226[0] = (void *)v210;
            *(void **)((char *)v226 + 7) = *(void **)((char *)&v210 + 7);
            char v60 = HIBYTE(v210);
            long long v210 = 0uLL;
            std::string::size_type v209 = 0;
            __n128 v272 = v59;
            *(void **)v273 = v226[0];
            *(void **)&v273[7] = *(void **)((char *)v226 + 7);
            char v274 = v60;
            v226[0] = 0;
            *(void **)((char *)v226 + 7) = 0;
            int v275 = 1668443751;
            sub_799D0(v237, @"Voicemail");
            __int16 v61 = (const __CFString **)sub_7980C(v237);
            sub_20C54((uint64_t)&v206, *v61);
            int v62 = v206;
            v254[0] = v207;
            *(void *)((char *)v254 + 7) = *(void *)((char *)&v207 + 7);
            char v63 = HIBYTE(v207);
            long long v207 = 0uLL;
            unsigned int v206 = 0;
            uint64_t v276 = v62;
            *(void *)int v277 = v254[0];
            *(void *)&v277[7] = *(void *)((char *)v254 + 7);
            char v278 = v63;
            v254[0] = 0;
            *(void *)((char *)v254 + 7) = 0;
            int v279 = 1668705568;
            sub_799D0(v236, @"VoicemailGreeting");
            int v64 = (const __CFString **)sub_7980C(v236);
            sub_20C54((uint64_t)&v203, *v64);
            __int16 v65 = v203;
            v253[0] = v204;
            *(void *)((char *)v253 + 7) = *(void *)((char *)&v204 + 7);
            char v66 = HIBYTE(v204);
            long long v204 = 0uLL;
            char v203 = 0;
            uint64_t v280 = v65;
            *(void *)uint64_t v281 = v253[0];
            *(void *)&v281[7] = *(void *)((char *)v253 + 7);
            char v282 = v66;
            v253[0] = 0;
            *(void *)((char *)v253 + 7) = 0;
            int v283 = 1668705639;
            sub_799D0(v234, @"PhoneCall");
            __int16 v67 = (const __CFString **)sub_7980C(v234);
            sub_20C54((uint64_t)&v200, *v67);
            unsigned int v68 = v200;
            v252[0] = v201;
            HIBYTE(v252[0]) = BYTE7(v201);
            *(void *)&v285[7] = *(void *)((char *)&v201 + 7);
            char v69 = HIBYTE(v201);
            long long v201 = 0uLL;
            uint64_t v200 = 0;
            uint64_t v284 = v68;
            *(void *)int v285 = v252[0];
            char v286 = v69;
            v252[0] = 0;
            *(void *)((char *)v252 + 7) = 0;
            int v287 = 1668703084;
            sub_799D0(v232, @"TTYCall");
            double v70 = (const __CFString **)sub_7980C(v232);
            sub_20C54((uint64_t)&v197, *v70);
            __int16 v71 = v197;
            v251[0] = v198;
            HIBYTE(v251[0]) = BYTE7(v198);
            *(void *)&v289[7] = *(void *)((char *)&v198 + 7);
            char v72 = HIBYTE(v198);
            long long v198 = 0uLL;
            int v197 = 0;
            UInt32 v288 = v71;
            *(void *)uint64_t v289 = v251[0];
            char v290 = v72;
            v251[0] = 0;
            *(void *)((char *)v251 + 7) = 0;
            int v291 = 1668576377;
            sub_799D0(v230, @"Alarm");
            uint64_t v73 = (const __CFString **)sub_7980C(v230);
            sub_20C54((uint64_t)&v194, *v73);
            uint64_t v74 = v194;
            v250[0] = v195;
            HIBYTE(v250[0]) = BYTE7(v195);
            *(void *)&v293[7] = *(void *)((char *)&v195 + 7);
            char v75 = HIBYTE(v195);
            long long v195 = 0uLL;
            unsigned int v194 = 0;
            int v292 = v74;
            *(void *)uint64_t v293 = v250[0];
            char v294 = v75;
            v250[0] = 0;
            *(void *)((char *)v250 + 7) = 0;
            int v295 = 1667329133;
            sub_799D0(v228, @"MediaPlaybackNoSpeaker");
            unint64_t v76 = (const __CFString **)sub_7980C(v228);
            sub_20C54((uint64_t)&v191, *v76);
            uint64_t v77 = v191;
            v249[0] = v192;
            HIBYTE(v249[0]) = BYTE7(v192);
            *(void *)&v297[7] = *(void *)((char *)&v192 + 7);
            char v78 = HIBYTE(v192);
            long long v192 = 0uLL;
            int v191 = 0;
            v296 = v77;
            *(void *)unsigned int v297 = v249[0];
            char v298 = v78;
            v249[0] = 0;
            *(void *)((char *)v249 + 7) = 0;
            int v299 = 1668182896;
            sub_799D0(&v223, @"Alert");
            uint64_t v79 = (const __CFString **)sub_7980C(&v223);
            sub_20C54((uint64_t)&v188, *v79);
            unint64_t v80 = v188;
            v248[0] = v189;
            HIBYTE(v248[0]) = BYTE7(v189);
            *(void *)&v301[7] = *(void *)((char *)&v189 + 7);
            char v81 = HIBYTE(v189);
            long long v189 = 0uLL;
            int v188 = 0;
            int v300 = v80;
            *(void *)int v301 = v248[0];
            char v302 = v81;
            v248[0] = 0;
            *(void *)((char *)v248 + 7) = 0;
            int v303 = 1667591521;
            sub_799D0(&v220, @"EmergencyAlert");
            uint64_t v82 = (const __CFString **)sub_7980C(&v220);
            sub_20C54((uint64_t)&v185, *v82);
            uint64_t v83 = v185;
            v247[0] = v186;
            HIBYTE(v247[0]) = BYTE7(v186);
            *(void *)&v305[7] = *(void *)((char *)&v186 + 7);
            char v84 = HIBYTE(v186);
            long long v186 = 0uLL;
            CFArrayRef v185 = 0;
            int v304 = v83;
            *(void *)char v305 = v247[0];
            char v306 = v84;
            v247[0] = 0;
            *(void *)((char *)v247 + 7) = 0;
            int v307 = 1667591521;
            sub_799D0(&v217, @"EmergencyAlert_Muteable");
            unint64_t v85 = (const __CFString **)sub_7980C(&v217);
            sub_20C54((uint64_t)&v182, *v85);
            unint64_t v86 = v182;
            v246[0] = v183;
            HIBYTE(v246[0]) = BYTE7(v183);
            *(void *)&v309[7] = *(void *)((char *)&v183 + 7);
            char v87 = HIBYTE(v183);
            long long v183 = 0uLL;
            uint64_t v182 = 0;
            int v308 = v86;
            *(void *)char v309 = v246[0];
            char v310 = v87;
            v246[0] = 0;
            *(void *)((char *)v246 + 7) = 0;
            int v311 = 1667591533;
            sub_799D0(&v214, @"FindMyPhone");
            unint64_t v88 = (const __CFString **)sub_7980C(&v214);
            sub_20C54((uint64_t)&v179, *v88);
            uint64_t v89 = v179;
            v245[0] = v180;
            HIBYTE(v245[0]) = BYTE7(v180);
            *(void *)&v313[7] = *(void *)((char *)&v180 + 7);
            char v90 = HIBYTE(v180);
            long long v180 = 0uLL;
            uint64_t v179 = 0;
            UInt32 v312 = v89;
            *(void *)int v313 = v245[0];
            char v314 = v90;
            v245[0] = 0;
            *(void *)((char *)v245 + 7) = 0;
            int v315 = 1667657072;
            sub_799D0(&v211, @"FindMyAudioDevice");
            uint64_t v91 = (const __CFString **)sub_7980C(&v211);
            sub_20C54((uint64_t)&v176, *v91);
            uint64_t v92 = v176;
            v244[0] = v177;
            *(void *)((char *)v244 + 7) = *(void *)((char *)&v177 + 7);
            char v93 = HIBYTE(v177);
            long long v177 = 0uLL;
            unint64_t v176 = 0;
            int v316 = v92;
            *(void *)&v317[7] = *(void *)((char *)v244 + 7);
            *(void *)v317 = v244[0];
            char v318 = v93;
            v244[0] = 0;
            *(void *)((char *)v244 + 7) = 0;
            int v319 = 1667657057;
            sub_799D0(&v208, @"InputInjection");
            uint64_t v94 = (const __CFString **)sub_7980C(&v208);
            sub_20C54((uint64_t)&v173, *v94);
            *(void *)&v321[7] = *(void *)((char *)&v174 + 7);
            unint64_t v95 = v173;
            *(void *)uint64_t v321 = v174;
            char v96 = HIBYTE(v174);
            long long v174 = 0uLL;
            uint64_t v173 = 0;
            uint64_t v320 = v95;
            char v322 = v96;
            int v323 = 1667853930;
            sub_79874(qword_649B40, (void **)__p, 18);
            uint64_t v97 = 72;
            do
            {
              if (SHIBYTE(v254[v97]) < 0) {
                operator delete((void *)v253[v97]);
              }
              v97 -= 4;
            }
            while (v97 * 8);
            if (SHIBYTE(v174) < 0) {
              operator delete(v173);
            }
            sub_6393C(&v208);
            if (SHIBYTE(v177) < 0) {
              operator delete(v176);
            }
            sub_6393C(&v211);
            if (SHIBYTE(v180) < 0) {
              operator delete(v179);
            }
            sub_6393C(&v214);
            if (SHIBYTE(v183) < 0) {
              operator delete(v182);
            }
            sub_6393C(&v217);
            if (SHIBYTE(v186) < 0) {
              operator delete(v185);
            }
            sub_6393C(&v220);
            if (SHIBYTE(v189) < 0) {
              operator delete(v188);
            }
            sub_6393C(&v223);
            if (SHIBYTE(v192) < 0) {
              operator delete(v191);
            }
            sub_6393C(v228);
            if (SHIBYTE(v195) < 0) {
              operator delete(v194);
            }
            sub_6393C(v230);
            if (SHIBYTE(v198) < 0) {
              operator delete(v197);
            }
            sub_6393C(v232);
            if (SHIBYTE(v201) < 0) {
              operator delete(v200);
            }
            sub_6393C(v234);
            if (SHIBYTE(v204) < 0) {
              operator delete(v203);
            }
            sub_6393C(v236);
            if (SHIBYTE(v207) < 0) {
              operator delete(v206);
            }
            sub_6393C(v237);
            if (SHIBYTE(v210) < 0) {
              operator delete(v209);
            }
            sub_6393C(v238);
            if (SHIBYTE(v213) < 0) {
              operator delete(v212);
            }
            sub_6393C(v239);
            if (SHIBYTE(v216) < 0) {
              operator delete(v215);
            }
            sub_6393C(v240);
            if (SHIBYTE(v219) < 0) {
              operator delete(v218);
            }
            sub_6393C(v241);
            if (SHIBYTE(v222) < 0) {
              operator delete(v221);
            }
            sub_6393C(v242);
            if (SHIBYTE(v225) < 0) {
              operator delete((void *)cf);
            }
            sub_6393C(v243);
            __cxa_guard_release(&qword_649B58);
          }
          float v24 = sub_798F0((uint64_t)qword_649B40, (void **)a1);
          if (v24 == &qword_649B40[1]) {
            unsigned int v25 = 0;
          }
          else {
            unsigned int v25 = *((_DWORD *)v24 + 14);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649B78, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_649B78))
          {
            sub_799D0(&v223, @"Default");
            unint64_t v98 = (const __CFString **)sub_7980C(&v223);
            sub_20C54((uint64_t)&cf, *v98);
            CFTypeRef v99 = cf;
            v254[0] = v225;
            *(void *)((char *)v254 + 7) = *(void *)((char *)&v225 + 7);
            char v100 = HIBYTE(v225);
            long long v225 = 0uLL;
            CFTypeRef cf = 0;
            *(void *)std::string __p = v99;
            *(void *)&__p[8] = v254[0];
            *(void *)&__p[15] = *(void *)((char *)v254 + 7);
            __p[23] = v100;
            v254[0] = 0;
            *(void *)((char *)v254 + 7) = 0;
            *(_DWORD *)&__p[24] = 1768776806;
            sub_799D0(&v220, @"VoiceChat");
            uint64_t v101 = (const __CFString **)sub_7980C(&v220);
            sub_20C54((uint64_t)&v221, *v101);
            uint64_t v102 = v221;
            v253[0] = v222;
            *(void *)((char *)v253 + 7) = *(void *)((char *)&v222 + 7);
            char v103 = HIBYTE(v222);
            long long v222 = 0uLL;
            char v221 = 0;
            int v256 = v102;
            *(void *)int v257 = v253[0];
            *(void *)&v257[7] = *(void *)((char *)v253 + 7);
            char v258 = v103;
            v253[0] = 0;
            *(void *)((char *)v253 + 7) = 0;
            int v259 = 1768779619;
            sub_799D0(&v217, @"RemoteVoiceChat");
            unsigned int v104 = (const __CFString **)sub_7980C(&v217);
            sub_20C54((uint64_t)&v218, *v104);
            UInt32 v105 = v218;
            v252[0] = v219;
            *(void *)((char *)v252 + 7) = *(void *)((char *)&v219 + 7);
            char v106 = HIBYTE(v219);
            long long v219 = 0uLL;
            uint64_t v218 = 0;
            int v260 = v105;
            *(void *)std::string::size_type v261 = v252[0];
            *(void *)&v261[7] = *(void *)((char *)v252 + 7);
            char v262 = v106;
            v252[0] = 0;
            *(void *)((char *)v252 + 7) = 0;
            int v263 = 1919776355;
            sub_799D0(&v214, @"GameChat");
            uint64_t v107 = (const __CFString **)sub_7980C(&v214);
            sub_20C54((uint64_t)&v215, *v107);
            uint64_t v108 = v215;
            v251[0] = v216;
            *(void *)((char *)v251 + 7) = *(void *)((char *)&v216 + 7);
            char v109 = HIBYTE(v216);
            long long v216 = 0uLL;
            int v215 = 0;
            UInt32 v264 = v108;
            *(void *)int v265 = v251[0];
            *(void *)&v265[7] = *(void *)((char *)v251 + 7);
            char v266 = v109;
            v251[0] = 0;
            *(void *)((char *)v251 + 7) = 0;
            int v267 = 1735222132;
            sub_799D0(&v211, @"VideoRecording");
            long long v110 = (const __CFString **)sub_7980C(&v211);
            sub_20C54((uint64_t)&v212, *v110);
            uint64_t v111 = v212;
            v250[0] = v213;
            *(void *)((char *)v250 + 7) = *(void *)((char *)&v213 + 7);
            char v112 = HIBYTE(v213);
            long long v213 = 0uLL;
            uint64_t v212 = 0;
            int v268 = v111;
            *(void *)std::string::size_type v269 = v250[0];
            *(void *)&v269[7] = *(void *)((char *)v250 + 7);
            char v270 = v112;
            v250[0] = 0;
            *(void *)((char *)v250 + 7) = 0;
            int v271 = 1768781426;
            sub_799D0(&v208, @"Measurement");
            BOOL v113 = (const __CFString **)sub_7980C(&v208);
            sub_20C54((uint64_t)&v209, *v113);
            std::string::size_type v114 = v209;
            v249[0] = v210;
            *(void *)((char *)v249 + 7) = *(void *)((char *)&v210 + 7);
            char v115 = HIBYTE(v210);
            long long v210 = 0uLL;
            std::string::size_type v209 = 0;
            __n128 v272 = v114;
            *(void *)v273 = v249[0];
            *(void *)&v273[7] = *(void *)((char *)v249 + 7);
            char v274 = v115;
            v249[0] = 0;
            *(void *)((char *)v249 + 7) = 0;
            int v275 = 1836281204;
            sub_799D0(&v205, @"MoviePlayback");
            uint64_t v116 = (const __CFString **)sub_7980C(&v205);
            sub_20C54((uint64_t)&v206, *v116);
            int v117 = v206;
            v248[0] = v207;
            *(void *)((char *)v248 + 7) = *(void *)((char *)&v207 + 7);
            char v118 = HIBYTE(v207);
            long long v207 = 0uLL;
            unsigned int v206 = 0;
            uint64_t v276 = v117;
            *(void *)int v277 = v248[0];
            *(void *)&v277[7] = *(void *)((char *)v248 + 7);
            char v278 = v118;
            v248[0] = 0;
            *(void *)((char *)v248 + 7) = 0;
            int v279 = 1836021360;
            sub_799D0(&v202, @"SpokenAudio");
            uint64_t v119 = (const __CFString **)sub_7980C(&v202);
            sub_20C54((uint64_t)&v203, *v119);
            uint64_t v120 = v203;
            v247[0] = v204;
            *(void *)((char *)v247 + 7) = *(void *)((char *)&v204 + 7);
            char v121 = HIBYTE(v204);
            long long v204 = 0uLL;
            char v203 = 0;
            uint64_t v280 = v120;
            *(void *)uint64_t v281 = v247[0];
            *(void *)&v281[7] = *(void *)((char *)v247 + 7);
            char v282 = v121;
            v247[0] = 0;
            *(void *)((char *)v247 + 7) = 0;
            int v283 = 1936747374;
            sub_799D0(&v199, @"VideoChat");
            unint64_t v122 = (const __CFString **)sub_7980C(&v199);
            sub_20C54((uint64_t)&v200, *v122);
            uint64_t v123 = v200;
            v246[0] = v201;
            HIBYTE(v246[0]) = BYTE7(v201);
            *(void *)&v285[7] = *(void *)((char *)&v201 + 7);
            char v124 = HIBYTE(v201);
            long long v201 = 0uLL;
            uint64_t v200 = 0;
            uint64_t v284 = v123;
            *(void *)int v285 = v246[0];
            char v286 = v124;
            v246[0] = 0;
            *(void *)((char *)v246 + 7) = 0;
            int v287 = 1768781411;
            sub_799D0(&v196, @"SpeechRecognition");
            uint64_t v125 = (const __CFString **)sub_7980C(&v196);
            sub_20C54((uint64_t)&v197, *v125);
            uint64_t v126 = v197;
            v245[0] = v198;
            HIBYTE(v245[0]) = BYTE7(v198);
            *(void *)&v289[7] = *(void *)((char *)&v198 + 7);
            char v127 = HIBYTE(v198);
            long long v198 = 0uLL;
            int v197 = 0;
            UInt32 v288 = v126;
            *(void *)uint64_t v289 = v245[0];
            char v290 = v127;
            v245[0] = 0;
            *(void *)((char *)v245 + 7) = 0;
            int v291 = 1987208039;
            sub_799D0(&v193, @"VoicePrompt");
            uint64_t v128 = (const __CFString **)sub_7980C(&v193);
            sub_20C54((uint64_t)&v194, *v128);
            CFDictionaryRef v129 = v194;
            v244[0] = v195;
            HIBYTE(v244[0]) = BYTE7(v195);
            *(void *)&v293[7] = *(void *)((char *)&v195 + 7);
            char v130 = HIBYTE(v195);
            long long v195 = 0uLL;
            unsigned int v194 = 0;
            int v292 = v129;
            *(void *)uint64_t v293 = v244[0];
            char v294 = v130;
            v244[0] = 0;
            *(void *)((char *)v244 + 7) = 0;
            int v295 = 1987080813;
            sub_799D0(&v190, @"Raw");
            CFStringRef v131 = (const __CFString **)sub_7980C(&v190);
            sub_20C54((uint64_t)&v191, *v131);
            char v132 = v191;
            v243[0] = (const void *)v192;
            HIBYTE(v243[0]) = BYTE7(v192);
            *(void *)&v297[7] = *(void *)((char *)&v192 + 7);
            char v133 = HIBYTE(v192);
            long long v192 = 0uLL;
            int v191 = 0;
            v296 = v132;
            *(const void **)unsigned int v297 = v243[0];
            char v298 = v133;
            memset(v243, 0, 15);
            int v299 = 1918990112;
            sub_799D0(&v187, @"VoiceMessages");
            CFTypeRef v134 = (const __CFString **)sub_7980C(&v187);
            sub_20C54((uint64_t)&v188, *v134);
            uint64_t v135 = v188;
            v242[0] = (const void *)v189;
            HIBYTE(v242[0]) = BYTE7(v189);
            *(void *)&v301[7] = *(void *)((char *)&v189 + 7);
            char v136 = HIBYTE(v189);
            long long v189 = 0uLL;
            int v188 = 0;
            int v300 = v135;
            *(const void **)int v301 = v242[0];
            char v302 = v136;
            memset(v242, 0, 15);
            int v303 = 1986884455;
            sub_799D0(&v184, @"FindMyPhone");
            unint64_t v137 = (const __CFString **)sub_7980C(&v184);
            sub_20C54((uint64_t)&v185, *v137);
            uint64_t v138 = v185;
            v241[0] = (const void *)v186;
            HIBYTE(v241[0]) = BYTE7(v186);
            *(void *)&v305[7] = *(void *)((char *)&v186 + 7);
            char v139 = HIBYTE(v186);
            long long v186 = 0uLL;
            CFArrayRef v185 = 0;
            int v304 = v138;
            *(const void **)char v305 = v241[0];
            char v306 = v139;
            memset(v241, 0, 15);
            int v307 = 1768776806;
            sub_799D0(&v181, @"HearingAccessibility");
            uint64_t v140 = (const __CFString **)sub_7980C(&v181);
            sub_20C54((uint64_t)&v182, *v140);
            int v141 = v182;
            v240[0] = (const void *)v183;
            HIBYTE(v240[0]) = BYTE7(v183);
            *(void *)&v309[7] = *(void *)((char *)&v183 + 7);
            char v142 = HIBYTE(v183);
            long long v183 = 0uLL;
            uint64_t v182 = 0;
            int v308 = v141;
            *(const void **)char v309 = v240[0];
            char v310 = v142;
            memset(v240, 0, 15);
            int v311 = 1751212899;
            sub_799D0(&v178, @"LivePhoto");
            uint64_t v143 = (const __CFString **)sub_7980C(&v178);
            sub_20C54((uint64_t)&v179, *v143);
            uint64_t v144 = v179;
            v239[0] = (const void *)v180;
            HIBYTE(v239[0]) = BYTE7(v180);
            *(void *)&v313[7] = *(void *)((char *)&v180 + 7);
            char v145 = HIBYTE(v180);
            long long v180 = 0uLL;
            uint64_t v179 = 0;
            UInt32 v312 = v144;
            *(const void **)int v313 = v239[0];
            char v314 = v145;
            memset(v239, 0, 15);
            int v315 = 1768778864;
            sub_799D0(&v175, @"SOSNotification");
            unint64_t v146 = (const __CFString **)sub_7980C(&v175);
            sub_20C54((uint64_t)&v176, *v146);
            unint64_t v147 = v176;
            v238[0] = (const void *)v177;
            *(const void **)((char *)v238 + 7) = *(const void **)((char *)&v177 + 7);
            char v148 = HIBYTE(v177);
            long long v177 = 0uLL;
            unint64_t v176 = 0;
            int v316 = v147;
            *(const void **)&v317[7] = *(const void **)((char *)v238 + 7);
            *(const void **)v317 = v238[0];
            char v318 = v148;
            memset(v238, 0, 15);
            int v319 = 1936683886;
            sub_799D0(&v172, @"SpatialRecording");
            UInt32 v149 = (const __CFString **)sub_7980C(&v172);
            sub_20C54((uint64_t)&v173, *v149);
            uint64_t v150 = v173;
            v237[0] = (const void *)v174;
            *(const void **)((char *)v237 + 7) = *(const void **)((char *)&v174 + 7);
            char v151 = HIBYTE(v174);
            long long v174 = 0uLL;
            uint64_t v173 = 0;
            uint64_t v320 = v150;
            *(const void **)&v321[7] = *(const void **)((char *)v237 + 7);
            *(const void **)uint64_t v321 = v237[0];
            char v322 = v151;
            memset(v237, 0, 15);
            int v323 = 1936749157;
            sub_799D0(&v171, @"SoundRecognition");
            uint64_t v152 = (const __CFString **)sub_7980C(&v171);
            sub_20C54((uint64_t)v235, *v152);
            uint64_t v153 = v235[0];
            v236[0] = v235[1];
            *(const void **)((char *)v236 + 7) = *(const void **)((char *)&v235[1] + 7);
            char v154 = HIBYTE(v235[2]);
            memset(v235, 0, sizeof(v235));
            int v324 = v153;
            *(const void **)&v325[7] = *(const void **)((char *)v236 + 7);
            *(const void **)int v325 = v236[0];
            char v326 = v154;
            memset(v236, 0, 15);
            int v327 = 1768776806;
            sub_799D0(&v170, @"VideoChatForMedia");
            uint64_t v155 = (const __CFString **)sub_7980C(&v170);
            sub_20C54((uint64_t)v233, *v155);
            unint64_t v156 = v233[0];
            v234[0] = v233[1];
            *(const void **)((char *)v234 + 7) = *(const void **)((char *)&v233[1] + 7);
            char v157 = HIBYTE(v233[2]);
            memset(v233, 0, sizeof(v233));
            int v328 = v156;
            *(const void **)&v329[7] = *(const void **)((char *)v234 + 7);
            *(const void **)uint64_t v329 = v234[0];
            char v330 = v157;
            memset(v234, 0, 15);
            int v331 = 1768781411;
            sub_21B7C(v231, @"EchoCancellationVoice");
            uint64_t v158 = v231[0];
            v232[0] = v231[1];
            *(const void **)((char *)v232 + 7) = *(const void **)((char *)&v231[1] + 7);
            char v159 = HIBYTE(v231[2]);
            memset(v231, 0, sizeof(v231));
            int v332 = v158;
            *(const void **)&v333[7] = *(const void **)((char *)v232 + 7);
            *(const void **)uint64_t v333 = v232[0];
            char v334 = v159;
            memset(v232, 0, 15);
            int v335 = 1701017120;
            sub_21B7C(v229, @"VoiceAssistant");
            uint64_t v160 = v229[0];
            v230[0] = v229[1];
            *(const void **)((char *)v230 + 7) = *(const void **)((char *)&v229[1] + 7);
            char v161 = HIBYTE(v229[2]);
            memset(v229, 0, sizeof(v229));
            UInt32 v336 = v160;
            *(const void **)&v337[7] = *(const void **)((char *)v230 + 7);
            *(const void **)int v337 = v230[0];
            char v338 = v161;
            memset(v230, 0, 15);
            int v339 = 1986098036;
            sub_21B7C(v227, @"EchoCancellationInput");
            uint64_t v162 = v227[0];
            v228[0] = v227[1];
            *(const void **)((char *)v228 + 7) = *(const void **)((char *)&v227[1] + 7);
            char v163 = HIBYTE(v227[2]);
            memset(v227, 0, sizeof(v227));
            int v340 = v162;
            *(const void **)&v341[7] = *(const void **)((char *)v228 + 7);
            *(const void **)int v341 = v228[0];
            char v342 = v163;
            memset(v228, 0, 15);
            int v343 = 1701013792;
            sub_799D0(&v169, @"LowLatency");
            int v164 = (const __CFString **)sub_7980C(&v169);
            sub_20C54((uint64_t)v226, *v164);
            *(void **)&v345[7] = *(void **)((char *)&v226[1] + 7);
            uint64_t v165 = v226[0];
            *(void **)v345 = v226[1];
            char v166 = HIBYTE(v226[2]);
            memset(v226, 0, sizeof(v226));
            int v344 = v165;
            char v346 = v166;
            int v347 = 1768776806;
            sub_79874(qword_649B60, (void **)__p, 24);
            uint64_t v167 = 96;
            do
            {
              if (SHIBYTE(v254[v167]) < 0) {
                operator delete((void *)v253[v167]);
              }
              v167 -= 4;
            }
            while (v167 * 8);
            if (SHIBYTE(v226[2]) < 0) {
              operator delete(v226[0]);
            }
            sub_6393C(&v169);
            if (SHIBYTE(v227[2]) < 0) {
              operator delete(v227[0]);
            }
            if (SHIBYTE(v229[2]) < 0) {
              operator delete(v229[0]);
            }
            if (SHIBYTE(v231[2]) < 0) {
              operator delete(v231[0]);
            }
            if (SHIBYTE(v233[2]) < 0) {
              operator delete(v233[0]);
            }
            sub_6393C(&v170);
            if (SHIBYTE(v235[2]) < 0) {
              operator delete(v235[0]);
            }
            sub_6393C(&v171);
            if (SHIBYTE(v174) < 0) {
              operator delete(v173);
            }
            sub_6393C(&v172);
            if (SHIBYTE(v177) < 0) {
              operator delete(v176);
            }
            sub_6393C(&v175);
            if (SHIBYTE(v180) < 0) {
              operator delete(v179);
            }
            sub_6393C(&v178);
            if (SHIBYTE(v183) < 0) {
              operator delete(v182);
            }
            sub_6393C(&v181);
            if (SHIBYTE(v186) < 0) {
              operator delete(v185);
            }
            sub_6393C(&v184);
            if (SHIBYTE(v189) < 0) {
              operator delete(v188);
            }
            sub_6393C(&v187);
            if (SHIBYTE(v192) < 0) {
              operator delete(v191);
            }
            sub_6393C(&v190);
            if (SHIBYTE(v195) < 0) {
              operator delete(v194);
            }
            sub_6393C(&v193);
            if (SHIBYTE(v198) < 0) {
              operator delete(v197);
            }
            sub_6393C(&v196);
            if (SHIBYTE(v201) < 0) {
              operator delete(v200);
            }
            sub_6393C(&v199);
            if (SHIBYTE(v204) < 0) {
              operator delete(v203);
            }
            sub_6393C(&v202);
            if (SHIBYTE(v207) < 0) {
              operator delete(v206);
            }
            sub_6393C(&v205);
            if (SHIBYTE(v210) < 0) {
              operator delete(v209);
            }
            sub_6393C(&v208);
            if (SHIBYTE(v213) < 0) {
              operator delete(v212);
            }
            sub_6393C(&v211);
            if (SHIBYTE(v216) < 0) {
              operator delete(v215);
            }
            sub_6393C(&v214);
            if (SHIBYTE(v219) < 0) {
              operator delete(v218);
            }
            sub_6393C(&v217);
            if (SHIBYTE(v222) < 0) {
              operator delete(v221);
            }
            sub_6393C(&v220);
            if (SHIBYTE(v225) < 0) {
              operator delete((void *)cf);
            }
            sub_6393C(&v223);
            __cxa_guard_release(&qword_649B78);
          }
          int v26 = sub_798F0((uint64_t)qword_649B60, (void **)a2);
          if (v26 == &qword_649B60[1])
          {
            uint64_t v27 = *(id *)sub_32A48(20);
            unint64_t v28 = v27;
            if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              if ((a2[23] & 0x80u) == 0) {
                unint64_t v29 = a2;
              }
              else {
                unint64_t v29 = *(void **)a2;
              }
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "AudioSessionUtilities.mm";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 336;
              *(_WORD *)&unsigned char __p[18] = 2080;
              *(void *)&__p[20] = v29;
              _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX mode %s not recognized", __p, 0x1Cu);
            }

            uint64_t v5 = 1768776806;
          }
          else
          {
            uint64_t v5 = *((unsigned int *)v26 + 14);
          }
          if (v25 != 1668309362) {
            goto LABEL_85;
          }
          CFRetain(@"SoundRecognition");
          sub_14E44(&cf, @"SoundRecognition");
          if (!cf)
          {
            uint64_t v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v168, "Could not construct");
          }
          sub_20C54((uint64_t)__p, (const __CFString *)cf);
          uint64_t v30 = a2[23];
          if ((v30 & 0x80u) == 0) {
            uint64_t v31 = a2[23];
          }
          else {
            uint64_t v31 = *((void *)a2 + 1);
          }
          uint64_t v32 = __p[23];
          int v33 = __p[23];
          if (__p[23] < 0) {
            uint64_t v32 = *(void *)&__p[8];
          }
          if (v31 == v32)
          {
            uint64_t v34 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
            if ((v30 & 0x80) != 0)
            {
              BOOL v41 = memcmp(*(const void **)a2, v34, *((void *)a2 + 1)) == 0;
            }
            else if (a2[23])
            {
              uint64_t v35 = v30 - 1;
              do
              {
                int v37 = *a2++;
                int v36 = v37;
                int v39 = *v34++;
                int v38 = v39;
                BOOL v21 = v35-- != 0;
                char v40 = v21;
                BOOL v41 = v36 == v38;
              }
              while (v36 == v38 && (v40 & 1) != 0);
            }
            else
            {
              BOOL v41 = 1;
            }
          }
          else
          {
            BOOL v41 = 0;
          }
          if (v33 < 0) {
            operator delete(*(void **)__p);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v41) {
            uint64_t v4 = 1668441443;
          }
          else {
LABEL_85:
          }
            uint64_t v4 = v25;
        }
        return v4 | (v5 << 32);
      }
    }
LABEL_33:
    operator delete(*(void **)__p);
    goto LABEL_36;
  }
  if (v6 != 1819309171 && v6 != 1885696611) {
LABEL_11:
  }
    uint64_t v5 = 1768776806;
  return v4 | (v5 << 32);
}

void sub_7B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, const void *a11, const void *a12, const void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,const void *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,const void *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,const void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,const void *a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,const void *a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,const void *a62,void *a63)
{
  uint64_t v92 = 768;
  while (1)
  {
    if (*(char *)(v90 + v92 - 9) < 0) {
      operator delete(*(void **)(v90 + v92 - 32));
    }
    v92 -= 32;
    if (!v92)
    {
      if (SLOBYTE(STACK[0x277]) < 0) {
        operator delete((void *)STACK[0x260]);
      }
      sub_6393C(&a10);
      if (SLOBYTE(STACK[0x28F]) < 0) {
        operator delete((void *)STACK[0x278]);
      }
      if (SLOBYTE(STACK[0x2B7]) < 0) {
        operator delete((void *)STACK[0x2A0]);
      }
      if (SLOBYTE(STACK[0x2DF]) < 0) {
        operator delete((void *)STACK[0x2C8]);
      }
      if (SLOBYTE(STACK[0x307]) < 0) {
        operator delete((void *)STACK[0x2F0]);
      }
      sub_6393C(&a11);
      if (SLOBYTE(STACK[0x32F]) < 0) {
        operator delete((void *)STACK[0x318]);
      }
      sub_6393C(&a12);
      if (a19 < 0) {
        operator delete(a14);
      }
      sub_6393C(&a13);
      if (a26 < 0) {
        operator delete(a21);
      }
      sub_6393C(&a20);
      if (a33 < 0) {
        operator delete(a28);
      }
      sub_6393C(&a27);
      if (a40 < 0) {
        operator delete(a35);
      }
      sub_6393C(&a34);
      if (a47 < 0) {
        operator delete(a42);
      }
      sub_6393C(&a41);
      if (a54 < 0) {
        operator delete(a49);
      }
      sub_6393C(&a48);
      if (a61 < 0) {
        operator delete(a56);
      }
      sub_6393C(&a55);
      if (a68 < 0) {
        operator delete(a63);
      }
      sub_6393C(&a62);
      if (a72 < 0) {
        operator delete(a70);
      }
      sub_6393C(&a69);
      if (a75 < 0) {
        operator delete(a74);
      }
      sub_6393C(&a73);
      if (a78 < 0) {
        operator delete(a77);
      }
      sub_6393C(&a76);
      if (a81 < 0) {
        operator delete(a80);
      }
      sub_6393C(&a79);
      if (a84 < 0) {
        operator delete(a83);
      }
      sub_6393C(&a82);
      if (a87 < 0) {
        operator delete(a86);
      }
      sub_6393C(&a85);
      if (a90 < 0) {
        operator delete(a89);
      }
      sub_6393C(&a88);
      if (SLOBYTE(STACK[0x21F]) < 0) {
        operator delete((void *)STACK[0x208]);
      }
      sub_6393C((const void **)&STACK[0x200]);
      if (SLOBYTE(STACK[0x23F]) < 0) {
        operator delete((void *)STACK[0x228]);
      }
      sub_6393C((const void **)&STACK[0x220]);
      if (SLOBYTE(STACK[0x25F]) < 0) {
        operator delete((void *)STACK[0x248]);
      }
      sub_6393C((const void **)&STACK[0x240]);
      __cxa_guard_abort(&qword_649B78);
      _Unwind_Resume(a1);
    }
  }
}

void *sub_7BF54@<X0>(CFStringRef format@<X0>, void *a2@<X8>, ...)
{
  va_start(va, a2);
  CFStringRef v3 = CFStringCreateWithFormatAndArguments(0, 0, format, va);
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  return sub_14E44(a2, v3);
}

void sub_7BFD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_7BFEC(uint64_t a1, CFTypeRef cf)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (cf) {
    CFRetain(cf);
  }
  sub_22084(&v116, cf);
  if (!v116)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (!sub_7D5B8((const __CFDictionary *)v116, @"session routing information"))
  {
    uint64_t v93 = sub_32A48(13);
    uint64_t v94 = sub_7D5E8(1, *(void **)v93, *(void *)(v93 + 8));
    unint64_t v95 = v94;
    if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioSessionUtilities.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 377;
      _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    char v96 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v96, "Precondition failure.");
  }
  CFDictionaryRef v3 = (const __CFDictionary *)v116;
  if (!v116)
  {
    uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v97, "Could not construct");
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"session routing information", 27, 0x8000100u, 0);
  *(void *)char v118 = v4;
  if (!v4)
  {
    unint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v98, "Could not construct");
  }
  int Value = CFDictionaryGetValue(v3, v4);
  CFRelease(v4);
  if (!Value) {
    goto LABEL_143;
  }
  CFRetain(Value);
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(Value);
LABEL_143:
    buf[0] = 0;
    uint8_t buf[8] = 0;
    char v115 = 0;
    sub_206D8((uint64_t)buf);
    goto LABEL_144;
  }
  *(void *)AudioObjectPropertyAddress buf = Value;
  uint8_t buf[8] = 1;
  CFRetain(Value);
  char v115 = Value;
  sub_206D8((uint64_t)buf);
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  CFIndex v102 = CFArrayGetCount((CFArrayRef)Value);
  if (!Count) {
    goto LABEL_141;
  }
  unint64_t v7 = 0;
  uint64_t v101 = Value;
  do
  {
    if (v7 == v102) {
      break;
    }
    sub_68838(&cfa, (CFArrayRef)Value, v7);
    if (!cfa || (CFTypeID v8 = CFGetTypeID(cfa), v8 != CFDictionaryGetTypeID()))
    {
      uint64_t v78 = sub_32A48(13);
      uint64_t v79 = sub_7D5E8(1, *(void **)v78, *(void *)(v78 + 8));
      unint64_t v80 = v79;
      if (v79 && os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioSessionUtilities.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 385;
        _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      char v81 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v81, "Precondition failure.");
    }
    sub_688E8(theDict, &cfa);
    for (uint64_t i = 0; i != 5; ++i)
    {
      if (!theDict[0])
      {
        unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v76, "Could not construct");
      }
      uint64_t v10 = off_61F548[i];
      if (!v10 || !CFDictionaryContainsKey(theDict[0], off_61F548[i]))
      {
        uint64_t v72 = sub_32A48(13);
        uint64_t v73 = sub_7D5E8(1, *(void **)v72, *(void *)(v72 + 8));
        uint64_t v74 = v73;
        if (v73 && os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v118 = 136315650;
          *(void *)&v118[4] = "VirtualAudio_AudioSessionInfo.h";
          *(_WORD *)&v118[12] = 1024;
          *(_DWORD *)&v118[14] = 133;
          *(_WORD *)&v118[18] = 2112;
          *(void *)&v118[20] = v10;
          _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInSessionDescriptionKey - %@ is required\"", v118, 0x1Cu);
        }

        char v75 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v75 = &off_6414D8;
        v75[2] = 1852797029;
      }
    }
    buf[0] = 0;
    memset(&buf[8], 0, 32);
    memset(v133, 0, sizeof(v133));
    char v135 = 0;
    char v136 = 0;
    long long v137 = 0u;
    memset(v138, 0, sizeof(v138));
    long long v139 = 0u;
    memset(v140, 0, sizeof(v140));
    char v141 = 1;
    char v145 = 0;
    BOOL v146 = 0;
    CFTypeRef v143 = 0;
    LOBYTE(v144) = 0;
    long long v142 = 0uLL;
    int v154 = 0;
    *(_OWORD *)&v151[8] = 0u;
    uint64_t v149 = 1065353216;
    memset(v148, 0, sizeof(v148));
    memset(v147, 0, sizeof(v147));
    long long v150 = 0u;
    *(_OWORD *)char v151 = 0u;
    *(_DWORD *)&v151[16] = 1065353216;
    memset(v152, 0, sizeof(v152));
    int v153 = 1065353216;
    sub_1FD7C((uint64_t)v118, theDict);
    *(void *)&uint8_t buf[8] = *(void *)v118;
    sub_2069C((uint64_t *)&buf[16]);
    *(_OWORD *)&buf[16] = *(_OWORD *)&v118[8];
    *(void *)&unsigned char buf[32] = *(void *)&v118[24];
    memset(&v118[8], 0, 24);
    sub_2069C((uint64_t *)v133);
    v133[0] = v119;
    *(void *)&v133[1] = v120;
    uint64_t v120 = 0;
    long long v119 = 0uLL;
    if (*((void *)&v133[1] + 1))
    {
      *(void *)&v133[2] = *((void *)&v133[1] + 1);
      operator delete(*((void **)&v133[1] + 1));
    }
    *(_OWORD *)((char *)&v133[1] + 8) = v121;
    *((void *)&v133[2] + 1) = v122;
    uint64_t v122 = 0;
    long long v121 = 0uLL;
    v117[0] = &v119;
    sub_217F8((void ***)v117);
    v117[0] = &v118[8];
    sub_217F8((void ***)v117);
    if (!theDict[0])
    {
      uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v82, "Could not construct");
      goto LABEL_163;
    }
    CFNumberRef v11 = (const __CFNumber *)sub_7E8C8(theDict[0], "session id");
    if (!v11)
    {
      uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v82, "Could not find item");
LABEL_163:
    }
    unsigned int v134 = sub_7E85C(v11);
    if (!theDict[0])
    {
      uint64_t v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v83, "Could not construct");
      goto LABEL_165;
    }
    CFStringRef v12 = (const __CFString *)sub_65E40(theDict[0], "bundle id");
    if (!v12)
    {
      uint64_t v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v83, "Could not find item");
LABEL_165:
    }
    sub_20C54((uint64_t)v118, v12);
    if (SHIBYTE(v138[0]) < 0) {
      operator delete((void *)v137);
    }
    long long v137 = *(_OWORD *)v118;
    v138[0] = *(void *)&v118[16];
    CFDictionaryRef v13 = theDict[0];
    if (!theDict[0])
    {
      char v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not construct");
      goto LABEL_184;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"category", 8, 0x8000100u, 0);
    v117[0] = v14;
    if (!v14)
    {
      unint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v85, "Could not construct");
    }
    CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(v13, v14);
    CFRelease(v14);
    if (!v15)
    {
      char v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not find item");
LABEL_184:
    }
    sub_20C54((uint64_t)v118, v15);
    if (SHIBYTE(v138[3]) < 0) {
      operator delete((void *)v138[1]);
    }
    *(_OWORD *)&v138[1] = *(_OWORD *)v118;
    v138[3] = *(void *)&v118[16];
    CFDictionaryRef v16 = theDict[0];
    if (!theDict[0])
    {
      unint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not construct");
      goto LABEL_182;
    }
    CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"mode", 4, 0x8000100u, 0);
    v117[0] = v17;
    if (!v17)
    {
      uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v89, "Could not construct");
    }
    CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(v16, v17);
    CFRelease(v17);
    if (!v18)
    {
      unint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not find item");
LABEL_182:
    }
    sub_20C54((uint64_t)v118, v18);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete((void *)v139);
    }
    long long v139 = *(_OWORD *)v118;
    v140[0] = *(void *)&v118[16];
    if (!theDict[0])
    {
      char v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v87, "Could not construct");
    }
    CFNumberRef v19 = (const __CFNumber *)sub_2080C(theDict[0], "isolated use case ID");
    if (v19)
    {
      CFNumberRef v20 = sub_22314(v19);
      if ((unint64_t)v20 >> 32)
      {
        if (v20)
        {
          int v144 = (int)v20;
          char v145 = 1;
        }
      }
    }
    if (!theDict[0])
    {
      uint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not construct");
    }
    BOOL v21 = sub_2080C(theDict[0], "requested port types");
    if (!v21) {
      goto LABEL_71;
    }
    CFTypeRef v22 = v21;
    CFRetain(v21);
    CFTypeID v23 = CFGetTypeID(v22);
    if (v23 != CFArrayGetTypeID())
    {
      CFRelease(v22);
LABEL_71:
      v118[0] = 0;
      v118[8] = 0;
      v117[0] = 0;
      sub_206D8((uint64_t)v118);
      unsigned int v25 = 0;
      long long v108 = 0u;
      goto LABEL_74;
    }
    *(void *)char v118 = v22;
    v118[8] = 1;
    CFRetain(v22);
    v117[0] = v22;
    sub_206D8((uint64_t)v118);
    CFIndex v24 = CFArrayGetCount((CFArrayRef)v22);
    CFIndex v107 = CFArrayGetCount((CFArrayRef)v22);
    unsigned int v25 = 0;
    if (!v24)
    {
      long long v108 = 0u;
LABEL_73:
      CFRelease(v22);
      goto LABEL_74;
    }
    unint64_t v26 = 0;
    long long v108 = 0u;
    CFIndex v105 = v24;
    unint64_t v106 = v7;
    while (v26 != v107)
    {
      sub_68838(v118, (CFArrayRef)v22, v26);
      uint64_t v27 = *(const void **)v118;
      if (!*(void *)v118)
      {
        uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v77, "Could not construct");
      }
      unsigned int v28 = sub_7E85C(*(const __CFNumber **)v118);
      unsigned int v29 = v28;
      uint64_t v30 = *((void *)&v108 + 1);
      *(void *)&long long v31 = v108;
      if (*((void *)&v108 + 1) >= (unint64_t)v25)
      {
        uint64_t v32 = (uint64_t)(*((void *)&v108 + 1) - v108) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          sub_60548();
        }
        if ((uint64_t)&v25[-v108] >> 1 > v33) {
          unint64_t v33 = (uint64_t)&v25[-v108] >> 1;
        }
        if ((unint64_t)&v25[-v108] >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34)
        {
          uint64_t v35 = (char *)sub_46BF4(v34);
          uint64_t v37 = v36;
        }
        else
        {
          uint64_t v35 = 0;
          uint64_t v37 = 0;
        }
        int v38 = (unsigned int *)&v35[4 * v32];
        unsigned int *v38 = v29;
        int v39 = v38 + 1;
        while (v30 != (void)v108)
        {
          unsigned int v40 = *(_DWORD *)(v30 - 4);
          v30 -= 4;
          *--int v38 = v40;
        }
        if ((void)v108)
        {
          operator delete((void *)v108);
          uint64_t v27 = *(const void **)v118;
        }
        unsigned int v25 = &v35[4 * v37];
        *(void *)&long long v41 = v38;
        *((void *)&v41 + 1) = v39;
        long long v108 = v41;
        CFIndex v24 = v105;
        unint64_t v7 = v106;
        if (!v27) {
          goto LABEL_67;
        }
      }
      else
      {
        **((_DWORD **)&v108 + 1) = v28;
        *((void *)&v31 + 1) = *((void *)&v108 + 1) + 4;
        long long v108 = v31;
      }
      CFRelease(v27);
LABEL_67:
      if (++v26 == v24) {
        break;
      }
    }
    CFTypeRef v22 = v117[0];
    if (v117[0]) {
      goto LABEL_73;
    }
LABEL_74:
    if (v140[1])
    {
      v140[2] = v140[1];
      operator delete((void *)v140[1]);
    }
    *(_OWORD *)&v140[1] = v108;
    v140[3] = v25;
    if (!theDict[0])
    {
      unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not construct");
    }
    CFArrayRef v42 = (const __CFArray *)sub_7E430(theDict[0], "reporter IDs");
    int Value = v101;
    if (v42)
    {
      sub_225D8((uint64_t)v118, v42);
      memset(v117, 0, 24);
      if (v118[24])
      {
        int v43 = *(void **)v118;
        sub_4CAB0(v117, *(const void **)v118, *(uint64_t *)&v118[8], (uint64_t)(*(void *)&v118[8] - *(void *)v118) >> 3);
        if (v43) {
          operator delete(v43);
        }
      }
    }
    else
    {
      v118[0] = 0;
      v118[24] = 0;
      memset(v117, 0, 24);
    }
    if ((void)v142)
    {
      *((void *)&v142 + 1) = v142;
      operator delete((void *)v142);
    }
    long long v142 = *(_OWORD *)v117;
    CFTypeRef v143 = v117[2];
    if (!theDict[0])
    {
      uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v91, "Could not construct");
    }
    CFBooleanRef v44 = (const __CFBoolean *)sub_7E324(theDict[0], "prefer independent route");
    if (v44)
    {
      __int16 v45 = sub_20610(v44);
      int v46 = v45;
      int v47 = HIBYTE(v45);
    }
    else
    {
      int v47 = 0;
      int v46 = 0;
    }
    unsigned int v48 = v46 | (v47 << 8);
    if (v48 <= 0x100) {
      LOBYTE(v48) = 0;
    }
    BOOL v146 = v48 != 0;
    buf[0] = 1;
    if (theDict[0]) {
      CFRelease(theDict[0]);
    }
    unsigned int v49 = v134;
    unsigned int v113 = v134;
    sub_7D630(theDict, (uint64_t)buf);
    CFDictionaryRef v50 = (CFDictionaryRef)v112;
    if ((v112 & 0x80u) != 0) {
      CFDictionaryRef v50 = theDict[1];
    }
    if (v50 == (CFDictionaryRef)((char *)&dword_14 + 1))
    {
      char v51 = theDict;
      if ((v112 & 0x80u) != 0) {
        char v51 = (CFDictionaryRef *)theDict[0];
      }
      CFDictionaryRef v52 = *v51;
      CFDictionaryRef v53 = v51[1];
      uint64_t v54 = *(uint64_t *)((char *)v51 + 13);
      BOOL v55 = v52 == (CFDictionaryRef)0x6C7070612E6D6F63 && v53 == (CFDictionaryRef)0x656C69626F6D2E65;
      if (v55 && v54 == 0x6369676F6C656C69)
      {
        if (!v116)
        {
          CFTypeRef v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v99, "Could not construct");
        }
        if (sub_7D5B8((const __CFDictionary *)v116, @"persistent route"))
        {
          if (!v116)
          {
            char v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v100, "Could not construct");
          }
          *(void *)char v118 = 0;
          sub_7D674(&v110, (const __CFDictionary *)v116, "persistent route", v118);
          if (*(void *)v118) {
            CFRelease(*(CFTypeRef *)v118);
          }
          sub_F3710((uint64_t)v118, (const __CFDictionary **)&v110);
          if (v122 || v126 || v130)
          {
            uint64_t v57 = sub_32A48(2);
            uint64_t v58 = sub_32A48(34);
            char v59 = 0;
            uint64_t v60 = 0;
            v117[0] = (CFTypeRef)0x100000002;
            uint64_t v61 = *(void *)(v57 + 8);
            while (1)
            {
              uint64_t v62 = *((int *)v117 + v60);
              char v63 = v59;
              if (((v61 & v62) != 0) != ((*(void *)(v58 + 8) & v62) != 0)) {
                break;
              }
              char v59 = 1;
              uint64_t v60 = 1;
              if (v63) {
                goto LABEL_119;
              }
            }
            if ((v61 & v62) == 0) {
              uint64_t v57 = v58;
            }
LABEL_119:
            id v64 = *(id *)v57;
            __int16 v65 = v64;
            if (v64)
            {
              char v66 = v64;
              if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
              {
                sub_18EEB8(&v109, v118);
                __int16 v67 = &v109;
                if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  __int16 v67 = (std::string *)v109.__r_.__value_.__r.__words[0];
                }
                LODWORD(v117[0]) = 136315650;
                *(CFTypeRef *)((char *)v117 + 4) = "AudioSessionUtilities.mm";
                WORD2(v117[1]) = 1024;
                *(_DWORD *)((char *)&v117[1] + 6) = 398;
                WORD1(v117[2]) = 2080;
                *(CFTypeRef *)((char *)&v117[2] + 4) = v67;
                _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Persistent route info: %s.", (uint8_t *)v117, 0x1Cu);
                if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v109.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          sub_7DD78((uint64_t)v147, *(const void ***)v118, *(const void ***)&v118[8], (uint64_t)(*(void *)&v118[8] - *(void *)v118) >> 3);
          sub_7DD78((uint64_t)&v147[1] + 8, *(const void ***)&v118[24], (const void **)v119, (uint64_t)(v119 - *(void *)&v118[24]) >> 3);
          LODWORD(v149) = v123;
          sub_7DE98(v148, *((char **)&v121 + 1));
          *(_DWORD *)&v151[16] = v127;
          sub_7DE98(&v150, v125);
          int v153 = v131;
          sub_7DE98(v152, v129);
          sub_7E020(v129);
          unsigned int v68 = v128;
          uint64_t v128 = 0;
          if (v68) {
            operator delete(v68);
          }
          sub_7E020(v125);
          char v69 = v124;
          char v124 = 0;
          if (v69) {
            operator delete(v69);
          }
          sub_7E020(*((char **)&v121 + 1));
          double v70 = v120;
          uint64_t v120 = 0;
          if (v70) {
            operator delete(v70);
          }
          v117[0] = &v118[24];
          sub_4EDB8((void ***)v117);
          v117[0] = v118;
          sub_4EDB8((void ***)v117);
          if (v110) {
            CFRelease(v110);
          }
        }
      }
    }
    __int16 v71 = sub_7D7C8((uint64_t **)a1, v49, &v113);
    sub_7D91C((uint64_t)(v71 + 5), (uint64_t)buf);
    if ((char)v112 < 0) {
      operator delete(theDict[0]);
    }
    sub_7DA98((uint64_t)buf);
    if (cfa) {
      CFRelease(cfa);
    }
    ++v7;
  }
  while (v7 != Count);
  int Value = v115;
  if (v115) {
LABEL_141:
  }
    CFRelease(Value);
LABEL_144:
  if (v116) {
    CFRelease(v116);
  }
}

void sub_7D4C0()
{
}

void sub_7D4CC()
{
}

void sub_7D4DC()
{
}

void sub_7D4E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49,uint64_t a50,uint64_t a51,uint64_t a52,const void *a53)
{
  __cxa_free_exception(v53);
  sub_60594(&a53);
  sub_63908(&a49);
  JUMPOUT(0x7D53CLL);
}

void sub_7D51C()
{
}

void sub_7D558()
{
  __cxa_free_exception(v0);
  sub_60394(&v2);
  sub_60594(&v3);
  sub_63908(&v4);
  sub_60394(&v5);
  sub_7DB7C(*v1);
  JUMPOUT(0x7D5B0);
}

void sub_7D568(_Unwind_Exception *a1)
{
}

void sub_7D570(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_7D5B8(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

id sub_7D5E8(int a1, void *a2, char a3)
{
  if (a1 < 6 || (a3 & 1) != 0)
  {
    id v4 = a2;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

void *sub_7D630(void *result, uint64_t a2)
{
  if (*(char *)(a2 + 127) < 0) {
    return sub_21E8C(result, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 104);
  result[2] = *(void *)(a2 + 120);
  return result;
}

uint64_t sub_7D674(void *a1, const __CFDictionary *a2, char *__s, void *a4)
{
  CFTypeID v6 = sub_68AB8(a2, __s);
  if (!v6) {
    goto LABEL_5;
  }
  unint64_t v7 = v6;
  CFRetain(v6);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFRelease(v7);
LABEL_5:
    LOBYTE(v10) = 0;
    char v11 = 0;
    *a1 = *a4;
    *a4 = 0;
    return sub_7E2E8((uint64_t)&v10);
  }
  uint64_t v10 = v7;
  char v11 = 1;
  CFRetain(v7);
  *a1 = v7;
  return sub_7E2E8((uint64_t)&v10);
}

uint64_t sub_7D72C(uint64_t a1)
{
  sub_7E020(*(char **)(a1 + 16));
  float v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void **sub_7D768(void **a1)
{
  sub_7D72C((uint64_t)(a1 + 16));
  sub_7D72C((uint64_t)(a1 + 11));
  sub_7D72C((uint64_t)(a1 + 6));
  uint64_t v3 = a1 + 3;
  sub_4EDB8(&v3);
  uint64_t v3 = a1;
  sub_4EDB8(&v3);
  return a1;
}

uint64_t **sub_7D7C8(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  CFTypeID v6 = a1 + 1;
  uint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  CFTypeID v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        CFTypeID v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = (char *)operator new(0x1C8uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *(_OWORD *)(v10 + 216) = 0u;
    *(_OWORD *)(v10 + 232) = 0u;
    *(_OWORD *)(v10 + 248) = 0u;
    *((void *)v10 + 35) = 0;
    *(_OWORD *)(v10 + 264) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    v10[240] = 1;
    *((void *)v10 + 33) = 0;
    *((void *)v10 + 31) = 0;
    *((void *)v10 + 32) = 0;
    v10[272] = 0;
    *((_OWORD *)v10 + 24) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 18) = 0u;
    *((_OWORD *)v10 + 19) = 0u;
    *((_OWORD *)v10 + 20) = 0u;
    *((_OWORD *)v10 + 21) = 0u;
    *((_OWORD *)v10 + 22) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((void *)v10 + 56) = 0;
    *((_DWORD *)v10 + 92) = 1065353216;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + 392) = 0u;
    *((_DWORD *)v10 + 102) = 1065353216;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((_DWORD *)v10 + 112) = 1065353216;
    char v13 = 1;
    sub_46CA8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_7E290((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_7D91C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  if (a1 != a2)
  {
    sub_7DBD0(a1 + 16, *(std::string **)(a2 + 16), *(long long **)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
    sub_7DBD0(a1 + 40, *(std::string **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
    sub_4D2CC((char *)(a1 + 64), *(char **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  int v4 = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = v4;
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  if (a1 != a2)
  {
    sub_6720C((char *)(a1 + 176), *(char **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    sub_4D2CC((char *)(a1 + 208), *(char **)(a2 + 208), *(void *)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
    uint64_t v5 = *(void *)(a2 + 232);
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    *(void *)(a1 + 232) = v5;
    sub_7DD78(a1 + 248, *(const void ***)(a2 + 248), *(const void ***)(a2 + 256), (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 3);
    sub_7DD78(a1 + 272, *(const void ***)(a2 + 272), *(const void ***)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3);
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
    sub_7DE98((void *)(a1 + 296), *(char **)(a2 + 312));
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    sub_7DE98((void *)(a1 + 336), *(char **)(a2 + 352));
    *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
    sub_7DE98((void *)(a1 + 376), *(char **)(a2 + 392));
  }
  return a1;
}

uint64_t sub_7DA98(uint64_t a1)
{
  float v2 = (void **)(a1 + 248);
  sub_7D72C(a1 + 376);
  sub_7D72C(a1 + 336);
  sub_7D72C(a1 + 296);
  unint64_t v7 = (void **)(a1 + 272);
  sub_4EDB8(&v7);
  unint64_t v7 = v2;
  sub_4EDB8(&v7);
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(void *)(a1 + 184) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }
  unint64_t v7 = (void **)(a1 + 40);
  sub_217F8(&v7);
  unint64_t v7 = (void **)(a1 + 16);
  sub_217F8(&v7);
  return a1;
}

void sub_7DB7C(void *a1)
{
  if (a1)
  {
    sub_7DB7C(*a1);
    sub_7DB7C(a1[1]);
    sub_7DA98((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void sub_7DBD0(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  CFTypeID v6 = (long long *)__str;
  uint64_t v8 = a1 + 16;
  unsigned int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_2069C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_60548();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_21924((void *)a1, v11);
    CFStringRef v12 = sub_21DCC(v8, v6, a3, *(char **)(a1 + 8));
LABEL_15:
    *(void *)(a1 + 8) = v12;
    return;
  }
  char v13 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v9) >> 3) < a4)
  {
    CFStringRef v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)v13 - (char *)v9) >> 3));
    if (v13 != v9)
    {
      uint64_t v15 = 8 * (((char *)v13 - (char *)v9) >> 3);
      do
      {
        std::string::operator=(v9, (const std::string *)v6);
        CFTypeID v6 = (long long *)((char *)v6 + 24);
        ++v9;
        v15 -= 24;
      }
      while (v15);
      unsigned int v9 = *(std::string **)(a1 + 8);
    }
    CFStringRef v12 = sub_21DCC(v8, v14, a3, (char *)v9);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(v9, (const std::string *)v6);
      CFTypeID v6 = (long long *)((char *)v6 + 24);
      ++v9;
    }
    while (v6 != a3);
    char v13 = *(std::string **)(a1 + 8);
  }
  while (v13 != v9)
  {
    if (SHIBYTE(v13[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13[-1].__r_.__value_.__l.__data_);
    }
    --v13;
  }
  *(void *)(a1 + 8) = v9;
}

void sub_7DD6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_7DD78(uint64_t a1, const void **a2, const void **a3, unint64_t a4)
{
  CFTypeID v6 = a2;
  uint64_t v8 = *(const void ***)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    sub_7E22C((void **)a1);
    if (a4 >> 61) {
      sub_60548();
    }
    uint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_66F48((void *)a1, v11);
    CFStringRef v12 = *(void **)(a1 + 8);
    while (v6 != a3)
    {
      char v13 = *v6++;
      CFStringRef v12 = sub_7E15C(v12, v13) + 1;
    }
    goto LABEL_15;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[v14];
    sub_7E198(a2, v15, v8);
    CFStringRef v12 = *(void **)(a1 + 8);
    while (v15 != a3)
    {
      CFDictionaryRef v16 = *v15++;
      CFStringRef v12 = sub_7E15C(v12, v16) + 1;
    }
LABEL_15:
    *(void *)(a1 + 8) = v12;
    return;
  }
  CFStringRef v17 = sub_7E198(a2, a3, v8);
  for (uint64_t i = *(const void ***)(a1 + 8); i != v17; --i)
  {
    CFNumberRef v19 = *(i - 1);
    sub_7E20C(v19);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_7DE98(void *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    CFTypeID v6 = (char *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = v6;
    }
    else
    {
      do
      {
        unint64_t v9 = *((unsigned int *)v2 + 4);
        *((_DWORD *)v6 + 4) = v9;
        if (v6 != v2)
        {
          sub_7DD78((uint64_t)(v6 + 24), *((const void ***)v2 + 3), *((const void ***)v2 + 4), (uint64_t)(*((void *)v2 + 4) - *((void *)v2 + 3)) >> 3);
          unint64_t v9 = *((unsigned int *)v6 + 4);
        }
        uint64_t v8 = *(char **)v6;
        *((void *)v6 + 1) = v9;
        uint64_t v10 = sub_6F11C((uint64_t)a1, v9, (_DWORD *)v6 + 4);
        sub_6F46C(a1, v6, v10);
        uint64_t v2 = *(char **)v2;
        if (!v8) {
          break;
        }
        CFTypeID v6 = v8;
      }
      while (v2);
    }
    sub_7E020(v8);
  }
  for (; v2; uint64_t v2 = *(char **)v2)
  {
    unint64_t v11 = operator new(0x30uLL);
    void *v11 = 0;
    v11[1] = 0;
    *((_DWORD *)v11 + 4) = *((_DWORD *)v2 + 4);
    void v11[4] = 0;
    v11[5] = 0;
    v11[3] = 0;
    sub_7E0DC(v11 + 3, *((const void ***)v2 + 3), *((const void ***)v2 + 4), (uint64_t)(*((void *)v2 + 4) - *((void *)v2 + 3)) >> 3);
    unint64_t v12 = *((unsigned int *)v11 + 4);
    v11[1] = v12;
    char v13 = sub_6F11C((uint64_t)a1, v12, (_DWORD *)v11 + 4);
    sub_6F46C(a1, v11, v13);
  }
}

void sub_7DFD4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_7E020(v1);
  __cxa_rethrow();
}

void sub_7DFEC(_Unwind_Exception *a1)
{
}

void sub_7E020(char *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = *(char **)v1;
      uint64_t v3 = (void **)(v1 + 24);
      sub_4EDB8(&v3);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_7E074(char a1, void **__p)
{
  if (a1)
  {
    uint64_t v3 = __p + 3;
    sub_4EDB8(&v3);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_7E0DC(void *result, const void **a2, const void **a3, unint64_t a4)
{
  if (a4)
  {
    CFTypeID v6 = result;
    sub_66F48(result, a4);
    uint64_t result = (void *)v6[1];
    while (a2 != a3)
    {
      BOOL v7 = *a2++;
      uint64_t result = sub_7E15C(result, v7) + 1;
    }
    v6[1] = result;
  }
  return result;
}

void sub_7E148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_7E15C(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

const void **sub_7E198(const void **a1, const void **a2, const void **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      CFTypeID v6 = *a3;
      BOOL v7 = *v5;
      *a3 = *v5;
      if (v7) {
        CFRetain(v7);
      }
      if (v6) {
        CFRelease(v6);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_7E20C(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void sub_7E22C(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        sub_7E20C(v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_7E290(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_7DA98((uint64_t)v1 + 40);
    }
    operator delete(v1);
  }
}

uint64_t sub_7E2E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

const void *sub_7E324(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_7E3F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

const void *sub_7E430(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_7E4FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFNumberRef sub_7E53C(const __CFNumber *result)
{
  if (result)
  {
    CFNumberRef v1 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_16;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int v7 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_24;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int v8 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_26;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int v11 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_39;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_16:
          if (Value) {
            char v12 = LOBYTE(valuePtr);
          }
          else {
            char v12 = 0;
          }
          if (Value != 0 && SLOBYTE(valuePtr) < 0) {
            unint64_t v5 = -256;
          }
          else {
            unint64_t v5 = 0;
          }
          LOBYTE(v6) = v12;
          return (const __CFNumber *)(v6 | v5);
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int v7 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_24:
          BOOL v13 = v7 == 0;
          unsigned __int8 v14 = LOBYTE(valuePtr);
          uint64_t v15 = SLOWORD(valuePtr);
          goto LABEL_27;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int v8 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_26:
          BOOL v13 = v8 == 0;
          unsigned __int8 v14 = LOBYTE(valuePtr);
          uint64_t v15 = SLODWORD(valuePtr);
LABEL_27:
          unint64_t v16 = v15 & 0xFFFFFFFFFFFFFF00 | v14;
          if (v13) {
            uint64_t v6 = 0;
          }
          else {
            uint64_t v6 = v16;
          }
          goto LABEL_43;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_33:
          BOOL v17 = v10 == 0;
          uint64_t v6 = (uint64_t)*(float *)&valuePtr;
          goto LABEL_40;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int v11 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_39;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_37;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_37:
          BOOL v17 = v9 == 0;
          uint64_t v6 = *(void *)&valuePtr;
          goto LABEL_40;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int v11 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_39:
          BOOL v17 = v11 == 0;
          uint64_t v6 = (uint64_t)valuePtr;
LABEL_40:
          if (v17) {
            uint64_t v6 = 0;
          }
LABEL_43:
          unint64_t v5 = v6 & 0xFFFFFFFFFFFFFF00;
          break;
        default:
          unint64_t v5 = 0;
          LOBYTE(v6) = 0;
          break;
      }
      return (const __CFNumber *)(v6 | v5);
    }
    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1)) {
        return (const __CFNumber *)CFBooleanGetValue(v1);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

CFNumberRef sub_7E85C(const __CFNumber *a1)
{
  CFNumberRef result = sub_22314(a1);
  if (!((unint64_t)result >> 32))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  return result;
}

void sub_7E8B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *sub_7E8C8(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_7E994(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_7E9D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  CFTypeID v4 = (void **)(a1 + 32);
  sub_217F8(&v4);
  CFTypeID v4 = (void **)(a1 + 8);
  sub_217F8(&v4);
  return a1;
}

uint64_t sub_7EA30(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_2189C((char *)(a1 + 16), *(long long **)(a2 + 16), *(long long **)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_2189C((char *)(a1 + 40), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_4CAB0((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  uint64_t v4 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v4;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v5;
  }
  if (*(char *)(a2 + 151) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 128), *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v6;
  }
  if (*(char *)(a2 + 175) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 152), *(void **)(a2 + 152), *(void *)(a2 + 160));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = v7;
  }
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_46B38((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  char v8 = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 200) = v8;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  sub_4CAB0((void *)(a1 + 208), *(const void **)(a2 + 208), *(void *)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  uint64_t v9 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v9;
  sub_7ECB4((void *)(a1 + 248), (const void ***)(a2 + 248));
  return a1;
}

void sub_7EC00(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 151) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 127) < 0) {
    operator delete(*v3);
  }
  sub_7E9D4(v1);
  _Unwind_Resume(a1);
}

void *sub_7ECB4(void *a1, const void ***a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_7E0DC(a1, *a2, a2[1], a2[1] - *a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_7E0DC(a1 + 3, a2[3], a2[4], a2[4] - a2[3]);
  sub_7EDA8((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  sub_7EDA8((uint64_t)(a1 + 11), (uint64_t)(a2 + 11));
  sub_7EDA8((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  return a1;
}

void sub_7ED5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7D72C(v3);
  sub_7D72C(v2);
  sub_4EDB8((void ***)va);
  sub_4EDB8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7EDA8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_6DEC4(a1, *(void *)(a2 + 8));
  long long v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = *((unsigned int *)v5 + 4);
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v5 + 4);
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
        int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (*((_DWORD *)i + 4) == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      BOOL v13 = operator new(0x30uLL);
      *BOOL v13 = 0;
      v13[1] = v7;
      *((_DWORD *)v13 + 4) = *((_DWORD *)v5 + 4);
      v13[4] = 0;
      v13[5] = 0;
      v13[3] = 0;
      sub_7E0DC(v13 + 3, (const void **)v5[3], (const void **)v5[4], (v5[4] - v5[3]) >> 3);
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        BOOL v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v8);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        sub_6DEC4(a1, v19);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
      }
      uint64_t v20 = *(void *)a1;
      BOOL v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        *BOOL v13 = *v21;
      }
      else
      {
        *BOOL v13 = *v6;
        *long long v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8) {
            v22 %= v8;
          }
        }
        else
        {
          v22 &= v8 - 1;
        }
        BOOL v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      *BOOL v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      long long v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_7EFEC(_Unwind_Exception *a1)
{
  sub_7D72C(v1);
  _Unwind_Resume(a1);
}

void sub_7F024(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v2 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (*((unsigned char *)v4 + 136))
      {
        uint64_t v6 = *(void *)((char *)v4 + 132);
        if ((v6 & 0xFF00000000) == 0) {
          sub_7F218();
        }
        unint64_t v7 = *v2;
        unint64_t v8 = v2;
        uint8x8_t v9 = v2;
        if (*v2)
        {
          while (1)
          {
            while (1)
            {
              uint8x8_t v9 = (uint64_t **)v7;
              unsigned int v10 = *((_DWORD *)v7 + 8);
              if (v10 <= v6) {
                break;
              }
              unint64_t v7 = *v9;
              unint64_t v8 = v9;
              if (!*v9) {
                goto LABEL_11;
              }
            }
            if (v10 >= v6) {
              break;
            }
            unint64_t v7 = v9[1];
            if (!v7)
            {
              unint64_t v8 = v9 + 1;
              goto LABEL_11;
            }
          }
        }
        else
        {
LABEL_11:
          int v11 = operator new(0x40uLL);
          v11[8] = v6;
          *((void *)v11 + 6) = 0;
          *((void *)v11 + 7) = 0;
          *((void *)v11 + 5) = 0;
          sub_46CA8((uint64_t **)a1, (uint64_t)v9, v8, (uint64_t *)v11);
          uint8x8_t v9 = (uint64_t **)v11;
        }
        int v12 = *((_DWORD *)v4 + 32);
        float v14 = (char *)v9[6];
        unint64_t v13 = (unint64_t)v9[7];
        if ((unint64_t)v14 >= v13)
        {
          BOOL v16 = (char *)v9[5];
          uint64_t v17 = (v14 - v16) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            unint64_t v20 = (unint64_t)sub_46BF4(v20);
            BOOL v16 = (char *)v9[5];
            float v14 = (char *)v9[6];
          }
          else
          {
            uint64_t v21 = 0;
          }
          unint64_t v22 = (uint64_t *)(v20 + 4 * v17);
          *(_DWORD *)unint64_t v22 = v12;
          float v15 = (uint64_t *)((char *)v22 + 4);
          while (v14 != v16)
          {
            int v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            unint64_t v22 = (uint64_t *)((char *)v22 - 4);
          }
          v9[5] = v22;
          void v9[6] = v15;
          v9[7] = (uint64_t *)(v20 + 4 * v21);
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(_DWORD *)float v14 = v12;
          float v15 = (uint64_t *)(v14 + 4);
        }
        void v9[6] = v15;
      }
      CFIndex v24 = (void *)v4[1];
      if (v24)
      {
        do
        {
          unsigned int v25 = v24;
          CFIndex v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unsigned int v25 = (void *)v4[2];
          BOOL v26 = *v25 == (void)v4;
          uint64_t v4 = v25;
        }
        while (!v26);
      }
      uint64_t v4 = v25;
    }
    while (v25 != v3);
  }
}

void sub_7F1F8(_Unwind_Exception *a1)
{
  sub_7F264(*v1);
  _Unwind_Resume(a1);
}

void sub_7F218()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void sub_7F264(void *a1)
{
  if (a1)
  {
    sub_7F264(*a1);
    sub_7F264(a1[1]);
    unint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_7F2C0(uint64_t *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (sub_20AA78())
  {
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    long long v139 = &v140;
    uint64_t v6 = (void *)*a2;
    uint64_t v4 = a2 + 1;
    long long v5 = v6;
    if (v6 != v4)
    {
      while ((sub_3FAF4C((uint64_t)(v5 + 5)) & 1) == 0)
      {
LABEL_228:
        long long v108 = (void *)v5[1];
        if (v108)
        {
          do
          {
            std::string v109 = v108;
            long long v108 = (void *)*v108;
          }
          while (v108);
        }
        else
        {
          do
          {
            std::string v109 = (void *)v5[2];
            BOOL v74 = *v109 == (void)v5;
            long long v5 = v109;
          }
          while (!v74);
        }
        long long v5 = v109;
        if (v109 == v4)
        {
          CFTypeRef v110 = v140;
          goto LABEL_246;
        }
      }
      sub_8050C(__s1, (uint64_t)(v5 + 5));
      sub_80550(__p, (uint64_t)(v5 + 5));
      v138[0] = sub_79A2C(__s1, (unsigned __int8 *)__p, *((_DWORD *)v5 + 68), *((_DWORD *)v5 + 69));
      v138[1] = v7;
      if ((v136[7] & 0x80000000) != 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v153) < 0) {
        operator delete(*(void **)__s1);
      }
      v133[0] = 0;
      char v134 = 0;
      sub_F26A4((uint64_t)__p, (uint64_t)v138, (uint64_t)v133);
      if (v134) {
        sub_80594((uint64_t)v133);
      }
      int v8 = (int)__p[0];
      int v9 = HIDWORD(__p[0]);
      sub_46A4C(v132, (uint64_t)v136);
      sub_8050C(__s1, (uint64_t)(v5 + 5));
      sub_7BF54(@"VoiceOver", &v160);
      if (!v160)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      sub_20C54((uint64_t)v163, v160);
      if (v153 >= 0) {
        unsigned int v10 = (void *)HIBYTE(v153);
      }
      else {
        unsigned int v10 = *(void **)&__s1[8];
      }
      unint64_t v11 = v164;
      int v12 = (char)v164;
      if ((v164 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)v163[1];
      }
      if (v10 == (void *)v11)
      {
        if ((v164 & 0x80u) == 0) {
          unint64_t v13 = v163;
        }
        else {
          unint64_t v13 = (void **)v163[0];
        }
        if (v153 < 0)
        {
          BOOL v21 = memcmp(*(const void **)__s1, v13, *(size_t *)&__s1[8]) == 0;
          if ((v12 & 0x80000000) == 0) {
            goto LABEL_29;
          }
        }
        else if (HIBYTE(v153))
        {
          uint64_t v14 = HIBYTE(v153) - 1;
          float v15 = __s1;
          do
          {
            int v17 = *v15++;
            int v16 = v17;
            int v19 = *(unsigned __int8 *)v13;
            unint64_t v13 = (void **)((char *)v13 + 1);
            int v18 = v19;
            BOOL v69 = v14-- != 0;
            char v20 = v69;
            BOOL v21 = v16 == v18;
          }
          while (v16 == v18 && (v20 & 1) != 0);
          if (((char)v164 & 0x80000000) == 0)
          {
LABEL_29:
            if (v160) {
              CFRelease(v160);
            }
            if (SHIBYTE(v153) < 0)
            {
              operator delete(*(void **)__s1);
              if (v21) {
                goto LABEL_33;
              }
            }
            else if (v21)
            {
LABEL_33:
              unint64_t v22 = off_63D518;
              goto LABEL_38;
            }
            unint64_t v22 = off_634000;
LABEL_38:
            v166[0] = v22;
            v166[3] = v166;
            v163[0] = off_634048;
            uint64_t v165 = v163;
            char v23 = *((unsigned char *)v5 + 240);
            CFStringRef v160 = (const __CFString *)off_61F580;
            char v161 = v23;
            uint64_t v162 = &v160;
            uint64_t v24 = v5[34];
            if ((v24 & 0xFF00000000) != 0)
            {
              sub_3FCD2C((uint64_t)v159, v24);
              goto LABEL_71;
            }
            sub_8050C(__s1, (uint64_t)(v5 + 5));
            sub_7BF54(@"VoiceOver", &cf);
            if (!cf)
            {
              long long v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v119, "Could not construct");
            }
            sub_20C54((uint64_t)v156, (const __CFString *)cf);
            if (v153 >= 0) {
              unsigned int v25 = (void *)HIBYTE(v153);
            }
            else {
              unsigned int v25 = *(void **)&__s1[8];
            }
            unint64_t v26 = v157;
            int v27 = (char)v157;
            if ((v157 & 0x80u) != 0) {
              unint64_t v26 = (unint64_t)v156[1];
            }
            if (v25 == (void *)v26)
            {
              if ((v157 & 0x80u) == 0) {
                unsigned int v28 = v156;
              }
              else {
                unsigned int v28 = (void **)v156[0];
              }
              if (v153 < 0)
              {
                BOOL v36 = memcmp(*(const void **)__s1, v28, *(size_t *)&__s1[8]) == 0;
                if ((v27 & 0x80000000) == 0) {
                  goto LABEL_59;
                }
              }
              else if (HIBYTE(v153))
              {
                uint64_t v29 = HIBYTE(v153) - 1;
                uint64_t v30 = __s1;
                do
                {
                  int v32 = *v30++;
                  int v31 = v32;
                  int v34 = *(unsigned __int8 *)v28;
                  unsigned int v28 = (void **)((char *)v28 + 1);
                  int v33 = v34;
                  BOOL v69 = v29-- != 0;
                  char v35 = v69;
                  BOOL v36 = v31 == v33;
                }
                while (v31 == v33 && (v35 & 1) != 0);
                if (((char)v157 & 0x80000000) == 0) {
                  goto LABEL_59;
                }
              }
              else
              {
                BOOL v36 = 1;
                if (((char)v157 & 0x80000000) == 0) {
                  goto LABEL_59;
                }
              }
            }
            else
            {
              BOOL v36 = 0;
              if (((char)v157 & 0x80000000) == 0)
              {
LABEL_59:
                if (cf) {
                  CFRelease(cf);
                }
                if (SHIBYTE(v153) < 0) {
                  operator delete(*(void **)__s1);
                }
                if (v36) {
                  uint64_t v37 = off_63D560;
                }
                else {
                  uint64_t v37 = off_6340D8;
                }
                v159[0] = v37;
                v159[3] = v159;
LABEL_71:
                uint64_t v38 = v5[34];
                if ((v38 & 0xFF00000000) != 0)
                {
                  sub_3FD1BC((uint64_t (***)())v156, v38);
                  goto LABEL_137;
                }
                sub_8050C(__s1, (uint64_t)(v5 + 5));
                sub_7BF54(@"VoiceOver", &v145);
                if (!v145)
                {
                  uint64_t v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v120, "Could not construct");
                }
                sub_20C54((uint64_t)&cf, (const __CFString *)v145);
                if (v153 >= 0) {
                  int v39 = (const void *)HIBYTE(v153);
                }
                else {
                  int v39 = *(const void **)&__s1[8];
                }
                unint64_t v40 = v144;
                int v41 = (char)v144;
                if ((v144 & 0x80u) != 0) {
                  unint64_t v40 = (unint64_t)v143;
                }
                if (v39 == (const void *)v40)
                {
                  if ((v144 & 0x80u) == 0) {
                    p_CFTypeRef cf = (unsigned __int8 *)&cf;
                  }
                  else {
                    p_CFTypeRef cf = (unsigned __int8 *)cf;
                  }
                  if (v153 < 0)
                  {
                    BOOL v50 = memcmp(*(const void **)__s1, p_cf, *(size_t *)&__s1[8]) == 0;
                    if ((v41 & 0x80000000) == 0) {
                      goto LABEL_92;
                    }
                  }
                  else if (HIBYTE(v153))
                  {
                    uint64_t v43 = HIBYTE(v153) - 1;
                    CFBooleanRef v44 = __s1;
                    do
                    {
                      int v46 = *v44++;
                      int v45 = v46;
                      int v48 = *p_cf++;
                      int v47 = v48;
                      BOOL v69 = v43-- != 0;
                      char v49 = v69;
                      BOOL v50 = v45 == v47;
                    }
                    while (v45 == v47 && (v49 & 1) != 0);
                    if (((char)v144 & 0x80000000) == 0)
                    {
LABEL_92:
                      if (v145) {
                        CFRelease(v145);
                      }
                      if (SHIBYTE(v153) < 0)
                      {
                        operator delete(*(void **)__s1);
                        if (v50)
                        {
LABEL_96:
                          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_661500, memory_order_acquire) & 1) == 0
                            && __cxa_guard_acquire(&qword_661500))
                          {
                            qmemcpy(__s1, "Bphpwphpkpsp", 12);
                            sub_1A2E28(&qword_6614E8, __s1, 3uLL);
                            __cxa_guard_release(&qword_661500);
                          }
                          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_661520, memory_order_acquire) & 1) == 0
                            && __cxa_guard_acquire(&qword_661520))
                          {
                            *(void *)__s1 = 0x7073706B70687077;
                            sub_1A2E28(&qword_661508, __s1, 2uLL);
                            __cxa_guard_release(&qword_661520);
                          }
                          char v51 = off_63DAB8;
                          goto LABEL_126;
                        }
                      }
                      else if (v50)
                      {
                        goto LABEL_96;
                      }
                      sub_80550(__s1, (uint64_t)(v5 + 5));
                      CFRetain(@"SoundRecognition");
                      sub_14E44(&v145, @"SoundRecognition");
                      if (!v145)
                      {
                        long long v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v121, "Could not construct");
                      }
                      sub_20C54((uint64_t)&cf, (const __CFString *)v145);
                      if (v153 >= 0) {
                        CFDictionaryRef v52 = (const void *)HIBYTE(v153);
                      }
                      else {
                        CFDictionaryRef v52 = *(const void **)&__s1[8];
                      }
                      unint64_t v53 = v144;
                      int v54 = (char)v144;
                      if ((v144 & 0x80u) != 0) {
                        unint64_t v53 = (unint64_t)v143;
                      }
                      if (v52 == (const void *)v53)
                      {
                        if ((v144 & 0x80u) == 0) {
                          BOOL v55 = (unsigned __int8 *)&cf;
                        }
                        else {
                          BOOL v55 = (unsigned __int8 *)cf;
                        }
                        if (v153 < 0)
                        {
                          BOOL v63 = memcmp(*(const void **)__s1, v55, *(size_t *)&__s1[8]) == 0;
                          if ((v54 & 0x80000000) == 0) {
                            goto LABEL_121;
                          }
                        }
                        else if (HIBYTE(v153))
                        {
                          uint64_t v56 = HIBYTE(v153) - 1;
                          uint64_t v57 = __s1;
                          do
                          {
                            int v59 = *v57++;
                            int v58 = v59;
                            int v61 = *v55++;
                            int v60 = v61;
                            BOOL v69 = v56-- != 0;
                            char v62 = v69;
                            BOOL v63 = v58 == v60;
                          }
                          while (v58 == v60 && (v62 & 1) != 0);
                          if (((char)v144 & 0x80000000) == 0)
                          {
LABEL_121:
                            if (v145) {
                              CFRelease(v145);
                            }
                            if (SHIBYTE(v153) < 0)
                            {
                              operator delete(*(void **)__s1);
                              if (v63) {
                                goto LABEL_125;
                              }
                            }
                            else if (v63)
                            {
LABEL_125:
                              char v51 = off_63DB00;
LABEL_126:
                              v156[0] = v51;
                              uint64_t v158 = v156;
                              goto LABEL_137;
                            }
                            uint64_t v158 = 0;
LABEL_137:
                            int v64 = *((unsigned __int8 *)v5 + 136);
                            uint64_t v65 = v5[34];
                            if (!*((unsigned char *)v5 + 136))
                            {
                              if ((v65 & 0xFF00000000) != 0 && v65)
                              {
                                sub_805D0();
                                uint64_t v66 = qword_649B88;
                                if (!qword_649B88) {
                                  goto LABEL_251;
                                }
                                __int16 v67 = &qword_649B88;
                                do
                                {
                                  unsigned int v68 = *(_DWORD *)(v66 + 28);
                                  BOOL v69 = v68 >= v65;
                                  if (v68 >= v65) {
                                    double v70 = (uint64_t *)v66;
                                  }
                                  else {
                                    double v70 = (uint64_t *)(v66 + 8);
                                  }
                                  if (v69) {
                                    __int16 v67 = (uint64_t *)v66;
                                  }
                                  uint64_t v66 = *v70;
                                }
                                while (*v70);
                                if (v67 == &qword_649B88 || *((_DWORD *)v67 + 7) > v65)
                                {
LABEL_251:
                                  uint64_t v112 = sub_32A48(13);
                                  unsigned int v113 = sub_7D5E8(1, *(void **)v112, *(void *)(v112 + 8));
                                  std::string::size_type v114 = v113;
                                  if (v113 && os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)__s1 = 136315394;
                                    *(void *)&__s1[4] = "AudioSessionUtilities.mm";
                                    *(_WORD *)&__s1[12] = 1024;
                                    *(_DWORD *)&__s1[14] = 74;
                                    _os_log_impl(&def_1E50E8, v114, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __s1, 0x12u);
                                  }
LABEL_259:

                                  char v118 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                                  std::logic_error::logic_error(v118, "Precondition failure.");
                                }
                                sub_805D0();
                                uint64_t v71 = qword_649B88;
                                if (!qword_649B88) {
LABEL_248:
                                }
                                  sub_8251C("map::at:  key not found");
                                while (1)
                                {
                                  while (1)
                                  {
                                    unsigned int v72 = *(_DWORD *)(v71 + 28);
                                    if (v72 <= v65) {
                                      break;
                                    }
                                    uint64_t v71 = *(void *)v71;
                                    if (!v71) {
                                      goto LABEL_248;
                                    }
                                  }
                                  if (v72 >= v65) {
                                    break;
                                  }
                                  uint64_t v71 = *(void *)(v71 + 8);
                                  if (!v71) {
                                    goto LABEL_248;
                                  }
                                }
                                int v73 = *(_DWORD *)(v71 + 32);
                                uint64_t v65 = v5[34];
                              }
                              else
                              {
                                int v73 = ++dword_649BA0;
                              }
                              *((_DWORD *)v5 + 33) = v73;
                              int v64 = 1;
                              *((unsigned char *)v5 + 136) = 1;
                            }
                            BOOL v74 = (v65 & 0xFF00000000) == 0 || v65 == 0;
                            if (!v74)
                            {
                              char v75 = v140;
                              uint64_t i = &v140;
                              uint64_t v77 = &v140;
                              if (v140)
                              {
                                uint64_t v78 = &v140;
                                uint64_t v79 = v140;
                                do
                                {
                                  unint64_t v80 = v79;
                                  char v81 = v78;
                                  unsigned int v82 = *((_DWORD *)v79 + 7);
                                  if (v82 >= v65) {
                                    uint64_t v78 = (uint64_t **)v79;
                                  }
                                  else {
                                    ++v79;
                                  }
                                  uint64_t v79 = (uint64_t *)*v79;
                                }
                                while (v79);
                                if (v78 != &v140)
                                {
                                  if (v82 < v65) {
                                    unint64_t v80 = (uint64_t *)v81;
                                  }
                                  if (*((_DWORD *)v80 + 7) <= v65)
                                  {
                                    char v84 = 1;
                                    goto LABEL_192;
                                  }
                                }
                                for (uint64_t i = &v140; ; v75 = *i)
                                {
                                  uint64_t v77 = i;
                                  if (!v75) {
                                    break;
                                  }
                                  while (1)
                                  {
                                    uint64_t i = (uint64_t **)v75;
                                    unsigned int v83 = *((_DWORD *)v75 + 7);
                                    if (v83 > v65) {
                                      break;
                                    }
                                    if (v83 >= v65) {
                                      goto LABEL_190;
                                    }
                                    char v75 = i[1];
                                    if (!v75)
                                    {
                                      uint64_t v77 = i + 1;
                                      goto LABEL_187;
                                    }
                                  }
                                }
                              }
LABEL_187:
                              unint64_t v85 = operator new(0x20uLL);
                              v85[7] = v65;
                              *(void *)unint64_t v85 = 0;
                              *((void *)v85 + 1) = 0;
                              *((void *)v85 + 2) = i;
                              *uint64_t v77 = (uint64_t *)v85;
                              if (*v139)
                              {
                                long long v139 = (uint64_t **)*v139;
                                unint64_t v85 = *v77;
                              }
                              sub_46D00(v140, (uint64_t *)v85);
                              ++v141;
                              int v64 = *((unsigned __int8 *)v5 + 136);
LABEL_190:
                              if (!v64)
                              {
                                uint64_t v115 = sub_32A48(13);
                                CFTypeRef v116 = sub_7D5E8(1, *(void **)v115, *(void *)(v115 + 8));
                                std::string::size_type v114 = v116;
                                if (v116)
                                {
                                  int v117 = v116;
                                  if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)__s1 = 136315394;
                                    *(void *)&__s1[4] = "AudioSessionUtilities.mm";
                                    *(_WORD *)&__s1[12] = 1024;
                                    *(_DWORD *)&__s1[14] = 480;
                                    _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __s1, 0x12u);
                                  }
                                }
                                goto LABEL_259;
                              }
                            }
                            char v84 = 0;
LABEL_192:
                            uint64_t v86 = *(void *)((char *)v5 + 132);
                            if ((v86 & 0xFF00000000) == 0) {
                              sub_7F218();
                            }
                            id v87 = *(id *)sub_32A48(2);
                            unint64_t v88 = v87;
                            if (v87)
                            {
                              uint64_t v89 = v87;
                              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                              {
                                sub_806E0((uint64_t)&cf, (uint64_t)(v5 + 5));
                                uint64_t v90 = &cf;
                                if ((v144 & 0x80u) != 0) {
                                  uint64_t v90 = (void *)cf;
                                }
                                *(_DWORD *)__s1 = 136315906;
                                *(void *)&__s1[4] = "AudioSessionUtilities.mm";
                                *(_WORD *)&__s1[12] = 1024;
                                *(_DWORD *)&__s1[14] = 483;
                                __int16 v152 = 1024;
                                int v153 = v86;
                                __int16 v154 = 2080;
                                uint64_t v155 = v90;
                                _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Requested VAD (context id %u) for %s", __s1, 0x22u);
                                if ((char)v144 < 0) {
                                  operator delete((void *)cf);
                                }
                              }
                            }
                            if (v84) {
                              goto LABEL_227;
                            }
                            sub_81338(&cf, (const void *)v5[27], v5[28]);
                            int v130 = v9;
                            sub_81364(v131, (uint64_t)&v130, 1);
                            sub_813F8((uint64_t)v150, (uint64_t)v166);
                            sub_81490((uint64_t)v149, (uint64_t)v163);
                            sub_81528((uint64_t)v148, (uint64_t)&v160);
                            sub_815C0((uint64_t)v147, (uint64_t)v159);
                            sub_81658((uint64_t)v146, (uint64_t)v156);
                            sub_7ECB4(v122, (const void ***)v5 + 36);
                            sub_816F0((uint64_t)__s1, v86, 28, (uint64_t)&cf, (uint64_t)v132, 1, 1987011684, v8, (uint64_t)v131, 1, (uint64_t)v150, (uint64_t)v149, (uint64_t)v148, (uint64_t)v147, (uint64_t)v146, v122, v5[34]);
                            unint64_t v91 = a1[1];
                            unint64_t v92 = a1[2];
                            if (v91 >= v92)
                            {
                              uint64_t v94 = 0x6FB586FB586FB587 * ((uint64_t)(v91 - *a1) >> 3);
                              unint64_t v95 = v94 + 1;
                              if ((unint64_t)(v94 + 1) > 0x94F2094F2094F2) {
                                sub_60548();
                              }
                              unint64_t v96 = 0x6FB586FB586FB587 * ((uint64_t)(v92 - *a1) >> 3);
                              if (2 * v96 > v95) {
                                unint64_t v95 = 2 * v96;
                              }
                              if (v96 >= 0x4A7904A7904A79) {
                                unint64_t v97 = 0x94F2094F2094F2;
                              }
                              else {
                                unint64_t v97 = v95;
                              }
                              if (v97)
                              {
                                CFTypeRef v99 = (char *)sub_820A0(v97);
                              }
                              else
                              {
                                CFTypeRef v99 = 0;
                                uint64_t v98 = 0;
                              }
                              char v100 = &v99[440 * v98];
                              uint64_t v101 = sub_81D70((uint64_t)&v99[440 * v94], (uint64_t)__s1);
                              uint64_t v93 = v101 + 440;
                              char v103 = (char *)*a1;
                              CFIndex v102 = (char *)a1[1];
                              if (v102 == (char *)*a1)
                              {
                                *a1 = v101;
                                a1[1] = v93;
                                a1[2] = (uint64_t)v100;
                                if (!v102) {
                                  goto LABEL_219;
                                }
                              }
                              else
                              {
                                do
                                {
                                  v102 -= 440;
                                  uint64_t v101 = sub_81D70(v101 - 440, (uint64_t)v102);
                                }
                                while (v102 != v103);
                                unsigned int v104 = (char *)*a1;
                                CFIndex v102 = (char *)a1[1];
                                *a1 = v101;
                                a1[1] = v93;
                                a1[2] = (uint64_t)v100;
                                if (v102 != v104)
                                {
                                  do
                                  {
                                    v102 -= 440;
                                    sub_819AC((uint64_t)v102);
                                  }
                                  while (v102 != v104);
                                  CFIndex v102 = v104;
                                }
                                if (!v102) {
                                  goto LABEL_219;
                                }
                              }
                              operator delete(v102);
                            }
                            else
                            {
                              uint64_t v93 = sub_81D70(v91, (uint64_t)__s1) + 440;
                              a1[1] = v93;
                            }
LABEL_219:
                            a1[1] = v93;
                            sub_819AC((uint64_t)__s1);
                            sub_7E020(v129);
                            CFIndex v105 = v128;
                            uint64_t v128 = 0;
                            if (v105) {
                              operator delete(v105);
                            }
                            sub_7E020(v127);
                            unint64_t v106 = v126;
                            uint64_t v126 = 0;
                            if (v106) {
                              operator delete(v106);
                            }
                            sub_7E020(v125);
                            CFIndex v107 = v124;
                            char v124 = 0;
                            if (v107) {
                              operator delete(v107);
                            }
                            CFTypeRef v145 = &v123;
                            sub_4EDB8((void ***)&v145);
                            CFTypeRef v145 = v122;
                            sub_4EDB8((void ***)&v145);
                            sub_81A58(v146);
                            sub_81ADC(v147);
                            sub_81B60(v148);
                            sub_81BE4(v149);
                            sub_81C68(v150);
                            sub_45F50(v131);
                            if (cf)
                            {
                              CFTypeRef v143 = cf;
                              operator delete((void *)cf);
                            }
LABEL_227:
                            sub_81A58(v156);
                            sub_81ADC(v159);
                            sub_81B60(&v160);
                            sub_81BE4(v163);
                            sub_81C68(v166);
                            sub_463E0((void *)v132[1]);
                            sub_463E0(v137);
                            goto LABEL_228;
                          }
                        }
                        else
                        {
                          BOOL v63 = 1;
                          if (((char)v144 & 0x80000000) == 0) {
                            goto LABEL_121;
                          }
                        }
                      }
                      else
                      {
                        BOOL v63 = 0;
                        if (((char)v144 & 0x80000000) == 0) {
                          goto LABEL_121;
                        }
                      }
                      operator delete((void *)cf);
                      goto LABEL_121;
                    }
                  }
                  else
                  {
                    BOOL v50 = 1;
                    if (((char)v144 & 0x80000000) == 0) {
                      goto LABEL_92;
                    }
                  }
                }
                else
                {
                  BOOL v50 = 0;
                  if (((char)v144 & 0x80000000) == 0) {
                    goto LABEL_92;
                  }
                }
                operator delete((void *)cf);
                goto LABEL_92;
              }
            }
            operator delete(v156[0]);
            goto LABEL_59;
          }
        }
        else
        {
          BOOL v21 = 1;
          if (((char)v164 & 0x80000000) == 0) {
            goto LABEL_29;
          }
        }
      }
      else
      {
        BOOL v21 = 0;
        if (((char)v164 & 0x80000000) == 0) {
          goto LABEL_29;
        }
      }
      operator delete(v163[0]);
      goto LABEL_29;
    }
    CFTypeRef v110 = 0;
LABEL_246:
    sub_463E0(v110);
  }
}

void sub_8027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  __cxa_guard_abort(&qword_661520);
  sub_81ADC((void *)(v64 - 248));
  sub_81B60((void *)(v64 - 216));
  sub_81BE4((void *)(v64 - 184));
  sub_81C68((void *)(v64 - 152));
  sub_463E0(a50);
  sub_463E0(a58);
  sub_463E0(a63);
  STACK[0x280] = v63;
  sub_81CEC((void ***)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void *sub_8050C(void *result, uint64_t a2)
{
  if (*(char *)(a2 + 151) < 0) {
    return sub_21E8C(result, *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  *(_OWORD *)CFNumberRef result = *(_OWORD *)(a2 + 128);
  result[2] = *(void *)(a2 + 144);
  return result;
}

void *sub_80550(void *result, uint64_t a2)
{
  if (*(char *)(a2 + 175) < 0) {
    return sub_21E8C(result, *(void **)(a2 + 152), *(void *)(a2 + 160));
  }
  *(_OWORD *)CFNumberRef result = *(_OWORD *)(a2 + 152);
  result[2] = *(void *)(a2 + 168);
  return result;
}

uint64_t sub_80594(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

void sub_805D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649B98, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_649B98))
    {
      LODWORD(v0) = 1936290409;
      HIDWORD(v0) = dword_649BA0 + 1;
      int v1 = 1836346212;
      int v2 = dword_649BA0 + 2;
      int v3 = 1936614497;
      int v4 = dword_649BA0 + 3;
      int v5 = 1819309171;
      int v6 = dword_649BA0 + 4;
      int v7 = 1752200307;
      int v8 = dword_649BA0 + 5;
      dword_649BA0 += 6;
      int v9 = 1885696611;
      int v10 = dword_649BA0;
      sub_825AC(&v0, 6);
      __cxa_guard_release(&qword_649B98);
    }
  }
}

void sub_806C8(_Unwind_Exception *a1)
{
}

void sub_806E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_81338(&v103, *(const void **)(a2 + 176), *(void *)(a2 + 184));
  std::string::append((std::string *)a1, "[ ", 2uLL);
  sub_7D630(&v101, a2);
  int v5 = std::string::insert(&v101, 0, "process: ", 9uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v7 = std::string::append(&v102, "; ", 2uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = &v105;
  }
  else {
    int v9 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v105.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v9, size);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  std::to_string(&v101, *(_DWORD *)(a2 + 88));
  unint64_t v11 = std::string::insert(&v101, 0, "session: ", 9uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v102, "; ", 2uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v15 = &v105;
  }
  else {
    float v15 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  sub_8050C(&v101, a2);
  int v17 = std::string::insert(&v101, 0, "category: ", 0xAuLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = std::string::append(&v102, "; ", 2uLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    uint64_t v21 = *(void *)(a2 + 92);
    if ((v21 & 0xFF00000000) == 0) {
      sub_7F218();
    }
    sub_2417C(&v98, v21);
  }
  else
  {
    sub_21C8C(&v98, "<empty>");
  }
  unint64_t v22 = std::string::insert(&v98, 0, "VAD context ID: ", 0x10uLL);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  int v24 = *(char *)(a1 + 23);
  if (v24 >= 0) {
    unsigned int v25 = (const std::string::value_type *)a1;
  }
  else {
    unsigned int v25 = *(const std::string::value_type **)a1;
  }
  if (v24 >= 0) {
    std::string::size_type v26 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v26 = *(void *)(a1 + 8);
  }
  int v27 = std::string::append(&v99, v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &v105;
  }
  else {
    uint64_t v29 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v105.__r_.__value_.__l.__size_;
  }
  int v31 = std::string::append(&v100, (const std::string::value_type *)v29, v30);
  int v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]);
  if (v32 >= 0) {
    int v33 = (const std::string::value_type *)v31;
  }
  else {
    int v33 = (const std::string::value_type *)v31->__r_.__value_.__r.__words[0];
  }
  if (v32 >= 0) {
    std::string::size_type v34 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v31->__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, v33, v34);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  sub_80550(&v101, a2);
  char v35 = std::string::insert(&v101, 0, "mode: ", 6uLL);
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  uint64_t v37 = std::string::append(&v102, "; ", 2uLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v39 = &v105;
  }
  else {
    int v39 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v39, v40);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  uint64_t v41 = *(void *)(a2 + 232);
  if ((v41 & 0xFF00000000) != 0)
  {
    sub_2417C(&v101, v41);
    CFArrayRef v42 = std::string::insert(&v101, 0, "isolatedUseCaseID: ", 0x13uLL);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    CFBooleanRef v44 = std::string::append(&v102, "; ", 2uLL);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v46 = &v105;
    }
    else {
      int v46 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v47 = v105.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a1, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  int v48 = v103;
  if (v104 == v103) {
    sub_21C8C(&v101, "automatic");
  }
  else {
    sub_82188(&v101, v103, v104);
  }
  char v49 = std::string::insert(&v101, 0, "port types selection: ", 0x16uLL);
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  char v51 = std::string::append(&v102, "; ", 2uLL);
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v53 = &v105;
  }
  else {
    unint64_t v53 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v54 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v54 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v53, v54);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 200)) {
    BOOL v55 = "yes";
  }
  else {
    BOOL v55 = "no";
  }
  sub_21C8C(&v101, v55);
  uint64_t v56 = std::string::insert(&v101, 0, "active: ", 8uLL);
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  int v58 = std::string::append(&v102, "; ", 2uLL);
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v60 = &v105;
  }
  else {
    int v60 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v61 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v61 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v60, v61);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (sub_8234C(a2)) {
    char v62 = "yes";
  }
  else {
    char v62 = "no";
  }
  sub_21C8C(&v101, v62);
  unint64_t v63 = std::string::insert(&v101, 0, "persistent: ", 0xCuLL);
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  uint64_t v65 = std::string::append(&v102, "; ", 2uLL);
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v67 = &v105;
  }
  else {
    __int16 v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, (const std::string::value_type *)v67, v68);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 240)) {
    BOOL v69 = "yes";
  }
  else {
    BOOL v69 = "no";
  }
  sub_21C8C(&v100, v69);
  double v70 = std::string::insert(&v100, 0, "prefer independent route: ", 0x1AuLL);
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  unsigned int v72 = std::string::append(&v101, "; ", 2uLL);
  long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  sub_824D8(&v95, *(const void **)(a2 + 208), *(void *)(a2 + 216));
  BOOL v74 = v95;
  char v75 = v96;
  if (v96 == v95)
  {
    sub_21C8C(&v97, "none");
  }
  else
  {
    sub_824D8(&v94, *(const void **)(a2 + 208), *(void *)(a2 + 216));
    int v2 = v94;
    sub_824D8(__p, *(const void **)(a2 + 208), *(void *)(a2 + 216));
    unint64_t v76 = (uint64_t *)__p[1];
    memset(&v97, 0, sizeof(v97));
    std::string::append(&v97, "{ ", 2uLL);
    if (v2 != v76)
    {
      uint64_t v77 = v2;
      while (1)
      {
        std::to_string(&v105, *v77);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v105;
        }
        else {
          uint64_t v78 = (std::string *)v105.__r_.__value_.__r.__words[0];
        }
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v79 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v79 = v105.__r_.__value_.__l.__size_;
        }
        std::string::append(&v97, (const std::string::value_type *)v78, v79);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        if (++v77 == v76) {
          break;
        }
        std::string::append(&v97, ", ", 2uLL);
      }
    }
    std::string::append(&v97, " }", 2uLL);
  }
  unint64_t v80 = std::string::insert(&v97, 0, "reporter IDs: ", 0xEuLL);
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  int v82 = *(char *)(a1 + 23);
  if (v82 >= 0) {
    unsigned int v83 = (const std::string::value_type *)a1;
  }
  else {
    unsigned int v83 = *(const std::string::value_type **)a1;
  }
  if (v82 >= 0) {
    std::string::size_type v84 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v84 = *(void *)(a1 + 8);
  }
  unint64_t v85 = std::string::append(&v98, v83, v84);
  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v87 = &v102;
  }
  else {
    id v87 = (std::string *)v102.__r_.__value_.__r.__words[0];
  }
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v88 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v88 = v102.__r_.__value_.__l.__size_;
  }
  uint64_t v89 = std::string::append(&v99, (const std::string::value_type *)v87, v88);
  int v90 = SHIBYTE(v89->__r_.__value_.__r.__words[2]);
  if (v90 >= 0) {
    unint64_t v91 = (const std::string::value_type *)v89;
  }
  else {
    unint64_t v91 = (const std::string::value_type *)v89->__r_.__value_.__r.__words[0];
  }
  if (v90 >= 0) {
    std::string::size_type v92 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v92 = v89->__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)a1, v91, v92);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v75 != v74)
  {
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v2) {
      operator delete(v2);
    }
  }
  if (v74) {
    operator delete(v74);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  std::string::append((std::string *)a1, " } ]", 4uLL);
  if (v48) {
    operator delete(v48);
  }
}

void sub_8112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (v51) {
    operator delete(v51);
  }
  if (*(char *)(v52 - 137) < 0) {
    operator delete(*(void **)(v52 - 160));
  }
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  std::string::size_type v54 = *(void **)(v52 - 136);
  if (v54) {
    operator delete(v54);
  }
  if (*(char *)(v50 + 23) < 0) {
    operator delete(*(void **)v50);
  }
  _Unwind_Resume(exception_object);
}

void *sub_81338(void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_46B38(a1, a2, a3, (a3 - (uint64_t)a2) >> 2);
}

void *sub_81364(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 4 * a3;
    int v7 = a1;
    do
    {
      long long v8 = operator new(0x18uLL);
      v8[4] = *(_DWORD *)(a2 + 4 * v5);
      *(void *)long long v8 = v7;
      *((void *)v8 + 1) = a1;
      *((void *)v7 + 1) = v8;
      *a1 = v8;
      a1[2] = ++v5;
      int v7 = v8;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_813E4(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_813F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_81490(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_81528(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_815C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_81658(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_816F0(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void ***a16, uint64_t a17)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_46B38((void *)(a1 + 8), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  sub_46A4C((uint64_t *)(a1 + 32), a5);
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = a7;
  *(_DWORD *)(a1 + 64) = a8;
  sub_820EC((void *)(a1 + 72), a9);
  *(unsigned char *)(a1 + 96) = a10;
  sub_813F8(a1 + 104, a11);
  sub_81490(a1 + 136, a12);
  sub_81528(a1 + 168, a13);
  sub_815C0(a1 + 200, a14);
  sub_81658(a1 + 232, a15);
  sub_7ECB4((void *)(a1 + 264), a16);
  *(void *)(a1 + 432) = a17;
  if (!*(void *)(a1 + 88))
  {
    uint64_t v23 = sub_32A48(13);
    int v24 = sub_7D5E8(1, *(void **)v23, *(void *)(v23 + 8));
    unsigned int v25 = v24;
    if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      long long v28 = "AlternateVAD.h";
      __int16 v29 = 1024;
      int v30 = 178;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return a1;
}

void sub_818F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  sub_7D768(v18);
  sub_81A58(v17);
  sub_81ADC(v16);
  sub_81B60(v15);
  sub_81BE4(v14);
  sub_81C68(v13);
  sub_45F50(v12);
  sub_463E0(*(void **)(v10 + 40));
  long long v20 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_8198C()
{
}

void sub_81994()
{
}

void sub_8199C()
{
}

void sub_819A4()
{
}

uint64_t sub_819AC(uint64_t a1)
{
  int v2 = (void **)(a1 + 264);
  sub_7D72C(a1 + 392);
  sub_7D72C(a1 + 352);
  sub_7D72C(a1 + 312);
  uint64_t v5 = (void **)(a1 + 288);
  sub_4EDB8(&v5);
  uint64_t v5 = v2;
  sub_4EDB8(&v5);
  sub_81A58((void *)(a1 + 232));
  sub_81ADC((void *)(a1 + 200));
  sub_81B60((void *)(a1 + 168));
  sub_81BE4((void *)(a1 + 136));
  sub_81C68((void *)(a1 + 104));
  sub_45F50((void *)(a1 + 72));
  sub_463E0(*(void **)(a1 + 40));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_81A58(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_81ADC(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_81B60(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_81BE4(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_81C68(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_81CEC(void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_819AC(v4 - 440);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_81D70(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = (void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 32) = v4;
    void *v4 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 72) = a1 + 72;
  *(void *)(a1 + 80) = a1 + 72;
  *(void *)(a1 + 88) = 0;
  uint64_t v9 = *(void *)(a2 + 88);
  if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 72);
    uint64_t v10 = *(uint64_t **)(a2 + 80);
    uint64_t v12 = *v10;
    *(void *)(v12 + 8) = *(void *)(v11 + 8);
    **(void **)(v11 + 8) = v12;
    uint64_t v13 = *(void *)(a1 + 72);
    *(void *)(v13 + 8) = v10;
    uint64_t *v10 = v13;
    *(void *)(a1 + 72) = v11;
    *(void *)(v11 + 8) = a1 + 72;
    *(void *)(a1 + 88) = v9;
    *(void *)(a2 + 88) = 0;
  }
  uint64_t v14 = a2 + 128;
  uint64_t v15 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  if (!v15)
  {
    uint64_t v14 = a1 + 128;
    goto LABEL_10;
  }
  if (v15 != a2 + 104)
  {
    *(void *)(a1 + 128) = v15;
LABEL_10:
    *(void *)uint64_t v14 = 0;
    goto LABEL_12;
  }
  *(void *)(a1 + 128) = a1 + 104;
  (*(void (**)(void))(**(void **)v14 + 24))();
LABEL_12:
  uint64_t v16 = a2 + 160;
  uint64_t v17 = *(void *)(a2 + 160);
  if (!v17)
  {
    uint64_t v16 = a1 + 160;
    goto LABEL_16;
  }
  if (v17 != a2 + 136)
  {
    *(void *)(a1 + 160) = v17;
LABEL_16:
    *(void *)uint64_t v16 = 0;
    goto LABEL_18;
  }
  *(void *)(a1 + 160) = a1 + 136;
  (*(void (**)(void))(**(void **)v16 + 24))();
LABEL_18:
  uint64_t v18 = a2 + 192;
  uint64_t v19 = *(void *)(a2 + 192);
  if (!v19)
  {
    uint64_t v18 = a1 + 192;
    goto LABEL_22;
  }
  if (v19 != a2 + 168)
  {
    *(void *)(a1 + 192) = v19;
LABEL_22:
    *(void *)uint64_t v18 = 0;
    goto LABEL_24;
  }
  *(void *)(a1 + 192) = a1 + 168;
  (*(void (**)(void))(**(void **)v18 + 24))();
LABEL_24:
  uint64_t v20 = a2 + 224;
  uint64_t v21 = *(void *)(a2 + 224);
  if (!v21)
  {
    uint64_t v20 = a1 + 224;
    goto LABEL_28;
  }
  if (v21 != a2 + 200)
  {
    *(void *)(a1 + 224) = v21;
LABEL_28:
    *(void *)uint64_t v20 = 0;
    goto LABEL_30;
  }
  *(void *)(a1 + 224) = a1 + 200;
  (*(void (**)(void))(**(void **)v20 + 24))();
LABEL_30:
  uint64_t v22 = *(void *)(a2 + 256);
  if (v22)
  {
    uint64_t v23 = a2 + 256;
    if (v22 == a2 + 232)
    {
      *(void *)(a1 + 256) = a1 + 232;
      (*(void (**)(void))(**(void **)v23 + 24))();
      goto LABEL_36;
    }
    *(void *)(a1 + 256) = v22;
  }
  else
  {
    uint64_t v23 = a1 + 256;
  }
  *(void *)uint64_t v23 = 0;
LABEL_36:
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v24 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v24;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  sub_6DBFC(a1 + 312, (uint64_t *)(a2 + 312));
  sub_6DBFC(a1 + 352, (uint64_t *)(a2 + 352));
  sub_6DBFC(a1 + 392, (uint64_t *)(a2 + 392));
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  return a1;
}

void *sub_820A0(unint64_t a1)
{
  if (a1 >= 0x94F2094F2094F3) {
    sub_60560();
  }
  return operator new(440 * a1);
}

void *sub_820EC(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_82174(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

std::string *sub_82188(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2417C(&v13, *a2);
      uint64_t v6 = std::string::insert(&v13, 0, "'", 1uLL);
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      uint64_t v8 = std::string::append(&v14, "'", 1uLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      int64_t v16 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (v16 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if (v16 >= 0) {
        std::string::size_type v11 = HIBYTE(v16);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_822E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8234C(uint64_t a1)
{
  sub_7BF54(@"VoiceOver", &cf);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_20C54((uint64_t)__p, (const __CFString *)cf);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 151);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = (void *)*(unsigned __int8 *)(a1 + 151);
  }
  else {
    uint64_t v3 = *(void **)(a1 + 136);
  }
  unint64_t v4 = v21;
  int v5 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != (void *)v4)
  {
    BOOL v15 = 0;
    if (((char)v21 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v6 = (const void **)(a1 + 128);
  if ((v21 & 0x80u) == 0) {
    long long v7 = __p;
  }
  else {
    long long v7 = (void **)__p[0];
  }
  if ((v2 & 0x80) != 0)
  {
    BOOL v15 = memcmp(*v6, v7, *(void *)(a1 + 136)) == 0;
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 151))
  {
    uint64_t v8 = v2 - 1;
    do
    {
      int v10 = *(unsigned __int8 *)v6;
      uint64_t v6 = (const void **)((char *)v6 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v7;
      long long v7 = (void **)((char *)v7 + 1);
      int v11 = v12;
      BOOL v14 = v8-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_23:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  BOOL v15 = 1;
  if ((char)v21 < 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (!v15) {
    return 0;
  }
  uint64_t v16 = sub_298DA4();
  return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 224))(v16);
}

void sub_824B8(void *a1)
{
  __cxa_free_exception(v1);
  sub_564E4(a1);
}

void *sub_824D8(void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_4CAB0(a1, a2, a3, (a3 - (uint64_t)a2) >> 3);
}

void sub_82504()
{
}

void sub_8251C(const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_82578(exception, a1);
}

void sub_82564(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_82578(std::logic_error *a1, const char *a2)
{
  CFNumberRef result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t *sub_825AC(uint64_t *result, uint64_t a2)
{
  qword_649B90 = 0;
  qword_649B88 = 0;
  qword_649B80 = (uint64_t)&qword_649B88;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = &result[a2];
    int v5 = &qword_649B88;
    while (1)
    {
      if (v5 == &qword_649B88)
      {
        long long v7 = &qword_649B88;
      }
      else
      {
        uint64_t v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            long long v7 = v6;
            uint64_t v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          uint64_t v8 = &qword_649B88;
          do
          {
            long long v7 = (uint64_t *)v8[2];
            BOOL v9 = *v7 == (void)v8;
            uint64_t v8 = v7;
          }
          while (v9);
        }
        unsigned int v10 = *(_DWORD *)v2;
        if (*((_DWORD *)v7 + 7) >= *(_DWORD *)v2)
        {
          if (v3)
          {
            int v12 = &qword_649B88;
            while (1)
            {
              while (1)
              {
                int v11 = (uint64_t *)v3;
                unsigned int v14 = *(_DWORD *)(v3 + 28);
                if (v10 >= v14) {
                  break;
                }
                uint64_t v3 = *v11;
                int v12 = v11;
                if (!*v11) {
                  goto LABEL_18;
                }
              }
              if (v14 >= v10) {
                break;
              }
              int v12 = v11 + 1;
              uint64_t v3 = v11[1];
              if (!v3) {
                goto LABEL_18;
              }
            }
          }
          else
          {
            int v11 = &qword_649B88;
            int v12 = &qword_649B88;
          }
          goto LABEL_17;
        }
      }
      if (v3) {
        int v11 = v7;
      }
      else {
        int v11 = &qword_649B88;
      }
      if (v3) {
        int v12 = v7 + 1;
      }
      else {
        int v12 = &qword_649B88;
      }
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        std::string v13 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v13 + 28) = *v2;
        *std::string v13 = 0;
        v13[1] = 0;
        void v13[2] = (uint64_t)v11;
        uint64_t *v12 = (uint64_t)v13;
        if (*(void *)qword_649B80)
        {
          qword_649B80 = *(void *)qword_649B80;
          std::string v13 = (uint64_t *)*v12;
        }
        CFNumberRef result = sub_46D00((uint64_t *)qword_649B88, v13);
        ++qword_649B90;
      }
      if (++v2 == v4) {
        return result;
      }
      int v5 = (uint64_t *)qword_649B80;
      uint64_t v3 = qword_649B88;
    }
  }
  return result;
}

void sub_82728(_Unwind_Exception *a1)
{
}

uint64_t sub_82740()
{
  return 1;
}

void sub_82750(uint64_t a1, void *a2)
{
  *a2 = off_6340D8;
}

void *sub_82770()
{
  CFNumberRef result = operator new(0x10uLL);
  void *result = off_6340D8;
  return result;
}

void sub_827A8()
{
}

uint64_t sub_827C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_827D0(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_61F580;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *sub_827F8(uint64_t a1)
{
  CFNumberRef result = operator new(0x10uLL);
  *(void *)CFNumberRef result = off_61F580;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void sub_82844()
{
}

uint64_t sub_8285C()
{
  return 1;
}

void sub_8286C(uint64_t a1, void *a2)
{
  *a2 = off_634048;
}

void *sub_8288C()
{
  CFNumberRef result = operator new(0x10uLL);
  void *result = off_634048;
  return result;
}

void sub_828C4()
{
}

uint64_t sub_828DC()
{
  return 1;
}

void sub_828EC(uint64_t a1, void *a2)
{
  *a2 = off_634000;
}

void *sub_8290C()
{
  CFNumberRef result = operator new(0x10uLL);
  void *result = off_634000;
  return result;
}

void sub_82944()
{
}

void sub_8295C(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649CA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_649CA8))
  {
    sub_829E8(a1);
    __cxa_guard_release(&qword_649CA8);
  }
}

void sub_829D0(_Unwind_Exception *a1)
{
}

void sub_829E8(int a1)
{
  long long v197 = xmmword_4E7880;
  *(_OWORD *)char v282 = xmmword_4E7880;
  sub_72300(__p, (__int32 *)v282, 4);
  sub_857F4((uint64_t)&qword_649BF0, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)char v282 = v197;
  sub_72300(v279, (__int32 *)v282, 4);
  *(_OWORD *)char v282 = v197;
  sub_72300(&v277, (__int32 *)v282, 4);
  *(void *)char v282 = 0x666D6963736D6963;
  sub_72300(v276, (__int32 *)v282, 2);
  *(void *)char v282 = 0x736D6963696D6963;
  sub_72300(v275, (__int32 *)v282, 2);
  *(void *)char v282 = 0x666D6963696D6963;
  sub_72300(v274, (__int32 *)v282, 2);
  *(void *)char v282 = 0x666D6963736D6963;
  sub_72300(v273, (__int32 *)v282, 2);
  if (qword_649BF0 == qword_649BF8)
  {
    uint64_t v2 = (char *)operator new(0x1CuLL);
    v272[2] = v2 + 28;
    qmemcpy(v2, "ivpvovpvcgpvcvmrgcrvgsmvpcps", 28);
    v272[0] = v2;
    v272[1] = v2 + 28;
    uint64_t v3 = operator new(0x10uLL);
    v271[0] = v3;
    *uint64_t v3 = xmmword_4E7890;
    v271[2] = v3 + 1;
    v271[1] = v3 + 1;
    unint64_t v4 = (char *)operator new(0x44uLL);
    v270[2] = v4 + 68;
    qmemcpy(v4, " wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmgcvmrplminkpstmsmmacmpcpspcts", 68);
    v270[0] = v4;
    v270[1] = v4 + 68;
    LODWORD(v265) = 1768778083;
    sub_72300(v282, (__int32 *)&v265, 1);
    sub_72384((uint64_t)&v304, 1651797297, (uint64_t)v282, 1869442665, -1, (uint64_t)v272);
    if (*(void *)v282)
    {
      *(void *)&v282[8] = *(void *)v282;
      operator delete(*(void **)v282);
    }
    LODWORD(v259) = 1819109731;
    sub_72300(v282, (__int32 *)&v259, 1);
    sub_72384((uint64_t)&v265, 1651797298, (uint64_t)v282, 1869442665, -1, (uint64_t)v272);
    if (*(void *)v282)
    {
      *(void *)&v282[8] = *(void *)v282;
      operator delete(*(void **)v282);
    }
    LODWORD(v253) = 1936550243;
    sub_72300(v282, (__int32 *)&v253, 1);
    sub_72384((uint64_t)&v259, 1650551601, (uint64_t)v282, 1869442665, -1, (uint64_t)v272);
    if (*(void *)v282)
    {
      *(void *)&v282[8] = *(void *)v282;
      operator delete(*(void **)v282);
    }
    LODWORD(inAddress) = 1718446435;
    sub_72300(v282, (__int32 *)&inAddress, 1);
    sub_72384((uint64_t)&v253, 1718514737, (uint64_t)v282, 1869442665, -1, (uint64_t)v272);
    if (*(void *)v282)
    {
      *(void *)&v282[8] = *(void *)v282;
      operator delete(*(void **)v282);
    }
    sub_72384((uint64_t)&inAddress, 1650811245, (uint64_t)v276, 1935827812, 1, (uint64_t)v271);
    sub_72384((uint64_t)&v247, 1650811245, (uint64_t)v276, 1668441188, 0, (uint64_t)v271);
    sub_72384((uint64_t)&v241, 1986228839, (uint64_t)&v277, 1668441188, 0, (uint64_t)v271);
    sub_72384((uint64_t)&v236, 1937007986, (uint64_t)v279, 1937007986, 0, (uint64_t)v270);
    sub_72384((uint64_t)&v231, 1937007986, (uint64_t)v279, 1937007986, 1, (uint64_t)v270);
    int v5 = operator new(8uLL);
    *int v5 = 0x766D736776726367;
    *(void *)&v282[16] = v5 + 1;
    *(void *)char v282 = v5;
    *(void *)&v282[8] = v5 + 1;
    sub_72384((uint64_t)&v226, 1634495520, (uint64_t)&unk_649C48, 1852796517, -1, (uint64_t)v282);
    operator delete(v5);
    memset(v282, 0, 24);
    sub_72384((uint64_t)&v221, 1870033508, (uint64_t)&unk_649C48, 1852796517, -1, (uint64_t)v282);
    sub_72424((uint64_t)&v216, 1668112945, (uint64_t)v275);
    sub_72424((uint64_t)&v211, 1668112946, (uint64_t)v274);
    sub_72424((uint64_t)&v206, 1668112947, (uint64_t)v273);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649CE8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649CE8))
    {
      sub_7245C((uint64_t)v282, (uint64_t)&v304);
      sub_724F8(&v203, (uint64_t)v282, 1uLL);
      sub_7258C((uint64_t)&unk_649CB0, 1835216945, 1835229812, 0, 1819244402, 1651799149, (uint64_t *)&v203);
      uint64_t v200 = (void **)&v203;
      sub_72620(&v200);
      sub_726A4(v282);
      __cxa_guard_release(&qword_649CE8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649D28, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649D28))
    {
      sub_7245C((uint64_t)v282, (uint64_t)&v265);
      sub_724F8(&v203, (uint64_t)v282, 1uLL);
      sub_7258C((uint64_t)&unk_649CF0, 1835216948, 1835229812, 1, 1819244402, 1651799149, (uint64_t *)&v203);
      uint64_t v200 = (void **)&v203;
      sub_72620(&v200);
      sub_726A4(v282);
      __cxa_guard_release(&qword_649D28);
    }
    *(_DWORD *)char v282 = v253;
    memset(&v282[8], 0, 24);
    sub_46B38(&v282[8], v254, (uint64_t)p_info, ((char *)p_info - (char *)v254) >> 2);
    *(void *)&v282[32] = v256;
    *(void *)&v282[40] = 0;
    uint64_t v284 = 0;
    uint64_t v283 = 0;
    sub_46B38(&v282[40], v257, (uint64_t)v258, (v258 - (unsigned char *)v257) >> 2);
    int v285 = v247;
    uint64_t v288 = 0;
    uint64_t v286 = 0;
    uint64_t v287 = 0;
    sub_46B38(&v286, v248, (uint64_t)v249, (v249 - (unsigned char *)v248) >> 2);
    uint64_t v289 = v250;
    uint64_t v290 = 0;
    uint64_t v292 = 0;
    uint64_t v291 = 0;
    sub_46B38(&v290, v251, (uint64_t)v252, (v252 - (unsigned char *)v251) >> 2);
    int v293 = (int)v241;
    v295[1] = 0;
    uint64_t v294 = 0;
    v295[0] = 0;
    sub_46B38(&v294, v242, (uint64_t)v243, (v243 - (unsigned char *)v242) >> 2);
    v295[2] = v244;
    memset(v296, 0, sizeof(v296));
    sub_46B38(v296, v245, (uint64_t)v246, (v246 - (unsigned char *)v245) >> 2);
    char v203 = 0;
    uint64_t v204 = 0;
    int v205 = 0;
    uint64_t v200 = (void **)&v203;
    LOBYTE(v201) = 0;
    char v203 = (char *)operator new(0xC0uLL);
    uint64_t v204 = (uint64_t)v203;
    int v205 = v203 + 192;
    uint64_t v6 = 0;
    uint64_t v204 = sub_726E8((uint64_t)v282, (uint64_t)&v297, (uint64_t)v203);
    do
    {
      long long v7 = &v282[v6 * 8];
      uint64_t v8 = (void *)v296[v6];
      if (v8)
      {
        *((void *)v7 + 22) = v8;
        operator delete(v8);
      }
      BOOL v9 = (void *)*((void *)v7 + 17);
      if (v9)
      {
        v295[v6] = v9;
        operator delete(v9);
      }
      v6 -= 8;
    }
    while (v6 != -24);
    *(_DWORD *)char v282 = v259;
    memset(&v282[8], 0, 24);
    sub_46B38(&v282[8], v260, (uint64_t)v261, (v261 - (unsigned char *)v260) >> 2);
    *(void *)&v282[32] = v262;
    *(void *)&v282[40] = 0;
    uint64_t v284 = 0;
    uint64_t v283 = 0;
    sub_46B38(&v282[40], v263, (uint64_t)v264, (v264 - (unsigned char *)v263) >> 2);
    int v285 = inAddress;
    uint64_t v288 = 0;
    uint64_t v286 = 0;
    uint64_t v287 = 0;
    sub_46B38(&v286, inAddress_8, (uint64_t)v300, (v300 - (unsigned char *)inAddress_8) >> 2);
    uint64_t v289 = v301;
    uint64_t v290 = 0;
    uint64_t v292 = 0;
    uint64_t v291 = 0;
    sub_46B38(&v290, v302, (uint64_t)v303, (v303 - (unsigned char *)v302) >> 2);
    uint64_t v200 = 0;
    long long v201 = 0;
    uint64_t v202 = 0;
    long long v198 = &v200;
    char v199 = 0;
    uint64_t v200 = (void **)operator new(0x80uLL);
    long long v201 = v200;
    uint64_t v202 = v200 + 16;
    uint64_t v10 = 0;
    long long v201 = (void **)sub_726E8((uint64_t)v282, (uint64_t)&v293, (uint64_t)v200);
    do
    {
      int v11 = &v282[v10];
      int v12 = *(void **)((char *)&v290 + v10);
      if (v12)
      {
        *((void *)v11 + 14) = v12;
        operator delete(v12);
      }
      std::string v13 = (void *)*((void *)v11 + 9);
      if (v13)
      {
        *(uint64_t *)((char *)&v287 + v10) = (uint64_t)v13;
        operator delete(v13);
      }
      v10 -= 64;
    }
    while (v10 != -128);
    if (MGGetBoolAnswer())
    {
      sub_7277C((uint64_t *)&v203, (uint64_t)&v236);
      sub_7277C((uint64_t *)&v200, (uint64_t)&v231);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649D68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649D68))
    {
      sub_7258C((uint64_t)&unk_649D30, 1835216946, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)&v203);
      __cxa_guard_release(&qword_649D68);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649DA8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649DA8))
    {
      sub_7258C((uint64_t)&unk_649D70, 1835216947, 1835229803, 0, 1970303090, 1650549611, (uint64_t *)&v200);
      __cxa_guard_release(&qword_649DA8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649DE8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649DE8))
    {
      sub_7245C((uint64_t)v282, (uint64_t)&v226);
      sub_724F8(&v198, (uint64_t)v282, 1uLL);
      sub_72890((uint64_t)&unk_649DB0, 1634495520, 1835229548, 1, (uint64_t *)&v198);
      uint64_t v281 = &v198;
      sub_72620((void ***)&v281);
      sub_726A4(v282);
      __cxa_guard_release(&qword_649DE8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649E28, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649E28))
    {
      sub_7245C((uint64_t)v282, (uint64_t)&v216);
      sub_724F8(&v198, (uint64_t)v282, 1uLL);
      sub_72890((uint64_t)&unk_649DF0, 1668112945, 1835229548, 2, (uint64_t *)&v198);
      uint64_t v281 = &v198;
      sub_72620((void ***)&v281);
      sub_726A4(v282);
      __cxa_guard_release(&qword_649E28);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649E68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649E68))
    {
      sub_7245C((uint64_t)v282, (uint64_t)&v211);
      sub_724F8(&v198, (uint64_t)v282, 1uLL);
      sub_72890((uint64_t)&unk_649E30, 1668112946, 1835229548, 2, (uint64_t *)&v198);
      uint64_t v281 = &v198;
      sub_72620((void ***)&v281);
      sub_726A4(v282);
      __cxa_guard_release(&qword_649E68);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649EA8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649EA8))
    {
      sub_7245C((uint64_t)v282, (uint64_t)&v206);
      sub_724F8(&v198, (uint64_t)v282, 1uLL);
      sub_72890((uint64_t)&unk_649E70, 1668112947, 1835229548, 2, (uint64_t *)&v198);
      uint64_t v281 = &v198;
      sub_72620((void ***)&v281);
      sub_726A4(v282);
      __cxa_guard_release(&qword_649EA8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649EE8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649EE8))
    {
      sub_7245C((uint64_t)v282, (uint64_t)&v221);
      sub_724F8(&v198, (uint64_t)v282, 1uLL);
      sub_72890((uint64_t)&unk_649EB0, 1870033508, 1735291491, 2, (uint64_t *)&v198);
      uint64_t v281 = &v198;
      sub_72620((void ***)&v281);
      sub_726A4(v282);
      __cxa_guard_release(&qword_649EE8);
    }
    uint64_t v14 = qword_649BF8;
    if (qword_649BF8 >= (unint64_t)qword_649C00)
    {
      uint64_t v16 = (qword_649BF8 - qword_649BF0) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v17 = (qword_649C00 - qword_649BF0) >> 2;
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        unint64_t v18 = (unint64_t)sub_106EC(v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = (void *)(v18 + 8 * v16);
      uint64_t v21 = v18 + 8 * v19;
      *uint64_t v20 = &unk_649CB0;
      BOOL v15 = v20 + 1;
      uint64_t v23 = qword_649BF0;
      uint64_t v22 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v24 = *((void *)v22 - 1);
          v22 -= 8;
          *--uint64_t v20 = v24;
        }
        while (v22 != (char *)v23);
        uint64_t v22 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v20;
      qword_649BF8 = (uint64_t)v15;
      qword_649C00 = v21;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(void *)qword_649BF8 = &unk_649CB0;
      BOOL v15 = (void *)(v14 + 8);
    }
    qword_649BF8 = (uint64_t)v15;
    if ((unint64_t)v15 >= qword_649C00)
    {
      uint64_t v26 = ((uint64_t)v15 - qword_649BF0) >> 3;
      if ((unint64_t)(v26 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v27 = (qword_649C00 - qword_649BF0) >> 2;
      if (v27 <= v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        unint64_t v28 = (unint64_t)sub_106EC(v28);
      }
      else {
        uint64_t v29 = 0;
      }
      int v30 = (void *)(v28 + 8 * v26);
      uint64_t v31 = v28 + 8 * v29;
      *int v30 = &unk_649CF0;
      unsigned int v25 = v30 + 1;
      uint64_t v33 = qword_649BF0;
      int v32 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v34 = *((void *)v32 - 1);
          v32 -= 8;
          *--int v30 = v34;
        }
        while (v32 != (char *)v33);
        int v32 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v30;
      qword_649BF8 = (uint64_t)v25;
      qword_649C00 = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      void *v15 = &unk_649CF0;
      unsigned int v25 = v15 + 1;
    }
    qword_649BF8 = (uint64_t)v25;
    if ((unint64_t)v25 >= qword_649C00)
    {
      uint64_t v36 = ((uint64_t)v25 - qword_649BF0) >> 3;
      if ((unint64_t)(v36 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v37 = (qword_649C00 - qword_649BF0) >> 2;
      if (v37 <= v36 + 1) {
        unint64_t v37 = v36 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        unint64_t v38 = (unint64_t)sub_106EC(v38);
      }
      else {
        uint64_t v39 = 0;
      }
      std::string::size_type v40 = (void *)(v38 + 8 * v36);
      uint64_t v41 = v38 + 8 * v39;
      *std::string::size_type v40 = &unk_649D30;
      char v35 = v40 + 1;
      uint64_t v43 = qword_649BF0;
      CFArrayRef v42 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v44 = *((void *)v42 - 1);
          v42 -= 8;
          *--std::string::size_type v40 = v44;
        }
        while (v42 != (char *)v43);
        CFArrayRef v42 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v40;
      qword_649BF8 = (uint64_t)v35;
      qword_649C00 = v41;
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *unsigned int v25 = &unk_649D30;
      char v35 = v25 + 1;
    }
    qword_649BF8 = (uint64_t)v35;
    if ((unint64_t)v35 >= qword_649C00)
    {
      uint64_t v46 = ((uint64_t)v35 - qword_649BF0) >> 3;
      if ((unint64_t)(v46 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v47 = (qword_649C00 - qword_649BF0) >> 2;
      if (v47 <= v46 + 1) {
        unint64_t v47 = v46 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48) {
        unint64_t v48 = (unint64_t)sub_106EC(v48);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = (void *)(v48 + 8 * v46);
      uint64_t v51 = v48 + 8 * v49;
      void *v50 = &unk_649D70;
      long long v45 = v50 + 1;
      uint64_t v53 = qword_649BF0;
      uint64_t v52 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v54 = *((void *)v52 - 1);
          v52 -= 8;
          *--uint64_t v50 = v54;
        }
        while (v52 != (char *)v53);
        uint64_t v52 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v50;
      qword_649BF8 = (uint64_t)v45;
      qword_649C00 = v51;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      void *v35 = &unk_649D70;
      long long v45 = v35 + 1;
    }
    qword_649BF8 = (uint64_t)v45;
    if ((unint64_t)v45 >= qword_649C00)
    {
      uint64_t v56 = ((uint64_t)v45 - qword_649BF0) >> 3;
      if ((unint64_t)(v56 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v57 = (qword_649C00 - qword_649BF0) >> 2;
      if (v57 <= v56 + 1) {
        unint64_t v57 = v56 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v57;
      }
      if (v58) {
        unint64_t v58 = (unint64_t)sub_106EC(v58);
      }
      else {
        uint64_t v59 = 0;
      }
      int v60 = (void *)(v58 + 8 * v56);
      uint64_t v61 = v58 + 8 * v59;
      *int v60 = &unk_649DB0;
      BOOL v55 = v60 + 1;
      uint64_t v63 = qword_649BF0;
      char v62 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v64 = *((void *)v62 - 1);
          v62 -= 8;
          *--int v60 = v64;
        }
        while (v62 != (char *)v63);
        char v62 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v60;
      qword_649BF8 = (uint64_t)v55;
      qword_649C00 = v61;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *long long v45 = &unk_649DB0;
      BOOL v55 = v45 + 1;
    }
    qword_649BF8 = (uint64_t)v55;
    if ((unint64_t)v55 >= qword_649C00)
    {
      uint64_t v66 = ((uint64_t)v55 - qword_649BF0) >> 3;
      if ((unint64_t)(v66 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v67 = (qword_649C00 - qword_649BF0) >> 2;
      if (v67 <= v66 + 1) {
        unint64_t v67 = v66 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68) {
        unint64_t v68 = (unint64_t)sub_106EC(v68);
      }
      else {
        uint64_t v69 = 0;
      }
      double v70 = (void *)(v68 + 8 * v66);
      uint64_t v71 = v68 + 8 * v69;
      *double v70 = &unk_649DF0;
      uint64_t v65 = v70 + 1;
      uint64_t v73 = qword_649BF0;
      unsigned int v72 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v74 = *((void *)v72 - 1);
          v72 -= 8;
          *--double v70 = v74;
        }
        while (v72 != (char *)v73);
        unsigned int v72 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v70;
      qword_649BF8 = (uint64_t)v65;
      qword_649C00 = v71;
      if (v72) {
        operator delete(v72);
      }
    }
    else
    {
      *BOOL v55 = &unk_649DF0;
      uint64_t v65 = v55 + 1;
    }
    qword_649BF8 = (uint64_t)v65;
    if ((unint64_t)v65 >= qword_649C00)
    {
      uint64_t v76 = ((uint64_t)v65 - qword_649BF0) >> 3;
      if ((unint64_t)(v76 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v77 = (qword_649C00 - qword_649BF0) >> 2;
      if (v77 <= v76 + 1) {
        unint64_t v77 = v76 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v77;
      }
      if (v78) {
        unint64_t v78 = (unint64_t)sub_106EC(v78);
      }
      else {
        uint64_t v79 = 0;
      }
      unint64_t v80 = (void *)(v78 + 8 * v76);
      uint64_t v81 = v78 + 8 * v79;
      void *v80 = &unk_649E30;
      char v75 = v80 + 1;
      uint64_t v83 = qword_649BF0;
      int v82 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v84 = *((void *)v82 - 1);
          v82 -= 8;
          *--unint64_t v80 = v84;
        }
        while (v82 != (char *)v83);
        int v82 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v80;
      qword_649BF8 = (uint64_t)v75;
      qword_649C00 = v81;
      if (v82) {
        operator delete(v82);
      }
    }
    else
    {
      *uint64_t v65 = &unk_649E30;
      char v75 = v65 + 1;
    }
    qword_649BF8 = (uint64_t)v75;
    if ((unint64_t)v75 >= qword_649C00)
    {
      uint64_t v86 = ((uint64_t)v75 - qword_649BF0) >> 3;
      if ((unint64_t)(v86 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v87 = (qword_649C00 - qword_649BF0) >> 2;
      if (v87 <= v86 + 1) {
        unint64_t v87 = v86 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v88 = v87;
      }
      if (v88) {
        unint64_t v88 = (unint64_t)sub_106EC(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      int v90 = (void *)(v88 + 8 * v86);
      uint64_t v91 = v88 + 8 * v89;
      void *v90 = &unk_649E70;
      unint64_t v85 = v90 + 1;
      uint64_t v93 = qword_649BF0;
      std::string::size_type v92 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v94 = *((void *)v92 - 1);
          v92 -= 8;
          *--int v90 = v94;
        }
        while (v92 != (char *)v93);
        std::string::size_type v92 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v90;
      qword_649BF8 = (uint64_t)v85;
      qword_649C00 = v91;
      if (v92) {
        operator delete(v92);
      }
    }
    else
    {
      *char v75 = &unk_649E70;
      unint64_t v85 = v75 + 1;
    }
    qword_649BF8 = (uint64_t)v85;
    if ((unint64_t)v85 >= qword_649C00)
    {
      uint64_t v96 = ((uint64_t)v85 - qword_649BF0) >> 3;
      if ((unint64_t)(v96 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v97 = (qword_649C00 - qword_649BF0) >> 2;
      if (v97 <= v96 + 1) {
        unint64_t v97 = v96 + 1;
      }
      if ((unint64_t)(qword_649C00 - qword_649BF0) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v98 = v97;
      }
      if (v98) {
        unint64_t v98 = (unint64_t)sub_106EC(v98);
      }
      else {
        uint64_t v99 = 0;
      }
      std::string v100 = (void *)(v98 + 8 * v96);
      uint64_t v101 = v98 + 8 * v99;
      *std::string v100 = &unk_649EB0;
      uint64_t v95 = (uint64_t)(v100 + 1);
      uint64_t v103 = qword_649BF0;
      std::string v102 = (char *)qword_649BF8;
      if (qword_649BF8 != qword_649BF0)
      {
        do
        {
          uint64_t v104 = *((void *)v102 - 1);
          v102 -= 8;
          *--std::string v100 = v104;
        }
        while (v102 != (char *)v103);
        std::string v102 = (char *)qword_649BF0;
      }
      qword_649BF0 = (uint64_t)v100;
      qword_649BF8 = v95;
      qword_649C00 = v101;
      if (v102) {
        operator delete(v102);
      }
    }
    else
    {
      void *v85 = &unk_649EB0;
      uint64_t v95 = (uint64_t)(v85 + 1);
    }
    qword_649BF8 = v95;
    qword_649C08 = (uint64_t)&unk_649CB0;
    sub_6720C(byte_649C60, v277, (uint64_t)v278, (v278 - v277) >> 2);
    sub_6720C(byte_649C78, v305, (uint64_t)v306, (v306 - v305) >> 2);
    sub_6720C(byte_649C90, v305, (uint64_t)v306, (v306 - v305) >> 2);
    *(void *)char v282 = &v200;
    sub_72620((void ***)v282);
    *(void *)char v282 = &v203;
    sub_72620((void ***)v282);
    if (v209)
    {
      long long v210 = v209;
      operator delete(v209);
    }
    if (v207)
    {
      uint64_t v208 = v207;
      operator delete(v207);
    }
    if (v214)
    {
      int v215 = v214;
      operator delete(v214);
    }
    if (v212)
    {
      long long v213 = v212;
      operator delete(v212);
    }
    if (v219)
    {
      int v220 = v219;
      operator delete(v219);
    }
    if (v217)
    {
      uint64_t v218 = v217;
      operator delete(v217);
    }
    if (v224)
    {
      long long v225 = v224;
      operator delete(v224);
    }
    if (v222)
    {
      int v223 = v222;
      operator delete(v222);
    }
    if (v229)
    {
      unsigned int v230 = v229;
      operator delete(v229);
    }
    if (v227)
    {
      int v228 = v227;
      operator delete(v227);
    }
    if (v234)
    {
      uint64_t v235 = v234;
      operator delete(v234);
    }
    if (v232)
    {
      id v233 = v232;
      operator delete(v232);
    }
    if (v239)
    {
      UInt32 v240 = v239;
      operator delete(v239);
    }
    if (v237)
    {
      uint64_t v238 = v237;
      operator delete(v237);
    }
    if (v245)
    {
      unsigned int v246 = v245;
      operator delete(v245);
    }
    if (v242)
    {
      long long v243 = v242;
      operator delete(v242);
    }
    if (v251)
    {
      int v252 = v251;
      operator delete(v251);
    }
    if (v248)
    {
      int v249 = v248;
      operator delete(v248);
    }
    if (v302)
    {
      int v303 = v302;
      operator delete(v302);
    }
    if (inAddress_8)
    {
      int v300 = inAddress_8;
      operator delete(inAddress_8);
    }
    if (v257)
    {
      char v258 = v257;
      operator delete(v257);
    }
    if (v254)
    {
      p_info = v254;
      operator delete(v254);
    }
    if (v263)
    {
      UInt32 v264 = v263;
      operator delete(v263);
    }
    if (v260)
    {
      std::string::size_type v261 = v260;
      operator delete(v260);
    }
    if (v268)
    {
      std::string::size_type v269 = v268;
      operator delete(v268);
    }
    if (v266)
    {
      int v267 = v266;
      operator delete(v266);
    }
    if (v307)
    {
      int v308 = v307;
      operator delete(v307);
    }
    if (v305)
    {
      char v306 = v305;
      operator delete(v305);
    }
    if (v270[0]) {
      operator delete(v270[0]);
    }
    if (v271[0]) {
      operator delete(v271[0]);
    }
    if (v272[0]) {
      operator delete(v272[0]);
    }
  }
  if (a1 && qword_649C30 == qword_649C38)
  {
    UInt32 v231 = 0;
    uint64_t inAddress = 0x676C6F6272647623;
    LODWORD(inAddress_8) = 0;
    uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(1u, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &v231);
    unsigned int v106 = PropertyDataSize;
    if (PropertyDataSize)
    {
      long long v186 = (os_log_t *)sub_32A48(13);
      int v187 = *v186;
      if (*v186 && os_log_type_enabled(*v186, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&v304, (unsigned int *)&inAddress);
        int v188 = SHIBYTE(v306);
        long long v189 = (void **)v304;
        sub_2417C(&v265, v106);
        unsigned int v190 = (void **)&v304;
        if (v188 < 0) {
          unsigned int v190 = v189;
        }
        if (SHIBYTE(v267) >= 0) {
          int v191 = (void **)&v265;
        }
        else {
          int v191 = v265;
        }
        *(_DWORD *)char v282 = 136316162;
        *(void *)&v282[4] = "DeviceSettings_D40Family.cpp";
        *(_WORD *)&v282[12] = 1024;
        *(_DWORD *)&v282[14] = 137;
        *(_WORD *)&v282[18] = 2080;
        *(void *)&v282[20] = v190;
        *(_WORD *)&v282[28] = 2080;
        *(void *)&v282[30] = v191;
        *(_WORD *)&v282[38] = 1024;
        *(_DWORD *)&v282[40] = v106;
        _os_log_impl(&def_1E50E8, v187, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"AudioObjectGetPropertyDataSize(%s) returned error %s (%d).\"", v282, 0x2Cu);
        if (SHIBYTE(v267) < 0) {
          operator delete(v265);
        }
        if (SHIBYTE(v306) < 0) {
          operator delete(v304);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v106;
    }
    UInt32 v107 = v231;
    unint64_t v108 = (unint64_t)v231 >> 2;
    __chkstk_darwin(PropertyDataSize);
    CFTypeRef v110 = (int *)((char *)v196 - ((v109 + 15) & 0x1FFFFFFF0));
    OSStatus PropertyData = AudioObjectGetPropertyData(1u, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &v231, v110);
    v196[1] = v196;
    if (PropertyData)
    {
      char v193 = (os_log_t *)sub_32A48(13);
      unsigned int v194 = *v193;
      if (*v193 && os_log_type_enabled(*v193, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)char v282 = 136315394;
        *(void *)&v282[4] = "DeviceSettings_D40Family.cpp";
        *(_WORD *)&v282[12] = 1024;
        *(_DWORD *)&v282[14] = 143;
        _os_log_impl(&def_1E50E8, v194, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"failed to read current device list\"", v282, 0x12u);
      }
      long long v195 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v195 = &off_6414D8;
      v195[2] = PropertyData;
    }
    if (v107 >= 4)
    {
      if (v108 <= 1) {
        uint64_t v113 = 1;
      }
      else {
        uint64_t v113 = v108;
      }
      *(void *)&long long v112 = 136316418;
      long long v197 = v112;
      while (1)
      {
        CFStringRef v236 = 0;
        UInt32 v226 = 8;
        uint64_t v247 = 0x676C6F6275696420;
        LODWORD(v248) = 0;
        OSStatus v114 = AudioObjectGetPropertyData(*v110, (const AudioObjectPropertyAddress *)&v247, 0, 0, &v226, &v236);
        CFStringRef v253 = v236;
        LOBYTE(v254) = 1;
        if (v114) {
          BOOL v115 = 0;
        }
        else {
          BOOL v115 = v226 == 8;
        }
        if (!v115 || v236 == 0)
        {
          int v117 = (os_log_t *)sub_32A48(20);
          char v118 = *v117;
          if (*v117)
          {
            if (os_log_type_enabled(*v117, OS_LOG_TYPE_DEBUG))
            {
              int v119 = *v110;
              *(_DWORD *)char v282 = v197;
              *(void *)&v282[4] = "DeviceSettings_D40Family.cpp";
              *(_WORD *)&v282[12] = 1024;
              *(_DWORD *)&v282[14] = 155;
              *(_WORD *)&v282[18] = 1024;
              *(_DWORD *)&v282[20] = v119;
              *(_WORD *)&v282[24] = 1024;
              *(_DWORD *)&v282[26] = v114;
              *(_WORD *)&v282[30] = 1024;
              *(_DWORD *)&v282[32] = v231;
              *(_WORD *)&v282[36] = 2048;
              *(void *)&v282[38] = v236;
              _os_log_impl(&def_1E50E8, v118, OS_LOG_TYPE_DEBUG, "%25s:%-5d failed to read device UID for device %u (status = %d, propSize = %u, uid = %p)", v282, 0x2Eu);
            }
          }
        }
        if (v236 && CFEqual(v236, @"Codec")) {
          break;
        }
        sub_72924((uint64_t)&v253);
        ++v110;
        if (!--v113) {
          goto LABEL_291;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649F00, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_649F00))
      {
        qword_649EF0 = 0x7074727545616E63;
        dword_649EF8 = 0;
        __cxa_guard_release(&qword_649F00);
      }
      if (AudioObjectHasProperty(*v110, (const AudioObjectPropertyAddress *)&qword_649EF0))
      {
        qmemcpy(v282, "cimicimscimfmCNAMCNApCNA", 24);
        sub_72300(&v265, (__int32 *)v282, 6);
        sub_72424((uint64_t)v282, 1633775203, (uint64_t)&v265);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649F40, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_649F40))
        {
          sub_7245C((uint64_t)&v304, (uint64_t)v282);
          sub_724F8(&v259, (uint64_t)&v304, 1uLL);
          sub_72890((uint64_t)&unk_649F08, 1633775203, 1735291491, 1, (uint64_t *)&v259);
          uint64_t v241 = (void **)&v259;
          sub_72620(&v241);
          sub_726A4(&v304);
          __cxa_guard_release(&qword_649F40);
        }
        uint64_t v120 = qword_649C38;
        if (qword_649C38 >= (unint64_t)qword_649C40)
        {
          uint64_t v122 = (qword_649C38 - qword_649C30) >> 3;
          if ((unint64_t)(v122 + 1) >> 61) {
            sub_60548();
          }
          unint64_t v123 = (qword_649C40 - qword_649C30) >> 2;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)(qword_649C40 - qword_649C30) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124) {
            unint64_t v124 = (unint64_t)sub_106EC(v124);
          }
          else {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (void *)(v124 + 8 * v122);
          uint64_t v127 = v124 + 8 * v125;
          *uint64_t v126 = &unk_649F08;
          uint64_t v121 = (uint64_t)(v126 + 1);
          uint64_t v129 = qword_649C30;
          uint64_t v128 = (char *)qword_649C38;
          if (qword_649C38 != qword_649C30)
          {
            do
            {
              uint64_t v130 = *((void *)v128 - 1);
              v128 -= 8;
              *--uint64_t v126 = v130;
            }
            while (v128 != (char *)v129);
            uint64_t v128 = (char *)qword_649C30;
          }
          qword_649C30 = (uint64_t)v126;
          qword_649C38 = v121;
          qword_649C40 = v127;
          if (v128) {
            operator delete(v128);
          }
        }
        else
        {
          *(void *)qword_649C38 = &unk_649F08;
          uint64_t v121 = v120 + 8;
        }
        qword_649C38 = v121;
        if (*(void *)&v282[40])
        {
          uint64_t v283 = *(void *)&v282[40];
          operator delete(*(void **)&v282[40]);
        }
        if (*(void *)&v282[8])
        {
          *(void *)&v282[16] = *(void *)&v282[8];
          operator delete(*(void **)&v282[8]);
        }
        if (v265)
        {
          char v266 = v265;
          operator delete(v265);
        }
      }
      sub_72924((uint64_t)&v253);
    }
  }
LABEL_291:
  if (qword_649C10 == qword_649C18)
  {
    int v131 = (char *)operator new(8uLL);
    *(void *)int v131 = 0x726D76637670766FLL;
    char v305 = v131 + 8;
    char v306 = v131 + 8;
    int v304 = v131;
    sub_72384((uint64_t)v282, 1634495520, (uint64_t)v276, 1935827812, 1, (uint64_t)&v304);
    operator delete(v131);
    char v132 = (void **)operator new(8uLL);
    *char v132 = (void *)0x726D76637670766FLL;
    int v267 = v132 + 1;
    int v265 = v132;
    char v266 = v132 + 1;
    sub_72384((uint64_t)&v304, 1634495520, (uint64_t)v276, 1668441188, 0, (uint64_t)&v265);
    operator delete(v132);
    char v133 = operator new(8uLL);
    *char v133 = 0x726D76637670766FLL;
    std::string::size_type v261 = v133 + 1;
    int v259 = v133;
    int v260 = v133 + 1;
    sub_72384((uint64_t)&v265, 1668112945, (uint64_t)v275, 1852796517, -1, (uint64_t)&v259);
    operator delete(v133);
    char v134 = (__CFString *)operator new(8uLL);
    v134->isa = (void *)0x726D76637670766FLL;
    p_info = &v134->info;
    CFStringRef v253 = v134;
    unsigned int v254 = &v134->info;
    sub_72384((uint64_t)&v259, 1634495520, (uint64_t)&unk_649C48, 1852796517, -1, (uint64_t)&v253);
    operator delete(v134);
    uint64_t inAddress = 0;
    CFTypeRef inAddress_8 = 0;
    int v300 = 0;
    sub_72384((uint64_t)&v253, 1870033508, (uint64_t)&unk_649C48, 1852796517, -1, (uint64_t)&inAddress);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649F80, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649F80))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v304);
      sub_724F8(&v247, (uint64_t)&inAddress, 1uLL);
      sub_7258C((uint64_t)&unk_649F48, 1835216946, 1835230834, 0, 1970303090, 1718775412, &v247);
      uint64_t v241 = (void **)&v247;
      sub_72620(&v241);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_649F80);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_649FC0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_649FC0))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)v282);
      sub_724F8(&v247, (uint64_t)&inAddress, 1uLL);
      sub_7258C((uint64_t)&unk_649F88, 1835216947, 1835229803, 0, 1970303090, 1650549611, &v247);
      uint64_t v241 = (void **)&v247;
      sub_72620(&v241);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_649FC0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A000, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64A000))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v265);
      sub_724F8(&v247, (uint64_t)&inAddress, 1uLL);
      sub_72890((uint64_t)&unk_649FC8, 1668112945, 1835229548, 2, &v247);
      uint64_t v241 = (void **)&v247;
      sub_72620(&v241);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_64A000);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A040, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64A040))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v259);
      sub_724F8(&v247, (uint64_t)&inAddress, 1uLL);
      sub_72890((uint64_t)&unk_64A008, 1634495520, 1835229548, 2, &v247);
      uint64_t v241 = (void **)&v247;
      sub_72620(&v241);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_64A040);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A080, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64A080))
    {
      sub_7245C((uint64_t)&inAddress, (uint64_t)&v253);
      sub_724F8(&v247, (uint64_t)&inAddress, 1uLL);
      sub_72890((uint64_t)&unk_64A048, 1870033508, 1735291491, 2, &v247);
      uint64_t v241 = (void **)&v247;
      sub_72620(&v241);
      sub_726A4(&inAddress);
      __cxa_guard_release(&qword_64A080);
    }
    uint64_t v135 = qword_649C18;
    if (qword_649C18 >= (unint64_t)qword_649C20)
    {
      uint64_t v137 = (qword_649C18 - qword_649C10) >> 3;
      if ((unint64_t)(v137 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v138 = (qword_649C20 - qword_649C10) >> 2;
      if (v138 <= v137 + 1) {
        unint64_t v138 = v137 + 1;
      }
      if ((unint64_t)(qword_649C20 - qword_649C10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v139 = v138;
      }
      if (v139) {
        unint64_t v139 = (unint64_t)sub_106EC(v139);
      }
      else {
        uint64_t v140 = 0;
      }
      uint64_t v141 = (void *)(v139 + 8 * v137);
      uint64_t v142 = v139 + 8 * v140;
      *uint64_t v141 = &unk_649F48;
      char v136 = v141 + 1;
      uint64_t v144 = qword_649C10;
      CFTypeRef v143 = (char *)qword_649C18;
      if (qword_649C18 != qword_649C10)
      {
        do
        {
          uint64_t v145 = *((void *)v143 - 1);
          v143 -= 8;
          *--uint64_t v141 = v145;
        }
        while (v143 != (char *)v144);
        CFTypeRef v143 = (char *)qword_649C10;
      }
      qword_649C10 = (uint64_t)v141;
      qword_649C18 = (uint64_t)v136;
      qword_649C20 = v142;
      if (v143) {
        operator delete(v143);
      }
    }
    else
    {
      *(void *)qword_649C18 = &unk_649F48;
      char v136 = (void *)(v135 + 8);
    }
    qword_649C18 = (uint64_t)v136;
    if ((unint64_t)v136 >= qword_649C20)
    {
      uint64_t v147 = ((uint64_t)v136 - qword_649C10) >> 3;
      if ((unint64_t)(v147 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v148 = (qword_649C20 - qword_649C10) >> 2;
      if (v148 <= v147 + 1) {
        unint64_t v148 = v147 + 1;
      }
      if ((unint64_t)(qword_649C20 - qword_649C10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v149 = v148;
      }
      if (v149) {
        unint64_t v149 = (unint64_t)sub_106EC(v149);
      }
      else {
        uint64_t v150 = 0;
      }
      char v151 = (void *)(v149 + 8 * v147);
      uint64_t v152 = v149 + 8 * v150;
      *char v151 = &unk_649F88;
      BOOL v146 = v151 + 1;
      uint64_t v154 = qword_649C10;
      int v153 = (char *)qword_649C18;
      if (qword_649C18 != qword_649C10)
      {
        do
        {
          uint64_t v155 = *((void *)v153 - 1);
          v153 -= 8;
          *--char v151 = v155;
        }
        while (v153 != (char *)v154);
        int v153 = (char *)qword_649C10;
      }
      qword_649C10 = (uint64_t)v151;
      qword_649C18 = (uint64_t)v146;
      qword_649C20 = v152;
      if (v153) {
        operator delete(v153);
      }
    }
    else
    {
      void *v136 = &unk_649F88;
      BOOL v146 = v136 + 1;
    }
    qword_649C18 = (uint64_t)v146;
    if ((unint64_t)v146 >= qword_649C20)
    {
      uint64_t v157 = ((uint64_t)v146 - qword_649C10) >> 3;
      if ((unint64_t)(v157 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v158 = (qword_649C20 - qword_649C10) >> 2;
      if (v158 <= v157 + 1) {
        unint64_t v158 = v157 + 1;
      }
      if ((unint64_t)(qword_649C20 - qword_649C10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v159 = v158;
      }
      if (v159) {
        unint64_t v159 = (unint64_t)sub_106EC(v159);
      }
      else {
        uint64_t v160 = 0;
      }
      char v161 = (void *)(v159 + 8 * v157);
      uint64_t v162 = v159 + 8 * v160;
      *char v161 = &unk_649FC8;
      unint64_t v156 = v161 + 1;
      uint64_t v164 = qword_649C10;
      char v163 = (char *)qword_649C18;
      if (qword_649C18 != qword_649C10)
      {
        do
        {
          uint64_t v165 = *((void *)v163 - 1);
          v163 -= 8;
          *--char v161 = v165;
        }
        while (v163 != (char *)v164);
        char v163 = (char *)qword_649C10;
      }
      qword_649C10 = (uint64_t)v161;
      qword_649C18 = (uint64_t)v156;
      qword_649C20 = v162;
      if (v163) {
        operator delete(v163);
      }
    }
    else
    {
      *BOOL v146 = &unk_649FC8;
      unint64_t v156 = v146 + 1;
    }
    qword_649C18 = (uint64_t)v156;
    if ((unint64_t)v156 >= qword_649C20)
    {
      uint64_t v167 = ((uint64_t)v156 - qword_649C10) >> 3;
      if ((unint64_t)(v167 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v168 = (qword_649C20 - qword_649C10) >> 2;
      if (v168 <= v167 + 1) {
        unint64_t v168 = v167 + 1;
      }
      if ((unint64_t)(qword_649C20 - qword_649C10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v169 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v169 = v168;
      }
      if (v169) {
        unint64_t v169 = (unint64_t)sub_106EC(v169);
      }
      else {
        uint64_t v170 = 0;
      }
      char v171 = (void *)(v169 + 8 * v167);
      uint64_t v172 = v169 + 8 * v170;
      void *v171 = &unk_64A008;
      char v166 = v171 + 1;
      uint64_t v174 = qword_649C10;
      uint64_t v173 = (char *)qword_649C18;
      if (qword_649C18 != qword_649C10)
      {
        do
        {
          uint64_t v175 = *((void *)v173 - 1);
          v173 -= 8;
          *--char v171 = v175;
        }
        while (v173 != (char *)v174);
        uint64_t v173 = (char *)qword_649C10;
      }
      qword_649C10 = (uint64_t)v171;
      qword_649C18 = (uint64_t)v166;
      qword_649C20 = v172;
      if (v173) {
        operator delete(v173);
      }
    }
    else
    {
      *unint64_t v156 = &unk_64A008;
      char v166 = v156 + 1;
    }
    qword_649C18 = (uint64_t)v166;
    if ((unint64_t)v166 >= qword_649C20)
    {
      uint64_t v177 = ((uint64_t)v166 - qword_649C10) >> 3;
      if ((unint64_t)(v177 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v178 = (qword_649C20 - qword_649C10) >> 2;
      if (v178 <= v177 + 1) {
        unint64_t v178 = v177 + 1;
      }
      if ((unint64_t)(qword_649C20 - qword_649C10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v179 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v179 = v178;
      }
      if (v179) {
        unint64_t v179 = (unint64_t)sub_106EC(v179);
      }
      else {
        uint64_t v180 = 0;
      }
      char v181 = (void *)(v179 + 8 * v177);
      uint64_t v182 = v179 + 8 * v180;
      *char v181 = &unk_64A048;
      uint64_t v176 = (uint64_t)(v181 + 1);
      uint64_t v184 = qword_649C10;
      long long v183 = (char *)qword_649C18;
      if (qword_649C18 != qword_649C10)
      {
        do
        {
          uint64_t v185 = *((void *)v183 - 1);
          v183 -= 8;
          *--char v181 = v185;
        }
        while (v183 != (char *)v184);
        long long v183 = (char *)qword_649C10;
      }
      qword_649C10 = (uint64_t)v181;
      qword_649C18 = v176;
      qword_649C20 = v182;
      if (v183) {
        operator delete(v183);
      }
    }
    else
    {
      *char v166 = &unk_64A048;
      uint64_t v176 = (uint64_t)(v166 + 1);
    }
    qword_649C18 = v176;
    qword_649C28 = (uint64_t)&unk_649F48;
    if (v257)
    {
      char v258 = v257;
      operator delete(v257);
    }
    if (v254)
    {
      p_info = v254;
      operator delete(v254);
    }
    if (v263)
    {
      UInt32 v264 = v263;
      operator delete(v263);
    }
    if (v260)
    {
      std::string::size_type v261 = v260;
      operator delete(v260);
    }
    if (v268)
    {
      std::string::size_type v269 = v268;
      operator delete(v268);
    }
    if (v266)
    {
      int v267 = v266;
      operator delete(v266);
    }
    if (v307)
    {
      int v308 = v307;
      operator delete(v307);
    }
    if (v305)
    {
      char v306 = v305;
      operator delete(v305);
    }
    if (*(void *)&v282[40])
    {
      uint64_t v283 = *(void *)&v282[40];
      operator delete(*(void **)&v282[40]);
    }
    if (*(void *)&v282[8])
    {
      *(void *)&v282[16] = *(void *)&v282[8];
      operator delete(*(void **)&v282[8]);
    }
  }
  if (v273[0])
  {
    v273[1] = v273[0];
    operator delete(v273[0]);
  }
  if (v274[0])
  {
    v274[1] = v274[0];
    operator delete(v274[0]);
  }
  if (v275[0])
  {
    v275[1] = v275[0];
    operator delete(v275[0]);
  }
  if (v276[0])
  {
    v276[1] = v276[0];
    operator delete(v276[0]);
  }
  if (v277)
  {
    char v278 = v277;
    operator delete(v277);
  }
  if (v279[0])
  {
    v279[1] = v279[0];
    operator delete(v279[0]);
  }
}

void sub_84E28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 552) = v2;
  sub_72620((void ***)(v1 + 552));
  sub_726A4((void *)(v3 - 184));
  __cxa_guard_abort(&qword_649F40);
  sub_726A4((void *)(v1 + 1120));
  int v5 = *(void **)(v1 + 808);
  if (v5)
  {
    *(void *)(v1 + 816) = v5;
    operator delete(v5);
  }
  sub_72924(v1 + 680);
  uint64_t v6 = *(void **)(v1 + 944);
  if (v6)
  {
    *(void *)(v1 + 952) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)(v1 + 968);
  if (v7)
  {
    *(void *)(v1 + 976) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(v1 + 992);
  if (v8)
  {
    *(void *)(v1 + 1000) = v8;
    operator delete(v8);
  }
  BOOL v9 = *(void **)(v1 + 1016);
  if (v9)
  {
    *(void *)(v1 + 1024) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(v1 + 1040);
  if (v10)
  {
    *(void *)(v1 + 1048) = v10;
    operator delete(v10);
  }
  int v11 = *(void **)(v1 + 1064);
  if (v11)
  {
    *(void *)(v1 + 1072) = v11;
    operator delete(v11);
  }
  sub_72960((uint64_t)&qword_649BF0);
  _Unwind_Resume(a1);
}

void sub_855DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == a2)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    BOOL v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "DeviceSettingsFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 204;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((unint64_t)(a3 - a2) >= 0x41)
  {
    if (!*(unsigned char *)(a1 + 16))
    {
      unint64_t v4 = (os_log_t *)sub_32A48(20);
      int v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          int v12 = "DeviceSettingsFactory.cpp";
          __int16 v13 = 1024;
          int v14 = 209;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d No valid region, but multiple pattern configs specified.", (uint8_t *)&v11, 0x12u);
        }
      }
    }
    if (!*(unsigned char *)(a1 + 24))
    {
      uint64_t v6 = (os_log_t *)sub_32A48(20);
      long long v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          int v12 = "DeviceSettingsFactory.cpp";
          __int16 v13 = 1024;
          int v14 = 210;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d No valid orientation, but multiple pattern configs specified.", (uint8_t *)&v11, 0x12u);
        }
      }
    }
  }
}

void sub_857D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_857F4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_46B38((void *)(a1 + 88), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return a1;
}

void sub_85854(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 64);
  if (v3)
  {
    *(void *)(v1 + 72) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(v1 + 32);
  if (v4)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_85890(uint64_t a1, __int32 *a2, __int32 *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(__int32 **)(v4 + 96);
  uint64_t v6 = wmemchr(*(__int32 **)(v4 + 88), *a2, ((uint64_t)v5 - *(void *)(v4 + 88)) >> 2);
  if (v6) {
    int v5 = v6;
  }
  long long v7 = *(__int32 **)(v4 + 88);
  uint64_t v8 = *(__int32 **)(v4 + 96);
  BOOL v9 = wmemchr(v7, *a3, v8 - v7);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  return (char *)v10 - (char *)v5 > 0;
}

uint64_t sub_85908(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_61F5C8;
  a2[1] = v2;
  return result;
}

void *sub_8592C(uint64_t a1)
{
  CFNumberRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_61F5C8;
  result[1] = v3;
  return result;
}

void sub_85974()
{
}

uint64_t sub_8598C(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4) {
    goto LABEL_46;
  }
  int v6 = 0;
  unsigned int v7 = 0;
  do
  {
    for (uint64_t i = *(void *)(*(void *)v3 + 32); i != *(void *)(*(void *)v3 + 40); i += 64)
    {
      if (*(_DWORD *)i == a2)
      {
        if (v6)
        {
          uint64_t v24 = (os_log_t *)sub_32A48(13);
          unsigned int v25 = *v24;
          if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            unint64_t v37 = "DeviceSettingsFactory.cpp";
            __int16 v38 = 1024;
            int v39 = 272;
            __int16 v40 = 1024;
            *(_DWORD *)uint64_t v41 = a2;
            _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"More than one mic for virtual ID %u\"", buf, 0x18u);
          }
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "More than one mic for virtual ID %u");
        }
        BOOL v9 = *(unsigned int **)(i + 8);
        if (*(void *)(i + 16) - (void)v9 >= 5uLL)
        {
          unint64_t v27 = (os_log_t *)sub_32A48(13);
          unint64_t v28 = *v27;
          if (*v27)
          {
            if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              unint64_t v37 = "DeviceSettingsFactory.cpp";
              __int16 v38 = 1024;
              int v39 = 273;
              __int16 v40 = 1024;
              *(_DWORD *)uint64_t v41 = a2;
              _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"More than one data source for virtual ID %u\"", buf, 0x18u);
            }
          }
          uint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v29, "More than one data source for virtual ID %u");
        }
        unsigned int v7 = *v9;
        int v6 = 1;
      }
    }
    v3 += 8;
  }
  while (v3 != v4);
  if (!v6)
  {
LABEL_46:
    int v30 = (os_log_t *)sub_32A48(13);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      int v32 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      unint64_t v37 = "DeviceSettingsFactory.cpp";
      __int16 v38 = 1024;
      int v39 = 279;
      __int16 v40 = 2080;
      *(void *)uint64_t v41 = v32;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = a2;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Did not find vp mic id for internal id '%s' (%u)\"", buf, 0x22u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Did not find vp mic id for internal id '%s' (%u)");
  }
  uint64_t v10 = sub_32A48(20);
  if (*(unsigned char *)(v10 + 8))
  {
    int v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, v7);
        int v12 = v35 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        unint64_t v37 = "DeviceSettingsFactory.cpp";
        __int16 v38 = 1024;
        int v39 = 280;
        __int16 v40 = 1024;
        *(_DWORD *)uint64_t v41 = a2;
        *(_WORD *)&v41[4] = 2080;
        *(void *)&v41[6] = v12;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resolved Internal Mic ID:%u to Data Source: %s", buf, 0x22u);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[12] - v13;
  if (!v14)
  {
LABEL_25:
    unint64_t v17 = (os_log_t *)sub_32A48(13);
    unint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, v7);
      uint64_t v19 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v37 = "DeviceSettingsFactory.cpp";
      __int16 v38 = 1024;
      int v39 = 291;
      __int16 v40 = 2080;
      *(void *)uint64_t v41 = v19;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not find data source %s within ordered data sources\"", buf, 0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Could not find data source %s within ordered data sources");
  }
  uint64_t v15 = 0;
  unint64_t v16 = v14 >> 2;
  if (v16 <= 1) {
    unint64_t v16 = 1;
  }
  while (v7 != *(_DWORD *)(v13 + 4 * v15))
  {
    if (v16 == ++v15) {
      goto LABEL_25;
    }
  }
  uint64_t v21 = sub_32A48(20);
  if (*(unsigned char *)(v21 + 8))
  {
    uint64_t v22 = *(NSObject **)v21;
    if (*(void *)v21)
    {
      if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        unint64_t v37 = "DeviceSettingsFactory.cpp";
        __int16 v38 = 1024;
        int v39 = 292;
        __int16 v40 = 1024;
        *(_DWORD *)uint64_t v41 = v15;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = a2;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d VP Mic ID:%u was found for Internal ID %u", buf, 0x1Eu);
      }
    }
  }
  return v15;
}

void sub_85EFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_85F24()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A0D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64A0D8))
  {
    dword_64A0D0 = sub_207A20();
    __cxa_guard_release(&qword_64A0D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A0E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64A0E8))
  {
    char v0 = sub_86004(dword_64A0D0);
    byte_64A0E0 = 0;
    byte_64A0E1 = v0;
    __cxa_guard_release(&qword_64A0E8);
  }
}

void sub_85FDC(_Unwind_Exception *a1)
{
}

uint64_t sub_86004(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
    case 48:
    case 68:
    case 79:
    case 82:
    case 197:
      uint64_t v3 = (os_log_t *)sub_32A48(13);
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          int v5 = 136315650;
          int v6 = "DeviceSettingsFactory.cpp";
          __int16 v7 = 1024;
          int v8 = 77;
          __int16 v9 = 1024;
          int v10 = a1;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Product: %u does not support built in mics\"", (uint8_t *)&v5, 0x18u);
        }
      }
      return 1;
    case 1:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 69:
    case 70:
    case 71:
    case 76:
    case 89:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 136:
    case 137:
    case 142:
    case 143:
    case 144:
    case 145:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 178:
    case 180:
    case 183:
    case 184:
    case 186:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
      return result;
    case 2:
    case 3:
    case 4:
    case 5:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 80:
    case 81:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 134:
    case 135:
    case 138:
    case 139:
    case 140:
    case 141:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 177:
    case 179:
    case 181:
    case 182:
    case 185:
    case 187:
    case 194:
    case 195:
    case 196:
      return 1;
    default:
      if ((a1 - 2025) >= 5 && (a1 - 4014) >= 2) {
        return result;
      }
      return 1;
  }
}

void *sub_86438(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    int v6 = a1;
    do
    {
      __int16 v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *__int16 v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_864C0(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_864D4(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_329BA8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_86524(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_3D6ACC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_86574(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a7)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v20 = "AlwaysOnHapticDebug.cpp";
      __int16 v21 = 1024;
      int v22 = 99;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v7 = *(void *)(a7 + 40);
  if (v7)
  {
    unsigned int v8 = sub_46F1D8(v7, a3);
    if (v8)
    {
      unsigned int v9 = v8;
      int v10 = (os_log_t *)sub_32A48(16);
      int v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, v9);
          if (v18 >= 0) {
            int v12 = __p;
          }
          else {
            int v12 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v20 = "AlwaysOnHapticDebug.cpp";
          __int16 v21 = 1024;
          int v22 = 118;
          __int16 v23 = 1024;
          unsigned int v24 = v9;
          __int16 v25 = 2080;
          uint64_t v26 = v12;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error writing buffer to file: %d %s", buf, 0x22u);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  return 0;
}

void sub_86744(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_86760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].int mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    unsigned int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        int v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        int v11 = v19;
        if (v9 < 0) {
          int v11 = v10;
        }
        int v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          int v12 = __p;
        }
        buf[0].int mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].mElement = v6;
        __int16 v26 = 2080;
        unint64_t v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_86958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_86998(AudioObjectID a1, const AudioObjectPropertyAddress *a2, void *inData, int a4)
{
  return AudioObjectSetPropertyData(a1, a2, 0, 0, (a4 - inData) & 0xFFFFFFFC, inData);
}

void sub_869C8(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  if (AudioObjectHasProperty(*a2, inAddress))
  {
    int v17 = 2003329396;
    LOBYTE(__p[0]) = 0;
    unsigned __int8 v20 = 0;
    UInt32 v10 = sub_26E94(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = v10;
    if (v10)
    {
      sub_73978(outData, v10 >> 2);
      OSStatus PropertyData = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, outData[0]);
      int v17 = PropertyData;
      if (PropertyData)
      {
        int v12 = 0;
        *(_DWORD *)a1 = PropertyData;
        *(unsigned char *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 32) = 0;
      }
      else
      {
        AudioObjectID v13 = (void *)sub_86B44((uint64_t)__p, (uint64_t)outData);
        int v14 = v20;
        *(_DWORD *)a1 = v17;
        *(unsigned char *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 32) = 0;
        if (v14)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
          *(void *)(a1 + 24) = v19;
          v13[1] = 0;
          void v13[2] = 0;
          *AudioObjectID v13 = 0;
          int v12 = 1;
          *(unsigned char *)(a1 + 32) = 1;
        }
        else
        {
          int v12 = 0;
        }
      }
      if (outData[0])
      {
        outData[1] = outData[0];
        operator delete(outData[0]);
        int v12 = v20;
      }
      if (v12)
      {
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 32) = 1;
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
}

uint64_t sub_86B44(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      sub_6720C((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_46B38((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

unint64_t sub_86BBC(AudioObjectID a1, double a2)
{
  AudioObjectID v8 = a1;
  v7.int mSelector = 1718839674;
  *(double *)&v7.AudioObjectPropertyScope mScope = a2;
  unint64_t v2 = sub_26DAC(&v8, &v7, 0, 0);
  if (v2 || !v3)
  {
    int v5 = v2;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v5;
  }
  return HIDWORD(v2);
}

void sub_86C60()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)unsigned int v6 = 0u;
  *(_OWORD *)AudioObjectPropertyAddress v7 = 0u;
  long long v8 = 0u;
  int v9 = 0;
  BOOL v10 = (unsigned __int16)sub_6CBEC() > 0x100u;
  char v11 = 1;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v95[80] = 0;
  v95[120] = 0;
  v95[128] = 0;
  v95[200] = 0;
  v95[208] = 0;
  v95[248] = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  LOBYTE(v108) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  LOBYTE(v116) = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 1;
  char v131 = 0;
  char v132 = 0;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  LOBYTE(v137) = 0;
  char v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  __int16 v141 = 0;
  LOBYTE(v142) = 0;
  char v143 = 0;
  LOBYTE(v144) = 0;
  char v145 = 0;
  LOBYTE(v146) = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  LOBYTE(v152) = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(v156) = 0;
  char v157 = 0;
  LOBYTE(v158) = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  LOBYTE(__p) = 0;
  char v166 = 0;
  v167.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  v169.__r_.__value_.__s.__data_[0] = 0;
  char v170 = 0;
  v171.__r_.__value_.__s.__data_[0] = 0;
  char v172 = 0;
  int v173 = 256;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  __int16 v180 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 2;
  int v4 = 5;
  LODWORD(__src) = 3;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x400000003;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  int v9 = 16843009;
  LOWORD(v12) = 257;
  HIWORD(v12) = 257;
  LOWORD(v14) = 256;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 1090519040;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  LOWORD(v67) = 257;
  int v94 = 16843009;
  if (!v97) {
    char v97 = 1;
  }
  int v96 = 1836282987;
  if (!v99) {
    char v99 = 1;
  }
  int v98 = 2;
  if (!v101) {
    char v101 = 1;
  }
  int v100 = 8;
  if (!v103) {
    char v103 = 1;
  }
  int v102 = 16;
  int v106 = 36;
  char v107 = 1;
  int v108 = 36;
  char v109 = 1;
  int v110 = 36;
  char v111 = 1;
  int v116 = 36;
  char v117 = 1;
  int v133 = 42;
  char v134 = 1;
  int v135 = 3;
  char v136 = 1;
  int v137 = 25;
  char v138 = 1;
  int v139 = 42;
  char v140 = 1;
  int v152 = 13;
  char v153 = 1;
  int v154 = 42;
  char v155 = 1;
  int v156 = 23;
  char v157 = 1;
  int v158 = 7;
  char v159 = 1;
  __int16 v141 = 257;
  if (!v143) {
    char v143 = 1;
  }
  int v142 = 4;
  if (!v147) {
    char v147 = 1;
  }
  int v146 = 8;
  if (!v145) {
    char v145 = 1;
  }
  int v144 = 2;
  sub_208140(&__src, 97);
  if (v166)
  {
    if (SHIBYTE(v165) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v165 = v182;
  }
  else
  {
    long long __p = __src;
    uint64_t v165 = v182;
    char v166 = 1;
  }
  sub_87428(&v167, "_top_mic_general");
  sub_87428(&v169, "_top_mic_measurement");
  sub_87428(&v171, "_top_mic_hearing_accessibility");
  sub_402E04(&v0);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_87308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_8732C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  AudioObjectPropertyAddress v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *AudioObjectPropertyAddress v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_46BB4(v7, v11);
    __int16 v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      int v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    int v19 = v16;
LABEL_17:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  const char *v12 = &v9[v17];
  return result;
}

std::string *sub_87428(std::string *a1, char *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0]) {
    return sub_63574(a1, a2);
  }
  uint64_t result = (std::string *)sub_21C8C(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_87458()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A1E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64A1E0))
  {
    sub_874D4();
    __cxa_guard_release(&qword_64A1E0);
  }
}

void sub_874BC(_Unwind_Exception *a1)
{
}

void sub_874D4()
{
  qword_64A1C8 = (uint64_t)off_61F610;
  qword_64A1D0 = 0;
  qword_64A1D8 = 561211748;
  id v0 = objc_alloc_init((Class)ADASManager);
  char v1 = (void *)qword_64A1D0;
  qword_64A1D0 = (uint64_t)v0;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, &qword_64A1C8, (CFNotificationCallback)sub_87584, @"HAENKnownAccessoriesDidChange", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_8756C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_87584()
{
  v20[0] = off_61F670;
  int v21 = v20;
  int v14 = (void *)sub_F820C();
  char v15 = (*(uint64_t (**)(void *))(*v14 + 16))(v14);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v11 = &v12;
  id v0 = v14 + 13;
  char v1 = (void *)v14[14];
  if (v1 != v14 + 13)
  {
    do
    {
      uint64_t v2 = v1[2];
      if (v2)
      {
        (*(void (**)(CFStringRef *__return_ptr))(*(void *)v2 + 128))(&theString1);
        char v3 = sub_F85DC((uint64_t)v21, v1[2]);
        int v4 = v12;
        char v5 = &v12;
        unsigned int v6 = &v12;
        if (!v12) {
          goto LABEL_12;
        }
        char v5 = &v12;
        while (1)
        {
          while (1)
          {
            unsigned int v6 = (uint64_t **)v4;
            if (CFStringCompare(theString1, (CFStringRef)v4[4], 0) != kCFCompareLessThan) {
              break;
            }
            int v4 = *v6;
            char v5 = v6;
            if (!*v6) {
              goto LABEL_12;
            }
          }
          if (CFStringCompare((CFStringRef)v6[4], theString1, 0) != kCFCompareLessThan) {
            break;
          }
          char v5 = v6 + 1;
          int v4 = v6[1];
          if (!v4) {
            goto LABEL_12;
          }
        }
        if (!*v5)
        {
LABEL_12:
          AudioObjectPropertyAddress v7 = operator new(0x38uLL);
          v18[0] = v7;
          v18[1] = &v12;
          char v19 = 0;
          CFStringRef v8 = theString1;
          v7[4] = theString1;
          int v9 = v17;
          *((unsigned char *)v7 + 40) = v17;
          if (v9 && v8) {
            CFRetain(v8);
          }
          *((unsigned char *)v7 + 48) = v3;
          char v19 = 1;
          *AudioObjectPropertyAddress v7 = 0;
          v7[1] = 0;
          v7[2] = v6;
          *char v5 = v7;
          if (*v11)
          {
            unint64_t v11 = (uint64_t **)*v11;
            AudioObjectPropertyAddress v7 = *v5;
          }
          sub_46D00(v12, v7);
          ++v13;
          v18[0] = 0;
          sub_F862C((uint64_t)v18);
        }
        sub_72924((uint64_t)&theString1);
      }
      char v1 = (void *)v1[1];
    }
    while (v1 != v0);
  }
  sub_3BCAC(&v14);
  sub_87810(v12);
  return sub_87864(v20);
}

void sub_877C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_87864((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_87810(void *a1)
{
  if (a1)
  {
    sub_87810(*a1);
    sub_87810(a1[1]);
    sub_72924((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *sub_87864(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_878E8(uint64_t a1, void *a2)
{
  return 1;
}

void sub_87938(uint64_t a1, void *a2)
{
  *a2 = off_61F670;
}

void *sub_87958()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_61F670;
  return result;
}

void sub_87990()
{
}

void sub_879A8(void *a1)
{
  sub_879E0(a1);

  operator delete();
}

void *sub_879E0(void *a1)
{
  *a1 = off_61F610;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, ADAFDarwinNotificationKeyUnknownWiredDeviceStatusChanged, 0);
  uint64_t v3 = a1[2];
  if (v3 != 561211748)
  {
    if (qword_64EE90 != -1) {
      dispatch_once(&qword_64EE90, &stru_61F6A8);
    }
    if (off_64EEA0) {
      off_64EEA0(v3);
    }
  }

  return a1;
}

void sub_87A9C(id a1)
{
  char v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    int v4 = dlerror();
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
  char v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_64EE98 = dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_64EEA0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_64EEA8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_64EEB0 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_64EEB8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_64EEC0 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_64EEC8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_64EED0 = dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_64EED8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_64EEE0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_64EEE8 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_64EEF0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_64EEF8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_64EF00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_64EF08 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_64EF10 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    off_64EF18 = dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    off_64EF20 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_64EF28 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_64EF30 = dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_64EF38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    int v4 = v2;
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_87DC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v6 = *(id *)sub_32A48(17);
  AudioObjectPropertyAddress v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *a2;
    LODWORD(v10[0]) = 136315906;
    *(void *)((char *)v10 + 4) = "ADASManagerInterface.mm";
    WORD6(v10[0]) = 1024;
    *(_DWORD *)((char *)v10 + 14) = 215;
    WORD1(v10[1]) = 2112;
    *(void *)((char *)&v10[1] + 4) = v8;
    WORD6(v10[1]) = 1024;
    *(_DWORD *)((char *)&v10[1] + 14) = a3;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting USB device %@ connection state %d", (uint8_t *)v10, 0x22u);
  }

  sub_87F24(a1);
  memset(v10, 0, sizeof(v10));
  *((void *)&v10[1] + 1) = *a2;
  *(void *)&v10[2] = 2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_61F6A8);
  }
  if (off_64EF20) {
    off_64EF20(v9, v10, a3);
  }
}

void sub_87F24(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 561211748)
  {
    memset(__p, 0, sizeof(__p));
    if (qword_64EE90 != -1) {
      dispatch_once(&qword_64EE90, &stru_61F6A8);
    }
    if (off_64EE98)
    {
      uint64_t v2 = off_64EE98(2, __p);
      int v3 = __p[0];
      *(void *)(a1 + 16) = v2;
      if (v3)
      {
        __p[1] = v3;
        operator delete(v3);
        uint64_t v2 = *(void *)(a1 + 16);
      }
      if (v2 == 561211748)
      {
        uint64_t v4 = sub_32A48(13);
        char v5 = sub_7D5E8(1, *(void **)v4, *(void *)(v4 + 8));
        unsigned int v6 = v5;
        if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "ADASManagerInterface.mm";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 132;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unable to create ADAM client session for registering device\"", (uint8_t *)__p, 0x12u);
        }

        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unable to create ADAM client session for registering device");
      }
      if (qword_64EE90 != -1) {
        dispatch_once(&qword_64EE90, &stru_61F6A8);
      }
    }
    else
    {
      uint64_t v2 = 560033897;
      *(void *)(a1 + 16) = 560033897;
    }
    if (off_64EED0) {
      off_64EED0(v2);
    }
  }
}

void sub_88108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void sub_8813C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v6 = *(id *)sub_32A48(17);
  AudioObjectPropertyAddress v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *a3;
    uint64_t v9 = *a2;
    *(_DWORD *)uint64_t v12 = 136315906;
    *(void *)&void v12[4] = "ADASManagerInterface.mm";
    *(_WORD *)&v12[12] = 1024;
    *(_DWORD *)&v12[14] = 203;
    *(_WORD *)&v12[18] = 2112;
    *(void *)&v12[20] = v8;
    *(_WORD *)&v12[28] = 2112;
    *(void *)&v12[30] = v9;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Marking device %@ as active (UID: %@)", v12, 0x26u);
  }

  sub_87F24(a1);
  *(_OWORD *)&v12[24] = 0u;
  *(_OWORD *)&v12[8] = 0u;
  *(void *)uint64_t v12 = *a3;
  uint64_t v10 = *a2;
  uint64_t v13 = 0;
  *(void *)&v12[24] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_61F6A8);
  }
  if (off_64EF10) {
    off_64EF10(v11, v12);
  }
}

void sub_882A4(uint64_t a1, void *a2, uint64_t *a3)
{
  sub_87F24(a1);
  unsigned int v6 = *(id *)sub_32A48(17);
  AudioObjectPropertyAddress v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *a3;
    *(_DWORD *)uint64_t v11 = 136315650;
    *(void *)&void v11[4] = "ADASManagerInterface.mm";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 189;
    *(_WORD *)&v11[18] = 2112;
    *(void *)&v11[20] = v8;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Registering USB device %@", v11, 0x1Cu);
  }

  *(_OWORD *)&v11[24] = 0u;
  *(_OWORD *)&v11[8] = 0u;
  *(void *)uint64_t v11 = *a2;
  uint64_t v9 = *a3;
  *(void *)&v11[32] = 18;
  uint64_t v12 = 0;
  *(void *)&v11[24] = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_61F6A8);
  }
  if (off_64EF18) {
    off_64EF18(v10, v11);
  }
}

uint64_t sub_88400(uint64_t a1, void *a2)
{
  if (*a2)
  {
    (*(void (**)(id *__return_ptr))(*(void *)a1 + 24))(&v9);
    id v2 = v9;
    int v3 = v2;
    if (v2)
    {
      CFRelease(v2);
      uint64_t v4 = [v3 valueForKey:@"value"];
      char v5 = v4;
      if (v4)
      {
        unsigned int v6 = [v4 BOOLValue];
        int v7 = 1;
      }
      else
      {
        unsigned int v6 = 0;
        int v7 = 0;
      }
    }
    else
    {
      unsigned int v6 = 0;
      int v7 = 0;
    }
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  return v6 | (v7 << 8);
}

void sub_884D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_884F0(uint64_t a1@<X0>, id *a2@<X1>, void *a3@<X8>)
{
  if (*a2)
  {
    id v6 = *a2;
    int v7 = [*(id *)(a1 + 8) getPreferenceFor:ADAFPreferenceKeyHAENKnownAccessories];
    if (v7)
    {
      uint64_t v8 = *(id *)sub_32A48(17);
      id v9 = v8;
      if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        char v18 = "ADASManagerInterface.mm";
        __int16 v19 = 1024;
        int v20 = 154;
        __int16 v21 = 2112;
        id v22 = v7;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Known accessories: %@", buf, 0x1Cu);
      }

      uint64_t v10 = [v7 valueForKey:v6];
      uint64_t v11 = v10;
      if (v10)
      {
        CFRetain(v10);
      }
      else
      {
        int v14 = *(id *)sub_32A48(17);
        char v15 = v14;
        if (v14)
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            id v16 = *a2;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            char v18 = "ADASManagerInterface.mm";
            __int16 v19 = 1024;
            int v20 = 158;
            __int16 v21 = 2112;
            id v22 = v16;
            _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to find ADAM entry for device %@", buf, 0x1Cu);
          }
        }
      }
      sub_22084(a3, v11);
    }
    else
    {
      uint64_t v12 = *(id *)sub_32A48(17);
      uint64_t v13 = v12;
      if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v18 = "ADASManagerInterface.mm";
        __int16 v19 = 1024;
        int v20 = 149;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Known accessories is nil!", buf, 0x12u);
      }

      *a3 = 0;
    }
  }
  else
  {
    *a3 = 0;
  }
}

void sub_88764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_60394((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_887C0(uint64_t a1)
{
  char v1 = [*(id *)(a1 + 8) getPreferenceFor:ADAFPreferenceKeyConnectedWiredDeviceIsHeadphone];
  id v2 = v1;
  BOOL v3 = !v1 || [v1 BOOLValue];
  uint64_t v4 = *(id *)sub_32A48(10);
  char v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = "NO";
    id v9 = "ADASManagerInterface.mm";
    int v8 = 136315650;
    if (v3) {
      id v6 = "YES";
    }
    __int16 v10 = 1024;
    int v11 = 122;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [VolumeLimit] Headphone connection: %s", (uint8_t *)&v8, 0x1Cu);
  }

  return v3;
}

void sub_888FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_88920(uint64_t a1)
{
  if ((**(unsigned int (***)(uint64_t))a1)(a1))
  {
    id v2 = [*(id *)(a1 + 8) getPreferenceFor:ADAFPreferenceKeyVolumeLimitThreshold];
    BOOL v3 = v2;
    if (v2) {
      id v4 = [v2 intValue];
    }
    else {
      id v4 = &stru_20 + 68;
    }
  }
  else
  {
    id v4 = 0;
  }
  if (objc_opt_class())
  {
    id v5 = *(id *)sub_32A48(10);
    id v6 = v5;
    if (v5)
    {
      int v7 = v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = +[PASettings sharedInstance];
        id v9 = (char *)[v8 currentEnrollmentProgress];
        __int16 v10 = "OFF";
        unsigned __int8 v17 = "PersonalAudioInterface.mm";
        int v16 = 136315650;
        if (v9 == (unsigned char *)&def_1E50E8 + 2) {
          __int16 v10 = "ON";
        }
        __int16 v18 = 1024;
        int v19 = 240;
        __int16 v20 = 2080;
        __int16 v21 = v10;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PME EnrollmentProgressSpeech: %s", (uint8_t *)&v16, 0x1Cu);
      }
    }

    int v11 = +[PASettings sharedInstance];
    BOOL v12 = [v11 currentEnrollmentProgress] == (char *)&def_1E50E8 + 2;

    if (v12) {
      id v4 = 0;
    }
  }
  uint64_t v13 = *(id *)sub_32A48(10);
  int v14 = v13;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315650;
    unsigned __int8 v17 = "ADASManagerInterface.mm";
    __int16 v18 = 1024;
    int v19 = 105;
    __int16 v20 = 1024;
    LODWORD(v21) = v4;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [VolumeLimit] SPL Target Settings SPL: %u", (uint8_t *)&v16, 0x18u);
  }

  return v4;
}

void sub_88B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_88BA0(uint64_t a1)
{
  char v1 = [*(id *)(a1 + 8) getPreferenceFor:ADAFPreferenceKeyVolumeLimitEnabled];
  id v2 = [v1 BOOLValue];

  return v2;
}

void sub_88BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_88BF8(uint64_t a1, uint64_t a2)
{
  std::mutex::lock((std::mutex *)&unk_658900);
  uint64_t v4 = qword_6588F0;
  if (!qword_6588F0) {
    goto LABEL_26;
  }
  id v5 = &qword_6588F0;
  do
  {
    char v6 = sub_88E44((int *)(v4 + 32), (int *)a2);
    if (v6 >= 0) {
      int v7 = (uint64_t *)v4;
    }
    else {
      int v7 = (uint64_t *)(v4 + 8);
    }
    if (v6 >= 0) {
      id v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v7;
  }
  while (*v7);
  if (v5 == &qword_6588F0 || (sub_88E44((int *)a2, (int *)v5 + 8) & 0x80) != 0)
  {
LABEL_26:
    char v19 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    int v8 = (os_log_t *)sub_32A48(24);
    id v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a2 + 8);
      int v11 = (void *)(v10 + 24);
      if (*(char *)(v10 + 47) < 0) {
        int v11 = (void *)*v11;
      }
      sub_2417C(v22, *(_DWORD *)(v10 + 48));
      int v12 = v23;
      uint64_t v13 = (void **)v22[0];
      sub_2417C(__p, *(_DWORD *)a2);
      int v14 = v22;
      if (v12 < 0) {
        int v14 = v13;
      }
      if (v21 >= 0) {
        char v15 = __p;
      }
      else {
        char v15 = (void **)__p[0];
      }
      int v16 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      int v25 = "DSPChainCache.cpp";
      __int16 v26 = 1024;
      int v27 = 26;
      __int16 v28 = 2080;
      int v29 = v11;
      __int16 v30 = 2080;
      int v31 = v14;
      __int16 v32 = 2080;
      int v33 = v15;
      __int16 v34 = 1024;
      int v35 = v16;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Retrieving cached DSPChain [%s/%s] for VADContext [%s/%u].", buf, 0x36u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    uint64_t v17 = v5[7];
    *(void *)a1 = v5[6];
    *(void *)(a1 + 8) = v17;
    if (v17)
    {
      __int16 v18 = (atomic_ullong *)(v17 + 8);
      char v19 = 1;
      atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v19 = 1;
    }
  }
  *(unsigned char *)(a1 + 16) = v19;
  std::mutex::unlock((std::mutex *)&unk_658900);
}

void sub_88E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock((std::mutex *)&unk_658900);
  _Unwind_Resume(a1);
}

uint64_t sub_88E44(int *a1, int *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (*a1 == *a2)
  {
    unsigned int v2 = a1[1];
    unsigned int v3 = a2[1];
    if (v2 < v3) {
      return 255;
    }
  }
  else if (v2 < v3)
  {
    return 255;
  }
  if (v3 < v2) {
    return 1;
  }
  unint64_t v5 = *((void *)a1 + 1);
  unint64_t v6 = *((void *)a2 + 1);
  BOOL v7 = v5 == v6;
  if (v5 < v6) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 1;
  }
  if (v7) {
    return 0;
  }
  else {
    return v8;
  }
}

void sub_88E9C(uint64_t a1, uint64_t *a2)
{
  std::mutex::lock((std::mutex *)&unk_658900);
  uint64_t v4 = (os_log_t *)sub_32A48(24);
  unint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    BOOL v7 = (void *)(v6 + 24);
    if (*(char *)(v6 + 47) < 0) {
      BOOL v7 = (void *)*v7;
    }
    sub_2417C(v24, *(_DWORD *)(v6 + 48));
    int v8 = v25;
    id v9 = (void **)v24[0];
    sub_2417C(__p, *(_DWORD *)a1);
    uint64_t v10 = v24;
    if (v8 < 0) {
      uint64_t v10 = v9;
    }
    if (v23 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    int v12 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    int v27 = "DSPChainCache.cpp";
    __int16 v28 = 1024;
    int v29 = 38;
    __int16 v30 = 2080;
    int v31 = v7;
    __int16 v32 = 2080;
    int v33 = v10;
    __int16 v34 = 2080;
    int v35 = v11;
    __int16 v36 = 1024;
    int v37 = v12;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Caching DSPChain [%s/%s] for VADContext [%s/%u].", buf, 0x36u);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  uint64_t v13 = qword_6588F0;
  if (qword_6588F0)
  {
    while (1)
    {
      while (1)
      {
        int v14 = (uint64_t *)v13;
        char v15 = (int *)(v13 + 32);
        if ((sub_88E44((int *)a1, (int *)(v13 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v13 = *v14;
        int v16 = v14;
        if (!*v14) {
          goto LABEL_22;
        }
      }
      if ((sub_88E44(v15, (int *)a1) & 0x80) == 0) {
        break;
      }
      int v16 = v14 + 1;
      uint64_t v13 = v14[1];
      if (!v13) {
        goto LABEL_22;
      }
    }
    uint64_t v17 = v14;
  }
  else
  {
    int v14 = &qword_6588F0;
    int v16 = &qword_6588F0;
LABEL_22:
    uint64_t v17 = operator new(0x40uLL);
    *((_OWORD *)v17 + 2) = *(_OWORD *)a1;
    *((void *)v17 + 6) = 0;
    *((void *)v17 + 7) = 0;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v14;
    uint64_t *v16 = (uint64_t)v17;
    __int16 v18 = (uint64_t *)v17;
    if (*(void *)qword_6588E8)
    {
      qword_6588E8 = *(void *)qword_6588E8;
      __int16 v18 = (uint64_t *)*v16;
    }
    sub_46D00((uint64_t *)qword_6588F0, v18);
    ++qword_6588F8;
  }
  uint64_t v20 = *a2;
  uint64_t v19 = a2[1];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  char v21 = (std::__shared_weak_count *)*((void *)v17 + 7);
  *((void *)v17 + 6) = v20;
  *((void *)v17 + 7) = v19;
  if (v21) {
    sub_4636C(v21);
  }
  std::mutex::unlock((std::mutex *)&unk_658900);
}

void sub_8910C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock((std::mutex *)&unk_658900);
  _Unwind_Resume(a1);
}

uint64_t *sub_89144(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unsigned int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      BOOL v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unsigned int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      BOOL v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *uint64_t v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      char v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    BOOL v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    void v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *uint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    BOOL v7 = *(uint64_t **)(*v7 + 8);
  }
  char v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  int v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    char v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *BOOL v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    void v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    int v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  char v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *char v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *sub_894C8(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(unsigned char *)(v1 + 12)) {
      notify_cancel(*(_DWORD *)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_89534(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_8958C(uint64_t a1)
{
  uint64_t v37 = a1;
  char v38 = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  uint64_t v1 = *(void *)a1;
  sub_46B38(&v38, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  unsigned int v3 = v38;
  uint64_t v2 = (uint64_t)v39;
  uint64_t v4 = &unk_4E6000;
  if (v38 == v39)
  {
    *(void *)&inAddress.int mSelector = 0x676C6F62676F696ELL;
    inAddress.mElement = 0;
    goto LABEL_31;
  }
  int v5 = *(_DWORD **)(v1 + 24);
  uint64_t v6 = *(_DWORD **)(v1 + 32);
  BOOL v7 = v39;
  int v8 = v38;
  while (1)
  {
    int v9 = *(_DWORD *)v8;
    uint64_t v10 = v5;
    if (v5 != v6) {
      break;
    }
LABEL_6:
    v8 += 4;
LABEL_12:
    if (v8 == v7) {
      goto LABEL_16;
    }
  }
  while (*v10 != v9)
  {
    if (++v10 == v6) {
      goto LABEL_6;
    }
  }
  while (1)
  {
    v7 -= 4;
    if (v8 == v7) {
      break;
    }
    int v11 = *(_DWORD *)v7;
    uint64_t v12 = v5;
    while (*v12 != v11)
    {
      if (++v12 == v6)
      {
        *(_DWORD *)int v8 = v11;
        v8 += 4;
        *(_DWORD *)BOOL v7 = v9;
        goto LABEL_12;
      }
    }
  }
  BOOL v7 = v8;
LABEL_16:
  *(void *)&inAddress.int mSelector = 0x676C6F62676F696ELL;
  inAddress.mElement = 0;
  if (v3 == v7)
  {
LABEL_31:
    uint64_t v23 = v2 - (void)v3;
    if (v2 - (void)v3 == *(void *)(v1 + 32) - *(void *)(v1 + 24)) {
      goto LABEL_45;
    }
    goto LABEL_32;
  }
  uint64_t v13 = (AudioObjectID *)v3;
  do
  {
    AudioObjectID v14 = *v13;
    uint64_t v15 = sub_32A48(1);
    uint64_t v16 = sub_32A48(31);
    char v17 = 0;
    uint64_t v18 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1;
      if (v21)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_26;
      }
    }
    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
    if (*(void *)(v15 + 8))
    {
LABEL_26:
      uint64_t v22 = *(NSObject **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_IONotificationManager.cpp";
        __int16 v44 = 1024;
        int v45 = 83;
        __int16 v46 = 1024;
        LODWORD(v47) = v14;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding IsRunning listener for VAD %u.", buf, 0x18u);
      }
    }
LABEL_29:
    AudioObjectAddPropertyListener(v14, &inAddress, (AudioObjectPropertyListenerProc)sub_7670, (void *)v1);
    ++v13;
  }
  while (v13 != (AudioObjectID *)v7);
  uint64_t v23 = v2 - (void)v3;
  uint64_t v4 = (void *)&unk_4E6000;
LABEL_32:
  sub_6720C((char *)(v1 + 24), v3, v2, v23 >> 2);
  uint64_t v24 = sub_32A48(1);
  uint64_t v25 = sub_32A48(31);
  char v26 = 0;
  uint64_t v27 = 0;
  *(void *)AudioObjectPropertyAddress buf = v4[217];
  uint64_t v28 = *(void *)(v24 + 8);
  while (1)
  {
    uint64_t v29 = *(int *)&buf[4 * v27];
    char v30 = v26;
    if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
      break;
    }
    char v26 = 1;
    uint64_t v27 = 1;
    if (v30) {
      goto LABEL_38;
    }
  }
  if ((v28 & v29) == 0) {
    uint64_t v24 = v25;
  }
LABEL_38:
  int v31 = *(NSObject **)v24;
  if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = *(unsigned int **)(v1 + 24);
    __int16 v32 = *(unsigned int **)(v1 + 32);
    sub_89C0C(&__p, v33, v32);
    __int16 v34 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_IONotificationManager.cpp";
    __int16 v44 = 1024;
    int v45 = 97;
    __int16 v46 = 2048;
    uint64_t v47 = v32 - v33;
    __int16 v48 = 2080;
    int v49 = v34;
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Monitoring IO state for %lu VADs %s.", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_45:
  uint64_t v35 = *(void *)(v1 + 16);
  if (*(unsigned char *)(v35 + 12)) {
    notify_post(*(const char **)v35);
  }
  if (v3) {
    operator delete(v3);
  }
  return sub_89534(&v37);
}

void sub_8997C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long buf,long long a22,__int16 a23,__int16 a24,int a25,int a26)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v27 = __cxa_begin_catch(a1);
    uint64_t v28 = (os_log_t *)sub_32A48(13);
    os_log_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      int v30 = v27[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a22) = 1024;
      DWORD1(a22) = v30;
      WORD4(a22) = 2080;
      *(void *)((char *)&a22 + 10) = "";
      a24 = 1024;
      a25 = 98;
      int v31 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v32 = v29;
      uint32_t v33 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v33);
    }
  }
  else
  {
    __int16 v34 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v35 = v34;
      __int16 v36 = (os_log_t *)sub_32A48(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = v38;
        WORD6(a22) = 2080;
        *(void *)((char *)&a22 + 14) = "";
        HIWORD(a25) = 1024;
        a26 = 98;
        int v31 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v32 = v37;
        uint32_t v33 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v39 = (os_log_t *)sub_32A48(13);
      os_log_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = "";
        WORD6(a22) = 1024;
        *(_DWORD *)((char *)&a22 + 14) = 98;
        int v31 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v32 = v40;
        uint32_t v33 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x89934);
}

std::string *sub_89C0C(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      uint64_t v6 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v9
         : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(v9.__r_.__value_.__r.__words[2])
         : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_89CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_89D24(AudioObjectID a1)
{
  v13.mElement = 0;
  AudioObjectID v14 = a1;
  *(void *)&v13.int mSelector = 0x676C6F6269616170;
  unint64_t v2 = sub_26DAC(&v14, &v13, 0, 0);
  v13.mElement = 0;
  AudioObjectID v14 = a1;
  *((void *)&v4 + 1) = v3;
  *(void *)&long long v4 = v2;
  uint64_t v5 = HIDWORD(v2);
  *(void *)&v13.int mSelector = 0x676C6F6270657074;
  unint64_t v7 = sub_26DAC(&v14, &v13, 0, 0);
  BOOL result = 0;
  if (((v4 >> 32) & 0xFF00000000) == 0 || v5 == 0)
  {
    *((void *)&v11 + 1) = v6;
    *(void *)&long long v11 = v7;
    uint64_t v10 = v11 >> 32;
    if ((v10 & 0xFF00000000) == 0) {
      LODWORD(v10) = 1701868910;
    }
    return v10 == 1701868400 || v10 == 1701869160;
  }
  return result;
}

void sub_89DDC(void *a1)
{
  sub_49A90(a1);

  operator delete();
}

uint64_t sub_89E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = a2;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_89E50(void *a1)
{
  sub_49A90(a1);

  operator delete();
}

void sub_89E8C(void *a1)
{
  sub_49A90(a1);

  operator delete();
}

uint64_t sub_89EC8(uint64_t a1)
{
  unint64_t v2 = std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)a1);
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)&v2[1]);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  return a1;
}

void sub_89F14(_Unwind_Exception *a1)
{
  sub_89F28(v1);
  _Unwind_Resume(a1);
}

void sub_89F28(uint64_t a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));

  std::mutex::~mutex((std::mutex *)a1);
}

void sub_89F6C(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  operator delete();
}

uint64_t sub_89FA8()
{
  if (byte_64A230 == 1) {
    return dword_64A22C;
  }
  byte_64A230 = 1;
  uint64_t v1 = MGGetProductType();
  if (v1 > 2159747552)
  {
    if (v1 <= 3196805750)
    {
      if (v1 > 2688879998)
      {
        if (v1 <= 2940697644)
        {
          if (v1 > 2781508712)
          {
            if (v1 <= 2797549162)
            {
              switch(v1)
              {
                case 2781508713:
                  uint64_t result = 6;
                  goto LABEL_481;
                case 2793418701:
                  uint64_t result = 19;
                  goto LABEL_481;
                case 2795618603:
                  uint64_t result = 42;
                  goto LABEL_481;
              }
              goto LABEL_480;
            }
            if (v1 > 2880863277)
            {
              if (v1 != 2880863278)
              {
                if (v1 == 2903084588)
                {
                  uint64_t result = 85;
                  goto LABEL_481;
                }
                goto LABEL_480;
              }
              goto LABEL_367;
            }
            if (v1 == 2797549163)
            {
              uint64_t result = 113;
              goto LABEL_481;
            }
            uint64_t v2 = 2823174122;
LABEL_289:
            if (v1 == v2)
            {
              uint64_t result = 109;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v1 > 2722529671)
          {
            switch(v1)
            {
              case 2722529672:
                uint64_t result = 28;
                goto LABEL_481;
              case 2730762296:
                uint64_t result = 112;
                goto LABEL_481;
              case 2751865418:
                uint64_t result = 143;
                goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v1 == 2688879999)
          {
            uint64_t result = 39;
            goto LABEL_481;
          }
          if (v1 != 2692844695)
          {
            if (v1 == 2702125347)
            {
              uint64_t result = 3;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
LABEL_389:
          uint64_t result = 197;
          goto LABEL_481;
        }
        if (v1 <= 3101941569)
        {
          if (v1 <= 2959111091)
          {
            switch(v1)
            {
              case 2940697645:
                uint64_t result = 38;
                goto LABEL_481;
              case 2941181571:
                uint64_t result = 41;
                goto LABEL_481;
              case 2943112657:
                uint64_t result = 149;
                goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v1 > 3001488777)
          {
            if (v1 == 3001488778)
            {
              uint64_t result = 34;
              goto LABEL_481;
            }
            if (v1 != 3054476161) {
              goto LABEL_480;
            }
            goto LABEL_323;
          }
          if (v1 == 2959111092)
          {
            uint64_t result = 95;
            goto LABEL_481;
          }
          if (v1 == 2979575960)
          {
            uint64_t result = 155;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v1 <= 3133873108)
        {
          if (v1 != 3101941570)
          {
            if (v1 == 3104290450) {
              goto LABEL_344;
            }
            uint64_t v8 = 3128362815;
            goto LABEL_260;
          }
          goto LABEL_351;
        }
        if (v1 <= 3184375230)
        {
          if (v1 == 3133873109)
          {
            uint64_t result = 62;
            goto LABEL_481;
          }
          if (v1 == 3143587592)
          {
            uint64_t result = 166;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v1 == 3184375231)
        {
LABEL_397:
          uint64_t result = 77;
          goto LABEL_481;
        }
        uint64_t v7 = 3196158497;
        goto LABEL_373;
      }
      if (v1 <= 2458172801)
      {
        if (v1 > 2309863437)
        {
          if (v1 <= 2385671068)
          {
            if (v1 == 2309863438)
            {
              uint64_t result = 37;
              goto LABEL_481;
            }
            if (v1 == 2311900306)
            {
              uint64_t result = 14;
              goto LABEL_481;
            }
            if (v1 != 2336512887) {
              goto LABEL_480;
            }
            goto LABEL_212;
          }
          if (v1 > 2445473384)
          {
            if (v1 == 2445473385)
            {
              uint64_t result = 124;
              goto LABEL_481;
            }
            if (v1 == 2454275343)
            {
              uint64_t result = 63;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v1 != 2385671069)
          {
            if (v1 == 2418348558)
            {
              uint64_t result = 135;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
LABEL_310:
          uint64_t result = 50;
          goto LABEL_481;
        }
        if (v1 > 2262113698)
        {
          if (v1 != 2262113699)
          {
            if (v1 == 2270970153)
            {
              uint64_t result = 21;
              goto LABEL_481;
            }
            if (v1 != 2288107369) {
              goto LABEL_480;
            }
            goto LABEL_396;
          }
          goto LABEL_390;
        }
        if (v1 == 2159747553)
        {
          uint64_t result = 26;
          goto LABEL_481;
        }
        if (v1 == 2162679683)
        {
LABEL_383:
          uint64_t result = 122;
          goto LABEL_481;
        }
        uint64_t v7 = 2236272848;
LABEL_373:
        if (v1 != v7) {
          goto LABEL_480;
        }
LABEL_374:
        uint64_t result = 87;
        goto LABEL_481;
      }
      if (v1 > 2619317133)
      {
        if (v1 <= 2628394913)
        {
          if (v1 != 2619317134)
          {
            if (v1 != 2622433984)
            {
              if (v1 == 2625074843)
              {
                uint64_t result = 161;
                goto LABEL_481;
              }
              goto LABEL_480;
            }
            goto LABEL_385;
          }
          goto LABEL_395;
        }
        if (v1 <= 2644487443)
        {
          if (v1 == 2628394914) {
            goto LABEL_323;
          }
          uint64_t v5 = 2634105757;
          goto LABEL_109;
        }
        if (v1 == 2644487444)
        {
          uint64_t result = 92;
          goto LABEL_481;
        }
        if (v1 != 2673319456) {
          goto LABEL_480;
        }
LABEL_360:
        uint64_t result = 73;
        goto LABEL_481;
      }
      if (v1 > 2516717267)
      {
        if (v1 != 2516717268)
        {
          if (v1 == 2566016329)
          {
            uint64_t result = 94;
            goto LABEL_481;
          }
          if (v1 != 2614323575) {
            goto LABEL_480;
          }
          goto LABEL_310;
        }
        goto LABEL_360;
      }
      if (v1 == 2458172802) {
        goto LABEL_374;
      }
      if (v1 == 2468178735) {
        goto LABEL_384;
      }
      if (v1 != 2487868872) {
        goto LABEL_480;
      }
LABEL_392:
      uint64_t result = 107;
      goto LABEL_481;
    }
    if (v1 <= 3711192743)
    {
      if (v1 <= 3540156651)
      {
        if (v1 <= 3300281075)
        {
          if (v1 <= 3228373940)
          {
            if (v1 == 3196805751)
            {
              uint64_t result = 7;
              goto LABEL_481;
            }
            if (v1 == 3215673114)
            {
              uint64_t result = 75;
              goto LABEL_481;
            }
            uint64_t v6 = 3217792190;
            goto LABEL_147;
          }
          if (v1 == 3228373941) {
            goto LABEL_391;
          }
          if (v1 != 3241053352)
          {
            if (v1 == 3242623367)
            {
              uint64_t result = 15;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_392;
        }
        if (v1 <= 3397214290)
        {
          if (v1 == 3300281076)
          {
            uint64_t result = 54;
            goto LABEL_481;
          }
          if (v1 == 3348380076)
          {
            uint64_t result = 4;
            goto LABEL_481;
          }
          if (v1 != 3361025853) {
            goto LABEL_480;
          }
          goto LABEL_388;
        }
        if (v1 > 3417429876)
        {
          if (v1 != 3417429877)
          {
            if (v1 == 3455223061)
            {
              uint64_t result = 83;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_379;
        }
        if (v1 == 3397214291)
        {
          uint64_t result = 74;
          goto LABEL_481;
        }
        if (v1 == 3402870384)
        {
          uint64_t result = 70;
          goto LABEL_481;
        }
LABEL_480:
        uint64_t result = 0;
        goto LABEL_481;
      }
      if (v1 > 3637438249)
      {
        if (v1 <= 3670339450)
        {
          if (v1 == 3637438250)
          {
            uint64_t result = 52;
            goto LABEL_481;
          }
          if (v1 != 3645319985)
          {
            if (v1 == 3663011141)
            {
              uint64_t result = 156;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_386;
        }
        if (v1 > 3683904381)
        {
          if (v1 == 3683904382)
          {
            uint64_t result = 137;
            goto LABEL_481;
          }
          uint64_t v4 = 3707345671;
          goto LABEL_366;
        }
        if (v1 == 3670339451) {
          goto LABEL_240;
        }
        uint64_t v5 = 3677894691;
LABEL_109:
        if (v1 == v5)
        {
          uint64_t result = 102;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v1 <= 3585085678)
      {
        if (v1 == 3540156652)
        {
          uint64_t result = 93;
          goto LABEL_481;
        }
        if (v1 != 3543203160)
        {
          if (v1 == 3571532206)
          {
            uint64_t result = 151;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        goto LABEL_240;
      }
      if (v1 == 3585085679)
      {
        uint64_t result = 10;
        goto LABEL_481;
      }
      if (v1 != 3599094683)
      {
        uint64_t v7 = 3636345305;
        goto LABEL_373;
      }
    }
    else
    {
      if (v1 > 3885279869)
      {
        if (v1 > 4068102501)
        {
          if (v1 <= 4231109336)
          {
            switch(v1)
            {
              case 4068102502:
                uint64_t result = 168;
                goto LABEL_481;
              case 4172444931:
                uint64_t result = 132;
                goto LABEL_481;
              case 4201643249:
                uint64_t result = 35;
                goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v1 > 4240173201)
          {
            if (v1 == 4240173202)
            {
              uint64_t result = 2;
              goto LABEL_481;
            }
            if (v1 == 4242862982)
            {
              uint64_t result = 80;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v1 != 4231109337)
          {
            if (v1 == 4232256925)
            {
              uint64_t result = 114;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_231;
        }
        if (v1 <= 3953847431)
        {
          if (v1 == 3885279870)
          {
            uint64_t result = 32;
            goto LABEL_481;
          }
          if (v1 != 3933865620)
          {
            if (v1 == 3933982784)
            {
              uint64_t result = 53;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_240;
        }
        if (v1 > 4055323050)
        {
          if (v1 == 4055323051)
          {
            uint64_t result = 58;
            goto LABEL_481;
          }
          if (v1 == 4067129264)
          {
            uint64_t result = 139;
            goto LABEL_481;
          }
        }
        else
        {
          if (v1 == 3953847432)
          {
            uint64_t result = 170;
            goto LABEL_481;
          }
          if (v1 == 4025247511)
          {
            uint64_t result = 133;
            goto LABEL_481;
          }
        }
        goto LABEL_480;
      }
      if (v1 <= 3825599859)
      {
        if (v1 <= 3767261005)
        {
          switch(v1)
          {
            case 3711192744:
              uint64_t result = 84;
              goto LABEL_481;
            case 3742999858:
              uint64_t result = 159;
              goto LABEL_481;
            case 3743999268:
              uint64_t result = 24;
              goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v1 == 3767261006)
        {
          uint64_t result = 153;
          goto LABEL_481;
        }
        if (v1 != 3801472101)
        {
          if (v1 == 3819635030)
          {
            uint64_t result = 160;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        goto LABEL_302;
      }
      if (v1 <= 3863625341)
      {
        switch(v1)
        {
          case 3825599860:
            uint64_t result = 20;
            goto LABEL_481;
          case 3839750255:
            uint64_t result = 169;
            goto LABEL_481;
          case 3856877970:
            uint64_t result = 110;
            goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v1 > 3865922941)
      {
        if (v1 == 3865922942)
        {
          uint64_t result = 56;
          goto LABEL_481;
        }
        if (v1 == 3867318491)
        {
          uint64_t result = 162;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v1 != 3863625342)
      {
        if (v1 == 3865897231)
        {
          uint64_t result = 79;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
    }
    uint64_t result = 97;
    goto LABEL_481;
  }
  if (v1 > 1325975681)
  {
    if (v1 > 1737882205)
    {
      if (v1 > 2032616840)
      {
        if (v1 <= 2089455187)
        {
          if (v1 <= 2080700390)
          {
            if (v1 != 2032616841)
            {
              if (v1 == 2048538371)
              {
                uint64_t result = 60;
                goto LABEL_481;
              }
              if (v1 == 2078329141)
              {
                uint64_t result = 31;
                goto LABEL_481;
              }
              goto LABEL_480;
            }
            goto LABEL_394;
          }
          if (v1 > 2084894488)
          {
            if (v1 == 2084894489)
            {
              uint64_t result = 164;
              goto LABEL_481;
            }
            if (v1 == 2085054105)
            {
              uint64_t result = 158;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v1 == 2080700391)
          {
            uint64_t result = 46;
            goto LABEL_481;
          }
          if (v1 != 2081274472) {
            goto LABEL_480;
          }
          goto LABEL_383;
        }
        if (v1 > 2132302343)
        {
          if (v1 <= 2144123135)
          {
            if (v1 == 2132302344)
            {
              uint64_t result = 148;
              goto LABEL_481;
            }
            uint64_t v6 = 2141052862;
LABEL_147:
            if (v1 != v6) {
              goto LABEL_480;
            }
            goto LABEL_240;
          }
          if (v1 != 2144123136)
          {
            uint64_t v9 = 2158787296;
LABEL_377:
            if (v1 == v9)
            {
              uint64_t result = 69;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
LABEL_379:
          uint64_t result = 194;
          goto LABEL_481;
        }
        if (v1 != 2089455188)
        {
          if (v1 != 2095883268)
          {
            if (v1 != 2103978418) {
              goto LABEL_480;
            }
            goto LABEL_265;
          }
          goto LABEL_389;
        }
LABEL_388:
        uint64_t result = 105;
        goto LABEL_481;
      }
      if (v1 <= 1878257789)
      {
        if (v1 <= 1770142588)
        {
          if (v1 == 1737882206)
          {
            uint64_t result = 116;
            goto LABEL_481;
          }
          if (v1 != 1744899922)
          {
            if (v1 == 1756509290)
            {
              uint64_t result = 144;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_240;
        }
        if (v1 == 1770142589)
        {
          uint64_t result = 163;
          goto LABEL_481;
        }
        if (v1 == 1834147427) {
          goto LABEL_323;
        }
        uint64_t v10 = 1868379043;
LABEL_350:
        if (v1 != v10) {
          goto LABEL_480;
        }
        goto LABEL_351;
      }
      if (v1 > 1990293941)
      {
        if (v1 <= 2021146988)
        {
          if (v1 == 1990293942)
          {
            uint64_t result = 140;
            goto LABEL_481;
          }
          uint64_t v3 = 2001966017;
LABEL_172:
          if (v1 != v3) {
            goto LABEL_480;
          }
          goto LABEL_302;
        }
        if (v1 == 2021146989)
        {
          uint64_t result = 18;
          goto LABEL_481;
        }
        uint64_t v10 = 2023824667;
        goto LABEL_350;
      }
      if (v1 == 1878257790)
      {
        uint64_t result = 81;
        goto LABEL_481;
      }
      if (v1 == 1895344378)
      {
        uint64_t result = 86;
        goto LABEL_481;
      }
      if (v1 != 1908832379) {
        goto LABEL_480;
      }
LABEL_231:
      uint64_t result = 196;
      goto LABEL_481;
    }
    if (v1 <= 1517755654)
    {
      if (v1 > 1402208363)
      {
        if (v1 <= 1415625991)
        {
          switch(v1)
          {
            case 1402208364:
              uint64_t result = 130;
              goto LABEL_481;
            case 1408738134:
              uint64_t result = 150;
              goto LABEL_481;
            case 1412429328:
              uint64_t result = 65;
              goto LABEL_481;
          }
        }
        else if (v1 > 1429914405)
        {
          if (v1 == 1429914406)
          {
            uint64_t result = 23;
            goto LABEL_481;
          }
          if (v1 == 1434404433)
          {
            uint64_t result = 17;
            goto LABEL_481;
          }
        }
        else
        {
          if (v1 == 1415625992)
          {
            uint64_t result = 136;
            goto LABEL_481;
          }
          if (v1 == 1419435331)
          {
            uint64_t result = 142;
            goto LABEL_481;
          }
        }
        goto LABEL_480;
      }
      if (v1 <= 1371389548)
      {
        if (v1 == 1325975682)
        {
          uint64_t result = 67;
          goto LABEL_481;
        }
        if (v1 != 1353145733)
        {
          uint64_t v8 = 1364038516;
          goto LABEL_260;
        }
LABEL_302:
        uint64_t result = 88;
        goto LABEL_481;
      }
      if (v1 == 1371389549)
      {
        uint64_t result = 27;
        goto LABEL_481;
      }
      if (v1 != 1373516433)
      {
        if (v1 == 1380747801)
        {
          uint64_t result = 127;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
LABEL_351:
      uint64_t result = 100;
      goto LABEL_481;
    }
    if (v1 <= 1602181455)
    {
      if (v1 > 1554479184)
      {
        switch(v1)
        {
          case 1554479185:
            uint64_t result = 167;
            goto LABEL_481;
          case 1559256613:
            uint64_t result = 55;
            goto LABEL_481;
          case 1573906122:
            uint64_t result = 138;
            goto LABEL_481;
        }
      }
      else
      {
        switch(v1)
        {
          case 1517755655:
            uint64_t result = 171;
            goto LABEL_481;
          case 1540760353:
            uint64_t result = 5;
            goto LABEL_481;
          case 1549248876:
            uint64_t result = 172;
            goto LABEL_481;
        }
      }
      goto LABEL_480;
    }
    if (v1 > 1644180311)
    {
      if (v1 > 1721691076)
      {
        if (v1 == 1721691077)
        {
          uint64_t result = 16;
          goto LABEL_481;
        }
        if (v1 == 1733600853)
        {
          uint64_t result = 128;
          goto LABEL_481;
        }
      }
      else
      {
        if (v1 == 1644180312)
        {
          uint64_t result = 145;
          goto LABEL_481;
        }
        if (v1 == 1701146937)
        {
          uint64_t result = 49;
          goto LABEL_481;
        }
      }
      goto LABEL_480;
    }
    if (v1 == 1602181456)
    {
      uint64_t result = 154;
      goto LABEL_481;
    }
    if (v1 == 1608945770)
    {
      uint64_t result = 192;
      goto LABEL_481;
    }
    if (v1 != 1625227434) {
      goto LABEL_480;
    }
LABEL_391:
    uint64_t result = 104;
    goto LABEL_481;
  }
  if (v1 <= 676119127)
  {
    if (v1 <= 337183580)
    {
      if (v1 > 133314239)
      {
        if (v1 <= 228444037)
        {
          if (v1 == 133314240)
          {
            uint64_t result = 40;
            goto LABEL_481;
          }
          if (v1 != 157833461)
          {
            if (v1 == 173258742)
            {
              uint64_t result = 59;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_387;
        }
        if (v1 > 262180326)
        {
          if (v1 == 262180327)
          {
            uint64_t result = 123;
            goto LABEL_481;
          }
          if (v1 == 330877086)
          {
            uint64_t result = 43;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v1 != 228444038)
        {
          if (v1 != 253148925) {
            goto LABEL_480;
          }
LABEL_384:
          uint64_t result = 120;
          goto LABEL_481;
        }
LABEL_386:
        uint64_t result = 72;
        goto LABEL_481;
      }
      if (v1 <= 42878381)
      {
        switch(v1)
        {
          case 23433786:
            uint64_t result = 61;
            goto LABEL_481;
          case 33245053:
            uint64_t result = 68;
            goto LABEL_481;
          case 40511012:
            uint64_t result = 134;
            goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v1 == 42878382)
      {
        uint64_t result = 12;
        goto LABEL_481;
      }
      if (v1 != 79936591)
      {
        if (v1 != 88647037) {
          goto LABEL_480;
        }
        goto LABEL_397;
      }
LABEL_390:
      uint64_t result = 76;
      goto LABEL_481;
    }
    if (v1 > 363237282)
    {
      if (v1 > 502329936)
      {
        if (v1 <= 555503453)
        {
          if (v1 == 502329937)
          {
            uint64_t result = 22;
            goto LABEL_481;
          }
          uint64_t v4 = 551446205;
LABEL_366:
          if (v1 != v4) {
            goto LABEL_480;
          }
          goto LABEL_367;
        }
        if (v1 != 555503454)
        {
          if (v1 == 574536383)
          {
            uint64_t result = 30;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
LABEL_395:
        uint64_t result = 106;
        goto LABEL_481;
      }
      if (v1 != 363237283)
      {
        if (v1 == 425046865)
        {
          uint64_t result = 157;
          goto LABEL_481;
        }
        if (v1 == 445396642)
        {
          uint64_t result = 117;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
LABEL_240:
      uint64_t result = 193;
      goto LABEL_481;
    }
    if (v1 > 344862119)
    {
      switch(v1)
      {
        case 344862120:
          uint64_t result = 115;
          goto LABEL_481;
        case 355234908:
          uint64_t result = 129;
          goto LABEL_481;
        case 358923952:
          uint64_t result = 126;
          goto LABEL_481;
      }
      goto LABEL_480;
    }
    if (v1 == 337183581)
    {
      uint64_t result = 11;
      goto LABEL_481;
    }
    if (v1 == 340218669)
    {
      uint64_t result = 111;
      goto LABEL_481;
    }
    uint64_t v3 = 341800273;
    goto LABEL_172;
  }
  if (v1 <= 952317140)
  {
    if (v1 > 776033018)
    {
      if (v1 > 851437780)
      {
        if (v1 <= 910181309)
        {
          if (v1 == 851437781)
          {
            uint64_t result = 29;
            goto LABEL_481;
          }
          if (v1 == 896202454)
          {
            uint64_t result = 71;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v1 != 910181310)
        {
          if (v1 != 910313402) {
            goto LABEL_480;
          }
LABEL_344:
          uint64_t result = 195;
          goto LABEL_481;
        }
LABEL_394:
        uint64_t result = 25;
        goto LABEL_481;
      }
      if (v1 == 776033019)
      {
        uint64_t result = 57;
        goto LABEL_481;
      }
      if (v1 != 810906663)
      {
        uint64_t v9 = 820711327;
        goto LABEL_377;
      }
LABEL_385:
      uint64_t result = 98;
      goto LABEL_481;
    }
    if (v1 <= 746003605)
    {
      if (v1 == 676119128)
      {
        uint64_t result = 146;
        goto LABEL_481;
      }
      if (v1 == 689804742)
      {
        uint64_t result = 36;
        goto LABEL_481;
      }
      uint64_t v8 = 698697055;
LABEL_260:
      if (v1 != v8) {
        goto LABEL_480;
      }
      goto LABEL_379;
    }
    if (v1 != 746003606)
    {
      if (v1 == 749116821)
      {
        uint64_t result = 165;
        goto LABEL_481;
      }
      uint64_t v2 = 761631964;
      goto LABEL_289;
    }
LABEL_323:
    uint64_t result = 101;
    goto LABEL_481;
  }
  if (v1 > 1234705394)
  {
    if (v1 > 1293446024)
    {
      if (v1 <= 1302273957)
      {
        if (v1 != 1293446025)
        {
          if (v1 == 1294429942)
          {
            uint64_t result = 147;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
LABEL_265:
        uint64_t result = 96;
        goto LABEL_481;
      }
      if (v1 != 1302273958)
      {
        if (v1 == 1309571158)
        {
          uint64_t result = 141;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
LABEL_396:
      uint64_t result = 108;
      goto LABEL_481;
    }
    if (v1 == 1234705395)
    {
      uint64_t result = 125;
      goto LABEL_481;
    }
    if (v1 != 1280441783)
    {
      if (v1 == 1280909812)
      {
        uint64_t result = 152;
        goto LABEL_481;
      }
      goto LABEL_480;
    }
LABEL_387:
    uint64_t result = 78;
    goto LABEL_481;
  }
  if (v1 <= 1110205731)
  {
    if (v1 != 952317141)
    {
      if (v1 == 1060988941)
      {
        uint64_t result = 9;
        goto LABEL_481;
      }
      if (v1 == 1085318934)
      {
        uint64_t result = 131;
        goto LABEL_481;
      }
      goto LABEL_480;
    }
LABEL_212:
    uint64_t result = 121;
    goto LABEL_481;
  }
  if (v1 > 1119807501)
  {
    if (v1 != 1119807502)
    {
      if (v1 == 1169082144)
      {
        uint64_t result = 33;
        goto LABEL_481;
      }
      goto LABEL_480;
    }
LABEL_367:
    uint64_t result = 51;
    goto LABEL_481;
  }
  if (v1 == 1110205732)
  {
    uint64_t result = 48;
    goto LABEL_481;
  }
  if (v1 != 1114644381) {
    goto LABEL_480;
  }
  uint64_t result = 82;
LABEL_481:
  dword_64A22C = result;
  return result;
}

uint64_t sub_8B774()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64A220))
  {
    BOOL v1 = (MGGetBoolAnswer() & 1) != 0 || sub_89FA8() == 173 || sub_89FA8() == 188;
    byte_64A218 = v1;
    __cxa_guard_release(&qword_64A220);
  }
  return byte_64A218;
}

void sub_8B7FC(_Unwind_Exception *a1)
{
}

void sub_8B814(id a1)
{
  BOOL v1 = (const void *)MGCopyAnswer();
  long long v11 = v1;
  char v12 = 1;
  if (v1) {
    BOOL v2 = CFEqual(v1, kCFBooleanTrue) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  byte_64A228 = v2;
  CFStringRef v3 = (const __CFString *)MGCopyAnswer();
  CFStringRef v9 = v3;
  char v10 = 1;
  if (v3) {
    BOOL v4 = CFEqual(@"Carrier", v3);
  }
  else {
    BOOL v4 = 0;
  }
  byte_64A229 = v4;
  uint64_t v5 = (const void *)MGCopyAnswer();
  uint64_t v7 = v5;
  char v8 = 1;
  if (v5) {
    BOOL v6 = CFEqual(v5, kCFBooleanTrue) != 0;
  }
  else {
    BOOL v6 = 0;
  }
  byte_64A22A = v6;
  sub_8B960((uint64_t)&v7);
  sub_72924((uint64_t)&v9);
  sub_8B960((uint64_t)&v11);
}