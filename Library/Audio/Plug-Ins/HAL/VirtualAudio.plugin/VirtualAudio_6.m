uint64_t sub_38F5A0(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  char v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v5 = *(void *)(a4 + 24);
  if (!v5) {
    goto LABEL_16;
  }
  v9 = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v5 + 48))(v5, a2, a1);
  v10 = *(void *)(a4 + 24);
  if (v9)
  {
    if (v10)
    {
      result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48))(v10, a3, a2);
      v12 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v12;
        return result;
      }
      *a1 = *a2;
      *a2 = v12;
      v16 = *(void *)(a4 + 24);
      if (v16)
      {
        result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v16 + 48))(v16, a3, a2);
        if (!result) {
          return result;
        }
        v12 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    sub_56964();
  }
  if (!v10) {
    goto LABEL_16;
  }
  result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48))(v10, a3, a2);
  if (!result) {
    return result;
  }
  v13 = *a2;
  *a2 = *a3;
  *a3 = v13;
  v14 = *(void *)(a4 + 24);
  if (!v14) {
    goto LABEL_16;
  }
  result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v14 + 48))(v14, a2, a1);
  if (result)
  {
    v15 = *a1;
    *a1 = *a2;
    *a2 = v15;
  }
  return result;
}

uint64_t sub_38F73C(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  sub_38F5A0(a1, a2, a3, a5);
  uint64_t v10 = *(void *)(a5 + 24);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48))(v10, a4, a3);
  if (!result) {
    return result;
  }
  int v12 = *a3;
  *a3 = *a4;
  *a4 = v12;
  uint64_t v13 = *(void *)(a5 + 24);
  if (!v13) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v13 + 48))(v13, a3, a2);
  if (!result) {
    return result;
  }
  int v14 = *a2;
  *a2 = *a3;
  *a3 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
LABEL_9:
  }
    sub_56964();
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v15 + 48))(v15, a2, a1);
  if (result)
  {
    int v16 = *a1;
    *a1 = *a2;
    *a2 = v16;
  }
  return result;
}

uint64_t sub_38F860(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  sub_38F73C(a1, a2, a3, a4, a6);
  uint64_t v12 = *(void *)(a6 + 24);
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v12 + 48))(v12, a5, a4);
  if (!result) {
    return result;
  }
  int v14 = *a4;
  *a4 = *a5;
  *a5 = v14;
  uint64_t v15 = *(void *)(a6 + 24);
  if (!v15) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v15 + 48))(v15, a4, a3);
  if (!result) {
    return result;
  }
  int v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v17 + 48))(v17, a3, a2);
  if (!result) {
    return result;
  }
  int v18 = *a2;
  *a2 = *a3;
  *a3 = v18;
  uint64_t v19 = *(void *)(a6 + 24);
  if (!v19) {
LABEL_11:
  }
    sub_56964();
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v19 + 48))(v19, a2, a1);
  if (result)
  {
    int v20 = *a1;
    *a1 = *a2;
    *a2 = v20;
  }
  return result;
}

BOOL sub_38F9D0(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        goto LABEL_24;
      }
      v9 = a2 - 1;
      if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v8 + 48))(v8, a2 - 1, a1))
      {
        int v10 = *a1;
        *a1 = *v9;
        int *v9 = v10;
      }
      return 1;
    case 3:
      sub_38F5A0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_38F73C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_38F860(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_38F5A0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *(void *)(a3 + 24);
    if (!v15) {
LABEL_24:
    }
      sub_56964();
    if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v15 + 48))(v15, v12, v11))
    {
      int v20 = *v12;
      uint64_t v16 = v13;
      while (1)
      {
        *(int *)((char *)a1 + v16 + 12) = *(int *)((char *)a1 + v16 + 8);
        if (v16 == -8) {
          break;
        }
        uint64_t v17 = *(void *)(a3 + 24);
        if (!v17) {
          goto LABEL_24;
        }
        char v18 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v17 + 48))(v17, &v20, (uint64_t)a1 + v16 + 4);
        v16 -= 4;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (int *)((char *)a1 + v16 + 12);
          goto LABEL_15;
        }
      }
      uint64_t v19 = a1;
LABEL_15:
      *uint64_t v19 = v20;
      if (++v14 == 8) {
        return v12 + 1 == a2;
      }
    }
    v11 = v12;
    v13 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_38FC20(uint64_t a1, AudioObjectID a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 8) = a1 + 16;
  v7 = (uint64_t **)(a1 + 8);
  *(void *)a1 = off_636A08;
  *(void *)(a1 + 24) = 0;
  v9 = a3 + 1;
  uint64_t v8 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      int v10 = (uint64_t *)*v6;
      v11 = v6;
      if (*v7 == v6) {
        goto LABEL_8;
      }
      uint64_t v12 = (uint64_t *)*v6;
      uint64_t v13 = v6;
      if (v10)
      {
        do
        {
          v11 = v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v13[2];
          BOOL v14 = *v11 == (void)v13;
          uint64_t v13 = v11;
        }
        while (v14);
      }
      unsigned int v15 = *((_DWORD *)v8 + 8);
      if (*((_DWORD *)v11 + 8) < v15)
      {
LABEL_8:
        if (v10) {
          uint64_t v16 = (uint64_t **)v11;
        }
        else {
          uint64_t v16 = (uint64_t **)v6;
        }
        if (v10) {
          uint64_t v17 = (uint64_t **)(v11 + 1);
        }
        else {
          uint64_t v17 = (uint64_t **)v6;
        }
      }
      else
      {
        uint64_t v16 = (uint64_t **)v6;
        uint64_t v17 = (uint64_t **)v6;
        if (v10)
        {
          uint64_t v17 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v10;
              unsigned int v22 = *((_DWORD *)v10 + 8);
              if (v15 >= v22) {
                break;
              }
              int v10 = *v16;
              uint64_t v17 = v16;
              if (!*v16) {
                goto LABEL_15;
              }
            }
            if (v22 >= v15) {
              break;
            }
            uint64_t v17 = v16 + 1;
            int v10 = v16[1];
            if (!v10) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v17)
      {
LABEL_15:
        char v18 = operator new(0x40uLL);
        int v19 = *((_DWORD *)v8 + 8);
        v18[5] = 0;
        *((_DWORD *)v18 + 8) = v19;
        v18[6] = 0;
        v18[7] = 0;
        sub_46B38(v18 + 5, (const void *)v8[5], v8[6], (uint64_t)(v8[6] - v8[5]) >> 2);
        sub_46CA8(v7, (uint64_t)v16, v17, v18);
      }
      int v20 = (void *)v8[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          int v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (void *)v8[2];
          BOOL v14 = *v21 == (void)v8;
          uint64_t v8 = v21;
        }
        while (!v14);
      }
      uint64_t v8 = v21;
    }
    while (v21 != v9);
  }
  *(void *)(a1 + 40) = 0;
  v23 = (uint64_t **)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  v24 = (void *)a3[3];
  if (v24 != a3 + 4)
  {
    do
    {
      v25 = *v23;
      v26 = (uint64_t *)(a1 + 40);
      if (*(uint64_t ***)(a1 + 32) == v23) {
        goto LABEL_38;
      }
      v27 = *v23;
      v28 = (uint64_t *)(a1 + 40);
      if (v25)
      {
        do
        {
          v26 = v27;
          v27 = (uint64_t *)v27[1];
        }
        while (v27);
      }
      else
      {
        do
        {
          v26 = (uint64_t *)v28[2];
          BOOL v14 = *v26 == (void)v28;
          v28 = v26;
        }
        while (v14);
      }
      unsigned int v29 = *((_DWORD *)v24 + 8);
      if (*((_DWORD *)v26 + 8) < v29)
      {
LABEL_38:
        if (v25) {
          v30 = (uint64_t **)v26;
        }
        else {
          v30 = (uint64_t **)(a1 + 40);
        }
        if (v25) {
          v31 = (uint64_t **)(v26 + 1);
        }
        else {
          v31 = (uint64_t **)(a1 + 40);
        }
      }
      else
      {
        v30 = (uint64_t **)(a1 + 40);
        v31 = (uint64_t **)(a1 + 40);
        if (v25)
        {
          v31 = (uint64_t **)(a1 + 40);
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v25;
              unsigned int v36 = *((_DWORD *)v25 + 8);
              if (v29 >= v36) {
                break;
              }
              v25 = *v30;
              v31 = v30;
              if (!*v30) {
                goto LABEL_45;
              }
            }
            if (v36 >= v29) {
              break;
            }
            v31 = v30 + 1;
            v25 = v30[1];
            if (!v25) {
              goto LABEL_45;
            }
          }
        }
      }
      if (!*v31)
      {
LABEL_45:
        v32 = operator new(0x40uLL);
        int v33 = *((_DWORD *)v24 + 8);
        v32[5] = 0;
        *((_DWORD *)v32 + 8) = v33;
        v32[6] = 0;
        v32[7] = 0;
        sub_46B38(v32 + 5, (const void *)v24[5], v24[6], (uint64_t)(v24[6] - v24[5]) >> 2);
        sub_46CA8((uint64_t **)(a1 + 32), (uint64_t)v30, v31, v32);
      }
      v34 = (void *)v24[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (void *)v24[2];
          BOOL v14 = *v35 == (void)v24;
          v24 = v35;
        }
        while (!v14);
      }
      v24 = v35;
    }
    while (v35 != a3 + 4);
  }
  *(_DWORD *)(a1 + 56) = a2;
  sub_38DF84((uint64_t *)(a1 + 64), a2, (uint64_t)a3);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = sub_3EFF58();
  if (!a2)
  {
    v38 = (os_log_t *)sub_32A48(13);
    v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "SubPortPolicy.cpp";
      __int16 v47 = 1024;
      int v48 = 118;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_76:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!a3[2])
  {
    v40 = (os_log_t *)sub_32A48(13);
    v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "SubPortPolicy.cpp";
      __int16 v47 = 1024;
      int v48 = 119;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_76;
  }
  if (!a3[5])
  {
    v42 = (os_log_t *)sub_32A48(13);
    v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "SubPortPolicy.cpp";
      __int16 v47 = 1024;
      int v48 = 120;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_76;
  }
  sub_38DA74(*(unsigned int *)(a1 + 56));
  return a1;
}

void sub_390168(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v7;
    operator delete(v7);
  }
  sub_7F264(*(void **)(v1 + 72));
  sub_7F264(*v5);
  sub_7F264(*v4);
  _Unwind_Resume(a1);
}

void sub_3901F4(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v6 = (os_log_t *)sub_32A48(17);
  v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 56);
    sub_82188((std::string *)&v162, *a2, a2[1]);
    v9 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
    buf.mSelector = 136315906;
    *(void *)&buf.mScope = "SubPortPolicy.cpp";
    __int16 v152 = 1024;
    int v153 = 133;
    __int16 v154 = 1024;
    *(_DWORD *)v155 = v8;
    *(_WORD *)&v155[4] = 2080;
    *(void *)&v155[6] = v9;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Setting sub-ports active on device %u: %s", (uint8_t *)&buf, 0x22u);
    if (v162.__m_.__opaque[15] < 0) {
      operator delete((void *)v162.__m_.__sig);
    }
  }
  if (a3) {
    AudioObjectPropertyScope v10 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v10 = 1869968496;
  }
  inAddress.mSelector = 1936945763;
  inAddress.mScope = v10;
  inAddress.mElement = 0;
  UInt32 outDataSize = 0;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(*(_DWORD *)(a1 + 56), &inAddress, 0, 0, &outDataSize);
  uint64_t v105 = a1;
  if (PropertyDataSize)
  {
    v94 = (os_log_t *)sub_32A48(13);
    v95 = *v94;
    if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
    {
      sub_16C9C4((uint64_t)&v162, &inAddress.mSelector);
      v96 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
      int v97 = *(_DWORD *)(a1 + 56);
      buf.mSelector = 136315906;
      *(void *)&buf.mScope = "SubPortPolicy.cpp";
      __int16 v152 = 1024;
      int v153 = 139;
      __int16 v154 = 2080;
      *(void *)v155 = v96;
      *(_WORD *)&v155[8] = 1024;
      *(_DWORD *)&v155[10] = v97;
      _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error getting data size of property %s on device %u.\"", (uint8_t *)&buf, 0x22u);
      if (v162.__m_.__opaque[15] < 0) {
        operator delete((void *)v162.__m_.__sig);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = PropertyDataSize;
  }
  sub_73978(&outData, (unint64_t)outDataSize >> 2);
  if (outDataSize)
  {
    OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 56), &inAddress, 0, 0, &outDataSize, outData);
    if (PropertyData)
    {
      v99 = (os_log_t *)sub_32A48(13);
      v100 = *v99;
      if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
      {
        sub_16C9C4((uint64_t)&v162, &inAddress.mSelector);
        v101 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
        int v102 = *(_DWORD *)(a1 + 56);
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "SubPortPolicy.cpp";
        __int16 v152 = 1024;
        int v153 = 144;
        __int16 v154 = 2080;
        *(void *)v155 = v101;
        *(_WORD *)&v155[8] = 1024;
        *(_DWORD *)&v155[10] = v102;
        _os_log_impl(&def_1E50E8, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error getting property %s on device %u.\"", (uint8_t *)&buf, 0x22u);
        if (v162.__m_.__opaque[15] < 0) {
          operator delete((void *)v162.__m_.__sig);
        }
      }
      v103 = __cxa_allocate_exception(0x10uLL);
      *(void *)v103 = &off_6414D8;
      v103[2] = PropertyData;
    }
  }
  uint64_t v13 = outData;
  if (v108 - (unsigned char *)outData != (char *)a2[1] - (char *)*a2 || memcmp(outData, *a2, v108 - (unsigned char *)outData))
  {
    uint64_t v14 = sub_32A48(17);
    if (*(unsigned char *)(v14 + 8))
    {
      unsigned int v15 = *(NSObject **)v14;
      if (*(void *)v14)
      {
        if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
        {
          int v16 = *(_DWORD *)(a1 + 56);
          sub_82188((std::string *)&v162, *a2, a2[1]);
          uint64_t v17 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "SubPortPolicy.cpp";
          __int16 v152 = 1024;
          int v153 = 150;
          __int16 v154 = 1024;
          *(_DWORD *)v155 = v16;
          *(_WORD *)&v155[4] = 2080;
          *(void *)&v155[6] = v17;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting input data sources on device %u to %s.", (uint8_t *)&buf, 0x22u);
          if (v162.__m_.__opaque[15] < 0) {
            operator delete((void *)v162.__m_.__sig);
          }
        }
      }
    }
    AudioObjectID v18 = *(_DWORD *)(a1 + 56);
    uint64_t v19 = sub_32A48(13);
    if (*(unsigned char *)(v19 + 8))
    {
      int v20 = *(NSObject **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          v163.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v163.__cv_.__opaque = inAddress.mElement;
          sub_16C9C4((uint64_t)&v162, (unsigned int *)&v163);
          v21 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v152 = 1024;
          int v153 = 166;
          __int16 v154 = 2080;
          *(void *)v155 = v21;
          *(_WORD *)&v155[8] = 1024;
          *(_DWORD *)&v155[10] = v18;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v162.__m_.__opaque[15] < 0) {
            operator delete((void *)v162.__m_.__sig);
          }
        }
      }
    }
    *(AudioObjectPropertyAddress *)((char *)&v130.__m_ + 4) = inAddress;
    LODWORD(v130.__m_) = v18;
    LODWORD(v131) = 0;
    *((void *)&v131 + 1) = 0;
    sub_391ADC((uint64_t)&v162, (uint64_t)&v130);
    if (*(_DWORD *)&v162.__m_.__opaque[16]) {
      goto LABEL_33;
    }
    inClientData = 0;
    v135 = 0;
    uint64_t v136 = 0;
    sub_46B38(&inClientData, (const void *)v162.__m_.__sig, *(uint64_t *)v162.__m_.__opaque, (*(void *)v162.__m_.__opaque - v162.__m_.__sig) >> 2);
    std::unique_lock<std::mutex> v127 = (std::unique_lock<std::mutex>)0;
    *(void *)&long long v128 = 0;
    sub_46B38(&v127, *a2, (uint64_t)a2[1], a2[1] - *a2);
    v32 = inClientData;
    m = v127.__m_;
    if (v135 - inClientData == *(void *)&v127.__owns_ - (unint64_t)v127.__m_)
    {
      BOOL v34 = memcmp(inClientData, v127.__m_, v135 - inClientData) == 0;
      if (!m)
      {
LABEL_59:
        if (v32)
        {
          v135 = v32;
          operator delete(v32);
          if (v34)
          {
LABEL_63:
            uint64_t v36 = sub_32A48(13);
            if (*(unsigned char *)(v36 + 8))
            {
              v25 = *(NSObject **)v36;
              if (!*(void *)v36)
              {
LABEL_68:
                char v35 = 0;
LABEL_69:
                if (v162.__m_.__sig) {
                  operator delete((void *)v162.__m_.__sig);
                }
                if ((v35 & 1) == 0)
                {
LABEL_147:
                  if (!v25)
                  {
                    unint64_t v63 = (char *)a2[1] - (char *)*a2;
                    if (v108 - (unsigned char *)outData != v63)
                    {
                      memset(__lk, 0, 28);
                      uint64_t v106 = 0;
                      AudioObjectID v64 = sub_391D14(*(_DWORD *)(a1 + 56));
                      *(void *)&v114.mSelector = 0x676C6F6273666D74;
                      v114.mElement = 0;
                      uint64_t v65 = sub_32A48(13);
                      if (*(unsigned char *)(v65 + 8))
                      {
                        v66 = *(NSObject **)v65;
                        if (*(void *)v65)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v65, OS_LOG_TYPE_DEBUG))
                          {
                            v163.__cv_.__uint64_t sig = *(void *)&v114.mSelector;
                            *(_DWORD *)v163.__cv_.__opaque = v114.mElement;
                            sub_16C9C4((uint64_t)&v162, (unsigned int *)&v163);
                            v67 = v162.__m_.__opaque[15] >= 0 ? &v162 : (std::mutex *)v162.__m_.__sig;
                            buf.mSelector = 136315906;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 166;
                            __int16 v154 = 2080;
                            *(void *)v155 = v67;
                            *(_WORD *)&v155[8] = 1024;
                            *(_DWORD *)&v155[10] = v64;
                            _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
                            if (v162.__m_.__opaque[15] < 0) {
                              operator delete((void *)v162.__m_.__sig);
                            }
                          }
                        }
                      }
                      *(AudioObjectPropertyAddress *)((char *)&__s2 + 4) = v114;
                      LODWORD(__s2) = v64;
                      LODWORD(v148) = 0;
                      uint64_t v149 = 0;
                      sub_391FC4((uint64_t)&v163, (uint64_t)&__s2);
                      unint64_t v68 = v63 >> 2;
                      if (!*(_DWORD *)&v163.__cv_.__opaque[32])
                      {
                        long long v144 = *(_OWORD *)&v163.__cv_.__sig;
                        long long v145 = *(_OWORD *)&v163.__cv_.__opaque[8];
                        uint64_t v146 = *(void *)&v163.__cv_.__opaque[24];
                        uint64_t v139 = 0;
                        uint64_t v140 = 0;
                        v138 = 0;
                        int v141 = 0;
                        int v142 = v63 >> 2;
                        uint64_t v143 = 0;
                        if (sub_1919B8((uint64_t)&v144, (uint64_t)&v138))
                        {
                          uint64_t v69 = sub_32A48(13);
                          if (*(unsigned char *)(v69 + 8))
                          {
                            v70 = *(NSObject **)v69;
                            if (*(void *)v69)
                            {
                              if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
                              {
                                buf.mSelector = 136315650;
                                *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                                __int16 v152 = 1024;
                                int v153 = 219;
                                __int16 v154 = 1024;
                                *(_DWORD *)v155 = v64;
                                _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
                              }
                            }
                          }
                          goto LABEL_223;
                        }
                      }
                      memset(v162.__m_.__opaque, 0, sizeof(v162.__m_.__opaque));
                      v162.__m_.__uint64_t sig = 850045863;
                      memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
                      __p.__cv_.__uint64_t sig = 1018212795;
                      char v137 = 0;
                      AudioObjectID v104 = v64;
                      sub_662FC(&inClientData, v64, &v114, (uint64_t)&__p, (uint64_t)&v162, (uint64_t)&v137);
                      uint64_t v74 = v106;
                      uint64_t v75 = 2000;
                      while (1)
                      {
                        sub_391FC4((uint64_t)&v130, (uint64_t)&__s2);
                        if (v133) {
                          goto LABEL_222;
                        }
                        std::unique_lock<std::mutex> v127 = v130;
                        long long v128 = v131;
                        uint64_t v129 = v132;
                        *(std::unique_lock<std::mutex> *)v124 = __lk[0];
                        *(std::unique_lock<std::mutex> *)&v124[12] = *(std::unique_lock<std::mutex> *)(&__lk[0].__owns_ + 4);
                        int v125 = v63 >> 2;
                        uint64_t v126 = v74;
                        if (sub_1919B8((uint64_t)&v127, (uint64_t)v124)) {
                          break;
                        }
                        if (v75 <= 0)
                        {
                          v90 = (os_log_t *)sub_32A48(13);
                          v91 = *v90;
                          if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
                          {
                            v111 = *(unsigned char **)&v114.mSelector;
                            LODWORD(v112) = v114.mElement;
                            v92 = &v121;
                            sub_16C9C4((uint64_t)&v121, (unsigned int *)&v111);
                            if (v123 < 0) {
                              v92 = v121;
                            }
                            std::unique_lock<std::mutex> v118 = v130;
                            long long v119 = v131;
                            uint64_t v120 = v132;
                            *(std::unique_lock<std::mutex> *)v115 = __lk[0];
                            *(std::unique_lock<std::mutex> *)&v115[12] = *(std::unique_lock<std::mutex> *)(&__lk[0].__owns_ + 4);
                            int v116 = v68;
                            uint64_t v117 = v106;
                            int v93 = sub_1919B8((uint64_t)&v118, (uint64_t)v115);
                            buf.mSelector = 136316930;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 248;
                            __int16 v154 = 2080;
                            *(void *)v155 = "updated";
                            *(_WORD *)&v155[8] = 2080;
                            *(void *)&v155[10] = v92;
                            *(_WORD *)&v155[18] = 2080;
                            *(void *)&v155[20] = "updated";
                            *(_WORD *)&v155[28] = 1024;
                            BOOL v156 = v93;
                            __int16 v157 = 1024;
                            int v158 = 0;
                            __int16 v159 = 1024;
                            AudioObjectID v160 = v104;
                            _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
                            if (SHIBYTE(v123) < 0)
                            {
                              v89 = v121;
LABEL_221:
                              operator delete(v89);
                            }
                          }
                          goto LABEL_222;
                        }
                        v76.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                        uint64_t v77 = sub_32A48(13);
                        if (*(unsigned char *)(v77 + 8))
                        {
                          v78 = *(NSObject **)v77;
                          if (*(void *)v77)
                          {
                            if (os_log_type_enabled(*(os_log_t *)v77, OS_LOG_TYPE_DEBUG))
                            {
                              buf.mSelector = 136315906;
                              *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                              __int16 v152 = 1024;
                              int v153 = 257;
                              __int16 v154 = 2080;
                              *(void *)v155 = "with timeout";
                              *(_WORD *)&v155[8] = 1024;
                              *(_DWORD *)&v155[10] = v104;
                              _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
                            }
                          }
                        }
                        sub_3B7EC();
                        *(void *)&buf.mSelector = &qword_64CC40;
                        LOBYTE(buf.mElement) = 0;
                        LOBYTE(buf.mElement) = sub_1D4024();
                        v118.__m_ = &v162;
                        v118.__owns_ = 1;
                        std::mutex::lock(&v162);
                        v79.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                        if (!v137)
                        {
                          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v80 = v79.__d_.__rep_ + 1000000 * v75;
                          while (1)
                          {
                            if (v80 <= std::chrono::steady_clock::now().__d_.__rep_) {
                              goto LABEL_175;
                            }
                            v81.__d_.__rep_ = v80 - std::chrono::steady_clock::now().__d_.__rep_;
                            if (v81.__d_.__rep_ >= 1) {
                              break;
                            }
LABEL_193:
                            if (std::chrono::steady_clock::now().__d_.__rep_ >= v80 || v137) {
                              goto LABEL_175;
                            }
                          }
                          std::chrono::steady_clock::now();
                          v82.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                          if (!v82.__d_.__rep_)
                          {
                            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 0;
                            goto LABEL_189;
                          }
                          if (v82.__d_.__rep_ < 1)
                          {
                            if ((unint64_t)v82.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
                              goto LABEL_188;
                            }
                            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 0x8000000000000000;
                          }
                          else
                          {
                            if ((unint64_t)v82.__d_.__rep_ > 0x20C49BA5E353F7)
                            {
                              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 0x7FFFFFFFFFFFFFFFLL;
                              goto LABEL_189;
                            }
LABEL_188:
                            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = 1000 * v82.__d_.__rep_;
LABEL_189:
                            if (v83 > (v81.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                            {
                              v84.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_192:
                              std::condition_variable::__do_timed_wait(&__p, &v118, v84);
                              std::chrono::steady_clock::now();
                              goto LABEL_193;
                            }
                          }
                          v84.__d_.__rep_ = v83 + v81.__d_.__rep_;
                          goto LABEL_192;
                        }
LABEL_175:
                        if (v118.__owns_) {
                          std::mutex::unlock(v118.__m_);
                        }
                        sub_66410((uint64_t)&buf);
                        v75 += (std::chrono::system_clock::now().__d_.__rep_ - v76.__d_.__rep_) / -1000;
                        a1 = v105;
                      }
                      uint64_t v86 = sub_32A48(13);
                      if (*(unsigned char *)(v86 + 8))
                      {
                        v87 = *(NSObject **)v86;
                        if (*(void *)v86)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v86, OS_LOG_TYPE_DEBUG))
                          {
                            v118.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&v114.mSelector;
                            *(_DWORD *)&v118.__owns_ = v114.mElement;
                            sub_16C9C4((uint64_t)&v130, (unsigned int *)&v118);
                            v88 = (SBYTE7(v131) & 0x80u) == 0 ? &v130 : (std::unique_lock<std::mutex> *)v130.__m_;
                            buf.mSelector = 136315906;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 288;
                            __int16 v154 = 2080;
                            *(void *)v155 = v88;
                            *(_WORD *)&v155[8] = 1024;
                            *(_DWORD *)&v155[10] = v104;
                            _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
                            if (SBYTE7(v131) < 0)
                            {
                              v89 = v130.__m_;
                              goto LABEL_221;
                            }
                          }
                        }
                      }
LABEL_222:
                      sub_6651C((uint64_t)&inClientData);
                      std::condition_variable::~condition_variable(&__p);
                      std::mutex::~mutex(&v162);
                    }
                  }
LABEL_223:
                  if ((unsigned int **)(a1 + 88) != a2) {
                    sub_6720C((char *)(a1 + 88), (char *)*a2, (uint64_t)a2[1], a2[1] - *a2);
                  }
                  sub_38DA74(*(unsigned int *)(a1 + 56));
                  uint64_t v13 = outData;
                  goto LABEL_226;
                }
                sub_391ADC((uint64_t)&v144, (uint64_t)&v130);
                if (DWORD2(v145)) {
                  goto LABEL_73;
                }
                memset(v124, 0, 24);
                v62 = (void *)v144;
                sub_46B38(v124, (const void *)v144, *((uint64_t *)&v144 + 1), (uint64_t)(*((void *)&v144 + 1) - v144) >> 2);
                v118.__m_ = 0;
                *(void *)&v118.__owns_ = 0;
                *(void *)&long long v119 = 0;
                sub_46B38(&v118, *a2, (uint64_t)a2[1], a2[1] - *a2);
                v71 = *(void **)v124;
                v72 = v118.__m_;
                if (*(void *)&v124[8] - *(void *)v124 == *(void *)&v118.__owns_ - (unint64_t)v118.__m_)
                {
                  BOOL v73 = memcmp(*(const void **)v124, v118.__m_, *(void *)&v124[8] - *(void *)v124) == 0;
                  if (!v72)
                  {
LABEL_198:
                    if (v71)
                    {
                      *(void *)&v124[8] = v71;
                      operator delete(v71);
                      a1 = v105;
                      if (v73)
                      {
LABEL_202:
                        uint64_t v85 = sub_32A48(13);
                        if (*(unsigned char *)(v85 + 8))
                        {
                          v25 = *(NSObject **)v85;
                          if (!*(void *)v85) {
                            goto LABEL_145;
                          }
                          if (os_log_type_enabled(*(os_log_t *)v85, OS_LOG_TYPE_DEBUG))
                          {
                            buf.mSelector = 136315650;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 219;
                            __int16 v154 = 1024;
                            *(_DWORD *)v155 = v18;
                            _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
                          }
                        }
                        LODWORD(v25) = 0;
LABEL_145:
                        if (v62) {
                          operator delete(v62);
                        }
                        goto LABEL_147;
                      }
                    }
                    else
                    {
                      a1 = v105;
                      if (v73) {
                        goto LABEL_202;
                      }
                    }
LABEL_73:
                    memset(v162.__m_.__opaque, 0, sizeof(v162.__m_.__opaque));
                    v162.__m_.__uint64_t sig = 850045863;
                    memset(v163.__cv_.__opaque, 0, sizeof(v163.__cv_.__opaque));
                    v163.__cv_.__uint64_t sig = 1018212795;
                    LOBYTE(v106) = 0;
                    sub_662FC(&__p, v18, &inAddress, (uint64_t)&v163, (uint64_t)&v162, (uint64_t)&v106);
                    uint64_t v37 = 2000;
                    while (1)
                    {
                      sub_391ADC((uint64_t)&v138, (uint64_t)&v130);
                      v38 = v138;
                      if (v141)
                      {
                        int v39 = 1;
                        LODWORD(v25) = v141;
                        if (!v138) {
                          goto LABEL_97;
                        }
                        goto LABEL_96;
                      }
                      memset(v115, 0, 24);
                      uint64_t v40 = v139;
                      unint64_t v41 = (v139 - (uint64_t)v138) >> 2;
                      sub_46B38(v115, v138, v139, v41);
                      long long __s2 = 0uLL;
                      uint64_t v148 = 0;
                      sub_46B38(&__s2, *a2, (uint64_t)a2[1], a2[1] - *a2);
                      v42 = *(void **)v115;
                      v43 = (void *)__s2;
                      if (*(void *)&v115[8] - *(void *)v115 != *((void *)&__s2 + 1) - (void)__s2) {
                        break;
                      }
                      BOOL v44 = memcmp(*(const void **)v115, (const void *)__s2, *(void *)&v115[8] - *(void *)v115) == 0;
                      if (v43) {
                        goto LABEL_81;
                      }
LABEL_82:
                      if (v42)
                      {
                        *(void *)&v115[8] = v42;
                        operator delete(v42);
                      }
                      if (v44)
                      {
                        int v39 = 12;
                        if (!v38) {
                          goto LABEL_97;
                        }
                        goto LABEL_96;
                      }
                      if (v37 > 0)
                      {
                        v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                        uint64_t v46 = sub_32A48(13);
                        if (*(unsigned char *)(v46 + 8))
                        {
                          __int16 v47 = *(NSObject **)v46;
                          if (*(void *)v46)
                          {
                            if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
                            {
                              buf.mSelector = 136315906;
                              *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                              __int16 v152 = 1024;
                              int v153 = 257;
                              __int16 v154 = 2080;
                              *(void *)v155 = "with timeout";
                              *(_WORD *)&v155[8] = 1024;
                              *(_DWORD *)&v155[10] = v18;
                              _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
                            }
                          }
                        }
                        sub_3B7EC();
                        *(void *)&buf.mSelector = &qword_64CC40;
                        LOBYTE(buf.mElement) = 0;
                        LOBYTE(buf.mElement) = sub_1D4024();
                        __lk[0].__m_ = &v162;
                        __lk[0].__owns_ = 1;
                        std::mutex::lock(&v162);
                        v48.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                        if ((_BYTE)v106)
                        {
LABEL_93:
                          if (__lk[0].__owns_) {
                            std::mutex::unlock(__lk[0].__m_);
                          }
                          sub_66410((uint64_t)&buf);
                          int v39 = 0;
                          v37 += (std::chrono::system_clock::now().__d_.__rep_ - v45.__d_.__rep_) / -1000;
                          if (!v38) {
                            goto LABEL_97;
                          }
                          goto LABEL_96;
                        }
                        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v55 = v48.__d_.__rep_ + 1000000 * v37;
                        while (2)
                        {
                          if (v55 <= std::chrono::steady_clock::now().__d_.__rep_) {
                            goto LABEL_93;
                          }
                          v56.__d_.__rep_ = v55 - std::chrono::steady_clock::now().__d_.__rep_;
                          if (v56.__d_.__rep_ >= 1)
                          {
                            std::chrono::steady_clock::now();
                            v57.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                            if (!v57.__d_.__rep_)
                            {
                              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = 0;
                              goto LABEL_117;
                            }
                            if (v57.__d_.__rep_ < 1)
                            {
                              if ((unint64_t)v57.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
                                goto LABEL_116;
                              }
                              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = 0x8000000000000000;
                            }
                            else
                            {
                              if ((unint64_t)v57.__d_.__rep_ > 0x20C49BA5E353F7)
                              {
                                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = 0x7FFFFFFFFFFFFFFFLL;
                                goto LABEL_117;
                              }
LABEL_116:
                              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = 1000 * v57.__d_.__rep_;
LABEL_117:
                              if (v58 > (v56.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                              {
                                v59.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                                goto LABEL_120;
                              }
                            }
                            v59.__d_.__rep_ = v58 + v56.__d_.__rep_;
LABEL_120:
                            std::condition_variable::__do_timed_wait(&v163, __lk, v59);
                            std::chrono::steady_clock::now();
                          }
                          if (std::chrono::steady_clock::now().__d_.__rep_ >= v55 || (_BYTE)v106) {
                            goto LABEL_93;
                          }
                          continue;
                        }
                      }
                      v49 = (os_log_t *)sub_32A48(13);
                      v50 = *v49;
                      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
                      {
                        AudioObjectPropertyAddress v114 = inAddress;
                        sub_16C9C4((uint64_t)__lk, &v114.mSelector);
                        if (SHIBYTE(__lk[1].__m_) >= 0) {
                          v51 = __lk;
                        }
                        else {
                          v51 = __lk[0].__m_;
                        }
                        v122 = 0;
                        uint64_t v123 = 0;
                        v121 = 0;
                        sub_46B38(&v121, v38, v40, v41);
                        v111 = 0;
                        v112 = 0;
                        uint64_t v113 = 0;
                        sub_46B38(&v111, *a2, (uint64_t)a2[1], a2[1] - *a2);
                        v52 = v121;
                        v53 = v111;
                        BOOL v54 = v122 - (unsigned char *)v121 == v112 - v111 && memcmp(v121, v111, v122 - (unsigned char *)v121) == 0;
                        buf.mSelector = 136316930;
                        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                        __int16 v152 = 1024;
                        int v153 = 248;
                        __int16 v154 = 2080;
                        *(void *)v155 = "set";
                        *(_WORD *)&v155[8] = 2080;
                        *(void *)&v155[10] = v51;
                        *(_WORD *)&v155[18] = 2080;
                        *(void *)&v155[20] = "set";
                        *(_WORD *)&v155[28] = 1024;
                        BOOL v156 = v54;
                        __int16 v157 = 1024;
                        int v158 = 0;
                        __int16 v159 = 1024;
                        AudioObjectID v160 = v18;
                        _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
                        if (v53)
                        {
                          v112 = v53;
                          operator delete(v53);
                        }
                        if (v52)
                        {
                          v122 = v52;
                          operator delete(v52);
                        }
                        if (SHIBYTE(__lk[1].__m_) < 0) {
                          operator delete(__lk[0].__m_);
                        }
                      }
                      int v39 = 1;
                      LODWORD(v25) = 2003329396;
                      if (!v38) {
                        goto LABEL_97;
                      }
LABEL_96:
                      operator delete(v38);
LABEL_97:
                      if (v39)
                      {
                        if (v39 != 12)
                        {
                          a1 = v105;
                          goto LABEL_144;
                        }
                        uint64_t v60 = sub_32A48(13);
                        a1 = v105;
                        if (*(unsigned char *)(v60 + 8))
                        {
                          v25 = *(NSObject **)v60;
                          if (!*(void *)v60)
                          {
LABEL_144:
                            sub_6651C((uint64_t)&__p);
                            std::condition_variable::~condition_variable(&v163);
                            std::mutex::~mutex(&v162);
                            v62 = (void *)v144;
                            goto LABEL_145;
                          }
                          if (os_log_type_enabled(*(os_log_t *)v60, OS_LOG_TYPE_DEBUG))
                          {
                            *(AudioObjectPropertyAddress *)&__lk[0].__m_ = inAddress;
                            sub_16C9C4((uint64_t)&v138, (unsigned int *)__lk);
                            v61 = v140 >= 0 ? &v138 : (void **)v138;
                            buf.mSelector = 136315906;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            __int16 v152 = 1024;
                            int v153 = 288;
                            __int16 v154 = 2080;
                            *(void *)v155 = v61;
                            *(_WORD *)&v155[8] = 1024;
                            *(_DWORD *)&v155[10] = v18;
                            _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
                            if (SHIBYTE(v140) < 0) {
                              operator delete(v138);
                            }
                          }
                        }
                        LODWORD(v25) = 0;
                        goto LABEL_144;
                      }
                    }
                    BOOL v44 = 0;
                    if (!(void)__s2) {
                      goto LABEL_82;
                    }
LABEL_81:
                    *((void *)&__s2 + 1) = v43;
                    operator delete(v43);
                    goto LABEL_82;
                  }
                }
                else
                {
                  BOOL v73 = 0;
                  if (!v118.__m_) {
                    goto LABEL_198;
                  }
                }
                *(void *)&v118.__owns_ = v72;
                operator delete(v72);
                goto LABEL_198;
              }
              if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
              {
                buf.mSelector = 136315650;
                *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                __int16 v152 = 1024;
                int v153 = 191;
                __int16 v154 = 1024;
                *(_DWORD *)v155 = v18;
                _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
              }
            }
            char v35 = 0;
            LODWORD(v25) = 0;
            goto LABEL_69;
          }
        }
        else if (v34)
        {
          goto LABEL_63;
        }
LABEL_33:
        uint64_t v22 = sub_32A48(13);
        if (*(unsigned char *)(v22 + 8))
        {
          v23 = *(NSObject **)v22;
          if (*(void *)v22)
          {
            if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
            {
              __p.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
              *(_DWORD *)__p.__cv_.__opaque = inAddress.mElement;
              sub_16C9C4((uint64_t)&v163, (unsigned int *)&__p);
              v24 = v163.__cv_.__opaque[15] >= 0 ? &v163 : (std::condition_variable *)v163.__cv_.__sig;
              buf.mSelector = 136315906;
              *(void *)&buf.mScope = "HALPropertySynchronizer.h";
              __int16 v152 = 1024;
              int v153 = 199;
              __int16 v154 = 2080;
              *(void *)v155 = v24;
              *(_WORD *)&v155[8] = 1024;
              *(_DWORD *)&v155[10] = v18;
              _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
              if (v163.__cv_.__opaque[15] < 0) {
                operator delete((void *)v163.__cv_.__sig);
              }
            }
          }
        }
        AudioObjectPropertyAddress buf = inAddress;
        LODWORD(v25) = sub_86998(v18, &buf, *a2, (int)a2[1]);
        if (!v25)
        {
          char v35 = 1;
          goto LABEL_69;
        }
        v26 = (os_log_t *)sub_32A48(13);
        v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v163, v25);
          int v28 = v163.__cv_.__opaque[15];
          uint64_t sig = v163.__cv_.__sig;
          *(AudioObjectPropertyAddress *)&long long v144 = inAddress;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v144);
          v30 = &v163;
          if (v28 < 0) {
            v30 = (std::condition_variable *)sig;
          }
          if (__p.__cv_.__opaque[15] >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::condition_variable *)__p.__cv_.__sig;
          }
          buf.mSelector = 136316418;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v152 = 1024;
          int v153 = 207;
          __int16 v154 = 1024;
          *(_DWORD *)v155 = v25;
          *(_WORD *)&v155[4] = 2080;
          *(void *)&v155[6] = v30;
          *(_WORD *)&v155[14] = 2080;
          *(void *)&v155[16] = p_p;
          *(_WORD *)&v155[24] = 1024;
          *(_DWORD *)&v155[26] = v18;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
          if (__p.__cv_.__opaque[15] < 0) {
            operator delete((void *)__p.__cv_.__sig);
          }
          if (v163.__cv_.__opaque[15] < 0) {
            operator delete((void *)v163.__cv_.__sig);
          }
        }
        goto LABEL_68;
      }
    }
    else
    {
      BOOL v34 = 0;
      if (!v127.__m_) {
        goto LABEL_59;
      }
    }
    *(void *)&v127.__owns_ = m;
    operator delete(m);
    goto LABEL_59;
  }
LABEL_226:
  if (v13)
  {
    v108 = v13;
    operator delete(v13);
  }
}

void sub_391938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  sub_6651C((uint64_t)&a56);
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x288]);
  std::mutex::~mutex((std::mutex *)(v56 - 216));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_391ADC(uint64_t a1, uint64_t a2)
{
  v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        AudioObjectPropertyScope v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        v11 = v19;
        if (v9 < 0) {
          v11 = v10;
        }
        uint64_t v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          uint64_t v12 = __p;
        }
        buf[0].mSelector = 136316418;
        *(void *)&buf[0].mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].mElement = v6;
        __int16 v26 = 2080;
        v27 = v11;
        __int16 v28 = 2080;
        unsigned int v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_391CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_391D14(AudioObjectID a1)
{
  *(void *)&inAddress.mSelector = 0x696E707473746D23;
  inAddress.mElement = 0;
  UInt32 outDataSize = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(a1, &inAddress, 0, 0, &outDataSize);
  if (!outDataSize)
  {
    v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v19 = "SubPortPolicy.cpp";
      __int16 v20 = 1024;
      int v21 = 97;
      __int16 v22 = 1024;
      LODWORD(v23) = outDataSize;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned input stream size of %u\"", buf, 0x18u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL returned input stream size of %u");
  }
  __chkstk_darwin(PropertyDataSize);
  v4 = (unsigned int *)((char *)v14 - ((v3 + 15) & 0x1FFFFFFF0));
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &outDataSize, v4);
  if (PropertyData)
  {
    AudioObjectPropertyScope v10 = (os_log_t *)sub_32A48(13);
    v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_16C9C4((uint64_t)v14, &inAddress.mSelector);
      if (v15 >= 0) {
        uint64_t v12 = v14;
      }
      else {
        uint64_t v12 = (void **)v14[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v19 = "SubPortPolicy.cpp";
      __int16 v20 = 1024;
      int v21 = 102;
      __int16 v22 = 2080;
      uint64_t v23 = v12;
      __int16 v24 = 1024;
      AudioObjectID v25 = a1;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"Error getting property %s on device %u.\"", buf, 0x22u);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    AudioObjectID v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectID v13 = &off_6414D8;
    v13[2] = PropertyData;
  }
  return *v4;
}

void sub_391FA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_391FC4(uint64_t a1, uint64_t a2)
{
  v4 = (uint64_t *)(a2 + 4);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 12);
  sub_191A70((uint64_t)&v23, (AudioObjectID *)a2, (AudioObjectPropertyAddress *)buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v23;
  if (v23)
  {
    v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v21, v6);
        int v9 = v22;
        AudioObjectPropertyScope v10 = (void **)v21[0];
        uint64_t v17 = *v4;
        int v18 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
        v11 = v21;
        if (v9 < 0) {
          v11 = v10;
        }
        if (v20 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a2;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 176;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v6;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = v11;
        *(_WORD *)&buf[34] = 2080;
        *(void *)&buf[36] = v12;
        __int16 v26 = 1024;
        AudioObjectID v27 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", buf, 0x32u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
    }
  }
  uint64_t v14 = v24;
  memset(buf, 0, 40);
  if (!v24[40]) {
    uint64_t v14 = buf;
  }
  __n128 result = *(__n128 *)v14;
  long long v16 = *((_OWORD *)v14 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 16) = v16;
  *(void *)(a1 + 32) = *((void *)v14 + 4);
  *(_DWORD *)(a1 + 40) = v6;
  return result;
}

void sub_3921AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3921D0(void *a1, uint64_t a2, unsigned int a3)
{
  if (!a3)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v24 = "SubPortPolicy.cpp";
      __int16 v25 = 1024;
      int v26 = 168;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v3 = a2 + 16;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_16;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
  {
LABEL_16:
    AudioObjectID v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a3);
      char v15 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v24 = "SubPortPolicy.cpp";
      __int16 v25 = 1024;
      int v26 = 176;
      __int16 v27 = 2080;
      __int16 v28 = v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported port type: %s.\"", buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    long long v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Unsupported port type: %s.");
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  AudioObjectPropertyScope v10 = *(const void **)(v6 + 40);
  uint64_t v11 = *(void *)(v6 + 48);

  return sub_46B38(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
}

void sub_392414(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_392434(uint64_t a1, unsigned __int32 __c)
{
  uint64_t v3 = *(void **)(a1 + 64);
  uint64_t v4 = (void *)(a1 + 72);
  if (v3 == (void *)(a1 + 72))
  {
LABEL_12:
    uint64_t v11 = sub_32A48(17);
    if (*(unsigned char *)(v11 + 8))
    {
      uint64_t v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        BOOL result = os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        sub_2417C(__p, __c);
        if (v19 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        int v21 = "SubPortPolicy.cpp";
        __int16 v22 = 1024;
        int v23 = 189;
        __int16 v24 = 2080;
        __int16 v25 = v14;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Data source %s is not supported.", buf, 0x1Cu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    return 0;
  }
  else
  {
    while (1)
    {
      uint64_t v5 = (__int32 *)v3[6];
      uint64_t v6 = wmemchr((__int32 *)v3[5], __c, ((uint64_t)v5 - v3[5]) >> 2);
      unsigned int v7 = v6 ? v6 : v5;
      if (v7 != (__int32 *)v3[6]) {
        break;
      }
      BOOL v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
      if (v9 == v4) {
        goto LABEL_12;
      }
    }
    uint64_t v15 = sub_32A48(17);
    if (*(unsigned char *)(v15 + 8))
    {
      long long v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, __c);
          uint64_t v17 = v19 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v21 = "SubPortPolicy.cpp";
          __int16 v22 = 1024;
          int v23 = 185;
          __int16 v24 = 2080;
          __int16 v25 = v17;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Data source %s is supported.", buf, 0x1Cu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    return 1;
  }
}

uint64_t sub_392670(_DWORD *a1)
{
  uint64_t v1 = (a1[26] - 1);
  a1[26] = v1;
  if (a1 && !v1) {
    (*(void (**)(_DWORD *))(*(void *)a1 + 8))(a1);
  }
  return v1;
}

uint64_t sub_3926C8(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 104) + 1);
  *(_DWORD *)(a1 + 104) = v1;
  return v1;
}

unsigned char *sub_3926E0(uint64_t a1, int a2)
{
  sub_3A8A8();
  BOOL result = sub_32E8B0(a1);
  *(_DWORD *)(a1 + 8) = a2;
  if (a2)
  {
    sub_3A8A8();
    sub_32E2F0();
  }
  return result;
}

void sub_392740(uint64_t a1)
{
  sub_392778(a1);

  operator delete();
}

uint64_t sub_392778(uint64_t a1)
{
  *(void *)a1 = off_636A28;
  if (byte_659B20 == 1)
  {
    strcpy((char *)&inAddress, "resubolg");
    BYTE1(inAddress.mElement) = 0;
    HIWORD(inAddress.mElement) = 0;
    AudioObjectRemovePropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_32D8E8, 0);
    inAddress.mSelector = 1886221684;
    AudioObjectRemovePropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_32D8E8, 0);
    byte_659B20 = 0;
  }
  CFPlugInRemoveInstanceForFactory(*(CFUUIDRef *)(a1 + 88));
  sub_327234(a1 + 88);

  return sub_3A6F14(a1);
}

void sub_392864(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_392A04(&v11, a1, 0x7461636Cu);
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 72))(v11);
  }
  else
  {
    uint64_t v3 = sub_32A48(17);
    uint64_t v4 = sub_32A48(28);
    char v5 = 0;
    uint64_t v6 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&buf[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1;
      if (v9) {
        goto LABEL_9;
      }
    }
    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_9:
    BOOL v10 = *(NSObject **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 693;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching Bluetooth profile", buf, 0x12u);
    }
    *a2 = 0;
  }
  if (v12) {
    sub_4636C(v12);
  }
}

void sub_3929E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_392A04(void *a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v6 = (std::mutex *)(a2 + 568);
    std::mutex::lock((std::mutex *)(a2 + 568));
    uint64_t v7 = *(void *)(a2 + 552);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = a2 + 552;
    do
    {
      unsigned int v9 = *(_DWORD *)(v7 + 32);
      BOOL v10 = v9 >= a3;
      if (v9 >= a3) {
        uint64_t v11 = (uint64_t *)v7;
      }
      else {
        uint64_t v11 = (uint64_t *)(v7 + 8);
      }
      if (v10) {
        uint64_t v8 = v7;
      }
      uint64_t v7 = *v11;
    }
    while (*v11);
    if (v8 != a2 + 552 && *(_DWORD *)(v8 + 32) <= a3)
    {
      uint64_t v13 = *(void *)(v8 + 40);
      uint64_t v12 = *(void *)(v8 + 48);
      *a1 = v13;
      a1[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
LABEL_13:
      *a1 = 0;
      a1[1] = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_392ACC(std::string::size_type a1, uint64_t a2, int a3, int a4)
{
  LODWORD(v46.__r_.__value_.__l.__data_) = a4;
  strcpy((char *)buf, "spxebolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  unsigned int v6 = sub_FE8A8(a1);
  if (v6)
  {
    unsigned int v7 = v6;
    uint64_t v8 = sub_32A48(17);
    uint64_t v9 = sub_32A48(28);
    char v10 = 0;
    uint64_t v11 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = (int)buf[v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1;
      if (v14) {
        goto LABEL_8;
      }
    }
    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_8:
    int v15 = *(NSObject **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(&v46, 0x65787073u);
      int v16 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
      std::string::size_type v17 = v46.__r_.__value_.__r.__words[0];
      sub_2417C(__p, v7);
      int v18 = &v46;
      if (v16 < 0) {
        int v18 = (std::string *)v17;
      }
      if (v45 >= 0) {
        char v19 = __p;
      }
      else {
        char v19 = (void **)__p[0];
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 554;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v18;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v19;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to set prop %s on BT. Error: %s", (uint8_t *)buf, 0x26u);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v20 = *(void *)(a2 + 8);
  if (v20 == a2)
  {
    LOBYTE(v26) = 0;
    BOOL v22 = 0;
  }
  else
  {
    do
    {
      sub_549A4((uint64_t *)buf, (uint64_t *)(v20 + 16), "", 557);
      int v21 = *(_DWORD *)(*(void *)buf + 144);
      if (*(void *)&buf[2]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[2]);
      }
      BOOL v22 = v21 == 1885892674;
      if (v21 == 1885892674) {
        break;
      }
      uint64_t v20 = *(void *)(v20 + 8);
    }
    while (v20 != a2);
    uint64_t v23 = *(void *)(a2 + 8);
    if (v23 == a2)
    {
      LOBYTE(v26) = 0;
    }
    else
    {
      while (1)
      {
        sub_549A4((uint64_t *)buf, (uint64_t *)(v23 + 16), "", 560);
        int v24 = *(_DWORD *)(*(void *)buf + 144);
        if (*(void *)&buf[2]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[2]);
        }
        if (v24 == 1885892706 || v24 == 1886216820) {
          break;
        }
        uint64_t v23 = *(void *)(v23 + 8);
        if (v23 == a2)
        {
          int v26 = 0;
          goto LABEL_35;
        }
      }
      int v26 = 1;
LABEL_35:
      uint64_t v27 = *(void *)(a2 + 8);
      if (v27 != a2)
      {
        while (1)
        {
          sub_549A4((uint64_t *)buf, (uint64_t *)(v27 + 16), "", 564);
          int v28 = *(_DWORD *)(*(void *)buf + 144);
          if (*(void *)&buf[2]) {
            sub_4636C(*(std::__shared_weak_count **)&buf[2]);
          }
          if (v28 == 1886152041 || v28 == 1886152047) {
            break;
          }
          uint64_t v27 = *(void *)(v27 + 8);
          if (v27 == a2) {
            goto LABEL_45;
          }
        }
        BOOL v22 = v21 == 1885892674;
        if (*(void *)(a2 + 16))
        {
          if (v26)
          {
            std::string::value_type v31 = 1;
            LOBYTE(v26) = 1;
            goto LABEL_50;
          }
          if (a3 == 1919115628) {
            goto LABEL_73;
          }
          if (a3 != 1936090482 && a3 != 1919117428)
          {
            LOBYTE(v26) = 0;
            std::string::value_type v31 = 1;
            a3 = 1;
            goto LABEL_75;
          }
          if (!a4 || sub_24AA28(1886152041, a2))
          {
LABEL_73:
            LOBYTE(v26) = 0;
            a3 = 2;
          }
          else
          {
            LOBYTE(v26) = 0;
            a3 = 3;
          }
        }
        else
        {
          a3 = 1919183219;
        }
        std::string::value_type v31 = 1;
        goto LABEL_75;
      }
    }
  }
LABEL_45:
  uint64_t v30 = *(void *)(a2 + 16);
  if (!v22 && (v26 & 1) == 0 && v30)
  {
    v38 = (os_log_t *)sub_32A48(13);
    int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      sub_9264(&v46, a2, 1);
      uint64_t v40 = (v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v46
          : (std::string *)v46.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 570;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v40;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported Bluetooth profile for %s\"", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported Bluetooth profile for %s");
  }
  std::string::value_type v31 = 0;
  if (!v30)
  {
    a3 = 1919183219;
    goto LABEL_75;
  }
  if ((v26 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_50:
  strcpy((char *)buf, "pshsbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v32 = sub_99A40(a1);
  if (a3 <= 1919708274)
  {
    if (a3 == 1919115628 || a3 == 1919183219) {
      goto LABEL_75;
    }
LABEL_66:
    a3 = 1918989668;
    goto LABEL_75;
  }
  if (a3 == 1919708275 || a3 == 1920364387) {
    goto LABEL_75;
  }
  if (a3 != 1936090482) {
    goto LABEL_66;
  }
  *((void *)&v34 + 1) = v33;
  *(void *)&long long v34 = v32;
  uint64_t v35 = (v34 >> 32) & 0xFF00000000;
  if (HIDWORD(v32) != 1 || v35 == 0) {
    a3 = 1919115628;
  }
  else {
    a3 = 1936090482;
  }
LABEL_75:
  v46.__r_.__value_.__s.__data_[0] = v22;
  v46.__r_.__value_.__s.__data_[1] = v26;
  v46.__r_.__value_.__s.__data_[2] = v31;
  HIDWORD(v46.__r_.__value_.__r.__words[0]) = a3;
  v46.__r_.__value_.__l.__size_ = a1;
  if (dispatch_get_specific("ProfileChangeQueueKey") == "ProfileChangeQueueKey")
  {
    sub_393384((uint64_t)&v46);
  }
  else
  {
    uint64_t v37 = *(NSObject **)(a1 + 848);
    __p[0] = &v46;
    *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
    *(void *)&AudioObjectPropertyAddress buf[2] = 0x40000000;
    *(void *)&uint8_t buf[4] = sub_393580;
    *(void *)&buf[6] = &unk_636CC0;
    *(void *)&buf[8] = __p;
    dispatch_sync(v37, buf);
  }
}

void sub_393104(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_393384(uint64_t a1)
{
  v2 = *(unsigned int **)(a1 + 8);
  if (*(unsigned char *)a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 4);
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = 1952539500;
LABEL_13:
    sub_39383C(v4, v5, v3);
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    unsigned int v6 = atomic_load(v2 + 210);
    if (v6 && v2[211] != 1919183219 && (unsigned int v7 = atomic_load(v2 + 134), v7 == 1953719151))
    {
      unsigned int v3 = *(_DWORD *)(a1 + 4);
      if (v3 == 1920364387) {
        goto LABEL_14;
      }
    }
    else
    {
      unsigned int v3 = *(_DWORD *)(a1 + 4);
    }
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = 1953719151;
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 2))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 4);
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = 1953260897;
    goto LABEL_13;
  }
LABEL_14:
  if (*(unsigned char *)a1 || *(unsigned char *)(a1 + 1) || *(unsigned char *)(a1 + 2))
  {
    atomic_fetch_add((atomic_uint *volatile)v2 + 210, 1u);
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)v2 + 210, 0xFFFFFFFF);
    atomic_load(v2 + 210);
  }
  uint64_t v8 = (os_log_t *)sub_32A48(17);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = atomic_load(v2 + 134);
    sub_2417C(__p, v10);
    if (v14 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    unsigned int v12 = atomic_load(v2 + 210);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    int v16 = "Device_BluetoothUnified_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 636;
    __int16 v19 = 2080;
    uint64_t v20 = v11;
    __int16 v21 = 1024;
    unsigned int v22 = v12;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth profile: %s, active count: %u", buf, 0x22u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_393580(uint64_t a1)
{
}

void sub_3935E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    unsigned int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      int v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x3935B4);
}

void sub_39383C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v59 = a3;
  unsigned int inData = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 848));
  unsigned int v5 = (os_log_t *)sub_32A48(17);
  unsigned int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 268);
    sub_2417C(v64, a2);
    int v8 = v65;
    uint64_t v9 = (void **)v64[0];
    sub_2417C(&__p, v59);
    unsigned int v10 = v64;
    if (v8 < 0) {
      unsigned int v10 = v9;
    }
    if (v69 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 124;
    __int16 v77 = 1024;
    *(_DWORD *)v78 = v7;
    *(_WORD *)&v78[4] = 2080;
    *(void *)&v78[6] = v10;
    *(_WORD *)&v78[14] = 2080;
    *(void *)&v78[16] = p_p;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting profile for %u to %s (%s)", buf, 0x2Cu);
    if (SHIBYTE(v69) < 0) {
      operator delete(__p);
    }
    if (v65 < 0) {
      operator delete(v64[0]);
    }
  }
  AudioObjectID v12 = *(_DWORD *)(a1 + 268);
  strcpy(buf, "pcvabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (!AudioObjectSetPropertyData(v12, (const AudioObjectPropertyAddress *)buf, 4u, &v59, 4u, &inData))
  {
    AudioObjectID v13 = *(_DWORD *)(a1 + 268);
    strcpy(buf, "pcvabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unsigned int v14 = sub_394380(1, v13, (uint64_t *)buf, 4u, &v59, (int *)&inData, 3200);
    if (v14)
    {
      uint64_t v15 = sub_32A48(17);
      uint64_t v16 = sub_32A48(28);
      char v17 = 0;
      uint64_t v18 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v19 = *(void *)(v15 + 8);
      while (1)
      {
        uint64_t v20 = *(int *)&buf[4 * v18];
        char v21 = v17;
        if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
          break;
        }
        char v17 = 1;
        uint64_t v18 = 1;
        if (v21) {
          goto LABEL_46;
        }
      }
      if ((v19 & v20) == 0) {
        uint64_t v15 = v16;
      }
LABEL_46:
      BOOL v44 = *(NSObject **)v15;
      if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        char v45 = v64;
        sub_2417C(v64, v14);
        if (v65 < 0) {
          char v45 = (void **)v64[0];
        }
        sub_2417C(&__p, 0x61766370u);
        int v46 = SHIBYTE(v69);
        __int16 v47 = (void **)__p;
        sub_2417C(&v61, inData);
        std::chrono::steady_clock::time_point v48 = &__p;
        if (v46 < 0) {
          std::chrono::steady_clock::time_point v48 = v47;
        }
        if (v63 >= 0) {
          v49 = &v61;
        }
        else {
          v49 = v61;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 167;
        __int16 v77 = 1024;
        *(_DWORD *)v78 = v14;
        *(_WORD *)&v78[4] = 2080;
        *(void *)&v78[6] = v45;
        *(_WORD *)&v78[14] = 2080;
        *(void *)&v78[16] = v48;
        __int16 v79 = 2080;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v80 = v49;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error %d ('%s'), while synchronizing on %s property setting it to %s.", buf, 0x36u);
        if (v63 < 0) {
          operator delete(v61);
        }
        if (SHIBYTE(v69) < 0) {
          operator delete(__p);
        }
        if (v65 < 0) {
          operator delete(v64[0]);
        }
      }
      sub_392A04(&v61, a1, inData);
      v50 = v61;
      if (v61)
      {
        uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v61 + 104))(v61);
        sub_2A19D0((uint64_t)buf, v51);
        uint64_t v52 = v50[1];
        std::condition_variable __p = 0;
        unint64_t v68 = 0;
        uint64_t v69 = 0;
        strcpy(v70, "cwdv");
        v70[8] = 0;
        int v71 = 3;
        v73[0] = 0;
        v73[1] = 0;
        v72 = v73;
        CFTypeRef cf = 0;
        int v74 = 44731050;
        sub_43637C((uint64_t *)v64, v52, (uint64_t)&__p);
        if (cf) {
          CFRelease(cf);
        }
        sub_463E0(v73[0]);
        if (__p)
        {
          unint64_t v68 = __p;
          operator delete(__p);
        }
        if (v82) {
          CFRelease(v82);
        }
        sub_463E0(v81);
        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        v53 = (_DWORD *)sub_10FBF0();
        sub_112F90(v53, (uint64_t)v64, 0, 0);
        sub_8108((uint64_t *)v64);
      }
    }
    else
    {
      atomic_store(inData, (unsigned int *)(a1 + 536));
      *(_DWORD *)(a1 + 844) = v59;
      unsigned int v22 = (os_log_t *)sub_32A48(17);
      uint64_t v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *(_DWORD *)(a1 + 268);
        sub_2417C(v64, inData);
        int v25 = v65;
        uint64_t v26 = (void **)v64[0];
        sub_2417C(&__p, v59);
        uint64_t v27 = v64;
        if (v25 < 0) {
          uint64_t v27 = v26;
        }
        if (v69 >= 0) {
          os_log_t v28 = &__p;
        }
        else {
          os_log_t v28 = __p;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 146;
        __int16 v77 = 1024;
        *(_DWORD *)v78 = v24;
        *(_WORD *)&v78[4] = 2080;
        *(void *)&v78[6] = v27;
        *(_WORD *)&v78[14] = 2080;
        *(void *)&v78[16] = v28;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Done setting %u to %s (%s)", buf, 0x2Cu);
        if (SHIBYTE(v69) < 0) {
          operator delete(__p);
        }
        if (v65 < 0) {
          operator delete(v64[0]);
        }
      }
      unsigned int v29 = atomic_load((unsigned int *)(a1 + 536));
      sub_392A04(&v61, a1, v29);
      if (v61) {
        (*(void (**)(void *))(*(void *)v61 + 96))(v61);
      }
      unsigned int v30 = atomic_load((unsigned int *)(a1 + 536));
      if (v30 == 1953260897)
      {
        unsigned int v31 = v59;
        unsigned int v66 = v59;
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 848));
        uint64_t v32 = (os_log_t *)sub_32A48(20);
        uint64_t v33 = *v32;
        if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
        {
          sub_4F64((uint64_t)v64, (os_unfair_lock_t)(a1 + 8));
          long long v34 = v65 >= 0 ? v64 : (void **)v64[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 272;
          __int16 v77 = 1024;
          *(_DWORD *)v78 = v31;
          *(_WORD *)&v78[4] = 2080;
          *(void *)&v78[6] = v34;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting BTLE content type %u on device %s", buf, 0x22u);
          if (v65 < 0) {
            operator delete(v64[0]);
          }
        }
        strcpy(buf, "tcabbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unsigned int v35 = sub_FE8A8(a1);
        if (v35)
        {
          unsigned int v36 = v35;
          uint64_t v37 = sub_32A48(17);
          uint64_t v38 = sub_32A48(28);
          char v39 = 0;
          uint64_t v40 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v41 = *(void *)(v37 + 8);
          while (1)
          {
            uint64_t v42 = *(int *)&buf[4 * v40];
            char v43 = v39;
            if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
              break;
            }
            char v39 = 1;
            uint64_t v40 = 1;
            if (v43) {
              goto LABEL_76;
            }
          }
          if ((v41 & v42) == 0) {
            uint64_t v37 = v38;
          }
LABEL_76:
          BOOL v54 = *(NSObject **)v37;
          if (v54 && os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(v64, 0x62616374u);
            int v55 = v65;
            uint64_t v56 = (void **)v64[0];
            sub_2417C(&__p, v36);
            std::chrono::system_clock::time_point v57 = v64;
            if (v55 < 0) {
              std::chrono::system_clock::time_point v57 = v56;
            }
            if (v69 >= 0) {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = &__p;
            }
            else {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58 = __p;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 279;
            __int16 v77 = 2080;
            *(void *)v78 = v57;
            *(_WORD *)&v78[8] = 2080;
            *(void *)&v78[10] = v58;
            _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to set property %s on BT. Error: %s", buf, 0x26u);
            if (SHIBYTE(v69) < 0) {
              operator delete(__p);
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
          }
        }
      }
    }
    if (v62) {
      sub_4636C(v62);
    }
  }
}

void sub_394048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, long long buf,long long a21,__int16 a22,__int16 a23,int a24,uint64_t a25)
{
  if (a2)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
    if (a11) {
      sub_4636C(a11);
    }
    if (a2 == 3)
    {
      uint64_t v27 = __cxa_begin_catch(a1);
      os_log_t v28 = (os_log_t *)sub_32A48(13);
      unsigned int v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        int v30 = v27[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a21) = 1024;
        DWORD1(a21) = v30;
        WORD4(a21) = 2080;
        *(void *)((char *)&a21 + 10) = "";
        a23 = 1024;
        a24 = 176;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).", (uint8_t *)&buf, 0x28u);
      }
    }
    else
    {
      unsigned int v31 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v32 = v31;
        uint64_t v33 = (os_log_t *)sub_32A48(13);
        long long v34 = *v33;
        if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a21) = 2080;
          *(void *)((char *)&a21 + 4) = v35;
          WORD6(a21) = 2080;
          *(void *)((char *)&a21 + 14) = "";
          HIWORD(a24) = 1024;
          LODWORD(a25) = 176;
          _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).", (uint8_t *)&buf, 0x2Cu);
        }
      }
      else
      {
        unsigned int v36 = (os_log_t *)sub_32A48(13);
        uint64_t v37 = *v36;
        if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a21) = 2080;
          *(void *)((char *)&a21 + 4) = "";
          WORD6(a21) = 1024;
          *(_DWORD *)((char *)&a21 + 14) = 176;
          _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).", (uint8_t *)&buf, 0x22u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x393F20);
  }
  _Unwind_Resume(a1);
}

void sub_394350()
{
}

void sub_39435C()
{
}

void sub_394368()
{
}

void sub_394378()
{
}

uint64_t sub_394380(int a1, AudioObjectID a2, uint64_t *a3, UInt32 a4, const void *a5, int *a6, uint64_t a7)
{
  uint64_t v14 = sub_32A48(13);
  if (*(unsigned char *)(v14 + 8))
  {
    uint64_t v15 = *(NSObject **)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        v78.__cv_.__uint64_t sig = *a3;
        *(_DWORD *)v78.__cv_.__opaque = *((_DWORD *)a3 + 2);
        sub_16C9C4((uint64_t)&v79, (unsigned int *)&v78);
        uint64_t v16 = v79.__m_.__opaque[15] >= 0 ? &v79 : (std::mutex *)v79.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v69 = 1024;
        int v70 = 166;
        __int16 v71 = 2080;
        *(void *)v72 = v16;
        *(_WORD *)&v72[8] = 1024;
        *(_DWORD *)&v72[10] = a2;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v79.__m_.__opaque[15] < 0) {
          operator delete((void *)v79.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v63 = a2;
  uint64_t v64 = *a3;
  int v65 = *((_DWORD *)a3 + 2);
  UInt32 v66 = a4;
  v67 = a5;
  if (a1) {
    goto LABEL_10;
  }
  unint64_t v20 = sub_394D20((uint64_t)&v63);
  if (HIDWORD(v20)) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = *a6 == v20;
  }
  int v22 = v21;
  uint64_t v23 = sub_32A48(13);
  uint64_t v24 = *(void *)(v23 + 8);
  if (v22)
  {
    if ((v24 & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(NSObject **)v23;
    if (!*(void *)v23 || !os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    buf.mSelector = 136315650;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v69 = 1024;
    int v70 = 191;
    __int16 v71 = 1024;
    *(_DWORD *)v72 = a2;
    goto LABEL_27;
  }
  if (v24)
  {
    uint64_t v37 = *(NSObject **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        v78.__cv_.__uint64_t sig = *a3;
        *(_DWORD *)v78.__cv_.__opaque = *((_DWORD *)a3 + 2);
        sub_16C9C4((uint64_t)&v79, (unsigned int *)&v78);
        uint64_t v38 = v79.__m_.__opaque[15] >= 0 ? &v79 : (std::mutex *)v79.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v69 = 1024;
        int v70 = 199;
        __int16 v71 = 2080;
        *(void *)v72 = v38;
        *(_WORD *)&v72[8] = 1024;
        *(_DWORD *)&v72[10] = a2;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v79.__m_.__opaque[15] < 0) {
          operator delete((void *)v79.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a3;
  uint64_t v25 = AudioObjectSetPropertyData(a2, &buf, a4, a5, 4u, a6);
  if (!v25)
  {
LABEL_10:
    unint64_t v17 = sub_394D20((uint64_t)&v63);
    if (!HIDWORD(v17) && *a6 == v17)
    {
      uint64_t v18 = sub_32A48(13);
      if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
        return 0;
      }
      uint64_t v19 = *(NSObject **)v18;
      if (!*(void *)v18 || !os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v69 = 1024;
      int v70 = 219;
      __int16 v71 = 1024;
      *(_DWORD *)v72 = a2;
LABEL_27:
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
      return 0;
    }
    memset(v79.__m_.__opaque, 0, sizeof(v79.__m_.__opaque));
    v79.__m_.__uint64_t sig = 850045863;
    memset(v78.__cv_.__opaque, 0, sizeof(v78.__cv_.__opaque));
    v78.__cv_.__uint64_t sig = 1018212795;
    char v62 = 0;
    AudioObjectID v55 = a2;
    BOOL v54 = a3;
    sub_662FC(&inClientData, a2, (AudioObjectPropertyAddress *)a3, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v62);
    while (1)
    {
      unint64_t v26 = sub_394D20((uint64_t)&v63);
      int v27 = v26;
      uint64_t v25 = HIDWORD(v26);
      if (HIDWORD(v26)) {
        goto LABEL_97;
      }
      if (*a6 == v26) {
        break;
      }
      if (a7 <= 0)
      {
        std::chrono::steady_clock::time_point v48 = (os_log_t *)sub_32A48(13);
        uint64_t v25 = 2003329396;
        v49 = *v48;
        if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = *v54;
          int v57 = *((_DWORD *)v54 + 2);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v56);
          v50 = "updated";
          if (!a1) {
            v50 = "set";
          }
          int v51 = *a6;
          if (v59 >= 0) {
            p_lk = &__lk;
          }
          else {
            p_lk = __lk.__m_;
          }
          buf.mSelector = 136316930;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 248;
          __int16 v71 = 2080;
          *(void *)v72 = v50;
          *(_WORD *)&v72[8] = 2080;
          *(void *)&v72[10] = p_lk;
          *(_WORD *)&v72[18] = 2080;
          *(void *)&v72[20] = v50;
          *(_WORD *)&v72[28] = 1024;
          BOOL v73 = v51 == v27;
          __int16 v74 = 1024;
          int v75 = 0;
          __int16 v76 = 1024;
          AudioObjectID v77 = v55;
          _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v59 < 0) {
            operator delete(__lk.__m_);
          }
        }
LABEL_97:
        sub_6651C((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&v78);
        std::mutex::~mutex(&v79);
        return v25;
      }
      v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v29 = sub_32A48(13);
      if (*(unsigned char *)(v29 + 8))
      {
        int v30 = *(NSObject **)v29;
        if (*(void *)v29)
        {
          if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            __int16 v69 = 1024;
            int v70 = 257;
            __int16 v71 = 2080;
            *(void *)v72 = "with timeout";
            *(_WORD *)&v72[8] = 1024;
            *(_DWORD *)&v72[10] = v55;
            _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v79;
      __lk.__owns_ = 1;
      std::mutex::lock(&v79);
      v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v62)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v32 = v31.__d_.__rep_ + 1000000 * a7;
        while (1)
        {
          if (v32 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_38;
          }
          v33.__d_.__rep_ = v32 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v33.__d_.__rep_ >= 1) {
            break;
          }
LABEL_56:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v32 || v62) {
            goto LABEL_38;
          }
        }
        std::chrono::steady_clock::now();
        v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v34.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0;
          goto LABEL_52;
        }
        if (v34.__d_.__rep_ < 1)
        {
          if ((unint64_t)v34.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_51;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v34.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_52;
          }
LABEL_51:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 1000 * v34.__d_.__rep_;
LABEL_52:
          if (v35 > (v33.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v36.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_55:
            std::condition_variable::__do_timed_wait(&v78, &__lk, v36);
            std::chrono::steady_clock::now();
            goto LABEL_56;
          }
        }
        v36.__d_.__rep_ = v35 + v33.__d_.__rep_;
        goto LABEL_55;
      }
LABEL_38:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
      a7 += (std::chrono::system_clock::now().__d_.__rep_ - v28.__d_.__rep_) / -1000;
    }
    uint64_t v45 = sub_32A48(13);
    if (*(unsigned char *)(v45 + 8))
    {
      int v46 = *(NSObject **)v45;
      if (*(void *)v45)
      {
        if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v56 = *v54;
          int v57 = *((_DWORD *)v54 + 2);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v56);
          __int16 v47 = v59 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 288;
          __int16 v71 = 2080;
          *(void *)v72 = v47;
          *(_WORD *)&v72[8] = 1024;
          *(_DWORD *)&v72[10] = v55;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v59 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    uint64_t v25 = 0;
    goto LABEL_97;
  }
  char v39 = (os_log_t *)sub_32A48(13);
  uint64_t v40 = *v39;
  if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v79, v25);
    int v41 = v79.__m_.__opaque[15];
    uint64_t sig = v79.__m_.__sig;
    uint64_t inClientData = *a3;
    int v61 = *((_DWORD *)a3 + 2);
    sub_16C9C4((uint64_t)&v78, (unsigned int *)&inClientData);
    char v43 = &v79;
    if (v41 < 0) {
      char v43 = (std::mutex *)sig;
    }
    if (v78.__cv_.__opaque[15] >= 0) {
      uint64_t v44 = (uint64_t)&v78;
    }
    else {
      uint64_t v44 = v78.__cv_.__sig;
    }
    buf.mSelector = 136316418;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v69 = 1024;
    int v70 = 207;
    __int16 v71 = 1024;
    *(_DWORD *)v72 = v25;
    *(_WORD *)&v72[4] = 2080;
    *(void *)&v72[6] = v43;
    *(_WORD *)&v72[14] = 2080;
    *(void *)&v72[16] = v44;
    *(_WORD *)&v72[24] = 1024;
    *(_DWORD *)&v72[26] = a2;
    _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (v78.__cv_.__opaque[15] < 0) {
      operator delete((void *)v78.__cv_.__sig);
    }
    if (v79.__m_.__opaque[15] < 0) {
      operator delete((void *)v79.__m_.__sig);
    }
  }
  return v25;
}

void sub_394C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_6651C((uint64_t)va);
  std::condition_variable::~condition_variable((std::condition_variable *)(v11 - 216));
  std::mutex::~mutex((std::mutex *)(v11 - 168));
  _Unwind_Resume(a1);
}

unint64_t sub_394D20(uint64_t a1)
{
  v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_26DAC((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        unsigned int v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          AudioObjectID v12 = __p;
        }
        else {
          AudioObjectID v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        std::chrono::system_clock::time_point v28 = v11;
        __int16 v29 = 2080;
        int v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_394ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_394EF0(uint64_t a1, signed int a2)
{
  if (a2 <= 1886152040)
  {
    if (a2 == 1885892674) {
      return 0;
    }
    int v2 = 1885892706;
  }
  else
  {
    if (a2 == 1886152041 || a2 == 1886216820) {
      return 0;
    }
    int v2 = 1886152047;
  }
  if (a2 != v2)
  {
    uint64_t v4 = sub_32A48(17);
    uint64_t v5 = sub_32A48(28);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_15;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_15:
    uint64_t v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      AudioObjectID v12 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 538;
      __int16 v22 = 2080;
      __int16 v23 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    AudioObjectID v13 = (os_log_t *)sub_32A48(13);
    unint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 539;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_395158(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_395174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (_os_feature_enabled_impl())
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a1;
    if (dispatch_get_specific("ProfileChangeQueueKey") == "ProfileChangeQueueKey")
    {
      sub_3954D4((uint64_t)v7);
    }
    else
    {
      char v6 = *(NSObject **)(a1 + 848);
      uint64_t v8 = v7;
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_3964C4;
      block[3] = &unk_636D28;
      block[4] = &v8;
      dispatch_sync(v6, block);
    }
  }
}

void sub_39527C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    char v19 = __cxa_begin_catch(a1);
    __int16 v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v22;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 35;
      __int16 v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    int v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v27 = v26;
      std::chrono::system_clock::time_point v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v30;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 35;
        __int16 v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      __int16 v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 35;
        __int16 v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x39524CLL);
}

void sub_3954D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  UInt32 v3 = (void *)(**(void **)(a1 + 8) + 16);
  v93[0] = off_636CF0;
  v93[3] = v93;
  sub_241504((uint64_t)v84, v3, (uint64_t)v93);
  sub_6AFD4(v93);
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v5 = *(int **)(a1 + 8);
  char v6 = (os_log_t *)sub_32A48(2);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = atomic_load((unsigned int *)(v2 + 536));
    sub_2417C(&v94, v8);
    int v9 = SHIBYTE(v96);
    char v10 = (void **)v94;
    sub_2417C(&__p, *(_DWORD *)(v2 + 844));
    uint64_t v11 = &v94;
    if (v9 < 0) {
      uint64_t v11 = v10;
    }
    if (v92 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 219;
    __int16 v98 = 2080;
    *(void *)v99 = v11;
    *(_WORD *)&v99[8] = 2080;
    *(void *)&v99[10] = p_p;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Current profile: %s, current activation reason: %s", buf, 0x26u);
    if (v92 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v96) < 0) {
      operator delete(v94);
    }
  }
  AudioObjectID v13 = (void *)(*(void *)v5 + 16);
  *(void *)AudioObjectPropertyAddress buf = off_636F00;
  *(void *)&v99[4] = buf;
  sub_241504((uint64_t)&v94, v13, (uint64_t)buf);
  sub_6AFD4(buf);
  sub_4361E4((uint64_t *)&__p, v2);
  unint64_t v14 = v91;
  v88 = 0;
  uint64_t v89 = 0;
  v87 = &v88;
  if (v91 == &__p)
  {
    uint64_t v15 = (unint64_t *)&v88;
  }
  else
  {
    do
    {
      sub_112C40((uint64_t **)&v87, &v88, (unint64_t *)v14 + 2, (uint64_t *)v14 + 2);
      unint64_t v14 = (void **)v14[1];
    }
    while (v14 != &__p);
    uint64_t v15 = (unint64_t *)v87;
  }
  v85[0] = (uint64_t)v85;
  v85[1] = (uint64_t)v85;
  uint64_t v86 = 0;
  uint64_t v16 = (void **)v94;
  BOOL v17 = v94 == &v95 || v15 == (unint64_t *)&v88;
  if (!v17)
  {
    do
    {
      if (sub_E0404((unint64_t *)v16 + 4, v15 + 4))
      {
        char v18 = v16[1];
        if (v18)
        {
          do
          {
            uint64_t v16 = (void **)v18;
            char v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            char v19 = v16;
            uint64_t v16 = (void **)v16[2];
          }
          while (*v16 != v19);
        }
      }
      else
      {
        if (sub_E0404(v15 + 4, (unint64_t *)v16 + 4))
        {
          __int16 v20 = v16;
        }
        else
        {
          sub_3590(v85, (uint64_t)v16[4], (uint64_t)v16[5]);
          os_log_t v21 = v16[1];
          if (v21)
          {
            do
            {
              __int16 v20 = v21;
              os_log_t v21 = (void *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              __int16 v20 = v16[2];
              BOOL v17 = *v20 == (void)v16;
              uint64_t v16 = (void **)v20;
            }
            while (!v17);
          }
        }
        int v22 = (unint64_t *)v15[1];
        if (v22)
        {
          do
          {
            uint64_t v15 = v22;
            int v22 = (unint64_t *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            __int16 v23 = v15;
            uint64_t v15 = (unint64_t *)v15[2];
          }
          while ((unint64_t *)*v15 != v23);
        }
        uint64_t v16 = (void **)v20;
      }
    }
    while (v16 != &v95 && v15 != (unint64_t *)&v88);
  }
  int v24 = 0;
  int v25 = v5[2];
  if (v25 > 1668313714)
  {
    if (v25 == 1668703084 || v25 == 1668576377) {
      goto LABEL_67;
    }
    if (v25 != 1668313715) {
      goto LABEL_84;
    }
  }
  else if (v25 != 1668301427 && v25 != 1668309362 && v25 != 1668313666)
  {
    goto LABEL_84;
  }
  int v24 = 0;
  int v29 = v5[3];
  if (v29 > 1919776354)
  {
    if (v29 > 1987081832)
    {
      if (v29 == 1987081839) {
        goto LABEL_67;
      }
      unsigned __int16 v31 = 30313;
    }
    else
    {
      if (v29 == 1919776355) {
        goto LABEL_67;
      }
      unsigned __int16 v31 = 26467;
    }
    int v30 = v31 | 0x76700000;
LABEL_66:
    if (v29 != v30) {
      goto LABEL_84;
    }
    goto LABEL_67;
  }
  if (v29 > 1768779618)
  {
    if (v29 == 1768779619) {
      goto LABEL_67;
    }
    int v30 = 1768781411;
    goto LABEL_66;
  }
  if (v29 != 1735222132)
  {
    int v30 = 1768057203;
    goto LABEL_66;
  }
LABEL_67:
  if (*(unsigned char *)(v2 + 497))
  {
    int v24 = 0;
    if (*(_DWORD *)(v2 + 844) == 1919183219 && v96 && v86)
    {
      uint64_t v32 = *v4;
      uint64_t v33 = v4[1];
      if (*v4 == v33)
      {
        int v24 = 1;
      }
      else
      {
        while (2)
        {
          for (i = *(void **)(v32 + 16); i != (void *)(v32 + 8); i = (void *)i[1])
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = (std::__shared_weak_count *)i[3];
            if (!v35) {
              goto LABEL_83;
            }
            std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v36 = std::__shared_weak_count::lock(v35);
            if (!v36) {
              goto LABEL_83;
            }
            uint64_t v37 = i[2];
            if (!v37)
            {
              sub_4636C(v36);
              goto LABEL_83;
            }
            __int16 v38 = *(_WORD *)(v37 + 184);
            sub_4636C(v36);
            if ((v38 & 0x20) == 0) {
              goto LABEL_83;
            }
          }
          v32 += 32;
          int v24 = 1;
          if (v32 != v33) {
            continue;
          }
          break;
        }
      }
    }
  }
  else
  {
LABEL_83:
    int v24 = 0;
  }
LABEL_84:
  sub_8108(v85);
  sub_10E118(v88);
  sub_8108((uint64_t *)&__p);
  sub_10E118(v95);
  if (!v24) {
    goto LABEL_164;
  }
  uint64_t v39 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v39 + 8) == 1668703084)
  {
    if (!*(unsigned char *)(v39 + 164))
    {
      signed int v40 = 1919115628;
      strcpy((char *)buf, "pshsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_99A40(v2);
      goto LABEL_108;
    }
    goto LABEL_89;
  }
  signed int v41 = sub_1F2704(*(_DWORD *)(v39 + 12));
  if (*(unsigned char *)(v39 + 164))
  {
LABEL_89:
    signed int v40 = *(_DWORD *)(v39 + 160);
    goto LABEL_91;
  }
  signed int v40 = v41;
LABEL_91:
  strcpy((char *)buf, "pshsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v42 = sub_99A40(v2);
  if (v40 <= 1919708274)
  {
    if (v40 != 1919115628 && v40 != 1919183219) {
      goto LABEL_107;
    }
  }
  else if (v40 != 1919708275 && v40 != 1920364387)
  {
    if (v40 == 1936090482)
    {
      *((void *)&v46 + 1) = v43;
      *(void *)&long long v46 = v42;
      uint64_t v45 = v46 >> 32;
      if (HIDWORD(v42) != 1 || (v45 & 0xFF00000000) == 0) {
        signed int v40 = 1919115628;
      }
      else {
        signed int v40 = 1936090482;
      }
      goto LABEL_108;
    }
LABEL_107:
    signed int v40 = 1918989668;
  }
LABEL_108:
  v49 = (os_log_t *)sub_32A48(2);
  v50 = *v49;
  if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(&v94, 0x7473636Fu);
    int v51 = SHIBYTE(v96);
    uint64_t v52 = (void **)v94;
    sub_2417C(&__p, v40);
    v53 = &v94;
    if (v51 < 0) {
      v53 = v52;
    }
    if (v92 >= 0) {
      BOOL v54 = &__p;
    }
    else {
      BOOL v54 = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 669;
    __int16 v98 = 2080;
    *(void *)v99 = v53;
    *(_WORD *)&v99[8] = 2080;
    *(void *)&v99[10] = v54;
    _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Upcoming profile: %s, upcoming activation reason: %s", buf, 0x26u);
    if (v92 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v96) < 0) {
      operator delete(v94);
    }
  }
  if (v40 != 1920364387)
  {
    unsigned int v55 = atomic_load((unsigned int *)(v2 + 536));
    if (v55 != 1953719151 || *(_DWORD *)(v2 + 844) != v40)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 848));
      sub_39383C(v2, 0x7473636Fu, v40);
      uint64_t v56 = (os_log_t *)sub_32A48(17);
      int v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_DEFAULT))
      {
        int v58 = *(_DWORD *)(v2 + 268);
        sub_2417C(&__p, 0x7473636Fu);
        int v59 = v92;
        uint64_t v60 = (void **)__p;
        sub_2417C(&v94, v40);
        int v61 = &__p;
        if (v59 < 0) {
          int v61 = v60;
        }
        if (v96 >= 0) {
          char v62 = &v94;
        }
        else {
          char v62 = v94;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 195;
        __int16 v98 = 1024;
        *(_DWORD *)v99 = v58;
        *(_WORD *)&v99[4] = 2080;
        *(void *)&v99[6] = v61;
        *(_WORD *)&v99[14] = 2080;
        *(void *)&v99[16] = v62;
        _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Pre-setting profile for %u to %s (%s)", buf, 0x2Cu);
        if (SHIBYTE(v96) < 0) {
          operator delete(v94);
        }
        if (v92 < 0) {
          operator delete(__p);
        }
      }
      sub_22210((CFStringRef *)buf, "profileType");
      LODWORD(__p) = 1953719151;
      *(void *)&buf[8] = CFNumberCreate(0, kCFNumberIntType, &__p);
      if (!*(void *)&buf[8])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      sub_22210((CFStringRef *)&buf[16], "Reason");
      LODWORD(__p) = v40;
      *(void *)&v99[4] = CFNumberCreate(0, kCFNumberIntType, &__p);
      if (!*(void *)&v99[4])
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v83, "Could not construct");
      }
      v94 = buf;
      v95 = (void *)(&def_1E50E8 + 2);
      CFDictionaryRef v63 = sub_4D3D8((uint64_t)&v94);
      for (uint64_t j = 0; j != -32; j -= 16)
      {
        int v65 = *(const void **)&v99[j + 4];
        if (v65) {
          CFRelease(v65);
        }
        UInt32 v66 = *(const void **)&buf[j + 16];
        if (v66) {
          CFRelease(v66);
        }
      }
      LODWORD(v85[0]) = 1;
      AudioObjectID v67 = *(_DWORD *)(v2 + 268);
      strcpy((char *)buf, "dbobbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unsigned int v68 = sub_394380(0, v67, (uint64_t *)buf, 8u, v63, (int *)v85, 2000);
      if (v68)
      {
        uint64_t v69 = sub_32A48(17);
        uint64_t v70 = sub_32A48(28);
        char v71 = 0;
        uint64_t v72 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v73 = *(void *)(v69 + 8);
        while (1)
        {
          uint64_t v74 = *(int *)&buf[4 * v72];
          char v75 = v71;
          if (((v73 & v74) != 0) != ((*(void *)(v70 + 8) & v74) != 0)) {
            break;
          }
          char v71 = 1;
          uint64_t v72 = 1;
          if (v75) {
            goto LABEL_148;
          }
        }
        if ((v73 & v74) == 0) {
          uint64_t v69 = v70;
        }
LABEL_148:
        __int16 v76 = *(NSObject **)v69;
        if (v76 && os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          AudioObjectID v77 = &v94;
          sub_2417C(&v94, v68);
          if (v96 < 0) {
            AudioObjectID v77 = v94;
          }
          sub_2417C(&__p, 0x626F6264u);
          int v78 = v92;
          std::mutex v79 = (void **)__p;
          sub_2417C(&v87, 0x7473636Fu);
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v80 = &__p;
          if (v78 < 0) {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v80 = v79;
          }
          if (v89 >= 0) {
            std::chrono::steady_clock::time_point v81 = &v87;
          }
          else {
            std::chrono::steady_clock::time_point v81 = v87;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 209;
          __int16 v98 = 1024;
          *(_DWORD *)v99 = v68;
          *(_WORD *)&v99[4] = 2080;
          *(void *)&v99[6] = v77;
          *(_WORD *)&v99[14] = 2080;
          *(void *)&v99[16] = v80;
          __int16 v100 = 2080;
          v101 = v81;
          _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error %d ('%s'), while synchronizing on %s property setting it to %s.", buf, 0x36u);
          if (SHIBYTE(v89) < 0) {
            operator delete(v87);
          }
          if (v92 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v96) < 0) {
            operator delete(v94);
          }
        }
      }
      CFRelease(v63);
    }
  }
LABEL_164:
  sub_10E118(v84[1]);
}

void sub_396020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,long long buf,long long a29,__int16 a30,__int16 a31,int a32,int a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (SBYTE7(a29) < 0) {
    operator delete((void *)buf);
  }
  CFRelease(v33);
  if (a2 == 3)
  {
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v36 = __cxa_begin_catch(exception_object);
    uint64_t v37 = (os_log_t *)sub_32A48(13);
    os_log_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      int v39 = v36[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a29) = 1024;
      DWORD1(a29) = v39;
      WORD4(a29) = 2080;
      *(void *)((char *)&a29 + 10) = "";
      a31 = 1024;
      a32 = 210;
      signed int v40 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      signed int v41 = v38;
      uint32_t v42 = 40;
LABEL_17:
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, v40, (uint8_t *)&buf, v42);
    }
  }
  else
  {
    uint64_t v43 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v44 = v43;
      uint64_t v45 = (os_log_t *)sub_32A48(13);
      os_log_t v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        uint64_t v47 = (*(uint64_t (**)(void *))(*(void *)v44 + 16))(v44);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a29) = 2080;
        *(void *)((char *)&a29 + 4) = v47;
        WORD6(a29) = 2080;
        *(void *)((char *)&a29 + 14) = "";
        HIWORD(a32) = 1024;
        a33 = 210;
        signed int v40 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        signed int v41 = v46;
        uint32_t v42 = 44;
        goto LABEL_17;
      }
    }
    else
    {
      std::chrono::steady_clock::time_point v48 = (os_log_t *)sub_32A48(13);
      os_log_t v49 = *v48;
      if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a29) = 2080;
        *(void *)((char *)&a29 + 4) = "";
        WORD6(a29) = 1024;
        *(_DWORD *)((char *)&a29 + 14) = 210;
        signed int v40 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        signed int v41 = v49;
        uint32_t v42 = 34;
        goto LABEL_17;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x395F64);
}

void sub_3964C4(uint64_t a1)
{
}

void sub_396528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      char v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v23 = v22;
      int v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        char v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      __int16 v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        char v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x3964F8);
}

BOOL sub_396780(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 144) == 1885892706;
}

void sub_3967A0(uint64_t a1, void *a2)
{
  *a2 = off_636F00;
}

void *sub_3967C0()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_636F00;
  return result;
}

void sub_3967F8()
{
}

BOOL sub_396810(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 144) == 1885892706;
}

void sub_396830(uint64_t a1, void *a2)
{
  *a2 = off_636CF0;
}

void *sub_396850()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_636CF0;
  return result;
}

void sub_396888()
{
}

unint64_t sub_3968A0(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(a1 + 536));
  sub_392A04(&v14, a1, v1);
  if (v14)
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 88))(v14);
    unint64_t v3 = v2 & 0xFFFFFF0000000000;
    uint64_t v4 = v2 & 0xFF00000000;
    uint64_t v5 = v2;
  }
  else
  {
    char v6 = (unint64_t *)sub_32A48(17);
    uint64_t v7 = sub_32A48(28);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    unint64_t v10 = v6[1];
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_9;
      }
    }
    if ((v10 & v11) == 0) {
      char v6 = (unint64_t *)v7;
    }
LABEL_9:
    unint64_t v3 = *v6;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 685;
        _os_log_impl(&def_1E50E8, (os_log_t)v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", buf, 0x12u);
      }
      uint64_t v5 = 0;
      unint64_t v3 = 0;
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v4 = 0x100000000;
  }
  if (v15) {
    sub_4636C(v15);
  }
  return v5 | v4 | v3;
}

void sub_396A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_396A64(os_unfair_lock_s *a1)
{
}

void sub_396D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_396D38()
{
}

void sub_396DA4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  AudioObjectID v2 = *(_DWORD *)(*a1 + 268);
  uint64_t inAddress = 0x676C6F6261766170;
  LODWORD(inAddress_8) = 0;
  if (AudioObjectHasProperty(v2, (const AudioObjectPropertyAddress *)&inAddress))
  {
    LOBYTE(outData) = 0;
    LOBYTE(v99) = 0;
    *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
    buf[8] = 0;
    buf[16] = 0;
    sub_206D8((uint64_t)&outData);
    UInt32 ioDataSize = sub_26E94(v2, (const AudioObjectPropertyAddress *)&inAddress, 0, 0);
    if (ioDataSize)
    {
      outData = 0;
      *(_DWORD *)AudioObjectPropertyAddress buf = AudioObjectGetPropertyData(v2, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &ioDataSize, &outData);
      if (!*(_DWORD *)buf)
      {
        unint64_t v3 = outData;
        CFTypeRef v96 = outData;
        sub_170998(&v95, &v96);
        buf[16] = 1;
        *(void *)&buf[8] = v95;
        if (v3) {
          CFRelease(v3);
        }
      }
    }
  }
  else
  {
    LOBYTE(outData) = 0;
    LOBYTE(v99) = 0;
    *(_DWORD *)AudioObjectPropertyAddress buf = 2003332927;
    buf[8] = 0;
    buf[16] = 0;
    sub_206D8((uint64_t)&outData);
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  __p.__r_.__value_.__s.__data_[8] = 0;
  if (buf[16])
  {
    __p.__r_.__value_.__r.__words[0] = *(void *)&buf[8];
    *(void *)&buf[8] = 0;
    __p.__r_.__value_.__s.__data_[8] = 1;
  }
  sub_206D8((uint64_t)&buf[8]);
  if (__p.__r_.__value_.__s.__data_[8])
  {
    uint64_t v4 = (const void *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    sub_206D8((uint64_t)&__p);
    if (v4)
    {
      sub_397C54((uint64_t)&v92, v4);
      CFRelease(v4);
LABEL_14:
      uint64_t v5 = sub_32A48(17);
      uint64_t v6 = sub_32A48(28);
      char v7 = 0;
      uint64_t v8 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v9 = *(void *)(v5 + 8);
      while (1)
      {
        uint64_t v10 = *(int *)&buf[4 * v8];
        char v11 = v7;
        if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
          break;
        }
        char v7 = 1;
        uint64_t v8 = 1;
        if (v11) {
          goto LABEL_20;
        }
      }
      if ((v9 & v10) == 0) {
        uint64_t v5 = v6;
      }
LABEL_20:
      char v12 = *(NSObject **)v5;
      if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_4F64((uint64_t)&outData, (os_unfair_lock_t)(v1 + 8));
        int v13 = v100;
        uint64_t v14 = (void **)outData;
        sub_82188(&__p, v92, v93);
        p_outData = &outData;
        if (v13 < 0) {
          p_outData = v14;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 708;
        __int16 v104 = 2080;
        uint64_t v105 = p_outData;
        __int16 v106 = 2080;
        v107 = p_p;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device (%s), new profiles: %s", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v100 < 0) {
          operator delete(outData);
        }
      }
      __int16 v17 = v92;
      uint64_t v89 = v93;
      uint64_t v90 = v1;
      if (v92 != v93)
      {
        int v18 = (uint64_t **)(v1 + 552);
        do
        {
          uint64_t v19 = (uint64_t)*v18;
          if (!*v18) {
            goto LABEL_44;
          }
          unsigned int v20 = *v17;
          uint64_t v21 = v1 + 552;
          do
          {
            unsigned int v22 = *(_DWORD *)(v19 + 32);
            BOOL v23 = v22 >= v20;
            if (v22 >= v20) {
              int v24 = (uint64_t *)v19;
            }
            else {
              int v24 = (uint64_t *)(v19 + 8);
            }
            if (v23) {
              uint64_t v21 = v19;
            }
            uint64_t v19 = *v24;
          }
          while (*v24);
          if ((uint64_t **)v21 == v18 || v20 < *(_DWORD *)(v21 + 32))
          {
LABEL_44:
            uint64_t v25 = sub_32A48(17);
            uint64_t v26 = sub_32A48(28);
            char v27 = 0;
            uint64_t v28 = 0;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002;
            uint64_t v29 = *(void *)(v25 + 8);
            while (1)
            {
              uint64_t v30 = *(int *)&buf[4 * v28];
              char v31 = v27;
              if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
                break;
              }
              char v27 = 1;
              uint64_t v28 = 1;
              if (v31) {
                goto LABEL_50;
              }
            }
            if ((v29 & v30) == 0) {
              uint64_t v25 = v26;
            }
LABEL_50:
            uint64_t v32 = *(NSObject **)v25;
            if (*(void *)v25 && os_log_type_enabled(*(os_log_t *)v25, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(&outData, *v17);
              uint64_t v33 = &outData;
              if (v100 < 0) {
                uint64_t v33 = (void **)outData;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 720;
              __int16 v104 = 2080;
              uint64_t v105 = v33;
              _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Profile added: %s", buf, 0x1Cu);
              if (v100 < 0) {
                operator delete(outData);
              }
            }
            unsigned int v34 = *v17;
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 848));
            switch(v34)
            {
              case 0x7473636Fu:
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = (char *)operator new(0x38uLL);
                *((void *)v35 + 1) = 0;
                *((void *)v35 + 2) = 0;
                *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = off_636E10;
                std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v36 = v35 + 24;
                *((void *)v35 + 4) = v1;
                *((void *)v35 + 5) = 0;
                *((void *)v35 + 3) = off_62B698;
                LODWORD(outData) = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v1);
                strcpy(buf, "psllbolg");
                buf[9] = 0;
                *(_WORD *)&buf[10] = 0;
                unint64_t v37 = sub_26DAC((AudioObjectID *)&outData, (const AudioObjectPropertyAddress *)buf, 0, 0);
                *((void *)&v40 + 1) = v38;
                *(void *)&long long v40 = v37;
                uint64_t v39 = v40 >> 32;
                BOOL v41 = (v39 & 0xFF00000000) == 0 || v39 == 0;
                char v42 = !v41;
                v35[48] = v42;
LABEL_68:
                uint64_t v43 = (std::mutex *)(v1 + 568);
                std::mutex::lock((std::mutex *)(v1 + 568));
                uint64_t v44 = *v18;
                uint64_t v45 = (uint64_t **)(v1 + 552);
                os_log_t v46 = (uint64_t **)(v1 + 552);
                if (!*v18) {
                  goto LABEL_75;
                }
                while (1)
                {
                  while (1)
                  {
                    os_log_t v46 = (uint64_t **)v44;
                    unsigned int v47 = *((_DWORD *)v44 + 8);
                    if (v34 >= v47) {
                      break;
                    }
                    uint64_t v44 = *v46;
                    uint64_t v45 = v46;
                    if (!*v46) {
                      goto LABEL_75;
                    }
                  }
                  if (v47 >= v34) {
                    break;
                  }
                  uint64_t v44 = v46[1];
                  if (!v44)
                  {
                    uint64_t v45 = v46 + 1;
LABEL_75:
                    std::chrono::steady_clock::time_point v48 = operator new(0x38uLL);
                    *((_DWORD *)v48 + 8) = v34;
                    *((void *)v48 + 5) = 0;
                    *((void *)v48 + 6) = 0;
                    *(void *)std::chrono::steady_clock::time_point v48 = 0;
                    *((void *)v48 + 1) = 0;
                    *((void *)v48 + 2) = v46;
                    *uint64_t v45 = (uint64_t *)v48;
                    uint64_t v49 = v90;
                    uint64_t v50 = **(void **)(v90 + 544);
                    int v51 = (uint64_t *)v48;
                    if (v50)
                    {
                      *(void *)(v90 + 544) = v50;
                      int v51 = *v45;
                    }
                    sub_46D00(*(uint64_t **)(v90 + 552), v51);
                    ++*(void *)(v90 + 560);
                    uint64_t v52 = v43;
LABEL_83:
                    atomic_fetch_add_explicit((atomic_ullong *volatile)v35 + 1, 1uLL, memory_order_relaxed);
                    uint64_t v60 = (std::__shared_weak_count *)*((void *)v48 + 6);
                    *((void *)v48 + 5) = v36;
                    *((void *)v48 + 6) = v35;
                    if (v60) {
                      sub_4636C(v60);
                    }
                    std::mutex::unlock(v52);
                    if (v34 == 1952539500 && !atomic_load((unsigned int *)(v49 + 840))) {
                      sub_39383C(v49, 0x7461636Cu, 0x72646973u);
                    }
                    LOBYTE(outData) = 0;
                    uint64_t v99 = 0;
                    char v62 = (_DWORD *)sub_10FBF0();
                    *(void *)AudioObjectPropertyAddress buf = v62;
                    buf[8] = (*(uint64_t (**)(_DWORD *))(*(void *)v62 + 16))(v62);
                    ++v62[114];
                    sub_3BCAC(buf);
                    (*(void (**)(char *))(*(void *)v36 + 16))(v36);
                    *(void *)AudioObjectPropertyAddress buf = 0;
                    sub_10FBF0();
                    sub_10BA10();
                  }
                }
                std::chrono::steady_clock::time_point v48 = v46;
                uint64_t v52 = v43;
                uint64_t v49 = v90;
                goto LABEL_83;
              case 0x746C6561u:
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = (char *)operator new(0x30uLL);
                *((void *)v35 + 1) = 0;
                *((void *)v35 + 2) = 0;
                *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = off_636E48;
                std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v36 = v35 + 24;
                *((void *)v35 + 4) = v1;
                *((void *)v35 + 5) = 0;
                *((void *)v35 + 3) = off_636E80;
                goto LABEL_68;
              case 0x7461636Cu:
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = (char *)operator new(0xE8uLL);
                *((void *)v35 + 1) = 0;
                *((void *)v35 + 2) = 0;
                *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = off_636D58;
                std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v36 = v35 + 24;
                *((void *)v35 + 4) = v1;
                *((void *)v35 + 5) = 0;
                *((void *)v35 + 3) = off_636D90;
                *((void *)v35 + 6) = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
                *((_WORD *)v35 + 28) = 257;
                std::shared_timed_mutex::shared_timed_mutex((std::shared_timed_mutex *)(v35 + 64));
                goto LABEL_68;
            }
            uint64_t v53 = sub_32A48(17);
            uint64_t v54 = sub_32A48(28);
            char v55 = 0;
            uint64_t v56 = 0;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002;
            uint64_t v57 = *(void *)(v53 + 8);
            while (1)
            {
              uint64_t v58 = *(int *)&buf[4 * v56];
              char v59 = v55;
              if (((v57 & v58) != 0) != ((*(void *)(v54 + 8) & v58) != 0)) {
                break;
              }
              char v55 = 1;
              uint64_t v56 = 1;
              if (v59) {
                goto LABEL_93;
              }
            }
            if ((v57 & v58) == 0) {
              uint64_t v53 = v54;
            }
LABEL_93:
            CFDictionaryRef v63 = *(NSObject **)v53;
            if (*(void *)v53 && os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(&outData, v34);
              uint64_t v64 = &outData;
              if (v100 < 0) {
                uint64_t v64 = (void **)outData;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 763;
              __int16 v104 = 2080;
              uint64_t v105 = v64;
              _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unsupported Bluetooth profile %s", buf, 0x1Cu);
              if (v100 < 0) {
                operator delete(outData);
              }
            }
          }
          ++v17;
        }
        while (v17 != v89);
        __int16 v17 = v92;
      }
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      int v65 = *(void **)(v1 + 544);
      if (v65 != (void *)(v1 + 552))
      {
        UInt32 v66 = v93;
        do
        {
          if (v17 == v66)
          {
LABEL_105:
            uint64_t v68 = sub_32A48(17);
            uint64_t v69 = sub_32A48(28);
            char v70 = 0;
            uint64_t v71 = 0;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002;
            uint64_t v72 = *(void *)(v68 + 8);
            while (1)
            {
              uint64_t v73 = *(int *)&buf[4 * v71];
              char v74 = v70;
              if (((v72 & v73) != 0) != ((*(void *)(v69 + 8) & v73) != 0)) {
                break;
              }
              char v70 = 1;
              uint64_t v71 = 1;
              if (v74) {
                goto LABEL_111;
              }
            }
            if ((v72 & v73) == 0) {
              uint64_t v68 = v69;
            }
LABEL_111:
            char v75 = *(NSObject **)v68;
            if (*(void *)v68 && os_log_type_enabled(*(os_log_t *)v68, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(&outData, *((_DWORD *)v65 + 8));
              __int16 v76 = &outData;
              if (v100 < 0) {
                __int16 v76 = (void **)outData;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 732;
              __int16 v104 = 2080;
              uint64_t v105 = v76;
              _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Profile removed: %s", buf, 0x1Cu);
              if (v100 < 0) {
                operator delete(outData);
              }
            }
            sub_6CB40((uint64_t *)&__p, *((_DWORD *)v65 + 8), *((_DWORD *)v65 + 8));
          }
          else
          {
            AudioObjectID v67 = v17;
            while (*((_DWORD *)v65 + 8) != *v67)
            {
              if (++v67 == v66) {
                goto LABEL_105;
              }
            }
          }
          AudioObjectID v77 = (void *)v65[1];
          if (v77)
          {
            do
            {
              int v78 = v77;
              AudioObjectID v77 = (void *)*v77;
            }
            while (v77);
          }
          else
          {
            do
            {
              int v78 = (void *)v65[2];
              BOOL v41 = *v78 == (void)v65;
              int v65 = v78;
            }
            while (!v41);
          }
          int v65 = v78;
        }
        while (v78 != (void *)(v1 + 552));
        uint64_t v79 = v1;
        std::string::size_type v80 = __p.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
        {
          do
          {
            unsigned int v81 = *(_DWORD *)(v80 + 28);
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v79 + 848));
            sub_392A04(&inAddress, v79, v81);
            uint64_t v82 = inAddress;
            if (inAddress)
            {
              LOBYTE(outData) = 0;
              uint64_t v99 = 0;
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v83 = (_DWORD *)sub_10FBF0();
              *(void *)AudioObjectPropertyAddress buf = v83;
              buf[8] = (*(uint64_t (**)(_DWORD *))(*(void *)v83 + 16))(v83);
              ++v83[114];
              sub_3BCAC(buf);
              (*(void (**)(uint64_t))(*(void *)v82 + 24))(v82);
              *(void *)AudioObjectPropertyAddress buf = 0;
              sub_10FBF0();
              sub_10BA10();
            }
            uint64_t v86 = (os_log_t *)sub_32A48(17);
            v87 = *v86;
            uint64_t v79 = v90;
            if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(&outData, v81);
              v88 = &outData;
              if (v100 < 0) {
                v88 = (void **)outData;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 799;
              __int16 v104 = 2080;
              uint64_t v105 = v88;
              _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Profile %s not found", buf, 0x1Cu);
              if (v100 < 0) {
                operator delete(outData);
              }
            }
            if (inAddress_8) {
              sub_4636C(inAddress_8);
            }
            std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v84 = *(std::string **)(v80 + 8);
            if (v84)
            {
              do
              {
                uint64_t v85 = v84;
                std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v84 = (std::string *)v84->__r_.__value_.__r.__words[0];
              }
              while (v84);
            }
            else
            {
              do
              {
                uint64_t v85 = *(std::string **)(v80 + 16);
                BOOL v41 = v85->__r_.__value_.__r.__words[0] == v80;
                std::string::size_type v80 = (std::string::size_type)v85;
              }
              while (!v41);
            }
            std::string::size_type v80 = (std::string::size_type)v85;
          }
          while (v85 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
        }
      }
      sub_463E0((void *)__p.__r_.__value_.__l.__size_);
      if (v17) {
        operator delete(v17);
      }
      operator delete();
    }
  }
  else
  {
    sub_206D8((uint64_t)&__p);
  }
  char v92 = 0;
  int v93 = 0;
  uint64_t v94 = 0;
  goto LABEL_14;
}

void sub_397AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_397C54(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  int Count = CFArrayGetCount((CFArrayRef)a2);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  sub_15BD60((void **)a1, Count);
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = Count;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a2, v6);
      unsigned int v9 = sub_7E85C(ValueAtIndex);
      unsigned int v10 = v9;
      char v12 = *(unsigned int **)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = *(unsigned int **)a1;
        uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_46BF4(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unsigned int v20 = (unsigned int *)(v18 + 4 * v15);
        *unsigned int v20 = v10;
        int v13 = v20 + 1;
        while (v12 != v14)
        {
          unsigned int v21 = *--v12;
          *--unsigned int v20 = v21;
        }
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = v18 + 4 * v19;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *char v12 = v9;
        int v13 = v12 + 1;
      }
      *(void *)(a1 + 8) = v13;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_397DD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_397E0C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_397E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_636E48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_397E84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_636E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_397EA8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_397ECC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_636E10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_397F20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_636E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_397F44(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_397F68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_636D58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_397FBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_636D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_397FDC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v27 = sub_32A48(17);
    uint64_t v28 = sub_32A48(28);
    char v29 = 0;
    uint64_t v30 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = *(int *)&buf[4 * v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1;
      if (v33) {
        goto LABEL_43;
      }
    }
    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_43:
    std::chrono::steady_clock::time_point v48 = *(NSObject **)v27;
    if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 876;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d inNumberAddresses is 0.", buf, 0x12u);
    }
  }
  if (!a4)
  {
    uint64_t v34 = sub_32A48(17);
    uint64_t v35 = sub_32A48(28);
    char v36 = 0;
    uint64_t v37 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v38 = *(void *)(v34 + 8);
    while (1)
    {
      uint64_t v39 = *(int *)&buf[4 * v37];
      char v40 = v36;
      if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
        break;
      }
      char v36 = 1;
      uint64_t v37 = 1;
      if (v40) {
        goto LABEL_48;
      }
    }
    if ((v38 & v39) == 0) {
      uint64_t v34 = v35;
    }
LABEL_48:
    uint64_t v49 = *(NSObject **)v34;
    if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 877;
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d inClientData is NULL.", buf, 0x12u);
    }
  }
  if (!a3)
  {
    uint64_t v41 = sub_32A48(17);
    uint64_t v42 = sub_32A48(28);
    char v43 = 0;
    uint64_t v44 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v45 = *(void *)(v41 + 8);
    while (1)
    {
      uint64_t v46 = *(int *)&buf[4 * v44];
      char v47 = v43;
      if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
        break;
      }
      char v43 = 1;
      uint64_t v44 = 1;
      if (v47) {
        goto LABEL_53;
      }
    }
    if ((v45 & v46) == 0) {
      uint64_t v41 = v42;
    }
LABEL_53:
    uint64_t v50 = *(NSObject **)v41;
    if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 878;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d inAddresses is NULL.", buf, 0x12u);
    }
  }
  if (a3 && a2 && a4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)(a4 + 632);
    uint64_t v9 = a2;
    uint64_t v51 = a3;
    do
    {
      uint64_t v10 = a3 + 12 * v7;
      *(void *)AudioObjectPropertyAddress buf = *(void *)v10;
      *(_DWORD *)&buf[8] = *(_DWORD *)(v10 + 8);
      if (sub_1A1BE4(v8, (uint64_t)buf))
      {
        if (*(_DWORD *)v10 == 1987013732)
        {
          uint64_t v11 = sub_32A48(17);
          uint64_t v12 = sub_32A48(28);
          char v13 = 0;
          uint64_t v14 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v15 = *(void *)(v11 + 8);
          while (1)
          {
            uint64_t v16 = *(int *)&buf[4 * v14];
            char v17 = v13;
            if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
              break;
            }
            char v13 = 1;
            uint64_t v14 = 1;
            if (v17) {
              goto LABEL_16;
            }
          }
          if ((v15 & v16) == 0) {
            uint64_t v11 = v12;
          }
LABEL_16:
          unint64_t v18 = *(NSObject **)v11;
          if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v19 = a3 + 12 * v7;
            sub_2417C(v54, *(_DWORD *)(v19 + 4));
            int v20 = v55;
            unsigned int v21 = (void **)v54[0];
            int v22 = *(_DWORD *)(v19 + 4);
            int v23 = *(_DWORD *)(a3 + 12 * v7 + 8);
            sub_2417C(__p, HIDWORD(qword_65D7C0));
            int v24 = v54;
            if (v20 < 0) {
              int v24 = v21;
            }
            uint64_t v25 = __p;
            if (v53 < 0) {
              uint64_t v25 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316930;
            *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
            __int16 v57 = 1024;
            int v58 = 892;
            __int16 v59 = 2080;
            uint64_t v60 = v24;
            __int16 v61 = 1024;
            int v62 = v22;
            __int16 v63 = 1024;
            int v64 = v23;
            __int16 v65 = 2080;
            UInt32 v66 = v25;
            __int16 v67 = 1024;
            int v68 = HIDWORD(qword_65D7C0);
            __int16 v69 = 1024;
            int v70 = dword_65D7C8;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Received callback from HAL. (selector: kAudioDevicePropertyVolumeDecibels; scope: '%s' (%u); ele"
              "ment: %u) translated to (selector: kRegistrationDeviceInitiatedVolumeChangeAddress; scope: '%s' (%u); element: %u).",
              buf,
              0x3Eu);
            if (v53 < 0) {
              operator delete(__p[0]);
            }
            a3 = v51;
            if (v55 < 0) {
              operator delete(v54[0]);
            }
          }
        }
        *(void *)AudioObjectPropertyAddress buf = *(void *)v10;
        *(_DWORD *)&buf[8] = *(_DWORD *)(v10 + 8);
        sub_1A1D20(v8, (unsigned int *)buf);
      }
      ++v7;
    }
    while (v7 != v9);
  }
  return 0;
}

void sub_39850C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,long long buf,long long a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a2 == 3)
  {
    uint64_t v26 = __cxa_begin_catch(exception_object);
    uint64_t v27 = sub_32A48(17);
    uint64_t v28 = sub_32A48(28);
    char v29 = 0;
    uint64_t v30 = 0;
    *(void *)&AudioObjectPropertyAddress buf = v23;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = *((int *)&buf + v30);
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1;
      if (v33) {
        goto LABEL_16;
      }
    }
    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_16:
    char v43 = *(NSObject **)v27;
    if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      int v44 = v26[2];
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "Device_BluetoothUnified_Aspen.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 899;
      WORD1(a23) = 1024;
      DWORD1(a23) = v44;
      uint64_t v45 = "%25s:%-5d CAException thrown during notification: %d.";
      uint64_t v46 = v43;
      uint32_t v47 = 24;
LABEL_33:
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, v47);
    }
  }
  else
  {
    uint64_t v34 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v35 = v34;
      uint64_t v36 = sub_32A48(17);
      uint64_t v37 = sub_32A48(28);
      char v38 = 0;
      uint64_t v39 = 0;
      *(void *)&AudioObjectPropertyAddress buf = v23;
      uint64_t v40 = *(void *)(v36 + 8);
      while (1)
      {
        uint64_t v41 = *((int *)&buf + v39);
        char v42 = v38;
        if (((v40 & v41) != 0) != ((*(void *)(v37 + 8) & v41) != 0)) {
          break;
        }
        char v38 = 1;
        uint64_t v39 = 1;
        if (v42) {
          goto LABEL_25;
        }
      }
      if ((v40 & v41) == 0) {
        uint64_t v36 = v37;
      }
LABEL_25:
      char v55 = *(NSObject **)v36;
      if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        uint64_t v56 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "Device_BluetoothUnified_Aspen.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 903;
        WORD1(a23) = 2080;
        *(void *)((char *)&a23 + 4) = v56;
        uint64_t v45 = "%25s:%-5d Standard Library exception thrown during notification: %s.";
        uint64_t v46 = v55;
        uint32_t v47 = 28;
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v48 = sub_32A48(17);
      uint64_t v49 = sub_32A48(28);
      char v50 = 0;
      uint64_t v51 = 0;
      *(void *)&AudioObjectPropertyAddress buf = v23;
      uint64_t v52 = *(void *)(v48 + 8);
      while (1)
      {
        uint64_t v53 = *((int *)&buf + v51);
        char v54 = v50;
        if (((v52 & v53) != 0) != ((*(void *)(v49 + 8) & v53) != 0)) {
          break;
        }
        char v50 = 1;
        uint64_t v51 = 1;
        if (v54) {
          goto LABEL_30;
        }
      }
      if ((v52 & v53) == 0) {
        uint64_t v48 = v49;
      }
LABEL_30:
      __int16 v57 = *(NSObject **)v48;
      if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "Device_BluetoothUnified_Aspen.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 907;
        uint64_t v45 = "%25s:%-5d Unknown exception thrown during notification.";
        uint64_t v46 = v57;
        uint32_t v47 = 18;
        goto LABEL_33;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x39824CLL);
}

uint64_t sub_398854(uint64_t a1, unsigned int a2, uint64_t a3, os_unfair_lock_s *a4)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)a4;
    uint64_t v6 = 0;
    uint64_t v7 = a2;
    lock = a4 + 2;
    do
    {
      uint64_t v8 = sub_32A48(17);
      uint64_t v9 = sub_32A48(28);
      char v10 = 0;
      uint64_t v11 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1;
        if (v14) {
          goto LABEL_9;
        }
      }
      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_9:
      uint64_t v15 = *(NSObject **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(v52, *(_DWORD *)(a3 + 12 * v6));
        uint64_t v16 = a3;
        uint64_t v17 = v4;
        uint64_t v18 = v7;
        int v19 = v53;
        int v20 = (void **)v52[0];
        sub_4F64((uint64_t)__p, lock);
        unsigned int v21 = v52;
        if (v19 < 0) {
          unsigned int v21 = v20;
        }
        if (v48 >= 0) {
          int v22 = __p;
        }
        else {
          int v22 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 850;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v21;
        *(_WORD *)&buf[28] = 2080;
        __int16 v57 = v22;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received notification (%s) from bluetooth audio device with UID \"%s\"", buf, 0x26u);
        if (v48 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v7 = v18;
        if (v53 < 0) {
          operator delete(v52[0]);
        }
        uint64_t v4 = v17;
        a3 = v16;
      }
      uint64_t v23 = (unsigned int *)(a3 + 12 * v6);
      if (*v23 == 2004050279)
      {
        sub_392A04(&v49, v4, 0x7461636Cu);
        if (v49)
        {
          (*(void (**)(uint64_t))(*(void *)v49 + 80))(v49);
          int v24 = operator new(4uLL);
          _DWORD *v24 = 1885892674;
          *(void *)AudioObjectPropertyAddress buf = v24;
          *(void *)&buf[8] = v24 + 1;
          *(void *)&buf[16] = v24 + 1;
          strcpy(&buf[24], "cwdv");
          BYTE2(v57) = 0;
          int v58 = 3;
          v60[0] = 0;
          v60[1] = 0;
          __int16 v59 = v60;
          int v61 = 44739242;
          CFTypeRef cf = 0;
          sub_43637C((uint64_t *)__p, v4, (uint64_t)buf);
          for (i = (void **)__p[1]; i != __p; i = (void **)i[1])
          {
            sub_43F38((uint64_t *)&theString, (uint64_t *)i + 2, "", 826);
            CFStringRef v26 = theString;
            int v51 = 2004050279;
            sub_81364(v52, (uint64_t)&v51, 1);
            (*((void (**)(CFStringRef, void **))v26->isa + 56))(v26, v52);
            sub_45F50(v52);
            if (v55) {
              sub_4636C(v55);
            }
          }
          sub_8108((uint64_t *)__p);
          if (cf) {
            CFRelease(cf);
          }
          sub_463E0(v60[0]);
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
        }
        else
        {
          uint64_t v37 = sub_32A48(17);
          uint64_t v38 = sub_32A48(28);
          char v39 = 0;
          uint64_t v40 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v41 = *(void *)(v37 + 8);
          while (1)
          {
            uint64_t v42 = *(int *)&buf[4 * v40];
            char v43 = v39;
            if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
              break;
            }
            char v39 = 1;
            uint64_t v40 = 1;
            if (v43) {
              goto LABEL_58;
            }
          }
          if ((v41 & v42) == 0) {
            uint64_t v37 = v38;
          }
LABEL_58:
          int v44 = *(NSObject **)v37;
          if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 818;
            _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching Bluetooth profile", buf, 0x12u);
          }
        }
        if (v50) {
          sub_4636C(v50);
        }
      }
      else
      {
        if (*v23 == 1635148144) {
          sub_396D38();
        }
        uint64_t v27 = sub_32A48(17);
        uint64_t v28 = sub_32A48(28);
        char v29 = 0;
        uint64_t v30 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v31 = *(void *)(v27 + 8);
        while (1)
        {
          uint64_t v32 = *(int *)&buf[4 * v30];
          char v33 = v29;
          if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
            break;
          }
          char v29 = 1;
          uint64_t v30 = 1;
          if (v33) {
            goto LABEL_40;
          }
        }
        if ((v31 & v32) == 0) {
          uint64_t v27 = v28;
        }
LABEL_40:
        uint64_t v34 = *(NSObject **)v27;
        if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(v52, *v23);
          if (v53 >= 0) {
            uint64_t v35 = v52;
          }
          else {
            uint64_t v35 = (void **)v52[0];
          }
          (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v4 + 128))(&theString, v4);
          sub_21B7C(__p, theString);
          if (v48 >= 0) {
            uint64_t v36 = __p;
          }
          else {
            uint64_t v36 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 865;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v35;
          *(_WORD *)&buf[28] = 2080;
          __int16 v57 = v36;
          _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled notification (%s) from bluetooth audio device with UID \"%s\"", buf, 0x26u);
          if (v48 < 0) {
            operator delete(__p[0]);
          }
          sub_72924((uint64_t)&theString);
          if (v53 < 0) {
            operator delete(v52[0]);
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  return 0;
}

void sub_398E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_398EEC(uint64_t a1)
{
  uint64_t v2 = sub_463468();
  sub_463AEC(v2, a1 + 776);
  AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  AudioObjectRemovePropertyListener(v3, (const AudioObjectPropertyAddress *)&qword_65D7D0, (AudioObjectPropertyListenerProc)sub_397FDC, (void *)a1);
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  AudioObjectRemovePropertyListener(v4, (const AudioObjectPropertyAddress *)&qword_65D7A0, (AudioObjectPropertyListenerProc)sub_398854, (void *)a1);
  if (dispatch_get_specific("VirtualAudioQueueKey") != "VirtualAudioQueueKey")
  {
    atomic_store(0, (unsigned int *)(a1 + 536));
    uint64_t v10 = a1;
    if (dispatch_get_specific("ProfileChangeQueueKey") == "ProfileChangeQueueKey")
    {
      std::mutex::lock((std::mutex *)(a1 + 568));
      uint64_t v6 = *(void **)(a1 + 544);
      if (v6 != (void *)(a1 + 552))
      {
        do
        {
          (*(void (**)(void))(*(void *)v6[5] + 24))(v6[5]);
          uint64_t v7 = (void *)v6[1];
          if (v7)
          {
            do
            {
              uint64_t v8 = v7;
              uint64_t v7 = (void *)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v8 = (void *)v6[2];
              BOOL v9 = *v8 == (void)v6;
              uint64_t v6 = v8;
            }
            while (!v9);
          }
          uint64_t v6 = v8;
        }
        while (v8 != (void *)(a1 + 552));
      }
      std::mutex::unlock((std::mutex *)(a1 + 568));
    }
    else
    {
      uint64_t v5 = *(NSObject **)(a1 + 848);
      uint64_t v11 = &v10;
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_399420;
      block[3] = &unk_636CA0;
      block[4] = &v11;
      dispatch_sync(v5, block);
    }
    sub_1DB3D0((unsigned int *)a1);
  }
  operator new();
}

void sub_39917C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      unsigned int v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v22 = v19;
      uint32_t v23 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    int v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v25 = v24;
      CFStringRef v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        unsigned int v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      char v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        unsigned int v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x399134);
}

void sub_3993D8()
{
  __cxa_end_catch();
  if (v0) {
    sub_3997BC(v0);
  }
  JUMPOUT(0x3991B0);
}

void sub_399420(uint64_t a1)
{
  uint64_t v1 = ***(void ***)(a1 + 32);
  uint64_t v2 = (std::mutex *)(v1 + 568);
  std::mutex::lock((std::mutex *)(v1 + 568));
  AudioObjectID v3 = *(void **)(v1 + 544);
  AudioObjectID v4 = (void *)(v1 + 552);
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(void))(*(void *)v3[5] + 24))(v3[5]);
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          AudioObjectID v3 = v6;
        }
        while (!v7);
      }
      AudioObjectID v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_39977C(_Unwind_Exception *a1)
{
}

void sub_399788(_Unwind_Exception *a1)
{
}

void sub_399794(_Unwind_Exception *a1)
{
}

void sub_3997A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_3997BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    dispatch_queue_set_specific(*(dispatch_queue_t *)a1, "VirtualAudioQueueKey", 0, 0);
  }

  operator delete();
}

BOOL sub_399820(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_65D7C0 && a2->mElement == dword_65D7C8)
  {
    uint64_t v9 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v11 = a3;
    uint64_t v12 = a4;
    sub_1A4260((void *)(a1 + 632), (unsigned int *)&qword_65D7D0, (uint64_t)&v9);
    return 1;
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
}

BOOL sub_3998EC(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_65D7C0 && a2->mElement == dword_65D7C8)
  {
    uint64_t v5 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    BOOL v7 = a3;
    uint64_t v8 = a4;
    sub_1A4AA0((void *)(a1 + 632), (unsigned int *)&qword_65D7D0, (uint64_t)&v5);
    return 1;
  }
  else
  {
    return sub_431F5C(a1, a2, a3, a4);
  }
}

void sub_39998C(unsigned int *a1, int *a2, uint64_t a3, const void *a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v22 = (os_log_t *)sub_32A48(13);
    uint32_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)a2;
      int v39 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v38);
      int v24 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 472;
      __int16 v43 = 2080;
      int v44 = (const char *)v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    CFStringRef v26 = (os_log_t *)sub_32A48(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)a2;
      int v39 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v38);
      uint64_t v28 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 473;
      __int16 v43 = 2080;
      int v44 = (const char *)v28;
      __int16 v45 = 1024;
      LODWORD(v46[0]) = a3;
      WORD2(v46[0]) = 2048;
      *(void *)((char *)v46 + 6) = a4;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }
    char v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v29 = &off_6414D8;
    v29[2] = 561211770;
  }
  if (!a6)
  {
    os_log_t v30 = (os_log_t *)sub_32A48(13);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)a2;
      int v39 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v38);
      uint64_t v32 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 474;
      __int16 v43 = 2080;
      int v44 = "inData";
      __int16 v45 = 2080;
      v46[0] = v32;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }
    char v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v33 = &off_6414D8;
    v33[2] = 561211770;
  }
  if (((*(uint64_t (**)(unsigned int *, int *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    uint64_t v34 = (os_log_t *)sub_32A48(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)a2;
      int v39 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v38);
      uint64_t v36 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 475;
      __int16 v43 = 2080;
      int v44 = (const char *)v36;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v37 = &off_6414D8;
    v37[2] = 1852797029;
  }
  unsigned int v12 = atomic_load(a1 + 134);
  sub_392A04(buf, (uint64_t)a1, v12);
  uint64_t v13 = *(void *)buf;
  if (*(void *)buf) {
    (*(void (**)(void, int *, uint64_t, const void *, uint64_t, unsigned int *))(**(void **)buf + 64))(*(void *)buf, a2, a3, a4, a5, a6);
  }
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v13)
  {
    uint64_t v14 = sub_32A48(17);
    uint64_t v15 = sub_32A48(28);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20) {
        goto LABEL_16;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_16:
    unsigned int v21 = *(NSObject **)v14;
    if (v21)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 482;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", buf, 0x12u);
      }
    }
    sub_1DB4C8((uint64_t)a1, a2, a3, a4, a5, a6);
  }
}

void sub_39A018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_4636C(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_39A038(unsigned int *a1, uint64_t a2, uint64_t a3, const void *a4, UInt32 *a5, int *a6)
{
  if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint32_t v23 = (os_log_t *)sub_32A48(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *(void *)a2;
      int v36 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v35);
      uint64_t v25 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 451;
      __int16 v40 = 2080;
      char v41 = (const char *)v25;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    os_log_t v27 = (os_log_t *)sub_32A48(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *(void *)a2;
      int v36 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v35);
      char v29 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 452;
      __int16 v40 = 2080;
      char v41 = (const char *)v29;
      __int16 v42 = 1024;
      LODWORD(v43[0]) = a3;
      WORD2(v43[0]) = 2048;
      *(void *)((char *)v43 + 6) = a4;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    os_log_t v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v30 = &off_6414D8;
    v30[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v31 = (os_log_t *)sub_32A48(13);
    uint64_t v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *(void *)a2;
      int v36 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v35);
      char v33 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 453;
      __int16 v40 = 2080;
      char v41 = "outData";
      __int16 v42 = 2080;
      v43[0] = v33;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v34 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v34 = &off_6414D8;
    v34[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1651794290)
  {
    int v12 = a1[211];
    sub_9EC7C(v12, a5, a6);
  }
  else
  {
    unsigned int v13 = atomic_load(a1 + 134);
    sub_392A04(buf, (uint64_t)a1, v13);
    uint64_t v14 = *(void *)buf;
    if (*(void *)buf) {
      (*(void (**)(void, uint64_t, uint64_t, const void *, UInt32 *, int *))(**(void **)buf + 56))(*(void *)buf, a2, a3, a4, a5, a6);
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (!v14)
    {
      uint64_t v15 = sub_32A48(17);
      uint64_t v16 = sub_32A48(28);
      char v17 = 0;
      uint64_t v18 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v19 = *(void *)(v15 + 8);
      while (1)
      {
        uint64_t v20 = *(int *)&buf[4 * v18];
        char v21 = v17;
        if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
          break;
        }
        char v17 = 1;
        uint64_t v18 = 1;
        if (v21) {
          goto LABEL_19;
        }
      }
      if ((v19 & v20) == 0) {
        uint64_t v15 = v16;
      }
LABEL_19:
      int v22 = *(NSObject **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 465;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", buf, 0x12u);
      }
      sub_1DCE88((uint64_t)a1, a2, a3, a4, a5, a6);
    }
  }
}

void sub_39A5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_4636C(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_39A610(unsigned int *a1, int *a2, uint64_t a3, const void *a4)
{
  if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    char v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      v23[0] = 136315394;
      *(void *)&v23[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(v23[3]) = 1024;
      *(_DWORD *)((char *)&v23[3] + 2) = 433;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)v23, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a2 == 1651794290) {
    return 4;
  }
  unsigned int v9 = atomic_load(a1 + 134);
  sub_392A04(v23, (uint64_t)a1, v9);
  uint64_t v10 = *(void *)v23;
  if (*(void *)v23) {
    uint64_t v4 = (*(uint64_t (**)(void, int *, uint64_t, const void *))(**(void **)v23 + 48))(*(void *)v23, a2, a3, a4);
  }
  if (*(void *)&v23[2]) {
    sub_4636C(*(std::__shared_weak_count **)&v23[2]);
  }
  if (!v10)
  {
    uint64_t v11 = sub_32A48(17);
    uint64_t v12 = sub_32A48(28);
    char v13 = 0;
    uint64_t v14 = 0;
    *(void *)uint32_t v23 = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = (int)v23[v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_15;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_15:
    uint64_t v18 = *(NSObject **)v11;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v23[0] = 136315394;
      *(void *)&v23[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(v23[3]) = 1024;
      *(_DWORD *)((char *)&v23[3] + 2) = 444;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", (uint8_t *)v23, 0x12u);
    }
    return sub_1DD6F8((uint64_t)a1, a2, a3, a4);
  }
  return v4;
}

void sub_39A8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_39A8F0(unsigned int *a1, int *a2)
{
  if ((*(unsigned int (**)(unsigned int *))(*(void *)a1 + 16))(a1)) {
    BOOL v5 = *a2 == 1651794290;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    char v2 = 0;
  }
  else
  {
    unsigned int v6 = atomic_load(a1 + 134);
    sub_392A04(v17, (uint64_t)a1, v6);
    uint64_t v7 = *(void *)v17;
    if (*(void *)v17) {
      char v2 = (*(uint64_t (**)(void, int *))(**(void **)v17 + 40))(*(void *)v17, a2);
    }
    if (*(void *)&v17[2]) {
      sub_4636C(*(std::__shared_weak_count **)&v17[2]);
    }
    if (!v7)
    {
      uint64_t v8 = sub_32A48(17);
      uint64_t v9 = sub_32A48(28);
      char v10 = 0;
      uint64_t v11 = 0;
      *(void *)char v17 = 0x100000002;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = (int)v17[v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1;
        if (v14) {
          goto LABEL_18;
        }
      }
      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_18:
      uint64_t v15 = *(NSObject **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v17[0] = 136315394;
        *(void *)&v17[1] = "Device_BluetoothUnified_Aspen.cpp";
        LOWORD(v17[3]) = 1024;
        *(_DWORD *)((char *)&v17[3] + 2) = 426;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile", (uint8_t *)v17, 0x12u);
      }
      char v2 = sub_1DDA4C((uint64_t)a1, a2);
    }
  }
  return v2 & 1;
}

void sub_39AAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_39AAF8(unsigned int *a1, __int32 *a2)
{
  if (*a2 == 1651794290)
  {
    LOBYTE(v2) = 1;
    return v2 & 1;
  }
  unsigned int v5 = atomic_load(a1 + 134);
  sub_392A04(&v31, (uint64_t)a1, v5);
  if (v31)
  {
    char v6 = (*(uint64_t (**)(uint64_t, __int32 *))(*(void *)v31 + 32))(v31, a2);
  }
  else
  {
    char v2 = dword_573A04;
    uint64_t v7 = wmemchr(dword_573A04, *a2, 0x14uLL);
    uint64_t v8 = &xmmword_573A54;
    if (v7) {
      uint64_t v8 = (long long *)v7;
    }
    if ((char *)v8 - (char *)dword_573A04 == 80)
    {
      int v9 = 1;
      goto LABEL_24;
    }
    uint64_t v10 = sub_32A48(17);
    uint64_t v11 = sub_32A48(28);
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_15;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_15:
    char v17 = *(NSObject **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, *a2);
      uint64_t v18 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v34 = 1024;
      int v35 = 397;
      __int16 v36 = 2080;
      uint64_t v37 = v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile: calling Device::HasProperty(%s)", buf, 0x1Cu);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
    char v6 = sub_1DDAE8(a1, a2);
  }
  LOBYTE(v2) = v6;
  int v9 = 0;
LABEL_24:
  if (v32) {
    sub_4636C(v32);
  }
  if (v9)
  {
    uint64_t v19 = sub_32A48(17);
    uint64_t v20 = sub_32A48(28);
    char v21 = 0;
    uint64_t v22 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v23 = *(void *)(v19 + 8);
    while (1)
    {
      uint64_t v24 = *(int *)&buf[4 * v22];
      char v25 = v21;
      if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
        break;
      }
      char v21 = 1;
      uint64_t v22 = 1;
      if (v25) {
        goto LABEL_33;
      }
    }
    if ((v23 & v24) == 0) {
      uint64_t v19 = v20;
    }
LABEL_33:
    CFStringRef v26 = *(NSObject **)v19;
    if (v26)
    {
      LOBYTE(v2) = 0;
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        return v2 & 1;
      }
      sub_2417C(__p, *a2);
      if (v30 >= 0) {
        os_log_t v27 = __p;
      }
      else {
        os_log_t v27 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v34 = 1024;
      int v35 = 404;
      __int16 v36 = 2080;
      uint64_t v37 = v27;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No active Bluetooth profile: HasProperty(%s) = false", buf, 0x1Cu);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v2) = 0;
  }
  return v2 & 1;
}

void sub_39AE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_39AE64(uint64_t a1)
{
  sub_39AE9C(a1);

  operator delete();
}

uint64_t sub_39AE9C(uint64_t a1)
{
  *(void *)a1 = off_636AC0;
  char v2 = *(NSObject **)(a1 + 848);
  if (v2) {
    dispatch_release(v2);
  }
  sub_463E0(*(void **)(a1 + 808));
  sub_463E0(*(void **)(a1 + 784));
  sub_1A97C8(a1 + 632);
  std::mutex::~mutex((std::mutex *)(a1 + 568));
  sub_26F0D4(*(void **)(a1 + 552));

  return sub_43456C(a1);
}

void sub_39AF24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4)
  {
    if (a3 == 3)
    {
      uint64_t v4 = *(void *)(a4 + 88);
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 136315394;
      *(void *)&v11[1] = "Device_BluetoothUnified_Aspen.cpp";
      __int16 v12 = 1024;
      int v13 = 953;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int v5 = (os_log_t *)sub_32A48(13);
  char v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
  {
    v11[0] = 136315394;
    *(void *)&v11[1] = "Device_BluetoothUnified_Aspen.cpp";
    __int16 v12 = 1024;
    int v13 = 952;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)v11, 0x12u);
  }
  uint64_t v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v7, "Precondition failure.");
}

void sub_39B134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_39B164(uint64_t *a1)
{
  char v25 = a1;
  char v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    AudioObjectID v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *a1;
      if (!v5) {
        goto LABEL_41;
      }
      char v6 = (os_log_t *)sub_32A48(17);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v8 = atomic_load((unsigned int *)(v5 + 536));
        sub_2417C(__p, v8);
        int v9 = v27 >= 0 ? __p : (void **)__p[0];
        unsigned int v10 = atomic_load((unsigned int *)(v5 + 840));
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        char v29 = "Device_BluetoothUnified_Aspen.cpp";
        __int16 v30 = 1024;
        int v31 = 966;
        __int16 v32 = 2080;
        char v33 = v9;
        __int16 v34 = 1024;
        unsigned int v35 = v10;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Changing %s route, active count: %u", buf, 0x22u);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
      if (atomic_load((unsigned int *)(v5 + 840))) {
        goto LABEL_41;
      }
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v5 + 848));
      unsigned int v12 = 1952539500;
      uint64_t v13 = v5 + 552;
      uint64_t v14 = *(void *)(v5 + 552);
      if (!v14) {
        goto LABEL_23;
      }
      uint64_t v15 = v5 + 552;
      uint64_t v16 = *(void *)(v5 + 552);
      do
      {
        unsigned int v17 = *(_DWORD *)(v16 + 32);
        BOOL v18 = v17 >= 0x7461636C;
        if (v17 >= 0x7461636C) {
          uint64_t v19 = (uint64_t *)v16;
        }
        else {
          uint64_t v19 = (uint64_t *)(v16 + 8);
        }
        if (v18) {
          uint64_t v15 = v16;
        }
        uint64_t v16 = *v19;
      }
      while (*v19);
      if (v15 == v13 || *(_DWORD *)(v15 + 32) > 0x7461636Cu) {
LABEL_23:
      }
        uint64_t v15 = v5 + 552;
      if (!v14) {
        goto LABEL_35;
      }
      uint64_t v20 = v5 + 552;
      do
      {
        unsigned int v21 = *(_DWORD *)(v14 + 32);
        BOOL v22 = v21 >= 0x7473636F;
        if (v21 >= 0x7473636F) {
          uint64_t v23 = (uint64_t *)v14;
        }
        else {
          uint64_t v23 = (uint64_t *)(v14 + 8);
        }
        if (v22) {
          uint64_t v20 = v14;
        }
        uint64_t v14 = *v23;
      }
      while (*v23);
      if (v20 == v13 || *(_DWORD *)(v20 + 32) > 0x7473636Fu) {
LABEL_35:
      }
        uint64_t v20 = v5 + 552;
      if (v15 == v13)
      {
        if (v20 == v13)
        {
LABEL_41:
          sub_4636C(v4);
          return sub_8FEC((uint64_t *)&v25);
        }
        unsigned int v12 = 1953719151;
        sub_39383C(v5, 0x7473636Fu, 0x72646973u);
      }
      else
      {
        sub_39383C(v5, 0x7461636Cu, 0x72646973u);
      }
      atomic_store(v12, (unsigned int *)(v5 + 536));
      goto LABEL_41;
    }
  }
  return sub_8FEC((uint64_t *)&v25);
}

void sub_39B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_4636C(v9);
  sub_8FEC(&a9);
  _Unwind_Resume(a1);
}

void *sub_39B3CC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    BOOL result = sub_66958(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_39B42C(_Unwind_Exception *exception_object)
{
  AudioObjectID v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_39B448(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    char v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_39B4A0(uint64_t a1)
{
  uint64_t v6 = a1;
  sub_54618();
  sub_54550(&v9, *(void *)a1);
  if (v9)
  {
    sub_5036C(v9, -1431655765 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2), *(void *)(a1 + 8));
  }
  else
  {
    AudioObjectID v3 = (os_log_t *)sub_32A48(14);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      sub_16C9C4((uint64_t)__p, (unsigned int *)(a1 + 32));
      uint64_t v5 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unsigned int v12 = "ListenerRelayManager.cpp";
      __int16 v13 = 1024;
      int v14 = 31;
      __int16 v15 = 2080;
      uint64_t v16 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Asynchronous listener callback fired for expired relay for property '%s'. Ignoring.", buf, 0x1Cu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v10) {
    sub_4636C(v10);
  }
  return sub_39B448(&v6);
}

void sub_39B5F4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a14) {
    sub_4636C(a14);
  }
  if (a2 == 3)
  {
    BOOL v22 = __cxa_begin_catch(a1);
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      CFStringRef v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v27 = v24;
      uint32_t v28 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else
  {
    char v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v30 = v29;
      int v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        CFStringRef v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      __int16 v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        CFStringRef v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x39B510);
}

uint64_t sub_39B878()
{
  qword_65D7E0 = (uint64_t)&qword_65D7E0;
  qword_65D7E8 = (uint64_t)&qword_65D7E0;
  qword_65D7F0 = 0;
  uint64_t result = sub_AEF58((uint64_t)&qword_65D7F8, (uint64_t)"ObjectListenerRelayMutex");
  qword_65D850 = 1;
  return result;
}

void sub_39B8C0(_Unwind_Exception *a1)
{
}

unsigned char *sub_39B8D8(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  __int16 v15 = &qword_65D7F8;
  char v16 = (*(uint64_t (**)(uint64_t *))(qword_65D7F8 + 16))(&qword_65D7F8);
  for (i = (uint64_t *)qword_65D7E8; ; i = (uint64_t *)i[1])
  {
    if (i == &qword_65D7E0)
    {
      *a1 = 0;
      a1[1] = 0;
      return sub_3BCAC(&v15);
    }
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(i[2] + 60));
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = i[2];
      if (*(void *)(v12 + 16) == a2
        && *(_DWORD *)(v12 + 28) == a3[1]
        && *(_DWORD *)(v12 + 24) == *a3
        && *(_DWORD *)(v12 + 32) == a3[2]
        && *(void *)(v12 + 40) == a4
        && *(void *)(v12 + 48) == a5)
      {
        break;
      }
    }
  }
  uint64_t v14 = i[3];
  *a1 = v12;
  a1[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_3BCAC(&v15);
}

uint64_t sub_39BA00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_39BA20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_39BA5C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  BOOL v18 = &qword_65D7F8;
  char v19 = (*(uint64_t (**)(void))(qword_65D7F8 + 16))();
  sub_39B8D8((uint64_t *)&v16, a1, a2, a3, a4);
  uint64_t v10 = (uint64_t)v16;
  if (v16)
  {
    *a5 = *v16;
    int v11 = *(_DWORD *)(v10 + 8);
    int v12 = v11 - 1;
    *(_DWORD *)(v10 + 8) = v11 - 1;
    if (v11 == 1)
    {
      sub_39BB8C(v10);
      unsigned int v13 = 0;
    }
    else
    {
      unsigned int v13 = v12 & 0xFFFFFF00;
    }
    if (v17) {
      sub_4636C(v17);
    }
    int v12 = v12;
    uint64_t v14 = 0x100000000;
  }
  else
  {
    if (v17) {
      sub_4636C(v17);
    }
    int v12 = 0;
    uint64_t v14 = 0;
    unsigned int v13 = 0;
  }
  sub_3BCAC(&v18);
  return v14 | v13 & 0xFFFFFF00 | v12;
}

void sub_39BB64(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_4636C(a3);
  }
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_39BB8C(uint64_t a1)
{
  char v2 = pthread_self();
  if (!pthread_equal(v2, (pthread_t)atomic_load_explicit(qword_65D808, memory_order_acquire)))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ListenerRelayManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 178;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"relayListMutex is not held by current thread.\"", buf, 0x12u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 56))
  {
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0;
    AudioObjectID v3 = (uint64_t *)qword_65D7E8;
    if ((uint64_t *)qword_65D7E8 != &qword_65D7E0)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3[1];
        if (v3[2] == a1) {
          break;
        }
LABEL_10:
        AudioObjectID v3 = v4;
        if (v4 == &qword_65D7E0) {
          goto LABEL_18;
        }
      }
      while (v4 != &qword_65D7E0)
      {
        if (v4[2] != a1)
        {
          sub_1277D8((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_65D7E0, v3, v4);
          uint64_t v4 = (uint64_t *)v4[1];
          goto LABEL_10;
        }
        uint64_t v4 = (uint64_t *)v4[1];
      }
      sub_1277D8((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_65D7E0, v3, &qword_65D7E0);
    }
LABEL_18:
    sub_B8E4((uint64_t *)buf);
  }
  else
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 60));
    sub_AF08C(v12, (uint64_t)&qword_65D7F8);
    sub_3B7EC();
    if ((*(unsigned int (**)(void))(qword_64CC40 + 48))()) {
      operator new();
    }
    v10[1] = a1;
    uint64_t v11 = 0;
    v10[0] = &qword_65D7E0;
    uint64_t v7 = sub_13910();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      unsigned int v13 = &qword_65D7F8;
      char v14 = (*(uint64_t (**)(uint64_t *))(qword_65D7F8 + 16))(&qword_65D7F8);
      *(void *)AudioObjectPropertyAddress buf = buf;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0;
      char v8 = (uint64_t *)qword_65D7E8;
      if ((uint64_t *)qword_65D7E8 != &qword_65D7E0)
      {
        while (1)
        {
          uint64_t v9 = (uint64_t *)v8[1];
          if (v8[2] == a1) {
            break;
          }
LABEL_28:
          char v8 = v9;
          if (v9 == &qword_65D7E0) {
            goto LABEL_31;
          }
        }
        while (v9 != &qword_65D7E0)
        {
          if (v9[2] != a1)
          {
            sub_1277D8((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_65D7E0, v8, v9);
            uint64_t v9 = (uint64_t *)v9[1];
            goto LABEL_28;
          }
          uint64_t v9 = (uint64_t *)v9[1];
        }
        sub_1277D8((uint64_t)buf, (uint64_t *)buf, (uint64_t)&qword_65D7E0, v8, &qword_65D7E0);
      }
LABEL_31:
      sub_B8E4((uint64_t *)buf);
      sub_3BCAC(&v13);
    }
    else
    {
      unsigned int v13 = v10;
      *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_39C1BC;
      char v16 = &unk_636F38;
      unsigned int v17 = &v13;
      dispatch_sync(v7, buf);
    }
    uint64_t v11 = 0;
    sub_AF1B0(v12);
  }
}

void sub_39BF20(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf, long long a18, __int16 a19, __int16 a20,int a21,int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v23 = __cxa_begin_catch(a1);
    os_log_t v24 = (os_log_t *)sub_32A48(13);
    os_log_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v26 = v23[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a18) = 1024;
      DWORD1(a18) = v26;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 35;
      char v27 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint32_t v28 = v25;
      uint32_t v29 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, v29);
    }
  }
  else
  {
    __int16 v30 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v31 = v30;
      os_log_t v32 = (os_log_t *)sub_32A48(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v34;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 35;
        char v27 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint32_t v28 = v33;
        uint32_t v29 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v35 = (os_log_t *)sub_32A48(13);
      os_log_t v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 35;
        char v27 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint32_t v28 = v36;
        uint32_t v29 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x39BEC0);
}

unsigned char *sub_39C1BC(uint64_t a1)
{
  uint64_t v1 = **(void ***)(a1 + 32);
  char v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  uint64_t v8 = *v1 + 24;
  char v9 = (*(uint64_t (**)(uint64_t))(v3 + 16))(v8);
  uint64_t v4 = v1[1];
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  void v10[2] = 0;
  uint64_t v5 = (void *)v2[1];
  if (v5 != v2)
  {
    while (1)
    {
      uint64_t v6 = (void *)v5[1];
      if (v5[2] == v4) {
        break;
      }
LABEL_8:
      uint64_t v5 = v6;
      if (v6 == v2) {
        goto LABEL_11;
      }
    }
    while (v6 != v2)
    {
      if (v6[2] != v4)
      {
        sub_1277D8((uint64_t)v10, v10, (uint64_t)v2, v5, v6);
        uint64_t v6 = (void *)v6[1];
        goto LABEL_8;
      }
      uint64_t v6 = (void *)v6[1];
    }
    sub_1277D8((uint64_t)v10, v10, (uint64_t)v2, v5, v2);
  }
LABEL_11:
  sub_B8E4(v10);
  return sub_3BCAC(&v8);
}

void sub_39C2E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    unsigned int v17 = __cxa_begin_catch(a1);
    BOOL v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 47;
      unsigned int v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      BOOL v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    os_log_t v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      int v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 47;
        unsigned int v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        BOOL v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint32_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 47;
        unsigned int v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        BOOL v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x39C2B0);
}

void sub_39C538(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 81));
    if (v2)
    {
      sub_1329C(&v9, *(void *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
      uint64_t v4 = v9;
      uint64_t v3 = v10;
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v3);
      }
      dispatch_time_t v5 = dispatch_time(0, 200000000);
      uint64_t v6 = *(NSObject **)(a1 + 72);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 1174405120;
      v7[2] = sub_39C630;
      void v7[3] = &unk_6370F0;
      v7[4] = v4;
      uint64_t v8 = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_after(v5, v6, v7);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_39C630(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 81));
        if (v6)
        {
          unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v5 + 82));
          if (v7)
          {
            uint64_t state64 = 0;
            notify_get_state(*(_DWORD *)(v5 + 40), &state64);
            *(unsigned char *)(v5 + 44) = state64 == 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 232))(v5, 2884);
          }
        }
        (*(void (**)(uint64_t, void))(*(void *)v5 + 280))(v5, 0);
      }
      sub_4636C(v4);
    }
  }
}

void sub_39C714(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_39C72C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_39C73C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_39C758(uint64_t a1, int a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 81));
  if (v2)
  {
    sub_1329C(&v13, *(void *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
    uint64_t v6 = v13;
    uint64_t v5 = v14;
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v5);
    }
    if (a2) {
      int64_t v7 = 200000000;
    }
    else {
      int64_t v7 = 1000000000;
    }
    dispatch_time_t v8 = dispatch_time(0, v7);
    uint64_t v9 = *(NSObject **)(a1 + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1174405120;
    void v10[2] = sub_39C864;
    v10[3] = &unk_6370C0;
    v10[4] = a1;
    v10[5] = v6;
    uint64_t v11 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    char v12 = a2;
    dispatch_after(v8, v9, v10);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_39C864(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(_DWORD **)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 40);
      if (v6)
      {
        unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 81));
        if (v7)
        {
          if (*(unsigned char *)(a1 + 56))
          {
            unsigned int v24 = 0;
            if (((*(uint64_t (**)(_DWORD *, uint64_t, unsigned int *))(*(void *)v3 + 200))(v3, 2757, &v24) & 1) == 0)
            {
              dispatch_time_t v8 = (os_log_t *)sub_32A48(25);
              uint64_t v9 = *v8;
              if (*v8)
              {
                if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  int v26 = "AncManagerV3.cpp";
                  __int16 v27 = 1024;
                  int v28 = 183;
                  _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading clp_primus_state", buf, 0x12u);
                }
              }
            }
            int v10 = v24;
            if (v24 == 10)
            {
              *(_DWORD *)(v6 + 52) = 0;
              *(unsigned char *)(v6 + 80) = 1;
              atomic_store(1u, (unsigned __int8 *)(v6 + 82));
            }
            else
            {
              int v11 = *(_DWORD *)(v6 + 52) + 1;
              *(_DWORD *)(v6 + 52) = v11;
              HIDWORD(v12) = -858993459 * v11;
              LODWORD(v12) = -858993459 * v11;
              if ((v12 >> 1) <= 0x19999999)
              {
                uint64_t v13 = (os_log_t *)sub_32A48(25);
                char v14 = *v13;
                if (*v13)
                {
                  if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v15) = v3[13];
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                    int v26 = "AncManagerV3.cpp";
                    __int16 v27 = 1024;
                    int v28 = 197;
                    __int16 v29 = 2048;
                    double v30 = (double)v15 * 200.0 / 1000.0;
                    __int16 v31 = 1024;
                    unsigned int v32 = v24;
                    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Warning: ANC DSP program still not booted after %g seconds, clp_primus_state = 0x%x", buf, 0x22u);
                  }
                }
              }
            }
            (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 264))(v6, v10 != 10);
          }
          else
          {
            unsigned int v24 = 0;
            if (((*(uint64_t (**)(_DWORD *, uint64_t, unsigned int *))(*(void *)v3 + 200))(v3, 2842, &v24) & 1) == 0)
            {
              char v16 = (os_log_t *)sub_32A48(25);
              unsigned int v17 = *v16;
              if (*v16)
              {
                if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  int v26 = "AncManagerV3.cpp";
                  __int16 v27 = 1024;
                  int v28 = 207;
                  _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading cust_block_exec_count", buf, 0x12u);
                }
              }
            }
            if (v24 <= *(_DWORD *)(v6 + 48))
            {
              ++*(_DWORD *)(v6 + 52);
              unsigned int v23 = 0;
              if (((*(uint64_t (**)(_DWORD *, uint64_t, unsigned int *))(*(void *)v3 + 200))(v3, 2757, &v23) & 1) == 0)
              {
                BOOL v18 = (os_log_t *)sub_32A48(25);
                os_log_t v19 = *v18;
                if (*v18)
                {
                  if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    int v26 = "AncManagerV3.cpp";
                    __int16 v27 = 1024;
                    int v28 = 220;
                    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure reading clp_primus_state", buf, 0x12u);
                  }
                }
              }
              int v20 = (os_log_t *)sub_32A48(25);
              unsigned int v21 = *v20;
              if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
              {
                LODWORD(v22) = v3[13];
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                int v26 = "AncManagerV3.cpp";
                __int16 v27 = 1024;
                int v28 = 221;
                __int16 v29 = 2048;
                double v30 = (double)v22 * 1000.0 / 1000.0;
                __int16 v31 = 1024;
                unsigned int v32 = v23;
                _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d ANC DSP detected to be not running for %g seconds, clp_primus_state = 0x%x", buf, 0x22u);
              }
              if (*(_DWORD *)(v6 + 52) >= 6u) {
                *(unsigned char *)(v6 + 80) = 0;
              }
            }
            else
            {
              *(_DWORD *)(v6 + 48) = v24;
              *(_DWORD *)(v6 + 52) = 0;
              *(unsigned char *)(v6 + 80) = 1;
            }
            (*(void (**)(uint64_t, void))(*(void *)v6 + 264))(v6, 0);
          }
        }
      }
      sub_4636C(v5);
    }
  }
}

void sub_39CD2C(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_39CD5C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_39CD6C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_39CD88(uint64_t a1, uint64_t *a2, __n128 *a3, __n128 *a4)
{
  uint64_t v7 = *a2;
  dispatch_time_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_161160(&v14, v7, v8);
  uint64_t v9 = (std::__shared_weak_count *)a3->n128_u64[1];
  *a3 = v14;
  if (v9) {
    sub_4636C(v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v10 = *a2;
  int v11 = (std::__shared_weak_count *)a2[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_26712C(&v14, v10, v11);
  unint64_t v12 = (std::__shared_weak_count *)a4->n128_u64[1];
  *a4 = v14;
  if (v12) {
    sub_4636C(v12);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  return 1;
}

void sub_39CE48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_39CE70(uint64_t a1, CFMutableStringRef theString, int a3)
{
  if (theString)
  {
    if (a3)
    {
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Voice mic trim:", *(float *)(a1 + 56));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Ref mic trim:", *(float *)(a1 + 60));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Error mic trim:", *(float *)(a1 + 64));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Receiver trim:", *(float *)(a1 + 68));
      CFStringAppendFormat(theString, 0, @"%-20s ", "ANC DSP SW version:");
    }
    else
    {
      CFStringAppendFormat(theString, 0, @"Voice mic trim, %-.6f\n", *(float *)(a1 + 56));
      CFStringAppendFormat(theString, 0, @"Ref mic trim, %-.6f\n", *(float *)(a1 + 60));
      CFStringAppendFormat(theString, 0, @"Error mic trim, %-.6f\n", *(float *)(a1 + 64));
      CFStringAppendFormat(theString, 0, @"Receiver trim, %-.6f\n", *(float *)(a1 + 68));
      CFStringAppend(theString, @"ANC DSP SW version, ");
    }
    unsigned int v6 = 0;
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, unsigned int *, void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16), 8388644, 1, 4, &v6, *(void *)(a1 + 24)))
    {
      CFStringAppend(theString, @"*** ERROR ***\n");
    }
    else
    {
      CFStringAppendFormat(theString, 0, @"0x%08x\n", v6);
    }
  }
  return theString != 0;
}

uint64_t sub_39D07C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t sub_39D0A0()
{
  return 1;
}

uint64_t sub_39D0A8()
{
  return 1;
}

uint64_t sub_39D0B0()
{
  return 1;
}

uint64_t sub_39D0BC()
{
  return 1024;
}

float sub_39D0C4()
{
  return 48000.0;
}

uint64_t sub_39D0D0()
{
  return 0;
}

void sub_39D0D8(uint64_t a1)
{
  sub_39D110(a1);

  operator delete();
}

void *sub_39D110(uint64_t a1)
{
  *(void *)a1 = off_636FA0;
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    notify_cancel(v2);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 72));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  return sub_78C00((void *)a1);
}

uint64_t sub_39D18C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_39D1BC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_39D1F8(uint64_t a1)
{
  sub_10DA8(a1);
  sub_738D0((char *)(a1 + 872));
  uint64_t v2 = sub_4CD70(a1 + 688, 1, 0);
  long long v3 = *(_OWORD *)(v2 + 16);
  long long v82 = *(_OWORD *)v2;
  long long v83 = v3;
  uint64_t v84 = *(void *)(v2 + 32);
  if (!*(void *)(a1 + 864))
  {
    sub_12654((uint64_t)buf, *(_DWORD **)(v2 + 160), 0);
    sub_10CBC((unsigned int **)(a1 + 896), (uint64_t)buf);
    sub_1216C((unsigned int **)buf);
    return;
  }
  uint64_t v4 = *(void *)(v2 + 192);
  if (!*(unsigned char *)(v4 + 448) && !*(void *)(v4 + 584))
  {
    if (*(void *)(v4 + 672)) {
      BOOL v6 = *(_DWORD *)(v2 + 8) == 1819304813;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      goto LABEL_5;
    }
LABEL_11:
    uint64_t v5 = 2;
    goto LABEL_12;
  }
  if (*(_DWORD *)(v2 + 8) != 1819304813) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v5 = 3;
LABEL_12:
  uint64_t v7 = *(_DWORD **)(v2 + 160);
  if (v7 && *v7)
  {
    sub_107AC((unsigned int **)buf, (uint64_t)&v82, v7[3]);
    sub_10CBC((unsigned int **)(a1 + 896), (uint64_t)buf);
    goto LABEL_26;
  }
  char v8 = BYTE12(v82);
  if ((BYTE12(v82) & 0x20) != 0)
  {
    unsigned int v9 = HIDWORD(v83);
    if (!HIDWORD(v83)) {
      goto LABEL_24;
    }
  }
  else
  {
    unsigned int v9 = 1;
  }
  uint64_t v10 = malloc_type_calloc(1uLL, (16 * v9) | 8, 0xC517D68uLL);
  if (v10)
  {
    *uint64_t v10 = v9;
    int v11 = v10 + 2;
    *(void *)AudioObjectPropertyAddress buf = v10;
    *(_DWORD *)&buf[8] = 2;
    int v12 = HIDWORD(v83);
    if ((v8 & 0x20) != 0) {
      int v12 = 1;
    }
    uint64_t v13 = v9;
    do
    {
      int *v11 = v12;
      v11 += 4;
      --v13;
    }
    while (v13);
    goto LABEL_25;
  }
LABEL_24:
  *(void *)AudioObjectPropertyAddress buf = 0;
  *(_DWORD *)&buf[8] = 0;
LABEL_25:
  sub_10CBC((unsigned int **)(a1 + 896), (uint64_t)buf);
LABEL_26:
  sub_1216C((unsigned int **)buf);
  uint64_t v14 = *(void *)(a1 + 856);
  if (v14 != a1 + 848)
  {
    uint64_t v68 = a1 + 144;
    while (1)
    {
      uint64_t v81 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      int v15 = sub_51340(*(void *)(v14 + 16), (uint64_t)&v79);
      if (v15)
      {
        int v62 = (os_log_t *)sub_32A48(13);
        __int16 v63 = *v62;
        if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 430;
          _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"VirtualStream::GetCurrentHALIOProcFormat() returned an error.\"", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = v15;
      }
      if (!DWORD2(v80))
      {
        __int16 v65 = (os_log_t *)sub_32A48(13);
        UInt32 v66 = *v65;
        if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 431;
          _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.\"", buf, 0x12u);
        }
        __int16 v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v67, "VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.");
      }
      uint64_t v16 = *(void *)(*(void *)(v14 + 16) + 136);
      if (DWORD2(v82) != 1819304813 || DWORD2(v79) != 1819304813) {
        goto LABEL_34;
      }
      int v19 = sub_28195C(a1, 1, *(void *)(*(void *)(v14 + 16) + 136), (uint64_t)&v79, (uint64_t)&v82);
      if (v19)
      {
        int v20 = (os_log_t *)sub_32A48(16);
        unsigned int v21 = *v20;
        if (*v20)
        {
          if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 444;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v19;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", buf, 0x18u);
          }
        }
      }
      if (!*(unsigned char *)(v16 + 448) && !*(void *)(v16 + 584) && !*(void *)(v16 + 672)) {
        break;
      }
      int v18 = 1;
LABEL_43:
      unint64_t v22 = (os_log_t *)sub_32A48(16);
      unsigned int v23 = *v22;
      if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_48;
      }
      sub_247DC(__p, v16);
      unsigned int v24 = __p;
      if (__p[23] < 0) {
        unsigned int v24 = *(unsigned char **)__p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 449;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Chain Description: %s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v18)
        {
LABEL_61:
          AudioObjectID v77 = 0;
          int v78 = 0;
          char v75 = 0;
          int v76 = 0;
          goto LABEL_62;
        }
      }
      else
      {
LABEL_48:
        if (!v18) {
          goto LABEL_61;
        }
      }
      if (*(void *)(v16 + 984) == *(void *)(v16 + 976)) {
        os_log_t v25 = (_DWORD **)(v16 + 944);
      }
      else {
        os_log_t v25 = *(_DWORD ***)(v16 + 976);
      }
      sub_12654((uint64_t)&v77, *v25, 0);
      uint64_t v26 = *(void *)(v16 + 984);
      if (v26 == *(void *)(v16 + 976)) {
        __int16 v27 = (_DWORD **)(v16 + 944);
      }
      else {
        __int16 v27 = (_DWORD **)(v26 - 16);
      }
      sub_12654((uint64_t)&v75, *v27, 0);
      if (!v77 || !*v77 || !v75 || !*v75)
      {
        __int16 v59 = (os_log_t *)sub_32A48(13);
        uint64_t v60 = *v59;
        if (*v59)
        {
          if (os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 455;
            _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"DSP chain ABL should not be invalid if DSP processing is enabled\"", buf, 0x12u);
          }
        }
        int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v61, "DSP chain ABL should not be invalid if DSP processing is enabled");
      }
LABEL_62:
      int v28 = (long long *)sub_D304(v16);
      __int16 v29 = (long long *)sub_F20C(v16);
      sub_7D10((uint64_t)buf, &v82, &v79, (uint64_t)&v77, (uint64_t)&v75, v28, v29, v16);
      uint64_t v30 = sub_32A48(16);
      if (*(unsigned char *)(v30 + 8))
      {
        __int16 v31 = *(NSObject **)v30;
        if (*(void *)v30)
        {
          if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
          {
            sub_259A4(&v87, (uint64_t)&v82);
            int v32 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
            std::string::size_type v33 = v87.__r_.__value_.__r.__words[0];
            sub_259A4(&v74, (uint64_t)&v79);
            uint64_t v34 = &v87;
            if (v32 < 0) {
              uint64_t v34 = (std::string *)v33;
            }
            os_log_t v35 = &v74;
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              os_log_t v35 = (std::string *)v74.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 459;
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 0;
            *(_WORD *)&__p[24] = 2080;
            *(void *)&__p[26] = v34;
            *(_WORD *)&__p[34] = 2080;
            *(void *)&__p[36] = v35;
            _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Cached output stream %u data. mVirtualizedStreamFormat: %s; mNonVirtualizedStreamFormat: %s",
              __p,
              0x2Cu);
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v87.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      sub_3524((uint64_t *)&v74, (void *)(*(void *)(v14 + 16) + 112));
      if (v18 && sub_548CC(&v74))
      {
        sub_9264((std::string *)__p, (uint64_t)&v74, 0);
        std::operator+<char>();
        HIDWORD(v109) = v5;
        sub_1229C(v68, v5, (uint64_t *)&v87, (uint64_t)&v79, 0);
        sub_50894(v68);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      v92[2] = v103;
      v92[3] = v104;
      v92[4] = v105;
      v92[5] = v106;
      *(_OWORD *)&__p[32] = v99;
      long long v91 = v100;
      v92[0] = v101;
      v92[1] = v102;
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      *(_OWORD *)&__p[16] = *(_OWORD *)&buf[16];
      int v93 = 0;
      int v94 = 0;
      sub_10CBC(&v93, (uint64_t)v107);
      uint64_t v95 = 0;
      int v96 = 0;
      sub_10CBC(&v95, (uint64_t)v108);
      long long v97 = v109;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v71 = 0;
      uint64_t v85 = &v71;
      LOBYTE(v86) = 0;
      uint64_t v71 = (unsigned int *)operator new(0xD0uLL);
      uint64_t v72 = v71;
      uint64_t v73 = v71 + 52;
      __int16 v69 = (std::string *)v71;
      uint64_t v89 = (void **)v71;
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      v87.__r_.__value_.__l.__size_ = (std::string::size_type)&v89;
      v87.__r_.__value_.__r.__words[2] = (std::string::size_type)&v69;
      char v88 = 0;
      sub_10988((uint64_t)v71, __p);
      __int16 v69 = (std::string *)((char *)v69 + 208);
      os_log_t v36 = (unsigned int *)v69;
      char v88 = 1;
      sub_4F4E8((uint64_t)&v87);
      uint64_t v72 = v36;
      sub_1216C(&v95);
      sub_1216C(&v93);
      if (v107[0] && *v107[0])
      {
        sub_125EC((uint64_t)&v85, *v107[0]);
        uint64_t v37 = (unsigned int *)v85;
        if (*(_DWORD *)v85)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 2;
          do
          {
            *(_OWORD *)&v37[v39] = *(_OWORD *)&v107[0][v39];
            ++v38;
            uint64_t v37 = (unsigned int *)v85;
            v39 += 4;
          }
          while (v38 < *(unsigned int *)v85);
        }
      }
      else
      {
        if ((BYTE12(v82) & 0x20) == 0)
        {
          __int16 v40 = (unsigned int *)malloc_type_calloc(1uLL, 0x18uLL, 0xC517D68uLL);
          if (v40)
          {
            unsigned int *v40 = 1;
            int v41 = 2;
          }
          else
          {
            int v41 = 0;
          }
          uint64_t v85 = (unsigned int **)v40;
          int v86 = v41;
          unsigned int v42 = 1;
LABEL_92:
          char v43 = BYTE12(v82);
          uint64_t v44 = v42;
          __int16 v45 = (int *)(v40 + 2);
          do
          {
            int v46 = HIDWORD(v83);
            if ((v43 & 0x20) != 0) {
              int v46 = 1;
            }
            *__int16 v45 = v46;
            v45 += 4;
            --v44;
          }
          while (v44);
          goto LABEL_96;
        }
        unsigned int v42 = HIDWORD(v83);
        sub_125EC((uint64_t)&v85, SHIDWORD(v83));
        if (v42)
        {
          __int16 v40 = (unsigned int *)v85;
          goto LABEL_92;
        }
      }
LABEL_96:
      memset(&v87, 0, sizeof(v87));
      __int16 v69 = 0;
      int v70 = 0;
      sub_10A28((uint64_t)__p, &v87, (_OWORD **)&v71, (uint64_t)&v69, (uint64_t)&v85);
      uint32_t v47 = (char *)operator new(0x60uLL);
      uint64_t v48 = *(void *)&__p[40];
      *((void *)v47 + 4) = *(void *)&__p[16];
      *(void *)uint32_t v47 = 0;
      *((void *)v47 + 1) = 0;
      *((_OWORD *)v47 + 1) = *(_OWORD *)__p;
      memset(__p, 0, 24);
      *(_OWORD *)(v47 + 40) = *(_OWORD *)&__p[24];
      *((void *)v47 + 7) = v48;
      memset(&__p[24], 0, 24);
      *((void *)v47 + 8) = 0;
      *((_DWORD *)v47 + 18) = 0;
      sub_10CBC((unsigned int **)v47 + 8, (uint64_t)&v91);
      *((void *)v47 + 10) = 0;
      *((_DWORD *)v47 + 22) = 0;
      sub_10CBC((unsigned int **)v47 + 10, (uint64_t)v92);
      uint64_t v5 = (v5 + 1);
      uint64_t v49 = *(void *)(a1 + 872);
      *(void *)uint32_t v47 = v49;
      *((void *)v47 + 1) = a1 + 872;
      *(void *)(v49 + 8) = v47;
      *(void *)(a1 + 872) = v47;
      ++*(void *)(a1 + 888);
      sub_1216C((unsigned int **)v92);
      sub_1216C((unsigned int **)&v91);
      uint64_t v89 = (void **)&__p[24];
      sub_121EC(&v89);
      uint64_t v89 = (void **)__p;
      sub_121EC(&v89);
      sub_1216C((unsigned int **)&v69);
      __int16 v69 = &v87;
      sub_121EC((void ***)&v69);
      sub_1216C((unsigned int **)&v85);
      *(void *)std::string __p = &v71;
      sub_121EC((void ***)__p);
      sub_8108((uint64_t *)&v74);
      sub_1216C(v108);
      sub_1216C(v107);
      sub_1216C(&v75);
      sub_1216C(&v77);
      uint64_t v14 = *(void *)(v14 + 8);
      if (v14 == a1 + 848) {
        return;
      }
    }
    uint64_t v50 = sub_32A48(16);
    uint64_t v51 = sub_32A48(24);
    char v52 = 0;
    uint64_t v53 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v54 = *(void *)(v50 + 8);
    while (1)
    {
      uint64_t v55 = *(int *)&buf[4 * v53];
      char v56 = v52;
      if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
        break;
      }
      char v52 = 1;
      uint64_t v53 = 1;
      if (v56) {
        goto LABEL_104;
      }
    }
    if ((v54 & v55) == 0) {
      uint64_t v50 = v51;
    }
LABEL_104:
    __int16 v57 = *(NSObject **)v50;
    if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      sub_247DC(__p, v16);
      int v58 = __p;
      if (__p[23] < 0) {
        int v58 = *(unsigned char **)__p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 446;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v58;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_INFO, "%25s:%-5d DSP is disabled:\n%s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
LABEL_34:
    int v18 = 0;
    goto LABEL_43;
  }
}

void sub_39DE64(_Unwind_Exception *a1)
{
}

void sub_39E01C(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (byte_64A228 || byte_64A229)
  {
    sub_54750(v15, (uint64_t)a1, a2);
    *a3 = *(void *)&v15[0];
    int v17 = 0;
    uint64_t v6 = sub_4CD70((uint64_t)(a1 + 86), 1, 0);
    long long v7 = *(_OWORD *)(v6 + 16);
    v15[0] = *(_OWORD *)v6;
    v15[1] = v7;
    uint64_t v16 = *(void *)(v6 + 32);
    v14[0] = a3;
    v14[1] = a2;
    v14[2] = (uint64_t *)v15;
    char v8 = (uint64_t *)a1[68];
    if ((uint64_t *)a1[69] == v8)
    {
      int v11 = (os_log_t *)sub_32A48(13);
      int v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v19 = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v20 = 1024;
        int v21 = 556;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Expected at least one output stream.  Found 0.\"", buf, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Expected at least one output stream.  Found 0.");
    }
    sub_39E26C(v14, *v8, &v17);
    unsigned int v9 = a1 + 106;
    for (i = (void *)a1[107]; i != v9; i = (void *)i[1])
      sub_39E26C(v14, i[2], &v17);
  }
}

void sub_39E1FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_39E26C(uint64_t **a1, uint64_t a2, int *a3)
{
  sub_3524(v27, (void *)(a2 + 112));
  if (v27[2])
  {
    uint64_t v6 = *a1[1];
    if ((v6 & 4) != 0)
    {
      uint64_t v7 = sub_32A48(16);
      uint64_t v8 = sub_32A48(40);
      char v9 = 0;
      uint64_t v10 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v11 = *(void *)(v7 + 8);
      while (1)
      {
        uint64_t v12 = (int)buf[v10];
        char v13 = v9;
        if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
          break;
        }
        char v9 = 1;
        uint64_t v10 = 1;
        if (v13)
        {
          if ((v11 & 1) == 0) {
            goto LABEL_14;
          }
          goto LABEL_11;
        }
      }
      if ((v11 & v12) == 0) {
        uint64_t v7 = v8;
      }
      if (*(void *)(v7 + 8))
      {
LABEL_11:
        uint64_t v14 = *(NSObject **)v7;
        if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_BroadcastFanout.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 536;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitor for secondary ouput streams", (uint8_t *)buf, 0x12u);
        }
      }
LABEL_14:
      uint64_t v15 = **a1;
      int v16 = *a3;
      *(void *)AudioObjectPropertyAddress buf = 1;
      AudioObjectPropertyAddress buf[2] = 1;
      buf[3] = v16;
      if (v15) {
        (*(void (**)(uint64_t, _DWORD *, uint64_t *, uint64_t *))(*(void *)v15 + 16))(v15, buf, a1[2], v27);
      }
      uint64_t v6 = *a1[1];
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v31 = 0;
      memset(buf, 0, sizeof(buf));
      sub_51340(a2, (uint64_t)buf);
      uint64_t v17 = sub_32A48(16);
      uint64_t v18 = sub_32A48(40);
      char v19 = 0;
      uint64_t v20 = 0;
      *(void *)int v28 = 0x100000002;
      uint64_t v21 = *(void *)(v17 + 8);
      while (1)
      {
        uint64_t v22 = *(int *)&v28[4 * v20];
        char v23 = v19;
        if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
          break;
        }
        char v19 = 1;
        uint64_t v20 = 1;
        if (v23)
        {
          if ((v21 & 1) == 0) {
            goto LABEL_29;
          }
          goto LABEL_26;
        }
      }
      if ((v21 & v22) == 0) {
        uint64_t v17 = v18;
      }
      if (*(void *)(v17 + 8))
      {
LABEL_26:
        unsigned int v24 = *(NSObject **)v17;
        if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v28 = 136315394;
          *(void *)&v28[4] = "AggregateDevice_BroadcastFanout.cpp";
          LOWORD(v29[0]) = 1024;
          *(_DWORD *)((char *)v29 + 2) = 544;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitor for primary ouput streams", v28, 0x12u);
        }
      }
LABEL_29:
      uint64_t v25 = **a1;
      int v26 = *a3;
      *(void *)int v28 = 1;
      *(_DWORD *)&v28[8] = 2;
      v29[0] = v26;
      if (v25) {
        (*(void (**)(uint64_t, unsigned char *, _DWORD *, uint64_t *))(*(void *)v25 + 16))(v25, v28, buf, v27);
      }
    }
  }
  ++*a3;
  sub_8108(v27);
}

void sub_39E588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_39E5B4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88))(a1, 0);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1);
  if (v2)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315650;
      char v13 = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v14 = 1024;
      int v15 = 338;
      __int16 v16 = 1024;
      int v17 = v2;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"The helper function InitializeStreamUsage() handles only zero-stream AggregateDevice_BroadcastFanout instances, and this one has %u input streams.\"", (uint8_t *)&v12, 0x18u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(exception, "The helper function InitializeStreamUsage() handles only zero-stream AggregateDevice_BroadcastFanout instances, and this one has %u input streams.");
  }
  if (!v3)
  {
    char v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      char v13 = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v14 = 1024;
      int v15 = 339;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"The helper function InitializeStreamUsage() requires at least one output stream.\"", (uint8_t *)&v12, 0x12u);
    }
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(v11, "The helper function InitializeStreamUsage() requires at least one output stream.");
  }
  (*(void (**)(uint64_t, void, void, void))(*(void *)a1 + 584))(a1, 0, 0, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 584);

  return v4(a1, 1, 0, 1);
}

void sub_39E850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_39E870(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = sub_32A48(16);
  uint64_t v8 = sub_32A48(22);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_7;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_7:
  __int16 v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    int v15 = a4 ? "En" : "Dis";
    __int16 v16 = a2 ? "output" : "input";
    sub_21C8C(__p, v16);
    int v17 = SHIBYTE(v72) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
    __int16 v74 = 1024;
    int v75 = 350;
    __int16 v76 = 2080;
    AudioObjectID v77 = v15;
    __int16 v78 = 2080;
    long long v79 = v17;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d %sabling %s stream on aggregate.", buf, 0x26u);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v18 = sub_32A48(16);
  if (*(unsigned char *)(v18 + 8))
  {
    char v19 = *(NSObject **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = a2 ? "output" : "input";
        sub_21C8C(__p, v20);
        uint64_t v21 = SHIBYTE(v72) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 351;
        __int16 v76 = 2080;
        AudioObjectID v77 = v21;
        __int16 v78 = 1024;
        LODWORD(v79) = a4;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d inDirection: %s; inIsUsed: %u.", buf, 0x22u);
        if (SHIBYTE(v72) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  AudioObjectID v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)__p, a2, v22, a1[52]);
  if (a2) {
    uint64_t v23 = 103;
  }
  else {
    uint64_t v23 = 100;
  }
  if (a2) {
    unsigned int v24 = a1 + 103;
  }
  else {
    unsigned int v24 = a1 + 100;
  }
  if (v24[1] - a1[v23] != *((_DWORD *)v72 + 2))
  {
    uint64_t v25 = (os_log_t *)sub_32A48(16);
    int v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        sub_16D6C0(&v70, (uint64_t)__p);
        __int16 v27 = (v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v70
            : (std::string *)v70.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 356;
        __int16 v76 = 2080;
        AudioObjectID v77 = v27;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d streamUsage: %s.", buf, 0x1Cu);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (v24[1] - a1[v23] != *((_DWORD *)v72 + 2))
  {
    int v28 = (os_log_t *)sub_32A48(16);
    __int16 v29 = *v28;
    if (*v28)
    {
      if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        sub_282968(&v70, (char *)a1[v23], (char *)v24[1]);
        uint64_t v30 = (v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v70
            : (std::string *)v70.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 357;
        __int16 v76 = 2080;
        AudioObjectID v77 = v30;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d usageMask: %s.", buf, 0x1Cu);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v31 = *((unsigned int *)v72 + 2);
  if (v24[1] - a1[v23] != v31)
  {
    uint64_t v54 = (os_log_t *)sub_32A48(13);
    uint64_t v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v74 = 1024;
      int v75 = 358;
      _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL aggregate device reported a different number of streams than our internal usage template.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL aggregate device reported a different number of streams than our internal usage template.");
LABEL_117:
  }
  if (v31) {
    goto LABEL_58;
  }
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 88))(a1, a2))
  {
    uint64_t v60 = (os_log_t *)sub_32A48(13);
    int v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v74 = 1024;
      int v75 = 359;
      _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL aggregate device reported no streams, yet we have one.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL aggregate device reported no streams, yet we have one.");
    goto LABEL_117;
  }
  if (!*((_DWORD *)v72 + 2) && a4)
  {
    int v62 = (os_log_t *)sub_32A48(13);
    __int16 v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      __int16 v74 = 1024;
      int v75 = 360;
      _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Attempt to enable stream when there aren't any.\"", buf, 0x12u);
    }
    int v64 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v64 = &off_6414D8;
    v64[2] = 1852797029;
  }
LABEL_58:
  uint64_t v32 = sub_32A48(16);
  if (*(unsigned char *)(v32 + 8))
  {
    std::string::size_type v33 = *(NSObject **)v32;
    if (*(void *)v32)
    {
      if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
      {
        sub_16D6C0(&v70, (uint64_t)__p);
        uint64_t v34 = (v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v70
            : (std::string *)v70.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 362;
        __int16 v76 = 2080;
        AudioObjectID v77 = v34;
        _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Before modifying our stream usage data structure: %s", buf, 0x1Cu);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (*((_DWORD *)v72 + 2))
  {
    uint64_t v35 = a1[v23];
    unint64_t v36 = v24[1] - v35;
    if (v36)
    {
      uint64_t v37 = 0;
      unint64_t v38 = v72 + 12;
      do
      {
        int v39 = *(unsigned __int8 *)(v35 + v37);
        if (v39 == 1) {
          unsigned int v40 = a4;
        }
        else {
          unsigned int v40 = 0;
        }
        if (v39 == 2) {
          int v41 = 1;
        }
        else {
          int v41 = v40;
        }
        *(_DWORD *)&v38[4 * v37++] = v41;
      }
      while (v36 > v37);
    }
    uint64_t v42 = sub_32A48(16);
    if (*(unsigned char *)(v42 + 8))
    {
      char v43 = *(NSObject **)v42;
      if (*(void *)v42)
      {
        if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
        {
          sub_16D6C0(&v70, (uint64_t)__p);
          uint64_t v44 = (v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v70
              : (std::string *)v70.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          __int16 v74 = 1024;
          int v75 = 380;
          __int16 v76 = 2080;
          AudioObjectID v77 = v44;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Before updating stream usage on the HAL: %s", buf, 0x1Cu);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    sub_282A80((uint64_t)a1, a2, a4, (unsigned char *)a1[v23], (unsigned char *)v24[1]);
    int v45 = sub_16D560((uint64_t)__p);
    if (v45)
    {
      __int16 v57 = (os_log_t *)sub_32A48(13);
      int v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        __int16 v74 = 1024;
        int v75 = 385;
        _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"VAStreamUsage::Set() failed.\"", buf, 0x12u);
      }
      __int16 v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v59 = &off_6414D8;
      v59[2] = v45;
    }
    sub_282CAC((uint64_t)a1, a2, a4, (unsigned char *)a1[v23], (unsigned char *)v24[1]);
  }
  int v46 = (os_log_t *)sub_32A48(16);
  uint32_t v47 = *v46;
  if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = *(uint64_t *)((char *)a1 + 268);
    uint64_t v48 = &v70;
    sub_4D60(&v70, (unsigned int *)&v69);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v48 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    sub_16D6C0(v67, (uint64_t)__p);
    int v49 = v68;
    uint64_t v50 = (void **)v67[0];
    if (a2) {
      uint64_t v51 = "output";
    }
    else {
      uint64_t v51 = "input";
    }
    sub_21C8C(v65, v51);
    char v52 = v67;
    if (v49 < 0) {
      char v52 = v50;
    }
    if (v66 >= 0) {
      uint64_t v53 = v65;
    }
    else {
      uint64_t v53 = (void **)v65[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
    __int16 v74 = 1024;
    int v75 = 389;
    __int16 v76 = 2080;
    AudioObjectID v77 = v48;
    __int16 v78 = 2080;
    long long v79 = v52;
    __int16 v80 = 2080;
    uint64_t v81 = v53;
    _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VA Stream usage for %s is %s for direction %s", buf, 0x30u);
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v68 < 0) {
      operator delete(v67[0]);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  free(v72);
}

void sub_39F304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28)
{
  __cxa_free_exception(v28);
  free(a28);
  _Unwind_Resume(a1);
}

uint64_t sub_39F3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, double *a7, uint64_t a8)
{
  __int16 v14 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 456);
  if (!v14)
  {
    uint64_t v34 = (os_log_t *)sub_32A48(13);
    uint64_t v35 = *v34;
    if (*v34)
    {
      if (os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_BroadcastFanout.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 643;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The client IO proc must exist for IO to run.\"", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  uint64_t v15 = sub_4CD70(a1 + 688, 1, 0);
  uint64_t v84 = v15;
  unsigned int v16 = a6[3];
  unsigned int v17 = *(_DWORD *)(v15 + 64);
  uint64_t v18 = *(unsigned int **)(a1 + 896);
  uint64_t v19 = *(void *)(a1 + 712);
  uint64_t v20 = *(AudioBufferList **)(v19 + 160);
  uint64_t v21 = *(AudioBufferList **)(v19 + 176);
  uint64_t v89 = v21;
  outOutputData = v20;
  uint64_t v22 = *(void *)(v15 + 192);
  uint64_t v23 = v16 / v17;
  if (!*(unsigned char *)(v22 + 448) && !*(void *)(v22 + 584))
  {
    if (*(void *)(v22 + 672)) {
      BOOL v36 = *(_DWORD *)(v15 + 8) == 1819304813;
    }
    else {
      BOOL v36 = 0;
    }
    if (v36) {
      goto LABEL_5;
    }
LABEL_22:
    int v33 = 0;
    *((void *)v18 + 2) = *((void *)a6 + 2);
    v18[3] = v16;
    goto LABEL_23;
  }
  if (*(_DWORD *)(v15 + 8) != 1819304813) {
    goto LABEL_22;
  }
LABEL_5:
  uint64_t v24 = *v18;
  if (v24)
  {
    int v25 = *(_DWORD *)(v15 + 24) * v23;
    int v26 = v18 + 3;
    do
    {
      _DWORD *v26 = v25;
      v26 += 4;
      --v24;
    }
    while (v24);
  }
  uint64_t mNumberBuffers = v20->mNumberBuffers;
  if (mNumberBuffers)
  {
    UInt32 v28 = *(_DWORD *)(v15 + 104) * v23;
    p_mDataByteSize = &v20->mBuffers[0].mDataByteSize;
    do
    {
      UInt32 *p_mDataByteSize = v28;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  uint64_t v30 = v21->mNumberBuffers;
  if (v30)
  {
    UInt32 v31 = *(_DWORD *)(v15 + 144) * v23;
    uint64_t v32 = &v21->mBuffers[0].mDataByteSize;
    do
    {
      UInt32 *v32 = v31;
      v32 += 4;
      --v30;
    }
    while (v30);
  }
  int v33 = 1;
LABEL_23:
  if (*(unsigned char *)(a1 + 104))
  {
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    *(unsigned char *)(a1 + 104) = 0;
  }
  UInt32 v37 = v18[3];
  inInputData = (AudioBufferList *)v18;
  v14(a8, a3, 0, a5);
  BOOL v38 = *(void *)(a1 + 864) != 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 448))(a1) & 1) == 0)
  {
    if (*a6)
    {
      unint64_t v39 = 0;
      unsigned int v40 = (void **)(a6 + 4);
      do
      {
        bzero(*v40, *((unsigned int *)v40 - 1));
        ++v39;
        v40 += 2;
      }
      while (v39 < *a6);
    }
    int v33 = 0;
    BOOL v38 = 0;
  }
  uint64_t v41 = *(void *)(v84 + 192);
  if (v41) {
    char v42 = (*(uint64_t (**)(void))(*(void *)v41 + 80))(*(void *)(v84 + 192));
  }
  else {
    char v42 = 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 448))(a1) || inInputData->mBuffers[0].mDataByteSize)
  {
    *(_DWORD *)(a1 + 632) = 0;
    goto LABEL_36;
  }
  unsigned int v69 = *(_DWORD *)(a1 + 632);
  if (v69 >> 6 < 0x177) {
    char v70 = 1;
  }
  else {
    char v70 = v42;
  }
  if (v70)
  {
    int v71 = v69 + v23;
LABEL_89:
    *(_DWORD *)(a1 + 632) = v71;
    goto LABEL_90;
  }
  if (v69 <= (int)v23 + 24000)
  {
    sub_6330(v41);
    for (uint64_t i = *(void *)(a1 + 880); i != a1 + 872; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v73 = sub_4CD70(i + 16, 1, 0);
      sub_6330(*(void *)(v73 + 192));
    }
    int v33 = 0;
    BOOL v38 = 0;
    int v71 = *(_DWORD *)(a1 + 632) + 2 * v23;
    goto LABEL_89;
  }
  int v33 = 0;
  BOOL v38 = 0;
LABEL_90:
  if ((v33 & 1) != 0 || v38)
  {
    unint64_t v80 = inInputData->mNumberBuffers;
    if (v80)
    {
      for (uint64_t j = 0; j != v80; ++j)
        inInputData->mBuffers[j].mDataByteSize = v37;
      unint64_t v82 = 0;
      p_mData = &inInputData->mBuffers[0].mData;
      do
      {
        if (*p_mData)
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          unint64_t v80 = inInputData->mNumberBuffers;
        }
        ++v82;
        p_mData += 2;
      }
      while (v82 < v80);
    }
  }
  else
  {
    if ((*(unsigned char *)(a1 + 80) & 4) != 0)
    {
      unint64_t v74 = inInputData->mNumberBuffers;
      if (v74)
      {
        for (uint64_t k = 0; k != v74; ++k)
          inInputData->mBuffers[k].mDataByteSize = v37;
        unint64_t v76 = 0;
        AudioObjectID v77 = &inInputData->mBuffers[0].mData;
        do
        {
          if (*v77)
          {
            bzero(*v77, *((unsigned int *)v77 - 1));
            unint64_t v74 = inInputData->mNumberBuffers;
          }
          ++v76;
          v77 += 2;
        }
        while (v76 < v74);
      }
    }
    if (*a6)
    {
      unint64_t v78 = 0;
      long long v79 = (void **)(a6 + 4);
      do
      {
        bzero(*v79, *((unsigned int *)v79 - 1));
        ++v78;
        v79 += 2;
      }
      while (v78 < *a6);
    }
    int v33 = 0;
    BOOL v38 = 0;
  }
LABEL_36:
  if (*(_DWORD *)(v84 + 8) != 1819304813)
  {
    UInt32 v44 = 0;
    if (!v33) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  uint64_t v43 = *(void *)(a1 + 88);
  *(_OWORD *)&buf.uint64_t mNumberBuffers = xmmword_4E7A40;
  if (v43) {
    sub_3FAE68(v43, &buf, (uint64_t)inInputData, v23, (uint64_t)*a7);
  }
  sub_269720(a1 + 144, *(unsigned int *)(v84 + 200), (uint64_t)inInputData, v23, (uint64_t)a7);
  UInt32 v44 = 1;
  if (v33)
  {
LABEL_42:
    sub_5586C(*(OpaqueAudioConverter **)(v41 + 584), v23, inInputData, outOutputData);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 624))(a1))
    {
      unsigned int v45 = sub_287DA0(*(unsigned char **)(a1 + 640), *(unsigned char **)(a1 + 648), 0);
      *(void *)&buf.uint64_t mNumberBuffers = 1;
      buf.mBuffers[0] = *(AudioBuffer *)(a4 + 16 * v45 + 8);
      *(void *)&v91.uint64_t mNumberBuffers = outOutputData;
      *(void *)&v91.mBuffers[0].mNumberChannels = &buf;
      (*(void (**)(uint64_t, double *, uint64_t, uint64_t, AudioBufferList *, uint64_t, AudioBufferList **))(*(void *)v41 + 144))(v41, a7, v23, 2, &v91, 1, &v89);
    }
    else
    {
      (*(void (**)(uint64_t, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))(*(void *)v41 + 144))(v41, a7, v23, 1, &outOutputData, 1, &v89);
      (*(void (**)(uint64_t, double *))(*(void *)v41 + 152))(v41, a7);
      sub_1B8D38(*(void *)(v41 + 376), (uint64_t)a7);
    }
    *(void *)&buf.uint64_t mNumberBuffers = 1;
    buf.mBuffers[0] = *(AudioBuffer *)(a6 + 2);
    sub_5586C(*(OpaqueAudioConverter **)(v41 + 672), v23, v89, &buf);
    sub_269720(a1 + 144, *(unsigned int *)(v84 + 204), (uint64_t)&buf, v23, (uint64_t)a7);
  }
LABEL_46:
  if (v38 && *a6 >= 2)
  {
    int v46 = (void *)(a1 + 880);
    for (unint64_t m = 1; m < *a6; ++m)
    {
      uint64_t v48 = (_OWORD **)*v46;
      memset(&buf, 0, sizeof(buf));
      sub_10B2C(&buf, v48[2], v48[3], 0x4EC4EC4EC4EC4EC5 * (v48[3] - v48[2]));
      memset(v93, 0, sizeof(v93));
      sub_10B2C(v93, v48[5], v48[6], 0x4EC4EC4EC4EC4EC5 * (v48[6] - v48[5]));
      int v94 = 0;
      int v95 = 0;
      sub_10CBC(&v94, (uint64_t)(v48 + 8));
      int v96 = 0;
      int v97 = 0;
      sub_10CBC(&v96, (uint64_t)(v48 + 10));
      uint64_t v49 = sub_4CD70((uint64_t)&buf, 1, 0);
      uint64_t v50 = v49;
      uint64_t v51 = *(void *)(v49 + 192);
      if (*(unsigned char *)(v51 + 448) || *(void *)(v51 + 584))
      {
        if (*(_DWORD *)(v49 + 8) == 1819304813) {
          goto LABEL_52;
        }
      }
      else
      {
        if (*(void *)(v51 + 672)) {
          BOOL v61 = *(_DWORD *)(v49 + 8) == 1819304813;
        }
        else {
          BOOL v61 = 0;
        }
        if (v61)
        {
LABEL_52:
          char v52 = *(AudioBufferList **)(v93[0] + 160);
          uint64_t v53 = *(AudioBufferList **)(v93[0] + 176);
          std::string v87 = v53;
          char v88 = v52;
          uint64_t v54 = v52->mNumberBuffers;
          if (v54)
          {
            UInt32 v55 = *(_DWORD *)(v49 + 104) * v23;
            char v56 = &v52->mBuffers[0].mDataByteSize;
            do
            {
              *char v56 = v55;
              v56 += 4;
              --v54;
            }
            while (v54);
          }
          uint64_t v57 = v53->mNumberBuffers;
          if (v57)
          {
            UInt32 v58 = *(_DWORD *)(v49 + 144) * v23;
            __int16 v59 = &v53->mBuffers[0].mDataByteSize;
            do
            {
              *__int16 v59 = v58;
              v59 += 4;
              --v57;
            }
            while (v57);
          }
          uint64_t v60 = *(void *)(a1 + 88);
          *(void *)&v91.uint64_t mNumberBuffers = 1;
          v91.mBuffers[0].mNumberChannels = 1;
          v91.mBuffers[0].mDataByteSize = v44;
          if (v60)
          {
            sub_3FAE68(v60, &v91, (uint64_t)v52, v23, (uint64_t)*a7);
            uint64_t v51 = *(void *)(v50 + 192);
            char v52 = v88;
          }
          sub_5586C(*(OpaqueAudioConverter **)(v51 + 584), v23, inInputData, v52);
          (*(void (**)(void, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))(**(void **)(v50 + 192) + 144))(*(void *)(v50 + 192), a7, v23, 1, &v88, 1, &v87);
          *(void *)&v91.uint64_t mNumberBuffers = 1;
          v91.mBuffers[0] = *(AudioBuffer *)&a6[4 * m + 2];
          sub_5586C(*(OpaqueAudioConverter **)(*(void *)(v50 + 192) + 672), v23, v87, &v91);
          sub_269720(a1 + 144, *(unsigned int *)(v50 + 204), (uint64_t)&v91, v23, (uint64_t)a7);
          ++v44;
          goto LABEL_66;
        }
      }
      memcpy(*(void **)&a6[4 * m + 4], inInputData->mBuffers[0].mData, inInputData->mBuffers[0].mDataByteSize);
LABEL_66:
      sub_1216C(&v96);
      sub_1216C(&v94);
      *(void *)&v91.uint64_t mNumberBuffers = v93;
      sub_121EC((void ***)&v91);
      *(void *)&v91.uint64_t mNumberBuffers = &buf;
      sub_121EC((void ***)&v91);
      int v46 = v48 + 1;
    }
  }
  if (*(_DWORD *)(v84 + 8) == 1819304813)
  {
    unint64_t v62 = *a6;
    if (v62)
    {
      unint64_t v63 = 0;
      int v64 = (long long *)(a6 + 2);
      do
      {
        uint64_t v65 = *(void *)(a1 + 88);
        *(void *)&buf.uint64_t mNumberBuffers = 1;
        buf.mBuffers[0].mNumberChannels = 2;
        buf.mBuffers[0].mDataByteSize = v63;
        if (v65)
        {
          sub_3FACA0(v65, &buf, v64, v23);
          unint64_t v62 = *a6;
        }
        ++v63;
        ++v64;
      }
      while (v63 < v62);
    }
  }
  if (*(unsigned char *)(a1 + 364) && *a6)
  {
    unint64_t v66 = 0;
    __int16 v67 = (void **)(a6 + 4);
    do
    {
      bzero(*v67, *((unsigned int *)v67 - 1));
      ++v66;
      v67 += 2;
    }
    while (v66 < *a6);
  }
  return 0;
}

void sub_39FD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_281348((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_39FDFC(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = a2[36];
  uint64_t v5 = (os_log_t *)sub_32A48(16);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, v4);
    uint64_t v7 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136315650;
    *(void *)uint64_t v19 = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = 604;
    __int16 v20 = 2080;
    uint64_t v21 = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Looking for stream for port %s", buf, 0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = sub_8E3C4(a1, (uint64_t)a2);
  if (!v9)
  {
    uint64_t v10 = a1 + 848;
    uint64_t v11 = *(void *)(a1 + 856);
    if (v11 == v10)
    {
LABEL_12:
      uint64_t v12 = (os_log_t *)sub_32A48(16);
      char v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, v4);
        if (v17 >= 0) {
          __int16 v14 = __p;
        }
        else {
          __int16 v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)uint64_t v19 = "AggregateDevice_BroadcastFanout.cpp";
        *(_WORD *)&v19[8] = 1024;
        *(_DWORD *)&v19[10] = 621;
        __int16 v20 = 2080;
        uint64_t v21 = v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stream for port %s not found in primary or secondary streams", buf, 0x1Cu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      return v8 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      while (1)
      {
        sub_3524((uint64_t *)__p, (void *)(*(void *)(v11 + 16) + 112));
        sub_8E4B8((uint64_t *)buf, __p);
        sub_8108((uint64_t *)__p);
        __p[0] = a2;
        if (buf != (uint8_t *)sub_8E5F0(*(void **)&v19[4], buf, (uint64_t *)__p)) {
          break;
        }
        sub_B8E4((uint64_t *)buf);
        uint64_t v11 = *(void *)(v11 + 8);
        if (v11 == v10) {
          goto LABEL_12;
        }
      }
      uint64_t v8 = *(void *)(v11 + 16);
      sub_B8E4((uint64_t *)buf);
    }
  }
  return v8;
}

void sub_3A0074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A0090(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = a2[36];
  uint64_t v7 = (os_log_t *)sub_32A48(16);
  uint64_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, v6);
    char v9 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136315650;
    *(void *)int v25 = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&v25[8] = 1024;
    *(_DWORD *)&v25[10] = 575;
    __int16 v26 = 2080;
    __int16 v27 = v9;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Looking for Software command for port %s", buf, 0x1Cu);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_8E69C((os_unfair_lock_s *)a1, (uint64_t)a2, a3);
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      return;
    }
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (os_log_t *)sub_32A48(16);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 864);
    *(_DWORD *)AudioBufferList buf = 136315650;
    *(void *)int v25 = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&v25[8] = 1024;
    *(_DWORD *)&v25[10] = 583;
    __int16 v26 = 1024;
    LODWORD(v27) = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Looking for software command in secondary streams (%u)", buf, 0x18u);
  }
  uint64_t v14 = a1 + 848;
  uint64_t v15 = *(void *)(a1 + 856);
  if (v15 == v14)
  {
LABEL_17:
    unsigned int v16 = (os_log_t *)sub_32A48(16);
    char v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, v6);
      if (v23 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)int v25 = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = 595;
      __int16 v26 = 2080;
      __int16 v27 = v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software command for port %s not found in primary or secondary streams", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      sub_3524((uint64_t *)__p, (void *)(*(void *)(v15 + 16) + 112));
      sub_8E4B8((uint64_t *)buf, __p);
      sub_8108((uint64_t *)__p);
      __p[0] = a2;
      if (buf != (uint8_t *)sub_8E5F0(*(void **)&v25[4], buf, (uint64_t *)__p)) {
        break;
      }
      sub_B8E4((uint64_t *)buf);
      uint64_t v15 = *(void *)(v15 + 8);
      if (v15 == v14) {
        goto LABEL_17;
      }
    }
    uint64_t v19 = *(void *)(v15 + 16);
    uint64_t v21 = *(void *)(v19 + 152);
    uint64_t v20 = *(void *)(v19 + 160);
    *a3 = v21;
    a3[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
    }
    sub_B8E4((uint64_t *)buf);
  }
}

void sub_3A0384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A03A0(uint64_t a1)
{
  sub_737F4(a1);

  operator delete();
}

uint64_t sub_3A03DC(uint64_t a1, void *a2, uint64_t a3, long long *a4, void **a5, int a6, uint64_t a7)
{
  if (!a2[2])
  {
    uint64_t v43 = (os_log_t *)sub_32A48(13);
    UInt32 v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 211;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"AggregateDevice_BroadcastFanout has fewer than %u output devices\"", buf, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "AggregateDevice_BroadcastFanout has fewer than %u output devices");
  }
  uint64_t v7 = (uint64_t)a2;
  uint64_t v53 = &v53;
  uint64_t v54 = (uint64_t *)&v53;
  uint64_t v55 = 0;
  char v9 = (void *)a2[1];
  if (v9 != a2)
  {
    do
    {
      uint64_t v10 = v9 + 2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[7] - v9[6]) >> 3) >= 2)
      {
        uint64_t v11 = (os_log_t *)sub_32A48(13);
        uint64_t v12 = *v11;
        if (*v11)
        {
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
          {
            sub_21340C(&v57, (uint64_t)(v9 + 2));
            uint64_t v13 = &v57;
            if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v13 = (std::string *)v57.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioBufferList buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 217;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"AggregateDevice_BroadcastFanout does not support multiple ports: %s\"", buf, 0x1Cu);
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      std::string::size_type v14 = *v10;
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)*v10 + 192))(*v10))
      {
        v57.__r_.__value_.__r.__words[0] = v14;
        sub_3A0B78(buf, (uint64_t)&v57, 1);
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        *uint64_t v15 = 0;
        v15[1] = 0;
        _OWORD v15[2] = (uint64_t)(v15 + 2);
        v15[3] = (uint64_t)(v15 + 2);
        v15[4] = 0;
        uint64_t v16 = *(void *)&buf[16];
        if (*(void *)&buf[16])
        {
          uint64_t v18 = *(void *)buf;
          char v17 = *(uint64_t **)&buf[8];
          uint64_t v19 = **(void **)&buf[8];
          *(void *)(v19 + 8) = *(void *)(*(void *)buf + 8);
          **(void **)(v18 + 8) = v19;
          uint64_t v20 = v15[2];
          *(void *)(v20 + 8) = v17;
          *char v17 = v20;
          _OWORD v15[2] = v18;
          *(void *)(v18 + 8) = v15 + 2;
          v15[4] = v16;
          *(void *)&buf[16] = 0;
        }
        uint64_t v21 = v54;
        *uint64_t v15 = (uint64_t)&v53;
        v15[1] = (uint64_t)v21;
        uint64_t *v21 = (uint64_t)v15;
        uint64_t v22 = v55 + 1;
        uint64_t v54 = v15;
      }
      else
      {
        v57.__r_.__value_.__r.__words[0] = v14;
        sub_3A0B78(buf, (uint64_t)&v57, 1);
        char v23 = operator new(0x28uLL);
        void *v23 = 0;
        v23[1] = 0;
        v23[2] = v23 + 2;
        v23[3] = v23 + 2;
        v23[4] = 0;
        uint64_t v24 = *(void *)&buf[16];
        if (*(void *)&buf[16])
        {
          uint64_t v26 = *(void *)buf;
          int v25 = *(void **)&buf[8];
          uint64_t v27 = **(void **)&buf[8];
          *(void *)(v27 + 8) = *(void *)(*(void *)buf + 8);
          **(void **)(v26 + 8) = v27;
          uint64_t v28 = v23[2];
          *(void *)(v28 + 8) = v25;
          void *v25 = v28;
          v23[2] = v26;
          *(void *)(v26 + 8) = v23 + 2;
          v23[4] = v24;
          *(void *)&buf[16] = 0;
        }
        uint64_t v29 = (uint64_t)v53;
        void *v23 = v53;
        v23[1] = &v53;
        *(void *)(v29 + 8) = v23;
        uint64_t v22 = v55 + 1;
        uint64_t v53 = v23;
      }
      uint64_t v55 = v22;
      sub_45F50(buf);
      char v9 = (void *)v9[1];
    }
    while (v9 != (void *)v7);
  }
  uint64_t v30 = (os_log_t *)sub_32A48(16);
  UInt32 v31 = *v30;
  if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 232;
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built topology for broadcast fanout aggregate device:", buf, 0x12u);
  }
  uint64_t v32 = v54;
  uint64_t v52 = a1;
  if (v54 != (uint64_t *)&v53)
  {
    int v33 = 0;
    uint64_t v51 = v7;
    do
    {
      uint64_t v34 = (os_log_t *)sub_32A48(16);
      uint64_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 238;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v33;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Stack %u:", buf, 0x18u);
      }
      for (uint64_t i = v32[3]; (uint64_t *)i != v32 + 2; uint64_t i = *(void *)(i + 8))
      {
        UInt32 v37 = *(os_unfair_lock_s **)(i + 16);
        BOOL v38 = (os_log_t *)sub_32A48(16);
        unint64_t v39 = *v38;
        if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
        {
          int v40 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v37->_os_unfair_lock_opaque + 120))(v37);
          sub_4F64((uint64_t)&v57, v37 + 2);
          uint64_t v41 = &v57;
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 243;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v40;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = v41;
          _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d   - PhysicalDevice ID %u: %s", buf, 0x22u);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
        }
      }
      ++v33;
      uint64_t v32 = (uint64_t *)v32[1];
      uint64_t v7 = v51;
      a1 = v52;
    }
    while (v32 != (uint64_t *)&v53);
  }
  sub_27D618(a1, (uint64_t)&v53, v7, a3, a4, a5, a6, a7);
  sub_A60C4((uint64_t *)&v53);
  *(void *)a1 = off_637180;
  sub_3A0C0C((char **)(a1 + 800), 0, a1 + 424);
  sub_3A0C0C((char **)(a1 + 824), 1, a1 + 424);
  *(void *)(a1 + 848) = a1 + 848;
  *(void *)(a1 + 856) = a1 + 848;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = a1 + 872;
  *(void *)(a1 + 880) = a1 + 872;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 888) = 0;
  *(_DWORD *)(a1 + 904) = 0;
  return a1;
}

void sub_3A0A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
}

BOOL sub_3A0AA8(uint64_t a1, uint64_t *a2)
{
  sub_549A4(&v4, a2, "", 312);
  int v2 = *(_DWORD *)(v4 + 144);
  if (v5) {
    sub_4636C(v5);
  }
  return v2 == 1886613611;
}

void sub_3A0B08(uint64_t a1, void *a2)
{
  *a2 = off_637408;
}

void *sub_3A0B28()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_637408;
  return result;
}

void sub_3A0B60()
{
}

void *sub_3A0B78(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * a3;
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = operator new(0x18uLL);
      uint64_t v9 = *(void *)(a2 + 8 * v5);
      v8[1] = a1;
      v8[2] = v9;
      *uint64_t v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      uint64_t v7 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_3A0BF8(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

void sub_3A0C0C(char **a1, int a2, uint64_t a3)
{
  uint64_t v4 = (os_log_t *)sub_32A48(16);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = "input";
    uint64_t v73 = "AggregateDevice_BroadcastFanout.cpp";
    *(_DWORD *)AudioBufferList buf = 136315650;
    if (a2) {
      uint64_t v6 = "output";
    }
    __int16 v74 = 1024;
    int v75 = 64;
    __int16 v76 = 2080;
    AudioObjectID v77 = (void *)v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Building StreamUsageMask for %s.", buf, 0x1Cu);
  }
  *a1 = 0;
  a1[1] = 0;
  char v68 = a1;
  a1[2] = 0;
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7 != a3)
  {
    uint64_t v8 = 0;
    unint64_t v66 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = a2;
    while (1)
    {
      uint64_t v63 = v7;
      uint64_t v64 = v7 + 16;
      uint64_t v14 = *(void *)(v7 + 24);
      if (v14 != v7 + 16) {
        break;
      }
      uint64_t v18 = v12;
LABEL_126:
      uint64_t v7 = *(void *)(v63 + 8);
      uint64_t v12 = v18;
      if (v7 == a3) {
        goto LABEL_129;
      }
    }
    while (1)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      int v16 = (*(uint64_t (**)(uint64_t, BOOL))(*(void *)v15 + 88))(v15, v13 != 0);
      uint64_t v65 = v14;
      if (v16) {
        break;
      }
      uint64_t v18 = v12;
LABEL_123:
      uint64_t v14 = *(void *)(v65 + 8);
      uint64_t v12 = v18;
      if (v14 == v64) {
        goto LABEL_126;
      }
    }
    int v17 = 0;
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 192))(v15))
      {
        if (a2)
        {
          if (v12 >= v8)
          {
            uint64_t v30 = &v12[-v10];
            uint64_t v31 = (uint64_t)&v12[-v10 + 1];
            if (v31 < 0) {
              sub_60548();
            }
            if (2 * (uint64_t)&v8[-v10] > (unint64_t)v31) {
              uint64_t v31 = 2 * (void)&v8[-v10];
            }
            if ((unint64_t)&v8[-v10] >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v32 = v31;
            }
            if (v32) {
              int v33 = (char *)operator new(v32);
            }
            else {
              int v33 = 0;
            }
            char v42 = &v30[(void)v33];
            v30[(void)v33] = 1;
            uint64_t v18 = &v30[(void)v33 + 1];
            if (v12 != (char *)v10)
            {
              uint64_t v43 = &v12[~v10];
              do
              {
                char v44 = *--v12;
                (v43--)[(void)v33] = v44;
              }
              while (v12 != (char *)v10);
              char v42 = v33;
            }
            uint64_t v8 = &v33[v32];
            *char v68 = v42;
            v68[1] = v18;
            v68[2] = v8;
            if (v10) {
              operator delete((void *)v10);
            }
            unint64_t v66 = (unint64_t)v8;
            unint64_t v9 = (unint64_t)v8;
            unint64_t v10 = (unint64_t)v42;
            unint64_t v11 = (unint64_t)v8;
          }
          else
          {
            *uint64_t v12 = 1;
            unint64_t v66 = (unint64_t)v8;
            unint64_t v9 = (unint64_t)v8;
            unint64_t v11 = (unint64_t)v8;
            uint64_t v18 = v12 + 1;
          }
          char v13 = a2;
          goto LABEL_120;
        }
        if (v17)
        {
          uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 312))(v15);
          if ((v20 & 0xFF00000000) != 0) {
            int v21 = v20;
          }
          else {
            int v21 = -1;
          }
          if (v17 == v21)
          {
            if ((unint64_t)v12 >= v9)
            {
              uint64_t v22 = &v12[-v10];
              uint64_t v23 = (uint64_t)&v12[-v10 + 1];
              if (v23 < 0) {
                sub_60548();
              }
              if (2 * (v9 - v10) > v23) {
                uint64_t v23 = 2 * (v9 - v10);
              }
              if (v9 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v24 = v23;
              }
              if (v24) {
                int v25 = (char *)operator new(v24);
              }
              else {
                int v25 = 0;
              }
              BOOL v36 = &v22[(void)v25];
              v22[(void)v25] = 0;
              uint64_t v18 = &v22[(void)v25 + 1];
              if (v12 != (char *)v10)
              {
                uint64_t v51 = &v12[~v10];
                do
                {
                  char v52 = *--v12;
                  (v51--)[(void)v25] = v52;
                }
                while (v12 != (char *)v10);
                goto LABEL_115;
              }
              goto LABEL_116;
            }
          }
          else if ((unint64_t)v12 >= v9)
          {
            unsigned int v45 = &v12[-v10];
            uint64_t v46 = (uint64_t)&v12[-v10 + 1];
            if (v46 < 0) {
              sub_60548();
            }
            if (2 * (v9 - v10) > v46) {
              uint64_t v46 = 2 * (v9 - v10);
            }
            if (v9 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v24 = v46;
            }
            if (v24) {
              int v25 = (char *)operator new(v24);
            }
            else {
              int v25 = 0;
            }
            BOOL v36 = &v45[(void)v25];
            v45[(void)v25] = 0;
            uint64_t v18 = &v45[(void)v25 + 1];
            if (v12 != (char *)v10)
            {
              uint64_t v53 = &v12[~v10];
              do
              {
                char v54 = *--v12;
                (v53--)[(void)v25] = v54;
              }
              while (v12 != (char *)v10);
              goto LABEL_115;
            }
LABEL_116:
            uint64_t v8 = &v25[v24];
            *char v68 = v36;
            v68[1] = v18;
            v68[2] = v8;
            if (v10) {
              operator delete((void *)v10);
            }
            char v13 = 0;
LABEL_119:
            unint64_t v66 = (unint64_t)v8;
            unint64_t v9 = (unint64_t)v8;
            unint64_t v10 = (unint64_t)v36;
            unint64_t v11 = (unint64_t)v8;
            goto LABEL_120;
          }
          char v13 = 0;
          *uint64_t v12 = 0;
          uint64_t v19 = v12 + 1;
          unint64_t v11 = v9;
        }
        else
        {
          if ((unint64_t)v12 >= v66)
          {
            unint64_t v39 = &v12[-v10];
            uint64_t v40 = (uint64_t)&v12[-v10 + 1];
            if (v40 < 0) {
              sub_60548();
            }
            unint64_t v41 = v66 - v10;
            if (2 * (v66 - v10) > v40) {
              uint64_t v40 = 2 * v41;
            }
            if (v41 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v24 = v40;
            }
            if (v24) {
              int v25 = (char *)operator new(v24);
            }
            else {
              int v25 = 0;
            }
            BOOL v36 = &v39[(void)v25];
            v39[(void)v25] = 2;
            uint64_t v18 = &v39[(void)v25 + 1];
            if (v12 == (char *)v10) {
              goto LABEL_116;
            }
            uint64_t v49 = &v12[~v10];
            do
            {
              char v50 = *--v12;
              (v49--)[(void)v25] = v50;
            }
            while (v12 != (char *)v10);
            goto LABEL_115;
          }
          char v13 = 0;
          *uint64_t v12 = 2;
          uint64_t v19 = v12 + 1;
          unint64_t v9 = v66;
          unint64_t v11 = v66;
        }
      }
      else if (v13)
      {
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v26 = &v12[-v10];
          uint64_t v27 = (uint64_t)&v12[-v10 + 1];
          if (v27 < 0) {
            sub_60548();
          }
          if (2 * (v11 - v10) > v27) {
            uint64_t v27 = 2 * (v11 - v10);
          }
          if (v11 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v28 = v27;
          }
          if (v28) {
            uint64_t v29 = (char *)operator new(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          BOOL v36 = &v26[(void)v29];
          v26[(void)v29] = 2;
          uint64_t v18 = &v26[(void)v29 + 1];
          if (v12 != (char *)v10)
          {
            UInt32 v37 = &v12[~v10];
            do
            {
              char v38 = *--v12;
              (v37--)[(void)v29] = v38;
            }
            while (v12 != (char *)v10);
            BOOL v36 = v29;
          }
          uint64_t v8 = &v29[v28];
          *char v68 = v36;
          v68[1] = v18;
          v68[2] = v8;
          if (v10) {
            operator delete((void *)v10);
          }
          char v13 = 1;
          goto LABEL_119;
        }
        *uint64_t v12 = 2;
        uint64_t v19 = v12 + 1;
        char v13 = 1;
      }
      else
      {
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v34 = &v12[-v10];
          uint64_t v35 = (uint64_t)&v12[-v10 + 1];
          if (v35 < 0) {
            sub_60548();
          }
          if (2 * (v11 - v10) > v35) {
            uint64_t v35 = 2 * (v11 - v10);
          }
          if (v11 - v10 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v24 = v35;
          }
          if (v24) {
            int v25 = (char *)operator new(v24);
          }
          else {
            int v25 = 0;
          }
          BOOL v36 = &v34[(void)v25];
          v34[(void)v25] = 0;
          uint64_t v18 = &v34[(void)v25 + 1];
          if (v12 == (char *)v10) {
            goto LABEL_116;
          }
          uint32_t v47 = &v12[~v10];
          do
          {
            char v48 = *--v12;
            (v47--)[(void)v25] = v48;
          }
          while (v12 != (char *)v10);
LABEL_115:
          BOOL v36 = v25;
          goto LABEL_116;
        }
        char v13 = 0;
        *uint64_t v12 = 0;
        uint64_t v19 = v12 + 1;
      }
      uint64_t v18 = v19;
LABEL_120:
      v68[1] = v18;
      ++v17;
      uint64_t v12 = v18;
      if (v17 == v16) {
        goto LABEL_123;
      }
    }
  }
  uint64_t v18 = 0;
LABEL_129:
  uint64_t v55 = (os_log_t *)sub_32A48(16);
  char v56 = *v55;
  if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
  {
    if (a2) {
      std::string v57 = "output";
    }
    else {
      std::string v57 = "input";
    }
    sub_21C8C(v70, v57);
    int v58 = v71;
    __int16 v59 = (void **)v70[0];
    sub_286EEC(&__p, *v68, v18);
    uint64_t v60 = v70;
    if (v58 < 0) {
      uint64_t v60 = v59;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315906;
    uint64_t v73 = "AggregateDevice_BroadcastFanout.cpp";
    __int16 v74 = 1024;
    int v75 = 110;
    __int16 v76 = 2080;
    AudioObjectID v77 = v60;
    __int16 v78 = 2080;
    long long v79 = p_p;
    _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built StreamUsageMask for %s: %s.", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v71 < 0) {
      operator delete(v70[0]);
    }
  }
}

void sub_3A139C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_3A1418(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_3A1434(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_3A1448(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = [objc_alloc((Class)NSMutableString) initWithString:@"Car DND status:"];
  uint64_t v7 = v6;
  if (v5)
  {
    [v6 appendFormat:@"ERROR fetching DND state: %@", v5];
  }
  else
  {
    CFStringRef v8 = @"Not active";
    if (a2) {
      CFStringRef v8 = @"Active";
    }
    [v6 appendFormat:@"  %@ DND Assertion ", v8];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  }
  id v9 = v7;
  sub_21C8C(&v12, (char *)objc_msgSend(v9, "cStringUsingEncoding:", +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v11 = v10 + 48;
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*(void **)v11);
  }
  *(_OWORD *)uint64_t v11 = v12;
  *(void *)(v11 + 16) = v13;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_3A1560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_3A1580(CFStringRef key)
{
  if (byte_65D990)
  {
    CFPreferencesSynchronize(kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    byte_65D990 = 0;
  }

  return CFPreferencesCopyValue(key, kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
}

const void *sub_3A1614(const __CFString *a1)
{
  CFPropertyListRef v1 = sub_3A1580(a1);
  int v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFArrayGetTypeID())
    {
      CFRelease(v2);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315394;
        id v6 = "CACFPreferences.cpp";
        __int16 v7 = 1024;
        int v8 = 101;
        _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CACFPreferences::CopyArrayValue: not a CFArray", (uint8_t *)&v5, 0x12u);
      }
      return 0;
    }
  }
  return v2;
}

const void *sub_3A16FC(const __CFString *a1)
{
  CFPropertyListRef v1 = sub_3A1580(a1);
  int v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFDictionaryGetTypeID())
    {
      CFRelease(v2);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315394;
        id v6 = "CACFPreferences.cpp";
        __int16 v7 = 1024;
        int v8 = 127;
        _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CACFPreferences::CopyDictionaryValue: not a CFDictionary", (uint8_t *)&v5, 0x12u);
      }
      return 0;
    }
  }
  return v2;
}

uint64_t sub_3A17E4(const __CFString *a1, const void *a2)
{
  CFPreferencesSetValue(a1, a2, kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  uint64_t result = CFPreferencesSynchronize(kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  byte_65D990 = 0;
  return result;
}

uint64_t sub_3A1854(const __CFString *a1)
{
  CFPreferencesSetValue(a1, 0, kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  if (kCFPreferencesAnyUser) {
    CFStringRef v1 = kCFPreferencesCurrentUser;
  }
  else {
    CFStringRef v1 = 0;
  }
  if (kCFPreferencesAnyUser) {
    int v2 = (char *)&unk_65D991;
  }
  else {
    int v2 = &byte_65D990;
  }
  uint64_t result = CFPreferencesSynchronize(kCFPreferencesAnyApplication, v1, kCFPreferencesCurrentHost);
  char *v2 = 0;
  return result;
}

void sub_3A18E8(uint64_t a1, unsigned int a2)
{
  CFTypeID v3 = (os_log_t *)sub_32A48(17);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(__p, a2);
    int v5 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioBufferList buf = 136315650;
    long long v12 = "Device_Sidetone_Aspen.cpp";
    __int16 v13 = 1024;
    int v14 = 61;
    __int16 v15 = 2080;
    int v16 = v5;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  id v6 = (os_log_t *)sub_32A48(13);
  __int16 v7 = *v6;
  if (*v6)
  {
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      long long v12 = "Device_Sidetone_Aspen.cpp";
      __int16 v13 = 1024;
      int v14 = 62;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
}

void sub_3A1A64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3A1A80(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  uint64_t v4 = 0;
  uint64_t v3 = 0x707472755354656ELL;
  (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, char *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                         + 48))(a1, &v3, 0, 0, 4, (char *)&v4 + 4);
  return 1;
}

void sub_3A1AFC(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_3A1B38(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if ((v2 & 0xFF00000000) == 0) {
    return 0;
  }
  if (v2 == 1701869160) {
    return 1667982960;
  }
  if (v2 != 1701865584) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1);
  if (result) {
    return 1634231920;
  }
  return result;
}

void *sub_3A1BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_3A1E48((uint64_t)&v14, *(void *)(a1 + 192), COERCE_DOUBLE(1735159650));
  uint64_t v3 = v13;
  v13[0] = &off_6412B0;
  v13[1] = 0;
  if (v16) {
    uint64_t v3 = &v14;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)v3[1];
  v3[1] = 0;
  int v17 = &off_6412B0;
  CFDictionaryRef theDict = v4;
  sub_49A90(v13);
  if (v16) {
    sub_49A90(&v14);
  }
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a2 = Mutable;
  *(_WORD *)(a2 + 8) = 257;
  if (sub_1FE074(theDict, @"BT_GainUplink"))
  {
    sub_1FE09C((uint64_t)&v14, theDict, @"BT_GainUplink");
    double v6 = sub_1FE15C(v15);
    float v7 = *(float *)&v6;
    sub_49A90(&v14);
    sub_1D4B7C(a2, @"gain", v7);
  }
  if (sub_1FE074(theDict, @"BT_AGCUplink"))
  {
    sub_1FE09C((uint64_t)&v14, theDict, @"BT_AGCUplink");
    int v8 = sub_250B08(v15);
    sub_49A90(&v14);
    sub_1D4AF4(a2, @"agc", v8);
  }
  if (sub_1FE074(theDict, @"BT_NSdBUplink"))
  {
    sub_1FE09C((uint64_t)&v14, theDict, @"BT_NSdBUplink");
    double v9 = sub_1FE15C(v15);
    float v10 = *(float *)&v9;
    sub_49A90(&v14);
    sub_1D4B7C(a2, @"noise suppression", v10);
  }
  if (sub_1FE074(theDict, @"BT_EQValuesUplink"))
  {
    sub_30C394((uint64_t)&v14, theDict, @"BT_EQValuesUplink");
    CFNumberRef v11 = v15;
    sub_49A90(&v14);
    if (v11)
    {
      if (Mutable) {
        CFDictionarySetValue(Mutable, @"eq", v11);
      }
    }
  }
  return sub_49A90(&v17);
}

void sub_3A1E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_49A90((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_3A1E48(uint64_t a1, uint64_t a2, double a3)
{
  int v10 = 1650750320;
  double v11 = a3;
  uint64_t result = (void *)sub_237C6C((uint64_t)&v6, a2);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    *(void *)a1 = &off_6412B0;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = 1;
    return sub_49A90(&v7);
  }
  return result;
}

uint64_t sub_3A1EDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  uint64_t v3 = 0x676C6F6262647370;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 16))(v1, &v3);
}

BOOL sub_3A1F34(uint64_t a1)
{
  uint64_t v1 = sub_99A40(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&long long v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000) != 0 && v3 != 0;
}

BOOL sub_3A1F84(uint64_t a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (!v2) {
    return 0;
  }
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return 0;
  }
  if (*a2)
  {
    int v5 = *(_DWORD *)(*a2 + 144);
    BOOL v8 = v5 != 1885892674 && v5 != 1886152041 && v5 != 1886152047;
  }
  else
  {
    BOOL v8 = 0;
  }
  sub_4636C(v4);
  return v8;
}

void sub_3A2004(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));
  sub_104C04((void *)a1);

  operator delete();
}

uint64_t sub_3A2070(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));

  return sub_104C04((void *)a1);
}

uint64_t sub_3A20C8(uint64_t a1)
{
  uint64_t v2 = 2003068262;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if ((v3 & 0xFF00000000) != 0)
  {
    if (v3 == 1701869160)
    {
      return 1667982960;
    }
    else if (v3 == 1701865584 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 392))(a1))
    {
      return 1634231920;
    }
  }
  return v2;
}

uint64_t sub_3A2188(uint64_t a1, signed int a2)
{
  uint64_t v4 = 1;
  if (a2 > 1987208038)
  {
    if (a2 == 1987208039 || a2 == 1987211117)
    {
      int v9 = sub_24F5F4(a1);
      if (v9)
      {
        uint64_t v10 = sub_32A48(28);
        uint64_t v11 = sub_32A48(23);
        char v12 = 0;
        uint64_t v13 = 0;
        *(void *)AudioBufferList buf = 0x100000002;
        uint64_t v14 = *(void *)(v10 + 8);
        while (1)
        {
          uint64_t v15 = (int)buf[v13];
          char v16 = v12;
          if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
            break;
          }
          char v12 = 1;
          uint64_t v13 = 1;
          if (v16) {
            goto LABEL_24;
          }
        }
        if ((v14 & v15) == 0) {
          uint64_t v10 = v11;
        }
LABEL_24:
        size_t v24 = *(NSObject **)v10;
        if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          int v25 = *(__CFString **)(a1 + 248);
          uint64_t v63 = v25;
          char v64 = *(unsigned char *)(a1 + 256);
          if (v64 && v25) {
            CFRetain(v25);
          }
          sub_21B7C(v70, v25);
          int v26 = v71;
          uint64_t v27 = (void **)v70[0];
          sub_2417C(__p, a2);
          size_t v28 = v70;
          if (v26 < 0) {
            size_t v28 = v27;
          }
          if (v67 >= 0) {
            uint64_t v29 = __p;
          }
          else {
            uint64_t v29 = (void **)__p[0];
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
          __int16 v73 = 1024;
          int v74 = 168;
          __int16 v75 = 2080;
          __int16 v76 = v28;
          __int16 v77 = 2080;
          __int16 v78 = v29;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port %s is not allowed for mode %s.", (uint8_t *)buf, 0x26u);
          if (v67 < 0) {
            operator delete(__p[0]);
          }
          if (v71 < 0) {
            operator delete(v70[0]);
          }
          sub_72924((uint64_t)&v63);
        }
      }
      return v9 ^ 1u;
    }
  }
  else
  {
    if (a2 == 1751212899)
    {
      int v17 = sub_24F39C(a1);
      uint64_t v18 = *(void *)(a1 + 192);
      strcpy((char *)buf, "psllbolg");
      BYTE1(buf[2]) = 0;
      HIWORD(buf[2]) = 0;
      uint64_t v19 = sub_99A40(v18);
      *((void *)&v22 + 1) = v20;
      *(void *)&long long v22 = v19;
      uint64_t v21 = v22 >> 32;
      if ((v21 & 0xFF00000000) != 0) {
        unint64_t v23 = v21;
      }
      else {
        unint64_t v23 = 0;
      }
      if (v23) {
        uint64_t v4 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1) & (v17 != 2);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v47 = sub_32A48(28);
      uint64_t v48 = sub_32A48(23);
      char v49 = 0;
      uint64_t v50 = 0;
      *(void *)AudioBufferList buf = 0x100000002;
      uint64_t v51 = *(void *)(v47 + 8);
      while (1)
      {
        uint64_t v52 = (int)buf[v50];
        char v53 = v49;
        if (((v51 & v52) != 0) != ((*(void *)(v48 + 8) & v52) != 0)) {
          break;
        }
        char v49 = 1;
        uint64_t v50 = 1;
        if (v53)
        {
          if ((v51 & 1) == 0) {
            return v4;
          }
          goto LABEL_75;
        }
      }
      if ((v51 & v52) == 0) {
        uint64_t v47 = v48;
      }
      if ((*(void *)(v47 + 8) & 1) == 0) {
        return v4;
      }
LABEL_75:
      char v54 = *(NSObject **)v47;
      if (!v54 || !os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG)) {
        return v4;
      }
      uint64_t v55 = *(__CFString **)(a1 + 248);
      uint64_t v63 = v55;
      char v64 = *(unsigned char *)(a1 + 256);
      if (v64 && v55) {
        CFRetain(v55);
      }
      sub_21B7C(v70, v55);
      int v56 = v71;
      std::string v57 = (void **)v70[0];
      sub_2417C(__p, 0x68616363u);
      int v58 = v70;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      if (v56 < 0) {
        int v58 = v57;
      }
      __int16 v59 = "is not";
      if (v4) {
        __int16 v59 = "is";
      }
      __int16 v73 = 1024;
      int v74 = 162;
      uint64_t v60 = (void **)__p[0];
      buf[0] = 136316418;
      __int16 v75 = 2080;
      if (v67 >= 0) {
        uint64_t v60 = __p;
      }
      __int16 v76 = v58;
      __int16 v77 = 2080;
      __int16 v78 = (void *)v59;
      __int16 v79 = 2048;
      unint64_t v80 = v23;
      __int16 v81 = 2080;
      unint64_t v82 = v60;
      _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port %s %s allowed (%lu) for mode %s", (uint8_t *)buf, 0x3Au);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      if (v71 < 0) {
        operator delete(v70[0]);
      }
      BOOL v61 = &v63;
      goto LABEL_103;
    }
    if (a2 == 1987080813)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
      unsigned int v6 = v5;
      int v7 = BYTE4(v5);
      if (v5 != 1701869160 || BYTE4(v5) == 0)
      {
        uint64_t v4 = 0;
      }
      else
      {
        strcpy((char *)buf, "atbtbolg");
        BYTE1(buf[2]) = 0;
        HIWORD(buf[2]) = 0;
        uint64_t v31 = sub_99A40(a1);
        *((void *)&v34 + 1) = v32;
        *(void *)&long long v34 = v31;
        uint64_t v33 = v34 >> 32;
        uint64_t v4 = (v33 & 0xFF00000000) != 0 && v33 != 0;
      }
      uint64_t v36 = sub_32A48(28);
      uint64_t v37 = sub_32A48(23);
      char v38 = 0;
      uint64_t v39 = 0;
      *(void *)AudioBufferList buf = 0x100000002;
      uint64_t v40 = *(void *)(v36 + 8);
      while (1)
      {
        uint64_t v41 = (int)buf[v39];
        char v42 = v38;
        if (((v40 & v41) != 0) != ((*(void *)(v37 + 8) & v41) != 0)) {
          break;
        }
        char v38 = 1;
        uint64_t v39 = 1;
        if (v42)
        {
          if ((v40 & 1) == 0) {
            return v4;
          }
          goto LABEL_55;
        }
      }
      if ((v40 & v41) == 0) {
        uint64_t v36 = v37;
      }
      if ((*(void *)(v36 + 8) & 1) == 0) {
        return v4;
      }
LABEL_55:
      uint64_t v43 = *(NSObject **)v36;
      if (!v43 || !os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
        return v4;
      }
      CFStringRef v44 = *(const __CFString **)(a1 + 248);
      CFStringRef v68 = v44;
      char v69 = *(unsigned char *)(a1 + 256);
      if (v69 && v44) {
        CFRetain(v44);
      }
      unsigned int v45 = v70;
      sub_21B7C(v70, v44);
      if (v71 < 0) {
        unsigned int v45 = (void **)v70[0];
      }
      if (v7)
      {
        sub_2417C(__p, v6);
        if (v67 >= 0) {
          uint64_t v46 = __p;
        }
        else {
          uint64_t v46 = (void **)__p[0];
        }
      }
      else
      {
        uint64_t v46 = (void **)"none";
      }
      sub_2417C(&v63, 0x7670726Du);
      if (v65 >= 0) {
        unint64_t v62 = &v63;
      }
      else {
        unint64_t v62 = v63;
      }
      buf[0] = 136316418;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v73 = 1024;
      int v74 = 151;
      __int16 v75 = 2080;
      __int16 v76 = v45;
      __int16 v77 = 2080;
      __int16 v78 = v46;
      __int16 v79 = 2080;
      unint64_t v80 = (unint64_t)v62;
      __int16 v81 = 1024;
      LODWORD(v82) = v4;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port %s (endpoint type %s) allowed for mode %s: %u", (uint8_t *)buf, 0x36u);
      if (v65 < 0) {
        operator delete(v63);
      }
      if (v7 && v67 < 0) {
        operator delete(__p[0]);
      }
      if (v71 < 0) {
        operator delete(v70[0]);
      }
      BOOL v61 = (void **)&v68;
LABEL_103:
      sub_72924((uint64_t)v61);
    }
  }
  return v4;
}

void sub_3A284C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *sub_3A28C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_3A1E48((uint64_t)&v11, *(void *)(a1 + 192), COERCE_DOUBLE(1735159650));
  uint64_t v3 = v10;
  v10[0] = &off_6412B0;
  v10[1] = 0;
  if (v13) {
    uint64_t v3 = &v11;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)v3[1];
  v3[1] = 0;
  uint64_t v14 = &off_6412B0;
  CFDictionaryRef theDict = v4;
  sub_49A90(v10);
  if (v13) {
    sub_49A90(&v11);
  }
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a2 = Mutable;
  *(_WORD *)(a2 + 8) = 257;
  if (sub_1FE074(theDict, @"BT_GainDownlink"))
  {
    sub_1FE09C((uint64_t)&v11, theDict, @"BT_GainDownlink");
    double v6 = sub_1FE15C(v12);
    float v7 = *(float *)&v6;
    sub_49A90(&v11);
    sub_1D4B7C(a2, @"gain", v7);
  }
  if (sub_1FE074(theDict, @"BT_EQValuesDownlink"))
  {
    sub_30C394((uint64_t)&v11, theDict, @"BT_EQValuesDownlink");
    CFNumberRef v8 = v12;
    sub_49A90(&v11);
    if (v8)
    {
      if (Mutable) {
        CFDictionarySetValue(Mutable, @"eq", v8);
      }
    }
  }
  return sub_49A90(&v14);
}

void sub_3A2A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_80594(v7);
  sub_49A90((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3A2A80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  uint64_t v3 = 0x676C6F6262647370;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 16))(v1, &v3);
}

BOOL sub_3A2AD8(uint64_t a1)
{
  uint64_t v1 = sub_99A40(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&long long v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000) != 0 && v3 != 0;
}

BOOL sub_3A2B28(uint64_t a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (!v2) {
    return 0;
  }
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return 0;
  }
  if (*a2)
  {
    int v5 = *(_DWORD *)(*a2 + 144);
    BOOL v8 = v5 != 1885892674 && v5 != 1886152041 && v5 != 1886152047;
  }
  else
  {
    BOOL v8 = 0;
  }
  sub_4636C(v4);
  return v8;
}

void sub_3A2BA8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    long long v34 = (os_log_t *)sub_32A48(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)a2;
      LODWORD(v52) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v51);
      uint64_t v36 = v55 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 255;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v36;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)buf, 0x1Cu);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v38 = (os_log_t *)sub_32A48(13);
    uint64_t v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)a2;
      LODWORD(v52) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v51);
      uint64_t v40 = v55 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136316162;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 256;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v40;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = a3;
      HIWORD(buf[8]) = 2048;
      *(void *)&buf[9] = a4;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v41 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v41 = &off_6414D8;
    v41[2] = 561211770;
  }
  if (!a6)
  {
    char v42 = (os_log_t *)sub_32A48(13);
    uint64_t v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)a2;
      LODWORD(v52) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v51);
      CFStringRef v44 = v55 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136315906;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 257;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v44;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)buf, 0x26u);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
    }
    unsigned int v45 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v45 = &off_6414D8;
    v45[2] = 561211770;
  }
  if ((((uint64_t (*)(void **, uint64_t))(*a1)[3])(a1, a2) & 1) == 0)
  {
    uint64_t v46 = (os_log_t *)sub_32A48(13);
    uint64_t v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)a2;
      LODWORD(v52) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v51);
      uint64_t v48 = v55 >= 0 ? __p : (void **)__p[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 258;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v48;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", (uint8_t *)buf, 0x1Cu);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
    }
    char v49 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v49 = &off_6414D8;
    v49[2] = 1852797029;
  }
  if (*(_DWORD *)a2 == 1952609377)
  {
    uint64_t v12 = (uint64_t)a1[24];
    strcpy((char *)buf, "atbtbolg");
    BYTE1(buf[2]) = 0;
    HIWORD(buf[2]) = 0;
    unint64_t v13 = sub_99A40(v12);
    int v15 = v13;
    if (v13 || !v14)
    {
      uint64_t v50 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v50 = &off_6414D8;
      v50[2] = v15;
    }
    unint64_t v16 = HIDWORD(v13);
    if (*a6 != HIDWORD(v13))
    {
      uint64_t v17 = sub_32A48(23);
      uint64_t v18 = sub_32A48(28);
      char v19 = 0;
      uint64_t v20 = 0;
      *(void *)AudioBufferList buf = 0x100000002;
      uint64_t v21 = *(void *)(v17 + 8);
      while (1)
      {
        uint64_t v22 = (int)buf[v20];
        char v23 = v19;
        if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
          break;
        }
        char v19 = 1;
        uint64_t v20 = 1;
        if (v23)
        {
          if ((v21 & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_20;
        }
      }
      if ((v21 & v22) == 0) {
        uint64_t v17 = v18;
      }
      if (*(void *)(v17 + 8))
      {
LABEL_20:
        size_t v24 = *(NSObject **)v17;
        if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          int v25 = *a6;
          buf[0] = 136315906;
          *(void *)&buf[1] = "Port_BluetoothHFPOutput_Aspen.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 267;
          HIWORD(buf[4]) = 1024;
          buf[5] = v16;
          LOWORD(buf[6]) = 1024;
          *(_DWORD *)((char *)&buf[6] + 2) = v25;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d oldPropertyValue: %u; newValue: %u.",
            (uint8_t *)buf,
            0x1Eu);
        }
      }
LABEL_23:
      int v26 = a1[24];
      strcpy((char *)buf, "atbtbolg");
      BYTE1(buf[2]) = 0;
      HIWORD(buf[2]) = 0;
      (*(void (**)(void *, _DWORD *, uint64_t, uint64_t, uint64_t, int *))(*v26 + 48))(v26, buf, a3, a4, a5, a6);
      uint64_t v27 = (std::__shared_weak_count *)a1[11];
      int v56 = a1[10];
      std::string v57 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_DD9D0(&v51, (uint64_t *)&v56, 1);
      buf[0] = 1717793397;
      *(void *)&AudioObjectPropertyAddress buf[2] = &buf[2];
      *(void *)&uint8_t buf[4] = &buf[2];
      *(void *)&buf[6] = 0;
      uint64_t v28 = v53;
      if (v53)
      {
        uint64_t v30 = v51;
        uint64_t v29 = v52;
        uint64_t v31 = *v52;
        *(void *)(v31 + 8) = *(void *)(v51 + 8);
        **(void **)(v30 + 8) = v31;
        uint64_t v32 = *(void *)&buf[2];
        *(void *)(*(void *)&buf[2] + 8) = v29;
        *uint64_t v29 = v32;
        *(void *)&AudioObjectPropertyAddress buf[2] = v30;
        *(void *)(v30 + 8) = &buf[2];
        *(void *)&buf[6] = v28;
        uint64_t v53 = 0;
      }
      sub_FB3C0((uint64_t)__p, buf, 1);
      sub_8108((uint64_t *)&buf[2]);
      sub_8108(&v51);
      if (v57) {
        std::__shared_weak_count::__release_weak(v57);
      }
      uint64_t v33 = (_DWORD *)sub_10FBF0();
      sub_110B44(v33, __p, 0);
      sub_FB43C((void *)__p[1]);
    }
  }
  else
  {
    sub_275BFC(a1, a2, a3, a4, a5, (uint64_t)a6);
  }
}

void sub_3A33DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  sub_8108(v16);
  sub_8108(&a9);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3A3424(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    char v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)a2;
      int v27 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v26);
      unint64_t v16 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v31 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 237;
      __int16 v34 = 2080;
      uint64_t v35 = (const char *)v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)a2;
      int v27 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v26);
      uint64_t v20 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      uint64_t v31 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 238;
      __int16 v34 = 2080;
      uint64_t v35 = (const char *)v20;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = a3;
      WORD2(v37[0]) = 2048;
      *(void *)((char *)v37 + 6) = a4;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v21 = &off_6414D8;
    v21[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v22 = (os_log_t *)sub_32A48(13);
    char v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)a2;
      int v27 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v26);
      size_t v24 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      uint64_t v31 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 239;
      __int16 v34 = 2080;
      uint64_t v35 = "outData";
      __int16 v36 = 2080;
      v37[0] = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    int v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v25 = &off_6414D8;
    v25[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1952609377)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*a1[24] + 40);
    return v12();
  }
  else
  {
    return sub_276308(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sub_3A38D4(void **a1, int *a2, int a3, uint64_t a4)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)a2;
      int v19 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      uint64_t v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      char v23 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 216;
      __int16 v26 = 2080;
      int v27 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)a2;
      int v19 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      unint64_t v16 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      char v23 = "Port_BluetoothHFPOutput_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 217;
      __int16 v26 = 2080;
      int v27 = v16;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 2048;
      uint64_t v31 = a4;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v17 = &off_6414D8;
    v17[2] = 561211770;
  }
  if (*a2 == 1952609377)
  {
    BOOL v8 = *(uint64_t (**)(void))(*a1[24] + 32);
    return v8();
  }
  else
  {
    return sub_276B48(a1, a2, a3, a4);
  }
}

uint64_t sub_3A3C44(uint64_t a1, int *a2)
{
  if (*a2 == 1952609377) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))();
  }
  else {
    return sub_277150(a1, a2);
  }
}

uint64_t sub_3A3C84(void **a1, int *a2)
{
  if (*a2 == 1952609377) {
    return (*(uint64_t (**)(void))(*a1[24] + 16))();
  }
  else {
    return sub_277340(a1, a2);
  }
}

void sub_3A3CC4(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));
  sub_104C04((void *)a1);

  operator delete();
}

uint64_t sub_3A3D30(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));

  return sub_104C04((void *)a1);
}

void sub_3A3D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (sub_1151A0(*(uint64_t **)(a5 + 8), 1))
  {
    if (sub_1151A0(*(uint64_t **)(a5 + 8), 0))
    {
      uint64_t v7 = (uint64_t *)sub_115244(a5, 0);
      uint64_t v38 = sub_115244(a5, 1);
      sub_43F38(&v54, (uint64_t *)(v38 + 16), "", 64);
      sub_43F38(&v52, v7, "", 65);
      uint64_t v37 = v7;
      BOOL v8 = (unsigned int *)v52;
      int v9 = *(os_unfair_lock_s **)(v52 + 192);
      if (v9)
      {
        uint64_t v10 = v54;
        uint64_t v11 = *(unsigned int *)(v54 + 144);
        sub_1EE03C((uint64_t)&v51, *(void *)(v52 + 192), v52, a2, v37[7], *(_DWORD *)(a2 + 12));
        uint64_t v12 = v53;
        *(void *)AudioBufferList buf = v8;
        *(void *)&_DWORD buf[8] = v53;
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_1F3044((unsigned int **)&v51, (uint64_t *)buf, v9);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        unint64_t v13 = *(os_unfair_lock_s **)(v10 + 192);
        if (v13)
        {
          int v14 = (*(uint64_t (**)(void, uint64_t))(*(void *)&v13->_os_unfair_lock_opaque + 240))(*(void *)(v10 + 192), v11);
          uint64_t v49 = 0x6F7574706D757465;
          int v50 = v14;
          if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&v13->_os_unfair_lock_opaque
                                                                             + 24))(v13, &v49))
          {
            operator new();
          }
          sub_1EE408(v13, 1, *(_DWORD *)(a2 + 12), *(void *)(v38 + 56));
          sub_1ED500(&v48, v10, a2, *(void *)(v38 + 56), *(_DWORD *)(a2 + 12), 0);
          int v15 = v55;
          *(void *)AudioBufferList buf = v10;
          *(void *)&_DWORD buf[8] = v55;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          sub_1F3044((unsigned int **)&v48, (uint64_t *)buf, v13);
          if (v15) {
            std::__shared_weak_count::__release_weak(v15);
          }
          (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))(*(void *)&v13->_os_unfair_lock_opaque
                                                                                              + 248))(&v46, v13, 1, v11);
          (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))(*(void *)&v13->_os_unfair_lock_opaque
                                                                                              + 256))(&v45, v13, 1, v11);
          (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, void, void))(*(void *)&v9->_os_unfair_lock_opaque
                                                                                            + 256))(&v44, v9, 0, v8[36]);
          if (v47 && v47->__shared_owners_ != -1)
          {
            if (v9 != v13) {
              operator new();
            }
            uint64_t v39 = &v39;
            uint64_t v40 = &v39;
            uint64_t v41 = 0;
            if (v12) {
              atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v16 = operator new(0x20uLL);
            v16[2] = v8;
            v16[3] = v12;
            *unint64_t v16 = &v39;
            v16[1] = &v39;
            uint64_t v39 = v16;
            uint64_t v40 = v16;
            ++v41;
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v17 = operator new(0x20uLL);
            v17[2] = v10;
            v17[3] = v15;
            *uint64_t v17 = v16;
            v17[1] = &v39;
            v16[1] = v17;
            uint64_t v39 = v17;
            ++v41;
            operator new();
          }
          uint64_t v18 = (os_log_t *)sub_32A48(13);
          int v19 = *v18;
          if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioBufferList buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 105;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate mute control.\"", buf, 0x12u);
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Unable to locate mute control.");
        }
        __int16 v32 = (os_log_t *)sub_32A48(13);
        int v33 = *v32;
        if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 144))(&v39, v10);
          __int16 v34 = v39;
          sub_2417C(&v42, *(_DWORD *)(v10 + 144));
          if (v43 >= 0) {
            uint64_t v35 = &v42;
          }
          else {
            uint64_t v35 = v42;
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 87;
          __int16 v57 = 2112;
          int v58 = v34;
          __int16 v59 = 2080;
          uint64_t v60 = v35;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [outputIODevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
          if (SHIBYTE(v43) < 0) {
            operator delete(v42);
          }
          sub_72924((uint64_t)&v39);
        }
        __int16 v36 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v36 = &off_6414D8;
        v36[2] = 2003329396;
      }
      int v27 = (os_log_t *)sub_32A48(13);
      __int16 v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)v8 + 144))(&v39, v8);
        int v29 = v39;
        sub_2417C(&v42, v8[36]);
        if (v43 >= 0) {
          __int16 v30 = &v42;
        }
        else {
          __int16 v30 = v42;
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 75;
        __int16 v57 = 2112;
        int v58 = v29;
        __int16 v59 = 2080;
        uint64_t v60 = v30;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputIODevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
        if (SHIBYTE(v43) < 0) {
          operator delete(v42);
        }
        sub_72924((uint64_t)&v39);
      }
      uint64_t v31 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v31 = &off_6414D8;
      v31[2] = 2003329396;
    }
    __int16 v24 = (os_log_t *)sub_32A48(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 59;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    __int16 v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v26, "Precondition failure.");
  }
  char v21 = (os_log_t *)sub_32A48(13);
  uint64_t v22 = *v21;
  if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_Unk.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 58;
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
  }
  char v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v23, "Precondition failure.");
}

void sub_3A53D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_72924((uint64_t)&a29);
  uint64_t v31 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v31;
    operator delete(v31);
  }
  __int16 v32 = *(std::__shared_weak_count **)(v29 - 240);
  if (v32) {
    sub_4636C(v32);
  }
  int v33 = *(std::__shared_weak_count **)(v29 - 224);
  if (v33) {
    sub_4636C(v33);
  }
  _Unwind_Resume(a1);
}

void *sub_3A5854(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x276276276276277) {
      sub_60548();
    }
    double v6 = result;
    uint64_t result = sub_266688(a4);
    uint64_t v7 = result;
    *double v6 = result;
    v6[1] = result;
    v6[2] = &result[13 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_731B8(&v7[v9 / 8], (void *)(a2 + v9));
        v9 += 104;
      }
      while (a2 + v9 != a3);
      uint64_t v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_3A5910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_3A594C()
{
}

uint64_t sub_3A5964(uint64_t result)
{
  if (atomic_load((unint64_t *)(result + 8)))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v16.__sig) = 136315394;
      *(uint64_t *)((char *)&v16.__sig + 4) = (uint64_t)"CAPThread.cpp";
      *(_WORD *)&v16.__opaque[4] = 1024;
      *(_DWORD *)&v16.__opaque[6] = 248;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAPThread::Start: can't start because the thread is already running", (uint8_t *)&v16, 0x12u);
    }
    __break(1u);
  }
  if (!atomic_load((unint64_t *)(result + 8)))
  {
    uint64_t v3 = result;
    int v4 = pthread_attr_init(&v16);
    if (v4)
    {
      int v7 = v4;
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)AudioBufferList buf = 136315394;
      unint64_t v13 = "CAPThread.cpp";
      __int16 v14 = 1024;
      int v15 = 255;
      uint64_t v8 = "%25s:%-5d  CAPThread::Start: Thread attributes could not be created.";
    }
    else
    {
      int v5 = pthread_attr_setdetachstate(&v16, 2);
      if (v5)
      {
        int v7 = v5;
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_21;
        }
        *(_DWORD *)AudioBufferList buf = 136315394;
        unint64_t v13 = "CAPThread.cpp";
        __int16 v14 = 1024;
        int v15 = 258;
        uint64_t v8 = "%25s:%-5d  CAPThread::Start: A thread could not be created in the detached state.";
      }
      else
      {
        pthread_attr_getschedparam(&v16, &v11);
        v11.sched_priority = *(_DWORD *)(v3 + 104);
        pthread_attr_setschedparam(&v16, &v11);
        if (*(unsigned char *)(v3 + 122)) {
          pthread_attr_setschedpolicy(&v16, 4);
        }
        unint64_t v10 = 0;
        int v6 = pthread_create((pthread_t *)&v10, &v16, (void *(__cdecl *)(void *))sub_3A5C28, (void *)v3);
        if (!v6 && v10)
        {
          atomic_store(v10, (unint64_t *)(v3 + 8));
          return pthread_attr_destroy(&v16);
        }
        int v7 = v6;
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
LABEL_21:
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_6414D8;
          exception[2] = v7;
        }
        *(_DWORD *)AudioBufferList buf = 136315394;
        unint64_t v13 = "CAPThread.cpp";
        __int16 v14 = 1024;
        int v15 = 272;
        uint64_t v8 = "%25s:%-5d  CAPThread::Start: Could not create a thread.";
      }
    }
    _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, v8, buf, 0x12u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_3A5C28(uint64_t a1)
{
  kern_return_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  kern_return_t v9;
  unsigned char v11[5];
  integer_t policy_info[2];
  int v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  kern_return_t v20;
  __int16 v21;
  unsigned char *v22;

  atomic_store((unint64_t)pthread_self(), (unint64_t *)(a1 + 8));
  if (*(unsigned char *)(a1 + 40)) {
    pthread_setname_np((const char *)(a1 + 40));
  }
  if (*(unsigned char *)(a1 + 121))
  {
    *(unsigned char *)(a1 + 121) = 1;
    if (atomic_load((unint64_t *)(a1 + 8)))
    {
      *(void *)policy_info = *(void *)(a1 + 108);
      int v3 = *(unsigned __int8 *)(a1 + 120);
      unint64_t v13 = *(_DWORD *)(a1 + 116);
      __int16 v14 = v3;
      int v4 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 8));
      thread_act_t v5 = pthread_mach_thread_np(v4);
      int v6 = thread_policy_set(v5, 2u, policy_info, 4u);
      if (v6)
      {
        v11[0] = HIBYTE(v6);
        v11[1] = BYTE2(v6);
        v11[2] = BYTE1(v6);
        unint64_t v9 = v6;
        _DWORD v11[3] = v6;
        v11[4] = 0;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315906;
          pthread_attr_t v16 = "CAPThread.cpp";
          uint64_t v17 = 1024;
          uint64_t v18 = 219;
          int v19 = 1024;
          uint64_t v20 = v9;
          char v21 = 2080;
          uint64_t v22 = v11;
          _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAPThread::SetTimeConstraints: thread_policy_set failed, Error: %d (%s)", buf, 0x22u);
        }
        __break(1u);
        JUMPOUT(0x3A5D74);
      }
    }
  }
  int v7 = *(uint64_t (**)(void))(a1 + 24);
  if (v7) {
    uint64_t v8 = v7(*(void *)(a1 + 32));
  }
  else {
    uint64_t v8 = 0;
  }
  atomic_store(0, (unint64_t *)(a1 + 8));
  if (*(unsigned char *)(a1 + 123)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  return v8;
}

void sub_3A5DF0()
{
}

_opaque_pthread_t *sub_3A5E08(_opaque_pthread_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    mach_msg_type_number_t thread_info_outCnt = 10;
    thread_inspect_t v2 = pthread_mach_thread_np(result);
    thread_info(v2, 3u, thread_info_out, &thread_info_outCnt);
    switch(v11)
    {
      case 4:
        mach_msg_type_number_t thread_info_outCnt = 4;
        thread_inspect_t v4 = pthread_mach_thread_np(v1);
        thread_info(v4, 0xCu, v9, &thread_info_outCnt);
        return (_opaque_pthread_t *)v9[1];
      case 2:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v5 = pthread_mach_thread_np(v1);
        thread_info(v5, 0xBu, v8, &thread_info_outCnt);
        return (_opaque_pthread_t *)v8[1];
      case 1:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v3 = pthread_mach_thread_np(v1);
        thread_info(v3, 0xAu, v7, &thread_info_outCnt);
        return (_opaque_pthread_t *)v7[1];
      default:
        return 0;
    }
  }
  return result;
}

void sub_3A5EF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  thread_inspect_t v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  int v5 = *(char *)(a1 + 55);
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 55);
  }
  if (!v6)
  {
    snprintf(__str, 0x13uLL, "%p", (const void *)a1);
    sub_21C8C(&v11, __str);
    int v7 = std::string::insert(&v11, 0, "[ addr: ", 8uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = std::string::append(&v12, " ]", 2uLL);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::string::operator=((std::string *)(a1 + 32), &v13);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if ((*(unsigned char *)(a1 + 55) & 0x80) == 0) {
      goto LABEL_6;
    }
LABEL_14:
    sub_21E8C((unsigned char *)a2, *(void **)(a1 + 32), *(void *)(a1 + 40));
    goto LABEL_15;
  }
  if ((v5 & 0x80) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 16) = *(void *)(a1 + 48);
LABEL_15:
  os_unfair_lock_unlock(v4);
}

void sub_3A6068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  os_unfair_lock_unlock(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_3A60D0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) & 1) == 0)
  {
    pthread_attr_t v16 = (os_log_t *)sub_32A48(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int16 v34 = "HP_Object.cpp";
      __int16 v35 = 1024;
      int v36 = 245;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"address isn't settable\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (*a2 == 1818850162)
  {
    if (a5 != 12)
    {
      uint64_t v22 = (os_log_t *)sub_32A48(13);
      char v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        __int16 v34 = "HP_Object.cpp";
        __int16 v35 = 1024;
        int v36 = 254;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyListenerRemoved\"", buf, 0x12u);
      }
      __int16 v24 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v24 = &off_6414D8;
      v24[2] = 561211770;
    }
    long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88);
    uint64_t v11 = a1;
    uint64_t v12 = a6;
    return v10(v11, v12);
  }
  if (*a2 == 1818850145)
  {
    if (a5 != 12)
    {
      int v19 = (os_log_t *)sub_32A48(13);
      uint64_t v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        __int16 v34 = "HP_Object.cpp";
        __int16 v35 = 1024;
        int v36 = 249;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyListenerAdded\"", buf, 0x12u);
      }
      char v21 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v21 = &off_6414D8;
      v21[2] = 561211770;
    }
    long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80);
    uint64_t v11 = a1;
    uint64_t v12 = a6;
    return v10(v11, v12);
  }
  uint64_t v14 = sub_3A6620(a1, a2);
  if (!v14)
  {
    int v25 = (os_log_t *)sub_32A48(13);
    __int16 v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)a2;
      int v30 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v29);
      int v27 = v32 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v34 = "HP_Object.cpp";
      __int16 v35 = 1024;
      int v36 = 267;
      __int16 v37 = 2080;
      uint64_t v38 = v27;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"unknown property %s.\"", buf, 0x1Cu);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v28 = &off_6414D8;
    v28[2] = 2003332927;
  }
  int v15 = *(uint64_t (**)(void))(*(void *)v14 + 48);

  return v15();
}

uint64_t sub_3A6620(uint64_t a1, _DWORD *a2)
{
  for (uint64_t i = *(void *)(a1 + 56); i != *(void *)(a1 + 64); i += 24)
  {
    if (sub_668FC((int *)i, a2)
      && (*(unsigned int (**)(void, _DWORD *))(**(void **)(i + 16) + 16))(*(void *)(i + 16), a2))
    {
      uint64_t result = *(void *)(i + 16);
    }
    else
    {
      uint64_t result = 0;
    }
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_3A66B8(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  if (*a2 == 1818850162 || *a2 == 1818850145)
  {
    if (*a5 != 12)
    {
      long long v10 = (os_log_t *)sub_32A48(13);
      uint64_t v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v22 = "HP_Object.cpp";
        __int16 v23 = 1024;
        int v24 = 223;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioObjectPropertyListenerAdded/kAudioObjectPropertyListenerRemoved\"", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    *(_DWORD *)(a6 + 8) = 0;
    *(void *)a6 = 0;
  }
  else
  {
    uint64_t v8 = sub_3A6620(result, a2);
    if (!v8)
    {
      std::string v13 = (os_log_t *)sub_32A48(13);
      uint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)a2;
        int v18 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
        int v15 = v20 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioBufferList buf = 136315650;
        uint64_t v22 = "HP_Object.cpp";
        __int16 v23 = 1024;
        int v24 = 236;
        __int16 v25 = 2080;
        __int16 v26 = v15;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"unknown property %s.\"", buf, 0x1Cu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      pthread_attr_t v16 = __cxa_allocate_exception(0x10uLL);
      *(void *)pthread_attr_t v16 = &off_6414D8;
      v16[2] = 2003332927;
    }
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 40);
    return v9();
  }
  return result;
}

uint64_t sub_3A69A4(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1818850145 || *a2 == 1818850162) {
    return 12;
  }
  uint64_t v5 = sub_3A6620(a1, a2);
  if (!v5)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)a2;
      int v12 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v11);
      unint64_t v9 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      pthread_attr_t v16 = "HP_Object.cpp";
      __int16 v17 = 1024;
      int v18 = 208;
      __int16 v19 = 2080;
      char v20 = v9;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"unknown property %s.\"", buf, 0x1Cu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 32);

  return v6();
}

uint64_t sub_3A6BA8(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1818850145 || *a2 == 1818850162) {
    return 1;
  }
  uint64_t v4 = sub_3A6620(a1, a2);
  if (!v4)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      long long v10 = "HP_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 179;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"unknown property\"", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 24);

  return v5();
}

BOOL sub_3A6D3C(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1818850145 || *a2 == 1818850162 || sub_3A6620(a1, a2) != 0;
}

uint64_t sub_3A6D84(_DWORD *a1, uint8x8_t a2)
{
  a2.i32[0] = a1[3];
  int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
  *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
  unsigned __int32 v10 = vmovn_s16(v3).u32[0];
  char v11 = 0;
  uint64_t v8 = 0x676C6F626C6E616DLL;
  int v9 = 0;
  CFStringRef theString = 0;
  int v6 = 8;
  (*(void (**)(_DWORD *, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56))(a1, &v8, 0, 0, &v6, &theString);
  buffer[0] = 0;
  if (theString)
  {
    CFIndex usedBufLen = 0;
    v13.length = CFStringGetLength(theString);
    v13.location = 0;
    CFStringGetBytes(theString, v13, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }
  return printf("AudioObjectID:\t\t0x%X\n\tAudioClassID:\t'%s'\n\tName:\t\t\t%s\n", a1[2], (const char *)&v10, (const char *)buffer);
}

void sub_3A6EC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x3A6E1CLL);
  }
  _Unwind_Resume(a1);
}

void sub_3A6EDC(uint64_t a1)
{
  sub_3A6F14(a1);

  operator delete();
}

uint64_t sub_3A6F14(uint64_t a1)
{
  *(void *)a1 = off_6380B8;
  sub_3A8A8();
  sub_32E8B0(a1);
  thread_inspect_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t sub_3A6F88(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

void sub_3A6FC8(void *a1)
{
}

uint64_t sub_3A6FFC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
}

void sub_3A703C(void *a1)
{
}

uint64_t sub_3A7070(uint64_t a1)
{
  return 0;
}

void sub_3A70B4(void *a1)
{
}

uint64_t sub_3A70E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return 0;
}

void sub_3A7130(void *a1)
{
}

uint64_t sub_3A7164(uint64_t result, int a2, int a3, uint64_t a4)
{
  *(void *)uint64_t result = off_6380B8;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(void *)(result + 16) = a4;
  *(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  if (a2)
  {
    sub_3A8A8();
    sub_32E2F0();
  }
  return result;
}

void sub_3A71E0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v1 + 56);
  if (v4)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_3A720C(void *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  if (v4)
  {
    int v5 = v4;
    uint64_t v6 = 0;
    do
    {
      uint64_t v23 = 0x676C6F6200000000;
      int v24 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 64))(a2, v6, &v23);
      int v7 = (int *)a1[7];
      unint64_t v8 = a1[8];
      if ((int *)v8 != sub_3A74E8(v7, (int *)v8, &v23))
      {
        char v20 = (os_log_t *)sub_32A48(13);
        char v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          __int16 v26 = "HP_Object.cpp";
          __int16 v27 = 1024;
          int v28 = 336;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"redefined address\"", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 1852797029;
      }
      unint64_t v9 = a1[9];
      if (v9 <= v8)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v7) >> 3) + 1;
        if (v12 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14 > 0xAAAAAAAAAAAAAAALL) {
          sub_60560();
        }
        int v15 = (char *)operator new(24 * v14);
        pthread_attr_t v16 = &v15[8 * ((uint64_t)(v8 - (void)v7) >> 3)];
        *(void *)pthread_attr_t v16 = v23;
        *((_DWORD *)v16 + 2) = v24;
        *((void *)v16 + 2) = a2;
        __int16 v17 = v16;
        while ((int *)v8 != v7)
        {
          uint64_t v18 = *(void *)(v8 - 24);
          v8 -= 24;
          int v19 = *(_DWORD *)(v8 + 8);
          *((void *)v17 - 3) = v18;
          v17 -= 24;
          *((_DWORD *)v17 + 2) = v19;
          *((void *)v17 + 2) = *(void *)(v8 + 16);
        }
        char v11 = v16 + 24;
        a1[7] = v17;
        a1[8] = v16 + 24;
        a1[9] = &v15[24 * v14];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        uint64_t v10 = v23;
        *(_DWORD *)(v8 + 8) = v24;
        *(void *)unint64_t v8 = v10;
        *(void *)(v8 + 16) = a2;
        char v11 = (char *)(v8 + 24);
      }
      a1[8] = v11;
      uint64_t v6 = (v6 + 1);
    }
    while (v6 != v5);
  }
}

int *sub_3A74E8(int *a1, int *a2, _DWORD *a3)
{
  int16x8_t v3 = a1;
  if (a1 != a2)
  {
    do
    {
      if (sub_668FC(v3, a3)) {
        uint64_t v6 = v3;
      }
      else {
        uint64_t v6 = a2;
      }
      v3 += 6;
    }
    while (v6 == a2 && v3 != a2);
    return v6;
  }
  return v3;
}

int *sub_3A754C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  if (result)
  {
    int v5 = (int)result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v11 = 0x676C6F6200000000;
      int v12 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 64))(a2, v6, &v11);
      int v7 = *(int **)(a1 + 64);
      uint64_t result = sub_3A74E8(*(int **)(a1 + 56), v7, &v11);
      if (v7 != result)
      {
        if (result + 6 != v7)
        {
          unint64_t v8 = result;
          do
          {
            uint64_t v9 = *((void *)v8 + 3);
            v8 += 6;
            *(void *)uint64_t result = v9;
            result[2] = result[8];
            *((void *)result + 2) = *((void *)result + 5);
            uint64_t v10 = result + 12;
            uint64_t result = v8;
          }
          while (v10 != v7);
          uint64_t result = v8;
        }
        *(void *)(a1 + 64) = result;
      }
      uint64_t v6 = (v6 + 1);
    }
    while (v6 != v5);
  }
  return result;
}

void sub_3A7668(uint64_t a1, int *a2)
{
  long long v104 = &v104;
  long long v105 = &v104;
  uint64_t v106 = 0;
  v103[1] = 0;
  v103[0] = 0;
  long long v102 = v103;
  memset(v101, 0, sizeof(v101));
  uint64_t v2 = sub_32A48(19);
  if (*(unsigned char *)(v2 + 8))
  {
    int16x8_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v4 = *(void *)(*(void *)a2 + 32);
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 94;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v4;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Connection list size %lu.", buf, 0x1Cu);
      }
    }
  }
  int v5 = *(void **)(*(void *)a2 + 24);
  if (v5 == (void *)(*(void *)a2 + 16))
  {
LABEL_136:
    if (v106)
    {
      CFStringRef v68 = v105;
      if (&v104 != v105)
      {
        *(void *)AudioBufferList buf = buf;
        *(void *)&_DWORD buf[8] = buf;
        char v69 = 1;
        *(void *)&buf[16] = 0;
        while (1)
        {
          char v70 = v69;
          if (v69) {
            uint64_t v71 = 3;
          }
          else {
            uint64_t v71 = 6;
          }
          if (v69) {
            uint64_t v72 = v68 + 3;
          }
          else {
            uint64_t v72 = v68 + 6;
          }
          uint64_t v73 = v68[v71];
          if (v72[1] != v73)
          {
            uint64_t v74 = 0;
            unsigned int v75 = 1;
            do
            {
              sub_146750(buf, (uint64_t *)buf, *(void **)(v73 + 24 * v74 + 8), (void *)(v73 + 24 * v74));
              uint64_t v74 = v75;
              uint64_t v73 = v68[v71];
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v72[1] - v73) >> 3) > v75++);
          }
          char v69 = 0;
          if ((v70 & 1) == 0)
          {
            sub_1F2704(a2[3]);
            operator new();
          }
        }
      }
      sub_115434(&v99, *(_DWORD *)(a1 + 8), (unsigned int *)a2, (unsigned int **)v101);
      sub_1F2A88((uint64_t)&v104);
      operator new();
    }
    uint64_t v89 = (os_log_t *)sub_32A48(13);
    uint64_t v90 = *v89;
    if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 237;
      _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"could not get any IO devices for multi route\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  while (1)
  {
    sub_43F38(&v99, v5 + 2, "", 97);
    sub_43F38(&v110, v5 + 4, "", 98);
    int v96 = (os_unfair_lock_s *)v99;
    int v6 = *(_DWORD *)(v99 + 144);
    if (v6 == 1885433888)
    {
      int v7 = &v110;
    }
    else
    {
      uint64_t v8 = v110;
      if (*(_DWORD *)(v110 + 144) != 1885433888)
      {
        unint64_t v82 = (os_log_t *)sub_32A48(13);
        long long v83 = *v82;
        if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v117, v96[36]._os_unfair_lock_opaque);
          int v84 = v118;
          uint64_t v85 = *(uint8_t **)v117;
          sub_2417C(__src, *(_DWORD *)(v8 + 144));
          int v86 = v117;
          if (v84 < 0) {
            int v86 = v85;
          }
          if (v121 >= 0) {
            std::string v87 = __src;
          }
          else {
            std::string v87 = *(uint8_t **)__src;
          }
          *(_DWORD *)AudioBufferList buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 105;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v86;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&unsigned char buf[30] = v87;
          _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Database error: encountered a connection for which neither source nor destination is kVirtualAudioPortTypeAP (src: \" \"%s; dst: %s).\"",
            buf,
            0x26u);
          if (v121 < 0) {
            operator delete(*(void **)__src);
          }
          if (v118 < 0) {
            operator delete(*(void **)v117);
          }
        }
        char v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v88, "Database error: encountered a connection for which neither source nor destination is kVirtualAudioPortTypeAP (src: %s; dst: %s).");
      }
      int v7 = &v99;
    }
    unsigned int v97 = *(_DWORD *)(*v7 + 144);
    sub_6CB40((uint64_t *)&v102, v97, v97);
    uint64_t v9 = sub_32A48(19);
    if (*(unsigned char *)(v9 + 8))
    {
      uint64_t v10 = *(NSObject **)v9;
      if (*(void *)v9)
      {
        if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
        {
          sub_382124(v117, v5 + 2);
          uint64_t v11 = v117;
          if (v118 < 0) {
            uint64_t v11 = *(uint8_t **)v117;
          }
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 114;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v11;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Processing connection %s.", buf, 0x1Cu);
          if (v118 < 0) {
            operator delete(*(void **)v117);
          }
        }
      }
    }
    int v12 = *(os_unfair_lock_s **)(*v7 + 192);
    if (!v12)
    {
      __int16 v77 = (os_log_t *)sub_32A48(13);
      __int16 v78 = *v77;
      if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(uint8_t *__return_ptr))(*(void *)*v7 + 144))(__src);
        __int16 v79 = *(uint8_t **)__src;
        sub_2417C(v117, *(_DWORD *)(*v7 + 144));
        if (v118 >= 0) {
          unint64_t v80 = v117;
        }
        else {
          unint64_t v80 = *(uint8_t **)v117;
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 123;
        *(_WORD *)&unsigned char buf[18] = 2112;
        *(void *)&buf[20] = v79;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&unsigned char buf[30] = v80;
        _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: %s).\"", buf, 0x26u);
        if (v118 < 0) {
          operator delete(*(void **)v117);
        }
        sub_72924((uint64_t)__src);
      }
      __int16 v81 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v81 = &off_6414D8;
      v81[2] = 2003329396;
    }
    if (*(_DWORD *)(*v7 + 264) == 1752709424) {
      sub_1F2870(a2[3], *(void *)(*v7 + 192));
    }
    if (v6 == 1885433888)
    {
      sub_1ED500(v117, v110, (uint64_t)a2, v5[9], a2[3], 0);
    }
    else
    {
      sub_85F24();
      if (byte_64A0E0)
      {
        BOOL v13 = (unsigned __int16)sub_376E5C(*((void *)a2 + 13), a2[3], v97) > 0x100u;
        uint64_t v14 = v99;
        sub_1F28E8(v13, *(void *)(v99 + 192));
        uint64_t v15 = v14;
      }
      else
      {
        uint64_t v15 = v99;
      }
      int v96 = (os_unfair_lock_s *)v15;
      sub_1EE03C((uint64_t)v117, (uint64_t)v12, v15, (uint64_t)a2, v5[9], a2[3]);
      *(void *)__src = 0;
      uint64_t v120 = 0;
      pthread_attr_t v16 = (std::__shared_weak_count *)v5[3];
      if (v16)
      {
        __int16 v17 = std::__shared_weak_count::lock(v16);
        uint64_t v18 = v17;
        if (v17)
        {
          uint64_t v19 = v5[2];
          atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          *(void *)__src = v19;
          uint64_t v120 = v17;
          sub_4636C(v17);
        }
        else
        {
          *(void *)__src = 0;
          uint64_t v120 = 0;
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      sub_1F4188((uint64_t)buf, (uint64_t)v117, (uint64_t *)__src);
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
      char v20 = *(__int32 **)buf;
      char v21 = *(__int32 **)&buf[8];
      if (*(void *)buf != *(void *)&buf[8])
      {
        do
          sub_72D08((uint64_t)v101, v20++);
        while (v20 != v21);
        char v20 = *(__int32 **)buf;
      }
      if (v20)
      {
        *(void *)&_DWORD buf[8] = v20;
        operator delete(v20);
      }
    }
    uint64_t v22 = v105;
    if (v105 == &v104) {
      goto LABEL_41;
    }
    do
    {
      uint64_t v23 = (uint64_t **)v22;
      __int16 v25 = v22 + 1;
      uint64_t v22 = (void *)v22[1];
      int v24 = (os_unfair_lock_s *)v25[1];
    }
    while (v24 != v12 && v22 != &v104);
    if (v24 == v12)
    {
      uint64_t v44 = sub_32A48(19);
      if (*(unsigned char *)(v44 + 8))
      {
        uint64_t v45 = *(NSObject **)v44;
        if (*(void *)v44)
        {
          if (os_log_type_enabled(*(os_log_t *)v44, OS_LOG_TYPE_DEBUG))
          {
            sub_4F64((uint64_t)__src, v12 + 2);
            if (v121 >= 0) {
              uint64_t v46 = __src;
            }
            else {
              uint64_t v46 = *(uint8_t **)__src;
            }
            sub_4F64((uint64_t)&__p, (os_unfair_lock_t)(*v7 + 8));
            int v47 = v109;
            uint64_t v48 = (void **)__p;
            sub_89C0C(&v107, *(unsigned int **)v117, *(unsigned int **)&v117[8]);
            p_p = &__p;
            if (v47 < 0) {
              p_p = v48;
            }
            int v50 = &v107;
            if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v50 = (std::string *)v107.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioBufferList buf = 136316162;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 159;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v46;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&unsigned char buf[30] = p_p;
            __int16 v113 = 2080;
            AudioObjectPropertyAddress v114 = v50;
            _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Located device description for device %s. Adding support for port %s and sub-ports %s.", buf, 0x30u);
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v107.__r_.__value_.__l.__data_);
            }
            if (v109 < 0) {
              operator delete(__p);
            }
            if (v121 < 0) {
              operator delete(*(void **)__src);
            }
          }
        }
      }
      int v95 = v5;
      uint64_t v51 = 0;
      unint64_t v52 = 0;
      if (v6 == 1885433888) {
        uint64_t v53 = 6;
      }
      else {
        uint64_t v53 = 3;
      }
      int v93 = v100;
      int v94 = v111;
      if (v6 == 1885433888) {
        uint64_t v54 = v111;
      }
      else {
        uint64_t v54 = v100;
      }
      while (v52 < (*(unsigned int (**)(os_unfair_lock_s *, BOOL))(*(void *)&v12->_os_unfair_lock_opaque
                                                                             + 88))(v12, v6 == 1885433888))
      {
        char v55 = v23[v53];
        uint64_t v56 = *v7;
        if (v54) {
          atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        __int16 v57 = operator new(0x20uLL);
        v57[2] = v56;
        v57[3] = v54;
        v57[1] = &v55[v51];
        int v58 = &v55[v51];
        uint64_t v59 = v55[v51];
        *__int16 v57 = v59;
        *(void *)(v59 + 8) = v57;
        *int v58 = (uint64_t)v57;
        v58[2] = v55[v51 + 2] + 1;
        ++v52;
        v51 += 3;
      }
      if (v6 != 1885433888)
      {
        sub_3ABAC4(buf, (uint64_t)v96, (uint64_t)v93, (uint64_t)v117);
        int v5 = v95;
        sub_211E94(v23 + 9, (uint64_t)buf);
        if (*(void *)&buf[16])
        {
          *(void *)&unsigned char buf[24] = *(void *)&buf[16];
          operator delete(*(void **)&buf[16]);
        }
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        goto LABEL_119;
      }
      sub_3ABAC4(buf, v110, (uint64_t)v94, (uint64_t)v117);
      int v5 = v95;
      sub_211E94(v23 + 12, (uint64_t)buf);
      if (*(void *)&buf[16])
      {
        *(void *)&unsigned char buf[24] = *(void *)&buf[16];
        operator delete(*(void **)&buf[16]);
      }
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v32 = v110;
    }
    else
    {
LABEL_41:
      if (v6 != 1885433888)
      {
        uint64_t v34 = sub_32A48(19);
        if ((*(unsigned char *)(v34 + 8) & 1) != 0
          && (__int16 v35 = *(NSObject **)v34) != 0
          && os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
        {
          sub_4F64((uint64_t)__src, v12 + 2);
          if (v121 >= 0) {
            int v36 = __src;
          }
          else {
            int v36 = *(uint8_t **)__src;
          }
          sub_4F64((uint64_t)&__p, v96 + 2);
          int v37 = v109;
          uint64_t v38 = (void **)__p;
          sub_89C0C(&v107, *(unsigned int **)v117, *(unsigned int **)&v117[8]);
          uint64_t v39 = &__p;
          if (v37 < 0) {
            uint64_t v39 = v38;
          }
          uint64_t v40 = &v107;
          if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v40 = (std::string *)v107.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioBufferList buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 179;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v36;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&unsigned char buf[30] = v39;
          __int16 v113 = 2080;
          AudioObjectPropertyAddress v114 = v40;
          _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding device description for device %s using port %s and sub-ports %s.", buf, 0x30u);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
          if (v109 < 0) {
            operator delete(__p);
          }
          if (v121 < 0) {
            operator delete(*(void **)__src);
          }
          uint64_t v41 = v99;
        }
        else
        {
          uint64_t v41 = (uint64_t)v96;
        }
        sub_212424((uint64_t *)buf, (uint64_t)v12, v41, (uint64_t)v117);
        char v42 = sub_73164(buf);
        uint64_t v43 = v104;
        void *v42 = v104;
        v42[1] = &v104;
        v43[1] = v42;
        long long v104 = v42;
        ++v106;
        sub_73038(*((void **)&v116 + 1));
        sub_73038((void *)v115);
        *(void *)__src = &buf[32];
        sub_7308C((void ***)__src);
        *(void *)__src = &buf[8];
        sub_7308C((void ***)__src);
        goto LABEL_119;
      }
      uint64_t v26 = sub_32A48(19);
      if (*(unsigned char *)(v26 + 8))
      {
        __int16 v27 = *(NSObject **)v26;
        if (*(void *)v26)
        {
          if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
          {
            sub_4F64((uint64_t)__src, v12 + 2);
            int v28 = v121;
            uint64_t v29 = *(uint8_t **)__src;
            sub_4F64((uint64_t)&__p, (os_unfair_lock_t)(v110 + 8));
            int v30 = __src;
            if (v28 < 0) {
              int v30 = v29;
            }
            uint64_t v31 = &__p;
            if (v109 < 0) {
              uint64_t v31 = __p;
            }
            *(_DWORD *)AudioBufferList buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Multi_GenericConfig1.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 185;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v30;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&unsigned char buf[30] = v31;
            _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding device description for device %s using port %s.", buf, 0x26u);
            if (v109 < 0) {
              operator delete(__p);
            }
            if (v121 < 0) {
              operator delete(*(void **)__src);
            }
          }
        }
      }
      if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v12->_os_unfair_lock_opaque + 88))(v12, 1) == 1)
      {
        uint64_t v32 = v110;
        sub_2109D0(buf, (uint64_t)v12, v110);
        int v33 = operator new(0x78uLL);
      }
      else
      {
        unsigned int v60 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v12->_os_unfair_lock_opaque + 88))(v12, 1);
        uint64_t v32 = v110;
        if (v60 < 2) {
          goto LABEL_109;
        }
        sub_211124((uint64_t *)buf, (uint64_t)v12, v110);
        int v33 = operator new(0x78uLL);
      }
      BOOL v61 = v33;
      *int v33 = 0;
      v33[1] = 0;
      sub_25A610(v33 + 2, (uint64_t)buf);
      unint64_t v62 = v104;
      void *v61 = v104;
      v61[1] = &v104;
      v62[1] = v61;
      long long v104 = v61;
      ++v106;
      sub_73038(*((void **)&v116 + 1));
      sub_73038((void *)v115);
      *(void *)__src = &buf[32];
      sub_7308C((void ***)__src);
      *(void *)__src = &buf[8];
      sub_7308C((void ***)__src);
    }
LABEL_109:
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(v32 + 192) + 128))(buf);
    if (CFEqual(*(CFStringRef *)buf, @"Codec"))
    {
      sub_72924((uint64_t)buf);
LABEL_113:
      int v64 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v12->_os_unfair_lock_opaque + 240))(v12, v97);
      *(void *)AudioBufferList buf = 0x6F7574706D757465;
      *(_DWORD *)&_DWORD buf[8] = v64;
      if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v12->_os_unfair_lock_opaque + 16))(v12, buf))
      {
        operator new();
      }
      goto LABEL_119;
    }
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(v32 + 192) + 128))(__src);
    CFComparisonResult v63 = CFStringCompare(*(CFStringRef *)__src, @"Receiver", 0);
    sub_72924((uint64_t)__src);
    sub_72924((uint64_t)buf);
    if (v63 == kCFCompareEqualTo) {
      goto LABEL_113;
    }
LABEL_119:
    if (qword_64BB40 != -1) {
      dispatch_once(&qword_64BB40, &stru_623678);
    }
    if (v6 == 1885433888)
    {
      if (byte_64BB38)
      {
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(v110 + 192) + 128))(buf);
        CFComparisonResult v65 = CFStringCompare(*(CFStringRef *)buf, @"Actuator", 0);
        sub_72924((uint64_t)buf);
        if (v65 == kCFCompareEqualTo)
        {
          int v66 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v12->_os_unfair_lock_opaque + 240))(v12, v97);
          *(void *)AudioBufferList buf = 0x6F7574706D757465;
          *(_DWORD *)&_DWORD buf[8] = v66;
          if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v12->_os_unfair_lock_opaque
                                                                           + 16))(v12, buf))
          {
            operator new();
          }
        }
      }
    }
    if (sub_36B4A4((uint64_t)v12))
    {
      int v67 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v12->_os_unfair_lock_opaque + 240))(v12, v97);
      *(void *)AudioBufferList buf = 0x6F7574706D757465;
      *(_DWORD *)&_DWORD buf[8] = v67;
      if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v12->_os_unfair_lock_opaque + 16))(v12, buf))
      {
        operator new();
      }
    }
    sub_1EE408(v12, v6 == 1885433888, a2[3], v5[9]);
    if (*(void *)v117)
    {
      *(void *)&v117[8] = *(void *)v117;
      operator delete(*(void **)v117);
    }
    if (v111) {
      sub_4636C(v111);
    }
    if (v100) {
      sub_4636C(v100);
    }
    int v5 = (void *)v5[1];
    if (v5 == (void *)(*(void *)a2 + 16)) {
      goto LABEL_136;
    }
  }
}

void sub_3AB348()
{
  __cxa_free_exception(v0);
  operator delete();
}

void sub_3AB818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a2)
  {
    uint64_t v40 = *(std::__shared_weak_count **)(v38 - 208);
    if (v40) {
      sub_4636C(v40);
    }
    __cxa_begin_catch(a1);
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)a38 + 120))(a38);
    sub_329688(v41);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_3AB864()
{
  if (v0) {
    JUMPOUT(0x3AB870);
  }
  JUMPOUT(0x3AB894);
}

void sub_3AB880()
{
  if (STACK[0x280])
  {
    STACK[0x288] = STACK[0x280];
    JUMPOUT(0x3AB890);
  }
  JUMPOUT(0x3AB894);
}

void sub_3AB8F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    if (STACK[0x278]) {
      JUMPOUT(0x3AB9B0);
    }
    JUMPOUT(0x3AB9C0);
  }
  _Unwind_Resume(a1);
}

void sub_3AB90C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    int v5 = *(std::__shared_weak_count **)(v3 - 208);
    if (v5) {
      sub_4636C(v5);
    }
    __cxa_begin_catch(a1);
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v2);
    sub_329688(v6);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_3AB924(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x3AB974);
}

void sub_3AB93C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x3AB974);
}

void sub_3AB94C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 - 208);
    if (v3) {
      sub_4636C(v3);
    }
    if (STACK[0x278]) {
      JUMPOUT(0x3AB9B0);
    }
    JUMPOUT(0x3AB9C0);
  }
  _Unwind_Resume(a1);
}

void sub_3AB96C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)STACK[0x258];
    if (STACK[0x258])
    {
      STACK[0x260] = (unint64_t)v4;
      operator delete(v4);
    }
    if (STACK[0x278]) {
      JUMPOUT(0x3AB9B0);
    }
    __cxa_begin_catch(a1);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v2);
    sub_329688(v5);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_3AB9A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x3AB9A8);
  }
  _Unwind_Resume(a1);
}

void sub_3AB9B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x3AB9C0);
  }
  _Unwind_Resume(a1);
}

void sub_3AB9FC()
{
}

void sub_3ABAAC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x3ABAB4);
  }
  sub_564E4(a1);
}

void *sub_3ABAC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_46B38(a1 + 2, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_3ABB18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_4636C(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_3ABB30()
{
}

void sub_3ABB48(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, __CFString *a4, int *a5, void *a6)
{
  if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1) & 1) == 0)
  {
    uint64_t v31 = (os_log_t *)sub_32A48(13);
    uint64_t v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      int v58 = *(void **)a2;
      int v59 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v58);
      int v33 = v65 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v67 = 1024;
      int v68 = 404;
      __int16 v69 = 2080;
      char v70 = (const char *)v33;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v35 = (os_log_t *)sub_32A48(13);
    int v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      int v58 = *(void **)a2;
      int v59 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v58);
      int v37 = v65 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v67 = 1024;
      int v68 = 405;
      __int16 v69 = 2080;
      char v70 = (const char *)v37;
      __int16 v71 = 1024;
      *(_DWORD *)uint64_t v72 = a3;
      *(_WORD *)&v72[4] = 2048;
      *(void *)&v72[6] = a4;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v38 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v38 = &off_6414D8;
    v38[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v39 = (os_log_t *)sub_32A48(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      int v58 = *(void **)a2;
      int v59 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v58);
      int v41 = v65 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v67 = 1024;
      int v68 = 406;
      __int16 v69 = 2080;
      char v70 = "outData";
      __int16 v71 = 2080;
      *(void *)uint64_t v72 = v41;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    char v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v42 = &off_6414D8;
    v42[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1936879204 || *(_DWORD *)a2 == 1936876644)
  {
    if (!*(void *)&a1[50]._os_unfair_lock_opaque)
    {
      uint64_t v29 = (os_log_t *)sub_32A48(13);
      int v30 = *v29;
      if (*v29)
      {
        if (os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
          __int16 v67 = 1024;
          int v68 = 413;
          _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty should have blocked this code path because there are no physical devices in the aggregate.\"", buf, 0x12u);
        }
      }
    }
    *(void *)AudioBufferList buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = *(_DWORD *)(a2 + 8);
    sub_3AC518(&v63, a1, (unsigned int *)buf);
    BOOL v13 = v63;
    if (!v63)
    {
      uint64_t v43 = (os_log_t *)sub_32A48(13);
      uint64_t v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        BOOL v61 = *(void **)a2;
        int v62 = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v61);
        int v45 = v65;
        uint64_t v46 = (void **)__p[0];
        sub_4F64((uint64_t)&v58, a1 + 2);
        int v47 = __p;
        if (v45 < 0) {
          int v47 = v46;
        }
        if (v60 >= 0) {
          uint64_t v48 = &v58;
        }
        else {
          uint64_t v48 = v58;
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v67 = 1024;
        int v68 = 417;
        __int16 v69 = 2080;
        char v70 = (const char *)v47;
        __int16 v71 = 2080;
        *(void *)uint64_t v72 = v48;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Could not create AudioChannelLayout for address %s on multi-Route aggregate %s\"", buf, 0x26u);
        if (v60 < 0) {
          operator delete(v58);
        }
        if (v65 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v49 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v49 = &off_6414D8;
      v49[2] = 2003329396;
    }
    if (*(_DWORD *)v63)
    {
      int v50 = (os_log_t *)sub_32A48(13);
      uint64_t v51 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v67 = 1024;
        int v68 = 420;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      unint64_t v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v52, "Precondition failure.");
    }
    int v14 = sub_A313C(*((_DWORD *)v63 + 2));
    unsigned int v15 = sub_A31B4(v14);
    unsigned int v16 = v15;
    if (v15 > *a5)
    {
      uint64_t v53 = (os_log_t *)sub_32A48(13);
      uint64_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
      {
        int v58 = *(void **)a2;
        int v59 = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v58);
        char v55 = v65 >= 0 ? __p : (void **)__p[0];
        int v56 = *a5;
        *(_DWORD *)AudioBufferList buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v67 = 1024;
        int v68 = 422;
        __int16 v69 = 2080;
        char v70 = (const char *)v55;
        __int16 v71 = 1024;
        *(_DWORD *)uint64_t v72 = v56;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&v72[6] = v16;
        _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"HAL Precondition failure: Provided data size for property %s was too small (passed: %u; minimum: %u).\"",
          buf,
          0x28u);
        if (v65 < 0) {
          operator delete(__p[0]);
        }
      }
      __int16 v57 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v57 = &off_6414D8;
      v57[2] = 561211770;
    }
    *a5 = v15;
    memcpy(a6, v13, v15);
    free(v13);
  }
  else
  {
    sub_34FF84(&a1->_os_unfair_lock_opaque, a2, a3, a4, a5, (int *)a6);
  }
  if (*(_DWORD *)a2 == 1853059700)
  {
    uint64_t v17 = sub_32A48(16);
    uint64_t v18 = sub_32A48(36);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)AudioBufferList buf = 0x100000002;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *(int *)&buf[4 * v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23)
      {
        if ((v21 & 1) == 0) {
          return;
        }
        goto LABEL_23;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
    if (*(void *)(v17 + 8))
    {
LABEL_23:
      int v24 = *(NSObject **)v17;
      if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        __int16 v25 = (const char *)*a6;
        sub_2417C(__p, *(_DWORD *)(a2 + 4));
        if (v65 >= 0) {
          uint64_t v26 = __p;
        }
        else {
          uint64_t v26 = (void **)__p[0];
        }
        int v27 = *(_DWORD *)(a2 + 4);
        int v28 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)AudioBufferList buf = 136316418;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v67 = 1024;
        int v68 = 435;
        __int16 v69 = 2048;
        char v70 = v25;
        __int16 v71 = 2080;
        *(void *)uint64_t v72 = v26;
        *(_WORD *)&v72[8] = 1024;
        *(_DWORD *)&v72[10] = v27;
        __int16 v73 = 1024;
        int v74 = v28;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get sample rate value of %f from AggregateDevice_Common (selector: kAudioDevicePropertyNominalSampleRate; scope: '%s' (%u); element: %u).",
          buf,
          0x32u);
        if (v65 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_3AC4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3AC518(char **a1, os_unfair_lock_s *a2, unsigned int *a3)
{
  if (!sub_3AE2DC(a3))
  {
    v173 = (os_log_t *)sub_32A48(13);
    v174 = *v173;
    if (*v173 && os_log_type_enabled(*v173, OS_LOG_TYPE_ERROR))
    {
      sub_16C9C4((uint64_t)&v205, a3);
      v175 = SHIBYTE(v207) >= 0 ? (void **)&v205 : v205;
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v209 = 1024;
      int v210 = 531;
      __int16 v211 = 2080;
      *(void *)v212 = v175;
      _os_log_impl(&def_1E50E8, v174, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Property %s is not a valid AudioChannelLayout property\"", buf, 0x1Cu);
      if (SHIBYTE(v207) < 0) {
        operator delete(v205);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1970171760;
  }
  v193 = a2;
  if (((*(uint64_t (**)(os_unfair_lock_s *, unsigned int *))(*(void *)&a2->_os_unfair_lock_opaque + 16))(a2, a3) & 1) == 0)
  {
    v177 = (os_log_t *)sub_32A48(13);
    v178 = *v177;
    if (*v177 && os_log_type_enabled(*v177, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)&v205, a2 + 2);
      int v179 = SHIBYTE(v207);
      v180 = v205;
      sub_16C9C4((uint64_t)&__p, a3);
      v181 = &v205;
      if (v179 < 0) {
        v181 = (void ***)v180;
      }
      if (v204 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v209 = 1024;
      int v210 = 532;
      __int16 v211 = 2080;
      *(void *)v212 = v181;
      *(_WORD *)&v212[8] = 2080;
      *(void *)&v212[10] = p_p;
      _os_log_impl(&def_1E50E8, v178, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Multi-route aggregate %s does not support property %s\"", buf, 0x26u);
      if (v204 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v207) < 0) {
        operator delete(v205);
      }
    }
    v183 = __cxa_allocate_exception(0x10uLL);
    *(void *)v183 = &off_6414D8;
    v183[2] = 1970171760;
  }
  uint64_t v6 = sub_32A48(16);
  uint64_t v7 = sub_32A48(33);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)AudioBufferList buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_11;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
  if (*(void *)(v6 + 8))
  {
LABEL_11:
    BOOL v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      sub_16C9C4((uint64_t)&v205, a3);
      int v14 = SHIBYTE(v207);
      unsigned int v15 = v205;
      sub_4F64((uint64_t)&__p, a2 + 2);
      unsigned int v16 = &v205;
      if (v14 < 0) {
        unsigned int v16 = (void ***)v15;
      }
      if (v204 >= 0) {
        uint64_t v17 = &__p;
      }
      else {
        uint64_t v17 = __p;
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v209 = 1024;
      int v210 = 534;
      __int16 v211 = 2080;
      *(void *)v212 = v16;
      *(_WORD *)&v212[8] = 2080;
      *(void *)&v212[10] = v17;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Building an AudioChannelLayout for address %s on multi-route aggregate %s", buf, 0x26u);
      if (v204 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v207) < 0) {
        operator delete(v205);
      }
    }
  }
LABEL_22:
  int v18 = sub_474DD8(a3[1]);
  int v19 = v18;
  uint64_t v20 = a2 + 166;
  uint64_t v21 = 166;
  if (v18)
  {
    uint64_t v21 = 172;
    uint64_t v20 = a2 + 172;
  }
  uint64_t v22 = *(void *)&v20[2]._os_unfair_lock_opaque;
  uint64_t v192 = v21 * 4;
  uint64_t v23 = *(void *)&a2[v21]._os_unfair_lock_opaque;
  v206 = 0;
  v207 = 0;
  if (v18) {
    uint64_t v24 = 184;
  }
  else {
    uint64_t v24 = 178;
  }
  __int16 v25 = a2;
  if (v18) {
    uint64_t v26 = a2 + 184;
  }
  else {
    uint64_t v26 = a2 + 178;
  }
  v205 = 0;
  *(void *)AudioBufferList buf = &v205;
  _DWORD buf[8] = 0;
  uint64_t v27 = v22 - v23;
  if (v22 == v23)
  {
    int v30 = *(void **)&v25[v24]._os_unfair_lock_opaque;
    uint64_t v31 = *(void **)&v26[2]._os_unfair_lock_opaque;
    uint64_t v32 = a3;
    if (v30 == v31) {
      goto LABEL_161;
    }
    v187 = a1;
    goto LABEL_36;
  }
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF9) {
    sub_60548();
  }
  int v28 = (void **)operator new(2 * v27);
  v205 = v28;
  v207 = &v28[2 * (v27 >> 3)];
  bzero(v28, 2 * v27);
  uint64_t v29 = (void **)((char *)v28 + 2 * v27);
  v206 = v29;
  int v30 = *(void **)&v193[v24]._os_unfair_lock_opaque;
  uint64_t v31 = *(void **)&v26[2]._os_unfair_lock_opaque;
  if (v30 != v31)
  {
    v187 = a1;
    uint64_t v32 = a3;
LABEL_36:
    int v33 = 0;
    int v34 = 0;
    __int16 v35 = "input";
    if (v19) {
      __int16 v35 = "output";
    }
    __s = (char *)v35;
    v191 = v31;
    while (1)
    {
      uint64_t v36 = *v30;
      if (*v30)
      {
        signed int v37 = (*(uint64_t (**)(void))(*(void *)v36 + 160))(*v30);
        int v38 = v37;
        if (v37 < 0xFFFFFFFE)
        {
          if (v37 >= (unint64_t)(((char *)v206 - (char *)v205) >> 4)) {
            sub_131250();
          }
          unint64_t v198 = v37;
          uint64_t v195 = 2 * v37;
          if (v205[v195])
          {
            uint64_t v46 = (os_log_t *)sub_32A48(13);
            int v47 = *v46;
            if (*v46)
            {
              if (os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioBufferList buf = 136315906;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
                __int16 v209 = 1024;
                int v210 = 563;
                __int16 v211 = 1024;
                *(_DWORD *)v212 = v38;
                *(_WORD *)&v212[4] = 1024;
                *(_DWORD *)&v212[6] = v33;
                _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Duplicate channel layout information found for client stream index %d. New layout from underlying stream index %d will override the previously retrieved data for this index.\"", buf, 0x1Eu);
              }
            }
          }
          if (!(*(uint64_t (**)(uint64_t))(*(void *)v36 + 184))(v36))
          {
            int v142 = (os_log_t *)sub_32A48(13);
            uint64_t v143 = *v142;
            if (*v142 && os_log_type_enabled(*v142, OS_LOG_TYPE_ERROR))
            {
              sub_21C8C(&__p, __s);
              long long v144 = v204 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)AudioBufferList buf = 136315906;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 566;
              __int16 v211 = 2080;
              *(void *)v212 = v144;
              *(_WORD *)&v212[8] = 1024;
              *(_DWORD *)&v212[10] = v33;
              _os_log_impl(&def_1E50E8, v143, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [GetPhysicalDevice(*underlyingStreamCacheItemPtr) is NULL]: \"The %s underlying stream cache item at index %d returned a NULL PhysicalDevice\"", buf, 0x22u);
              if (v204 < 0) {
                operator delete(__p);
              }
            }
            long long v145 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v145, "The %s underlying stream cache item at index %d returned a NULL PhysicalDevice");
          }
          v196 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t))(*(void *)v36 + 184))(v36);
          uint64_t v48 = *(void *)(*(void *)((char *)&v193->_os_unfair_lock_opaque + v192) + 8 * v198);
          if (!v48)
          {
            v165 = (os_log_t *)sub_32A48(13);
            v166 = *v165;
            if (*v165 && os_log_type_enabled(*v165, OS_LOG_TYPE_ERROR))
            {
              v167 = &__p;
              sub_21C8C(&__p, __s);
              if (v204 < 0) {
                v167 = __p;
              }
              std::to_string(&v201, v38);
              int v168 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
              std::string::size_type v169 = v201.__r_.__value_.__r.__words[0];
              sub_4F64((uint64_t)v199, v193 + 2);
              v170 = &v201;
              if (v168 < 0) {
                v170 = (std::string *)v169;
              }
              if (v200 >= 0) {
                v171 = v199;
              }
              else {
                v171 = (void **)v199[0];
              }
              *(_DWORD *)AudioBufferList buf = 136316162;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 573;
              __int16 v211 = 2080;
              *(void *)v212 = v167;
              *(_WORD *)&v212[8] = 2080;
              *(void *)&v212[10] = v170;
              *(_WORD *)&v212[18] = 2080;
              *(void *)&v212[20] = v171;
              _os_log_impl(&def_1E50E8, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [clientStreamCache[clientStreamCacheIndex] is NULL]: \"Encountered NULL %s client stream cache item at index %s in device %s\"", buf, 0x30u);
              if (v200 < 0) {
                operator delete(v199[0]);
              }
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v201.__r_.__value_.__l.__data_);
              }
              if (v204 < 0) {
                operator delete(__p);
              }
            }
            v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v172, "Encountered NULL %s client stream cache item at index %s in device %s");
          }
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v48 + 136))(&__p, v48);
          int v194 = v34;
          if (!v203 || (uint64_t v49 = std::__shared_weak_count::lock(v203)) == 0 || !__p)
          {
            __int16 v154 = (os_log_t *)sub_32A48(13);
            v155 = *v154;
            if (*v154 && os_log_type_enabled(*v154, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioBufferList buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 67;
              _os_log_impl(&def_1E50E8, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [inStream is NULL]: \"Encountered a NULL stream\"", buf, 0x12u);
            }
            BOOL v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v156, "Encountered a NULL stream");
          }
          sub_51340((uint64_t)__p, (uint64_t)buf);
          int v50 = *(_DWORD *)&v212[8];
          sub_4636C(v49);
          if (v203) {
            std::__shared_weak_count::__release_weak(v203);
          }
          uint64_t v51 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v48 + 48))(v48) + 28);
          uint64_t v197 = v51;
          if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v36 + 56))(v36) + 28) != v50)
          {
            unint64_t v52 = (os_log_t *)sub_32A48(13);
            uint64_t v53 = *v52;
            if (*v52)
            {
              if (os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
              {
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v48 + 136))(&v201, v48);
                uint64_t v54 = std::__shared_weak_count::lock((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
                char v55 = (os_unfair_lock_s *)v201.__r_.__value_.__r.__words[0];
                v188 = v54;
                if (!v54) {
                  char v55 = 0;
                }
                sub_4F64((uint64_t)&__p, v55 + 2);
                int v56 = v204;
                __int16 v57 = (void **)__p;
                int v58 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v36 + 56))(v36) + 28);
                int v59 = &__p;
                if (v56 < 0) {
                  int v59 = v57;
                }
                *(_DWORD *)AudioBufferList buf = 136316162;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
                __int16 v209 = 1024;
                int v210 = 578;
                __int16 v211 = 2080;
                *(void *)v212 = v59;
                *(_WORD *)&v212[8] = 1024;
                *(_DWORD *)&v212[10] = v58;
                *(_WORD *)&v212[14] = 1024;
                *(_DWORD *)&v212[16] = v50;
                _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Encountered an unexpected number of channels in stream %s: expected %u, found %u\"", buf, 0x28u);
                if (v204 < 0) {
                  operator delete(__p);
                }
                uint64_t v51 = v197;
                if (v188) {
                  sub_4636C(v188);
                }
                if (v201.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
                }
              }
            }
          }
          if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned int *))(*(void *)&v196->_os_unfair_lock_opaque
                                                                                  + 16))(v196, v32))
          {
            if (v51 == v50)
            {
              *(_DWORD *)AudioBufferList buf = 0;
              *(_DWORD *)AudioBufferList buf = (*(uint64_t (**)(os_unfair_lock_s *, unsigned int *, void, void))(*(void *)&v196->_os_unfair_lock_opaque + 32))(v196, v32, 0, 0);
              char v60 = (char *)malloc_type_malloc(*(unsigned int *)buf, 0xF831B3F5uLL);
              (*(void (**)(os_unfair_lock_s *, unsigned int *, void, void, unsigned char *, char *))(*(void *)&v196->_os_unfair_lock_opaque + 40))(v196, v32, 0, 0, buf, v60);
              unsigned int v61 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 176))(v36);
              uint64_t v51 = v61 + v50;
              goto LABEL_121;
            }
            if (v50 == 1 && v51 >= 2)
            {
              *(_DWORD *)AudioBufferList buf = 0;
              *(_DWORD *)AudioBufferList buf = (*(uint64_t (**)(os_unfair_lock_s *, unsigned int *, void, void))(*(void *)&v196->_os_unfair_lock_opaque + 32))(v196, v32, 0, 0);
              char v60 = sub_3F34AC(v51);
              (*(void (**)(os_unfair_lock_s *, unsigned int *, void, void, unsigned char *, char *))(*(void *)&v196->_os_unfair_lock_opaque + 40))(v196, v32, 0, 0, buf, v60);
              uint64_t v77 = 0;
              do
              {
                __int16 v78 = &v60[v77];
                *((_OWORD *)v78 + 2) = *(_OWORD *)(v60 + 12);
                *((_DWORD *)v78 + 12) = *((_DWORD *)v60 + 7);
                v77 += 20;
              }
              while (20 * v51 - 20 != v77);
              goto LABEL_120;
            }
            uint64_t v79 = sub_32A48(16);
            uint64_t v80 = sub_32A48(33);
            char v81 = 0;
            uint64_t v82 = 0;
            *(void *)AudioBufferList buf = 0x100000002;
            uint64_t v83 = *(void *)(v79 + 8);
            while (1)
            {
              uint64_t v84 = *(int *)&buf[4 * v82];
              char v85 = v81;
              if (((v83 & v84) != 0) != ((*(void *)(v80 + 8) & v84) != 0)) {
                break;
              }
              char v81 = 1;
              uint64_t v82 = 1;
              if (v85) {
                goto LABEL_112;
              }
            }
            if ((v83 & v84) == 0) {
              uint64_t v79 = v80;
            }
LABEL_112:
            int v86 = *(NSObject **)v79;
            if (v86 && os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              sub_21C8C(&__p, __s);
              std::string v87 = &__p;
              if (v204 < 0) {
                std::string v87 = __p;
              }
              *(_DWORD *)AudioBufferList buf = 136316418;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 615;
              __int16 v211 = 2080;
              *(void *)v212 = v87;
              *(_WORD *)&v212[8] = 1024;
              *(_DWORD *)&v212[10] = v38;
              *(_WORD *)&v212[14] = 1024;
              *(_DWORD *)&v212[16] = v50;
              *(_WORD *)&v212[20] = 1024;
              *(_DWORD *)&v212[22] = v51;
              _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d Encountered an incompatible stream format conversion in the %s client stream at index %d. Format is converted from underlying format %u to virtualized format %u", buf, 0x2Eu);
              goto LABEL_117;
            }
          }
          else
          {
            uint64_t v65 = sub_32A48(16);
            uint64_t v66 = sub_32A48(33);
            char v67 = 0;
            uint64_t v68 = 0;
            *(void *)AudioBufferList buf = 0x100000002;
            uint64_t v69 = *(void *)(v65 + 8);
            while (1)
            {
              uint64_t v70 = *(int *)&buf[4 * v68];
              char v71 = v67;
              if (((v69 & v70) != 0) != ((*(void *)(v66 + 8) & v70) != 0)) {
                break;
              }
              char v67 = 1;
              uint64_t v68 = 1;
              if (v71)
              {
                if ((v69 & 1) == 0) {
                  goto LABEL_119;
                }
                goto LABEL_93;
              }
            }
            if ((v69 & v70) == 0) {
              uint64_t v65 = v66;
            }
            if ((*(void *)(v65 + 8) & 1) == 0) {
              goto LABEL_119;
            }
LABEL_93:
            uint64_t v72 = *(NSObject **)v65;
            if (!v72 || !os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_119;
            }
            sub_4F64((uint64_t)&__p, v196 + 2);
            int v73 = v204;
            int v74 = (void **)__p;
            sub_16C9C4((uint64_t)&v201, v32);
            unsigned int v75 = &__p;
            if (v73 < 0) {
              unsigned int v75 = v74;
            }
            __int16 v76 = &v201;
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v76 = (std::string *)v201.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioBufferList buf = 136316162;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
            __int16 v209 = 1024;
            int v210 = 623;
            __int16 v211 = 2080;
            *(void *)v212 = v75;
            *(_WORD *)&v212[8] = 2080;
            *(void *)&v212[10] = v76;
            *(_WORD *)&v212[18] = 1024;
            *(_DWORD *)&v212[20] = v51;
            _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d PhysicalDevice %s does not support %s. Setting \"unknown\" channel layouts for its %u client-facing channels", buf, 0x2Cu);
            if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v201.__r_.__value_.__l.__data_);
            }
LABEL_117:
            if (v204 < 0) {
              operator delete(__p);
            }
          }
LABEL_119:
          char v60 = sub_3F34AC(v51);
LABEL_120:
          unsigned int v61 = 0;
LABEL_121:
          uint64_t v88 = sub_32A48(16);
          uint64_t v89 = sub_32A48(33);
          char v90 = 0;
          uint64_t v91 = 0;
          *(void *)AudioBufferList buf = 0x100000002;
          uint64_t v92 = *(void *)(v88 + 8);
          while (1)
          {
            uint64_t v93 = *(int *)&buf[4 * v91];
            char v94 = v90;
            if (((v92 & v93) != 0) != ((*(void *)(v89 + 8) & v93) != 0)) {
              break;
            }
            char v90 = 1;
            uint64_t v91 = 1;
            if (v94)
            {
              if ((v92 & 1) == 0) {
                goto LABEL_139;
              }
              goto LABEL_129;
            }
          }
          if ((v92 & v93) == 0) {
            uint64_t v88 = v89;
          }
          if (*(void *)(v88 + 8))
          {
LABEL_129:
            int v95 = *(NSObject **)v88;
            if (v95 && os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
            {
              sub_21C8C(&__p, __s);
              int v96 = v204;
              unsigned int v97 = (void **)__p;
              sub_16C458(&v201, (uint64_t)v60);
              __int16 v98 = &__p;
              if (v96 < 0) {
                __int16 v98 = v97;
              }
              uint64_t v99 = &v201;
              if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v99 = (std::string *)v201.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioBufferList buf = 136316418;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 626;
              __int16 v211 = 2080;
              *(void *)v212 = v98;
              *(_WORD *)&v212[8] = 1024;
              *(_DWORD *)&v212[10] = v38;
              *(_WORD *)&v212[14] = 1024;
              *(_DWORD *)&v212[16] = v33;
              *(_WORD *)&v212[20] = 2080;
              *(void *)&v212[22] = v99;
              _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d Channel layout information for %s client stream index %d (for underlying stream index %d): %s", buf, 0x32u);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v201.__r_.__value_.__l.__data_);
              }
              uint64_t v32 = a3;
              if (v204 < 0) {
                operator delete(__p);
              }
            }
          }
LABEL_139:
          if (*(_DWORD *)v60)
          {
            __int16 v157 = (os_log_t *)sub_32A48(13);
            int v158 = *v157;
            if (*v157 && os_log_type_enabled(*v157, OS_LOG_TYPE_ERROR))
            {
              sub_4F64((uint64_t)&__p, v196 + 2);
              int v159 = v204;
              AudioObjectID v160 = (void **)__p;
              sub_21C8C(&v201, __s);
              v161 = &__p;
              if (v159 < 0) {
                v161 = v160;
              }
              if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::mutex v162 = &v201;
              }
              else {
                std::mutex v162 = (std::string *)v201.__r_.__value_.__r.__words[0];
              }
              int v163 = *(_DWORD *)v60;
              *(_DWORD *)AudioBufferList buf = 136316418;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 629;
              __int16 v211 = 2080;
              *(void *)v212 = v161;
              *(_WORD *)&v212[8] = 2080;
              *(void *)&v212[10] = v162;
              *(_WORD *)&v212[18] = 1024;
              *(_DWORD *)&v212[20] = v163;
              *(_WORD *)&v212[24] = 1024;
              *(_DWORD *)&v212[26] = 0;
              _os_log_impl(&def_1E50E8, v158, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Device %s describes its %s channel layout with tag %#X (expected %#X)\"", buf, 0x32u);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v201.__r_.__value_.__l.__data_);
              }
              if (v204 < 0) {
                operator delete(__p);
              }
            }
            v164 = __cxa_allocate_exception(0x10uLL);
            *(void *)v164 = &off_6414D8;
            v164[2] = 2003329396;
          }
          if (v197 > *((_DWORD *)v60 + 2))
          {
            uint64_t v146 = (os_log_t *)sub_32A48(13);
            v147 = *v146;
            if (*v146 && os_log_type_enabled(*v146, OS_LOG_TYPE_ERROR))
            {
              sub_21C8C(&__p, __s);
              int v148 = v204;
              uint64_t v149 = (void **)__p;
              sub_4F64((uint64_t)&v201, v196 + 2);
              v150 = &__p;
              if (v148 < 0) {
                v150 = v149;
              }
              if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v151 = &v201;
              }
              else {
                v151 = (std::string *)v201.__r_.__value_.__r.__words[0];
              }
              int v152 = *((_DWORD *)v60 + 2);
              *(_DWORD *)AudioBufferList buf = 136316418;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 633;
              __int16 v211 = 2080;
              *(void *)v212 = v150;
              *(_WORD *)&v212[8] = 2080;
              *(void *)&v212[10] = v151;
              *(_WORD *)&v212[18] = 1024;
              *(_DWORD *)&v212[20] = v152;
              *(_WORD *)&v212[24] = 1024;
              *(_DWORD *)&v212[26] = v197;
              _os_log_impl(&def_1E50E8, v147, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Malformed channel layout: The %s channel layout for device %s contains %u channel descriptions (expeted at least %u)\"", buf, 0x32u);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v201.__r_.__value_.__l.__data_);
              }
              if (v204 < 0) {
                operator delete(__p);
              }
            }
            int v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v153, "Malformed channel layout: The %s channel layout for device %s contains %u channel descriptions (expeted at least %u)");
          }
          long long v100 = v205;
          if (v198 >= ((char *)v206 - (char *)v205) >> 4) {
            sub_131250();
          }
          long long v101 = v205[v195];
          v205[v195] = v60;
          if (v101) {
            free(v101);
          }
          v100[2 * v198 + 1] = (void *)(v61 | (unint64_t)(v51 << 32));
          int v34 = v197 + v194;
          uint64_t v31 = v191;
          goto LABEL_145;
        }
        uint64_t v39 = sub_32A48(16);
        uint64_t v40 = sub_32A48(33);
        char v41 = 0;
        uint64_t v42 = 0;
        *(void *)AudioBufferList buf = 0x100000002;
        uint64_t v43 = *(void *)(v39 + 8);
        while (1)
        {
          uint64_t v44 = *(int *)&buf[4 * v42];
          char v45 = v41;
          if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
            break;
          }
          char v41 = 1;
          uint64_t v42 = 1;
          if (v45)
          {
            if ((v43 & 1) == 0) {
              goto LABEL_145;
            }
            goto LABEL_77;
          }
        }
        if ((v43 & v44) == 0) {
          uint64_t v39 = v40;
        }
        if (*(void *)(v39 + 8))
        {
LABEL_77:
          int v62 = *(NSObject **)v39;
          if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
          {
            sub_21C8C(&__p, __s);
            CFComparisonResult v63 = &__p;
            if (v204 < 0) {
              CFComparisonResult v63 = __p;
            }
            int v64 = "hidden";
            if (v38 == -1) {
              int v64 = "disabled";
            }
            *(_DWORD *)AudioBufferList buf = 136316162;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
            __int16 v209 = 1024;
            int v210 = 559;
            __int16 v211 = 2080;
            *(void *)v212 = v63;
            *(_WORD *)&v212[8] = 1024;
            *(_DWORD *)&v212[10] = v33;
            *(_WORD *)&v212[14] = 2080;
            *(void *)&v212[16] = v64;
            _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d The %s underlying stream cache item at index %d references a %s client stream", buf, 0x2Cu);
            if (v204 < 0) {
              operator delete(__p);
            }
          }
        }
      }
LABEL_145:
      ++v33;
      if (++v30 == v31)
      {
        int v28 = v205;
        uint64_t v29 = v206;
        if (v205 != v206)
        {
          a1 = v187;
          goto LABEL_150;
        }
        a1 = v187;
        if (!v34) {
          goto LABEL_161;
        }
LABEL_283:
        v184 = (os_log_t *)sub_32A48(13);
        v185 = *v184;
        if (*v184 && os_log_type_enabled(*v184, OS_LOG_TYPE_ERROR))
        {
          sub_4F64((uint64_t)&__p, v193 + 2);
          v186 = v204 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
          __int16 v209 = 1024;
          int v210 = 645;
          __int16 v211 = 2080;
          *(void *)v212 = v186;
          _os_log_impl(&def_1E50E8, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered an unexpected number of client stream channel descriptions in multi-route aggregate %s\"", buf, 0x1Cu);
          if (v204 < 0) {
            operator delete(__p);
          }
        }
        int v141 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v141, "Encountered an unexpected number of client stream channel descriptions in multi-route aggregate %s");
LABEL_208:
      }
    }
  }
  uint64_t v32 = a3;
  if (v28 == v29) {
    goto LABEL_161;
  }
  int v34 = 0;
LABEL_150:
  int v102 = 0;
  long long v103 = v28;
  do
  {
    int v102 = *((_DWORD *)v103 + 3) + v102 - *((_DWORD *)v103 + 2);
    v103 += 2;
  }
  while (v103 != v29);
  if (v102 != v34) {
    goto LABEL_283;
  }
  long long v104 = v28;
  do
  {
    if (!*v104)
    {
      v138 = (os_log_t *)sub_32A48(13);
      uint64_t v139 = *v138;
      if (*v138 && os_log_type_enabled(*v138, OS_LOG_TYPE_ERROR))
      {
        sub_4F64((uint64_t)&__p, v193 + 2);
        uint64_t v140 = v204 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v209 = 1024;
        int v210 = 647;
        __int16 v211 = 2080;
        *(void *)v212 = v140;
        _os_log_impl(&def_1E50E8, v139, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered a NULL underlying stream description in multi-route aggregate %s\"", buf, 0x1Cu);
        if (v204 < 0) {
          operator delete(__p);
        }
      }
      int v141 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v141, "Encountered a NULL underlying stream description in multi-route aggregate %s");
      goto LABEL_208;
    }
    v104 += 2;
  }
  while (v104 != v29);
  if (v28 != v29)
  {
    unsigned int v105 = 0;
    do
    {
      unsigned int v105 = *((_DWORD *)v28 + 3) + v105 - *((_DWORD *)v28 + 2);
      v28 += 2;
    }
    while (v28 != v29);
    goto LABEL_162;
  }
LABEL_161:
  unsigned int v105 = 0;
LABEL_162:
  uint64_t v106 = sub_3F34AC(v105);
  uint64_t v107 = (uint64_t)v106;
  *a1 = v106;
  char v109 = v205;
  v108 = v206;
  if (v205 != v206)
  {
    int v110 = 0;
    do
    {
      int v111 = *((_DWORD *)v109 + 2);
      int v112 = *((_DWORD *)v109 + 3);
      if (v112 != v111)
      {
        unsigned int v113 = 0;
        int v114 = v110;
        uint64_t v115 = 20 * v110 + 12;
        do
        {
          if (!*v109)
          {
            v135 = (os_log_t *)sub_32A48(13);
            uint64_t v136 = *v135;
            if (*v135 && os_log_type_enabled(*v135, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioBufferList buf = 136315394;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 105;
              _os_log_impl(&def_1E50E8, v136, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }
            char v137 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v137, "Precondition failure.");
          }
          if (v112 - v111 <= v113)
          {
            long long v131 = (os_log_t *)sub_32A48(13);
            uint64_t v132 = *v131;
            if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_ERROR))
            {
              int v133 = *((_DWORD *)v109 + 3) + ~*((_DWORD *)v109 + 2);
              *(_DWORD *)AudioBufferList buf = 136315906;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
              __int16 v209 = 1024;
              int v210 = 106;
              __int16 v211 = 1024;
              *(_DWORD *)v212 = v113;
              *(_WORD *)&v212[4] = 1024;
              *(_DWORD *)&v212[6] = v133;
              _os_log_impl(&def_1E50E8, v132, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"Attempt to access index %u. Max index: %u\"", buf, 0x1Eu);
            }
            v134 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v134, "Attempt to access index %u. Max index: %u");
          }
          uint64_t v116 = (uint64_t)*v109 + 20 * v113 + 20 * v111;
          uint64_t v117 = &v106[v115];
          long long v118 = *(_OWORD *)(v116 + 12);
          *((_DWORD *)v117 + 4) = *(_DWORD *)(v116 + 28);
          *(_OWORD *)uint64_t v117 = v118;
          int v111 = *((_DWORD *)v109 + 2);
          int v112 = *((_DWORD *)v109 + 3);
          v115 += 20;
          ++v113;
        }
        while (v113 < v112 - v111);
        int v110 = v114 + v113;
      }
      v109 += 2;
    }
    while (v109 != v108);
  }
  if (v106)
  {
    uint64_t v119 = sub_32A48(16);
    uint64_t v120 = sub_32A48(33);
    char v121 = 0;
    uint64_t v122 = 0;
    *(void *)AudioBufferList buf = 0x100000002;
    uint64_t v123 = *(void *)(v119 + 8);
    while (1)
    {
      uint64_t v124 = *(int *)&buf[4 * v122];
      char v125 = v121;
      if (((v123 & v124) != 0) != ((*(void *)(v120 + 8) & v124) != 0)) {
        break;
      }
      char v121 = 1;
      uint64_t v122 = 1;
      if (v125)
      {
        if ((v123 & 1) == 0) {
          goto LABEL_191;
        }
        goto LABEL_180;
      }
    }
    if ((v123 & v124) == 0) {
      uint64_t v119 = v120;
    }
    if (*(void *)(v119 + 8))
    {
LABEL_180:
      uint64_t v126 = *(NSObject **)v119;
      if (v126 && os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        sub_16C9C4((uint64_t)&__p, v32);
        int v127 = v204;
        long long v128 = (void **)__p;
        sub_16C458(&v201, v107);
        uint64_t v129 = &__p;
        if (v127 < 0) {
          uint64_t v129 = v128;
        }
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::unique_lock<std::mutex> v130 = &v201;
        }
        else {
          std::unique_lock<std::mutex> v130 = (std::string *)v201.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v209 = 1024;
        int v210 = 651;
        __int16 v211 = 2080;
        *(void *)v212 = v129;
        *(_WORD *)&v212[8] = 2080;
        *(void *)&v212[10] = v130;
        _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioChannelLayout for property %s: %s", buf, 0x26u);
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v201.__r_.__value_.__l.__data_);
        }
        if (v204 < 0) {
          operator delete(__p);
        }
      }
    }
  }
LABEL_191:
  *(void *)AudioBufferList buf = &v205;
  sub_3AE378((void ***)buf);
}

void sub_3AE07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,std::__shared_weak_count *a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::string __p = (void *)(v43 - 200);
  sub_3AE378((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_3AE2DC(_DWORD *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DCF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65DCF8))
  {
    xmmword_65DCE0 = xmmword_4E7B90;
    qword_65DCF0 = 1869968496;
    __cxa_guard_release(&qword_65DCF8);
  }
  uint64_t v2 = 0;
  do
  {
    BOOL result = sub_668FC((int *)((char *)&xmmword_65DCE0 + v2), a1);
    if (result) {
      break;
    }
    BOOL v4 = v2 == 12;
    v2 += 12;
  }
  while (!v4);
  return result;
}

void sub_3AE378(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    BOOL v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (void *)*(v4 - 2);
        v4 -= 2;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          free(v6);
        }
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_3AE400(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1) & 1) == 0)
  {
    unsigned int v15 = (os_log_t *)sub_32A48(13);
    unsigned int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v30 = *(void **)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
      uint64_t v17 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v39 = 1024;
      int v40 = 374;
      __int16 v41 = 2080;
      uint64_t v42 = v17;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v30 = *(void **)a2;
      int v31 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
      uint64_t v21 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
      __int16 v39 = 1024;
      int v40 = 375;
      __int16 v41 = 2080;
      uint64_t v42 = v21;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v22 = &off_6414D8;
    v22[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1936879204 || *(_DWORD *)a2 == 1936876644)
  {
    if (!*(void *)&a1[50]._os_unfair_lock_opaque)
    {
      BOOL v13 = (os_log_t *)sub_32A48(13);
      int v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
          __int16 v39 = 1024;
          int v40 = 384;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty should have blocked this code path because there are no physical devices in the aggregate.\"", buf, 0x12u);
        }
      }
    }
    *(void *)AudioBufferList buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = *(_DWORD *)(a2 + 8);
    sub_3AC518(&v35, a1, (unsigned int *)buf);
    uint64_t v9 = v35;
    if (!v35)
    {
      uint64_t v23 = (os_log_t *)sub_32A48(13);
      uint64_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        int v33 = *(void **)a2;
        int v34 = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
        int v25 = v37;
        uint64_t v26 = (void **)__p[0];
        sub_4F64((uint64_t)&v30, a1 + 2);
        uint64_t v27 = __p;
        if (v25 < 0) {
          uint64_t v27 = v26;
        }
        if (v32 >= 0) {
          int v28 = &v30;
        }
        else {
          int v28 = v30;
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v39 = 1024;
        int v40 = 387;
        __int16 v41 = 2080;
        uint64_t v42 = v27;
        __int16 v43 = 2080;
        v44[0] = v28;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Could not create AudioChannelLayout for address %s on multi-Route aggregate %s\"", buf, 0x26u);
        if (v32 < 0) {
          operator delete(v30);
        }
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v29 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v29 = &off_6414D8;
      v29[2] = 2003329396;
    }
    int v10 = sub_A313C(*((_DWORD *)v35 + 2));
    uint64_t v11 = sub_A31B4(v10);
    free(v9);
    return v11;
  }
  else
  {
    return sub_350628((uint64_t)a1, (AudioObjectPropertyAddress *)a2, a3, a4);
  }
}

void sub_3AE944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3AE97C(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1936876644 || a2->mSelector == 1936879204) {
    return 0;
  }
  else {
    return sub_3509A0(a1, a2);
  }
}

uint64_t sub_3AE9A8(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector != 1936879204 && a2->mSelector != 1936876644)
  {
    return sub_350A04(a1, a2);
  }
  BOOL v5 = sub_3AE2DC(a2);
  sub_B680(&v39, (void *)(a1 + 184), "", 328);
  uint64_t v6 = v40;
  if (v40 == &v39)
  {
    unsigned int v7 = 0;
    if (v5) {
      goto LABEL_34;
    }
LABEL_15:
    uint64_t v9 = sub_32A48(16);
    uint64_t v10 = sub_32A48(33);
    char v11 = 0;
    uint64_t v12 = 0;
    *(void *)AudioBufferList buf = 0x100000002;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *(int *)&buf[4 * v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1;
      if (v15)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_23;
      }
    }
    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
    if (*(void *)(v9 + 8))
    {
LABEL_23:
      unsigned int v16 = *(NSObject **)v9;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        sub_4F64((uint64_t)v37, (os_unfair_lock_t)(a1 + 8));
        int v17 = v38;
        int v18 = (void **)v37[0];
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
        int v19 = v37;
        if (v17 < 0) {
          int v19 = v18;
        }
        if (v36 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v42 = 1024;
        int v43 = 335;
        __int16 v44 = 2080;
        char v45 = v19;
        __int16 v46 = 2080;
        int v47 = v20;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Multi-Route aggregate %s does not support property %s", buf, 0x26u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
      }
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  do
  {
    unsigned int v7 = (*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v6[2] + 16))(v6[2], a2);
    if (v7) {
      break;
    }
    uint64_t v6 = (uint64_t *)v6[1];
  }
  while (v6 != &v39);
  if (!v5) {
    goto LABEL_15;
  }
LABEL_34:
  if ((v7 & 1) == 0)
  {
    uint64_t v21 = sub_32A48(16);
    uint64_t v22 = sub_32A48(33);
    char v23 = 0;
    uint64_t v24 = 0;
    *(void *)AudioBufferList buf = 0x100000002;
    uint64_t v25 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v26 = *(int *)&buf[4 * v24];
      char v27 = v23;
      if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
        break;
      }
      char v23 = 1;
      uint64_t v24 = 1;
      if (v27)
      {
        if ((v25 & 1) == 0) {
          goto LABEL_54;
        }
        goto LABEL_43;
      }
    }
    if ((v25 & v26) == 0) {
      uint64_t v21 = v22;
    }
    if (*(void *)(v21 + 8))
    {
LABEL_43:
      int v28 = *(NSObject **)v21;
      if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        sub_4F64((uint64_t)v37, (os_unfair_lock_t)(a1 + 8));
        int v29 = v38;
        int v30 = (void **)v37[0];
        uint64_t v33 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
        int v31 = v37;
        if (v29 < 0) {
          int v31 = v30;
        }
        if (v36 >= 0) {
          char v32 = __p;
        }
        else {
          char v32 = (void **)__p[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
        __int16 v42 = 1024;
        int v43 = 336;
        __int16 v44 = 2080;
        char v45 = v31;
        __int16 v46 = 2080;
        int v47 = v32;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Multi-Route aggregate %s does not support property %s; none of the aggregated physical devices suppo"
          "rt this property",
          buf,
          0x26u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
      }
    }
  }
LABEL_54:
  sub_B8E4(&v39);
  return v5 & v7;
}

void sub_3AEDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_B8E4(&a21);
  _Unwind_Resume(a1);
}

void sub_3AEE24(uint64_t a1)
{
  sub_350AE0(a1);

  operator delete();
}

uint64_t sub_3AEE60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65DD20))
  {
    operator new();
  }
  return qword_65DD18;
}

void sub_3AEED4(_Unwind_Exception *a1)
{
}

uint64_t sub_3AEEEC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DD30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65DD30))
  {
    operator new();
  }
  return qword_65DD28;
}

void sub_3AEF60(_Unwind_Exception *a1)
{
}

std::string *sub_3AEF78(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "LateNightMode: ", 0xFuLL);
  if (*a2) {
    unsigned int v4 = 543977069;
  }
  else {
    unsigned int v4 = 560754285;
  }
  sub_2417C(&__p, v4);
  if ((v16 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v6 = v16;
  }
  else {
    std::string::size_type v6 = v15;
  }
  std::string::append(a1, p_p, v6);
  if ((char)v16 < 0) {
    operator delete(__p);
  }
  if ((*a2 & 2) != 0) {
    unsigned int v7 = 544631924;
  }
  else {
    unsigned int v7 = 561409140;
  }
  sub_2417C(&__p, v7);
  if ((v16 & 0x80u) == 0) {
    char v8 = (const std::string::value_type *)&__p;
  }
  else {
    char v8 = (const std::string::value_type *)__p;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v9 = v16;
  }
  else {
    std::string::size_type v9 = v15;
  }
  std::string::append(a1, v8, v9);
  if ((char)v16 < 0) {
    operator delete(__p);
  }
  if ((*a2 & 4) != 0) {
    unsigned int v10 = 543515751;
  }
  else {
    unsigned int v10 = 560292967;
  }
  sub_2417C(&__p, v10);
  if ((v16 & 0x80u) == 0) {
    char v11 = (const std::string::value_type *)&__p;
  }
  else {
    char v11 = (const std::string::value_type *)__p;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v12 = v16;
  }
  else {
    std::string::size_type v12 = v15;
  }
  std::string::append(a1, v11, v12);
  if ((char)v16 < 0) {
    operator delete(__p);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_3AF0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3AF13C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_20A008();
  if ((result & 1) == 0)
  {
    BOOL v5 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a2 + 112);
    v4.n128_u64[0] = 0x40CF400000000000;
    return v5(a2, v4);
  }
  return result;
}

void sub_3AF1AC()
{
}

double sub_3AF1C4(void *a1, _OWORD *a2, uint64_t a3)
{
  std::string::size_type v6 = (char *)operator new(0x98uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)std::string::size_type v6 = off_638628;
  *((void *)v6 + 4) = -2307755726;
  *((_DWORD *)v6 + 10) = 0;
  *(void *)(v6 + 60) = 0x100000001;
  *(_OWORD *)(v6 + 44) = *(_OWORD *)"";
  *((void *)v6 + 3) = &off_6386A0;
  *(_OWORD *)(v6 + 72) = *a2;
  *((_DWORD *)v6 + 22) = *(_DWORD *)a3;
  sub_15050C((uint64_t)(v6 + 96), (void *)(a3 + 8));
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a3 + 32);
  v6[136] = 1;
  *(void *)&double result = 0x500000007;
  *((void *)v6 + 18) = 0x500000007;
  *((void *)v6 + 3) = off_638660;
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_3AF2C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_3AF2E0(uint64_t a1)
{
  *(void *)a1 = &off_6386A0;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }

  operator delete();
}

uint64_t sub_3AF350(uint64_t a1)
{
  *(void *)a1 = &off_6386A0;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }
  return a1;
}

uint64_t sub_3AF3A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_3AF3A8()
{
  return 1987211570;
}

uint64_t sub_3AF3C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3AF3E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638628;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3AF438(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *sub_3AF458(uint64_t *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_6CB40(a1, 0x696D7663u, 1768781411);
  sub_6CB40(a1, 0x696D6F63u, 1768779619);
  sub_6CB40(a1, 0x676D6374u, 1735222132);
  sub_6CB40(a1, 0x76707669u, 1987081833);
  sub_6CB40(a1, 0x7670766Fu, 1987081839);
  sub_6CB40(a1, 0x76706763u, 1987077987);
  sub_6CB40(a1, 0x726D7663u, 1919776355);
  sub_6CB40(a1, 0x6D63616Du, 1835229549);
  sub_6CB40(a1, 0x76687374u, 1986556788);
  sub_6CB40(a1, 0x6D736D74u, 1836281204);
  sub_6CB40(a1, 0x72617720u, 1918990112);
  return sub_6CB40(a1, 0x766D7367u, 1986884455);
}

void sub_3AF5A4(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

NSObject *sub_3AF5E4(uint64_t a1, const char *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (sub_3AF6F0(a1, "VAD", a2, 0))
    {
      __n128 v4 = (os_log_t *)sub_32A48(20);
      uint64_t v2 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = 136315906;
          unsigned int v7 = "RoutingSettings_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 686;
          __int16 v10 = 2080;
          char v11 = "VAD";
          __int16 v12 = 2080;
          uint64_t v13 = a2;
          _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find strips file Generic/%s/%s", (uint8_t *)&v6, 0x26u);
        }
        return 0;
      }
    }
  }
  return v2;
}

uint64_t sub_3AF6F0(uint64_t a1, const char *a2, const char *a3, unsigned int a4)
{
  CFStringRef v14 = CFStringCreateWithCString(0, "Generic", 0x600u);
  char v15 = 1;
  CFStringRef v12 = CFStringCreateWithCString(0, a2, 0x600u);
  char v13 = 1;
  CFStringRef v10 = CFStringCreateWithCString(0, a3, 0x600u);
  char v11 = 1;
  v16[0] = &v14;
  v16[1] = &v12;
  v16[2] = &v10;
  uint64_t v8 = sub_3FD858(a1, (uint64_t)v16, a4);
  sub_72924((uint64_t)&v10);
  sub_72924((uint64_t)&v12);
  sub_72924((uint64_t)&v14);
  return v8;
}

void sub_3AF7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

NSObject *sub_3AF82C(NSObject *a1, const char *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    CFStringRef v12 = CFStringCreateWithCString(0, "VAD", 0x600u);
    char v13 = 1;
    CFStringRef v10 = CFStringCreateWithCString(0, a2, 0x600u);
    char v11 = 1;
    *(void *)AudioBufferList buf = a3;
    *(void *)&_DWORD buf[8] = &v12;
    *(void *)&buf[16] = &v10;
    int v6 = sub_3FD858((uint64_t)v3, (uint64_t)buf, 0);
    sub_72924((uint64_t)&v10);
    sub_72924((uint64_t)&v12);
    if (v6)
    {
      unsigned int v7 = (os_log_t *)sub_32A48(20);
      uint64_t v3 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *a3;
          *(_DWORD *)AudioBufferList buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 701;
          *(_WORD *)&unsigned char buf[18] = 2112;
          *(void *)&buf[20] = v8;
          __int16 v15 = 2080;
          unsigned __int8 v16 = "VAD";
          __int16 v17 = 2080;
          int v18 = a2;
          _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find strips file %@/%s/%s", buf, 0x30u);
        }
        return 0;
      }
    }
  }
  return v3;
}

void sub_3AF9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

NSObject *sub_3AF9D4(uint64_t a1, const char *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (sub_3AF6F0(a1, "Headphones", a2, 1u))
    {
      __n128 v4 = (os_log_t *)sub_32A48(20);
      uint64_t v2 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = 136316162;
          unsigned int v7 = "RoutingSettings_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 750;
          __int16 v10 = 2080;
          char v11 = "Generic";
          __int16 v12 = 2080;
          char v13 = "Headphones";
          __int16 v14 = 2080;
          __int16 v15 = a2;
          _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find preset file %s/%s/%s", (uint8_t *)&v6, 0x30u);
        }
        return 0;
      }
    }
  }
  return v2;
}

NSObject *sub_3AFAF0(NSObject *a1, const char *a2, uint64_t *a3, unsigned int a4)
{
  __n128 v4 = a1;
  if (a1)
  {
    CFStringRef v14 = CFStringCreateWithCString(0, "AU", 0x600u);
    char v15 = 1;
    CFStringRef v12 = CFStringCreateWithCString(0, a2, 0x600u);
    char v13 = 1;
    *(void *)AudioBufferList buf = a3;
    *(void *)&_DWORD buf[8] = &v14;
    *(void *)&buf[16] = &v12;
    int v8 = sub_3FD858((uint64_t)v4, (uint64_t)buf, a4);
    sub_72924((uint64_t)&v12);
    sub_72924((uint64_t)&v14);
    if (v8)
    {
      int v9 = (os_log_t *)sub_32A48(20);
      __n128 v4 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *a3;
          *(_DWORD *)AudioBufferList buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 765;
          *(_WORD *)&unsigned char buf[18] = 2112;
          *(void *)&buf[20] = v10;
          __int16 v17 = 2080;
          int v18 = "AU";
          __int16 v19 = 2080;
          uint64_t v20 = a2;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find preset file %@/%s/%s", buf, 0x30u);
        }
        return 0;
      }
    }
  }
  return v4;
}

void sub_3AFC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

NSObject *sub_3AFC9C(NSObject *a1, const char *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    CFStringRef v11 = CFStringCreateWithCString(0, "Generic", 0x600u);
    char v12 = 1;
    CFStringRef v9 = CFStringCreateWithCString(0, "VAD", 0x600u);
    char v10 = 1;
    CFStringRef v7 = CFStringCreateWithCString(0, a2, 0x600u);
    char v8 = 1;
    *(void *)AudioBufferList buf = &v11;
    *(void *)&_DWORD buf[8] = &v9;
    *(void *)&buf[16] = &v7;
    int v4 = sub_3FD858((uint64_t)v2, (uint64_t)buf, 1u);
    sub_72924((uint64_t)&v7);
    sub_72924((uint64_t)&v9);
    sub_72924((uint64_t)&v11);
    if (v4)
    {
      BOOL v5 = (os_log_t *)sub_32A48(20);
      uint64_t v2 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioBufferList buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 793;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "Generic";
          __int16 v14 = 2080;
          char v15 = "VAD";
          __int16 v16 = 2080;
          __int16 v17 = a2;
          _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot find preset file %s/%s/%s", buf, 0x30u);
        }
        return 0;
      }
    }
  }
  return v2;
}

void sub_3AFE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_3AFE78(uint64_t a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  unsigned int v16 = a4;
  int v12 = 7;
  uint64_t v13 = a6;
  int v14 = 1685090932;
  sub_3847B8((uint64_t)v15, &v12);
  sub_158DE0(a1, v14, &v14);
  sub_3840C4((uint64_t)v15);
  sub_3840C4((uint64_t)&v12);
  int v12 = 7;
  uint64_t v13 = 1;
  int v14 = 1684171107;
  sub_3847B8((uint64_t)v15, &v12);
  sub_158DE0(a1, v14, &v14);
  sub_3840C4((uint64_t)v15);
  sub_3840C4((uint64_t)&v12);
  sub_3AFFE0(a1, (int *)&v16, a2, a3, a5, a6);
  return sub_3B0384(a1, v16);
}

void sub_3AFFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_3840C4(v10);
  sub_3840C4((uint64_t)&a9);
  sub_D7EC0(v9);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_3AFFE0(uint64_t a1, int *a2, const char *a3, int a4, uint64_t a5, int a6)
{
  if (!a5) {
    return 0;
  }
  CFDictionaryRef result = (const __CFDictionary *)sub_3FE38C(a5, a3, 0);
  if (result)
  {
    CFDictionaryRef v11 = result;
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(result, @"strips");
    if (Value && (CFArrayRef v13 = Value, TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v13)))
    {
      CFIndex Count = CFArrayGetCount(v13);
      CFIndex v16 = Count - 1;
      if (Count < 1) {
        return 0;
      }
      int v48 = a6;
      int v49 = a4;
      __int16 v46 = a2;
      uint64_t v47 = a1;
    }
    else
    {
      int v48 = a6;
      int v49 = a4;
      __int16 v46 = a2;
      uint64_t v47 = a1;
      CFIndex v16 = 0;
    }
    CFIndex v17 = 0;
    CFStringRef v18 = @"unit";
    while (1)
    {
      CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(v11, @"strips");
      if (v19)
      {
        CFArrayRef v20 = v19;
        CFTypeID v21 = CFArrayGetTypeID();
        if (v21 == CFGetTypeID(v20) && CFArrayGetCount(v20) > v17)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v17);
          if (ValueAtIndex)
          {
            CFDictionaryRef v23 = ValueAtIndex;
            CFTypeID v24 = CFDictionaryGetTypeID();
            if (v24 == CFGetTypeID(v23))
            {
              CFArrayRef v25 = (const __CFArray *)CFDictionaryGetValue(v23, @"effects");
              if (v25)
              {
                CFArrayRef v26 = v25;
                CFTypeID v27 = CFArrayGetTypeID();
                if (v27 == CFGetTypeID(v26))
                {
                  CFIndex v50 = CFArrayGetCount(v26);
                  if (v50 >= 1) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
LABEL_32:
      if (v17++ == v16) {
        return 0;
      }
    }
    CFIndex v28 = 0;
    int v29 = v49;
    while (1)
    {
      int v52 = 0;
      v51[0] = 0;
      int v54 = 0;
      CFDictionaryRef v30 = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v28);
      if (v30)
      {
        CFDictionaryRef v31 = v30;
        CFTypeID v32 = CFDictionaryGetTypeID();
        if (v32 == CFGetTypeID(v31))
        {
          CFDictionaryRef v33 = (const __CFDictionary *)CFDictionaryGetValue(v31, v18);
          if (v33)
          {
            CFDictionaryRef v34 = v33;
            CFStringRef v35 = v18;
            CFTypeID v36 = CFDictionaryGetTypeID();
            if (v36 == CFGetTypeID(v34))
            {
              CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(v34, @"manufacturer");
              CFStringRef v18 = v35;
              if (sub_3FE324(v37, &v52))
              {
                CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(v34, @"type");
                if (sub_3FE324(v38, v51))
                {
                  CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v34, @"subtype");
                  if (sub_3FE324(v39, &v54) && v52 == 1634758764 && v51[0] == 1635083896 && v54 == v48)
                  {
                    if (!v29)
                    {
                      __int16 v41 = CFDictionaryGetValue(v31, @"aupreset");
                      if (v41)
                      {
                        CFTypeID v42 = CFDictionaryGetTypeID();
                        if (v42 != CFGetTypeID(v41)) {
                          __int16 v41 = 0;
                        }
                      }
                      int v52 = 0;
                      CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v31, @"bypass");
                      BOOL v44 = sub_3FE324(v43, &v52);
                      int v45 = v52;
                      if (!v44) {
                        int v45 = 0;
                      }
                      int *v46 = v45;
                      if (v41)
                      {
                        sub_384254((uint64_t)v51, v41);
                        int v52 = 1685086576;
                        sub_3847B8((uint64_t)v53, v51);
                        sub_158DE0(v47, v52, &v52);
                        sub_3840C4((uint64_t)v53);
                        sub_3840C4((uint64_t)v51);
                        return (const __CFDictionary *)(&def_1E50E8 + 1);
                      }
                      return 0;
                    }
                    --v29;
                  }
                }
              }
            }
            else
            {
              CFStringRef v18 = v35;
            }
          }
        }
      }
      if (v50 == ++v28) {
        goto LABEL_32;
      }
    }
  }
  return result;
}

void sub_3B0360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3840C4(v5);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3B0384(uint64_t result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    int v3 = 7;
    uint64_t v4 = a2;
    int v6 = 21;
    sub_3847B8((uint64_t)&v7, &v3);
    sub_15A1EC((uint64_t)__p, &v6, 1);
    sub_3B0480(v2, (uint64_t)__p);
  }
  return result;
}

void sub_3B044C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_D7EC0((uint64_t)va1);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3B0480(uint64_t a1, uint64_t a2)
{
  sub_D854C((uint64_t)__p, a2);
  int v3 = sub_15ABD8(*(void *)a1, *(void *)(a1 + 8), 1685090928);
  if (v3)
  {
    uint64_t v4 = v3;
    for (uint64_t i = *(uint64_t **)(sub_3855E4((int *)v3 + 6) + 16); i; uint64_t i = (uint64_t *)*i)
      sub_D87CC((uint64_t)__p, *((_DWORD *)i + 4), (_DWORD *)i + 4);
    sub_3B065C((uint64_t)buf, (void *)a1, v4);
    sub_D8A14((uint64_t)buf);
  }
  sub_3843C8((uint64_t)v6);
}

void sub_3B0614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_D7EC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3B065C(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  void *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)CFDictionaryRef result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void sub_3B0790(uint64_t a1, const char *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  sub_3AFE78((uint64_t)v6, a2, a3, a4, a5, a6);
  sub_D854C((uint64_t)&__p, (uint64_t)v6);
  sub_3B0838();
}

void sub_3B0814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_3B0838()
{
}

void sub_3B08B0(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_D7EC0((uint64_t)va);
  operator delete();
}

void sub_3B08E4(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(8uLL);
  void *v4 = a2;
  uint8x8_t v5 = v4 + 1;
  *(void *)&long long v6 = v4;
  *((void *)&v6 + 1) = v4 + 1;
  unint64_t v8 = (unint64_t)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if (v8 < v7)
  {
    *(_OWORD *)unint64_t v8 = v6;
    *(void *)(v8 + 16) = v5;
    unint64_t v9 = (char *)(v8 + 24);
    a1[1] = (char *)(v8 + 24);
    goto LABEL_19;
  }
  long long v25 = v6;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_60548();
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x555555555555555) {
    unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v13 = v11;
  }
  int v14 = (char *)sub_21974(v13);
  char v15 = &v14[24 * v10];
  CFIndex v17 = &v14[24 * v16];
  *(_OWORD *)char v15 = v25;
  *((void *)v15 + 2) = v5;
  unint64_t v9 = v15 + 24;
  CFArrayRef v19 = *a1;
  CFStringRef v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v17;
    if (!v18) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  do
  {
    *((void *)v15 - 3) = 0;
    *((void *)v15 - 2) = 0;
    v15 -= 24;
    *((void *)v15 + 2) = 0;
    long long v20 = *(_OWORD *)(v18 - 24);
    v18 -= 24;
    *(_OWORD *)char v15 = v20;
    *((void *)v15 + 2) = *((void *)v18 + 2);
    *(void *)CFStringRef v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
  }
  while (v18 != v19);
  CFTypeID v21 = *a1;
  CFStringRef v18 = a1[1];
  *a1 = v15;
  a1[1] = v9;
  a1[2] = v17;
  if (v18 != v21)
  {
    uint64_t v22 = v18;
    do
    {
      CFTypeID v24 = (void *)*((void *)v22 - 3);
      v22 -= 24;
      CFDictionaryRef v23 = v24;
      if (v24)
      {
        *((void *)v18 - 2) = v23;
        operator delete(v23);
      }
      CFStringRef v18 = v22;
    }
    while (v22 != v21);
    CFStringRef v18 = v21;
  }
  if (v18) {
LABEL_18:
  }
    operator delete(v18);
LABEL_19:
  a1[1] = v9;
}

void sub_3B0A60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3B0A74(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  int v7 = 1065353216;
  int v8 = 7;
  uint64_t v9 = a2;
  int v10 = 7;
  uint64_t v11 = a3;
  sub_15ACD8(v3, (uint64_t)&v8, 2);
  sub_38445C((uint64_t)v4);
}

void sub_3B0BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_3840C4(v6);
  sub_3840C4((uint64_t)va);
  sub_D7EC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_3B0C60(uint64_t result)
{
  if (result)
  {
    sub_D7EC0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_3B0CA0(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1) {
    sub_3B0C60(**(void **)(a1 + 8));
  }
  return a1;
}

void sub_3B0CE0(uint64_t a1, int **a2)
{
  *(_OWORD *)int v14 = 0u;
  long long v15 = 0u;
  int v16 = 1065353216;
  v12[0] = v12;
  v12[1] = v12;
  uint64_t v13 = 0;
  int v17 = 7;
  uint64_t v18 = 1668051820;
  int __p = 1685090932;
  sub_3847B8((uint64_t)&__p_4[4], &v17);
  sub_158DE0((uint64_t)v14, __p, &__p);
  sub_3840C4((uint64_t)&__p_4[4]);
  sub_3840C4((uint64_t)&v17);
  int8x8_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      int v5 = *v3;
      if (!*v3)
      {
        uint64_t v8 = (os_log_t *)sub_32A48(13);
        uint64_t v9 = *v8;
        if (*v8)
        {
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
          {
            int __p = 136315394;
            *(void *)__p_4 = "RoutingSettings_Aspen.cpp";
            *(_WORD *)&__p_4[8] = 1024;
            *(_DWORD *)&__p_4[10] = 865;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"LoadChannelSelector() - Invalid channel configuration for Channel Selector\"", (uint8_t *)&__p, 0x12u);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "LoadChannelSelector() - Invalid channel configuration for Channel Selector");
      }
      int __p = 7;
      *(void *)&__p_4[4] = (v5 - 1);
      uint64_t v6 = sub_15AC84((uint64_t)&__p);
      uint64_t v7 = v12[0];
      *uint64_t v6 = v12[0];
      v6[1] = v12;
      *(void *)(v7 + 8) = v6;
      v12[0] = v6;
      ++v13;
      sub_3840C4((uint64_t)&__p);
      ++v3;
    }
    while (v3 != v4);
  }
  sub_38445C((uint64_t)v11);
}

void sub_3B0FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  sub_D7EC0((uint64_t)va2);
  sub_15AD5C((uint64_t *)va);
  sub_D7EC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_3B1054(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_3AFE78((uint64_t)v9, a2, 0, 0, a4, 0x73656E73u);
  if ((a6 & 0xFF00000000) != 0) {
    sub_3B0A74((uint64_t)v9, a6, a6);
  }
  int v7 = 7;
  uint64_t v8 = 0;
  int v11 = 3700;
  sub_3847B8((uint64_t)&v12, &v7);
  sub_15A1EC((uint64_t)__p, &v11, 1);
  sub_3B0480((uint64_t)v9, (uint64_t)__p);
}

void sub_3B11D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_D7EC0((uint64_t)va1);
  sub_D7EC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3B1230(uint64_t a1, const char *a2, uint64_t *a3, NSObject *a4, int a5)
{
  if (a2)
  {
    uint64_t v9 = sub_3AFAF0(a4, a2, a3, 2u);
    if (v9)
    {
      uint64_t v10 = (const char *)sub_3FE38C((uint64_t)v9, a2, 2u);
      uint64_t v11 = sub_32A48(20);
      if (v10)
      {
        if (*(unsigned char *)(v11 + 8))
        {
          uint64_t v12 = *(NSObject **)v11;
          if (*(void *)v11)
          {
            if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
            {
              buf[0] = 136315906;
              *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
              __int16 v22 = 1024;
              *(_DWORD *)CFDictionaryRef v23 = 275;
              *(_WORD *)&v23[4] = 2080;
              *(void *)&_DWORD v23[6] = a2;
              __int16 v24 = 2112;
              long long v25 = v10;
              _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Inserting plist (%s): (%@)", (uint8_t *)buf, 0x26u);
            }
          }
        }
        sub_384254((uint64_t)v18, v10);
        int v19 = a5;
        sub_3847B8((uint64_t)&v20, v18);
        sub_15A1EC((uint64_t)buf, &v19, 1);
        sub_3B0480(a1, (uint64_t)buf);
      }
      uint64_t v14 = *(NSObject **)v11;
      if (*(void *)v11 && os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *a3;
        buf[0] = 136315906;
        *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
        __int16 v22 = 1024;
        *(_DWORD *)CFDictionaryRef v23 = 272;
        *(_WORD *)&v23[4] = 2112;
        *(void *)&_DWORD v23[6] = v17;
        __int16 v24 = 2080;
        long long v25 = a2;
        uint64_t v16 = "%25s:%-5d Could not load AU plist by name for %@: %s";
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (os_log_t *)sub_32A48(20);
      uint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *a3;
        buf[0] = 136315906;
        *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
        __int16 v22 = 1024;
        *(_DWORD *)CFDictionaryRef v23 = 266;
        *(_WORD *)&v23[4] = 2112;
        *(void *)&_DWORD v23[6] = v15;
        __int16 v24 = 2080;
        long long v25 = a2;
        uint64_t v16 = "%25s:%-5d Could not load disk tunings for %@ using plist file %s";
LABEL_15:
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)buf, 0x26u);
      }
    }
  }
}

void sub_3B14B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_D7EC0((uint64_t)va1);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3B14F4(uint64_t a1, const char *a2, int a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  *(_OWORD *)uint64_t v17 = 0u;
  long long v18 = 0u;
  int v19 = 1065353216;
  unsigned int v16 = 0;
  BOOL v13 = a5 == 1835298866 && a6 == 0;
  int v22 = 7;
  v23[0] = a5;
  LODWORD(__p) = 1685090932;
  sub_3847B8((uint64_t)&v21, &v22);
  sub_158DE0((uint64_t)v17, 1685090932, &__p);
  sub_3840C4((uint64_t)&v21);
  sub_3840C4((uint64_t)&v22);
  int v22 = 7;
  v23[0] = 1;
  LODWORD(__p) = 1684171107;
  sub_3847B8((uint64_t)&v21, &v22);
  sub_158DE0((uint64_t)v17, (int)__p, &__p);
  sub_3840C4((uint64_t)&v21);
  sub_3840C4((uint64_t)&v22);
  if (a5 == 1836282987 && *(unsigned char *)(a7 + 8))
  {
    if (*(void *)a7)
    {
      int v14 = 7;
      uint64_t v15 = 1;
      int v22 = 6602;
      sub_3847B8((uint64_t)v23, &v14);
      sub_15A1EC((uint64_t)&__p, &v22, 1);
      sub_3B0480((uint64_t)v17, (uint64_t)&__p);
    }
    if ((*(void *)a7 & 2) != 0)
    {
      int v14 = 7;
      uint64_t v15 = 0;
      int v22 = 6602;
      sub_3847B8((uint64_t)v23, &v14);
      sub_15A1EC((uint64_t)&__p, &v22, 1);
      sub_3B0480((uint64_t)v17, (uint64_t)&__p);
    }
  }
  sub_3AFFE0((uint64_t)v17, (int *)&v16, a2, a3, a4, a5);
  sub_3B0384((uint64_t)v17, v16);
  if (v13)
  {
    int v14 = 7;
    uint64_t v15 = 2;
    int v22 = 64003;
    sub_3847B8((uint64_t)v23, &v14);
    sub_15A1EC((uint64_t)&__p, &v22, 1);
    sub_3B0480((uint64_t)v17, (uint64_t)&__p);
  }
  sub_D854C((uint64_t)&__p, (uint64_t)v17);
  sub_3B0838();
}

void sub_3B1848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_D7EC0((uint64_t)va2);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  sub_D7EC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_3B18EC(uint64_t a1, const char *a2, uint64_t a3)
{
  sub_3AFE78((uint64_t)v3, a2, 0, 0, a3, 0x6C646E6Du);
  sub_D854C((uint64_t)&__p, (uint64_t)v3);
  sub_3B0838();
}

void sub_3B1984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_3B19A8(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5)
{
  sub_3AFE78((uint64_t)v6, a2, a3, 0, a4, 0x6E626571u);
  if ((a5 & 0xFF00000000) != 0) {
    sub_3B0A74((uint64_t)v6, a5, a5);
  }
  sub_D854C((uint64_t)&__p, (uint64_t)v6);
  sub_3B0838();
}

void sub_3B1A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_3B1A7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_3AFE78((uint64_t)v5, a2, 0, 0, a3, 0x64636362u);
  if ((a4 & 0xFF00000000) != 0) {
    sub_3B0A74((uint64_t)v5, a4, a4);
  }
  sub_D854C((uint64_t)&__p, (uint64_t)v5);
  sub_3B0838();
}

void sub_3B1B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_3B1B54(float a1, uint64_t a2, unsigned int a3)
{
  sub_3AFE78((uint64_t)&v7, 0, 0, 0, 0, 0x6678676Eu);
  LODWORD(__p[0]) = 9;
  __p[1] = (void *)LODWORD(a1);
  sub_3B1D58(v6, a3, (uint64_t)__p);
  sub_3840C4((uint64_t)__p);
  sub_38445C((uint64_t)v5);
}

void sub_3B1CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_D7EC0((uint64_t)va2);
  sub_15AD5C((uint64_t *)va);
  sub_D7EC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_3B1D58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  uint64_t v5 = a2 - 1;
  do
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_15AC84(a3);
    uint64_t v5 = 0;
    uint64_t v8 = *a1;
    void *v7 = *a1;
    v7[1] = a1;
    *(void *)(v8 + 8) = v7;
    *a1 = (uint64_t)v7;
    ++a1[2];
  }
  while (v6);
  return a1;
}

void sub_3B1DC4(_Unwind_Exception *a1)
{
  sub_15AD5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3B1DD8(uint64_t a1, int *a2, int *a3)
{
  uint64_t v5 = sub_3847B8(a1, a2);
  sub_3847B8(v5 + 16, a3);
  return a1;
}

void sub_3B1E10(_Unwind_Exception *a1)
{
  sub_3840C4(v1);
  _Unwind_Resume(a1);
}

void sub_3B1E24(uint64_t a1)
{
  *(_OWORD *)uint64_t v6 = 0u;
  long long v7 = 0u;
  int v8 = 1065353216;
  int v5 = 0;
  if (*(_DWORD *)(a1 + 48) != 1668049011 || (sub_23AC0() & 1) == 0)
  {
    LODWORD(v13) = 7;
    uint64_t v14 = 1936748595;
    LODWORD(__p) = 1685090932;
    sub_3847B8((uint64_t)&v10, (int *)&v13);
    sub_158DE0((uint64_t)v6, 1685090932, &__p);
    sub_3840C4((uint64_t)&v10);
    sub_3840C4((uint64_t)&v13);
    uint64_t v13 = &v13;
    uint64_t v14 = (uint64_t)&v13;
    uint64_t v15 = 0;
    int v11 = 7;
    uint64_t v12 = 64001;
    uint64_t v1 = sub_15B9D4(&v11);
    uint64_t v2 = v13;
    *uint64_t v1 = v13;
    v1[1] = &v13;
    v2[1] = v1;
    uint64_t v13 = v1;
    ++v15;
    sub_3840C4((uint64_t)&v11);
    sub_38445C((uint64_t)v4);
  }
  sub_D7EFC((void *)v7);
  int8x8_t v3 = v6[0];
  v6[0] = 0;
  if (v3) {
    operator delete(v3);
  }
}

void sub_3B215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_D7EC0((uint64_t)va1);
  sub_D7EC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3B2214(uint64_t a1, const char *a2, uint64_t a3, char *__s)
{
  if (!__s) {
    goto LABEL_25;
  }
  sub_21C8C(v15, __s);
  if (v16 < 0)
  {
    if (!v15[1])
    {
LABEL_20:
      BOOL v10 = 1;
      goto LABEL_21;
    }
    long long v7 = (void **)v15[0];
  }
  else
  {
    if (!v16) {
      goto LABEL_25;
    }
    long long v7 = v15;
  }
  if (!sub_3AF9D4(a3, (const char *)v7))
  {
    uint64_t v12 = (os_log_t *)sub_32A48(20);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = v15;
      if (v16 < 0) {
        uint64_t v14 = (void **)v15[0];
      }
      __p[0] = 136315650;
      *(void *)&__p[1] = "RoutingSettings_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 488;
      __int16 v25 = 2080;
      CFArrayRef v26 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not load a tuning preset file with name %s", (uint8_t *)__p, 0x1Cu);
    }
    goto LABEL_20;
  }
  *(_OWORD *)int v19 = 0u;
  long long v20 = 0u;
  int v21 = 1065353216;
  if (v16 >= 0) {
    uint64_t v8 = v15;
  }
  else {
    uint64_t v8 = (void **)v15[0];
  }
  uint64_t v9 = sub_3FE38C(a3, (const char *)v8, 1u);
  BOOL v10 = v9 == 0;
  if (v9)
  {
    int v17 = 7;
    uint64_t v18 = 1851942257;
    __p[0] = 1685090932;
    sub_3847B8((uint64_t)&__p[2], &v17);
    sub_158DE0((uint64_t)v19, __p[0], __p);
    sub_3840C4((uint64_t)&__p[2]);
    sub_3840C4((uint64_t)&v17);
    sub_384254((uint64_t)&v17, v9);
    __p[0] = 1685086576;
    sub_3847B8((uint64_t)&__p[2], &v17);
    sub_158DE0((uint64_t)v19, __p[0], __p);
    sub_3840C4((uint64_t)&__p[2]);
    sub_3840C4((uint64_t)&v17);
    sub_D854C((uint64_t)__p, (uint64_t)v19);
    sub_3B0838();
  }
  sub_D7EFC((void *)v20);
  uint64_t v11 = v19[0];
  v19[0] = 0;
  if (v11) {
    operator delete(v11);
  }
LABEL_21:
  if (v16 < 0)
  {
    operator delete(v15[0]);
    if (!v10) {
      return;
    }
LABEL_25:
    sub_3B19A8(a1, a2, 0, a3, 0);
  }
  if (v10) {
    goto LABEL_25;
  }
}

void sub_3B24F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_3B2568(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, CFStringRef *a6)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7)
  {
    if (a2)
    {
      sub_3AFE78((uint64_t)v17, a2, 0, 0, a3, 0x66697266u);
      sub_3B2950(&__p, a6, a5);
      sub_3842E4((uint64_t)&v15, (uint64_t)&__p);
      int v18 = 4504;
      sub_3847B8((uint64_t)&v19, &v15);
      sub_15A1EC((uint64_t)buf, &v18, 1);
      sub_3B0480((uint64_t)v17, (uint64_t)buf);
    }
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 1139;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v9 = (os_log_t *)sub_32A48(13);
  BOOL v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
    __int16 v21 = 1024;
    int v22 = 1138;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
  }
  uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v11, "Precondition failure.");
}

void sub_3B28A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void sub_3B2948()
{
}

void sub_3B2950(std::string *a1, CFStringRef *a2, uint64_t a3)
{
  sub_21C8C(&v26, off_648B50);
  uint64_t v6 = std::string::append(&v26, "/", 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_21B7C(__p, *a2);
  if ((v25 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v9 = v25;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  BOOL v10 = std::string::append(&v27, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v28, "/", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v29, "AU", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  char v16 = std::string::append(&v30, "/", 1uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a3 + 23);
  if (v18 >= 0) {
    uint64_t v19 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v19 = *(const std::string::value_type **)a3;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a3 + 8);
  }
  __int16 v21 = std::string::append(&v31, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __int16 v23 = std::string::append(&v32, ".plist", 6uLL);
  *a1 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_3B2B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 41) < 0) {
    operator delete(*(void **)(v40 - 64));
  }
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_3B2C38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = *(unsigned __int8 *)(a4 + 23);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a4 + 8);
    }
    if (v4)
    {
      sub_3AFE78((uint64_t)v13, a2, 0, 0, a3, 0x6F636E73u);
      int v11 = 7;
      uint64_t v12 = 1;
      LODWORD(v14) = 4521;
      sub_3847B8((uint64_t)&v15, &v11);
      sub_15A1EC((uint64_t)__p, (int *)&v14, 1);
      sub_3B0480((uint64_t)v13, (uint64_t)__p);
    }
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    std::string::size_type v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        __p[0] = 136315394;
        *(void *)&__p[1] = "RoutingSettings_Aspen.cpp";
        __int16 v17 = 1024;
        int v18 = 1155;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v5 = (os_log_t *)sub_32A48(13);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
  {
    __p[0] = 136315394;
    *(void *)&__p[1] = "RoutingSettings_Aspen.cpp";
    __int16 v17 = 1024;
    int v18 = 1154;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__p, 0x12u);
  }
  long long v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v7, "Precondition failure.");
}

void sub_3B3198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_D7EC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3B3240(uint64_t a1, const char *a2, NSObject *a3)
{
  if (a2 && sub_3AFC9C(a3, a2))
  {
    *(_OWORD *)int v11 = 0u;
    long long v12 = 0u;
    int v13 = 1065353216;
    int v5 = sub_3FE38C((uint64_t)a3, a2, 1u);
    if (v5)
    {
      int v9 = 7;
      uint64_t v10 = 1851942257;
      __p[0] = 1685090932;
      sub_3847B8((uint64_t)&__p[2], &v9);
      sub_158DE0((uint64_t)v11, __p[0], __p);
      sub_3840C4((uint64_t)&__p[2]);
      sub_3840C4((uint64_t)&v9);
      sub_384254((uint64_t)&v9, v5);
      __p[0] = 1685086576;
      sub_3847B8((uint64_t)&__p[2], &v9);
      sub_158DE0((uint64_t)v11, __p[0], __p);
      sub_3840C4((uint64_t)&__p[2]);
      sub_3840C4((uint64_t)&v9);
      sub_D854C((uint64_t)__p, (uint64_t)v11);
      sub_3B0838();
    }
    uint64_t v6 = (os_log_t *)sub_32A48(20);
    long long v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      __p[0] = 136315650;
      *(void *)&__p[1] = "RoutingSettings_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 519;
      __int16 v17 = 2080;
      int v18 = a2;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not load a tuning preset file with name %s", (uint8_t *)__p, 0x1Cu);
    }
    sub_D7EFC((void *)v12);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_3B3484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_D7EC0((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *sub_3B34D8(const char *a1, uint64_t *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  CFStringRef v19 = CFStringCreateWithCString(0, "ANC", 0x600u);
  char v20 = 1;
  CFStringRef v17 = CFStringCreateWithCString(0, a1, 0x600u);
  char v18 = 1;
  *(void *)AudioBufferList buf = a2;
  *(void *)&_DWORD buf[8] = &v19;
  *(void *)&buf[16] = &v17;
  int v6 = sub_3FD858(a3, (uint64_t)buf, 2u);
  sub_72924((uint64_t)&v17);
  sub_72924((uint64_t)&v19);
  if (v6)
  {
    long long v7 = (os_log_t *)sub_32A48(20);
    os_log_t v8 = *v7;
    if (!*v7 || !os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    uint64_t v9 = *a2;
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 736;
    *(_WORD *)&unsigned char buf[18] = 2112;
    *(void *)&buf[20] = v9;
    __int16 v22 = 2080;
    __int16 v23 = "ANC";
    __int16 v24 = 2080;
    unsigned __int8 v25 = a1;
    uint64_t v10 = "%25s:%-5d Cannot find strips file %@/%s/%s";
    int v11 = v8;
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    uint32_t v13 = 48;
LABEL_6:
    _os_log_impl(&def_1E50E8, v11, v12, v10, buf, v13);
    return 0;
  }
  CFDictionaryRef result = sub_3FE38C(a3, a1, 2u);
  if (!result)
  {
    __int16 v15 = (os_log_t *)sub_32A48(20);
    os_log_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1203;
    uint64_t v10 = "%25s:%-5d Failed to get ANC dictionary from disk tunings";
    int v11 = v16;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    uint32_t v13 = 18;
    goto LABEL_6;
  }
  return result;
}

void sub_3B36D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

const void *sub_3B36FC(const char *a1, uint64_t *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  CFStringRef v19 = CFStringCreateWithCString(0, "Sidetone", 0x600u);
  char v20 = 1;
  CFStringRef v17 = CFStringCreateWithCString(0, a1, 0x600u);
  char v18 = 1;
  *(void *)AudioBufferList buf = a2;
  *(void *)&_DWORD buf[8] = &v19;
  *(void *)&buf[16] = &v17;
  int v6 = sub_3FD858(a3, (uint64_t)buf, 1u);
  sub_72924((uint64_t)&v17);
  sub_72924((uint64_t)&v19);
  if (v6)
  {
    long long v7 = (os_log_t *)sub_32A48(20);
    os_log_t v8 = *v7;
    if (!*v7 || !os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    uint64_t v9 = *a2;
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 780;
    *(_WORD *)&unsigned char buf[18] = 2112;
    *(void *)&buf[20] = v9;
    __int16 v22 = 2080;
    __int16 v23 = "Sidetone";
    __int16 v24 = 2080;
    unsigned __int8 v25 = a1;
    uint64_t v10 = "%25s:%-5d Cannot find preset file %@/%s/%s";
    int v11 = v8;
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    uint32_t v13 = 48;
LABEL_6:
    _os_log_impl(&def_1E50E8, v11, v12, v10, buf, v13);
    return 0;
  }
  CFDictionaryRef result = sub_3FE38C(a3, a1, 1u);
  if (!result)
  {
    __int16 v15 = (os_log_t *)sub_32A48(20);
    os_log_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1216;
    uint64_t v10 = "%25s:%-5d Failed to get sidetone dictionary from sidetone preset file";
    int v11 = v16;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    uint32_t v13 = 18;
    goto LABEL_6;
  }
  return result;
}

void sub_3B38F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_3B3920(std::string *a1, CFStringRef *a2)
{
  sub_21C8C(&v17, off_648B50);
  uint64_t v4 = std::string::append(&v17, "/", 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_21B7C(__p, *a2);
  if ((v16 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v7 = v16;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  os_log_t v8 = std::string::append(&v18, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v19, "/", 1uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  os_log_type_t v12 = std::string::append(&v20, "VAD", 3uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v21, "/", 1uLL);
  *a1 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_3B3AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_3B3B48(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  strcpy((char *)(a1 + 48), "tlfd");
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DF10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65DF10))
  {
    sub_3B3CC4();
    __cxa_guard_release(&qword_65DF10);
  }
  uint64_t v2 = qword_65DF00;
  int8x8_t v3 = (std::__shared_weak_count *)qword_65DF08;
  if (qword_65DF08) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_65DF08 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1509D8((void *)a1, v2, (uint64_t)v3);
  if (v3) {
    sub_4636C(v3);
  }
  sub_3B0790(a1, "volume only", 0, 0, 0, 0x76727132u);
}

void sub_3B3C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_65DF10);
  sub_297864(v15);
  _Unwind_Resume(a1);
}

double sub_3B3CC4()
{
  uint64_t v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = off_6387A0;
  *((void *)v0 + 4) = -2307755726;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001;
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"";
  *(_OWORD *)(v0 + 72) = xmmword_65DF18;
  v0[88] = 0;
  v0[136] = 0;
  *(void *)&double result = 0x500000007;
  *((void *)v0 + 18) = 0x500000007;
  *((void *)v0 + 3) = off_6387D8;
  qword_65DF00 = (uint64_t)(v0 + 24);
  qword_65DF08 = (uint64_t)v0;
  return result;
}

void sub_3B3D7C(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_3AFE78((uint64_t)v6, a2, a3, 0, a4, 0x6366726Bu);
  if ((a5 & 0xFF00000000) != 0) {
    sub_3B0A74((uint64_t)v6, a5, a5);
  }
  sub_D854C((uint64_t)&__p, (uint64_t)v6);
  sub_3B0838();
}

void sub_3B3E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_3B3E60(uint64_t a1)
{
  *(void *)a1 = &off_638818;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }

  operator delete();
}

uint64_t sub_3B3ED8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_3B3EE0()
{
  return 1987211570;
}

uint64_t sub_3B3EEC(uint64_t a1)
{
  *(void *)a1 = &off_638818;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_3B3F3C(double a1, double a2)
{
  double v2 = a1;
  double v3 = a2;
  operator new();
}

void sub_3B3FC4()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3B3FF4(uint64_t a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v21[0] = 0;
    char v23 = 0;
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    v21[0] = 0;
    char v23 = 0;
  }
  sub_14F0E0((uint64_t)v24, (uint64_t)v21);
  sub_3B4364((void *)a1, 1684234860, a3, a4, (uint64_t)v24);
  if (v26) {
    sub_463E0(v25);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)a1 = &off_63A2A0;
  *(_OWORD *)(a1 + 128) = *a2;
  *(float *)(a1 + 144) = sub_3B443C((double *)a1);
  *(_DWORD *)(a1 + 156) = 5;
  *(void *)(a1 + 176) = 0x100000001;
  *(void *)(a1 + 148) = 0x700000001;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)"";
  if (*(double *)(a1 + 136) < *(double *)(a1 + 128))
  {
    os_log_t v8 = (os_log_t *)sub_32A48(13);
    long long v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        double v10 = *(double *)(a1 + 128);
        double v11 = *(double *)(a1 + 136);
        *(_DWORD *)AudioBufferList buf = 136315906;
        std::string v28 = "VolumeControl.h";
        __int16 v29 = 1024;
        int v30 = 1336;
        __int16 v31 = 2048;
        double v32 = v10;
        __int16 v33 = 2048;
        double v34 = v11;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Encountered an invalid range for the variable EQ's current gain parameter: [%f, %f]\"", buf, 0x26u);
      }
    }
  }
  if (*(unsigned char *)(a1 + 88))
  {
    double v12 = *(void *)(a1 + 64) ? *(float *)(*(void *)(a1 + 48) + 36) : 0.0;
    if (*(double *)(a1 + 128) != v12 || (double v13 = sub_792A4(a1 + 40), *(double *)(a1 + 136) != *(float *)&v13))
    {
      uint64_t v14 = (os_log_t *)sub_32A48(13);
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
        {
          if (*(void *)(a1 + 64)) {
            double v16 = *(float *)(*(void *)(a1 + 48) + 36);
          }
          else {
            double v16 = 0.0;
          }
          double v17 = sub_792A4(a1 + 40);
          uint64_t v18 = *(void *)(a1 + 128);
          uint64_t v19 = *(void *)(a1 + 136);
          *(_DWORD *)AudioBufferList buf = 136316418;
          std::string v28 = "VolumeControl.h";
          __int16 v29 = 1024;
          int v30 = 1341;
          __int16 v31 = 2048;
          double v32 = v16;
          __int16 v33 = 2048;
          double v34 = *(float *)&v17;
          __int16 v35 = 2048;
          uint64_t v36 = v18;
          __int16 v37 = 2048;
          uint64_t v38 = v19;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"VolumeCurve's range [%f, %f] doesn't match volume range of command [%f, %f]\"", buf, 0x3Au);
        }
      }
    }
  }
  if (v23) {
    sub_463E0(v22);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)(a1 + 152) = 0x500000007;
  return a1;
}

void sub_3B4300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_35B9EC(v16);
  if (a15) {
    sub_463E0(a11);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

void *sub_3B4364(void *a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_14F0E0((uint64_t)v9, a5);
  sub_35C370((uint64_t)a1, a2, v12, (uint64_t)v9);
  if (v11) {
    sub_463E0(v10);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *a1 = off_63A3D8;
  return a1;
}

void sub_3B440C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_463E0(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

float sub_3B443C(double *a1)
{
  int v2 = (*(uint64_t (**)(double *))(*(void *)a1 + 136))(a1);
  float result = 0.0;
  if (v2 != 1935895666)
  {
    if (v2 != 1684234860)
    {
      int v4 = v2;
      long long v5 = (os_log_t *)sub_32A48(13);
      int v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315650;
          long long v9 = "VolumeControl.h";
          __int16 v10 = 1024;
          int v11 = 1397;
          __int16 v12 = 1024;
          int v13 = v4;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered an invalid volume unit type: %d\"", (uint8_t *)&v8, 0x18u);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }
    return a1[16];
  }
  return result;
}

void sub_3B4594(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3B45B0()
{
  return 0;
}

uint64_t sub_3B45B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v14);
  sub_2417C(__p, 0x76727132u);
  if ((v13 & 0x80u) == 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_256E4(&v15, (uint64_t)v4, v5);
  sub_256E4(&v15, (uint64_t)" ", 1);
  int v6 = (void *)std::ostream::operator<<();
  sub_256E4(v6, (uint64_t)" ", 1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v7 == 1684234860) {
    int v8 = "dB";
  }
  else {
    int v8 = "Scalar";
  }
  if (v7 == 1684234860) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 6;
  }
  sub_256E4(v6, (uint64_t)v8, v9);
  sub_256E4(v6, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_246E4(a2, (uint64_t)v16);
  *(void *)((char *)v14
  uint64_t v15 = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3B4828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3B4858(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

void sub_3B4860(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(uint64_t, float))(*(void *)a1 + 16))(a1, *(float *)(a1 + 144));
    int v3 = 1;
  }
  else
  {
    float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, 1684234860);
    float v5 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, 1935895666);
    sub_35C4B4(a1, 0x76727132u, *(_DWORD *)(a1 + 152), v4);
    sub_35C4B4(a1, 0x76727132u, *(_DWORD *)(a1 + 156), v5);
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 148) = v3;
}

BOOL sub_3B4960(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) != 0;
}

void sub_3B4970(uint64_t a1, unsigned int a2, int a3, float a4, float a5)
{
  int v50 = a3;
  if (*(_DWORD *)(a1 + 160))
  {
    uint64_t v10 = (os_log_t *)sub_32A48(38);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        __int16 v12 = "enabled";
      }
      else {
        __int16 v12 = "disabled";
      }
      unsigned __int8 v13 = v48;
      sub_2417C(v48, *(_DWORD *)(a1 + 160));
      if (v49 < 0) {
        unsigned __int8 v13 = (void **)v48[0];
      }
      sub_2417C(v46, a2);
      int v14 = v47;
      uint64_t v15 = (void **)v46[0];
      sub_14FDE0((uint64_t)__p, a1);
      uint64_t v16 = v46;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      *(_DWORD *)AudioBufferList buf = 136316930;
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      if (v45 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      __int16 v52 = 1024;
      int v53 = 1461;
      __int16 v54 = 2080;
      char v55 = (void *)v12;
      __int16 v56 = 2080;
      *(void *)__int16 v57 = v13;
      *(_WORD *)&v57[8] = 2080;
      int v58 = v16;
      __int16 v59 = 2048;
      double v60 = a4;
      __int16 v61 = 2048;
      double v62 = a5;
      __int16 v63 = 2080;
      int v64 = v17;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f on chain '%s'.", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
    }
    if (a2 != 1)
    {
      uint64_t v18 = (os_log_t *)sub_32A48(13);
      uint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v48, a2);
          std::string v20 = v49 >= 0 ? v48 : (void **)v48[0];
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v52 = 1024;
          int v53 = 1463;
          __int16 v54 = 2080;
          char v55 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"duck type: '%s' not supported!\"", buf, 0x1Cu);
          if (v49 < 0) {
            operator delete(v48[0]);
          }
        }
      }
    }
    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 164);
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, buf);
    v46[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 168);
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      CFNumberRef v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
    }
    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 172);
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, buf);
    CFNumberRef v43 = v23;
    if (!v23)
    {
      uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }
    float v24 = a5 * 1000.0;
    int v25 = *(_DWORD *)(a1 + 176);
    if (*(_DWORD *)(a1 + 180) != 1) {
      float v24 = a5;
    }
    float v42 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v41 = a4;
    sub_14FEB4(buf, v21, &v50);
    sub_14FF9C((int *)((char *)&v53 + 2), v22, (int *)&v41);
    sub_14FF9C(&v57[2], v23, (int *)&v42);
    v48[0] = buf;
    v48[1] = &def_1E50E8 + 3;
    CFDictionaryRef v26 = sub_4D3D8((uint64_t)v48);
    for (uint64_t i = 0; i != -6; i -= 2)
    {
      std::string v28 = (&v58)[i];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = *(const void **)&v57[i * 8 + 2];
      if (v29) {
        CFRelease(v29);
      }
    }
    *(void *)AudioBufferList buf = v26;
    sub_35D6A8(a1, 0x76727132u, *(_DWORD *)(a1 + 160));
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }
  if (sub_20ADA4() && sub_35DD7C((void *)a1, 0x76727132u))
  {
    uint64_t v30 = sub_298DA4();
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 288))(v30);
    int v32 = v31;
    if (a3) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v31 == 0;
    }
    int v34 = v33;
    LODWORD(v48[0]) = v34;
    __int16 v35 = (os_log_t *)sub_32A48(38);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      int v53 = 1507;
      __int16 v37 = "enabled";
      __int16 v54 = 2080;
      *(_DWORD *)AudioBufferList buf = 136316162;
      __int16 v52 = 1024;
      if (!a3) {
        __int16 v37 = "disabled";
      }
      char v55 = (void *)v37;
      __int16 v56 = 1024;
      *(_DWORD *)__int16 v57 = v32;
      *(_WORD *)&v57[4] = 1024;
      *(_DWORD *)&v57[6] = v34;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Duck %s, enhance dialog level %u, Set AUSI bypass %u", buf, 0x28u);
    }
    sub_35D6A8(a1, 0x76727132u, 0x73697073u);
  }
}

void sub_3B4F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_3B5070(uint64_t a1, float a2)
{
  float v2 = a2;
  *(float *)(a1 + 144) = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1) == 1935895666)
  {
    sub_796B4(a1 + 40, v2);
    float v2 = v4;
  }
  double v6 = *(double *)(a1 + 128);
  double v5 = *(double *)(a1 + 136);
  float v7 = v5 - v6;
  float v8 = v2 - v6;
  float v9 = fminf(fmaxf(v8 / v7, 0.0), 1.0);
  BOOL v10 = v6 <= v2;
  double v11 = 0.5;
  if (!v10) {
    double v11 = 0.0;
  }
  float v12 = v11;
  if (v5 >= v2) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  if (v7 == 0.0) {
    float v14 = v13;
  }
  else {
    float v14 = v9;
  }
  uint64_t v15 = sub_32A48(18);
  uint64_t v16 = sub_32A48(38);
  char v17 = 0;
  uint64_t v18 = 0;
  *(void *)AudioBufferList buf = 0x100000002;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v21) {
      goto LABEL_17;
    }
  }
  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_17:
  CFNumberRef v22 = *(NSObject **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v25 >= 0) {
      CFNumberRef v23 = __p;
    }
    else {
      CFNumberRef v23 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v27 = 1024;
    int v28 = 1426;
    __int16 v29 = 2048;
    double v30 = v2;
    __int16 v31 = 2048;
    double v32 = v14;
    __int16 v33 = 2080;
    int v34 = v23;
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_INFO, "%25s:%-5d Setting Volume (VEQv2) with preGain %f dB, currentGain %f on chain '%s'.", buf, 0x30u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x76727132u, *(_DWORD *)(a1 + 152), v2);
  sub_35C4B4(a1, 0x76727132u, *(_DWORD *)(a1 + 156), v14);
}

void sub_3B52D0(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3B5314()
{
}

void sub_3B5394()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3B53C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3B53EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6387A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3B5440(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6387A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3B5460(void *a1, unint64_t a2)
{
  float v14 = (void *)CFStringCreateWithCString(0, "Generic", 0x600u);
  char v15 = 1;
  sub_3B3920((std::string *)v21, (CFStringRef *)&v14);
  float v4 = std::string::append((std::string *)v21, "volume_only.dspg", 0x10uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if ((v21[23] & 0x80000000) != 0) {
    operator delete(*(void **)v21);
  }
  sub_72924((uint64_t)&v14);
  double v6 = (os_log_t *)sub_32A48(20);
  float v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    float v8 = &v20;
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v8 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)char v21 = 136315650;
    *(void *)&v21[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&v21[12] = 1024;
    *(_DWORD *)&v21[14] = 1247;
    *(_WORD *)&v21[18] = 2080;
    *(void *)&v21[20] = v8;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume only graph is %s", v21, 0x1Cu);
  }
  sub_21C8C(v18, "volume only");
  LOBYTE(v14) = 0;
  char v17 = 0;
  LOBYTE(__p) = 0;
  char v13 = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  long long v23 = xmmword_5968C4;
  uint64_t v24 = 2;
  sub_6D1AC((uint64_t)v21, (int *)&v23, 3);
  sub_3B57FC((uint64_t)a1, (char *)v18, &v20, (uint64_t)&v14, (uint64_t)&__p, 0, a2 | 0x100000000, HIDWORD(a2) | 0x100000000);
  sub_6C954((uint64_t)v21);
  if (v13 && v12 < 0) {
    operator delete(__p);
  }
  if (v17 && v16 < 0) {
    operator delete(v14);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DF38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65DF38))
  {
    sub_14EA44(&qword_65DF28, &xmmword_65DF18);
    __cxa_guard_release(&qword_65DF38);
  }
  uint64_t v9 = qword_65DF28;
  BOOL v10 = (std::__shared_weak_count *)unk_65DF30;
  if (unk_65DF30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_65DF30 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1509D8(a1, v9, (uint64_t)v10);
  if (v10) {
    sub_4636C(v10);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_3B572C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_guard_abort(&qword_65DF38);
  sub_297864(v37);
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_3B57FC(uint64_t a1, char *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12 = a3;
  char v13 = 0;
  if ((a7 & 0xFF00000000) != 0)
  {
    unsigned int v14 = a8;
    if ((a8 & 0xFF00000000) != 0)
    {
      uint64_t v21 = a1;
      uint64_t v15 = a6;
      uint64_t v16 = a5;
      uint64_t v17 = a4;
      char v19 = a2;
      std::string v20 = (unint64_t *)operator new(8uLL);
      a2 = v19;
      char v12 = a3;
      a4 = v17;
      a5 = v16;
      a6 = v15;
      char v13 = v20;
      a1 = v21;
      *char v13 = a7 | ((unint64_t)v14 << 32);
    }
  }
  sub_3B5948(a1, a2, 1684434036, v12, a4, a5, a6);
  if (v13)
  {
    operator delete(v13);
  }
}

void sub_3B5930(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B5948(uint64_t a1, char *a2, int a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v12 = (const std::__fs::filesystem::path *)sub_6D838((std::string *)buf, a4);
  std::__fs::filesystem::__status(v12, 0);
  if (SBYTE3(v34) < 0) {
    operator delete(*(void **)buf);
  }
  if (LOBYTE(v29[0]) == 255 || LOBYTE(v29[0]) == 0)
  {
    unsigned int v14 = (os_log_t *)sub_32A48(20);
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = a4;
        }
        else {
          uint64_t v16 = (std::string *)a4->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioBufferList buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 3606;
        __int16 v33 = 2080;
        int v34 = v16;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not find graph file %s", buf, 0x1Cu);
      }
    }
  }
  if (a2[23] >= 0) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = *(char **)a2;
  }
  uint64_t result = sub_2D457C(a1, v17, a3);
  if (a7 || !*(unsigned char *)(a5 + 24))
  {
    char v19 = (const std::__fs::filesystem::path *)sub_6D838((std::string *)buf, a4);
    std::__fs::filesystem::__status(v19, 0);
    if (SBYTE3(v34) < 0) {
      operator delete(*(void **)buf);
    }
    if (LOBYTE(v29[0]) == 255 || !LOBYTE(v29[0]))
    {
      std::string v20 = (os_log_t *)sub_32A48(20);
      uint64_t v21 = *v20;
      if (*v20)
      {
        if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v22 = a4;
          }
          else {
            uint64_t v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioBufferList buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 1794;
          __int16 v33 = 2080;
          int v34 = v22;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not find graph file %s", buf, 0x1Cu);
        }
      }
    }
    *(_OWORD *)__int16 v29 = 0u;
    long long v30 = 0u;
    int v31 = 1065353216;
    LODWORD(v26[0]) = 7;
    v26[1] = (void *)1685287015;
    *(_DWORD *)AudioBufferList buf = 1685090932;
    sub_3847B8((uint64_t)&buf[8], (int *)v26);
    sub_158DE0((uint64_t)v29, *(int *)buf, buf);
    sub_3840C4((uint64_t)&buf[8]);
    sub_3840C4((uint64_t)v26);
    *(_OWORD *)CFDictionaryRef v26 = 0u;
    long long v27 = 0u;
    int v28 = 1065353216;
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v23 = (const char *)a4;
    }
    else {
      long long v23 = (const char *)a4->__r_.__value_.__r.__words[0];
    }
    *(void *)AudioBufferList buf = CFStringCreateWithCString(0, v23, 0x600u);
    _DWORD buf[8] = 1;
    sub_38429C((uint64_t)v25, *(CFTypeRef *)buf);
    sub_72924((uint64_t)buf);
    *(_DWORD *)AudioBufferList buf = 1685287015;
    sub_3847B8((uint64_t)&buf[8], v25);
    sub_158DE0((uint64_t)v26, *(int *)buf, buf);
    sub_3840C4((uint64_t)&buf[8]);
    operator new();
  }
  return result;
}

void sub_3B6718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  __cxa_guard_abort(&qword_65E220);
  sub_463E0(*(void **)(v40 - 160));
  sub_3840C4((uint64_t)&a13);
  sub_D7EC0((uint64_t)&a15);
  sub_D7EC0((uint64_t)&a21);
  sub_297864(a12);
  _Unwind_Resume(a1);
}

void sub_3B6A18(std::__fs::filesystem::path *a1, std::string *a2, std::string *a3, char *a4)
{
  sub_6D838(&v24.__pn_, a2);
  std::__fs::filesystem::path::__string_view v7 = std::__fs::filesystem::path::__filename(&v24);
  if (v7.__size_)
  {
    float v8 = (std::__fs::filesystem::path *)v24.__pn_.__r_.__value_.__r.__words[0];
    std::string::size_type v9 = (std::string::size_type)&v24;
    if ((v24.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v9 = v24.__pn_.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v10 = (std::string::size_type)&v7.__data_[-v9];
    if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v24.__pn_.__r_.__value_.__l.__size_ >= v10)
      {
        v24.__pn_.__r_.__value_.__l.__size_ = v10;
        goto LABEL_9;
      }
    }
    else if (v10 <= HIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]))
    {
      *((unsigned char *)&v24.__pn_.__r_.__value_.__s + 23) = v10 & 0x7F;
      float v8 = &v24;
LABEL_9:
      v8->__pn_.__r_.__value_.__s.__data_[v10] = 0;
      goto LABEL_10;
    }
    sub_82504();
  }
LABEL_10:
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21E8C(&__dst, v24.__pn_.__r_.__value_.__l.__data_, v24.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::__fs::filesystem::path __dst = v24;
  }
  size = (char *)HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v12 = (std::string::size_type)a3;
  }
  else {
    std::string::size_type v12 = a3->__r_.__value_.__r.__words[0];
  }
  int v13 = a4[23];
  if (v13 >= 0) {
    unsigned int v14 = a4;
  }
  else {
    unsigned int v14 = *(char **)a4;
  }
  if (v13 >= 0) {
    int64_t v15 = a4[23];
  }
  else {
    int64_t v15 = *((void *)a4 + 1);
  }
  if (v15)
  {
    if ((char)size < 0) {
      size = (char *)a3->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v15)
    {
      uint64_t v16 = &size[v12];
      int v17 = *v14;
      uint64_t v18 = (void *)v12;
      do
      {
        char v19 = &size[-v15];
        if (v19 == (char *)-1) {
          break;
        }
        std::string v20 = (char *)memchr(v18, v17, (size_t)(v19 + 1));
        if (!v20) {
          break;
        }
        uint64_t v21 = v20;
        if (!memcmp(v20, v14, v15))
        {
          if (v21 == v16 || &v21[-v12] == (char *)-1) {
            break;
          }
          goto LABEL_41;
        }
        uint64_t v18 = v21 + 1;
        size = (char *)(v16 - (v21 + 1));
      }
      while ((uint64_t)size >= v15);
    }
    sub_15EE0C((uint64_t)&v22, (const void **)&a3->__r_.__value_.__l.__data_, (const void **)a4);
    std::string __p = v22;
    memset(&v22, 0, sizeof(v22));
    sub_6D8A0(&v24, (uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21E8C(a1, v24.__pn_.__r_.__value_.__l.__data_, v24.__pn_.__r_.__value_.__l.__size_);
      goto LABEL_46;
    }
LABEL_44:
    *a1 = v24;
    goto LABEL_48;
  }
LABEL_41:
  sub_6D838(&__p, a3);
  sub_6D8A0(&v24, (uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_44;
  }
  sub_21E8C(a1, v24.__pn_.__r_.__value_.__l.__data_, v24.__pn_.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
  }
LABEL_48:
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_3B6C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B6D1C(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_6C954(result);
    operator delete();
  }
  return result;
}

void sub_3B6D6C(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_21E8C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }
  int v10 = a3;
  *(void *)(a1 + 24) = 0;
  long long v5 = (char *)operator new(0x28uLL);
  *(void *)long long v5 = off_638530;
  double v6 = v5 + 8;
  if (SHIBYTE(v9) < 0)
  {
    sub_21E8C(v6, __p[0], (unint64_t)__p[1]);
    int v7 = SHIBYTE(v9);
    *((_DWORD *)v5 + 8) = v10;
    *(void *)(a1 + 24) = v5;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)double v6 = *(_OWORD *)__p;
    *((void *)v5 + 3) = v9;
    *((_DWORD *)v5 + 8) = a3;
    *(void *)(a1 + 24) = v5;
  }
}

void sub_3B6E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_3B6E70(void *a1, _OWORD *a2, __n128 *a3, int a4, int a5)
{
  int v10 = (char *)operator new(0x98uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)int v10 = off_638858;
  *((void *)v10 + 4) = -2609680281;
  *((_DWORD *)v10 + 10) = 0;
  *(void *)(v10 + 60) = 0x100000001;
  *(_OWORD *)(v10 + 44) = *(_OWORD *)"";
  *((void *)v10 + 3) = &off_63C778;
  *(_OWORD *)(v10 + 72) = *a2;
  *((_DWORD *)v10 + 22) = a3->n128_u32[0];
  sub_15050C((uint64_t)(v10 + 96), &a3->n128_u64[1]);
  __n128 result = a3[2];
  *(__n128 *)(v10 + 120) = result;
  v10[136] = 1;
  *((_DWORD *)v10 + 36) = a4;
  *((_DWORD *)v10 + 37) = a5;
  *((void *)v10 + 3) = off_638890;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_3B6F7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double sub_3B6F94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  long long v5 = (os_log_t *)sub_32A48(24);
  double v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(__p, *(_DWORD *)(a1 + 32));
    int v7 = v13 >= 0 ? __p : (void **)__p[0];
    uint64_t v8 = *(char *)(a1 + 31) >= 0 ? v4 : *(void *)(a1 + 8);
    *(_DWORD *)AudioBufferList buf = 136315906;
    int64_t v15 = "RoutingSettings_Aspen.cpp";
    __int16 v16 = 1024;
    int v17 = 1761;
    __int16 v18 = 2080;
    char v19 = v7;
    __int16 v20 = 2080;
    uint64_t v21 = v8;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading plist for property %s from path %s", buf, 0x26u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_16CD18(&cf, v4);
  CFTypeRef v9 = cf;
  if (cf)
  {
    sub_384254((uint64_t)__p, cf);
    *(_DWORD *)AudioBufferList buf = *(_DWORD *)(a1 + 32);
    sub_3847B8((uint64_t)&v15 + 4, (int *)__p);
    sub_15A1EC(a2, (int *)buf, 1);
    sub_3840C4((uint64_t)&v15 + 4);
    sub_3840C4((uint64_t)__p);
    CFRelease(v9);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void sub_3B7138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_3B718C(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void sub_3B71D0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

unsigned char *sub_3B71E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_638530;
  double result = (unsigned char *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    double result = sub_21E8C(result, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)double result = v5;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

char *sub_3B7258(uint64_t a1)
{
  float v2 = (char *)operator new(0x28uLL);
  *(void *)float v2 = off_638530;
  int v3 = v2 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_21E8C(v3, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)int v3 = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_3B72D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3B72E8(uint64_t a1)
{
  *(void *)a1 = off_638530;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

uint64_t sub_3B7358(uint64_t a1)
{
  *(void *)a1 = off_638530;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_3B73A8()
{
  xmmword_661CC8 = 0u;
  unk_661CD8 = 0u;
  xmmword_661CB8 = 0u;
  strcpy((char *)&dword_661CE8, "tlfd");
  byte_661CF0 = 0;
  byte_661D38 = 0;
  xmmword_661D48 = 0u;
  unk_661D58 = 0u;
  xmmword_661D68 = 0u;
  unk_661D78 = 0u;
  qword_661D88 = 0;
  sub_16FEBC((uint64_t)v0, 0, -6.0, 32.0);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DF50, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_65DF50))
    {
      sub_3AF1C4(&qword_65DF40, &xmmword_5966F0, (uint64_t)v0);
      __cxa_guard_release(&qword_65DF50);
    }
  }
  sub_3B0790((uint64_t)&xmmword_661CB8, 0, 0, 0, 0, 0x76727132u);
}

void sub_3B74C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_3B751C(uint64_t a1, float *a2)
{
  sub_2975A4(a1, "fixed_gain");
  float v3 = *a2;
  uint64_t v4 = (os_log_t *)sub_32A48(20);
  long long v5 = *v4;
  if (*v4)
  {
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)int v10 = 1024;
      *(_DWORD *)&void v10[2] = 598;
      __int16 v11 = 2048;
      double v12 = v3;
      __int16 v13 = 1024;
      int v14 = 64003;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating FixedGain AU. Gain value: %f, Gain type: %u", (uint8_t *)buf, 0x22u);
    }
  }
  sub_3AFE78((uint64_t)&__p, 0, 0, 0, 0, 0x6678676Eu);
  buf[0] = 9;
  *(_DWORD *)int v10 = 0;
  *(float *)&AudioObjectPropertyAddress buf[2] = v3;
  sub_3B1D58(v7, 2, (uint64_t)buf);
  sub_3840C4((uint64_t)buf);
  sub_38445C((uint64_t)v6);
}

void sub_3B7738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_D7EC0(v5 - 96);
  sub_15AD5C((uint64_t *)va);
  sub_D7EC0((uint64_t)va1);
  sub_297864(v4);
  _Unwind_Resume(a1);
}

void sub_3B77B8(uint64_t a1, float *a2)
{
  sub_2975A4(a1, "fixed_gain");
  float v3 = *a2;
  uint64_t v4 = (os_log_t *)sub_32A48(20);
  uint64_t v5 = *v4;
  if (*v4)
  {
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)uint64_t v10 = 1024;
      *(_DWORD *)&void v10[2] = 598;
      __int16 v11 = 2048;
      double v12 = v3;
      __int16 v13 = 1024;
      int v14 = 64002;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating FixedGain AU. Gain value: %f, Gain type: %u", (uint8_t *)buf, 0x22u);
    }
  }
  sub_3AFE78((uint64_t)&__p, 0, 0, 0, 0, 0x6678676Eu);
  buf[0] = 9;
  *(_DWORD *)uint64_t v10 = 0;
  *(float *)&AudioObjectPropertyAddress buf[2] = v3;
  sub_3B1D58(v7, 1, (uint64_t)buf);
  sub_3840C4((uint64_t)buf);
  sub_38445C((uint64_t)v6);
}

void sub_3B79D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_D7EC0(v5 - 96);
  sub_15AD5C((uint64_t *)va);
  sub_D7EC0((uint64_t)va1);
  sub_297864(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_3B7A54(unsigned int a1)
{
  uint64_t v2 = qword_669908;
  if (!qword_669908)
  {
LABEL_7:
    if ((int)a1 > 1635085419)
    {
      if (a1 == 2003068262) {
        goto LABEL_19;
      }
      int v5 = 1635085420;
    }
    else
    {
      if (a1 == 1633759844) {
        goto LABEL_19;
      }
      int v5 = 1634231920;
    }
    if (a1 != v5)
    {
      int v14 = (os_log_t *)sub_32A48(20);
      os_log_t v15 = *v14;
      if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      sub_2417C(__p, a1);
      if (v18 >= 0) {
        __int16 v16 = __p;
      }
      else {
        __int16 v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v20 = "RoutingSettings_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 456;
      __int16 v23 = 2080;
      std::__fs::filesystem::path v24 = v16;
      __int16 v11 = "%25s:%-5d Invalid headset sub-type: '%s' not found in kDSPTuningHeadsetFilenames";
      double v12 = v15;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      goto LABEL_31;
    }
LABEL_19:
    uint64_t v8 = (os_log_t *)sub_32A48(20);
    os_log_t v9 = *v8;
    if (!*v8 || !os_log_type_enabled(*v8, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    sub_2417C(__p, a1);
    if (v18 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)AudioBufferList buf = 136315650;
    __int16 v20 = "RoutingSettings_Aspen.cpp";
    __int16 v21 = 1024;
    int v22 = 454;
    __int16 v23 = 2080;
    std::__fs::filesystem::path v24 = v10;
    __int16 v11 = "%25s:%-5d Skip loading tunings for headset sub-type: '%s'";
    double v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_INFO;
LABEL_31:
    _os_log_impl(&def_1E50E8, v12, v13, v11, buf, 0x1Cu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  uint64_t v3 = qword_669908;
  while (1)
  {
    unsigned int v4 = *(_DWORD *)(v3 + 32);
    if (v4 <= a1) {
      break;
    }
LABEL_6:
    uint64_t v3 = *(void *)v3;
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (v4 < a1)
  {
    v3 += 8;
    goto LABEL_6;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(v2 + 32);
      if (v6 <= a1) {
        break;
      }
      uint64_t v2 = *(void *)v2;
      if (!v2) {
LABEL_34:
      }
        sub_8251C("map::at:  key not found");
    }
    if (v6 >= a1) {
      return *(void *)(v2 + 40);
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      goto LABEL_34;
    }
  }
}

void sub_3B7CA4(void *a1, int a2, char *a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  int v14 = (os_log_t *)sub_32A48(20);
  os_log_t v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
  {
    int buf = 136315906;
    *(void *)buf_4 = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&buf_4[8] = 1024;
    *(_DWORD *)&buf_4[10] = 1319;
    *(_WORD *)&buf_4[14] = 1024;
    LODWORD(v38) = a2;
    WORD2(v38) = 2080;
    *(void *)((char *)&v38 + 6) = a3;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_INFO, "%25s:%-5d GetHeadsetPlaybackDSPChain: ChainType: %d, strip: %s", (uint8_t *)&buf, 0x22u);
  }
  __int16 v16 = (char *)sub_3B7A54(a5);
  sub_2975A4((uint64_t)a1, a3);
  int v17 = sub_3AF5E4(a4, a3);
  switch(a2)
  {
    case 0:
      break;
    case 1:
    case 3:
      LOBYTE(buf) = 0;
      buf_4[4] = 0;
      sub_3B14F4((uint64_t)a1, a3, 0, (uint64_t)v17, 0x6D73746Bu, 1, (uint64_t)&buf);
    case 2:
      sub_21C8C(&buf, a3);
      sub_3B3D7C((uint64_t)a1, (const char *)&buf, 0, (uint64_t)v17, 0);
    default:
      char v25 = (os_log_t *)sub_32A48(20);
      CFDictionaryRef v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        int buf = 136315650;
        *(void *)buf_4 = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&buf_4[8] = 1024;
        *(_DWORD *)&buf_4[10] = 1329;
        *(_WORD *)&buf_4[14] = 1024;
        LODWORD(v38) = a2;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d GetHeadsetPlaybackDSPChain: Ignoring invalid HeadsetPlaybackDSPChainType: %d", (uint8_t *)&buf, 0x18u);
      }
      break;
  }
  if (a5 && a5 != 1752709424) {
    sub_3B2214((uint64_t)a1, a3, (uint64_t)v17, v16);
  }
  if (a6 && a7)
  {
    char v18 = (os_log_t *)sub_32A48(20);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a5);
      if (v35 >= 0) {
        __int16 v20 = __p;
      }
      else {
        __int16 v20 = (void **)__p[0];
      }
      int buf = 136315906;
      *(void *)buf_4 = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&buf_4[8] = 1024;
      *(_DWORD *)&buf_4[10] = 1361;
      *(_WORD *)&buf_4[14] = 2080;
      *(void *)&long long v38 = v20;
      WORD4(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 10) = 1;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding Volume AU (bypassed) for wireless headset %s for volume strategy %d", (uint8_t *)&buf, 0x22u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_3B0790((uint64_t)a1, a3, 0, 1u, (uint64_t)v17, 0x766F6C69u);
  }
  if (a6)
  {
    if (a6 == 1)
    {
      __int16 v21 = (os_log_t *)sub_32A48(20);
      int v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
      {
        int buf = 136315394;
        *(void *)buf_4 = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&buf_4[8] = 1024;
        *(_DWORD *)&buf_4[10] = 315;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Using AggregateVolumeCommand with direct mode for SW volume control on headphones", (uint8_t *)&buf, 0x12u);
      }
      uint64_t v23 = qword_65DDD0;
      std::__fs::filesystem::path v24 = *(std::__shared_weak_count **)algn_65DDD8;
      if (*(void *)algn_65DDD8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_65DDD8 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1509D8(a1, v23, (uint64_t)v24);
      if (v24) {
        sub_4636C(v24);
      }
      sub_3B0790((uint64_t)a1, a3, 0, 0, (uint64_t)v17, 0x766F6C69u);
    }
    long long v27 = (os_log_t *)sub_32A48(20);
    int v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315650;
      *(void *)buf_4 = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&buf_4[8] = 1024;
      *(_DWORD *)&buf_4[10] = 342;
      *(_WORD *)&buf_4[14] = 1024;
      LODWORD(v38) = a6;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring invalid volume strategy: %d", (uint8_t *)&buf, 0x18u);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BC58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BC58))
  {
    byte_64BC50 = sub_164B08();
    __cxa_guard_release(&qword_64BC58);
  }
  if (byte_64BC50)
  {
    sub_21C8C(v31, a3);
    if (v32 >= 0) {
      __int16 v29 = v31;
    }
    else {
      __int16 v29 = (void **)v31[0];
    }
    sub_3AFE78((uint64_t)&v33, (const char *)v29, 0, 0, (uint64_t)v17, 0x73706C6Du);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DE68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65DE68))
    {
      int buf = 7;
      *(void *)&buf_4[4] = 1885892727;
      *(_DWORD *)&buf_4[12] = 7;
      *(void *)((char *)&v38 + 4) = 1885892706;
      HIDWORD(v38) = 7;
      uint64_t v39 = 1885892674;
      sub_15ACD8(qword_65DE50, (uint64_t)&buf, 3);
      for (uint64_t i = 32; i != -16; i -= 16)
        sub_3840C4((uint64_t)&buf_4[i - 4]);
      __cxa_guard_release(&qword_65DE68);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DE80, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65DE80))
    {
      sub_38445C((uint64_t)dword_65DE70);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DEA8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65DEA8))
    {
      int buf = 7;
      *(void *)&buf_4[4] = 1;
      sub_3B1DD8((uint64_t)&unk_65DE88, dword_65DE70, &buf);
      sub_3840C4((uint64_t)&buf);
      __cxa_guard_release(&qword_65DEA8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DED0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65DED0))
    {
      int buf = 7;
      *(void *)&buf_4[4] = 64001;
      sub_3B1DD8((uint64_t)&unk_65DEB0, dword_65DE70, &buf);
      sub_3840C4((uint64_t)&buf);
      __cxa_guard_release(&qword_65DED0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DEF8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65DEF8))
    {
      int buf = 7;
      *(void *)&buf_4[4] = 64003;
      sub_3B1DD8((uint64_t)&unk_65DED8, dword_65DE70, &buf);
      sub_3840C4((uint64_t)&buf);
      __cxa_guard_release(&qword_65DEF8);
    }
    sub_3844F0((uint64_t)&buf);
  }
}

void sub_3B897C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  __cxa_guard_abort(&qword_65DF68);
  sub_297864(v35);
  _Unwind_Resume(a1);
}

double sub_3B8BA8(int a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_6389C8;
  *((_DWORD *)v2 + 8) = 1936747629;
  *((_DWORD *)v2 + 9) = a1;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001;
  double result = *(double *)"";
  *(_OWORD *)(v2 + 44) = *(_OWORD *)"";
  *((void *)v2 + 3) = off_638A00;
  qword_65DF58 = (uint64_t)(v2 + 24);
  qword_65DF60 = (uint64_t)v2;
  return result;
}

void sub_3B8C48()
{
}

uint64_t sub_3B8C60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_3B8C68()
{
  return 1936747629;
}

uint64_t sub_3B8C78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3B8C9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6389C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3B8CF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6389C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3B8D10(uint64_t a1, int a2, char *a3, char *a4, std::string::size_type a5, unsigned int a6, int a7, int a8, char *__s, void *a10)
{
  os_log_t v15 = (os_log_t *)sub_32A48(20);
  __int16 v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1416;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    *(_WORD *)&unsigned char buf[24] = 2080;
    *(void *)&buf[26] = a3;
    *(_WORD *)&unsigned char buf[34] = 2080;
    *(void *)uint64_t v82 = a4;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_INFO, "%25s:%-5d GetHeadsetPlaybackDSPGraph: ChainType: %d, graph: %s, strip: %s", buf, 0x2Cu);
  }
  int v17 = (const char *)sub_3B7A54(a6);
  long long v75 = 0u;
  long long v76 = 0u;
  int v77 = 1065353216;
  if (a6 - 1647718502 < 2 || a6 == 1214394677 || a6 == 1214329654)
  {
    if (!v17)
    {
      __int16 v57 = (os_log_t *)sub_32A48(13);
      int v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1444;
        _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)off_6384E8;
    v83.__r_.__value_.__l.__size_ = a5;
    v83.__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
    uint64_t v84 = &v83;
    sub_3BACEC(buf, v17, "AUNBandEQ", (uint64_t)&v83);
    sub_3BB040(&v83);
    if (v82[4]) {
      sub_3B0480((uint64_t)&v75, (uint64_t)buf);
    }
  }
  LOBYTE(__p) = 0;
  char v74 = 0;
  if (__s)
  {
    sub_21C8C(&v83, __s);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v83.__r_.__value_.__l.__size_;
    }
    sub_5E220((uint64_t)buf, size + 10);
    if ((buf[23] & 0x80u) == 0) {
      char v19 = buf;
    }
    else {
      char v19 = *(uint8_t **)buf;
    }
    if (size)
    {
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v20 = &v83;
      }
      else {
        __int16 v20 = (std::string *)v83.__r_.__value_.__r.__words[0];
      }
      memmove(v19, v20, size);
    }
    strcpy((char *)&v19[size], ".propstrip");
    long long __p = *(_OWORD *)buf;
    uint64_t v73 = *(void *)&buf[16];
    char v74 = 1;
    __int16 v21 = (os_log_t *)sub_32A48(20);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = &v83;
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v83.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 1457;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d headset propstrip name is %s", buf, 0x1Cu);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
  }
  v80.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "Generic", 0x600u);
  v80.__pn_.__r_.__value_.__s.__data_[8] = 1;
  sub_3B3920(&v83, (CFStringRef *)&v80);
  size_t v24 = strlen(a3);
  char v25 = std::string::append(&v83, a3, v24);
  *(std::string *)int buf = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  sub_72924((uint64_t)&v80);
  int v26 = (char)buf[23];
  if ((buf[23] & 0x80u) == 0) {
    size_t v27 = buf[23];
  }
  else {
    size_t v27 = *(void *)&buf[8];
  }
  sub_5E220((uint64_t)&v71, v27 + 5);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v28 = &v71;
  }
  else {
    int v28 = (std::string *)v71.__r_.__value_.__r.__words[0];
  }
  if (v27)
  {
    if (v26 >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(uint8_t **)buf;
    }
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, ".dspg");
  if (v26 < 0) {
    operator delete(*(void **)buf);
  }
  long long v30 = (os_log_t *)sub_32A48(20);
  int v31 = *v30;
  if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
  {
    char v32 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v32 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1465;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v32;
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d headset graph name is %s", buf, 0x1Cu);
  }
  if (a6 - 1647718502 < 2 || a6 == 1214394677 || a6 == 1214329654)
  {
    LODWORD(v85.__r_.__value_.__l.__data_) = 1652122993;
    *(_DWORD *)bytes = 0;
    sub_3BB0C4((uint64_t)&v83, (int *)&v85);
    CFDataRef v33 = CFDataCreate(0, bytes, 4);
    if (v33)
    {
      sub_1534E8(&cf, v33);
      sub_1535A0((uint64_t)&v83.__r_.__value_.__r.__words[2], "data", &cf);
      v80.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      v80.__pn_.__r_.__value_.__l.__size_ = 2;
      CFDictionaryRef v34 = sub_4D3D8((uint64_t)&v80);
      uint64_t v35 = 0;
      v79.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      while (1)
      {
        uint64_t v36 = *(const void **)((char *)&v83 + v35 * 8 + 24);
        if (v36) {
          CFRelease(v36);
        }
        uint64_t v37 = (const void *)v83.__r_.__value_.__r.__words[v35 + 2];
        if (v37) {
          CFRelease(v37);
        }
        v35 -= 2;
        if (v35 == -4)
        {
          if (cf) {
            CFRelease(cf);
          }
          sub_384254((uint64_t)&v80, v34);
          LODWORD(v83.__r_.__value_.__l.__data_) = 1735553138;
          sub_3847B8((uint64_t)&v83.__r_.__value_.__l.__size_, (int *)&v80);
          sub_15A1EC((uint64_t)buf, (int *)&v83, 1);
          sub_3840C4((uint64_t)&v83.__r_.__value_.__l.__size_);
          sub_3840C4((uint64_t)&v80);
          CFRelease(v34);
          sub_3BB1A0();
        }
      }
    }
    double v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
  }
  int v38 = sub_A5E54(a10, 2);
  sub_21C8C(buf, a3);
  BOOL v39 = sub_3BB424((char *)buf);
  BOOL v40 = v39;
  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if (v40) {
      goto LABEL_64;
    }
  }
  else if (v39)
  {
LABEL_64:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E0C8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E0C8))
    {
      *(_DWORD *)int buf = 7;
      *(void *)&_DWORD buf[8] = 1885892727;
      *(_DWORD *)&buf[16] = 7;
      *(void *)&unsigned char buf[24] = 1885892706;
      *(_DWORD *)&unsigned char buf[32] = 7;
      *(void *)&v82[4] = 1885892674;
      sub_15ACD8(qword_65E0B0, (uint64_t)buf, 3);
      for (uint64_t i = 32; i != -16; i -= 16)
        sub_3840C4((uint64_t)&buf[i]);
      __cxa_guard_release(&qword_65E0C8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E0E0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E0E0))
    {
      sub_38445C((uint64_t)dword_65E0D0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E108, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E108))
    {
      *(_DWORD *)int buf = 7;
      *(void *)&_DWORD buf[8] = 1936749413;
      sub_3B1DD8((uint64_t)&unk_65E0E8, dword_65E0D0, (int *)buf);
      sub_3840C4((uint64_t)buf);
      __cxa_guard_release(&qword_65E108);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E130, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E130))
    {
      *(_DWORD *)int buf = 7;
      *(void *)&_DWORD buf[8] = 1668641398;
      sub_3B1DD8((uint64_t)&unk_65E110, dword_65E0D0, (int *)buf);
      sub_3840C4((uint64_t)buf);
      __cxa_guard_release(&qword_65E130);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E158, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E158))
    {
      *(_DWORD *)int buf = 7;
      *(void *)&_DWORD buf[8] = 1936746611;
      sub_3B1DD8((uint64_t)&unk_65E138, dword_65E0D0, (int *)buf);
      sub_3840C4((uint64_t)buf);
      __cxa_guard_release(&qword_65E158);
    }
    sub_3844F0((uint64_t)buf);
  }
  if (v38)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E1C8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E1C8))
    {
      *(_DWORD *)int buf = 7;
      *(void *)&_DWORD buf[8] = 1885892706;
      *(_DWORD *)&buf[16] = 7;
      *(void *)&unsigned char buf[24] = 1885892674;
      sub_15ACD8(qword_65E1B0, (uint64_t)buf, 2);
      for (uint64_t j = 16; j != -16; j -= 16)
        sub_3840C4((uint64_t)&buf[j]);
      __cxa_guard_release(&qword_65E1C8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E1E0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E1E0))
    {
      sub_38445C((uint64_t)dword_65E1D0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E208, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E208))
    {
      *(_DWORD *)int buf = 7;
      *(void *)&_DWORD buf[8] = 1936749413;
      sub_3B1DD8((uint64_t)&unk_65E1E8, dword_65E1D0, (int *)buf);
      sub_3840C4((uint64_t)buf);
      __cxa_guard_release(&qword_65E208);
    }
    sub_3844F0((uint64_t)buf);
  }
  *(void *)bytes = bytes;
  uint64_t v69 = bytes;
  uint64_t v70 = 0;
  sub_21C8C(&v83, a4);
  sub_21C8C(&v80, a4);
  float v41 = (void *)a1;
  *(std::__fs::filesystem::path *)int buf = v80;
  memset(&v80, 0, sizeof(v80));
  unsigned char buf[24] = 1;
  sub_3B57FC(a1, (char *)&v83, &v71, (uint64_t)buf, (uint64_t)&__p, a5, 0x100000002, 0x100000002);
  if (buf[24] && (char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (a7)
  {
    if (sub_A5E54(a10, 1))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DF80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65DF80))
      {
        sub_3BB56C();
        __cxa_guard_release(&qword_65DF80);
        float v41 = (void *)a1;
      }
      uint64_t v42 = qword_65DF70;
      CFNumberRef v43 = (std::__shared_weak_count *)qword_65DF78;
      if (qword_65DF78) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_65DF78 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else if (sub_3BB4B8((char *)&v71))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DF98, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65DF98))
      {
        sub_3BB600();
        __cxa_guard_release(&qword_65DF98);
        float v41 = (void *)a1;
      }
      uint64_t v42 = qword_65DF88;
      CFNumberRef v43 = (std::__shared_weak_count *)qword_65DF90;
      if (qword_65DF90) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_65DF90 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      if (a8)
      {
        LODWORD(v85.__r_.__value_.__l.__data_) = 1652127340;
        __dst[0] = 1;
        sub_3BB0C4((uint64_t)&v83, (int *)&v85);
        CFDataRef v44 = CFDataCreate(0, __dst, 1);
        if (v44)
        {
          sub_1534E8(&cf, v44);
          sub_1535A0((uint64_t)&v83.__r_.__value_.__r.__words[2], "data", &cf);
          v80.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
          v80.__pn_.__r_.__value_.__l.__size_ = 2;
          CFDictionaryRef v45 = sub_4D3D8((uint64_t)&v80);
          uint64_t v46 = 0;
          v79.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
          while (1)
          {
            char v47 = *(const void **)((char *)&v83 + v46 * 8 + 24);
            if (v47) {
              CFRelease(v47);
            }
            int v48 = (const void *)v83.__r_.__value_.__r.__words[v46 + 2];
            if (v48) {
              CFRelease(v48);
            }
            v46 -= 2;
            if (v46 == -4)
            {
              if (cf) {
                CFRelease(cf);
              }
              sub_384254((uint64_t)&v80, v45);
              LODWORD(v83.__r_.__value_.__l.__data_) = 1735553138;
              sub_3847B8((uint64_t)&v83.__r_.__value_.__l.__size_, (int *)&v80);
              sub_15A1EC((uint64_t)buf, (int *)&v83, 1);
              sub_3840C4((uint64_t)&v83.__r_.__value_.__l.__size_);
              sub_3840C4((uint64_t)&v80);
              CFRelease(v45);
              sub_3BB1A0();
            }
          }
        }
        __int16 v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Could not construct");
      }
      uint64_t v42 = qword_65DDE0;
      CFNumberRef v43 = *(std::__shared_weak_count **)algn_65DDE8;
      if (*(void *)algn_65DDE8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_65DDE8 + 8), 1uLL, memory_order_relaxed);
      }
    }
    sub_1509D8(v41, v42, (uint64_t)v43);
    if (v43) {
      sub_4636C(v43);
    }
  }
  char v49 = (os_log_t *)sub_32A48(20);
  int v50 = *v49;
  if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v51 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v51 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 1571;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v51;
    _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding SW Volume Property to Headset Playback DSPGraph chain %s", buf, 0x1Cu);
  }
  sub_21C8C(buf, a3);
  BOOL v52 = sub_3BB424((char *)buf);
  BOOL v53 = v52;
  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if (!v53) {
      goto LABEL_133;
    }
  }
  else if (!v52)
  {
    goto LABEL_133;
  }
  if (sub_3BB4B8((char *)&v71))
  {
    if (a6 >> 1 == 823859251)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DFB0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65DFB0))
      {
        sub_153D08(&qword_65DFA0, 1752659567, 1);
        __cxa_guard_release(&qword_65DFB0);
        float v41 = (void *)a1;
      }
      uint64_t v54 = qword_65DFA0;
      char v55 = *(std::__shared_weak_count **)algn_65DFA8;
      if (*(void *)algn_65DFA8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_65DFA8 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DFC8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65DFC8))
      {
        sub_153D08(&qword_65DFB8, 1752659567, 0);
        __cxa_guard_release(&qword_65DFC8);
        float v41 = (void *)a1;
      }
      uint64_t v54 = qword_65DFB8;
      char v55 = (std::__shared_weak_count *)unk_65DFC0;
      if (unk_65DFC0) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_65DFC0 + 8), 1uLL, memory_order_relaxed);
      }
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65DFE0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65DFE0))
    {
      sub_3BB6B8(1752659567);
      __cxa_guard_release(&qword_65DFE0);
      float v41 = (void *)a1;
    }
    uint64_t v54 = qword_65DFD0;
    char v55 = (std::__shared_weak_count *)qword_65DFD8;
    if (qword_65DFD8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_65DFD8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  sub_1509D8(v41, v54, (uint64_t)v55);
  if (v55) {
    sub_4636C(v55);
  }
LABEL_133:
  sub_15AD5C((uint64_t *)bytes);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (v74 && SHIBYTE(v73) < 0) {
    operator delete((void *)__p);
  }
  sub_D7EFC((void *)v76);
  __int16 v56 = (void *)v75;
  *(void *)&long long v75 = 0;
  if (v56) {
    operator delete(v56);
  }
}

void sub_3BA5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a54)
  {
    if (a53 < 0) {
      operator delete(a48);
    }
  }
  sub_D7EC0((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_3BACEC(unsigned char *a1, const char *a2, char *a3, uint64_t a4)
{
  if (!a4) {
    sub_56964();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 48))(a4);
  if (!v7)
  {
    os_log_type_t v13 = (os_log_t *)sub_32A48(20);
    os_log_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v24 = 1024;
    *(_DWORD *)char v25 = 529;
    *(_WORD *)&int v25[4] = 2080;
    *(void *)&v25[6] = a2;
    os_log_t v15 = "%25s:%-5d Could not load disk tunings using preset file %s";
    __int16 v16 = v14;
    uint32_t v17 = 28;
    goto LABEL_19;
  }
  uint64_t v8 = (const char *)sub_3FE38C(v7, a2, 1u);
  os_log_t v9 = (os_log_t *)sub_32A48(20);
  uint64_t v10 = *v9;
  if (!v8)
  {
    if (!v10 || !os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v24 = 1024;
    *(_DWORD *)char v25 = 534;
    *(_WORD *)&int v25[4] = 2080;
    *(void *)&v25[6] = a3;
    __int16 v26 = 2080;
    size_t v27 = a2;
    os_log_t v15 = "%25s:%-5d Could not load AU preset by name for %s: %s";
    __int16 v16 = v10;
    uint32_t v17 = 38;
LABEL_19:
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
LABEL_20:
    *a1 = 0;
    a1[40] = 0;
    return;
  }
  if (v10 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    __int16 v24 = 1024;
    *(_DWORD *)char v25 = 538;
    *(_WORD *)&int v25[4] = 2080;
    *(void *)&v25[6] = a2;
    __int16 v26 = 2112;
    size_t v27 = v8;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding supplementary preset  %s (%@)", buf, 0x26u);
  }
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v20 = 257;
  sub_1D4C8C((uint64_t)&theDict, @"BoxName", a3);
  CFMutableDictionaryRef v11 = theDict;
  if (HIBYTE(v20) && theDict)
  {
    CFDictionarySetValue(theDict, @"Preset", v8);
    CFMutableDictionaryRef v11 = theDict;
  }
  sub_384254((uint64_t)v18, v11);
  int v21 = 1652060275;
  sub_3847B8((uint64_t)v22, v18);
  sub_15A1EC((uint64_t)buf, &v21, 1);
  sub_3840C4((uint64_t)v22);
  sub_3840C4((uint64_t)v18);
  sub_6DBFC((uint64_t)a1, (uint64_t *)buf);
  a1[40] = 1;
  sub_D7EFC(*(void **)&v25[2]);
  double v12 = *(void **)buf;
  *(void *)int buf = 0;
  if (v12) {
    operator delete(v12);
  }
  sub_80594((uint64_t)&theDict);
}

void sub_3BB000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_3840C4(v2);
  sub_3840C4((uint64_t)va);
  sub_80594((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *sub_3BB040(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_3BB0C4(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "ID");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_3BB164(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_3BB1A0()
{
  sub_3843C8((uint64_t)v0);
}

void sub_3BB3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_3BB424(char *a1)
{
  uint64_t v1 = a1[23];
  BOOL v2 = (v1 & 0x80u) != 0;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v2) {
    uint64_t v3 = *(char **)a1;
  }
  else {
    uint64_t v3 = a1;
  }
  CFNumberRef v4 = &v3[v1];
  if (v1 >= 4)
  {
    int v5 = v3;
    do
    {
      uint64_t v6 = (char *)memchr(v5, 115, v1 - 3);
      if (!v6) {
        break;
      }
      if (*(_DWORD *)v6 == 1769105779) {
        return v6 == v4 || v6 - v3 == -1;
      }
      int v5 = v6 + 1;
      uint64_t v1 = v4 - (unsigned char *)v5;
    }
    while (v4 - (unsigned char *)v5 > 3);
  }
  uint64_t v6 = v4;
  return v6 == v4 || v6 - v3 == -1;
}

BOOL sub_3BB4B8(char *a1)
{
  uint64_t v1 = a1[23];
  BOOL v2 = (v1 & 0x80u) != 0;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v2) {
    uint64_t v3 = *(char **)a1;
  }
  else {
    uint64_t v3 = a1;
  }
  CFNumberRef v4 = &v3[v1];
  if (v1 >= 11)
  {
    int v5 = v3;
    do
    {
      uint64_t v6 = (char *)memchr(v5, 118, v1 - 10);
      if (!v6) {
        break;
      }
      if (*(void *)v6 == 0x696C656D756C6F76 && *(void *)(v6 + 3) == 0x74696D696C656D75) {
        return v6 != v4 && v6 - v3 != -1;
      }
      int v5 = v6 + 1;
      uint64_t v1 = v4 - (unsigned char *)v5;
    }
    while (v4 - (unsigned char *)v5 > 10);
  }
  uint64_t v6 = v4;
  return v6 != v4 && v6 - v3 != -1;
}

double sub_3BB56C()
{
  uint64_t v0 = (char *)operator new(0x48uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = off_638A40;
  *((void *)v0 + 4) = -2609680281;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001;
  double result = *(double *)"";
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"";
  *((void *)v0 + 3) = off_638A78;
  qword_65DF70 = (uint64_t)(v0 + 24);
  qword_65DF78 = (uint64_t)v0;
  return result;
}

double sub_3BB600()
{
  uint64_t v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = off_638BF0;
  *((void *)v0 + 4) = -2609680281;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001;
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"";
  *(_OWORD *)(v0 + 72) = xmmword_65DF18;
  v0[88] = 0;
  v0[136] = 0;
  double result = 2.11004386e262;
  *((void *)v0 + 18) = 0x76657167766F6C75;
  *((void *)v0 + 3) = off_638C28;
  qword_65DF88 = (uint64_t)(v0 + 24);
  qword_65DF90 = (uint64_t)v0;
  return result;
}

double sub_3BB6B8(int a1)
{
  BOOL v2 = (char *)operator new(0x48uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)BOOL v2 = off_638DD8;
  *((_DWORD *)v2 + 8) = 1685287015;
  *((_DWORD *)v2 + 9) = a1;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001;
  double result = *(double *)"";
  *(_OWORD *)(v2 + 44) = *(_OWORD *)"";
  *((void *)v2 + 3) = off_639210;
  qword_65DFD0 = (uint64_t)(v2 + 24);
  qword_65DFD8 = (uint64_t)v2;
  return result;
}

uint64_t sub_3BB75C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3BB780(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3BB7D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3BB7F4(uint64_t a1)
{
  *(void *)a1 = &off_638988;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }

  operator delete();
}

uint64_t sub_3BB864(uint64_t a1)
{
  *(void *)a1 = &off_638988;
  if (*(unsigned char *)(a1 + 112)) {
    sub_463E0(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_3BB8B4(double a1, double a2)
{
  double v2 = a1;
  double v3 = a2;
  operator new();
}

void sub_3BB93C()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

void *sub_3BB96C(void *a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v7[0] = 0;
  char v9 = 0;
  sub_14EDBC((uint64_t)a1, a2, a3, a4, (uint64_t)v7);
  if (v9) {
    sub_463E0(v8);
  }
  if (a4)
  {
    std::__shared_weak_count::__release_weak(a4);
    a1[19] = 0x76657167766F6C75;
    std::__shared_weak_count::__release_weak(a4);
  }
  else
  {
    a1[19] = 0x76657167766F6C75;
  }
  *a1 = &off_638C68;
  return a1;
}

void sub_3BBA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_463E0(a12);
  }
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BBA54(void *a1, uint64_t a2)
{
  CFNumberRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[3];
      if (v7
        && (*(unsigned int (**)(void, uint64_t, uint64_t, void))(*(void *)v7 + 88))(a1[3], 1685287015, 1652127340, 0))
      {
        int v9 = a2 ^ 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t, void))(*(void *)v7 + 112))(v7, 1685287015, 1652127340, &v9, 4, 0);
        sub_4636C(v6);
        return;
      }
      sub_4636C(v6);
    }
  }
  uint64_t v8 = *(void (**)(void *, uint64_t))(*a1 + 144);

  v8(a1, a2);
}

void sub_3BBB8C(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_3BBBA4(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3BBBE0()
{
}

void sub_3BBC60()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3BBC94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3BBCB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3BBD0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3BBD2C()
{
}

void sub_3BBD44()
{
}

void sub_3BBDC4()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3BBDF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3BBE1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638A40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3BBE70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

NSObject *sub_3BBE90(uint64_t a1)
{
  return sub_3AF9D4(*(void *)(a1 + 8), *(const char **)(a1 + 16));
}

__n128 sub_3BBEA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6384E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_3BBECC(uint64_t a1)
{
  double v2 = (char *)operator new(0x18uLL);
  *(void *)double v2 = off_6384E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_3BBF18()
{
}

void sub_3BBF30(uint64_t a1, const char *a2, uint64_t a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_3AFE78((uint64_t)v3, a2, 0, 0, a3, 0x726F7368u);
  sub_3BC11C((uint64_t)v3, 1919906664);
}

void sub_3BC0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_D7EC0((uint64_t)va1);
  sub_D7EC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3BC11C(uint64_t a1, uint64_t a2)
{
  int v4 = 7;
  uint64_t v5 = a2;
  int v2 = 7;
  uint64_t v3 = HIDWORD(a2);
  sub_15BA28((uint64_t)&v7, &v4, &v2);
  sub_3844F0((uint64_t)v6);
}

void sub_3BC32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_3840C4(v5);
  sub_3840C4((uint64_t)va);
  sub_3840C4(v6 - 56);
  sub_3840C4(v6 - 72);
  sub_15AD5C((uint64_t *)va1);
  sub_3840C4((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_3BC3E4(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_3AFE78((uint64_t)v6, a2, a3, 0, a4, 0x6D626571u);
  if ((a5 & 0xFF00000000) != 0) {
    sub_3B0A74((uint64_t)v6, a5, a5);
  }
  sub_D854C((uint64_t)&__p, (uint64_t)v6);
  sub_3B0838();
}

void sub_3BC4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_3BC4C8(uint64_t a1, unsigned int a2, char *a3, uint64_t *a4, NSObject *a5, int a6)
{
  sub_2D457C(a1, a3, 1936749172);
  if (a2 <= 0x1F)
  {
    if (((1 << a2) & 3) != 0)
    {
      os_log_t v15 = sub_3AF82C(a5, a3, a4);
      sub_3B19A8(a1, a3, 0, (uint64_t)v15, 0);
    }
    if (((1 << a2) & 0xC00000) != 0)
    {
      uint64_t v14 = sub_3AF82C(a5, a3, a4);
      sub_3B19A8(a1, a3, 0, (uint64_t)v14, 0);
    }
    if (((1 << a2) & 0xC0000000) != 0)
    {
      sub_3BC82C(a1, a3, (uint64_t)a5, a6);
      sub_3B0790(a1, a3, 0, 0, (uint64_t)a5, 0x7366636Cu);
    }
  }
  double v12 = (os_log_t *)sub_32A48(20);
  uint64_t v13 = *v12;
  if (*v12)
  {
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315650;
      uint32_t v17 = "RoutingSettings_Aspen.cpp";
      __int16 v18 = 1024;
      int v19 = 1915;
      __int16 v20 = 1024;
      unsigned int v21 = a2;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d GetBuiltInSpeakerDSPChain_OpenLoop: Ignoring invalid SpeakerDSPChainType: %d", (uint8_t *)&v16, 0x18u);
    }
  }
}

void sub_3BC80C(_Unwind_Exception *a1)
{
  sub_297864(v1);
  _Unwind_Resume(a1);
}

void sub_3BC82C(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    if (a4 == 2) {
      sub_3B0790(a1, a2, 0, 0, a3, 0x76727132u);
    }
    if (a4 == 1) {
      sub_3B0790(a1, a2, 0, 0, a3, 0x766F6C69u);
    }
    uint64_t v5 = (os_log_t *)sub_32A48(20);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315650;
        uint64_t v8 = "RoutingSettings_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 366;
        __int16 v11 = 1024;
        int v12 = a4;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring invalid volume strategy: %d", (uint8_t *)&v7, 0x18u);
      }
    }
  }
}

void sub_3BC9D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BC9F0(uint64_t a1, const char *a2, int a3, uint64_t a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E238, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_65E238))
    {
      sub_3BCCD4(1601402742);
      __cxa_guard_release(&qword_65E238);
    }
  }
  *(_OWORD *)int v10 = 0u;
  long long v11 = 0u;
  int v12 = 1065353216;
  unsigned int v9 = 0;
  int v15 = 7;
  uint64_t v16 = 1987013737;
  LODWORD(__p) = 1685090932;
  sub_3847B8((uint64_t)&v14, &v15);
  sub_158DE0((uint64_t)v10, 1685090932, &__p);
  sub_3840C4((uint64_t)&v14);
  sub_3840C4((uint64_t)&v15);
  sub_3AFFE0((uint64_t)v10, (int *)&v9, a2, a3, a4, 1987013737);
  sub_3B0384((uint64_t)v10, v9);
  int v7 = 7;
  uint64_t v8 = 1;
  int v15 = 64001;
  sub_3847B8((uint64_t)&v16, &v7);
  sub_15A1EC((uint64_t)&__p, &v15, 1);
  sub_3B0480((uint64_t)v10, (uint64_t)&__p);
}

void sub_3BCC3C(_Unwind_Exception *a1)
{
}

void *sub_3BCCD4(int a1)
{
  __n128 result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *__n128 result = off_638578;
  result[3] = off_6385B0;
  *((_DWORD *)result + 8) = a1;
  qword_65E228 = (uint64_t)(result + 3);
  unk_65E230 = result;
  return result;
}

uint64_t sub_3BCD4C()
{
  return 1987013737;
}

void sub_3BCD58()
{
}

uint64_t sub_3BCD74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void sub_3BCD98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638578;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3BCDEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3BCE0C(void *a1, unsigned int a2, char *a3, uint64_t *a4, NSObject *a5, unsigned int a6, int a7, uint64_t a8, int a9, unsigned int a10)
{
  int v10 = a7;
  int v12 = a5;
  uint64_t v13 = a4;
  unsigned int v15 = a2;
  if (a6 >= 5)
  {
    int v17 = 1684434036;
    unsigned int v21 = (os_log_t *)sub_32A48(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 1996;
      __int16 v41 = 1024;
      unsigned int v42 = a6;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unsupported speaker protection type: %u\"", buf, 0x18u);
    }
    uint64_t v13 = a4;
    int v10 = a7;
    int v12 = a5;
    unsigned int v15 = a2;
  }
  else
  {
    int v17 = *(_DWORD *)&aTlfdtrpspslcsh[4 * a6];
  }
  if (a10 >= 2)
  {
    CFDataRef v33 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 2011;
      __int16 v41 = 1024;
      unsigned int v42 = a10;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"unsupported volume unit (%d)\"", buf, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "unsupported volume unit (%d)");
  }
  sub_3BEC48((uint64_t)a1, a3, v17);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E000, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65E000))
  {
    *(_OWORD *)int buf = xmmword_4E7BB0;
    sub_3BECC0((uint64_t *)buf, 4);
    __cxa_guard_release(&qword_65E000);
  }
  uint64_t v23 = qword_65DFE8;
  if ((uint64_t *)qword_65DFE8 == &qword_65DFF0)
  {
LABEL_17:
    int v12 = sub_3AF82C(v12, a3, v13);
  }
  else
  {
    while (*(_DWORD *)(v23 + 28) != v15)
    {
      __int16 v24 = *(uint64_t **)(v23 + 8);
      if (v24)
      {
        do
        {
          char v25 = v24;
          __int16 v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          char v25 = *(uint64_t **)(v23 + 16);
          BOOL v26 = *v25 == v23;
          uint64_t v23 = (uint64_t)v25;
        }
        while (!v26);
      }
      uint64_t v23 = (uint64_t)v25;
      if (v25 == &qword_65DFF0) {
        goto LABEL_17;
      }
    }
  }
  switch(v15)
  {
    case 0u:
    case 1u:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 2u:
    case 3u:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 4u:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 5u:
    case 6u:
      sub_3B1A7C((uint64_t)a1, a3, (uint64_t)v12, 0);
    case 7u:
    case 8u:
      if (v10 == 2)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E030, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_65E030))
        {
          sub_3BEF34();
          __cxa_guard_release(&qword_65E030);
        }
        if (v15 == 8) {
          sub_3B18EC((uint64_t)a1, a3, (uint64_t)v12);
        }
        uint64_t v27 = qword_65E020;
        int v28 = (std::__shared_weak_count *)qword_65E028;
        if (qword_65E028) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_65E028 + 8), 1uLL, memory_order_relaxed);
        }
        sub_1509D8(a1, v27, (uint64_t)v28);
        if (v28) {
          sub_4636C(v28);
        }
        uint64_t v29 = qword_65DE30;
        long long v30 = *(std::__shared_weak_count **)algn_65DE38;
        if (*(void *)algn_65DE38) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_65DE38 + 8), 1uLL, memory_order_relaxed);
        }
        sub_1509D8(a1, v29, (uint64_t)v30);
        if (v30) {
          sub_4636C(v30);
        }
        sub_3B1A7C((uint64_t)a1, a3, (uint64_t)v12, 0);
      }
      uint64_t v36 = (os_log_t *)sub_32A48(13);
      uint64_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 2253;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      int v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v38, "Precondition failure.");
    case 9u:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 0xAu:
      sub_21C8C(buf, a3);
      sub_3BBF30((uint64_t)a1, buf, (uint64_t)v12);
    case 0xBu:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 0xCu:
      sub_21C8C(buf, a3);
      sub_3BBF30((uint64_t)a1, buf, (uint64_t)v12);
    case 0xDu:
      sub_3B18EC((uint64_t)a1, a3, (uint64_t)v12);
    case 0x16u:
    case 0x17u:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 0x19u:
      sub_21C8C(buf, a3);
      sub_3BBF30((uint64_t)a1, buf, (uint64_t)v12);
    case 0x1Au:
      sub_21C8C(buf, a3);
      sub_3BBF30((uint64_t)a1, buf, (uint64_t)v12);
    case 0x1Bu:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 0x1Cu:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 0x1Du:
      sub_3B19A8((uint64_t)a1, a3, 0, (uint64_t)v12, 0);
    case 0x1Eu:
    case 0x1Fu:
      sub_3BC82C((uint64_t)a1, a3, (uint64_t)v12, v10);
      sub_3B0790((uint64_t)a1, a3, 0, 0, (uint64_t)v12, 0x7366636Cu);
    case 0x20u:
    case 0x21u:
      sub_3BC82C((uint64_t)a1, a3, (uint64_t)v12, v10);
      sub_21C8C(buf, a3);
      sub_3BBF30((uint64_t)a1, buf, (uint64_t)v12);
    case 0x22u:
      sub_3BC82C((uint64_t)a1, a3, (uint64_t)v12, v10);
      sub_21C8C(buf, a3);
      sub_3BBF30((uint64_t)a1, buf, (uint64_t)v12);
    case 0x23u:
      sub_3BC82C((uint64_t)a1, a3, (uint64_t)v12, v10);
      sub_3B0790((uint64_t)a1, a3, 0, 0, (uint64_t)v12, 0x7366636Cu);
    default:
      int v31 = (os_log_t *)sub_32A48(20);
      char v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 2324;
        __int16 v41 = 1024;
        unsigned int v42 = v15;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring invalid SpeakerDSPChainType: %d", buf, 0x18u);
      }
      return;
  }
}

void sub_3BE934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_guard_abort(&qword_65E048);
  sub_297864(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_3BEC48(uint64_t a1, char *a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_21C8C((void *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 52) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  return a1;
}

void sub_3BECA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19518C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_3BECC0(uint64_t *result, uint64_t a2)
{
  qword_65DFF8 = 0;
  qword_65DFF0 = 0;
  qword_65DFE8 = (uint64_t)&qword_65DFF0;
  if (a2)
  {
    int v2 = result;
    uint64_t v3 = 0;
    int v4 = (uint64_t *)((char *)result + 4 * a2);
    uint64_t v5 = &qword_65DFF0;
    while (1)
    {
      if (v5 == &qword_65DFF0)
      {
        int v7 = &qword_65DFF0;
      }
      else
      {
        uint64_t v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            int v7 = v6;
            uint64_t v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          uint64_t v8 = &qword_65DFF0;
          do
          {
            int v7 = (uint64_t *)v8[2];
            BOOL v9 = *v7 == (void)v8;
            uint64_t v8 = v7;
          }
          while (v9);
        }
        int v10 = *(_DWORD *)v2;
        if (*((_DWORD *)v7 + 7) >= *(_DWORD *)v2)
        {
          if (v3)
          {
            int v12 = &qword_65DFF0;
            while (1)
            {
              while (1)
              {
                long long v11 = (uint64_t *)v3;
                int v14 = *(_DWORD *)(v3 + 28);
                if (v10 >= v14) {
                  break;
                }
                uint64_t v3 = *v11;
                int v12 = v11;
                if (!*v11) {
                  goto LABEL_18;
                }
              }
              if (v14 >= v10) {
                break;
              }
              int v12 = v11 + 1;
              uint64_t v3 = v11[1];
              if (!v3) {
                goto LABEL_18;
              }
            }
          }
          else
          {
            long long v11 = &qword_65DFF0;
            int v12 = &qword_65DFF0;
          }
          goto LABEL_17;
        }
      }
      if (v3) {
        long long v11 = v7;
      }
      else {
        long long v11 = &qword_65DFF0;
      }
      if (v3) {
        int v12 = v7 + 1;
      }
      else {
        int v12 = &qword_65DFF0;
      }
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        uint64_t v13 = operator new(0x20uLL);
        v13[7] = *(_DWORD *)v2;
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = v11;
        *int v12 = (uint64_t)v13;
        if (*(void *)qword_65DFE8)
        {
          qword_65DFE8 = *(void *)qword_65DFE8;
          uint64_t v13 = (_DWORD *)*v12;
        }
        __n128 result = sub_46D00((uint64_t *)qword_65DFF0, (uint64_t *)v13);
        ++qword_65DFF8;
      }
      int v2 = (uint64_t *)((char *)v2 + 4);
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_65DFE8;
      uint64_t v3 = qword_65DFF0;
    }
  }
  return result;
}

void sub_3BEE3C(_Unwind_Exception *a1)
{
}

double sub_3BEE54(void *a1)
{
  int v2 = (char *)operator new(0x78uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)int v2 = off_638E10;
  *((void *)v2 + 4) = 0x16C646E6DLL;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001;
  *(_OWORD *)(v2 + 44) = *(_OWORD *)"";
  *((void *)v2 + 3) = off_639150;
  *((_DWORD *)v2 + 18) = dword_65DDF0;
  sub_15050C((uint64_t)(v2 + 80), qword_65DDF8);
  double result = *(double *)&xmmword_65DE10;
  *(_OWORD *)(v2 + 104) = xmmword_65DE10;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_3BEF1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double sub_3BEF34()
{
  uint64_t v0 = (char *)operator new(0x78uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = off_638E48;
  *((void *)v0 + 4) = 0x73766F6C61787463;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001;
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"";
  *((void *)v0 + 3) = off_6391D0;
  *((_DWORD *)v0 + 18) = dword_65DDF0;
  sub_15050C((uint64_t)(v0 + 80), qword_65DDF8);
  double result = *(double *)&xmmword_65DE10;
  *(_OWORD *)(v0 + 104) = xmmword_65DE10;
  qword_65E020 = (uint64_t)(v0 + 24);
  qword_65E028 = (uint64_t)v0;
  return result;
}

void sub_3BEFFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_3BF018(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3BF03C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638E48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3BF090(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_3BF0B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_3BF0D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_638E10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3BF12C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_638E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3BF14C(uint64_t a1, int a2, char *a3, uint64_t a4)
{
  sub_2D457C(a1, a3, 1684434036);
  if (a2 == 38)
  {
    BOOL v9 = sub_3AF5E4(a4, a3);
    sub_21C8C(__p, a3);
    sub_3B3D7C(a1, __p, 0, (uint64_t)v9, 0);
  }
  if (a2 == 37)
  {
    uint64_t v8 = sub_3AF5E4(a4, a3);
    sub_21C8C(__p, a3);
    sub_3B3D7C(a1, __p, 0, (uint64_t)v8, 0);
  }
  int v10 = (os_log_t *)sub_32A48(20);
  long long v11 = *v10;
  if (*v10)
  {
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = "RoutingSettings_Aspen.cpp";
      __int16 v13 = 1024;
      int v14 = 2510;
      __int16 v15 = 1024;
      int v16 = a2;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d GetExternalSpeakerDSPChain: Ignoring invalid SpeakerDSPChainType: %d", __p, 0x18u);
    }
  }
}

void sub_3BF3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_297864(v14);
  _Unwind_Resume(a1);
}

void sub_3BF43C(uint64_t a1, uint64_t a2, const char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long __p = (void *)CFStringCreateWithCString(0, "Generic", 0x600u);
  char v22 = 1;
  sub_3B3920(&v26, (CFStringRef *)&__p);
  size_t v13 = strlen(a3);
  uint64_t v14 = std::string::append(&v26, a3, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(void *)&v31[16] = *((void *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)int v31 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append((std::string *)v31, ".dspg", 5uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v31[23] & 0x80000000) != 0) {
    operator delete(*(void **)v31);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  sub_72924((uint64_t)&__p);
  uint64_t v18 = sub_32A48(20);
  if (*(unsigned char *)(v18 + 8))
  {
    int v19 = *(NSObject **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        __int16 v20 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int v31 = 136315650;
        *(void *)&v31[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&v31[12] = 1024;
        *(_DWORD *)&v31[14] = 2532;
        *(_WORD *)&v31[18] = 2080;
        *(void *)&v31[20] = v20;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSP graph path for external speaker chain: %s", v31, 0x1Cu);
      }
    }
  }
  sub_21C8C(v28, a4);
  sub_21C8C(&v25, a4);
  std::string v26 = v25;
  memset(&v25, 0, sizeof(v25));
  char v27 = 1;
  LOBYTE(__p) = 0;
  char v24 = 0;
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v34 = 2;
  long long v33 = xmmword_5968C4;
  sub_6D1AC((uint64_t)v31, (int *)&v33, 3);
  sub_3B57FC(a1, (char *)v28, &v30, (uint64_t)&v26, (uint64_t)&__p, a5, a6, a7);
  sub_6C954((uint64_t)v31);
  if (v24 && v23 < 0) {
    operator delete(__p);
  }
  if (v27 && SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_3BF714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_6C954(v44 - 144);
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (a31 && a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_3BF7E4(void *a1, unsigned char **a2, CFStringRef *a3, uint64_t a4, int a5, int a6, int a7)
{
  sub_3BFF68((std::string *)v37, (std::string **)&off_648B50);
  sub_21B7C(&v30, *a3);
  std::__fs::filesystem::path __p = v30;
  memset(&v30, 0, sizeof(v30));
  sub_6D8A0((std::__fs::filesystem::path *)buf, (uint64_t)v37, &__p);
  sub_3BFF68(&v41, (std::string **)off_648B48);
  sub_6D8A0(&v35, (uint64_t)buf, (std::__fs::filesystem::path *)&v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
  if ((v37[23] & 0x80000000) != 0) {
    operator delete(*(void **)v37);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v14 = (size_t)a2[1];
  }
  long long v15 = v37;
  sub_5E220((uint64_t)v37, v14 + 5);
  if (v37[23] < 0) {
    long long v15 = *(unsigned char **)v37;
  }
  if (v14)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v16 = a2;
    }
    else {
      int v16 = *a2;
    }
    memmove(v15, v16, v14);
  }
  strcpy(&v15[v14], ".dspg");
  *(_OWORD *)int buf = *(_OWORD *)v37;
  *(void *)&buf[16] = *(void *)&v37[16];
  memset(v37, 0, 24);
  sub_6D8A0(&v36, (uint64_t)&v35, (std::__fs::filesystem::path *)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ((v37[23] & 0x80000000) != 0) {
    operator delete(*(void **)v37);
  }
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__pn_.__r_.__value_.__l.__data_);
  }
  long long v17 = (os_log_t *)sub_32A48(20);
  uint64_t v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = &v36;
    if ((v36.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v19 = (std::__fs::filesystem::path *)v36.__pn_.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 2633;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v19;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configuring SpeakerProtection DSPGraph For HAL from %s", buf, 0x1Cu);
  }
  memset(buf, 0, sizeof(buf));
  int v40 = 1065353216;
  sub_44A7E8((uint64_t *)&v30);
  __int16 v20 = (const void *)v30.__pn_.__r_.__value_.__r.__words[0];
  if (v30.__pn_.__r_.__value_.__r.__words[0])
  {
    unsigned int v21 = (os_log_t *)sub_32A48(20);
    char v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_INFO))
    {
      CFStringRef v23 = CFCopyDescription(v20);
      sub_20B40((uint64_t)&__p, v23);
      if (v23) {
        CFRelease(v23);
      }
      p_p = &__p;
      if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)&v37[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = 2639;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = p_p;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_INFO, "%25s:%-5d FDR Speaker Thiele-Small data: %s", v37, 0x1Cu);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
    }
    v30.__pn_.__r_.__value_.__r.__words[0] = 0;
    sub_3BFFC8((uint64_t)v37, (uint64_t)v20);
    sub_3BB1A0();
  }
  std::string v25 = operator new(0x10uLL);
  v35.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)(v25 + 4);
  v35.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)(v25 + 4);
  _DWORD *v25 = a5;
  v25[1] = a6;
  v25[2] = a7;
  v25[3] = 0;
  v35.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_21E8C(&__dst, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v36.__pn_;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(&__p, *a2, (unint64_t)a2[1]);
    int v26 = *((char *)a2 + 23);
    char v33 = 1;
    if (v26 < 0)
    {
      sub_21E8C(&v30, *a2, (unint64_t)a2[1]);
      goto LABEL_49;
    }
  }
  else
  {
    std::__fs::filesystem::path __p = *(std::__fs::filesystem::path *)a2;
    char v33 = 1;
  }
  std::__fs::filesystem::path v30 = *(std::__fs::filesystem::path *)a2;
LABEL_49:
  char v31 = 1;
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v41.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v37, (int *)&v41, 3);
  sub_3B5948((uint64_t)a1, (char *)a2, 1668049011, &__dst, (uint64_t)&__p, (uint64_t)&v30, a4);
  sub_6C954((uint64_t)v37);
  if (v31 && SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
  if (v33 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*a1 == a1[1])
  {
    if (sub_207A20())
    {
      int v28 = (os_log_t *)sub_32A48(20);
      char v29 = *v28;
      if (*v28)
      {
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v37 = 136315394;
          *(void *)&v37[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&v37[12] = 1024;
          *(_DWORD *)&v37[14] = 2649;
          _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpeakerProtectionDSPGraphForHAL() - config didn't load properly", v37, 0x12u);
        }
      }
    }
  }
  operator delete(v25);
  sub_D7EFC(*(void **)&buf[16]);
  char v27 = *(void **)buf;
  *(void *)int buf = 0;
  if (v27) {
    operator delete(v27);
  }
  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_3BFDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BFF60()
{
}

std::string *sub_3BFF68(std::string *this, std::string **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  int v4 = (std::string *)((char *)v3 - 1);
  do
  {
    int v5 = v4->__r_.__value_.__s.__data_[1];
    int v4 = (std::string *)((char *)v4 + 1);
  }
  while (v5);
  sub_6D960(this, v3, v4);
  return this;
}

void sub_3BFFAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BFFC8(uint64_t a1, uint64_t a2)
{
  int v12 = 1936749683;
  *(void *)bytes = a2;
  sub_3BB0C4((uint64_t)&v13, &v12);
  CFDataRef v3 = CFDataCreate(0, bytes, 8);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_1534E8(&cf, v3);
  sub_1535A0((uint64_t)v15, "data", &cf);
  v10[0] = &v13;
  v10[1] = 2;
  CFDictionaryRef v4 = sub_4D3D8((uint64_t)v10);
  uint64_t v5 = 0;
  void v10[2] = v4;
  do
  {
    uint64_t v6 = *(const void **)&v15[v5 + 8];
    if (v6) {
      CFRelease(v6);
    }
    int v7 = *(const void **)&v15[v5];
    if (v7) {
      CFRelease(v7);
    }
    v5 -= 16;
  }
  while (v5 != -32);
  if (cf) {
    CFRelease(cf);
  }
  sub_384254((uint64_t)v10, v4);
  int v13 = 1735553138;
  sub_3847B8((uint64_t)&v14, (int *)v10);
  sub_15A1EC(a1, &v13, 1);
  sub_3840C4((uint64_t)&v14);
  sub_3840C4((uint64_t)v10);
  CFRelease(v4);
}

void sub_3C0164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v19);
  sub_602D0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_3C0218(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, CFStringRef *a5, NSObject *a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, char a15)
{
  if (a2 == 36)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E060, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E060))
    {
      sub_3B6E70(&qword_65E050, &xmmword_65DE40, (__n128 *)&dword_65DDF0, 1987013749, 1986359655);
      __cxa_guard_release(&qword_65E060);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E078, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65E078))
    {
      std::string v41 = (char *)operator new(0x78uLL);
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = 0;
      *(void *)std::string v41 = off_638E80;
      *((void *)v41 + 4) = 0x6C766F6C64737067;
      *((_DWORD *)v41 + 10) = 0;
      *(void *)(v41 + 60) = 0x100000001;
      *(_OWORD *)(v41 + 44) = *(_OWORD *)"";
      *((void *)v41 + 3) = off_639190;
      *((_DWORD *)v41 + 18) = dword_65DDF0;
      sub_15050C((uint64_t)(v41 + 80), qword_65DDF8);
      *(_OWORD *)(v41 + 104) = xmmword_65DE10;
      qword_65E068 = (uint64_t)(v41 + 24);
      qword_65E070 = (uint64_t)v41;
      __cxa_guard_release(&qword_65E078);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_65E090, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(qword_65E090))
    {
      unsigned int v42 = operator new(0x28uLL);
      v42[1] = 0;
      v42[2] = 0;
      void *v42 = off_638EB8;
      v42[3] = off_638EF0;
      *((_DWORD *)v42 + 8) = 1953918828;
      qword_65E080 = (uint64_t)(v42 + 3);
      qword_65E088 = (uint64_t)v42;
      __cxa_guard_release(qword_65E090);
    }
    if (a7 >= 5) {
      int v20 = 0;
    }
    else {
      int v20 = *(_DWORD *)&aTlfdtrpspslcsh[4 * a7];
    }
    sub_3B3920(&v58, a5);
    sub_15EE0C((uint64_t)v53, (const void **)&v58.__r_.__value_.__l.__data_, (const void **)a3);
    char v22 = std::string::append((std::string *)v53, ".dspg", 5uLL);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if ((v53[23] & 0x80000000) != 0) {
      operator delete(*(void **)v53);
    }
    if (*(char *)(a3 + 23) >= 0) {
      size_t v24 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v24 = *(void *)(a3 + 8);
    }
    std::string v25 = &v55;
    sub_5E220((uint64_t)&v55, v24 + 10);
    if (v56 < 0) {
      std::string v25 = (long long *)v55;
    }
    if (v24)
    {
      if (*(char *)(a3 + 23) >= 0) {
        int v26 = (const void *)a3;
      }
      else {
        int v26 = *(const void **)a3;
      }
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, ".propstrip");
    memset(v53, 0, sizeof(v53));
    int v54 = 1065353216;
    char v27 = operator new(8uLL);
    void *v27 = a9 | ((unint64_t)a10 << 32);
    uint64_t v51 = v27 + 1;
    BOOL v52 = v27 + 1;
    int v50 = v27;
    if (v20 != 1668049011)
    {
      if (v20 != 1668051824) {
        goto LABEL_41;
      }
      int v28 = operator new(0x10uLL);
      void *v28 = *v27;
      v28[1] = a11;
      int v50 = v28;
      BOOL v52 = v28 + 2;
      operator delete(v27);
      uint64_t v51 = v28 + 2;
      char v27 = v28;
    }
    sub_44A7E8((uint64_t *)__dst);
    char v29 = __dst[0];
    if (__dst[0])
    {
      std::__fs::filesystem::path v30 = (os_log_t *)sub_32A48(20);
      char v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_INFO))
      {
        CFStringRef v32 = CFCopyDescription(v29);
        sub_20B40((uint64_t)__p, v32);
        if (v32) {
          CFRelease(v32);
        }
        char v33 = __p;
        if (v48 < 0) {
          char v33 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 2708;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v33;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_INFO, "%25s:%-5d FDR Speaker Thiele-Small data: %s", buf, 0x1Cu);
        if (SHIBYTE(v48) < 0) {
          operator delete(__p[0]);
        }
      }
      __dst[0] = 0;
      sub_3BFFC8((uint64_t)buf, (uint64_t)v29);
      sub_3BB1A0();
    }
LABEL_41:
    if (a15) {
      sub_3BC11C((uint64_t)v53, 0x6F72656E64737067);
    }
    if (*(char *)(a4 + 23) < 0)
    {
      sub_21E8C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a4;
      uint64_t v48 = *(void *)(a4 + 16);
    }
    char v49 = 1;
    if (SHIBYTE(v56) < 0)
    {
      sub_21E8C(__dst, (void *)v55, *((unint64_t *)&v55 + 1));
    }
    else
    {
      *(_OWORD *)std::string __dst = v55;
      uint64_t v45 = v56;
    }
    char v46 = 1;
    uint64_t v60 = 0;
    memset(buf, 0, sizeof(buf));
    long long v61 = xmmword_5968C4;
    uint64_t v62 = 2;
    sub_6D1AC((uint64_t)buf, (int *)&v61, 3);
    sub_3B5948((uint64_t)a1, (char *)a4, v20, &v57, (uint64_t)__p, (uint64_t)__dst, (uint64_t)a6);
    sub_6C954((uint64_t)buf);
    if (v46 && SHIBYTE(v45) < 0) {
      operator delete(__dst[0]);
    }
    if (v49 && SHIBYTE(v48) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v34 = qword_65E080;
    std::__fs::filesystem::path v35 = (std::__shared_weak_count *)qword_65E088;
    if (qword_65E088) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_65E088 + 8), 1uLL, memory_order_relaxed);
    }
    sub_153F88(a1, v34, (uint64_t)v35, 0);
    if (v35) {
      sub_4636C(v35);
    }
    uint64_t v36 = qword_65E068;
    uint64_t v37 = (std::__shared_weak_count *)qword_65E070;
    if (qword_65E070) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_65E070 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1509D8(a1, v36, (uint64_t)v37);
    if (v37) {
      sub_4636C(v37);
    }
    if (a12 == 2)
    {
      uint64_t v38 = qword_65E050;
      BOOL v39 = *(std::__shared_weak_count **)algn_65E058;
      if (*(void *)algn_65E058) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_65E058 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      if (a12 != 1)
      {
LABEL_72:
        uint64_t v51 = v27;
        operator delete(v27);
        sub_D7EFC(*(void **)&v53[16]);
        int v40 = *(void **)v53;
        *(void *)BOOL v53 = 0;
        if (v40) {
          operator delete(v40);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete((void *)v55);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        return;
      }
      uint64_t v38 = qword_65DDE0;
      BOOL v39 = *(std::__shared_weak_count **)algn_65DDE8;
      if (*(void *)algn_65DDE8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_65DDE8 + 8), 1uLL, memory_order_relaxed);
      }
    }
    sub_1509D8(a1, v38, (uint64_t)v39);
    if (v39) {
      sub_4636C(v39);
    }
    goto LABEL_72;
  }
  if (*(char *)(a4 + 23) >= 0) {
    unsigned int v21 = (char *)a4;
  }
  else {
    unsigned int v21 = *(char **)a4;
  }
  if (*(char *)(a8 + 23) < 0) {
    a8 = *(void *)a8;
  }

  sub_3BCE0C(a1, a2, v21, (uint64_t *)a5, a6, a7, a12, a8, a13, a14);
}

void sub_3C09E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
}

void sub_3C0BC4()
{
}

void sub_3C0BCC()
{
}

void sub_3C0BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    JUMPOUT(0x3C0BA8);
  }
  JUMPOUT(0x3C0BACLL);
}

void sub_3C0BE8()
{
}

void sub_3C0BF0()
{
}

void sub_3C0BF8(void *a1, int a2, uint64_t a3, char *a4, CFStringRef *a5, std::string::size_type a6, int a7, uint64_t a8, double a9, double a10, const char *a11, char a12, uint64_t a13, void *a14, uint64_t a15, unsigned int a16)
{
  v63[0] = a9;
  v63[1] = a10;
  int v62 = a7;
  if (!a4)
  {
    uint64_t v34 = (os_log_t *)sub_32A48(13);
    std::__fs::filesystem::path v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 2793;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  long long v59 = 0u;
  long long v60 = 0u;
  int v61 = 1065353216;
  v57[0] = (uint64_t)v57;
  v57[1] = (uint64_t)v57;
  uint64_t v58 = 0;
  v56[0] = a8;
  v56[1] = a5;
  v56[2] = &v62;
  v56[3] = &v59;
  switch(a2)
  {
    case 14:
      sub_3C1C68((uint64_t)v56);
    case 15:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 42:
      goto LABEL_22;
    case 16:
      if (a11)
      {
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)off_6385E0;
        v67.__r_.__value_.__l.__size_ = a6;
        v67.__r_.__value_.__r.__words[2] = (std::string::size_type)a11;
        uint64_t v68 = &v67;
        sub_3BACEC(buf, a11, "AUNBandEQ", (uint64_t)&v67);
        sub_3BB040(&v67);
        if (v66) {
          sub_3B0480((uint64_t)&v59, (uint64_t)buf);
        }
      }
      goto LABEL_10;
    case 20:
    case 29:
LABEL_10:
      sub_3C1C68((uint64_t)v56);
    case 24:
    case 36:
    case 37:
    case 38:
    case 39:
      goto LABEL_3;
    case 41:
      sub_3C1C68((uint64_t)v56);
    case 43:
      LODWORD(cf[0]) = 7;
      cf[1] = (CFTypeRef)1886216809;
      LODWORD(v69) = 7;
      *((void *)&v69 + 1) = 1953655149;
      sub_15BA28((uint64_t)buf, (int *)cf, (int *)&v69);
      sub_3844F0((uint64_t)&v67);
    case 44:
      LODWORD(cf[0]) = 7;
      cf[1] = (CFTypeRef)1886216809;
      LODWORD(v69) = 7;
      *((void *)&v69 + 1) = 1953655149;
      sub_15BA28((uint64_t)buf, (int *)cf, (int *)&v69);
      sub_3844F0((uint64_t)&v67);
    case 45:
      if (sub_15ABD8(0, 0, 1685090928))
      {
        int v40 = (os_log_t *)sub_32A48(13);
        std::string v41 = *v40;
        if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 2932;
          _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
LABEL_67:
        BOOL v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v39, "Precondition failure.");
      }
      if (*(void *)a15 == *(void *)(a15 + 8) || *a14 == a14[1])
      {
        int v19 = (os_log_t *)sub_32A48(13);
        int v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 2933;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        goto LABEL_67;
      }
LABEL_22:
      sub_3C2718((uint64_t)&v59, (uint64_t)a14, *(_DWORD **)a15, *(_DWORD **)(a15 + 8));
      if (v58) {
        sub_38445C((uint64_t)&v67);
      }
      sub_3B3920(&v67, a5);
      int v21 = *(char *)(a3 + 23);
      if (v21 >= 0) {
        char v22 = (const std::string::value_type *)a3;
      }
      else {
        char v22 = *(const std::string::value_type **)a3;
      }
      if (v21 >= 0) {
        std::string::size_type v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v23 = *(void *)(a3 + 8);
      }
      size_t v24 = std::string::append(&v67, v22, v23);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = *((void *)&v24->__r_.__value_.__l + 2);
      *(_OWORD *)int buf = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      int v26 = std::string::append((std::string *)buf, ".dspg", 5uLL);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      int v28 = (os_log_t *)sub_32A48(20);
      char v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
      {
        std::__fs::filesystem::path v30 = &v55;
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::__fs::filesystem::path v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 2950;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v30;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configuring microphone dsp from %s", buf, 0x1Cu);
      }
      char v31 = operator new(0x10uLL);
      BOOL v53 = v31 + 2;
      int v54 = v31 + 2;
      *char v31 = a13;
      v31[1] = a16;
      BOOL v52 = v31;
      sub_21C8C(v50, a4);
      sub_21C8C(&v49, a4);
      std::string v67 = v49;
      memset(&v49, 0, sizeof(v49));
      LOBYTE(v68) = 1;
      sub_21C8C(__p, a4);
      *(_OWORD *)CFTypeRef cf = *(_OWORD *)__p;
      uint64_t v47 = v45;
      __p[1] = 0;
      uint64_t v45 = 0;
      __p[0] = 0;
      char v48 = 1;
      uint64_t v65 = 0;
      memset(buf, 0, sizeof(buf));
      long long v69 = xmmword_5968C4;
      uint64_t v70 = 2;
      sub_6D1AC((uint64_t)buf, (int *)&v69, 3);
      sub_3B5948((uint64_t)a1, (char *)v50, 1684434036, &v55, (uint64_t)&v67, (uint64_t)cf, a6);
      sub_6C954((uint64_t)buf);
      if (v48 && SHIBYTE(v47) < 0) {
        operator delete((void *)cf[0]);
      }
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
      if ((_BYTE)v68 && SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (v51 < 0)
      {
        operator delete(v50[0]);
        if (!a12) {
          goto LABEL_55;
        }
      }
      else if (!a12)
      {
        goto LABEL_55;
      }
      sub_3C2CF0(buf, v63);
      CFStringRef v32 = *(std::__shared_weak_count **)&buf[8];
      sub_1509D8(a1, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
      if (v32) {
        sub_4636C(v32);
      }
LABEL_55:
      operator delete(v31);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      sub_15AD5C(v57);
      sub_D7EFC((void *)v60);
      char v33 = (void *)v59;
      *(void *)&long long v59 = 0;
      if (v33) {
        operator delete(v33);
      }
      return;
    default:
      if (a2 != 2) {
        goto LABEL_22;
      }
LABEL_3:
      if (!a12) {
        sub_3C1C68((uint64_t)v56);
      }
      uint64_t v37 = (os_log_t *)sub_32A48(13);
      uint64_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 2852;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      goto LABEL_67;
  }
}

void sub_3C1880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  __cxa_free_exception(v58);
  do
  {
    v59 -= 16;
    sub_602D0(v59);
  }
  while (v59 != v60 - 224);
  sub_15AD5C(&a55);
  sub_D7EC0((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_3C1C68(uint64_t a1)
{
  int v2 = sub_1151F8(*(uint64_t **)(*(void *)a1 + 8), 1718186598);
  if (*((char *)v2 + 23) < 0)
  {
    sub_21E8C(__dst, (void *)*v2, v2[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    uint64_t v30 = v2[2];
    *(_OWORD *)std::string __dst = v3;
  }
  CFDictionaryRef v4 = (void *)HIBYTE(v30);
  if (v30 < 0) {
    CFDictionaryRef v4 = __dst[1];
  }
  if (v4)
  {
    sub_3B2950(&v28, *(CFStringRef **)(a1 + 8), (uint64_t)__dst);
    valuePtr[0] = 4504;
    sub_3C2EF0((uint64_t)buf, valuePtr);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v28;
    }
    else {
      uint64_t v5 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      cf[0] = CFStringCreateWithBytes(0, (const UInt8 *)v5, size, 0x8000100u, 0);
      if (!cf[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    else
    {
      cf[0] = 0;
    }
    sub_305464((uint64_t)v34 + 2, "cfobject", cf);
    std::__fs::filesystem::path __p = buf;
    uint64_t v24 = 2;
    CFDictionaryRef v8 = sub_4D3D8((uint64_t)&__p);
    unint64_t v9 = 0;
    CFDictionaryRef v27 = v8;
    while (1)
    {
      int v10 = (const void *)v35[v9 / 2];
      if (v10) {
        CFRelease(v10);
      }
      long long v11 = *(const void **)((char *)&v34[v9] + 2);
      if (v11) {
        CFRelease(v11);
      }
      v9 -= 4;
      if (v9 == 0x3FFFFFFFFFFFFFF8)
      {
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        int v25 = 4505;
        sub_3C2EF0((uint64_t)buf, &v25);
        valuePtr[0] = **(_DWORD **)(a1 + 16);
        cf[0] = CFNumberCreate(0, kCFNumberIntType, valuePtr);
        if (cf[0])
        {
          sub_22210((CFStringRef *)((char *)v34 + 2), "cfobject");
          CFTypeRef v12 = cf[0];
          if (cf[0]) {
            CFRetain(cf[0]);
          }
          v35[0] = v12;
          std::__fs::filesystem::path __p = buf;
          uint64_t v24 = 2;
          CFDictionaryRef v13 = sub_4D3D8((uint64_t)&__p);
          unint64_t v14 = 0;
          CFDictionaryRef v26 = v13;
          while (1)
          {
            long long v15 = (const void *)v35[v14 / 2];
            if (v15) {
              CFRelease(v15);
            }
            int v16 = *(const void **)((char *)&v34[v14] + 2);
            if (v16) {
              CFRelease(v16);
            }
            v14 -= 4;
            if (v14 == 0x3FFFFFFFFFFFFFF8)
            {
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              sub_384254((uint64_t)cf, v8);
              *(_DWORD *)int buf = 1652060274;
              sub_3847B8((uint64_t)&v32 + 4, (int *)cf);
              sub_384254((uint64_t)valuePtr, v13);
              LODWORD(v35[0]) = 1652060274;
              sub_3847B8((uint64_t)&v36, valuePtr);
              sub_15A1EC((uint64_t)&__p, (int *)buf, 2);
              sub_3BB1A0();
            }
          }
        }
        int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
      }
    }
  }
  long long v17 = (os_log_t *)sub_32A48(13);
  uint64_t v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    CFStringRef v32 = "RoutingSettings_Aspen.cpp";
    __int16 v33 = 1024;
    v34[0] = 2800;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
  }
  int v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v19, "Precondition failure.");
}

void sub_3C20C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef *sub_3C22C8(CFStringRef *a1)
{
  int v2 = sub_22210(a1, "AUName");
  sub_22210(v2 + 1, "AUVariableEQV2");
  return a1;
}

void sub_3C2308(_Unwind_Exception *a1)
{
  sub_60594(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3C231C(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "ID");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_3C23BC(_Unwind_Exception *exception_object)
{
  long long v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_3C2400(uint64_t a1, uint64_t a2)
{
  int v15 = 1735287906;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    unint64_t v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      long long v17 = "RoutingSettings_Aspen.cpp";
      __int16 v18 = 1024;
      v19[0] = 111;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3BB0C4((uint64_t)buf, &v15);
  CFDataRef v4 = CFDataCreate(0, *(const UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  if (!v4)
  {
    CFTypeRef v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }
  sub_1534E8(&cf, v4);
  sub_1535A0((uint64_t)v19 + 2, "data", &cf);
  v14[0] = buf;
  v14[1] = 2;
  CFDictionaryRef v5 = sub_4D3D8((uint64_t)v14);
  uint64_t v6 = 0;
  void v14[2] = v5;
  do
  {
    int v7 = *(const void **)((char *)&v19[v6 + 2] + 2);
    if (v7) {
      CFRelease(v7);
    }
    CFDictionaryRef v8 = *(const void **)((char *)&v19[v6] + 2);
    if (v8) {
      CFRelease(v8);
    }
    v6 -= 4;
  }
  while (v6 != -8);
  if (cf) {
    CFRelease(cf);
  }
  sub_384254((uint64_t)v14, v5);
  *(_DWORD *)int buf = 1735553138;
  sub_3847B8((uint64_t)&v17 + 4, (int *)v14);
  sub_15A1EC(a1, (int *)buf, 1);
  sub_3840C4((uint64_t)&v17 + 4);
  sub_3840C4((uint64_t)v14);
  CFRelease(v5);
}

void sub_3C2650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  __cxa_free_exception(v18);
  sub_602D0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_3C2718(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  CFDataRef v4 = *(_DWORD **)a2;
  CFDictionaryRef v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5 || a3 != a4)
  {
    CFDictionaryRef v8 = a3;
    if (a3 == a4)
    {
      int v10 = 0;
      long long v11 = 0;
      unint64_t v12 = 0;
    }
    else
    {
      int v10 = 0;
      long long v11 = 0;
      unint64_t v12 = 0;
      do
      {
        int v13 = *v8 - 1;
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v14 = v11 - v10;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            sub_60548();
          }
          if ((uint64_t)(v12 - (void)v10) >> 1 > v15) {
            unint64_t v15 = (uint64_t)(v12 - (void)v10) >> 1;
          }
          if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)sub_46BF4(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          __int16 v18 = (int *)(v16 + 4 * v14);
          *__int16 v18 = v13;
          int v19 = v18 + 1;
          while (v11 != v10)
          {
            int v20 = *--v11;
            *--__int16 v18 = v20;
          }
          unint64_t v12 = v16 + 4 * v17;
          if (v10) {
            operator delete(v10);
          }
          int v10 = v18;
          long long v11 = v19;
        }
        else
        {
          *v11++ = v13;
        }
        ++v8;
      }
      while (v8 != a4);
      CFDataRef v4 = *(_DWORD **)a2;
      CFDictionaryRef v5 = *(_DWORD **)(a2 + 8);
    }
    if (v4 == v5)
    {
      char v22 = (unsigned int *)v11;
    }
    else
    {
      do
      {
        int v21 = *v4 - 1;
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v23 = v11 - v10;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            sub_60548();
          }
          if ((uint64_t)(v12 - (void)v10) >> 1 > v24) {
            unint64_t v24 = (uint64_t)(v12 - (void)v10) >> 1;
          }
          if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)sub_46BF4(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          CFDictionaryRef v27 = (unsigned int *)(v25 + 4 * v23);
          unsigned int *v27 = v21;
          char v22 = v27 + 1;
          while (v11 != v10)
          {
            unsigned int v28 = *--v11;
            *--CFDictionaryRef v27 = v28;
          }
          unint64_t v12 = v25 + 4 * v26;
          if (v10) {
            operator delete(v10);
          }
          int v10 = (int *)v27;
        }
        else
        {
          int *v11 = v21;
          char v22 = (unsigned int *)(v11 + 1);
        }
        ++v4;
        long long v11 = (int *)v22;
      }
      while (v4 != v5);
    }
    char v29 = (os_log_t *)sub_32A48(20);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
    {
      sub_89C0C(&__p, (unsigned int *)v10, v22);
      char v31 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingSettings_Aspen.cpp";
      __int16 v46 = 1024;
      v47[0] = 2785;
      LOWORD(v47[1]) = 2080;
      *(void *)((char *)&v47[1] + 2) = v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding channel selector map %s", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    int v44 = 1667789676;
    CFIndex v32 = (char *)v22 - (char *)v10;
    if (v32)
    {
      sub_3BB0C4((uint64_t)&__p, &v44);
      CFDataRef v33 = CFDataCreate(0, (const UInt8 *)v10, v32);
      if (v33)
      {
        sub_1534E8(&cf, v33);
        sub_1535A0((uint64_t)&__p.__r_.__value_.__r.__words[2], "data", &cf);
        v43[0] = &__p;
        v43[1] = 2;
        CFDictionaryRef v34 = sub_4D3D8((uint64_t)v43);
        uint64_t v35 = 0;
        v43[2] = v34;
        while (1)
        {
          uint64_t v36 = *(const void **)((char *)&__p + v35 * 8 + 24);
          if (v36) {
            CFRelease(v36);
          }
          uint64_t v37 = (const void *)__p.__r_.__value_.__r.__words[v35 + 2];
          if (v37) {
            CFRelease(v37);
          }
          v35 -= 2;
          if (v35 == -4)
          {
            if (cf) {
              CFRelease(cf);
            }
            sub_384254((uint64_t)v43, v34);
            LODWORD(__p.__r_.__value_.__l.__data_) = 1735553138;
            sub_3847B8((uint64_t)&__p.__r_.__value_.__l.__size_, (int *)v43);
            sub_15A1EC((uint64_t)buf, (int *)&__p, 1);
            sub_3840C4((uint64_t)&__p.__r_.__value_.__l.__size_);
            sub_3840C4((uint64_t)v43);
            CFRelease(v34);
            sub_3BB1A0();
          }
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    uint64_t v38 = (os_log_t *)sub_32A48(13);
    BOOL v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 111;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&__p, 0x12u);
    }
    int v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v40, "Precondition failure.");
  }
  return result;
}

void sub_3C2BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  __cxa_free_exception(v25);
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void sub_3C2CF0(void *a1, double *a2)
{
  double v4 = *a2;
  double v5 = a2[1];
  if (v5 >= 0.0 && (v5 > 0.0 || v5 < 0.0 || v4 >= 0.0) && (v5 <= 0.0 || v4 >= 0.0) && v5 == 0.0 && v4 == 0.0)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      long long v11 = "RoutingSettings_Aspen.cpp";
      __int16 v12 = 1024;
      *(_DWORD *)int v13 = 2758;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_16FEBC((uint64_t)&v10, 0, v4, v5);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E250, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65E250))
  {
    sub_3B6E70(&qword_65E240, a2, (__n128 *)&v10, 1987013749, 1986359655);
    __cxa_guard_release(&qword_65E250);
  }
  uint64_t v6 = *(void *)algn_65E248;
  *a1 = qword_65E240;
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_463E0(*(void **)&v13[2]);
}

void sub_3C2EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_3C2EF0(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "ID");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_3C2F90(_Unwind_Exception *exception_object)
{
  long long v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

NSObject *sub_3C2FD4(uint64_t a1)
{
  return sub_3AFC9C(*(NSObject **)(a1 + 8), *(const char **)(a1 + 16));
}

__n128 sub_3C2FE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6385E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_3C3010(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = off_6385E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_3C305C()
{
}

void sub_3C3074(uint64_t a1, unsigned int a2, char *a3, uint64_t *a4, NSObject *a5, uint64_t a6, uint64_t a7, const char *a8, double a9, double a10, float a11, char a12, int **a13)
{
  sub_2975A4(a1, a3);
  unint64_t v24 = sub_3AF82C(a5, a3, a4);
  if (a2 <= 0x2A)
  {
    if (((1 << a2) & 0x70402802008) != 0) {
      sub_3B0CE0(a1, a13);
    }
    if (a2 == 35) {
      sub_3B1A7C(a1, a3, (uint64_t)v24, 0);
    }
  }
  if (a12) {
    sub_3C45FC(a1, a3, (uint64_t)v24, a9, a10);
  }
  switch(a2)
  {
    case 0u:
      break;
    case 2u:
    case 3u:
      sub_3B3240(a1, a8, v24);
      sub_3B19A8(a1, a3, 1, (uint64_t)v24, 0);
    case 4u:
      sub_3B3240(a1, a8, v24);
      sub_3B19A8(a1, a3, 1, (uint64_t)v24, 0);
    case 8u:
      sub_3B3240(a1, a8, v24);
      break;
    case 9u:
      char v31 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v31, (CFStringRef *)a4);
    case 0xAu:
      CFIndex v32 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v32, (CFStringRef *)a4);
    case 0xBu:
      sub_3B19A8(a1, a3, 0, (uint64_t)v24, 0);
    case 0xCu:
    case 0xDu:
      sub_3B1A7C(a1, a3, (uint64_t)v24, 0);
    case 0xEu:
      sub_3B1B54(a11, a1, 1u);
    case 0xFu:
      sub_3B19A8(a1, a3, 0, (uint64_t)v24, 0);
    case 0x10u:
      sub_3B1A7C(a1, a3, (uint64_t)v24, 0);
    case 0x11u:
      CFDataRef v33 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v33, (CFStringRef *)a4);
    case 0x12u:
      CFDictionaryRef v34 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v34, (CFStringRef *)a4);
    case 0x14u:
      uint64_t v36 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v36, (CFStringRef *)a4);
    case 0x15u:
      uint64_t v35 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v35, (CFStringRef *)a4);
    case 0x16u:
      sub_3B1A7C(a1, a3, (uint64_t)v24, 0);
    case 0x18u:
    case 0x19u:
      uint64_t v26 = *(uint64_t **)(a7 + 8);
      if (v26)
      {
        CFDictionaryRef v27 = *(uint64_t **)(a7 + 8);
        do
        {
          int v28 = *((_DWORD *)v27 + 8);
          if (v28 <= 1718186598)
          {
            if (v28 == 1718186598)
            {
              uint64_t v47 = sub_1151F8(v26, 1718186598);
              sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v47, (CFStringRef *)a4);
            }
            ++v27;
          }
          CFDictionaryRef v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      sub_3B3240(a1, a8, v24);
      sub_21C8C(&__p, a3);
      sub_3B3D7C(a1, (const char *)&__p, 0, (uint64_t)v24, 0);
    case 0x1Au:
      uint64_t v37 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v37, (CFStringRef *)a4);
    case 0x1Bu:
      sub_3B1A7C(a1, a3, (uint64_t)v24, 0);
    case 0x1Cu:
      uint64_t v38 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v38, (CFStringRef *)a4);
    case 0x1Du:
      sub_3B1A7C(a1, a3, (uint64_t)v24, 0);
    case 0x1Eu:
      BOOL v39 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v39, (CFStringRef *)a4);
    case 0x1Fu:
      int v40 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v40, (CFStringRef *)a4);
    case 0x20u:
      char v29 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v29, (CFStringRef *)a4);
    case 0x21u:
    case 0x22u:
      sub_3B1A7C(a1, a3, (uint64_t)v24, 0);
    case 0x23u:
      sub_3B0790(a1, a3, 0, 0, (uint64_t)v24, 0x746D7374u);
    case 0x24u:
    case 0x27u:
    case 0x28u:
      unint64_t v25 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v25, (CFStringRef *)a4);
    case 0x25u:
      std::string v41 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v41, (CFStringRef *)a4);
    case 0x26u:
      unsigned int v42 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v42, (CFStringRef *)a4);
    case 0x29u:
      CFNumberRef v43 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v43, (CFStringRef *)a4);
    case 0x2Au:
      int v44 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
      sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v44, (CFStringRef *)a4);
    default:
      uint64_t v45 = (os_log_t *)sub_32A48(20);
      __int16 v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        int __p = 136315650;
        __p_4 = "RoutingSettings_Aspen.cpp";
        __int16 v50 = 1024;
        int v51 = 3232;
        __int16 v52 = 1024;
        unsigned int v53 = a2;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d GetMicrophoneDSPChain: Ignoring invalid MicrophoneDSPChainType: %d", (uint8_t *)&__p, 0x18u);
      }
      return;
  }
  uint64_t v30 = sub_1151F8(*(uint64_t **)(a7 + 8), 1718186598);
  sub_3B2568(a1, a3, (uint64_t)v24, a6, (uint64_t)v30, (CFStringRef *)a4);
}

void sub_3C43D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_297864(v14);
  _Unwind_Resume(a1);
}

void sub_3C45FC(uint64_t a1, const char *a2, uint64_t a3, double a4, double a5)
{
  *(double *)&long long v9 = a4;
  *((double *)&v9 + 1) = a5;
  sub_16FEBC((uint64_t)v8, 0, a4, a5);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E268, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_65E268))
    {
      sub_3C471C(&v9, (uint64_t)v8);
      __cxa_guard_release(&qword_65E268);
    }
  }
  sub_3B0790(a1, a2, 0, 0, a3, 0x76727132u);
}

void sub_3C46E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

double sub_3C471C(_OWORD *a1, uint64_t a2)
{
  CFNumberRef v4 = (char *)operator new(0x98uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)CFNumberRef v4 = off_638628;
  *((void *)v4 + 4) = -2307755726;
  *((_DWORD *)v4 + 10) = 0;
  *(void *)(v4 + 60) = 0x100000001;
  *(_OWORD *)(v4 + 44) = *(_OWORD *)"";
  *((void *)v4 + 3) = &off_6386A0;
  *(_OWORD *)(v4 + 72) = *a1;
  *((_DWORD *)v4 + 22) = *(_DWORD *)a2;
  sub_15050C((uint64_t)(v4 + 96), (void *)(a2 + 8));
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 32);
  v4[136] = 1;
  *(void *)&double result = 0x500000007;
  *((void *)v4 + 18) = 0x500000007;
  *((void *)v4 + 3) = off_638660;
  qword_65E258 = (uint64_t)(v4 + 24);
  qword_65E260 = (uint64_t)v4;
  return result;
}

void sub_3C4820(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_3C4838(void *a1, unsigned int a2, const std::string::value_type *a3, char *a4, CFStringRef *a5, uint64_t a6, unsigned int a7, const char *a8, double a9, double a10, int a11, char a12, unsigned int a13, _DWORD **a14)
{
  v51[0] = a9;
  v51[1] = a10;
  int v20 = (os_log_t *)sub_32A48(20);
  int v21 = *v20;
  if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0) {
      char v22 = a3;
    }
    else {
      char v22 = *(const std::string::value_type **)a3;
    }
    CFStringRef v23 = *a5;
    unint64_t v24 = "None";
    if (a8) {
      unint64_t v24 = a8;
    }
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    unint64_t v25 = "false";
    *(_DWORD *)&_DWORD buf[14] = 3247;
    *(_DWORD *)int buf = 136316674;
    if (a12) {
      unint64_t v25 = "true";
    }
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v22;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&unsigned char buf[30] = a4;
    *(_WORD *)&unsigned char buf[38] = 2112;
    CFStringRef v56 = v23;
    __int16 v57 = 2080;
    uint64_t v58 = v24;
    __int16 v59 = 2080;
    uint64_t v60 = v25;
    _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Mic graph: %s, strip: %s, shortname: %@, Beam2 Presetfile: %s SoftwareVolume: %s", buf, 0x44u);
  }
  *(_OWORD *)char v48 = 0u;
  long long v49 = 0u;
  int v50 = 1065353216;
  if (a2 <= 0x29 && ((1 << a2) & 0x2F0009040A0) != 0)
  {
    long long __p = 0uLL;
    long long v53 = 0uLL;
    int v54 = 1065353216;
    LODWORD(v61) = 9;
    HIDWORD(v61) = 0;
    *((float *)&v61 + 2) = (float)a7;
    *(_DWORD *)int buf = 1651074168;
    sub_3847B8((uint64_t)&buf[8], (int *)&v61);
    sub_158DE0((uint64_t)&__p, *(int *)buf, buf);
    sub_3840C4((uint64_t)&buf[8]);
    uint64_t v26 = sub_3840C4((uint64_t)&v61);
    sub_3843C8(v26);
  }
  memset(buf, 0, 24);
  sub_3C2718((uint64_t)v48, (uint64_t)buf, *a14, a14[1]);
  sub_3B3920((std::string *)&__p, a5);
  int v27 = a3[23];
  if (v27 >= 0) {
    int v28 = a3;
  }
  else {
    int v28 = *(const std::string::value_type **)a3;
  }
  if (v27 >= 0) {
    std::string::size_type v29 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    std::string::size_type v29 = *((void *)a3 + 1);
  }
  uint64_t v30 = std::string::append((std::string *)&__p, v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  *(void *)&buf[16] = *((void *)&v30->__r_.__value_.__l + 2);
  *(_OWORD *)int buf = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  CFIndex v32 = std::string::append((std::string *)buf, ".dspg", 5uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SBYTE7(v53) < 0) {
    operator delete((void *)__p);
  }
  CFDictionaryRef v34 = (os_log_t *)sub_32A48(20);
  uint64_t v35 = *v34;
  if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = &v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v36 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 3328;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v36;
    _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configuring microphone dsp from %s", buf, 0x1Cu);
  }
  sub_21C8C(cf, a4);
  sub_21C8C(v43, a4);
  long long __p = *(_OWORD *)v43;
  *(void *)&long long v53 = v44;
  v43[1] = 0;
  uint64_t v44 = 0;
  v43[0] = 0;
  BYTE8(v53) = 1;
  sub_21C8C(bytes, a4);
  long long v61 = *(_OWORD *)bytes;
  uint64_t v62 = v42;
  uint64_t v42 = 0;
  memset(bytes, 0, sizeof(bytes));
  LOBYTE(v63) = 1;
  memset(buf, 0, sizeof(buf));
  long long v64 = xmmword_5968C4;
  uint64_t v65 = 2;
  sub_6D1AC((uint64_t)buf, (int *)&v64, 3);
  sub_3B57FC((uint64_t)a1, (char *)cf, &v47, (uint64_t)&__p, (uint64_t)&v61, a6, a13 | 0x100000000, 0x100000001);
  sub_6C954((uint64_t)buf);
  if ((_BYTE)v63 && SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(*(void **)bytes);
  }
  if (BYTE8(v53) && SBYTE7(v53) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete((void *)cf[0]);
  }
  if (a12)
  {
    sub_3C2CF0(buf, v51);
    uint64_t v37 = *(std::__shared_weak_count **)&buf[8];
    sub_1509D8(a1, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
    if (v37) {
      sub_4636C(v37);
    }
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  sub_D7EFC((void *)v49);
  uint64_t v38 = v48[0];
  v48[0] = 0;
  if (v38) {
    operator delete(v38);
  }
}

void sub_3C5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  __cxa_free_exception(v55);
  do
  {
    v56 -= 16;
    sub_602D0(v56);
  }
  while (v56 != v57 - 256);
  sub_D7EC0((uint64_t)&a41);
  _Unwind_Resume(a1);
}

NSObject *sub_3C545C(uint64_t a1)
{
  return sub_3AFAF0(*(NSObject **)(a1 + 8), *(const char **)(a1 + 16), *(uint64_t **)(a1 + 24), 1u);
}

__n128 sub_3C5478(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6386E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_3C54A8(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_6386E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_3C54FC()
{
}

void sub_3C5514(uint64_t a1, int a2, char *a3, uint64_t *a4, NSObject *a5, unsigned int a6, uint64_t a7, double a8, double a9, float a10, uint64_t a11, uint64_t a12, int **a13)
{
  sub_2975A4(a1, a3);
  int v21 = sub_3AF82C(a5, a3, a4);
  sub_1151F8(*(uint64_t **)(a7 + 8), 1650814258);
  switch(a2)
  {
    case 5:
    case 11:
      sub_3B19A8(a1, a3, 0, (uint64_t)v21, 0x100000002);
    case 6:
      sub_3B1B54(a10, a1, 2u);
    case 7:
      sub_3B0CE0(a1, a13);
    case 12:
      sub_3B1A7C(a1, a3, (uint64_t)v21, 0x100000002);
    case 13:
      sub_3B0CE0(a1, a13);
    case 14:
      sub_3B1B54(a10, a1, 2u);
    case 22:
    case 33:
    case 35:
      sub_3B1A7C(a1, a3, (uint64_t)v21, 0x100000002);
    case 23:
    case 34:
      sub_3B0CE0(a1, a13);
    case 39:
      char v22 = sub_1151F8(*(uint64_t **)(a7 + 8), 1936027251);
      if (*((char *)v22 + 23) >= 0) {
        uint64_t v23 = (uint64_t)v22;
      }
      else {
        uint64_t v23 = *v22;
      }
      sub_3B1054(a1, a3, v23, (uint64_t)v21, (uint64_t)a4, 0x100000002);
    case 40:
    case 41:
    case 42:
      sub_3B0CE0(a1, a13);
    default:
      *(_OWORD *)int v28 = 0u;
      long long v29 = 0u;
      int v30 = 1065353216;
      int v27 = 0;
      LODWORD(v31) = 7;
      uint64_t v32 = 1650814258;
      LODWORD(__p) = 1685090932;
      sub_3847B8((uint64_t)&__p + 8, (int *)&v31);
      sub_158DE0((uint64_t)v28, __p, &__p);
      sub_3840C4((uint64_t)&__p + 8);
      sub_3840C4((uint64_t)&v31);
      if ((sub_3AFFE0((uint64_t)v28, &v27, a3, 0, (uint64_t)v21, 1650814258) & 1) == 0)
      {
        long long __p = 0u;
        long long v34 = 0u;
        int v35 = 1065353216;
        LODWORD(v24) = 9;
        int v26 = 0;
        float v25 = (float)a6;
        LODWORD(v31) = 0;
        sub_3847B8((uint64_t)&v32, (int *)&v24);
        sub_158DE0((uint64_t)&__p, (int)v31, &v31);
        sub_3840C4((uint64_t)&v32);
        sub_3840C4((uint64_t)&v24);
        sub_3843C8((uint64_t)&v24);
      }
      sub_3B0A74((uint64_t)v28, 2u, 1u);
  }
}

void sub_3C6498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_297864(v36);
  _Unwind_Resume(a1);
}

void sub_3C6798(uint64_t a1, int a2, char *a3, uint64_t a4, int a5, float a6)
{
  sub_2975A4(a1, a3);
  __int16 v12 = sub_3AF5E4(a4, a3);
  if (a2 > 21)
  {
    if ((a2 - 22) < 2) {
      sub_3B1A7C(a1, a3, (uint64_t)v12, 0);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        sub_3C69A0(a1, a3, (uint64_t)v12, a6);
      case 1:
        sub_3B1A7C(a1, a3, (uint64_t)v12, 0);
      case 20:
        if (a5) {
          sub_3C69A0(a1, a3, (uint64_t)v12, a6);
        }
        sub_3B19A8(a1, a3, 0, (uint64_t)v12, 0);
    }
  }
  int v13 = (os_log_t *)sub_32A48(20);
  uint64_t v14 = *v13;
  if (*v13)
  {
    if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315650;
      unint64_t v16 = "RoutingSettings_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 3552;
      __int16 v19 = 1024;
      int v20 = a2;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring invalid MicrophoneDSPChainType: %d", (uint8_t *)&v15, 0x18u);
    }
  }
}

void sub_3C6988(_Unwind_Exception *a1)
{
  sub_297864(v1);
  _Unwind_Resume(a1);
}

void sub_3C69A0(uint64_t a1, const char *a2, uint64_t a3, float a4)
{
  float64x2_t v8 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(a4), 0), (float64x2_t)xmmword_4E7BA0);
  sub_16FEBC((uint64_t)v7, 0, v8.f64[0], v8.f64[1]);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E280, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_65E280))
    {
      sub_3AF1C4(&qword_65E270, &v8, (uint64_t)v7);
      __cxa_guard_release(&qword_65E280);
    }
  }
  sub_3B0790(a1, a2, 0, 0, a3, 0x76727132u);
}

void sub_3C6AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_3C6ADC(uint64_t a1, char *a2, uint64_t a3)
{
  long long __p = (void *)CFStringCreateWithCString(0, "Generic", 0x600u);
  char v15 = 1;
  sub_3B3920(&v19, (CFStringRef *)&__p);
  size_t v6 = strlen(a2);
  int v7 = std::string::append(&v19, a2, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)&unsigned char v24[16] = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v24 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  long long v9 = std::string::append((std::string *)v24, ".dspg", 5uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((v24[23] & 0x80000000) != 0) {
    operator delete(*(void **)v24);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  sub_72924((uint64_t)&__p);
  long long v11 = (os_log_t *)sub_32A48(20);
  __int16 v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = &v23;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)unint64_t v24 = 136315650;
    *(void *)&v24[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&v24[12] = 1024;
    *(_DWORD *)&v24[14] = 3562;
    *(_WORD *)&v24[18] = 2080;
    *(void *)&v24[20] = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configuring headset - mic dsp from %s", v24, 0x1Cu);
  }
  sub_21C8C(v21, a2);
  sub_21C8C(&v18, a2);
  std::string v19 = v18;
  memset(&v18, 0, sizeof(v18));
  char v20 = 1;
  LOBYTE(__p) = 0;
  char v17 = 0;
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v27 = 2;
  long long v26 = xmmword_5968C4;
  sub_6D1AC((uint64_t)v24, (int *)&v26, 3);
  sub_3B57FC(a1, (char *)v21, &v23, (uint64_t)&v19, (uint64_t)&__p, a3, 0, 0);
  sub_6C954((uint64_t)v24);
  if (v17 && v16 < 0) {
    operator delete(__p);
  }
  if (v20 && SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_3C6DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_6C954(v44 - 144);
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (a31 && a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_3C6E74(void *a1, uint64_t a2, uint64_t a3, CFStringRef *a4, int a5, int a6, int a7)
{
  sub_3B3920(&__dst, a4);
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  char v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(void *)&v36[16] = *((void *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v36 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::string v18 = std::string::append((std::string *)v36, ".dspg", 5uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v36[23] & 0x80000000) != 0) {
    operator delete(*(void **)v36);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  char v20 = (os_log_t *)sub_32A48(20);
  int v21 = *v20;
  if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
  {
    char v22 = &v35;
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v22 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v36 = 136315650;
    *(void *)&v36[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&v36[12] = 1024;
    *(_DWORD *)&v36[14] = 3586;
    *(_WORD *)&v36[18] = 2080;
    *(void *)&v36[20] = v22;
    _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configuring MicVoiceRecognition dsp from %s", v36, 0x1Cu);
  }
  std::string v23 = operator new(0x10uLL);
  long long v33 = v23 + 4;
  long long v34 = v23 + 4;
  _DWORD *v23 = a5;
  v23[1] = a6;
  void v23[2] = a7;
  v23[3] = 0;
  uint64_t v32 = v23;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_21E8C(&__dst, *(void **)a2, *(void *)(a2 + 8));
    int v24 = *(char *)(a2 + 23);
    char v31 = 1;
    if (v24 < 0)
    {
      sub_21E8C(__p, *(void **)a2, *(void *)(a2 + 8));
      goto LABEL_20;
    }
  }
  else
  {
    std::string __dst = *(std::string *)a2;
    char v31 = 1;
  }
  *(_OWORD *)long long __p = *(_OWORD *)a2;
  uint64_t v28 = *(void *)(a2 + 16);
LABEL_20:
  char v29 = 1;
  uint64_t v37 = 0;
  memset(v36, 0, sizeof(v36));
  long long v38 = xmmword_5968C4;
  uint64_t v39 = 2;
  sub_6D1AC((uint64_t)v36, (int *)&v38, 3);
  sub_3B5948((uint64_t)a1, (char *)a2, 1684434036, &v35, (uint64_t)&__dst, (uint64_t)__p, a3);
  sub_6C954((uint64_t)v36);
  if (v29 && SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (v31 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*a1 == a1[1])
  {
    if (sub_207A20())
    {
      uint64_t v25 = (os_log_t *)sub_32A48(20);
      long long v26 = *v25;
      if (*v25)
      {
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v36 = 136315394;
          *(void *)&v36[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&v36[12] = 1024;
          *(_DWORD *)&v36[14] = 3596;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d GetMicVoiceRecognitionDSPGraph() - config didn't load properly", v36, 0x12u);
        }
      }
    }
  }
  operator delete(v23);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_3C71E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a26 && a25 < 0) {
    operator delete(__p);
  }
  operator delete(v43);
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

void sub_3C72AC(uint64_t a1)
{
  sub_21C8C(v36, "speaker_protection");
  sub_21C8C(&v13, "speaker_hal");
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_21C8C(v17, "speaker_hal");
  sub_21C8C(v18, "speaker_hal");
  memset(&v18[3], 0, 24);
  int v19 = 1684434036;
  uint64_t v12 = 0;
  int v45 = 1936749683;
  uint64_t v46 = 0;
  int v21 = 0;
  char v22 = 0;
  char v20 = 0;
  v39[0] = &v20;
  LOBYTE(v39[1]) = 0;
  char v20 = (char *)operator new(0x10uLL);
  int v21 = v20;
  int v2 = v20 + 16;
  char v22 = v20 + 16;
  sub_6D16C((uint64_t)v20, 1936749683, 0);
  v26[0] = 0;
  v26[1] = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  int v21 = v2;
  uint64_t v25 = v26;
  uint64_t v28 = 0;
  char v29 = 0;
  uint64_t v27 = 0;
  long long v3 = operator new(0x10uLL);
  uint64_t v27 = v3;
  *long long v3 = xmmword_4E78D0;
  uint64_t v28 = v3 + 1;
  char v29 = v3 + 1;
  char v30 = 0;
  char v31 = 0;
  memset(v32, 0, sizeof(v32));
  uint64_t v33 = 0;
  *(_OWORD *)uint64_t v39 = xmmword_5968C4;
  uint64_t v40 = 2;
  sub_6D1AC((uint64_t)v32, (int *)v39, 3);
  char v34 = 0;
  uint64_t v35 = 0;
  sub_6D224(__dst, (long long *)v36, &v13);
  sub_6D2A0((uint64_t)v38, (unsigned __int8 *)__dst, 1);
  sub_21C8C(v10, "");
  sub_21C8C(v8, "");
  sub_21C8C(&v7, off_648B50);
  sub_21C8C(&v6, "AU");
  sub_21C8C(&v5, off_648B48[0]);
  sub_6D364((char *)v39, (long long *)v10, (uint64_t)v8, &v7, &v6, &v5);
  sub_3C7774(a1, (uint64_t)v38, (long long *)v39);
  if (v44 < 0) {
    operator delete(__p);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  sub_6C7E4((void *)v38[2]);
  CFNumberRef v4 = v38[0];
  v38[0] = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_6C878((uint64_t)&v49);
  if (v48 < 0) {
    operator delete(__dst[0]);
  }
  sub_6C878((uint64_t)&v13);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
}

void sub_3C75B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,const void *a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_6D780((uint64_t)&a75);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  sub_6C74C((uint64_t)&a74);
  sub_6D710((uint64_t)&STACK[0x250]);
  sub_6C878((uint64_t)&a40);
  sub_6D74C((uint64_t)&STACK[0x240]);
  sub_60394(&a39);
  if (a73 < 0) {
    operator delete(a72);
  }
  _Unwind_Resume(a1);
}

void sub_3C776C()
{
}

uint64_t sub_3C7774(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = sub_6E9C8(a1, a2);
  if (*((char *)a3 + 23) < 0)
  {
    sub_21E8C((unsigned char *)(v5 + 40), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(v5 + 56) = *((void *)a3 + 2);
    *(_OWORD *)(v5 + 40) = v6;
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 64), *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a1 + 80) = *((void *)a3 + 5);
    *(_OWORD *)(a1 + 64) = v7;
  }
  long long v8 = (unsigned char *)(a1 + 88);
  if (*((char *)a3 + 71) < 0)
  {
    sub_21E8C(v8, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v9 = a3[3];
    *(void *)(a1 + 104) = *((void *)a3 + 8);
    *(_OWORD *)long long v8 = v9;
  }
  return a1;
}

void sub_3C7830(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  sub_6C74C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3C7874(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)a2 == 1936945763) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 40))();
  }
  else {
    return sub_102FDC(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sub_3C78B4(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)a2 == 1936945763)
  {
    CFNumberRef v4 = *(uint64_t (**)(void))(**(void **)(a1 + 192) + 32);
    return v4();
  }
  else
  {
    sub_1033C8(a1, a2, a3, a4);
    return 0;
  }
}

uint64_t sub_3C7920(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1936945763) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))();
  }
  else {
    return 0;
  }
}

uint64_t sub_3C7964(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1936945763) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 16))();
  }
  else {
    return 0;
  }
}

void sub_3C79A8(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

void sub_3C79E4(uint64_t a1)
{
  *(void *)a1 = off_639150;
  sub_463E0(*(void **)(a1 + 64));

  operator delete();
}

uint64_t sub_3C7A4C(uint64_t a1)
{
  *(void *)a1 = off_639150;
  sub_463E0(*(void **)(a1 + 64));
  return a1;
}

uint64_t sub_3C7A94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_3C7A9C()
{
  return 1818521197;
}

void sub_3C7AA8()
{
}

void sub_3C7C30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22) {
    sub_463E0(a18);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (a15) {
    sub_463E0(a11);
  }
  if (v22)
  {
    std::__shared_weak_count::__release_weak(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete();
}

uint64_t sub_3C7CA4()
{
  return 0;
}

uint64_t sub_3C7CAC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v14);
  sub_2417C(__p, 0x6C646E6Du);
  if ((v13 & 0x80u) == 0) {
    CFNumberRef v4 = __p;
  }
  else {
    CFNumberRef v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_256E4(&v15, (uint64_t)v4, v5);
  sub_256E4(&v15, (uint64_t)" ", 1);
  long long v6 = (void *)std::ostream::operator<<();
  sub_256E4(v6, (uint64_t)" ", 1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v7 == 1684234860) {
    long long v8 = "dB";
  }
  else {
    long long v8 = "Scalar";
  }
  if (v7 == 1684234860) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 6;
  }
  sub_256E4(v6, (uint64_t)v8, v9);
  sub_256E4(v6, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_246E4(a2, (uint64_t)v16);
  *(void *)((char *)v14
  uint64_t v15 = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3C7F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3C7F4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_3C7F54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

void sub_3C7F5C(uint64_t a1, float a2)
{
  sub_796B4(a1 + 40, a2);
  float v4 = v3;
  uint64_t v5 = sub_32A48(18);
  uint64_t v6 = sub_32A48(38);
  char v7 = 0;
  uint64_t v8 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11) {
      goto LABEL_7;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  uint64_t v12 = *(NSObject **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v15 >= 0) {
      unsigned __int8 v13 = __p;
    }
    else {
      unsigned __int8 v13 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 772;
    __int16 v19 = 2048;
    double v20 = v4;
    __int16 v21 = 2080;
    char v22 = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f dB on chain '%s'.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x6C646E6Du, *(_DWORD *)(a1 + 128), v4);
}

void sub_3C8104(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3C8148(uint64_t a1)
{
  *(void *)a1 = off_639190;
  sub_463E0(*(void **)(a1 + 64));

  operator delete();
}

uint64_t sub_3C81B0(uint64_t a1)
{
  *(void *)a1 = off_639190;
  sub_463E0(*(void **)(a1 + 64));
  return a1;
}

void sub_3C81F8(uint64_t a1)
{
}

void sub_3C834C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_463E0(a12);
  }
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete();
}

uint64_t sub_3C839C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_3C83A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

void sub_3C83AC(uint64_t a1, float a2)
{
  sub_796B4(a1 + 40, a2);
  float v4 = v3;
  uint64_t v5 = sub_32A48(18);
  uint64_t v6 = sub_32A48(38);
  char v7 = 0;
  uint64_t v8 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11) {
      goto LABEL_7;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  uint64_t v12 = *(NSObject **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v15 >= 0) {
      unsigned __int8 v13 = __p;
    }
    else {
      unsigned __int8 v13 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 772;
    __int16 v19 = 2048;
    double v20 = v4;
    __int16 v21 = 2080;
    char v22 = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f dB on chain '%s'.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x64737067u, *(_DWORD *)(a1 + 128), v4);
}

void sub_3C8554(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3C8590(uint64_t a1)
{
  *(void *)a1 = off_6391D0;
  sub_463E0(*(void **)(a1 + 64));

  operator delete();
}

uint64_t sub_3C85F8(uint64_t a1)
{
  *(void *)a1 = off_6391D0;
  sub_463E0(*(void **)(a1 + 64));
  return a1;
}

uint64_t sub_3C8640(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_3C8648()
{
  return 1635284067;
}

void sub_3C8654()
{
}

void sub_3C87DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22) {
    sub_463E0(a18);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (a15) {
    sub_463E0(a11);
  }
  if (v22)
  {
    std::__shared_weak_count::__release_weak(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete();
}

uint64_t sub_3C8850()
{
  return 0;
}

uint64_t sub_3C8858@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v14);
  sub_2417C(__p, 0x61787463u);
  if ((v13 & 0x80u) == 0) {
    float v4 = __p;
  }
  else {
    float v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_256E4(&v15, (uint64_t)v4, v5);
  sub_256E4(&v15, (uint64_t)" ", 1);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_256E4(v6, (uint64_t)" ", 1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v7 == 1684234860) {
    uint64_t v8 = "dB";
  }
  else {
    uint64_t v8 = "Scalar";
  }
  if (v7 == 1684234860) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 6;
  }
  sub_256E4(v6, (uint64_t)v8, v9);
  sub_256E4(v6, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_246E4(a2, (uint64_t)v16);
  *(void *)((char *)v14
  uint64_t v15 = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3C8AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3C8AF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_3C8B00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

void sub_3C8B08(uint64_t a1, float a2)
{
  sub_796B4(a1 + 40, a2);
  float v4 = v3;
  uint64_t v5 = sub_32A48(18);
  uint64_t v6 = sub_32A48(38);
  char v7 = 0;
  uint64_t v8 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11) {
      goto LABEL_7;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  uint64_t v12 = *(NSObject **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v15 >= 0) {
      unsigned __int8 v13 = __p;
    }
    else {
      unsigned __int8 v13 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 725;
    __int16 v19 = 2048;
    double v20 = v4;
    __int16 v21 = 2080;
    char v22 = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f dB on chain '%s'.", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x61787463u, *(_DWORD *)(a1 + 128), v4);
}

void sub_3C8CB0(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3C8CF4()
{
}

void sub_3C8D0C()
{
}

void sub_3C8D84()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3C8DB4(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_151470((void *)a1, 1684234860, a2, a3);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *(void *)a1 = &off_639FF8;
  *(unsigned char *)(a1 + 128) = 1;
  *(_DWORD *)(a1 + 132) = 1;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  return a1;
}

void sub_3C8E40(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3C8E5C(unsigned char *a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 144))(a1);
  a1[128] = a2;
  return result;
}

uint64_t sub_3C8EA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

void sub_3C8EB0(uint64_t a1, int a2)
{
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  char v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = a2 ? "Unmute" : "Mute";
    sub_14FDE0((uint64_t)__p, a1);
    unsigned __int8 v13 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 1032;
    __int16 v19 = 2080;
    double v20 = v12;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 2080;
    long long v24 = v13;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d HeadsetGraph : %s %p on chain '%s'.", buf, 0x30u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a2 != 1) {
    sub_35C4B4(a1, 0x64737067u, 0x6877766Fu, -3.4028e38);
  }
}

double sub_3C907C()
{
  return 0.0;
}

double sub_3C9084()
{
  return 0.0;
}

uint64_t sub_3C908C()
{
  return 0;
}

void sub_3C9094(uint64_t a1, uint64_t a2)
{
  if (BYTE4(a2) && *(unsigned char *)(a1 + 140))
  {
    if (*(float *)(a1 + 136) == *(float *)&a2) {
      return;
    }
  }
  else if ((BYTE4(a2) != 0) == (*(unsigned char *)(a1 + 140) != 0))
  {
    return;
  }
  unsigned int v3 = 0;
  *(_DWORD *)(a1 + 136) = a2;
  *(unsigned char *)(a1 + 140) = BYTE4(a2);
  if (BYTE4(a2) && *(float *)&a2 != 0.0)
  {
    float v8 = 0.0;
    sub_35CFA8(a1, 0x64737067u, 0x6877766Fu, &v8);
    sub_35E688(v8, *(float *)(a1 + 136));
    unsigned int v3 = v4;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    char v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (v7) {
        atomic_store(v3, (unsigned int *)(v7 + 792));
      }
      sub_4636C(v6);
    }
  }
}

void sub_3C9168(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = sub_32A48(18);
  uint64_t v7 = sub_32A48(38);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_7;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  unsigned __int8 v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    uint64_t v14 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v23 = 1024;
    int v24 = 1001;
    __int16 v25 = 2048;
    double v26 = a2;
    __int16 v27 = 2048;
    double v28 = a3;
    __int16 v29 = 2048;
    uint64_t v30 = a1;
    __int16 v31 = 2080;
    uint64_t v32 = v14;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_INFO, "%25s:%-5d HeadsetGraph : Changing Volume : %.2f dB | Scalar : %.2f | %p on chain '%s'.", buf, 0x3Au);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x64737067u, 0x6877766Fu, a2);
  sub_35C4B4(a1, 0x64737067u, 0x7363766Fu, a3);
  if (*(unsigned char *)(a1 + 140))
  {
    sub_35E688(a2, *(float *)(a1 + 136));
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 32);
    if (v16)
    {
      unsigned int v17 = v15;
      int v18 = std::__shared_weak_count::lock(v16);
      if (v18)
      {
        uint64_t v19 = *(void *)(a1 + 24);
        if (v19) {
          atomic_store(v17, (unsigned int *)(v19 + 792));
        }
        sub_4636C(v18);
      }
    }
  }
}

void sub_3C9384(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3C93C0()
{
}

void sub_3C93D8()
{
}

void sub_3C94A4()
{
  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

void sub_3C94DC(uint64_t a1, float a2)
{
  float v10 = 0.0;
  sub_35CFA8(a1, 0x64737067u, 0x726D6764u, &v10);
  float v9 = 0.0;
  sub_35CFA8(a1, 0x64737067u, 0x726D6732u, &v9);
  int v8 = 0;
  sub_35DF9C(a1, 0x6279686Cu, (uint64_t)&v8, 4);
  float v4 = 0.0;
  float v5 = 0.0;
  if (!v8) {
    float v5 = (float)(*(float *)(a1 + 160) + -1.0) * 20.0;
  }
  if (*(_DWORD *)(sub_3AEEEC() + 8)) {
    float v4 = v5;
  }
  float v6 = (float)((float)(v10 + *(float *)(a1 + 152)) + v9) + a2;
  float v7 = sub_3C95E8(a1);
  sub_35C4B4(a1, 0x64737067u, 0x686C766Fu, v4 + (float)(v7 + v6));
}

float sub_3C95E8(uint64_t a1)
{
  uint64_t v3 = 0;
  sub_35DF9C(a1, 0x62796571u, (uint64_t)&v3, 4);
  float result = 0.0;
  if (!v3)
  {
    sub_35CFA8(a1, 0x64737067u, 0x67676571u, (float *)&v3 + 1);
    return *((float *)&v3 + 1);
  }
  return result;
}

void sub_3C9654(uint64_t a1)
{
  sub_35CFA8(a1, 0x64737067u, 0x7370736Fu, (float *)(a1 + 144));
  *(float *)(a1 + 144) = *(float *)(a1 + 144) + 13.0;
  unsigned int v2 = *(_DWORD *)(sub_3AEEEC() + 8);
  if (v2 - 1 >= 0x4F)
  {
    if (v2 - 80 > 4)
    {
      float v7 = -1.5;
      if (v2 - 85 < 5) {
        float v7 = -6.5;
      }
      sub_35C4B4(a1, 0x64737067u, 0x686C6674u, v7);
      float v35 = 0.0;
      if (!v2)
      {
        sub_35CFA8(a1, 0x64737067u, 0x6C6E3030u, &v35);
        sub_35C4B4(a1, 0x64737067u, 0x6C6E6D67u, v35);
        *(_DWORD *)(a1 + 152) = 0;
        double v20 = *(std::__shared_weak_count **)(a1 + 32);
        if (v20 && (char v21 = std::__shared_weak_count::lock(v20)) != 0)
        {
          uint64_t v22 = v21;
          uint64_t v23 = *(void *)(a1 + 24);
          if (!v23) {
            goto LABEL_52;
          }
          int v24 = *(void **)(v23 + 1112);
          if (!v24) {
            goto LABEL_52;
          }
          __int16 v25 = (void *)(v23 + 1112);
          double v26 = (void *)(v23 + 1112);
          do
          {
            unint64_t v27 = v24[4];
            BOOL v28 = v27 >= 3;
            if (v27 >= 3) {
              __int16 v29 = v24;
            }
            else {
              __int16 v29 = v24 + 1;
            }
            if (v28) {
              double v26 = v24;
            }
            int v24 = (void *)*v29;
          }
          while (*v29);
          if (v26 == v25 || v26[4] > 3uLL) {
            goto LABEL_52;
          }
          sub_1BABE0((uint64_t)&buf[8], (uint64_t)(v26 + 6));
          char v48 = 1;
          if (v47) {
            sub_27EA3C();
          }
          int v30 = buf[8];
          sub_8C710((uint64_t)&buf[8]);
          if (v30) {
            int v31 = 0;
          }
          else {
LABEL_52:
          }
            int v31 = 1;
          sub_4636C(v22);
        }
        else
        {
          int v31 = 1;
        }
        *(_DWORD *)int buf = 0;
        sub_35DF9C(a1, 0x62796C6Eu, (uint64_t)buf, 4);
        if (*(_DWORD *)buf != v31)
        {
          *(_DWORD *)int buf = v31;
          sub_35D6A8(a1, 0x64737067u, 0x62796C6Eu);
        }
        sub_35C4B4(a1, 0x64737067u, 0x6C6B6673u, 0.0);
        return;
      }
      int v4 = 1819162677;
      if (v2 >= 0x60) {
        int v8 = 1819160624;
      }
      else {
        int v8 = 1819162933;
      }
      if (v2 >= 0x5B) {
        int v5 = v8;
      }
      else {
        int v5 = 1819162928;
      }
      BOOL v6 = v2 >= 0x56;
      goto LABEL_17;
    }
    sub_35C4B4(a1, 0x64737067u, 0x686C6674u, -11.5);
    float v35 = 0.0;
  }
  else
  {
    sub_35C4B4(a1, 0x64737067u, 0x686C6674u, -16.5);
    float v35 = 0.0;
    if (v2 < 0x4C)
    {
      unsigned int v3 = 1819162421;
      goto LABEL_20;
    }
  }
  int v4 = 1819162672;
  int v5 = 1819162677;
  BOOL v6 = v2 >= 0x51;
LABEL_17:
  if (v6) {
    unsigned int v3 = v5;
  }
  else {
    unsigned int v3 = v4;
  }
LABEL_20:
  sub_35CFA8(a1, 0x64737067u, v3, &v35);
  sub_35C4B4(a1, 0x64737067u, 0x6C6E6D67u, v35);
  float v34 = 0.0;
  sub_35CFA8(a1, 0x64737067u, 0x6C6E6C6Du, &v34);
  *(float *)(a1 + 152) = (float)((float)v2 - *(float *)(a1 + 144)) - v34;
  uint64_t v9 = sub_32A48(18);
  uint64_t v10 = sub_32A48(38);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_26;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_26:
  uint64_t v16 = *(NSObject **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    float v17 = *(float *)(a1 + 144);
    float v18 = *(float *)(a1 + 152);
    sub_14FDE0((uint64_t)__p, a1);
    if (v33 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v37 = 1024;
    int v38 = 1205;
    __int16 v39 = 2048;
    double v40 = v17;
    __int16 v41 = 1024;
    unsigned int v42 = v2;
    __int16 v43 = 2048;
    double v44 = v18;
    __int16 v45 = 2080;
    uint64_t v46 = v19;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HeadsetGraph : SPL Gain : %.2fdB SPLTarget :  %.2udB LoudnessTarget :  %.2fdB on chain '%s'.", buf, 0x36u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x64737067u, 0x6C6B6673u, *(float *)(a1 + 152));
}

void sub_3C9AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a25) {
    sub_8C710(v26);
  }
  sub_4636C(v25);
  _Unwind_Resume(a1);
}

void sub_3C9B14(uint64_t a1)
{
}

void sub_3C9B2C(uint64_t a1)
{
  int v17 = 0;
  sub_35DF9C(a1, 0x6279686Cu, (uint64_t)&v17, 4);
  float v2 = 0.0;
  if (!v17) {
    float v2 = (float)(1.0 - *(float *)(a1 + 160)) * 20.0;
  }
  if (*(_DWORD *)(sub_3AEEEC() + 8)) {
    float v3 = v2;
  }
  else {
    float v3 = 0.0;
  }
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_12;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_12:
  char v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    float v12 = *(float *)(a1 + 156);
    sub_14FDE0((uint64_t)__p, a1);
    uint64_t v13 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v19 = 1024;
    int v20 = 1153;
    __int16 v21 = 2048;
    double v22 = (float)(v3 + v12);
    __int16 v23 = 2080;
    int v24 = v13;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Total Remap Gain is %f on chain '%s'.", buf, 0x26u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((float)(-1.5 - v3) < -20.0) {
    float v14 = -1.5 - v3;
  }
  else {
    float v14 = -20.0;
  }
  sub_35C4B4(a1, 0x64737067u, 0x68676674u, -1.5 - v3);
  sub_35C4B4(a1, 0x64737067u, 0x686D6372u, v14);
  sub_35C4B4(a1, 0x64737067u, 0x726D6764u, v3 + *(float *)(a1 + 156));
}

uint64_t sub_3C9D6C(uint64_t result, float a2)
{
  *(float *)(result + 156) = a2;
  return result;
}

uint64_t sub_3C9D74(uint64_t result, float a2)
{
  *(float *)(result + 156) = a2;
  return result;
}

uint64_t sub_3C9D7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 164);
}

float sub_3C9D84(uint64_t a1, float a2)
{
  unsigned int v4 = *(_DWORD *)(sub_3AEEEC() + 8);
  float v5 = 0.0;
  if (v4)
  {
    float v9 = 0.0;
    sub_35CFA8(a1, 0x64737067u, 0x77327370u, &v9);
    float v8 = 1.0;
    sub_35CFA8(a1, 0x64737067u, 0x77326375u, &v8);
    float v6 = v9 + (float)(a2 * v8);
    if (v6 > (float)v4) {
      return (float)((float)v4 - v6) / v8;
    }
  }
  return v5;
}

float sub_3C9E30(uint64_t a1, float a2)
{
  *(float *)(a1 + 160) = a2;
  unsigned int v4 = *(_DWORD *)(sub_3AEEEC() + 8);
  if (*(unsigned char *)(a1 + 128)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    float v6 = (os_log_t *)sub_32A48(20);
    os_log_t v7 = *v6;
    float v8 = 0.0;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v23 = "VolumeControl.h";
      __int16 v24 = 1024;
      int v25 = 1138;
      float v9 = "%25s:%-5d no reduction\n";
      char v10 = v7;
      uint32_t v11 = 18;
LABEL_16:
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    }
  }
  else
  {
    float v21 = 0.0;
    sub_35CFA8(a1, 0x64737067u, 0x6C6E6C6Du, &v21);
    float v12 = (float)((float)v4 - *(float *)(a1 + 144)) - v21;
    float v13 = 2.0;
    if (a2 > 0.89) {
      float v13 = (float)((float)(1.0 - a2) + (float)(1.0 - a2)) / 0.11;
    }
    int v20 = 0;
    sub_35DF9C(a1, 0x6279686Cu, (uint64_t)&v20, 4);
    int v14 = v20;
    float v15 = -(float)(sub_3C95E8(a1) - (float)((float)(a2 + -1.0) * v12));
    float v16 = 2.5;
    if (!v14) {
      float v16 = 4.0;
    }
    float v8 = v13 + (float)(v15 - (float)(a2 * v16));
    int v17 = (os_log_t *)sub_32A48(20);
    os_log_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315650;
      __int16 v23 = "VolumeControl.h";
      __int16 v24 = 1024;
      int v25 = 1135;
      __int16 v26 = 2048;
      double v27 = v8;
      float v9 = "%25s:%-5d VLT remapper delta is %f";
      char v10 = v18;
      uint32_t v11 = 28;
      goto LABEL_16;
    }
  }
  return v8;
}

uint64_t sub_3CA050()
{
  return 1;
}

uint64_t sub_3CA058(float *a1, float a2, float a3)
{
  sub_3C9168((uint64_t)a1, a2, a3);
  sub_35CFA8((uint64_t)a1, 0x64737067u, 0x6D70766Fu, a1 + 37);
  (*(void (**)(float *))(*(void *)a1 + 296))(a1);
  (*(void (**)(float *))(*(void *)a1 + 312))(a1);
  (*(void (**)(float *))(*(void *)a1 + 304))(a1);
  BOOL v5 = *(uint64_t (**)(float *, __n128))(*(void *)a1 + 320);
  v6.n128_f32[0] = a2;

  return v5(a1, v6);
}

void sub_3CA1A4(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3CA1E0()
{
}

void sub_3CA27C()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3CA2AC(uint64_t a1, int a2, int a3, long long *a4, uint64_t a5, std::__shared_weak_count *a6)
{
  long long v11 = *a4;
  uint64_t v12 = *((void *)a4 + 2);
  if (a6)
  {
    atomic_fetch_add_explicit(&a6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_35C414(a1, 1684234860, a5, a6);
  if (a6)
  {
    std::__shared_weak_count::__release_weak(a6);
    *(void *)a1 = off_639500;
    std::__shared_weak_count::__release_weak(a6);
    *(void *)a1 = &off_6393C8;
    *(_DWORD *)(a1 + 128) = a2;
    *(_DWORD *)(a1 + 132) = a3;
    *(_OWORD *)(a1 + 136) = v11;
    *(void *)(a1 + 152) = v12;
    std::__shared_weak_count::__release_weak(a6);
  }
  else
  {
    *(void *)a1 = &off_6393C8;
    *(_DWORD *)(a1 + 128) = a2;
    *(_DWORD *)(a1 + 132) = a3;
    *(_OWORD *)(a1 + 136) = v11;
    *(void *)(a1 + 152) = v12;
  }
  *(void *)a1 = &off_639290;
  *(_DWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_3CA3F8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3CA420()
{
  return 0;
}

uint64_t sub_3CA428@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v14);
  sub_2417C(__p, 0x766F6C69u);
  if ((v13 & 0x80u) == 0) {
    unsigned int v4 = __p;
  }
  else {
    unsigned int v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_256E4(&v15, (uint64_t)v4, v5);
  sub_256E4(&v15, (uint64_t)" ", 1);
  __n128 v6 = (void *)std::ostream::operator<<();
  sub_256E4(v6, (uint64_t)" ", 1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v7 == 1684234860) {
    float v8 = "dB";
  }
  else {
    float v8 = "Scalar";
  }
  if (v7 == 1684234860) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 6;
  }
  sub_256E4(v6, (uint64_t)v8, v9);
  sub_256E4(v6, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_246E4(a2, (uint64_t)v16);
  *(void *)((char *)v14
  uint64_t v15 = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3CA698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

BOOL sub_3CA6C8(uint64_t a1)
{
  float v2 = 0.0;
  sub_35CFA8(a1, 0x766F6C69u, *(_DWORD *)(a1 + 128), &v2);
  return (float)(v2 + 120.0) > 0.00000011921;
}

void sub_3CA718(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (!a2 && v4 == 1)
  {
    sub_35CFA8(a1, 0x766F6C69u, *(_DWORD *)(a1 + 128), (float *)(a1 + 160));
    uint64_t v5 = (os_log_t *)sub_32A48(38);
    __n128 v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      float v7 = *(float *)(a1 + 160);
      sub_14FDE0((uint64_t)__p, a1);
      if (v15 >= 0) {
        float v8 = __p;
      }
      else {
        float v8 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136316162;
      char v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 660;
      __int16 v20 = 2048;
      double v21 = -120.0;
      __int16 v22 = 2048;
      double v23 = v7;
      __int16 v24 = 2080;
      int v25 = v8;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting mute with volume %.2f dB, previous volume: %.2f on chain '%s'.", buf, 0x30u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    float v9 = -120.0;
LABEL_21:
    sub_3CA974(a1, v9);
    return;
  }
  if (a2 == 1 && !v4)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(38);
    long long v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      float v12 = *(float *)(a1 + 160);
      sub_14FDE0((uint64_t)__p, a1);
      if (v15 >= 0) {
        *(double *)&unsigned __int8 v13 = COERCE_DOUBLE(__p);
      }
      else {
        unsigned __int8 v13 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      char v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 667;
      __int16 v20 = 2048;
      double v21 = v12;
      __int16 v22 = 2080;
      double v23 = *(double *)&v13;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unmute with previous volume: %.2f on chain '%s'.", buf, 0x26u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    float v9 = *(float *)(a1 + 160);
    goto LABEL_21;
  }
}

void sub_3CA974(uint64_t a1, float a2)
{
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  long long v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v14 >= 0) {
      float v12 = __p;
    }
    else {
      float v12 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 541;
    __int16 v18 = 2048;
    double v19 = a2;
    __int16 v20 = 2080;
    double v21 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x766F6C69u, *(_DWORD *)(a1 + 128), a2);
}

BOOL sub_3CAB14(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) != 0;
}

void sub_3CAB24(unsigned int *a1, unsigned int a2, int a3, float a4, float a5)
{
  int v42 = a3;
  if (a1[34])
  {
    char v10 = (os_log_t *)sub_32A48(38);
    long long v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        float v12 = "enabled";
      }
      else {
        float v12 = "disabled";
      }
      unsigned __int8 v13 = v40;
      sub_2417C(v40, a1[34]);
      if (v41 < 0) {
        unsigned __int8 v13 = (void **)v40[0];
      }
      sub_2417C(v38, a2);
      int v14 = v39;
      char v15 = (void **)v38[0];
      sub_14FDE0((uint64_t)__p, (uint64_t)a1);
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      __int16 v16 = v38;
      if (v14 < 0) {
        __int16 v16 = v15;
      }
      *(_DWORD *)int buf = 136316930;
      __int16 v44 = 1024;
      if (v37 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      int v45 = 576;
      __int16 v46 = 2080;
      int v47 = (void *)v12;
      __int16 v48 = 2080;
      uint64_t v49 = v13;
      __int16 v50 = 2080;
      int v51 = v16;
      __int16 v52 = 2048;
      double v53 = a4;
      __int16 v54 = 2048;
      double v55 = a5;
      __int16 v56 = 2080;
      uint64_t v57 = v17;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f, chain: '%s'.", buf, 0x4Eu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }
    if (a2 != 1)
    {
      __int16 v18 = (os_log_t *)sub_32A48(13);
      double v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v40, a2);
          __int16 v20 = v41 >= 0 ? v40 : (void **)v40[0];
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v44 = 1024;
          int v45 = 578;
          __int16 v46 = 2080;
          int v47 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"duck type: '%s' not supported!\"", buf, 0x1Cu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }
        }
      }
    }
    *(_DWORD *)int buf = a1[35];
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, buf);
    v38[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    *(_DWORD *)int buf = a1[36];
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }
    *(_DWORD *)int buf = a1[37];
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, buf);
    CFNumberRef v35 = v23;
    if (!v23)
    {
      uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
    }
    float v24 = a5 * 1000.0;
    unsigned int v25 = a1[38];
    if (a1[39] != 1) {
      float v24 = a5;
    }
    float v34 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v33 = a4;
    sub_14FEB4(buf, v21, &v42);
    sub_14FF9C((int *)((char *)&v45 + 2), v22, (int *)&v33);
    sub_14FF9C((void ***)((char *)&v49 + 2), v23, (int *)&v34);
    v40[0] = buf;
    v40[1] = &def_1E50E8 + 3;
    CFDictionaryRef v26 = sub_4D3D8((uint64_t)v40);
    for (uint64_t i = 0; i != -6; i -= 2)
    {
      BOOL v28 = (&v51)[i];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = *(void ***)((char *)&(&v49)[i] + 2);
      if (v29) {
        CFRelease(v29);
      }
    }
    *(void *)int buf = v26;
    sub_35D6A8((uint64_t)a1, 0x766F6C69u, a1[34]);
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }
}

void sub_3CAFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_3CB104(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

BOOL sub_3CB140(uint64_t a1)
{
  float v2 = 0.0;
  sub_35CFA8(a1, 0x766F6C69u, *(_DWORD *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_3CB180(uint64_t a1, int a2)
{
  if (a2) {
    float v3 = 0.0;
  }
  else {
    float v3 = 1.0;
  }
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_10;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_10:
  long long v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v14 >= 0) {
      float v12 = __p;
    }
    else {
      float v12 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 554;
    __int16 v18 = 2048;
    double v19 = v3;
    __int16 v20 = 2080;
    CFNumberRef v21 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting mute value: %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x766F6C69u, *(_DWORD *)(a1 + 132), v3);
}

void sub_3CB32C(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3CB370()
{
}

void sub_3CB40C()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3CB43C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6)
{
  long long v9 = *(_OWORD *)a4;
  uint64_t v10 = *(void *)(a4 + 16);
  if (a6) {
    atomic_fetch_add_explicit(&a6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_150D78(a1, 1684234860, a2, a3, &v9, a5, a6);
  if (a6) {
    std::__shared_weak_count::__release_weak(a6);
  }
  *(void *)a1 = &off_639638;
  *(_DWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_3CB4E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_3CB4F8(uint64_t a1)
{
  float v2 = 0.0;
  sub_35CFA8(a1, 0x64737067u, *(_DWORD *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_3CB53C(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3CB578()
{
}

void sub_3CB678()
{
  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    std::__shared_weak_count::__release_weak(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3CB6B8()
{
  return 0;
}

uint64_t sub_3CB6C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v14);
  sub_2417C(__p, 0x73706C6Du);
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_256E4(&v15, (uint64_t)v4, v5);
  sub_256E4(&v15, (uint64_t)" ", 1);
  char v6 = (void *)std::ostream::operator<<();
  sub_256E4(v6, (uint64_t)" ", 1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v7 == 1684234860) {
    uint64_t v8 = "dB";
  }
  else {
    uint64_t v8 = "Scalar";
  }
  if (v7 == 1684234860) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 6;
  }
  sub_256E4(v6, (uint64_t)v8, v9);
  sub_256E4(v6, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_246E4(a2, (uint64_t)v16);
  *(void *)((char *)v14
  uint64_t v15 = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3CB930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3CB964(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t sub_3CB988(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

void sub_3CB990(uint64_t a1, int a2)
{
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  long long v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    float v12 = a2 ? "Unmute" : "Mute";
    sub_14FDE0((uint64_t)__p, a1);
    unsigned __int8 v13 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v17 = 1024;
    int v18 = 955;
    __int16 v19 = 2080;
    __int16 v20 = v12;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 2080;
    float v24 = v13;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : %s AUSPL %p on chain '%s'.", buf, 0x30u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a2 != 1) {
    sub_35C4B4(a1, 0x73706C6Du, 0, -3.4028e38);
  }
}

double sub_3CBB58()
{
  return 0.0;
}

double sub_3CBB60()
{
  return 0.0;
}

uint64_t sub_3CBB68()
{
  return 0;
}

void sub_3CBB70(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = sub_32A48(18);
  uint64_t v7 = sub_32A48(38);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_7;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  unsigned __int8 v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v16 >= 0) {
      char v14 = __p;
    }
    else {
      char v14 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v18 = 1024;
    int v19 = 920;
    __int16 v20 = 2048;
    double v21 = a2;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2080;
    unsigned int v25 = v14;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : Changing Volume : %.2fdB %p on chain '%s'.", buf, 0x30u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x73706C6Du, 0, a2);
  sub_35C4B4(a1, 0x73706C6Du, 0xCu, a3);
}

void sub_3CBD38(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3CBD7C()
{
}

void sub_3CBEEC()
{
  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    std::__shared_weak_count::__release_weak(v0);
    std::__shared_weak_count::__release_weak(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

uint64_t sub_3CBF34()
{
  return 0;
}

uint64_t sub_3CBF3C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2440C((uint64_t)v14);
  sub_2417C(__p, 0x63706D31u);
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_256E4(&v15, (uint64_t)v4, v5);
  sub_256E4(&v15, (uint64_t)" ", 1);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_256E4(v6, (uint64_t)" ", 1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v7 == 1684234860) {
    char v8 = "dB";
  }
  else {
    char v8 = "Scalar";
  }
  if (v7 == 1684234860) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 6;
  }
  sub_256E4(v6, (uint64_t)v8, v9);
  sub_256E4(v6, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_246E4(a2, (uint64_t)v16);
  *(void *)((char *)v14
  uint64_t v15 = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3CC1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_3CC1DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_3CC1E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

BOOL sub_3CC1EC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) != 0;
}

void sub_3CC1FC(unsigned int *a1, unsigned int a2, int a3, float a4, float a5)
{
  int v42 = a3;
  if (a1[34])
  {
    uint64_t v10 = (os_log_t *)sub_32A48(38);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        char v12 = "enabled";
      }
      else {
        char v12 = "disabled";
      }
      unsigned __int8 v13 = v40;
      sub_2417C(v40, a1[34]);
      if (v41 < 0) {
        unsigned __int8 v13 = (void **)v40[0];
      }
      sub_2417C(v38, a2);
      int v14 = v39;
      uint64_t v15 = (void **)v38[0];
      sub_14FDE0((uint64_t)__p, (uint64_t)a1);
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      char v16 = v38;
      if (v14 < 0) {
        char v16 = v15;
      }
      *(_DWORD *)int buf = 136316930;
      __int16 v44 = 1024;
      if (v37 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      int v45 = 576;
      __int16 v46 = 2080;
      int v47 = (void *)v12;
      __int16 v48 = 2080;
      uint64_t v49 = v13;
      __int16 v50 = 2080;
      int v51 = v16;
      __int16 v52 = 2048;
      double v53 = a4;
      __int16 v54 = 2048;
      double v55 = a5;
      __int16 v56 = 2080;
      uint64_t v57 = v17;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f, chain: '%s'.", buf, 0x4Eu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }
    if (a2 != 1)
    {
      __int16 v18 = (os_log_t *)sub_32A48(13);
      int v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v40, a2);
          __int16 v20 = v41 >= 0 ? v40 : (void **)v40[0];
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v44 = 1024;
          int v45 = 578;
          __int16 v46 = 2080;
          int v47 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"duck type: '%s' not supported!\"", buf, 0x1Cu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }
        }
      }
    }
    *(_DWORD *)int buf = a1[35];
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, buf);
    v38[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    *(_DWORD *)int buf = a1[36];
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }
    *(_DWORD *)int buf = a1[37];
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, buf);
    CFNumberRef v35 = v23;
    if (!v23)
    {
      uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
    }
    float v24 = a5 * 1000.0;
    unsigned int v25 = a1[38];
    if (a1[39] != 1) {
      float v24 = a5;
    }
    float v34 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v33 = a4;
    sub_14FEB4(buf, v21, &v42);
    sub_14FF9C((int *)((char *)&v45 + 2), v22, (int *)&v33);
    sub_14FF9C((void ***)((char *)&v49 + 2), v23, (int *)&v34);
    v40[0] = buf;
    v40[1] = &def_1E50E8 + 3;
    CFDictionaryRef v26 = sub_4D3D8((uint64_t)v40);
    for (uint64_t i = 0; i != -6; i -= 2)
    {
      BOOL v28 = (&v51)[i];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = *(void ***)((char *)&(&v49)[i] + 2);
      if (v29) {
        CFRelease(v29);
      }
    }
    *(void *)int buf = v26;
    sub_35D6A8((uint64_t)a1, 0x63706D31u, a1[34]);
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }
}

void sub_3CC6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_3CC7DC(uint64_t a1, float a2)
{
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v14 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 541;
    __int16 v18 = 2048;
    double v19 = a2;
    __int16 v20 = 2080;
    CFNumberRef v21 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x63706D31u, *(_DWORD *)(a1 + 128), a2);
}

void sub_3CC97C(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

BOOL sub_3CC9B8(uint64_t a1)
{
  float v2 = 0.0;
  sub_35CFA8(a1, 0x63706D31u, *(_DWORD *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_3CC9F8(uint64_t a1, int a2)
{
  if (a2) {
    float v3 = 0.0;
  }
  else {
    float v3 = 1.0;
  }
  uint64_t v4 = sub_32A48(18);
  uint64_t v5 = sub_32A48(38);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_10;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_10:
  uint64_t v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_14FDE0((uint64_t)__p, a1);
    if (v14 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 554;
    __int16 v18 = 2048;
    double v19 = v3;
    __int16 v20 = 2080;
    CFNumberRef v21 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting mute value: %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_35C4B4(a1, 0x63706D31u, *(_DWORD *)(a1 + 132), v3);
}

void sub_3CCBA4(uint64_t a1)
{
  sub_35B9EC(a1);

  operator delete();
}

void sub_3CCBE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112)) {
    operator new();
  }
  sub_7F218();
}

void sub_3CCDF8()
{
  sub_35B9EC(v0);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  operator delete();
}

void sub_3CCE60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112)) {
    operator new();
  }
  sub_7F218();
}

void sub_3CD070()
{
  sub_35B9EC(v0);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  operator delete();
}

void sub_3CD0D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112)) {
    operator new();
  }
  sub_7F218();
}

void sub_3CD2F0()
{
  sub_35B9EC(v0);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  operator delete();
}

void sub_3CD358()
{
}

void sub_3CD3E4()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

void sub_3CD414()
{
}

void sub_3CD4A0()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

BOOL sub_3CD4D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65E340))
  {
    int v1 = sub_207A20();
    if (v1 && (MGGetBoolAnswer() & 1) == 0 && sub_20994C()) {
      MGGetBoolAnswer();
    }
    byte_65E338 = v1 != 0;
    __cxa_guard_release(&qword_65E340);
  }
  return byte_65E338 == 0;
}

void sub_3CD568(_Unwind_Exception *a1)
{
}

BOOL sub_3CD580()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E350, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65E350))
  {
    int v1 = sub_209B38();
    int v2 = qword_65E380;
    if (v1) {
      int v2 = 0;
    }
    dword_65E348 = v2;
    __cxa_guard_release(&qword_65E350);
  }
  return dword_65E348 == 1;
}

void sub_3CD5F4(_Unwind_Exception *a1)
{
}

BOOL sub_3CD60C(int a1, int a2)
{
  uint64_t v2 = qword_65E360;
  if (!qword_65E360) {
    return 0;
  }
  while (1)
  {
    int v4 = *(_DWORD *)(v2 + 32);
    if (v4 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      return 0;
    }
  }
  if (v4 < a2)
  {
    v2 += 8;
    goto LABEL_6;
  }
  uint64_t v6 = sub_15ADD0(a2);
  uint64_t v7 = (void *)(v6 + 24);
  uint64_t v8 = (uint64_t *)(v6 + 32);
  if (!a1) {
    uint64_t v8 = (uint64_t *)(v6 + 8);
  }
  uint64_t v9 = *v8;
  if (!a1) {
    uint64_t v7 = (void *)v6;
  }
  return v9 != *v7;
}

void sub_3CD68C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E3C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65E3C0))
  {
    int v0 = sub_207A20();
    sub_3CD70C(v0);
    __cxa_guard_release(&qword_65E3C0);
  }
}

void sub_3CD6F4(_Unwind_Exception *a1)
{
}

float sub_3CD70C(int a1)
{
  if (a1 > 2024)
  {
    if (a1 > 4013)
    {
      if ((a1 - 12002) < 2)
      {
        qword_65E368 = 0;
        qword_65E360 = 0;
        qword_65E358 = (uint64_t)&qword_65E360;
        *(_OWORD *)&qword_65E370 = xmmword_4E7BD0;
        qword_65E380 = 0;
        dword_65E388 = sub_3CD4D0();
        return sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
      }
      if ((a1 - 4014) <= 1)
      {
LABEL_3:
        qword_65E368 = 0;
        qword_65E360 = 0;
        qword_65E358 = (uint64_t)&qword_65E360;
        LODWORD(qword_65E370) = 0;
        if (sub_23AC0()) {
          int v1 = 4;
        }
        else {
          int v1 = 1;
        }
        HIDWORD(qword_65E370) = v1;
        *(_OWORD *)&qword_65E378 = xmmword_4E7C00;
        dword_65E388 = sub_3CD4D0();
        return sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
      }
    }
    else
    {
      if ((a1 - 2025) < 2)
      {
LABEL_18:
        sub_3CE700();
        return result;
      }
      if ((a1 - 2028) < 2)
      {
LABEL_14:
        int v4 = (char *)operator new(0x40uLL);
        qmemcpy(v4, "0Vps0Ips1Vps1Ips2Vps2Ips3Vps3Ips4Vps4Ips5Vps5Ips6Vps6Ips7Vps7Ips", 64);
        uint64_t v9 = v4;
        char v10 = v4 + 64;
        uint64_t v11 = v4 + 64;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        sub_3CE2A8((uint64_t)&v15, 1, (uint64_t)&v9);
        sub_3CE334(&v15, 1);
        LODWORD(qword_65E370) = 1;
        if (sub_23AC0()) {
          int v5 = 3;
        }
        else {
          int v5 = 2;
        }
        HIDWORD(qword_65E370) = v5;
        *(_OWORD *)&qword_65E378 = xmmword_4E7C10;
        dword_65E388 = 0;
        sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
LABEL_47:
        if (__p)
        {
          double v19 = __p;
          operator delete(__p);
        }
        if (v16)
        {
          int v17 = v16;
          operator delete(v16);
        }
        operator delete(v4);
        return result;
      }
      if (a1 == 2027)
      {
LABEL_43:
        int v4 = (char *)operator new(0x20uLL);
        qmemcpy(v4, "0Vps0Ips1Vps1Ips2Vps2Ips3Vps3Ips", 32);
        uint64_t v9 = v4;
        char v10 = v4 + 32;
        uint64_t v11 = v4 + 32;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        sub_3CE2A8((uint64_t)&v15, 1, (uint64_t)&v9);
        sub_3CE334(&v15, 1);
        LODWORD(qword_65E370) = 1;
        if (sub_23AC0()) {
          int v8 = 3;
        }
        else {
          int v8 = 2;
        }
        HIDWORD(qword_65E370) = v8;
        *(_OWORD *)&qword_65E378 = xmmword_4E7C00;
        dword_65E388 = sub_3CD4D0();
        sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
        goto LABEL_47;
      }
    }
LABEL_53:
    return sub_3CE9A8();
  }
  switch(a1)
  {
    case 9:
    case 10:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
    case 27:
    case 28:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 45:
    case 46:
    case 125:
    case 179:
    case 180:
      float v3 = operator new(0x10uLL);
      *float v3 = xmmword_4E7BF0;
      sub_3CE3B8(v3, (uint64_t)(v3 + 1));
      goto LABEL_8;
    case 26:
      float v3 = operator new(0x14uLL);
      qmemcpy(v3, "0Vps0Ips1Vps1Ips1DPs", 20);
      sub_3CE3B8(v3, (uint64_t)v3 + 20);
      goto LABEL_8;
    case 29:
    case 30:
    case 42:
    case 43:
      float v3 = operator new(0x30uLL);
      qmemcpy(v3, "0Vps0Ips02vs0res0fis0fvs1Vps1Ips12vs1res1fis1fvs", 48);
      sub_3CE3B8(v3, (uint64_t)(v3 + 3));
      goto LABEL_8;
    case 31:
      float v3 = operator new(0x14uLL);
      qmemcpy(v3, "0Vps0Ips1Vps1Ips0DPs", 20);
      sub_3CE3B8(v3, (uint64_t)v3 + 20);
LABEL_8:
      operator delete(v3);
      break;
    case 72:
    case 73:
    case 74:
    case 75:
      qword_65E368 = 0;
      qword_65E360 = 0;
      qword_65E358 = (uint64_t)&qword_65E360;
      *(_OWORD *)&qword_65E370 = xmmword_4E7C20;
      qword_65E380 = 0x100000000;
      dword_65E388 = sub_3CD4D0();
      float result = sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
      break;
    case 77:
    case 78:
    case 80:
    case 81:
    case 83:
    case 84:
    case 85:
    case 86:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 98:
    case 99:
      goto LABEL_18;
    case 87:
    case 88:
      sub_3CE850();
      break;
    case 96:
    case 97:
    case 100:
    case 101:
    case 104:
    case 105:
    case 106:
    case 107:
      goto LABEL_14;
    case 102:
    case 103:
      goto LABEL_43;
    case 134:
    case 135:
    case 138:
    case 139:
    case 140:
    case 141:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 182:
      goto LABEL_3;
    case 160:
    case 169:
      uint64_t v6 = (char *)operator new(8uLL);
      uint64_t v9 = v6;
      *(void *)uint64_t v6 = 0x7370493073705630;
      char v10 = v6 + 8;
      uint64_t v11 = v6 + 8;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      sub_3CE2A8((uint64_t)&v15, 1, (uint64_t)&v9);
      sub_3CE334(&v15, 1);
      LODWORD(qword_65E370) = 1;
      if (sub_23AC0()) {
        int v7 = 3;
      }
      else {
        int v7 = 2;
      }
      HIDWORD(qword_65E370) = v7;
      *(_OWORD *)&qword_65E378 = xmmword_4E7C10;
      dword_65E388 = sub_3CD4D0();
      sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
      if (__p)
      {
        double v19 = __p;
        operator delete(__p);
      }
      if (v16)
      {
        int v17 = v16;
        operator delete(v16);
      }
      sub_EEE2C((uint64_t)&v9);
      break;
    case 177:
    case 181:
    case 185:
      qword_65E368 = 0;
      qword_65E360 = 0;
      qword_65E358 = (uint64_t)&qword_65E360;
      *(_OWORD *)&qword_65E370 = xmmword_4E7C00;
      qword_65E380 = 0x100000000;
      dword_65E388 = sub_3CD4D0();
      float result = sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
      break;
    case 192:
      qword_65E368 = 0;
      qword_65E360 = 0;
      qword_65E358 = (uint64_t)&qword_65E360;
      *(_OWORD *)&qword_65E370 = xmmword_4E7BE0;
      qword_65E380 = 0;
      dword_65E388 = sub_3CD4D0();
      float result = sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
      break;
    case 193:
    case 194:
      sub_3CE65C();
      break;
    case 196:
      qword_65E368 = 0;
      qword_65E360 = 0;
      qword_65E358 = (uint64_t)&qword_65E360;
      *(_OWORD *)&qword_65E370 = xmmword_4E7C00;
      qword_65E380 = 0x100000000;
      dword_65E388 = sub_3CD4D0();
      float result = sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
      break;
    default:
      goto LABEL_53;
  }
  return result;
}

void sub_3CDEBC(_Unwind_Exception *a1)
{
}

uint64_t sub_3CE2A8(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_46B38((void *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_46B38((void *)(a1 + 32), *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
  return a1;
}

void sub_3CE318(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_3CE334(int *a1, uint64_t a2)
{
  qword_65E368 = 0;
  qword_65E360 = 0;
  qword_65E358 = (uint64_t)&qword_65E360;
  if (a2)
  {
    uint64_t v3 = 56 * a2;
    do
    {
      sub_36B9B0((uint64_t ***)&qword_65E358, (uint64_t **)&qword_65E360, *a1, (uint64_t)a1);
      a1 += 14;
      v3 -= 56;
    }
    while (v3);
  }
}

void sub_3CE3A0(_Unwind_Exception *a1)
{
}

void sub_3CE3B8(const void *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_46B38(&v11, a1, a2, (a2 - (uint64_t)a1) >> 2);
  uint64_t v2 = operator new(8uLL);
  long long __p = v2;
  void *v2 = 0x546F7053426F7453;
  int v15 = v2 + 1;
  __int16 v16 = v2 + 1;
  sub_3CE2A8((uint64_t)v17, 1, (uint64_t)&v11);
  uint64_t v3 = operator new(8uLL);
  *uint64_t v3 = 0x7370493073705630;
  v10[1] = v3 + 1;
  void v10[2] = v3 + 1;
  v10[0] = v3;
  int v4 = operator new(4uLL);
  _DWORD *v4 = 1114600531;
  v10[4] = v4 + 1;
  v10[5] = v4 + 1;
  void v10[3] = v4;
  sub_3CE2A8((uint64_t)v18, 0, (uint64_t)v10);
  sub_3CE334(v17, 2);
  LODWORD(qword_65E370) = 1;
  if (sub_23AC0()) {
    int v5 = 3;
  }
  else {
    int v5 = 2;
  }
  HIDWORD(qword_65E370) = v5;
  *(_OWORD *)&qword_65E378 = xmmword_4E7C30;
  dword_65E388 = sub_3CD4D0();
  sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
  for (uint64_t i = 0; i != -28; i -= 14)
  {
    int v7 = &v17[i];
    int v8 = *(void **)&v18[i * 4 + 32];
    if (v8)
    {
      *((void *)v7 + 12) = v8;
      operator delete(v8);
    }
    uint64_t v9 = (void *)*((void *)v7 + 8);
    if (v9)
    {
      *(void *)&v18[i * 4 + 16] = v9;
      operator delete(v9);
    }
  }
  operator delete(v4);
  operator delete(v3);
  if (__p)
  {
    int v15 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_3CE5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_36B95C((void *)qword_65E360);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_EEDE8(&a22 + i);
  sub_EEE2C((uint64_t)&a10);
  sub_EEE2C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_3CE65C()
{
  qword_65E368 = 0;
  qword_65E360 = 0;
  qword_65E358 = (uint64_t)&qword_65E360;
  *(_OWORD *)&qword_65E370 = xmmword_4E7C20;
  qword_65E380 = 0x100000000;
  dword_65E388 = sub_3CD4D0();
  sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
  dword_65E388 = 0;
  LODWORD(qword_65E370) = 1;
}

void sub_3CE6E4(_Unwind_Exception *a1)
{
}

void sub_3CE700()
{
  int v0 = operator new(0x10uLL);
  *int v0 = xmmword_4E7BF0;
  v2[0] = v0;
  v2[1] = v0 + 1;
  v2[2] = v0 + 1;
  memset(&v2[3], 0, 24);
  sub_3CE2A8((uint64_t)&v3, 0, (uint64_t)v2);
  sub_3CE334(&v3, 1);
  LODWORD(qword_65E370) = 0;
  if (sub_23AC0()) {
    int v1 = 3;
  }
  else {
    int v1 = 2;
  }
  HIDWORD(qword_65E370) = v1;
  *(_OWORD *)&qword_65E378 = xmmword_4E7C00;
  dword_65E388 = sub_3CD4D0();
  sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }
  if (v4)
  {
    int v5 = v4;
    operator delete(v4);
  }
  operator delete(v0);
}

void sub_3CE814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_3CE850()
{
  int v0 = (char *)operator new(0x20uLL);
  qmemcpy(v0, "1Vps1Ips3Vps3Ips5Vps5Ips7Vps7Ips", 32);
  v2[0] = v0;
  v2[1] = v0 + 32;
  v2[2] = v0 + 32;
  memset(&v2[3], 0, 24);
  sub_3CE2A8((uint64_t)&v3, 1, (uint64_t)v2);
  sub_3CE334(&v3, 1);
  LODWORD(qword_65E370) = 1;
  if (sub_23AC0()) {
    int v1 = 3;
  }
  else {
    int v1 = 2;
  }
  HIDWORD(qword_65E370) = v1;
  *(_OWORD *)&qword_65E378 = xmmword_4E7C10;
  dword_65E388 = sub_3CD4D0();
  sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }
  if (v4)
  {
    int v5 = v4;
    operator delete(v4);
  }
  operator delete(v0);
}

void sub_3CE96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

float sub_3CE9A8()
{
  qword_65E368 = 0;
  qword_65E360 = 0;
  qword_65E358 = (uint64_t)&qword_65E360;
  qword_65E370 = 0x100000000;
  qword_65E378 = 0;
  qword_65E380 = 0;
  dword_65E388 = sub_3CD4D0();
  return sub_16FEBC((uint64_t)&dword_65E390, 6u, -58.0, 0.0);
}

void sub_3CEA14(_Unwind_Exception *a1)
{
}

uint64_t sub_3CEA30(const __CFString **a1)
{
  sub_3A1854(a1[3]);
  uint64_t v2 = (os_log_t *)sub_32A48(5);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = a1[3];
    int v15 = 136315650;
    __int16 v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 444;
    __int16 v19 = 2112;
    CFStringRef v20 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }
  sub_3A1854(a1[4]);
  int v5 = (os_log_t *)sub_32A48(5);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = a1[4];
    int v15 = 136315650;
    __int16 v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 446;
    __int16 v19 = 2112;
    CFStringRef v20 = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }
  sub_3A1854(a1[5]);
  int v8 = (os_log_t *)sub_32A48(5);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v10 = a1[5];
    int v15 = 136315650;
    __int16 v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 448;
    __int16 v19 = 2112;
    CFStringRef v20 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }
  sub_3A1854(a1[6]);
  uint64_t v11 = (os_log_t *)sub_32A48(5);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v13 = a1[6];
    int v15 = 136315650;
    __int16 v16 = "HP_PreferredChannels.cpp";
    __int16 v17 = 1024;
    int v18 = 450;
    __int16 v19 = 2112;
    CFStringRef v20 = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleared default %@.", (uint8_t *)&v15, 0x1Cu);
  }
  uint64_t result = CFPreferencesSynchronize(kCFPreferencesAnyApplication, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  byte_65D990 = 0;
  return result;
}

double sub_3CECC4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 2) {
    *(_DWORD *)a3 = dword_596528[a2];
  }
  double result = NAN;
  *(void *)(a3 + 4) = -3587560918;
  return result;
}

uint64_t sub_3CECEC()
{
  return 3;
}

void *sub_3CECF4(void *result, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  int v8 = result;
  int v9 = a2[1];
  uint64_t v10 = result[1];
  uint64_t v11 = v10 + 496;
  uint64_t v12 = 520;
  if (v9 == 1768845428) {
    uint64_t v12 = 496;
  }
  else {
    uint64_t v11 = v10 + 520;
  }
  CFStringRef v13 = *(uint64_t **)(v10 + v12);
  uint64_t v14 = *(uint64_t **)(v11 + 8);
  if (v13 == v14)
  {
    unsigned int v15 = 0;
  }
  else
  {
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = *v13++;
      v15 += *(_DWORD *)(*(void *)(v16 + 104) + 44);
    }
    while (v13 != v14);
  }
  if (*a2 == 1936879204)
  {
    if ((*(unsigned int (**)(void *, _DWORD *))(*result + 32))(result, a2) != a5)
    {
      __int16 v48 = (os_log_t *)sub_32A48(13);
      uint64_t v49 = *v48;
      if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v60 = 1024;
        int v61 = 401;
        _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyPreferredChannelLayout\"", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    __int16 v52 = 257;
    sub_1D4AF4((uint64_t)&Mutable, @"channel layout tag", *a6);
    sub_1D4AF4((uint64_t)&Mutable, @"channel bitmap", a6[1]);
    sub_1D4AF4((uint64_t)&Mutable, @"number channels", a6[2]);
    if (!*a6)
    {
      CFMutableArrayRef v30 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
      if (v30)
      {
        if (a6[2])
        {
          unint64_t v31 = 0;
          uint64_t v32 = a6 + 5;
          do
          {
            CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            __int16 v57 = 257;
            if (theDict)
            {
              sub_1D4AF4((uint64_t)&theDict, @"channel label", a6[5 * v31 + 3]);
              sub_1D4AF4((uint64_t)&theDict, @"channel flags", a6[5 * v31 + 4]);
              float v33 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
              CFMutableArrayRef theArray = v33;
              __int16 v55 = 257;
              if (v33)
              {
                for (uint64_t i = 0; i != 3; ++i)
                {
                  if (v33 && HIBYTE(v55))
                  {
                    int valuePtr = v32[i];
                    CFNumberRef v35 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
                    *(void *)int buf = v35;
                    _DWORD buf[8] = 1;
                    if (v35 && theArray && HIBYTE(v55)) {
                      CFArrayAppendValue(theArray, v35);
                    }
                    sub_45260((uint64_t)buf);
                  }
                  float v33 = theArray;
                }
                if (HIBYTE(v57) && theArray && theDict) {
                  CFDictionarySetValue(theDict, @"coordinates", theArray);
                }
              }
              if (__p.__r_.__value_.__r.__words[0] && __p.__r_.__value_.__s.__data_[9]) {
                CFArrayAppendValue((CFMutableArrayRef)__p.__r_.__value_.__l.__data_, theDict);
              }
              sub_3D61C((uint64_t)&theArray);
            }
            sub_80594((uint64_t)&theDict);
            ++v31;
            v32 += 5;
          }
          while (v31 < a6[2]);
          CFMutableArrayRef v30 = (CFMutableArrayRef)__p.__r_.__value_.__r.__words[0];
        }
        if (HIBYTE(v52) && v30 && Mutable) {
          CFDictionarySetValue(Mutable, @"channel descriptions", v30);
        }
      }
      sub_3D61C((uint64_t)&__p);
    }
    uint64_t v36 = 6;
    if (v9 == 1768845428) {
      uint64_t v36 = 5;
    }
    CFStringRef v37 = (const __CFString *)v8[v36];
    sub_3A17E4(v37, Mutable);
    int v38 = (os_log_t *)sub_32A48(5);
    char v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
    {
      sub_168E34(&__p, Mutable);
      double v40 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
      __int16 v60 = 1024;
      int v61 = 414;
      __int16 v62 = 2112;
      CFStringRef v63 = v37;
      __int16 v64 = 2080;
      uint64_t v65 = v40;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set default %@: %s.", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (v9 == 1768845428) {
      uint64_t v41 = 10;
    }
    else {
      uint64_t v41 = 11;
    }
    int v42 = (const void *)v8[v41];
    __int16 v43 = sub_3A16FC(v37);
    if (v42) {
      CFRelease(v42);
    }
    v8[v41] = v43;
    (*(void (**)(void, uint64_t, _DWORD *, uint64_t))(*(void *)v8[1] + 72))(v8[1], 1, a2, 1);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotificationWithOptions(DarwinNotifyCenter, v37, 0, 0, 0);
    return (void *)sub_80594((uint64_t)&Mutable);
  }
  else if (*a2 == 1684236338)
  {
    if ((*(unsigned int (**)(void *, _DWORD *))(*result + 32))(result, a2) != a5)
    {
      int v45 = (os_log_t *)sub_32A48(13);
      __int16 v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v60 = 1024;
        int v61 = 359;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyPreferredChannelsForStereo\"", buf, 0x12u);
      }
      int v47 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v47 = &off_6414D8;
      v47[2] = 561211770;
    }
    CFMutableDictionaryRef theDict = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    __int16 v57 = 257;
    unsigned int v17 = *a6;
    if (*a6 <= 1) {
      unsigned int v17 = 1;
    }
    if (v15 >= v17) {
      int v18 = v17;
    }
    else {
      int v18 = v15;
    }
    sub_451D0((uint64_t)&theDict, v18);
    unsigned int v19 = a6[1];
    if (v19 <= 1) {
      unsigned int v19 = 1;
    }
    if (v15 >= v19) {
      int v20 = v19;
    }
    else {
      int v20 = v15;
    }
    sub_451D0((uint64_t)&theDict, v20);
    uint64_t v21 = 4;
    if (v9 == 1768845428) {
      uint64_t v21 = 3;
    }
    CFStringRef v22 = (const __CFString *)v8[v21];
    sub_3A17E4(v22, theDict);
    CFNumberRef v23 = (os_log_t *)sub_32A48(5);
    float v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
    {
      sub_168B00(&__p, theDict);
      unsigned int v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
      __int16 v60 = 1024;
      int v61 = 375;
      __int16 v62 = 2112;
      CFStringRef v63 = v22;
      __int16 v64 = 2080;
      uint64_t v65 = v25;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set default %@: %s.", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (v9 == 1768845428) {
      uint64_t v26 = 7;
    }
    else {
      uint64_t v26 = 8;
    }
    double v27 = (const void *)v8[v26];
    BOOL v28 = sub_3A1614(v22);
    if (v27) {
      CFRelease(v27);
    }
    v8[v26] = v28;
    (*(void (**)(void, uint64_t, _DWORD *, uint64_t))(*(void *)v8[1] + 72))(v8[1], 1, a2, 1);
    __int16 v29 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotificationWithOptions(v29, v22, 0, 0, 0);
    return (void *)sub_3D61C((uint64_t)&theDict);
  }
  return result;
}

void sub_3CF51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_3CF5B4(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int *a5, unsigned int *a6)
{
  uint64_t v7 = result;
  int v8 = *a2;
  int v9 = a2[1];
  if (*a2 == 1936879204)
  {
    int v14 = *a5;
    if (v14 != (*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result))
    {
      double v27 = (os_log_t *)sub_32A48(13);
      BOOL v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v44 = 1024;
        int v45 = 323;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyPreferredChannelLayout\"", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    if (v9 == 1768845428) {
      uint64_t v15 = 80;
    }
    else {
      uint64_t v15 = 88;
    }
    (*(void (**)(void, BOOL, unsigned int *))(**(void **)(v7 + 8) + 216))(*(void *)(v7 + 8), v9 == 1768845428, a6);
    CFDictionaryRef v16 = *(const __CFDictionary **)(v7 + v15);
    CFDictionaryRef v33 = v16;
    __int16 v34 = 0;
    if (v16)
    {
      sub_1D4800(v16, @"channel layout tag", a6);
      sub_1D4800(v33, @"channel bitmap", a6 + 1);
      int v42 = 0;
      sub_1D4800(v33, @"number channels", &v42);
      if (!*a6)
      {
        CFArrayRef theArray = 0;
        if (sub_1D48CC(v33, @"channel descriptions", &theArray))
        {
          *(void *)int buf = theArray;
          *(_WORD *)&_DWORD buf[8] = 0;
          if (theArray)
          {
            unint64_t Count = CFArrayGetCount(theArray);
            if (Count)
            {
              if (a6[2])
              {
                unint64_t v18 = 0;
                unsigned int v19 = a6 + 5;
                do
                {
                  CFDictionaryRef v40 = 0;
                  if (sub_1D1C44((CFArrayRef *)buf, v18, &v40))
                  {
                    CFDictionaryRef v38 = v40;
                    __int16 v39 = 0;
                    sub_1D4800(v40, @"channel label", &a6[5 * v18 + 3]);
                    sub_1D4800(v38, @"channel flags", &a6[5 * v18 + 4]);
                    CFArrayRef v37 = 0;
                    if (sub_1D48CC(v38, @"coordinates", &v37))
                    {
                      unsigned int v20 = v37;
                      CFArrayRef v35 = v37;
                      __int16 v36 = 0;
                      if (v37) {
                        unsigned int v20 = CFArrayGetCount(v37);
                      }
                      if (v20 >= 3) {
                        uint64_t v21 = 3;
                      }
                      else {
                        uint64_t v21 = v20;
                      }
                      if (v21)
                      {
                        uint64_t v22 = 0;
                        CFNumberRef v23 = v19;
                        do
                          sub_1D1BB4(&v35, v22++, v23++);
                        while (v21 != v22);
                      }
                      sub_3D61C((uint64_t)&v35);
                    }
                    sub_80594((uint64_t)&v38);
                  }
                  if (++v18 >= Count) {
                    break;
                  }
                  v19 += 5;
                }
                while (v18 < a6[2]);
              }
            }
          }
          sub_3D61C((uint64_t)buf);
        }
      }
    }
    return sub_80594((uint64_t)&v33);
  }
  else if (v8 == 1936876644)
  {
    int v12 = *a5;
    if (v12 != (*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result))
    {
      float v24 = (os_log_t *)sub_32A48(13);
      unsigned int v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v44 = 1024;
        int v45 = 340;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for 'srdd'\"", buf, 0x12u);
      }
      uint64_t v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v26 = &off_6414D8;
      void v26[2] = 561211770;
    }
    CFStringRef v13 = *(uint64_t (**)(void))(**(void **)(v7 + 8) + 216);
    return v13();
  }
  else if (v8 == 1684236338)
  {
    int v10 = *a5;
    if (v10 != (*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result))
    {
      CFMutableArrayRef v30 = (os_log_t *)sub_32A48(13);
      unint64_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        __int16 v44 = 1024;
        int v45 = 297;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyPreferredChannelsForStereo\"", buf, 0x12u);
      }
      uint64_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v32 = &off_6414D8;
      v32[2] = 561211770;
    }
    *(void *)a6 = 0x200000001;
    uint64_t v11 = 64;
    if (v9 == 1768845428) {
      uint64_t v11 = 56;
    }
    *(void *)int buf = *(void *)(v7 + v11);
    *(_WORD *)&_DWORD buf[8] = 0;
    if (*(void *)buf)
    {
      sub_1D1B30((CFArrayRef *)buf, 0, a6);
      sub_1D1B30((CFArrayRef *)buf, 1u, a6 + 1);
    }
    if (v9 != 1768845428) {
      *(void *)(v7 + 72) = *(void *)a6;
    }
    return sub_3D61C((uint64_t)buf);
  }
  return result;
}

void sub_3CFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t sub_3CFC70(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1936879204)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = v4 + 496;
    uint64_t v6 = 520;
    if (a2[1] == 1768845428) {
      uint64_t v6 = 496;
    }
    else {
      uint64_t v5 = v4 + 520;
    }
    uint64_t v7 = *(uint64_t **)(v4 + v6);
    int v8 = *(uint64_t **)(v5 + 8);
    if (v7 != v8)
    {
      unsigned int v9 = 0;
      do
      {
        uint64_t v10 = *v7++;
        v9 += *(_DWORD *)(*(void *)(v10 + 104) + 44);
      }
      while (v7 != v8);
      goto LABEL_22;
    }
  }
  else
  {
    if (v2 != 1936876644)
    {
      if (v2 == 1684236338) {
        return 8;
      }
      else {
        return 0;
      }
    }
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = v11 + 496;
    uint64_t v13 = 520;
    if (a2[1] == 1768845428) {
      uint64_t v13 = 496;
    }
    else {
      uint64_t v12 = v11 + 520;
    }
    int v14 = *(uint64_t **)(v11 + v13);
    uint64_t v15 = *(uint64_t **)(v12 + 8);
    if (v14 != v15)
    {
      unsigned int v9 = 0;
      do
      {
        uint64_t v16 = *v14++;
        v9 += *(_DWORD *)(*(void *)(v16 + 104) + 44);
      }
      while (v14 != v15);
      goto LABEL_22;
    }
  }
  unsigned int v9 = 0;
LABEL_22:
  int v17 = sub_A313C(v9);

  return sub_A31B4(v17);
}

BOOL sub_3CFD94(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1684236338 || *a2 == 1936879204;
}

uint64_t sub_3CFDB8(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1936879204 || v2 == 1936876644)
  {
    int v10 = a2[1];
    if (v10 == 1869968496)
    {
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v12 = *(void *)(v13 + 528);
      uint64_t v11 = *(void *)(v13 + 520);
    }
    else
    {
      if (v10 != 1768845428) {
        return 0;
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 496);
      uint64_t v12 = *(void *)(*(void *)(a1 + 8) + 504);
    }
    return ((v12 - v11) & 0x7FFFFFFF8) != 0;
  }
  if (v2 != 1684236338) {
    return 0;
  }
  int v3 = a2[1];
  if (v3 != 1869968496)
  {
    if (v3 == 1768845428)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(uint64_t **)(v4 + 496);
      uint64_t v6 = *(uint64_t **)(v4 + 504);
      if (v5 != v6)
      {
        unsigned int v7 = 0;
        do
        {
          uint64_t v8 = *v5++;
          v7 += *(_DWORD *)(*(void *)(v8 + 104) + 44);
        }
        while (v5 != v6);
        if (v7 > 1) {
          return 1;
        }
      }
    }
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(uint64_t **)(v14 + 520);
  uint64_t v16 = *(uint64_t **)(v14 + 528);
  if (v15 == v16) {
    return 0;
  }
  unsigned int v17 = 0;
  do
  {
    uint64_t v18 = *v15++;
    v17 += *(_DWORD *)(*(void *)(v18 + 104) + 44);
  }
  while (v15 != v16);
  return v17 > 1;
}

void sub_3CFEEC(uint64_t a1)
{
  sub_3CFF24(a1);

  operator delete();
}

uint64_t sub_3CFF24(uint64_t a1)
{
  *(void *)a1 = off_63AC60;
  int v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 88);
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 24));
  sub_3D00BC();
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  unsigned int v17 = &qword_65E3E8;
  char v18 = (*(uint64_t (**)(uint64_t *))(qword_65E3E8 + 16))(&qword_65E3E8);
  if (qword_65E3D0)
  {
    unsigned int v7 = &qword_65E3D0;
    uint64_t v8 = qword_65E3D0;
    do
    {
      unsigned int v9 = *(_DWORD *)(v8 + 32);
      BOOL v10 = v9 >= v6;
      if (v9 >= v6) {
        uint64_t v11 = (uint64_t *)v8;
      }
      else {
        uint64_t v11 = (uint64_t *)(v8 + 8);
      }
      if (v10) {
        unsigned int v7 = (uint64_t *)v8;
      }
      uint64_t v8 = *v11;
    }
    while (*v11);
    if (v7 != &qword_65E3D0 && *((_DWORD *)v7 + 8) <= v6)
    {
      uint64_t v12 = (uint64_t *)v7[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        uint64_t v14 = v7;
        do
        {
          uint64_t v13 = (uint64_t *)v14[2];
          BOOL v15 = *v13 == (void)v14;
          uint64_t v14 = v13;
        }
        while (!v15);
      }
      if ((uint64_t *)qword_65E3C8 == v7) {
        qword_65E3C8 = (uint64_t)v13;
      }
      --qword_65E3D8;
      sub_89144((uint64_t *)qword_65E3D0, v7);
      operator delete(v7);
    }
  }
  sub_3BCAC(&v17);
  return a1;
}

void sub_3D00BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65E440, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65E440))
  {
    sub_3D0138();
    __cxa_guard_release(&qword_65E440);
  }
}

void sub_3D0120(_Unwind_Exception *a1)
{
}

uint64_t sub_3D0138()
{
  qword_65E3D8 = 0;
  qword_65E3D0 = 0;
  qword_65E3C8 = (uint64_t)&qword_65E3D0;
  dword_65E3E0 = 256;
  return sub_AEF58((uint64_t)&qword_65E3E8, (uint64_t)"CATokenMap Mutex");
}

void sub_3D0184(_Unwind_Exception *a1)
{
}

void sub_3D01A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t **)(*(void *)a2 + 24);
  uint64_t v106 = v5 + 2;
  sub_43F38(&v121, v5 + 2, "", 124);
  uint64_t v6 = v121;
  unsigned int v7 = *(_DWORD *)(v121 + 144);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v120 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v8 = (void *)sub_F820C();
  *(void *)theString1 = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
  theString1[8] = 1;
  v108 = (os_unfair_lock_s *)sub_F832C(v8, (CFStringRef *)theString1);
  sub_72924((uint64_t)theString1);
  unsigned int v9 = *(os_unfair_lock_s **)(v6 + 192);
  int v107 = *(_DWORD *)(a2 + 12);
  (*(void (**)(unsigned char *__return_ptr, os_unfair_lock_s *))(*(void *)&v9->_os_unfair_lock_opaque + 128))(theString1, v9);
  CFComparisonResult v10 = CFStringCompare(*(CFStringRef *)theString1, @"Codec", 0);
  sub_72924((uint64_t)theString1);
  (*(void (**)(unsigned char *__return_ptr, os_unfair_lock_s *))(*(void *)&v9->_os_unfair_lock_opaque + 128))(theString1, v9);
  uint64_t v109 = (uint64_t)v9;
  CFComparisonResult v11 = CFStringCompare(*(CFStringRef *)theString1, @"HPMic", 0);
  sub_72924((uint64_t)theString1);
  if (v10 && v11)
  {
    uint64_t v12 = (uint64_t)v9;
    sub_1EE03C((uint64_t)theString1, (uint64_t)v9, v6, a2, v5[9], *(_DWORD *)(a2 + 12));
    *(_OWORD *)std::string __p = *(_OWORD *)theString1;
    uint64_t v120 = *(void *)&theString1[16];
    sub_1F3044((unsigned int **)__p, v106, v9);
    uint64_t v13 = v9;
    goto LABEL_179;
  }
  if (v107 != 1986556788 && v107 != 1987211117 && v107 != 1987208039 || !v108 || v7 != 1886216809)
  {
    uint64_t v12 = (uint64_t)v9;
    sub_1EE03C((uint64_t)theString1, (uint64_t)v9, v6, a2, v5[9], *(_DWORD *)(a2 + 12));
    *(_OWORD *)std::string __p = *(_OWORD *)theString1;
    uint64_t v120 = *(void *)&theString1[16];
    v171.__m_.__uint64_t sig = 0;
    *(void *)v171.__m_.__opaque = 0;
    char v18 = (std::__shared_weak_count *)v5[3];
    if (v18)
    {
      unsigned int v19 = std::__shared_weak_count::lock(v18);
      unsigned int v20 = v19;
      if (v19)
      {
        uint64_t v21 = *v106;
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v171.__m_.__uint64_t sig = v21;
        *(void *)v171.__m_.__opaque = v19;
        sub_4636C(v19);
      }
      else
      {
        v171.__m_.__uint64_t sig = 0;
        *(void *)v171.__m_.__opaque = 0;
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
    sub_1F4188((uint64_t)theString1, (uint64_t)__p, &v171.__m_.__sig);
    sub_6720C((char *)&v116, *(char **)theString1, *(uint64_t *)&theString1[8], (uint64_t)(*(void *)&theString1[8] - *(void *)theString1) >> 2);
    if (*(void *)theString1)
    {
      *(void *)&theString1[8] = *(void *)theString1;
      operator delete(*(void **)theString1);
    }
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
    if (v10 == kCFCompareEqualTo && v9[171]._os_unfair_lock_opaque < (unint64_t)((v117 - (uint64_t)v116) >> 2))
    {
      uint64_t v88 = (os_log_t *)sub_32A48(13);
      uint64_t v89 = *v88;
      if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)theString1 = 136315394;
        *(void *)&theString1[4] = "RoutingHandler_Record_N51.cpp";
        *(_WORD *)&theString1[12] = 1024;
        *(_DWORD *)&theString1[14] = 212;
        _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"could not get input device\"", theString1, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 2003329396;
    }
    sub_1F3044((unsigned int **)__p, v106, v9);
    uint64_t v13 = v9;
LABEL_179:
    sub_1EE408(v13, 0, *(_DWORD *)(a2 + 12), v5[9]);
    if (*(_DWORD *)(v121 + 264) == 2004367664) {
      sub_1F2870(*(_DWORD *)(a2 + 12), (uint64_t)v13);
    }
    sub_85F24();
    if (byte_64A0E0)
    {
      BOOL v82 = (unsigned __int16)sub_376E5C(*(void *)(a2 + 104), *(_DWORD *)(a2 + 12), v7) > 0x100u;
      sub_1F28E8(v82, v12);
    }
    sub_1F2704(*(_DWORD *)(a2 + 12));
    operator new();
  }
  sub_1EE03C((uint64_t)theString1, (uint64_t)v9, v6, a2, v5[9], *(_DWORD *)(a2 + 12));
  *(_OWORD *)std::string __p = *(_OWORD *)theString1;
  uint64_t v120 = *(void *)&theString1[16];
  v171.__m_.__uint64_t sig = 0;
  *(void *)v171.__m_.__opaque = 0;
  uint64_t v14 = (std::__shared_weak_count *)v5[3];
  if (v14)
  {
    BOOL v15 = std::__shared_weak_count::lock(v14);
    uint64_t v16 = v15;
    if (v15)
    {
      uint64_t v17 = *v106;
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v171.__m_.__uint64_t sig = v17;
      *(void *)v171.__m_.__opaque = v15;
      sub_4636C(v15);
    }
    else
    {
      v171.__m_.__uint64_t sig = 0;
      *(void *)v171.__m_.__opaque = 0;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  sub_1F4188((uint64_t)theString1, (uint64_t)__p, &v171.__m_.__sig);
  unsigned int v113 = 0;
  int v114 = 0;
  uint64_t v115 = 0;
  sub_46B38(&v113, *(const void **)theString1, *(uint64_t *)&theString1[8], (uint64_t)(*(void *)&theString1[8] - *(void *)theString1) >> 2);
  if (*(void *)theString1)
  {
    *(void *)&theString1[8] = *(void *)theString1;
    operator delete(*(void **)theString1);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v10) {
    goto LABEL_161;
  }
  uint64_t v22 = v114;
  unsigned int inData = v113;
  if (v113 == v114) {
    goto LABEL_151;
  }
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707450445073;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&v9->_os_unfair_lock_opaque
                                                                                         + 16))(v9, &inAddress)|| !(*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&v9->_os_unfair_lock_opaque+ 24))(v9, &inAddress))
  {
    goto LABEL_151;
  }
  AudioObjectID inObjectID = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v9->_os_unfair_lock_opaque + 120))(v9);
  uint64_t v23 = sub_32A48(13);
  if (*(unsigned char *)(v23 + 8))
  {
    float v24 = *(NSObject **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        v170.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v170.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v171, (unsigned int *)&v170);
        unsigned int v25 = v171.__m_.__opaque[15] >= 0 ? &v171 : (std::mutex *)v171.__m_.__sig;
        *(_DWORD *)theString1 = 136315906;
        *(void *)&theString1[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&theString1[12] = 1024;
        *(_DWORD *)&theString1[14] = 166;
        *(_WORD *)&theString1[18] = 2080;
        *(void *)&theString1[20] = v25;
        *(_WORD *)&theString1[28] = 1024;
        *(_DWORD *)&theString1[30] = inObjectID;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", theString1, 0x22u);
        if (v171.__m_.__opaque[15] < 0) {
          operator delete((void *)v171.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress v161 = inAddress;
  AudioObjectID v160 = inObjectID;
  int v162 = 0;
  uint64_t v163 = 0;
  sub_1F5B44((uint64_t)&v171, (uint64_t)&v160);
  if (*(_DWORD *)&v171.__m_.__opaque[16]) {
    goto LABEL_43;
  }
  int v158 = 0;
  __s1 = 0;
  uint64_t v159 = 0;
  sub_46B38(&__s1, (const void *)v171.__m_.__sig, *(uint64_t *)v171.__m_.__opaque, (*(void *)v171.__m_.__opaque - v171.__m_.__sig) >> 2);
  v155 = 0;
  long long __s2 = 0;
  uint64_t v156 = 0;
  sub_46B38(&__s2, inData, (uint64_t)v22, (v22 - (unsigned char *)inData) >> 2);
  CFArrayRef v37 = __s1;
  CFDictionaryRef v38 = __s2;
  BOOL v39 = v158 - (unsigned char *)__s1 == v155 - (unsigned char *)__s2 && memcmp(__s1, __s2, v158 - (unsigned char *)__s1) == 0;
  if (v38)
  {
    v155 = v38;
    operator delete(v38);
  }
  if (v37)
  {
    int v158 = v37;
    operator delete(v37);
    if (v39)
    {
LABEL_73:
      uint64_t v41 = sub_32A48(13);
      if (*(unsigned char *)(v41 + 8))
      {
        CFDictionaryRef v40 = *(NSObject **)v41;
        if (!*(void *)v41) {
          goto LABEL_78;
        }
        if (os_log_type_enabled(*(os_log_t *)v41, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)theString1 = 136315650;
          *(void *)&theString1[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&theString1[12] = 1024;
          *(_DWORD *)&theString1[14] = 191;
          *(_WORD *)&theString1[18] = 1024;
          *(_DWORD *)&theString1[20] = inObjectID;
          _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", theString1, 0x18u);
        }
      }
LABEL_77:
      LOBYTE(v40) = 0;
LABEL_78:
      if (v171.__m_.__sig) {
        operator delete((void *)v171.__m_.__sig);
      }
      if (v40)
      {
        sub_1F5B44((uint64_t)&v151, (uint64_t)&v160);
        if (v153)
        {
LABEL_82:
          memset(v171.__m_.__opaque, 0, sizeof(v171.__m_.__opaque));
          v171.__m_.__uint64_t sig = 850045863;
          memset(v170.__cv_.__opaque, 0, sizeof(v170.__cv_.__opaque));
          v170.__cv_.__uint64_t sig = 1018212795;
          char v144 = 0;
          sub_662FC(&valuePtr, inObjectID, &inAddress, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v144);
          uint64_t v102 = 2000;
          while (1)
          {
            sub_1F5B44((uint64_t)&v138, (uint64_t)&v160);
            int v42 = v138;
            if (!v141)
            {
              v135 = 0;
              uint64_t v136 = 0;
              uint64_t v137 = 0;
              uint64_t v44 = v139;
              unint64_t v45 = (v139 - (uint64_t)v138) >> 2;
              sub_46B38(&v135, v138, v139, v45);
              __int16 v46 = v42;
              uint64_t v132 = 0;
              int v133 = 0;
              uint64_t v134 = 0;
              sub_46B38(&v132, inData, (uint64_t)v114, (v114 - (unsigned char *)inData) >> 2);
              uint64_t v47 = a3;
              __int16 v48 = v135;
              uint64_t v49 = v132;
              BOOL v50 = v136 - v135 == v133 - v132 && memcmp(v135, v132, v136 - v135) == 0;
              if (v49)
              {
                int v133 = v49;
                operator delete(v49);
              }
              if (v48)
              {
                uint64_t v136 = v48;
                operator delete(v48);
              }
              int v42 = v46;
              if (v50)
              {
                int v43 = 12;
                a3 = v47;
                goto LABEL_103;
              }
              if (v102 > 0)
              {
                v51.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                uint64_t v52 = sub_32A48(13);
                if (*(unsigned char *)(v52 + 8))
                {
                  double v53 = *(NSObject **)v52;
                  if (*(void *)v52)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v52, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)theString1 = 136315906;
                      *(void *)&theString1[4] = "HALPropertySynchronizer.h";
                      *(_WORD *)&theString1[12] = 1024;
                      *(_DWORD *)&theString1[14] = 257;
                      *(_WORD *)&theString1[18] = 2080;
                      *(void *)&theString1[20] = "with timeout";
                      *(_WORD *)&theString1[28] = 1024;
                      *(_DWORD *)&theString1[30] = inObjectID;
                      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", theString1, 0x22u);
                    }
                  }
                }
                sub_3B7EC();
                a3 = v47;
                *(void *)theString1 = &qword_64CC40;
                theString1[8] = 0;
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v51.__d_.__rep_;
                theString1[8] = sub_1D4024();
                __lk.__m_ = &v171;
                __lk.__owns_ = 1;
                std::mutex::lock(&v171);
                v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                if (v144)
                {
LABEL_100:
                  if (__lk.__owns_) {
                    std::mutex::unlock(__lk.__m_);
                  }
                  sub_66410((uint64_t)theString1);
                  int v43 = 0;
                  v102 += (std::chrono::system_clock::now().__d_.__rep_ - rep) / -1000;
                  goto LABEL_103;
                }
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v63 = v55.__d_.__rep_ + 1000000 * v102;
                while (2)
                {
                  if (v63 <= std::chrono::steady_clock::now().__d_.__rep_) {
                    goto LABEL_100;
                  }
                  v64.__d_.__rep_ = v63 - std::chrono::steady_clock::now().__d_.__rep_;
                  if (v64.__d_.__rep_ >= 1)
                  {
                    std::chrono::steady_clock::now();
                    v65.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                    if (!v65.__d_.__rep_)
                    {
                      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v66 = 0;
                      goto LABEL_125;
                    }
                    if (v65.__d_.__rep_ < 1)
                    {
                      if ((unint64_t)v65.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
                        goto LABEL_124;
                      }
                      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v66 = 0x8000000000000000;
                    }
                    else
                    {
                      if ((unint64_t)v65.__d_.__rep_ > 0x20C49BA5E353F7)
                      {
                        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v66 = 0x7FFFFFFFFFFFFFFFLL;
                        goto LABEL_125;
                      }
LABEL_124:
                      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v66 = 1000 * v65.__d_.__rep_;
LABEL_125:
                      if (v66 > (v64.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                      {
                        v67.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                        goto LABEL_128;
                      }
                    }
                    v67.__d_.__rep_ = v66 + v64.__d_.__rep_;
LABEL_128:
                    std::condition_variable::__do_timed_wait(&v170, &__lk, v67);
                    std::chrono::steady_clock::now();
                  }
                  if (std::chrono::steady_clock::now().__d_.__rep_ >= v63 || v144) {
                    goto LABEL_100;
                  }
                  continue;
                }
              }
              __int16 v56 = (os_log_t *)sub_32A48(13);
              os_log_t v57 = *v56;
              a3 = v47;
              if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
              {
                AudioObjectPropertyAddress v129 = inAddress;
                sub_16C9C4((uint64_t)&__lk, &v129.mSelector);
                if (v131 >= 0) {
                  p_luint64_t k = &__lk;
                }
                else {
                  p_luint64_t k = __lk.__m_;
                }
                int v127 = 0;
                uint64_t v128 = 0;
                uint64_t v126 = 0;
                sub_46B38(&v126, v46, v44, v45);
                __int16 v59 = v57;
                uint64_t v123 = 0;
                uint64_t v124 = 0;
                uint64_t v125 = 0;
                sub_46B38(&v123, inData, (uint64_t)v114, (v114 - (unsigned char *)inData) >> 2);
                __int16 v60 = v126;
                int v61 = v123;
                BOOL v62 = v127 - v126 == v124 - v123 && memcmp(v126, v123, v127 - v126) == 0;
                *(_DWORD *)theString1 = 136316930;
                *(void *)&theString1[4] = "HALPropertySynchronizer.h";
                *(_WORD *)&theString1[12] = 1024;
                *(_DWORD *)&theString1[14] = 248;
                *(_WORD *)&theString1[18] = 2080;
                *(void *)&theString1[20] = "set";
                *(_WORD *)&theString1[28] = 2080;
                *(void *)&theString1[30] = p_lk;
                *(_WORD *)&theString1[38] = 2080;
                *(void *)&theString1[40] = "set";
                *(_WORD *)&theString1[48] = 1024;
                BOOL v165 = v62;
                __int16 v166 = 1024;
                int v167 = 0;
                __int16 v168 = 1024;
                AudioObjectID v169 = inObjectID;
                _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", theString1, 0x42u);
                if (v61)
                {
                  uint64_t v124 = v61;
                  operator delete(v61);
                }
                a3 = v47;
                if (v60)
                {
                  int v127 = v60;
                  operator delete(v60);
                }
                if (v131 < 0) {
                  operator delete(__lk.__m_);
                }
              }
            }
            int v43 = 1;
LABEL_103:
            if (v42) {
              operator delete(v42);
            }
            if (v43)
            {
              if (v43 == 12)
              {
                uint64_t v68 = sub_32A48(13);
                if (*(unsigned char *)(v68 + 8))
                {
                  long long v69 = *(NSObject **)v68;
                  if (*(void *)v68)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v68, OS_LOG_TYPE_DEBUG))
                    {
                      __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
                      *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
                      sub_16C9C4((uint64_t)&v138, (unsigned int *)&__lk);
                      uint64_t v70 = v140 >= 0 ? &v138 : (void **)v138;
                      *(_DWORD *)theString1 = 136315906;
                      *(void *)&theString1[4] = "HALPropertySynchronizer.h";
                      *(_WORD *)&theString1[12] = 1024;
                      *(_DWORD *)&theString1[14] = 288;
                      *(_WORD *)&theString1[18] = 2080;
                      *(void *)&theString1[20] = v70;
                      *(_WORD *)&theString1[28] = 1024;
                      *(_DWORD *)&theString1[30] = inObjectID;
                      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", theString1, 0x22u);
                      if (v140 < 0) {
                        operator delete(v138);
                      }
                    }
                  }
                }
              }
              sub_6651C((uint64_t)&valuePtr);
              std::condition_variable::~condition_variable(&v170);
              std::mutex::~mutex(&v171);
              std::string v71 = v151;
LABEL_149:
              if (v71) {
                operator delete(v71);
              }
              goto LABEL_151;
            }
          }
        }
        uint64_t v149 = 0;
        int v148 = 0;
        uint64_t v150 = 0;
        std::string v71 = v151;
        sub_46B38(&v148, v151, v152, (v152 - (uint64_t)v151) >> 2);
        uint64_t v146 = 0;
        long long v145 = 0;
        uint64_t v147 = 0;
        sub_46B38(&v145, inData, (uint64_t)v22, (v22 - (unsigned char *)inData) >> 2);
        std::string v83 = v148;
        uint64_t v84 = v145;
        BOOL v85 = v149 - (unsigned char *)v148 == v146 - (unsigned char *)v145 && memcmp(v148, v145, v149 - (unsigned char *)v148) == 0;
        if (v84)
        {
          uint64_t v146 = v84;
          operator delete(v84);
        }
        if (v83)
        {
          uint64_t v149 = v83;
          operator delete(v83);
          if (!v85) {
            goto LABEL_82;
          }
        }
        else if (!v85)
        {
          goto LABEL_82;
        }
        uint64_t v86 = sub_32A48(13);
        if (*(unsigned char *)(v86 + 8))
        {
          std::string v87 = *(NSObject **)v86;
          if (*(void *)v86)
          {
            if (os_log_type_enabled(*(os_log_t *)v86, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)theString1 = 136315650;
              *(void *)&theString1[4] = "HALPropertySynchronizer.h";
              *(_WORD *)&theString1[12] = 1024;
              *(_DWORD *)&theString1[14] = 219;
              *(_WORD *)&theString1[18] = 1024;
              *(_DWORD *)&theString1[20] = inObjectID;
              _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", theString1, 0x18u);
            }
          }
        }
        goto LABEL_149;
      }
LABEL_151:
      v171.__m_.__uint64_t sig = 0x676C6F624C50456DLL;
      *(_DWORD *)v171.__m_.__opaque = 0;
      if ((*(unsigned int (**)(uint64_t, std::mutex *))(*(void *)v109 + 16))(v109, &v171))
      {
        v170.__cv_.__uint64_t sig = 0;
        AudioObjectID v160 = (*(uint64_t (**)(uint64_t, std::mutex *, void, void))(*(void *)v109 + 32))(v109, &v171, 0, 0);
        (*(void (**)(uint64_t, std::mutex *, void, void, AudioObjectID *, std::condition_variable *))(*(void *)v109 + 40))(v109, &v171, 0, 0, &v160, &v170);
        if (v170.__cv_.__sig)
        {
          CFTypeID v72 = CFGetTypeID((CFTypeRef)v170.__cv_.__sig);
          if (v72 == CFNumberGetTypeID())
          {
            *(void *)theString1 = v170.__cv_.__sig;
            theString1[8] = 1;
            valuePtr.AudioObjectPropertySelector mSelector = 0;
            if (v170.__cv_.__sig)
            {
              CFNumberGetValue((CFNumberRef)v170.__cv_.__sig, kCFNumberSInt32Type, &valuePtr);
              AudioObjectPropertySelector mSelector = valuePtr.mSelector;
            }
            else
            {
              AudioObjectPropertySelector mSelector = 0;
            }
            sub_45260((uint64_t)theString1);
            char v74 = (os_log_t *)sub_32A48(19);
            long long v75 = *v74;
            if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)theString1 = 136315650;
              *(void *)&theString1[4] = "RoutingHandler_Record_N51.cpp";
              *(_WORD *)&theString1[12] = 1024;
              *(_DWORD *)&theString1[14] = 169;
              *(_WORD *)&theString1[18] = 1024;
              *(_DWORD *)&theString1[20] = mSelector;
              _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_INFO, "%25s:%-5d Received Channel Mask of %u from Codec", theString1, 0x18u);
            }
            LODWORD(v171.__m_.__sig) = mSelector;
            strcpy(theString1, "meoabolg");
            theString1[9] = 0;
            *(_WORD *)&theString1[10] = 0;
            sub_4581B0((uint64_t)v108, (uint64_t)theString1, 4, (uint64_t)&v171);
            goto LABEL_161;
          }
          unsigned int v97 = (os_log_t *)sub_32A48(13);
          __int16 v98 = *v97;
          if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
          {
            CFTypeID v99 = CFGetTypeID((CFTypeRef)v170.__cv_.__sig);
            *(_DWORD *)theString1 = 136315650;
            *(void *)&theString1[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&theString1[12] = 1024;
            *(_DWORD *)&theString1[14] = 1510;
            *(_WORD *)&theString1[18] = 2048;
            *(void *)&theString1[20] = v99;
            _os_log_impl(&def_1E50E8, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Unknown type (%lu) used for enabled channel mask (expected CFNumber).\"", theString1, 0x1Cu);
          }
          int v96 = 1852797029;
        }
        else
        {
          char v94 = (os_log_t *)sub_32A48(13);
          int v95 = *v94;
          if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)theString1 = 136315394;
            *(void *)&theString1[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&theString1[12] = 1024;
            *(_DWORD *)&theString1[14] = 1509;
            _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"failed to retrieve enabled channel mask.\"", theString1, 0x12u);
          }
          int v96 = 2003329396;
        }
        long long v100 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v100 = &off_6414D8;
        v100[2] = v96;
      }
LABEL_161:
      int v76 = *(_DWORD *)(a2 + 12);
      if (v76 == 1986556788 || v76 == 1987211117)
      {
        strcpy(theString1, "dbedbolg");
        theString1[9] = 0;
        *(_WORD *)&theString1[10] = 0;
        sub_4581B0((uint64_t)v108, (uint64_t)theString1, 4, (uint64_t)&unk_596534);
      }
      else
      {
        if (v76 != 1987208039)
        {
          uint64_t v91 = (os_log_t *)sub_32A48(13);
          uint64_t v92 = *v91;
          if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)theString1 = 136315394;
            *(void *)&theString1[4] = "RoutingHandler_Record_N51.cpp";
            *(_WORD *)&theString1[12] = 1024;
            *(_DWORD *)&theString1[14] = 94;
            _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Invalid state encountered while trying to configure speech detection VAD\"", theString1, 0x12u);
          }
          uint64_t v93 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v93, "Invalid state encountered while trying to configure speech detection VAD");
        }
        strcpy(theString1, "dsedbolg");
        theString1[9] = 0;
        *(_WORD *)&theString1[10] = 0;
        sub_4581B0((uint64_t)v108, (uint64_t)theString1, 4, (uint64_t)&unk_596534);
      }
      uint64_t v12 = v109;
      int v77 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v108->_os_unfair_lock_opaque + 472))(v108);
      int v110 = 0;
      int v111 = 0;
      uint64_t v112 = 0;
      __int16 v78 = v113;
      sub_46B38(&v110, v113, (uint64_t)v114, (v114 - v113) >> 2);
      if (v110 == v111)
      {
        char v79 = 0;
      }
      else
      {
        char v79 = 0;
        std::__fs::filesystem::path v80 = v110;
        do
        {
          if (*v80 == v77) {
            break;
          }
          ++v79;
          ++v80;
        }
        while (v80 != v111);
      }
      int v81 = 1 << v79;
      if (v110)
      {
        int v111 = v110;
        operator delete(v110);
      }
      LODWORD(v171.__m_.__sig) = v81;
      strcpy(theString1, "maoabolg");
      theString1[9] = 0;
      *(_WORD *)&theString1[10] = 0;
      sub_4581B0((uint64_t)v108, (uint64_t)theString1, 4, (uint64_t)&v171);
      if (v10 == kCFCompareEqualTo)
      {
        (*(void (**)(uint64_t, uint64_t, os_unfair_lock_s *))(*(void *)a1 + 40))(a1, v109, v108);
        strcpy(theString1, "plMEtpni");
        theString1[9] = 0;
        *(_WORD *)&theString1[10] = 0;
        sub_1F4B28(v109, (uint64_t)theString1);
        strcpy(theString1, "plCEbolg");
        theString1[9] = 0;
        *(_WORD *)&theString1[10] = 0;
        sub_1F4B28(v109, (uint64_t)theString1);
      }
      sub_1F3044((unsigned int **)__p, v106, v108);
      sub_1F4E88((uint64_t)v108);
      if (v78) {
        operator delete(v78);
      }
      uint64_t v13 = v108;
      unsigned int v7 = 1886216809;
      goto LABEL_179;
    }
  }
  else if (v39)
  {
    goto LABEL_73;
  }
LABEL_43:
  uint64_t v26 = sub_32A48(13);
  if (*(unsigned char *)(v26 + 8))
  {
    double v27 = *(NSObject **)v26;
    if (*(void *)v26)
    {
      if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyAddress valuePtr = inAddress;
        sub_16C9C4((uint64_t)&v170, &valuePtr.mSelector);
        BOOL v28 = v170.__cv_.__opaque[15] >= 0 ? &v170 : (std::condition_variable *)v170.__cv_.__sig;
        *(_DWORD *)theString1 = 136315906;
        *(void *)&theString1[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&theString1[12] = 1024;
        *(_DWORD *)&theString1[14] = 199;
        *(_WORD *)&theString1[18] = 2080;
        *(void *)&theString1[20] = v28;
        *(_WORD *)&theString1[28] = 1024;
        *(_DWORD *)&theString1[30] = inObjectID;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", theString1, 0x22u);
        if (v170.__cv_.__opaque[15] < 0) {
          operator delete((void *)v170.__cv_.__sig);
        }
      }
    }
  }
  *(AudioObjectPropertyAddress *)theString1 = inAddress;
  unsigned int v29 = sub_86998(inObjectID, (const AudioObjectPropertyAddress *)theString1, inData, (int)v22);
  if (!v29)
  {
    LOBYTE(v40) = 1;
    goto LABEL_78;
  }
  unsigned int v30 = v29;
  unint64_t v31 = (os_log_t *)sub_32A48(13);
  uint64_t v32 = *v31;
  if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
  {
    uint64_t v101 = a3;
    sub_2417C(&v170, v30);
    int v33 = v170.__cv_.__opaque[15];
    uint64_t sig = v170.__cv_.__sig;
    v151 = *(void **)&inAddress.mSelector;
    LODWORD(v152) = inAddress.mElement;
    sub_16C9C4((uint64_t)&valuePtr, (unsigned int *)&v151);
    CFArrayRef v35 = &v170;
    if (v33 < 0) {
      CFArrayRef v35 = (std::condition_variable *)sig;
    }
    if (v143 >= 0) {
      p_AudioObjectPropertyAddress valuePtr = &valuePtr;
    }
    else {
      p_AudioObjectPropertyAddress valuePtr = *(AudioObjectPropertyAddress **)&valuePtr.mSelector;
    }
    *(_DWORD *)theString1 = 136316418;
    *(void *)&theString1[4] = "HALPropertySynchronizer.h";
    *(_WORD *)&theString1[12] = 1024;
    *(_DWORD *)&theString1[14] = 207;
    *(_WORD *)&theString1[18] = 1024;
    *(_DWORD *)&theString1[20] = v30;
    *(_WORD *)&theString1[24] = 2080;
    *(void *)&theString1[26] = v35;
    *(_WORD *)&theString1[34] = 2080;
    *(void *)&theString1[36] = p_valuePtr;
    *(_WORD *)&theString1[44] = 1024;
    *(_DWORD *)&theString1[46] = inObjectID;
    _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", theString1, 0x32u);
    if (v143 < 0) {
      operator delete(*(void **)&valuePtr.mSelector);
    }
    a3 = v101;
    if (v170.__cv_.__opaque[15] < 0) {
      operator delete((void *)v170.__cv_.__sig);
    }
  }
  goto LABEL_77;
}

void sub_3D1E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51)
{
  sub_6651C((uint64_t)&STACK[0x210]);
  std::condition_variable::~condition_variable((std::condition_variable *)(v51 - 216));
  std::mutex::~mutex((std::mutex *)(v51 - 168));
  if (STACK[0x270]) {
    operator delete((void *)STACK[0x270]);
  }
  if (a41) {
    operator delete(a41);
  }
  if (a44) {
    operator delete(a44);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a51) {
    sub_4636C(a51);
  }
  _Unwind_Resume(a1);
}

void sub_3D21AC()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)unsigned int v7 = 0u;
  long long v8 = 0u;
  *(_DWORD *)unsigned int v9 = 0;
  integer_t v9[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v9[5] = 1;
  *(void *)&v9[6] = 0;
  __int16 v10 = 0;
  int v11 = 16777473;
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = v13;
  __int16 v14 = 0;
  char v15 = 0;
  int v16 = -1044381696;
  char v17 = 1;
  int v18 = -1044381696;
  char v19 = 1;
  int v20 = 0;
  char v21 = 1;
  int v22 = -1056964608;
  char v23 = 1;
  int v24 = -1033371648;
  char v25 = 1;
  int v26 = 0;
  char v27 = 1;
  int v28 = -1033371648;
  char v29 = 1;
  int v30 = 0;
  char v31 = 1;
  int v32 = -1044381696;
  char v33 = 1;
  int v34 = 0;
  char v35 = 1;
  int v36 = -1033371648;
  char v37 = 1;
  int v38 = 0;
  char v39 = 1;
  int v40 = -1033371648;
  char v41 = 1;
  int v42 = -1055916032;
  char v43 = 1;
  int v44 = -1033371648;
  char v45 = 1;
  int v46 = 0;
  char v47 = 1;
  int v48 = -1055916032;
  char v49 = 1;
  int v50 = -1033371648;
  char v51 = 1;
  int v52 = -1055916032;
  char v53 = 1;
  int v54 = -1033371648;
  char v55 = 1;
  int v56 = 0;
  char v57 = 1;
  int v58 = -1055916032;
  char v59 = 1;
  int v60 = -1043333120;
  char v61 = 1;
  int v62 = 0x40000000;
  char v63 = 1;
  int v64 = 16777472;
  int v65 = 0;
  char v66 = 1;
  int v67 = 0;
  char v68 = 1;
  int v69 = 1103626240;
  char v70 = 1;
  int v71 = 0;
  char v72 = 1;
  int v73 = 1094713344;
  char v74 = 1;
  int v75 = 1094713344;
  char v76 = 1;
  int v77 = 1094713344;
  char v78 = 1;
  int v79 = -1061158912;
  char v80 = 1;
  int v81 = 1107296256;
  char v82 = 1;
  int v83 = 1107296256;
  char v84 = 1;
  int v85 = 1092616192;
  char v86 = 1;
  int v87 = 0;
  char v88 = 1;
  int v89 = 0;
  char v90 = 1;
  int v91 = 16777472;
  v92[0] = 0;
  v92[72] = 0;
  v92[80] = 0;
  v92[120] = 0;
  v92[128] = 0;
  v92[200] = 0;
  v92[208] = 0;
  v92[248] = 0;
  LOBYTE(v93) = 0;
  char v94 = 0;
  LOBYTE(v95) = 0;
  char v96 = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  LOBYTE(v99) = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  LOBYTE(v103) = 0;
  char v104 = 0;
  LOBYTE(v105) = 0;
  char v106 = 0;
  LOBYTE(v107) = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  LOBYTE(v113) = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 1;
  char v128 = 0;
  char v129 = 0;
  LOBYTE(v130) = 0;
  char v131 = 0;
  LOBYTE(v132) = 0;
  char v133 = 0;
  LOBYTE(v134) = 0;
  char v135 = 0;
  LOBYTE(v136) = 0;
  char v137 = 0;
  __int16 v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  LOBYTE(v141) = 0;
  char v142 = 0;
  LOBYTE(v143) = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  LOBYTE(v149) = 0;
  char v150 = 0;
  LOBYTE(v151) = 0;
  char v152 = 0;
  LOBYTE(v153) = 0;
  char v154 = 0;
  LOBYTE(v155) = 0;
  char v156 = 0;
  char v157 = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  LOBYTE(__p) = 0;
  char v163 = 0;
  v164.__r_.__value_.__s.__data_[0] = 0;
  char v165 = 0;
  v166.__r_.__value_.__s.__data_[0] = 0;
  char v167 = 0;
  v168.__r_.__value_.__s.__data_[0] = 0;
  char v169 = 0;
  int v170 = 256;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  __int16 v177 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 2;
  int v4 = 5;
  LODWORD(__src) = 3;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x400000003;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(_WORD *)&v9[12] = 257;
  *(void *)unsigned int v9 = 0x101010101010101;
  int v11 = 16843008;
  LOBYTE(v14) = 1;
  int v60 = -1047527424;
  char v61 = 1;
  int v69 = 1103101952;
  char v70 = 1;
  int v75 = 0;
  char v76 = 1;
  int v77 = 0;
  char v78 = 1;
  int v73 = 0;
  char v74 = 1;
  int v89 = 1090519040;
  char v90 = 1;
  int v79 = -1040187392;
  char v80 = 1;
  int v62 = 0;
  char v63 = 1;
  LOWORD(v64) = 257;
  int v91 = 16843009;
  if (!v94) {
    char v94 = 1;
  }
  int v93 = 1836282987;
  if (!v96) {
    char v96 = 1;
  }
  int v95 = 2;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 8;
  if (!v100) {
    char v100 = 1;
  }
  int v99 = 16;
  int v103 = 36;
  char v104 = 1;
  int v105 = 36;
  char v106 = 1;
  int v107 = 36;
  char v108 = 1;
  int v113 = 36;
  char v114 = 1;
  int v130 = 42;
  char v131 = 1;
  int v132 = 3;
  char v133 = 1;
  int v134 = 25;
  char v135 = 1;
  int v136 = 42;
  char v137 = 1;
  int v149 = 13;
  char v150 = 1;
  int v151 = 42;
  char v152 = 1;
  int v153 = 23;
  char v154 = 1;
  int v155 = 7;
  char v156 = 1;
  __int16 v138 = 257;
  if (!v140) {
    char v140 = 1;
  }
  int v139 = 5;
  if (!v144) {
    char v144 = 1;
  }
  int v143 = 8;
  if (!v142) {
    char v142 = 1;
  }
  int v141 = 2;
  sub_208140(&__src, 101);
  if (v163)
  {
    if (SHIBYTE(v162) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v162 = v179;
  }
  else
  {
    long long __p = __src;
    uint64_t v162 = v179;
    char v163 = 1;
  }
  sub_87428(&v164, "_top_mic_general");
  sub_87428(&v166, "_top_mic_measurement");
  sub_87428(&v168, "_top_mic_hearing_accessibility");
  sub_402E04(&v0);
  sub_6C690((uint64_t)v92);
  sub_463E0(v13[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_3D2858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3D287C(uint64_t result, int a2, int a3, float a4, float a5)
{
  *(float *)(result + 20) = a4;
  *(_DWORD *)(result + 24) = a2;
  *(float *)(result + 28) = a5;
  *(unsigned char *)(result + 17) = a3;
  if (a3) {
    int v5 = 20;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(result + 32) = v5;
  *(void *)(result + 40) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_3D28AC(uint64_t a1)
{
  int v2 = *(FILE **)(a1 + 8);
  if (v2) {
    BOOL v3 = v2 == __stdoutp;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
LABEL_10:
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    int v4 = 200;
    do
    {
      if ((atomic_exchange((atomic_uchar *volatile)(a1 + 16), 1u) & 1) == 0)
      {
        fclose(*(FILE **)(a1 + 8));
        atomic_store(0, (unsigned __int8 *)(a1 + 16));
        goto LABEL_10;
      }
      usleep(0x1388u);
      --v4;
    }
    while (v4);
    int v5 = (os_log_t *)sub_32A48(25);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315650;
        long long v8 = "AncLogger.cpp";
        __int16 v9 = 1024;
        int v10 = 58;
        __int16 v11 = 1024;
        int v12 = 1000;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to aquire lock after %u ms", (uint8_t *)&v7, 0x18u);
      }
    }
  }
}

BOOL sub_3D29E4(uint64_t a1, char *__s1)
{
  if (*(void *)(a1 + 8)) {
    return 0;
  }
  *(void *)(a1 + 40) = 0;
  if (!strncmp(__s1, "stdout", 7uLL))
  {
    *(void *)(a1 + 8) = __stdoutp;
    return 1;
  }
  else
  {
    int v5 = fopen(__s1, "w");
    *(void *)(a1 + 8) = v5;
    return v5 != 0;
  }
}

BOOL sub_3D2A70(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_3D2A90(uint64_t a1, void *a2)
{
  *a2 = off_63AEC8;
}

void *sub_3D2AB0()
{
  double result = operator new(0x10uLL);
  *double result = off_63AEC8;
  return result;
}

void sub_3D2AE8()
{
}

BOOL sub_3D2B00(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_3D2B20(uint64_t a1, void *a2)
{
  *a2 = off_63AE80;
}

void *sub_3D2B40()
{
  double result = operator new(0x10uLL);
  *double result = off_63AE80;
  return result;
}

void sub_3D2B78()
{
}

uint64_t sub_3D2B90(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_3D2C04(uint64_t a1, void *a2)
{
  *a2 = off_63AE38;
}

void *sub_3D2C24()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63AE38;
  return result;
}

void sub_3D2C5C()
{
}

uint64_t sub_3D2C74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3D2CAC(uint64_t a1, void *a2)
{
  *a2 = off_63ADF0;
}

void *sub_3D2CCC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63ADF0;
  return result;
}

void sub_3D2D04()
{
}

uint64_t sub_3D2D1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3D2D54(uint64_t a1, void *a2)
{
  *a2 = off_63ADA8;
}

void *sub_3D2D74()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63ADA8;
  return result;
}

void sub_3D2DAC()
{
}

BOOL sub_3D2DC4(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_3D2DEC(uint64_t a1, void *a2)
{
  *a2 = off_63AD60;
}

void *sub_3D2E0C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63AD60;
  return result;
}

void sub_3D2E44()
{
}

uint64_t sub_3D2E5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_3D2E94(uint64_t a1, void *a2)
{
  *a2 = off_63AD18;
}

void *sub_3D2EB4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63AD18;
  return result;
}

void sub_3D2EEC()
{
}

void sub_3D2F04()
{
  sub_6C05C((uint64_t)v0);
  __int16 v5 = 256;
  __int16 v6 = 256;
  __int16 v7 = 256;
  sub_208140(&v13, 193);
  if (v12)
  {
    if (SHIBYTE(v11) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v13;
    uint64_t v11 = v14;
    HIBYTE(v14) = 0;
    LOBYTE(v13) = 0;
  }
  else
  {
    long long __p = v13;
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    long long v13 = 0uLL;
    char v12 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v9);
  sub_463E0(v8);
  if (v3)
  {
    int v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    int v2 = v1;
    operator delete(v1);
  }
}

void sub_3D2FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3D3008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  memset(v13, 0, sizeof(v13));
  sub_21C8C(__p, "");
  sub_105158(a1, &qword_65EB38, a2, (uint64_t)v13, a4, a5, a3, (long long *)__p);
  *(void *)a1 = &off_621AD0;
  *(_WORD *)(a1 + 520) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &off_63AF10;
  return a1;
}

void sub_3D30E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3D30FC(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_3D3138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v7, 0, 24);
  sub_105048((uint64_t)v8, qword_65EB38);
  sub_3D3008(a1, a2, (uint64_t)v7, (uint64_t)v8, a3);
  sub_72924((uint64_t)&v10);
  sub_72924((uint64_t)&v9);
  sub_72924((uint64_t)v8);
  v8[0] = (void **)v7;
  sub_74004(v8);
  return a1;
}

void sub_3D31D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13)
{
  a12 = (void **)&a9;
  sub_74004(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_3D3204(uint64_t a1, unsigned int a2)
{
  sub_2417C(&__p, a2);
  if (v9 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  char v11 = 1;
  CFStringRef v12 = CFStringCreateWithCString(0, p_p, 0x600u);
  char v13 = 1;
  CFMutableStringRef theString = CFStringCreateMutableCopy(0, 0, v12);
  sub_72924((uint64_t)&v12);
  if (v9 < 0) {
    operator delete(__p);
  }
  int v4 = (__CFString *)CFStringCreateWithCString(0, "-Injection", 0x600u);
  long long __p = v4;
  char v8 = 1;
  if (theString) {
    CFStringAppend(theString, v4);
  }
  sub_72924((uint64_t)&__p);
  CFMutableStringRef v5 = theString;
  *(void *)a1 = theString;
  *(unsigned char *)(a1 + 8) = 1;
  CFRetain(v5);
  return sub_E2A54((uint64_t)&theString);
}

void sub_3D32DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_3D3334(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

BOOL sub_3D3370(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_3D3390(uint64_t a1, void *a2)
{
  *a2 = off_63B520;
}

void *sub_3D33B0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B520;
  return result;
}

void sub_3D33E8()
{
}

BOOL sub_3D3400(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_3D3420(uint64_t a1, void *a2)
{
  *a2 = off_63B4D8;
}

void *sub_3D3440()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B4D8;
  return result;
}

void sub_3D3478()
{
}

uint64_t sub_3D3490(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_3D3504(uint64_t a1, void *a2)
{
  *a2 = off_63B490;
}

void *sub_3D3524()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B490;
  return result;
}

void sub_3D355C()
{
}

uint64_t sub_3D3574(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3D35AC(uint64_t a1, void *a2)
{
  *a2 = off_63B448;
}

void *sub_3D35CC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B448;
  return result;
}

void sub_3D3604()
{
}

uint64_t sub_3D361C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3D3654(uint64_t a1, void *a2)
{
  *a2 = off_63B400;
}

void *sub_3D3674()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B400;
  return result;
}

void sub_3D36AC()
{
}

BOOL sub_3D36C4(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_3D36EC(uint64_t a1, void *a2)
{
  *a2 = off_63B3B8;
}

void *sub_3D370C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B3B8;
  return result;
}

void sub_3D3744()
{
}

uint64_t sub_3D375C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_3D3794(uint64_t a1, void *a2)
{
  *a2 = off_63B370;
}

void *sub_3D37B4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B370;
  return result;
}

void sub_3D37EC()
{
}

BOOL sub_3D3804(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_3D3824(uint64_t a1, void *a2)
{
  *a2 = off_63B718;
}

void *sub_3D3844()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B718;
  return result;
}

void sub_3D387C()
{
}

BOOL sub_3D3894(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_3D38B4(uint64_t a1, void *a2)
{
  *a2 = off_63B6D0;
}

void *sub_3D38D4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B6D0;
  return result;
}

void sub_3D390C()
{
}

uint64_t sub_3D3924(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_3D3998(uint64_t a1, void *a2)
{
  *a2 = off_63B688;
}

void *sub_3D39B8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B688;
  return result;
}

void sub_3D39F0()
{
}

uint64_t sub_3D3A08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3D3A40(uint64_t a1, void *a2)
{
  *a2 = off_63B640;
}

void *sub_3D3A60()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B640;
  return result;
}

void sub_3D3A98()
{
}

uint64_t sub_3D3AB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3D3AE8(uint64_t a1, void *a2)
{
  *a2 = off_63B5F8;
}

void *sub_3D3B08()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B5F8;
  return result;
}

void sub_3D3B40()
{
}

BOOL sub_3D3B58(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_3D3B80(uint64_t a1, void *a2)
{
  *a2 = off_63B5B0;
}

void *sub_3D3BA0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B5B0;
  return result;
}

void sub_3D3BD8()
{
}

uint64_t sub_3D3BF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_3D3C28(uint64_t a1, void *a2)
{
  *a2 = off_63B568;
}

void *sub_3D3C48()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63B568;
  return result;
}

void sub_3D3C80()
{
}

uint64_t sub_3D3C98(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v14 = sub_32A48(25);
  uint64_t v15 = *(void *)(v14 + 8);
  if (a5 == 4)
  {
    if (v15)
    {
      os_log_t v16 = *(os_log_t *)v14;
      if (*(void *)v14)
      {
        if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
        {
          float v48 = *a6;
          *(_DWORD *)int buf = 136317442;
          int v32 = "AncHardwareControl.cpp";
          __int16 v33 = 1024;
          int v34 = 41;
          __int16 v35 = 2080;
          int v36 = "SetProperty";
          __int16 v37 = 1024;
          int v38 = a2;
          __int16 v39 = 1024;
          unsigned int v40 = HIBYTE(a2);
          __int16 v41 = 1024;
          int v42 = BYTE2(a2);
          __int16 v43 = 1024;
          int v44 = BYTE1(a2);
          __int16 v45 = 1024;
          int v46 = a2;
          __int16 v47 = 1024;
          __int16 v49 = 2048;
          double v50 = v48;
          char v17 = "%25s:%-5d %s selector=0x%x '%c%c%c%c', data=0x%08x %g";
          int v18 = v16;
          uint32_t v19 = 74;
LABEL_10:
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, v17, buf, v19);
        }
      }
    }
  }
  else if (v15)
  {
    os_log_t v20 = *(os_log_t *)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136316930;
        int v32 = "AncHardwareControl.cpp";
        __int16 v33 = 1024;
        int v34 = 39;
        __int16 v35 = 2080;
        int v36 = "SetProperty";
        __int16 v37 = 1024;
        int v38 = a2;
        __int16 v39 = 1024;
        unsigned int v40 = HIBYTE(a2);
        __int16 v41 = 1024;
        int v42 = BYTE2(a2);
        __int16 v43 = 1024;
        int v44 = BYTE1(a2);
        __int16 v45 = 1024;
        int v46 = a2;
        char v17 = "%25s:%-5d %s selector=0x%x '%c%c%c%c'";
        int v18 = v20;
        uint32_t v19 = 58;
        goto LABEL_10;
      }
    }
  }
  char v21 = (std::__shared_weak_count *)a1[1];
  if (!v21) {
    return 5;
  }
  int v22 = std::__shared_weak_count::lock(v21);
  if (!v22) {
    return 5;
  }
  char v23 = v22;
  uint64_t v24 = *a1;
  if (*a1)
  {
    unsigned int v29 = a2;
    uint64_t v30 = 1886679669;
    uint64_t v25 = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t, float *, uint64_t))(v24 + 32))(&v29, a3, a4, a5, a6, a7);
    if (v25)
    {
      int v26 = (os_log_t *)sub_32A48(25);
      char v27 = *v26;
      if (*v26)
      {
        if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315906;
          int v32 = "AncHardwareControl.cpp";
          __int16 v33 = 1024;
          int v34 = 54;
          __int16 v35 = 2080;
          int v36 = "SetProperty";
          __int16 v37 = 1024;
          int v38 = v25;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed, status=0x%x", buf, 0x22u);
        }
      }
    }
  }
  else
  {
    uint64_t v25 = 5;
  }
  sub_4636C(v23);
  return v25;
}

void sub_3D3FB0(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3D3FC8(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5, float *a6, uint64_t a7)
{
  uint64_t v14 = sub_32A48(25);
  if (*(unsigned char *)(v14 + 8))
  {
    uint64_t v15 = *(NSObject **)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136316930;
        __int16 v33 = "AncHardwareControl.cpp";
        __int16 v34 = 1024;
        int v35 = 62;
        __int16 v36 = 2080;
        __int16 v37 = "GetProperty";
        __int16 v38 = 1024;
        float v39 = *(float *)&a2;
        __int16 v40 = 1024;
        *(_DWORD *)__int16 v41 = HIBYTE(a2);
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = BYTE2(a2);
        __int16 v42 = 1024;
        int v43 = BYTE1(a2);
        __int16 v44 = 1024;
        int v45 = a2;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s selector=0x%x '%c%c%c%c'", buf, 0x3Au);
      }
    }
  }
  os_log_t v16 = (std::__shared_weak_count *)a1[1];
  if (v16)
  {
    char v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      int v18 = v17;
      uint64_t v19 = *a1;
      if (*a1)
      {
        unsigned int v30 = a2;
        uint64_t v31 = 1886679669;
        uint64_t v20 = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, _DWORD *, float *, uint64_t))(v19 + 24))(&v30, a3, a4, a5, a6, a7);
        if (v20)
        {
          char v21 = (os_log_t *)sub_32A48(25);
          os_log_t v22 = *v21;
          if (!*v21 || !os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
            goto LABEL_20;
          }
          *(_DWORD *)int buf = 136315906;
          __int16 v33 = "AncHardwareControl.cpp";
          __int16 v34 = 1024;
          int v35 = 75;
          __int16 v36 = 2080;
          __int16 v37 = "GetProperty";
          __int16 v38 = 1024;
          float v39 = *(float *)&v20;
          char v23 = "%25s:%-5d %s failed, status=0x%x";
          uint64_t v24 = v22;
          os_log_type_t v25 = OS_LOG_TYPE_ERROR;
          uint32_t v26 = 34;
        }
        else
        {
          if (*a5 != 4) {
            goto LABEL_20;
          }
          uint64_t v27 = sub_32A48(25);
          if ((*(unsigned char *)(v27 + 8) & 1) == 0) {
            goto LABEL_20;
          }
          os_log_t v28 = *(os_log_t *)v27;
          if (!*(void *)v27 || !os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_20;
          }
          float v39 = *a6;
          *(_DWORD *)int buf = 136316162;
          __int16 v33 = "AncHardwareControl.cpp";
          __int16 v34 = 1024;
          int v35 = 78;
          __int16 v36 = 2080;
          __int16 v37 = "GetProperty";
          __int16 v38 = 1024;
          __int16 v40 = 2048;
          *(double *)__int16 v41 = v39;
          char v23 = "%25s:%-5d %s value=0x%08x %g";
          uint64_t v24 = v28;
          os_log_type_t v25 = OS_LOG_TYPE_DEBUG;
          uint32_t v26 = 44;
        }
        _os_log_impl(&def_1E50E8, v24, v25, v23, buf, v26);
      }
      else
      {
        uint64_t v20 = 5;
      }
LABEL_20:
      sub_4636C(v18);
      return v20;
    }
  }
  return 5;
}

void sub_3D42BC(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3D42D8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  CFMutableStringRef v5 = (std::__shared_weak_count *)a1[1];
  if (!v5) {
    return 5;
  }
  char v9 = std::__shared_weak_count::lock(v5);
  if (!v9) {
    return 5;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *a1;
  if (*a1)
  {
    uint64_t v16 = 1886679669;
    unsigned int v14 = 0;
    int v15 = a2;
    uint64_t v12 = (*(uint64_t (**)(int *, void, void, unsigned int *, uint64_t))(v11 + 16))(&v15, 0, 0, &v14, a4);
    if (!v12)
    {
      if (v14 >= 0x10) {
        operator new[]();
      }
      if (v14 == 8) {
        uint64_t v12 = (*(uint64_t (**)(int *, void, void, unsigned int *, uint64_t, uint64_t))(v11 + 24))(&v15, 0, 0, &v14, a3, a4);
      }
      else {
        uint64_t v12 = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    uint64_t v12 = 5;
  }
  sub_4636C(v10);
  return v12;
}

void sub_3D4448(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3D4460(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t sub_3D4468(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_3D4470(uint64_t a1, int a2, int *a3, unsigned int a4)
{
  if (a2 != 21) {
    return 4294956417;
  }
  if (a4 < 4) {
    return 4294956445;
  }
  int v6 = *a3;
  int v7 = *a3 != 0;
  if (v7 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1)) {
    (*(void (**)(uint64_t, BOOL))(*(void *)a1 + 144))(a1, v6 != 0);
  }
  return 0;
}

uint64_t sub_3D4528(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 != 21) {
    return 4294956417;
  }
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  uint64_t result = 0;
  *a3 = v4;
  return result;
}

uint64_t sub_3D458C(uint64_t a1, int a2, _DWORD *a3, unsigned char *a4)
{
  if (a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a4 = 1;
  *a3 = 4;
  return result;
}

uint64_t sub_3D45B4(uint64_t a1, int a2, float *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || !(*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4)) {
    return 4294956429;
  }
  uint64_t result = 4294956418;
  switch(a2)
  {
    case 65536:
      float v8 = 0.0;
      if (*(unsigned char *)(a1 + 9)) {
        float v8 = 1.0;
      }
      goto LABEL_12;
    case 65537:
      unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
      goto LABEL_11;
    case 65538:
      unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
      goto LABEL_11;
    case 65540:
      unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
LABEL_11:
      float v8 = (float)v9;
LABEL_12:
      uint64_t result = 0;
      *a3 = v8;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_3D4704(uint64_t a1, int a2, float a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || !(*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4)) {
    return 4294956429;
  }
  uint64_t result = 4294956417;
  switch(a2)
  {
    case 65536:
      if (a3 == 0.0) {
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(a1 + 16);
      if (!v8)
      {
        int v15 = (os_log_t *)sub_32A48(25);
        uint64_t v16 = *v15;
        if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
          return 4294956429;
        }
        int v24 = 136315394;
        os_log_type_t v25 = "ANCInterface.cpp";
        __int16 v26 = 1024;
        int v27 = 268;
        char v17 = "%25s:%-5d AncManager is null";
        goto LABEL_42;
      }
      if (*(_DWORD *)(v8 + 12) == 2)
      {
        if (*(void *)(a1 + 80))
        {
          if (*(void *)(a1 + 104))
          {
            if (*(void *)(a1 + 40))
            {
              unsigned int v9 = *(const void **)(a1 + 96);
              if (v9)
              {
                uint64_t v10 = *(const void **)(v8 + 104);
                *(void *)(v8 + 104) = v9;
                CFRetain(v9);
                if (v10) {
                  CFRelease(v10);
                }
                uint64_t v11 = *(const void **)(a1 + 104);
                if (v11)
                {
                  uint64_t v12 = *(const void **)(v8 + 112);
                  *(void *)(v8 + 112) = v11;
                  CFRetain(v11);
                  if (v12) {
                    CFRelease(v12);
                  }
                  if ((*(unsigned int (**)(uint64_t, void, void))(*(void *)v8 + 128))(v8, *(void *)(a1 + 80), 0))
                  {
                    goto LABEL_17;
                  }
                  return 4294956428;
                }
                char v23 = (os_log_t *)sub_32A48(25);
                os_log_t v22 = *v23;
                if (!*v23 || !os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR)) {
                  return 4294956428;
                }
                int v24 = 136315394;
                os_log_type_t v25 = "AncManagerV2.cpp";
                __int16 v26 = 1024;
                int v27 = 348;
              }
              else
              {
                char v21 = (os_log_t *)sub_32A48(25);
                os_log_t v22 = *v21;
                if (!*v21 || !os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
                  return 4294956428;
                }
                int v24 = 136315394;
                os_log_type_t v25 = "AncManagerV2.cpp";
                __int16 v26 = 1024;
                int v27 = 336;
              }
              _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d inDSPImage!=nullptr failed", (uint8_t *)&v24, 0x12u);
              return 4294956428;
            }
            uint64_t v20 = (os_log_t *)sub_32A48(25);
            uint64_t v16 = *v20;
            if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
            {
              int v24 = 136315394;
              os_log_type_t v25 = "ANCInterface.cpp";
              __int16 v26 = 1024;
              int v27 = 286;
              char v17 = "%25s:%-5d mControlDeviceCallbackInterface not initialized";
              goto LABEL_42;
            }
            return 4294956429;
          }
          uint64_t v19 = (os_log_t *)sub_32A48(25);
          uint64_t v16 = *v19;
          if (!*v19 || !os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR)) {
            return 4294956429;
          }
          int v24 = 136315394;
          os_log_type_t v25 = "ANCInterface.cpp";
          __int16 v26 = 1024;
          int v27 = 281;
          char v17 = "%25s:%-5d Missing DSP main image";
        }
        else
        {
          int v18 = (os_log_t *)sub_32A48(25);
          uint64_t v16 = *v18;
          if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
            return 4294956429;
          }
          int v24 = 136315394;
          os_log_type_t v25 = "ANCInterface.cpp";
          __int16 v26 = 1024;
          int v27 = 276;
          char v17 = "%25s:%-5d Missing ANC tuning dictionary";
        }
LABEL_42:
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v24, 0x12u);
        return 4294956429;
      }
LABEL_17:
      uint64_t result = sub_3D4BC4(a1, a3 != 0.0);
      if (!result) {
        *(unsigned char *)(a1 + 9) = a3 != 0.0;
      }
      return result;
    case 65537:
      int v13 = (*(uint64_t (**)(void, BOOL))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), a3 != 0.0);
      goto LABEL_21;
    case 65538:
      int v13 = (*(uint64_t (**)(void, BOOL))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), a3 != 0.0);
LABEL_21:
      if (v13) {
        return 0;
      }
      else {
        return 4294956421;
      }
    case 65540:
      if (a3 - 256 > 0x300 || (a3 & 0x3FF) != 0) {
        return 4294956445;
      }
      (*(void (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
      return 0;
    default:
      return result;
  }
}

uint64_t sub_3D4BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 4294956429;
  }
  if (!*(void *)(a1 + 40))
  {
    int v6 = (os_log_t *)sub_32A48(25);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ANCInterface.cpp";
      __int16 v14 = 1024;
      int v15 = 307;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d mControlDeviceCallbackInterface not initialized", (uint8_t *)&v12, 0x12u);
    }
    return 4294956429;
  }
  if ((a2 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 88))(v3, 1);
    uint64_t v3 = *(void *)(a1 + 16);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 56))(v3, a2, 0))
  {
    if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), a2)) {
      return 0;
    }
    uint64_t v11 = (os_log_t *)sub_32A48(25);
    unsigned int v9 = *v11;
    if (!*v11 || !os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    int v12 = 136315650;
    int v13 = "ANCInterface.cpp";
    __int16 v14 = 1024;
    int v15 = 321;
    __int16 v16 = 1024;
    int v17 = a2;
    uint64_t v10 = "%25s:%-5d EnableOversight(%u) failed\n";
  }
  else
  {
    uint64_t v8 = (os_log_t *)sub_32A48(25);
    unsigned int v9 = *v8;
    if (!*v8 || !os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    int v12 = 136315650;
    int v13 = "ANCInterface.cpp";
    __int16 v14 = 1024;
    int v15 = 315;
    __int16 v16 = 1024;
    int v17 = a2;
    uint64_t v10 = "%25s:%-5d EnableANC(%u) failed\n";
  }
  _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 0x18u);
  return 4294956421;
}

uint64_t sub_3D4E14(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3 = 0;
  *a3 = 0;
  for (int i = 0x10000; i != 65539; ++i)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 4 * v3) = i;
      unsigned int v3 = *a3;
    }
    *a3 = ++v3;
  }
  return 0;
}

uint64_t sub_3D4E50()
{
  return 4294956417;
}

uint64_t sub_3D4E58(int a1, int a2, char *buffer)
{
  *((_DWORD *)buffer + 24) = 0;
  *((void *)buffer + 7) = 0;
  switch(a2)
  {
    case 65536:
      CFStringRef v4 = @"Enable ANC";
      goto LABEL_5;
    case 65537:
      CFStringRef v4 = @"Mute the ANC output";
      goto LABEL_5;
    case 65538:
      CFStringRef v4 = @"Enable oversight";
LABEL_5:
      *((void *)buffer + 9) = v4;
      *((_DWORD *)buffer + 24) = 0x8000000;
      CFStringGetCString(v4, buffer, 64, 0x8000100u);
      uint64_t result = 0;
      *((_DWORD *)buffer + 20) = 2;
      *(void *)(buffer + 84) = 0x3F80000000000000;
      unint64_t v6 = 0xC000000000000000;
      goto LABEL_11;
    case 65540:
      *((void *)buffer + 9) = @"block size";
      *((_DWORD *)buffer + 24) = 0x8000000;
      CFStringGetCString(@"block size", buffer, 64, 0x8000100u);
      uint64_t result = 0;
      *((_DWORD *)buffer + 20) = 1;
      *(void *)(buffer + 84) = 0x4480000043800000;
      unint64_t v6 = 0xC000000044800000;
LABEL_11:
      *(void *)(buffer + 92) = v6;
      break;
    default:
      int v7 = (os_log_t *)sub_32A48(25);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          int v9 = 136315394;
          uint64_t v10 = "ANCInterface.cpp";
          __int16 v11 = 1024;
          int v12 = 406;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ANCInterface::GetParameterInfo invalid param", (uint8_t *)&v9, 0x12u);
        }
      }
      uint64_t result = 4294956418;
      break;
  }
  return result;
}

uint64_t sub_3D5014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a1 + 16)) {
    return 4294956429;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1) & 1) != 0 || !*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 72);
  if (v8 == a3)
  {
    int v9 = *(unsigned int **)(a1 + 64);
  }
  else
  {
    if (v8 >= 0x401)
    {
      __int16 v11 = (os_log_t *)sub_32A48(13);
      int v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          int v18 = 136315394;
          uint64_t v19 = "ANCInterface.cpp";
          __int16 v20 = 1024;
          int v21 = 616;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"IO framesize is too large.\"", (uint8_t *)&v18, 0x12u);
        }
      }
    }
    *(_DWORD *)(a1 + 72) = a3;
    int v9 = *(unsigned int **)(a1 + 64);
    uint64_t v13 = *v9;
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 16 * v13;
      do
      {
        v9[v14 / 4 + 3] = 4 * a3;
        v14 += 16;
      }
      while (v15 != v14);
    }
  }
  (*(void (**)(void, uint64_t, uint64_t, unsigned int *))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16), a3, a4, v9);
  (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16), a2, a3, *(void *)(a1 + 64));
  if (!*(unsigned char *)(a1 + 10)) {
    return 0;
  }
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 112) + 64))(*(void *)(a1 + 112), a1 + 128, 2048);
  if (v16) {
    *(void *)(a1 + 2176) = v16;
  }
  uint64_t result = *(void *)(a1 + 2184);
  if (result)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 72))(result, a1 + 2200);
    uint64_t result = 0;
    *(void *)(a1 + 2224) = v17;
  }
  return result;
}

uint64_t sub_3D5264()
{
  return 0;
}

uint64_t sub_3D526C(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return 4294956429;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6)) {
    return 4294956433;
  }
  if ((*(unsigned int (**)(void, float, float, float, float))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16), a2, a3, a4, a5))
  {
    return 0;
  }
  return 4294956421;
}

uint64_t sub_3D5330(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  CFMutableStringRef v5 = *(const void **)(a1 + 96);
  *(void *)(a1 + 96) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t sub_3D53A0(uint64_t a1, CFTypeRef cf)
{
  int v2 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
  return 0;
}

uint64_t sub_3D53E0(uint64_t a1, CFTypeRef cf)
{
  int v2 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
  return 0;
}

void sub_3D5420(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v8 = (os_log_t *)sub_32A48(25);
  int v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "ANCInterface.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 78;
    __int16 v26 = 2048;
    uint64_t v27 = a2;
    __int16 v28 = 2048;
    uint64_t v29 = a3;
    __int16 v30 = 1024;
    int v31 = a4;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ANCInterface::InitializeWithControlDeviceInterface( cb=%p inContext=%p, inFrameSize=%u)", buf, 0x2Cu);
  }
  CFStringRef theString1 = 0;
  uint64_t v21 = 0x2A2A2A2A6C6E616DLL;
  int v22 = -1;
  int v23 = 8;
  (*(void (**)(uint64_t *, void, void, int *, CFStringRef *, uint64_t))(a2 + 24))(&v21, 0, 0, &v23, &theString1, a3);
  if (CFStringCompare(theString1, @"CS42L71", 0))
  {
    if (CFStringCompare(theString1, @"CS42L75", 0))
    {
      if (CFEqual(theString1, @"CS42L77"))
      {
        int v12 = 3;
        goto LABEL_13;
      }
      uint64_t v10 = (os_log_t *)sub_32A48(25);
      __int16 v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "ANCInterface.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 96;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported device", buf, 0x12u);
      }
    }
    int v12 = 2;
  }
  else
  {
    int v12 = 1;
  }
LABEL_13:
  CFRelease(theString1);
  uint64_t v13 = (char *)operator new(0x40uLL);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)a2;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)uint64_t v13 = off_63B808;
  *(_OWORD *)(v13 + 40) = v14;
  *((void *)v13 + 7) = *(void *)(a2 + 32);
  uint64_t v15 = (std::__shared_weak_count *)a1[6];
  a1[5] = v13 + 24;
  a1[6] = v13;
  if (v15)
  {
    sub_4636C(v15);
    if (!a1[5])
    {
      int v18 = (os_log_t *)sub_32A48(25);
      uint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "ANCInterface.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 102;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Null mControlDeviceCallbackInterface", buf, 0x12u);
        }
      }
    }
  }
  a1[7] = a3;
  if (v12 != 3)
  {
    if (v12 != 1)
    {
      uint64_t v16 = a1[6];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v20 = a1[6];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
    }
    sub_2049D8();
  }
  uint64_t v17 = a1[6];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_3D65BC(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void sub_3D6708(unint64_t *a1, size_t a2)
{
  CFMutableStringRef v5 = (char *)a1[1];
  CFStringRef v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_60548();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    int v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      long long v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      CFMutableStringRef v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_3D6848(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63B808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3D689C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63B808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3D68BC(void *a1)
{
  sub_3D68F4(a1);

  operator delete();
}

void *sub_3D68F4(void *a1)
{
  *a1 = off_63B760;
  sub_3D4BC4((uint64_t)a1, 0);
  int v2 = (const void *)a1[10];
  if (v2) {
    CFRelease(v2);
  }
  unsigned int v3 = (const void *)a1[11];
  if (v3) {
    CFRelease(v3);
  }
  CFStringRef v4 = (const void *)a1[12];
  if (v4) {
    CFRelease(v4);
  }
  CFMutableStringRef v5 = (const void *)a1[13];
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (unsigned int *)a1[8];
  if (v6)
  {
    unint64_t v7 = *v6;
    if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 4;
      do
      {
        if (*(void *)&v6[v9]) {
          operator delete[]();
        }
        ++v8;
        v9 += 4;
      }
      while (v8 < v7);
    }
    operator delete();
  }
  size_t v10 = (os_log_t *)sub_32A48(25);
  unint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v17 = 136315394;
    *(void *)&v17[4] = "ANCInterface.cpp";
    __int16 v18 = 1024;
    int v19 = 69;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ANCInterface removed", v17, 0x12u);
  }
  *(void *)uint64_t v17 = a1 + 275;
  sub_15B944((void ***)v17);
  int v12 = (std::__shared_weak_count *)a1[274];
  if (v12) {
    sub_4636C(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)a1[15];
  if (v13) {
    sub_4636C(v13);
  }
  long long v14 = (std::__shared_weak_count *)a1[6];
  if (v14) {
    sub_4636C(v14);
  }
  char v15 = (std::__shared_weak_count *)a1[3];
  if (v15) {
    sub_4636C(v15);
  }
  return a1;
}

void sub_3D6ABC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_3D6ACC(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (v2) {
    sub_329688(v2);
  }
  sub_A60C4((uint64_t *)(a1 + 8));
  return a1;
}

void sub_3D6B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    char v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 85;
      int v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v23 = v22;
      int v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 85;
        int v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 85;
        int v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x3D6B04);
}

uint64_t sub_3D6DA4(AudioObjectID *a1, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v4 = sub_32A48(16);
  uint64_t v5 = sub_32A48(31);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)long long v14 = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v14[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10)
    {
      if ((v8 & 1) == 0) {
        return AudioDeviceStart(*a1, a2);
      }
      goto LABEL_9;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if (*(void *)(v4 + 8))
  {
LABEL_9:
    unint64_t v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v12 = *a1;
      *(_DWORD *)long long v14 = 136315650;
      *(void *)&v14[4] = "Aggregate_HAL_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 112;
      __int16 v17 = 1024;
      AudioObjectID v18 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting IO on Aggregate %u", v14, 0x18u);
    }
  }
  return AudioDeviceStart(*a1, a2);
}

uint64_t sub_3D6EF8(AudioObjectID *a1, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v4 = sub_32A48(16);
  uint64_t v5 = sub_32A48(31);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)long long v14 = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v14[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10)
    {
      if ((v8 & 1) == 0) {
        return AudioDeviceStop(*a1, a2);
      }
      goto LABEL_9;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if (*(void *)(v4 + 8))
  {
LABEL_9:
    unint64_t v11 = *(NSObject **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v12 = *a1;
      *(_DWORD *)long long v14 = 136315650;
      *(void *)&v14[4] = "Aggregate_HAL_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 126;
      __int16 v17 = 1024;
      AudioObjectID v18 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stopping IO on Aggregate %u", v14, 0x18u);
    }
  }
  return AudioDeviceStop(*a1, a2);
}

void sub_3D704C()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)char v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  int v9 = 0;
  BOOL v10 = (unsigned __int16)sub_6CBEC() > 0x100u;
  char v11 = 1;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  __int16 v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v95[80] = 0;
  v95[120] = 0;
  v95[128] = 0;
  v95[200] = 0;
  v95[208] = 0;
  v95[248] = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  LOBYTE(v108) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  LOBYTE(v116) = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 1;
  char v131 = 0;
  char v132 = 0;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  LOBYTE(v137) = 0;
  char v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  __int16 v141 = 0;
  char v142 = 0;
  char v143 = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  LOBYTE(v152) = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(v156) = 0;
  char v157 = 0;
  LOBYTE(v158) = 0;
  char v159 = 0;
  LOBYTE(v160) = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  LOBYTE(__p) = 0;
  char v166 = 0;
  v167.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  v169.__r_.__value_.__s.__data_[0] = 0;
  char v170 = 0;
  v171.__r_.__value_.__s.__data_[0] = 0;
  char v172 = 0;
  int v173 = 256;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  __int16 v180 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 1;
  int v4 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  int v9 = 16777472;
  LOWORD(v12) = 257;
  HIWORD(v12) = 257;
  int v14 = 16843009;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 0;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  int v94 = 16843009;
  if (!v97) {
    char v97 = 1;
  }
  int v96 = 1836282987;
  if (!v99) {
    char v99 = 1;
  }
  int v98 = 2;
  if (!v101) {
    char v101 = 1;
  }
  int v100 = 4;
  if (!v103) {
    char v103 = 1;
  }
  int v102 = 0;
  int v106 = 36;
  char v107 = 1;
  int v108 = 36;
  char v109 = 1;
  int v110 = 36;
  char v111 = 1;
  int v116 = 12;
  char v117 = 1;
  char v130 = 0;
  int v133 = 41;
  char v134 = 1;
  int v135 = 3;
  char v136 = 1;
  int v137 = 25;
  char v138 = 1;
  int v139 = 41;
  char v140 = 1;
  __int16 v141 = 256;
  int v152 = 41;
  char v153 = 1;
  int v154 = 41;
  char v155 = 1;
  int v156 = 23;
  char v157 = 1;
  int v158 = 7;
  char v159 = 1;
  int v160 = 1;
  char v161 = 1;
  sub_208140(&__src, 73);
  if (v166)
  {
    if (SHIBYTE(v165) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v165 = v182;
  }
  else
  {
    long long __p = __src;
    uint64_t v165 = v182;
    char v166 = 1;
  }
  sub_87428(&v167, "_top_mic_general");
  sub_87428(&v169, "_top_mic_measurement");
  sub_87428(&v171, "_top_mic_hearing_accessibility");
  LOBYTE(v17) = 1;
  sub_402E04(&v0);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_3D76AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3D76D0(_WORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_WORD *))(*(void *)a1 + 160))(a1);
  if (result) {
    return (a1[92] & 1) == 0;
  }
  return result;
}

void sub_3D7724(void *a1)
{
  *a1 = off_63B840;
  sub_72924((uint64_t)(a1 + 93));
  sub_72924((uint64_t)(a1 + 91));
  sub_AEF0C((uint64_t)(a1 + 80));
  sub_104C04(a1);

  operator delete();
}

uint64_t sub_3D77A0(void *a1)
{
  *a1 = off_63B840;
  sub_72924((uint64_t)(a1 + 93));
  sub_72924((uint64_t)(a1 + 91));
  sub_AEF0C((uint64_t)(a1 + 80));

  return sub_104C04(a1);
}

uint64_t sub_3D7808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int32 __c, char a6)
{
  uint64_t v12 = wmemchr((__int32 *)"apapspapwpaplpaptsaptlaptaaptmap", __c, 8uLL);
  __int16 v13 = "";
  if (v12) {
    __int16 v13 = (char *)v12;
  }
  if (v13 - "apapspapwpaplpaptsaptlaptaaptmap" == 32)
  {
    int v33 = (os_log_t *)sub_32A48(13);
    char v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v40 = 136315394;
      *(void *)&v40[4] = "Port_AirPlay_Aspen.cpp";
      __int16 v41 = 1024;
      *(_DWORD *)char v42 = 35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v40, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(_DWORD *)int buf = __c;
  *(void *)&uint8_t buf[4] = 0x6570756E70632177;
  LOBYTE(v47) = 1;
  sub_46A4C((uint64_t *)((char *)&v48 + 2), (uint64_t)&unk_65F8F0);
  __int16 v14 = sub_25009C(__c);
  if (__c == 1885433975) {
    __int16 v15 = 12;
  }
  else {
    __int16 v15 = 14;
  }
  LOWORD(v52) = v15 | v14 | (unsigned __int16)v52 & 0xFFF0;
  if (sub_25009C(__c)) {
    __int16 v16 = 1728;
  }
  else {
    __int16 v16 = 1744;
  }
  LOWORD(v52) = (unsigned __int16)v52 & 0xF80F | v16;
  __int16 v17 = operator new(0x10uLL);
  *__int16 v17 = xmmword_4E7C40;
  v39[1] = v17 + 1;
  v39[2] = v17 + 1;
  v39[0] = v17;
  char v18 = *(const void **)a3;
  *(void *)char v40 = *(void *)a3;
  v40[8] = *(unsigned char *)(a3 + 8);
  if (v40[8] && v18) {
    CFRetain(v18);
  }
  *(void *)&v42[2] = 0;
  char v43 = 1;
  uint64_t v44 = 0;
  char v45 = 1;
  memset(v38, 0, sizeof(v38));
  sub_21B7C(__p, *(CFStringRef *)a4);
  sub_1066F4(a1, (uint64_t *)buf, a2, (uint64_t)v39, (uint64_t)v40, a4, (uint64_t)v38, (long long *)__p, a6, 1);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v38;
  sub_74004((void ***)__p);
  sub_72924((uint64_t)&v44);
  sub_72924((uint64_t)&v42[2]);
  sub_72924((uint64_t)v40);
  operator delete(v17);
  sub_463E0(*(void **)&v50[4]);
  *(void *)a1 = off_63B840;
  sub_AEF58(a1 + 640, (uint64_t)"Port_AirPlay_Aspen mutex");
  *(void *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 736) = 1;
  CFStringRef v19 = *(CFStringRef *)a4;
  *(void *)(a1 + 744) = *(void *)a4;
  int v20 = *(unsigned __int8 *)(a4 + 8);
  *(unsigned char *)(a1 + 752) = v20;
  if (v20 && v19) {
    CFRetain(v19);
  }
  uint64_t v21 = sub_32A48(23);
  uint64_t v22 = sub_32A48(27);
  char v23 = 0;
  uint64_t v24 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v25 = *(void *)(v21 + 8);
  while (1)
  {
    uint64_t v26 = *(int *)&buf[4 * v24];
    char v27 = v23;
    if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
      break;
    }
    char v23 = 1;
    uint64_t v24 = 1;
    if (v27) {
      goto LABEL_24;
    }
  }
  if ((v25 & v26) == 0) {
    uint64_t v21 = v22;
  }
LABEL_24:
  char v28 = *(NSObject **)v21;
  if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(v40, __c);
    if (v42[9] >= 0) {
      int v29 = v40;
    }
    else {
      int v29 = *(unsigned char **)v40;
    }
    uint64_t v30 = *(void *)(a1 + 728);
    CFStringRef v31 = *(CFStringRef *)a4;
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "Port_AirPlay_Aspen.cpp";
    __int16 v47 = 1024;
    int v48 = 85;
    __int16 v49 = 2080;
    *(void *)char v50 = v29;
    *(_WORD *)&v50[8] = 2112;
    *(void *)&v50[10] = v30;
    __int16 v51 = 2112;
    CFStringRef v52 = v31;
    _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating an AirPlay port '%s' from AirPlay with audio object id '%@', and AirPlay device UID '%@'.", buf, 0x30u);
    if ((v42[9] & 0x80000000) != 0) {
      operator delete(*(void **)v40);
    }
  }
  return a1;
}

void sub_3D7C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_72924((uint64_t)(v31 + 93));
  sub_72924(v33);
  sub_AEF0C(v32);
  sub_104C04(v31);
  _Unwind_Resume(a1);
}

void sub_3D7D2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int **a5, unsigned int a6, unsigned int **a7)
{
  unsigned int v9 = a3;
  sub_EF50(a1, a2, a3, a4, a5, a6, a7);
  if (*(float *)(a1 + 1136) != *(float *)(a1 + 1140) && a6 != 0)
  {
    uint64_t v12 = 0;
    do
    {
      __int16 v13 = a7[v12];
      if (!v13) {
        break;
      }
      if (*v13)
      {
        unint64_t v14 = 0;
        uint64_t v15 = 4;
        do
        {
          __int16 v16 = *(float **)&v13[v15];
          float __B = *(float *)(a1 + 1140);
          vDSP_vsmul(v16, 1, &__B, v16, 1, v9);
          ++v14;
          v15 += 4;
        }
        while (v14 < *v13);
      }
      ++v12;
    }
    while (v12 != a6);
  }
}

uint64_t sub_3D7DF8(uint64_t a1, void *a2)
{
  sub_1ACCF4(a1, a2);
  *(_WORD *)&AudioObjectPropertyAddress buf[2] = *(_WORD *)(a1 + 682);
  *(_WORD *)int buf = *(_WORD *)(a1 + 682);
  HIWORD(v11) = *(_WORD *)(a1 + 682) == 0;
  LOWORD(v11) = *(_WORD *)(a1 + 682);
  int v3 = *(_DWORD *)buf;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 680), (unsigned int *)&v3, v11);
  uint64_t v4 = a1 + 400;
  uint64_t v5 = 400;
  if (!*(_WORD *)(a1 + 682))
  {
    uint64_t v5 = 424;
    uint64_t v4 = a1 + 424;
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(v4 + 8);
  if (v6 == v7)
  {
LABEL_6:
    long long v8 = (os_log_t *)sub_32A48(24);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v13 = "DSPChain_SpeakerProtection.cpp";
      __int16 v14 = 1024;
      int v15 = 60;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Speaker Protection DSP missing for speaker route. Output will be manually attenuated by -20dB !!", buf, 0x12u);
    }
    *(_DWORD *)(a1 + 1140) = 1036831949;
  }
  else
  {
    while ((*(unsigned int (**)(void))(**(void **)(v6 + 8) + 152))(*(void *)(v6 + 8)) != 1936748595)
    {
      v6 += 24;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
  }
  return 1;
}

void sub_3D7F80(unint64_t a1)
{
  sub_1B6728(a1);

  operator delete();
}

uint64_t sub_3D7FBC()
{
  return 0x100000001;
}

uint64_t sub_3D7FC4(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885565807)
  {
    int v3 = (os_log_t *)sub_32A48(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      __int16 v13 = "Device_ContinuityScreen_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 53;
      __int16 v16 = 2080;
      __int16 v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v13 = "Device_ContinuityScreen_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 54;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_3D817C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3D8198(os_unfair_lock_s *a1)
{
  int v2 = (os_log_t *)sub_32A48(17);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315394;
    buf_4 = "Device_ContinuityScreen_Aspen.cpp";
    __int16 v11 = 1024;
    int v12 = 20;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d initializing Device_HAL_Common", (uint8_t *)&buf, 0x12u);
  }
  sub_42E5FC(a1);
  uint64_t v4 = (os_log_t *)sub_32A48(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315650;
    buf_4 = "Device_ContinuityScreen_Aspen.cpp";
    __int16 v11 = 1024;
    int v12 = 22;
    __int16 v13 = 1024;
    int v14 = 1;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d initialized Device_HAL_Common: %u", (uint8_t *)&buf, 0x18u);
  }
  uint64_t v6 = (os_log_t *)sub_32A48(17);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315394;
    buf_4 = "Device_ContinuityScreen_Aspen.cpp";
    __int16 v11 = 1024;
    int v12 = 26;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating controls and ports", (uint8_t *)&buf, 0x12u);
  }
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 1))
  {
    operator new();
  }
  return 1;
}

void sub_3D8744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_72924((uint64_t)&a31);
  sub_103C0C(v32);
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v34);
  sub_72924((uint64_t)&a11);
  sub_78FF8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_3D884C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_3D8870(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63BD30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3D88C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63BD30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3D88E4(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

void sub_3D8920()
{
  uint64_t v0 = sub_32A48(40);
  if (*(unsigned char *)(v0 + 8))
  {
    char v1 = *(NSObject **)v0;
    if (*(void *)v0)
    {
      if (os_log_type_enabled(*(os_log_t *)v0, OS_LOG_TYPE_DEBUG))
      {
        int v2 = 136315394;
        int v3 = "AudioIOMonitor.cpp";
        __int16 v4 = 1024;
        int v5 = 342;
        _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stopping I/O", (uint8_t *)&v2, 0x12u);
      }
    }
  }
}

void sub_3D89E4()
{
  uint64_t v0 = sub_32A48(40);
  if (*(unsigned char *)(v0 + 8))
  {
    char v1 = *(NSObject **)v0;
    if (*(void *)v0)
    {
      if (os_log_type_enabled(*(os_log_t *)v0, OS_LOG_TYPE_DEBUG))
      {
        int v2 = 136315394;
        int v3 = "AudioIOMonitor.cpp";
        __int16 v4 = 1024;
        int v5 = 337;
        _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting I/O", (uint8_t *)&v2, 0x12u);
      }
    }
  }
}

void sub_3D8AA8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a3 + 8) != 1819304813) {
    return;
  }
  if (!*(void *)(a4 + 16))
  {
    int v59 = (os_log_t *)sub_32A48(13);
    char v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v69 = 136315394;
      *(void *)&v69[4] = "AudioIOMonitor.cpp";
      *(_WORD *)&v69[12] = 1024;
      *(_DWORD *)&v69[14] = 301;
      _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v69, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_549A4(&v65, (uint64_t *)(*(void *)(a4 + 8) + 16), "", 302);
  if (*(void *)(a4 + 16) <= 1uLL) {
    int v8 = *(_DWORD *)(v65 + 144);
  }
  else {
    int v8 = 1651663971;
  }
  __int16 v9 = *(_WORD *)(v65 + 184);
  sub_186AD8(v69);
  BOOL v10 = std::string::append((std::string *)v69, "/AudioCapture", 0xDuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v69[23] & 0x80000000) != 0) {
    operator delete(*(void **)v69);
  }
  int v12 = std::string::append(&v68, "/VA", 3uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v64 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v63 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  sub_186AD8(v69);
  int v14 = std::string::append((std::string *)v69, "/AudioCapture", 0xDuLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v69[23] & 0x80000000) != 0) {
    operator delete(*(void **)v69);
  }
  __int16 v16 = std::string::append(&v68, "/ANC", 4uLL);
  char v62 = (void *)v16->__r_.__value_.__r.__words[0];
  int v17 = SHIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BD08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BD08))
  {
    qword_64BCF8 = 0;
    byte_64BD00 = 1;
    __cxa_guard_release(&qword_64BD08);
  }
  if ((byte_64BD10 & 1) == 0)
  {
    if (sub_161574(@"RingBufferDuration", @"com.apple.audio.virtualaudio", (uint64_t)&qword_64BCF8))
    {
      char v18 = (os_log_t *)sub_32A48(13);
      CFStringRef v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v69 = 136315906;
        *(void *)&v69[4] = "RunTimeDefaults.cpp";
        *(_WORD *)&v69[12] = 1024;
        *(_DWORD *)&v69[14] = 1917;
        *(_WORD *)&v69[18] = 2080;
        *(void *)&v69[20] = "RingBufferDuration";
        __int16 v70 = 2112;
        uint64_t v71 = qword_64BCF8;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %@", v69, 0x26u);
      }
      *(void *)char v69 = CFStringCreateWithCString(0, "short", 0x600u);
      v69[8] = 1;
      CFComparisonResult v20 = CFStringCompare((CFStringRef)qword_64BCF8, *(CFStringRef *)v69, 0);
      sub_72924((uint64_t)v69);
      if (v20)
      {
        *(void *)char v69 = CFStringCreateWithCString(0, "normal", 0x600u);
        v69[8] = 1;
        CFComparisonResult v21 = CFStringCompare((CFStringRef)qword_64BCF8, *(CFStringRef *)v69, 0);
        sub_72924((uint64_t)v69);
        if (v21)
        {
          *(void *)char v69 = CFStringCreateWithCString(0, "long", 0x600u);
          v69[8] = 1;
          CFComparisonResult v22 = CFStringCompare((CFStringRef)qword_64BCF8, *(CFStringRef *)v69, 0);
          sub_72924((uint64_t)v69);
          if (v22)
          {
LABEL_40:
            byte_64BD10 = 1;
            goto LABEL_41;
          }
          uint64_t v23 = 0x400000;
        }
        else
        {
          uint64_t v23 = 0x200000;
        }
LABEL_39:
        qword_6489A0 |= v23;
        goto LABEL_40;
      }
    }
    else
    {
      if (sub_16149C(@"CaptureIOData")
        || sub_16149C(@"EnableVADTelephonyMonitor")
        || sub_89FA8() != 2
        && sub_89FA8() != 3
        && sub_89FA8() != 4
        && sub_89FA8() != 5
        && sub_89FA8() != 195)
      {
        goto LABEL_40;
      }
      if (qword_64A238 != -1) {
        dispatch_once(&qword_64A238, &stru_61F710);
      }
      if (!byte_64A228) {
        goto LABEL_40;
      }
      uint64_t v24 = (os_log_t *)sub_32A48(13);
      uint64_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v69 = 136315394;
        *(void *)&v69[4] = "RunTimeDefaults.cpp";
        *(_WORD *)&v69[12] = 1024;
        *(_DWORD *)&v69[14] = 1927;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (Internal only) No defaults key was set, ring buffer capture options set on HomePod", v69, 0x12u);
      }
    }
    uint64_t v23 = 0x100000;
    goto LABEL_39;
  }
LABEL_41:
  uint64_t v26 = qword_6489A0;
  if ((v9 & 0x10) != 0) {
    goto LABEL_54;
  }
  if (v8 > 1885629549)
  {
    if (v8 > 1886614639)
    {
      if (v8 == 1886743662) {
        goto LABEL_54;
      }
      int v27 = 1886614640;
    }
    else
    {
      if (v8 == 1885629550) {
        goto LABEL_54;
      }
      int v27 = 1885890164;
    }
  }
  else if (v8 > 1885418099)
  {
    if (v8 == 1885418100) {
      goto LABEL_54;
    }
    int v27 = 1885433443;
  }
  else
  {
    if (v8 == 1751409257) {
      goto LABEL_54;
    }
    int v27 = 1819306350;
  }
  if (v8 != v27)
  {
    uint64_t v56 = sub_32A48(40);
    if (*(unsigned char *)(v56 + 8))
    {
      int v57 = *(NSObject **)v56;
      if (*(void *)v56)
      {
        if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)char v69 = 136315394;
          *(void *)&v69[4] = "AudioIOMonitor.cpp";
          *(_WORD *)&v69[12] = 1024;
          *(_DWORD *)&v69[14] = 331;
          _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d ignoring stream that is not client visible", v69, 0x12u);
        }
      }
    }
    goto LABEL_127;
  }
LABEL_54:
  if (*a2) {
    uint64_t v28 = 72;
  }
  else {
    uint64_t v28 = 48;
  }
  if (*a2) {
    uint64_t v29 = a1 + 72;
  }
  else {
    uint64_t v29 = a1 + 48;
  }
  uint64_t v30 = (const void **)(a1 + 96);
  sub_3D97DC((std::string *)v69, v8, a2, (const void **)(a1 + 96));
  if (*(char *)(v29 + 23) < 0) {
    operator delete(*(void **)(a1 + v28));
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v69;
  *(void *)(v29 + 16) = *(void *)&v69[16];
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v32 = (uint64_t **)(a1 + 32);
    CFStringRef v31 = *(uint64_t **)(a1 + 32);
    if (v31)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v32 = (uint64_t **)v31;
          uint64_t v33 = v31 + 4;
          if (!sub_3DA590(a2, (_DWORD *)v31 + 8)) {
            break;
          }
          CFStringRef v31 = *v32;
          char v34 = v32;
          if (!*v32) {
            goto LABEL_71;
          }
        }
        if (!sub_3DA590(v33, a2)) {
          break;
        }
        char v34 = v32 + 1;
        CFStringRef v31 = v32[1];
        if (!v31) {
          goto LABEL_71;
        }
      }
    }
    else
    {
      char v34 = (uint64_t **)(a1 + 32);
LABEL_71:
      int v35 = operator new(0x40uLL);
      v35[2] = *(_OWORD *)a2;
      *((void *)v35 + 6) = 0;
      *((void *)v35 + 7) = 0;
      *(void *)int v35 = 0;
      *((void *)v35 + 1) = 0;
      *((void *)v35 + 2) = v32;
      void *v34 = (uint64_t *)v35;
      uint64_t v36 = **(void **)(a1 + 24);
      char v37 = (uint64_t *)v35;
      if (v36)
      {
        *(void *)(a1 + 24) = v36;
        char v37 = *v34;
      }
      sub_46D00(*(uint64_t **)(a1 + 32), v37);
      ++*(void *)(a1 + 40);
    }
    if (v64 >= 0) {
      char v38 = v63;
    }
    else {
      char v38 = (void **)v63[0];
    }
    sub_3D97DC((std::string *)v69, v8, a2, v30);
    if (v69[23] >= 0) {
      int v39 = v69;
    }
    else {
      int v39 = *(unsigned char **)v69;
    }
    if (qword_65F9B8 != -1) {
      dispatch_once(&qword_65F9B8, &stru_63BDE8);
    }
    if (off_65F9B0) {
      off_65F9B0(v26, v38, v39, 1667327590, 0, a3);
    }
    operator new();
  }
  uint64_t v40 = sub_32A48(40);
  if (*(unsigned char *)(v40 + 8))
  {
    __int16 v41 = *(NSObject **)v40;
    if (*(void *)v40)
    {
      if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(&v68, v8);
        int v42 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
        std::string::size_type v43 = v68.__r_.__value_.__r.__words[0];
        sub_259A4(&__p, a3);
        uint64_t v44 = &v68;
        if (v42 < 0) {
          uint64_t v44 = (std::string *)v43;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)char v69 = 136315906;
        *(void *)&v69[4] = "AudioIOMonitor.cpp";
        *(_WORD *)&v69[12] = 1024;
        *(_DWORD *)&v69[14] = 321;
        *(_WORD *)&v69[18] = 2080;
        *(void *)&v69[20] = v44;
        __int16 v70 = 2080;
        uint64_t v71 = (uint64_t)p_p;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Set stream format for stream with port type %s : %s", v69, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v46 = sub_32A48(40);
  if ((*(unsigned char *)(v46 + 8) & 1) == 0) {
    goto LABEL_127;
  }
  __int16 v47 = *(NSObject **)v46;
  if (!*(void *)v46 || !os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_127;
  }
  sub_3D04((uint64_t)v69);
  if (*a2) {
    int v48 = "Output, ";
  }
  else {
    int v48 = "Input, ";
  }
  if (*a2) {
    uint64_t v49 = 8;
  }
  else {
    uint64_t v49 = 7;
  }
  sub_256E4(v69, (uint64_t)v48, v49);
  int v50 = a2[1];
  if (v50) {
    __int16 v51 = "Underlying, ";
  }
  else {
    __int16 v51 = "Client, ";
  }
  if (v50) {
    uint64_t v52 = 12;
  }
  else {
    uint64_t v52 = 8;
  }
  sub_256E4(v69, (uint64_t)v51, v52);
  int v53 = a2[2];
  if (v53 == 1)
  {
    char v54 = "pre-DSP, ";
    uint64_t v55 = 9;
    goto LABEL_120;
  }
  if (v53 == 2)
  {
    char v54 = "post-DSP, ";
    uint64_t v55 = 10;
LABEL_120:
    sub_256E4(v69, (uint64_t)v54, v55);
  }
  sub_256E4(v69, (uint64_t)"Index: ", 7);
  std::ostream::operator<<();
  sub_246E4(&v68, (uint64_t)&v69[8]);
  if (v73 < 0) {
    operator delete(v72);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  char v58 = &v68;
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v58 = (std::string *)v68.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)char v69 = 136315650;
  *(void *)&v69[4] = "AudioIOMonitor.cpp";
  *(_WORD *)&v69[12] = 1024;
  *(_DWORD *)&v69[14] = 322;
  *(_WORD *)&v69[18] = 2080;
  *(void *)&v69[20] = v58;
  _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream identity: %s", v69, 0x1Cu);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_127:
  if (v17 < 0) {
    operator delete(v62);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete(v63[0]);
  }
  if (v66) {
    sub_4636C(v66);
  }
}

void sub_3D96A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v34 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a18) {
    sub_4636C(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_3D97DC(std::string *a1, signed int a2, int *a3, const void **a4)
{
  memset(&__dst, 0, sizeof(__dst));
  if (a2 > 1886154612)
  {
    if (a2 > 1886614624)
    {
      if (a2 > 1886675571)
      {
        if (a2 <= 1886740851)
        {
          if (a2 == 1886675572)
          {
            __int16 v16 = "VAD_ThunderboltTapStreamInput";
            size_t v17 = 29;
            goto LABEL_118;
          }
          if (a2 != 1886680169)
          {
            if (a2 != 1886680175) {
              goto LABEL_169;
            }
            long long v11 = "VAD_TTYOutput";
            goto LABEL_104;
          }
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1953853550;
          __int16 v9 = "VAD_TTYInput";
        }
        else if (a2 > 1886745448)
        {
          if (a2 != 1886745449)
          {
            if (a2 != 1886745455) {
              goto LABEL_169;
            }
            long long v11 = "VAD_USBOutput";
            goto LABEL_104;
          }
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1953853550;
          __int16 v9 = "VAD_USBInput";
        }
        else
        {
          if (a2 == 1886740852)
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
            LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
            int v8 = "VAD_USBAudioTapInput";
            goto LABEL_120;
          }
          if (a2 != 1886743662) {
            goto LABEL_169;
          }
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1802398060;
          __int16 v9 = "VAD_BBUplink";
        }
        goto LABEL_130;
      }
      if (a2 <= 1886614639)
      {
        if (a2 == 1886614625)
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853556;
          int v8 = "VAD_CarPlayAltOutput";
          goto LABEL_120;
        }
        if (a2 == 1886614633)
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
          int v8 = "VAD_CarPlayMainInput";
          goto LABEL_120;
        }
        if (a2 != 1886614639) {
          goto LABEL_169;
        }
        int v12 = "VAD_CarPlayMainOutput";
        goto LABEL_128;
      }
      if (a2 != 1886614640)
      {
        if (a2 == 1886675561)
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
          int v8 = "VAD_ThunderboltInput";
          goto LABEL_120;
        }
        if (a2 != 1886675567) {
          goto LABEL_169;
        }
        int v12 = "VAD_ThunderboltOutput";
        goto LABEL_128;
      }
      __int16 v16 = "VAD_SpeakerTapStreamInput";
      goto LABEL_117;
    }
    if (a2 <= 1886545250)
    {
      if (a2 > 1886222184)
      {
        if (a2 != 1886222185)
        {
          if (a2 != 1886284905)
          {
            if (a2 != 1886287212) {
              goto LABEL_169;
            }
            long long v15 = "VAD_NULL_Output";
            goto LABEL_94;
          }
          int v14 = "VAD_NULL_Input";
LABEL_111:
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 14;
          __dst.__r_.__value_.__r.__words[0] = *(void *)v14;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 6) = *(void *)(v14 + 6);
          __dst.__r_.__value_.__s.__data_[14] = 0;
          goto LABEL_131;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1667845476;
        __int16 v9 = "VAD_WiredMic";
      }
      else
      {
        if (a2 == 1886154613)
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 11;
          strcpy((char *)&__dst, "VAD_LineOut");
          goto LABEL_131;
        }
        if (a2 == 1886216809)
        {
          int v14 = "VAD_BuiltInMic";
          goto LABEL_111;
        }
        if (a2 != 1886216820) {
          goto LABEL_169;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1953853550;
        __int16 v9 = "VAD_HFPInput";
      }
LABEL_130:
      __dst.__r_.__value_.__r.__words[0] = *(void *)v9;
      __dst.__r_.__value_.__s.__data_[12] = 0;
      goto LABEL_131;
    }
    if (a2 > 1886610287)
    {
      if (a2 == 1886610288)
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
        LOWORD(__dst.__r_.__value_.__r.__words[2]) = 101;
        BOOL v10 = "VAD_SystemCapture";
        goto LABEL_125;
      }
      if (a2 == 1886613611)
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
        strcpy((char *)&__dst, "VAD_BuiltInSpeaker");
        goto LABEL_131;
      }
      if (a2 != 1886613618) {
        goto LABEL_169;
      }
      __int16 v16 = "VAD_SpeakerTelemetryInput";
      goto LABEL_117;
    }
    if (a2 == 1886545251)
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1919252073;
      __int16 v9 = "VAD_Receiver";
      goto LABEL_130;
    }
    if (a2 != 1886549104)
    {
      if (a2 == 1886609775)
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
        LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853556;
        int v8 = "VAD_CarPlayAuxOutput";
        goto LABEL_120;
      }
      goto LABEL_169;
    }
    __int16 v16 = "VAD_ReceiverTapStreamInput";
LABEL_101:
    size_t v17 = 26;
    goto LABEL_118;
  }
  if (a2 <= 1885629549)
  {
    if (a2 <= 1885433442)
    {
      if (a2 <= 1885418099)
      {
        if (a2 == 1651663971)
        {
          long long v11 = "VAD_Broadcast";
          goto LABEL_104;
        }
        if (a2 == 1751409257)
        {
          long long v15 = "VAD_HapticDebug";
          goto LABEL_94;
        }
        if (a2 != 1819306350) {
          goto LABEL_169;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
        LOWORD(__dst.__r_.__value_.__r.__words[2]) = 114;
        BOOL v10 = "VAD_LPMicInjector";
        goto LABEL_125;
      }
      if (a2 != 1885418100)
      {
        if (a2 != 1885430644)
        {
          if (a2 != 1885432182) {
            goto LABEL_169;
          }
          int v14 = "VAD_ActuatorIV";
          goto LABEL_111;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1919906913;
        __int16 v9 = "VAD_Actuator";
        goto LABEL_130;
      }
      __int16 v16 = "VAD_BluetoothA2DPTapInput";
LABEL_117:
      size_t v17 = 25;
      goto LABEL_118;
    }
    if (a2 <= 1885564780)
    {
      if (a2 == 1885433443)
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&__dst, "EANC");
        goto LABEL_131;
      }
      if (a2 == 1885433953)
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
        char v18 = "VAD_AirPlayAudio";
LABEL_115:
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v18;
        __dst.__r_.__value_.__s.__data_[16] = 0;
        goto LABEL_131;
      }
      if (a2 != 1885433971) {
        goto LABEL_169;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
      LOWORD(__dst.__r_.__value_.__r.__words[2]) = 110;
      BOOL v10 = "VAD_AirPlayScreen";
LABEL_125:
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
      goto LABEL_131;
    }
    if (a2 == 1885564781)
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
      LOWORD(__dst.__r_.__value_.__r.__words[2]) = 99;
      BOOL v10 = "VAD_ContinuityMic";
      goto LABEL_125;
    }
    if (a2 == 1885565044)
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
      *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = 1953853550;
      long long v13 = "VAD_CarPlayTapInput";
      goto LABEL_123;
    }
    if (a2 != 1885565807) {
      goto LABEL_169;
    }
    __int16 v16 = "VAD_ContinuityScreenOutput";
    goto LABEL_101;
  }
  if (a2 > 1885892673)
  {
    if (a2 > 1885894515)
    {
      if (a2 <= 1886152046)
      {
        if (a2 != 1885894516)
        {
          if (a2 == 1886152041)
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
            LODWORD(__dst.__r_.__value_.__r.__words[2]) = 1953853550;
            int v8 = "VAD_BluetoothLEInput";
LABEL_120:
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
            __dst.__r_.__value_.__s.__data_[20] = 0;
            goto LABEL_131;
          }
          goto LABEL_169;
        }
        __int16 v16 = "VAD_HeadphonesWiredTapStreamInput";
        size_t v17 = 33;
LABEL_118:
        sub_635BC(&__dst, v16, v17);
        goto LABEL_131;
      }
      if (a2 != 1886152047)
      {
        if (a2 == 1886152052)
        {
          __int16 v16 = "VAD_BluetoothLETapInput";
          size_t v17 = 23;
          goto LABEL_118;
        }
        goto LABEL_169;
      }
      int v12 = "VAD_BluetoothLEOutput";
LABEL_128:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v12;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 5) = *(void *)(v12 + 13);
      __dst.__r_.__value_.__s.__data_[21] = 0;
      goto LABEL_131;
    }
    if (a2 != 1885892674)
    {
      if (a2 != 1885892706)
      {
        if (a2 != 1885892727) {
          goto LABEL_169;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
        *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = 1936027247;
        long long v13 = "VAD_WiredHeadphones";
LABEL_123:
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
        __dst.__r_.__value_.__s.__data_[19] = 0;
        goto LABEL_131;
      }
      long long v11 = "VAD_HFPOutput";
LABEL_104:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 13;
      __dst.__r_.__value_.__r.__words[0] = *(void *)v11;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(void *)(v11 + 5);
      __dst.__r_.__value_.__s.__data_[13] = 0;
      goto LABEL_131;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
    std::string::size_type v19 = 0x504432415F444156;
LABEL_113:
    __dst.__r_.__value_.__r.__words[0] = v19;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    goto LABEL_131;
  }
  if (a2 <= 1885889644)
  {
    if (a2 != 1885629550)
    {
      if (a2 != 1885631344)
      {
        if (a2 != 1885888867) {
          goto LABEL_169;
        }
        long long v11 = "VAD_HACOutput";
        goto LABEL_104;
      }
      long long v15 = "VAD_DisplayPort";
LABEL_94:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 15;
      __dst.__r_.__value_.__r.__words[0] = *(void *)v15;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(void *)(v15 + 7);
      __dst.__r_.__value_.__s.__data_[15] = 0;
      goto LABEL_131;
    }
    int v14 = "VAD_BBDownlink";
    goto LABEL_111;
  }
  switch(a2)
  {
    case 1885889645:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
      std::string::size_type v19 = 0x494D44485F444156;
      goto LABEL_113;
    case 1885889652:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
      char v18 = "VAD_HDMITapInput";
      goto LABEL_115;
    case 1885890164:
      __int16 v16 = "VAD_BluetoothHFPTapInput";
      size_t v17 = 24;
      goto LABEL_118;
  }
LABEL_169:
  int v35 = (os_log_t *)sub_32A48(13);
  uint64_t v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(__p, a2);
    char v37 = v40 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "AudioIOMonitor.cpp";
    __int16 v43 = 1024;
    int v44 = 230;
    __int16 v45 = 2080;
    uint64_t v46 = v37;
    _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected port type:%s in switch statement\"", buf, 0x1Cu);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    __dst.__r_.__value_.__l.__size_ = 17;
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
    p_dst = &__dst;
  }
  strcpy((char *)p_dst, "VAD_UnknownStream");
LABEL_131:
  int v20 = a3[2];
  int v21 = *a3;
  if (v20 == 1 && v21 == 1)
  {
    CFComparisonResult v22 = "_PreDSP";
    std::string::size_type v23 = 7;
LABEL_137:
    std::string::append(&__dst, v22, v23);
    goto LABEL_138;
  }
  if (v20 == 2 && !v21)
  {
    CFComparisonResult v22 = "_PostDSP";
    std::string::size_type v23 = 8;
    goto LABEL_137;
  }
LABEL_138:
  if (a2 == 1885433443)
  {
    uint64_t v24 = a3[3];
    if (v24 > 5)
    {
      uint64_t v25 = (os_log_t *)sub_32A48(13);
      uint64_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        int v27 = a3[3];
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioIOMonitor.cpp";
        __int16 v43 = 1024;
        int v44 = 267;
        __int16 v45 = 1024;
        LODWORD(v46) = v27;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected stream index:%u in switch statement\"", buf, 0x18u);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        __dst.__r_.__value_.__l.__size_ = 18;
        uint64_t v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
        uint64_t v28 = &__dst;
      }
      strcpy((char *)v28, "UnknownStreamIndex");
    }
    else
    {
      std::string::append(&__dst, off_63BE08[v24], *(void *)&asc_596568[8 * v24]);
    }
  }
  if (*((char *)a4 + 23) >= 0) {
    size_t v29 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v29 = (size_t)a4[1];
  }
  uint64_t v30 = buf;
  sub_5E220((uint64_t)buf, v29 + 1);
  if (SBYTE3(v46) < 0) {
    uint64_t v30 = *(unsigned char **)buf;
  }
  if (v29)
  {
    if (*((char *)a4 + 23) >= 0) {
      CFStringRef v31 = a4;
    }
    else {
      CFStringRef v31 = *a4;
    }
    memmove(v30, v31, v29);
  }
  *(_WORD *)&v30[v29] = 95;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v32 = &__dst;
  }
  else {
    uint64_t v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  int v34 = std::string::append((std::string *)buf, (const std::string::value_type *)v32, size);
  *a1 = *v34;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE3(v46) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_3DA49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3DA4E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_3DA514(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3DA550(id a1)
{
  char v1 = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (v1)
  {
    int v2 = dlsym(v1, "NewAudioCapturerImpl");
    if (v2) {
      off_65F9B0 = (uint64_t (*)(void, void, void, void, void, void))v2;
    }
  }
}

BOOL sub_3DA590(_DWORD *a1, _DWORD *a2)
{
  BOOL v2 = *a1 < *a2;
  if (*a1 == *a2)
  {
    int v3 = a1[1];
    int v4 = a2[1];
    BOOL v2 = v3 < v4;
    if (v3 == v4)
    {
      int v5 = a1[2];
      int v6 = a2[2];
      BOOL v2 = v5 < v6;
      if (v5 == v6) {
        return a1[3] < a2[3];
      }
    }
  }
  return v2;
}

void sub_3DA5D4(uint64_t a1)
{
  sub_3DA60C(a1);

  operator delete();
}

uint64_t sub_3DA60C(uint64_t a1)
{
  *(void *)a1 = off_63BD68;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = &off_63D4E0;
  sub_3FABCC(*(void **)(a1 + 32));
  return a1;
}

void sub_3DA6A4()
{
}

void sub_3DA798(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 95) < 0) {
    operator delete(*(void **)(v14 + 72));
  }
  if (*(char *)(v14 + 71) < 0) {
    operator delete(*v15);
  }
  *(void *)uint64_t v14 = &off_63D4E0;
  sub_3FABCC(*(void **)(v14 + 32));
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete();
}

__n128 sub_3DA818@<Q0>(AudioObjectID a1@<W1>, __n128 *a2@<X8>)
{
  int v4 = (os_log_t *)sub_32A48(17);
  int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315650;
    BOOL v10 = "Device_HDMI_Aspen.cpp";
    __int16 v11 = 1024;
    int v12 = 426;
    __int16 v13 = 1024;
    AudioObjectID v14 = a1;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream ID = %u", (uint8_t *)&v9, 0x18u);
  }
  int v6 = operator new(0x70uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = off_63C098;
  uint64_t v7 = sub_1941C8((uint64_t)(v6 + 3), a1);
  uint64_t v6[3] = off_63EB58;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a2 = result;
  return result;
}

void sub_3DA948(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_3DA96C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_3DA990(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63C098;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3DA9E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63C098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_3DAA04(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885889645 && a2 != 1885631344)
  {
    int v4 = (os_log_t *)sub_32A48(17);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      int v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      AudioObjectID v14 = "Device_HDMI_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 415;
      __int16 v17 = 2080;
      char v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        AudioObjectID v14 = "Device_HDMI_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 416;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_3DABC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3DABE4(os_unfair_lock_s *a1)
{
}

void sub_3DB608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32)
{
  sub_72924(v32 - 200);
  sub_463E0(*(void **)(v32 - 136));
  _Unwind_Resume(a1);
}

void sub_3DB7F0(void *a1)
{
  BOOL v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5])
      {
        int v6 = operator new(4uLL);
        *int v6 = 1885889645;
        std::string __p = v6;
        __int16 v11 = v6 + 1;
        char v12 = v6 + 1;
        strcpy(v13, "cwdv");
        LOBYTE(v14) = 0;
        int v15 = 3;
        v17[0] = 0;
        v17[1] = 0;
        int v16 = v17;
        int v18 = 44739242;
        CFTypeRef cf = 0;
        sub_43637C((uint64_t *)&v20, v3, (uint64_t)&__p);
        sub_FB288(&v22, &v20);
        sub_8108((uint64_t *)&v20);
        if (cf) {
          CFRelease(cf);
        }
        sub_463E0(v17[0]);
        if (__p)
        {
          __int16 v11 = __p;
          operator delete(__p);
        }
        for (int i = v23; i != &v22; int i = (uint64_t *)i[1])
        {
          uint64_t v8 = i[2];
          int v9 = (void *)MGGetStringAnswer();
          int v20 = v9;
          char v21 = 1;
          std::string __p = v9;
          LOBYTE(v11) = 1;
          if (v9) {
            CFRetain(v9);
          }
          char v12 = 0;
          v13[0] = 1;
          uint64_t v14 = 0;
          LOBYTE(v15) = 1;
          (*(void (**)(uint64_t, void **))(*(void *)v8 + 128))(v8, &__p);
          sub_72924((uint64_t)&v14);
          sub_72924((uint64_t)&v12);
          sub_72924((uint64_t)&__p);
          sub_72924((uint64_t)&v20);
        }
        sub_B8E4(&v22);
      }
      sub_4636C(v5);
    }
  }
}

void sub_3DB9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_8108((uint64_t *)va1);
  sub_470A4((uint64_t)va);
  sub_4636C(v2);
  _Unwind_Resume(a1);
}

void sub_3DBA20(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_3DBA30(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_3DBA4C(uint64_t a1)
{
  if (*(void *)(a1 + 648) != -1) {
    MGCancelNotifications();
  }

  sub_430D98(a1);
}

BOOL sub_3DBA90(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (a2->mScope == 1735159650 && a2->mSelector == 1684103987 && a2->mElement == 0)
  {
    uint64_t v15 = 0x676C6F6265414333;
    int v16 = 0;
    uint64_t v11 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v13 = a3;
    uint64_t v14 = a4;
    sub_1A4260((void *)(a1 + 496), (unsigned int *)&v15, (uint64_t)&v11);
    return 1;
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
}

BOOL sub_3DBB54(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (a2->mScope == 1735159650 && a2->mSelector == 1684103987 && a2->mElement == 0)
  {
    uint64_t v11 = 0x676C6F6265414333;
    int v12 = 0;
    uint64_t v7 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v9 = a3;
    uint64_t v10 = a4;
    sub_1A4AA0((void *)(a1 + 496), (unsigned int *)&v11, (uint64_t)&v7);
    return 1;
  }
  else
  {
    return sub_431F5C(a1, a2, a3, a4);
  }
}

uint64_t sub_3DBBEC(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v25);
      uint64_t v15 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v30 = "Device_HDMI_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 352;
      __int16 v33 = 2080;
      int v34 = (const char *)v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v17 = (os_log_t *)sub_32A48(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v25);
      std::string::size_type v19 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      uint64_t v30 = "Device_HDMI_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 353;
      __int16 v33 = 2080;
      int v34 = (const char *)v19;
      __int16 v35 = 1024;
      LODWORD(v36[0]) = a3;
      WORD2(v36[0]) = 2048;
      *(void *)((char *)v36 + 6) = a4;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    int v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v20 = &off_6414D8;
    v20[2] = 561211770;
  }
  if (!a6)
  {
    char v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v25);
      std::string::size_type v23 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      uint64_t v30 = "Device_HDMI_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 354;
      __int16 v33 = 2080;
      int v34 = "inData";
      __int16 v35 = 2080;
      v36[0] = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v24 = &off_6414D8;
    v24[2] = 561211770;
  }

  return sub_4321A0(a1, a2, a3, a4, a5, a6);
}

void sub_3DC010(unsigned __int8 *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
      int v16 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 314;
      __int16 v41 = 2080;
      int v42 = (const char *)v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v18 = (os_log_t *)sub_32A48(13);
    std::string::size_type v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
      int v20 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 315;
      __int16 v41 = 2080;
      int v42 = (const char *)v20;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    char v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v21 = &off_6414D8;
    v21[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v22 = (os_log_t *)sub_32A48(13);
    std::string::size_type v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
      uint64_t v24 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 316;
      __int16 v41 = 2080;
      int v42 = "outData";
      __int16 v43 = 2080;
      v44[0] = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v25 = &off_6414D8;
    v25[2] = 561211770;
  }
  if (a2->mSelector == 1885434482)
  {
    int v13 = a1[656];
LABEL_14:
    *(_DWORD *)a6 = v13;
    return;
  }
  if (a2->mSelector == 1684103987)
  {
    UInt32 v12 = *a5;
    if (v12 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
    {
      uint64_t v26 = (os_log_t *)sub_32A48(13);
      int v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
        int v28 = v37;
        size_t v29 = (void **)__p[0];
        UInt32 v30 = *a5;
        int v31 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        int v32 = __p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_HDMI_Aspen.cpp";
        if (v28 < 0) {
          int v32 = v29;
        }
        __int16 v39 = 1024;
        int v40 = 322;
        __int16 v41 = 2080;
        int v42 = (const char *)v32;
        __int16 v43 = 1024;
        LODWORD(v44[0]) = v30;
        WORD2(v44[0]) = 1024;
        *(_DWORD *)((char *)v44 + 6) = v31;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
      __int16 v33 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v33 = &off_6414D8;
      v33[2] = 561211770;
    }
    strcpy(buf, "3CAebolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LODWORD(__p[0]) = 0;
    if ((*(unsigned int (**)(unsigned __int8 *, unsigned char *))(*(void *)a1 + 16))(a1, buf))
    {
      (*(void (**)(unsigned __int8 *, unsigned char *, uint64_t, const void *, UInt32 *, void **))(*(void *)a1 + 40))(a1, buf, a3, a4, a5, __p);
      int v13 = LODWORD(__p[0]) != 1;
    }
    else
    {
      int v13 = 1;
    }
    goto LABEL_14;
  }

  sub_432AE8((uint64_t)a1, a2, a3, a4, a5, a6);
}

void sub_3DC6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3DC6E4(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      UInt32 v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      std::string::size_type v23 = "Device_HDMI_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 287;
      __int16 v26 = 2080;
      int v27 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      int v16 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      std::string::size_type v23 = "Device_HDMI_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 288;
      __int16 v26 = 2080;
      int v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      int v31 = a4;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v17 = &off_6414D8;
    v17[2] = 561211770;
  }
  if (a2->mSelector == 1684103987 || a2->mSelector == 1885434482) {
    return 4;
  }

  return sub_433254(a1, a2, a3, a4);
}

BOOL sub_3DCA24(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1684103987 && a2->mSelector != 1885434482 && sub_43356C(a1, a2);
}

BOOL sub_3DCA50(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1684103987 || a2->mSelector == 1885434482) {
    return 1;
  }
  sub_50848((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

void sub_3DCAB4(void *a1)
{
  *a1 = off_63BE48;
  sub_1A97C8((uint64_t)(a1 + 62));
  sub_43456C((uint64_t)a1);

  operator delete();
}

uint64_t sub_3DCB20(void *a1)
{
  *a1 = off_63BE48;
  sub_1A97C8((uint64_t)(a1 + 62));

  return sub_43456C((uint64_t)a1);
}

uint64_t sub_3DCB78(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3, int a4)
{
  uint64_t v7 = (void *)sub_433710(a1, a2, a3, a3, 0);
  void *v7 = off_63BE48;
  sub_1A9860((uint64_t)(v7 + 62));
  *(_DWORD *)(a1 + 640) = a4;
  *(void *)(a1 + 648) = -1;
  v15.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v16 = a2;
  *(void *)&v15.AudioObjectPropertySelector mSelector = 0x676C6F6270617272;
  unint64_t v8 = sub_26DAC(&v16, &v15, 0, 0);
  *((void *)&v11 + 1) = v9;
  *(void *)&long long v11 = v8;
  uint64_t v10 = v11 >> 32;
  BOOL v13 = (v10 & 0xFF00000000) != 0 && v10 != 0;
  *(unsigned char *)(a1 + 656) = v13;
  sub_436AD8(a1, 0, 0x6F757470u, 0);
  return a1;
}

void sub_3DCC44(_Unwind_Exception *a1)
{
  sub_1A97C8(v2);
  sub_43456C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3DCC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a6 + 48))(a6, a1, a2, a3, a4, a5);
    return 0;
  }
  else
  {
    uint64_t v6 = 2003329396;
    unint64_t v8 = (os_log_t *)sub_32A48(24);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      long long v11 = "ANCControlInterface.cpp";
      __int16 v12 = 1024;
      int v13 = 108;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Client passed NULL context.", (uint8_t *)&v10, 0x12u);
    }
  }
  return v6;
}

void sub_3DCD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __cxa_end_catch();
      JUMPOUT(0x3DCCD4);
    }
    int v10 = (os_log_t *)sub_32A48(24);
    long long v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "ANCControlInterface.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 121;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown from VAD.", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x3DCCD0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3DCE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a6 + 40))(a6, a1, a2, a3, a4, a5);
    return 0;
  }
  else
  {
    uint64_t v6 = 2003329396;
    unint64_t v8 = (os_log_t *)sub_32A48(24);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      long long v11 = "ANCControlInterface.cpp";
      __int16 v12 = 1024;
      int v13 = 88;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Client passed NULL context.", (uint8_t *)&v10, 0x12u);
    }
  }
  return v6;
}

void sub_3DCF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __cxa_end_catch();
      JUMPOUT(0x3DCEB0);
    }
    int v10 = (os_log_t *)sub_32A48(24);
    long long v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "ANCControlInterface.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 100;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown from VAD.", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x3DCEACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3DD020(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v5 = 0;
    *a4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 32))(a5, a1, a2, a3);
  }
  else
  {
    uint64_t v5 = 2003329396;
    uint64_t v7 = (os_log_t *)sub_32A48(24);
    unint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "ANCControlInterface.cpp";
      __int16 v11 = 1024;
      int v12 = 67;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Client passed NULL context.", (uint8_t *)&v9, 0x12u);
    }
  }
  return v5;
}

void sub_3DD130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      int v10 = (os_log_t *)sub_32A48(24);
      __int16 v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315394;
          *(void *)((char *)&a9 + 4) = "ANCControlInterface.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 80;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown from VAD.", (uint8_t *)&a9, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x3DD088);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3DD1FC(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    *a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 24))(a3, a1);
  }
  else
  {
    uint64_t v3 = 2003329396;
    uint64_t v5 = (os_log_t *)sub_32A48(24);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      unint64_t v8 = "ANCControlInterface.cpp";
      __int16 v9 = 1024;
      int v10 = 47;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Client passed NULL context.", (uint8_t *)&v7, 0x12u);
    }
  }
  return v3;
}

void sub_3DD304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      int v10 = (os_log_t *)sub_32A48(24);
      __int16 v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315394;
          *(void *)((char *)&a9 + 4) = "ANCControlInterface.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 59;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown from VAD.", (uint8_t *)&a9, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x3DD25CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3DD3D0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
  }
  else
  {
    uint64_t v3 = (os_log_t *)sub_32A48(24);
    uint64_t v2 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "ANCControlInterface.cpp";
        __int16 v7 = 1024;
        int v8 = 28;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d Client passed NULL context.", (uint8_t *)&v5, 0x12u);
      }
      LOBYTE(v2) = 0;
    }
  }
  return v2;
}

void sub_3DD4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __cxa_end_catch();
      JUMPOUT(0x3DD4A0);
    }
    int v10 = (os_log_t *)sub_32A48(24);
    __int16 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "ANCControlInterface.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 39;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown from VAD.", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x3DD49CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_3DD598(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0;
  }
}

uint64_t sub_3DD5E8(uint64_t a1, uint64_t a2)
{
  sub_3DD598((void *)a1);
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  int v5 = *(const void **)(a2 + 32);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    CFRetain(v5);
  }
  uint64_t v6 = *(const void **)(a2 + 40);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    CFRetain(v6);
  }
  __int16 v7 = *(const void **)(a2 + 48);
  if (v7)
  {
    *(void *)(a1 + 48) = v7;
    CFRetain(v7);
  }
  return a1;
}

void sub_3DD7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  int v10 = v9;

  a9.super_class = (Class)PersonalAudioListener;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_3DD9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

id sub_3DDA6C(uint64_t a1)
{
  uint64_t v2 = *(id *)sub_32A48(24);
  uint64_t v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "PersonalAudioInterface.mm";
    __int16 v7 = 1024;
    int v8 = 311;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PA update for personalMediaEnabledByRouteUID", (uint8_t *)&v5, 0x12u);
  }

  return [*(id *)(a1 + 32) _fire];
}

id sub_3DDB40(uint64_t a1)
{
  uint64_t v2 = *(id *)sub_32A48(24);
  uint64_t v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "PersonalAudioInterface.mm";
    __int16 v7 = 1024;
    int v8 = 320;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PA update for personalMediaConfigurationByRouteUID", (uint8_t *)&v5, 0x12u);
  }

  return [*(id *)(a1 + 32) _fire];
}

id sub_3DDC14(uint64_t a1)
{
  uint64_t v2 = *(id *)sub_32A48(24);
  uint64_t v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "PersonalAudioInterface.mm";
    __int16 v7 = 1024;
    int v8 = 329;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PA update for accommodationTypesByRouteUID", (uint8_t *)&v5, 0x12u);
  }

  return [*(id *)(a1 + 32) _fire];
}

void sub_3DDD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id **sub_3DDDAC(id **result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {

    operator delete();
  }
  return result;
}

id **sub_3DDDFC(id *a1)
{
  int v8 = a1;
  uint64_t v2 = (std::mutex *)((char *)*a1 + 32);
  std::mutex::lock(v2);
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 1);
  uint64_t v5 = v3[2];
  while (v4 != v5)
  {
    uint64_t v6 = *(void *)(v4 + 32);
    if (!v6) {
      sub_56964();
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
    v4 += 40;
  }
  std::mutex::unlock(v2);
  return sub_3DDDAC(&v8);
}

void sub_3DDEC8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    __int16 v17 = __cxa_begin_catch(a1);
    id v18 = *(id *)sub_32A48(13);
    if (v18)
    {
      std::string::size_type v19 = v18;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = v17[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a12) = 1024;
        DWORD1(a12) = v20;
        WORD4(a12) = 2080;
        *(void *)((char *)&a12 + 10) = "";
        a14 = 1024;
        a15 = 98;
        char v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v22 = v19;
        uint32_t v23 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    __int16 v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v25 = v24;
      id v26 = *(id *)sub_32A48(13);
      if (v26)
      {
        std::string::size_type v19 = v26;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v27;
          WORD6(a12) = 2080;
          *(void *)((char *)&a12 + 14) = "";
          HIWORD(a15) = 1024;
          a16 = 98;
          char v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v22 = v19;
          uint32_t v23 = 44;
          goto LABEL_13;
        }
LABEL_14:

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x3DDE88);
      }
    }
    else
    {
      id v28 = *(id *)sub_32A48(13);
      if (v28)
      {
        std::string::size_type v19 = v28;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = "";
          WORD6(a12) = 1024;
          *(_DWORD *)((char *)&a12 + 14) = 98;
          char v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v22 = v19;
          uint32_t v23 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }
  std::string::size_type v19 = 0;
  goto LABEL_16;
}

void sub_3DE32C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3DE344(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  sub_4F6C8((void *)(a1 + 8));
  uint64_t v5 = (void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    if (v6 == a2 + 8)
    {
      *(void *)(a1 + 32) = v4;
      (*(void (**)(void, uint64_t))(*(void *)*v5 + 24))(*v5, v4);
      return a1;
    }
    *(void *)(a1 + 32) = v6;
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 32);
  }
  *uint64_t v5 = 0;
  return a1;
}

void sub_3DE5D8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_3DE670(_Unwind_Exception *a1)
{
}

uint64_t sub_3DE688()
{
  uint64_t result = objc_opt_class();
  if (result)
  {
    uint64_t v1 = +[PASettings sharedInstance];
    unsigned int v2 = [v1 personalMediaEnabled];

    uint64_t v3 = +[PASettings sharedInstance];
    unint64_t v4 = ((unint64_t)[v3 personalAudioAccommodationTypes] >> 2) & 1;

    return v2 & v4;
  }
  return result;
}

void sub_3DE6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_3DE70C(void *a1, int a2)
{
  if (!objc_opt_class()) {
    return 0;
  }
  unint64_t v4 = +[PASettings sharedInstance];
  unsigned int v5 = [v4 personalMediaEnabledForRouteUID:*a1];

  if (!v5) {
    return 0;
  }
  uint64_t v6 = +[PASettings sharedInstance];
  BOOL v7 = ([v6 accommodationTypesForRouteUID:*a1] & a2) != 0;

  return v7;
}

void sub_3DE7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_3DE7BC()
{
  if (!objc_opt_class()) {
    return 0;
  }
  uint64_t v0 = +[PASettings sharedInstance];
  uint64_t v1 = [v0 personalMediaConfiguration];
  unsigned int v2 = [v1 preset];

  return v2;
}

void sub_3DE830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_3DE84C()
{
  if (!objc_opt_class()) {
    return 0;
  }
  uint64_t v0 = +[PASettings sharedInstance];
  uint64_t v1 = [v0 personalMediaConfiguration];
  unsigned int v2 = [v1 presetAdjustments];
  uint64_t v3 = [v2 objectForKey:PAPresetAdjustmentSpeechModeKey];

  return v3;
}

void sub_3DE8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_3DE904(void *a1)
{
  if (!objc_opt_class()) {
    return 0;
  }
  unsigned int v2 = +[PASettings sharedInstance];
  uint64_t v3 = [v2 personalMediaConfigurationForRouteUID:*a1];
  unint64_t v4 = [v3 preset];

  return v4;
}

void sub_3DE980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_3DE99C(void *a1)
{
  if (!objc_opt_class()) {
    return 0;
  }
  unsigned int v2 = +[PASettings sharedInstance];
  uint64_t v3 = [v2 personalMediaConfigurationForRouteUID:*a1];
  unint64_t v4 = [v3 presetAdjustments];
  unsigned int v5 = [v4 objectForKey:PAPresetAdjustmentSpeechModeKey];

  return v5;
}

void sub_3DEA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_3DEA5C()
{
  sub_3DEB58();
  uint64_t v0 = *(id *)sub_32A48(10);
  uint64_t v1 = v0;
  if (v0 && os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v2 = "ON";
    unsigned int v5 = "PersonalAudioInterface.mm";
    int v4 = 136315650;
    if (!byte_65FAF0) {
      unsigned int v2 = "OFF";
    }
    __int16 v6 = 1024;
    int v7 = 60;
    __int16 v8 = 2080;
    __int16 v9 = v2;
    _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PME keep VolumeLimit chain: %s", (uint8_t *)&v4, 0x1Cu);
  }

  return byte_65FAF0;
}

void sub_3DEB58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65FAF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65FAF8))
  {
    byte_65FAF0 = 0;
    __cxa_guard_release(&qword_65FAF8);
  }
}

void sub_3DEBB4(uint64_t a1, uint64_t a2)
{
  int v4 = +[PersonalAudioListener sharedInstance];
  sub_4F7D4((uint64_t)v5, a2);
  [v4 addListener:v5 withID:a1];
  sub_4F750(v5);
}

void sub_3DEC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F750((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t sub_3DEC78(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  long long v58 = *(_OWORD *)(a3 + 2);
  unsigned int v4 = *(_DWORD *)(a1 + 504);
  if (!v4) {
    return 561214578;
  }
  uint64_t v8 = a3[3] / v4;
  if (*(unsigned char *)(a1 + 364) && *a3)
  {
    unint64_t v9 = 0;
    int v10 = (void **)(a3 + 4);
    do
    {
      bzero(*v10, *((unsigned int *)v10 - 1));
      ++v9;
      v10 += 2;
    }
    while (v9 < *a3);
  }
  uint64_t v57 = 1;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 560) + 64))(*(void *)(a1 + 560), a4, v8, &v57);
  uint64_t v11 = *(void *)(a1 + 560);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    __int16 v47 = (os_log_t *)sub_32A48(13);
    int v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst[0]) = 136315394;
      *(void **)((char *)__dst + 4) = "ANCInterface.cpp";
      WORD2(__dst[1]) = 1024;
      *(_DWORD *)((char *)&__dst[1] + 6) = 188;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [mAncManager is NULL]: \"mAncManager is null, cannot query channel offset\"", (uint8_t *)__dst, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "mAncManager is null, cannot query channel offset");
  }
  uint64_t v13 = *(void *)(v11 + 64);
  int v50 = -1;
  int v51 = -1;
  int v53 = -1;
  int v54 = -1;
  int v55 = -1;
  int v56 = -1;
  uint64_t v14 = (const void **)sub_782C4(*(_DWORD *)(v12 + 8));
  memset(__dst, 0, sizeof(__dst));
  AudioObjectID v16 = *v14;
  AudioObjectPropertyAddress v15 = v14[1];
  int64_t v17 = v15 - (unsigned char *)*v14;
  if (v15 != *v14)
  {
    sub_787C0(__dst, v17 >> 2);
    id v18 = __dst[1];
    memmove(__dst[1], v16, v17);
    std::string::size_type v19 = __dst[0];
    unint64_t v20 = &v18[4 * (v17 >> 2)] - (char *)__dst[0];
    if ((int)(v20 >> 2) < 1)
    {
      if (!__dst[0]) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = (v20 >> 2);
      do
      {
        uint32_t v23 = &v56;
        switch(v19[v21])
        {
          case 0:
            goto LABEL_17;
          case 1:
            uint32_t v23 = &v55;
            goto LABEL_17;
          case 2:
            uint32_t v23 = &v54;
            goto LABEL_17;
          case 3:
            uint32_t v23 = (int *)&v52;
            goto LABEL_17;
          case 4:
            uint32_t v23 = &v51;
            goto LABEL_17;
          case 5:
            uint32_t v23 = &v50;
            goto LABEL_17;
          case 6:
            uint32_t v23 = &v53;
LABEL_17:
            int *v23 = v21;
            break;
          default:
            break;
        }
        ++v21;
      }
      while (v22 != v21);
    }
    operator delete(v19);
  }
LABEL_23:
  uint64_t v25 = *(void *)(a1 + 584);
  *(_OWORD *)std::string __dst = xmmword_4E7C20;
  if (v25)
  {
    sub_3FACA0(v25, __dst, (long long *)(v13 + 16 * v56 + 8), v8);
    uint64_t v26 = *(void *)(a1 + 584);
    *(_OWORD *)std::string __dst = xmmword_4E7C00;
    if (v26)
    {
      sub_3FACA0(v26, __dst, (long long *)(v13 + 16 * v55 + 8), v8);
      uint64_t v27 = *(void *)(a1 + 584);
      *(_OWORD *)std::string __dst = xmmword_4E7C50;
      if (v27)
      {
        sub_3FACA0(v27, __dst, (long long *)(v13 + 16 * v54 + 8), v8);
        uint64_t v28 = *(void *)(a1 + 584);
        *(_OWORD *)std::string __dst = xmmword_4E7C60;
        if (v28) {
          sub_3FACA0(v28, __dst, (long long *)(v13 + 16 * v53 + 8), v8);
        }
      }
    }
  }
  if (v51 != -1)
  {
    uint64_t v29 = *(void *)(a1 + 584);
    *(_OWORD *)std::string __dst = xmmword_4E7C70;
    if (v29) {
      sub_3FACA0(v29, __dst, (long long *)(v13 + 16 * v51 + 8), v8);
    }
  }
  if (v50 != -1)
  {
    uint64_t v30 = *(void *)(a1 + 584);
    *(_OWORD *)std::string __dst = xmmword_4E7C80;
    if (v30) {
      sub_3FACA0(v30, __dst, (long long *)(v13 + 16 * v50 + 8), v8);
    }
  }
  uint64_t v31 = *(unsigned int *)(a1 + 576);
  if (v31)
  {
    uint64_t v32 = *(void *)(a1 + 592);
    if (v32) {
      sub_3FE9FC(v32, 1u, *(void *)(a1 + 568), v31);
    }
    *(_DWORD *)(a1 + 576) = 0;
  }
  __int16 v33 = *(void **)(a1 + 560);
  uint64_t v34 = v33[272];
  if (v34)
  {
    v33[272] = 0;
    if (v34)
    {
      uint64_t v35 = *(void *)(a1 + 592);
      if (v35)
      {
        sub_3FE9FC(v35, 0, (uint64_t)(v33 + 16), v34);
        __int16 v33 = *(void **)(a1 + 560);
      }
    }
  }
  if (v33[278])
  {
    uint64_t v36 = (uint64_t *)v33[275];
    uint64_t v37 = v36[1];
    if (v37 == *v36) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = *v36;
    }
    uint64_t v39 = v37 - *v36;
    uint64_t v41 = v36[3];
    uint64_t v40 = v36[4];
    if (v40 == v41) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v36[3];
    }
    v33[278] = 0;
    if (v39) {
      BOOL v43 = v38 == 0;
    }
    else {
      BOOL v43 = 1;
    }
    if (!v43)
    {
      uint64_t v44 = *(void *)(a1 + 592);
      if (v44) {
        sub_3FE9FC(v44, 2u, v38, v39);
      }
    }
    if (v40 != v41 && v42 != 0)
    {
      uint64_t v46 = *(void *)(a1 + 592);
      if (v46) {
        sub_3FE9FC(v46, 3u, v42, (v40 - v41));
      }
    }
  }
  return 0;
}

void sub_3DF0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_3DF148(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_3DF154(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_3DF164()
{
  return 0;
}

void sub_3DF16C()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 154;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF238(_Unwind_Exception *exception_object)
{
}

void sub_3DF254()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 150;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF320(_Unwind_Exception *exception_object)
{
}

void sub_3DF33C()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 147;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF408(_Unwind_Exception *exception_object)
{
}

void sub_3DF424()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 143;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF4F0(_Unwind_Exception *exception_object)
{
}

void sub_3DF50C()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 142;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF5D8(_Unwind_Exception *exception_object)
{
}

void sub_3DF5F4()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 141;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF6C0(_Unwind_Exception *exception_object)
{
}

void sub_3DF6DC()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 140;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF7A8(_Unwind_Exception *exception_object)
{
}

void sub_3DF7C4()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 139;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF890(_Unwind_Exception *exception_object)
{
}

void sub_3DF8AC()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 138;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DF978(_Unwind_Exception *exception_object)
{
}

void sub_3DF994()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 137;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DFA60(_Unwind_Exception *exception_object)
{
}

void sub_3DFA7C()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateDevice_ANCMonitor.h";
      __int16 v5 = 1024;
      int v6 = 136;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"calling this function is illegal.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "calling this function is illegal.");
}

void sub_3DFB48(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3DFB64()
{
  return 0;
}

uint64_t sub_3DFB6C()
{
  return 1970171760;
}

uint64_t sub_3DFB78()
{
  return 0;
}

void sub_3DFB84(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL sub_3DFB98(uint64_t a1)
{
  if (!*(void *)(a1 + 424)) {
    return 0;
  }
  AudioObjectID v1 = *(_DWORD *)(a1 + 416);
  UInt32 ioDataSize = 4;
  unsigned int outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData)) {
    return 0;
  }
  if (outData >= 2)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    unsigned int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v13 = "AggregateDevice_ANCMonitor.cpp";
      __int16 v14 = 1024;
      int v15 = 588;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a non-BOOLean value\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL returned a non-BOOLean value");
  }
  if (ioDataSize != 4)
  {
    int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        uint64_t v13 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v14 = 1024;
        int v15 = 589;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned an oddly sized value\"", buf, 0x12u);
      }
    }
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "The HAL returned an oddly sized value");
  }
  return outData == 1;
}

void sub_3DFDA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3DFDC4(uint64_t a1, unsigned int a2)
{
  if (!*(void *)(a1 + 560))
  {
    int v95 = (os_log_t *)sub_32A48(13);
    int v96 = *v95;
    if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      __int16 v131 = 1024;
      int v132 = 412;
      _os_log_impl(&def_1E50E8, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mANCInterface is NULL]: \"Invalid mANCInterface\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid mANCInterface");
  }
  unsigned int v4 = (os_log_t *)sub_32A48(25);
  __int16 v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
    __int16 v131 = 1024;
    int v132 = 414;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Stopping ANC", buf, 0x12u);
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 560) + 16);
  if (!v6 || ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6) & 1) == 0)
  {
    sub_208FFC(3);
    if (!v7) {
      return;
    }
  }
  sub_273950();
  if ((sub_273510((uint64_t)&qword_64EA30) & 0x10) != 0) {
    return;
  }
  int v8 = sub_7A50((unsigned int *)a1, a2, 0);
  if ((~v8 & 3) != 0)
  {
    if (a2 == 1)
    {
      if ((v8 & 1) == 0) {
        return;
      }
    }
    else if (a2 || (v8 & 2) == 0)
    {
      return;
    }
    if (!*(void *)(a1 + 424))
    {
      int v98 = (os_log_t *)sub_32A48(13);
      char v99 = *v98;
      if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
        __int16 v131 = 1024;
        int v132 = 438;
        _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: \"No HAL IO Proc has been set.\"", buf, 0x12u);
      }
      int v100 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v100, "No HAL IO Proc has been set.");
    }
    (*(void (**)(void))(**(void **)(a1 + 456) + 160))(*(void *)(a1 + 456));
    uint64_t v36 = sub_32A48(16);
    uint64_t v37 = sub_32A48(25);
    char v38 = 0;
    uint64_t v39 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v40 = *(void *)(v36 + 8);
    while (1)
    {
      uint64_t v41 = *(int *)&buf[4 * v39];
      char v42 = v38;
      if (((v40 & v41) != 0) != ((*(void *)(v37 + 8) & v41) != 0)) {
        break;
      }
      char v38 = 1;
      uint64_t v39 = 1;
      if (v42) {
        goto LABEL_49;
      }
    }
    if ((v40 & v41) == 0) {
      uint64_t v36 = v37;
    }
LABEL_49:
    uint64_t v43 = sub_32A48(31);
    char v44 = 0;
    uint64_t v45 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v46 = *(void *)(v36 + 8);
    while (1)
    {
      uint64_t v47 = *(int *)&buf[4 * v45];
      char v48 = v44;
      if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
        break;
      }
      char v44 = 1;
      uint64_t v45 = 1;
      if (v48) {
        goto LABEL_55;
      }
    }
    if ((v46 & v47) == 0) {
      uint64_t v36 = v43;
    }
LABEL_55:
    uint64_t v49 = *(NSObject **)v36;
    if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(&v146, a2);
      int v50 = v146.__m_.__opaque[15];
      uint64_t sig = (std::mutex *)v146.__m_.__sig;
      int v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      int v53 = v50 >= 0 ? &v146 : sig;
      __int16 v131 = 1024;
      int v132 = 441;
      __int16 v133 = 2080;
      char v134 = (const char *)v53;
      __int16 v135 = 1024;
      LODWORD(v136) = v52;
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping IO type %s on AggregateDevice %u.", buf, 0x22u);
      if (v146.__m_.__opaque[15] < 0) {
        operator delete((void *)v146.__m_.__sig);
      }
    }
    if (a2 == 1) {
      int v54 = 0;
    }
    else {
      int v54 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 424);
    }
    OSStatus v55 = AudioDeviceStop(*(_DWORD *)(a1 + 416), v54);
    if (v55)
    {
      uint64_t v56 = sub_32A48(16);
      uint64_t v57 = sub_32A48(25);
      char v58 = 0;
      uint64_t v59 = 0;
      *(void *)int buf = 0x100000002;
      uint64_t v60 = *(void *)(v56 + 8);
      while (1)
      {
        uint64_t v61 = *(int *)&buf[4 * v59];
        char v62 = v58;
        if (((v60 & v61) != 0) != ((*(void *)(v57 + 8) & v61) != 0)) {
          break;
        }
        char v58 = 1;
        uint64_t v59 = 1;
        if (v62) {
          goto LABEL_72;
        }
      }
      if ((v60 & v61) == 0) {
        uint64_t v56 = v57;
      }
LABEL_72:
      int v63 = *(NSObject **)v56;
      if (v63 && os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v146, v55);
        OSStatus v64 = v55;
        int v65 = v146.__m_.__opaque[15];
        uint64_t v66 = v146.__m_.__sig;
        sub_4F64((uint64_t)&v145, (os_unfair_lock_t)(a1 + 8));
        int v67 = &v146;
        if (v65 < 0) {
          int v67 = (std::mutex *)v66;
        }
        if (v145.__cv_.__opaque[15] >= 0) {
          std::string v68 = (std::unique_lock<std::mutex> *)&v145;
        }
        else {
          std::string v68 = (std::unique_lock<std::mutex> *)v145.__cv_.__sig;
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
        __int16 v131 = 1024;
        int v132 = 444;
        __int16 v133 = 2080;
        char v134 = (const char *)v67;
        __int16 v135 = 2080;
        char v136 = v68;
        _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", buf, 0x26u);
        if (v145.__cv_.__opaque[15] < 0) {
          operator delete((void *)v145.__cv_.__sig);
        }
        OSStatus v55 = v64;
        if (v146.__m_.__opaque[15] < 0) {
          operator delete((void *)v146.__m_.__sig);
        }
      }
    }
    int v69 = sub_3E1168(*(void *)(a1 + 456));
    if (sub_2212D0(a1)) {
      goto LABEL_84;
    }
    AudioObjectID v71 = *(_DWORD *)(a1 + 416);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    uint64_t v72 = sub_32A48(13);
    if (*(unsigned char *)(v72 + 8))
    {
      char v73 = *(NSObject **)v72;
      if (*(void *)v72)
      {
        if (os_log_type_enabled(*(os_log_t *)v72, OS_LOG_TYPE_DEBUG))
        {
          v145.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v145.__cv_.__opaque = inAddress.mElement;
          sub_16C9C4((uint64_t)&v146, (unsigned int *)&v145);
          int v74 = v146.__m_.__opaque[15] >= 0 ? &v146 : (std::mutex *)v146.__m_.__sig;
          *(_DWORD *)int buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v131 = 1024;
          int v132 = 166;
          __int16 v133 = 2080;
          char v134 = (const char *)v74;
          __int16 v135 = 1024;
          LODWORD(v136) = v71;
          _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", buf, 0x22u);
          if (v146.__m_.__opaque[15] < 0) {
            operator delete((void *)v146.__m_.__sig);
          }
        }
      }
    }
    AudioObjectID v126 = v71;
    AudioObjectPropertyAddress v127 = inAddress;
    int v128 = 0;
    uint64_t v129 = 0;
    if (!sub_3E11D8((uint64_t)&v126))
    {
      uint64_t v86 = sub_32A48(13);
      if (*(unsigned char *)(v86 + 8))
      {
        char v87 = *(NSObject **)v86;
        if (*(void *)v86)
        {
          if (os_log_type_enabled(*(os_log_t *)v86, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v131 = 1024;
            int v132 = 219;
            __int16 v133 = 1024;
            LODWORD(v134) = v71;
            _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", buf, 0x18u);
          }
        }
      }
LABEL_84:
      LODWORD(v70) = 0;
LABEL_146:
      uint64_t v94 = *(void *)(a1 + 584);
      if (v94) {
        (*(void (**)(uint64_t))(*(void *)v94 + 32))(v94);
      }
      if (v55)
      {
        char v101 = (os_log_t *)sub_32A48(13);
        int v102 = *v101;
        if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
          __int16 v131 = 1024;
          int v132 = 469;
          _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stopResult): \"Unable to stop IO.\"", buf, 0x12u);
        }
        char v103 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v103 = &off_6414D8;
        void v103[2] = v55;
      }
      if (v70)
      {
        char v104 = (os_log_t *)sub_32A48(13);
        char v105 = *v104;
        if (*v104 && os_log_type_enabled(*v104, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v146, v70);
          int v106 = v146.__m_.__opaque[15] >= 0 ? &v146 : (std::mutex *)v146.__m_.__sig;
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
          __int16 v131 = 1024;
          int v132 = 473;
          __int16 v133 = 2080;
          char v134 = (const char *)v106;
          _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (isRunningResult): \"Error waiting to receive kAudioDevicePropertyDeviceIsRunning property notification while stopping I/O proc: %s\"", buf, 0x1Cu);
          if (v146.__m_.__opaque[15] < 0) {
            operator delete((void *)v146.__m_.__sig);
          }
        }
        char v107 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v107 = &off_6414D8;
        v107[2] = v70;
      }
      if (v69)
      {
        int v108 = (os_log_t *)sub_32A48(13);
        char v109 = *v108;
        if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
          __int16 v131 = 1024;
          int v132 = 477;
          _os_log_impl(&def_1E50E8, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (didStopResult): \"Error calling DidStopIO on physical devices.\"", buf, 0x12u);
        }
        int v110 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v110 = &off_6414D8;
        v110[2] = v69;
      }
      return;
    }
    memset(v146.__m_.__opaque, 0, sizeof(v146.__m_.__opaque));
    v146.__m_.__uint64_t sig = 850045863;
    memset(v145.__cv_.__opaque, 0, sizeof(v145.__cv_.__opaque));
    v145.__cv_.__uint64_t sig = 1018212795;
    char v125 = 0;
    AudioObjectID v119 = v71;
    sub_662FC(inClientData, v71, &inAddress, (uint64_t)&v145, (uint64_t)&v146, (uint64_t)&v125);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v77.__d_.__rep_) / -1000)
    {
      unint64_t v76 = sub_3E11D8((uint64_t)&v126);
      unint64_t v70 = HIDWORD(v76);
      if (HIDWORD(v76)) {
        goto LABEL_145;
      }
      if (!v76) {
        break;
      }
      if (i <= 0)
      {
        char v91 = (os_log_t *)sub_32A48(13);
        int v92 = *v91;
        if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
        {
          AudioObjectPropertyAddress v121 = inAddress;
          sub_16C9C4((uint64_t)&__lk, &v121.mSelector);
          char v93 = v123 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          *(_DWORD *)int buf = 136316930;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v131 = 1024;
          int v132 = 248;
          __int16 v133 = 2080;
          char v134 = "updated";
          __int16 v135 = 2080;
          char v136 = v93;
          __int16 v137 = 2080;
          char v138 = "updated";
          __int16 v139 = 1024;
          int v140 = 0;
          __int16 v141 = 1024;
          int v142 = 0;
          __int16 v143 = 1024;
          AudioObjectID v144 = v119;
          _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", buf, 0x42u);
          if (v123 < 0) {
            operator delete(__lk.__m_);
          }
        }
        LODWORD(v70) = 2003329396;
LABEL_145:
        sub_6651C((uint64_t)inClientData);
        std::condition_variable::~condition_variable(&v145);
        std::mutex::~mutex(&v146);
        goto LABEL_146;
      }
      v77.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v78 = sub_32A48(13);
      if (*(unsigned char *)(v78 + 8))
      {
        char v79 = *(NSObject **)v78;
        if (*(void *)v78)
        {
          if (os_log_type_enabled(*(os_log_t *)v78, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v131 = 1024;
            int v132 = 257;
            __int16 v133 = 2080;
            char v134 = "with timeout";
            __int16 v135 = 1024;
            LODWORD(v136) = v119;
            _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)int buf = &qword_64CC40;
      _DWORD buf[8] = 0;
      _DWORD buf[8] = sub_1D4024();
      __lk.__m_ = &v146;
      __lk.__owns_ = 1;
      std::mutex::lock(&v146);
      v80.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v125)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v81 = v80.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v81 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_103;
          }
          v82.__d_.__rep_ = v81 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v82.__d_.__rep_ >= 1) {
            break;
          }
LABEL_121:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v81 || v125) {
            goto LABEL_103;
          }
        }
        std::chrono::steady_clock::now();
        v83.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v83.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v84 = 0;
          goto LABEL_117;
        }
        if (v83.__d_.__rep_ < 1)
        {
          if ((unint64_t)v83.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_116;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v84 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v83.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v84 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_117;
          }
LABEL_116:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v84 = 1000 * v83.__d_.__rep_;
LABEL_117:
          if (v84 > (v82.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v85.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_120:
            std::condition_variable::__do_timed_wait(&v145, &__lk, v85);
            std::chrono::steady_clock::now();
            goto LABEL_121;
          }
        }
        v85.__d_.__rep_ = v84 + v82.__d_.__rep_;
        goto LABEL_120;
      }
LABEL_103:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)buf);
    }
    uint64_t v88 = sub_32A48(13);
    if (*(unsigned char *)(v88 + 8))
    {
      char v89 = *(NSObject **)v88;
      if (*(void *)v88)
      {
        if (os_log_type_enabled(*(os_log_t *)v88, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyAddress v121 = inAddress;
          sub_16C9C4((uint64_t)&__lk, &v121.mSelector);
          int v90 = v123 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          *(_DWORD *)int buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v131 = 1024;
          int v132 = 288;
          __int16 v133 = 2080;
          char v134 = (const char *)v90;
          __int16 v135 = 1024;
          LODWORD(v136) = v119;
          _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", buf, 0x22u);
          if (v123 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    LODWORD(v70) = 0;
    goto LABEL_145;
  }
  uint64_t v9 = sub_32A48(16);
  uint64_t v10 = sub_32A48(25);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_20;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_20:
  uint64_t v16 = sub_32A48(31);
  char v17 = 0;
  uint64_t v18 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v19 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v21) {
      goto LABEL_26;
    }
  }
  if ((v19 & v20) == 0) {
    uint64_t v9 = v16;
  }
LABEL_26:
  uint64_t v22 = *(NSObject **)v9;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(&v146, a2);
    int v23 = v146.__m_.__opaque[15];
    __int16 v24 = (std::mutex *)v146.__m_.__sig;
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
    uint64_t v26 = v23 >= 0 ? &v146 : v24;
    __int16 v131 = 1024;
    int v132 = 427;
    __int16 v133 = 2080;
    char v134 = (const char *)v26;
    __int16 v135 = 1024;
    LODWORD(v136) = v25;
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping IO type %s on AggregateDevice %u.", buf, 0x22u);
    if (v146.__m_.__opaque[15] < 0) {
      operator delete((void *)v146.__m_.__sig);
    }
  }
  if (a2 == 1) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 424);
  }
  OSStatus v28 = AudioDeviceStop(*(_DWORD *)(a1 + 416), v27);
  if (v28)
  {
    uint64_t v29 = sub_32A48(16);
    uint64_t v30 = sub_32A48(25);
    char v31 = 0;
    uint64_t v32 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v33 = *(void *)(v29 + 8);
    while (1)
    {
      uint64_t v34 = *(int *)&buf[4 * v32];
      char v35 = v31;
      if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
        break;
      }
      char v31 = 1;
      uint64_t v32 = 1;
      if (v35) {
        goto LABEL_178;
      }
    }
    if ((v33 & v34) == 0) {
      uint64_t v29 = v30;
    }
LABEL_178:
    char v111 = *(NSObject **)v29;
    if (v111 && os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v146, v28);
      int v112 = v146.__m_.__opaque[15];
      uint64_t v113 = v146.__m_.__sig;
      sub_4F64((uint64_t)&v145, (os_unfair_lock_t)(a1 + 8));
      char v114 = &v146;
      if (v112 < 0) {
        char v114 = (std::mutex *)v113;
      }
      if (v145.__cv_.__opaque[15] >= 0) {
        char v115 = (std::unique_lock<std::mutex> *)&v145;
      }
      else {
        char v115 = (std::unique_lock<std::mutex> *)v145.__cv_.__sig;
      }
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      __int16 v131 = 1024;
      int v132 = 430;
      __int16 v133 = 2080;
      char v134 = (const char *)v114;
      __int16 v135 = 2080;
      char v136 = v115;
      _os_log_impl(&def_1E50E8, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", buf, 0x26u);
      if (v145.__cv_.__opaque[15] < 0) {
        operator delete((void *)v145.__cv_.__sig);
      }
      if (v146.__m_.__opaque[15] < 0) {
        operator delete((void *)v146.__m_.__sig);
      }
    }
    int v116 = (os_log_t *)sub_32A48(13);
    char v117 = *v116;
    if (*v116)
    {
      if (os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
        __int16 v131 = 1024;
        int v132 = 433;
        _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stopResult): \"Unable to stop IO.\"", buf, 0x12u);
      }
    }
    char v118 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v118 = &off_6414D8;
    v118[2] = v28;
  }
}

void sub_3E10A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_6651C((uint64_t)va);
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 - 232));
  std::mutex::~mutex((std::mutex *)(v13 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_3E1168(uint64_t a1)
{
  return 0;
}

void sub_3E11AC(void *a1)
{
}

unint64_t sub_3E11D8(uint64_t a1)
{
  unsigned int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_1E0594((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        char v11 = v20;
        if (v9 < 0) {
          char v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        OSStatus v28 = v11;
        __int16 v29 = 2080;
        uint64_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_3E1384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3E13AC(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 560);
  if (!v3)
  {
    char v124 = (os_log_t *)sub_32A48(13);
    char v125 = *v124;
    if (*v124 && os_log_type_enabled(*v124, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 332;
      _os_log_impl(&def_1E50E8, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mANCInterface is NULL]: \"Invalid mANCInterface\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid mANCInterface");
  }
  if (!*(void *)(a1 + 424))
  {
    AudioObjectPropertyAddress v127 = (os_log_t *)sub_32A48(13);
    int v128 = *v127;
    if (*v127 && os_log_type_enabled(*v127, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 333;
      _os_log_impl(&def_1E50E8, v128, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mHALIOProcID is NULL]: \"No HAL IO Proc has been set.\"", buf, 0x12u);
    }
    uint64_t v129 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v129, "No HAL IO Proc has been set.");
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v3 + 104))(v3, 0x10000, buf);
  if (*(float *)buf == 0.0)
  {
    char v5 = (os_log_t *)sub_32A48(25);
    char v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 337;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Enabling ANC", buf, 0x12u);
    }
    sub_3E2B44(a1);
  }
  int v7 = (os_log_t *)sub_32A48(25);
  int v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 341;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Starting ANC", buf, 0x12u);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 560) + 16);
  if (!v9 || ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9) & 1) == 0)
  {
    sub_208FFC(3);
    if (!v10) {
      return;
    }
  }
  sub_273950();
  if ((sub_273510((uint64_t)&qword_64EA30) & 0x10) != 0) {
    return;
  }
  char v11 = sub_7A50((unsigned int *)a1, a2, 1);
  if ((v11 & 3) != 0)
  {
    BOOL v13 = (v11 & 1) == 0 || a2 != 1;
    uint64_t v14 = sub_32A48(16);
    uint64_t v15 = sub_32A48(25);
    char v16 = 0;
    uint64_t v17 = 0;
    if (v13)
    {
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v18 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v19 = *(int *)&buf[4 * v17];
        char v20 = v16;
        if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
          break;
        }
        char v16 = 1;
        uint64_t v17 = 1;
        if (v20) {
          goto LABEL_38;
        }
      }
      if ((v18 & v19) == 0) {
        uint64_t v14 = v15;
      }
LABEL_38:
      uint64_t v32 = sub_32A48(31);
      char v33 = 0;
      uint64_t v34 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v35 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v36 = *(int *)&buf[4 * v34];
        char v37 = v33;
        if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
          break;
        }
        char v33 = 1;
        uint64_t v34 = 1;
        if (v37) {
          goto LABEL_50;
        }
      }
      if ((v35 & v36) == 0) {
        uint64_t v14 = v32;
      }
LABEL_50:
      char v44 = *(NSObject **)v14;
      if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&__p, a2);
        int v45 = SHIBYTE(v161);
        uint64_t v46 = (void **)__p;
        int v47 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
        char v48 = v45 >= 0 ? &__p : v46;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 397;
        __int16 v174 = 2080;
        char v175 = v48;
        __int16 v176 = 1024;
        LODWORD(v177) = v47;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting IO type %s on AggregateDevice %u.", buf, 0x22u);
        if (SHIBYTE(v161) < 0) {
          operator delete(__p);
        }
      }
      OSStatus v49 = AudioDeviceStart(*(_DWORD *)(a1 + 416), 0);
      if (v49)
      {
        sub_7A50((unsigned int *)a1, a2, 0);
        uint64_t v50 = sub_32A48(16);
        uint64_t v51 = sub_32A48(25);
        char v52 = 0;
        uint64_t v53 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v54 = *(void *)(v50 + 8);
        while (1)
        {
          uint64_t v55 = *(int *)&buf[4 * v53];
          char v56 = v52;
          if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
            break;
          }
          char v52 = 1;
          uint64_t v53 = 1;
          if (v56) {
            goto LABEL_189;
          }
        }
        if ((v54 & v55) == 0) {
          uint64_t v50 = v51;
        }
LABEL_189:
        char v148 = *(NSObject **)v50;
        if (v148 && os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&__p, v49);
          int v149 = SHIBYTE(v161);
          char v150 = (void **)__p;
          sub_4F64((uint64_t)&v172, (os_unfair_lock_t)(a1 + 8));
          p_p = &__p;
          if (v149 < 0) {
            p_p = v150;
          }
          if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v152 = &v172;
          }
          else {
            int v152 = (std::string *)v172.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 402;
          __int16 v174 = 2080;
          char v175 = p_p;
          __int16 v176 = 2080;
          char v177 = v152;
          _os_log_impl(&def_1E50E8, v148, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", buf, 0x26u);
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v172.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v161) < 0) {
            operator delete(__p);
          }
        }
        char v153 = (os_log_t *)sub_32A48(13);
        int v154 = *v153;
        if (*v153)
        {
          if (os_log_type_enabled(*v153, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 403;
            _os_log_impl(&def_1E50E8, v154, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (startResult): \"Unable to start IO.\"", buf, 0x12u);
          }
        }
        char v155 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v155 = &off_6414D8;
        v155[2] = v49;
      }
    }
    else
    {
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v29 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v30 = *(int *)&buf[4 * v17];
        char v31 = v16;
        if (((v29 & v30) != 0) != ((*(void *)(v15 + 8) & v30) != 0)) {
          break;
        }
        char v16 = 1;
        uint64_t v17 = 1;
        if (v31) {
          goto LABEL_44;
        }
      }
      if ((v29 & v30) == 0) {
        uint64_t v14 = v15;
      }
LABEL_44:
      uint64_t v38 = sub_32A48(31);
      char v39 = 0;
      uint64_t v40 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v41 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&buf[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1;
        if (v43) {
          goto LABEL_64;
        }
      }
      if ((v41 & v42) == 0) {
        uint64_t v14 = v38;
      }
LABEL_64:
      uint64_t v57 = *(NSObject **)v14;
      if (*(void *)v14 && os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEFAULT))
      {
        int v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 392;
        __int16 v174 = 1024;
        LODWORD(v175) = v58;
        _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.", buf, 0x18u);
      }
    }
    return;
  }
  uint64_t v21 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 456) + 96))(*(void *)(a1 + 456), 0, 0);
  int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 112))(v21, a1 + 480);
  if (v22)
  {
    char v130 = (os_log_t *)sub_32A48(13);
    __int16 v131 = *v130;
    if (*v130 && os_log_type_enabled(*v130, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 355;
      _os_log_impl(&def_1E50E8, v131, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (formatResult) [error formatResult is an error]: \"Stream::GetCurrentFormat() returned an error.\"", buf, 0x12u);
    }
    int v132 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v132 = &off_6414D8;
    v132[2] = v22;
  }
  __int16 v23 = *(void **)(a1 + 480);
  unsigned int v24 = *(_DWORD *)(a1 + 496);
  unsigned int v25 = sub_786C4(*(_DWORD *)(*(void *)(a1 + 560) + 32));
  unsigned int v26 = *(_DWORD *)(a1 + 504);
  int v27 = *(_DWORD *)(a1 + 492);
  if (v26)
  {
    if ((v27 & 0x20) != 0)
    {
      unsigned int v28 = 1;
    }
    else
    {
      unsigned int v28 = *(_DWORD *)(a1 + 508);
      if (!v28)
      {
        unsigned int v26 = 0;
        goto LABEL_69;
      }
    }
    v26 /= v28;
  }
LABEL_69:
  std::string __p = v23;
  int v160 = v24 / v25;
  int v161 = 1;
  int v162 = v24 / v25;
  int v163 = 1;
  int v158 = 1819304813;
  int v159 = v27;
  int v164 = 8 * v26;
  int v165 = 0;
  uint64_t v59 = *(void *)(a1 + 472);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(a1 + 464);
  *(void *)&_DWORD buf[8] = v59;
  if (v59) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 16), 1uLL, memory_order_relaxed);
  }
  sub_D1200(v156, (uint64_t *)buf, 1);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v60 = *(void *)(a1 + 584);
  *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7C20;
  if (v60)
  {
    (*(void (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v60 + 16))(v60, buf, &__p, v156);
    uint64_t v61 = *(void *)(a1 + 584);
    *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7C00;
    if (v61)
    {
      (*(void (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v61 + 16))(v61, buf, &__p, v156);
      uint64_t v62 = *(void *)(a1 + 584);
      *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7C50;
      if (v62)
      {
        (*(void (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v62 + 16))(v62, buf, &__p, v156);
        uint64_t v63 = *(void *)(a1 + 584);
        *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7C60;
        if (v63)
        {
          (*(void (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v63 + 16))(v63, buf, &__p, v156);
          uint64_t v64 = *(void *)(a1 + 584);
          *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7C70;
          if (v64)
          {
            (*(void (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v64 + 16))(v64, buf, &__p, v156);
            uint64_t v65 = *(void *)(a1 + 584);
            *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_4E7C80;
            if (v65) {
              (*(void (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v65 + 16))(v65, buf, &__p, v156);
            }
          }
        }
      }
    }
  }
  uint64_t v66 = *(void *)(a1 + 592);
  if (v66 && byte_6615A0 == 1)
  {
    uint64_t v67 = sub_32A48(16);
    uint64_t v68 = sub_32A48(40);
    char v69 = 0;
    uint64_t v70 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v71 = *(void *)(v67 + 8);
    while (1)
    {
      uint64_t v72 = *(int *)&buf[4 * v70];
      char v73 = v69;
      if (((v71 & v72) != 0) != ((*(void *)(v68 + 8) & v72) != 0)) {
        break;
      }
      char v69 = 1;
      uint64_t v70 = 1;
      if (v73) {
        goto LABEL_89;
      }
    }
    if ((v71 & v72) == 0) {
      uint64_t v67 = v68;
    }
    uint64_t v71 = *(void *)(v67 + 8);
LABEL_89:
    if (v71)
    {
      int v74 = *(NSObject **)v67;
      if (v74)
      {
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AudioEANCMonitor.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 165;
          _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring EANC data log", buf, 0x12u);
        }
      }
    }
    uint64_t v75 = 0;
    uint64_t v76 = v66 + 8;
    do
    {
      std::chrono::system_clock::time_point v77 = (&off_63DD70)[2 * v75];
      buf[0] = 0;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D258, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65D258))
      {
        qword_65D250 = (uint64_t)CFTimeZoneCopySystem();
        __cxa_guard_release(&qword_65D258);
      }
      CFGregorianDate GregorianDate = CFAbsoluteTimeGetGregorianDate(Current, (CFTimeZoneRef)qword_65D250);
      snprintf(buf, 0x40uLL, "%04d%02d%02d.%02d%02d%02d", GregorianDate.year, (int)(*(void *)&GregorianDate.year >> 8) >> 24, (int)(*(void *)&GregorianDate.year >> 16) >> 24, (int)(*(void *)&GregorianDate.year >> 24) >> 24, *(int *)&GregorianDate.month >> 24, llround(GregorianDate.second));
      sub_186AD8(&v172);
      std::chrono::steady_clock::time_point v80 = std::string::append(&v172, "/AudioCapture", 0xDuLL);
      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v168.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      std::chrono::steady_clock::time_point v82 = std::string::append(&v168, "/ANC/", 5uLL);
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v169.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      size_t v84 = strlen(buf);
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v85 = std::string::append(&v169, buf, v84);
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v170.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      char v87 = std::string::append(&v170, "_", 1uLL);
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v171.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      size_t v89 = strlen(v77);
      int v90 = std::string::append(&v171, v77, v89);
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      int64_t v167 = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)char v166 = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v168.__r_.__value_.__l.__data_);
      }
      if (v167 >= 0) {
        int v92 = v166;
      }
      else {
        int v92 = (void **)v166[0];
      }
      if (v167 >= 0) {
        CFIndex v93 = HIBYTE(v167);
      }
      else {
        CFIndex v93 = (CFIndex)v166[1];
      }
      CFURLRef v94 = CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, (const UInt8 *)v92, v93, 0);
      *(void *)(v76 + 8 * v75) = off_6615A8(v94, LODWORD((&off_63DD70)[2 * v75 + 1]));
      CFRelease(v94);
      if (!*(void *)(v76 + 8 * v75))
      {
        uint64_t v95 = sub_32A48(16);
        uint64_t v96 = sub_32A48(40);
        char v97 = 0;
        uint64_t v98 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v99 = *(void *)(v95 + 8);
        while (1)
        {
          uint64_t v100 = *(int *)&buf[4 * v98];
          char v101 = v97;
          if (((v99 & v100) != 0) != ((*(void *)(v96 + 8) & v100) != 0)) {
            break;
          }
          char v97 = 1;
          uint64_t v98 = 1;
          if (v101) {
            goto LABEL_122;
          }
        }
        if ((v99 & v100) == 0) {
          uint64_t v95 = v96;
        }
LABEL_122:
        int v102 = *(NSObject **)v95;
        if (v102 && os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioEANCMonitor.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 175;
          __int16 v174 = 2080;
          char v175 = (void *)v77;
          _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d Configuring EANC data log %s failed", buf, 0x1Cu);
        }
      }
      if (SHIBYTE(v167) < 0) {
        operator delete(v166[0]);
      }
      ++v75;
    }
    while (v75 != 4);
  }
  sub_8108(v156);
  uint64_t v103 = *(void *)(a1 + 584);
  if (v103) {
    (*(void (**)(uint64_t))(*(void *)v103 + 24))(v103);
  }
  (*(void (**)(void))(**(void **)(a1 + 456) + 144))(*(void *)(a1 + 456));
  uint64_t v104 = sub_32A48(16);
  uint64_t v105 = sub_32A48(25);
  char v106 = 0;
  uint64_t v107 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v108 = *(void *)(v104 + 8);
  while (1)
  {
    uint64_t v109 = *(int *)&buf[4 * v107];
    char v110 = v106;
    if (((v108 & v109) != 0) != ((*(void *)(v105 + 8) & v109) != 0)) {
      break;
    }
    char v106 = 1;
    uint64_t v107 = 1;
    if (v110) {
      goto LABEL_135;
    }
  }
  if ((v108 & v109) == 0) {
    uint64_t v104 = v105;
  }
LABEL_135:
  uint64_t v111 = sub_32A48(31);
  char v112 = 0;
  uint64_t v113 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v114 = *(void *)(v104 + 8);
  while (1)
  {
    uint64_t v115 = *(int *)&buf[4 * v113];
    char v116 = v112;
    if (((v114 & v115) != 0) != ((*(void *)(v111 + 8) & v115) != 0)) {
      break;
    }
    char v112 = 1;
    uint64_t v113 = 1;
    if (v116) {
      goto LABEL_141;
    }
  }
  if ((v114 & v115) == 0) {
    uint64_t v104 = v111;
  }
LABEL_141:
  char v117 = *(NSObject **)v104;
  if (v117 && os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(&__p, a2);
    int v118 = SHIBYTE(v161);
    AudioObjectID v119 = (void **)__p;
    int v120 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
    AudioObjectPropertyAddress v121 = v118 >= 0 ? &__p : v119;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 367;
    __int16 v174 = 2080;
    char v175 = v121;
    __int16 v176 = 1024;
    LODWORD(v177) = v120;
    _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting IO type %s on AggregateDevice %u.", buf, 0x22u);
    if (SHIBYTE(v161) < 0) {
      operator delete(__p);
    }
  }
  if (a2 == 1) {
    char v122 = 0;
  }
  else {
    char v122 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 424);
  }
  OSStatus v123 = AudioDeviceStart(*(_DWORD *)(a1 + 416), v122);
  if (v123)
  {
    sub_7A50((unsigned int *)a1, a2, 0);
    uint64_t v133 = sub_32A48(16);
    uint64_t v134 = sub_32A48(25);
    char v135 = 0;
    uint64_t v136 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v137 = *(void *)(v133 + 8);
    while (1)
    {
      uint64_t v138 = *(int *)&buf[4 * v136];
      char v139 = v135;
      if (((v137 & v138) != 0) != ((*(void *)(v134 + 8) & v138) != 0)) {
        break;
      }
      char v135 = 1;
      uint64_t v136 = 1;
      if (v139) {
        goto LABEL_172;
      }
    }
    if ((v137 & v138) == 0) {
      uint64_t v133 = v134;
    }
LABEL_172:
    int v140 = *(NSObject **)v133;
    if (v140 && os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&__p, v123);
      int v141 = SHIBYTE(v161);
      int v142 = (void **)__p;
      sub_4F64((uint64_t)&v172, (os_unfair_lock_t)(a1 + 8));
      __int16 v143 = &__p;
      if (v141 < 0) {
        __int16 v143 = v142;
      }
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        AudioObjectID v144 = &v172;
      }
      else {
        AudioObjectID v144 = (std::string *)v172.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 375;
      __int16 v174 = 2080;
      char v175 = v143;
      __int16 v176 = 2080;
      char v177 = v144;
      _os_log_impl(&def_1E50E8, v140, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", buf, 0x26u);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v161) < 0) {
        operator delete(__p);
      }
    }
    sub_3E1168(*(void *)(a1 + 456));
    std::condition_variable v145 = (os_log_t *)sub_32A48(13);
    std::mutex v146 = *v145;
    if (*v145 && os_log_type_enabled(*v145, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 377;
      _os_log_impl(&def_1E50E8, v146, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (startResult): \"Unable to start IO.\"", buf, 0x12u);
    }
    char v147 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v147 = &off_6414D8;
    v147[2] = v123;
  }
  (*(void (**)(void))(**(void **)(a1 + 456) + 152))(*(void *)(a1 + 456));
}

void sub_3E2808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  __cxa_guard_abort(&qword_65D258);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3E281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_3E285C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    char v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v7 = v6[2];
      __cxa_end_catch();
      if (!v7) {
        JUMPOUT(0x3E220CLL);
      }
    }
    else
    {
      __cxa_end_catch();
      int v7 = 2003329396;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 256))(v2, v3);
    int v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)(v4 - 192) = 136315394;
        uint64_t v10 = v4 - 192;
        *(void *)(v10 + 4) = "AggregateDevice_ANCMonitor.cpp";
        *(_WORD *)(v4 - 180) = 1024;
        *(_DWORD *)(v10 + 14) = 384;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (didStartResult): \"Error calling DidStartIO on physical devices.\"", (uint8_t *)(v4 - 192), 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v7;
  }
  _Unwind_Resume(a1);
}

void sub_3E2980(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v5 = v4[2];
      __cxa_end_catch();
      if (!v5) {
        JUMPOUT(0x3E202CLL);
      }
    }
    else
    {
      __cxa_end_catch();
      int v5 = 2003329396;
    }
    char v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)(v2 - 192) = 136315394;
        uint64_t v8 = v2 - 192;
        *(void *)(v8 + 4) = "AggregateDevice_ANCMonitor.cpp";
        *(_WORD *)(v2 - 180) = 1024;
        *(_DWORD *)(v8 + 14) = 364;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (willStartResult): \"Error calling WillStartIO on physical devices.\"", (uint8_t *)(v2 - 192), 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v5;
  }
  _Unwind_Resume(a1);
}

void sub_3E2A74(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 184);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

void sub_3E2A88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3E2A9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_8108(&a19);
  JUMPOUT(0x3E2B3CLL);
}

uint64_t sub_3E2B44(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 40))(v2) == 560488803
    && (uint64_t v3 = sub_298DA4(), !(*(unsigned int (**)(uint64_t))(*(void *)v3 + 64))(v3)))
  {
    sub_273950();
    BOOL v4 = (sub_273510((uint64_t)&qword_64EA30) & 0x10) == 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  uint64_t v5 = sub_32A48(16);
  uint64_t v6 = sub_32A48(25);
  char v7 = 0;
  uint64_t v8 = 0;
  *(void *)uint64_t v14 = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&v14[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11) {
      goto LABEL_10;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_10:
  uint64_t v12 = *(NSObject **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v14 = 136315650;
    *(void *)&v14[4] = "AggregateDevice_ANCMonitor.cpp";
    __int16 v15 = 1024;
    int v16 = 812;
    __int16 v17 = 1024;
    BOOL v18 = v4;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling ANC: %u", v14, 0x18u);
  }
  return (*(uint64_t (**)(void, uint64_t, float))(**(void **)(a1 + 560) + 96))(*(void *)(a1 + 560), 0x10000, (float)v4);
}

uint64_t sub_3E2D30()
{
  return 0;
}

uint64_t sub_3E2D40(uint64_t a1, void *a2)
{
  unint64_t v9 = 0;
  if ((sub_21FCE4(a2, (double *)&v9) & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    char v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v11 = "AggregateDevice_ANCMonitor.cpp";
      __int16 v12 = 1024;
      int v13 = 324;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Called with an invalid sample rate description\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  v3.n128_u64[0] = v9;
  BOOL v4 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 112);

  return v4(a1, v3);
}

uint64_t sub_3E2E9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

void sub_3E2EC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  unint64_t v3 = *(void *)(a1 + 456);
  double v4 = (*(double (**)(unint64_t))(*(void *)v3 + 104))(v3);
  sub_21FDD0((uint64_t **)a2, v3, v4);
}

void sub_3E2F30(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_3E2F4C(uint64_t *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)v8, 0, v2, a1[53]);
  unint64_t v3 = v9;
  uint64_t v4 = *((unsigned int *)v9 + 2);
  if (v4)
  {
    bzero((char *)v9 + 12, 4 * v4);
    sub_16D560((uint64_t)v8);
    unint64_t v3 = v9;
  }
  free(v3);
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)v8, 1, v5, a1[53]);
  uint64_t v6 = v9;
  uint64_t v7 = *((unsigned int *)v9 + 2);
  if (v7)
  {
    bzero((char *)v9 + 12, 4 * v7);
    sub_16D560((uint64_t)v8);
    uint64_t v6 = v9;
  }
  free(v6);
}

void sub_3E3038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t sub_3E3050(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 208);
  if (!result) {
    return *(void *)(*(void *)(*(void *)(a1 + 440) + 24) + 16);
  }
  return result;
}

void sub_3E3070(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AudioObjectID v3 = *(_DWORD *)(a1 + 416);
  uint64_t outData = 0;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6275696420;
  OSStatus PropertyData = AudioObjectGetPropertyData(v3, &inAddress, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    uint64_t v5 = sub_32A48(16);
    uint64_t v6 = sub_32A48(25);
    char v7 = 0;
    uint64_t v8 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1;
      if (v11) {
        goto LABEL_8;
      }
    }
    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_8:
    __int16 v12 = *(NSObject **)v5;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, PropertyData);
      if (v15 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
      __int16 v20 = 1024;
      int v21 = 688;
      __int16 v22 = 2080;
      __int16 v23 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyData(kAudioDevicePropertyDeviceUID) returned status %s.", buf, 0x1Cu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  *(void *)a2 = outData;
  *(unsigned char *)(a2 + 8) = 1;
}

uint64_t sub_3E3228(uint64_t a1)
{
  return *(unsigned int *)(a1 + 416);
}

uint64_t sub_3E3230()
{
  uint64_t v0 = sub_32A48(16);
  uint64_t v1 = sub_32A48(25);
  char v2 = 0;
  uint64_t v3 = 0;
  *(void *)uint64_t v9 = 0x100000002;
  uint64_t v4 = *(void *)(v0 + 8);
  while (1)
  {
    uint64_t v5 = *(int *)&v9[4 * v3];
    char v6 = v2;
    if (((v4 & v5) != 0) != ((*(void *)(v1 + 8) & v5) != 0)) {
      break;
    }
    char v2 = 1;
    uint64_t v3 = 1;
    if (v6) {
      goto LABEL_7;
    }
  }
  if ((v4 & v5) == 0) {
    uint64_t v0 = v1;
  }
LABEL_7:
  char v7 = *(NSObject **)v0;
  if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v9 = 136315394;
    *(void *)&integer_t v9[4] = "AggregateDevice_ANCMonitor.cpp";
    __int16 v10 = 1024;
    int v11 = 668;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Setting sample rate is not supported on AggregateDevice_ANCMonitor", v9, 0x12u);
  }
  return 1970171760;
}

double sub_3E3358(uint64_t a1)
{
  double v5 = 0.0;
  int v4 = 8;
  uint64_t v2 = 0x676C6F626E737274;
  int v3 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a1 + 40))(a1, &v2, 0, 0, &v4, &v5);
  return v5;
}

uint64_t sub_3E33CC()
{
  uint64_t v0 = sub_32A48(16);
  uint64_t v1 = sub_32A48(25);
  char v2 = 0;
  uint64_t v3 = 0;
  *(void *)uint64_t v9 = 0x100000002;
  uint64_t v4 = *(void *)(v0 + 8);
  while (1)
  {
    uint64_t v5 = *(int *)&v9[4 * v3];
    char v6 = v2;
    if (((v4 & v5) != 0) != ((*(void *)(v1 + 8) & v5) != 0)) {
      break;
    }
    char v2 = 1;
    uint64_t v3 = 1;
    if (v6) {
      goto LABEL_7;
    }
  }
  if ((v4 & v5) == 0) {
    uint64_t v0 = v1;
  }
LABEL_7:
  char v7 = *(NSObject **)v0;
  if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v9 = 136315394;
    *(void *)&integer_t v9[4] = "AggregateDevice_ANCMonitor.cpp";
    __int16 v10 = 1024;
    int v11 = 649;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d AggregateDevice_ANCMonitor does not have any Client Visible streams", v9, 0x12u);
  }
  return 0;
}

uint64_t sub_3E34F0()
{
  return 0;
}

uint64_t sub_3E34FC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((result & 1) == 0)
  {
    char v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        char v6 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v7 = 1024;
        int v8 = 281;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v5, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  return result;
}

uint64_t sub_3E362C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((result & 1) == 0)
  {
    char v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        char v6 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v7 = 1024;
        int v8 = 273;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v5, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  return result;
}

uint64_t sub_3E375C(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      char v6 = "AggregateDevice_ANCMonitor.cpp";
      __int16 v7 = 1024;
      int v8 = 264;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  return 0;
}

uint64_t sub_3E3890(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      char v6 = "AggregateDevice_ANCMonitor.cpp";
      __int16 v7 = 1024;
      int v8 = 255;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  return 0;
}

uint64_t sub_3E39C4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = sub_32A48(16);
  uint64_t v4 = sub_32A48(25);
  char v5 = 0;
  uint64_t v6 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&buf[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1;
    if (v9) {
      goto LABEL_7;
    }
  }
  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_7:
  __int16 v10 = *(NSObject **)v3;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(__p, *a2);
    if (v14 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateDevice_ANCMonitor.cpp";
    __int16 v16 = 1024;
    int v17 = 246;
    __int16 v18 = 2080;
    uint64_t v19 = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HasProperty() for selector '%s' not supported by AggregateDevice_ANCMonitor.", buf, 0x1Cu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_3E3B2C(uint64_t a1)
{
  sub_3E3B64(a1);

  operator delete();
}

uint64_t sub_3E3B64(uint64_t a1)
{
  *(void *)a1 = off_63C0F8;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t)))(*(void *)v2 + 56))(v2, sub_3E3D18);
  uint64_t v3 = sub_298DA4();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t)))(*(void *)v3 + 80))(v3, sub_3E3D18);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 560) + 96))(*(void *)(a1 + 560), 0x10000, 0.0);
  sub_329A4C(*(unsigned int *)(a1 + 416), *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 424));
  uint64_t v4 = *(void *)(a1 + 560);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_329688(*(_DWORD *)(a1 + 416));
  char v5 = *(void **)(a1 + 568);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 472);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_A60C4((uint64_t *)(a1 + 432));

  return sub_22117C(a1);
}

uint64_t sub_3E3D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    int v13 = (os_log_t *)sub_32A48(13);
    char v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v29 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v30 = 1024;
        int v31 = 709;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inNow is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a3)
  {
    char v15 = (os_log_t *)sub_32A48(13);
    __int16 v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v29 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v30 = 1024;
        int v31 = 710;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inInputData is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a4)
  {
    int v17 = (os_log_t *)sub_32A48(13);
    __int16 v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v29 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v30 = 1024;
        int v31 = 711;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inInputTime is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a5)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    __int16 v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v29 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v30 = 1024;
        int v31 = 712;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"outOutputData is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a6)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    __int16 v22 = *v21;
    if (*v21)
    {
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v29 = "AggregateDevice_ANCMonitor.cpp";
        __int16 v30 = 1024;
        int v31 = 713;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inOutputTime is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (a7)
  {
    uint64_t v27 = a7;
    *(void *)(a7 + 328) = pthread_self();
    *(unsigned char *)(a7 + 320) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 568))(a7, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    __int16 v23 = (os_log_t *)sub_32A48(13);
    unsigned int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v29 = "AggregateDevice_ANCMonitor.cpp";
      __int16 v30 = 1024;
      int v31 = 714;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inClientData is NULL.\"", buf, 0x12u);
    }
    sub_287344(&v27, 0);
  }
  uint64_t v25 = v27;
  if (v27)
  {
    *(unsigned char *)(v27 + 320) = 0;
    *(void *)(v25 + 328) = 0;
  }
  return 0;
}

void sub_3E40D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf, long long a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v13 = __cxa_begin_catch(exception_object);
    uint64_t v14 = sub_32A48(16);
    uint64_t v15 = sub_32A48(25);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)&AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *((int *)&buf + v17);
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20) {
        goto LABEL_14;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_14:
    __int16 v30 = *(NSObject **)v14;
    if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      int v31 = v13[2];
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "AggregateDevice_ANCMonitor.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 725;
      WORD1(a12) = 1024;
      DWORD1(a12) = v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown during HandleHALIOProc(): %d.", (uint8_t *)&buf, 0x18u);
    }
  }
  else
  {
    int v21 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v22 = v21;
      uint64_t v23 = sub_32A48(16);
      uint64_t v24 = sub_32A48(25);
      char v25 = 0;
      uint64_t v26 = 0;
      *(void *)&AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v27 = *(void *)(v23 + 8);
      while (1)
      {
        uint64_t v28 = *((int *)&buf + v26);
        char v29 = v25;
        if (((v27 & v28) != 0) != ((*(void *)(v24 + 8) & v28) != 0)) {
          break;
        }
        char v25 = 1;
        uint64_t v26 = 1;
        if (v29) {
          goto LABEL_24;
        }
      }
      if ((v27 & v28) == 0) {
        uint64_t v23 = v24;
      }
LABEL_24:
      char v39 = *(NSObject **)v23;
      if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AggregateDevice_ANCMonitor.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 726;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v40;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception thrown HandleHALIOProc(): %s.", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      uint64_t v32 = sub_32A48(16);
      uint64_t v33 = sub_32A48(25);
      char v34 = 0;
      uint64_t v35 = 0;
      *(void *)&AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v36 = *(void *)(v32 + 8);
      while (1)
      {
        uint64_t v37 = *((int *)&buf + v35);
        char v38 = v34;
        if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
          break;
        }
        char v34 = 1;
        uint64_t v35 = 1;
        if (v38) {
          goto LABEL_30;
        }
      }
      if ((v36 & v37) == 0) {
        uint64_t v32 = v33;
      }
LABEL_30:
      uint64_t v41 = *(NSObject **)v32;
      if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "AggregateDevice_ANCMonitor.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 727;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown HandleHALIOProc().", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x3E4088);
}

void sub_3E442C(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_54694();
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 56, 8);
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = v4;
  *(void *)(v5 + 32) = v3;
  *(_DWORD *)(v5 + 40) = a2;
  *(void *)uint64_t v5 = off_63C408;
  *(void *)(v5 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v5);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_3E4508(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_3E4534(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_3E457C((uint64_t)a1);
  return sub_3E45F0(&v2);
}

void sub_3E4568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3E45F0((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_3E457C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5) {
        sub_3E4754(v5);
      }
      sub_4636C(v4);
    }
  }
}

void sub_3E45DC(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **sub_3E45F0(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_63C430;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 56, 8);
  return a1;
}

void sub_3E4688(caulk::concurrent::message *this)
{
  *(void *)this = off_63C430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_3E46F8(caulk::concurrent::message *this)
{
  *(void *)this = off_63C430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t (***sub_3E4754(uint64_t a1))(void)
{
  notify_cancel(**(_DWORD **)(a1 + 24));
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t v3 = **result;
    return (uint64_t (***)(void))v3();
  }
  return result;
}

void sub_3E47C8(caulk::concurrent::message *this)
{
  *(void *)this = off_63C430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_3E4838(caulk::concurrent::message *this)
{
  *(void *)this = off_63C430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t (***sub_3E4894(uint64_t a1))(void)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (const char *)(v2 + 8);
  if (*(char *)(v2 + 31) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  uint64_t v4 = *(NSObject **)(v2 + 64);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_170B94;
  handler[3] = &unk_623820;
  handler[4] = v2;
  notify_register_dispatch(v3, (int *)v2, v4, handler);

  return sub_3E4938(a1);
}

uint64_t (***sub_3E4938(uint64_t a1))(void)
{
  uint64_t v2 = *(int **)(a1 + 24);
  uint64_t state64 = 0;
  if (notify_get_state(*v2, &state64))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v10 = "StandardUtilities.cpp";
      __int16 v11 = 1024;
      int v12 = 1711;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"notify_get_state() failed.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "notify_get_state() failed.");
  }
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t v4 = **result;
    return (uint64_t (***)(void))v4();
  }
  return result;
}

void sub_3E4AB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3E4AD4(void *a1)
{
  sub_3E4B0C(a1);

  operator delete();
}

void *sub_3E4B0C(void *a1)
{
  sub_3E4754((uint64_t)a1);
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_3E4B7C(a1 + 3);
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t *sub_3E4B7C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    notify_cancel(*(_DWORD *)v1);

    sub_27F9C8((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_3E4C04(uint64_t a1)
{
  sub_3E4C3C(a1);

  operator delete();
}

uint64_t sub_3E4C3C(uint64_t a1)
{
  *(void *)a1 = off_63C398;
  sub_3E4CA4(a1, 0);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_4636C(v2);
  }
  return a1;
}

void sub_3E4CA4(uint64_t a1, int a2)
{
  uint64_t v4 = *(id *)sub_32A48(17);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "Acquiring";
    if (!a2) {
      uint64_t v6 = "Releasing";
    }
    uint64_t v7 = (void *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    int v9 = 136315906;
    __int16 v10 = "ReceiverProximityIODelegate.mm";
    __int16 v11 = 1024;
    int v12 = 29;
    __int16 v13 = 2080;
    uint64_t v14 = v6;
    __int16 v15 = 2080;
    char v16 = v7;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s MMAssertion %s", (uint8_t *)&v9, 0x26u);
  }

  uint64_t v8 = *(uint64_t **)(a1 + 8);
  if (a2) {
    sub_5676C(v8);
  }
  else {
    sub_567A8((void ***)v8);
  }
}

uint64_t (***sub_3E4DD0(uint64_t a1))(void)
{
  return sub_3E4938(*(void *)(a1 + 8));
}

uint64_t sub_3E4DE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_63C3C0;
  a2[1] = v2;
  return result;
}

void *sub_3E4E04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_63C3C0;
  result[1] = v3;
  return result;
}

void sub_3E4E4C()
{
}

void *sub_3E4E68(uint64_t a1)
{
  return sub_3E4B0C((void *)(a1 + 24));
}

void sub_3E4E70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63C458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3E4EC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63C458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL sub_3E4EE4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_3E4F04(uint64_t a1, void *a2)
{
  *a2 = off_63C640;
}

void *sub_3E4F24()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63C640;
  return result;
}

void sub_3E4F5C()
{
}

BOOL sub_3E4F74(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_3E4F94(uint64_t a1, void *a2)
{
  *a2 = off_63C5F8;
}

void *sub_3E4FB4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63C5F8;
  return result;
}

void sub_3E4FEC()
{
}

uint64_t sub_3E5004(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_3E5078(uint64_t a1, void *a2)
{
  *a2 = off_63C5B0;
}

void *sub_3E5098()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63C5B0;
  return result;
}

void sub_3E50D0()
{
}

uint64_t sub_3E50E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3E5120(uint64_t a1, void *a2)
{
  *a2 = off_63C568;
}

void *sub_3E5140()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63C568;
  return result;
}

void sub_3E5178()
{
}

uint64_t sub_3E5190(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3E51C8(uint64_t a1, void *a2)
{
  *a2 = off_63C520;
}

void *sub_3E51E8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63C520;
  return result;
}

void sub_3E5220()
{
}

BOOL sub_3E5238(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_3E5260(uint64_t a1, void *a2)
{
  *a2 = off_63C4D8;
}

void *sub_3E5280()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63C4D8;
  return result;
}

void sub_3E52B8()
{
}

uint64_t sub_3E52D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_3E5308(uint64_t a1, void *a2)
{
  *a2 = off_63C490;
}

void *sub_3E5328()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63C490;
  return result;
}

void sub_3E5360()
{
}

void sub_3E5378(uint64_t a1)
{
  sub_3E53B0(a1);

  operator delete();
}

uint64_t sub_3E53B0(uint64_t a1)
{
  *(void *)a1 = off_63C7B8;
  uint64_t v2 = *(OpaqueAudioComponentInstance **)(a1 + 16);
  if (v2 && !*(_DWORD *)(a1 + 24)) {
    AudioComponentInstanceDispose(v2);
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_3E5414(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(atomic_uint **)(a1 + 56);
  uint64_t v4 = *(atomic_uint **)(a2 + 56);
  if (v3 != v4)
  {
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      }
      uint64_t v4 = *(atomic_uint **)(a2 + 56);
    }
    *(void *)(a1 + 56) = v4;
    if (v4) {
      atomic_fetch_add(v4 + 2, 1u);
    }
    sub_3DD5E8(a1, a2);
  }
  return a1;
}

void *sub_3E54AC(void *a1)
{
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    }
    a1[7] = 0;
  }
  sub_3DD598(a1);
  return a1;
}

uint64_t sub_3E5524(OpaqueAudioComponentInstance *a1, int a2)
{
  int inData = a2;
  if (a1) {
    a1 = (OpaqueAudioComponentInstance *)*((void *)a1 + 2);
  }
  return AudioUnitSetProperty(a1, 0xEu, 0, 0, &inData, 4u);
}

BOOL sub_3E5564(uint64_t *a1)
{
  uint64_t v2 = sub_3E5710(a1[1], a1[2], 1);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 96);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v2 + 88);
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_8:
    uint64_t v4 = 0;
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_4636C(v5);
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7) {
    uint64_t v4 = 0;
  }
LABEL_9:
  uint64_t v8 = (std::__shared_weak_count *)a1[4];
  if (!v8 || (int v9 = std::__shared_weak_count::lock(v8)) == 0)
  {
    BOOL v10 = v4 == 0;
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  BOOL v10 = v4 == a1[3];
  sub_4636C(v9);
  if (v7) {
LABEL_14:
  }
    sub_4636C(v7);
LABEL_15:
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    if (v10) {
      return 1;
    }
  }
  else if (v10)
  {
    return 1;
  }
LABEL_21:
  int v12 = (os_log_t *)sub_32A48(2);
  __int16 v13 = *v12;
  if (*v12)
  {
    BOOL result = os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v14 = 136315394;
    __int16 v15 = "RouteToPartnerHandler.cpp";
    __int16 v16 = 1024;
    int v17 = 126;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Something went wrong ! Not routed to partner port", (uint8_t *)&v14, 0x12u);
  }
  return 0;
}

uint64_t sub_3E5710(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      __int16 v11 = "RouteToPartnerHandler.cpp";
      __int16 v12 = 1024;
      int v13 = 18;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Invalid VAD argument\"", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid VAD argument");
  }
  uint64_t v4 = (void *)sub_BC8B0(a1, a3);
  if (!v4[2]) {
    return 0;
  }
  int v5 = *(_DWORD *)(*v4 + 28);

  return sub_E1B78(a2, v5);
}

void sub_3E5868(_Unwind_Exception *exception_object)
{
}

void sub_3E5884(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_3E5710(a1[1], a1[2], 1);
  if (!v4)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    __int16 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 104;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - No output port found for default vad\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error routing to partner port - No output port found for default vad");
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 96);
  __p[0] = *(void **)(v4 + 88);
  __p[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_43F38((uint64_t *)buf, (uint64_t *)__p, "", 107);
  sub_10653C(&v27, *(uint64_t *)buf);
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v28;
  if (v28 == &v27) {
    goto LABEL_13;
  }
  while (1)
  {
    sub_549A4((uint64_t *)buf, v7 + 2, "", 109);
    __int16 v8 = *(_WORD *)(*(void *)buf + 184);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if ((v8 & 1) == 0) {
      break;
    }
    uint64_t v7 = (uint64_t *)v7[1];
    if (v7 == &v27) {
      goto LABEL_13;
    }
  }
  if (v7 == &v27)
  {
LABEL_13:
    int v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = *(std::__shared_weak_count **)(v5 + 96);
      v24[0] = *(void *)(v5 + 88);
      v24[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_D98B8(__p, (uint64_t)v24);
      if (v26 >= 0) {
        __int16 v12 = __p;
      }
      else {
        __int16 v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 113;
      __int16 v30 = 2080;
      int v31 = v12;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - No valid partner port available for port %s\"", buf, 0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    int v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Error routing to partner port - No valid partner port available for port %s");
  }
  uint64_t v15 = v7[2];
  uint64_t v14 = v7[3];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
  }
  __int16 v16 = (std::__shared_weak_count *)a1[4];
  a1[3] = v15;
  a1[4] = v14;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  int v17 = *(std::__shared_weak_count **)(v5 + 96);
  if (v17
    && (uint64_t v18 = *(void *)(v5 + 88),
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed),
        *a2 = 0,
        a2[1] = 0,
        (uint64_t v19 = std::__shared_weak_count::lock(v17)) != 0))
  {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *a2 = v18;
    a2[1] = v19;
    sub_4636C(v19);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  uint64_t v20 = a1[4];
  a2[2] = a1[3];
  a2[3] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  sub_8108(&v27);
}

void sub_3E5BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_3E5C7C(void *a1)
{
  *a1 = off_63C810;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_3E5CE8(void *a1)
{
  *a1 = off_63C810;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

BOOL sub_3E5D34(uint64_t *a1)
{
  uint64_t v2 = sub_3E5710(a1[1], a1[2], 0);
  uint64_t v3 = v2;
  if (v2 && v2 != a1[3]) {
    return 1;
  }
  uint64_t v5 = (os_log_t *)sub_32A48(2);
  uint64_t v6 = *v5;
  if (*v5)
  {
    BOOL result = os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v7 = a1[3];
    int v8 = 136315906;
    int v9 = "RouteToPartnerHandler.cpp";
    __int16 v10 = 1024;
    int v11 = 80;
    __int16 v12 = 2048;
    uint64_t v13 = v3;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Something went wrong ! Input ports didn't change (current input port: %p, previous input port: %p)", (uint8_t *)&v8, 0x26u);
  }
  return 0;
}

void sub_3E5E44(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_3E5710(a1[1], a1[2], 1);
  if (!v4)
  {
    uint64_t v40 = (os_log_t *)sub_32A48(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 55;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - No output port found for default vad\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error routing to partner port - No output port found for default vad");
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 96);
  __p[0] = *(void **)(v4 + 88);
  __p[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_43F38((uint64_t *)buf, (uint64_t *)__p, "", 57);
  sub_105F14(&v48, *(uint64_t *)buf);
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v49;
  if (v49 == &v48) {
    goto LABEL_13;
  }
  while (1)
  {
    sub_549A4((uint64_t *)buf, v7 + 2, "", 59);
    __int16 v8 = *(_WORD *)(*(void *)buf + 184);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v8) {
      break;
    }
    uint64_t v7 = (uint64_t *)v7[1];
    if (v7 == &v48) {
      goto LABEL_13;
    }
  }
  if (v7 == &v48)
  {
LABEL_13:
    int v9 = (os_log_t *)sub_32A48(13);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(v5 + 88);
      __int16 v12 = *(std::__shared_weak_count **)(v5 + 96);
      v45[0] = v11;
      v45[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_D98B8(__p, (uint64_t)v45);
      if (v47 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 62;
      __int16 v51 = 2080;
      char v52 = v13;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - No valid partner port available for port %s\"", buf, 0x1Cu);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    __int16 v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Error routing to partner port - No valid partner port available for port %s");
    goto LABEL_25;
  }
  uint64_t v15 = sub_3E5710(a1[1], a1[2], 0);
  a1[3] = v15;
  if (!v15)
  {
    char v43 = (os_log_t *)sub_32A48(13);
    char v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteToPartnerHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 65;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Error routing to partner port - No valid input port in route\"", buf, 0x12u);
    }
    __int16 v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Error routing to partner port - No valid input port in route");
LABEL_25:
  }
  uint64_t v17 = v7[2];
  __int16 v16 = (std::__shared_weak_count *)v7[3];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = a1[3];
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v15 + 96);
  if (v18)
  {
    uint64_t v19 = *(void *)(v15 + 88);
    char v20 = 1;
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v21 = std::__shared_weak_count::lock(v18);
    __int16 v22 = v21;
    if (v21)
    {
      atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v21);
      uint64_t v23 = std::__shared_weak_count::lock(v22);
      char v20 = 0;
      if (!v23) {
        uint64_t v19 = 0;
      }
      if (!v16)
      {
LABEL_42:
        BOOL v25 = v19 == 0;
        if (!v23) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v23 = 0;
      if (!v16) {
        goto LABEL_42;
      }
    }
  }
  else
  {
    __int16 v22 = 0;
    uint64_t v19 = 0;
    uint64_t v23 = 0;
    char v20 = 1;
    if (!v16) {
      goto LABEL_42;
    }
  }
  uint64_t v24 = std::__shared_weak_count::lock(v16);
  if (!v24) {
    goto LABEL_42;
  }
  BOOL v25 = v19 == v17;
  sub_4636C(v24);
  if (v23) {
LABEL_43:
  }
    sub_4636C(v23);
LABEL_44:
  char v26 = 0;
  if (v25) {
    uint64_t v27 = v17;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v16 && v25)
  {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v26 = v16;
    uint64_t v27 = v17;
  }
  if ((v20 & 1) == 0) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v28 = a1[3];
  char v29 = *(std::__shared_weak_count **)(v28 + 96);
  if (v29)
  {
    uint64_t v30 = *(void *)(v28 + 88);
    char v31 = 1;
    atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v32 = std::__shared_weak_count::lock(v29);
    uint64_t v33 = v32;
    if (v32)
    {
      atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v32);
      char v34 = std::__shared_weak_count::lock(v33);
      char v31 = 0;
      if (!v34) {
        uint64_t v30 = 0;
      }
      if (!v16)
      {
LABEL_66:
        BOOL v36 = v30 == 0;
        if (!v34) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }
    }
    else
    {
      uint64_t v30 = 0;
      char v34 = 0;
      if (!v16) {
        goto LABEL_66;
      }
    }
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    char v34 = 0;
    char v31 = 1;
    if (!v16) {
      goto LABEL_66;
    }
  }
  uint64_t v35 = std::__shared_weak_count::lock(v16);
  if (!v35) {
    goto LABEL_66;
  }
  BOOL v36 = v30 == v17;
  sub_4636C(v35);
  if (v34) {
LABEL_67:
  }
    sub_4636C(v34);
LABEL_68:
  if (v16) {
    char v37 = v36;
  }
  else {
    char v37 = 1;
  }
  if (v36) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v17;
  }
  if ((v37 & 1) == 0)
  {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v39 = v16;
    if (v31) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  char v39 = 0;
  uint64_t v17 = v38;
  if ((v31 & 1) == 0) {
LABEL_78:
  }
    std::__shared_weak_count::__release_weak(v33);
LABEL_79:
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  *a2 = v27;
  a2[1] = (uint64_t)v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  a2[2] = v17;
  a2[3] = (uint64_t)v39;
  if (v39)
  {
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_8108(&v48);
}

void sub_3E6430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __cxa_free_exception(v18);
  sub_8108(&a14);
  _Unwind_Resume(a1);
}

void sub_3E64B8()
{
}

void sub_3E64D0(uint64_t a1)
{
  sub_3E6508(a1);

  operator delete();
}

uint64_t sub_3E6508(uint64_t a1)
{
  *(void *)a1 = off_63C840;
  uint64_t v2 = *(void **)(qword_660380 + 72);
  uint64_t v3 = qword_660380 + 80;
  if (v2 != (void *)(qword_660380 + 80))
  {
    do
    {
      (*(void (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v2[5]);
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (void *)v3);
  }
  uint64_t v7 = *(NSObject **)(a1 + 168);
  if (v7) {
    dispatch_release(v7);
  }
  __int16 v12 = (void **)(a1 + 144);
  sub_217F8(&v12);
  __int16 v12 = (void **)(a1 + 120);
  sub_217F8(&v12);
  __int16 v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
  }
  sub_463E0(*(void **)(a1 + 80));
  sub_1BF06C((void *)(a1 + 40));
  int v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9) {
    sub_4636C(v9);
  }
  __int16 v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10) {
    sub_4636C(v10);
  }
  return a1;
}

uint64_t sub_3E6640(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_3E66C0()
{
  uint64_t v0 = (os_log_t *)sub_32A48(6);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315394;
      uint64_t v4 = "TimeSyncClockDeviceManager.cpp";
      __int16 v5 = 1024;
      int v6 = 146;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ClockDeviceList listener activated", (uint8_t *)&v3, 0x12u);
    }
  }
  uint64_t v2 = sub_3E6788();
  sub_3E68A8(v2);
}

uint64_t sub_3E6788()
{
  uint64_t result = qword_660380;
  if (!qword_660380)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        __int16 v5 = "TimeSyncClockDeviceManager.cpp";
        __int16 v6 = 1024;
        int v7 = 72;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [sTimeSyncClockDeviceManager is NULL]: \"sTimeSyncClockDeviceManager is NULL!\"", (uint8_t *)&v4, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sTimeSyncClockDeviceManager is NULL!");
  }
  return result;
}

void sub_3E688C(_Unwind_Exception *exception_object)
{
}

void sub_3E68A8(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(6);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "TimeSyncClockDeviceManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 125;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reading HAL clock list ...", buf, 0x12u);
  }
  uint64_t v4 = 2003329396;
  uint64_t v5 = *(void *)(a1 + 8);
  strcpy((char *)v41, "#klcbolg");
  BYTE1(v41[1]) = 0;
  WORD1(v41[1]) = 0;
  if (sub_A8F54(v5))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
    _DWORD buf[8] = 0;
    LOBYTE(v57) = 0;
    unsigned int v6 = sub_A9180(v5);
    LODWORD(v47) = v6;
    if (!v6)
    {
      uint64_t v4 = 0;
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      goto LABEL_18;
    }
    sub_73978(&__p, v6 >> 2);
    int v7 = sub_A91F4(v5);
    *(_DWORD *)AudioObjectPropertyAddress buf = v7;
    if (v7)
    {
      int v8 = v7;
      int v9 = 0;
      v46.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      __int16 v10 = (void *)sub_86B44((uint64_t)&buf[8], (uint64_t)&__p);
      int v8 = *(_DWORD *)buf;
      v46.__r_.__value_.__s.__data_[0] = 0;
      if ((_BYTE)v57)
      {
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[8];
        uint64_t v11 = *(void *)&buf[16];
        v10[1] = 0;
        void v10[2] = 0;
        *__int16 v10 = 0;
        uint64_t v4 = v11;
        int v9 = 1;
      }
      else
      {
        int v9 = 0;
      }
    }
    int v12 = v9;
    if (__p)
    {
      uint64_t v50 = __p;
      operator delete(__p);
      int v12 = v57;
    }
    if (v12 && *(void *)&buf[8])
    {
      *(void *)&buf[16] = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
    if (!v8)
    {
      if (v9)
      {
LABEL_18:
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        sub_46B38(&v43, v46.__r_.__value_.__l.__data_, v4, (int64_t)(v4 - v46.__r_.__value_.__r.__words[0]) >> 2);
        if (v46.__r_.__value_.__r.__words[0]) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        v41[0] = 0;
        v41[1] = 0;
        unint64_t v42 = 0;
        uint64_t v13 = v43;
        uint64_t v14 = v44;
        if (v43 == v44)
        {
          char v34 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          do
          {
            uint64_t v15 = *(void *)(a1 + 8);
            strcpy(v52, "diucbolg");
            v52[9] = 0;
            __int16 v53 = 0;
            if ((sub_A8F54(v15) & 1) == 0)
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 2003332927;
              _DWORD buf[8] = 0;
              unsigned char buf[24] = 0;
LABEL_62:
              exception = __cxa_allocate_exception(0x10uLL);
              int v36 = *(_DWORD *)buf;
              *(void *)exception = &off_6414D8;
              exception[2] = v36;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
            _DWORD buf[8] = 0;
            unsigned char buf[24] = 0;
            if (sub_A9180(v15))
            {
              uint64_t v54 = 0;
              *(_DWORD *)AudioObjectPropertyAddress buf = sub_A91F4(v15);
              if (!*(_DWORD *)buf)
              {
                std::string __p = off_63E5A8;
                uint64_t v50 = 0;
                *(void *)&_DWORD buf[8] = off_63E5A8;
                *(void *)&buf[16] = v54;
                unsigned char buf[24] = 1;
                sub_49A90(&__p);
              }
            }
            if (*(_DWORD *)buf || !buf[24]) {
              goto LABEL_62;
            }
            sub_5505C(&v47, *(CFTypeRef *)&buf[16]);
            char v47 = off_63E5A8;
            if (buf[24]) {
              sub_49A90(&buf[8]);
            }
            __int16 v16 = (os_log_t *)sub_32A48(6);
            uint64_t v17 = *v16;
            if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
            {
              sub_21B7C(&__p, theString);
              p_p = &__p;
              if (v51 < 0) {
                p_p = __p;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "TimeSyncClockDeviceManager.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 135;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = p_p;
              _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Clock device '%s' is available", buf, 0x1Cu);
              if (v51 < 0) {
                operator delete(__p);
              }
            }
            memset(&v46, 0, sizeof(v46));
            if (theString)
            {
              CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
              if (CStringPtr)
              {
                sub_63574(&v46, CStringPtr);
              }
              else
              {
                *(void *)AudioObjectPropertyAddress buf = 0;
                CFStringRef v20 = theString;
                v58.length = CFStringGetLength(theString);
                v58.location = 0;
                CFStringGetBytes(v20, v58, 0x8000100u, 0, 0, 0, 0, (CFIndex *)buf);
                size_t v21 = *(void *)buf + 1;
                if (*(void *)buf == -1)
                {
                  __int16 v22 = 0;
                }
                else
                {
                  if (*(uint64_t *)buf <= -2) {
                    sub_60548();
                  }
                  __int16 v22 = operator new(*(void *)buf + 1);
                  bzero(v22, v21);
                }
                CFStringRef v23 = theString;
                v59.length = CFStringGetLength(theString);
                v59.location = 0;
                CFStringGetBytes(v23, v59, 0x8000100u, 0, 0, (UInt8 *)v22, *(CFIndex *)buf, (CFIndex *)buf);
                *((unsigned char *)v22 + *(void *)buf) = 0;
                sub_63574(&v46, (char *)v22);
                operator delete(v22);
              }
            }
            sub_49A90(&v47);
            uint64_t v24 = (_OWORD *)v41[1];
            if (v41[1] >= v42)
            {
              unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v41[1] - v41[0]) >> 3);
              unint64_t v27 = v26 + 1;
              if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_60548();
              }
              if (0x5555555555555556 * ((uint64_t)(v42 - v41[0]) >> 3) > v27) {
                unint64_t v27 = 0x5555555555555556 * ((uint64_t)(v42 - v41[0]) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v41[0]) >> 3) >= 0x555555555555555) {
                unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v28 = v27;
              }
              uint64_t v57 = &v42;
              if (v28) {
                unint64_t v28 = (unint64_t)sub_21974(v28);
              }
              else {
                uint64_t v29 = 0;
              }
              unint64_t v30 = v28 + 24 * v26;
              *(void *)AudioObjectPropertyAddress buf = v28;
              *(void *)&_DWORD buf[8] = v30;
              *(void *)&unsigned char buf[24] = v28 + 24 * v29;
              long long v31 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
              *(void *)(v30 + 16) = *((void *)&v46.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v30 = v31;
              memset(&v46, 0, sizeof(v46));
              *(void *)&buf[16] = v30 + 24;
              sub_20D9C(v41, buf);
              uint64_t v32 = v41[1];
              sub_20E50((uint64_t)buf);
              v41[1] = v32;
              if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v46.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
              *(void *)(v41[1] + 16) = *((void *)&v46.__r_.__value_.__l + 2);
              _OWORD *v24 = v25;
              memset(&v46, 0, sizeof(v46));
              v41[1] = (uint64_t)v24 + 24;
            }
            v13 += 4;
          }
          while (v13 != v14);
          uint64_t v33 = (long long *)v41[0];
          char v34 = (long long *)v41[1];
        }
        uint64_t v38 = 0;
        char v39 = 0;
        uint64_t v40 = 0;
        sub_2189C((char *)&v38, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
        *(void *)AudioObjectPropertyAddress buf = a1;
        memset(&buf[8], 0, 24);
        sub_2189C(&buf[8], v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
        operator new();
      }
      int v8 = 0;
    }
  }
  else
  {
    v46.__r_.__value_.__s.__data_[0] = 0;
    int v8 = 2003332927;
  }
  char v37 = __cxa_allocate_exception(0x10uLL);
  *(void *)char v37 = &off_6414D8;
  v37[2] = v8;
}

void sub_3E70B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

uint64_t *sub_3E717C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    sub_217F8(&v2);
    operator delete();
  }
  return result;
}

uint64_t *sub_3E71DC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v43 = a1;
  uint64_t v2 = *(void *)a1;
  int v3 = *(void **)(*(void *)a1 + 96);
  if (v3 == *(void **)(*(void *)a1 + 104)) {
    goto LABEL_65;
  }
  uint64_t v4 = v2 + 80;
  do
  {
    uint64_t v5 = v3[1];
    uint64_t v44 = *v3;
    if (v4 != sub_3E7AA0(v2 + 72, v44, HIDWORD(v44)))
    {
      unsigned int v6 = (os_log_t *)sub_32A48(6);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        sub_4D60(&__p, (unsigned int *)&v44);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        char v51 = "TimeSyncClockDeviceManager.cpp";
        __int16 v52 = 1024;
        int v53 = 167;
        __int16 v54 = 2080;
        uint64_t v55 = p_p;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d TimeSync clock already present for %s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      int v9 = v3 + 2;
      __int16 v10 = *(void **)(v2 + 104);
      uint64_t v11 = v3;
      if (v3 + 2 != v10)
      {
        do
        {
          uint64_t v12 = v9[1];
          *(v9 - 2) = *v9;
          *(v9 - 1) = v12;
          v9 += 2;
        }
        while (v9 != v10);
        uint64_t v11 = v9 - 2;
      }
      *(void *)(v2 + 104) = v11;
      continue;
    }
    uint64_t v13 = (const void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 24) + 48))(*(void *)(v2 + 24), v5);
    sub_14E44(&cf, v13);
    uint64_t v14 = (os_log_t *)sub_32A48(6);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      if (!cf)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      sub_20C54((uint64_t)&__p, (const __CFString *)cf);
      __int16 v16 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v51 = "TimeSyncClockDeviceManager.cpp";
      __int16 v52 = 1024;
      int v53 = 176;
      __int16 v54 = 2080;
      uint64_t v55 = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Looking for HAL Clock device : %s", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (!cf)
    {
      int v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Could not construct");
    }
    uint64_t v17 = *(void *)(v1 + 8);
    uint64_t v18 = *(void *)(v1 + 16);
    sub_20C54((uint64_t)&v45, (const __CFString *)cf);
    uint64_t v19 = v47;
    if (v17 == v18)
    {
LABEL_40:
      if ((v19 & 0x80) != 0) {
        operator delete(v45);
      }
      v3 += 2;
      uint64_t v4 = v2 + 80;
      uint64_t v1 = a1;
      goto LABEL_55;
    }
    CFStringRef v20 = v45;
    size_t v21 = v46;
    if ((v47 & 0x80u) == 0) {
      size_t v22 = v47;
    }
    else {
      size_t v22 = v46;
    }
    while (1)
    {
      uint64_t v23 = *(unsigned __int8 *)(v17 + 23);
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(v17 + 8);
      }
      if (v22 != v23) {
        goto LABEL_39;
      }
      long long v25 = v24 >= 0 ? (unsigned __int8 *)v17 : *(unsigned __int8 **)v17;
      if ((v19 & 0x80) != 0) {
        break;
      }
      if (!v19) {
        goto LABEL_44;
      }
      unint64_t v26 = &v45;
      uint64_t v27 = v19;
      while (*(unsigned __int8 *)v26 == *v25)
      {
        unint64_t v26 = (void **)((char *)v26 + 1);
        ++v25;
        if (!--v27) {
          goto LABEL_44;
        }
      }
LABEL_39:
      v17 += 24;
      if (v17 == v18) {
        goto LABEL_40;
      }
    }
    if (memcmp(v20, v25, v21)) {
      goto LABEL_39;
    }
    operator delete(v20);
LABEL_44:
    unint64_t v28 = (os_log_t *)sub_32A48(6);
    uint64_t v29 = *v28;
    uint64_t v4 = v2 + 80;
    uint64_t v1 = a1;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
    {
      sub_4D60(&__p, (unsigned int *)&v44);
      unint64_t v30 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v51 = "TimeSyncClockDeviceManager.cpp";
      __int16 v52 = 1024;
      int v53 = 183;
      __int16 v54 = 2080;
      uint64_t v55 = v30;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found timesync clock ref for %s", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    *((void *)sub_3E7B10((uint64_t **)(v2 + 72), v44, HIDWORD(v44), &v44) + 5) = v5;
    uint64_t v31 = *(void *)(v2 + 64);
    if (!v31)
    {
      char v37 = (os_log_t *)sub_32A48(13);
      uint64_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v51 = "TimeSyncClockDeviceManager.cpp";
        __int16 v52 = 1024;
        int v53 = 188;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      char v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v39, "Precondition failure.");
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 48))(v31, &v44);
    uint64_t v32 = v3 + 2;
    uint64_t v33 = *(void **)(v2 + 104);
    char v34 = v3;
    if (v3 + 2 != v33)
    {
      do
      {
        uint64_t v35 = v32[1];
        *(v32 - 2) = *v32;
        *(v32 - 1) = v35;
        v32 += 2;
      }
      while (v32 != v33);
      char v34 = v32 - 2;
    }
    *(void *)(v2 + 104) = v34;
LABEL_55:
    if (cf) {
      CFRelease(cf);
    }
  }
  while (v3 != *(void **)(v2 + 104));
LABEL_65:
  if (v2 + 120 != v1 + 8) {
    sub_7DBD0(v2 + 120, *(std::string **)(v1 + 8), *(long long **)(v1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 16) - *(void *)(v1 + 8)) >> 3));
  }
  return sub_3E717C(&v43);
}

void sub_3E7A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  __cxa_end_catch();
  sub_3E717C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3E7AA0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v7 == a2;
    BOOL v8 = v7 < a2;
    if (v9) {
      BOOL v8 = *(_DWORD *)(v4 + 36) < a3;
    }
    BOOL v9 = !v8;
    if (v8) {
      __int16 v10 = (uint64_t *)(v4 + 8);
    }
    else {
      __int16 v10 = (uint64_t *)v4;
    }
    if (v9) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v11 = *(_DWORD *)(v6 + 32);
  BOOL v9 = v11 == a2;
  BOOL v12 = v11 > a2;
  if (v9) {
    BOOL v12 = *(_DWORD *)(v6 + 36) > a3;
  }
  if (v12) {
    return v3;
  }
  return v6;
}

char *sub_3E7B10(uint64_t **a1, unsigned int a2, unsigned int a3, void *a4)
{
  unsigned int v7 = (char *)(a1 + 1);
  uint64_t v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = v6;
        unsigned int v8 = *((_DWORD *)v6 + 8);
        unsigned int v9 = *((_DWORD *)v7 + 9);
        BOOL v10 = v9 > a3;
        if (v8 != a2) {
          BOOL v10 = v8 > a2;
        }
        if (!v10) {
          break;
        }
        uint64_t v6 = *(char **)v7;
        unsigned int v11 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_13;
        }
      }
      BOOL v12 = v9 < a3;
      BOOL v13 = v8 == a2;
      BOOL v14 = v8 < a2;
      if (v13) {
        BOOL v14 = v12;
      }
      if (!v14) {
        break;
      }
      unsigned int v11 = (uint64_t **)(v7 + 8);
      uint64_t v6 = (char *)*((void *)v7 + 1);
      if (!v6) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    unsigned int v11 = a1 + 1;
LABEL_13:
    uint64_t v15 = v7;
    unsigned int v7 = (char *)operator new(0x30uLL);
    *((void *)v7 + 4) = *a4;
    *((void *)v7 + 5) = 0;
    *(void *)unsigned int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v15;
    void *v11 = (uint64_t *)v7;
    __int16 v16 = (uint64_t *)**a1;
    uint64_t v17 = (uint64_t *)v7;
    if (v16)
    {
      *a1 = v16;
      uint64_t v17 = *v11;
    }
    sub_46D00(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_3E7C0C(unsigned int *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3) == TSNullClockIdentifier)
  {
    CFStringRef v20 = (os_log_t *)sub_32A48(13);
    size_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v27 = "TimeSyncClockDeviceManager.cpp";
      __int16 v28 = 1024;
      int v29 = 115;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No gPTP System Domain Clock present ?\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No gPTP System Domain Clock present ?");
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    if (v4)
    {
      uint64_t v5 = (os_log_t *)sub_32A48(6);
      uint64_t v6 = *v5;
      if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        sub_4D60(&__p, a1 + 2);
        unsigned int v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v27 = "TimeSyncClockDeviceManager.cpp";
        __int16 v28 = 1024;
        int v29 = 218;
        __int16 v30 = 2080;
        uint64_t v31 = v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created time sync clock device for %s, Adding to pending requests (to wait for HAL clock)", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      unsigned int v8 = (char *)v2[12];
      unsigned int v9 = (char *)v2[13];
      uint64_t v10 = *((void *)a1 + 1);
      unsigned int v11 = v8;
      if (v8 != v9)
      {
        unsigned int v11 = (char *)v2[12];
        while (*(void *)v11 != v10)
        {
          v11 += 16;
          if (v11 == v9) {
            goto LABEL_16;
          }
        }
      }
      if (v11 == v9)
      {
LABEL_16:
        unint64_t v12 = v2[14];
        if ((unint64_t)v9 >= v12)
        {
          uint64_t v14 = (v9 - v8) >> 4;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60) {
            sub_60548();
          }
          uint64_t v16 = v12 - (void)v8;
          if (v16 >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 >> 60) {
              sub_60560();
            }
            uint64_t v18 = (char *)operator new(16 * v17);
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = &v18[16 * v14];
          *(void *)uint64_t v19 = v10;
          *((void *)v19 + 1) = v4;
          BOOL v13 = v19 + 16;
          if (v8 != v9)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v9 - 1);
              v19 -= 16;
              v9 -= 16;
            }
            while (v9 != v8);
            unsigned int v8 = (char *)v2[12];
          }
          v2[12] = v19;
          v2[13] = v13;
          v2[14] = &v18[16 * v17];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *(void *)unsigned int v9 = v10;
          *((void *)v9 + 1) = v4;
          BOOL v13 = v9 + 16;
        }
        v2[13] = v13;
      }
      sub_3E68A8((uint64_t)v2);
    }
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v27 = "TimeSyncClockDeviceManager.cpp";
      __int16 v28 = 1024;
      int v29 = 118;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [gptpClock is NULL]: \"Could not create gPTP clock reference\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create gPTP clock reference");
  }
}

void sub_3E7FFC()
{
  __cxa_free_exception(v0);
  operator delete();
}

void sub_3E8034(unsigned int *a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(6);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_4D60(&__p, a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unsigned int v7 = "TimeSyncClockDeviceManager.cpp";
    __int16 v8 = 1024;
    int v9 = 106;
    __int16 v10 = 2080;
    unsigned int v11 = p_p;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d gPTP TimeSyncManager is now available. Creating clock %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  sub_3E6788();
  operator new();
}

void sub_3E8180(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_3E818C(void *a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  uint64_t v3 = *(NSObject **)(a2 + 168);
  uint64_t v5 = v4;
  *a1 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_3E8214;
  block[3] = &unk_63C870;
  block[4] = a1;
  block[5] = &v5;
  dispatch_sync(v3, block);
}

void sub_3E8214(uint64_t a1)
{
  uint64_t v2 = **(uint64_t ***)(a1 + 40);
  uint64_t v3 = *v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_3E8804;
  uint64_t v7[3] = &unk_63C850;
  void v7[4] = v3;
  integer_t v7[5] = v2[1];
  sub_3E8804((uint64_t)v7, &v10);
  uint64_t v4 = v10;
  char v9 = 1;
  uint64_t v8 = 0;
  sub_E2A90((uint64_t)&v8);
  char v11 = 1;
  __int16 v10 = 0;
  sub_E2A90((uint64_t)&v10);
  uint64_t v5 = *(const void ***)(a1 + 32);
  uint64_t v6 = *v5;
  *uint64_t v5 = v4;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_3E8318(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_3E8554(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf, long long a18, __int16 a19, __int16 a20,int a21,int a22)
{
  if (!a2) {
    JUMPOUT(0x3E8334);
  }
  __cxa_end_catch();
  if (a2 == 3)
  {
    int v24 = __cxa_begin_catch(a1);
    long long v25 = (os_log_t *)sub_32A48(13);
    os_log_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v27 = v24[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 445;
      WORD1(a18) = 1024;
      DWORD1(a18) = v27;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 52;
      __int16 v28 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v29 = v26;
      uint32_t v30 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
    }
  }
  else
  {
    uint64_t v31 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v32 = v31;
      uint64_t v33 = (os_log_t *)sub_32A48(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 446;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v35;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 52;
        __int16 v28 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v29 = v34;
        uint32_t v30 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v36 = (os_log_t *)sub_32A48(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 447;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 52;
        __int16 v28 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v29 = v37;
        uint32_t v30 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  LOBYTE(buf) = 0;
  BYTE8(buf) = 0;
  JUMPOUT(0x3E82CCLL);
}

void sub_3E87D0()
{
}

void sub_3E87DC()
{
}

void sub_3E87E8()
{
}

void sub_3E87FC()
{
}

void *sub_3E8804@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(unsigned int **)(a1 + 40);
  uint64_t v5 = (uint64_t **)(v4 + 72);
  unsigned int v6 = *v3;
  unsigned int v7 = v3[1];
  uint64_t v8 = sub_3E7AA0(v4 + 72, *v3, v7);
  uint64_t v9 = v4 + 80;
  uint64_t v10 = *(void *)(v4 + 24);
  if (v9 == v8)
  {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(unsigned int *), unsigned int *))(*(void *)v10 + 16))(v10, sub_3E890C, v3);
    *a2 = 0;
  }
  else
  {
    char v11 = sub_3E7B10(v5, v6, v7, v3);
    unint64_t v12 = (const void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v10 + 48))(v10, *((void *)v11 + 5));
    return sub_14E44(a2, v12);
  }
  return result;
}

uint64_t sub_3E890C(unsigned int *a1)
{
  uint64_t v2 = sub_3E6788();
  uint64_t v3 = (os_log_t *)sub_32A48(6);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    sub_4D60(&__p, a1);
    uint64_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unint64_t v12 = "TimeSyncClockDeviceManager.cpp";
    __int16 v13 = 1024;
    int v14 = 250;
    __int16 v15 = 2080;
    uint64_t v16 = v5;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TimeSyncManager is now available. Adding gPTP Timesync manager (%s)", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (((*(uint64_t (**)(void))(**(void **)(v2 + 24) + 56))(*(void *)(v2 + 24)) & 1) == 0)
  {
    unsigned int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v12 = "TimeSyncClockDeviceManager.cpp";
      __int16 v13 = 1024;
      int v14 = 253;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Adding gPTP timesync manager failed\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Adding gPTP timesync manager failed");
  }
  return (*(uint64_t (**)(void, void (*)(unsigned int *), unsigned int *))(**(void **)(v2 + 24) + 64))(*(void *)(v2 + 24), sub_3E8034, a1);
}

void sub_3E8B28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3E8B44(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 40);
  uint64_t v3 = *v2;
  uint64_t v4 = **v2;
  uint64_t v5 = (unsigned int *)(*v2 + 1);
  unsigned int v6 = *v5;
  unsigned int v7 = *((_DWORD *)*v2 + 3);
  if (v4 + 80 == sub_3E7AA0(v4 + 72, *v5, v7))
  {
    CFStringRef v41 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 24);
    uint64_t v9 = sub_3E7B10((uint64_t **)(v4 + 72), v6, v7, v5);
    uint64_t v10 = (const void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 48))(v8, *((void *)v9 + 5));
    sub_14E44(&v41, v10);
    sub_3D04((uint64_t)&v45);
    sub_256E4(&v45, (uint64_t)"Timesync for VAD - ", 19);
    sub_4D60((std::string *)buf, v5);
    if (buf[23] >= 0) {
      char v11 = buf;
    }
    else {
      char v11 = *(unsigned char **)buf;
    }
    if (buf[23] >= 0) {
      uint64_t v12 = buf[23];
    }
    else {
      uint64_t v12 = *(void *)&buf[8];
    }
    sub_256E4(&v45, (uint64_t)v11, v12);
    sub_256E4(&v45, (uint64_t)" - is ", 6);
    sub_168A8C((uint64_t)&v42, v41);
    __int16 v13 = std::string::insert(&v42, 0, "(", 1uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    int64_t v44 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v44 >= 0) {
      __int16 v15 = __p;
    }
    else {
      __int16 v15 = (void **)__p[0];
    }
    if (v44 >= 0) {
      uint64_t v16 = HIBYTE(v44);
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    sub_256E4(&v45, (uint64_t)v15, v16);
    sub_256E4(&v45, (uint64_t)", ", 2);
    sub_3E7B10((uint64_t **)(v4 + 72), *((_DWORD *)v3 + 2), *((_DWORD *)v3 + 3), v5);
    unint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = sub_256E4(v17, (uint64_t)"). Caller context is ", 22);
    int v19 = *((char *)v3 + 39);
    if (v19 >= 0) {
      uint64_t v20 = (uint64_t)(v3 + 2);
    }
    else {
      uint64_t v20 = v3[2];
    }
    if (v19 >= 0) {
      uint64_t v21 = *((unsigned __int8 *)v3 + 39);
    }
    else {
      uint64_t v21 = v3[3];
    }
    sub_256E4(v18, v20, v21);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    size_t v22 = (os_log_t *)sub_32A48(6);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
    {
      sub_246E4(__p, (uint64_t)v46);
      int v24 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "TimeSyncClockDeviceManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 344;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_246E4(__p, (uint64_t)v46);
    uint64_t v26 = *(void *)(v4 + 144);
    unint64_t v25 = *(void *)(v4 + 152);
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v26) >> 3);
    if (v27 <= 7)
    {
      unint64_t v28 = *(void *)(v4 + 160);
      if (v25 >= v28)
      {
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v26) >> 3);
        if (2 * v31 <= v27 + 1) {
          uint64_t v32 = v27 + 1;
        }
        else {
          uint64_t v32 = 2 * v31;
        }
        if (v31 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v32;
        }
        uint64_t v49 = v4 + 160;
        os_log_t v34 = (char *)sub_21974(v33);
        uint64_t v35 = &v34[24 * v27];
        *(void *)AudioObjectPropertyAddress buf = v34;
        *(void *)&_DWORD buf[8] = v35;
        *(void *)&unsigned char buf[24] = &v34[24 * v36];
        long long v37 = *(_OWORD *)__p;
        *((void *)v35 + 2) = v44;
        *(_OWORD *)uint64_t v35 = v37;
        __p[1] = 0;
        int64_t v44 = 0;
        __p[0] = 0;
        *(void *)&buf[16] = v35 + 24;
        sub_20D9C((uint64_t *)(v4 + 144), buf);
        unint64_t v30 = *(void *)(v4 + 152);
        sub_20E50((uint64_t)buf);
      }
      else
      {
        long long v29 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v44;
        *(_OWORD *)unint64_t v25 = v29;
        __p[1] = 0;
        int64_t v44 = 0;
        __p[0] = 0;
        unint64_t v30 = v25 + 24;
        *(void *)(v4 + 152) = v25 + 24;
      }
      *(void *)(v4 + 152) = v30;
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (v47 < 0) {
      operator delete((void *)v46[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  CFStringRef v38 = v41;
  LOBYTE(v46[0]) = 1;
  uint64_t v45 = 0;
  sub_E2A90((uint64_t)&v45);
  char v39 = *(const void ***)(a1 + 32);
  uint64_t v40 = *v39;
  std::logic_error *v39 = v38;
  if (v40) {
    CFRelease(v40);
  }
}

void sub_3E9060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,long long buf,long long a24,__int16 a25,__int16 a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (cf) {
    CFRelease(cf);
  }
  if (a2 == 3)
  {
    CFStringRef v41 = __cxa_begin_catch(exception_object);
    std::string v42 = (os_log_t *)sub_32A48(6);
    uint64_t v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      sub_4D60((std::string *)&a10, v37);
      if (a15 >= 0) {
        int64_t v44 = (void **)&a10;
      }
      else {
        int64_t v44 = a10;
      }
      uint64_t v45 = (*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
      size_t v46 = (void *)(v38 + 16);
      if (*(char *)(v38 + 39) < 0) {
        size_t v46 = (void *)*v46;
      }
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "TimeSyncClockDeviceManager.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 357;
      WORD1(a24) = 2080;
      *(void *)((char *)&a24 + 4) = v44;
      WORD6(a24) = 2080;
      *(void *)((char *)&a24 + 14) = v45;
      HIWORD(a27) = 2080;
      a28 = (uint64_t)v46;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception looking up timesync ref for %s: %s. Caller context is %s", (uint8_t *)&buf, 0x30u);
      if (a15 < 0) {
        operator delete(a10);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x3E8FF8);
  }
  if (a2 == 2)
  {
    char v47 = __cxa_begin_catch(exception_object);
    uint64_t v48 = (os_log_t *)sub_32A48(13);
    os_log_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      int v50 = v47[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 445;
      WORD1(a24) = 1024;
      DWORD1(a24) = v50;
      WORD4(a24) = 2080;
      *(void *)((char *)&a24 + 10) = "";
      a26 = 1024;
      a27 = 52;
      char v51 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v52 = v49;
      uint32_t v53 = 40;
LABEL_27:
      _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, v51, (uint8_t *)&buf, v53);
    }
  }
  else
  {
    __cxa_begin_catch(exception_object);
    __int16 v54 = (os_log_t *)sub_32A48(13);
    os_log_t v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 447;
      WORD1(a24) = 2080;
      *(void *)((char *)&a24 + 4) = "";
      WORD6(a24) = 1024;
      *(_DWORD *)((char *)&a24 + 14) = 52;
      char v51 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
      __int16 v52 = v55;
      uint32_t v53 = 34;
      goto LABEL_27;
    }
  }
  __cxa_end_catch();
  LOBYTE(buf) = 0;
  BYTE8(buf) = 0;
  JUMPOUT(0x3E9008);
}

void sub_3E958C()
{
}

void sub_3E9598()
{
}

void sub_3E95A4()
{
}

void sub_3E95B4()
{
}

void sub_3E95C0()
{
  qword_660388 = 850045863;
  *(_OWORD *)algn_660390 = 0u;
  *(_OWORD *)&algn_660390[16] = 0u;
  *(_OWORD *)&algn_660390[32] = 0u;
  qword_6603C0 = 0;
  qword_6603C8 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  global_queue = dispatch_get_global_queue(0, 0);
  xmmword_6603D0 = 0u;
  *(_OWORD *)&qword_6603E0 = 0u;
  qword_6603E8 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 1uLL, 0, global_queue);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_3E96C8;
  handler[3] = &unk_63C8B0;
  handler[4] = &qword_660388;
  dispatch_source_set_event_handler((dispatch_source_t)qword_6603E8, handler);
  dispatch_resume((dispatch_object_t)qword_6603E8);
}

void sub_3E96B0(_Unwind_Exception *a1)
{
}

void sub_3E96C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::mutex::lock((std::mutex *)v1);
  CFSetApplyFunction(*(CFSetRef *)(v1 + 64), (CFSetApplierFunction)sub_3E97CC, 0);
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 80);
  while (v2 != v3)
  {
    sub_3E975C(v2);
    v2 += 48;
  }

  std::mutex::unlock((std::mutex *)v1);
}

void sub_3E9744(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_3E975C(uint64_t a1)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(*(CFStringRef *)a1, *(CFStringRef *)(a1 + 8));
  if (result)
  {
    CFPropertyListRef v4 = result;
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3) {
      sub_56964();
    }
    return (CFPropertyListRef)(*(uint64_t (**)(uint64_t, CFPropertyListRef *))(*(void *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t sub_3E97CC(const __CFString *a1)
{
  return CFPreferencesSynchronize(a1, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
}

uint64_t sub_3E97E8(const __CFString *a1, const __CFString *a2, unsigned char *a3)
{
  CFBooleanRef v4 = (const __CFBoolean *)CFPreferencesCopyAppValue(a1, a2);
  CFBooleanRef v5 = v4;
  int valuePtr = 0;
  if (a3) {
    *a3 = 0;
  }
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      int valuePtr = CFBooleanGetValue(v5);
    }
    else if (v6 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    }
    else if (v6 != CFStringGetTypeID() {
           || (CFStringGetCString((CFStringRef)v5, buffer, 64, 0x600u), sscanf(buffer, "%d", &valuePtr) != 1))
    }
    {
LABEL_13:
      uint64_t v7 = valuePtr;
      CFRelease(v5);
      return v7;
    }
    if (a3) {
      *a3 = 1;
    }
    goto LABEL_13;
  }
  return 0;
}

BOOL sub_3E9908(const __CFString *a1, const __CFString *a2, unsigned char *a3)
{
  CFBooleanRef v4 = (const __CFBoolean *)CFPreferencesCopyAppValue(a1, a2);
  CFBooleanRef v5 = v4;
  int valuePtr = 0;
  if (a3) {
    *a3 = 0;
  }
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(v5);
      if (!a3) {
        goto LABEL_17;
      }
      goto LABEL_10;
    }
    if (v6 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
      int Value = valuePtr != 0;
      if (a3) {
LABEL_10:
      }
        *a3 = 1;
    }
    else
    {
      if (v6 != CFStringGetTypeID())
      {
        int Value = 0;
        goto LABEL_17;
      }
      CFStringGetCString((CFStringRef)v5, buffer, 64, 0x600u);
      if (sscanf(buffer, "%d", &valuePtr) == 1)
      {
        if (a3) {
          *a3 = 1;
        }
        int Value = valuePtr != 0;
        goto LABEL_17;
      }
      char v9 = buffer[0];
      if (buffer[0])
      {
        uint64_t v10 = &buffer[1];
        do
        {
          *(v10 - 1) = __tolower(v9);
          int v11 = *v10++;
          char v9 = v11;
        }
        while (v11);
      }
      if (*(unsigned __int16 *)buffer ^ 0x6F6E | buffer[2])
      {
        if (*(_DWORD *)buffer != 1936482662 || v15 != 101)
        {
          if (*(_DWORD *)buffer == 7562617 || !(*(_DWORD *)buffer ^ 0x65757274 | v15))
          {
            int Value = 1;
            if (a3) {
              *a3 = 1;
            }
          }
          else
          {
            int Value = valuePtr;
          }
          goto LABEL_17;
        }
      }
      int Value = 0;
      if (a3) {
        goto LABEL_10;
      }
    }
LABEL_17:
    CFRelease(v5);
    return Value != 0;
  }
  int Value = 0;
  return Value != 0;
}

void *sub_3E9B04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_3E9C00((uint64_t)v8, a4);
  *a1 = a2;
  a1[1] = a3;
  sub_3E9C00((uint64_t)(a1 + 2), (uint64_t)v8);
  sub_27FB64(v8);
  return a1;
}

void sub_3E9B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_27FB64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3E9BAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_27FB64((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_3E9C00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_3E9C98(uint64_t a1)
{
  if ((sub_36B52C(*(void *)(a1 + 8)) & 1) == 0)
  {
    CFBooleanRef v4 = (os_log_t *)sub_32A48(13);
    CFBooleanRef v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "RoutingHandlerAction_ChangeSpeakerOutputChannelConfiguration.cpp";
      __int16 v9 = 1024;
      int v10 = 45;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 20);

  sub_36B5E0(v2, v3, a1 + 24);
}

void sub_3E9DBC(_Unwind_Exception *exception_object)
{
}

void sub_3E9DD8(uint64_t a1)
{
  if ((sub_36B52C(*(void *)(a1 + 8)) & 1) == 0)
  {
    CFBooleanRef v4 = (os_log_t *)sub_32A48(13);
    CFBooleanRef v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "RoutingHandlerAction_ChangeSpeakerOutputChannelConfiguration.cpp";
      __int16 v9 = 1024;
      int v10 = 38;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);

  sub_36B5E0(v2, v3, a1 + 24);
}

void sub_3E9EFC(_Unwind_Exception *exception_object)
{
}

void sub_3E9F18()
{
}

uint64_t sub_3E9F30(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_63C8E0;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  if ((sub_36B52C(a2) & 1) == 0)
  {
    long long v29 = (os_log_t *)sub_32A48(13);
    unint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Device_Speaker_Aspen.cpp";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 213;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&__p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  strcpy(buf, "crsstpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_1B2590((uint64_t)&__p, a2);
  int data = (int)__p.__r_.__value_.__l.__data_;
  if (LODWORD(__p.__r_.__value_.__l.__data_) || !v42)
  {
    uint64_t v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v32 = &off_6414D8;
    v32[2] = data;
  }
  long long v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::string::size_type size = (void *)__p.__r_.__value_.__l.__size_;
  sub_46B38(&v37, (const void *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2);
  if (size) {
    operator delete(size);
  }
  strcpy(buf, "shCSptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_1B2590((uint64_t)&__p, a2);
  int v8 = (int)__p.__r_.__value_.__l.__data_;
  if (LODWORD(__p.__r_.__value_.__l.__data_) || !v42)
  {
    unint64_t v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v33 = &off_6414D8;
    v33[2] = v8;
  }
  os_log_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  __int16 v9 = (void *)__p.__r_.__value_.__l.__size_;
  sub_46B38(&v34, (const void *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2);
  if (v9) {
    operator delete(v9);
  }
  sub_3CD68C();
  uint64_t v10 = qword_65E358;
  if ((uint64_t *)qword_65E358 == &qword_65E360)
  {
LABEL_22:
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      sub_1001A8(&v40, v37, v38);
      int v22 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = v40.__r_.__value_.__r.__words[0];
      sub_82188(&__p, v34, v35);
      int v24 = &v40;
      if (v22 < 0) {
        int v24 = (std::string *)v23;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Speaker_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 106;
      __int16 v46 = 2080;
      char v47 = v24;
      __int16 v48 = 2080;
      os_log_t v49 = p_p;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unable to find Channel Configuration for Data Sources: (Telemetry: %s, Output: %s)\"", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v26, "Unable to find Channel Configuration for Data Sources: (Telemetry: %s, Output: %s)");
  }
  int v11 = v37;
  size_t v12 = (char *)v38 - (char *)v37;
  __int16 v13 = v34;
  size_t v14 = (char *)v35 - (char *)v34;
  while (1)
  {
    __int16 v15 = *(const void **)(v10 + 40);
    if (*(void *)(v10 + 48) - (void)v15 == v12 && !memcmp(v15, v11, v12))
    {
      uint64_t v16 = *(const void **)(v10 + 64);
      if (*(void *)(v10 + 72) - (void)v16 == v14 && !memcmp(v16, v13, v14)) {
        break;
      }
    }
    unint64_t v17 = *(uint64_t **)(v10 + 8);
    if (v17)
    {
      do
      {
        uint64_t v18 = v17;
        unint64_t v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v18 = *(uint64_t **)(v10 + 16);
        BOOL v19 = *v18 == v10;
        uint64_t v10 = (uint64_t)v18;
      }
      while (!v19);
    }
    uint64_t v10 = (uint64_t)v18;
    if (v18 == &qword_65E360) {
      goto LABEL_22;
    }
  }
  int v27 = *(_DWORD *)(v10 + 32);
  if (v13) {
    operator delete(v13);
  }
  if (v11) {
    operator delete(v11);
  }
  *(_DWORD *)(a1 + 20) = v27;
  *(void *)(a1 + 24) = *a3;
  return a1;
}

void sub_3EA3DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, long long buf, long long a20,__int16 a21,__int16 a22,int a23,int a24)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  if (a2 == 3)
  {
    int v27 = __cxa_begin_catch(a1);
    unint64_t v28 = (os_log_t *)sub_32A48(13);
    os_log_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      int v30 = v27[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a20) = 1024;
      DWORD1(a20) = v30;
      WORD4(a20) = 2080;
      *(void *)((char *)&a20 + 10) = "";
      a22 = 1024;
      a23 = 21;
      unint64_t v31 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v32 = v29;
      uint32_t v33 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v33);
    }
  }
  else
  {
    os_log_t v34 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v35 = v34;
      uint64_t v36 = (os_log_t *)sub_32A48(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = v38;
        WORD6(a20) = 2080;
        *(void *)((char *)&a20 + 14) = "";
        HIWORD(a23) = 1024;
        a24 = 21;
        unint64_t v31 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v32 = v37;
        uint32_t v33 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v39 = (os_log_t *)sub_32A48(13);
      os_log_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = "";
        WORD6(a20) = 1024;
        *(_DWORD *)((char *)&a20 + 14) = 21;
        unint64_t v31 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v32 = v40;
        uint32_t v33 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x3EA258);
}

uint64_t sub_3EA704(void *a1)
{
  uint64_t v2 = (char *)operator new(0x90uLL);
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(void *)uint64_t v2 = off_63C9F0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *((void *)v2 + 17) = 0;
  *((void *)v2 + 7) = v2 + 56;
  *((void *)v2 + 8) = v2 + 56;
  unsigned int v8 = 1751409257;
  sub_6367C((uint64_t)(v2 + 80), &v8, 1);
  int v7 = 2;
  sub_176AD4((uint64_t *)v2 + 13, &v7, 1);
  *((void *)v2 + 16) = sub_3EDDBC;
  *((void *)v2 + 17) = v2 + 24;
  uint64_t v3 = sub_463468();
  sub_463588(v3, (uint64_t)(v2 + 80));
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  CFBooleanRef v4 = (std::__shared_weak_count *)qword_660490;
  qword_660488 = (uint64_t)(v2 + 24);
  qword_660490 = (uint64_t)v2;
  if (v4) {
    sub_4636C(v4);
  }
  uint64_t v5 = sub_298DA4();
  uint64_t result = (*(uint64_t (**)(uint64_t, void (*)(uint64_t), uint64_t *))(*(void *)v5 + 128))(v5, sub_3EB290, &qword_660488);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_3EA858(_Unwind_Exception *a1)
{
  sub_463E0(*(void **)(v1 + 88));
  sub_45F50(v2);
  CFBooleanRef v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_3EDA50((uint64_t *)(v1 + 32), 0);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_3EA8C4(void *result, uint64_t a2)
{
  if (*(void *)(a2 + 48))
  {
    uint64_t v2 = a2 + 32;
    uint64_t v19 = 1751409255;
    sub_86438(buf, a2 + 32);
    sub_11A2D0(v20, (uint64_t)buf, 1);
    uint64_t v3 = v2;
    while (1)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == v2) {
        break;
      }
      if ((*(uint64_t (**)(void))(**(void **)(v3 + 16) + 472))(*(void *)(v3 + 16)))
      {
        uint64_t v21 = *(os_unfair_lock_s **)(v3 + 16);
        uint64_t v22 = 0x4000000000;
        uint64_t v23 = 2;
        LOBYTE(v24) = 0;
        char v25 = 0;
        sub_45F50(buf);
        CFBooleanRef v4 = v21;
        if (v21)
        {
          if (v20[2])
          {
            unsigned int v5 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v21->_os_unfair_lock_opaque + 88))(v21, 0);
            uint64_t v6 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v4->_os_unfair_lock_opaque + 88))(v4, 1);
            int v7 = v21;
            int v8 = v22;
            unsigned int v9 = HIDWORD(v22);
            char v10 = v23;
            sub_CAE80(buf, &v24);
            LOBYTE(__p) = 0;
            char v37 = 0;
            sub_327934((uint64_t)v20, (unsigned int *)&v19, v5 | (unint64_t)(v6 << 32), v7, v8, v9, v10 & 1, 0, (uint64_t)buf, 0, 0);
            if (v37 && v36 < 0) {
              operator delete(__p);
            }
            if (v34)
            {
              if (v33 < 0) {
                operator delete(*(void **)buf);
              }
            }
            operator new();
          }
          uint64_t v16 = (os_log_t *)sub_32A48(13);
          unint64_t v17 = *v16;
          if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Aggregate_HAL_Common.cpp";
            __int16 v31 = 1024;
            int v32 = 48;
            _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        else
        {
          size_t v14 = (os_log_t *)sub_32A48(13);
          __int16 v15 = *v14;
          if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Aggregate_HAL_Common.cpp";
            __int16 v31 = 1024;
            int v32 = 47;
            _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
    }
    int v11 = (os_log_t *)sub_32A48(13);
    size_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int inData = 136315394;
      int v27 = "HapticDebugManager.cpp";
      __int16 v28 = 1024;
      int v29 = 45;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"No master haptic device is specified\"", (uint8_t *)&inData, 0x12u);
    }
    __int16 v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "No master haptic device is specified");
  }
  *uint64_t result = 0;
  return result;
}

void sub_3EAE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  __cxa_free_exception(v4);
  sub_3EB170((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3EB170(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  sub_A60C4((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t sub_3EB1B8(uint64_t a1)
{
  sub_221C38((void **)(a1 + 56));
  *(void *)(a1 + 24) = off_63C9A0;
  sub_86524((uint64_t *)(a1 + 48));

  return sub_864D4((uint64_t *)(a1 + 32));
}

void sub_3EB21C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63C918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3EB270(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63C918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3EB290(uint64_t a1)
{
  uint64_t v2 = sub_32A48(26);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 136315394;
        __int16 v15 = "HapticDebugManager.cpp";
        __int16 v16 = 1024;
        int v17 = 110;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Received Haptic Preference Update", (uint8_t *)&v14, 0x12u);
      }
    }
  }
  if (!a1)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      __int16 v15 = "HapticDebugManager.cpp";
      __int16 v16 = 1024;
      int v17 = 112;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int v5 = *(int **)a1;
  CFBooleanRef v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    size_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      __int16 v15 = "HapticDebugManager.cpp";
      __int16 v16 = 1024;
      int v17 = 115;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    __int16 v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Postcondition failure.");
  }
  uint64_t v6 = sub_298DA4();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
  sub_3EB7D0(v5, v7);
  if (v4) {
    sub_4636C(v4);
  }
}

void sub_3EB50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    if (v14) {
      sub_4636C(v14);
    }
    if (a2 == 3)
    {
      uint64_t v18 = __cxa_begin_catch(exception_object);
      uint64_t v19 = (os_log_t *)sub_32A48(13);
      uint64_t v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        int v21 = v18[2];
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 429;
        WORD1(a10) = 1024;
        DWORD1(a10) = v21;
        WORD4(a10) = 2080;
        *(void *)((char *)&a10 + 10) = "";
        a12 = 1024;
        a13 = 117;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).", (uint8_t *)&a9, 0x28u);
      }
    }
    else
    {
      uint64_t v22 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        uint64_t v23 = v22;
        long long v24 = (os_log_t *)sub_32A48(13);
        char v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
          LODWORD(a9) = 136316162;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 430;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v26;
          WORD6(a10) = 2080;
          *(void *)((char *)&a10 + 14) = "";
          HIWORD(a13) = 1024;
          a14 = 117;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).", (uint8_t *)&a9, 0x2Cu);
        }
      }
      else
      {
        int v27 = (os_log_t *)sub_32A48(13);
        __int16 v28 = *v27;
        if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315906;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 431;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = "";
          WORD6(a10) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = 117;
          _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).", (uint8_t *)&a9, 0x22u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x3EB38CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_3EB7D0(int *a1, int a2)
{
  CFBooleanRef v4 = (os_log_t *)sub_32A48(26);
  unsigned int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    sub_21C8C(&v45, off_638480[*a1]);
    int v6 = v45.__m_.__opaque[15];
    uint64_t sig = v45.__m_.__sig;
    sub_21C8C(&v44, off_638480[a2]);
    int v8 = &v45;
    if (v6 < 0) {
      int v8 = (std::mutex *)sig;
    }
    if (v44.__cv_.__opaque[15] >= 0) {
      uint64_t v9 = (uint64_t)&v44;
    }
    else {
      uint64_t v9 = v44.__cv_.__sig;
    }
    int buf = 136315906;
    buf_4 = "HapticDebugManager.cpp";
    __int16 v38 = 1024;
    int v39 = 183;
    __int16 v40 = 2080;
    CFStringRef v41 = v8;
    __int16 v42 = 2080;
    uint64_t v43 = v9;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Old State: %s, New State: %s", (uint8_t *)&buf, 0x26u);
    if (v44.__cv_.__opaque[15] < 0) {
      operator delete((void *)v44.__cv_.__sig);
    }
    if (v45.__m_.__opaque[15] < 0) {
      operator delete((void *)v45.__m_.__sig);
    }
  }
  int v10 = *a1;
  if (*a1 == a2)
  {
    int v11 = (os_log_t *)sub_32A48(26);
    size_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      sub_21C8C(&v45, off_638480[a2]);
      __int16 v13 = v45.__m_.__opaque[15] >= 0 ? &v45 : (std::mutex *)v45.__m_.__sig;
      int buf = 136315650;
      buf_4 = "HapticDebugManager.cpp";
      __int16 v38 = 1024;
      int v39 = 187;
      __int16 v40 = 2080;
      CFStringRef v41 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Redundant update to maggie debug preference state : %s", (uint8_t *)&buf, 0x1Cu);
      if (v45.__m_.__opaque[15] < 0) {
        operator delete((void *)v45.__m_.__sig);
      }
    }
    int v10 = *a1;
  }
  *a1 = a2;
  if (v10 == 1)
  {
    __int16 v16 = (os_log_t *)sub_32A48(26);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136315394;
      buf_4 = "HapticDebugManager.cpp";
      __int16 v38 = 1024;
      int v39 = 205;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disabling IO Haptic Debug", (uint8_t *)&buf, 0x12u);
    }
    uint64_t v18 = (std::__shared_weak_count *)*((void *)a1 + 3);
    if (v18)
    {
      uint64_t v19 = std::__shared_weak_count::lock(v18);
      if (v19)
      {
        uint64_t v20 = *((void *)a1 + 2);
        if (v20)
        {
          sub_2235FC(v20, 0);
LABEL_40:
          sub_4636C(v19);
          goto LABEL_41;
        }
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    int v21 = (os_log_t *)sub_32A48(26);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136315394;
      buf_4 = "HapticDebugManager.cpp";
      __int16 v38 = 1024;
      int v39 = 207;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d No IO Delegate to disable", (uint8_t *)&buf, 0x12u);
    }
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (v10 != 2) {
    goto LABEL_42;
  }
  int v14 = (os_log_t *)sub_32A48(26);
  __int16 v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315394;
    buf_4 = "HapticDebugManager.cpp";
    __int16 v38 = 1024;
    int v39 = 199;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Disabling kAlways Haptic Debug", (uint8_t *)&buf, 0x12u);
  }
  if (!*((void *)a1 + 1))
  {
    int v32 = (os_log_t *)sub_32A48(13);
    char v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "HapticDebugManager.cpp";
      __int16 v38 = 1024;
      int v39 = 200;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3EDA50((uint64_t *)a1 + 1, 0);
LABEL_41:
  a2 = *a1;
LABEL_42:
  if (a2 != 1)
  {
    if (a2 == 2)
    {
      uint64_t v23 = (os_log_t *)sub_32A48(26);
      long long v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEBUG))
      {
        int buf = 136315394;
        buf_4 = "HapticDebugManager.cpp";
        __int16 v38 = 1024;
        int v39 = 222;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabling kAlways Haptic Debug", (uint8_t *)&buf, 0x12u);
      }
      sub_3EA8C4(&v35, (uint64_t)a1);
      if (v35) {
        operator new();
      }
    }
    return;
  }
  char v25 = (os_log_t *)sub_32A48(26);
  uint64_t v26 = *v25;
  if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315394;
    buf_4 = "HapticDebugManager.cpp";
    __int16 v38 = 1024;
    int v39 = 237;
    _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabling IO Haptic Debug", (uint8_t *)&buf, 0x12u);
  }
  int v27 = (std::__shared_weak_count *)*((void *)a1 + 3);
  if (v27)
  {
    __int16 v28 = std::__shared_weak_count::lock(v27);
    if (v28)
    {
      uint64_t v29 = *((void *)a1 + 2);
      if (v29)
      {
        sub_222FA0(*((void *)a1 + 2));
        sub_2235FC(v29, 1u);
LABEL_61:
        sub_4636C(v28);
        return;
      }
    }
  }
  else
  {
    __int16 v28 = 0;
  }
  int v30 = (os_log_t *)sub_32A48(26);
  __int16 v31 = *v30;
  if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315394;
    buf_4 = "HapticDebugManager.cpp";
    __int16 v38 = 1024;
    int v39 = 239;
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d No IO Delegate to enable", (uint8_t *)&buf, 0x12u);
  }
  if (v28) {
    goto LABEL_61;
  }
}

void sub_3ED7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p)
{
  sub_6651C((uint64_t)&a41);
  std::condition_variable::~condition_variable((std::condition_variable *)(v53 - 232));
  std::mutex::~mutex((std::mutex *)(v53 - 184));
  if (__p) {
    operator delete(__p);
  }
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  sub_86524(&a14);
  _Unwind_Resume(a1);
}

uint64_t *sub_3EDA50(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (*(void *)v2)
    {
      if (*(void *)(v2 + 8))
      {
        uint64_t v3 = *(void **)(v2 + 40);
        if (v3)
        {
          uint64_t v4 = v3[1];
          if (v4)
          {
            (*(void (**)(void))(*(void *)v4 + 32))(v3[1]);
            uint64_t v3 = *(void **)(v2 + 40);
            *(void *)(v2 + 40) = 0;
            if (!v3)
            {
LABEL_11:
              sub_3D6EF8(*(AudioObjectID **)v2, **(OSStatus (__cdecl ***)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v2 + 8));
              uint64_t v5 = *(void *)(v2 + 40);
              *(void *)(v2 + 40) = 0;
              if (v5) {
                (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
              }
              sub_45F50((void *)(v2 + 16));
              sub_864D4((uint64_t *)(v2 + 8));
              sub_86524((uint64_t *)v2);
              operator delete();
            }
          }
          else
          {
            *(void *)(v2 + 40) = 0;
          }
          (*(void (**)(void *))(*v3 + 8))(v3);
          goto LABEL_11;
        }
        int v10 = (os_log_t *)sub_32A48(13);
        int v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          int v14 = "AlwaysOnHapticDebug.cpp";
          __int16 v15 = 1024;
          int v16 = 127;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
        }
      }
      else
      {
        int v8 = (os_log_t *)sub_32A48(13);
        uint64_t v9 = *v8;
        if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          int v14 = "AlwaysOnHapticDebug.cpp";
          __int16 v15 = 1024;
          int v16 = 126;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
        }
      }
    }
    else
    {
      int v6 = (os_log_t *)sub_32A48(13);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        int v14 = "AlwaysOnHapticDebug.cpp";
        __int16 v15 = 1024;
        int v16 = 125;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return result;
}

void sub_3EDD88(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_3EDDBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 147;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 == 2)
  {
    v7[1] = 0;
    uint64_t v8 = a4;
    v7[0] = sub_3EDF6C;
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_660498, memory_order_acquire) != -1)
    {
      *(void *)int buf = v7;
      *(void *)&_DWORD buf[8] = &v8;
      uint64_t v9 = buf;
      std::__call_once(&qword_660498, &v9, (void (__cdecl *)(void *))sub_3EDF3C);
    }
  }
}

void sub_3EDF20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3EDF3C(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(uint64_t (**)(void *))v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = (void *)(*(void *)(*a1)[1] + (v3 >> 1));
  if (v3) {
    return (*(uint64_t (**)(void))(*v4 + v2))();
  }
  else {
    return v2(v4);
  }
}

void sub_3EDF6C(int *a1)
{
  uint64_t v2 = sub_298DA4();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v2);

  sub_3EB7D0(a1, v3);
}

uint64_t *sub_3EDFD0(uint64_t a1)
{
  uint64_t v2 = sub_463468();
  sub_463AEC(v2, a1 + 80);
  uint64_t v3 = sub_298DA4();
  (*(void (**)(uint64_t, void (*)(uint64_t)))(*(void *)v3 + 136))(v3, sub_3EB290);
  sub_463E0(*(void **)(a1 + 112));
  sub_463E0(*(void **)(a1 + 88));
  sub_45F50((void *)(a1 + 56));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  return sub_3EDA50((uint64_t *)(a1 + 32), 0);
}

void sub_3EE074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63C9F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3EE0C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63C9F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *sub_3EE0E8(void *a1, uint64_t a2)
{
  if (!a2)
  {
    int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "HapticDebugManager.cpp";
      __int16 v11 = 1024;
      int v12 = 170;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t result = operator new(0x18uLL);
  uint64_t v5 = a1[4];
  a1 += 4;
  result[1] = a1;
  result[2] = a2;
  *uint64_t result = v5;
  *(void *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void sub_3EE214(_Unwind_Exception *exception_object)
{
}

void sub_3EE230(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  *(void *)a2 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  *(_WORD *)(a2 + 8) = 257;
  uint64_t v7 = *(void *)(a1 + 192);
  int v8 = 1;
  unsigned __int32 v29 = vdup_n_s32(0x6F757470u).u32[0];
  while (1)
  {
    uint64_t v31 = 0x6F75747053526463;
    int v32 = v8;
    if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v31) & 1) == 0) {
      break;
    }
    LODWORD(value) = 1397908579;
    *(void *)((char *)&value + 4) = __PAIR64__(v8, v29);
    unint64_t v9 = sub_99A40(v7);
    if (v9 || !v10)
    {
      int v25 = v9;
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v25;
    }
    unint64_t v11 = HIDWORD(v9);
    if ((unint64_t)v5 >= v6)
    {
      uint64_t v13 = (v5 - v4) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        sub_60548();
      }
      if ((uint64_t)(v6 - (void)v4) >> 1 > v14) {
        unint64_t v14 = (uint64_t)(v6 - (void)v4) >> 1;
      }
      if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)sub_46BF4(v15);
      }
      else {
        uint64_t v16 = 0;
      }
      int v17 = (char *)(v15 + 4 * v13);
      *(_DWORD *)int v17 = v11;
      int v12 = v17 + 4;
      while (v5 != v4)
      {
        int v18 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v17 - 1) = v18;
        v17 -= 4;
      }
      unint64_t v6 = v15 + 4 * v16;
      if (v4) {
        operator delete(v4);
      }
      uint64_t v4 = v17;
    }
    else
    {
      *(_DWORD *)uint64_t v5 = HIDWORD(v9);
      int v12 = v5 + 4;
    }
    ++v8;
    uint64_t v5 = v12;
    if (v8 == 5) {
      goto LABEL_25;
    }
  }
  int v12 = v5;
LABEL_25:
  uint64_t v19 = v12 - v4;
  if (v12 != v4)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, ((unint64_t)v19 >> 2), &kCFTypeArrayCallBacks);
    uint64_t v21 = 0;
    unint64_t v22 = v19 >> 2;
    *(void *)&long long value = Mutable;
    WORD4(value) = 257;
    unsigned int v23 = 1;
    do
    {
      sub_451D0((uint64_t)&value, *(_DWORD *)&v4[4 * v21]);
      uint64_t v21 = v23;
    }
    while (v22 > v23++);
    if (*(unsigned char *)(v28 + 9) && (void)value && *(void *)v28) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)v28, @"impedances", (const void *)value);
    }
    sub_3D61C((uint64_t)&value);
  }
  sub_36A2B8(&value, *(void *)(v27 + 192));
  if (sub_36A9B8(*((const __CFData **)&value + 1)) && *(unsigned char *)(v28 + 9) && *((void *)&value + 1) && *(void *)v28) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)v28, @"speaker calibration", *((const void **)&value + 1));
  }
  sub_49A90(&value);
  if (v4) {
    operator delete(v4);
  }
}

void sub_3EE51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3D61C((uint64_t)va);
  if (v5) {
    operator delete(v5);
  }
  sub_80594(a3);
  _Unwind_Resume(a1);
}

uint64_t sub_3EE574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v6 = 0x6F75747053526463;
  int v7 = 1;
  if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v6)) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 192);
  if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &qword_65D4A8)) {
    return 1;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 16);

  return v5(v3, &qword_65D488);
}

void sub_3EE668(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    __int16 v38 = (os_log_t *)sub_32A48(13);
    int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = *(double **)a2;
      LODWORD(v66) = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v65);
      __int16 v40 = v70 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 221;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v40;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (SHIBYTE(v70) < 0) {
        operator delete(__p);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v42 = (os_log_t *)sub_32A48(13);
    uint64_t v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = *(double **)a2;
      LODWORD(v66) = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v65);
      std::condition_variable v44 = v70 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 222;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v44;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = a3;
      *(_WORD *)&unsigned char buf[34] = 2048;
      *(void *)&uint8_t buf[36] = a4;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (SHIBYTE(v70) < 0) {
        operator delete(__p);
      }
    }
    std::mutex v45 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::mutex v45 = &off_6414D8;
    void v45[2] = 561211770;
  }
  if (!a6)
  {
    __int16 v46 = (os_log_t *)sub_32A48(13);
    char v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = *(double **)a2;
      LODWORD(v66) = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v65);
      __int16 v48 = v70 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 223;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "inData";
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&unsigned char buf[30] = v48;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (SHIBYTE(v70) < 0) {
        operator delete(__p);
      }
    }
    os_log_t v49 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v49 = &off_6414D8;
    v49[2] = 561211770;
  }
  int v13 = *a2;
  if (*a2 == 1886614381)
  {
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      uint64_t v57 = (os_log_t *)sub_32A48(13);
      CFRange v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
      {
        uint64_t v65 = *(double **)a2;
        LODWORD(v66) = a2[2];
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v65);
        int v59 = SHIBYTE(v70);
        uint64_t v60 = (void **)__p;
        int v61 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
        p_p = &__p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        if (v59 < 0) {
          p_p = v60;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 260;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = p_p;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&unsigned char buf[30] = a5;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&uint8_t buf[36] = v61;
        _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (SHIBYTE(v70) < 0) {
          operator delete(__p);
        }
      }
      uint64_t v63 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v63 = &off_6414D8;
      double v63[2] = 561211770;
    }
    uint64_t v35 = *(void (**)(void))(**(void **)(a1 + 192) + 48);
    v35();
  }
  else if (v13 == 1986814563)
  {
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      int v50 = (os_log_t *)sub_32A48(13);
      char v51 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
      {
        uint64_t v65 = *(double **)a2;
        LODWORD(v66) = a2[2];
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v65);
        int v52 = SHIBYTE(v70);
        uint64_t v53 = (void **)__p;
        int v54 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
        os_log_t v55 = &__p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        if (v52 < 0) {
          os_log_t v55 = v53;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 250;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v55;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&unsigned char buf[30] = a5;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&uint8_t buf[36] = v54;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (SHIBYTE(v70) < 0) {
          operator delete(__p);
        }
      }
      char v56 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v56 = &off_6414D8;
      v56[2] = 561211770;
    }
    sub_796B4(a1 + 528, *(float *)a6);
    LODWORD(__p) = __exp10f(v30 / 20.0);
    uint64_t v31 = *(void *)(a1 + 192);
    strcpy((char *)buf, "#sVCptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    int v32 = sub_FE8A8(v31);
    if (v32)
    {
      int v33 = v32;
      char v34 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v34 = &off_6414D8;
      _DWORD v34[2] = v33;
    }
  }
  else if (v13 == 1986164323)
  {
    std::string __p = 0;
    char v69 = 0;
    uint64_t v70 = 0;
    sub_15DF18(&__p, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
    unint64_t v14 = (char *)__p;
    if (v69 - (unsigned char *)__p == 68)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      unint64_t v67 = 0;
      do
      {
        float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)&v14[4 * v18]);
        if ((unint64_t)v15 >= v17)
        {
          float64x2_t v64 = v19;
          uint64_t v20 = ((char *)v15 - (char *)v16) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
          {
            uint64_t v66 = v15;
            unint64_t v67 = v17;
            uint64_t v65 = v16;
            sub_60548();
          }
          if ((uint64_t)(v17 - (void)v16) >> 3 > v21) {
            unint64_t v21 = (uint64_t)(v17 - (void)v16) >> 3;
          }
          if (v17 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            unint64_t v22 = (unint64_t)sub_10724(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          long long v24 = (float64x2_t *)(v22 + 16 * v20);
          float64x2_t *v24 = v64;
          int v25 = v24 + 1;
          if (v15 == (float64x2_t *)v16)
          {
            f64 = (double *)v24;
          }
          else
          {
            do
            {
              f64 = v24[-1].f64;
              v24[-1] = v15[-1];
              --v15;
              --v24;
            }
            while (v15 != (float64x2_t *)v16);
          }
          unint64_t v17 = v22 + 16 * v23;
          if (v16) {
            operator delete(v16);
          }
          uint64_t v16 = f64;
          unint64_t v15 = v25;
        }
        else
        {
          *v15++ = v19;
        }
        ++v18;
      }
      while (v18 != 16);
      uint64_t v66 = v15;
      unint64_t v67 = v17;
      uint64_t v65 = v16;
      uint64_t v27 = a1 + 544;
      sub_463E0(*(void **)(a1 + 544));
      *(void *)(a1 + 536) = a1 + 544;
      *(void *)(a1 + 552) = 0;
      *(void *)(a1 + 544) = 0;
      sub_16FF70((uint64_t)buf, &v65);
      *(_DWORD *)(a1 + 528) = *(_DWORD *)buf;
      sub_463E0(*(void **)(a1 + 544));
      uint64_t v28 = *(void **)&buf[16];
      *(void *)(a1 + 536) = *(void *)&buf[8];
      *(void *)(a1 + 544) = v28;
      uint64_t v29 = *(void *)&buf[24];
      *(void *)(a1 + 552) = *(void *)&buf[24];
      if (v29)
      {
        v28[2] = v27;
        *(void *)&_DWORD buf[8] = &buf[16];
        *(void *)&buf[16] = 0;
        *(void *)&unsigned char buf[24] = 0;
        uint64_t v28 = 0;
      }
      else
      {
        *(void *)(a1 + 536) = v27;
      }
      *(_OWORD *)(a1 + 560) = *(_OWORD *)&buf[32];
      sub_463E0(v28);
      if (v16)
      {
        uint64_t v66 = (float64x2_t *)v16;
        operator delete(v16);
        unint64_t v14 = (char *)__p;
      }
    }
    else
    {
      char v36 = (os_log_t *)sub_32A48(23);
      char v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 233;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Port_DiscreteSpeaker_Aspen::SetPropertyData() - invalid boot chime volume curve size.", buf, 0x12u);
      }
    }
    if (v14)
    {
      char v69 = v14;
      operator delete(v14);
    }
  }
  else
  {
    sub_102AAC(a1, (uint64_t *)a2, a3, a4, v12, a6);
  }
}

void sub_3EF164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3EF1D0(void *a1, int *a2, uint64_t a3, uint64_t a4, int *a5, float *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    int v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v54 = *(void *)a2;
      int v55 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v54);
      uint64_t v27 = v57 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v59 = 1024;
      int v60 = 171;
      __int16 v61 = 2080;
      uint64_t v62 = (const char *)v27;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v29 = (os_log_t *)sub_32A48(13);
    float v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v54 = *(void *)a2;
      int v55 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v54);
      uint64_t v31 = v57 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v59 = 1024;
      int v60 = 172;
      __int16 v61 = 2080;
      uint64_t v62 = (const char *)v31;
      __int16 v63 = 1024;
      LODWORD(v64[0]) = a3;
      WORD2(v64[0]) = 2048;
      *(void *)((char *)v64 + 6) = a4;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }
    int v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v32 = &off_6414D8;
    v32[2] = 561211770;
  }
  if (!a6)
  {
    int v33 = (os_log_t *)sub_32A48(13);
    char v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v54 = *(void *)a2;
      int v55 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v54);
      uint64_t v35 = v57 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v59 = 1024;
      int v60 = 173;
      __int16 v61 = 2080;
      uint64_t v62 = "outData";
      __int16 v63 = 2080;
      v64[0] = v35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
    }
    char v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v36 = &off_6414D8;
    v36[2] = 561211770;
  }
  int v13 = *a2;
  if (*a2 > 1986164322)
  {
    if (v13 == 1986164323) {
      return;
    }
    if (v13 != 1986814563) {
      goto LABEL_19;
    }
    int v14 = *a5;
    if (v14 != (*(unsigned int (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, a3, a4))
    {
      char v37 = (os_log_t *)sub_32A48(13);
      __int16 v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        uint64_t v54 = *(void *)a2;
        int v55 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v54);
        int v39 = v57;
        __int16 v40 = (void **)__p[0];
        int v41 = *a5;
        int v42 = (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, a3, a4);
        uint64_t v43 = __p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        if (v39 < 0) {
          uint64_t v43 = v40;
        }
        __int16 v59 = 1024;
        int v60 = 188;
        __int16 v61 = 2080;
        uint64_t v62 = (const char *)v43;
        __int16 v63 = 1024;
        LODWORD(v64[0]) = v41;
        WORD2(v64[0]) = 1024;
        *(_DWORD *)((char *)v64 + 6) = v42;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v57 < 0) {
          operator delete(__p[0]);
        }
      }
      std::condition_variable v44 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::condition_variable v44 = &off_6414D8;
      v44[2] = 561211770;
    }
    uint64_t v15 = a1[24];
    strcpy(buf, "#sVCptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v16 = sub_99A40(v15);
    int v18 = v16;
    if (v16 || !v17)
    {
      uint64_t v53 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v53 = &off_6414D8;
      v53[2] = v18;
    }
    float v19 = fabsf(*((float *)&v16 + 1));
    float v20 = v19 * 0.00000011921;
    if (v19 < 1.0) {
      float v20 = 0.00000011921;
    }
    float v21 = 0.0;
    if (v19 > v20)
    {
      float v22 = log10f(*((float *)&v16 + 1));
      float v21 = sub_7953C((uint64_t)(a1 + 66), v22 * 20.0);
    }
    *a6 = v21;
  }
  else
  {
    if (v13 != 1886614381)
    {
      if (v13 == 1937204590)
      {
        *(_DWORD *)a6 = sub_23AC0();
        return;
      }
LABEL_19:
      sub_102FDC((uint64_t)a1, (uint64_t *)a2, a3, a4, v12, (uint64_t)a6);
      return;
    }
    int v23 = *a5;
    if (v23 != (*(unsigned int (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, a3, a4))
    {
      std::mutex v45 = (os_log_t *)sub_32A48(13);
      __int16 v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        uint64_t v54 = *(void *)a2;
        int v55 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v54);
        int v47 = v57;
        __int16 v48 = (void **)__p[0];
        int v49 = *a5;
        int v50 = (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, a3, a4);
        char v51 = __p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port_DiscreteSpeaker_Aspen.cpp";
        if (v47 < 0) {
          char v51 = v48;
        }
        __int16 v59 = 1024;
        int v60 = 208;
        __int16 v61 = 2080;
        uint64_t v62 = (const char *)v51;
        __int16 v63 = 1024;
        LODWORD(v64[0]) = v49;
        WORD2(v64[0]) = 1024;
        *(_DWORD *)((char *)v64 + 6) = v50;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v57 < 0) {
          operator delete(__p[0]);
        }
      }
      int v52 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v52 = &off_6414D8;
      v52[2] = 561211770;
    }
    long long v24 = *(void (**)(void))(*(void *)a1[24] + 40);
    v24();
  }
}

void sub_3EFAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3EFB1C(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v10 = (os_log_t *)sub_32A48(13);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *a2;
      int v19 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      uint64_t v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      int v23 = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 151;
      __int16 v26 = 2080;
      uint64_t v27 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *a2;
      int v19 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      if (v21 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136316162;
      int v23 = "Port_DiscreteSpeaker_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 152;
      __int16 v26 = 2080;
      uint64_t v27 = v16;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 2048;
      uint64_t v31 = a4;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    char v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v17 = &off_6414D8;
    v17[2] = 561211770;
  }
  int v8 = *(_DWORD *)a2;
  uint64_t result = 4;
  if (*(int *)a2 > 1986164322)
  {
    if (v8 == 1986814563) {
      return result;
    }
    if (v8 == 1986164323) {
      return 0;
    }
    goto LABEL_9;
  }
  if (v8 != 1886614381 && v8 != 1937204590)
  {
LABEL_9:
    sub_1033C8(a1, a2, a3, a4);
    return 0;
  }
  return result;
}

BOOL sub_3EFE60(uint64_t a1, int *a2)
{
  int v2 = *a2;
  return *a2 == 1886614381 || v2 == 1986814563 || v2 == 1986164323;
}

void sub_3EFE94(uint64_t a1)
{
  *(void *)a1 = off_63CA28;
  sub_463E0(*(void **)(a1 + 544));
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_3EFF00(uint64_t a1)
{
  *(void *)a1 = off_63CA28;
  sub_463E0(*(void **)(a1 + 544));

  return sub_103C0C(a1);
}

uint64_t sub_3EFF58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6605C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_6605C0))
  {
    qword_6605B8 = (uint64_t)sub_3F021C();
    __cxa_guard_release(&qword_6605C0);
  }
  uint64_t v0 = (void *)qword_6605B8;
  if (*(void *)(qword_6605B8 + 24) || *(void *)qword_6605B8 == *(void *)(qword_6605B8 + 8))
  {
    char v1 = 1;
  }
  else
  {
    int v2 = (os_log_t *)sub_32A48(20);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "DeviceSettingsFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 230;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d The default sub-port for built-in microphone has not been specified", (uint8_t *)&v11, 0x12u);
    }
    char v1 = 0;
  }
  if (!v0[7] && v0[4] != v0[5])
  {
    uint64_t v4 = (os_log_t *)sub_32A48(20);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "DeviceSettingsFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 236;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d The default sub-port for built-in microphone in VP chat use cases has not been specified", (uint8_t *)&v11, 0x12u);
    }
    char v1 = 0;
  }
  if (v0[4] != v0[5] && *v0 == v0[1])
  {
    unint64_t v9 = (os_log_t *)sub_32A48(20);
    char v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "DeviceSettingsFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 242;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Built-in mic sub-port for non-VP chat modes have not been specified", (uint8_t *)&v11, 0x12u);
    }
  }
  else if (v1)
  {
    return qword_6605B8;
  }
  uint64_t v6 = (os_log_t *)sub_32A48(20);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
  {
    int v11 = 136315394;
    uint64_t v12 = "DeviceSettings_Aspen.cpp";
    __int16 v13 = 1024;
    int v14 = 296;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Invariant failure for Transducer Database", (uint8_t *)&v11, 0x12u);
  }
  return qword_6605B8;
}

void sub_3F01FC(_Unwind_Exception *a1)
{
}

uint64_t *sub_3F021C()
{
  int v0 = sub_207A20();
  if (v0 <= 193)
  {
    switch(v0)
    {
      case 9:
      case 10:
      case 17:
      case 18:
      case 31:
      case 36:
      case 37:
      case 38:
      case 39:
        goto LABEL_25;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 21:
      case 22:
      case 23:
      case 44:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 76:
      case 79:
      case 82:
      case 89:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
        goto LABEL_28;
      case 19:
      case 20:
      case 29:
      case 30:
      case 40:
      case 41:
      case 42:
      case 43:
      case 45:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660BC8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_660BC8))
        {
          sub_454308();
          __cxa_guard_release(&qword_660BC8);
        }
        return (uint64_t *)&unk_660B10;
      case 24:
      case 25:
      case 26:
      case 125:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6494D0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_6494D0))
        {
          sub_6F6D8();
          __cxa_guard_release(&qword_6494D0);
        }
        return &qword_649418;
      case 27:
      case 28:
      case 32:
      case 33:
      case 34:
      case 35:
      case 46:
        int v3 = 1;
        goto LABEL_26;
      case 72:
      case 73:
      case 74:
      case 75:
      case 77:
      case 78:
      case 80:
      case 81:
      case 83:
      case 84:
      case 85:
      case 86:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 98:
      case 99:
      case 102:
      case 103:
        goto LABEL_3;
      case 87:
      case 88:
      case 96:
      case 97:
      case 100:
      case 101:
      case 104:
      case 105:
        int v2 = 5;
        goto LABEL_19;
      case 106:
      case 107:
        goto LABEL_18;
      default:
        if (v0 == 180)
        {
LABEL_25:
          int v3 = 0;
LABEL_26:
          sub_8295C(v3);
          uint64_t result = &qword_649BF0;
        }
        else
        {
          if (v0 != 193) {
            goto LABEL_28;
          }
          sub_3F0F7C();
          uint64_t result = &qword_6606C8;
        }
        break;
    }
    return result;
  }
  if (v0 <= 2027)
  {
    if ((v0 - 2025) < 3)
    {
LABEL_3:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658A78, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_658A78))
      {
        sub_31657C();
        __cxa_guard_release(&qword_658A78);
      }
      return &qword_6589C0;
    }
    if (v0 == 194)
    {
      sub_3F1B20();
      return &qword_660888;
    }
    goto LABEL_28;
  }
  if ((v0 - 2028) < 2)
  {
LABEL_18:
    int v2 = 4;
LABEL_19:
    sub_344E94(v2);
    return &qword_65CE30;
  }
  if ((v0 - 12002) >= 2)
  {
LABEL_28:
    uint64_t v6 = (os_log_t *)sub_32A48(20);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "DeviceSettings_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 147;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = sub_207A20();
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown product type %u, returning Unknown Transducer Database", buf, 0x18u);
      }
    }
    sub_3F2D48();
    return &qword_6605C8;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669568, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_669568))
  {
    *(_OWORD *)int buf = xmmword_4E7B70;
    sub_72300(v35, (__int32 *)buf, 4);
    sub_857F4((uint64_t)byte_6694B0, (uint64_t)v35);
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    __cxa_guard_release(&qword_669568);
  }
  int v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  sub_46B38(&v32, (const void *)qword_669508, qword_669510[0], (qword_669510[0] - qword_669508) >> 2);
  std::string __p = 0;
  __int16 v30 = 0;
  unint64_t v31 = 0;
  sub_46B38(&__p, (const void *)qword_6690E8, qword_6690F0, (qword_6690F0 - qword_6690E8) >> 2);
  uint64_t v4 = v30;
  if ((unint64_t)v30 >= v31)
  {
    int v8 = (char *)__p;
    uint64_t v9 = (v30 - (unsigned char *)__p) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_60548();
    }
    uint64_t v11 = v31 - (void)__p;
    if ((uint64_t)(v31 - (void)__p) >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)sub_46BF4(v13);
      int v8 = (char *)__p;
      uint64_t v4 = v30;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (char *)(v13 + 4 * v9);
    unint64_t v16 = v13 + 4 * v14;
    *(_DWORD *)uint64_t v15 = 1918990112;
    uint64_t v5 = v15 + 4;
    while (v4 != v8)
    {
      int v17 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    std::string __p = v15;
    __int16 v30 = v5;
    unint64_t v31 = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)__int16 v30 = 1918990112;
    uint64_t v5 = v4 + 4;
  }
  __int16 v30 = v5;
  v28[0] = (uint64_t)&v32;
  v28[1] = (uint64_t)&__p;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6695A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_6695A8))
  {
    LODWORD(v37) = 1718514737;
    uint64_t v40 = 0x637264646F6D6E69;
    sub_456680(&__src, (uint64_t)&v40, 2);
    sub_456714((uint64_t *)buf, v28, (int *)&v37, (uint64_t)&__src);
    sub_7258C((uint64_t)&unk_669570, 1835216945, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)buf);
    int v23 = buf;
    sub_72620((void ***)&v23);
    sub_45F50(&__src);
    __cxa_guard_release(&qword_6695A8);
  }
  uint64_t v18 = operator new(8uLL);
  *uint64_t v18 = 0x726D76637670766FLL;
  __int16 v46 = v18 + 1;
  int v47 = v18 + 1;
  long long __src = v18;
  sub_72384((uint64_t)buf, 1634495520, (uint64_t)&v32, 1852796517, -1, (uint64_t)&__src);
  operator delete(v18);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6695E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_6695E8))
  {
    sub_7245C((uint64_t)&__src, (uint64_t)buf);
    sub_724F8(&v23, (uint64_t)&__src, 1uLL);
    sub_72890((uint64_t)&unk_6695B0, 1634495520, 1835229548, 1, (uint64_t *)&v23);
    uint64_t v40 = (uint64_t)&v23;
    sub_72620((void ***)&v40);
    sub_726A4(&__src);
    __cxa_guard_release(&qword_6695E8);
  }
  long long __src = &unk_669570;
  __int16 v46 = &unk_6695B0;
  sub_4568C8(byte_6694B0, (char *)&__src, (uint64_t)&v47, 2uLL);
  qword_6694C8 = (uint64_t)&unk_669570;
  int v19 = (void **)operator new(8uLL);
  *int v19 = (void *)0x726D76637670766FLL;
  __int16 v24 = v19 + 1;
  int v25 = v19 + 1;
  int v23 = (uint8_t *)v19;
  sub_72384((uint64_t)&__src, 1634495520, (uint64_t)&v32, 1935827812, 1, (uint64_t)&v23);
  operator delete(v19);
  float v20 = (void **)operator new(8uLL);
  *float v20 = (void *)0x726D76637670766FLL;
  int v41 = v20 + 1;
  int v42 = v20 + 1;
  uint64_t v40 = (uint64_t)v20;
  sub_72384((uint64_t)&v23, 1634495520, (uint64_t)&v32, 1668441188, 0, (uint64_t)&v40);
  operator delete(v20);
  char v21 = operator new(8uLL);
  void *v21 = 0x726D76637670766FLL;
  *((void *)&v37 + 1) = v21 + 1;
  __int16 v38 = v21 + 1;
  *(void *)&long long v37 = v21;
  sub_72384((uint64_t)&v40, 1634495520, (uint64_t)&v32, 1852796517, -1, (uint64_t)&v37);
  operator delete(v21);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669628, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_669628))
  {
    sub_7245C((uint64_t)&v37, (uint64_t)&v23);
    sub_724F8(v22, (uint64_t)&v37, 1uLL);
    sub_7258C((uint64_t)&unk_6695F0, 1835216946, 1835230834, 0, 1970303090, 1718775412, v22);
    char v36 = (void **)v22;
    sub_72620(&v36);
    sub_726A4(&v37);
    __cxa_guard_release(&qword_669628);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669668, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_669668))
  {
    sub_7245C((uint64_t)&v37, (uint64_t)&__src);
    sub_724F8(v22, (uint64_t)&v37, 1uLL);
    sub_7258C((uint64_t)&unk_669630, 1835216947, 1835229803, 0, 1970303090, 1650549611, v22);
    char v36 = (void **)v22;
    sub_72620(&v36);
    sub_726A4(&v37);
    __cxa_guard_release(&qword_669668);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6696A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_6696A8))
  {
    sub_7245C((uint64_t)&v37, (uint64_t)&v40);
    sub_724F8(v22, (uint64_t)&v37, 1uLL);
    sub_72890((uint64_t)&unk_669670, 1634495520, 1835229548, 2, v22);
    char v36 = (void **)v22;
    sub_72620(&v36);
    sub_726A4(&v37);
    __cxa_guard_release(&qword_6696A8);
  }
  long long v37 = *(_OWORD *)&off_63FC18;
  __int16 v38 = &unk_669670;
  sub_4568C8(byte_6694D0, (char *)&v37, (uint64_t)&v39, 3uLL);
  qword_6694E8 = (uint64_t)&unk_6695F0;
  if (v43)
  {
    std::condition_variable v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    int v25 = v24;
    operator delete(v24);
  }
  if (v48)
  {
    int v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    int v47 = v46;
    operator delete(v46);
  }
  if (v51)
  {
    int v52 = v51;
    operator delete(v51);
  }
  if (*(void *)&buf[8])
  {
    *(void *)&buf[16] = *(void *)&buf[8];
    operator delete(*(void **)&buf[8]);
  }
  if (__p)
  {
    __int16 v30 = (char *)__p;
    operator delete(__p);
  }
  if (v32)
  {
    int v33 = v32;
    operator delete(v32);
  }
  return (uint64_t *)byte_6694B0;
}

void sub_3F0B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_72620((void ***)&a32);
  sub_726A4(&a33);
  __cxa_guard_abort(&qword_6696A8);
  sub_726A4(&a41);
  sub_726A4(&a13);
  sub_726A4((void *)(v41 - 192));
  sub_726A4((void *)(v41 - 128));
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_3F0F7C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660780, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_660780))
  {
    uint64_t v81 = 0x736D6963696D6963;
    sub_72300(v79, (__int32 *)&v81, 2);
    sub_857F4((uint64_t)&qword_6606C8, (uint64_t)v79);
    if (v79[0])
    {
      v79[1] = v79[0];
      operator delete(v79[0]);
    }
    __cxa_guard_release(&qword_660780);
  }
  uint64_t v81 = 0x66666D6966736D69;
  sub_72300(v78, (__int32 *)&v81, 2);
  int v0 = (char *)operator new(0x18uLL);
  v77[1] = v0 + 24;
  v77[2] = v0 + 24;
  qmemcpy(v0, "ivpvovpvcgpvcvmrgcrvgsmv", 24);
  v77[0] = v0;
  char v1 = (char *)operator new(0xCuLL);
  v76[1] = v1 + 12;
  v76[2] = v1 + 12;
  qmemcpy(v1, " wargcrvgsmv", 12);
  v76[0] = v1;
  __int32 v66 = 1768778083;
  sub_72300(&v81, &v66, 1);
  sub_72384((uint64_t)v71, 1651797297, (uint64_t)&v81, 1869442665, -1, (uint64_t)v77);
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete((void *)v81);
  }
  __int32 v61 = 1936550243;
  sub_72300(&v81, &v61, 1);
  sub_72384((uint64_t)&v66, 1953460273, (uint64_t)&v81, 1869442665, -1, (uint64_t)v77);
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete((void *)v81);
  }
  __int32 v56 = 1718446435;
  sub_72300(&v81, &v56, 1);
  sub_72384((uint64_t)&v61, 1718514737, (uint64_t)&v81, 1869442665, -1, (uint64_t)v77);
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete((void *)v81);
  }
  sub_72384((uint64_t)&v56, 1650811245, (uint64_t)v78, 1935827812, 1, (uint64_t)v76);
  sub_72384((uint64_t)v51, 1650811245, (uint64_t)v78, 1668441188, 0, (uint64_t)v76);
  sub_72384((uint64_t)v46, 1634495520, (uint64_t)&unk_660720, 1852796517, -1, (uint64_t)v77);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6607C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_6607C0))
  {
    sub_7245C((uint64_t)&v81, (uint64_t)v71);
    sub_7245C((uint64_t)v83, (uint64_t)&v56);
    sub_724F8(v45, (uint64_t)&v81, 2uLL);
    sub_7258C((uint64_t)&unk_660788, 1835216945, 1835229812, 0, 1819244402, 1651799149, v45);
    std::chrono::steady_clock::time_point v80 = (void **)v45;
    sub_72620(&v80);
    for (uint64_t i = 64; i != -64; i -= 64)
      sub_726A4((uint64_t *)((char *)&v81 + i));
    __cxa_guard_release(&qword_6607C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_660800))
  {
    sub_7245C((uint64_t)&v81, (uint64_t)&v66);
    sub_724F8(v45, (uint64_t)&v81, 1uLL);
    sub_7258C((uint64_t)&unk_6607C8, 1835216946, 1835234416, 0, 1970303090, 1953460256, v45);
    std::chrono::steady_clock::time_point v80 = (void **)v45;
    sub_72620(&v80);
    sub_726A4(&v81);
    __cxa_guard_release(&qword_660800);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_660840))
  {
    sub_7245C((uint64_t)&v81, (uint64_t)&v61);
    sub_7245C((uint64_t)v83, (uint64_t)v51);
    sub_724F8(v45, (uint64_t)&v81, 2uLL);
    sub_7258C((uint64_t)&unk_660808, 1835216947, 1835230834, 0, 1970303090, 1718775412, v45);
    std::chrono::steady_clock::time_point v80 = (void **)v45;
    sub_72620(&v80);
    for (uint64_t j = 64; j != -64; j -= 64)
      sub_726A4((uint64_t *)((char *)&v81 + j));
    __cxa_guard_release(&qword_660840);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_660880))
  {
    sub_7245C((uint64_t)&v81, (uint64_t)v46);
    sub_724F8(v45, (uint64_t)&v81, 1uLL);
    sub_72890((uint64_t)&unk_660848, 1634495520, 1835229548, 1, v45);
    std::chrono::steady_clock::time_point v80 = (void **)v45;
    sub_72620(&v80);
    sub_726A4(&v81);
    __cxa_guard_release(&qword_660880);
  }
  uint64_t v2 = qword_6606D0;
  if (qword_6606D0 >= (unint64_t)qword_6606D8)
  {
    uint64_t v4 = (qword_6606D0 - qword_6606C8) >> 3;
    if ((unint64_t)(v4 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v5 = (qword_6606D8 - qword_6606C8) >> 2;
    if (v5 <= v4 + 1) {
      unint64_t v5 = v4 + 1;
    }
    if ((unint64_t)(qword_6606D8 - qword_6606C8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v6 = v5;
    }
    if (v6) {
      unint64_t v6 = (unint64_t)sub_106EC(v6);
    }
    else {
      uint64_t v7 = 0;
    }
    int v8 = (void *)(v6 + 8 * v4);
    uint64_t v9 = v6 + 8 * v7;
    *int v8 = &unk_660788;
    int v3 = v8 + 1;
    uint64_t v11 = qword_6606C8;
    unint64_t v10 = (char *)qword_6606D0;
    if (qword_6606D0 != qword_6606C8)
    {
      do
      {
        uint64_t v12 = *((void *)v10 - 1);
        v10 -= 8;
        *--int v8 = v12;
      }
      while (v10 != (char *)v11);
      unint64_t v10 = (char *)qword_6606C8;
    }
    qword_6606C8 = (uint64_t)v8;
    qword_6606D0 = (uint64_t)v3;
    qword_6606D8 = v9;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(void *)qword_6606D0 = &unk_660788;
    int v3 = (void *)(v2 + 8);
  }
  qword_6606D0 = (uint64_t)v3;
  if ((unint64_t)v3 >= qword_6606D8)
  {
    uint64_t v14 = ((uint64_t)v3 - qword_6606C8) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v15 = (qword_6606D8 - qword_6606C8) >> 2;
    if (v15 <= v14 + 1) {
      unint64_t v15 = v14 + 1;
    }
    if ((unint64_t)(qword_6606D8 - qword_6606C8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)sub_106EC(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (void *)(v16 + 8 * v14);
    uint64_t v19 = v16 + 8 * v17;
    *uint64_t v18 = &unk_6607C8;
    unint64_t v13 = v18 + 1;
    uint64_t v21 = qword_6606C8;
    float v20 = (char *)qword_6606D0;
    if (qword_6606D0 != qword_6606C8)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *--uint64_t v18 = v22;
      }
      while (v20 != (char *)v21);
      float v20 = (char *)qword_6606C8;
    }
    qword_6606C8 = (uint64_t)v18;
    qword_6606D0 = (uint64_t)v13;
    qword_6606D8 = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *int v3 = &unk_6607C8;
    unint64_t v13 = v3 + 1;
  }
  qword_6606D0 = (uint64_t)v13;
  if ((unint64_t)v13 >= qword_6606D8)
  {
    uint64_t v24 = ((uint64_t)v13 - qword_6606C8) >> 3;
    if ((unint64_t)(v24 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v25 = (qword_6606D8 - qword_6606C8) >> 2;
    if (v25 <= v24 + 1) {
      unint64_t v25 = v24 + 1;
    }
    if ((unint64_t)(qword_6606D8 - qword_6606C8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26) {
      unint64_t v26 = (unint64_t)sub_106EC(v26);
    }
    else {
      uint64_t v27 = 0;
    }
    __int16 v28 = (void *)(v26 + 8 * v24);
    uint64_t v29 = v26 + 8 * v27;
    void *v28 = &unk_660808;
    int v23 = v28 + 1;
    uint64_t v31 = qword_6606C8;
    __int16 v30 = (char *)qword_6606D0;
    if (qword_6606D0 != qword_6606C8)
    {
      do
      {
        uint64_t v32 = *((void *)v30 - 1);
        v30 -= 8;
        *--__int16 v28 = v32;
      }
      while (v30 != (char *)v31);
      __int16 v30 = (char *)qword_6606C8;
    }
    qword_6606C8 = (uint64_t)v28;
    qword_6606D0 = (uint64_t)v23;
    qword_6606D8 = v29;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *unint64_t v13 = &unk_660808;
    int v23 = v13 + 1;
  }
  qword_6606D0 = (uint64_t)v23;
  if ((unint64_t)v23 >= qword_6606D8)
  {
    uint64_t v34 = ((uint64_t)v23 - qword_6606C8) >> 3;
    if ((unint64_t)(v34 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v35 = (qword_6606D8 - qword_6606C8) >> 2;
    if (v35 <= v34 + 1) {
      unint64_t v35 = v34 + 1;
    }
    if ((unint64_t)(qword_6606D8 - qword_6606C8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36) {
      unint64_t v36 = (unint64_t)sub_106EC(v36);
    }
    else {
      uint64_t v37 = 0;
    }
    __int16 v38 = (void *)(v36 + 8 * v34);
    uint64_t v39 = v36 + 8 * v37;
    void *v38 = &unk_660848;
    uint64_t v33 = (uint64_t)(v38 + 1);
    uint64_t v41 = qword_6606C8;
    uint64_t v40 = (char *)qword_6606D0;
    if (qword_6606D0 != qword_6606C8)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *--__int16 v38 = v42;
      }
      while (v40 != (char *)v41);
      uint64_t v40 = (char *)qword_6606C8;
    }
    qword_6606C8 = (uint64_t)v38;
    qword_6606D0 = v33;
    qword_6606D8 = v39;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    void *v23 = &unk_660848;
    uint64_t v33 = (uint64_t)(v23 + 1);
  }
  qword_6606D0 = v33;
  qword_6606E0 = (uint64_t)&unk_660788;
  sub_4D2CC(algn_6606E8, (char *)qword_6606C8, v33, (v33 - qword_6606C8) >> 3);
  qword_660700 = qword_6606E0;
  if (__p)
  {
    int v50 = __p;
    operator delete(__p);
  }
  if (v47)
  {
    __int16 v48 = v47;
    operator delete(v47);
  }
  if (v54)
  {
    int v55 = v54;
    operator delete(v54);
  }
  if (v52)
  {
    uint64_t v53 = v52;
    operator delete(v52);
  }
  if (v59)
  {
    int v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    CFRange v58 = v57;
    operator delete(v57);
  }
  if (v64)
  {
    uint64_t v65 = v64;
    operator delete(v64);
  }
  if (v62)
  {
    __int16 v63 = v62;
    operator delete(v62);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v74)
  {
    uint64_t v75 = v74;
    operator delete(v74);
  }
  if (v72)
  {
    char v73 = v72;
    operator delete(v72);
  }
  if (v76[0]) {
    operator delete(v76[0]);
  }
  if (v77[0]) {
    operator delete(v77[0]);
  }
  if (v78[0])
  {
    v78[1] = v78[0];
    operator delete(v78[0]);
  }
}

void sub_3F18C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v65 - 192) = v64;
  sub_72620((void ***)(v65 - 192));
  sub_726A4((void *)(v65 - 184));
  __cxa_guard_abort(&qword_660880);
  sub_726A4(&a13);
  unint64_t v67 = (void *)a61;
  sub_726A4(&a21);
  sub_726A4(&a29);
  sub_726A4(&a37);
  sub_726A4(&a45);
  sub_726A4(&a53);
  if (v67)
  {
    a62 = (uint64_t)v67;
    operator delete(v67);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v68 = *(void **)(v65 - 240);
  if (v68)
  {
    *(void *)(v65 - 232) = v68;
    operator delete(v68);
  }
  _Unwind_Resume(a1);
}

void sub_3F1B08()
{
}

void sub_3F1B10()
{
}

void sub_3F1B18()
{
}

void sub_3F1B20()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_660940))
  {
    uint64_t v111 = 0x696D6963736D6963;
    sub_72300(v109, (__int32 *)&v111, 2);
    sub_857F4((uint64_t)&qword_660888, (uint64_t)v109);
    if (v109[0])
    {
      v109[1] = v109[0];
      operator delete(v109[0]);
    }
    __cxa_guard_release(&qword_660940);
  }
  if (qword_660888 == qword_660890)
  {
    v108[0] = operator new(0x18uLL);
    v108[2] = (char *)v108[0] + 24;
    qmemcpy(v108[0], "ivpvovpvcgpvcvmrgcrvgsmv", 24);
    v108[1] = (char *)v108[0] + 24;
    int v0 = (char *)operator new(0xCuLL);
    v107[1] = v0 + 12;
    v107[2] = v0 + 12;
    qmemcpy(v0, " wargcrvgsmv", 12);
    v107[0] = v0;
    LODWORD(v96) = 1768778083;
    sub_72300(&v111, (__int32 *)&v96, 1);
    sub_72384((uint64_t)&v102, 1953460273, (uint64_t)&v111, 1869442665, -1, (uint64_t)v108);
    if (v111)
    {
      char v112 = (void *)v111;
      operator delete((void *)v111);
    }
    LODWORD(v123) = 1936550243;
    sub_72300(&v111, (__int32 *)&v123, 1);
    sub_72384((uint64_t)&v96, 1650551601, (uint64_t)&v111, 1869442665, -1, (uint64_t)v108);
    if (v111)
    {
      char v112 = (void *)v111;
      operator delete((void *)v111);
    }
    sub_72384((uint64_t)&v123, 1650811245, (uint64_t)&unk_6608E0, 1935827812, 1, (uint64_t)v107);
    sub_72384((uint64_t)&v91, 1650811245, (uint64_t)&unk_6608E0, 1668441188, 0, (uint64_t)v107);
    char v1 = (void **)operator new(8uLL);
    *char v1 = (void *)0x766D736776726367;
    char v112 = v1 + 1;
    uint64_t v113 = v1 + 1;
    uint64_t v111 = (uint64_t)v1;
    sub_72384((uint64_t)&v86, 1634495520, (uint64_t)&unk_6608E0, 1852796517, -1, (uint64_t)&v111);
    operator delete(v1);
    LODWORD(v111) = v96;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    char v112 = 0;
    sub_46B38(&v112, v97, (uint64_t)v98, (v98 - (unsigned char *)v97) >> 2);
    uint64_t v115 = v99;
    char v116 = 0;
    char v117 = 0;
    uint64_t v118 = 0;
    sub_46B38(&v116, v100, (uint64_t)v101, (v101 - (unsigned char *)v100) >> 2);
    int v119 = (int)v123;
    v121[0] = 0;
    v121[1] = 0;
    uint64_t v120 = 0;
    sub_46B38(&v120, v124, (uint64_t)v125, (v125 - (unsigned char *)v124) >> 2);
    v121[2] = v126;
    memset(v122, 0, sizeof(v122));
    sub_46B38(v122, v127, (uint64_t)v128, (v128 - (unsigned char *)v127) >> 2);
    long long v83 = 0;
    uint64_t v84 = 0;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v85 = 0;
    uint64_t v81 = (void **)&v83;
    char v82 = 0;
    long long v83 = (char *)operator new(0x80uLL);
    uint64_t v84 = (uint64_t)v83;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v85 = v83 + 128;
    uint64_t v2 = 0;
    uint64_t v84 = sub_726E8((uint64_t)&v111, (uint64_t)&v123, (uint64_t)v83);
    do
    {
      int v3 = (void ***)((char *)&v111 + v2 * 8);
      uint64_t v4 = (void **)v122[v2];
      if (v4)
      {
        v3[14] = v4;
        operator delete(v4);
      }
      unint64_t v5 = v3[9];
      if (v5)
      {
        v121[v2] = v5;
        operator delete(v5);
      }
      v2 -= 8;
    }
    while (v2 != -16);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660980, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_660980))
    {
      sub_7245C((uint64_t)&v111, (uint64_t)&v102);
      sub_724F8(&v81, (uint64_t)&v111, 1uLL);
      sub_7258C((uint64_t)&unk_660948, 1835216945, 1835234416, 0, 1970303090, 1953460256, (uint64_t *)&v81);
      char v110 = &v81;
      sub_72620((void ***)&v110);
      sub_726A4(&v111);
      __cxa_guard_release(&qword_660980);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6609C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_6609C0))
    {
      sub_7258C((uint64_t)&unk_660988, 1835216946, 1835229803, 0, 1970303090, 1650549611, (uint64_t *)&v83);
      __cxa_guard_release(&qword_6609C0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660A00, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_660A00))
    {
      sub_7245C((uint64_t)&v111, (uint64_t)&v91);
      sub_724F8(&v81, (uint64_t)&v111, 1uLL);
      sub_7258C((uint64_t)&unk_6609C8, 1835216947, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)&v81);
      char v110 = &v81;
      sub_72620((void ***)&v110);
      sub_726A4(&v111);
      __cxa_guard_release(&qword_660A00);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660A40, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_660A40))
    {
      sub_7245C((uint64_t)&v111, (uint64_t)&v86);
      sub_724F8(&v81, (uint64_t)&v111, 1uLL);
      sub_72890((uint64_t)&unk_660A08, 1634495520, 1835229548, 1, (uint64_t *)&v81);
      char v110 = &v81;
      sub_72620((void ***)&v110);
      sub_726A4(&v111);
      __cxa_guard_release(&qword_660A40);
    }
    uint64_t v6 = qword_660890;
    if (qword_660890 >= (unint64_t)qword_660898)
    {
      uint64_t v8 = (qword_660890 - qword_660888) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v9 = (qword_660898 - qword_660888) >> 2;
      if (v9 <= v8 + 1) {
        unint64_t v9 = v8 + 1;
      }
      if ((unint64_t)(qword_660898 - qword_660888) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10) {
        unint64_t v10 = (unint64_t)sub_106EC(v10);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (void *)(v10 + 8 * v8);
      uint64_t v13 = v10 + 8 * v11;
      *uint64_t v12 = &unk_660948;
      uint64_t v7 = v12 + 1;
      uint64_t v15 = qword_660888;
      uint64_t v14 = (char *)qword_660890;
      if (qword_660890 != qword_660888)
      {
        do
        {
          uint64_t v16 = *((void *)v14 - 1);
          v14 -= 8;
          *--uint64_t v12 = v16;
        }
        while (v14 != (char *)v15);
        uint64_t v14 = (char *)qword_660888;
      }
      qword_660888 = (uint64_t)v12;
      qword_660890 = (uint64_t)v7;
      qword_660898 = v13;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(void *)qword_660890 = &unk_660948;
      uint64_t v7 = (void *)(v6 + 8);
    }
    qword_660890 = (uint64_t)v7;
    if ((unint64_t)v7 >= qword_660898)
    {
      uint64_t v18 = ((uint64_t)v7 - qword_660888) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v19 = (qword_660898 - qword_660888) >> 2;
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      if ((unint64_t)(qword_660898 - qword_660888) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)sub_106EC(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = (void *)(v20 + 8 * v18);
      uint64_t v23 = v20 + 8 * v21;
      *uint64_t v22 = &unk_660988;
      uint64_t v17 = v22 + 1;
      uint64_t v25 = qword_660888;
      uint64_t v24 = (char *)qword_660890;
      if (qword_660890 != qword_660888)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--uint64_t v22 = v26;
        }
        while (v24 != (char *)v25);
        uint64_t v24 = (char *)qword_660888;
      }
      qword_660888 = (uint64_t)v22;
      qword_660890 = (uint64_t)v17;
      qword_660898 = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      void *v7 = &unk_660988;
      uint64_t v17 = v7 + 1;
    }
    qword_660890 = (uint64_t)v17;
    if ((unint64_t)v17 >= qword_660898)
    {
      uint64_t v28 = ((uint64_t)v17 - qword_660888) >> 3;
      if ((unint64_t)(v28 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v29 = (qword_660898 - qword_660888) >> 2;
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      if ((unint64_t)(qword_660898 - qword_660888) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30) {
        unint64_t v30 = (unint64_t)sub_106EC(v30);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = (void *)(v30 + 8 * v28);
      uint64_t v33 = v30 + 8 * v31;
      void *v32 = &unk_6609C8;
      uint64_t v27 = v32 + 1;
      uint64_t v35 = qword_660888;
      uint64_t v34 = (char *)qword_660890;
      if (qword_660890 != qword_660888)
      {
        do
        {
          uint64_t v36 = *((void *)v34 - 1);
          v34 -= 8;
          *--uint64_t v32 = v36;
        }
        while (v34 != (char *)v35);
        uint64_t v34 = (char *)qword_660888;
      }
      qword_660888 = (uint64_t)v32;
      qword_660890 = (uint64_t)v27;
      qword_660898 = v33;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *uint64_t v17 = &unk_6609C8;
      uint64_t v27 = v17 + 1;
    }
    qword_660890 = (uint64_t)v27;
    if ((unint64_t)v27 >= qword_660898)
    {
      uint64_t v38 = ((uint64_t)v27 - qword_660888) >> 3;
      if ((unint64_t)(v38 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v39 = (qword_660898 - qword_660888) >> 2;
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      if ((unint64_t)(qword_660898 - qword_660888) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40) {
        unint64_t v40 = (unint64_t)sub_106EC(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      uint64_t v42 = (void *)(v40 + 8 * v38);
      uint64_t v43 = v40 + 8 * v41;
      void *v42 = &unk_660A08;
      uint64_t v37 = (uint64_t)(v42 + 1);
      uint64_t v45 = qword_660888;
      std::condition_variable v44 = (char *)qword_660890;
      if (qword_660890 != qword_660888)
      {
        do
        {
          uint64_t v46 = *((void *)v44 - 1);
          v44 -= 8;
          *--uint64_t v42 = v46;
        }
        while (v44 != (char *)v45);
        std::condition_variable v44 = (char *)qword_660888;
      }
      qword_660888 = (uint64_t)v42;
      qword_660890 = v37;
      qword_660898 = v43;
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      void *v27 = &unk_660A08;
      uint64_t v37 = (uint64_t)(v27 + 1);
    }
    qword_660890 = v37;
    qword_6608A0 = (uint64_t)&unk_660948;
    uint64_t v111 = (uint64_t)&v83;
    sub_72620((void ***)&v111);
    if (__p)
    {
      int v90 = __p;
      operator delete(__p);
    }
    if (v87)
    {
      long long v88 = v87;
      operator delete(v87);
    }
    if (v94)
    {
      uint64_t v95 = v94;
      operator delete(v94);
    }
    if (v92)
    {
      CFIndex v93 = v92;
      operator delete(v92);
    }
    if (v127)
    {
      int v128 = v127;
      operator delete(v127);
    }
    if (v124)
    {
      char v125 = v124;
      operator delete(v124);
    }
    if (v100)
    {
      char v101 = v100;
      operator delete(v100);
    }
    if (v97)
    {
      uint64_t v98 = v97;
      operator delete(v97);
    }
    if (v105)
    {
      char v106 = v105;
      operator delete(v105);
    }
    if (v103)
    {
      uint64_t v104 = v103;
      operator delete(v103);
    }
    if (v107[0]) {
      operator delete(v107[0]);
    }
    if (v108[0]) {
      operator delete(v108[0]);
    }
    if (qword_6608A8 == qword_6608B0)
    {
      int v47 = operator new(8uLL);
      *int v47 = 0x726D76637670766FLL;
      int v102 = v47;
      uint64_t v104 = v47 + 1;
      uint64_t v103 = v47 + 1;
      sub_72384((uint64_t)&v111, 1650811245, (uint64_t)&unk_6608E0, 1935827812, 1, (uint64_t)&v102);
      operator delete(v47);
      __int16 v48 = operator new(8uLL);
      *__int16 v48 = 0x726D76637670766FLL;
      char v97 = v48 + 1;
      uint64_t v98 = v48 + 1;
      uint64_t v96 = v48;
      sub_72384((uint64_t)&v102, 1650811245, (uint64_t)&unk_6608E0, 1668441188, 0, (uint64_t)&v96);
      operator delete(v48);
      int v49 = operator new(8uLL);
      void *v49 = 0x726D76637670766FLL;
      char v124 = v49 + 1;
      char v125 = v49 + 1;
      OSStatus v123 = v49;
      sub_72384((uint64_t)&v96, 1634495520, (uint64_t)&unk_6608E0, 1852796517, -1, (uint64_t)&v123);
      operator delete(v49);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660A80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_660A80))
      {
        sub_7245C((uint64_t)&v123, (uint64_t)&v111);
        sub_724F8(&v91, (uint64_t)&v123, 1uLL);
        sub_7258C((uint64_t)&unk_660A48, 1835216946, 1835229803, 0, 1970303090, 1650549611, &v91);
        long long v86 = (void **)&v91;
        sub_72620(&v86);
        sub_726A4(&v123);
        __cxa_guard_release(&qword_660A80);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660AC0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_660AC0))
      {
        sub_7245C((uint64_t)&v123, (uint64_t)&v102);
        sub_724F8(&v91, (uint64_t)&v123, 1uLL);
        sub_7258C((uint64_t)&unk_660A88, 1835216947, 1835230834, 0, 1970303090, 1718775412, &v91);
        long long v86 = (void **)&v91;
        sub_72620(&v86);
        sub_726A4(&v123);
        __cxa_guard_release(&qword_660AC0);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660B00, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_660B00))
      {
        sub_7245C((uint64_t)&v123, (uint64_t)&v96);
        sub_724F8(&v91, (uint64_t)&v123, 1uLL);
        sub_72890((uint64_t)&unk_660AC8, 1634495520, 1835229548, 2, &v91);
        long long v86 = (void **)&v91;
        sub_72620(&v86);
        sub_726A4(&v123);
        __cxa_guard_release(&qword_660B00);
      }
      uint64_t v50 = qword_6608B0;
      if (qword_6608B0 >= (unint64_t)qword_6608B8)
      {
        uint64_t v52 = (qword_6608B0 - qword_6608A8) >> 3;
        if ((unint64_t)(v52 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v53 = (qword_6608B8 - qword_6608A8) >> 2;
        if (v53 <= v52 + 1) {
          unint64_t v53 = v52 + 1;
        }
        if ((unint64_t)(qword_6608B8 - qword_6608A8) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54) {
          unint64_t v54 = (unint64_t)sub_106EC(v54);
        }
        else {
          uint64_t v55 = 0;
        }
        __int32 v56 = (void *)(v54 + 8 * v52);
        uint64_t v57 = v54 + 8 * v55;
        *__int32 v56 = &unk_660A48;
        char v51 = v56 + 1;
        uint64_t v59 = qword_6608A8;
        CFRange v58 = (char *)qword_6608B0;
        if (qword_6608B0 != qword_6608A8)
        {
          do
          {
            uint64_t v60 = *((void *)v58 - 1);
            v58 -= 8;
            *--__int32 v56 = v60;
          }
          while (v58 != (char *)v59);
          CFRange v58 = (char *)qword_6608A8;
        }
        qword_6608A8 = (uint64_t)v56;
        qword_6608B0 = (uint64_t)v51;
        qword_6608B8 = v57;
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *(void *)qword_6608B0 = &unk_660A48;
        char v51 = (void *)(v50 + 8);
      }
      qword_6608B0 = (uint64_t)v51;
      if ((unint64_t)v51 >= qword_6608B8)
      {
        uint64_t v62 = ((uint64_t)v51 - qword_6608A8) >> 3;
        if ((unint64_t)(v62 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v63 = (qword_6608B8 - qword_6608A8) >> 2;
        if (v63 <= v62 + 1) {
          unint64_t v63 = v62 + 1;
        }
        if ((unint64_t)(qword_6608B8 - qword_6608A8) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64) {
          unint64_t v64 = (unint64_t)sub_106EC(v64);
        }
        else {
          uint64_t v65 = 0;
        }
        __int32 v66 = (void *)(v64 + 8 * v62);
        uint64_t v67 = v64 + 8 * v65;
        void *v66 = &unk_660A88;
        __int32 v61 = v66 + 1;
        uint64_t v69 = qword_6608A8;
        uint64_t v68 = (char *)qword_6608B0;
        if (qword_6608B0 != qword_6608A8)
        {
          do
          {
            uint64_t v70 = *((void *)v68 - 1);
            v68 -= 8;
            *--__int32 v66 = v70;
          }
          while (v68 != (char *)v69);
          uint64_t v68 = (char *)qword_6608A8;
        }
        qword_6608A8 = (uint64_t)v66;
        qword_6608B0 = (uint64_t)v61;
        qword_6608B8 = v67;
        if (v68) {
          operator delete(v68);
        }
      }
      else
      {
        void *v51 = &unk_660A88;
        __int32 v61 = v51 + 1;
      }
      qword_6608B0 = (uint64_t)v61;
      if ((unint64_t)v61 >= qword_6608B8)
      {
        uint64_t v72 = ((uint64_t)v61 - qword_6608A8) >> 3;
        if ((unint64_t)(v72 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v73 = (qword_6608B8 - qword_6608A8) >> 2;
        if (v73 <= v72 + 1) {
          unint64_t v73 = v72 + 1;
        }
        if ((unint64_t)(qword_6608B8 - qword_6608A8) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v73;
        }
        if (v74) {
          unint64_t v74 = (unint64_t)sub_106EC(v74);
        }
        else {
          uint64_t v75 = 0;
        }
        uint64_t v76 = (void *)(v74 + 8 * v72);
        uint64_t v77 = v74 + 8 * v75;
        *uint64_t v76 = &unk_660AC8;
        uint64_t v71 = (uint64_t)(v76 + 1);
        uint64_t v79 = qword_6608A8;
        uint64_t v78 = (char *)qword_6608B0;
        if (qword_6608B0 != qword_6608A8)
        {
          do
          {
            uint64_t v80 = *((void *)v78 - 1);
            v78 -= 8;
            *--uint64_t v76 = v80;
          }
          while (v78 != (char *)v79);
          uint64_t v78 = (char *)qword_6608A8;
        }
        qword_6608A8 = (uint64_t)v76;
        qword_6608B0 = v71;
        qword_6608B8 = v77;
        if (v78) {
          operator delete(v78);
        }
      }
      else
      {
        void *v61 = &unk_660AC8;
        uint64_t v71 = (uint64_t)(v61 + 1);
      }
      qword_6608B0 = v71;
      qword_6608C0 = (uint64_t)&unk_660A88;
      if (v100)
      {
        char v101 = v100;
        operator delete(v100);
      }
      if (v97)
      {
        uint64_t v98 = v97;
        operator delete(v97);
      }
      if (v105)
      {
        char v106 = v105;
        operator delete(v105);
      }
      if (v103)
      {
        uint64_t v104 = v103;
        operator delete(v103);
      }
      if (v116)
      {
        char v117 = v116;
        operator delete(v116);
      }
      if (v112)
      {
        uint64_t v113 = v112;
        operator delete(v112);
      }
    }
  }
}

void sub_3F29F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  sub_72620((void ***)&a16);
  sub_726A4((void *)(v55 - 120));
  __cxa_guard_abort(&qword_660B00);
  sub_726A4(&a32);
  sub_726A4(&a40);
  sub_726A4((void *)(v55 - 248));
  _Unwind_Resume(a1);
}

void sub_3F2D38()
{
}

void sub_3F2D40()
{
}

void sub_3F2D48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_660680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_660680))
  {
    __int32 v12 = 1768778083;
    sub_72300(v17, &v12, 1);
    sub_857F4((uint64_t)&qword_6605C8, (uint64_t)v17);
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
    __cxa_guard_release(&qword_660680);
  }
  if (qword_6605C8 == qword_6605D0)
  {
    LODWORD(v18) = 1768778083;
    sub_72300(v19, (__int32 *)&v18, 1);
    memset(v11, 0, sizeof(v11));
    sub_72384((uint64_t)&v12, 1768778083, (uint64_t)v19, 1869442665, -1, (uint64_t)v11);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_6606C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_6606C0))
    {
      sub_7245C((uint64_t)v19, (uint64_t)&v12);
      sub_724F8(v11, (uint64_t)v19, 1uLL);
      sub_7258C((uint64_t)&unk_660688, 1835216945, 1835229812, 0, 1819244402, 1651799149, v11);
      uint64_t v18 = (void **)v11;
      sub_72620(&v18);
      sub_726A4(v19);
      __cxa_guard_release(&qword_6606C0);
    }
    uint64_t v0 = qword_6605D0;
    if (qword_6605D0 >= (unint64_t)qword_6605D8)
    {
      uint64_t v2 = (qword_6605D0 - qword_6605C8) >> 3;
      if ((unint64_t)(v2 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v3 = (qword_6605D8 - qword_6605C8) >> 2;
      if (v3 <= v2 + 1) {
        unint64_t v3 = v2 + 1;
      }
      if ((unint64_t)(qword_6605D8 - qword_6605C8) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v4 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v4 = v3;
      }
      if (v4) {
        unint64_t v4 = (unint64_t)sub_106EC(v4);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = (void *)(v4 + 8 * v2);
      uint64_t v7 = v4 + 8 * v5;
      *uint64_t v6 = &unk_660688;
      uint64_t v1 = (uint64_t)(v6 + 1);
      uint64_t v9 = qword_6605C8;
      uint64_t v8 = (char *)qword_6605D0;
      if (qword_6605D0 != qword_6605C8)
      {
        do
        {
          uint64_t v10 = *((void *)v8 - 1);
          v8 -= 8;
          *--uint64_t v6 = v10;
        }
        while (v8 != (char *)v9);
        uint64_t v8 = (char *)qword_6605C8;
      }
      qword_6605C8 = (uint64_t)v6;
      qword_6605D0 = v1;
      qword_6605D8 = v7;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *(void *)qword_6605D0 = &unk_660688;
      uint64_t v1 = v0 + 8;
    }
    qword_6605D0 = v1;
    qword_6605E0 = (uint64_t)&unk_660688;
    sub_4D2CC(algn_6605E8, (char *)qword_6605C8, v1, (v1 - qword_6605C8) >> 3);
    qword_660600 = qword_6605E0;
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
}

void sub_3F3018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  sub_72620((void ***)&a23);
  sub_726A4((void *)(v23 - 104));
  __cxa_guard_abort(&qword_6606C0);
  sub_726A4(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_3F30B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(_DWORD **)a2;
  uint64_t v6 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  uint64_t v7 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  if (v7 >= v6) {
    uint64_t v8 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  }
  else {
    uint64_t v8 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  }
  if (v8 < 1)
  {
LABEL_7:
    if (v6 < v7) {
      char v9 = -1;
    }
    else {
      char v9 = 1;
    }
    if (v6 == v7)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a2 + 24);
      char v9 = v10 < v11 ? -1 : 1;
      if (v10 == v11)
      {
        int v12 = *(unsigned __int8 *)(a1 + 32);
        if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a2 + 32))
        {
          unsigned int v13 = *(_DWORD *)(a1 + 28);
          unsigned int v14 = *(_DWORD *)(a2 + 28);
          if (v13 < v14) {
            char v9 = -1;
          }
          else {
            char v9 = 1;
          }
          if (v13 != v14) {
            goto LABEL_25;
          }
        }
        else
        {
          BOOL v16 = *(unsigned __int8 *)(a2 + 32) != 0;
          BOOL v17 = v12 == 0;
          BOOL v18 = v12 != 0;
          int v19 = v17;
          if ((v16 & v19) != 0) {
            char v9 = -1;
          }
          else {
            char v9 = 1;
          }
          if ((v18 ^ v16)) {
            goto LABEL_25;
          }
        }
        unsigned int v20 = *(_DWORD *)(a1 + 40);
        unsigned int v21 = *(_DWORD *)(a2 + 40);
        if (v20 < v21) {
          char v9 = -1;
        }
        else {
          char v9 = 1;
        }
        if (v20 == v21)
        {
          uint64_t v22 = *(void **)(a1 + 48);
          uint64_t v23 = *(void **)(a2 + 48);
          uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))sub_3F3330;
          char v9 = sub_3F3234(v22, (void *)(a1 + 56), v23, (void *)(a2 + 56), &v28);
          if (!v9)
          {
            unsigned int v24 = *(_DWORD *)(a1 + 72);
            unsigned int v25 = *(_DWORD *)(a2 + 72);
            char v9 = v24 < v25 ? -1 : 1;
            if (v24 == v25)
            {
              CFComparisonResult v26 = sub_152A4(*(const __CFString **)(a1 + 80), (const __CFString **)(a2 + 80));
              if (v26) {
                char v27 = -1;
              }
              else {
                char v27 = 0;
              }
              if (v26 == kCFCompareGreaterThan) {
                char v9 = 1;
              }
              else {
                char v9 = v27;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      if (!--v8) {
        goto LABEL_7;
      }
    }
    if (*v4 < *v5) {
      char v9 = -1;
    }
    else {
      char v9 = 1;
    }
  }
LABEL_25:
  if (v9) {
    return (v9 >> 7) | 1u;
  }
  else {
    return 0;
  }
}

uint64_t sub_3F3234(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  BOOL v5 = a3 == a4;
  BOOL v6 = a1 == a2;
  if (a1 == a2 || (uint64_t v8 = a3, a3 == a4))
  {
LABEL_17:
    if (v6) {
      return (v5 - 1);
    }
    else {
      return 1;
    }
  }
  else
  {
    unsigned int v11 = a1;
    while (1)
    {
      uint64_t result = (*a5)((uint64_t)v11 + 28, (uint64_t)v8 + 28);
      if ((_BYTE)result) {
        break;
      }
      unsigned int v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          unsigned int v14 = v13;
          unsigned int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unsigned int v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          unsigned int v11 = v14;
        }
        while (!v15);
      }
      BOOL v16 = (void *)v8[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)v8[2];
          BOOL v15 = *v17 == (void)v8;
          uint64_t v8 = v17;
        }
        while (!v15);
      }
      BOOL v5 = v17 == a4;
      BOOL v6 = v14 == a2;
      if (v14 != a2)
      {
        unsigned int v11 = v14;
        uint64_t v8 = v17;
        if (v17 != a4) {
          continue;
        }
      }
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_3F3330(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 1;
  }
  if (*a1 == *a2) {
    return 0;
  }
  else {
    return v2;
  }
}

BOOL sub_3F334C(void *a1)
{
  if (*a1 == a1[1]) {
    return 0;
  }
  sub_2A19D0((uint64_t)__p, (uint64_t)a1);
  BOOL v2 = sub_46774((uint64_t)__p, (uint64_t)a1);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0((void *)__p[7]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v2;
}

void sub_3F33D0(uint64_t *a1, void *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  unint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)v3[3];
      if (v8)
      {
        char v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          unsigned int v10 = v9;
          uint64_t v11 = v3[2];
          if (v11)
          {
            int v12 = sub_4642C(v11, a3);
            sub_4636C(v10);
            if (v12) {
              uint64_t v7 = (uint64_t *)sub_12A630((uint64_t)a1, v7, v3[2], v3[3])[1];
            }
          }
          else
          {
            sub_4636C(v10);
          }
        }
      }
      unint64_t v3 = (void *)v3[1];
    }
    while (v3 != a2);
  }
}

void sub_3F3488(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

char *sub_3F34AC(unsigned int a1)
{
  int v2 = sub_A313C(a1);
  unsigned int v3 = sub_A31B4(v2);
  unint64_t v4 = (char *)malloc_type_malloc(v3, 0x2C8E6D5CuLL);
  BOOL v5 = v4;
  if (v3 && !v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v10 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v4, v3);
  if (v5)
  {
    *(void *)BOOL v5 = 0;
    *((_DWORD *)v5 + 2) = a1;
    if (a1)
    {
      uint64_t v6 = a1;
      uint64_t v7 = v5 + 16;
      do
      {
        *((_DWORD *)v7 - 1) = -1;
        void *v7 = 0;
        v7[1] = 0;
        uint64_t v7 = (void *)((char *)v7 + 20);
        --v6;
      }
      while (v6);
    }
  }
  return v5;
}

void sub_3F3568(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v21 = *(void *)(a1 + 32);
  if (v21 == v3)
  {
    BOOL v18 = (os_log_t *)sub_32A48(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v29 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
      __int16 v30 = 1024;
      int v31 = 257;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    uint64_t v5 = *(void *)(v3 + 8);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v27 = 0;
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v5 + 224))(v5, 1, &v27);
    if (v6)
    {
      BOOL v15 = (os_log_t *)sub_32A48(13);
      BOOL v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        unint64_t v29 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v30 = 1024;
        int v31 = 264;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unexpected error from GetBusCount\"", buf, 0x12u);
      }
      BOOL v17 = __cxa_allocate_exception(0x10uLL);
      *(void *)BOOL v17 = &off_6414D8;
      v17[2] = v6;
    }
    for (unint64_t i = *(void *)(a2 + 40); i < v27; ++i)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 128))(v5, 1, i);
      long long v9 = *(_OWORD *)(v8 + 16);
      v25[0] = *(_OWORD *)v8;
      v25[1] = v9;
      uint64_t v26 = *(void *)(v8 + 32);
      sub_4EF34((void *)a2, (uint64_t)v25);
      unsigned int v10 = (os_log_t *)sub_32A48(24);
      uint64_t v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_259A4(&v24, (uint64_t)v25);
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v12 = &v24;
        }
        else {
          int v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
        }
        unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v5);
        sub_2417C(__p, v13);
        unsigned int v14 = __p;
        if (v23 < 0) {
          unsigned int v14 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136316162;
        unint64_t v29 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v30 = 1024;
        int v31 = 270;
        __int16 v32 = 1024;
        int v33 = i;
        __int16 v34 = 2080;
        uint64_t v35 = v12;
        __int16 v36 = 2080;
        uint64_t v37 = v14;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bus: %d Format: %s AU: %s", buf, 0x2Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v4) {
      sub_4636C(v4);
    }
    v3 += 24;
  }
  while (v3 != v21);
}

void sub_3F3940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void sub_3F39A4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, unsigned int a6, uint64_t *a7)
{
  if (*(unsigned char *)(a1 + 448))
  {
    uint64_t v8 = sub_32A48(24);
    if (*(unsigned char *)(v8 + 8))
    {
      long long v9 = *(NSObject **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *a5;
          uint64_t v11 = *a7;
          *(_DWORD *)int buf = 136316418;
          *(void *)&uint8_t buf[4] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 168;
          __int16 v44 = 1024;
          unsigned int v45 = a4;
          __int16 v46 = 1024;
          unsigned int v47 = a6;
          __int16 v48 = 2048;
          uint64_t v49 = v10;
          __int16 v50 = 2048;
          uint64_t v51 = v11;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPchain NumInBufList=%u, NumOutBufferList=%d, inBL[0]=%p, outBL[0]=%p", buf, 0x32u);
        }
      }
    }
    *(_WORD *)&AudioObjectPropertyAddress buf[2] = *(_WORD *)(a1 + 682);
    *(_WORD *)int buf = *(_WORD *)(a1 + 682);
    WORD1(v42) = *(_WORD *)(a1 + 682) == 0;
    LOWORD(v42) = *(_WORD *)(a1 + 682);
    int v12 = *(_DWORD *)buf;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 680), (unsigned int *)&v12, v42);
    if (*(_WORD *)(a1 + 682)) {
      uint64_t v13 = 400;
    }
    else {
      uint64_t v13 = 424;
    }
    if (*(_WORD *)(a1 + 682)) {
      uint64_t v14 = a1 + 400;
    }
    else {
      uint64_t v14 = a1 + 424;
    }
    uint64_t v15 = *(void *)(a1 + 1200);
    if (v15 && sub_36B52C(*(void *)(a1 + 1200)) && !*(_DWORD *)(v15 + 492) && a6 != 0)
    {
      uint64_t v17 = a6;
      BOOL v18 = a7;
      do
      {
        uint64_t v19 = *v18;
        if (!*v18) {
          break;
        }
        if (*(_DWORD *)v19 != 2)
        {
          unsigned int v20 = (os_log_t *)sub_32A48(13);
          uint64_t v21 = *v20;
          if (*v20)
          {
            if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 188;
              _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"stereo speaker buffer list does not have 2 buffers\"", buf, 0x12u);
            }
          }
        }
        uint64_t v22 = *(float **)(v19 + 32);
        char v23 = *(float **)(v19 + 16);
        *(_DWORD *)int buf = 1056964608;
        vDSP_vasm(v22, 1, v23, 1, (const float *)buf, v23, 1, a3);
        vDSP_vclr(v22, 1, a3);
        ++v18;
        --v17;
      }
      while (v17);
    }
    uint64_t v24 = *(void *)(v14 + 8) - *(void *)(a1 + v13);
    if (v24)
    {
      uint64_t v25 = 0;
      unint64_t v26 = v24 / 24;
      unint64_t v27 = v26 - 1;
      if (v26 <= 1) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v26;
      }
      uint64_t v29 = 16;
      uint64_t v30 = 8;
      do
      {
        int v31 = a5;
        if (v25) {
          int v31 = (uint64_t *)(*(void *)(a1 + 976) + v29 - 16);
        }
        uint64_t v32 = *(void *)(a1 + v13);
        uint64_t v33 = *v31;
        __int16 v34 = a7;
        uint64_t v42 = 0;
        if (v27 != v25) {
          __int16 v34 = (uint64_t *)(*(void *)(a1 + 976) + v29);
        }
        uint64_t v42 = *v34;
        if ((*(unsigned int (**)(void))(**(void **)(v32 + v30) + 216))(*(void *)(v32 + v30)))
        {
          *(void *)int buf = v33;
          *(void *)&_DWORD buf[8] = 0;
          if (((a4 > 1) & sub_3F3DB4(*(void *)(v32 + v30))) == 1)
          {
            *(void *)&_DWORD buf[8] = a5[1];
            uint64_t v35 = a4;
          }
          else
          {
            uint64_t v35 = 1;
          }
          (*(void (**)(void, uint64_t, void, uint64_t, unsigned char *, void, uint64_t *))(**(void **)(v32 + v30)
                                                                                               + 112))(*(void *)(v32 + v30), a2, a3, v35, buf, a6, &v42);
        }
        else if (v42)
        {
          (*(void (**)(void, uint64_t, void))(**(void **)(v32 + v30) + 104))(*(void *)(v32 + v30), a2, a3);
        }
        ++v25;
        v29 += 32;
        v30 += 24;
      }
      while (v28 != v25);
    }
  }
}

BOOL sub_3F3DB4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (v2 != 1936748595 && v2 != 1685287015) {
    return 0;
  }
  unsigned int v7 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 224))(a1, 1, &v7))
  {
    unint64_t v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      BOOL result = os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)int buf = 136315394;
      long long v9 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
      __int16 v10 = 1024;
      int v11 = 52;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", buf, 0x12u);
    }
    return 0;
  }
  return v7 > 1;
}

uint64_t sub_3F3F00(uint64_t *a1, uint64_t a2, long long **a3, uint64_t a4, double a5)
{
  unint64_t v6 = sub_D3A8((uint64_t)a1, a2, a3, a4, a5);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (os_log_t *)sub_32A48(24);
    long long v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&__p, v7);
      if (v30 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)int buf = 136315650;
      v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
      v34[1] = 0x820000000750400;
      _DWORD v34[2] = p_p;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d DSPChain::SetChainFormat failed with %s", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    int v11 = (_DWORD *)a1[150];
    if (v11)
    {
      if (sub_36B52C(a1[150]))
      {
        if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 120))(a1, 1936748595))
        {
          unint64_t v26 = a1 + 6;
          char v27 = 1;
          sub_F648((uint64_t)(a1 + 6));
          AudioObjectID v12 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 120))(v11);
          inAddress.AudioObjectPropertyElement mElement = 0;
          AudioObjectID v32 = v12;
          *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473737263;
          sub_869C8((uint64_t)buf, &v32, &inAddress, 0, 0);
          int v13 = *(_DWORD *)buf;
          if (*(_DWORD *)buf || !v35)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &off_6414D8;
            exception[2] = v13;
          }
          std::string __p = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v14 = *(void **)((char *)v34 + 4);
          sub_46B38(&__p, *(const void **)((char *)v34 + 4), *(void *)((char *)&v34[1] + 4), (uint64_t)(*(void *)((char *)&v34[1] + 4) - *(void *)((char *)v34 + 4)) >> 2);
          if (v14) {
            operator delete(v14);
          }
          uint64_t v15 = __p;
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, void *, void, void))(*a1 + 112))(a1, 1936748595, 64005, __p, (v29 - __p) & 0xFFFFFFFC, 0))
          {
            BOOL v16 = (os_log_t *)sub_32A48(24);
            uint64_t v17 = *v16;
            if (*v16)
            {
              if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315394;
                v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
                LOWORD(v34[1]) = 1024;
                *(_DWORD *)((char *)&v34[1] + 2) = 147;
                _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d There was an error setting the input data sources on Speaker Protection V3", buf, 0x12u);
              }
            }
          }
          *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0;
          if (!v11[123]) {
            inAddress.mScope = 1;
          }
          uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, AudioObjectPropertyAddress *, uint64_t, void))(*a1 + 112))(a1, 1936748595, 64006, &inAddress, 8, 0);
          if (v7)
          {
            BOOL v18 = (os_log_t *)sub_32A48(24);
            uint64_t v19 = *v18;
            if (*v18)
            {
              if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315650;
                v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
                v34[1] = 0x4000000009D0400;
                LODWORD(v34[2]) = v7;
                _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not set property to ignore speaker channel telemetry, error:%d", buf, 0x18u);
              }
            }
          }
          if (v15) {
            operator delete(v15);
          }
          sub_C7D4(&v26);
        }
        else
        {
          char v23 = (os_log_t *)sub_32A48(24);
          uint64_t v24 = *v23;
          uint64_t v7 = 2003332927;
          if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
            LOWORD(v34[1]) = 1024;
            *(_DWORD *)((char *)&v34[1] + 2) = 135;
            _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to find the Speaker Protection Processor.", buf, 0x12u);
            return 2003332927;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      uint64_t v7 = 2003329396;
      unsigned int v20 = (os_log_t *)sub_32A48(24);
      uint64_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        v34[0] = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        LOWORD(v34[1]) = 1024;
        *(_DWORD *)((char *)&v34[1] + 2) = 126;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to find the speaker device to configure input sources for speaker protection", buf, 0x12u);
      }
    }
  }
  return v7;
}

void sub_3F43E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21) {
    operator delete(v21);
  }
  sub_C7D4(&a10);
  _Unwind_Resume(a1);
}

void sub_3F443C(unint64_t a1)
{
  sub_3F4474(a1);

  operator delete();
}

unint64_t sub_3F4474(unint64_t a1)
{
  *(void *)a1 = off_63CC70;
  uint64_t v2 = sub_463468();
  sub_463AEC(v2, a1 + 1136);
  sub_463E0(*(void **)(a1 + 1168));
  sub_463E0(*(void **)(a1 + 1144));

  return sub_1B6728(a1);
}

void sub_3F44E8(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = (os_log_t *)sub_32A48(24);
  uint64_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
  {
    sub_464158(&__p, a3);
    long long v9 = v30 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)int buf = 136315650;
    AudioObjectID v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
    __int16 v33 = 1024;
    int v34 = 79;
    __int16 v35 = 2080;
    __int16 v36 = v9;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Speaker device state has changed to '%s'", buf, 0x1Cu);
    if (v30 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v11 = a2 + 8;
  uint64_t v10 = v12;
  if (!v12) {
    goto LABEL_37;
  }
  uint64_t v13 = v11;
  do
  {
    unsigned int v14 = *(_DWORD *)(v10 + 28);
    BOOL v15 = v14 >= 0x7073706B;
    if (v14 >= 0x7073706B) {
      BOOL v16 = (uint64_t *)v10;
    }
    else {
      BOOL v16 = (uint64_t *)(v10 + 8);
    }
    if (v15) {
      uint64_t v13 = v10;
    }
    uint64_t v10 = *v16;
  }
  while (*v16);
  if (v13 == v11 || (*(_DWORD *)(v13 + 28) < 0x7073706Cu ? (BOOL v17 = a3 == 0) : (BOOL v17 = 0), !v17))
  {
LABEL_37:
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        AudioObjectID v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v33 = 1024;
        int v34 = 82;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Listener updated but speaker channel configuration was not changed!\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Listener updated but speaker channel configuration was not changed!");
  }
  uint64_t v18 = a4[150];
  if (v18 && sub_36B52C(a4[150]))
  {
    uint64_t v27 = 0;
    if (!*(_DWORD *)(v18 + 492)) {
      HIDWORD(v27) = 1;
    }
    if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a4 + 120))(a4, 1936748595))
    {
      std::string __p = a4 + 6;
      char v29 = 1;
      sub_F648((uint64_t)(a4 + 6));
      int v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, void))(*a4 + 112))(a4, 1936748595, 64006, &v27, 8, 0);
      if (v19)
      {
        unsigned int v20 = (os_log_t *)sub_32A48(24);
        uint64_t v21 = *v20;
        if (*v20)
        {
          if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315650;
            AudioObjectID v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
            __int16 v33 = 1024;
            int v34 = 107;
            __int16 v35 = 1024;
            LODWORD(v36) = v19;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not set property to ignore speaker channel telemetry, error:%d", buf, 0x18u);
          }
        }
      }
      sub_C7D4(&__p);
    }
    else
    {
      uint64_t v22 = (os_log_t *)sub_32A48(24);
      char v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        AudioObjectID v32 = "DSPChain_ClosedLoopSpeakerProtection.cpp";
        __int16 v33 = 1024;
        int v34 = 98;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to find the Speaker Protection Processor.", buf, 0x12u);
      }
    }
  }
}

void sub_3F4894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C7D4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_3F48C4(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886287212)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    unint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v13 = "Device_Null_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 90;
      __int16 v16 = 2080;
      BOOL v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v13 = "Device_Null_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 91;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_3F4A7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3F4A98(os_unfair_lock_s *a1)
{
}

void sub_3F4CF4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_4636C(a3);
  }
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3F4D74(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = (char *)operator new(0x228uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_63CF30;
  if (a3 != 1886284905 && a3 != 1886287212)
  {
    int v15 = (os_log_t *)sub_32A48(13);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)&v24[4] = "Port_Null_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 37;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v24, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(_DWORD *)int buf = a3;
  uint64_t v29 = 1885561449;
  LOBYTE(v30) = 0;
  sub_46A4C((uint64_t *)((char *)&v31 + 2), (uint64_t)&unk_64FE00);
  __int16 v34 = v34 & 0xF800 | (a3 == 1886284905) | 0x420;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_105048((uint64_t)v24, 0x706E756Cu);
  memset(v20, 0, sizeof(v20));
  sub_21C8C(__p, "");
  long long v9 = v8 + 24;
  sub_105158((uint64_t)(v8 + 24), (uint64_t *)buf, a2, (uint64_t)&v21, (uint64_t)v24, a4, (uint64_t)v20, (long long *)__p);
  *((void *)v8 + 3) = &off_621AD0;
  *((_WORD *)v8 + 272) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v20;
  sub_74004((void ***)__p);
  sub_72924((uint64_t)&v27);
  sub_72924((uint64_t)&v26 + 2);
  sub_72924((uint64_t)v24);
  sub_463E0(*(void **)&v33[4]);
  *(void *)long long v9 = &off_62ADA8;
  uint64_t v10 = (os_log_t *)sub_32A48(17);
  char v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, char *))(*(void *)v9 + 144))(v24, v8 + 24);
    uint64_t v12 = *(void *)v24;
    uint64_t v13 = (const void *)*((void *)v8 + 34);
    uint64_t v21 = v13;
    LOBYTE(v22) = v8[280];
    if ((_BYTE)v22 && v13) {
      CFRetain(v13);
    }
    *(_DWORD *)int buf = 136315906;
    uint64_t v29 = (uint64_t)"Port_Null_Aspen.cpp";
    __int16 v30 = 1024;
    int v31 = 81;
    __int16 v32 = 2112;
    *(void *)__int16 v33 = v12;
    *(_WORD *)&v33[8] = 2112;
    *(void *)&v33[10] = v13;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating a NULL port with name \"%@,\" and uid \"%@\"", buf, 0x26u);
    sub_72924((uint64_t)&v21);
    sub_72924((uint64_t)v24);
  }
  *a1 = v9;
  a1[1] = v8;
  __int16 v14 = (std::__shared_weak_count *)*((void *)v8 + 14);
  if (v14)
  {
    if (v14->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
    *((void *)v8 + 13) = v9;
    *((void *)v8 + 14) = v8;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
    *((void *)v8 + 13) = v9;
    *((void *)v8 + 14) = v8;
  }

  sub_4636C((std::__shared_weak_count *)v8);
}

void sub_3F5180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  __cxa_free_exception(v32);
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_3F522C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_3F5250(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63CF30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3F52A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63CF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3F52C4(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

void sub_3F5300(uint64_t a1, uint64_t a2)
{
  sub_241E30((uint64_t)v10, (void *)(*(void *)a2 + 16));
  if (v10[2])
  {
    if (!*(_DWORD *)(*(void *)a2 + 4) && **(_DWORD **)a2 == 1986291046)
    {
      sub_549A4(&v8, (uint64_t *)(v10[0] + 32), "", 66);
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v8 + 272))(buf);
      if (v9) {
        sub_4636C(v9);
      }
      operator new();
    }
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    unint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v12 = "RoutingHandler_SplitterBroadcast_GenericConfig1.cpp";
      __int16 v13 = 1024;
      int v14 = 64;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v12 = "RoutingHandler_SplitterBroadcast_GenericConfig1.cpp";
      __int16 v13 = 1024;
      int v14 = 63;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Precondition failure.");
}

void sub_3F55E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  sub_10E118(a13);
  _Unwind_Resume(a1);
}

BOOL sub_3F5668(uint64_t a1, _DWORD **a2)
{
  if (sub_114788(a1, a2))
  {
    unsigned int v3 = (unsigned __int16)sub_37C7C4((uint64_t)(a2[14] + 2), *((_DWORD *)a2 + 3));
    if (v3 <= 0x100) {
      LOBYTE(v3) = 0;
    }
    if ((_BYTE)v3)
    {
      sub_241E30((uint64_t)v24, (void *)*a2 + 2);
      if (v25 < 2)
      {
        BOOL v4 = 0;
LABEL_39:
        sub_10E118((void *)v24[1]);
        return v4;
      }
      sub_549A4(&v19, (uint64_t *)(v24[0] + 32), "", 53);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 272))(&v21);
      if (v20) {
        sub_4636C(v20);
      }
      if (v23 == v25)
      {
        uint64_t v5 = v22;
        if (v22 != &v21)
        {
          unint64_t v6 = (void *)v24[0];
          while (1)
          {
            uint64_t v7 = (std::__shared_weak_count *)v5[3];
            if (!v7) {
              break;
            }
            uint64_t v8 = std::__shared_weak_count::lock(v7);
            long long v9 = v8;
            if (!v8) {
              goto LABEL_19;
            }
            uint64_t v10 = v5[2];
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_4636C(v8);
            char v11 = std::__shared_weak_count::lock(v9);
            char v12 = 0;
            if (!v11) {
              uint64_t v10 = 0;
            }
LABEL_20:
            __int16 v13 = (std::__shared_weak_count *)v6[5];
            if (v13)
            {
              int v14 = std::__shared_weak_count::lock(v13);
              if (v14)
              {
                BOOL v4 = v10 == v6[4];
                sub_4636C(v14);
                if (!v11) {
                  goto LABEL_26;
                }
LABEL_25:
                sub_4636C(v11);
                goto LABEL_26;
              }
            }
            BOOL v4 = v10 == 0;
            if (v11) {
              goto LABEL_25;
            }
LABEL_26:
            if ((v12 & 1) == 0) {
              std::__shared_weak_count::__release_weak(v9);
            }
            if (v4)
            {
              int v15 = (void *)v6[1];
              if (v15)
              {
                do
                {
                  __int16 v16 = v15;
                  int v15 = (void *)*v15;
                }
                while (v15);
              }
              else
              {
                do
                {
                  __int16 v16 = (void *)v6[2];
                  BOOL v17 = *v16 == (void)v6;
                  unint64_t v6 = v16;
                }
                while (!v17);
              }
              uint64_t v5 = (uint64_t *)v5[1];
              unint64_t v6 = v16;
              if (v5 != &v21) {
                continue;
              }
            }
            goto LABEL_38;
          }
          long long v9 = 0;
LABEL_19:
          uint64_t v10 = 0;
          char v11 = 0;
          char v12 = 1;
          goto LABEL_20;
        }
        BOOL v4 = 1;
      }
      else
      {
        BOOL v4 = 0;
      }
LABEL_38:
      sub_8108(&v21);
      goto LABEL_39;
    }
  }
  return 0;
}

void sub_3F5888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a10) {
    sub_4636C(a10);
  }
  sub_10E118(a15);
  _Unwind_Resume(a1);
}

void sub_3F58B0()
{
}

uint64_t sub_3F58C8(void *a1, uint64_t *a2, int a3)
{
  if (a3 != 1885762592)
  {
    unint64_t v54 = (os_log_t *)sub_32A48(13);
    uint64_t v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      __int16 v69 = 1024;
      int v70 = 463;
      _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }
  uint64_t v5 = *(NSObject **)sub_32A48(22);
  uint64_t v57 = (uint64_t)a1;
  if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_259A4((std::string *)&v82, (uint64_t)a2);
    unint64_t v6 = v82.__m_.__opaque[15] >= 0 ? &v82 : (std::mutex *)v82.__m_.__sig;
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    __int16 v69 = 1024;
    int v70 = 467;
    __int16 v71 = 2080;
    uint64_t v72 = (const char *)v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client requested physical format: %s", buf, 0x1Cu);
    if (v82.__m_.__opaque[15] < 0) {
      operator delete((void *)v82.__m_.__sig);
    }
  }
  uint64_t v7 = (void *)a1[20];
  if (v7 == a1 + 19)
  {
LABEL_21:
    __int16 v16 = a1;
    if (a1[22])
    {
      BOOL v17 = (void (*)(void, uint64_t))a1[23];
      if (v17)
      {
        v17(0, 1);
        __int16 v16 = a1;
      }
    }
    AudioObjectID v18 = (*(uint64_t (**)(void))(*(void *)v16[25] + 120))(v16[25]);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F626E737274;
    inAddress.AudioObjectPropertyElement mElement = 0;
    uint64_t v19 = sub_32A48(13);
    if (*(unsigned char *)(v19 + 8))
    {
      unsigned int v20 = *(NSObject **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          v81.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v81.__cv_.__opaque = inAddress.mElement;
          sub_16C9C4((uint64_t)&v82, (unsigned int *)&v81);
          uint64_t v21 = v82.__m_.__opaque[15] >= 0 ? &v82 : (std::mutex *)v82.__m_.__sig;
          *(_DWORD *)int buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 166;
          __int16 v71 = 2080;
          uint64_t v72 = (const char *)v21;
          __int16 v73 = 1024;
          LODWORD(v74) = v18;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", buf, 0x22u);
          if (v82.__m_.__opaque[15] < 0) {
            operator delete((void *)v82.__m_.__sig);
          }
        }
      }
    }
    AudioObjectID v64 = v18;
    AudioObjectPropertyAddress v65 = inAddress;
    int v66 = 0;
    uint64_t v67 = 0;
    double v22 = COERCE_DOUBLE(sub_3F6448((uint64_t)&v64));
    if (!v23 && *(double *)a2 == v22)
    {
      uint64_t v37 = sub_32A48(13);
      if (*(unsigned char *)(v37 + 8))
      {
        uint64_t v38 = *(NSObject **)v37;
        if (*(void *)v37)
        {
          if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v69 = 1024;
            int v70 = 219;
            __int16 v71 = 1024;
            LODWORD(v72) = v18;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", buf, 0x18u);
          }
        }
      }
      goto LABEL_94;
    }
    memset(v82.__m_.__opaque, 0, sizeof(v82.__m_.__opaque));
    v82.__m_.__uint64_t sig = 850045863;
    memset(v81.__cv_.__opaque, 0, sizeof(v81.__cv_.__opaque));
    v81.__cv_.__uint64_t sig = 1018212795;
    char v63 = 0;
    sub_662FC(&__p, v18, &inAddress, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v63);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v28.__d_.__rep_) / -1000)
    {
      double v25 = COERCE_DOUBLE(sub_3F6448((uint64_t)&v64));
      if (v26) {
        goto LABEL_93;
      }
      double v27 = v25;
      if (*(double *)a2 == v25) {
        break;
      }
      if (i <= 0)
      {
        __int16 v50 = (os_log_t *)sub_32A48(13);
        os_log_t v51 = *v50;
        if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
        {
          AudioObjectPropertyAddress v59 = inAddress;
          sub_16C9C4((uint64_t)&__lk, &v59.mSelector);
          if (v61 >= 0) {
            p_luint64_t k = (std::string *)&__lk;
          }
          else {
            p_luint64_t k = (std::string *)__lk.__m_;
          }
          BOOL v53 = *(double *)a2 == v27;
          *(_DWORD *)int buf = 136316930;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 248;
          __int16 v71 = 2080;
          uint64_t v72 = "updated";
          __int16 v73 = 2080;
          unint64_t v74 = p_lk;
          __int16 v75 = 2080;
          *(void *)uint64_t v76 = "updated";
          *(_WORD *)&v76[8] = 1024;
          *(_DWORD *)&v76[10] = v53;
          __int16 v77 = 1024;
          int v78 = 0;
          __int16 v79 = 1024;
          AudioObjectID v80 = v18;
          __int16 v46 = "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.";
          unsigned int v47 = v51;
          os_log_type_t v48 = OS_LOG_TYPE_ERROR;
          uint32_t v49 = 66;
LABEL_91:
          _os_log_impl(&def_1E50E8, v47, v48, v46, buf, v49);
          if (v61 < 0) {
            operator delete(__lk.__m_);
          }
        }
        goto LABEL_93;
      }
      v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v29 = sub_32A48(13);
      if (*(unsigned char *)(v29 + 8))
      {
        __int16 v30 = *(NSObject **)v29;
        if (*(void *)v29)
        {
          if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v69 = 1024;
            int v70 = 257;
            __int16 v71 = 2080;
            uint64_t v72 = "with timeout";
            __int16 v73 = 1024;
            LODWORD(v74) = v18;
            _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)int buf = &qword_64CC40;
      _DWORD buf[8] = 0;
      _DWORD buf[8] = sub_1D4024();
      __lk.__m_ = &v82;
      __lk.__owns_ = 1;
      std::mutex::lock(&v82);
      v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v63)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v32 = v31.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v32 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_42;
          }
          v33.__d_.__rep_ = v32 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v33.__d_.__rep_ >= 1) {
            break;
          }
LABEL_60:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v32 || v63) {
            goto LABEL_42;
          }
        }
        std::chrono::steady_clock::now();
        v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v34.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0;
          goto LABEL_56;
        }
        if (v34.__d_.__rep_ < 1)
        {
          if ((unint64_t)v34.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_55;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v34.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_56;
          }
LABEL_55:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = 1000 * v34.__d_.__rep_;
LABEL_56:
          if (v35 > (v33.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v36.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_59:
            std::condition_variable::__do_timed_wait(&v81, &__lk, v36);
            std::chrono::steady_clock::now();
            goto LABEL_60;
          }
        }
        v36.__d_.__rep_ = v35 + v33.__d_.__rep_;
        goto LABEL_59;
      }
LABEL_42:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)buf);
    }
    uint64_t v43 = sub_32A48(13);
    if (*(unsigned char *)(v43 + 8))
    {
      os_log_t v44 = *(os_log_t *)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyAddress v59 = inAddress;
          sub_16C9C4((uint64_t)&__lk, &v59.mSelector);
          if (v61 >= 0) {
            unint64_t m = (const char *)&__lk;
          }
          else {
            unint64_t m = (const char *)__lk.__m_;
          }
          *(_DWORD *)int buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v69 = 1024;
          int v70 = 288;
          __int16 v71 = 2080;
          uint64_t v72 = m;
          __int16 v73 = 1024;
          LODWORD(v74) = v18;
          __int16 v46 = "%25s:%-5d Successfully synchronized the property %s on id %u.";
          unsigned int v47 = v44;
          os_log_type_t v48 = OS_LOG_TYPE_DEBUG;
          uint32_t v49 = 34;
          goto LABEL_91;
        }
      }
    }
LABEL_93:
    sub_6651C((uint64_t)&__p);
    std::condition_variable::~condition_variable(&v81);
    std::mutex::~mutex(&v82);
LABEL_94:
    sub_D26B4(v57);
    return 0;
  }
  while (1)
  {
    uint64_t v8 = (std::string *)v7[2];
    uint64_t v9 = (*(uint64_t (**)(std::string *, uint64_t, void))(v8->__r_.__value_.__r.__words[0] + 96))(v8, 1, 0);
    uint64_t v10 = (const char *)v9;
    if (v9) {
      break;
    }
LABEL_20:
    uint64_t v7 = (void *)v7[1];
    if (v7 == a1 + 19) {
      goto LABEL_21;
    }
  }
  memset(&v81, 0, 24);
  (*(void (**)(uint64_t, std::condition_variable *, uint64_t))(*(void *)v9 + 104))(v9, &v81, 1885762657);
  memset(&v82, 0, 40);
  sub_320180((uint64_t)&v82, v81.__cv_.__sig, *(uint64_t *)v81.__cv_.__opaque, a2);
  char v11 = (os_log_t *)sub_32A48(22);
  char v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    int v13 = (*(uint64_t (**)(std::string *))(v8->__r_.__value_.__r.__words[0] + 120))(v8);
    sub_259A4(&__p, (uint64_t)&v82);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136316418;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    __int16 v69 = 1024;
    int v70 = 480;
    __int16 v71 = 2048;
    uint64_t v72 = v10;
    __int16 v73 = 2048;
    unint64_t v74 = v8;
    __int16 v75 = 1024;
    *(_DWORD *)uint64_t v76 = v13;
    *(_WORD *)&v76[4] = 2080;
    *(void *)&v76[6] = p_p;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling SetCurrentFormatSynchronously on Stream at %p of PhysicalDevice at %p (ID %u):\n%s", buf, 0x36u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unsigned int v15 = (*(uint64_t (**)(const char *, std::mutex *, uint64_t))(*(void *)v10 + 152))(v10, &v82, 1885762592);
  if (!v15)
  {
    if (v81.__cv_.__sig)
    {
      *(void *)v81.__cv_.__opaque = v81.__cv_.__sig;
      operator delete((void *)v81.__cv_.__sig);
    }
    goto LABEL_20;
  }
  unint64_t v39 = (os_log_t *)sub_32A48(22);
  unint64_t v40 = *v39;
  if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&__p, v15);
    uint64_t v41 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    __int16 v69 = 1024;
    int v70 = 488;
    __int16 v71 = 2048;
    uint64_t v72 = v10;
    __int16 v73 = 2080;
    unint64_t v74 = v41;
    __int16 v75 = 1024;
    *(_DWORD *)uint64_t v76 = v15;
    _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d SetCurrentFormatSynchronously on stream at %p failed with status '%s' (%d).", buf, 0x2Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v81.__cv_.__sig)
  {
    *(void *)v81.__cv_.__opaque = v81.__cv_.__sig;
    operator delete((void *)v81.__cv_.__sig);
  }
  return 560226676;
}

void sub_3F63A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_6651C((uint64_t)va);
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 - 240));
  std::mutex::~mutex((std::mutex *)(v13 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_3F6448(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  sub_904E4((uint64_t)&v19, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  unsigned int v4 = v19;
  if (v19)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v17, v4);
        int v7 = v18;
        uint64_t v8 = (void **)v17[0];
        uint64_t v13 = *v2;
        int v14 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v13);
        uint64_t v9 = v17;
        if (v7 < 0) {
          uint64_t v9 = v8;
        }
        if (v16 >= 0) {
          uint64_t v10 = __p;
        }
        else {
          uint64_t v10 = (void **)__p[0];
        }
        AudioObjectID v11 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        unsigned int v26 = v4;
        __int16 v27 = 2080;
        std::chrono::system_clock::time_point v28 = v9;
        __int16 v29 = 2080;
        __int16 v30 = v10;
        __int16 v31 = 1024;
        AudioObjectID v32 = v11;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }
    }
  }
  if (v21) {
    return v20;
  }
  else {
    return 0;
  }
}

void sub_3F65F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3F6618()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateStream_Broadcast.cpp";
      __int16 v5 = 1024;
      int v6 = 510;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Setting virtual stream format is not allowed.  Only physical stream formats may be set.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Setting virtual stream format is not allowed.  Only physical stream formats may be set.");
}

void sub_3F66E4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3F6700(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 != 1885762592)
  {
    __int16 v27 = (os_log_t *)sub_32A48(13);
    std::chrono::system_clock::time_point v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 419;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }
  __int16 v5 = (os_log_t *)sub_32A48(22);
  int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_259A4((std::string *)__p, (uint64_t)a2);
    int v7 = (SBYTE7(v36) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 422;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client requested format: %s", buf, 0x1Cu);
    if (SBYTE7(v36) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = a1 + 152;
  uint64_t v30 = a1;
  uint64_t v9 = *(void *)(a1 + 160);
  if (v9 == v8)
  {
LABEL_30:
    if (*(void *)(v30 + 176))
    {
      __int16 v25 = *(void (**)(void, uint64_t))(v30 + 184);
      if (v25) {
        v25(0, 1);
      }
    }
    return 0;
  }
  else
  {
    while (1)
    {
      std::chrono::steady_clock::time_point v33 = 0;
      uint64_t v34 = 0;
      AudioObjectID v32 = 0;
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96))(*(void *)(v9 + 16), 1, 0);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 104))(v10, &v32, 1885762657);
      sub_320180((uint64_t)buf, (uint64_t)v32, (uint64_t)v33, a2);
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      long long v36 = *(_OWORD *)&buf[16];
      uint64_t v37 = *(void *)&buf[32];
      AudioObjectID v11 = (os_log_t *)sub_32A48(22);
      char v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96))(*(void *)(v9 + 16), 1, 0);
        uint64_t v14 = *(void *)(v9 + 16);
        unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120))(v14);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 434;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v13;
        *(_WORD *)&unsigned char buf[28] = 2048;
        *(void *)&unsigned char buf[30] = v14;
        *(_WORD *)&unsigned char buf[38] = 1024;
        unsigned int v39 = v15;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling SetCurrentFormat on Stream %p of PhysicalDevice %p (ID %u):", buf, 0x2Cu);
      }
      char v16 = (os_log_t *)sub_32A48(22);
      BOOL v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
      {
        sub_259A4(&v31, (uint64_t)__p);
        char v18 = &v31;
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 435;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v18;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96))(*(void *)(v9 + 16), 1, 0);
      unsigned int v20 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v19 + 136))(v19, __p, 1885762592);
      if (v20)
      {
        char v21 = (os_log_t *)sub_32A48(22);
        double v22 = *v21;
        if (*v21)
        {
          if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v9 + 16) + 96))(*(void *)(v9 + 16), 1, 0);
            sub_2417C(&v31, v20);
            int v24 = &v31;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v24 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 437;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v23;
            *(_WORD *)&unsigned char buf[28] = 2080;
            *(void *)&unsigned char buf[30] = v24;
            *(_WORD *)&unsigned char buf[38] = 1024;
            unsigned int v39 = v20;
            _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d SetCurrentFormat on stream %p failed with status '%s' (%d).", buf, 0x2Cu);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      if (v32)
      {
        std::chrono::steady_clock::time_point v33 = v32;
        operator delete(v32);
      }
      if (v20) {
        return 560226676;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      if (v9 == v8) {
        goto LABEL_30;
      }
    }
  }
}

void sub_3F6C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_3F6CF4()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unsigned int v4 = "AggregateStream_Broadcast.cpp";
      __int16 v5 = 1024;
      int v6 = 456;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Setting virtual stream format is not allowed.  Only physical stream formats may be set.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Setting virtual stream format is not allowed.  Only physical stream formats may be set.");
}

void sub_3F6DC0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3F6DDC(uint64_t a1, void *outData, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    __int16 v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        inAddress.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&inAddress.mScope = "AggregateStream_Broadcast.cpp";
        __int16 v10 = 1024;
        int v11 = 408;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", (uint8_t *)&inAddress, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }
  *(void *)&inAddress.mScope = 1735159650;
  UInt32 ioDataSize = 40;
  inAddress.AudioObjectPropertySelector mSelector = a3;
  return AudioObjectGetPropertyData(*(_DWORD *)(a1 + 208), &inAddress, 0, 0, &ioDataSize, outData);
}

void sub_3F6F20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3F6F3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1936092532);
}

uint64_t sub_3F6F68(void *a1, char *a2, int a3)
{
  if (a3 == 1885762657)
  {
    if (a1 + 13 != (void *)a2)
    {
      unsigned int v4 = (char *)a1[13];
      uint64_t v3 = a1[14];
      goto LABEL_7;
    }
  }
  else
  {
    if (a3 != 1936092513)
    {
      int v6 = (os_log_t *)sub_32A48(13);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        __int16 v10 = "AggregateStream_Broadcast.cpp";
        __int16 v11 = 1024;
        int v12 = 384;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", (uint8_t *)&v9, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "specified inSelector is not valid");
    }
    if (a1 + 16 != (void *)a2)
    {
      unsigned int v4 = (char *)a1[16];
      uint64_t v3 = a1[17];
LABEL_7:
      sub_31CC90(a2, v4, v3, 0x6DB6DB6DB6DB6DB7 * ((v3 - (uint64_t)v4) >> 3));
    }
  }
  return 0;
}

void sub_3F70D0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3F70EC(uint64_t a1, char *a2)
{
  if ((char *)(a1 + 128) != a2) {
    sub_31CC90(a2, *(char **)(a1 + 128), *(void *)(a1 + 136), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3));
  }
  return 0;
}

uint64_t sub_3F7140()
{
  return 1;
}

uint64_t sub_3F714C(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != 1936092532 && *a2 != 1885762592) {
    return 0;
  }
  if (a1[23] != a3 || a1[24] != a4)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      __int16 v11 = "AggregateStream_Broadcast.cpp";
      __int16 v12 = 1024;
      int v13 = 571;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to unregister a listener that is not currently registered\"", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to unregister a listener that is not currently registered");
  }
  uint64_t v5 = a1[22];
  a1[22] = 0;
  if (v5) {
    operator delete();
  }
  a1[23] = 0;
  a1[24] = 0;
  return 1;
}

void sub_3F72B4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3F72D0(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1936092532 || *a2 == 1885762592)
  {
    if (!*(void *)(a1 + 184) && !*(void *)(a1 + 192)) {
      operator new();
    }
    unsigned int v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "AggregateStream_Broadcast.cpp";
      __int16 v9 = 1024;
      int v10 = 546;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to set a new listener while the old one still exists. We don't handle this.\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to set a new listener while the old one still exists. We don't handle this.");
  }
  return 0;
}

void sub_3F746C(_Unwind_Exception *exception_object)
{
}

std::string *sub_3F7488@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_21C8C(&v16, __str);
  unsigned int v4 = std::string::insert(&v16, 0, "[ addr: ", 8uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v18 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v18 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (v18 >= 0) {
    std::string::size_type v7 = HIBYTE(v18);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  snprintf(__str, 0x13uLL, "%p", *(const void **)(a1 + 200));
  sub_21C8C(&v16, __str);
  uint64_t v8 = std::string::insert(&v16, 0, "; owning dev: ", 0xEuLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v18 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v18 >= 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if (v18 >= 0) {
    std::string::size_type v11 = HIBYTE(v18);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, "; strms: { ", 0xBuLL);
  uint64_t v12 = *(void *)(a1 + 88);
  if (v12 != a1 + 80)
  {
    while (1)
    {
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(v12 + 16) + 8));
      int v13 = v18 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v14 = v18 >= 0 ? (void *)HIBYTE(v18) : __p[1];
      std::string::append(a2, v13, (std::string::size_type)v14);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = *(void *)(v12 + 8);
      if (v12 == a1 + 80) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
    }
  }
  return std::string::append(a2, " } ]", 4uLL);
}

void sub_3F76D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_3F7748(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    BOOL v17 = (os_log_t *)sub_32A48(13);
    int64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v43);
      uint64_t v19 = v49 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 344;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v19;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    double v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v43);
      uint64_t v23 = v49 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 345;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v23;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = a3;
      *(_WORD *)&unsigned char buf[34] = 2048;
      *(void *)&uint8_t buf[36] = a4;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }
    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_6414D8;
    void v24[2] = 561211770;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) > a5)
  {
    __int16 v25 = (os_log_t *)sub_32A48(13);
    unsigned int v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v43);
      int v27 = v49;
      std::chrono::system_clock::time_point v28 = *(unsigned char **)__p;
      int v29 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
      uint64_t v30 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      if (v27 < 0) {
        uint64_t v30 = v28;
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 346;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v30;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = a5;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&uint8_t buf[36] = v29;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }
    std::string v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v31 = &off_6414D8;
    v31[2] = 561211770;
  }
  if (!a6)
  {
    AudioObjectID v32 = (os_log_t *)sub_32A48(13);
    std::chrono::steady_clock::time_point v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v43);
      uint64_t v34 = v49 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 347;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "inData";
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&unsigned char buf[30] = v34;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = &off_6414D8;
    v35[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    long long v36 = (os_log_t *)sub_32A48(13);
    uint64_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v43);
      uint64_t v38 = v49 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 348;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v38;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }
    unsigned int v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v39 = &off_6414D8;
    v39[2] = 1852797029;
  }
  if (*(_DWORD *)a2 == 1936092532 || *(_DWORD *)a2 == 1885762592)
  {
    long long v12 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a6;
    *(_OWORD *)&buf[16] = v12;
    *(void *)&unsigned char buf[32] = *(void *)(a6 + 32);
    int v13 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 136))(a1, buf);
    if (v13)
    {
      unint64_t v40 = (os_log_t *)sub_32A48(13);
      uint64_t v41 = *v40;
      if (*v40)
      {
        if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateStream_Broadcast.cpp";
          __int16 v47 = 1024;
          int v48 = 357;
          _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"AggregateStream_Broadcast::SetCurrentFormat reported a failure.\"", __p, 0x12u);
        }
      }
      uint64_t v42 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v42 = &off_6414D8;
      v42[2] = v13;
    }
  }
  else
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    unsigned int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *a2;
      int v44 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v43);
      std::string v16 = v49 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 362;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unhandled property for which HasProperty returned true: %s.\"", buf, 0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
}

void sub_3F7FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3F8004(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int64_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v44);
      unsigned int v20 = v50 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 315;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v20;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    double v22 = (os_log_t *)sub_32A48(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v44);
      int v24 = v50 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 316;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v24;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = a3;
      *(_WORD *)&unsigned char buf[34] = 2048;
      *(void *)&uint8_t buf[36] = a4;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }
    __int16 v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v25 = &off_6414D8;
    _OWORD v25[2] = 561211770;
  }
  if (!a6)
  {
    unsigned int v26 = (os_log_t *)sub_32A48(13);
    int v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v44);
      std::chrono::system_clock::time_point v28 = v50 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 317;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "outData";
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&unsigned char buf[30] = v28;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }
    int v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v29 = &off_6414D8;
    v29[2] = 561211770;
  }
  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4))
  {
    uint64_t v30 = (os_log_t *)sub_32A48(13);
    std::string v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v44);
      int v32 = v50;
      std::chrono::steady_clock::time_point v33 = *(unsigned char **)__p;
      unsigned int v34 = *a5;
      int v35 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
      long long v36 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      if (v32 < 0) {
        long long v36 = v33;
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 318;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v36;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = v34;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&uint8_t buf[36] = v35;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v37 = &off_6414D8;
    v37[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1936092532 || *(_DWORD *)a2 == 1885762592)
  {
    if (*a5 <= 0x27)
    {
      uint64_t v38 = (os_log_t *)sub_32A48(13);
      unsigned int v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 325;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"ioDataSize too small to fit an AudioStreamBasicDescription.\"", buf, 0x12u);
      }
      unint64_t v40 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v40 = &off_6414D8;
      v40[2] = 561211770;
    }
    int v13 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 120))(a1, buf);
    if (v13)
    {
      uint64_t v41 = (os_log_t *)sub_32A48(13);
      uint64_t v42 = *v41;
      if (*v41)
      {
        if (os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateStream_Broadcast.cpp";
          __int16 v48 = 1024;
          int v49 = 328;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"AggregateStream_Broadcast::GetCurrentFormat reported a failure.\"", __p, 0x12u);
        }
      }
      uint64_t v43 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v43 = &off_6414D8;
      v43[2] = v13;
    }
    long long v14 = *(_OWORD *)&buf[16];
    *(_OWORD *)a6 = *(_OWORD *)buf;
    *(_OWORD *)(a6 + 16) = v14;
    *(void *)(a6 + 32) = *(void *)&buf[32];
  }
  else
  {
    unsigned int v15 = (os_log_t *)sub_32A48(13);
    std::string v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *a2;
      int v45 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v44);
      BOOL v17 = v50 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 334;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v17;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unhandled property for which HasProperty returned true: %s.\"", buf, 0x1Cu);
      if (v50 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
}

void sub_3F8834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3F8858(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    std::string v16 = (os_log_t *)sub_32A48(13);
    BOOL v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)buf, (unsigned int *)&v24);
      int64_t v18 = v34 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)unsigned int v26 = 136315650;
      *(void *)&v26[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 294;
      *(_WORD *)&v26[18] = 2080;
      *(void *)&v26[20] = v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", v26, 0x1Cu);
      if (v34 < 0) {
        operator delete(*(void **)buf);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    unsigned int v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)buf, (unsigned int *)&v24);
      double v22 = v34 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)unsigned int v26 = 136316162;
      *(void *)&v26[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 295;
      *(_WORD *)&v26[18] = 2080;
      *(void *)&v26[20] = v22;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = a4;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        v26,
        0x2Cu);
      if (v34 < 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v23 = &off_6414D8;
    void v23[2] = 561211770;
  }
  *(void *)&v26[8] = 0;
  *(void *)&v26[16] = 0;
  *(void *)unsigned int v26 = &v26[8];
  uint64_t v8 = a1 + 10;
  uint64_t v9 = a1[11];
  if ((void *)v9 == v8) {
    goto LABEL_9;
  }
  do
  {
    if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a2))
    {
      unsigned int v10 = (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t))(**(void **)(v9 + 16) + 32))(*(void *)(v9 + 16), a2, a3, a4);
      sub_6CB40((uint64_t *)v26, v10, v10);
    }
    uint64_t v9 = *(void *)(v9 + 8);
  }
  while ((void *)v9 != v8);
  if (*(void *)&v26[16] != 1)
  {
LABEL_9:
    int v13 = (os_log_t *)sub_32A48(13);
    long long v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      __int16 v32 = 1024;
      int v33 = 306;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Varying response to GetPropertyDataSize.\"", buf, 0x12u);
    }
    unsigned int v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v15 = &off_6414D8;
    _OWORD v15[2] = 1852797029;
  }
  uint64_t v11 = *(unsigned int *)(*(void *)v26 + 28);
  sub_463E0(*(void **)&v26[8]);
  return v11;
}

void sub_3F8CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t sub_3F8CCC(void *a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    int64_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *a2;
      int v23 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)buf, (unsigned int *)&v22);
      unsigned int v20 = v27 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v28 = 136315650;
      *(void *)&v28[4] = "AggregateStream_Broadcast.cpp";
      *(_WORD *)&unsigned char v28[12] = 1024;
      *(_DWORD *)&v28[14] = 273;
      *(_WORD *)&v28[18] = 2080;
      *(void *)&v28[20] = v20;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", v28, 0x1Cu);
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  *(void *)&v28[8] = 0;
  *(void *)&v28[16] = 0;
  *(void *)int v28 = &v28[8];
  unsigned int v4 = a1 + 10;
  uint64_t v5 = a1[11];
  if ((void *)v5 == a1 + 10) {
    goto LABEL_17;
  }
  do
  {
    if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(v5 + 16) + 16))(*(void *)(v5 + 16), a2))
    {
      unsigned int v6 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v5 + 16) + 24))(*(void *)(v5 + 16), a2);
      char v7 = v6;
      uint64_t v8 = *(void *)&v28[8];
      uint64_t v9 = &v28[8];
      unsigned int v10 = &v28[8];
      if (*(void *)&v28[8])
      {
        while (1)
        {
          while (1)
          {
            unsigned int v10 = (void *)v8;
            unsigned int v11 = *(unsigned __int8 *)(v8 + 25);
            if (v11 <= v6) {
              break;
            }
            uint64_t v8 = *v10;
            uint64_t v9 = v10;
            if (!*v10) {
              goto LABEL_11;
            }
          }
          if (v11 >= v6) {
            break;
          }
          uint64_t v8 = v10[1];
          if (!v8)
          {
            uint64_t v9 = v10 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        unsigned int v12 = operator new(0x20uLL);
        v12[25] = v7;
        *(void *)unsigned int v12 = 0;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 2) = v10;
        void *v9 = v12;
        if (**(void **)v28)
        {
          *(void *)int v28 = **(void **)v28;
          unsigned int v12 = (unsigned char *)*v9;
        }
        sub_46D00(*(uint64_t **)&v28[8], (uint64_t *)v12);
        ++*(void *)&v28[16];
      }
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while ((void *)v5 != v4);
  if (*(void *)&v28[16] != 1)
  {
LABEL_17:
    unsigned int v15 = (os_log_t *)sub_32A48(13);
    std::string v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateStream_Broadcast.cpp";
      __int16 v25 = 1024;
      int v26 = 285;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Varying response to IsPropertySettable.\"", buf, 0x12u);
    }
    BOOL v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v17 = &off_6414D8;
    v17[2] = 1852797029;
  }
  uint64_t v13 = *(unsigned __int8 *)(*(void *)v28 + 25);
  sub_463E0(*(void **)&v28[8]);
  return v13;
}

void sub_3F9054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

BOOL sub_3F907C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1819569763) {
    return 0;
  }
  if (v2 != 1936092532 && v2 != 1885762592)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(22);
    uint64_t v9 = *v8;
    if (*v8)
    {
      BOOL result = os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      unsigned int v20 = *(void **)a2;
      int v21 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v20);
      if (v24 >= 0) {
        unsigned int v10 = __p;
      }
      else {
        unsigned int v10 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v26 = "AggregateStream_Broadcast.cpp";
      __int16 v27 = 1024;
      int v28 = 261;
      __int16 v29 = 2080;
      uint64_t v30 = v10;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Encountered an unsupported property: %s.", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  uint64_t v5 = a1 + 80;
  for (uint64_t i = *(void *)(a1 + 88); i != v5; uint64_t i = *(void *)(i + 8))
  {
    if (((*(uint64_t (**)(void, int *))(**(void **)(i + 16) + 16))(*(void *)(i + 16), a2) & 1) == 0)
    {
      unsigned int v11 = (os_log_t *)sub_32A48(13);
      unsigned int v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(i + 16) + 8));
        int v13 = v24;
        long long v14 = (void **)__p[0];
        int64_t v18 = *(void **)a2;
        int v19 = a2[2];
        sub_16C9C4((uint64_t)&v20, (unsigned int *)&v18);
        unsigned int v15 = __p;
        if (v13 < 0) {
          unsigned int v15 = v14;
        }
        if (v22 >= 0) {
          std::string v16 = &v20;
        }
        else {
          std::string v16 = v20;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        int v26 = "AggregateStream_Broadcast.cpp";
        __int16 v27 = 1024;
        int v28 = 248;
        __int16 v29 = 2080;
        uint64_t v30 = v15;
        __int16 v31 = 2080;
        __int16 v32 = v16;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Referenced stream %s does not support property %s.\"", buf, 0x26u);
        if (v22 < 0) {
          operator delete(v20);
        }
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Referenced stream %s does not support property %s.");
    }
  }
  return 1;
}

void sub_3F9344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3F9378(void *a1)
{
  sub_3F93B0(a1);

  operator delete();
}

uint64_t sub_3F93B0(void *a1)
{
  *a1 = off_63CFB0;
  uint64_t v2 = a1[22];
  a1[22] = 0;
  if (v2) {
    operator delete();
  }
  sub_45F50(a1 + 19);
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  sub_45F50(a1 + 10);

  return sub_FE920((uint64_t)a1);
}

void sub_3F9454(void **a1, uint64_t a2, UInt32 a3, AudioObjectPropertySelector a4)
{
  if (a4 != 1885762657 && a4 != 1936092513)
  {
    int v78 = (os_log_t *)sub_32A48(13);
    __int16 v79 = *v78;
    if (*v78)
    {
      if (os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        size_t v89 = "AggregateStream_Broadcast.cpp";
        __int16 v90 = 1024;
        int v91 = 40;
        _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747073746D23;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 outDataSize = 0;
  AudioObjectID v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v9, &inAddress, 0, 0, &outDataSize);
  if (a3 >= 2)
  {
    __int32 v56 = (os_log_t *)sub_32A48(13);
    uint64_t v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      size_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 49;
      __int16 v92 = 1024;
      *(_DWORD *)CFIndex v93 = a3;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Requested stream index is invalid: %u\"", buf, 0x18u);
    }
    CFRange v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Requested stream index is invalid: %u");
LABEL_58:
  }
  unint64_t v11 = (unint64_t)outDataSize >> 2;
  if (outDataSize >> 2 <= a3)
  {
    AudioObjectPropertyAddress v59 = (os_log_t *)sub_32A48(13);
    uint64_t v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      size_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 50;
      __int16 v92 = 1024;
      *(_DWORD *)CFIndex v93 = a3;
      *(_WORD *)&void v93[4] = 1024;
      *(_DWORD *)&v93[6] = v11 - 1;
      _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Requested stream index %u is out of range: %u\"", buf, 0x1Eu);
    }
    CFRange v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Requested stream index %u is out of range: %u");
    goto LABEL_58;
  }
  v81[1] = v81;
  uint64_t v12 = 4 * v11;
  __n128 v13 = __chkstk_darwin(PropertyDataSize);
  long long v14 = (char *)v81 - ((4 * v11 + 15) & 0x1FFFFFFF0);
  AudioObjectID v15 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a2 + 120))(a2, v13);
  OSStatus PropertyData = AudioObjectGetPropertyData(v15, &inAddress, 0, 0, &outDataSize, v14);
  if (PropertyData)
  {
    char v61 = (os_log_t *)sub_32A48(13);
    uint64_t v62 = *v61;
    if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v85, inAddress.mScope);
      char v63 = (v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v85
          : (std::string *)v85.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      size_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 55;
      __int16 v92 = 2080;
      *(void *)CFIndex v93 = v63;
      _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"AudioObjectGetPropertyData(kAudioDevicePropertyStreams, '%s') failed.\"", buf, 0x1Cu);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
    }
    AudioObjectID v64 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectID v64 = &off_6414D8;
    v64[2] = PropertyData;
  }
  if (v12 != outDataSize)
  {
    AudioObjectPropertyAddress v65 = (os_log_t *)sub_32A48(13);
    int v66 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      size_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 56;
      __int16 v92 = 1024;
      *(_DWORD *)CFIndex v93 = outDataSize;
      *(_WORD *)&void v93[4] = 2048;
      *(void *)&v93[6] = v12;
      _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a size of %u while we expected %lu\"", buf, 0x22u);
    }
    uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v67, "The HAL returned a size of %u while we expected %lu");
  }
  BOOL v17 = (os_log_t *)sub_32A48(22);
  int64_t v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == 1936092513) {
      int v19 = "virtual";
    }
    else {
      int v19 = "physical";
    }
    int v20 = *(_DWORD *)&v14[4 * a3];
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 128))(&v85, a2);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    size_t v89 = "AggregateStream_Broadcast.cpp";
    __int16 v90 = 1024;
    int v91 = 60;
    __int16 v92 = 2080;
    *(void *)CFIndex v93 = v19;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)&v93[10] = v20;
    __int16 v94 = 1024;
    int v95 = v21;
    __int16 v96 = 2112;
    std::string::size_type v97 = v85.__r_.__value_.__r.__words[0];
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d getting %s formats for output stream ID %u on device ID %u (uid: \"%@\").", buf, 0x32u);
    sub_72924((uint64_t)&v85);
  }
  UInt32 ioDataSize = 0;
  v84.AudioObjectPropertySelector mSelector = a4;
  *(void *)&v84.mScope = 1735159650;
  uint64_t v22 = AudioObjectGetPropertyDataSize(*(_DWORD *)&v14[4 * a3], &v84, 0, 0, &ioDataSize);
  unsigned int v23 = v22;
  uint64_t v24 = a3;
  if (v22)
  {
    uint64_t v68 = (os_log_t *)sub_32A48(13);
    __int16 v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v85, v23);
      int v70 = (std::string *)v85.__r_.__value_.__r.__words[0];
      int v71 = *(_DWORD *)&v14[4 * v24];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v70 = &v85;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      size_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 67;
      __int16 v92 = 1024;
      *(_DWORD *)CFIndex v93 = v23;
      *(_WORD *)&void v93[4] = 2080;
      *(void *)&v93[6] = v70;
      __int16 v94 = 1024;
      int v95 = v71;
      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"Error %d ('%s') determining the number of stream formats for stream %d\"", buf, 0x28u);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v72 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v72 = &off_6414D8;
    v72[2] = v23;
  }
  UInt32 v25 = ioDataSize / 0x38;
  __chkstk_darwin(v22);
  __int16 v27 = (char *)v81 - v26;
  UInt32 ioDataSize = 56 * v25;
  OSStatus v28 = AudioObjectGetPropertyData(*(_DWORD *)&v14[4 * v24], &v84, 0, 0, &ioDataSize, (char *)v81 - v26);
  if (v28)
  {
    __int16 v73 = (os_log_t *)sub_32A48(13);
    unint64_t v74 = *v73;
    if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v85, v28);
      __int16 v75 = (std::string *)v85.__r_.__value_.__r.__words[0];
      int v76 = *(_DWORD *)&v14[4 * v24];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v75 = &v85;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      size_t v89 = "AggregateStream_Broadcast.cpp";
      __int16 v90 = 1024;
      int v91 = 74;
      __int16 v92 = 1024;
      *(_DWORD *)CFIndex v93 = v28;
      *(_WORD *)&void v93[4] = 2080;
      *(void *)&v93[6] = v75;
      __int16 v94 = 1024;
      int v95 = v76;
      _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"Error %d ('%s') reading the stream formats for stream %d\"", buf, 0x28u);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
    }
    __int16 v77 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v77 = &off_6414D8;
    v77[2] = v28;
  }
  if (v25 >= ioDataSize / 0x38) {
    uint64_t v30 = ioDataSize / 0x38;
  }
  else {
    uint64_t v30 = v25;
  }
  if (v30)
  {
    __int16 v31 = 0;
    uint64_t v32 = 0;
    *(void *)&long long v29 = 136315906;
    long long v82 = v29;
    do
    {
      int v33 = &v27[56 * v32];
      char v34 = a1[2];
      if (v31 >= (_OWORD *)v34)
      {
        uint64_t v38 = *a1;
        uint64_t v39 = 0x6DB6DB6DB6DB6DB7 * (((char *)v31 - (unsigned char *)*a1) >> 3);
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) > 0x492492492492492) {
          sub_60548();
        }
        unint64_t v41 = 0x6DB6DB6DB6DB6DB7 * ((v34 - (unsigned char *)v38) >> 3);
        if (2 * v41 > v40) {
          unint64_t v40 = 2 * v41;
        }
        if (v41 >= 0x249249249249249) {
          unint64_t v42 = 0x492492492492492;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42) {
          unint64_t v42 = (unint64_t)sub_1927E0(v42);
        }
        else {
          uint64_t v43 = 0;
        }
        unint64_t v44 = v42 + 56 * v39;
        long long v45 = *(_OWORD *)v33;
        long long v46 = *((_OWORD *)v33 + 1);
        long long v47 = *((_OWORD *)v33 + 2);
        *(void *)(v44 + 48) = *((void *)v33 + 6);
        *(_OWORD *)(v44 + 16) = v46;
        *(_OWORD *)(v44 + 32) = v47;
        *(_OWORD *)unint64_t v44 = v45;
        if (v31 == v38)
        {
          unint64_t v52 = v42 + 56 * v39;
        }
        else
        {
          unint64_t v48 = v42 + 56 * v39;
          do
          {
            long long v49 = *(_OWORD *)((char *)v31 - 56);
            long long v50 = *(_OWORD *)((char *)v31 - 40);
            long long v51 = *(_OWORD *)((char *)v31 - 24);
            unint64_t v52 = v48 - 56;
            *(void *)(v48 - 8) = *((void *)v31 - 1);
            *(_OWORD *)(v48 - 24) = v51;
            *(_OWORD *)(v48 - 40) = v50;
            *(_OWORD *)(v48 - 56) = v49;
            __int16 v31 = (_OWORD *)((char *)v31 - 56);
            v48 -= 56;
          }
          while (v31 != v38);
        }
        __int16 v31 = (_OWORD *)(v44 + 56);
        *a1 = (void *)v52;
        a1[1] = (void *)(v44 + 56);
        a1[2] = (void *)(v42 + 56 * v43);
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        long long v35 = *(_OWORD *)v33;
        long long v36 = *((_OWORD *)v33 + 1);
        long long v37 = *((_OWORD *)v33 + 2);
        *((void *)v31 + 6) = *((void *)v33 + 6);
        v31[1] = v36;
        v31[2] = v37;
        *__int16 v31 = v35;
        __int16 v31 = (_OWORD *)((char *)v31 + 56);
      }
      a1[1] = v31;
      BOOL v53 = (os_log_t *)sub_32A48(22);
      unint64_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_DEBUG))
      {
        sub_16BC04(&v85, (uint64_t)&v27[56 * v32]);
        uint64_t v55 = &v85;
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v55 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = v82;
        size_t v89 = "AggregateStream_Broadcast.cpp";
        __int16 v90 = 1024;
        int v91 = 82;
        __int16 v92 = 1024;
        *(_DWORD *)CFIndex v93 = v32;
        *(_WORD *)&void v93[4] = 2080;
        *(void *)&v93[6] = v55;
        _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stream Format %u: %s.", buf, 0x22u);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v32;
    }
    while (v32 != v30);
  }
}

void sub_3F9F8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FA01C(uint64_t a1, UInt32 a2)
{
  if (!a1)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    __n128 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 143;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747073746D23;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 outDataSize = 0;
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v4, &inAddress, 0, 0, &outDataSize);
  if (a2 >= 2)
  {
    AudioObjectID v15 = (os_log_t *)sub_32A48(13);
    std::string v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 150;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = a2;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Requested stream index is invalid: %u\"", buf, 0x18u);
    }
    BOOL v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Requested stream index is invalid: %u");
  }
  unint64_t v6 = (unint64_t)outDataSize >> 2;
  if (outDataSize >> 2 <= a2)
  {
    int64_t v18 = (os_log_t *)sub_32A48(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 151;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = a2;
      WORD2(v37[0]) = 1024;
      *(_DWORD *)((char *)v37 + 6) = v6 - 1;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Requested stream index %u is out of range: %u\"", buf, 0x1Eu);
    }
    int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Requested stream index %u is out of range: %u");
  }
  uint64_t v7 = 4 * v6;
  __n128 v8 = __chkstk_darwin(PropertyDataSize);
  AudioObjectID v9 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 120))(a1, v8);
  OSStatus PropertyData = AudioObjectGetPropertyData(v9, &inAddress, 0, 0, &outDataSize, (char *)v28 - ((v7 + 15) & 0x1FFFFFFF0));
  if (PropertyData)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v28, inAddress.mScope);
      unsigned int v23 = v29 >= 0 ? v28 : (void **)v28[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 155;
      __int16 v36 = 2080;
      v37[0] = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"AudioObjectGetPropertyData(kAudioDevicePropertyStreams, '%s') failed.\"", buf, 0x1Cu);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
    uint64_t v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v24 = &off_6414D8;
    void v24[2] = PropertyData;
  }
  if (v7 != outDataSize)
  {
    UInt32 v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v33 = "AggregateStream_Broadcast.cpp";
      __int16 v34 = 1024;
      int v35 = 156;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = outDataSize;
      WORD2(v37[0]) = 2048;
      *(void *)((char *)v37 + 6) = v7;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a size of %u while we expected %lu\"", buf, 0x22u);
    }
    __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "The HAL returned a size of %u while we expected %lu");
  }
  return *(unsigned int *)((char *)v28 + 4 * a2 - ((v7 + 15) & 0x1FFFFFFF0));
}

void sub_3FA53C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_3FA568(uint64_t a1)
{
  uint64_t v1 = sub_99A40(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&long long v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000) != 0 && v3 != 0;
}

BOOL sub_3FA5B8()
{
  uint64_t v0 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 88))(v0) == 0;
}

BOOL sub_3FA5FC(uint64_t a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (!v2) {
    return 0;
  }
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return 0;
  }
  if (*a2)
  {
    int v5 = *(_DWORD *)(*a2 + 144);
    BOOL v7 = v5 != 1885892706 && v5 != 1886216820;
  }
  else
  {
    BOOL v7 = 0;
  }
  sub_4636C(v4);
  return v7;
}

uint64_t sub_3FA66C()
{
  return 1;
}

void sub_3FA674(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));
  sub_104C04((void *)a1);

  operator delete();
}

uint64_t sub_3FA6E0(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));

  return sub_104C04((void *)a1);
}

BOOL sub_3FA738(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_3FA758(uint64_t a1, void *a2)
{
  *a2 = off_63D498;
}

void *sub_3FA778()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_63D498;
  return result;
}

void sub_3FA7B0()
{
}

BOOL sub_3FA7C8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_3FA7E8(uint64_t a1, void *a2)
{
  *a2 = off_63D450;
}

void *sub_3FA808()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_63D450;
  return result;
}

void sub_3FA840()
{
}

uint64_t sub_3FA858(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_3FA8CC(uint64_t a1, void *a2)
{
  *a2 = off_63D408;
}

void *sub_3FA8EC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D408;
  return result;
}

void sub_3FA924()
{
}

uint64_t sub_3FA93C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3FA974(uint64_t a1, void *a2)
{
  *a2 = off_63D3C0;
}

void *sub_3FA994()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D3C0;
  return result;
}

void sub_3FA9CC()
{
}

uint64_t sub_3FA9E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3FAA1C(uint64_t a1, void *a2)
{
  *a2 = off_63D378;
}

void *sub_3FAA3C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D378;
  return result;
}

void sub_3FAA74()
{
}

BOOL sub_3FAA8C(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_3FAAB4(uint64_t a1, void *a2)
{
  *a2 = off_63D330;
}

void *sub_3FAAD4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D330;
  return result;
}

void sub_3FAB0C()
{
}

uint64_t sub_3FAB24(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_3FAB5C(uint64_t a1, void *a2)
{
  *a2 = off_63D2E8;
}

void *sub_3FAB7C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D2E8;
  return result;
}

void sub_3FABB4()
{
}

void sub_3FABCC(void *a1)
{
  if (a1)
  {
    sub_3FABCC(*a1);
    sub_3FABCC(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[7];
    if (v2) {
      sub_4636C(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_3FAC24(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = sub_3DA590((_DWORD *)(v3 + 32), a2);
    BOOL v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      BOOL v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_3DA590(a2, (_DWORD *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

void sub_3FACA0(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v7 = sub_3FAC24(a1 + 24, a2);
    if (a1 + 32 != v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(v7 + 48);
      unsigned int v10 = *(std::__shared_weak_count **)(v8 + 56);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        int v14 = 1;
        long long v15 = *a3;
        if (!*((void *)&v15 + 1))
        {
          unint64_t v11 = (os_log_t *)sub_32A48(13);
          uint64_t v12 = *v11;
          if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            BOOL v17 = "AudioIOMonitorBase.cpp";
            __int16 v18 = 1024;
            int v19 = 101;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [bufferList.mBuffers[0].mData is NULL]: \"data buffer is NULL\"", buf, 0x12u);
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "data buffer is NULL");
        }
        (*(void (**)(uint64_t, uint64_t, int *, void))(*(void *)v9 + 24))(v9, a4, &v14, 0);
      }
      if (v10) {
        sub_4636C(v10);
      }
    }
  }
}

void sub_3FAE3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(a1);
}

void sub_3FAE68(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v9 = sub_3FAC24(a1 + 24, a2);
    if (a1 + 32 != v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(v9 + 48);
      uint64_t v12 = *(std::__shared_weak_count **)(v10 + 56);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v11 + 96))(v11, a4, a3, 0, a5);
      }
      if (v12)
      {
        sub_4636C(v12);
      }
    }
  }
}

void sub_3FAF34(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FAF4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 240)) {
    return 1;
  }
  sub_8050C(&v72, a1);
  sub_80550(&v69, a1);
  sub_7D630(v67, a1);
  CFRetain(@"PlayAndRecord");
  sub_14E44(&v63, @"PlayAndRecord");
  if (!v63)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_20C54((uint64_t)&v64, (const __CFString *)v63);
  uint64_t v3 = v74;
  if ((v74 & 0x80u) == 0) {
    size_t v4 = v74;
  }
  else {
    size_t v4 = v73;
  }
  uint64_t v5 = v66;
  if ((v66 & 0x80u) != 0) {
    uint64_t v5 = v65;
  }
  if (v4 != v5) {
    goto LABEL_20;
  }
  if ((v66 & 0x80u) == 0) {
    BOOL v6 = (unsigned __int8 *)&v64;
  }
  else {
    BOOL v6 = (unsigned __int8 *)v64;
  }
  if ((v74 & 0x80) == 0)
  {
    if (v74)
    {
      uint64_t v7 = &v72;
      while (*(unsigned __int8 *)v7 == *v6)
      {
        uint64_t v7 = (void **)((char *)v7 + 1);
        ++v6;
        if (!--v3) {
          goto LABEL_37;
        }
      }
      goto LABEL_20;
    }
LABEL_37:
    char v14 = 1;
    goto LABEL_38;
  }
  if (!memcmp(v72, v6, v73)) {
    goto LABEL_37;
  }
LABEL_20:
  CFRetain(@"Record");
  sub_14E44(&v60, @"Record");
  if (!v60)
  {
    unint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
  }
  sub_20C54((uint64_t)v61, (const __CFString *)v60);
  uint64_t v8 = v74;
  if ((v74 & 0x80u) == 0) {
    size_t v9 = v74;
  }
  else {
    size_t v9 = v73;
  }
  unint64_t v10 = v62;
  unsigned __int8 v11 = v62;
  if ((v62 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)v61[1];
  }
  if (v9 != v10)
  {
LABEL_36:
    BOOL v15 = 0;
LABEL_67:
    if ((v11 & 0x80) != 0) {
      operator delete(v61[0]);
    }
    if (v60) {
      CFRelease(v60);
    }
    goto LABEL_71;
  }
  if ((v62 & 0x80u) == 0) {
    uint64_t v12 = v61;
  }
  else {
    uint64_t v12 = (void **)v61[0];
  }
  if ((v74 & 0x80) != 0)
  {
    char v14 = 0;
    BOOL v15 = 0;
    if (memcmp(v72, v12, v73)) {
      goto LABEL_67;
    }
  }
  else
  {
    if (v74)
    {
      __n128 v13 = &v72;
      while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v12)
      {
        __n128 v13 = (void **)((char *)v13 + 1);
        uint64_t v12 = (void **)((char *)v12 + 1);
        if (!--v8) {
          goto LABEL_35;
        }
      }
      goto LABEL_36;
    }
LABEL_35:
    char v14 = 0;
  }
LABEL_38:
  CFRetain(@"SoundRecognition");
  sub_14E44(&cf, @"SoundRecognition");
  if (!cf)
  {
    __int32 v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
  }
  sub_20C54((uint64_t)__p, (const __CFString *)cf);
  if ((v71 & 0x80u) == 0) {
    size_t v16 = v71;
  }
  else {
    size_t v16 = v70;
  }
  unint64_t v17 = v59;
  int v18 = (char)v59;
  if ((v59 & 0x80u) != 0) {
    unint64_t v17 = (unint64_t)__p[1];
  }
  if (v16 != v17)
  {
    BOOL v15 = 0;
    if (((char)v59 & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  if ((v59 & 0x80u) == 0) {
    int v19 = __p;
  }
  else {
    int v19 = (void **)__p[0];
  }
  if ((v71 & 0x80) != 0)
  {
    BOOL v15 = memcmp(v69, v19, v70) == 0;
    goto LABEL_62;
  }
  if (v71)
  {
    uint64_t v20 = v71 - 1;
    int v21 = &v69;
    do
    {
      int v23 = *(unsigned __int8 *)v21;
      int v21 = (void **)((char *)v21 + 1);
      int v22 = v23;
      int v25 = *(unsigned __int8 *)v19;
      int v19 = (void **)((char *)v19 + 1);
      int v24 = v25;
      BOOL v26 = v20-- != 0;
      char v27 = v26;
      BOOL v15 = v22 == v24;
    }
    while (v22 == v24 && (v27 & 1) != 0);
LABEL_62:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_63;
    }
LABEL_58:
    operator delete(__p[0]);
    goto LABEL_63;
  }
  BOOL v15 = 1;
  if ((char)v59 < 0) {
    goto LABEL_58;
  }
LABEL_63:
  if (cf) {
    CFRelease(cf);
  }
  if ((v14 & 1) == 0)
  {
    unsigned __int8 v11 = v62;
    goto LABEL_67;
  }
LABEL_71:
  if ((char)v66 < 0) {
    operator delete(v64);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v15) {
    goto LABEL_113;
  }
  CFRetain(@"InputInjection");
  sub_14E44(__p, @"InputInjection");
  if (!__p[0])
  {
    uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
  }
  sub_20C54((uint64_t)&v64, (const __CFString *)__p[0]);
  if ((v74 & 0x80u) == 0) {
    size_t v28 = v74;
  }
  else {
    size_t v28 = v73;
  }
  uint64_t v29 = v66;
  int v30 = (char)v66;
  if ((v66 & 0x80u) != 0) {
    uint64_t v29 = v65;
  }
  if (v28 == v29)
  {
    if ((v66 & 0x80u) == 0) {
      __int16 v31 = (unsigned __int8 *)&v64;
    }
    else {
      __int16 v31 = (unsigned __int8 *)v64;
    }
    if ((v74 & 0x80) != 0)
    {
      BOOL v39 = memcmp(v72, v31, v73) == 0;
      goto LABEL_98;
    }
    if (v74)
    {
      uint64_t v32 = v74 - 1;
      int v33 = &v72;
      do
      {
        int v35 = *(unsigned __int8 *)v33;
        int v33 = (void **)((char *)v33 + 1);
        int v34 = v35;
        int v37 = *v31++;
        int v36 = v37;
        BOOL v26 = v32-- != 0;
        char v38 = v26;
        BOOL v39 = v34 == v36;
      }
      while (v34 == v36 && (v38 & 1) != 0);
LABEL_98:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_99;
      }
      goto LABEL_96;
    }
    BOOL v39 = 1;
    if (((char)v66 & 0x80000000) == 0) {
      goto LABEL_99;
    }
LABEL_96:
    operator delete(v64);
    goto LABEL_99;
  }
  BOOL v39 = 0;
  if ((char)v66 < 0) {
    goto LABEL_96;
  }
LABEL_99:
  if (__p[0]) {
    CFRelease(__p[0]);
  }
  if (!v39)
  {
    size_t v40 = v74;
    if ((v74 & 0x80u) != 0) {
      size_t v40 = v73;
    }
    if (v40 == 9)
    {
      unint64_t v41 = &v72;
      if ((v74 & 0x80u) != 0) {
        unint64_t v41 = (void **)v72;
      }
      unint64_t v42 = *v41;
      int v43 = *((unsigned __int8 *)v41 + 8);
      if (v42 == (void *)0x65764F6563696F56 && v43 == 114)
      {
        uint64_t v1 = _os_feature_enabled_impl();
        goto LABEL_114;
      }
    }
    if ((*(void *)(a1 + 232) & 0xFF00000000) == 0 || !*(void *)(a1 + 232))
    {
      unint64_t v46 = v68;
      if ((v68 & 0x80u) != 0) {
        unint64_t v46 = (unint64_t)v67[1];
      }
      if (v46 != 21) {
        goto LABEL_135;
      }
      long long v47 = v67;
      if ((v68 & 0x80u) != 0) {
        long long v47 = (void **)v67[0];
      }
      unint64_t v48 = *v47;
      long long v49 = v47[1];
      uint64_t v50 = *(uint64_t *)((char *)v47 + 13);
      BOOL v51 = v48 == (void *)0x6C7070612E6D6F63 && v49 == (void *)0x656C69626F6D2E65;
      BOOL v52 = v51 && v50 == 0x6369676F6C656C69;
      if (!v52 || (_os_feature_enabled_impl() & 1) == 0)
      {
LABEL_135:
        uint64_t v1 = 0;
        goto LABEL_114;
      }
    }
  }
LABEL_113:
  uint64_t v1 = 1;
LABEL_114:
  if ((char)v68 < 0) {
    operator delete(v67[0]);
  }
  if ((char)v71 < 0) {
    operator delete(v69);
  }
  if ((char)v74 < 0) {
    operator delete(v72);
  }
  return v1;
}

void sub_3FB560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  if (*(char *)(v36 - 33) < 0) {
    operator delete(*(void **)(v36 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FB674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (!sub_241A50(1885892674, *a4, a4[1])) {
    return 1;
  }
  int v6 = *(_DWORD *)(a2 + 144);
  if (v6 == 1885433888) {
    return 1;
  }
  if (v6 == 1885892674)
  {
    uint64_t result = sub_242430(a2, (uint64_t)*a4, (uint64_t)a4[1]);
    if (result)
    {
      return sub_2422F8(a2);
    }
  }
  else
  {
    uint64_t v8 = *a4;
    size_t v9 = a4[1];
    return sub_241AEC(1701868400, v8, v9);
  }
  return result;
}

void sub_3FB734(uint64_t a1, void *a2)
{
  *a2 = off_63D518;
}

void *sub_3FB754()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D518;
  return result;
}

void sub_3FB78C()
{
}

uint64_t sub_3FB7A4(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  uint64_t v5 = sub_298DA4();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 224))(v5)) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_661540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_661540))
  {
    uint64_t v31 = 0x706E756C63726E67;
    uint64_t v32 = off_63D5A8;
    int v34 = &v32;
    uint64_t v35 = 0x706C656F63736176;
    v36[0] = off_63D5F0;
    void v36[3] = v36;
    v36[4] = 0x706C656F63766D20;
    v37[0] = off_63D638;
    void v37[3] = v37;
    v37[4] = 0x706C656F63766D67;
    v38[0] = off_63D680;
    void v38[3] = v38;
    v38[4] = 0x706C656F63706172;
    v39[0] = off_63D6C8;
    void v39[3] = v39;
    v39[4] = 0x7068704263736176;
    v40[0] = off_63D710;
    v40[3] = v40;
    v40[4] = 0x7068704263666D61;
    v41[0] = off_63D758;
    v41[3] = v41;
    v41[4] = 0x7061707363736176;
    v42[0] = off_63D7A0;
    v42[3] = v42;
    v42[4] = 0x7061706163736176;
    v43[0] = off_63D7E8;
    void v43[3] = v43;
    v43[4] = 0x7068646D63736176;
    v44[0] = off_63D830;
    void v44[3] = v44;
    v44[4] = 0x7075696F63736176;
    v45[0] = off_63D878;
    uint64_t v45[3] = v45;
    v45[4] = 0x7073706B63736176;
    v46[0] = off_63D8C0;
    void v46[3] = v46;
    v46[4] = 0x7061707363706172;
    v47[0] = off_63D908;
    v47[3] = v47;
    v47[4] = 0x7061706163706172;
    v48[0] = off_63D950;
    v48[3] = v48;
    v48[4] = 0x7068646D63706172;
    v49[0] = off_63D998;
    v49[3] = v49;
    v49[4] = 0x7075696F63706172;
    v50[0] = off_63D9E0;
    v50[3] = v50;
    v50[4] = 0x7068704263706172;
    v51[0] = off_63DA28;
    v51[3] = v51;
    int v51[4] = 0x7073706B63706172;
    v52[0] = off_63DA70;
    v52[3] = v52;
    sub_3FBDA0((unsigned int *)&v31, 18);
    for (uint64_t i = 688; i != -32; i -= 40)
      sub_FB930((uint64_t *)((char *)&v31 + i));
    __cxa_guard_release(&qword_661540);
  }
  for (uint64_t j = *a2; ; ++j)
  {
    uint64_t v7 = *j;
    if (!*(_DWORD *)(*j + 4) && *(_DWORD *)v7 == 1986291046) {
      break;
    }
  }
  if (!*(void *)(v7 + 32)) {
    return 0;
  }
  sub_43F38(&v29, (uint64_t *)(*(void *)(v7 + 24) + 32), "", 184);
  if (!v29) {
    goto LABEL_43;
  }
  uint64_t v8 = qword_661530;
  if (!qword_661530) {
    goto LABEL_43;
  }
  unsigned int v9 = *(_DWORD *)(v29 + 144);
  unsigned int v10 = *a3;
  unsigned __int8 v11 = &qword_661530;
  do
  {
    unsigned int v12 = *(_DWORD *)(v8 + 32);
    BOOL v13 = v12 == v10;
    if (v12 >= v10) {
      char v14 = 1;
    }
    else {
      char v14 = -1;
    }
    if (v13)
    {
      unsigned int v15 = *(_DWORD *)(v8 + 36);
      BOOL v16 = v15 == v9;
      char v14 = v15 >= v9 ? 1 : -1;
      if (v16) {
        char v14 = 0;
      }
    }
    BOOL v17 = (v14 & 0x80) == 0;
    if (v14 < 0) {
      int v18 = (uint64_t *)(v8 + 8);
    }
    else {
      int v18 = (uint64_t *)v8;
    }
    if (v17) {
      unsigned __int8 v11 = (uint64_t *)v8;
    }
    uint64_t v8 = *v18;
  }
  while (*v18);
  if (v11 == &qword_661530) {
    goto LABEL_43;
  }
  unsigned int v19 = *((_DWORD *)v11 + 8);
  BOOL v20 = v10 == v19;
  if (v10 >= v19) {
    char v21 = 1;
  }
  else {
    char v21 = -1;
  }
  if (v20)
  {
    unsigned int v22 = *((_DWORD *)v11 + 9);
    BOOL v23 = v9 >= v22;
    BOOL v24 = v9 == v22;
    char v25 = -1;
    if (v23) {
      char v25 = 1;
    }
    if (v24) {
      char v21 = 0;
    }
    else {
      char v21 = v25;
    }
  }
  if (v21 < 0)
  {
LABEL_43:
    uint64_t v26 = 0;
  }
  else
  {
    sub_1065C4((uint64_t)&v31, (uint64_t)(v11 + 5));
    if (!v33) {
      sub_56964();
    }
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 48))(v33);
    sub_FB930(&v31);
  }
  if (v30) {
    sub_4636C(v30);
  }
  return v26;
}

void sub_3FBD44(_Unwind_Exception *a1)
{
  for (uint64_t i = 688; i != -32; i -= 40)
    sub_FB930((void *)(v1 + i));
  __cxa_guard_abort(&qword_661540);
  _Unwind_Resume(a1);
}

void sub_3FBDA0(unsigned int *a1, uint64_t a2)
{
  qword_661538 = 0;
  qword_661530 = 0;
  qword_661528 = (uint64_t)&qword_661530;
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = 0;
    size_t v4 = &a1[10 * a2];
    uint64_t v5 = &qword_661530;
    while (v5 != &qword_661530)
    {
      int v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        uint64_t v8 = &qword_661530;
        do
        {
          uint64_t v7 = (uint64_t *)v8[2];
          BOOL v11 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }
        while (v11);
      }
      unsigned int v9 = *((_DWORD *)v7 + 8);
      unsigned int v10 = *v2;
      BOOL v11 = v9 == *v2;
      if (v9 >= *v2) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unsigned int v13 = *((_DWORD *)v7 + 9);
        unsigned int v14 = v2[1];
        BOOL v15 = v13 == v14;
        char v12 = v13 >= v14 ? 1 : -1;
        if (v15) {
          char v12 = 0;
        }
      }
      if (v12 < 0) {
        goto LABEL_41;
      }
      if (v3)
      {
        unsigned int v16 = v2[1];
        BOOL v17 = &qword_661530;
        while (1)
        {
          while (1)
          {
            int v18 = (uint64_t *)v3;
            unsigned int v19 = *(_DWORD *)(v3 + 32);
            if (v10 == v19) {
              break;
            }
            if (v10 >= v19)
            {
              if (v19 >= v10) {
                char v23 = 1;
              }
              else {
                char v23 = -1;
              }
              if ((v23 & 0x80) == 0) {
                goto LABEL_47;
              }
              goto LABEL_39;
            }
LABEL_33:
            uint64_t v3 = *v18;
            BOOL v17 = v18;
            if (!*v18) {
              goto LABEL_48;
            }
          }
          unsigned int v20 = *((_DWORD *)v18 + 9);
          if (v16 < v20) {
            goto LABEL_33;
          }
          BOOL v21 = v20 == v16;
          if (v20 >= v16) {
            char v22 = 1;
          }
          else {
            char v22 = -1;
          }
          if (v21) {
            char v22 = 0;
          }
          if ((v22 & 0x80) == 0) {
            goto LABEL_47;
          }
LABEL_39:
          BOOL v17 = v18 + 1;
          uint64_t v3 = v18[1];
          if (!v3) {
            goto LABEL_48;
          }
        }
      }
      int v18 = &qword_661530;
      BOOL v17 = &qword_661530;
LABEL_47:
      if (!*v17)
      {
LABEL_48:
        BOOL v24 = (uint64_t *)operator new(0x48uLL);
        v25[0] = v24;
        v25[1] = &qword_661530;
        char v26 = 0;
        v24[4] = *(void *)v2;
        sub_1065C4((uint64_t)(v24 + 5), (uint64_t)(v2 + 2));
        char v26 = 1;
        uint64_t *v24 = 0;
        v24[1] = 0;
        void v24[2] = (uint64_t)v18;
        *BOOL v17 = (uint64_t)v24;
        if (*(void *)qword_661528)
        {
          qword_661528 = *(void *)qword_661528;
          BOOL v24 = (uint64_t *)*v17;
        }
        sub_46D00((uint64_t *)qword_661530, v24);
        ++qword_661538;
        v25[0] = 0;
        sub_3FC024((uint64_t)v25);
      }
      v2 += 10;
      if (v2 == v4) {
        return;
      }
      uint64_t v5 = (uint64_t *)qword_661528;
      uint64_t v3 = qword_661530;
    }
    uint64_t v7 = &qword_661530;
LABEL_41:
    if (v3) {
      int v18 = v7;
    }
    else {
      int v18 = &qword_661530;
    }
    if (v3) {
      BOOL v17 = v7 + 1;
    }
    else {
      BOOL v17 = &qword_661530;
    }
    goto LABEL_47;
  }
}

void sub_3FBFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3FC024((uint64_t)va);
  sub_3FBFD0((void *)qword_661530);
  _Unwind_Resume(a1);
}

void sub_3FBFD0(void *a1)
{
  if (a1)
  {
    sub_3FBFD0(*a1);
    sub_3FBFD0(a1[1]);
    sub_FB930(a1 + 5);
    operator delete(a1);
  }
}

void sub_3FC024(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_FB930(v1 + 5);
    }
    operator delete(v1);
  }
}

void sub_3FC088(uint64_t a1, void *a2)
{
  *a2 = off_63DA70;
}

void *sub_3FC0A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DA70;
  return result;
}

void sub_3FC0E0()
{
}

uint64_t sub_3FC0F8()
{
  return 1;
}

void sub_3FC108(uint64_t a1, void *a2)
{
  *a2 = off_63DA28;
}

void *sub_3FC128()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DA28;
  return result;
}

void sub_3FC160()
{
}

uint64_t sub_3FC178()
{
  return 1;
}

void sub_3FC188(uint64_t a1, void *a2)
{
  *a2 = off_63D9E0;
}

void *sub_3FC1A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D9E0;
  return result;
}

void sub_3FC1E0()
{
}

uint64_t sub_3FC1F8()
{
  return 1;
}

void sub_3FC208(uint64_t a1, void *a2)
{
  *a2 = off_63D998;
}

void *sub_3FC228()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D998;
  return result;
}

void sub_3FC260()
{
}

uint64_t sub_3FC278()
{
  return 1;
}

void sub_3FC288(uint64_t a1, void *a2)
{
  *a2 = off_63D950;
}

void *sub_3FC2A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D950;
  return result;
}

void sub_3FC2E0()
{
}

uint64_t sub_3FC2F8()
{
  return 1;
}

void sub_3FC308(uint64_t a1, void *a2)
{
  *a2 = off_63D908;
}

void *sub_3FC328()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D908;
  return result;
}

void sub_3FC360()
{
}

void sub_3FC384(uint64_t a1, void *a2)
{
  *a2 = off_63D8C0;
}

void *sub_3FC3A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D8C0;
  return result;
}

void sub_3FC3DC()
{
}

uint64_t sub_3FC3F4()
{
  return 1;
}

void sub_3FC404(uint64_t a1, void *a2)
{
  *a2 = off_63D878;
}

void *sub_3FC424()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D878;
  return result;
}

void sub_3FC45C()
{
}

uint64_t sub_3FC474()
{
  return 1;
}

void sub_3FC484(uint64_t a1, void *a2)
{
  *a2 = off_63D830;
}

void *sub_3FC4A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D830;
  return result;
}

void sub_3FC4DC()
{
}

uint64_t sub_3FC4F4()
{
  return 1;
}

void sub_3FC504(uint64_t a1, void *a2)
{
  *a2 = off_63D7E8;
}

void *sub_3FC524()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D7E8;
  return result;
}

void sub_3FC55C()
{
}

uint64_t sub_3FC574()
{
  return 1;
}

void sub_3FC584(uint64_t a1, void *a2)
{
  *a2 = off_63D7A0;
}

void *sub_3FC5A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D7A0;
  return result;
}

void sub_3FC5DC()
{
}

uint64_t sub_3FC5F4()
{
  return 1;
}

void sub_3FC604(uint64_t a1, void *a2)
{
  *a2 = off_63D758;
}

void *sub_3FC624()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D758;
  return result;
}

void sub_3FC65C()
{
}

uint64_t sub_3FC674()
{
  return 1;
}

void sub_3FC684(uint64_t a1, void *a2)
{
  *a2 = off_63D710;
}

void *sub_3FC6A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D710;
  return result;
}

void sub_3FC6DC()
{
}

BOOL sub_3FC6F4()
{
  uint64_t v0 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96))(v0) != 0;
}

void sub_3FC740(uint64_t a1, void *a2)
{
  *a2 = off_63D6C8;
}

void *sub_3FC760()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D6C8;
  return result;
}

void sub_3FC798()
{
}

BOOL sub_3FC7B0()
{
  uint64_t v0 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96))(v0) != 0;
}

void sub_3FC7FC(uint64_t a1, void *a2)
{
  *a2 = off_63D680;
}

void *sub_3FC81C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D680;
  return result;
}

void sub_3FC854()
{
}

BOOL sub_3FC86C()
{
  uint64_t v0 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96))(v0) != 0;
}

void sub_3FC8B8(uint64_t a1, void *a2)
{
  *a2 = off_63D638;
}

void *sub_3FC8D8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D638;
  return result;
}

void sub_3FC910()
{
}

BOOL sub_3FC928()
{
  uint64_t v0 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 96))(v0) != 0;
}

void sub_3FC974(uint64_t a1, void *a2)
{
  *a2 = off_63D5F0;
}

void *sub_3FC994()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D5F0;
  return result;
}

void sub_3FC9CC()
{
}

BOOL sub_3FC9E4()
{
  uint64_t v0 = (unsigned int (***)(void))sub_298DA4();
  return (**v0)(v0) == 1;
}

void sub_3FCA30(uint64_t a1, void *a2)
{
  *a2 = off_63D5A8;
}

void *sub_3FCA50()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D5A8;
  return result;
}

void sub_3FCA88()
{
}

void sub_3FCAA8(uint64_t a1, void *a2)
{
  *a2 = off_63D560;
}

void *sub_3FCAC8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63D560;
  return result;
}

void sub_3FCB00()
{
}

uint64_t sub_3FCB18(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (*a4 == 1667657057)
  {
    size_t v4 = (int *)qword_661508;
    if (qword_661508 != *(void *)algn_661510)
    {
      do
      {
        if (*(void *)(a2 + 8) == a2)
        {
          uint64_t result = 0;
        }
        else
        {
          int v5 = *v4;
          uint64_t v6 = *(void *)(a2 + 8);
          do
          {
            BOOL v7 = *(_DWORD *)(v6 + 16) == v5 || *(_DWORD *)(v6 + 20) == v5;
            uint64_t result = v7;
            if (v7) {
              break;
            }
            uint64_t v6 = *(void *)(v6 + 8);
          }
          while (v6 != a2);
        }
        if (result) {
          break;
        }
        ++v4;
      }
      while (v4 != *(int **)algn_661510);
      return result;
    }
    return 0;
  }
  unsigned int v9 = (int *)qword_6614E8;
  if (qword_6614E8 == *(void *)algn_6614F0) {
    return 0;
  }
  do
  {
    if (*(void *)(a2 + 8) == a2)
    {
      uint64_t result = 0;
    }
    else
    {
      int v10 = *v9;
      uint64_t v11 = *(void *)(a2 + 8);
      do
      {
        BOOL v12 = *(_DWORD *)(v11 + 16) == v10 || *(_DWORD *)(v11 + 20) == v10;
        uint64_t result = v12;
        if (v12) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
      }
      while (v11 != a2);
    }
    if (result) {
      break;
    }
    ++v9;
  }
  while (v9 != *(int **)algn_6614F0);
  return result;
}

void sub_3FCC04(uint64_t a1, void *a2)
{
  *a2 = off_63DAB8;
}

void *sub_3FCC24()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DAB8;
  return result;
}

void sub_3FCC5C()
{
}

uint64_t sub_3FCC74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0;
  }
  do
  {
    BOOL v3 = *(_DWORD *)(v2 + 16) == 1886216809 || *(_DWORD *)(v2 + 20) == 1886216809;
    uint64_t result = v3;
    if (v3) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != a2);
  return result;
}

void sub_3FCCBC(uint64_t a1, void *a2)
{
  *a2 = off_63DB00;
}

void *sub_3FCCDC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DB00;
  return result;
}

void sub_3FCD14()
{
}

uint64_t sub_3FCD2C(uint64_t result, int a2)
{
  if (a2 <= 1885696610)
  {
    if (a2 == 1752200307 || a2 == 1819309171) {
      goto LABEL_12;
    }
    if (a2 == 1836346212)
    {
      BOOL v3 = off_63DB90;
LABEL_14:
      *(void *)uint64_t result = v3;
      goto LABEL_15;
    }
LABEL_13:
    BOOL v3 = off_63DBD8;
    goto LABEL_14;
  }
  if (a2 > 1936290408)
  {
    if (a2 != 1936614497)
    {
      int v2 = 1936290409;
LABEL_11:
      if (a2 == v2) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
  }
  else if (a2 != 1885696611)
  {
    int v2 = 1935962992;
    goto LABEL_11;
  }
LABEL_12:
  *(void *)uint64_t result = off_63DB48;
  *(_DWORD *)(result + 8) = a2;
LABEL_15:
  *(void *)(result + 24) = result;
  return result;
}

uint64_t sub_3FCE1C()
{
  return 0;
}

void sub_3FCE2C(uint64_t a1, void *a2)
{
  *a2 = off_63DBD8;
}

void *sub_3FCE4C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DBD8;
  return result;
}

void sub_3FCE84()
{
}

BOOL sub_3FCE9C(uint64_t a1, uint64_t **a2, int *a3)
{
  int v3 = *a3;
  if (*a3 > 1668313714)
  {
    if (v3 == 1668703084 || v3 == 1668576377) {
      return sub_241A50(1886216809, *a2, a2[1]);
    }
    if (v3 != 1668313715) {
      return 0;
    }
  }
  else if (v3 != 1668301427 && v3 != 1668309362 && v3 != 1668313666)
  {
    return 0;
  }
  int v7 = a3[1];
  if (v7 > 1919776354)
  {
    if (v7 > 1987081832)
    {
      if (v7 == 1987081839) {
        return sub_241A50(1886216809, *a2, a2[1]);
      }
      unsigned __int16 v9 = 30313;
    }
    else
    {
      if (v7 == 1919776355) {
        return sub_241A50(1886216809, *a2, a2[1]);
      }
      unsigned __int16 v9 = 26467;
    }
    int v8 = v9 | 0x76700000;
LABEL_27:
    if (v7 != v8) {
      return 0;
    }
    return sub_241A50(1886216809, *a2, a2[1]);
  }
  if (v7 > 1768779618)
  {
    if (v7 == 1768779619) {
      return sub_241A50(1886216809, *a2, a2[1]);
    }
    int v8 = 1768781411;
    goto LABEL_27;
  }
  if (v7 != 1735222132)
  {
    int v8 = 1768057203;
    goto LABEL_27;
  }
  return sub_241A50(1886216809, *a2, a2[1]);
}

void sub_3FCFEC(uint64_t a1, void *a2)
{
  *a2 = off_63DB90;
}

void *sub_3FD00C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DB90;
  return result;
}

void sub_3FD044()
{
}

BOOL sub_3FD05C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  BOOL v2 = 1;
  if (v1 > 1935962991)
  {
    BOOL v3 = v1 == 1936290409;
    int v4 = 1935962992;
  }
  else
  {
    BOOL v3 = v1 == 1819309171;
    int v4 = 1885696611;
  }
  if (v3 || v1 == v4)
  {
    uint64_t v6 = (void *)sub_F820C();
    CFStringRef v8 = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
    char v9 = 1;
    BOOL v2 = sub_F832C(v6, &v8) != 0;
    sub_72924((uint64_t)&v8);
  }
  return v2;
}

void sub_3FD114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3FD130(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_63DB48;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *sub_3FD158(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = off_63DB48;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_3FD1A4()
{
}

uint64_t (***sub_3FD1BC(uint64_t (***result)(), int a2))()
{
  if (a2 > 1885696610)
  {
    if (a2 > 1936290408)
    {
      if (a2 != 1936614497)
      {
        int v2 = 1936290409;
LABEL_11:
        if (a2 == v2) {
          goto LABEL_12;
        }
LABEL_14:
        BOOL v3 = off_63DCB0;
        goto LABEL_13;
      }
    }
    else if (a2 != 1885696611)
    {
      int v2 = 1935962992;
      goto LABEL_11;
    }
LABEL_12:
    BOOL v3 = off_63DC20;
    goto LABEL_13;
  }
  if (a2 == 1752200307 || a2 == 1819309171) {
    goto LABEL_12;
  }
  if (a2 != 1836346212) {
    goto LABEL_14;
  }
  BOOL v3 = off_63DC68;
LABEL_13:
  *uint64_t result = v3;
  result[3] = (uint64_t (**)())result;
  return result;
}

uint64_t sub_3FD2A4()
{
  return 0;
}

void sub_3FD2B4(uint64_t a1, void *a2)
{
  *a2 = off_63DCB0;
}

void *sub_3FD2D4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DCB0;
  return result;
}

void sub_3FD30C()
{
}

uint64_t sub_3FD324(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  BOOL v17 = 0;
  uint64_t v18 = 0;
  unsigned int v16 = (uint64_t *)&v17;
  BOOL v3 = *a3;
  int v4 = a3[1];
  if (*a3 == v4) {
    goto LABEL_5;
  }
  while (1)
  {
    uint64_t v6 = *v3;
    if (!*(_DWORD *)(*v3 + 4) && *(_DWORD *)v6 == 1986291046) {
      break;
    }
    if (++v3 == v4) {
      goto LABEL_5;
    }
  }
  char v25 = off_628578;
  char v27 = &v25;
  sub_241504((uint64_t)&v23, (void *)(v6 + 16), (uint64_t)&v25);
  sub_6AFD4(&v25);
  char v9 = v23;
  if (v23 != v24)
  {
    do
    {
      sub_549A4(&v19, v9 + 4, "", 1043);
      sub_2503E4(&v21, v19);
      if (v20) {
        sub_4636C(v20);
      }
      int v10 = v22;
      if (v22)
      {
        sub_144B34(&v16, (unint64_t *)&v21, &v21);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          BOOL v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void **)v9[2];
          BOOL v15 = *v12 == v9;
          char v9 = v12;
        }
        while (!v15);
      }
      char v9 = v12;
    }
    while (v12 != v24);
  }
  sub_10E118(v24[0]);
  if (!v18)
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  else
  {
    sub_549A4((uint64_t *)&v25, v16 + 4, "", 280);
    uint64_t v13 = *(void *)(a2 + 8);
    if (v13 == a2)
    {
      uint64_t v7 = 0;
    }
    else
    {
      int v14 = *((_DWORD *)v25 + 36);
      do
      {
        BOOL v15 = *(_DWORD *)(v13 + 16) == v14 || *(_DWORD *)(v13 + 20) == v14;
        uint64_t v7 = v15;
        if (v15) {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != a2);
    }
    if (v26) {
      sub_4636C(v26);
    }
  }
  sub_10E118(v17);
  return v7;
}

void sub_3FD534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_3FD594(uint64_t a1, void *a2)
{
  *a2 = off_63DC68;
}

void *sub_3FD5B4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DC68;
  return result;
}

void sub_3FD5EC()
{
}

uint64_t sub_3FD604(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0;
  }
  do
  {
    BOOL v3 = *(_DWORD *)(v2 + 16) == 1886614640 || *(_DWORD *)(v2 + 20) == 1886614640;
    uint64_t result = v3;
    if (v3) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != a2);
  return result;
}

void sub_3FD64C(uint64_t a1, void *a2)
{
  *a2 = off_63DC20;
}

void *sub_3FD66C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63DC20;
  return result;
}

void sub_3FD6A4()
{
}

uint64_t sub_3FD6BC(int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vdprintf(*a1, a2, &a9);
}

uint64_t sub_3FD6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  for (uint64_t i = 16; i != 48; i += 8)
  {
    int v10 = *(const void **)(a1 + i);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + i) = 0;
    }
  }
  uint64_t v11 = *(int **)(a1 + 48);
  if (v11)
  {
    if (*v11 != -1)
    {
      sub_3FD6BC(*(int **)(a1 + 48), "*** done.\n", a3, a4, a5, a6, a7, a8, v13);
      close(*v11);
      int *v11 = -1;
    }
    operator delete();
  }

  return sub_72924(a1);
}

uint64_t sub_3FD794()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_661550, memory_order_acquire) != -1)
  {
    BOOL v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&qword_661550, &v2, (void (__cdecl *)(void *))sub_3FD7FC);
  }
  return qword_661548;
}

void sub_3FD7FC()
{
}

uint64_t sub_3FD858(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFStringRef v6 = **(const __CFString ***)a2;
  if (v6 && CFStringHasPrefix(v6, @"/")) {
    CFStringRef v7 = &stru_642048;
  }
  else {
    CFStringRef v7 = *(const __CFString **)a1;
  }
  MutableCopy = CFStringCreateMutableCopy(0, 0, v7);
  uint64_t v9 = 0;
  CFMutableStringRef theString = MutableCopy;
  char v35 = 1;
  if (!MutableCopy) {
    goto LABEL_8;
  }
LABEL_6:
  CFStringAppend(MutableCopy, @"/");
  if (theString) {
    CFStringAppend(theString, **(CFStringRef **)(a2 + v9));
  }
LABEL_8:
  while (v9 != 16)
  {
    MutableCopy = theString;
    v9 += 8;
    if (theString) {
      goto LABEL_6;
    }
  }
  size_t v10 = strlen(off_63DCE8[a3]);
  CFStringRef suffix = CFStringCreateWithBytesNoCopy(kCFAllocatorDefault, (const UInt8 *)off_63DCE8[a3], v10, 0x600u, 0, kCFAllocatorNull);
  if (theString)
  {
    CFStringRef v11 = theString;
    if (!CFStringHasSuffix(theString, suffix))
    {
      CFStringAppend(theString, suffix);
      CFStringRef v11 = theString;
    }
  }
  else
  {
    CFStringRef v11 = 0;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 512);
  CFURLRef v13 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v11, kCFURLPOSIXPathStyle, 0);
  if (v13
    && (int v14 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v13), CFRelease(v13), v14)
    && (CFReadStreamOpen(v14),
        CFDictionaryRef v15 = (const __CFDictionary *)CFPropertyListCreateWithStream(kCFAllocatorDefault, v14, 0, 0, 0, 0),
        CFReadStreamClose(v14),
        CFRelease(v14),
        v15))
  {
    CFRelease(Mutable);
    unsigned int v16 = *(const void ***)(a2 + 16);
    BOOL v17 = *v16;
    if (a3)
    {
      CFMutableStringRef key = (CFMutableStringRef)*v16;
    }
    else
    {
      uint64_t v19 = 0;
      unsigned int v20 = 0;
      uint64_t v21 = 0;
      CFMutableStringRef key = theString;
      uint64_t v36 = 0;
      do
      {
        char v22 = off_63DD08[v19];
        if (!CFDictionaryContainsKey(v15, v22))
        {
          if (!v21)
          {
            CFIndex Count = CFDictionaryGetCount(v15);
            unsigned int v20 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 2, v15);
            uint64_t v36 = v20;
          }
          CFDictionaryAddValue(v20, v22, v17);
          uint64_t v21 = v20;
        }
        ++v19;
      }
      while (v19 != 2);
      if (v20) {
        CFRelease(v15);
      }
      else {
        unsigned int v20 = v15;
      }
      CFDictionaryRef v15 = v20;
    }
    int Value = CFDictionaryGetValue(v15, @"name");
    uint64_t v25 = a3;
    if (Value)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(Value) && CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8 * v25 + 16)) >= 1) {
        operator new[]();
      }
    }
    uint64_t v27 = a1 + 8 * v25;
    uint64_t v29 = *(__CFDictionary **)(v27 + 16);
    size_t v28 = (const __CFString **)(v27 + 16);
    CFDictionarySetValue(v29, key, v15);
    uint64_t v30 = *(void *)(a1 + 48);
    if (v30) {
      sub_3FDD20(*v28, "@@ Strips Nov 10 2024 03:42:45", v30);
    }
    uint64_t v18 = 0;
  }
  else
  {
    if (Mutable)
    {
      CFStringAppend(Mutable, @"Error loading plist file ");
      CFStringAppend(Mutable, v11);
      CFStringAppend(Mutable, @"\n");
    }
    CFRelease(Mutable);
    CFDictionaryRef v15 = 0;
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  if (suffix) {
    CFRelease(suffix);
  }
  if (v15) {
    CFRelease(v15);
  }
  sub_E2A54((uint64_t)&theString);
  return v18;
}

void sub_3FDCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_3FE2F0((const void **)va1);
  sub_E2A54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3FDD20(const __CFString *a1, const char *a2, uint64_t a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (CFStringGetTypeID() == v6)
  {
    int v12 = *(_DWORD *)(a3 + 4);
    if (v12 >= 127) {
      size_t v13 = 127;
    }
    else {
      size_t v13 = v12;
    }
    valuePtr[(int)v13] = 0;
    if (v13) {
      memset(&valuePtr[(int)v13 - 1 - (v13 - 1)], 32, v13);
    }
    sub_3FD6BC((int *)a3, "%s", v13, v7, v8, v9, v10, v11, (char)valuePtr);
    CFGetRetainCount(a1);
    CFStringGetCStringPtr(a1, 0);
    sub_3FD6BC((int *)a3, "'%s' | String{%d} | \"%s\"\n", v14, v15, v16, v17, v18, v19, (char)a2);
  }
  else if (CFNumberGetTypeID() == v6)
  {
    CFNumberType Type = CFNumberGetType((CFNumberRef)a1);
    int v26 = *(_DWORD *)(a3 + 4);
    if (v26 >= 127) {
      size_t v27 = 127;
    }
    else {
      size_t v27 = v26;
    }
    valuePtr[(int)v27] = 0;
    if (v27) {
      memset(&valuePtr[(int)v27 - 1 - (v27 - 1)], 32, v27);
    }
    sub_3FD6BC((int *)a3, "%s", v27, v20, v21, v22, v23, v24, (char)valuePtr);
    if ((unint64_t)Type <= kCFNumberDoubleType)
    {
      if (((1 << Type) & 0x3060) != 0)
      {
        *(void *)int valuePtr = 0;
        CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
        CFGetRetainCount(a1);
        sub_3FD6BC((int *)a3, "'%s' | Number(float){%d} | %f\n", v64, v65, v66, v67, v68, v69, (char)a2);
        return;
      }
      if (((1 << Type) & 0x82) != 0)
      {
        valuePtr[0] = 0;
        CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
        CFGetRetainCount(a1);
        sub_3FD6BC((int *)a3, "'%s' | Number(SInt8){%d} | 0x%02x\n", v83, v84, v85, v86, v87, v88, (char)a2);
        return;
      }
      if (((1 << Type) & 0x104) != 0)
      {
        *(_WORD *)int valuePtr = 0;
        CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
        CFGetRetainCount(a1);
        sub_3FD6BC((int *)a3, "'%s' | Number(SInt16){%d} | 0x%04x\n", v28, v29, v30, v31, v32, v33, (char)a2);
        return;
      }
    }
    *(_DWORD *)int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, Type, valuePtr);
    CFGetRetainCount(a1);
    sub_3FD6BC((int *)a3, "'%s' | Number(SInt32){%d} | %-6d 0x%08x %c%c%c%c\n", v97, v98, v99, v100, v101, v102, (char)a2);
  }
  else if (CFDictionaryGetTypeID() == v6)
  {
    int v39 = *(_DWORD *)(a3 + 4);
    if (v39 >= 127) {
      size_t v40 = 127;
    }
    else {
      size_t v40 = v39;
    }
    valuePtr[(int)v40] = 0;
    if (v40) {
      memset(&valuePtr[(int)v40 - 1 - (v40 - 1)], 32, v40);
    }
    sub_3FD6BC((int *)a3, "%s", v40, v34, v35, v36, v37, v38, (char)valuePtr);
    CFGetRetainCount(a1);
    CFDictionaryGetCount((CFDictionaryRef)a1);
    sub_3FD6BC((int *)a3, "'%s' | Dictionary{%d} | %d key/value pairs\n", v41, v42, v43, v44, v45, v46, (char)a2);
    if (!strcmp("aupreset", a2)) {
      *(unsigned char *)(a3 + 8) = 1;
    }
    *(_DWORD *)(a3 + 4) += 4;
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)sub_3FE2A8, (void *)a3);
    *(_DWORD *)(a3 + 4) -= 4;
    *(unsigned char *)(a3 + 8) = 0;
  }
  else if (CFArrayGetTypeID() == v6)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
    int v53 = *(_DWORD *)(a3 + 4);
    if (v53 >= 127) {
      size_t v54 = 127;
    }
    else {
      size_t v54 = v53;
    }
    valuePtr[(int)v54] = 0;
    if (v54) {
      memset(&valuePtr[(int)v54 - 1 - (v54 - 1)], 32, v54);
    }
    sub_3FD6BC((int *)a3, "%s", v54, v47, v48, v49, v50, v51, (char)valuePtr);
    CFGetRetainCount(a1);
    sub_3FD6BC((int *)a3, "'%s' | Array{%d} | %d ordered objects\n", v55, v56, v57, v58, v59, v60, (char)a2);
    int v61 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v61 + 4;
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
        snprintf(valuePtr, 0x10uLL, "[%u]", i);
        sub_3FDD20(ValueAtIndex, valuePtr, a3);
      }
      int v61 = *(_DWORD *)(a3 + 4) - 4;
    }
    *(_DWORD *)(a3 + 4) = v61;
  }
  else if (CFDataGetTypeID() == v6)
  {
    int v75 = *(_DWORD *)(a3 + 4);
    if (v75 >= 127) {
      size_t v76 = 127;
    }
    else {
      size_t v76 = v75;
    }
    valuePtr[(int)v76] = 0;
    if (v76) {
      memset(&valuePtr[(int)v76 - 1 - (v76 - 1)], 32, v76);
    }
    sub_3FD6BC((int *)a3, "%s", v76, v70, v71, v72, v73, v74, (char)valuePtr);
    CFGetRetainCount(a1);
    CFDataGetLength((CFDataRef)a1);
    sub_3FD6BC((int *)a3, "'%s' | %sData{%d} | %d bytes\n", v77, v78, v79, v80, v81, v82, (char)a2);
  }
  else
  {
    int v89 = *(_DWORD *)(a3 + 4);
    if (v89 >= 127) {
      size_t v90 = 127;
    }
    else {
      size_t v90 = v89;
    }
    valuePtr[(int)v90] = 0;
    if (v90) {
      memset(&valuePtr[(int)v90 - 1 - (v90 - 1)], 32, v90);
    }
    sub_3FD6BC((int *)a3, "%s", v90, v70, v71, v72, v73, v74, (char)valuePtr);
    sub_3FD6BC((int *)a3, "'%s' | <unknown type id: %d)>\n", v91, v92, v93, v94, v95, v96, (char)a2);
  }
}

uint64_t sub_3FE2A8(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0);

  return sub_3FDD20(a2, CStringPtr, a3);
}

const void **sub_3FE2F0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL sub_3FE324(const __CFNumber *a1, void *a2)
{
  BOOL result = 0;
  if (a1)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      if (CFNumberGetValue(a1, kCFNumberSInt32Type, a2)) {
        return 1;
      }
    }
  }
  return result;
}

const void *sub_3FE38C(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t v3 = a1 + 8 * a3;
  uint64_t v5 = *(void *)(v3 + 16);
  int v4 = (const __CFDictionary **)(v3 + 16);
  if (!v5) {
    return 0;
  }
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a2, 0, kCFAllocatorNull);
  if (!v7) {
    return 0;
  }
  CFStringRef v8 = v7;
  CFDictionaryRef v9 = *v4;
  if (a3 - 1 > 2)
  {
    if (CFDictionaryGetCount(v9) > 0) {
      operator new[]();
    }
    CFRelease(v8);
    return 0;
  }
  int Value = CFDictionaryGetValue(v9, v8);
  if (!Value || (uint64_t v11 = Value, TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(v11)))
  {
    CFRelease(v8);
    size_t v13 = (NSObject **)sub_3FD794();
    if (v13)
    {
      uint64_t v14 = *v13;
      if (!*v13) {
        return 0;
      }
    }
    else
    {
      uint64_t v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "TuningPListMgr.cpp";
      __int16 v18 = 1024;
      int v19 = 435;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d return dictionary is null", (uint8_t *)&v16, 0x12u);
    }
    return 0;
  }
  CFRelease(v8);
  return v11;
}

void sub_3FE6B0(uint64_t a1)
{
  char v1 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[3];
      v4[0] = v2[2];
      v4[1] = (uint64_t)v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_43F38(&v5, v4, "", 18);
      (*(void (**)(uint64_t, void))(*(void *)v5 + 280))(v5, 0);
      if (v6) {
        sub_4636C(v6);
      }
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
  }
}

void sub_3FE780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_3FE7AC(uint64_t a1)
{
  char v1 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[3];
      v4[0] = v2[2];
      v4[1] = (uint64_t)v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_43F38(&v5, v4, "", 13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 280))(v5, 1);
      if (v6) {
        sub_4636C(v6);
      }
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
  }
}

void sub_3FE87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_3FE8A8(void *a1)
{
  *a1 = off_63DD28;
  sub_8108(a1 + 1);

  operator delete();
}

void *sub_3FE90C(void *a1)
{
  *a1 = off_63DD28;
  sub_8108(a1 + 1);
  return a1;
}

void sub_3FE950(void *a1)
{
  sub_3FE988(a1);

  operator delete();
}

void *sub_3FE988(void *a1)
{
  *a1 = off_63DD60;
  for (uint64_t i = 1; i != 5; ++i)
  {
    if (a1[i]) {
      off_6615B8();
    }
  }
  return a1;
}

void sub_3FE9FC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (byte_6615A0 == 1)
  {
    if (!a3)
    {
      CFStringRef v7 = (os_log_t *)sub_32A48(13);
      CFStringRef v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        uint64_t v11 = "AudioEANCMonitor.cpp";
        __int16 v12 = 1024;
        int v13 = 147;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [inData is NULL]: \"data buffer is NULL\"", (uint8_t *)&v10, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "data buffer is NULL");
    }
    if (LODWORD((&off_63DD70)[2 * a2 + 1]) >= a4)
    {
      if ((off_6615B0(*(void *)(a1 + 8 * a2 + 8), a3, a4) & 1) == 0)
      {
        CFTypeID v6 = (os_log_t *)sub_32A48(13);
        uint64_t v5 = *v6;
        if (*v6)
        {
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
          {
            int v10 = 136315394;
            uint64_t v11 = "AudioEANCMonitor.cpp";
            __int16 v12 = 1024;
            int v13 = 151;
            goto LABEL_11;
          }
        }
      }
    }
    else
    {
      int v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        uint64_t v11 = "AudioEANCMonitor.cpp";
        __int16 v12 = 1024;
        int v13 = 148;
LABEL_11:
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto finish", (uint8_t *)&v10, 0x12u);
      }
    }
  }
}

void sub_3FEC0C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3FEC28(void *a1)
{
  uint64_t v2 = a1[24];
  strcpy(buf, "dmlubolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v3 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, buf);
  int v4 = (os_log_t *)sub_32A48(23);
  uint64_t v5 = *v4;
  if (!*v4 || !os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_7;
  }
  sub_2417C(__p, 0x756C6D64u);
  CFTypeID v6 = v22 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
  *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
  __int16 v24 = 1024;
  int v25 = 136;
  __int16 v26 = 2080;
  size_t v27 = v6;
  __int16 v28 = 1024;
  int v29 = v3;
  _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HasProperty(%s): %d", buf, 0x22u);
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return 1635085420;
    }
  }
  else
  {
LABEL_7:
    if (v3) {
      return 1635085420;
    }
  }
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  uint64_t v7 = 2003068262;
  if ((v8 & 0xFF00000000) != 0 && v8 == 1701865584)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 392))(a1)) {
      return 1633759844;
    }
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)a1[24] + 376))(a1[24]);
    BOOL v11 = (v10 & 0xFF00000000) == 0 || v10 == 0;
    BOOL v12 = !v11;
    int v13 = (os_log_t *)sub_32A48(23);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 126;
      __int16 v26 = 1024;
      LODWORD(v27) = v12;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SupportsSoftwareVolume: %d", buf, 0x18u);
    }
    if (v12) {
      return 1633759844;
    }
    uint64_t v15 = a1[24];
    strcpy(buf, "papsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v16 = sub_99A40(v15);
    *((void *)&v19 + 1) = v17;
    *(void *)&long long v19 = v16;
    uint64_t v18 = v19 >> 32;
    if ((v18 & 0xFF00000000) != 0)
    {
      if (v18) {
        return 1633759844;
      }
    }
  }
  return v7;
}

void sub_3FEF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 682));
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 288))(a1))
  {
    BOOL v7 = sub_3FF994(a1) == 1;
    goto LABEL_3;
  }
  int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == -1 || *(unsigned char *)(a3 + 12) == 0)
  {
    LOBYTE(v8) = 0;
  }
  else if (v8 != 1)
  {
    BOOL v7 = *(_DWORD *)(a3 + 4) == 1;
LABEL_3:
    LOBYTE(v8) = v7;
  }
  atomic_store(v8, (unsigned __int8 *)(a1 + 682));
  uint64_t v10 = sub_32A48(17);
  uint64_t v11 = sub_32A48(28);
  char v12 = 0;
  uint64_t v13 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1;
    if (v16) {
      goto LABEL_19;
    }
  }
  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_19:
  uint64_t v17 = *(NSObject **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v18 = *(const __CFString **)(a1 + 248);
    CFStringRef v55 = v18;
    char v56 = *(unsigned char *)(a1 + 256);
    if (v56 && v18) {
      CFRetain(v18);
    }
    sub_21B7C(v64, v18);
    int v19 = v65;
    uint64_t v20 = v64[0];
    sub_104C68(&__p, a3);
    uint64_t v21 = v64;
    if (v19 < 0) {
      uint64_t v21 = (std::__shared_weak_count **)v20;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    unsigned __int8 v23 = atomic_load((unsigned __int8 *)(a1 + 682));
    *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
    __int16 v58 = 1024;
    __int16 v24 = "in";
    *(_DWORD *)uint64_t v59 = 232;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(_WORD *)&v59[4] = 2080;
    if ((v23 & 1) == 0) {
      __int16 v24 = "out";
    }
    *(void *)&v59[6] = v21;
    __int16 v60 = 2080;
    int v61 = p_p;
    __int16 v62 = 2080;
    CFTypeRef v63 = v24;
    _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio port with UID \"%s\": headset status %s, effective in ear state: %s", buf, 0x30u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v65 < 0) {
      operator delete(v64[0]);
    }
    sub_72924((uint64_t)&v55);
  }
  if (*(unsigned char *)(a3 + 12))
  {
    if (*(_DWORD *)a3 != *(_DWORD *)a2)
    {
      LODWORD(v64[0]) = 1651796336;
      sub_81364(buf, (uint64_t)v64, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
    if (*(_DWORD *)(a3 + 4) != *(_DWORD *)(a2 + 4))
    {
      LODWORD(v64[0]) = 1651796339;
      sub_81364(buf, (uint64_t)v64, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
    if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a2 + 8))
    {
      LODWORD(v64[0]) = 1651798131;
      sub_81364(buf, (uint64_t)v64, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
    unsigned __int8 v25 = atomic_load((unsigned __int8 *)(a1 + 682));
    if ((v6 & 1) != (v25 & 1))
    {
      if (sub_25009C(*(_DWORD *)(a1 + 144)))
      {
        uint64_t v51 = (os_log_t *)sub_32A48(13);
        BOOL v52 = *v51;
        if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
          __int16 v58 = 1024;
          *(_DWORD *)uint64_t v59 = 198;
          _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      unsigned __int8 v26 = atomic_load((unsigned __int8 *)(a1 + 682));
      if ((v26 & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 681))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 272))(buf, a1);
          if (*(void *)&v59[2])
          {
            unsigned __int8 v27 = atomic_load((unsigned __int8 *)(a1 + 682));
            sub_275074(a1, (uint64_t)buf, v27 & 1);
          }
          sub_8108((uint64_t *)buf);
        }
        else
        {
          int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
          uint64_t v31 = sub_32A48(17);
          uint64_t v32 = sub_32A48(28);
          char v33 = 0;
          uint64_t v34 = 0;
          if (v30)
          {
            *(void *)AudioObjectPropertyAddress buf = 0x100000002;
            uint64_t v35 = *(void *)(v31 + 8);
            while (1)
            {
              uint64_t v36 = *(int *)&buf[4 * v34];
              char v37 = v33;
              if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
                break;
              }
              char v33 = 1;
              uint64_t v34 = 1;
              if (v37) {
                goto LABEL_74;
              }
            }
            if ((v35 & v36) == 0) {
              uint64_t v31 = v32;
            }
LABEL_74:
            uint64_t v41 = *(NSObject **)v31;
            if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              CFStringRef v42 = *(const __CFString **)(a1 + 248);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
              __p.__r_.__value_.__s.__data_[8] = *(unsigned char *)(a1 + 256);
              if (__p.__r_.__value_.__s.__data_[8] && v42) {
                CFRetain(v42);
              }
              sub_21B7C(v64, v42);
              if (v65 >= 0) {
                uint64_t v43 = v64;
              }
              else {
                uint64_t v43 = (std::__shared_weak_count **)v64[0];
              }
              unsigned __int8 v44 = atomic_load((unsigned __int8 *)(a1 + 682));
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
              if (v44) {
                uint64_t v45 = "true";
              }
              else {
                uint64_t v45 = "false";
              }
              __int16 v58 = 1024;
              *(_DWORD *)uint64_t v59 = 211;
              *(_WORD *)&v59[4] = 2080;
              *(void *)&v59[6] = v43;
              __int16 v60 = 2080;
              int v61 = (std::string *)v45;
              _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio device with UID \"%s\": setting routability to %s", buf, 0x26u);
              if (v65 < 0) {
                operator delete(v64[0]);
              }
              sub_72924((uint64_t)&__p);
            }
            uint64_t v46 = *(std::__shared_weak_count **)(a1 + 88);
            v64[0] = *(std::__shared_weak_count **)(a1 + 80);
            v64[1] = v46;
            if (v46) {
              atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            sub_DD9D0((uint64_t *)buf, (uint64_t *)v64, 1);
            unsigned __int8 v47 = atomic_load((unsigned __int8 *)(a1 + 682));
            sub_275074(a1, (uint64_t)buf, v47 & 1);
            sub_8108((uint64_t *)buf);
            if (v64[1]) {
              std::__shared_weak_count::__release_weak(v64[1]);
            }
          }
          else
          {
            *(void *)AudioObjectPropertyAddress buf = 0x100000002;
            uint64_t v38 = *(void *)(v31 + 8);
            while (1)
            {
              uint64_t v39 = *(int *)&buf[4 * v34];
              char v40 = v33;
              if (((v38 & v39) != 0) != ((*(void *)(v32 + 8) & v39) != 0)) {
                break;
              }
              char v33 = 1;
              uint64_t v34 = 1;
              if (v40) {
                goto LABEL_94;
              }
            }
            if ((v38 & v39) == 0) {
              uint64_t v31 = v32;
            }
LABEL_94:
            uint64_t v48 = *(NSObject **)v31;
            if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              CFStringRef v49 = *(const __CFString **)(a1 + 248);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
              __p.__r_.__value_.__s.__data_[8] = *(unsigned char *)(a1 + 256);
              if (__p.__r_.__value_.__s.__data_[8] && v49) {
                CFRetain(v49);
              }
              sub_21B7C(v64, v49);
              if (v65 >= 0) {
                uint64_t v50 = v64;
              }
              else {
                uint64_t v50 = (std::__shared_weak_count **)v64[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "Port_BluetoothA2DP_Aspen.cpp";
              __int16 v58 = 1024;
              *(_DWORD *)uint64_t v59 = 217;
              *(_WORD *)&v59[4] = 2080;
              *(void *)&v59[6] = v50;
              _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio device with UID \"%s\": routability unchanged due to negative ownership status", buf, 0x1Cu);
              if (v65 < 0) {
                operator delete(v64[0]);
              }
              sub_72924((uint64_t)&__p);
            }
          }
        }
      }
      LODWORD(v64[0]) = 1651796325;
      sub_81364(buf, (uint64_t)v64, 1);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
    if (*(unsigned __int8 *)(a3 + 12) != *(unsigned __int8 *)(a2 + 12))
    {
      *(_OWORD *)uint64_t v64 = xmmword_4E7A60;
      sub_81364(buf, (uint64_t)v64, 4);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
      sub_45F50(buf);
    }
  }
  else if (*(unsigned char *)(a2 + 12))
  {
    *(_OWORD *)uint64_t v64 = xmmword_4E7A60;
    sub_81364(buf, (uint64_t)v64, 4);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 448))(a1, buf);
    sub_45F50(buf);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1))
    {
      unsigned __int8 v28 = atomic_load((unsigned __int8 *)(a1 + 682));
      if ((v28 & 1) == 0 || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1))
      {
        int v29 = *(std::__shared_weak_count **)(a1 + 88);
        v64[0] = *(std::__shared_weak_count **)(a1 + 80);
        v64[1] = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_DD9D0((uint64_t *)buf, (uint64_t *)v64, 1);
        sub_275074(a1, (uint64_t)buf, 1);
        sub_8108((uint64_t *)buf);
        if (v64[1]) {
          std::__shared_weak_count::__release_weak(v64[1]);
        }
      }
    }
  }
}

void sub_3FF8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t sub_3FF994(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 288))(a1) & 1) == 0)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 60;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 272))(buf, a1);
  sub_FB288(&v11, buf);
  uint64_t v2 = v12;
  if (v12 == &v11)
  {
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 2;
    while (1)
    {
      uint64_t v4 = v2[2];
      if (*(_DWORD *)(v4 + 144) != 1885892674) {
        break;
      }
      uint64_t v5 = *(void *)(v4 + 192);
      int v6 = *(_DWORD *)(v5 + 500);
      if (v6 == -1 || !*(unsigned char *)(v5 + 512))
      {
        uint64_t v3 = 1;
        goto LABEL_15;
      }
      if (v6 == 1 || *(_DWORD *)(v5 + 504) == 1) {
        uint64_t v3 = 1;
      }
      uint64_t v2 = (uint64_t *)v2[1];
      if (v2 == &v11) {
        goto LABEL_15;
      }
    }
    uint64_t v3 = 0xFFFFFFFFLL;
  }
LABEL_15:
  sub_B8E4(&v11);
  sub_8108((uint64_t *)buf);
  return v3;
}

void sub_3FFB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void *sub_3FFBC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v2 = *(const __CFString **)(a1 + 672);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }

  return sub_20C54(a2, v2);
}

void sub_3FFC2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3FFC40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 424))();
}

BOOL sub_3FFC6C(uint64_t a1)
{
  CFStringRef v1 = *(const __CFString **)(a1 + 672);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  sub_20C54((uint64_t)v6, v1);
  if (v7 < 0)
  {
    BOOL v3 = v6[1] != 0;
    operator delete(v6[0]);
  }
  else
  {
    BOOL v3 = v7 != 0;
  }
  return *(unsigned char *)(a1 + 680) && v3;
}

void sub_3FFD04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3FFD18(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 400))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 424))(a1)) {
    BOOL v3 = v2 == 2;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 408);

  return v5(a1);
}

uint64_t sub_3FFDF0(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 288))(a1))
  {
    return sub_3FF994((uint64_t)a1);
  }
  else
  {
    uint64_t v3 = a1[24];
    int v4 = *(_DWORD *)(v3 + 500);
    if (v4 == -1 || !*(unsigned char *)(v3 + 512))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t result = 1;
      if (v4 != 1)
      {
        if (*(_DWORD *)(v3 + 504) == 1) {
          return 1;
        }
        else {
          return 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_3FFE98()
{
  return 1;
}

BOOL sub_3FFEA0(uint64_t a1, void *a2)
{
  int v2 = (std::__shared_weak_count *)a2[1];
  if (!v2) {
    return 0;
  }
  int v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return 0;
  }
  if (*a2) {
    BOOL v5 = *(_DWORD *)(*a2 + 144) != 1885892706;
  }
  else {
    BOOL v5 = 0;
  }
  sub_4636C(v4);
  return v5;
}

uint64_t sub_3FFF04(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 681);
}

uint64_t sub_3FFF0C(uint64_t a1, char a2)
{
  uint64_t v6 = 0x676C6F6277737375;
  int v7 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v6);
  if (result)
  {
    *(unsigned char *)(a1 + 681) = a2;
    AudioObjectID v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 120))(*(void *)(a1 + 192));
    sub_1D6C80(v5);
    sub_13910();
    operator new();
  }
  return result;
}

void sub_400008(uint64_t a1)
{
}

void sub_4000B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      int v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    char v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      unsigned __int8 v23 = v22;
      __int16 v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        int v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      unsigned __int8 v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        int v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x40006CLL);
}

void sub_400324(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10FBF0();
  AudioObjectID v5 = operator new(4uLL);
  __p[0] = v5;
  *AudioObjectID v5 = 1885892674;
  __p[1] = v5 + 1;
  __p[2] = v5 + 1;
  strcpy((char *)&__p[3], "cwdv");
  char v28 = 0;
  int v29 = 3;
  v31[0] = 0;
  v31[1] = 0;
  int v30 = v31;
  int v32 = 44739242;
  CFTypeRef cf = 0;
  theString1.__r_.__value_.__r.__words[0] = (std::string::size_type)off_63E000;
  p_std::string theString1 = &theString1;
  sub_10E1E8(v24, v4, __p, (uint64_t)&theString1);
  sub_6AFD4(&theString1);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v31[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  if (v24[2] >= 2uLL)
  {
    (*(void (**)(CFArrayRef *__return_ptr))(**(void **)(a1 + 192) + 304))(&theArray);
    CFArrayRef v6 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFIndex v8 = Count;
      CFArrayRef v9 = theArray;
      if (theArray)
      {
        CFIndex v21 = CFArrayGetCount(theArray);
        if (!v8) {
          goto LABEL_36;
        }
LABEL_11:
        unint64_t v10 = 0;
        do
        {
          if (v6 == v9 && v10 == v21) {
            break;
          }
          sub_68838(&v22, v6, v10);
          uint64_t v11 = (uint64_t *)v24[1];
          CFStringRef v12 = (const __CFString *)v22;
          if (v22) {
            CFRetain(v22);
          }
          uint64_t v13 = v24;
          if (v11 != v24)
          {
            uint64_t v13 = v11;
            while (1)
            {
              sub_43F38((uint64_t *)__p, v13 + 2, "", 324);
              if (__p[0] && *((_DWORD *)__p[0] + 36) == 1885892674)
              {
                (*(void (**)(std::string *__return_ptr))(**((void **)__p[0] + 24) + 128))(&theString1);
                BOOL v14 = CFEqual((CFStringRef)theString1.__r_.__value_.__l.__data_, v12);
                sub_72924((uint64_t)&theString1);
              }
              else
              {
                BOOL v14 = 0;
              }
              if (__p[1]) {
                sub_4636C((std::__shared_weak_count *)__p[1]);
              }
              if (v14) {
                break;
              }
              uint64_t v13 = (uint64_t *)v13[1];
              if (v13 == v24)
              {
                uint64_t v13 = v24;
                break;
              }
            }
          }
          if (v12) {
            CFRelease(v12);
          }
          if (v13 != v24)
          {
            __int16 v15 = operator new(0x20uLL);
            _OWORD v15[2] = v13[2];
            uint64_t v16 = v13[3];
            v15[3] = v16;
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
            }
            uint64_t v17 = *a2;
            *__int16 v15 = *a2;
            v15[1] = a2;
            *(void *)(v17 + 8) = v15;
            *a2 = (uint64_t)v15;
            ++a2[2];
          }
          if (v12) {
            CFRelease(v12);
          }
          ++v10;
        }
        while (v10 != v8);
        goto LABEL_36;
      }
      CFIndex v21 = 0;
      if (Count) {
        goto LABEL_11;
      }
    }
LABEL_36:
    if (a2[2])
    {
      int v18 = (os_log_t *)sub_32A48(23);
      int v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
        {
          sub_38200C(&theString1, (uint64_t)a2);
          uint64_t v20 = (theString1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &theString1
              : (std::string *)theString1.__r_.__value_.__r.__words[0];
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "Port_BluetoothA2DP_Aspen.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 337;
          WORD1(__p[2]) = 2080;
          *(void **)((char *)&__p[2] + 4) = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Partner ports: %s", (uint8_t *)__p, 0x1Cu);
          if (SHIBYTE(theString1.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(theString1.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  sub_8108(v24);
}

void sub_400710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  int v7 = va_arg(va1, const void *);
  sub_63908((const void **)va);
  sub_8108(v5);
  sub_8108((uint64_t *)va1);
  _Unwind_Resume(a1);
}

const void **sub_4007C8(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_4007FC()
{
  return 1;
}

void sub_40080C(uint64_t a1, void *a2)
{
  *a2 = off_63E000;
}

void *sub_40082C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63E000;
  return result;
}

void sub_400864()
{
}

uint64_t sub_40087C(void **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if ((((uint64_t (*)(void **))(*a1)[2])(a1) & 1) == 0)
  {
    BOOL v14 = (os_log_t *)sub_32A48(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)a2;
      int v27 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v26);
      uint64_t v16 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v31 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 404;
      __int16 v34 = 2080;
      uint64_t v35 = (const char *)v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v18 = (os_log_t *)sub_32A48(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)a2;
      int v27 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v26);
      uint64_t v20 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v31 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 405;
      __int16 v34 = 2080;
      uint64_t v35 = (const char *)v20;
      __int16 v36 = 1024;
      LODWORD(v37[0]) = a3;
      WORD2(v37[0]) = 2048;
      *(void *)((char *)v37 + 6) = a4;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    CFIndex v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFIndex v21 = &off_6414D8;
    v21[2] = 561211770;
  }
  if (!a6)
  {
    CFTypeRef v22 = (os_log_t *)sub_32A48(13);
    unsigned __int8 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)a2;
      int v27 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v26);
      __int16 v24 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v31 = "Port_BluetoothA2DP_Aspen.cpp";
      __int16 v32 = 1024;
      int v33 = 406;
      __int16 v34 = 2080;
      uint64_t v35 = "outData";
      __int16 v36 = 2080;
      v37[0] = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    os_log_t v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v25 = &off_6414D8;
    void v25[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 2004054901)
  {
    CFStringRef v12 = *(uint64_t (**)(void))(*a1[24] + 40);
    return v12();
  }
  else
  {
    return sub_276308(a1, a2, a3, a4, a5, a6);
  }
}

void sub_400D2C(uint64_t a1)
{
  sub_400D64(a1);

  operator delete();
}

uint64_t sub_400D64(uint64_t a1)
{
  *(void *)a1 = off_63DDC0;
  int v2 = *(const void **)(a1 + 672);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));

  return sub_104C04((void *)a1);
}

void sub_400DEC()
{
  qword_661668 = 0;
  qword_661660 = 0;
  qword_661658 = (uint64_t)&qword_661660;
  *(void *)char v135 = 0;
  v135[8] = 1;
  if (sub_207E70()) {
    goto LABEL_6;
  }
  sub_165894(buf);
  if (buf[24] && (buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    goto LABEL_6;
  }
  if (buf[24])
  {
LABEL_6:
    sub_208ED4(buf);
    if (buf[23] >= 0) {
      uint64_t v0 = buf;
    }
    else {
      uint64_t v0 = *(const char **)buf;
    }
    uint64_t v109 = (__CFString *)CFStringCreateWithCString(0, v0, 0x600u);
    LOBYTE(v110[0]) = 1;
    sub_8B9E0((uint64_t)v135, (uint64_t)&v109);
    sub_72924((uint64_t)&v109);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_11;
  }
  *(void *)AudioObjectPropertyAddress buf = sub_32DA5C();
  _DWORD buf[8] = 1;
  sub_8B9E0((uint64_t)v135, (uint64_t)buf);
  sub_72924((uint64_t)buf);
LABEL_11:
  sub_3B3920(&v133, (CFStringRef *)v135);
  sub_72924((uint64_t)v135);
  int v1 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v133.__r_.__value_.__l.__size_;
  }
  uint64_t v3 = buf;
  sub_5E220((uint64_t)buf, size + 27);
  if (buf[23] < 0) {
    uint64_t v3 = *(unsigned char **)buf;
  }
  if (size)
  {
    if (v1 >= 0) {
      uint64_t v4 = &v133;
    }
    else {
      uint64_t v4 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    memmove(v3, v4, size);
  }
  strcpy(&v3[size], "SoundAutoConfigStrips.plist");
  sub_16CD18(&theDict, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  CFDictionaryRef v5 = theDict;
  sub_27EA8C((uint64_t)&v126, theDict);
  sub_27EA8C((uint64_t)&v120, v5);
  uint64_t v121 = (v123 - (unsigned char *)v122) >> 3;
  while (1)
  {
    if (v126 && v127 != (v129 - (unsigned char *)v128) >> 3)
    {
      uint64_t v6 = v120;
      goto LABEL_30;
    }
    uint64_t v6 = v120;
    if (!v120 || v121 == (v123 - (unsigned char *)v122) >> 3) {
      break;
    }
LABEL_30:
    if (v126 == v6 && v127 == v121) {
      break;
    }
    sub_27EB10((uint64_t)__p, &v126);
    sub_15EE0C((uint64_t)buf, (const void **)&v133.__r_.__value_.__l.__data_, (const void **)__p);
    std::string v116 = *(std::string *)buf;
    sub_4021E4((uint64_t)v135, (std::__fs::filesystem::path *)&v116);
    if ((v135[23] & 0x80000000) != 0)
    {
      int v7 = *(void **)v135;
      sub_21E8C(buf, *(void **)v135, *(unint64_t *)&v135[8]);
      operator delete(v7);
    }
    else
    {
      *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v135;
      *(void *)&buf[16] = *(void *)&v135[16];
    }
    uint64_t v8 = buf[23];
    if (buf[23] < 0) {
      uint64_t v8 = *(void *)&buf[8];
    }
    if (v8 == 8)
    {
      uint64_t v13 = *(void **)buf;
      if (buf[23] >= 0) {
        uint64_t v13 = buf;
      }
      if (*v13 != 0x706972747375612ELL)
      {
LABEL_45:
        std::string::append(&v116, ".austrip", 8uLL);
        if ((buf[23] & 0x80) == 0) {
          goto LABEL_51;
        }
LABEL_46:
        operator delete(*(void **)buf);
        goto LABEL_51;
      }
    }
    else
    {
      if (v8 != 10) {
        goto LABEL_45;
      }
      CFArrayRef v9 = *(unsigned char **)buf;
      if (buf[23] >= 0) {
        CFArrayRef v9 = buf;
      }
      uint64_t v10 = *(void *)v9;
      int v11 = *((unsigned __int16 *)v9 + 4);
      if (v10 != 0x727473706F72702ELL || v11 != 28777) {
        goto LABEL_45;
      }
    }
    if ((buf[23] & 0x80) != 0) {
      goto LABEL_46;
    }
LABEL_51:
    if ((sub_20ADA4() & 1) == 0)
    {
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
        sub_21E8C(buf, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)AudioObjectPropertyAddress buf = v116;
      }
      uint64_t v14 = buf[23];
      int v15 = buf[23];
      uint64_t v16 = *(void **)buf;
      if (buf[23] >= 0)
      {
        uint64_t v17 = buf;
      }
      else
      {
        uint64_t v14 = *(void *)&buf[8];
        uint64_t v17 = *(unsigned char **)buf;
      }
      int v18 = &v17[v14];
      if (v14 >= 12)
      {
        int v19 = v17;
        do
        {
          uint64_t v20 = (char *)memchr(v19, 109, v14 - 11);
          if (!v20) {
            break;
          }
          if (*(void *)v20 == 0x7375612E64656C6DLL && *((_DWORD *)v20 + 2) == 1885958772) {
            goto LABEL_67;
          }
          int v19 = v20 + 1;
          uint64_t v14 = v18 - (unsigned char *)v19;
        }
        while (v18 - (unsigned char *)v19 > 11);
      }
      uint64_t v20 = v18;
LABEL_67:
      BOOL v23 = v20 == v18 || v20 - v17 == -1;
      if (v15 < 0)
      {
        operator delete(v16);
        if (!v23) {
          goto LABEL_222;
        }
      }
      else if (!v23)
      {
        goto LABEL_222;
      }
    }
    v110[0] = 0;
    v110[1] = 0;
    v112[0] = 0;
    v112[1] = 0;
    uint64_t v109 = (__CFString *)v110;
    uint64_t v111 = v112;
    v114[0] = 0;
    v114[1] = 0;
    uint64_t v113 = v114;
    __int16 v115 = 0;
    CFDictionaryRef v24 = (const __CFDictionary *)v119;
    sub_402448((const __CFDictionary *)v119, (const UInt8 *)"position", (uint64_t **)&v111);
    sub_402448(v24, (const UInt8 *)"role", (uint64_t **)&v113);
    if (!v24)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_4026F0((uint64_t)&cf, v24, (const UInt8 *)"VirtualAudioPlugInMode");
    if (cf.__r_.__value_.__s.__data_[8] && cf.__r_.__value_.__r.__words[0])
    {
      CFTypeID v25 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
      if (v25 == CFArrayGetTypeID())
      {
        sub_170998(&v134, (CFTypeRef *)&cf.__r_.__value_.__l.__data_);
        if (!v134)
        {
          uint64_t v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v102, "Could not construct");
        }
        memset(v135, 0, 24);
        sub_402744((uint64_t)buf, (const __CFArray *)v134, (__n128 *)v135);
        v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
        sub_217F8((void ***)&v105);
        if (v134) {
          CFRelease(v134);
        }
        uint64_t v26 = *(void *)buf;
        uint64_t v27 = *(void *)&buf[8];
        while (v26 != v27)
        {
          if (*(char *)(v26 + 23) >= 0) {
            char v28 = (unsigned int *)v26;
          }
          else {
            char v28 = *(unsigned int **)v26;
          }
          unsigned int v29 = bswap32(*v28);
          sub_6CB40((uint64_t *)&v109, v29, v29);
          v26 += 24;
        }
        *(void *)char v135 = buf;
        sub_217F8((void ***)v135);
      }
      else if (cf.__r_.__value_.__r.__words[0])
      {
        CFTypeID v30 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
        if (v30 == CFStringGetTypeID())
        {
          sub_E2B68(v135, (CFTypeRef *)&cf.__r_.__value_.__l.__data_);
          if (!*(void *)v135)
          {
            uint64_t v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v103, "Could not construct");
          }
          sub_20C54((uint64_t)buf, *(const __CFString **)v135);
          if (*(void *)v135) {
            CFRelease(*(CFTypeRef *)v135);
          }
          if (buf[23] >= 0) {
            uint64_t v31 = (unsigned int *)buf;
          }
          else {
            uint64_t v31 = *(unsigned int **)buf;
          }
          unsigned int v32 = bswap32(*v31);
          sub_6CB40((uint64_t *)&v109, v32, v32);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }
    sub_4027D8((uint64_t)&cf);
    __int16 v115 = sub_402814((const __CFDictionary **)&v119);
    id v33 = *(id *)sub_32A48(24);
    __int16 v34 = v33;
    if (v33)
    {
      uint64_t v35 = v33;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        v135[23] = 15;
        strcpy(v135, "{ calibration: ");
        __int16 v36 = "true";
        if (!(_BYTE)v115) {
          __int16 v36 = "false";
        }
        if (HIBYTE(v115)) {
          char v37 = v36;
        }
        else {
          char v37 = "unspecified";
        }
        size_t v38 = strlen(v37);
        uint64_t v39 = std::string::append((std::string *)v135, v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if ((v135[23] & 0x80000000) != 0) {
          operator delete(*(void **)v135);
        }
        sub_27E8C8(&cf, v111, v112);
        uint64_t v41 = std::string::insert(&cf, 0, ", positions: ", 0xDuLL);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        *(void *)&v135[16] = *((void *)&v41->__r_.__value_.__l + 2);
        *(_OWORD *)char v135 = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        if (v135[23] >= 0) {
          uint64_t v43 = v135;
        }
        else {
          uint64_t v43 = *(const std::string::value_type **)v135;
        }
        if (v135[23] >= 0) {
          std::string::size_type v44 = v135[23];
        }
        else {
          std::string::size_type v44 = *(void *)&v135[8];
        }
        std::string::append(&v105, v43, v44);
        if ((v135[23] & 0x80000000) != 0) {
          operator delete(*(void **)v135);
        }
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cf.__r_.__value_.__l.__data_);
        }
        sub_27E8C8(&cf, v113, v114);
        uint64_t v45 = std::string::insert(&cf, 0, ", roles: ", 9uLL);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        *(void *)&v135[16] = *((void *)&v45->__r_.__value_.__l + 2);
        *(_OWORD *)char v135 = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (v135[23] >= 0) {
          unsigned __int8 v47 = v135;
        }
        else {
          unsigned __int8 v47 = *(const std::string::value_type **)v135;
        }
        if (v135[23] >= 0) {
          std::string::size_type v48 = v135[23];
        }
        else {
          std::string::size_type v48 = *(void *)&v135[8];
        }
        std::string::append(&v105, v47, v48);
        if ((v135[23] & 0x80000000) != 0) {
          operator delete(*(void **)v135);
        }
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cf.__r_.__value_.__l.__data_);
        }
        sub_120764(&cf, v109, v110);
        CFStringRef v49 = std::string::insert(&cf, 0, ", modes: ", 9uLL);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        *(void *)&v135[16] = *((void *)&v49->__r_.__value_.__l + 2);
        *(_OWORD *)char v135 = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (v135[23] >= 0) {
          uint64_t v51 = v135;
        }
        else {
          uint64_t v51 = *(const std::string::value_type **)v135;
        }
        if (v135[23] >= 0) {
          std::string::size_type v52 = v135[23];
        }
        else {
          std::string::size_type v52 = *(void *)&v135[8];
        }
        std::string::append(&v105, v51, v52);
        if ((v135[23] & 0x80000000) != 0) {
          operator delete(*(void **)v135);
        }
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cf.__r_.__value_.__l.__data_);
        }
        std::string::append(&v105, " }", 2uLL);
        int v53 = &v105;
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v53 = (std::string *)v105.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SoundAutoConfigUtilities.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 208;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v53;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_INFO, "%25s:%-5d Parsed SoundAutoConfig dictionary into AbstractSoundAutoConfigCondition %s.", buf, 0x1Cu);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
      }
    }
    sub_4021E4((uint64_t)v135, (std::__fs::filesystem::path *)&v116);
    int v54 = v135[23];
    if ((v135[23] & 0x80000000) != 0)
    {
      sub_21E8C(buf, *(void **)v135, *(unint64_t *)&v135[8]);
    }
    else
    {
      *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v135;
      *(void *)&buf[16] = *(void *)&v135[16];
    }
    uint64_t v55 = buf[23];
    if (buf[23] < 0) {
      uint64_t v55 = *(void *)&buf[8];
    }
    int v56 = 1886548848;
    if (v55 == 8)
    {
      uint64_t v57 = *(unint64_t **)buf;
      if (buf[23] >= 0) {
        uint64_t v57 = (unint64_t *)buf;
      }
      unint64_t v58 = bswap64(*v57);
      BOOL v59 = v58 >= 0x2E61757374726970;
      int v60 = v58 > 0x2E61757374726970;
      int v61 = !v59;
      if (v60 == v61) {
        int v56 = 1635087216;
      }
      else {
        int v56 = 1886548848;
      }
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v54 < 0) {
      operator delete(*(void **)v135);
    }
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      sub_21E8C(&cf, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
    }
    else {
      std::string cf = v116;
    }
    sub_46A4C((uint64_t *)&v135[8], (uint64_t)&v109);
    sub_18452C(&v136, &v111);
    sub_18452C(v137, &v113);
    __int16 v138 = v115;
    int v139 = 2;
    sub_24A024((uint64_t)buf, 4, v56, (long long *)&cf, (uint64_t)v135);
    sub_8C710((uint64_t)&v135[8]);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
    CFArrayRef v62 = (const __CFArray *)sub_D86AC(v24, (const UInt8 *)"VirtualAudioDeviceType");
    if (!v62)
    {
      cf.__r_.__value_.__s.__data_[0] = 0;
      char v108 = 0;
LABEL_189:
      sub_402388(&v105, v24, (const UInt8 *)"VirtualAudioDeviceType");
      if (v106)
      {
        char v78 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        uint64_t v79 = (unsigned int *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v79 = (unsigned int *)&v105;
        }
        LODWORD(v134) = bswap32(*v79);
        uint64_t v80 = sub_4022AC(v134, &v134);
        uint64_t v81 = v80;
        uint64_t v82 = v80 + 7;
        unint64_t v83 = v80[7];
        unint64_t v84 = v80[6];
        if (v84 >= v83)
        {
          uint64_t v87 = v80[5];
          unint64_t v88 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v84 - v87) >> 3);
          unint64_t v89 = v88 + 1;
          if (v88 + 1 > 0x1E1E1E1E1E1E1E1) {
            sub_60548();
          }
          unint64_t v90 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v83 - v87) >> 3);
          if (2 * v90 > v89) {
            unint64_t v89 = 2 * v90;
          }
          if (v90 >= 0xF0F0F0F0F0F0F0) {
            unint64_t v91 = 0x1E1E1E1E1E1E1E1;
          }
          else {
            unint64_t v91 = v89;
          }
          uint64_t v136 = v82;
          if (v91) {
            unint64_t v91 = (unint64_t)sub_249EB8(v91);
          }
          else {
            uint64_t v92 = 0;
          }
          *(void *)char v135 = v91;
          *(void *)&v135[8] = v91 + 136 * v88;
          *(void *)&v135[16] = *(void *)&v135[8];
          *(void *)&v135[24] = v91 + 136 * v92;
          sub_249E2C(*(uint64_t *)&v135[8], (uint64_t)buf);
          *(void *)&v135[16] += 136;
          sub_249F00(v81 + 5, v135);
          unint64_t v85 = v81[6];
          sub_249FD4((uint64_t)v135);
          int v86 = v106;
          char v78 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        }
        else
        {
          sub_249E2C(v80[6], (uint64_t)buf);
          unint64_t v85 = v84 + 136;
          v81[6] = v84 + 136;
          int v86 = 1;
        }
        v81[6] = v85;
        if (v86 && v78 < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_207;
    }
    sub_15D76C((uint64_t)&cf, v62);
    if (!v108) {
      goto LABEL_189;
    }
    std::string::size_type v63 = cf.__r_.__value_.__l.__size_;
    for (std::string::size_type i = cf.__r_.__value_.__r.__words[0]; i != v63; i += 24)
    {
      if (*(char *)(i + 23) >= 0) {
        char v65 = (unsigned int *)i;
      }
      else {
        char v65 = *(unsigned int **)i;
      }
      LODWORD(v105.__r_.__value_.__l.__data_) = bswap32(*v65);
      uint64_t v66 = sub_4022AC(v105.__r_.__value_.__l.__data_, &v105);
      uint64_t v67 = v66;
      uint64_t v68 = v66 + 7;
      unint64_t v69 = v66[7];
      unint64_t v70 = v66[6];
      if (v70 >= v69)
      {
        uint64_t v72 = v66[5];
        unint64_t v73 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v70 - v72) >> 3);
        unint64_t v74 = v73 + 1;
        if (v73 + 1 > 0x1E1E1E1E1E1E1E1) {
          sub_60548();
        }
        unint64_t v75 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v69 - v72) >> 3);
        if (2 * v75 > v74) {
          unint64_t v74 = 2 * v75;
        }
        if (v75 >= 0xF0F0F0F0F0F0F0) {
          unint64_t v76 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v76 = v74;
        }
        uint64_t v136 = v68;
        if (v76) {
          unint64_t v76 = (unint64_t)sub_249EB8(v76);
        }
        else {
          uint64_t v77 = 0;
        }
        *(void *)char v135 = v76;
        *(void *)&v135[8] = v76 + 136 * v73;
        *(void *)&v135[16] = *(void *)&v135[8];
        *(void *)&v135[24] = v76 + 136 * v77;
        sub_249E2C(*(uint64_t *)&v135[8], (uint64_t)buf);
        *(void *)&v135[16] += 136;
        sub_249F00(v67 + 5, v135);
        unint64_t v71 = v67[6];
        sub_249FD4((uint64_t)v135);
      }
      else
      {
        sub_249E2C(v66[6], (uint64_t)buf);
        unint64_t v71 = v70 + 136;
        v67[6] = v70 + 136;
      }
      v67[6] = v71;
    }
LABEL_207:
    if (v108)
    {
      *(void *)char v135 = &cf;
      sub_217F8((void ***)v135);
    }
    id v93 = *(id *)sub_32A48(1);
    uint64_t v94 = v93;
    if (v93)
    {
      uint64_t v95 = v93;
      if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
      {
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
          sub_21E8C(&cf, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
        }
        else {
          std::string cf = v116;
        }
        p_std::string cf = &cf;
        if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)char v135 = 136315650;
        *(void *)&v135[4] = "SoundAutoConfigUtilities.mm";
        *(_WORD *)&v135[12] = 1024;
        *(_DWORD *)&v135[14] = 137;
        *(_WORD *)&v135[18] = 2080;
        *(void *)&v135[20] = p_cf;
        _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_INFO, "%25s:%-5d Parsed SoundAutoConfig tuning at path %s into ConditionalOverlayTuning", v135, 0x1Cu);
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cf.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v144 < 0) {
      operator delete(v143);
    }
    sub_8C710((uint64_t)&buf[16]);
    sub_8F90(v114[0]);
    sub_8F90(v112[0]);
    sub_463E0(v110[0]);
LABEL_222:
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if (v119) {
      CFRelease(v119);
    }
    if (v118 < 0) {
      operator delete(__p[0]);
    }
    ++v127;
  }
  if (v124)
  {
    char v125 = v124;
    operator delete(v124);
  }
  if (v122)
  {
    OSStatus v123 = v122;
    operator delete(v122);
  }
  if (v130)
  {
    __int16 v131 = v130;
    operator delete(v130);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  id v97 = *(id *)sub_32A48(1);
  uint64_t v98 = v97;
  if (v97)
  {
    uint64_t v99 = v97;
    if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
    {
      if (!theDict)
      {
        uint64_t v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v104, "Could not construct");
      }
      CFIndex Count = CFDictionaryGetCount(theDict);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "SoundAutoConfigUtilities.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 141;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "SoundAutoConfigStrips.plist";
      __int16 v141 = 2048;
      CFIndex v142 = Count;
      _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_INFO, "%25s:%-5d Parsed %s into %zu ConditionalOverlayTunings", buf, 0x26u);
    }
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
}

void sub_401E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  sub_72924(v65 - 240);
  sub_72924((uint64_t)&a65);
  sub_4023E4((char *)qword_661660);
  _Unwind_Resume(a1);
}

double sub_4021E4(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_4F8C0();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t *sub_4022AC(unsigned int a1, _DWORD *a2)
{
  uint64_t v3 = qword_661660;
  if (qword_661660)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3;
        unsigned int v5 = *(_DWORD *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        std::basic_string_view<_CharT, _Traits>::size_type v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        std::basic_string_view<_CharT, _Traits>::size_type v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    std::basic_string_view<_CharT, _Traits>::size_type v6 = &qword_661660;
    uint64_t v4 = &qword_661660;
LABEL_9:
    int v7 = v4;
    uint64_t v4 = (uint64_t *)operator new(0x40uLL);
    *((_DWORD *)v4 + 8) = *a2;
    v4[6] = 0;
    v4[7] = 0;
    v4[5] = 0;
    uint64_t *v4 = 0;
    v4[1] = 0;
    uint64_t v4[2] = (uint64_t)v7;
    *std::basic_string_view<_CharT, _Traits>::size_type v6 = (uint64_t)v4;
    uint64_t v8 = v4;
    if (*(void *)qword_661658)
    {
      qword_661658 = *(void *)qword_661658;
      uint64_t v8 = (uint64_t *)*v6;
    }
    sub_46D00((uint64_t *)qword_661660, v8);
    ++qword_661668;
  }
  return v4;
}

CFStringRef sub_402388(unsigned char *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFStringRef result = (const __CFString *)sub_D86AC(a2, __s);
  if (result)
  {
    return (const __CFString *)sub_65F38((CFTypeID)a1, result);
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return result;
}

void sub_4023E4(char *a1)
{
  if (a1)
  {
    sub_4023E4(*(void *)a1);
    sub_4023E4(*((void *)a1 + 1));
    int v2 = (void **)(a1 + 40);
    sub_1B6E74(&v2);
    operator delete(a1);
  }
}

uint64_t sub_402448(const __CFDictionary *a1, const UInt8 *__s, uint64_t **a3)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  sub_4026F0((uint64_t)&cf, a1, __s);
  if (v18 && cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFArrayGetTypeID())
    {
      sub_170998(&v14, &cf);
      if (!v14)
      {
        uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v10, "Could not construct");
      }
      __n128 v12 = 0uLL;
      uint64_t v13 = 0;
      sub_402744((uint64_t)__p, (const __CFArray *)v14, &v12);
      int v19 = &v12;
      sub_217F8((void ***)&v19);
      if (v14) {
        CFRelease(v14);
      }
      unsigned int v5 = (void **)__p[0];
      std::basic_string_view<_CharT, _Traits>::size_type v6 = (void **)__p[1];
      while (v5 != v6)
      {
        sub_402900(a3, v5, (uint64_t)v5);
        v5 += 3;
      }
      v12.n128_u64[0] = (unint64_t)__p;
      sub_217F8((void ***)&v12);
    }
    else if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFStringGetTypeID())
      {
        sub_E2B68(&v12, &cf);
        if (!v12.n128_u64[0])
        {
          int v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v11, "Could not construct");
        }
        sub_20C54((uint64_t)__p, (const __CFString *)v12.n128_u64[0]);
        if (v12.n128_u64[0]) {
          CFRelease((CFTypeRef)v12.n128_u64[0]);
        }
        sub_402900(a3, __p, (uint64_t)__p);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return sub_4027D8((uint64_t)&cf);
}

void sub_402640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  sub_6393C((const void **)&a9);
  sub_4027D8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

const void *sub_4026F0(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFStringRef result = sub_D86AC(a2, __s);
  if (result)
  {
    unsigned int v5 = result;
    CFStringRef result = CFRetain(result);
    *(void *)a1 = v5;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

__n128 sub_402744(uint64_t a1, const __CFArray *a2, __n128 *a3)
{
  sub_15D76C((uint64_t)&v6, a2);
  if (v8)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_2189C((char *)a1, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    unint64_t v9 = &v6;
    sub_217F8((void ***)&v9);
  }
  else
  {
    __n128 result = *a3;
    *(__n128 *)a1 = *a3;
    *(void *)(a1 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
  }
  return result;
}

uint64_t sub_4027D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_402814(const __CFDictionary **a1)
{
  CFDictionaryRef v2 = *a1;
  if (!v2) {
    goto LABEL_12;
  }
  LOWORD(v3) = sub_27F1CC(v2, (const UInt8 *)"calibrationMode");
  if ((unsigned __int16)v3 >= 0x100u)
  {
    int v5 = 1;
    return v3 | (v5 << 8);
  }
  if (!*a1)
  {
LABEL_12:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  CFNumberRef v3 = (const __CFNumber *)sub_D86AC(*a1, (const UInt8 *)"calibrationMode");
  if (v3)
  {
    CFNumberRef v3 = sub_22314(v3);
    unint64_t v4 = (unint64_t)v3 >> 32;
    if ((unint64_t)v3 >> 32) {
      LOBYTE(v3) = v3 != 0;
    }
    else {
      LOBYTE(v3) = 0;
    }
    int v5 = v4 != 0;
  }
  else
  {
    int v5 = 0;
  }
  return v3 | (v5 << 8);
}

void sub_4028E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_402900(uint64_t **a1, void **a2, uint64_t a3)
{
  __n128 result = sub_15DF8((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    char v6 = (uint64_t **)result;
    sub_F4468((uint64_t)&v7, (uint64_t)a1, a3);
    return sub_46CA8(a1, v8, v6, v7);
  }
  return result;
}

BOOL sub_402970(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_402990(uint64_t a1, void *a2)
{
  *a2 = off_63E328;
}

void *sub_4029B0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_63E328;
  return result;
}

void sub_4029E8()
{
}

BOOL sub_402A00(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_402A20(uint64_t a1, void *a2)
{
  *a2 = off_63E2E0;
}

void *sub_402A40()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_63E2E0;
  return result;
}

void sub_402A78()
{
}

uint64_t sub_402A90(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_402B04(uint64_t a1, void *a2)
{
  *a2 = off_63E298;
}

void *sub_402B24()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63E298;
  return result;
}

void sub_402B5C()
{
}

uint64_t sub_402B74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_402BAC(uint64_t a1, void *a2)
{
  *a2 = off_63E250;
}

void *sub_402BCC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63E250;
  return result;
}

void sub_402C04()
{
}

uint64_t sub_402C1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_402C54(uint64_t a1, void *a2)
{
  *a2 = off_63E208;
}

void *sub_402C74()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63E208;
  return result;
}

void sub_402CAC()
{
}

BOOL sub_402CC4(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_402CEC(uint64_t a1, void *a2)
{
  *a2 = off_63E1C0;
}

void *sub_402D0C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63E1C0;
  return result;
}

void sub_402D44()
{
}

uint64_t sub_402D5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_402D94(uint64_t a1, void *a2)
{
  *a2 = off_63E178;
}

void *sub_402DB4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63E178;
  return result;
}

void sub_402DEC()
{
}

#error "402E04: too big function (funcsize=0)"

void sub_42039C()
{
}

uint64_t sub_422E0C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    CFDictionaryRef v2 = (os_log_t *)sub_32A48(20);
    CFNumberRef v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_J98.cpp";
      __int16 v10 = 1024;
      int v11 = 760;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for spatial recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_J98.cpp";
        __int16 v10 = 1024;
        int v11 = 761;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_423004(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_423040(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    CFDictionaryRef v2 = (os_log_t *)sub_32A48(20);
    CFNumberRef v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_J98.cpp";
      __int16 v10 = 1024;
      int v11 = 772;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for multicam recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_J98.cpp";
        __int16 v10 = 1024;
        int v11 = 773;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_423238(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_423274(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    CFDictionaryRef v2 = (os_log_t *)sub_32A48(20);
    CFNumberRef v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      unint64_t v9 = "RoutingSettings_J98.cpp";
      __int16 v10 = 1024;
      int v11 = 811;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating subport config for webcam recording", (uint8_t *)&v8, 0x12u);
    }
    if (**(void **)(a1 + 8)) {
      operator new();
    }
    int v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "RoutingSettings_J98.cpp";
        __int16 v10 = 1024;
        int v11 = 812;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return 0;
}

void sub_42346C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4234A8()
{
  qword_668330 = 0;
  qword_668328 = (uint64_t)&qword_668330;
  qword_668348 = 0;
  qword_668338 = 0;
  unk_668340 = &qword_668348;
  qword_668368 = 0;
  qword_668360 = 0;
  qword_668350 = 0;
  unk_668358 = &qword_668360;
  return sub_37D10C((uint64_t **)&qword_668328, (uint64_t)&qword_668D60, qword_668050);
}

void sub_423508(_Unwind_Exception *a1)
{
}

uint64_t sub_423520()
{
  qword_668380 = 0;
  qword_668378 = (uint64_t)&qword_668380;
  qword_668398 = 0;
  qword_668388 = 0;
  unk_668390 = &qword_668398;
  qword_6683B8 = 0;
  qword_6683B0 = 0;
  qword_6683A0 = 0;
  unk_6683A8 = &qword_6683B0;
  sub_E5310((uint64_t)v1, 1, 1768776806, 1634231920);
  sub_37D10C((uint64_t **)&qword_668378, (uint64_t)v1, qword_668030);
  if (__p)
  {
    CFNumberRef v3 = __p;
    operator delete(__p);
  }
  return sub_37D10C((uint64_t **)&qword_668378, (uint64_t)&qword_668D60, qword_668028);
}

void sub_4235D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_423608()
{
  qword_6683D0 = 0;
  qword_6683C8 = (uint64_t)&qword_6683D0;
  qword_6683E8 = 0;
  qword_6683D8 = 0;
  unk_6683E0 = &qword_6683E8;
  qword_668408 = 0;
  qword_668400 = 0;
  qword_6683F0 = 0;
  unk_6683F8 = &qword_668400;
  sub_E5310((uint64_t)v0, 1, 1768776806, 1634231920);
  sub_37D10C((uint64_t **)&qword_6683C8, (uint64_t)v0, qword_667F10);
  if (__p)
  {
    CFDictionaryRef v2 = __p;
    operator delete(__p);
  }
}

void sub_4236A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_6683C8);
  _Unwind_Resume(a1);
}

void sub_4236D0()
{
  qword_668420 = 0;
  qword_668418 = (uint64_t)&qword_668420;
  qword_668438 = 0;
  qword_668428 = 0;
  unk_668430 = &qword_668438;
  qword_668458 = 0;
  qword_668450 = 0;
  qword_668440 = 0;
  unk_668448 = &qword_668450;
  sub_E5310((uint64_t)v0, 1, 1768776806, 1634231920);
  sub_37D10C((uint64_t **)&qword_668418, (uint64_t)v0, qword_667F08);
  if (__p)
  {
    CFDictionaryRef v2 = __p;
    operator delete(__p);
  }
}

void sub_423768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_668418);
  _Unwind_Resume(a1);
}

uint64_t sub_423798()
{
  qword_668470 = 0;
  qword_668468 = (uint64_t)&qword_668470;
  qword_668488 = 0;
  qword_668478 = 0;
  unk_668480 = &qword_668488;
  qword_6684A8 = 0;
  qword_6684A0 = 0;
  qword_668490 = 0;
  unk_668498 = &qword_6684A0;
  sub_37D10C((uint64_t **)&qword_668468, (uint64_t)&qword_668D60, qword_667D50);
  sub_37E264((uint64_t)&qword_668468, 6);
  sub_37EBCC((uint64_t)&qword_668468, (int *)&qword_668D60, 2);
  return sub_37E544((uint64_t)&qword_668468, (int *)&qword_668D60, qword_667820, dword_667898);
}

void sub_423844(_Unwind_Exception *a1)
{
}

uint64_t sub_42385C()
{
  qword_6684C0 = 0;
  qword_6684B8 = (uint64_t)&qword_6684C0;
  qword_6684D8 = 0;
  qword_6684C8 = 0;
  unk_6684D0 = &qword_6684D8;
  qword_6684F8 = 0;
  qword_6684F0 = 0;
  qword_6684E0 = 0;
  unk_6684E8 = &qword_6684F0;
  sub_37D10C((uint64_t **)&qword_6684B8, (uint64_t)&qword_668D60, qword_667D60);
  sub_37E264((uint64_t)&qword_6684B8, 6);
  sub_37EBCC((uint64_t)&qword_6684B8, (int *)&qword_668D60, 2);
  return sub_37E544((uint64_t)&qword_6684B8, (int *)&qword_668D60, qword_667820, dword_667898);
}

void sub_423908(_Unwind_Exception *a1)
{
}

uint64_t sub_423920()
{
  qword_668510 = 0;
  qword_668508 = (uint64_t)&qword_668510;
  qword_668528 = 0;
  qword_668518 = 0;
  unk_668520 = &qword_668528;
  qword_668548 = 0;
  qword_668540 = 0;
  qword_668530 = 0;
  unk_668538 = &qword_668540;
  sub_37D10C((uint64_t **)&qword_668508, (uint64_t)&qword_668D60, (uint64_t)&unk_667D70);
  sub_37EBCC((uint64_t)&qword_668508, (int *)&qword_668D60, 2);
  return sub_37E544((uint64_t)&qword_668508, (int *)&qword_668D60, qword_667820, dword_667898);
}

void sub_4239BC(_Unwind_Exception *a1)
{
}

uint64_t sub_4239D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFNumberRef v3 = (uint64_t **)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = a2 + 32;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = a2 + 56;
  sub_37D10C((uint64_t **)a2, (uint64_t)&qword_668D60, qword_667C48);
  *(void *)AudioObjectPropertyAddress buf = 0x696D646600000001;
  *(void *)&_DWORD buf[8] = 1;
  *(_DWORD *)&buf[16] = 0;
  int v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_37D10C(v3, (uint64_t)buf, qword_667C58);
  *(void *)AudioObjectPropertyAddress buf = 0x6D6F767000000001;
  *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
  int v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_37D10C(v3, (uint64_t)buf, qword_667C68);
  *(void *)AudioObjectPropertyAddress buf = 0x6D6F767000000001;
  *(void *)&_DWORD buf[8] = 1;
  *(_DWORD *)&buf[16] = 0;
  int v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_37D10C(v3, (uint64_t)buf, qword_667C78);
  *(void *)AudioObjectPropertyAddress buf = 0x6D736D7400000001;
  *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
  int v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_37D10C(v3, (uint64_t)buf, qword_667C88);
  *(void *)AudioObjectPropertyAddress buf = 0x7261772000000001;
  *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
  int v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_37D10C(v3, (uint64_t)buf, qword_667C98);
  if (sub_209D00())
  {
    *(void *)AudioObjectPropertyAddress buf = 0x6D706D7500000001;
    *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
    int v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    sub_37D10C(v3, (uint64_t)buf, (uint64_t)&unk_667CA8);
  }
  uint64_t v4 = 0;
  qmemcpy(v20, "comicvmitcmg", 12);
  do
  {
    int v5 = *(_DWORD *)((char *)v20 + v4);
    *(_DWORD *)AudioObjectPropertyAddress buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
    int v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    sub_37D10C(v3, (uint64_t)buf, qword_667D30);
    v4 += 4;
  }
  while (v4 != 12);
  uint64_t v6 = 0;
  CFTypeID v7 = "ovpvivpvcgpvcvmrsibikniobolg";
  int v8 = &unk_667000;
  unint64_t v9 = "";
  do
  {
    int v10 = *(_DWORD *)&v7[v6];
    *(_DWORD *)AudioObjectPropertyAddress buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
    int v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    sub_37D10C(v3, (uint64_t)buf, v8[424]);
    *(_DWORD *)AudioObjectPropertyAddress buf = 1;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
    int v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    sub_37E544((uint64_t)v3, (int *)buf, (uint64_t)v9, 0);
    if (!*(unsigned char *)(a1 + 720))
    {
      uint64_t v11 = (uint64_t)v3;
      if (!*(unsigned char *)(a1 + 308))
      {
        uint64_t v17 = (os_log_t *)sub_32A48(13);
        char v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingSettings_J98.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 1175;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      __n128 v12 = v9;
      uint64_t v13 = v8;
      CFTypeRef v14 = v7;
      int v15 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)AudioObjectPropertyAddress buf = 1;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_3AEE60();
      int v22 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v23 = 0;
      sub_37EBCC(v11, (int *)buf, v15);
      CFTypeID v7 = v14;
      int v8 = v13;
      unint64_t v9 = v12;
      CFNumberRef v3 = (uint64_t **)v11;
    }
    v6 += 4;
  }
  while (v6 != 20);
  sub_37E544((uint64_t)v3, (int *)&qword_668D60, qword_667820, dword_667898);
  return sub_37EBCC((uint64_t)v3, (int *)&qword_668D60, 2);
}

void sub_423E34(_Unwind_Exception *a1)
{
  sub_FE10C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_423EB0()
{
  qword_6686F0 = 0;
  qword_6686E8 = (uint64_t)&qword_6686F0;
  qword_668708 = 0;
  qword_6686F8 = 0;
  unk_668700 = &qword_668708;
  qword_668728 = 0;
  qword_668720 = 0;
  qword_668710 = 0;
  unk_668718 = &qword_668720;
  sub_37D10C((uint64_t **)&qword_6686E8, (uint64_t)&qword_668D60, qword_667E48);
  return sub_37E544((uint64_t)&qword_6686E8, (int *)&qword_668D60, (uint64_t)&unk_5966C0, 0);
}

void sub_423F30(_Unwind_Exception *a1)
{
}

void sub_423F48()
{
  qword_668740 = 0;
  qword_668738 = (uint64_t)&qword_668740;
  qword_668758 = 0;
  qword_668748 = 0;
  unk_668750 = &qword_668758;
  qword_668778 = 0;
  qword_668770 = 0;
  qword_668760 = 0;
  unk_668768 = &qword_668770;
  sub_37D10C((uint64_t **)&qword_668738, (uint64_t)&qword_668D60, qword_668010);
  sub_37E544((uint64_t)&qword_668738, (int *)&qword_668D60, (uint64_t)&dword_667868, 0);
  sub_E5310((uint64_t)v4, 1, 1768776806, 1633759844);
  DWORD2(v0) = 0;
  *(void *)&long long v0 = 2;
  sub_19C2F8((uint64_t)v1, 1768776806, &v0, 1633759844);
  sub_37D10C((uint64_t **)&qword_668738, (uint64_t)v4, qword_668010);
  sub_37D10C((uint64_t **)&qword_668738, (uint64_t)v1, qword_667E48);
  sub_37E544((uint64_t)&qword_668738, v4, (uint64_t)&unk_5966C0, 0);
  sub_37E544((uint64_t)&qword_668738, v1, (uint64_t)&unk_5966C0, 0);
  sub_37E544((uint64_t)&qword_668738, v4, (uint64_t)&unk_596690, 1);
  sub_37E544((uint64_t)&qword_668738, v1, (uint64_t)&unk_596690, 1);
  if (__p)
  {
    CFNumberRef v3 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
}

void sub_4240D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_FE10C((void **)&qword_668738);
  _Unwind_Resume(a1);
}

char *sub_42411C(char **a1, uint64_t a2, int a3, uint64_t a4)
{
  *a1 = (char *)a1;
  a1[1] = (char *)a1;
  a1[2] = 0;
  *((_DWORD *)a1 + 6) = 3;
  a1[6] = 0;
  a1[5] = 0;
  a1[4] = (char *)(a1 + 5);
  *((_DWORD *)a1 + 14) = 3;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = 0;
  a1[8] = (char *)(a1 + 9);
  a1[14] = 0;
  a1[13] = 0;
  a1[12] = (char *)(a1 + 13);
  int v8 = operator new(0x38uLL);
  v8[2] = 0x706C6F7570617020;
  uint64_t v9 = 1;
  *((unsigned char *)v8 + 24) = 1;
  void v8[4] = &qword_668DD0;
  *((unsigned char *)v8 + 40) = 0;
  *((unsigned char *)v8 + 48) = 0;
  *int v8 = a1;
  v8[1] = a1;
  *a1 = (char *)v8;
  a1[1] = (char *)v8;
  a1[2] = (unsigned char *)(&def_1E50E8 + 1);
  if (!*(unsigned char *)(a2 + 8))
  {
    int v10 = operator new(0x38uLL);
    void v10[2] = 0x7073706B70617020;
    *((unsigned char *)v10 + 24) = 1;
    v10[4] = a4;
    *((unsigned char *)v10 + 40) = 0;
    *((unsigned char *)v10 + 48) = 0;
    *int v10 = v8;
    v10[1] = a1;
    v8[1] = v10;
    *a1 = (char *)v10;
    uint64_t v9 = 2;
    a1[2] = (unsigned char *)(&def_1E50E8 + 2);
    int v8 = v10;
  }
  uint64_t v11 = operator new(0x38uLL);
  v11[2] = 0x7068646D70617020;
  *((unsigned char *)v11 + 24) = 1;
  v11[4] = &qword_668DD0;
  *((unsigned char *)v11 + 40) = 0;
  *((unsigned char *)v11 + 48) = 0;
  void *v11 = v8;
  v11[1] = a1;
  v8[1] = v11;
  *a1 = (char *)v11;
  a1[2] = (char *)(v9 + 1);
  __n128 v12 = operator new(0x38uLL);
  void v12[2] = 0x7064737070617020;
  *((unsigned char *)v12 + 24) = 1;
  v12[4] = &qword_668DD0;
  *((unsigned char *)v12 + 40) = 0;
  *((unsigned char *)v12 + 48) = 0;
  *__n128 v12 = v11;
  v12[1] = a1;
  v11[1] = v12;
  *a1 = (char *)v12;
  a1[2] = (char *)(v9 + 2);
  uint64_t v13 = operator new(0x38uLL);
  void v13[2] = 0x7075736F70617020;
  *((unsigned char *)v13 + 24) = 1;
  v13[4] = &qword_668DD0;
  *((unsigned char *)v13 + 40) = 0;
  *((unsigned char *)v13 + 48) = 0;
  *uint64_t v13 = v12;
  v13[1] = a1;
  v12[1] = v13;
  *a1 = (char *)v13;
  a1[2] = (char *)(v9 + 3);
  CFTypeRef v14 = operator new(0x38uLL);
  void v14[2] = 0x7074626F70617020;
  *((unsigned char *)v14 + 24) = 1;
  v14[4] = &qword_668DD0;
  *((unsigned char *)v14 + 40) = 0;
  *((unsigned char *)v14 + 48) = 0;
  *CFTypeRef v14 = v13;
  v14[1] = a1;
  v13[1] = v14;
  *a1 = (char *)v14;
  a1[2] = (char *)(v9 | 4);
  if (a3)
  {
    if (a3 == 3)
    {
      CFTypeID v30 = operator new(0x38uLL);
      v30[2] = 0x7068707770617020;
      *((unsigned char *)v30 + 24) = 1;
      v30[4] = &qword_668328;
      *((unsigned char *)v30 + 40) = 0;
      *((unsigned char *)v30 + 48) = 0;
      void *v30 = v14;
      v30[1] = a1;
      v14[1] = v30;
      *a1 = (char *)v30;
      a1[2] = (char *)(v9 + 5);
      uint64_t v31 = operator new(0x38uLL);
      v31[2] = 0x7068706270617020;
      *((unsigned char *)v31 + 24) = 1;
      v31[4] = &qword_6683C8;
      v31[5] = &qword_661C98;
      *((unsigned char *)v31 + 48) = 1;
      *uint64_t v31 = v30;
      v31[1] = a1;
      v30[1] = v31;
      *a1 = (char *)v31;
      a1[2] = (char *)(v9 + 6);
      int v19 = operator new(0x38uLL);
      v19[2] = 0x7068706270617020;
      *((unsigned char *)v19 + 24) = 1;
      v19[4] = &qword_668378;
      v19[5] = &qword_661CA8;
      *((unsigned char *)v19 + 48) = 1;
      *int v19 = v31;
      v19[1] = a1;
      v31[1] = v19;
      uint64_t v20 = v9 + 7;
      *a1 = (char *)v19;
    }
    else if (a3 == 2)
    {
      int v15 = operator new(0x38uLL);
      _OWORD v15[2] = 0x7068707770617020;
      *((unsigned char *)v15 + 24) = 1;
      v15[4] = &unk_6682D8;
      *((unsigned char *)v15 + 40) = 0;
      *((unsigned char *)v15 + 48) = 0;
      *int v15 = v14;
      v15[1] = a1;
      v14[1] = v15;
      *a1 = (char *)v15;
      a1[2] = (char *)(v9 + 5);
      char v16 = operator new(0x38uLL);
      v16[2] = 0x706C656F70617020;
      *((unsigned char *)v16 + 24) = 1;
      v16[4] = &qword_668DD0;
      *((unsigned char *)v16 + 40) = 0;
      *((unsigned char *)v16 + 48) = 0;
      *char v16 = v15;
      v16[1] = a1;
      v15[1] = v16;
      *a1 = (char *)v16;
      a1[2] = (char *)(v9 + 6);
      uint64_t v17 = operator new(0x38uLL);
      v17[2] = 0x7068704270617020;
      *((unsigned char *)v17 + 24) = 1;
      v17[4] = &unk_6682D8;
      *((unsigned char *)v17 + 40) = 0;
      *((unsigned char *)v17 + 48) = 0;
      *uint64_t v17 = v16;
      v17[1] = a1;
      v16[1] = v17;
      *a1 = (char *)v17;
      a1[2] = (char *)(v9 + 7);
      uint64_t v18 = qword_6687D8;
      int v19 = operator new(0x38uLL);
      v19[2] = 0x7073746F70617020;
      *((unsigned char *)v19 + 24) = 1;
      v19[4] = v18;
      *((unsigned char *)v19 + 40) = 0;
      *((unsigned char *)v19 + 48) = 0;
      *int v19 = v17;
      v19[1] = a1;
      v17[1] = v19;
      *a1 = (char *)v19;
      uint64_t v20 = v9 | 8;
    }
    else
    {
      unsigned int v32 = operator new(0x38uLL);
      v32[2] = 0x7068707770617020;
      *((unsigned char *)v32 + 24) = 1;
      v32[4] = &unk_6682D8;
      *((unsigned char *)v32 + 40) = 0;
      *((unsigned char *)v32 + 48) = 0;
      void *v32 = v14;
      v32[1] = a1;
      v14[1] = v32;
      *a1 = (char *)v32;
      a1[2] = (char *)(v9 + 5);
      id v33 = operator new(0x38uLL);
      v33[2] = 0x706C656F70617020;
      *((unsigned char *)v33 + 24) = 1;
      v33[4] = &qword_668DD0;
      *((unsigned char *)v33 + 40) = 0;
      *((unsigned char *)v33 + 48) = 0;
      *id v33 = v32;
      v33[1] = a1;
      v32[1] = v33;
      *a1 = (char *)v33;
      a1[2] = (char *)(v9 + 6);
      uint64_t v34 = qword_6687D8;
      int v19 = operator new(0x38uLL);
      v19[2] = 0x7073746F70617020;
      *((unsigned char *)v19 + 24) = 1;
      v19[4] = v34;
      *((unsigned char *)v19 + 40) = 0;
      *((unsigned char *)v19 + 48) = 0;
      *int v19 = v33;
      v19[1] = a1;
      v33[1] = v19;
      *a1 = (char *)v19;
      uint64_t v20 = v9 + 7;
    }
  }
  else
  {
    CFIndex v21 = operator new(0x38uLL);
    v21[2] = 0x7068707770617020;
    *((unsigned char *)v21 + 24) = 1;
    v21[4] = &unk_6682D8;
    *((unsigned char *)v21 + 40) = 0;
    *((unsigned char *)v21 + 48) = 0;
    void *v21 = v14;
    v21[1] = a1;
    v14[1] = v21;
    *a1 = (char *)v21;
    a1[2] = (char *)(v9 + 5);
    int v22 = operator new(0x38uLL);
    v22[2] = 0x706C656F70617020;
    *((unsigned char *)v22 + 24) = 1;
    v22[4] = &qword_668DD0;
    *((unsigned char *)v22 + 40) = 0;
    *((unsigned char *)v22 + 48) = 0;
    *int v22 = v21;
    v22[1] = a1;
    v21[1] = v22;
    *a1 = (char *)v22;
    a1[2] = (char *)(v9 + 6);
    if (_os_feature_enabled_impl())
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_668928, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_668928))
      {
        sub_2DA18C((uint64_t)&unk_6688F8);
        __cxa_guard_release(&qword_668928);
      }
      uint64_t v23 = operator new(0x38uLL);
      void v23[2] = 0x7068704270617020;
      *((unsigned char *)v23 + 24) = 1;
      v23[4] = &unk_6682D8;
      v23[5] = &unk_6688F8;
      *((unsigned char *)v23 + 48) = 1;
      uint64_t v24 = *a1;
      void *v23 = *a1;
      v23[1] = a1;
      *((void *)v24 + 1) = v23;
      *a1 = (char *)v23;
      ++a1[2];
    }
    uint64_t v25 = operator new(0x38uLL);
    void v25[2] = 0x7068706270617020;
    *((unsigned char *)v25 + 24) = 1;
    int v25[4] = &qword_668418;
    v25[5] = &qword_661C98;
    *((unsigned char *)v25 + 48) = 1;
    uint64_t v26 = *a1;
    void *v25 = *a1;
    v25[1] = a1;
    *((void *)v26 + 1) = v25;
    *a1 = (char *)v25;
    uint64_t v27 = a1[2];
    a1[2] = v27 + 1;
    char v28 = operator new(0x38uLL);
    uint64_t v28[2] = 0x7068706270617020;
    *((unsigned char *)v28 + 24) = 1;
    v28[4] = &unk_6682D8;
    v28[5] = &qword_661CA8;
    *((unsigned char *)v28 + 48) = 1;
    void *v28 = v25;
    v28[1] = a1;
    v25[1] = v28;
    *a1 = (char *)v28;
    a1[2] = v27 + 2;
    uint64_t v29 = qword_6687D8;
    int v19 = operator new(0x38uLL);
    v19[2] = 0x7073746F70617020;
    *((unsigned char *)v19 + 24) = 1;
    v19[4] = v29;
    *((unsigned char *)v19 + 40) = 0;
    *((unsigned char *)v19 + 48) = 0;
    *int v19 = v28;
    v19[1] = a1;
    v28[1] = v19;
    *a1 = (char *)v19;
    uint64_t v20 = (uint64_t)(v27 + 3);
  }
  a1[2] = (char *)v20;
  uint64_t v35 = (char *)operator new(0x38uLL);
  strcpy(v35 + 16, " paplunp");
  *((void *)v35 + 4) = &qword_668DD0;
  v35[40] = 0;
  v35[48] = 0;
  *(void *)uint64_t v35 = v19;
  *((void *)v35 + 1) = a1;
  v19[1] = v35;
  *a1 = v35;
  a1[2] = (char *)(v20 + 1);
  sub_333F2C();
  __int16 v36 = *(unsigned int ***)a2;
  if (a3)
  {
    uint64_t v39 = qword_65A3B0;
    long long v40 = 0;
    uint64_t v44 = 0x1200000001;
    int v45 = 3;
    uint64_t v41 = 0;
    long long v42 = &v44;
    uint64_t v43 = 3;
    uint64_t result = (char *)sub_33D908(v36, (uint64_t *)&v39);
  }
  else
  {
    int v38 = 22;
    uint64_t v39 = qword_65A3B0;
    long long v40 = &v38;
    uint64_t v44 = 0x1200000001;
    int v45 = 3;
    uint64_t v41 = 1;
    long long v42 = &v44;
    uint64_t v43 = 3;
    uint64_t result = (char *)sub_33D908(v36, (uint64_t *)&v39);
  }
  a1[11] = result;
  return result;
}

void sub_4248C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_668928);
  sub_FD7AC(v1);
  _Unwind_Resume(a1);
}

void sub_424954(uint64_t a1)
{
  __chkstk_darwin(a1);
  CFDictionaryRef v2 = v1;
  uint64_t v4 = v3;
  int v377 = 1;
  v375 = 0;
  v374 = 0;
  uint64_t v376 = 0;
  __int16 v174 = v5;
  sub_42BE48(*v5, v5[1], (uint64_t)&v374);
  sub_42BE48(*v2, v2[1], (uint64_t)&v374);
  sub_21C8C(v372, "speaker_general");
  sub_21C8C(&v349, "speaker_general");
  uint64_t v351 = 0;
  uint64_t v350 = 0;
  uint64_t v352 = 0;
  sub_21C8C(v353, "speaker_general");
  sub_21C8C(v354, "speaker_general");
  memset(&v354[3], 0, 24);
  int v355 = 1668051824;
  CFTypeRef v348 = 0;
  v1063[0] = 1936749683;
  uint64_t v1064 = 0;
  uint64_t v6 = operator new(0xCuLL);
  v1060 = (char *)(v6 + 3);
  *(void *)uint64_t v6 = 0x6473706700000001;
  v6[2] = 1869768046;
  v1058 = v6;
  v1059 = v6 + 3;
  v345 = 0;
  v343 = 0;
  v344 = 0;
  *(void *)&long long v1034 = &v343;
  BYTE8(v1034) = 0;
  v343 = operator new(0x18uLL);
  v344 = v343;
  v345 = v343 + 3;
  v344 = sub_1CDC20((uint64_t)&v345, (uint64_t)&v1058, (uint64_t)&v1061, v343);
  sub_1CDCD4((uint64_t)&v1061, (uint64_t *)&v343);
  v346[0] = &v1061;
  v346[1] = 1;
  CFDictionaryRef v7 = sub_4D3D8((uint64_t)v346);
  uint64_t v172 = v4;
  int v173 = v2;
  int v1065 = 1768907891;
  CFDictionaryRef v1066 = v7;
  CFTypeRef v347 = 0;
  v357 = 0;
  v358 = 0;
  v356 = 0;
  *(void *)&long long v1034 = &v356;
  BYTE8(v1034) = 0;
  int v8 = (char *)operator new(0x20uLL);
  uint64_t v9 = 0;
  v356 = v8;
  v357 = v8;
  v358 = v8 + 32;
  do
  {
    sub_6D16C((uint64_t)&v8[v9 * 4], v1063[v9], *(CFTypeRef *)&v1063[v9 + 2]);
    v9 += 4;
  }
  while (v9 != 8);
  v357 = v8 + 32;
  long long v359 = 0u;
  long long v360 = 0u;
  int v10 = (char *)operator new(0xCuLL);
  qmemcpy(v10, "ulovlovllovt", 12);
  *((void *)&v359 + 1) = v10;
  *(void *)&long long v360 = v10 + 12;
  v362[0] = 0;
  v362[1] = 0;
  *((void *)&v360 + 1) = v10 + 12;
  v361 = v362;
  v365 = 0;
  v363 = 0;
  v364 = 0;
  uint64_t v11 = operator new(0x10uLL);
  v363 = v11;
  _OWORD *v11 = xmmword_4E78D0;
  v365 = v11 + 1;
  v364 = v11 + 1;
  char v366 = 0;
  char v367 = 0;
  memset(v368, 0, sizeof(v368));
  uint64_t v369 = 0;
  long long v1034 = xmmword_5968C4;
  uint64_t v1035 = 2;
  sub_6D1AC((uint64_t)v368, (int *)&v1034, 3);
  char v370 = 0;
  uint64_t v371 = 0;
  sub_6D224(v1067, (long long *)v372, &v349);
  sub_21C8C(v341, "speaker_latenight_general");
  sub_21C8C(&v1034, "speaker_general");
  uint64_t v1037 = 0;
  uint64_t v1036 = 0;
  uint64_t v1038 = 0;
  sub_21C8C(v1039, "speaker_latenight_general");
  sub_21C8C(v1040, "speaker_general");
  memset(&v1040[3], 0, 24);
  int v1041 = 1668051824;
  CFTypeRef v340 = 0;
  v1030[0] = 1936749683;
  uint64_t v1031 = 0;
  __n128 v12 = operator new(0xCuLL);
  v1027 = (char *)(v12 + 3);
  *(void *)__n128 v12 = 0x6473706700000001;
  void v12[2] = 1869768046;
  v1025 = v12;
  v1026 = v12 + 3;
  v337 = 0;
  v335 = 0;
  v336 = 0;
  *(void *)&long long v1001 = &v335;
  BYTE8(v1001) = 0;
  v335 = operator new(0x18uLL);
  v336 = v335;
  v337 = v335 + 3;
  v336 = sub_1CDC20((uint64_t)&v337, (uint64_t)&v1025, (uint64_t)&v1028, v335);
  sub_1CDCD4((uint64_t)&v1028, (uint64_t *)&v335);
  v338[0] = &v1028;
  v338[1] = 1;
  CFDictionaryRef v13 = sub_4D3D8((uint64_t)v338);
  int v1032 = 1768907891;
  CFDictionaryRef v1033 = v13;
  CFTypeRef v339 = 0;
  v1043 = 0;
  v1044 = 0;
  v1042 = 0;
  *(void *)&long long v1001 = &v1042;
  BYTE8(v1001) = 0;
  CFTypeRef v14 = (char *)operator new(0x20uLL);
  uint64_t v15 = 0;
  v1042 = v14;
  v1043 = v14;
  v1044 = v14 + 32;
  do
  {
    sub_6D16C((uint64_t)&v14[v15 * 4], v1030[v15], *(CFTypeRef *)&v1030[v15 + 2]);
    v15 += 4;
  }
  while (v15 != 8);
  v1043 = v14 + 32;
  long long v1045 = 0u;
  long long v1046 = 0u;
  char v16 = (char *)operator new(0xCuLL);
  qmemcpy(v16, "ulovlovllovt", 12);
  *((void *)&v1045 + 1) = v16;
  *(void *)&long long v1046 = v16 + 12;
  v1048[0] = 0;
  v1048[1] = 0;
  *((void *)&v1046 + 1) = v16 + 12;
  v1047 = v1048;
  v1051 = 0;
  v1049 = 0;
  v1050 = 0;
  uint64_t v17 = operator new(0x10uLL);
  v1049 = v17;
  *uint64_t v17 = xmmword_4E78D0;
  v1051 = v17 + 1;
  v1050 = v17 + 1;
  char v1052 = 0;
  char v1053 = 0;
  memset(v1054, 0, sizeof(v1054));
  uint64_t v1055 = 0;
  long long v1001 = xmmword_5968C4;
  uint64_t v1002 = 2;
  sub_6D1AC((uint64_t)v1054, (int *)&v1001, 3);
  char v1056 = 0;
  uint64_t v1057 = 0;
  sub_6D224(v1068, (long long *)v341, &v1034);
  sub_21C8C(v333, "speaker_movie");
  sub_21C8C(&v1001, "speaker_general");
  uint64_t v1004 = 0;
  uint64_t v1003 = 0;
  uint64_t v1005 = 0;
  sub_21C8C(v1006, "speaker_movie");
  sub_21C8C(v1007, "speaker_general");
  memset(&v1007[3], 0, 24);
  int v1008 = 1668051824;
  CFTypeRef v332 = 0;
  v997[0] = 1936749683;
  uint64_t v998 = 0;
  uint64_t v18 = operator new(0xCuLL);
  v994 = (char *)(v18 + 3);
  *(void *)uint64_t v18 = 0x6473706700000001;
  v18[2] = 1869768046;
  v992 = v18;
  v993 = v18 + 3;
  v329 = 0;
  v327 = 0;
  v328 = 0;
  *(void *)&long long v968 = &v327;
  BYTE8(v968) = 0;
  v327 = operator new(0x18uLL);
  v328 = v327;
  v329 = v327 + 3;
  v328 = sub_1CDC20((uint64_t)&v329, (uint64_t)&v992, (uint64_t)&v995, v327);
  sub_1CDCD4((uint64_t)&v995, (uint64_t *)&v327);
  v330[0] = &v995;
  v330[1] = 1;
  CFDictionaryRef v19 = sub_4D3D8((uint64_t)v330);
  int v999 = 1768907891;
  CFDictionaryRef v1000 = v19;
  CFTypeRef v331 = 0;
  v1010 = 0;
  v1011 = 0;
  v1009 = 0;
  *(void *)&long long v968 = &v1009;
  BYTE8(v968) = 0;
  uint64_t v20 = (char *)operator new(0x20uLL);
  uint64_t v21 = 0;
  v1009 = v20;
  v1010 = v20;
  v1011 = v20 + 32;
  do
  {
    sub_6D16C((uint64_t)&v20[v21 * 4], v997[v21], *(CFTypeRef *)&v997[v21 + 2]);
    v21 += 4;
  }
  while (v21 != 8);
  v1010 = v20 + 32;
  long long v1012 = 0u;
  long long v1013 = 0u;
  int v22 = (char *)operator new(0xCuLL);
  qmemcpy(v22, "ulovlovllovt", 12);
  *((void *)&v1012 + 1) = v22;
  *(void *)&long long v1013 = v22 + 12;
  v1015[0] = 0;
  v1015[1] = 0;
  *((void *)&v1013 + 1) = v22 + 12;
  v1014 = v1015;
  v1018 = 0;
  v1016 = 0;
  v1017 = 0;
  uint64_t v23 = operator new(0x10uLL);
  v1016 = v23;
  _OWORD *v23 = xmmword_4E78D0;
  v1018 = v23 + 1;
  v1017 = v23 + 1;
  char v1019 = 0;
  char v1020 = 0;
  memset(v1021, 0, sizeof(v1021));
  uint64_t v1022 = 0;
  long long v968 = xmmword_5968C4;
  uint64_t v969 = 2;
  sub_6D1AC((uint64_t)v1021, (int *)&v968, 3);
  char v1023 = 0;
  uint64_t v1024 = 0;
  sub_6D224(v1069, (long long *)v333, &v1001);
  sub_21C8C(v325, "speaker_latenight_movie");
  sub_21C8C(&v968, "speaker_general");
  uint64_t v971 = 0;
  uint64_t v970 = 0;
  uint64_t v972 = 0;
  sub_21C8C(v973, "speaker_latenight_movie");
  sub_21C8C(v974, "speaker_general");
  memset(&v974[3], 0, 24);
  int v975 = 1668051824;
  CFTypeRef v324 = 0;
  v964[0] = 1936749683;
  uint64_t v965 = 0;
  uint64_t v24 = operator new(0xCuLL);
  v961 = (char *)(v24 + 3);
  *(void *)uint64_t v24 = 0x6473706700000001;
  void v24[2] = 1869768046;
  v959 = v24;
  v960 = v24 + 3;
  v321 = 0;
  v319 = 0;
  v320 = 0;
  *(void *)&long long v935 = &v319;
  BYTE8(v935) = 0;
  v319 = operator new(0x18uLL);
  v320 = v319;
  v321 = v319 + 3;
  v320 = sub_1CDC20((uint64_t)&v321, (uint64_t)&v959, (uint64_t)&v962, v319);
  sub_1CDCD4((uint64_t)&v962, (uint64_t *)&v319);
  v322[0] = &v962;
  v322[1] = 1;
  CFDictionaryRef v25 = sub_4D3D8((uint64_t)v322);
  int v966 = 1768907891;
  CFDictionaryRef v967 = v25;
  CFTypeRef v323 = 0;
  v977 = 0;
  v978 = 0;
  v976 = 0;
  *(void *)&long long v935 = &v976;
  BYTE8(v935) = 0;
  uint64_t v26 = (char *)operator new(0x20uLL);
  uint64_t v27 = 0;
  v976 = v26;
  v977 = v26;
  v978 = v26 + 32;
  do
  {
    sub_6D16C((uint64_t)&v26[v27 * 4], v964[v27], *(CFTypeRef *)&v964[v27 + 2]);
    v27 += 4;
  }
  while (v27 != 8);
  v977 = v26 + 32;
  long long v979 = 0u;
  long long v980 = 0u;
  char v28 = (char *)operator new(0xCuLL);
  qmemcpy(v28, "ulovlovllovt", 12);
  *((void *)&v979 + 1) = v28;
  *(void *)&long long v980 = v28 + 12;
  v982[0] = 0;
  v982[1] = 0;
  *((void *)&v980 + 1) = v28 + 12;
  v981 = v982;
  v985 = 0;
  v983 = 0;
  v984 = 0;
  uint64_t v29 = operator new(0x10uLL);
  v983 = v29;
  *uint64_t v29 = xmmword_4E78D0;
  v985 = v29 + 1;
  v984 = v29 + 1;
  char v986 = 0;
  char v987 = 0;
  memset(v988, 0, sizeof(v988));
  uint64_t v989 = 0;
  long long v935 = xmmword_5968C4;
  uint64_t v936 = 2;
  sub_6D1AC((uint64_t)v988, (int *)&v935, 3);
  char v990 = 0;
  uint64_t v991 = 0;
  sub_6D224(v1070, (long long *)v325, &v968);
  sub_21C8C(v317, "speaker_measurement");
  sub_21C8C(&v935, "speaker_measurement");
  uint64_t v938 = 0;
  uint64_t v937 = 0;
  uint64_t v939 = 0;
  sub_21C8C(v940, "speaker_measurement");
  sub_21C8C(v941, "speaker_measurement");
  memset(&v941[3], 0, 24);
  int v942 = 1668051824;
  CFTypeRef v316 = 0;
  v931[0] = 1936749683;
  uint64_t v932 = 0;
  CFTypeID v30 = operator new(0xCuLL);
  v928 = (char *)(v30 + 3);
  *(void *)CFTypeID v30 = 0x6473706700000001;
  v30[2] = 1869768046;
  v926 = v30;
  v927 = v30 + 3;
  v313 = 0;
  v311 = 0;
  v312 = 0;
  *(void *)&long long v902 = &v311;
  BYTE8(v902) = 0;
  v311 = operator new(0x18uLL);
  v312 = v311;
  v313 = v311 + 3;
  v312 = sub_1CDC20((uint64_t)&v313, (uint64_t)&v926, (uint64_t)&v929, v311);
  sub_1CDCD4((uint64_t)&v929, (uint64_t *)&v311);
  v314[0] = &v929;
  v314[1] = 1;
  CFDictionaryRef v31 = sub_4D3D8((uint64_t)v314);
  int v933 = 1768907891;
  CFDictionaryRef v934 = v31;
  CFTypeRef v315 = 0;
  v944 = 0;
  v945 = 0;
  v943 = 0;
  *(void *)&long long v902 = &v943;
  BYTE8(v902) = 0;
  unsigned int v32 = (char *)operator new(0x20uLL);
  uint64_t v33 = 0;
  v943 = v32;
  v944 = v32;
  v945 = v32 + 32;
  do
  {
    sub_6D16C((uint64_t)&v32[v33 * 4], v931[v33], *(CFTypeRef *)&v931[v33 + 2]);
    v33 += 4;
  }
  while (v33 != 8);
  v944 = v32 + 32;
  long long v946 = 0u;
  long long v947 = 0u;
  uint64_t v34 = operator new(8uLL);
  *((void *)&v946 + 1) = v34;
  void *v34 = 0x74766F6C76756764;
  *((void *)&v947 + 1) = v34 + 1;
  *(void *)&long long v947 = v34 + 1;
  v949[0] = 0;
  v949[1] = 0;
  v948 = v949;
  v952 = 0;
  v950 = 0;
  v951 = 0;
  uint64_t v35 = operator new(0x10uLL);
  v950 = v35;
  _OWORD *v35 = xmmword_4E78D0;
  v952 = v35 + 1;
  v951 = v35 + 1;
  char v953 = 0;
  char v954 = 0;
  memset(v955, 0, sizeof(v955));
  uint64_t v956 = 0;
  long long v902 = xmmword_5968C4;
  uint64_t v903 = 2;
  sub_6D1AC((uint64_t)v955, (int *)&v902, 3);
  char v957 = 0;
  uint64_t v958 = 0;
  sub_6D224(v1071, (long long *)v317, &v935);
  sub_21C8C(v309, "speaker_raw");
  sub_21C8C(&v902, "speaker_raw");
  uint64_t v905 = 0;
  uint64_t v904 = 0;
  uint64_t v906 = 0;
  sub_21C8C(v907, "speaker_measurement");
  sub_21C8C(v908, "speaker_raw");
  memset(&v908[3], 0, 24);
  int v909 = 1668051824;
  CFTypeRef v308 = 0;
  v898[0] = 1936749683;
  uint64_t v899 = 0;
  __int16 v36 = operator new(0xCuLL);
  v895 = (char *)(v36 + 3);
  *(void *)__int16 v36 = 0x6473706700000001;
  v36[2] = 1869768046;
  v893 = v36;
  v894 = v36 + 3;
  v305 = 0;
  v303 = 0;
  v304 = 0;
  *(void *)&long long v869 = &v303;
  BYTE8(v869) = 0;
  v303 = operator new(0x18uLL);
  v304 = v303;
  v305 = v303 + 3;
  v304 = sub_1CDC20((uint64_t)&v305, (uint64_t)&v893, (uint64_t)&v896, v303);
  sub_1CDCD4((uint64_t)&v896, (uint64_t *)&v303);
  v306[0] = &v896;
  v306[1] = 1;
  CFDictionaryRef v37 = sub_4D3D8((uint64_t)v306);
  int v900 = 1768907891;
  CFDictionaryRef v901 = v37;
  CFTypeRef v307 = 0;
  v911 = 0;
  v912 = 0;
  v910 = 0;
  *(void *)&long long v869 = &v910;
  BYTE8(v869) = 0;
  int v38 = (char *)operator new(0x20uLL);
  uint64_t v39 = 0;
  v910 = v38;
  v911 = v38;
  v912 = v38 + 32;
  do
  {
    sub_6D16C((uint64_t)&v38[v39 * 4], v898[v39], *(CFTypeRef *)&v898[v39 + 2]);
    v39 += 4;
  }
  while (v39 != 8);
  v911 = v38 + 32;
  long long v913 = 0u;
  long long v914 = 0u;
  long long v40 = operator new(8uLL);
  *((void *)&v913 + 1) = v40;
  void *v40 = 0x74766F6C76756764;
  *((void *)&v914 + 1) = v40 + 1;
  *(void *)&long long v914 = v40 + 1;
  v916[0] = 0;
  v916[1] = 0;
  v915 = v916;
  v919 = 0;
  v917 = 0;
  v918 = 0;
  uint64_t v41 = operator new(0x10uLL);
  v917 = v41;
  _OWORD *v41 = xmmword_4E78D0;
  v919 = v41 + 1;
  v918 = v41 + 1;
  char v920 = 0;
  char v921 = 0;
  memset(v922, 0, sizeof(v922));
  uint64_t v923 = 0;
  long long v869 = xmmword_5968C4;
  uint64_t v870 = 2;
  sub_6D1AC((uint64_t)v922, (int *)&v869, 3);
  char v924 = 0;
  uint64_t v925 = 0;
  sub_6D224(v1072, (long long *)v309, &v902);
  sub_21C8C(v301, "speaker_ringtone");
  sub_21C8C(&v869, "speaker_general");
  uint64_t v872 = 0;
  uint64_t v871 = 0;
  uint64_t v873 = 0;
  sub_21C8C(v874, "speaker_ringtone");
  sub_21C8C(v875, "speaker_general");
  memset(&v875[3], 0, 24);
  int v876 = 1668051824;
  CFTypeRef v300 = 0;
  v865[0] = 1936749683;
  uint64_t v866 = 0;
  long long v42 = operator new(0xCuLL);
  v862 = (char *)(v42 + 3);
  *(void *)long long v42 = 0x6473706700000001;
  v42[2] = 1869768046;
  v860 = v42;
  v861 = v42 + 3;
  v297 = 0;
  v295 = 0;
  v296 = 0;
  *(void *)&long long v834 = &v295;
  BYTE8(v834) = 0;
  v295 = operator new(0x18uLL);
  v296 = v295;
  v297 = v295 + 3;
  v296 = sub_1CDC20((uint64_t)&v297, (uint64_t)&v860, (uint64_t)&v863, v295);
  sub_1CDCD4((uint64_t)&v863, (uint64_t *)&v295);
  v298[0] = &v863;
  v298[1] = 1;
  CFDictionaryRef v43 = sub_4D3D8((uint64_t)v298);
  int v867 = 1768907891;
  CFDictionaryRef v868 = v43;
  CFTypeRef v299 = 0;
  v878 = 0;
  v879 = 0;
  v877 = 0;
  *(void *)&long long v834 = &v877;
  BYTE8(v834) = 0;
  uint64_t v44 = (char *)operator new(0x20uLL);
  uint64_t v45 = 0;
  v877 = v44;
  v878 = v44;
  v879 = v44 + 32;
  do
  {
    sub_6D16C((uint64_t)&v44[v45 * 4], v865[v45], *(CFTypeRef *)&v865[v45 + 2]);
    v45 += 4;
  }
  while (v45 != 8);
  v878 = v44 + 32;
  long long v880 = 0u;
  long long v881 = 0u;
  long long v46 = operator new(8uLL);
  *((void *)&v880 + 1) = v46;
  void *v46 = 0x6C766F6C766F6C75;
  *((void *)&v881 + 1) = v46 + 1;
  *(void *)&long long v881 = v46 + 1;
  v883[0] = 0;
  v883[1] = 0;
  v882 = v883;
  v886 = 0;
  v884 = 0;
  v885 = 0;
  unsigned __int8 v47 = operator new(0x10uLL);
  v884 = v47;
  *unsigned __int8 v47 = xmmword_4E78D0;
  v886 = v47 + 1;
  v885 = v47 + 1;
  char v887 = 0;
  char v888 = 0;
  memset(v889, 0, sizeof(v889));
  uint64_t v890 = 0;
  long long v834 = xmmword_5968C4;
  uint64_t v835 = 2;
  sub_6D1AC((uint64_t)v889, (int *)&v834, 3);
  char v891 = 0;
  uint64_t v892 = 0;
  sub_6D224(v1073, (long long *)v301, &v869);
  sub_21C8C(v293, "omni_mic_general");
  sub_21C8C(&v834, "top_mic_general");
  uint64_t v837 = 0;
  uint64_t v836 = 0;
  uint64_t v838 = 0;
  sub_21C8C(v839, "top_mic_general");
  sub_21C8C(v840, "top_mic_general");
  memset(&v840[3], 0, 24);
  int v841 = 1684434036;
  sub_1CDF04(v828, "aufx-firf-appl");
  int v290 = 1;
  sub_387940((uint64_t)v829, &v290);
  v291[0] = v828;
  v291[1] = 2;
  CFDictionaryRef v48 = sub_4D3D8((uint64_t)v291);
  v830[0] = 1718186601;
  CFDictionaryRef v831 = v48;
  CFTypeRef v292 = 0;
  sub_42BF4C((uint64_t)&v826, v173);
  v288[0] = &v826;
  v288[1] = 1;
  CFDictionaryRef v49 = sub_4D3D8((uint64_t)v288);
  int v832 = 1667789676;
  CFDictionaryRef v833 = v49;
  CFTypeRef v289 = 0;
  v843 = 0;
  v844 = 0;
  v842 = 0;
  *(void *)&long long v798 = &v842;
  BYTE8(v798) = 0;
  long long v50 = (char *)operator new(0x20uLL);
  uint64_t v51 = 0;
  v842 = v50;
  v843 = v50;
  v844 = v50 + 32;
  do
  {
    sub_6D16C((uint64_t)&v50[v51 * 4], v830[v51], *(CFTypeRef *)&v830[v51 + 2]);
    v51 += 4;
  }
  while (v51 != 8);
  v843 = v50 + 32;
  int v286 = 1886216809;
  sub_1CDF58((uint64_t)&v824, "PortType", &v286);
  v287[0] = &v824;
  v287[1] = 1;
  CFDictionaryRef v845 = sub_4D3D8((uint64_t)v287);
  v846 = 0;
  v848 = 0;
  v847 = 0;
  std::string::size_type v52 = operator new(4uLL);
  v846 = v52;
  _DWORD *v52 = 1987013749;
  v848 = v52 + 1;
  v847 = v52 + 1;
  v850[0] = 0;
  v850[1] = 0;
  v849 = v850;
  v853 = 0;
  v851 = 0;
  v852 = 0;
  int v53 = operator new(8uLL);
  v851 = v53;
  void *v53 = 0x100000002;
  v853 = v53 + 1;
  v852 = v53 + 1;
  char v854 = 0;
  char v855 = 0;
  memset(v856, 0, sizeof(v856));
  uint64_t v857 = 0;
  long long v798 = xmmword_5968C4;
  uint64_t v799 = 2;
  sub_6D1AC((uint64_t)v856, (int *)&v798, 3);
  char v858 = 0;
  uint64_t v859 = 0;
  sub_6D224(v1074, (long long *)v293, &v834);
  sub_21C8C(v284, "omni_mic_hearing_accessibility");
  sub_21C8C(&v798, "top_mic_hearing_accessibility");
  uint64_t v801 = 0;
  uint64_t v800 = 0;
  uint64_t v802 = 0;
  sub_21C8C(v803, "top_mic_hearing_accessibility");
  sub_21C8C(v804, "top_mic_hearing_accessibility");
  memset(&v804[3], 0, 24);
  int v805 = 1684434036;
  sub_1CDF04(v792, "aufx-firf-appl");
  int v281 = 1;
  sub_387940((uint64_t)v793, &v281);
  v282[0] = v792;
  v282[1] = 2;
  CFDictionaryRef v54 = sub_4D3D8((uint64_t)v282);
  v794[0] = 1718186601;
  CFDictionaryRef v795 = v54;
  CFTypeRef v283 = 0;
  sub_42BF4C((uint64_t)&v790, v173);
  v279[0] = &v790;
  v279[1] = 1;
  CFDictionaryRef v55 = sub_4D3D8((uint64_t)v279);
  int v796 = 1667789676;
  CFDictionaryRef v797 = v55;
  CFTypeRef v280 = 0;
  v807 = 0;
  v808 = 0;
  v806 = 0;
  *(void *)&long long v762 = &v806;
  BYTE8(v762) = 0;
  int v56 = (char *)operator new(0x20uLL);
  uint64_t v57 = 0;
  v806 = v56;
  v807 = v56;
  v808 = v56 + 32;
  do
  {
    sub_6D16C((uint64_t)&v56[v57 * 4], v794[v57], *(CFTypeRef *)&v794[v57 + 2]);
    v57 += 4;
  }
  while (v57 != 8);
  v807 = v56 + 32;
  int v277 = 1886216809;
  sub_1CDF58((uint64_t)&v788, "PortType", &v277);
  v278[0] = &v788;
  v278[1] = 1;
  CFDictionaryRef v809 = sub_4D3D8((uint64_t)v278);
  v810 = 0;
  v812 = 0;
  v811 = 0;
  unint64_t v58 = operator new(4uLL);
  v810 = v58;
  *unint64_t v58 = 1987013749;
  v812 = v58 + 1;
  v811 = v58 + 1;
  v814[0] = 0;
  v814[1] = 0;
  v813 = v814;
  v817 = 0;
  v815 = 0;
  v816 = 0;
  BOOL v59 = operator new(8uLL);
  v815 = v59;
  *BOOL v59 = 0x100000002;
  v817 = v59 + 1;
  v816 = v59 + 1;
  char v818 = 0;
  char v819 = 0;
  memset(v820, 0, sizeof(v820));
  uint64_t v821 = 0;
  long long v762 = xmmword_5968C4;
  uint64_t v763 = 2;
  sub_6D1AC((uint64_t)v820, (int *)&v762, 3);
  char v822 = 0;
  uint64_t v823 = 0;
  sub_6D224(v1075, (long long *)v284, &v798);
  sub_21C8C(v275, "omni_mic_video_recording");
  sub_21C8C(&v762, "top_mic_general");
  uint64_t v765 = 0;
  uint64_t v764 = 0;
  uint64_t v766 = 0;
  sub_21C8C(v767, "top_mic_general");
  sub_21C8C(v768, "top_mic_general");
  memset(&v768[3], 0, 24);
  int v769 = 1684434036;
  sub_1CDF04(v756, "aufx-firf-appl");
  int v272 = 1;
  sub_387940((uint64_t)v757, &v272);
  v273[0] = v756;
  v273[1] = 2;
  CFDictionaryRef v60 = sub_4D3D8((uint64_t)v273);
  v758[0] = 1718186601;
  CFDictionaryRef v759 = v60;
  CFTypeRef v274 = 0;
  sub_42BF4C((uint64_t)&v754, v173);
  v270[0] = &v754;
  v270[1] = 1;
  CFDictionaryRef v61 = sub_4D3D8((uint64_t)v270);
  int v760 = 1667789676;
  CFDictionaryRef v761 = v61;
  CFTypeRef v271 = 0;
  v771 = 0;
  v772 = 0;
  v770 = 0;
  *(void *)&long long v726 = &v770;
  BYTE8(v726) = 0;
  CFArrayRef v62 = (char *)operator new(0x20uLL);
  uint64_t v63 = 0;
  v770 = v62;
  v771 = v62;
  v772 = v62 + 32;
  do
  {
    sub_6D16C((uint64_t)&v62[v63 * 4], v758[v63], *(CFTypeRef *)&v758[v63 + 2]);
    v63 += 4;
  }
  while (v63 != 8);
  v771 = v62 + 32;
  int v268 = 1886216809;
  sub_1CDF58((uint64_t)&v752, "PortType", &v268);
  v269[0] = &v752;
  v269[1] = 1;
  CFDictionaryRef v773 = sub_4D3D8((uint64_t)v269);
  v774 = 0;
  v776 = 0;
  v775 = 0;
  uint64_t v64 = operator new(4uLL);
  v774 = v64;
  *uint64_t v64 = 1987013749;
  v776 = v64 + 1;
  v775 = v64 + 1;
  v778[0] = 0;
  v778[1] = 0;
  v777 = v778;
  v781 = 0;
  v779 = 0;
  v780 = 0;
  uint64_t v65 = operator new(8uLL);
  v779 = v65;
  *uint64_t v65 = 0x100000002;
  v781 = v65 + 1;
  v780 = v65 + 1;
  char v782 = 0;
  char v783 = 0;
  memset(v784, 0, sizeof(v784));
  uint64_t v785 = 0;
  long long v726 = xmmword_5968C4;
  uint64_t v727 = 2;
  sub_6D1AC((uint64_t)v784, (int *)&v726, 3);
  char v786 = 0;
  uint64_t v787 = 0;
  sub_6D224(v1076, (long long *)v275, &v762);
  sub_21C8C(v266, "beamformed_mic_general");
  sub_21C8C(&v726, "beam_mic_general");
  uint64_t v729 = 0;
  uint64_t v728 = 0;
  uint64_t v730 = 0;
  sub_21C8C(v731, "beam_mic_general");
  sub_21C8C(v732, "beam_mic_general");
  memset(&v732[3], 0, 24);
  int v733 = 1684434036;
  int v263 = 1;
  sub_42BFA0((uint64_t)&v718, &v263);
  v264[0] = &v718;
  v264[1] = 1;
  CFDictionaryRef v66 = sub_4D3D8((uint64_t)v264);
  v720[0] = 1651074168;
  CFDictionaryRef v721 = v66;
  CFTypeRef v265 = 0;
  sub_15B134((uint64_t)&v716, "DataSourceOrder", &v377);
  v261[0] = &v716;
  v261[1] = 1;
  CFDictionaryRef v67 = sub_4D3D8((uint64_t)v261);
  int v722 = 1920365171;
  CFDictionaryRef v723 = v67;
  CFTypeRef v262 = 0;
  sub_42BF4C((uint64_t)&v714, v174);
  v259[0] = &v714;
  v259[1] = 1;
  CFDictionaryRef v68 = sub_4D3D8((uint64_t)v259);
  int v724 = 1667789676;
  CFDictionaryRef v725 = v68;
  CFTypeRef v260 = 0;
  v735 = 0;
  v736 = 0;
  v734 = 0;
  *(void *)&long long v686 = &v734;
  BYTE8(v686) = 0;
  unint64_t v69 = (char *)operator new(0x30uLL);
  uint64_t v70 = 0;
  v734 = v69;
  v735 = v69;
  v736 = v69 + 48;
  do
  {
    sub_6D16C((uint64_t)&v69[v70 * 4], v720[v70], *(CFTypeRef *)&v720[v70 + 2]);
    v70 += 4;
  }
  while (v70 != 12);
  v735 = v69 + 48;
  int v257 = 1886216809;
  sub_1CDF58((uint64_t)&v712, "PortType", &v257);
  v258[0] = &v712;
  v258[1] = 1;
  CFDictionaryRef v737 = sub_4D3D8((uint64_t)v258);
  v738 = 0;
  v740 = 0;
  v739 = 0;
  unint64_t v71 = operator new(4uLL);
  v738 = v71;
  _DWORD *v71 = 1987013749;
  v740 = v71 + 1;
  v739 = v71 + 1;
  v742[0] = 0;
  v742[1] = 0;
  v741 = v742;
  v745 = 0;
  v743 = 0;
  v744 = 0;
  uint64_t v72 = operator new(8uLL);
  v743 = v72;
  void *v72 = 0x100000002;
  v745 = v72 + 1;
  v744 = v72 + 1;
  char v746 = 0;
  char v747 = 0;
  memset(v748, 0, sizeof(v748));
  uint64_t v749 = 0;
  long long v686 = xmmword_5968C4;
  uint64_t v687 = 2;
  sub_6D1AC((uint64_t)v748, (int *)&v686, 3);
  char v750 = 0;
  uint64_t v751 = 0;
  sub_6D224(v1077, (long long *)v266, &v726);
  sub_21C8C(v255, "beamformed_mic_video_recording");
  sub_21C8C(&v686, "beam_mic_general");
  uint64_t v689 = 0;
  uint64_t v688 = 0;
  uint64_t v690 = 0;
  sub_21C8C(v691, "beam_mic_general");
  sub_21C8C(v692, "beam_mic_general");
  memset(&v692[3], 0, 24);
  int v693 = 1684434036;
  int v252 = 1;
  sub_42BFA0((uint64_t)&v678, &v252);
  v253[0] = &v678;
  v253[1] = 1;
  CFDictionaryRef v73 = sub_4D3D8((uint64_t)v253);
  v680[0] = 1651074168;
  CFDictionaryRef v681 = v73;
  CFTypeRef v254 = 0;
  sub_15B134((uint64_t)&v676, "DataSourceOrder", &v377);
  v250[0] = &v676;
  v250[1] = 1;
  CFDictionaryRef v74 = sub_4D3D8((uint64_t)v250);
  int v682 = 1920365171;
  CFDictionaryRef v683 = v74;
  CFTypeRef v251 = 0;
  sub_42BF4C((uint64_t)&v674, v174);
  v248[0] = &v674;
  v248[1] = 1;
  CFDictionaryRef v75 = sub_4D3D8((uint64_t)v248);
  int v684 = 1667789676;
  CFDictionaryRef v685 = v75;
  CFTypeRef v249 = 0;
  v695 = 0;
  v696 = 0;
  v694 = 0;
  *(void *)&long long v646 = &v694;
  BYTE8(v646) = 0;
  unint64_t v76 = (char *)operator new(0x30uLL);
  uint64_t v77 = 0;
  v694 = v76;
  v695 = v76;
  v696 = v76 + 48;
  do
  {
    sub_6D16C((uint64_t)&v76[v77 * 4], v680[v77], *(CFTypeRef *)&v680[v77 + 2]);
    v77 += 4;
  }
  while (v77 != 12);
  v695 = v76 + 48;
  int v246 = 1886216809;
  sub_1CDF58((uint64_t)&v672, "PortType", &v246);
  v247[0] = &v672;
  v247[1] = 1;
  CFDictionaryRef v697 = sub_4D3D8((uint64_t)v247);
  v698 = 0;
  v700 = 0;
  v699 = 0;
  char v78 = operator new(4uLL);
  v698 = v78;
  _DWORD *v78 = 1987013749;
  v700 = v78 + 1;
  v699 = v78 + 1;
  v702[0] = 0;
  v702[1] = 0;
  v701 = v702;
  v705 = 0;
  v703 = 0;
  v704 = 0;
  uint64_t v79 = operator new(8uLL);
  v703 = v79;
  *uint64_t v79 = 0x100000002;
  v705 = v79 + 1;
  v704 = v79 + 1;
  char v706 = 0;
  char v707 = 0;
  memset(v708, 0, sizeof(v708));
  uint64_t v709 = 0;
  long long v646 = xmmword_5968C4;
  uint64_t v647 = 2;
  sub_6D1AC((uint64_t)v708, (int *)&v646, 3);
  char v710 = 0;
  uint64_t v711 = 0;
  sub_6D224(v1078, (long long *)v255, &v686);
  sub_21C8C(v244, "omni_mic_measurement");
  sub_21C8C(&v646, "top_mic_measurement");
  uint64_t v649 = 0;
  uint64_t v648 = 0;
  uint64_t v650 = 0;
  sub_21C8C(v651, "top_mic_measurement");
  sub_21C8C(v652, "top_mic_measurement");
  memset(&v652[3], 0, 24);
  int v653 = 1684434036;
  sub_1CDF04(v640, "aufx-firf-appl");
  int v241 = 1;
  sub_387940((uint64_t)v641, &v241);
  v242[0] = v640;
  v242[1] = 2;
  CFDictionaryRef v80 = sub_4D3D8((uint64_t)v242);
  v642[0] = 1718186601;
  CFDictionaryRef v643 = v80;
  CFTypeRef v243 = 0;
  sub_42BF4C((uint64_t)&v638, v173);
  v239[0] = &v638;
  v239[1] = 1;
  CFDictionaryRef v81 = sub_4D3D8((uint64_t)v239);
  int v644 = 1667789676;
  CFDictionaryRef v645 = v81;
  CFTypeRef v240 = 0;
  v655 = 0;
  v656 = 0;
  v654 = 0;
  *(void *)&long long v610 = &v654;
  BYTE8(v610) = 0;
  uint64_t v82 = (char *)operator new(0x20uLL);
  uint64_t v83 = 0;
  v654 = v82;
  v655 = v82;
  v656 = v82 + 32;
  do
  {
    sub_6D16C((uint64_t)&v82[v83 * 4], v642[v83], *(CFTypeRef *)&v642[v83 + 2]);
    v83 += 4;
  }
  while (v83 != 8);
  v655 = v82 + 32;
  int v237 = 1886216809;
  sub_1CDF58((uint64_t)&v636, "PortType", &v237);
  v238[0] = &v636;
  v238[1] = 1;
  CFDictionaryRef v657 = sub_4D3D8((uint64_t)v238);
  v658 = 0;
  v660 = 0;
  v659 = 0;
  unint64_t v84 = operator new(4uLL);
  v658 = v84;
  *unint64_t v84 = 1987013749;
  v660 = v84 + 1;
  v659 = v84 + 1;
  v662[0] = 0;
  v662[1] = 0;
  v661 = v662;
  v665 = 0;
  v663 = 0;
  v664 = 0;
  unint64_t v85 = operator new(8uLL);
  v663 = v85;
  *unint64_t v85 = 0x100000002;
  v665 = v85 + 1;
  v664 = v85 + 1;
  char v666 = 0;
  char v667 = 0;
  memset(v668, 0, sizeof(v668));
  uint64_t v669 = 0;
  long long v610 = xmmword_5968C4;
  uint64_t v611 = 2;
  sub_6D1AC((uint64_t)v668, (int *)&v610, 3);
  char v670 = 0;
  uint64_t v671 = 0;
  sub_6D224(v1079, (long long *)v244, &v646);
  sub_21C8C(v235, "beamformed_mic_measurement");
  sub_21C8C(&v610, "beam_mic_measurement");
  uint64_t v613 = 0;
  uint64_t v612 = 0;
  uint64_t v614 = 0;
  sub_21C8C(v615, "beam_mic_measurement");
  sub_21C8C(v616, "beam_mic_measurement");
  memset(&v616[3], 0, 24);
  int v617 = 1684434036;
  int v232 = 1;
  sub_42BFA0((uint64_t)&v602, &v232);
  v233[0] = &v602;
  v233[1] = 1;
  CFDictionaryRef v86 = sub_4D3D8((uint64_t)v233);
  v604[0] = 1651074168;
  CFDictionaryRef v605 = v86;
  CFTypeRef v234 = 0;
  sub_15B134((uint64_t)&v600, "DataSourceOrder", &v377);
  v230[0] = &v600;
  v230[1] = 1;
  CFDictionaryRef v87 = sub_4D3D8((uint64_t)v230);
  int v606 = 1920365171;
  CFDictionaryRef v607 = v87;
  CFTypeRef v231 = 0;
  sub_42BF4C((uint64_t)&v598, v174);
  v228[0] = &v598;
  v228[1] = 1;
  CFDictionaryRef v88 = sub_4D3D8((uint64_t)v228);
  int v608 = 1667789676;
  CFDictionaryRef v609 = v88;
  CFTypeRef v229 = 0;
  v619 = 0;
  v620 = 0;
  v618 = 0;
  *(void *)&long long v570 = &v618;
  BYTE8(v570) = 0;
  unint64_t v89 = (char *)operator new(0x30uLL);
  uint64_t v90 = 0;
  v618 = v89;
  v619 = v89;
  v620 = v89 + 48;
  do
  {
    sub_6D16C((uint64_t)&v89[v90 * 4], v604[v90], *(CFTypeRef *)&v604[v90 + 2]);
    v90 += 4;
  }
  while (v90 != 12);
  v619 = v89 + 48;
  int v226 = 1886216809;
  sub_1CDF58((uint64_t)&v596, "PortType", &v226);
  v227[0] = &v596;
  v227[1] = 1;
  CFDictionaryRef v621 = sub_4D3D8((uint64_t)v227);
  v622 = 0;
  v624 = 0;
  v623 = 0;
  unint64_t v91 = operator new(4uLL);
  v622 = v91;
  _DWORD *v91 = 1987013749;
  v624 = v91 + 1;
  v623 = v91 + 1;
  v626[0] = 0;
  v626[1] = 0;
  v625 = v626;
  v629 = 0;
  v627 = 0;
  v628 = 0;
  uint64_t v92 = operator new(8uLL);
  v627 = v92;
  void *v92 = 0x100000002;
  v629 = v92 + 1;
  v628 = v92 + 1;
  char v630 = 0;
  char v631 = 0;
  memset(v632, 0, sizeof(v632));
  uint64_t v633 = 0;
  long long v570 = xmmword_5968C4;
  uint64_t v571 = 2;
  sub_6D1AC((uint64_t)v632, (int *)&v570, 3);
  char v634 = 0;
  uint64_t v635 = 0;
  sub_6D224(v1080, (long long *)v235, &v610);
  sub_21C8C(v224, "beamformed_mic_voice_messages");
  sub_21C8C(&v570, "beam_mic_voice_messages");
  uint64_t v573 = 0;
  uint64_t v572 = 0;
  uint64_t v574 = 0;
  sub_21C8C(v575, "beam_mic_voice_messages");
  sub_21C8C(v576, "beam_mic_voice_messages");
  memset(&v576[3], 0, 24);
  int v577 = 1684434036;
  int v221 = 0;
  sub_42BFA0((uint64_t)&v562, &v221);
  v222[0] = &v562;
  v222[1] = 1;
  CFDictionaryRef v93 = sub_4D3D8((uint64_t)v222);
  v564[0] = 1651074168;
  CFDictionaryRef v565 = v93;
  CFTypeRef v223 = 0;
  sub_15B134((uint64_t)&v560, "DataSourceOrder", &v377);
  v219[0] = &v560;
  v219[1] = 1;
  CFDictionaryRef v94 = sub_4D3D8((uint64_t)v219);
  int v566 = 1920365171;
  CFDictionaryRef v567 = v94;
  CFTypeRef v220 = 0;
  sub_42BF4C((uint64_t)&v558, v174);
  v217[0] = &v558;
  v217[1] = 1;
  CFDictionaryRef v95 = sub_4D3D8((uint64_t)v217);
  int v568 = 1667789676;
  CFDictionaryRef v569 = v95;
  CFTypeRef v218 = 0;
  v579 = 0;
  v580 = 0;
  v578 = 0;
  *(void *)&long long v530 = &v578;
  BYTE8(v530) = 0;
  uint64_t v96 = (char *)operator new(0x30uLL);
  uint64_t v97 = 0;
  v578 = v96;
  v579 = v96;
  v580 = v96 + 48;
  do
  {
    sub_6D16C((uint64_t)&v96[v97 * 4], v564[v97], *(CFTypeRef *)&v564[v97 + 2]);
    v97 += 4;
  }
  while (v97 != 12);
  v579 = v96 + 48;
  int v215 = 1886216809;
  sub_1CDF58((uint64_t)&v556, "PortType", &v215);
  v216[0] = &v556;
  v216[1] = 1;
  CFDictionaryRef v581 = sub_4D3D8((uint64_t)v216);
  v582 = 0;
  v584 = 0;
  v583 = 0;
  uint64_t v98 = operator new(4uLL);
  v582 = v98;
  *uint64_t v98 = 1987013749;
  v584 = v98 + 1;
  v583 = v98 + 1;
  v586[0] = 0;
  v586[1] = 0;
  v585 = v586;
  v589 = 0;
  v587 = 0;
  v588 = 0;
  uint64_t v99 = operator new(8uLL);
  v587 = v99;
  void *v99 = 0x100000002;
  v589 = v99 + 1;
  v588 = v99 + 1;
  char v590 = 0;
  char v591 = 0;
  memset(v592, 0, sizeof(v592));
  uint64_t v593 = 0;
  long long v530 = xmmword_5968C4;
  uint64_t v531 = 2;
  sub_6D1AC((uint64_t)v592, (int *)&v530, 3);
  char v594 = 0;
  uint64_t v595 = 0;
  sub_6D224(v1081, (long long *)v224, &v570);
  sub_21C8C(v213, "beamformed_mic_voice_recognition");
  sub_21C8C(&v530, "beam_mic_voice_recognition");
  uint64_t v533 = 0;
  uint64_t v532 = 0;
  uint64_t v534 = 0;
  sub_21C8C(v535, "beam_mic_voice_recognition");
  sub_21C8C(v536, "beam_mic_voice_recognition");
  memset(&v536[3], 0, 24);
  int v537 = 1684434036;
  int v210 = 0;
  sub_42BFA0((uint64_t)&v522, &v210);
  v211[0] = &v522;
  v211[1] = 1;
  CFDictionaryRef v100 = sub_4D3D8((uint64_t)v211);
  v524[0] = 1651074168;
  CFDictionaryRef v525 = v100;
  CFTypeRef v212 = 0;
  sub_15B134((uint64_t)&v520, "DataSourceOrder", &v377);
  v208[0] = &v520;
  v208[1] = 1;
  CFDictionaryRef v101 = sub_4D3D8((uint64_t)v208);
  int v526 = 1920365171;
  CFDictionaryRef v527 = v101;
  CFTypeRef v209 = 0;
  sub_42BF4C((uint64_t)&v518, v174);
  v206[0] = &v518;
  v206[1] = 1;
  CFDictionaryRef v102 = sub_4D3D8((uint64_t)v206);
  int v528 = 1667789676;
  CFDictionaryRef v529 = v102;
  CFTypeRef v207 = 0;
  v539 = 0;
  v540 = 0;
  v538 = 0;
  *(void *)&long long v493 = &v538;
  BYTE8(v493) = 0;
  uint64_t v103 = (char *)operator new(0x30uLL);
  uint64_t v104 = 0;
  v538 = v103;
  v539 = v103;
  v540 = v103 + 48;
  do
  {
    sub_6D16C((uint64_t)&v103[v104 * 4], v524[v104], *(CFTypeRef *)&v524[v104 + 2]);
    v104 += 4;
  }
  while (v104 != 12);
  v539 = v103 + 48;
  int v204 = 1886216809;
  sub_1CDF58((uint64_t)&v516, "PortType", &v204);
  v205[0] = &v516;
  v205[1] = 1;
  CFDictionaryRef v541 = sub_4D3D8((uint64_t)v205);
  v542 = 0;
  v544 = 0;
  v543 = 0;
  std::string v105 = operator new(4uLL);
  v542 = v105;
  *std::string v105 = 1987013749;
  v544 = v105 + 1;
  v543 = v105 + 1;
  v546[0] = 0;
  v546[1] = 0;
  v545 = v546;
  v549 = 0;
  v547 = 0;
  v548 = 0;
  unsigned __int8 v106 = operator new(8uLL);
  v547 = v106;
  *unsigned __int8 v106 = 0x100000002;
  v549 = v106 + 1;
  v548 = v106 + 1;
  char v550 = 0;
  char v551 = 0;
  memset(v552, 0, sizeof(v552));
  uint64_t v553 = 0;
  long long v493 = xmmword_5968C4;
  uint64_t v494 = 2;
  sub_6D1AC((uint64_t)v552, (int *)&v493, 3);
  char v554 = 0;
  uint64_t v555 = 0;
  sub_6D224(v1082, (long long *)v213, &v530);
  sub_21C8C(v202, "siri_barge_in");
  sub_21C8C(&v493, "mic_voice_recognition");
  uint64_t v496 = 0;
  uint64_t v495 = 0;
  uint64_t v497 = 0;
  sub_21C8C(v498, "mic_voice_recognition");
  sub_21C8C(v499, "mic_voice_recognition");
  memset(&v499[3], 0, 24);
  int v500 = 1684434036;
  v506[0] = 0;
  v506[1] = 0;
  long long v501 = 0u;
  long long v502 = 0u;
  long long v503 = 0u;
  uint64_t v504 = 0;
  v505 = v506;
  v509 = 0;
  v507 = 0;
  v508 = 0;
  uint64_t v107 = operator new(0x10uLL);
  v509 = v107 + 2;
  void *v107 = 0x200000002;
  v107[1] = 2;
  v507 = v107;
  v508 = v107 + 2;
  char v510 = 0;
  char v511 = 0;
  memset(v512, 0, sizeof(v512));
  uint64_t v513 = 0;
  long long v469 = xmmword_5968C4;
  uint64_t v470 = 2;
  sub_6D1AC((uint64_t)v512, (int *)&v469, 3);
  char v514 = 0;
  uint64_t v515 = 0;
  sub_6D224(v1083, (long long *)v202, &v493);
  sub_21C8C(v200, "multicam_recording");
  sub_21C8C(&v469, "multicam");
  uint64_t v472 = 0;
  uint64_t v471 = 0;
  uint64_t v473 = 0;
  sub_21C8C(v474, "multicam");
  sub_21C8C(v475, "multicam");
  memset(&v475[3], 0, 24);
  int v476 = 1684434036;
  sub_22210((CFStringRef *)&v465, "ChannelSelectorMap");
  CFTypeRef v466 = sub_650B4((int **)&v374);
  v198[0] = &v465;
  v198[1] = 1;
  CFDictionaryRef v108 = sub_4D3D8((uint64_t)v198);
  int v467 = 1667789676;
  CFTypeRef v468 = v108;
  CFTypeRef v199 = 0;
  v478 = 0;
  v479 = 0;
  v477 = 0;
  *(void *)&long long v442 = &v477;
  BYTE8(v442) = 0;
  v477 = (char *)operator new(0x10uLL);
  v478 = v477;
  uint64_t v109 = v477 + 16;
  v479 = v477 + 16;
  sub_6D16C((uint64_t)v477, 1667789676, v108);
  v483[0] = 0;
  v483[1] = 0;
  long long v480 = 0u;
  long long v481 = 0u;
  v478 = v109;
  v482 = v483;
  v486 = 0;
  v484 = 0;
  v485 = 0;
  char v110 = operator new(8uLL);
  v484 = v110;
  *char v110 = 0x300000002;
  v486 = v110 + 1;
  v485 = v110 + 1;
  char v487 = 0;
  char v488 = 0;
  memset(v489, 0, sizeof(v489));
  uint64_t v490 = 0;
  long long v442 = xmmword_5968C4;
  uint64_t v443 = 2;
  sub_6D1AC((uint64_t)v489, (int *)&v442, 3);
  char v491 = 0;
  uint64_t v492 = 0;
  sub_6D224(v1084, (long long *)v200, &v469);
  sub_21C8C(v196, "mic_peripheral_allmics");
  sub_21C8C(&v442, "mic_peripheral_sender_all_mics");
  uint64_t v445 = 0;
  uint64_t v444 = 0;
  uint64_t v446 = 0;
  sub_21C8C(v447, "mic_peripheral_sender_all_mics");
  sub_21C8C(v448, "mic_peripheral_sender_all_mics");
  memset(&v448[3], 0, 24);
  int v449 = 1684434036;
  v455[0] = 0;
  v455[1] = 0;
  long long v450 = 0u;
  long long v451 = 0u;
  long long v452 = 0u;
  uint64_t v453 = 0;
  v454 = v455;
  v458 = 0;
  v456 = 0;
  v457 = 0;
  uint64_t v111 = operator new(8uLL);
  v456 = v111;
  void *v111 = 0x400000002;
  v458 = v111 + 1;
  v457 = v111 + 1;
  char v459 = 0;
  char v460 = 0;
  memset(v461, 0, sizeof(v461));
  uint64_t v462 = 0;
  long long v417 = xmmword_5968C4;
  uint64_t v418 = 2;
  sub_6D1AC((uint64_t)v461, (int *)&v417, 3);
  char v463 = 0;
  uint64_t v464 = 0;
  sub_6D224(v1085, (long long *)v196, &v442);
  sub_21C8C(v194, "mic_echo_cancellation");
  sub_21C8C(&v417, "mic_echo_cancellation");
  uint64_t v420 = 0;
  uint64_t v419 = 0;
  uint64_t v421 = 0;
  sub_21C8C(&v193, "_pmbi");
  char v112 = std::string::insert(&v193, 0, "mic_echo_cancellation", 0x15uLL);
  long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  std::string::size_type v423 = v112->__r_.__value_.__r.__words[2];
  long long v422 = v113;
  v112->__r_.__value_.__l.__size_ = 0;
  v112->__r_.__value_.__r.__words[2] = 0;
  v112->__r_.__value_.__r.__words[0] = 0;
  sub_21C8C(v424, "mic_echo_cancellation");
  memset(&v424[3], 0, 24);
  int v425 = 1684434036;
  uint64_t v114 = operator new(0xCuLL);
  v412 = (char *)(v114 + 3);
  *(void *)uint64_t v114 = 0x6473706700000000;
  v114[2] = 1869768046;
  v410 = v114;
  v411 = v114 + 3;
  v189 = 0;
  v190 = 0;
  v188 = 0;
  *(void *)&long long v382 = &v188;
  BYTE8(v382) = 0;
  v188 = operator new(0x18uLL);
  v189 = v188;
  v190 = v188 + 3;
  v189 = sub_1CDC20((uint64_t)&v190, (uint64_t)&v410, (uint64_t)&v413, v188);
  sub_1CDCD4((uint64_t)&v413, (uint64_t *)&v188);
  v191[0] = &v413;
  v191[1] = 1;
  CFDictionaryRef v115 = sub_4D3D8((uint64_t)v191);
  int v415 = 1768907891;
  CFTypeRef cf = v115;
  CFTypeRef v192 = 0;
  v427 = 0;
  v428 = 0;
  v426 = 0;
  *(void *)&long long v382 = &v426;
  BYTE8(v382) = 0;
  v426 = (char *)operator new(0x10uLL);
  v427 = v426;
  std::string v116 = v426 + 16;
  v428 = v426 + 16;
  sub_6D16C((uint64_t)v426, 1768907891, v115);
  v432[0] = 0;
  v432[1] = 0;
  long long v429 = 0u;
  long long v430 = 0u;
  v427 = v116;
  v431 = v432;
  v435 = 0;
  v433 = 0;
  v434 = 0;
  char v117 = operator new(0x10uLL);
  v433 = v117;
  *char v117 = xmmword_4E7CB0;
  v435 = v117 + 1;
  v434 = v117 + 1;
  char v436 = 0;
  char v437 = 0;
  memset(v438, 0, sizeof(v438));
  uint64_t v439 = 0;
  long long v382 = xmmword_5968C4;
  uint64_t v383 = 2;
  sub_6D1AC((uint64_t)v438, (int *)&v382, 3);
  char v440 = 0;
  int v186 = 1919509347;
  sub_42C084((uint64_t)v406, "REF_INPUT_CHANNEL_COUNT", &v186);
  int v185 = 1919509353;
  sub_42C158((uint64_t)&v407, &v185);
  int v184 = 1835623267;
  sub_42C084((uint64_t)&v408, "MIC_INPUT_CHANNEL_COUNT", &v184);
  int v183 = 1936859168;
  sub_42C234((uint64_t)v409, &v183);
  v187[0] = v406;
  v187[1] = 4;
  CFDictionaryRef v441 = sub_4D3D8((uint64_t)v187);
  sub_6D224(v1086, (long long *)v194, &v417);
  sub_21C8C(__p, "headset_mic_echo_cancellation");
  sub_21C8C(&v382, "mic_echo_cancellation");
  uint64_t v385 = 0;
  uint64_t v384 = 0;
  uint64_t v386 = 0;
  sub_21C8C(&v180, "_misc");
  char v118 = std::string::insert(&v180, 0, "mic_echo_cancellation", 0x15uLL);
  long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  std::string::size_type v388 = v118->__r_.__value_.__r.__words[2];
  long long v387 = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  sub_21C8C(v389, "mic_echo_cancellation");
  memset(&v389[3], 0, 24);
  int v390 = 1684434036;
  v396[0] = 0;
  v396[1] = 0;
  long long v391 = 0u;
  long long v392 = 0u;
  long long v393 = 0u;
  uint64_t v394 = 0;
  v395 = v396;
  v399 = 0;
  v397 = 0;
  v398 = 0;
  uint64_t v120 = operator new(0x10uLL);
  v397 = v120;
  *uint64_t v120 = xmmword_4E7CC0;
  v399 = v120 + 1;
  v398 = v120 + 1;
  char v400 = 0;
  char v401 = 0;
  memset(v402, 0, sizeof(v402));
  uint64_t v403 = 0;
  long long v378 = xmmword_5968C4;
  uint64_t v379 = 2;
  sub_6D1AC((uint64_t)v402, (int *)&v378, 3);
  char v404 = 0;
  int v178 = 1919509347;
  sub_42C084((uint64_t)&v378, "REF_INPUT_CHANNEL_COUNT", &v178);
  int v177 = 1919509353;
  sub_42C158((uint64_t)&v379, &v177);
  int v176 = 1835623267;
  sub_42C084((uint64_t)&v380, "MIC_INPUT_CHANNEL_COUNT", &v176);
  int v175 = 1936859168;
  sub_42C234((uint64_t)v381, &v175);
  v179[0] = &v378;
  v179[1] = 4;
  CFDictionaryRef v405 = sub_4D3D8((uint64_t)v179);
  sub_6D224(v1087, (long long *)__p, &v382);
  sub_6D2A0(v172, v1067, 21);
  for (uint64_t i = 0; i != -6888; i -= 328)
  {
    sub_6C878((uint64_t)&v1087[i + 24]);
    if ((char)v1087[i + 23] < 0) {
      operator delete(*(void **)&v1087[i]);
    }
  }
  sub_6C878((uint64_t)&v382);
  for (uint64_t j = 0; j != -64; j -= 16)
  {
    OSStatus v123 = *(const void **)&v381[j + 8];
    if (v123) {
      CFRelease(v123);
    }
    char v124 = *(const void **)&v381[j];
    if (v124) {
      CFRelease(v124);
    }
  }
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v180.__r_.__value_.__l.__data_);
  }
  if (v182 < 0) {
    operator delete(__p[0]);
  }
  sub_6C878((uint64_t)&v417);
  for (uint64_t k = 0; k != -64; k -= 16)
  {
    uint64_t v126 = *(const void **)&v409[k + 8];
    if (v126) {
      CFRelease(v126);
    }
    uint64_t v127 = *(const void **)&v409[k];
    if (v127) {
      CFRelease(v127);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v192) {
    CFRelease(v192);
  }
  if (v414) {
    CFRelease(v414);
  }
  if (v413) {
    CFRelease(v413);
  }
  *(void *)&long long v382 = &v188;
  sub_15B944((void ***)&v382);
  if (v410)
  {
    v411 = v410;
    operator delete(v410);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (v195 < 0) {
    operator delete(v194[0]);
  }
  sub_6C878((uint64_t)&v442);
  if (v197 < 0) {
    operator delete(v196[0]);
  }
  sub_6C878((uint64_t)&v469);
  if (v468) {
    CFRelease(v468);
  }
  if (v199) {
    CFRelease(v199);
  }
  if (v466) {
    CFRelease(v466);
  }
  if (v465) {
    CFRelease(v465);
  }
  if (v201 < 0) {
    operator delete(v200[0]);
  }
  sub_6C878((uint64_t)&v493);
  if (v203 < 0) {
    operator delete(v202[0]);
  }
  sub_6C878((uint64_t)&v530);
  if (v517) {
    CFRelease(v517);
  }
  if (v516) {
    CFRelease(v516);
  }
  for (uint64_t m = 10; m != -2; m -= 4)
  {
    uint64_t v129 = *(const void **)&v524[m];
    if (v129) {
      CFRelease(v129);
    }
  }
  if (v207) {
    CFRelease(v207);
  }
  if (v519) {
    CFRelease(v519);
  }
  if (v518) {
    CFRelease(v518);
  }
  if (v209) {
    CFRelease(v209);
  }
  if (v521) {
    CFRelease(v521);
  }
  if (v520) {
    CFRelease(v520);
  }
  if (v212) {
    CFRelease(v212);
  }
  if (v523) {
    CFRelease(v523);
  }
  if (v522) {
    CFRelease(v522);
  }
  if (v214 < 0) {
    operator delete(v213[0]);
  }
  sub_6C878((uint64_t)&v570);
  if (v557) {
    CFRelease(v557);
  }
  if (v556) {
    CFRelease(v556);
  }
  for (uint64_t n = 10; n != -2; n -= 4)
  {
    __int16 v131 = *(const void **)&v564[n];
    if (v131) {
      CFRelease(v131);
    }
  }
  if (v218) {
    CFRelease(v218);
  }
  if (v559) {
    CFRelease(v559);
  }
  if (v558) {
    CFRelease(v558);
  }
  if (v220) {
    CFRelease(v220);
  }
  if (v561) {
    CFRelease(v561);
  }
  if (v560) {
    CFRelease(v560);
  }
  if (v223) {
    CFRelease(v223);
  }
  if (v563) {
    CFRelease(v563);
  }
  if (v562) {
    CFRelease(v562);
  }
  if (v225 < 0) {
    operator delete(v224[0]);
  }
  sub_6C878((uint64_t)&v610);
  if (v597) {
    CFRelease(v597);
  }
  if (v596) {
    CFRelease(v596);
  }
  for (iuint64_t i = 10; ii != -2; ii -= 4)
  {
    std::string v133 = *(const void **)&v604[ii];
    if (v133) {
      CFRelease(v133);
    }
  }
  if (v229) {
    CFRelease(v229);
  }
  if (v599) {
    CFRelease(v599);
  }
  if (v598) {
    CFRelease(v598);
  }
  if (v231) {
    CFRelease(v231);
  }
  if (v601) {
    CFRelease(v601);
  }
  if (v600) {
    CFRelease(v600);
  }
  if (v234) {
    CFRelease(v234);
  }
  if (v603) {
    CFRelease(v603);
  }
  if (v602) {
    CFRelease(v602);
  }
  if (v236 < 0) {
    operator delete(v235[0]);
  }
  sub_6C878((uint64_t)&v646);
  if (v637) {
    CFRelease(v637);
  }
  if (v636) {
    CFRelease(v636);
  }
  for (juint64_t j = 6; jj != -2; jj -= 4)
  {
    char v135 = *(const void **)&v642[jj];
    if (v135) {
      CFRelease(v135);
    }
  }
  if (v240) {
    CFRelease(v240);
  }
  if (v639) {
    CFRelease(v639);
  }
  if (v638) {
    CFRelease(v638);
  }
  if (v243) {
    CFRelease(v243);
  }
  for (kuint64_t k = 0; kk != -4; kk -= 2)
  {
    uint64_t v137 = *(const void **)&v641[kk * 8 + 8];
    if (v137) {
      CFRelease(v137);
    }
    CFStringRef v138 = v640[kk + 2];
    if (v138) {
      CFRelease(v138);
    }
  }
  if (v245 < 0) {
    operator delete(v244[0]);
  }
  sub_6C878((uint64_t)&v686);
  if (v673) {
    CFRelease(v673);
  }
  if (v672) {
    CFRelease(v672);
  }
  for (muint64_t m = 10; mm != -2; mm -= 4)
  {
    int v140 = *(const void **)&v680[mm];
    if (v140) {
      CFRelease(v140);
    }
  }
  if (v249) {
    CFRelease(v249);
  }
  if (v675) {
    CFRelease(v675);
  }
  if (v674) {
    CFRelease(v674);
  }
  if (v251) {
    CFRelease(v251);
  }
  if (v677) {
    CFRelease(v677);
  }
  if (v676) {
    CFRelease(v676);
  }
  if (v254) {
    CFRelease(v254);
  }
  if (v679) {
    CFRelease(v679);
  }
  if (v678) {
    CFRelease(v678);
  }
  if (v256 < 0) {
    operator delete(v255[0]);
  }
  sub_6C878((uint64_t)&v726);
  if (v713) {
    CFRelease(v713);
  }
  if (v712) {
    CFRelease(v712);
  }
  for (nuint64_t n = 10; nn != -2; nn -= 4)
  {
    CFIndex v142 = *(const void **)&v720[nn];
    if (v142) {
      CFRelease(v142);
    }
  }
  if (v260) {
    CFRelease(v260);
  }
  if (v715) {
    CFRelease(v715);
  }
  if (v714) {
    CFRelease(v714);
  }
  if (v262) {
    CFRelease(v262);
  }
  if (v717) {
    CFRelease(v717);
  }
  if (v716) {
    CFRelease(v716);
  }
  if (v265) {
    CFRelease(v265);
  }
  if (v719) {
    CFRelease(v719);
  }
  if (v718) {
    CFRelease(v718);
  }
  if (v267 < 0) {
    operator delete(v266[0]);
  }
  sub_6C878((uint64_t)&v762);
  if (v753) {
    CFRelease(v753);
  }
  if (v752) {
    CFRelease(v752);
  }
  for (uint64_t i1 = 6; i1 != -2; i1 -= 4)
  {
    char v144 = *(const void **)&v758[i1];
    if (v144) {
      CFRelease(v144);
    }
  }
  if (v271) {
    CFRelease(v271);
  }
  if (v755) {
    CFRelease(v755);
  }
  if (v754) {
    CFRelease(v754);
  }
  if (v274) {
    CFRelease(v274);
  }
  for (uint64_t i2 = 0; i2 != -4; i2 -= 2)
  {
    std::mutex v146 = *(const void **)&v757[i2 * 8 + 8];
    if (v146) {
      CFRelease(v146);
    }
    CFStringRef v147 = v756[i2 + 2];
    if (v147) {
      CFRelease(v147);
    }
  }
  if (v276 < 0) {
    operator delete(v275[0]);
  }
  sub_6C878((uint64_t)&v798);
  if (v789) {
    CFRelease(v789);
  }
  if (v788) {
    CFRelease(v788);
  }
  for (uint64_t i3 = 6; i3 != -2; i3 -= 4)
  {
    int v149 = *(const void **)&v794[i3];
    if (v149) {
      CFRelease(v149);
    }
  }
  if (v280) {
    CFRelease(v280);
  }
  if (v791) {
    CFRelease(v791);
  }
  if (v790) {
    CFRelease(v790);
  }
  if (v283) {
    CFRelease(v283);
  }
  for (uint64_t i4 = 0; i4 != -4; i4 -= 2)
  {
    char v151 = *(const void **)&v793[i4 * 8 + 8];
    if (v151) {
      CFRelease(v151);
    }
    CFStringRef v152 = v792[i4 + 2];
    if (v152) {
      CFRelease(v152);
    }
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  sub_6C878((uint64_t)&v834);
  if (v825) {
    CFRelease(v825);
  }
  if (v824) {
    CFRelease(v824);
  }
  for (uint64_t i5 = 6; i5 != -2; i5 -= 4)
  {
    int v154 = *(const void **)&v830[i5];
    if (v154) {
      CFRelease(v154);
    }
  }
  if (v289) {
    CFRelease(v289);
  }
  if (v827) {
    CFRelease(v827);
  }
  if (v826) {
    CFRelease(v826);
  }
  if (v292) {
    CFRelease(v292);
  }
  for (uint64_t i6 = 0; i6 != -4; i6 -= 2)
  {
    int v156 = *(const void **)&v829[i6 * 8 + 8];
    if (v156) {
      CFRelease(v156);
    }
    CFStringRef v157 = v828[i6 + 2];
    if (v157) {
      CFRelease(v157);
    }
  }
  if (v294 < 0) {
    operator delete(v293[0]);
  }
  sub_6C878((uint64_t)&v869);
  for (uint64_t i7 = 6; i7 != -2; i7 -= 4)
  {
    int v159 = *(const void **)&v865[i7];
    if (v159) {
      CFRelease(v159);
    }
  }
  if (v299) {
    CFRelease(v299);
  }
  if (v864) {
    CFRelease(v864);
  }
  if (v863) {
    CFRelease(v863);
  }
  *(void *)&long long v834 = &v295;
  sub_15B944((void ***)&v834);
  if (v860)
  {
    v861 = v860;
    operator delete(v860);
  }
  if (v300) {
    CFRelease(v300);
  }
  if (v302 < 0) {
    operator delete(v301[0]);
  }
  sub_6C878((uint64_t)&v902);
  for (uint64_t i8 = 6; i8 != -2; i8 -= 4)
  {
    int v161 = *(const void **)&v898[i8];
    if (v161) {
      CFRelease(v161);
    }
  }
  if (v307) {
    CFRelease(v307);
  }
  if (v897) {
    CFRelease(v897);
  }
  if (v896) {
    CFRelease(v896);
  }
  *(void *)&long long v869 = &v303;
  sub_15B944((void ***)&v869);
  if (v893)
  {
    v894 = v893;
    operator delete(v893);
  }
  if (v308) {
    CFRelease(v308);
  }
  if (v310 < 0) {
    operator delete(v309[0]);
  }
  sub_6C878((uint64_t)&v935);
  for (uint64_t i9 = 6; i9 != -2; i9 -= 4)
  {
    int v163 = *(const void **)&v931[i9];
    if (v163) {
      CFRelease(v163);
    }
  }
  if (v315) {
    CFRelease(v315);
  }
  if (v930) {
    CFRelease(v930);
  }
  if (v929) {
    CFRelease(v929);
  }
  *(void *)&long long v902 = &v311;
  sub_15B944((void ***)&v902);
  if (v926)
  {
    v927 = v926;
    operator delete(v926);
  }
  if (v316) {
    CFRelease(v316);
  }
  if (v318 < 0) {
    operator delete(v317[0]);
  }
  sub_6C878((uint64_t)&v968);
  for (uint64_t i10 = 6; i10 != -2; i10 -= 4)
  {
    int v165 = *(const void **)&v964[i10];
    if (v165) {
      CFRelease(v165);
    }
  }
  if (v323) {
    CFRelease(v323);
  }
  if (v963) {
    CFRelease(v963);
  }
  if (v962) {
    CFRelease(v962);
  }
  *(void *)&long long v935 = &v319;
  sub_15B944((void ***)&v935);
  if (v959)
  {
    v960 = v959;
    operator delete(v959);
  }
  if (v324) {
    CFRelease(v324);
  }
  if (v326 < 0) {
    operator delete(v325[0]);
  }
  sub_6C878((uint64_t)&v1001);
  for (uint64_t i11 = 6; i11 != -2; i11 -= 4)
  {
    int64_t v167 = *(const void **)&v997[i11];
    if (v167) {
      CFRelease(v167);
    }
  }
  if (v331) {
    CFRelease(v331);
  }
  if (v996) {
    CFRelease(v996);
  }
  if (v995) {
    CFRelease(v995);
  }
  *(void *)&long long v968 = &v327;
  sub_15B944((void ***)&v968);
  if (v992)
  {
    v993 = v992;
    operator delete(v992);
  }
  if (v332) {
    CFRelease(v332);
  }
  if (v334 < 0) {
    operator delete(v333[0]);
  }
  sub_6C878((uint64_t)&v1034);
  for (uint64_t i12 = 6; i12 != -2; i12 -= 4)
  {
    std::string v169 = *(const void **)&v1030[i12];
    if (v169) {
      CFRelease(v169);
    }
  }
  if (v339) {
    CFRelease(v339);
  }
  if (v1029) {
    CFRelease(v1029);
  }
  if (v1028) {
    CFRelease(v1028);
  }
  *(void *)&long long v1001 = &v335;
  sub_15B944((void ***)&v1001);
  if (v1025)
  {
    v1026 = v1025;
    operator delete(v1025);
  }
  if (v340) {
    CFRelease(v340);
  }
  if (v342 < 0) {
    operator delete(v341[0]);
  }
  sub_6C878((uint64_t)&v349);
  for (uint64_t i13 = 6; i13 != -2; i13 -= 4)
  {
    std::string v171 = *(const void **)&v1063[i13];
    if (v171) {
      CFRelease(v171);
    }
  }
  if (v347) {
    CFRelease(v347);
  }
  if (v1062) {
    CFRelease(v1062);
  }
  if (v1061) {
    CFRelease(v1061);
  }
  *(void *)&long long v1034 = &v343;
  sub_15B944((void ***)&v1034);
  if (v1058)
  {
    v1059 = v1058;
    operator delete(v1058);
  }
  if (v348) {
    CFRelease(v348);
  }
  if (v373 < 0) {
    operator delete(v372[0]);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
}

void sub_428950(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_42BE48(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    uint64_t v6 = *(_DWORD **)(a3 + 8);
    do
    {
      unint64_t v7 = *(void *)(a3 + 16);
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v9 = *(_DWORD **)a3;
        uint64_t v10 = ((uint64_t)v6 - *(void *)a3) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v13 = (unint64_t)sub_46BF4(v13);
          uint64_t v9 = *(_DWORD **)a3;
          uint64_t v6 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (_DWORD *)(v13 + 4 * v10);
        *uint64_t v15 = *v5;
        int v8 = v15 + 1;
        while (v6 != v9)
        {
          int v16 = *--v6;
          *--uint64_t v15 = v16;
        }
        *(void *)a3 = v15;
        *(void *)(a3 + 8) = v8;
        *(void *)(a3 + 16) = v13 + 4 * v14;
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *uint64_t v6 = *v5;
        int v8 = v6 + 1;
      }
      *(void *)(a3 + 8) = v8;
      ++v5;
      uint64_t v6 = v8;
    }
    while (v5 != a2);
  }
}

uint64_t sub_42BF4C(uint64_t a1, int **a2)
{
  *(void *)(a1 + 8) = sub_650B4(a2);
  return a1;
}

void sub_42BF8C(_Unwind_Exception *a1)
{
  sub_60594(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_42BFA0(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "BeamIndex");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_42C040(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_42C084(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_42C11C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_42C158(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "REF_INPUT_CHANNEL_COUNTi");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_42C1F8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_42C234(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "IO_SAMPLE_RATE");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_42C2D4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_42C310(void *a1)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  operator new();
}

void sub_42C64C()
{
}

void sub_42C708(uint64_t a1)
{
  if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8), 1936748595, 64008, 0, 1)&& *(void *)(a1 + 16))
  {
    CFDictionaryRef v2 = (os_log_t *)sub_32A48(19);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      CFNumberRef v4 = v29;
      sub_2417C(v29, 0xFA08u);
      if (v30 < 0) {
        CFNumberRef v4 = (void **)v29[0];
      }
      sub_2417C(v27, 0x73707033u);
      int v5 = v28;
      uint64_t v6 = (void **)v27[0];
      sub_168E34(&__p, *(const __CFDictionary **)(a1 + 16));
      unint64_t v7 = v27;
      if (v5 < 0) {
        unint64_t v7 = v6;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      unsigned int v32 = "RoutingHandlerAction_ReApplyCPMSPowerBudget.cpp";
      __int16 v33 = 1024;
      int v34 = 24;
      __int16 v35 = 2080;
      __int16 v36 = v4;
      __int16 v37 = 2080;
      int v38 = v7;
      __int16 v39 = 2080;
      long long v40 = p_p;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Re-apply CPMS Budget: Setting property %s for AU %s Budget int Value = %s", buf, 0x30u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8), 1936748595, 64008, a1 + 16, 8, 1, 0);
  }
  else if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8), 1668312369, 64100, 0, 1)&& *(void *)(a1 + 16))
  {
    uint64_t v9 = (os_log_t *)sub_32A48(19);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v11 = v29;
      sub_2417C(v29, 0xFA64u);
      if (v30 < 0) {
        unint64_t v11 = (void **)v29[0];
      }
      sub_2417C(v27, 0x63706D31u);
      int v12 = v28;
      unint64_t v13 = (void **)v27[0];
      sub_168E34(&__p, *(const __CFDictionary **)(a1 + 16));
      uint64_t v14 = v27;
      if (v12 < 0) {
        uint64_t v14 = v13;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &__p;
      }
      else {
        uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      unsigned int v32 = "RoutingHandlerAction_ReApplyCPMSPowerBudget.cpp";
      __int16 v33 = 1024;
      int v34 = 30;
      __int16 v35 = 2080;
      __int16 v36 = v11;
      __int16 v37 = 2080;
      int v38 = v14;
      __int16 v39 = 2080;
      long long v40 = v15;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Re-apply CPMS Budget: Setting property %s for AU %s Budget int Value = %s", buf, 0x30u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8), 1668312369, 64100, a1 + 16, 8, 1, 0);
  }
  else
  {
    int v16 = (os_log_t *)sub_32A48(19);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = v29;
      sub_2417C(v29, 0xFA08u);
      if (v30 < 0) {
        uint64_t v18 = (void **)v29[0];
      }
      CFDictionaryRef v19 = v27;
      sub_2417C(v27, 0x73707033u);
      if (v28 < 0) {
        CFDictionaryRef v19 = (void **)v27[0];
      }
      sub_2417C(&__p, 0xFA64u);
      int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
      sub_2417C(v24, 0x63706D31u);
      int v22 = &__p;
      if (v20 < 0) {
        int v22 = (std::string *)v21;
      }
      if (v25 >= 0) {
        uint64_t v23 = v24;
      }
      else {
        uint64_t v23 = (void **)v24[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      unsigned int v32 = "RoutingHandlerAction_ReApplyCPMSPowerBudget.cpp";
      __int16 v33 = 1024;
      int v34 = 36;
      __int16 v35 = 2080;
      __int16 v36 = v18;
      __int16 v37 = 2080;
      int v38 = v19;
      __int16 v39 = 2080;
      long long v40 = v22;
      __int16 v41 = 2080;
      long long v42 = v23;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Re-apply CPMS Budget: DSPChain does not have any of the CPMS power budget properties present (%s for AU %s), or (%s for AU %s), nor their corresponding graph properties.", buf, 0x3Au);
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
  }
}

void sub_42CC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_42CCB0()
{
}

__n128 sub_42CCC8@<Q0>(AudioObjectID a1@<W1>, __n128 *a2@<X8>)
{
  CFNumberRef v4 = *(id *)sub_32A48(17);
  int v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315650;
    uint64_t v9 = "Device_HAL_Common.mm";
    __int16 v10 = 1024;
    int v11 = 548;
    __int16 v12 = 1024;
    AudioObjectID v13 = a1;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream ID = %u", (uint8_t *)&v8, 0x18u);
  }

  uint64_t v6 = operator new(0x70uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = off_63E688;
  result.n128_u64[0] = sub_1941C8((uint64_t)(v6 + 3), a1);
  result.n128_u64[1] = (unint64_t)v6;
  *a2 = result;
  return result;
}

void sub_42CDE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_42CE0C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_42CE30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63E688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_42CE84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63E688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_42CEA4(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 1869968496;
  }
  else {
    int v3 = 1768845428;
  }
  v15[0] = 1936482681;
  v15[1] = v3;
  _OWORD v15[2] = 0;
  unsigned int v14 = (*(uint64_t (**)(uint64_t, _DWORD *, void, void))(*(void *)a1 + 32))(a1, v15, 0, 0);
  CFNumberRef v4 = (unsigned int *)malloc_type_malloc(24 * v14, 0x7C51E058uLL);
  if (v14) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    AudioObjectID v13 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v6 = v4;
  (*(void (**)(uint64_t, _DWORD *, void, void, unsigned int *, unsigned int *))(*(void *)a1 + 40))(a1, v15, 0, 0, &v14, v4);
  uint64_t v7 = *v6;
  if (v7)
  {
    LODWORD(v8) = 0;
    uint64_t v9 = (int *)(v6 + 2);
    do
    {
      int v10 = *v9;
      v9 += 4;
      uint64_t v8 = (v10 + v8);
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  free(v6);
  return v8;
}

void sub_42CFF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_42D008(std::mutex *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _OWORD *a4@<X8>)
{
  sub_50848(a1);
  uint64_t v8 = &a1[4].__m_.__opaque[8];
  uint64_t v9 = 272;
  if (a2)
  {
    uint64_t v9 = 296;
    uint64_t v8 = &a1[4].__m_.__opaque[32];
  }
  uint64_t v10 = *(uint64_t *)((char *)&a1->__m_.__sig + v9);
  if (a3 >= (unint64_t)((*((void *)v8 + 1) - v10) >> 4))
  {
    __int16 v12 = v8;
    uint64_t v22 = v9;
    unsigned int v21 = a3;
    uint64_t v13 = sub_32A48(13);
    unsigned int v14 = sub_7D5E8(1, *(void **)v13, *(void *)(v13 + 8));
    uint64_t v15 = v14;
    if (v14)
    {
      int v16 = v14;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (a2) {
          uint64_t v17 = "output";
        }
        else {
          uint64_t v17 = "input";
        }
        sub_21C8C(__p, v17);
        uint64_t v18 = (void **)__p[0];
        if (v24 >= 0) {
          uint64_t v18 = __p;
        }
        uint64_t v19 = (*((void *)v12 + 1) - *(uint64_t *)((char *)&a1->__m_.__sig + v22)) >> 4;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        uint64_t v26 = "Device_HAL_Common.mm";
        __int16 v27 = 1024;
        int v28 = 376;
        __int16 v29 = 1024;
        unsigned int v30 = v21;
        __int16 v31 = 2080;
        unsigned int v32 = v18;
        __int16 v33 = 2048;
        uint64_t v34 = v19;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::range_error): \"Requested index %u, but %s stream has only %lu streams.\"", buf, 0x2Cu);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2815F8(exception, "Requested index %u, but %s stream has only %lu streams.");
  }
  long long v11 = *(_OWORD *)(v10 + 16 * a3);
  *a4 = v11;
  if (*((void *)&v11 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_42D218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_42D244(uint64_t a1, int a2)
{
  int v36 = a2;
  sub_50848((std::mutex *)a1);
  uint64_t v4 = sub_32A48(17);
  uint64_t v5 = sub_32A48(36);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = (int)buf[v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  id v11 = *(id *)v4;
  __int16 v12 = v11;
  if (v11)
  {
    uint64_t v13 = v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      buf[0] = 136315906;
      *(void *)&buf[1] = "Device_HAL_Common.mm";
      __int16 v38 = 1024;
      int v39 = 465;
      __int16 v40 = 1024;
      *(_DWORD *)__int16 v41 = a2;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously setting thermal budget to %u mW on physical device %u.", (uint8_t *)buf, 0x1Eu);
    }
  }
  AudioObjectID v15 = *(_DWORD *)(a1 + 268);
  strcpy((char *)buf, "wBhTptuo");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v16 = sub_42D5C4(v15, (uint64_t)buf, &v36);
  if (v16)
  {
    uint64_t v17 = sub_32A48(17);
    uint64_t v18 = sub_32A48(36);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = (int)buf[v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23) {
        goto LABEL_18;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_18:
    id v24 = *(id *)v17;
    char v25 = v24;
    if (v24)
    {
      uint64_t v26 = v24;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v16);
        int v27 = v35;
        int v28 = (void **)__p[0];
        int v29 = v36;
        int v30 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128))(v33, a1);
        __int16 v31 = __p;
        if (v27 < 0) {
          __int16 v31 = v28;
        }
        buf[0] = 136316418;
        *(void *)&buf[1] = "Device_HAL_Common.mm";
        __int16 v38 = 1024;
        int v39 = 472;
        __int16 v40 = 2080;
        *(void *)__int16 v41 = v31;
        *(_WORD *)&v41[8] = 1024;
        int v42 = v29;
        __int16 v43 = 1024;
        int v44 = v30;
        __int16 v45 = 2112;
        uint64_t v46 = v33[0];
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' setting thermal budget to %d mW on HAL device %u with UID \"%@\"", (uint8_t *)buf, 0x32u);
        sub_72924((uint64_t)v33);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v16;
}

void sub_42D580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_42D5C4(AudioObjectID a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    id v7 = *(id *)v6;
    if (v7)
    {
      uint64_t v8 = v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v76, (unsigned int *)&__p);
        uint64_t v9 = v76.__m_.__opaque[15] >= 0 ? &v76 : (std::mutex *)v76.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v66 = 1024;
        int v67 = 166;
        __int16 v68 = 2080;
        *(void *)unint64_t v69 = v9;
        *(_WORD *)&v69[8] = 1024;
        *(_DWORD *)&v69[10] = a1;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v76.__m_.__opaque[15] < 0) {
          operator delete((void *)v76.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v60 = a1;
  uint64_t v61 = *(void *)a2;
  int v62 = *(_DWORD *)(a2 + 8);
  int v63 = 0;
  uint64_t v64 = 0;
  unint64_t v10 = sub_42E00C((uint64_t)&v60);
  if (HIDWORD(v10)) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = *a3 == v10;
  }
  int v12 = v11;
  uint64_t v13 = sub_32A48(13);
  uint64_t v14 = *(void *)(v13 + 8);
  if (v12)
  {
    if ((v14 & 1) == 0) {
      return 0;
    }
    AudioObjectID v15 = *(id *)v13;
    if (!v15) {
      return 0;
    }
    uint64_t v16 = v15;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v66 = 1024;
      int v67 = 191;
      __int16 v68 = 1024;
      *(_DWORD *)unint64_t v69 = a1;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    }
LABEL_51:

    return 0;
  }
  if (v14)
  {
    id v17 = *(id *)v13;
    if (v17)
    {
      uint64_t v18 = v17;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v76, (unsigned int *)&__p);
        char v19 = v76.__m_.__opaque[15] >= 0 ? &v76 : (std::mutex *)v76.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v66 = 1024;
        int v67 = 199;
        __int16 v68 = 2080;
        *(void *)unint64_t v69 = v19;
        *(_WORD *)&v69[8] = 1024;
        *(_DWORD *)&v69[10] = a1;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v76.__m_.__opaque[15] < 0) {
          operator delete((void *)v76.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v20 = AudioObjectSetPropertyData(a1, &buf, 0, 0, 4u, a3);
  if (!v20)
  {
    unint64_t v28 = sub_42E00C((uint64_t)&v60);
    if (!HIDWORD(v28) && *a3 == v28)
    {
      uint64_t v29 = sub_32A48(13);
      if ((*(unsigned char *)(v29 + 8) & 1) == 0) {
        return 0;
      }
      int v30 = *(id *)v29;
      if (!v30) {
        return 0;
      }
      uint64_t v16 = v30;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v66 = 1024;
        int v67 = 219;
        __int16 v68 = 1024;
        *(_DWORD *)unint64_t v69 = a1;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
      }
      goto LABEL_51;
    }
    memset(v76.__m_.__opaque, 0, sizeof(v76.__m_.__opaque));
    v76.__m_.__uint64_t sig = 850045863;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795;
    char v59 = 0;
    sub_662FC(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v76, (uint64_t)&v59);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v35.__d_.__rep_) / -1000)
    {
      unint64_t v33 = sub_42E00C((uint64_t)&v60);
      int v34 = v33;
      uint64_t v20 = HIDWORD(v33);
      if (HIDWORD(v33)) {
        goto LABEL_104;
      }
      if (*a3 == v33) {
        break;
      }
      if (i <= 0)
      {
        uint64_t v20 = 2003329396;
        long long v50 = *(id *)sub_32A48(13);
        CFDictionaryRef v49 = v50;
        if (v50)
        {
          unsigned __int8 v47 = v50;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            uint64_t v53 = *(void *)a2;
            int v54 = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v53);
            uint64_t v51 = v56 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            BOOL v52 = *a3 == v34;
            buf.AudioObjectPropertySelector mSelector = 136316930;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            __int16 v66 = 1024;
            int v67 = 248;
            __int16 v68 = 2080;
            *(void *)unint64_t v69 = "set";
            *(_WORD *)&v69[8] = 2080;
            *(void *)&v69[10] = v51;
            *(_WORD *)&v69[18] = 2080;
            *(void *)&v69[20] = "set";
            *(_WORD *)&unsigned char v69[28] = 1024;
            BOOL v70 = v52;
            __int16 v71 = 1024;
            int v72 = 0;
            __int16 v73 = 1024;
            AudioObjectID v74 = a1;
            _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
            if (v56 < 0) {
              operator delete(__lk.__m_);
            }
          }
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      v35.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v36 = sub_32A48(13);
      if (*(unsigned char *)(v36 + 8))
      {
        __int16 v37 = *(id *)v36;
        if (v37)
        {
          __int16 v38 = v37;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            __int16 v66 = 1024;
            int v67 = 257;
            __int16 v68 = 2080;
            *(void *)unint64_t v69 = "with timeout";
            *(_WORD *)&v69[8] = 1024;
            *(_DWORD *)&v69[10] = a1;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v76;
      __lk.__owns_ = 1;
      std::mutex::lock(&v76);
      v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v59)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = v39.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v40 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_64;
          }
          v41.__d_.__rep_ = v40 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v41.__d_.__rep_ >= 1) {
            break;
          }
LABEL_82:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v40 || v59) {
            goto LABEL_64;
          }
        }
        std::chrono::steady_clock::now();
        v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v42.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 0;
          goto LABEL_78;
        }
        if (v42.__d_.__rep_ < 1)
        {
          if ((unint64_t)v42.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_77;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v42.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_78;
          }
LABEL_77:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 1000 * v42.__d_.__rep_;
LABEL_78:
          if (v43 > (v41.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v44.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_81:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v44);
            std::chrono::steady_clock::now();
            goto LABEL_82;
          }
        }
        v44.__d_.__rep_ = v43 + v41.__d_.__rep_;
        goto LABEL_81;
      }
LABEL_64:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v45 = sub_32A48(13);
    if ((*(unsigned char *)(v45 + 8) & 1) != 0 && (id v46 = *(id *)v45) != 0)
    {
      unsigned __int8 v47 = v46;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v53 = *(void *)a2;
        int v54 = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v53);
        CFDictionaryRef v48 = v56 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v66 = 1024;
        int v67 = 288;
        __int16 v68 = 2080;
        *(void *)unint64_t v69 = v48;
        *(_WORD *)&v69[8] = 1024;
        *(_DWORD *)&v69[10] = a1;
        _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v56 < 0) {
          operator delete(__lk.__m_);
        }
      }
      uint64_t v20 = 0;
      CFDictionaryRef v49 = v47;
LABEL_101:

LABEL_102:
    }
    else
    {
      uint64_t v20 = 0;
    }
LABEL_104:
    sub_6651C((uint64_t)&inClientData);
    std::condition_variable::~condition_variable(&__p);
    std::mutex::~mutex(&v76);
    return v20;
  }
  id v21 = *(id *)sub_32A48(13);
  uint64_t v22 = v21;
  if (v21)
  {
    char v23 = v21;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v76, v20);
      int v24 = v76.__m_.__opaque[15];
      uint64_t sig = v76.__m_.__sig;
      uint64_t inClientData = *(void *)a2;
      int v58 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&inClientData);
      uint64_t v26 = &v76;
      if (v24 < 0) {
        uint64_t v26 = (std::mutex *)sig;
      }
      if (__p.__cv_.__opaque[15] >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::condition_variable *)__p.__cv_.__sig;
      }
      buf.AudioObjectPropertySelector mSelector = 136316418;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v66 = 1024;
      int v67 = 207;
      __int16 v68 = 1024;
      *(_DWORD *)unint64_t v69 = v20;
      *(_WORD *)&v69[4] = 2080;
      *(void *)&v69[6] = v26;
      *(_WORD *)&v69[14] = 2080;
      *(void *)&v69[16] = p_p;
      *(_WORD *)&v69[24] = 1024;
      *(_DWORD *)&v69[26] = a1;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (__p.__cv_.__opaque[15] < 0) {
        operator delete((void *)__p.__cv_.__sig);
      }
      if (v76.__m_.__opaque[15] < 0) {
        operator delete((void *)v76.__m_.__sig);
      }
    }
  }
  return v20;
}

void sub_42DF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v37 - 168));
  _Unwind_Resume(a1);
}

unint64_t sub_42E00C(uint64_t a1)
{
  CFDictionaryRef v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_26DAC((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    id v7 = *(id *)sub_32A48(13);
    uint64_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = v7;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v21, v4);
        int v10 = v22;
        BOOL v11 = (void **)v21[0];
        uint64_t v17 = *v2;
        int v18 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
        int v12 = v21;
        if (v10 < 0) {
          int v12 = v11;
        }
        if (v20 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        AudioObjectID v14 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v24 = 1024;
        int v25 = 176;
        __int16 v26 = 1024;
        int v27 = v4;
        __int16 v28 = 2080;
        uint64_t v29 = v12;
        __int16 v30 = 2080;
        __int16 v31 = v13;
        __int16 v32 = 1024;
        AudioObjectID v33 = v14;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
    }
  }
  unint64_t v15 = HIDWORD(v4);
  if (!v6) {
    unint64_t v15 = 0;
  }
  return v15 | (v4 << 32);
}

void sub_42E1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_42E200(uint64_t a1, int a2)
{
  int v36 = a2;
  sub_50848((std::mutex *)a1);
  uint64_t v4 = sub_32A48(17);
  uint64_t v5 = sub_32A48(36);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = (int)buf[v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  id v11 = *(id *)v4;
  int v12 = v11;
  if (v11)
  {
    uint64_t v13 = v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      buf[0] = 136315906;
      *(void *)&buf[1] = "Device_HAL_Common.mm";
      __int16 v38 = 1024;
      int v39 = 447;
      __int16 v40 = 1024;
      *(_DWORD *)std::chrono::steady_clock::time_point v41 = a2;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously setting peak power budget to %u mW on physical device %u.", (uint8_t *)buf, 0x1Eu);
    }
  }
  AudioObjectID v15 = *(_DWORD *)(a1 + 268);
  strcpy((char *)buf, "wBPPptuo");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v16 = sub_42D5C4(v15, (uint64_t)buf, &v36);
  if (v16)
  {
    uint64_t v17 = sub_32A48(17);
    uint64_t v18 = sub_32A48(36);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = (int)buf[v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23) {
        goto LABEL_18;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_18:
    id v24 = *(id *)v17;
    int v25 = v24;
    if (v24)
    {
      __int16 v26 = v24;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v16);
        int v27 = v35;
        __int16 v28 = (void **)__p[0];
        int v29 = v36;
        int v30 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128))(v33, a1);
        __int16 v31 = __p;
        if (v27 < 0) {
          __int16 v31 = v28;
        }
        buf[0] = 136316418;
        *(void *)&buf[1] = "Device_HAL_Common.mm";
        __int16 v38 = 1024;
        int v39 = 455;
        __int16 v40 = 2080;
        *(void *)std::chrono::steady_clock::time_point v41 = v31;
        *(_WORD *)&v41[8] = 1024;
        int v42 = v29;
        __int16 v43 = 1024;
        int v44 = v30;
        __int16 v45 = 2112;
        uint64_t v46 = v33[0];
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' setting peak power budget to %d mW on HAL device %u with UID \"%@\"", (uint8_t *)buf, 0x32u);
        sub_72924((uint64_t)v33);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v16;
}

void sub_42E53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_42E580()
{
  return 0;
}

BOOL sub_42E588(uint64_t a1)
{
  CFDictionaryRef v2 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v3 = a1 + 384;
  uint64_t v4 = *(void *)(a1 + 392);
  if (v4 == a1 + 384)
  {
LABEL_4:
    BOOL v6 = 0;
  }
  else
  {
    while (1)
    {
      int v5 = *(_DWORD *)(*(void *)(v4 + 16) + 144);
      BOOL v6 = v5 == 1886613611;
      if (v5 == 1886613611) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3) {
        goto LABEL_4;
      }
    }
  }
  std::mutex::unlock(v2);
  return v6;
}

uint64_t sub_42E5FC(os_unfair_lock_s *a1)
{
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (byte_64A228)
  {
    strcpy(buf, "Sjnitpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, buf))
    {
      sub_42F210((uint64_t)buf, (uint64_t)a1, COERCE_DOUBLE(1869968496));
      uint64_t v21 = 0;
      *(_OWORD *)std::condition_variable __p = 0u;
      int v2 = buf[24];
      uint64_t v3 = __p;
      if (buf[24]) {
        uint64_t v3 = (void **)buf;
      }
      uint64_t v4 = *v3;
      int32x2_t v5 = vdup_n_s32(buf[24] == 0);
      v6.i64[0] = v5.u32[0];
      v6.i64[1] = v5.u32[1];
      int8x16_t v7 = vandq_s8(*(int8x16_t *)&buf[8], (int8x16_t)vcgezq_s64(vshlq_n_s64(v6, 0x3FuLL)));
      *(_OWORD *)(v3 + 1) = 0uLL;
      *uint64_t v3 = 0;
      uint64_t v22 = v4;
      char v19 = (void *)v7.i64[0];
      int8x16_t v23 = v7;
      if (__p[0]) {
        operator delete(__p[0]);
      }
      if (v2 && *(void *)buf) {
        operator delete(*(void **)buf);
      }
      if (v19 == v4)
      {
        strcpy(buf, "Sjnitpni");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        int v8 = sub_FE8A8((uint64_t)a1);
        id v9 = *(id *)sub_32A48(17);
        char v10 = v9;
        if (v9)
        {
          id v11 = v9;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            (*(void (**)(void **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                            + 128))(__p, a1);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 853;
            *(_WORD *)&unsigned char buf[18] = 2112;
            *(void **)&buf[20] = __p[0];
            __int16 v25 = 1024;
            int v26 = v8;
            _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling injection stream property on device %@. status: %u", buf, 0x22u);
            sub_72924((uint64_t)__p);
          }
        }
        if (!v8)
        {
          AudioObjectID v12 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
          sub_42F284(v12, 0x6F757470u, &v22);
        }
      }
      if (v4) {
        operator delete(v4);
      }
    }
  }
  uint64_t v13 = 0;
  *(_WORD *)AudioObjectPropertyAddress buf = 256;
  do
    sub_42E984(a1, buf[v13++]);
  while (v13 != 2);
  strcpy(buf, "nartbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v14 = sub_99A40((uint64_t)a1);
  *((void *)&v16 + 1) = v15;
  *(void *)&long long v16 = v14;
  if (((v16 >> 32) & 0xFF00000000) != 0 && HIDWORD(v14) == 1651274862)
  {
    strcpy(buf, "SxEatpni");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LODWORD(v22) = 0;
    sub_4581B0((uint64_t)a1, (uint64_t)buf, 4, (uint64_t)&v22);
  }
  return 1;
}

void sub_42E94C(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_42E984(os_unfair_lock_s *a1, int a2)
{
  uint64_t v3 = a1;
  if (a2) {
    uint64_t v4 = 296;
  }
  else {
    uint64_t v4 = 272;
  }
  if (a2) {
    int32x2_t v5 = a1 + 74;
  }
  else {
    int32x2_t v5 = a1 + 68;
  }
  if (*(void *)((char *)&a1->_os_unfair_lock_opaque + v4) != *(void *)&v5[2]._os_unfair_lock_opaque)
  {
    int64x2_t v6 = *(id *)sub_32A48(13);
    int8x16_t v7 = v6;
    if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = "input";
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (a2) {
        int v8 = "output";
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 806;
      __int16 v85 = 2080;
      *(void *)CFDictionaryRef v86 = v8;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \" %s streams already created\"", buf, 0x1Cu);
    }
  }
  UInt32 ioDataSize = 0;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1937009955;
  AudioObjectID os_unfair_lock_opaque = v3[67]._os_unfair_lock_opaque;
  if (a2) {
    AudioObjectPropertyScope v10 = 1869968496;
  }
  else {
    AudioObjectPropertyScope v10 = 1768845428;
  }
  *(_DWORD *)&uint8_t buf[4] = v10;
  *(_DWORD *)&_DWORD buf[8] = 0;
  outDataSize[0] = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(os_unfair_lock_opaque, (const AudioObjectPropertyAddress *)buf, 0, 0, outDataSize);
  UInt32 ioDataSize = outDataSize[0];
  if (outDataSize[0])
  {
    uint64_t v73 = (uint64_t)&v73;
    unint64_t v12 = 4 * ((unint64_t)outDataSize[0] >> 2);
    __chkstk_darwin(PropertyDataSize);
    inAddress.AudioObjectPropertySelector mSelector = 1937009955;
    inAddress.mScope = v10;
    inAddress.AudioObjectPropertyElement mElement = 0;
    AudioObjectID v13 = v3[67]._os_unfair_lock_opaque;
    uint64_t v79 = (char *)&v73 - ((v12 + 15) & 0x1FFFFFFF0);
    OSStatus PropertyData = AudioObjectGetPropertyData(v13, &inAddress, 0, 0, &ioDataSize, v79);
    if (PropertyData)
    {
      uint64_t v63 = sub_32A48(13);
      uint64_t v64 = sub_7D5E8(1, *(void **)v63, *(void *)(v63 + 8));
      uint64_t v65 = v64;
      if (v64)
      {
        __int16 v66 = v64;
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(outDataSize, inAddress.mScope);
          int v67 = v81 >= 0 ? outDataSize : *(UInt32 **)outDataSize;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 816;
          __int16 v85 = 2080;
          *(void *)CFDictionaryRef v86 = v67;
          _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"AudioObjectGetPropertyData(kAudioDevicePropertyStreams, '%s') failed.\"", buf, 0x1Cu);
          if (v81 < 0) {
            operator delete(*(void **)outDataSize);
          }
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = PropertyData;
    }
    if (v12 != ioDataSize)
    {
      uint64_t v69 = sub_32A48(13);
      BOOL v70 = sub_7D5E8(1, *(void **)v69, *(void *)(v69 + 8));
      __int16 v71 = v70;
      if (v70 && os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 818;
        __int16 v85 = 1024;
        *(_DWORD *)CFDictionaryRef v86 = ioDataSize;
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)&v86[6] = v12;
        _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a size of %u while we expected %u\"", buf, 0x1Eu);
      }

      int v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v72, "The HAL returned a size of %u while we expected %u");
    }
    if (ioDataSize >= 4)
    {
      uint64_t v16 = 0;
      unint64_t v17 = (unint64_t)ioDataSize >> 2;
      if (a2) {
        uint64_t v18 = "output";
      }
      else {
        uint64_t v18 = "input";
      }
      uint64_t v77 = v18;
      os_unfair_lock_t v78 = v3 + 2;
      *(void *)&long long v15 = 136316674;
      long long v75 = v15;
      unint64_t v76 = (unint64_t)ioDataSize >> 2;
      AudioObjectID v74 = v3;
      do
      {
        if (!*(_DWORD *)&v79[4 * v16])
        {
          uint64_t v59 = sub_32A48(13);
          AudioObjectID v60 = sub_7D5E8(1, *(void **)v59, *(void *)(v59 + 8));
          uint64_t v61 = v60;
          if (v60 && os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 824;
            __int16 v85 = 2080;
            *(void *)CFDictionaryRef v86 = v77;
            *(_WORD *)&v86[8] = 1024;
            int v87 = v16;
            _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned kAudioObjectUnknown for %s index %u.\"", buf, 0x22u);
          }

          int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v62, "The HAL returned kAudioObjectUnknown for %s index %u.");
        }
        (*(void (**)(unsigned char *__return_ptr, os_unfair_lock_s *))(*(void *)&v3->_os_unfair_lock_opaque + 464))(buf, v3);
        uint64_t v20 = *(_OWORD **)&v5[2]._os_unfair_lock_opaque;
        unint64_t v19 = *(void *)&v5[4]._os_unfair_lock_opaque;
        if ((unint64_t)v20 >= v19)
        {
          uint64_t v22 = *(void *)((char *)&v3->_os_unfair_lock_opaque + v4);
          uint64_t v23 = ((uint64_t)v20 - v22) >> 4;
          if ((unint64_t)(v23 + 1) >> 60) {
            sub_60548();
          }
          uint64_t v24 = v19 - v22;
          uint64_t v25 = v24 >> 3;
          if (v24 >> 3 <= (unint64_t)(v23 + 1)) {
            uint64_t v25 = v23 + 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          int v27 = (char *)sub_10724(v26);
          __int16 v28 = &v27[16 * v23];
          int v30 = &v27[16 * v29];
          *(_OWORD *)__int16 v28 = *(_OWORD *)buf;
          uint64_t v21 = v28 + 16;
          *(void *)AudioObjectPropertyAddress buf = 0;
          *(void *)&_DWORD buf[8] = 0;
          __int16 v31 = *(void **)&v5[2]._os_unfair_lock_opaque;
          __int16 v32 = *(void **)((char *)&v3->_os_unfair_lock_opaque + v4);
          if (v31 == v32)
          {
            *(void *)((char *)&v3->_os_unfair_lock_opaque + v4) = v28;
            *(void *)&v5[2]._AudioObjectID os_unfair_lock_opaque = v21;
            *(void *)&v5[4]._AudioObjectID os_unfair_lock_opaque = v30;
          }
          else
          {
            do
            {
              long long v33 = *((_OWORD *)v31 - 1);
              v31 -= 2;
              *((_OWORD *)v28 - 1) = v33;
              v28 -= 16;
              *__int16 v31 = 0;
              v31[1] = 0;
            }
            while (v31 != v32);
            __int16 v31 = *(void **)((char *)&v3->_os_unfair_lock_opaque + v4);
            int v34 = *(void **)&v5[2]._os_unfair_lock_opaque;
            *(void *)((char *)&v3->_os_unfair_lock_opaque + v4) = v28;
            *(void *)&v5[2]._AudioObjectID os_unfair_lock_opaque = v21;
            *(void *)&v5[4]._AudioObjectID os_unfair_lock_opaque = v30;
            while (v34 != v31)
            {
              char v35 = (std::__shared_weak_count *)*(v34 - 1);
              if (v35) {
                sub_4636C(v35);
              }
              v34 -= 2;
            }
          }
          if (v31) {
            operator delete(v31);
          }
          int v36 = *(std::__shared_weak_count **)&buf[8];
          *(void *)&v5[2]._AudioObjectID os_unfair_lock_opaque = v21;
          if (v36)
          {
            sub_4636C(v36);
            uint64_t v21 = *(_OWORD **)&v5[2]._os_unfair_lock_opaque;
          }
        }
        else
        {
          *uint64_t v20 = *(_OWORD *)buf;
          uint64_t v21 = v20 + 1;
          *(void *)&v5[2]._AudioObjectID os_unfair_lock_opaque = v21;
        }
        (*(void (**)(void))(**((void **)v21 - 2) + 80))(*((void *)v21 - 2));
        uint64_t v37 = *(void *)(*(void *)&v5[2]._os_unfair_lock_opaque - 16);
        strcpy(buf, "spatbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        uint64_t v38 = sub_99A40(v37);
        uint64_t v40 = v39;
        uint64_t v41 = sub_32A48(17);
        uint64_t v42 = sub_32A48(22);
        char v43 = 0;
        uint64_t v44 = 0;
        *((void *)&v46 + 1) = v40;
        *(void *)&long long v46 = v38;
        uint64_t v45 = v46 >> 32;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v47 = *(void *)(v41 + 8);
        while (1)
        {
          uint64_t v48 = *(int *)&buf[4 * v44];
          char v49 = v43;
          if (((v47 & v48) != 0) != ((*(void *)(v42 + 8) & v48) != 0)) {
            break;
          }
          char v43 = 1;
          uint64_t v44 = 1;
          if (v49) {
            goto LABEL_52;
          }
        }
        if ((v47 & v48) == 0) {
          uint64_t v41 = v42;
        }
LABEL_52:
        id v50 = *(id *)v41;
        uint64_t v51 = v50;
        if (v50)
        {
          BOOL v52 = v50;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v53 = v4;
            int v54 = *(_DWORD *)&v79[4 * v16];
            uint64_t v55 = *(void *)(*(void *)&v5[2]._os_unfair_lock_opaque - 16);
            sub_4F64((uint64_t)outDataSize, v78);
            char v56 = outDataSize;
            if (v81 < 0) {
              char v56 = *(UInt32 **)outDataSize;
            }
            if (v45) {
              BOOL v57 = (v45 & 0xFF00000000) == 0;
            }
            else {
              BOOL v57 = 1;
            }
            int v58 = "tapstream";
            if (v57) {
              int v58 = "";
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = v75;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 833;
            __int16 v85 = 2080;
            *(void *)CFDictionaryRef v86 = v77;
            *(_WORD *)&v86[8] = 1024;
            int v87 = v54;
            __int16 v88 = 2048;
            uint64_t v89 = v55;
            __int16 v90 = 2080;
            unint64_t v91 = v56;
            __int16 v92 = 2080;
            CFDictionaryRef v93 = v58;
            _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created %s stream with ID %u (%p) for device %s, %s", buf, 0x40u);
            if (v81 < 0) {
              operator delete(*(void **)outDataSize);
            }
            uint64_t v4 = v53;
            uint64_t v3 = v74;
            unint64_t v17 = v76;
          }
        }
        ++v16;
      }
      while (v16 != v17);
    }
  }
}

void sub_42F1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_42F210(uint64_t a1, uint64_t a2, double a3)
{
  int v9 = 1937009955;
  double v10 = a3;
  sub_1B2590((uint64_t)v5, a2);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v8)
  {
    double result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void sub_42F284(AudioObjectID a1, AudioObjectPropertyScope a2, void *a3)
{
  inAddress.AudioObjectPropertySelector mSelector = 1937009955;
  inAddress.mScope = a2;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    id v7 = *(id *)v6;
    if (v7)
    {
      char v8 = v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v70.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v70.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v71, (unsigned int *)&v70);
        int v9 = v71.__m_.__opaque[15] >= 0 ? &v71 : (std::mutex *)v71.__m_.__sig;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        __int16 v57 = 1024;
        int v58 = 166;
        __int16 v59 = 2080;
        *(void *)AudioObjectID v60 = v9;
        *(_WORD *)&v60[8] = 1024;
        LODWORD(v61) = a1;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", buf, 0x22u);
        if (v71.__m_.__opaque[15] < 0) {
          operator delete((void *)v71.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress v53 = inAddress;
  AudioObjectID v52 = a1;
  int v54 = 0;
  uint64_t v55 = 0;
  sub_42FB28((uint64_t)v50, (uint64_t)&v52);
  if (!v51)
  {
    double v10 = (void *)v50[0];
    if (a3[1] - *a3 != v50[1] - v50[0])
    {
      uint64_t v34 = sub_32A48(13);
      if (*(unsigned char *)(v34 + 8))
      {
        char v35 = *(id *)v34;
        if (v35)
        {
          int v36 = v35;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v57 = 1024;
            int v58 = 219;
            __int16 v59 = 1024;
            *(_DWORD *)AudioObjectID v60 = a1;
            _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", buf, 0x18u);
          }
        }
      }
      int v3 = 0;
      if (v10) {
        goto LABEL_71;
      }
      goto LABEL_72;
    }
  }
  memset(v71.__m_.__opaque, 0, sizeof(v71.__m_.__opaque));
  v70.__cv_.__uint64_t sig = 1018212795;
  memset(v70.__cv_.__opaque, 0, sizeof(v70.__cv_.__opaque));
  v71.__m_.__uint64_t sig = 850045863;
  char v49 = 0;
  sub_662FC(inClientData, a1, &inAddress, (uint64_t)&v70, (uint64_t)&v71, (uint64_t)&v49);
  uint64_t v11 = 400;
  do
  {
    sub_42FB28((uint64_t)__p, (uint64_t)&v52);
    unint64_t v12 = __p[0];
    if (v47)
    {
      int v13 = 1;
      int v3 = v47;
      if (__p[0]) {
        goto LABEL_29;
      }
      continue;
    }
    uint64_t v14 = a3[1] - *a3;
    if (v14 != (char *)__p[1] - (char *)__p[0])
    {
      int v13 = 12;
      if (!__p[0]) {
        continue;
      }
LABEL_29:
      operator delete(v12);
      continue;
    }
    if (v11 > 0)
    {
      v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v16 = sub_32A48(13);
      if (*(unsigned char *)(v16 + 8))
      {
        unint64_t v17 = *(id *)v16;
        if (v17)
        {
          uint64_t v18 = v17;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v57 = 1024;
            int v58 = 257;
            __int16 v59 = 2080;
            *(void *)AudioObjectID v60 = "with timeout";
            *(_WORD *)&v60[8] = 1024;
            LODWORD(v61) = a1;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)AudioObjectPropertyAddress buf = &qword_64CC40;
      _DWORD buf[8] = 0;
      _DWORD buf[8] = sub_1D4024();
      __lk.__m_ = &v71;
      __lk.__owns_ = 1;
      std::mutex::lock(&v71);
      v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v49)
      {
LABEL_24:
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_66410((uint64_t)buf);
        int v13 = 0;
        v11 += (std::chrono::system_clock::now().__d_.__rep_ - v15.__d_.__rep_) / -1000;
        if (v12) {
          goto LABEL_29;
        }
        continue;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = v19.__d_.__rep_ + 1000000 * v11;
      while (1)
      {
        if (v25 <= std::chrono::steady_clock::now().__d_.__rep_) {
          goto LABEL_24;
        }
        v26.__d_.__rep_ = v25 - std::chrono::steady_clock::now().__d_.__rep_;
        if (v26.__d_.__rep_ >= 1) {
          break;
        }
LABEL_56:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v25 || v49) {
          goto LABEL_24;
        }
      }
      std::chrono::steady_clock::now();
      v27.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v27.__d_.__rep_)
      {
        if (v27.__d_.__rep_ < 1)
        {
          if ((unint64_t)v27.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0x8000000000000000;
            goto LABEL_54;
          }
        }
        else if ((unint64_t)v27.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_52;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 1000 * v27.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = 0;
      }
LABEL_52:
      if (v28 > (v26.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v29.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_55:
        std::condition_variable::__do_timed_wait(&v70, &__lk, v29);
        std::chrono::steady_clock::now();
        goto LABEL_56;
      }
LABEL_54:
      v29.__d_.__rep_ = v28 + v26.__d_.__rep_;
      goto LABEL_55;
    }
    id v20 = *(id *)sub_32A48(13);
    uint64_t v21 = v20;
    if (v20)
    {
      uint64_t v22 = v20;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        AudioObjectPropertyAddress v42 = inAddress;
        sub_16C9C4((uint64_t)&__lk, &v42.mSelector);
        p_luint64_t k = &__lk;
        if (v44 < 0) {
          p_luint64_t k = __lk.__m_;
        }
        BOOL v24 = a3[1] - *a3 != v14;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316930;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        __int16 v57 = 1024;
        int v58 = 248;
        __int16 v59 = 2080;
        *(void *)AudioObjectID v60 = "updated";
        *(_WORD *)&v60[8] = 2080;
        uint64_t v61 = p_lk;
        __int16 v62 = 2080;
        uint64_t v63 = "updated";
        __int16 v64 = 1024;
        BOOL v65 = v24;
        __int16 v66 = 1024;
        int v67 = 0;
        __int16 v68 = 1024;
        AudioObjectID v69 = a1;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", buf, 0x42u);
        if (v44 < 0) {
          operator delete(__lk.__m_);
        }
      }
    }
    int v3 = 2003329396;
    int v13 = 1;
    if (v12) {
      goto LABEL_29;
    }
  }
  while (!v13);
  if (v13 == 12)
  {
    uint64_t v30 = sub_32A48(13);
    if (*(unsigned char *)(v30 + 8))
    {
      id v31 = *(id *)v30;
      if (v31)
      {
        __int16 v32 = v31;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
          *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
          sub_16C9C4((uint64_t)__p, (unsigned int *)&__lk);
          long long v33 = v46 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v57 = 1024;
          int v58 = 288;
          __int16 v59 = 2080;
          *(void *)AudioObjectID v60 = v33;
          *(_WORD *)&v60[8] = 1024;
          LODWORD(v61) = a1;
          _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", buf, 0x22u);
          if (v46 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    int v3 = 0;
  }
  sub_6651C((uint64_t)inClientData);
  std::condition_variable::~condition_variable(&v70);
  std::mutex::~mutex(&v71);
  double v10 = (void *)v50[0];
  if (v50[0]) {
LABEL_71:
  }
    operator delete(v10);
LABEL_72:
  if (v3)
  {
    uint64_t v37 = sub_32A48(13);
    uint64_t v38 = sub_7D5E8(1, *(void **)v37, *(void *)(v37 + 8));
    uint64_t v39 = v38;
    if (v38)
    {
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v57 = 1024;
        int v58 = 94;
        __int16 v59 = 1024;
        *(_DWORD *)AudioObjectID v60 = a1;
        *(_WORD *)&v60[4] = 1024;
        *(_DWORD *)&v60[6] = v3;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not enable stream in device %d, error = %u\"", buf, 0x1Eu);
      }
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not enable stream in device %d, error = %u");
  }
}

void sub_42FA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  sub_6651C((uint64_t)va);
  std::condition_variable::~condition_variable((std::condition_variable *)(v19 - 216));
  std::mutex::~mutex((std::mutex *)(v19 - 168));
  if (*v18) {
    operator delete(*v18);
  }
  _Unwind_Resume(a1);
}

void sub_42FB28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v22, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v22;
  if (v22)
  {
    id v7 = *(id *)sub_32A48(13);
    char v8 = v7;
    if (v7)
    {
      int v9 = v7;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v6);
        int v10 = v21;
        uint64_t v11 = (void **)v20[0];
        uint64_t v16 = *v4;
        int v17 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        unint64_t v12 = v20;
        if (v10 < 0) {
          unint64_t v12 = v11;
        }
        int v13 = (void **)__p[0];
        AudioObjectID v14 = *(_DWORD *)a2;
        if (v19 >= 0) {
          int v13 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v27 = 2080;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v28 = v12;
        __int16 v29 = 2080;
        uint64_t v30 = v13;
        __int16 v31 = 1024;
        AudioObjectID v32 = v14;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  if (v25)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v23, v24, (v24 - (uint64_t)v23) >> 2);
    uint64_t v15 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v15;
    *(_DWORD *)(a1 + 24) = v6;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_42FD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_42FD90(uint64_t a1, double a2)
{
  double inData = a2;
  sub_50848((std::mutex *)a1);
  uint64_t v3 = sub_32A48(17);
  uint64_t v4 = sub_32A48(36);
  char v5 = 0;
  uint64_t v6 = 0;
  *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *((int *)&buf.mSelector + v6);
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1;
    if (v9) {
      goto LABEL_7;
    }
  }
  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_7:
  id v10 = *(id *)v3;
  uint64_t v11 = v10;
  if (v10)
  {
    unint64_t v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.mScope = "Device_HAL_Common.mm";
      __int16 v89 = 1024;
      int v90 = 425;
      __int16 v91 = 2048;
      *(double *)__int16 v92 = a2;
      *(_WORD *)&v92[8] = 1024;
      *(_DWORD *)&v92[10] = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously setting sample rate to %f Hz on physical device %u.", (uint8_t *)&buf, 0x22u);
    }
  }
  kdebug_trace();
  AudioObjectID inObjectID = *(_DWORD *)(a1 + 268);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F626E737274;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v14 = sub_32A48(13);
  if (*(unsigned char *)(v14 + 8))
  {
    id v15 = *(id *)v14;
    if (v15)
    {
      uint64_t v16 = v15;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v97.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v97.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v98, (unsigned int *)&v97);
        int v17 = v98.__m_.__opaque[15] >= 0 ? &v98 : (std::mutex *)v98.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v89 = 1024;
        int v90 = 166;
        __int16 v91 = 2080;
        *(void *)__int16 v92 = v17;
        *(_WORD *)&v92[8] = 1024;
        *(_DWORD *)&v92[10] = inObjectID;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v98.__m_.__opaque[15] < 0) {
          operator delete((void *)v98.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v84 = inObjectID;
  AudioObjectPropertyAddress v85 = inAddress;
  int v86 = 0;
  uint64_t v87 = 0;
  double v18 = COERCE_DOUBLE(sub_430B20((uint64_t)&v84));
  if (!v19 && inData == v18)
  {
    uint64_t v32 = sub_32A48(13);
    if (*(unsigned char *)(v32 + 8))
    {
      long long v33 = *(id *)v32;
      uint64_t v24 = (uint64_t)v33;
      if (!v33) {
        goto LABEL_109;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v89 = 1024;
        int v90 = 191;
        __int16 v91 = 1024;
        *(_DWORD *)__int16 v92 = inObjectID;
        _os_log_impl(&def_1E50E8, (os_log_t)v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
      }
    }
LABEL_88:
    uint64_t v24 = 0;
    goto LABEL_109;
  }
  uint64_t v20 = sub_32A48(13);
  if (*(unsigned char *)(v20 + 8))
  {
    id v21 = *(id *)v20;
    if (v21)
    {
      unsigned int v22 = v21;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v97.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v97.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v98, (unsigned int *)&v97);
        uint64_t v23 = v98.__m_.__opaque[15] >= 0 ? &v98 : (std::mutex *)v98.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v89 = 1024;
        int v90 = 199;
        __int16 v91 = 2080;
        *(void *)__int16 v92 = v23;
        *(_WORD *)&v92[8] = 1024;
        *(_DWORD *)&v92[10] = inObjectID;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v98.__m_.__opaque[15] < 0) {
          operator delete((void *)v98.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = inAddress;
  uint64_t v24 = AudioObjectSetPropertyData(inObjectID, &buf, 0, 0, 8u, &inData);
  if (!v24)
  {
    double v34 = COERCE_DOUBLE(sub_430B20((uint64_t)&v84));
    if (!v35 && inData == v34)
    {
      uint64_t v50 = sub_32A48(13);
      if (*(unsigned char *)(v50 + 8))
      {
        int v51 = *(id *)v50;
        uint64_t v24 = (uint64_t)v51;
        if (!v51) {
          goto LABEL_109;
        }
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v89 = 1024;
          int v90 = 219;
          __int16 v91 = 1024;
          *(_DWORD *)__int16 v92 = inObjectID;
          _os_log_impl(&def_1E50E8, (os_log_t)v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
        }
      }
      goto LABEL_88;
    }
    memset(v98.__m_.__opaque, 0, sizeof(v98.__m_.__opaque));
    v98.__m_.__uint64_t sig = 850045863;
    memset(v97.__cv_.__opaque, 0, sizeof(v97.__cv_.__opaque));
    v97.__cv_.__uint64_t sig = 1018212795;
    char v83 = 0;
    sub_662FC(inClientData, inObjectID, &inAddress, (uint64_t)&v97, (uint64_t)&v98, (uint64_t)&v83);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v40.__d_.__rep_) / -1000)
    {
      double v37 = COERCE_DOUBLE(sub_430B20((uint64_t)&v84));
      uint64_t v24 = v38;
      if (v38) {
        goto LABEL_108;
      }
      double v39 = v37;
      if (inData == v37) {
        break;
      }
      if (i <= 0)
      {
        uint64_t v24 = 2003329396;
        __int16 v57 = *(id *)sub_32A48(13);
        char v56 = v57;
        if (v57)
        {
          int v54 = v57;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            AudioObjectPropertyAddress v79 = inAddress;
            sub_16C9C4((uint64_t)&__lk, &v79.mSelector);
            int v58 = v81 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            buf.AudioObjectPropertySelector mSelector = 136316930;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            __int16 v89 = 1024;
            int v90 = 248;
            __int16 v91 = 2080;
            *(void *)__int16 v92 = "set";
            *(_WORD *)&v92[8] = 2080;
            *(void *)&v92[10] = v58;
            *(_WORD *)&v92[18] = 2080;
            *(void *)&v92[20] = "set";
            *(_WORD *)&v92[28] = 1024;
            *(_DWORD *)&v92[30] = inData == v39;
            __int16 v93 = 1024;
            int v94 = 0;
            __int16 v95 = 1024;
            AudioObjectID v96 = inObjectID;
            _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
            if (v81 < 0) {
              operator delete(__lk.__m_);
            }
          }
          goto LABEL_105;
        }
        goto LABEL_106;
      }
      v40.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v41 = sub_32A48(13);
      if (*(unsigned char *)(v41 + 8))
      {
        AudioObjectPropertyAddress v42 = *(id *)v41;
        if (v42)
        {
          char v43 = v42;
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            __int16 v89 = 1024;
            int v90 = 257;
            __int16 v91 = 2080;
            *(void *)__int16 v92 = "with timeout";
            *(_WORD *)&v92[8] = 1024;
            *(_DWORD *)&v92[10] = inObjectID;
            _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v98;
      __lk.__owns_ = 1;
      std::mutex::lock(&v98);
      v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v83)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = v44.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v45 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_61;
          }
          v46.__d_.__rep_ = v45 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v46.__d_.__rep_ >= 1) {
            break;
          }
LABEL_79:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v45 || v83) {
            goto LABEL_61;
          }
        }
        std::chrono::steady_clock::now();
        v47.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v47.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v48 = 0;
          goto LABEL_75;
        }
        if (v47.__d_.__rep_ < 1)
        {
          if ((unint64_t)v47.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_74;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v48 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v47.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v48 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_75;
          }
LABEL_74:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v48 = 1000 * v47.__d_.__rep_;
LABEL_75:
          if (v48 > (v46.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v49.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_78:
            std::condition_variable::__do_timed_wait(&v97, &__lk, v49);
            std::chrono::steady_clock::now();
            goto LABEL_79;
          }
        }
        v49.__d_.__rep_ = v48 + v46.__d_.__rep_;
        goto LABEL_78;
      }
LABEL_61:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v52 = sub_32A48(13);
    if ((*(unsigned char *)(v52 + 8) & 1) != 0 && (id v53 = *(id *)v52) != 0)
    {
      int v54 = v53;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyAddress v79 = inAddress;
        sub_16C9C4((uint64_t)&__lk, &v79.mSelector);
        uint64_t v55 = v81 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v89 = 1024;
        int v90 = 288;
        __int16 v91 = 2080;
        *(void *)__int16 v92 = v55;
        *(_WORD *)&v92[8] = 1024;
        *(_DWORD *)&v92[10] = inObjectID;
        _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v81 < 0) {
          operator delete(__lk.__m_);
        }
      }
      uint64_t v24 = 0;
      char v56 = v54;
LABEL_105:

LABEL_106:
    }
    else
    {
      uint64_t v24 = 0;
    }
LABEL_108:
    sub_6651C((uint64_t)inClientData);
    std::condition_variable::~condition_variable(&v97);
    std::mutex::~mutex(&v98);
    goto LABEL_109;
  }
  id v25 = *(id *)sub_32A48(13);
  std::chrono::steady_clock::time_point v26 = v25;
  if (v25)
  {
    __int16 v27 = v25;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v98, v24);
      int v28 = v98.__m_.__opaque[15];
      uint64_t sig = v98.__m_.__sig;
      inClientData[0] = inAddress;
      sub_16C9C4((uint64_t)&v97, &inClientData[0].mSelector);
      uint64_t v30 = &v98;
      if (v28 < 0) {
        uint64_t v30 = (std::mutex *)sig;
      }
      if (v97.__cv_.__opaque[15] >= 0) {
        uint64_t v31 = (uint64_t)&v97;
      }
      else {
        uint64_t v31 = v97.__cv_.__sig;
      }
      buf.AudioObjectPropertySelector mSelector = 136316418;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v89 = 1024;
      int v90 = 207;
      __int16 v91 = 1024;
      *(_DWORD *)__int16 v92 = v24;
      *(_WORD *)&v92[4] = 2080;
      *(void *)&_OWORD v92[6] = v30;
      *(_WORD *)&v92[14] = 2080;
      *(void *)&v92[16] = v31;
      *(_WORD *)&v92[24] = 1024;
      *(_DWORD *)&v92[26] = inObjectID;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (v97.__cv_.__opaque[15] < 0) {
        operator delete((void *)v97.__cv_.__sig);
      }
      if (v98.__m_.__opaque[15] < 0) {
        operator delete((void *)v98.__m_.__sig);
      }
    }
  }
LABEL_109:
  kdebug_trace();
  if (v24)
  {
    uint64_t v59 = sub_32A48(17);
    uint64_t v60 = sub_32A48(36);
    char v61 = 0;
    uint64_t v62 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v63 = *(void *)(v59 + 8);
    while (1)
    {
      uint64_t v64 = *((int *)&buf.mSelector + v62);
      char v65 = v61;
      if (((v63 & v64) != 0) != ((*(void *)(v60 + 8) & v64) != 0)) {
        break;
      }
      char v61 = 1;
      uint64_t v62 = 1;
      if (v65) {
        goto LABEL_116;
      }
    }
    if ((v63 & v64) == 0) {
      uint64_t v59 = v60;
    }
LABEL_116:
    id v66 = *(id *)v59;
    int v67 = v66;
    if (v66)
    {
      __int16 v68 = v66;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v98, v24);
        int v69 = v98.__m_.__opaque[15];
        uint64_t v70 = v98.__m_.__sig;
        double v71 = inData;
        int v72 = *(_DWORD *)(a1 + 268);
        (*(void (**)(std::condition_variable *__return_ptr))(*(void *)a1 + 128))(&v97);
        uint64_t v73 = &v98;
        if (v69 < 0) {
          uint64_t v73 = (std::mutex *)v70;
        }
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "Device_HAL_Common.mm";
        __int16 v89 = 1024;
        int v90 = 436;
        __int16 v91 = 2080;
        *(void *)__int16 v92 = v73;
        *(_WORD *)&v92[8] = 2048;
        *(double *)&v92[10] = v71;
        *(_WORD *)&v92[18] = 1024;
        *(_DWORD *)&v92[20] = v72;
        *(_WORD *)&v92[24] = 2112;
        *(void *)&v92[26] = v97.__cv_.__sig;
        _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' setting sample rate to %f Hz on HAL device %u with UID \"%@\"", (uint8_t *)&buf, 0x36u);
        sub_72924((uint64_t)&v97);
        if (v98.__m_.__opaque[15] < 0) {
          operator delete((void *)v98.__m_.__sig);
        }
      }
    }
  }
  return v24;
}

void sub_430A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  sub_6651C((uint64_t)va);
  std::condition_variable::~condition_variable((std::condition_variable *)(v14 - 232));
  std::mutex::~mutex((std::mutex *)(v14 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_430B20(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  sub_904E4((uint64_t)&v20, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  unsigned int v4 = v20;
  if (v20)
  {
    id v5 = *(id *)sub_32A48(13);
    uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v18, v4);
        int v8 = v19;
        char v9 = (void **)v18[0];
        uint64_t v14 = *v2;
        int v15 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v14);
        id v10 = v18;
        if (v8 < 0) {
          id v10 = v9;
        }
        if (v17 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        AudioObjectID v12 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v24 = 1024;
        int v25 = 176;
        __int16 v26 = 1024;
        unsigned int v27 = v4;
        __int16 v28 = 2080;
        __int16 v29 = v10;
        __int16 v30 = 2080;
        uint64_t v31 = v11;
        __int16 v32 = 1024;
        AudioObjectID v33 = v12;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
    }
  }
  if (v22) {
    return v21;
  }
  else {
    return 0;
  }
}

void sub_430CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double sub_430D24(uint64_t a1)
{
  double v5 = 0.0;
  int v4 = 8;
  uint64_t v2 = 0x676C6F626E737274;
  int v3 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a1 + 40))(a1, &v2, 0, 0, &v4, &v5);
  return v5;
}

void sub_430D98(uint64_t a1)
{
  sub_50848((std::mutex *)a1);
  sub_430EE4(0);
  while (1)
  {
    std::mutex::lock((std::mutex *)(a1 + 320));
    if (!*(void *)(a1 + 400))
    {
      std::mutex::unlock((std::mutex *)(a1 + 320));
LABEL_15:
      uint64_t v9 = 0;
      sub_10FBF0();
      sub_10BA10();
    }
    uint64_t v2 = *(void *)(a1 + 392);
    unint64_t v4 = *(void *)(v2 + 16);
    int v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock((std::mutex *)(a1 + 320));
      if (!v4)
      {
        int v6 = 3;
        goto LABEL_12;
      }
      unint64_t v7 = v4;
      int v8 = v3;
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      double v5 = v3;
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 320));
      if (!v4) {
        goto LABEL_15;
      }
      double v5 = 0;
      unint64_t v7 = v4;
      int v8 = 0;
    }
    sub_431020(a1, &v7);
    if (v3)
    {
      sub_4636C(v5);
      int v6 = 0;
      int v3 = v5;
LABEL_12:
      sub_4636C(v3);
      if (v6) {
        goto LABEL_15;
      }
    }
  }
}

void sub_430E94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_E13D0((unsigned char **)va);
  sub_564E4(a1);
}

unsigned char *sub_430EE4(uint64_t a1)
{
  if (a1 && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    uint64_t v1 = *(id *)sub_32A48(13);
    uint64_t v2 = v1;
    if (v1 && os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)double v5 = 136315394;
      *(void *)&void v5[4] = "PortManager.h";
      __int16 v6 = 1024;
      int v7 = 202;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Client mutex is not owned by the current thread\"", v5, 0x12u);
    }
  }
  int v3 = (_DWORD *)sub_10FBF0();
  *(void *)double v5 = v3;
  unsigned char v5[8] = (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 16))(v3);
  ++v3[114];
  return sub_3BCAC(v5);
}

void sub_431020(uint64_t a1, unint64_t *a2)
{
  double v5 = (std::__shared_weak_count *)a2[1];
  v68[0] = *a2;
  v68[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = sub_431898(a1, v68);
  if (v5) {
    sub_4636C(v5);
  }
  if (!v6)
  {
    uint64_t v41 = sub_32A48(13);
    AudioObjectPropertyAddress v42 = sub_7D5E8(1, *(void **)v41, *(void *)(v41 + 8));
    char v43 = v42;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v70 = "Device_HAL_Common.mm";
      __int16 v71 = 1024;
      int v72 = 622;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(void *)(*a2 + 192) != a1)
  {
    uint64_t v45 = sub_32A48(13);
    std::chrono::steady_clock::time_point v46 = sub_7D5E8(1, *(void **)v45, *(void *)(v45 + 8));
    std::chrono::system_clock::time_point v47 = v46;
    if (v46)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v48 = v46;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        unint64_t v49 = *a2;
        CFStringRef v50 = *(const __CFString **)(*a2 + 248);
        CFStringRef theString = v50;
        LODWORD(v49) = *(unsigned __int8 *)(v49 + 256);
        char v65 = v49;
        if (v49 && v50)
        {
          CFRetain(v50);
          CFStringRef v50 = theString;
        }
        sub_21B7C(__p, v50);
        if (v67 >= 0) {
          int v51 = __p;
        }
        else {
          int v51 = (void **)__p[0];
        }
        uint64_t v52 = *(void *)(*a2 + 192);
        if (v52)
        {
          (*(void (**)(CFStringRef *__return_ptr, void))(*(void *)v52 + 128))(v60, *(void *)(*a2 + 192));
          id v53 = (const char *)&v61;
          sub_21B7C(&v61, v60[0]);
          if (v63 < 0) {
            id v53 = (const char *)v61;
          }
        }
        else
        {
          id v53 = "NULL";
        }
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(v57, a1);
        sub_21B7C(v58, v57[0]);
        if (v59 >= 0) {
          int v54 = v58;
        }
        else {
          int v54 = (void **)v58[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        uint64_t v70 = "Device_HAL_Common.mm";
        __int16 v71 = 1024;
        int v72 = 628;
        __int16 v73 = 2080;
        AudioObjectID v74 = v51;
        __int16 v75 = 2080;
        unint64_t v76 = v53;
        __int16 v77 = 2080;
        os_unfair_lock_t v78 = v54;
        _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s).\"", buf, 0x30u);
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        sub_72924((uint64_t)v57);
        if (v52)
        {
          if (v63 < 0) {
            operator delete(v61);
          }
          sub_72924((uint64_t)v60);
        }
        if (v67 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)&theString);
      }
    }
    uint64_t v55 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v55, "Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s).");
  }
  int v7 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v8 = a1 + 384;
  uint64_t v9 = *(uint64_t **)(a1 + 392);
  if (v9 == (uint64_t *)(a1 + 384)) {
    goto LABEL_78;
  }
  unint64_t v10 = *a2;
  while (v9[2] != v10)
  {
    uint64_t v9 = (uint64_t *)v9[1];
    if (v9 == (uint64_t *)v8) {
      goto LABEL_78;
    }
  }
  if (v9 == (uint64_t *)v8)
  {
LABEL_78:
    std::mutex::unlock(v7);
    unint64_t v40 = a2[1];
    v56[0] = *a2;
    v56[1] = v40;
    if (v40) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
    }
    sub_431914(v56);
  }
  uint64_t v11 = (std::__shared_weak_count *)v9[3];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_F7364(v8, v9);
  AudioObjectID v12 = *(void **)(a1 + 424);
  if (!v12)
  {
LABEL_18:
    int v13 = (uint64_t *)(a1 + 408);
    unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
    unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v14 >> 47) ^ v14);
    unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
    unint64_t v17 = *(void *)(a1 + 416);
    if (v17)
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        unint64_t v2 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
        if (v16 >= v17) {
          unint64_t v2 = v16 % v17;
        }
      }
      else
      {
        unint64_t v2 = v16 & (v17 - 1);
      }
      unsigned int v27 = *(void **)(*v13 + 8 * v2);
      if (v27)
      {
        for (uint64_t i = (void *)*v27; i; uint64_t i = (void *)*i)
        {
          unint64_t v29 = i[1];
          if (v29 == v16)
          {
            if (i[2] == v10)
            {
              char v26 = 0;
              if (!v11) {
                goto LABEL_76;
              }
LABEL_75:
              sub_4636C(v11);
              goto LABEL_76;
            }
          }
          else
          {
            if (v18.u32[0] > 1uLL)
            {
              if (v29 >= v17) {
                v29 %= v17;
              }
            }
            else
            {
              v29 &= v17 - 1;
            }
            if (v29 != v2) {
              break;
            }
          }
        }
      }
    }
    __int16 v30 = operator new(0x20uLL);
    void *v30 = 0;
    v30[1] = v16;
    v30[2] = v10;
    v30[3] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v31 = (float)(unint64_t)(*(void *)(a1 + 432) + 1);
    float v32 = *(float *)(a1 + 440);
    if (!v17 || (float)(v32 * (float)v17) < v31)
    {
      BOOL v33 = 1;
      if (v17 >= 3) {
        BOOL v33 = (v17 & (v17 - 1)) != 0;
      }
      unint64_t v34 = v33 | (2 * v17);
      unint64_t v35 = vcvtps_u32_f32(v31 / v32);
      if (v34 <= v35) {
        size_t v36 = v35;
      }
      else {
        size_t v36 = v34;
      }
      sub_6DEC4(a1 + 408, v36);
      unint64_t v17 = *(void *)(a1 + 416);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17) {
          unint64_t v2 = v16 % v17;
        }
        else {
          unint64_t v2 = v16;
        }
      }
      else
      {
        unint64_t v2 = (v17 - 1) & v16;
      }
    }
    uint64_t v37 = *v13;
    uint64_t v38 = *(void **)(*v13 + 8 * v2);
    if (v38)
    {
      void *v30 = *v38;
    }
    else
    {
      void *v30 = *(void *)(a1 + 424);
      *(void *)(a1 + 424) = v30;
      *(void *)(v37 + 8 * v2) = a1 + 424;
      if (!*v30) {
        goto LABEL_74;
      }
      unint64_t v39 = *(void *)(*v30 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v39 >= v17) {
          v39 %= v17;
        }
      }
      else
      {
        v39 &= v17 - 1;
      }
      uint64_t v38 = (void *)(*v13 + 8 * v39);
    }
    void *v38 = v30;
LABEL_74:
    char v26 = 0;
    ++*(void *)(a1 + 432);
    if (!v11) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  while (v12[2] != v10)
  {
    AudioObjectID v12 = (void *)*v12;
    if (!v12) {
      goto LABEL_18;
    }
  }
  id v19 = *(id *)sub_32A48(17);
  unsigned int v20 = v19;
  if (v19)
  {
    uint64_t v21 = v19;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v22 = *a2;
      uint64_t v23 = *(__CFString **)(*a2 + 248);
      char v61 = v23;
      LODWORD(v22) = *(unsigned __int8 *)(v22 + 256);
      char v62 = v22;
      if (v22) {
        BOOL v24 = v23 == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (!v24) {
        CFRetain(v23);
      }
      sub_21B7C(__p, v23);
      if (v67 >= 0) {
        int v25 = __p;
      }
      else {
        int v25 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v70 = "Device_HAL_Common.mm";
      __int16 v71 = 1024;
      int v72 = 645;
      __int16 v73 = 2080;
      AudioObjectID v74 = v25;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Port %s was unregistered multiple times. Skipping redundant unregistration and teardown.", buf, 0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)&v61);
    }
  }
  char v26 = 1;
  if (v11) {
    goto LABEL_75;
  }
LABEL_76:
  if ((v26 & 1) == 0) {
    goto LABEL_78;
  }
  std::mutex::unlock(v7);
}

void sub_431798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v33) {
    sub_4636C(v33);
  }
  std::mutex::unlock(v32);
  _Unwind_Resume(a1);
}

BOOL sub_431898(uint64_t a1, void *a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v5 = a1 + 384;
  uint64_t v6 = *(void *)(a1 + 392);
  if (v6 == a1 + 384)
  {
LABEL_4:
    uint64_t v6 = a1 + 384;
  }
  else
  {
    while (*(void *)(v6 + 16) != *a2)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == v5) {
        goto LABEL_4;
      }
    }
  }
  BOOL v7 = v6 != v5;
  std::mutex::unlock(v4);
  return v7;
}

void sub_431914(void *a1)
{
  char v34 = 0;
  uint64_t v35 = 0;
  sub_430EE4(0);
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 152))();
  (*(void (**)(void))(*(void *)*a1 + 88))();
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 152))())
  {
    id v3 = *(id *)sub_32A48(13);
    unint64_t v4 = v3;
    if (v3)
    {
      uint64_t v5 = v3;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *a1;
        CFStringRef v7 = *(const __CFString **)(*a1 + 248);
        CFStringRef theString = v7;
        LODWORD(v6) = *(unsigned __int8 *)(v6 + 256);
        char v31 = v6;
        if (v6 && v7)
        {
          CFRetain(v7);
          CFStringRef v7 = theString;
        }
        sub_21B7C(__p, v7);
        if (v33 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 518;
        __int16 v37 = 2080;
        uint64_t v38 = v8;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Port %s is connected after teardown\"", buf, 0x1Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)&theString);
      }
    }
  }
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 160))())
  {
    id v9 = *(id *)sub_32A48(13);
    unint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *a1;
        CFStringRef v13 = *(const __CFString **)(*a1 + 248);
        CFStringRef theString = v13;
        LODWORD(v12) = *(unsigned __int8 *)(v12 + 256);
        char v31 = v12;
        if (v12 && v13)
        {
          CFRetain(v13);
          CFStringRef v13 = theString;
        }
        sub_21B7C(__p, v13);
        if (v33 >= 0) {
          unint64_t v14 = __p;
        }
        else {
          unint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 519;
        __int16 v37 = 2080;
        uint64_t v38 = v14;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Port %s is routable after teardown\"", buf, 0x1Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)&theString);
      }
    }
  }
  if (v2 != (*(unsigned int (**)(void))(*(void *)*a1 + 152))())
  {
    uint64_t v15 = sub_32A48(17);
    uint64_t v16 = sub_32A48(9);
    char v17 = 0;
    uint64_t v18 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v19 = *(void *)(v15 + 8);
    do
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0))
      {
        if ((v19 & v20) == 0) {
          uint64_t v15 = v16;
        }
        if (*(void *)(v15 + 8)) {
          goto LABEL_38;
        }
        goto LABEL_52;
      }
      char v17 = 1;
      uint64_t v18 = 1;
    }
    while ((v21 & 1) == 0);
    if ((v19 & 1) == 0) {
      goto LABEL_52;
    }
LABEL_38:
    id v22 = *(id *)v15;
    if (v22)
    {
      uint64_t v23 = v22;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *a1;
        CFStringRef v25 = *(const __CFString **)(*a1 + 248);
        CFStringRef theString = v25;
        LODWORD(v24) = *(unsigned __int8 *)(v24 + 256);
        char v31 = v24;
        if (v24 && v25)
        {
          CFRetain(v25);
          CFStringRef v25 = theString;
        }
        sub_21B7C(__p, v25);
        if (v33 >= 0) {
          char v26 = __p;
        }
        else {
          char v26 = (void **)__p[0];
        }
        unsigned int v27 = "";
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(_WORD *)&unsigned char buf[12] = 1024;
        if (v2) {
          unsigned int v27 = "dis";
        }
        *(_DWORD *)&_DWORD buf[14] = 524;
        __int16 v37 = 2080;
        uint64_t v38 = v26;
        __int16 v39 = 2080;
        unint64_t v40 = v27;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port %s is now %sconnected", buf, 0x26u);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)&theString);
      }
    }
LABEL_52:
    __int16 v28 = (_DWORD *)sub_10FBF0();
    unint64_t v29 = (std::__shared_weak_count *)a1[1];
    *(void *)AudioObjectPropertyAddress buf = *a1;
    *(void *)&_DWORD buf[8] = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1106D8(v28, (uint64_t *)buf);
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *(void *)AudioObjectPropertyAddress buf = 0;
  sub_10FBF0();
  sub_10BA10();
}

void sub_431DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  sub_F69B4((uint64_t)va);
}

void sub_431EAC(char a1, void *__p)
{
  if (a1)
  {
    id v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      sub_4636C(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

BOOL sub_431F08(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
}

BOOL sub_431F5C(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  sub_50848((std::mutex *)a1);
  OSStatus v8 = AudioObjectAddPropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4);
  if (v8)
  {
    id v9 = *(id *)sub_32A48(17);
    unint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v22, v8);
        if (v23 >= 0) {
          uint64_t v12 = v22;
        }
        else {
          uint64_t v12 = (void **)v22[0];
        }
        int v13 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128))(v21, a1);
        uint64_t v14 = v21[0];
        sub_2417C(__p, a2->mSelector);
        if (v20 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        AudioObjectPropertyElement mElement = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136317186;
        CFStringRef v25 = "Device_HAL_Common.mm";
        __int16 v26 = 1024;
        int v27 = 313;
        __int16 v28 = 1024;
        OSStatus v29 = v8;
        __int16 v30 = 2080;
        char v31 = v12;
        __int16 v32 = 1024;
        int v33 = v13;
        __int16 v34 = 2112;
        uint64_t v35 = v14;
        __int16 v36 = 2080;
        __int16 v37 = v15;
        __int16 v38 = 1024;
        AudioObjectPropertyScope v39 = mScope;
        __int16 v40 = 1024;
        AudioObjectPropertyElement v41 = mElement;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %d (\"%s\"): mDeviceID %u (uid \"%@\"); selector \"%s\"; scope %u; element %u",
          buf,
          0x48u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)v21);
        if (v23 < 0) {
          operator delete(v22[0]);
        }
      }
    }
  }
  return v8 == 0;
}

void sub_43215C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_72924((uint64_t)&a12);
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_4321A0(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  sub_50848((std::mutex *)a1);
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if (a2->mSelector == 1836414053)
  {
    uint64_t v13 = sub_32A48(17);
    uint64_t v14 = sub_32A48(38);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&buf[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v19) {
        goto LABEL_8;
      }
    }
    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_8:
    id v20 = *(id *)v13;
    char v21 = v20;
    if (v20)
    {
      id v22 = v20;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        AudioObjectID v84 = a6;
        unsigned int v23 = *a6;
        int v24 = *(_DWORD *)(a1 + 268);
        sub_2417C(__p, a2->mScope);
        if (v95 >= 0) {
          CFStringRef v25 = __p;
        }
        else {
          CFStringRef v25 = (void **)__p[0];
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        AudioObjectPropertyElement mElement = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v97 = 1024;
        int v98 = 277;
        __int16 v99 = 1024;
        *(_DWORD *)CFDictionaryRef v100 = v23;
        *(_WORD *)&v100[4] = 1024;
        *(_DWORD *)&v100[6] = v24;
        *(_WORD *)&v100[10] = 2080;
        *(void *)&v100[12] = v25;
        *(_WORD *)&v100[20] = 1024;
        *(_DWORD *)&v100[22] = mScope;
        *(_WORD *)&v100[26] = 1024;
        *(_DWORD *)&v100[28] = mElement;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set mute value of %u on HAL device %u (selector: kAudioDevicePropertyMute; scope: '%s' (%u); element: %u).",
          buf,
          0x34u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
        a6 = v84;
      }
    }
    AudioObjectPropertySelector mSelector = a2->mSelector;
  }
  if (mSelector == 1987013732)
  {
    uint64_t v28 = sub_32A48(17);
    uint64_t v29 = sub_32A48(38);
    char v30 = 0;
    uint64_t v31 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1;
      if (v34) {
        goto LABEL_25;
      }
    }
    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
LABEL_25:
    id v35 = *(id *)v28;
    __int16 v36 = v35;
    if (v35)
    {
      __int16 v37 = v35;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        float v38 = *(float *)a6;
        int v39 = *(_DWORD *)(a1 + 268);
        sub_2417C(__p, a2->mScope);
        __int16 v40 = v95 >= 0 ? __p : (void **)__p[0];
        AudioObjectPropertyScope v41 = a2->mScope;
        AudioObjectPropertyElement v42 = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v97 = 1024;
        int v98 = 281;
        __int16 v99 = 2048;
        *(double *)CFDictionaryRef v100 = v38;
        *(_WORD *)&v100[8] = 1024;
        *(_DWORD *)&v100[10] = v39;
        *(_WORD *)&v100[14] = 2080;
        *(void *)&v100[16] = v40;
        *(_WORD *)&v100[24] = 1024;
        *(_DWORD *)&v100[26] = v41;
        *(_WORD *)&v100[30] = 1024;
        LODWORD(v101) = v42;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set decibel volume value of %f on HAL device %u (selector: kAudioDevicePropertyVolumeDecibels; scope"
          ": '%s' (%u); element: %u).",
          buf,
          0x38u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    AudioObjectPropertySelector mSelector = a2->mSelector;
  }
  if (mSelector == 1853059700)
  {
    uint64_t v43 = sub_32A48(17);
    uint64_t v44 = sub_32A48(36);
    char v45 = 0;
    uint64_t v46 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v47 = *(void *)(v43 + 8);
    while (1)
    {
      uint64_t v48 = *(int *)&buf[4 * v46];
      char v49 = v45;
      if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
        break;
      }
      char v45 = 1;
      uint64_t v46 = 1;
      if (v49) {
        goto LABEL_41;
      }
    }
    if ((v47 & v48) == 0) {
      uint64_t v43 = v44;
    }
LABEL_41:
    id v50 = *(id *)v43;
    int v51 = v50;
    if (v50)
    {
      uint64_t v52 = v50;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyAddress v85 = a6;
        uint64_t v53 = *(void *)a6;
        int v54 = *(_DWORD *)(a1 + 268);
        sub_2417C(__p, a2->mScope);
        if (v95 >= 0) {
          uint64_t v55 = __p;
        }
        else {
          uint64_t v55 = (void **)__p[0];
        }
        AudioObjectPropertyScope v56 = a2->mScope;
        AudioObjectPropertyElement v57 = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v97 = 1024;
        int v98 = 286;
        __int16 v99 = 2048;
        *(void *)CFDictionaryRef v100 = v53;
        *(_WORD *)&v100[8] = 1024;
        *(_DWORD *)&v100[10] = v54;
        *(_WORD *)&v100[14] = 2080;
        *(void *)&v100[16] = v55;
        *(_WORD *)&v100[24] = 1024;
        *(_DWORD *)&v100[26] = v56;
        *(_WORD *)&v100[30] = 1024;
        LODWORD(v101) = v57;
        _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting sample rate value of %f on HAL device %u (selector: kAudioDevicePropertyNominalSampleRate; s"
          "cope: '%s' (%u); element: %u).",
          buf,
          0x38u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
        a6 = v85;
      }
    }
    AudioObjectPropertySelector mSelector = a2->mSelector;
  }
  if (mSelector == 1936945763)
  {
    uint64_t v58 = sub_32A48(17);
    if (*(unsigned char *)(v58 + 8))
    {
      id v59 = *(id *)v58;
      if (v59)
      {
        uint64_t v60 = v59;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          UInt32 v86 = a3;
          char v61 = a6;
          sub_2417C(__p, *a6);
          int v62 = v95;
          char v63 = (void **)__p[0];
          int v64 = *(_DWORD *)(a1 + 268);
          __int16 v88 = *(void **)&a2->mSelector;
          AudioObjectPropertyElement v89 = a2->mElement;
          sub_16C9C4((uint64_t)v92, (unsigned int *)&v88);
          char v65 = __p;
          if (v62 < 0) {
            char v65 = v63;
          }
          id v66 = v92;
          if (v93 < 0) {
            id v66 = (void **)v92[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v97 = 1024;
          int v98 = 289;
          __int16 v99 = 2080;
          *(void *)CFDictionaryRef v100 = v65;
          *(_WORD *)&v100[8] = 1024;
          *(_DWORD *)&v100[10] = v64;
          *(_WORD *)&v100[14] = 2080;
          *(void *)&v100[16] = v66;
          _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting data source value of %s HAL device %u (%s).", buf, 0x2Cu);
          if (v93 < 0) {
            operator delete(v92[0]);
          }
          a6 = v61;
          if (v95 < 0) {
            operator delete(__p[0]);
          }
          a3 = v86;
        }
      }
    }
  }
  uint64_t result = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 268), a2, a3, a4, a5, a6);
  unsigned int v68 = result;
  if (result)
  {
    id v69 = *(id *)sub_32A48(17);
    uint64_t v70 = v69;
    if (v69)
    {
      __int16 v71 = v69;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v68);
        if (v95 >= 0) {
          int v72 = __p;
        }
        else {
          int v72 = (void **)__p[0];
        }
        int v73 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128))(v91, a1);
        uint64_t v87 = v91[0];
        sub_2417C(v92, a2->mSelector);
        int v74 = v93;
        __int16 v75 = (void **)v92[0];
        unsigned int v76 = a2->mScope;
        sub_2417C(&v88, v76);
        __int16 v77 = v92;
        if (v74 < 0) {
          __int16 v77 = v75;
        }
        os_unfair_lock_t v78 = &v88;
        if (v90 < 0) {
          os_unfair_lock_t v78 = v88;
        }
        AudioObjectPropertyElement v79 = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136317442;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v97 = 1024;
        int v98 = 295;
        __int16 v99 = 1024;
        *(_DWORD *)CFDictionaryRef v100 = v68;
        *(_WORD *)&v100[4] = 2080;
        *(void *)&v100[6] = v72;
        *(_WORD *)&v100[14] = 1024;
        *(_DWORD *)&v100[16] = v73;
        *(_WORD *)&v100[20] = 2112;
        *(void *)&v100[22] = v87;
        *(_WORD *)&v100[30] = 2080;
        CFDictionaryRef v101 = v77;
        __int16 v102 = 1024;
        unsigned int v103 = v76;
        __int16 v104 = 2080;
        std::string v105 = v78;
        __int16 v106 = 1024;
        AudioObjectPropertyElement v107 = v79;
        _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %d (\"%s\"): mDeviceID %u (uid \"%@\"); selector \"%s\"; scope %u ('%s'); element %u",
          buf,
          0x52u);
        if (v90 < 0) {
          operator delete(v88);
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        sub_72924((uint64_t)v91);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v80 = sub_32A48(13);
    char v81 = sub_7D5E8(1, *(void **)v80, *(void *)(v80 + 8));
    uint64_t v82 = v81;
    if (v81)
    {
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v97 = 1024;
        int v98 = 296;
        _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to set property data.\"", buf, 0x12u);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v68;
  }
  return result;
}

void sub_432A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a15);
  if (a28 < 0) {
    operator delete(a23);
  }

  _Unwind_Resume(a1);
}

void sub_432AE8(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  sub_50848((std::mutex *)a1);
  OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 268), a2, a3, a4, a5, a6);
  if (PropertyData)
  {
    unsigned int v56 = PropertyData;
    id v57 = *(id *)sub_32A48(17);
    uint64_t v58 = v57;
    if (v57)
    {
      id v59 = v57;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v56);
        if (v74 >= 0) {
          uint64_t v60 = __p;
        }
        else {
          uint64_t v60 = (void **)__p[0];
        }
        int v61 = *(_DWORD *)(a1 + 268);
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128))(v72, a1);
        uint64_t v62 = v72[0];
        sub_2417C(v70, a2->mSelector);
        if (v71 >= 0) {
          char v63 = v70;
        }
        else {
          char v63 = (void **)v70[0];
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        AudioObjectPropertyElement mElement = a2->mElement;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136317186;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v76 = 1024;
        int v77 = 247;
        __int16 v78 = 1024;
        *(_DWORD *)AudioObjectPropertyElement v79 = v56;
        *(_WORD *)&v79[4] = 2080;
        *(void *)&v79[6] = v60;
        *(_WORD *)&v79[14] = 1024;
        *(_DWORD *)&v79[16] = v61;
        *(_WORD *)&v79[20] = 2112;
        *(void *)&v79[22] = v62;
        *(_WORD *)&v79[30] = 2080;
        uint64_t v80 = v63;
        __int16 v81 = 1024;
        AudioObjectPropertyScope v82 = mScope;
        __int16 v83 = 1024;
        AudioObjectPropertyElement v84 = mElement;
        _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %d (\"%s\"): mDeviceID %u (uid \"%@\"); selector \"%s\"; scope %u; element %u",
          buf,
          0x48u);
        if (v71 < 0) {
          operator delete(v70[0]);
        }
        sub_72924((uint64_t)v72);
        if (v74 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v66 = sub_32A48(13);
    char v67 = sub_7D5E8(1, *(void **)v66, *(void *)(v66 + 8));
    unsigned int v68 = v67;
    if (v67 && os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      __int16 v76 = 1024;
      int v77 = 248;
      _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to obtain property data.\"", buf, 0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v56;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if (a2->mSelector == 1836414053)
  {
    uint64_t v14 = sub_32A48(17);
    uint64_t v15 = sub_32A48(38);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20)
      {
        if ((v18 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_11;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
    if (*(void *)(v14 + 8))
    {
LABEL_11:
      id v21 = *(id *)v14;
      if (v21)
      {
        id v22 = v21;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          float v23 = *a6;
          int v24 = *(_DWORD *)(a1 + 268);
          sub_2417C(__p, a2->mScope);
          CFStringRef v25 = v74 >= 0 ? __p : (void **)__p[0];
          AudioObjectPropertyScope v26 = a2->mScope;
          AudioObjectPropertyElement v27 = a2->mElement;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v76 = 1024;
          int v77 = 253;
          __int16 v78 = 1024;
          *(float *)AudioObjectPropertyElement v79 = v23;
          *(_WORD *)&v79[4] = 1024;
          *(_DWORD *)&v79[6] = v24;
          *(_WORD *)&v79[10] = 2080;
          *(void *)&v79[12] = v25;
          *(_WORD *)&v79[20] = 1024;
          *(_DWORD *)&v79[22] = v26;
          *(_WORD *)&v79[26] = 1024;
          *(_DWORD *)&v79[28] = v27;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get mute value of %u from HAL device %u (selector: kAudioDevicePropertyMute; scope: '%s' (%u); element: %u).",
            buf,
            0x34u);
          if (v74 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
LABEL_19:
    AudioObjectPropertySelector mSelector = a2->mSelector;
  }
  if (mSelector == 1987013732)
  {
    uint64_t v28 = sub_32A48(17);
    uint64_t v29 = sub_32A48(38);
    char v30 = 0;
    uint64_t v31 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1;
      if (v34)
      {
        if ((v32 & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_29;
      }
    }
    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
    if (*(void *)(v28 + 8))
    {
LABEL_29:
      id v35 = *(id *)v28;
      if (v35)
      {
        __int16 v36 = v35;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          float v37 = *a6;
          int v38 = *(_DWORD *)(a1 + 268);
          sub_2417C(__p, a2->mScope);
          int v39 = v74 >= 0 ? __p : (void **)__p[0];
          AudioObjectPropertyScope v40 = a2->mScope;
          AudioObjectPropertyElement v41 = a2->mElement;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v76 = 1024;
          int v77 = 258;
          __int16 v78 = 2048;
          *(double *)AudioObjectPropertyElement v79 = v37;
          *(_WORD *)&v79[8] = 1024;
          *(_DWORD *)&v79[10] = v38;
          *(_WORD *)&v79[14] = 2080;
          *(void *)&v79[16] = v39;
          *(_WORD *)&v79[24] = 1024;
          *(_DWORD *)&v79[26] = v40;
          *(_WORD *)&v79[30] = 1024;
          LODWORD(v80) = v41;
          _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get decibel volume value of %f from HAL device %u (selector: kAudioDevicePropertyVolumeDecibels; s"
            "cope: '%s' (%u); element: %u).",
            buf,
            0x38u);
          if (v74 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
LABEL_37:
    AudioObjectPropertySelector mSelector = a2->mSelector;
  }
  if (mSelector == 1853059700)
  {
    uint64_t v42 = sub_32A48(17);
    uint64_t v43 = sub_32A48(36);
    char v44 = 0;
    uint64_t v45 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v46 = *(void *)(v42 + 8);
    while (1)
    {
      uint64_t v47 = *(int *)&buf[4 * v45];
      char v48 = v44;
      if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
        break;
      }
      char v44 = 1;
      uint64_t v45 = 1;
      if (v48)
      {
        if ((v46 & 1) == 0) {
          return;
        }
        goto LABEL_47;
      }
    }
    if ((v46 & v47) == 0) {
      uint64_t v42 = v43;
    }
    if (*(void *)(v42 + 8))
    {
LABEL_47:
      id v49 = *(id *)v42;
      if (v49)
      {
        id v50 = v49;
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v51 = *(void *)a6;
          int v52 = *(_DWORD *)(a1 + 268);
          sub_2417C(__p, a2->mScope);
          if (v74 >= 0) {
            uint64_t v53 = __p;
          }
          else {
            uint64_t v53 = (void **)__p[0];
          }
          AudioObjectPropertyScope v54 = a2->mScope;
          AudioObjectPropertyElement v55 = a2->mElement;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v76 = 1024;
          int v77 = 263;
          __int16 v78 = 2048;
          *(void *)AudioObjectPropertyElement v79 = v51;
          *(_WORD *)&v79[8] = 1024;
          *(_DWORD *)&v79[10] = v52;
          *(_WORD *)&v79[14] = 2080;
          *(void *)&v79[16] = v53;
          *(_WORD *)&v79[24] = 1024;
          *(_DWORD *)&v79[26] = v54;
          *(_WORD *)&v79[30] = 1024;
          LODWORD(v80) = v55;
          _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get sample rate value of %f from HAL device %u (selector: kAudioDevicePropertyNominalSampleRate; s"
            "cope: '%s' (%u); element: %u).",
            buf,
            0x38u);
          if (v74 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void sub_433204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_72924((uint64_t)&a12);
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_433254(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  sub_50848((std::mutex *)a1);
  UInt32 outDataSize = 0;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(*(_DWORD *)(a1 + 268), a2, a3, a4, &outDataSize);
  if (PropertyDataSize)
  {
    uint64_t v10 = a1;
    p_AudioObjectPropertySelector mSelector = &a2->mSelector;
    id v12 = *(id *)sub_32A48(17);
    uint64_t v13 = v12;
    if (v12)
    {
      uint64_t v14 = v12;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = v29;
        sub_2417C(v29, PropertyDataSize);
        if (v30 < 0) {
          uint64_t v15 = (void **)v29[0];
        }
        uint64_t v16 = v10;
        int v17 = *(_DWORD *)(v10 + 268);
        (*(void (**)(void *__return_ptr))(*(void *)v16 + 128))(v28);
        uint64_t v18 = v28[0];
        sub_2417C(__p, *p_mSelector);
        if (v27 >= 0) {
          uint64_t v19 = __p;
        }
        else {
          uint64_t v19 = (void **)__p[0];
        }
        unsigned int v20 = p_mSelector[1];
        unsigned int v21 = p_mSelector[2];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136317186;
        uint64_t v33 = "Device_HAL_Common.mm";
        __int16 v34 = 1024;
        int v35 = 229;
        __int16 v36 = 1024;
        OSStatus v37 = PropertyDataSize;
        __int16 v38 = 2080;
        int v39 = v15;
        __int16 v40 = 1024;
        int v41 = v17;
        __int16 v42 = 2112;
        uint64_t v43 = v18;
        __int16 v44 = 2080;
        uint64_t v45 = v19;
        __int16 v46 = 1024;
        unsigned int v47 = v20;
        __int16 v48 = 1024;
        unsigned int v49 = v21;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %d (\"%s\"): mDeviceID %u (uid \"%@\"); selector \"%s\"; scope %u; element %u",
          buf,
          0x48u);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)v28);
        if (v30 < 0) {
          operator delete(v29[0]);
        }
      }
    }
    uint64_t v22 = sub_32A48(13);
    float v23 = sub_7D5E8(1, *(void **)v22, *(void *)(v22 + 8));
    int v24 = v23;
    if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v33 = "Device_HAL_Common.mm";
      __int16 v34 = 1024;
      int v35 = 230;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to determine the property's data size.\"", buf, 0x12u);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = PropertyDataSize;
  }
  return outDataSize;
}

void sub_433528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_72924((uint64_t)&a13);
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_43356C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  sub_50848((std::mutex *)a1);
  Boolean outIsSettable = 0;
  OSStatus IsPropertySettable = AudioObjectIsPropertySettable(*(_DWORD *)(a1 + 268), a2, &outIsSettable);
  if (outIsSettable >= 2u)
  {
    uint64_t v7 = sub_32A48(13);
    OSStatus v8 = sub_7D5E8(1, *(void **)v7, *(void *)(v7 + 8));
    id v9 = v8;
    if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_HAL_Common.mm";
      __int16 v14 = 1024;
      int v15 = 213;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned a bad value\"", buf, 0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The HAL returned a bad value");
  }
  return !IsPropertySettable && outIsSettable == 1;
}

void sub_4336B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_4336CC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

uint64_t sub_433710(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3, const void *a4, uint64_t a5)
{
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 96) = 850045863;
  *(void *)a1 = off_6274C8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 232;
  *(void *)(a1 + 240) = a1 + 232;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = sub_2106EC();
  *(unsigned char *)(a1 + 260) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)a1 = off_63E3A8;
  *(_DWORD *)(a1 + 268) = a2;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 850045863;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = a1 + 384;
  *(void *)(a1 + 392) = a1 + 384;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(void *)(a1 + 448) = a3;
  *(unsigned char *)(a1 + 456) = 1;
  if (a4) {
    CFRetain(a4);
  }
  sub_14E44((void *)(a1 + 464), a4);
  inAddress.AudioObjectPropertySelector mSelector = a2;
  *(void *)&v68.AudioObjectPropertySelector mSelector = 0x676C6F626D756964;
  v68.AudioObjectPropertyElement mElement = 0;
  sub_CDE9C((uint64_t)buf, &inAddress.mSelector, &v68, 0, 0);
  if (v80[10]
    && (uint64_t v11 = *(const void **)&v80[2],
        *(void *)&v80[2] = 0,
        std::condition_variable __p = off_63E5A8,
        CFTypeRef cf = v11,
        char v75 = 1,
        sub_49A90((const char **)((char *)&v78 + 4)),
        v75))
  {
    CFTypeRef v12 = cf;
    if (cf) {
      CFRetain(cf);
    }
    sub_14E44((void *)(a1 + 472), v12);
    if (v75) {
      sub_49A90(&__p);
    }
  }
  else
  {
    *(void *)(a1 + 472) = 0;
  }
  *(unsigned char *)(a1 + 480) = +[CiderService IsSimulatedDevice:*(unsigned int *)(a1 + 268)];
  *(void *)(a1 + 484) = a5;
  if (!a2)
  {
    uint64_t v35 = sub_32A48(13);
    __int16 v36 = sub_7D5E8(1, *(void **)v35, *(void *)(v35 + 8));
    OSStatus v37 = v36;
    if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v78 = "Device_HAL_Common.mm";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 115;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inPhysicalDeviceID passed as 0.\"", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inPhysicalDeviceID passed as 0.");
LABEL_64:
  }
  if (!a3)
  {
    uint64_t v39 = sub_32A48(13);
    __int16 v40 = sub_7D5E8(1, *(void **)v39, *(void *)(v39 + 8));
    int v41 = v40;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v78 = "Device_HAL_Common.mm";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 116;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [uid is NULL]: \"uid passed as NULL.\"", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "uid passed as NULL.");
    goto LABEL_64;
  }
  UInt32 ioDataSize = 4;
  int outData = -2;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"kniobolg";
  inAddress.AudioObjectPropertyElement mElement = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 268), &inAddress, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    id v42 = *(id *)sub_32A48(17);
    uint64_t v43 = v42;
    if (v42)
    {
      __int16 v44 = v42;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&__p, PropertyData);
        int v45 = v76;
        __int16 v46 = (void **)__p;
        sub_21B7C(&v68, a3);
        p_p = &__p;
        if (v45 < 0) {
          p_p = v46;
        }
        if (v69 >= 0) {
          __int16 v48 = &v68;
        }
        else {
          __int16 v48 = *(AudioObjectPropertyAddress **)&v68.mSelector;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v78 = "Device_HAL_Common.mm";
        __int16 v79 = 1024;
        *(_DWORD *)uint64_t v80 = 125;
        *(_WORD *)&v80[4] = 2080;
        *(void *)&v80[6] = p_p;
        *(_WORD *)&v80[14] = 2080;
        *(void *)&v80[16] = v48;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' reading hog mode status from physical device with UID \"%s\"", buf, 0x26u);
        if (v69 < 0) {
          operator delete(*(void **)&v68.mSelector);
        }
        if (v76 < 0) {
          operator delete(__p);
        }
      }
    }
    uint64_t v49 = sub_32A48(13);
    id v50 = sub_7D5E8(1, *(void **)v49, *(void *)(v49 + 8));
    uint64_t v51 = v50;
    if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v78 = "Device_HAL_Common.mm";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 126;
      int v52 = "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to read hog mode status.\"";
LABEL_97:
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, v52, buf, 0x12u);
    }
LABEL_98:

    char v67 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v67 = &off_6414D8;
    v67[2] = PropertyData;
  }
  if (ioDataSize != 4)
  {
    uint64_t v53 = sub_32A48(13);
    AudioObjectPropertyScope v54 = sub_7D5E8(1, *(void **)v53, *(void *)(v53 + 8));
    AudioObjectPropertyElement v55 = v54;
    if (v54 && os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v78 = "Device_HAL_Common.mm";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 127;
      _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"The HAL returned an oddly sized value\"", buf, 0x12u);
    }

    unsigned int v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    id v57 = (void (*)(void *))&std::runtime_error::~runtime_error;
    std::runtime_error::runtime_error(v56, "The HAL returned an oddly sized value");
    goto LABEL_93;
  }
  if (outData != -1)
  {
    if (getpid() != outData)
    {
      id v14 = *(id *)sub_32A48(17);
      int v15 = v14;
      if (v14)
      {
        uint64_t v16 = v14;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v17 = outData;
          int v18 = *(_DWORD *)(a1 + 268);
          sub_21B7C(&__p, a3);
          uint64_t v19 = v76 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          __int16 v78 = "Device_HAL_Common.mm";
          __int16 v79 = 1024;
          *(_DWORD *)uint64_t v80 = 140;
          *(_WORD *)&v80[4] = 1024;
          *(_DWORD *)&v80[6] = v17;
          *(_WORD *)&v80[10] = 1024;
          *(_DWORD *)&v80[12] = v18;
          *(_WORD *)&v80[16] = 2080;
          *(void *)&v80[18] = v19;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d process %u has hog mode on device %u with UID \"%s\"", buf, 0x28u);
          if (v76 < 0) {
            operator delete(__p);
          }
        }
      }
      unsigned int v20 = *(id *)sub_32A48(13);
      unsigned int v21 = v20;
      if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v78 = "Device_HAL_Common.mm";
        __int16 v79 = 1024;
        *(_DWORD *)uint64_t v80 = 141;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Another process has hog mode on a HAL device\"", buf, 0x12u);
      }
      goto LABEL_37;
    }
    uint64_t v59 = sub_32A48(13);
    uint64_t v60 = sub_7D5E8(1, *(void **)v59, *(void *)(v59 + 8));
    int v61 = v60;
    if (v60)
    {
      uint64_t v62 = v60;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        int v63 = *(_DWORD *)(a1 + 268);
        sub_21B7C(&__p, a3);
        int v64 = v76 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v78 = "Device_HAL_Common.mm";
        __int16 v79 = 1024;
        *(_DWORD *)uint64_t v80 = 146;
        *(_WORD *)&v80[4] = 1024;
        *(_DWORD *)&v80[6] = v63;
        *(_WORD *)&v80[10] = 2080;
        *(void *)&v80[12] = v64;
        _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Mediaserverd already has hog mode on AudioObjectID %u with UID \\\"%s\\\"\"", buf, 0x22u);
        if (v76 < 0) {
          operator delete(__p);
        }
      }
    }
    unsigned int v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    id v57 = (void (*)(void *))&std::logic_error::~logic_error;
    std::logic_error::logic_error((std::logic_error *)v56, "Mediaserverd already has hog mode on AudioObjectID %u with UID \"%s\"");
LABEL_93:
    __cxa_throw(v56, v58, v57);
  }
  OSStatus PropertyData = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 268), &inAddress, 0, 0, 4u, &outData);
  if (PropertyData)
  {
    uint64_t v65 = sub_32A48(13);
    uint64_t v66 = sub_7D5E8(1, *(void **)v65, *(void *)(v65 + 8));
    uint64_t v51 = v66;
    if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v78 = "Device_HAL_Common.mm";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 133;
      int v52 = "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to take hog mode.\"";
      goto LABEL_97;
    }
    goto LABEL_98;
  }
  id v22 = *(id *)sub_32A48(17);
  if (v22)
  {
    unsigned int v21 = v22;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      int v23 = *(_DWORD *)(a1 + 268);
      sub_21B7C(&__p, a3);
      int v24 = v76 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v78 = "Device_HAL_Common.mm";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 135;
      *(_WORD *)&v80[4] = 1024;
      *(_DWORD *)&v80[6] = v23;
      *(_WORD *)&v80[10] = 2080;
      *(void *)&v80[12] = v24;
      *(_WORD *)&v80[20] = 1024;
      *(_DWORD *)&v80[22] = outData;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d took hog mode on device %u with UID \"%s\" (our pid = %u)", buf, 0x28u);
      if (v76 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    unsigned int v21 = 0;
  }
LABEL_37:

  if (*(unsigned char *)(a1 + 480))
  {
    id v25 = *(id *)sub_32A48(17);
    AudioObjectPropertyScope v26 = v25;
    if (v25)
    {
      char v27 = v25;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        int v28 = *(_DWORD *)(a1 + 268);
        sub_21B7C(&__p, a3);
        uint64_t v29 = v76 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v78 = "Device_HAL_Common.mm";
        __int16 v79 = 1024;
        *(_DWORD *)uint64_t v80 = 153;
        *(_WORD *)&v80[4] = 1024;
        *(_DWORD *)&v80[6] = v28;
        *(_WORD *)&v80[10] = 2080;
        *(void *)&v80[12] = v29;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Detected that device %u with UID \"%s\" is simulated by ADS", buf, 0x22u);
        if (v76 < 0) {
          operator delete(__p);
        }
      }
    }
  }
  id v30 = *(id *)sub_32A48(17);
  uint64_t v31 = v30;
  if (v30)
  {
    uint64_t v32 = v30;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      sub_4F64((uint64_t)&__p, v10);
      if (v76 >= 0) {
        uint64_t v33 = &__p;
      }
      else {
        uint64_t v33 = __p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v78 = "Device_HAL_Common.mm";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 156;
      *(_WORD *)&v80[4] = 2080;
      *(void *)&v80[6] = v33;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created physical device %s.", buf, 0x1Cu);
      if (v76 < 0) {
        operator delete(__p);
      }
    }
  }
  return a1;
}

void sub_434350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, char a20,int a21,void **a22,uint64_t a23)
{
  if (SHIBYTE(a21) < 0) {
    operator delete(__p);
  }

  sub_6393C(a11);
  sub_6393C(a10);
  sub_72924(v23 + 448);
  sub_434508(v23 + 408);
  sub_B8E4(v25);
  std::mutex::~mutex(v24);
  a22 = (void **)(v23 + 296);
  sub_638B4(&a22);
  a22 = (void **)(v23 + 272);
  sub_638B4(&a22);
  sub_213C48(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_434508(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        sub_4636C(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_43456C(uint64_t a1)
{
  *(void *)a1 = off_63E3A8;
  char v75 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  int v2 = (void *)(a1 + 384);
  id v3 = *(void **)(a1 + 392);
  if (v3 == (void *)(a1 + 384))
  {
    char v76 = (uint64_t *)(a1 + 408);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 424);
    unint64_t v5 = 169;
    do
    {
      uint64_t v6 = (void *)*v4;
      if (*v4)
      {
        while (v6[2] != v3[2])
        {
          uint64_t v6 = (void *)*v6;
          if (!v6) {
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_6:
        uint64_t v7 = sub_32A48(17);
        uint64_t v8 = sub_32A48(23);
        char v9 = 0;
        uint64_t v10 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v11 = *(void *)(v7 + 8);
        while (1)
        {
          uint64_t v12 = *(int *)&buf[4 * v10];
          char v13 = v9;
          if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
            break;
          }
          char v9 = 1;
          uint64_t v10 = 1;
          if (v13) {
            goto LABEL_12;
          }
        }
        if ((v11 & v12) == 0) {
          uint64_t v7 = v8;
        }
LABEL_12:
        id v14 = *(id *)v7;
        int v15 = v14;
        if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t v16 = v3[2];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 169;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v16;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Port at %p was not torn down by the device, adding it to the removed port list", buf, 0x1Cu);
        }
      }
      id v3 = (void *)v3[1];
    }
    while (v3 != v2);
    int v17 = *(void **)(a1 + 392);
    char v76 = (uint64_t *)(a1 + 408);
    while (v17 != v2)
    {
      uint64_t v19 = v17 + 2;
      unint64_t v18 = v17[2];
      unint64_t v20 = 0x9DDFEA08EB382D69 * (((8 * v18) + 8) ^ HIDWORD(v18));
      unint64_t v21 = 0x9DDFEA08EB382D69 * (HIDWORD(v18) ^ (v20 >> 47) ^ v20);
      unint64_t v22 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
      unint64_t v23 = *(void *)(a1 + 416);
      if (v23)
      {
        uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] > 1uLL)
        {
          unint64_t v5 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
          if (v22 >= v23) {
            unint64_t v5 = v22 % v23;
          }
        }
        else
        {
          unint64_t v5 = v22 & (v23 - 1);
        }
        id v25 = *(void **)(*v76 + 8 * v5);
        if (v25)
        {
          for (uint64_t i = (void *)*v25; i; uint64_t i = (void *)*i)
          {
            unint64_t v27 = i[1];
            if (v27 == v22)
            {
              if (i[2] == v18) {
                goto LABEL_56;
              }
            }
            else
            {
              if (v24.u32[0] > 1uLL)
              {
                if (v27 >= v23) {
                  v27 %= v23;
                }
              }
              else
              {
                v27 &= v23 - 1;
              }
              if (v27 != v5) {
                break;
              }
            }
          }
        }
      }
      int v28 = operator new(0x20uLL);
      void *v28 = 0;
      v28[1] = v22;
      *((_OWORD *)v28 + 1) = *v19;
      *(void *)uint64_t v19 = 0;
      uint64_t v17[3] = 0;
      float v29 = (float)(unint64_t)(*(void *)(a1 + 432) + 1);
      float v30 = *(float *)(a1 + 440);
      if (!v23 || (float)(v30 * (float)v23) < v29)
      {
        BOOL v31 = (v23 & (v23 - 1)) != 0;
        if (v23 < 3) {
          BOOL v31 = 1;
        }
        unint64_t v32 = v31 | (2 * v23);
        unint64_t v33 = vcvtps_u32_f32(v29 / v30);
        if (v32 <= v33) {
          size_t v34 = v33;
        }
        else {
          size_t v34 = v32;
        }
        sub_6DEC4((uint64_t)v76, v34);
        unint64_t v23 = *(void *)(a1 + 416);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23) {
            unint64_t v5 = v22 % v23;
          }
          else {
            unint64_t v5 = v22;
          }
        }
        else
        {
          unint64_t v5 = (v23 - 1) & v22;
        }
      }
      uint64_t v35 = *v76;
      __int16 v36 = *(void **)(*v76 + 8 * v5);
      if (v36)
      {
        void *v28 = *v36;
      }
      else
      {
        void *v28 = *v4;
        void *v4 = v28;
        *(void *)(v35 + 8 * v5) = v4;
        if (!*v28) {
          goto LABEL_55;
        }
        unint64_t v37 = *(void *)(*v28 + 8);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v37 >= v23) {
            v37 %= v23;
          }
        }
        else
        {
          v37 &= v23 - 1;
        }
        __int16 v36 = (void *)(*v76 + 8 * v37);
      }
      *__int16 v36 = v28;
LABEL_55:
      ++*(void *)(a1 + 432);
LABEL_56:
      int v17 = (void *)v17[1];
    }
  }
  std::mutex::unlock(v75);
  std::mutex::lock(v75);
  double inData = 0;
  __int16 v78 = 0;
  v79[0] = 0;
  unint64_t v38 = *(void *)(a1 + 432);
  if (v38)
  {
    if (v38 >> 60) {
      sub_60548();
    }
    *(void *)&unsigned char buf[32] = v79;
    *(void *)AudioObjectPropertyAddress buf = sub_10724(v38);
    *(void *)&_DWORD buf[8] = *(void *)buf;
    *(void *)&buf[16] = *(void *)buf;
    *(void *)&unsigned char buf[24] = *(void *)buf + 16 * v39;
    sub_FBB48((uint64_t *)&inData, buf);
    sub_98E24((uint64_t)buf);
  }
  __int16 v40 = *(void **)(a1 + 424);
  while (v40)
  {
    int v41 = v40;
    __int16 v40 = (void *)*v40;
    sub_3B065C((uint64_t)buf, (void *)(a1 + 408), v41);
    id v42 = *(void **)buf;
    uint64_t v43 = *(void *)buf + 16;
    __int16 v44 = v78;
    if ((unint64_t)v78 >= v79[0])
    {
      uint64_t v46 = v78 - inData;
      if ((unint64_t)(v46 + 1) >> 60) {
        sub_60548();
      }
      unint64_t v47 = (uint64_t)(v79[0] - (void)inData) >> 3;
      if (v47 <= v46 + 1) {
        unint64_t v47 = v46 + 1;
      }
      if (v79[0] - (void)inData >= 0x7FFFFFFFFFFFFFF0uLL) {
        unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      *(void *)&unsigned char buf[32] = v79;
      uint64_t v49 = (char *)sub_10724(v48);
      id v50 = &v49[16 * v46];
      *(void *)AudioObjectPropertyAddress buf = v49;
      *(void *)&_DWORD buf[8] = v50;
      *(void *)&unsigned char buf[24] = &v49[16 * v51];
      *(_OWORD *)id v50 = *(_OWORD *)v43;
      *(void *)uint64_t v43 = 0;
      *(void *)(v43 + 8) = 0;
      *(void *)&buf[16] = v50 + 16;
      sub_FBB48((uint64_t *)&inData, buf);
      int v45 = v78;
      sub_98E24((uint64_t)buf);
    }
    else
    {
      _OWORD *v78 = *(_OWORD *)v43;
      int v45 = v44 + 1;
      *(void *)uint64_t v43 = 0;
      *(void *)(v43 + 8) = 0;
    }
    __int16 v78 = v45;
    sub_431EAC(1, v42);
  }
  if (inData != v78)
  {
    if ((sub_46FF9C((unint64_t *)qword_669B38) & 1) == 0)
    {
      int v52 = *(id *)sub_32A48(13);
      uint64_t v53 = v52;
      if (v52 && os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 72;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event", buf, 0x12u);
      }
    }
    uint64_t v54 = (uint64_t)inData;
    if (inData != v78)
    {
      do
      {
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)v54;
        *(void *)uint64_t v54 = 0;
        *(void *)(v54 + 8) = 0;
        sub_F73C0(buf);
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        AudioObjectPropertyElement v55 = (_OWORD *)(v54 + 16);
        unsigned int v56 = v78;
        if ((_OWORD *)(v54 + 16) == v78)
        {
          id v57 = (_OWORD *)v54;
        }
        else
        {
          do
          {
            id v57 = v55;
            long long v58 = *v55;
            *(void *)AudioObjectPropertyElement v55 = 0;
            *((void *)v55 + 1) = 0;
            uint64_t v59 = (std::__shared_weak_count *)*((void *)v55 - 1);
            *(v55 - 1) = v58;
            if (v59) {
              sub_4636C(v59);
            }
            ++v55;
          }
          while (v57 + 1 != v56);
          AudioObjectPropertyElement v55 = v78;
        }
        while (v55 != v57)
        {
          uint64_t v60 = (std::__shared_weak_count *)*((void *)v55 - 1);
          if (v60) {
            sub_4636C(v60);
          }
          --v55;
        }
        __int16 v78 = v57;
        uint64_t v54 = (uint64_t)inData;
      }
      while (inData != v57);
    }
  }
  *(void *)AudioObjectPropertyAddress buf = &inData;
  sub_74004((void ***)buf);
  std::mutex::unlock(v75);
  sub_63970((uint64_t *)(a1 + 272));
  sub_63970((uint64_t *)(a1 + 296));
  LODWORD(inData) = *(_DWORD *)(a1 + 268);
  strcpy(buf, "kniobolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v61 = sub_1E0594((AudioObjectID *)&inData, (const AudioObjectPropertyAddress *)buf, 0, 0);
  *((void *)&v64 + 1) = v62;
  *(void *)&long long v64 = v61;
  uint64_t v63 = v64 >> 32;
  if ((v63 & 0xFF00000000) != 0 && getpid() == v63)
  {
    LODWORD(inData) = -1;
    AudioObjectID v65 = *(_DWORD *)(a1 + 268);
    strcpy(buf, "kniobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    OSStatus v66 = AudioObjectSetPropertyData(v65, (const AudioObjectPropertyAddress *)buf, 0, 0, 4u, &inData);
    char v67 = *(id *)sub_32A48(17);
    AudioObjectPropertyAddress v68 = v67;
    if (v67 && os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      char v69 = "Failed to";
      int v70 = *(_DWORD *)(a1 + 268);
      uint64_t v71 = *(void *)(a1 + 448);
      if (!v66) {
        char v69 = "Successfully";
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 191;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v69;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = v70;
      *(_WORD *)&unsigned char buf[34] = 2112;
      *(void *)&uint8_t buf[36] = v71;
      _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s reset hog mode on device %u with UID \"%@\"", buf, 0x2Cu);
    }
  }
  int v72 = *(const void **)(a1 + 472);
  if (v72) {
    CFRelease(v72);
  }
  int v73 = *(const void **)(a1 + 464);
  if (v73) {
    CFRelease(v73);
  }
  sub_72924(a1 + 448);
  sub_434508((uint64_t)v76);
  sub_B8E4((uint64_t *)(a1 + 384));
  std::mutex::~mutex(v75);
  *(void *)AudioObjectPropertyAddress buf = a1 + 296;
  sub_638B4((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = a1 + 272;
  sub_638B4((void ***)buf);
  sub_213C48(a1);
  return a1;
}

void sub_434DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_434E4C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = *(void **)(a1 + 24);
  memset(&v11, 0, sizeof(v11));
  std::string::append(&v11, "{ ", 2uLL);
  unint64_t v5 = (void *)(a1 + 16);
  if (v4 != (void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v6 = (os_unfair_lock_s *)v4[2];
      uint64_t v7 = (std::__shared_weak_count *)v4[3];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_4F64((uint64_t)__p, v6 + 2);
      uint64_t v8 = (v13 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      char v9 = (v13 & 0x80u) == 0 ? (void *)v13 : __p[1];
      std::string::append(&v11, v8, (std::string::size_type)v9);
      if (((char)v13 & 0x80000000) == 0) {
        break;
      }
      operator delete(__p[0]);
      if (v7) {
        goto LABEL_12;
      }
LABEL_13:
      unint64_t v4 = (void *)v4[1];
      if (v4 == v5) {
        goto LABEL_17;
      }
      std::string::append(&v11, ", ", 2uLL);
    }
    if (!v7) {
      goto LABEL_13;
    }
LABEL_12:
    sub_4636C(v7);
    goto LABEL_13;
  }
LABEL_17:
  std::string::append(&v11, " }", 2uLL);
  uint64_t v10 = std::string::insert(&v11, 0, "Destroying core object(s): ", 0x1BuLL);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_434FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_434FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (unint64_t *)qword_669B38;
  unint64_t v5 = atomic_load((unint64_t *)qword_669B38);
  if (v5 && (sub_46FF9C((unint64_t *)qword_669B38) & 1) == 0)
  {
    uint64_t v6 = *(id *)sub_32A48(13);
    uint64_t v7 = v6;
    if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v20 = 1024;
      int v21 = 124;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mExecutionThread has been set outside of this command's execution\"", buf, 0x12u);
    }
  }
  if (sub_46FF9C(v4))
  {
    uint64_t v8 = sub_32A48(13);
    uint64_t v9 = sub_32A48(15);
    char v10 = 0;
    uint64_t v11 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1;
      if (v14) {
        goto LABEL_14;
      }
    }
    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_14:
    int v15 = *(id *)v8;
    uint64_t v16 = v15;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v20 = 1024;
      int v21 = 127;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Called recursively", buf, 0x12u);
    }
  }
  v18[0] = off_63E640;
  v18[1] = v4;
  v18[3] = v18;
  sub_528DC(buf, 0, (uint64_t)v18);
  sub_4F750(v18);
  atomic_store((unint64_t)pthread_self(), v4);
  sub_435274(v4, (void *)(a1 + 16), 0);
  sub_12053C(a2, 1920099684);
  return sub_52588((uint64_t)buf);
}

void sub_435238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_435274(unint64_t *a1, void *a2, int a3)
{
  if (a2[2])
  {
    if (a3)
    {
      unint64_t v4 = sub_13910();
      *(void *)char v14 = v14;
      *(void *)&v14[8] = v14;
      *(void *)&v14[16] = 0;
      uint64_t v5 = a2[2];
      if (v5)
      {
        uint64_t v7 = *a2;
        uint64_t v6 = (uint64_t *)a2[1];
        uint64_t v8 = *v6;
        *(void *)(v8 + 8) = *(void *)(*a2 + 8);
        **(void **)(v7 + 8) = v8;
        uint64_t v9 = *(void *)v14;
        *(void *)(*(void *)v14 + 8) = v6;
        *uint64_t v6 = v9;
        *(void *)(v7 + 8) = v14;
        *(void *)char v14 = v7;
        *(void *)&v14[16] = v5;
        a2[2] = 0;
      }
      id v10 = v4;
      operator new();
    }
    if ((sub_46FF9C(a1) & 1) == 0)
    {
      uint64_t v11 = *(id *)sub_32A48(13);
      uint64_t v12 = v11;
      if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v14 = 136315394;
        *(void *)&v14[4] = "ObjectDestructionManager.h";
        *(_WORD *)&unsigned char v14[12] = 1024;
        *(_DWORD *)&v14[14] = 72;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event", v14, 0x12u);
      }
    }
    while (a2[2])
    {
      uint64_t v13 = a2[1];
      *(_OWORD *)char v14 = *(_OWORD *)(v13 + 16);
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      sub_F73C0(v14);
      if (*(void *)&v14[8]) {
        sub_4636C(*(std::__shared_weak_count **)&v14[8]);
      }
      sub_F7364((uint64_t)a2, (uint64_t *)v13);
    }
  }
}

void sub_4354F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_435524()
{
}

void sub_4356D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8E4((uint64_t *)va);
  if (v2)
  {
    sub_B8E4(v2);
    operator delete();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_435738(uint64_t result)
{
  return result;
}

uint64_t sub_43574C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_63E640;
  a2[1] = v2;
  return result;
}

void *sub_435770(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_63E640;
  result[1] = v3;
  return result;
}

void sub_4357B8()
{
}

void sub_4357D0(uint64_t *a1)
{
  sub_435808(a1);

  operator delete();
}

uint64_t *sub_435808(uint64_t *a1)
{
  uint64_t v2 = a1 + 2;
  if (a1[4])
  {
    uint64_t v3 = sub_32A48(13);
    uint64_t v4 = sub_32A48(15);
    char v5 = 0;
    uint64_t v6 = 0;
    *(void *)std::condition_variable __p = 0x100000002;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&__p[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1;
      if (v9) {
        goto LABEL_8;
      }
    }
    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    id v10 = *(id *)v3;
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v12 = v10;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = (uint64_t *)a1[3];
        memset(&v20, 0, sizeof(v20));
        std::string::append(&v20, "{ ", 2uLL);
        if (v13 != v2)
        {
          while (1)
          {
            char v14 = (os_unfair_lock_s *)v13[2];
            int v15 = (std::__shared_weak_count *)v13[3];
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_4F64((uint64_t)__p, v14 + 2);
            uint64_t v16 = SBYTE3(v23) >= 0 ? __p : *(const std::string::value_type **)__p;
            std::string::size_type v17 = SBYTE3(v23) >= 0 ? BYTE3(v23) : *(void *)&__p[8];
            std::string::append(&v20, v16, v17);
            if ((SBYTE3(v23) & 0x80000000) == 0) {
              break;
            }
            operator delete(*(void **)__p);
            if (v15) {
              goto LABEL_21;
            }
LABEL_22:
            uint64_t v13 = (uint64_t *)v13[1];
            if (v13 == v2) {
              goto LABEL_26;
            }
            std::string::append(&v20, ", ", 2uLL);
          }
          if (!v15) {
            goto LABEL_22;
          }
LABEL_21:
          sub_4636C(v15);
          goto LABEL_22;
        }
LABEL_26:
        std::string::append(&v20, " }", 2uLL);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v18 = &v20;
        }
        else {
          unint64_t v18 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::condition_variable __p = 136315650;
        *(void *)&__p[4] = "ObjectDestructionManager.h";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 115;
        __int16 v22 = 2080;
        unint64_t v23 = v18;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Destructor called without an intervening call to Execute. Contained objects (%s) will be leaked!.", __p, 0x1Cu);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_B8E4(v2);
  return a1;
}

void sub_435A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_564E4(exception_object);
}

uint64_t sub_435AEC(void *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  v10[0] = off_63E5C8;
  v10[1] = v3;
  void v10[2] = v2;
  void v10[3] = v10;
  sub_528DC(v11, 0, (uint64_t)v10);
  sub_4F750(v10);
  int v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 152))();
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 80))();
  if (v5)
  {
    if (v4 != (*(unsigned int (**)(void))(*(void *)*a1 + 152))())
    {
      uint64_t v6 = (_DWORD *)sub_10FBF0();
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      v9[0] = *a1;
      v9[1] = (uint64_t)v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1106D8(v6, v9);
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    sub_4F6C8(v12);
  }
  sub_52588((uint64_t)v11);
  return v5;
}

void sub_435C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_52588((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_435CA4(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = sub_32A48(17);
  uint64_t v4 = sub_32A48(9);
  char v5 = 0;
  uint64_t v6 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&buf[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1;
    if (v9) {
      goto LABEL_7;
    }
  }
  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_7:
  id v10 = *(id *)v3;
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *v2;
      CFStringRef v14 = *(const __CFString **)(*v2 + 248);
      CFStringRef v23 = v14;
      LODWORD(v13) = *(unsigned __int8 *)(v13 + 256);
      char v24 = v13;
      if (v13) {
        BOOL v15 = v14 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15) {
        CFRetain(v14);
      }
      sub_21B7C(v25, v14);
      if (v26 >= 0) {
        uint64_t v16 = v25;
      }
      else {
        uint64_t v16 = (void **)v25[0];
      }
      uint64_t v17 = *(void *)(*v2 + 192);
      if (v17)
      {
        (*(void (**)(CFStringRef *__return_ptr))(*(void *)v17 + 128))(theString);
        sub_21B7C(__p, theString[0]);
        if (v22 >= 0) {
          unint64_t v18 = __p;
        }
        else {
          unint64_t v18 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v28 = 1024;
        int v29 = 487;
        __int16 v30 = 2080;
        BOOL v31 = v16;
        __int16 v32 = 2080;
        unint64_t v33 = (const char *)v18;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Initialization failed for port %s of device %s. The port has not been registered and will be queued for destruction.", buf, 0x26u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)theString);
      }
      else
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        __int16 v28 = 1024;
        int v29 = 487;
        __int16 v30 = 2080;
        BOOL v31 = v16;
        __int16 v32 = 2080;
        unint64_t v33 = "NULL";
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Initialization failed for port %s of device %s. The port has not been registered and will be queued for destruction.", buf, 0x26u);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      sub_72924((uint64_t)&v23);
    }
  }
  uint64_t v19 = *(atomic_ullong **)(a1 + 16);
  v25[0] = *(void **)(a1 + 8);
  v25[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  sub_431914(v25);
}

void sub_435FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_436048(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_4636C(v2);
  }

  operator delete(__p);
}

void sub_436088(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_4636C(v1);
  }
}

uint64_t sub_436098(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_63E5C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_4360D0(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_63E5C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_43612C(void *a1)
{
  *a1 = off_63E5C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_4636C(v1);
  }

  operator delete();
}

void *sub_436198(void *a1)
{
  *a1 = off_63E5C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_4636C(v2);
  }
  return a1;
}

void sub_4361E4(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  uint64_t v4 = (std::mutex *)(a2 + 320);
  std::mutex::lock((std::mutex *)(a2 + 320));
  char v5 = (void *)(a2 + 384);
  uint64_t v6 = *(void **)(a2 + 392);
  if (v6 != (void *)(a2 + 384))
  {
    do
    {
      uint64_t v8 = v6[2];
      uint64_t v7 = v6[3];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
      }
      char v9 = operator new(0x20uLL);
      uint64_t v9[2] = v8;
      v9[3] = v7;
      uint64_t v10 = *a1;
      void *v9 = *a1;
      v9[1] = a1;
      *(void *)(v10 + 8) = v9;
      *a1 = (uint64_t)v9;
      ++a1[2];
      uint64_t v6 = (void *)v6[1];
    }
    while (v6 != v5);
  }

  std::mutex::unlock(v4);
}

void sub_4362A0(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void sub_4362D0(uint64_t *a1, uint64_t a2)
{
  std::condition_variable __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  strcpy(v5, "cwdv");
  unsigned char v5[8] = 0;
  int v6 = 3;
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = v8;
  int v9 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C(a1, a2, (uint64_t)&__p);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v8[0]);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
}

void sub_436368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_470A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_43637C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  int v6 = (std::mutex *)(a2 + 320);
  std::mutex::lock((std::mutex *)(a2 + 320));
  uint64_t v7 = (void *)(a2 + 384);
  uint64_t v8 = *(void **)(a2 + 392);
  if (v8 != (void *)(a2 + 384))
  {
    do
    {
      if (sub_4642C(v8[2], a3))
      {
        uint64_t v10 = v8[2];
        uint64_t v9 = v8[3];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = operator new(0x20uLL);
        v11[2] = v10;
        uint64_t v11[3] = v9;
        uint64_t v12 = *a1;
        void *v11 = *a1;
        v11[1] = a1;
        *(void *)(v12 + 8) = v11;
        *a1 = (uint64_t)v11;
        ++a1[2];
      }
      uint64_t v8 = (void *)v8[1];
    }
    while (v8 != v7);
  }

  std::mutex::unlock(v6);
}

void sub_43644C(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void sub_436484(uint64_t a1, void ***a2)
{
  if (!*a2)
  {
    uint64_t v11 = sub_32A48(13);
    uint64_t v12 = sub_7D5E8(1, *(void **)v11, *(void *)(v11 + 8));
    uint64_t v13 = v12;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      __int16 v46 = 1024;
      int v47 = 588;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v44[0] = *a2;
  v44[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v5 = sub_431898(a1, v44);
  if (v4) {
    sub_4636C(v4);
  }
  if (v5)
  {
    BOOL v15 = a2;
    uint64_t v16 = sub_32A48(13);
    uint64_t v17 = sub_7D5E8(1, *(void **)v16, *(void *)(v16 + 8));
    unint64_t v18 = v17;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *v15;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      __int16 v46 = 1024;
      int v47 = 592;
      __int16 v48 = 2048;
      uint64_t v49 = v19;
      __int16 v50 = 2048;
      uint64_t v51 = a1;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Port at %p has already been registered to device at %p\"", buf, 0x26u);
    }

    std::string v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Port at %p has already been registered to device at %p");
  }
  std::mutex::lock((std::mutex *)(a1 + 320));
  int v6 = *(void **)(a1 + 424);
  if (v6)
  {
    while ((void **)v6[2] != *a2)
    {
      int v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_13;
      }
    }
    sub_3B065C((uint64_t)buf, (void *)(a1 + 408), v6);
    if (*(void *)buf) {
      sub_431EAC(SBYTE2(v47), *(void **)buf);
    }
  }
LABEL_13:
  std::mutex::unlock((std::mutex *)(a1 + 320));
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  v43[0] = *a2;
  v43[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = sub_435AEC(v43);
  if (v7) {
    sub_4636C(v7);
  }
  if (v8)
  {
    if ((*a2)[24] != (void *)a1)
    {
      int v21 = a2;
      uint64_t v22 = sub_32A48(13);
      CFStringRef v23 = sub_7D5E8(1, *(void **)v22, *(void *)(v22 + 8));
      char v24 = v23;
      if (v23)
      {
        id v25 = v23;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          char v26 = *v21;
          CFStringRef v27 = (const __CFString *)(*v21)[31];
          CFStringRef theString = v27;
          LODWORD(v26) = *((unsigned __int8 *)v26 + 256);
          char v40 = (char)v26;
          if (v26 && v27)
          {
            CFRetain(v27);
            CFStringRef v27 = theString;
          }
          __int16 v28 = v41;
          sub_21B7C(v41, v27);
          if (v42 < 0) {
            __int16 v28 = (void **)v41[0];
          }
          int v29 = (*v21)[24];
          if (v29)
          {
            (*(void (**)(CFStringRef *__return_ptr, void *))(*(void *)v29 + 128))(v36, v29);
            __int16 v30 = v37;
            sub_21B7C(v37, v36[0]);
            if (v38 < 0) {
              __int16 v30 = (void **)v37[0];
            }
          }
          else
          {
            __int16 v30 = (void **)"NULL";
          }
          (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(v33, a1);
          sub_21B7C(__p, v33[0]);
          if (v35 >= 0) {
            BOOL v31 = __p;
          }
          else {
            BOOL v31 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          __int16 v46 = 1024;
          int v47 = 614;
          __int16 v48 = 2080;
          uint64_t v49 = v28;
          __int16 v50 = 2080;
          uint64_t v51 = (uint64_t)v30;
          __int16 v52 = 2080;
          uint64_t v53 = v31;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s)\"", buf, 0x30u);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          sub_72924((uint64_t)v33);
          if (v29)
          {
            if (v38 < 0) {
              operator delete(v37[0]);
            }
            sub_72924((uint64_t)v36);
          }
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          sub_72924((uint64_t)&theString);
        }
      }
      __int16 v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v32, "Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s)");
    }
    std::mutex::lock((std::mutex *)(a1 + 320));
    uint64_t v9 = operator new(0x20uLL);
    v9[1] = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v10 = *(void *)(a1 + 384);
    *(void *)uint64_t v9 = v10;
    *((void *)v9 + 1) = a1 + 384;
    *(void *)(v10 + 8) = v9;
    *(void *)(a1 + 384) = v9;
    ++*(void *)(a1 + 400);
    std::mutex::unlock((std::mutex *)(a1 + 320));
  }
}

void sub_436A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_72924((uint64_t)&a15);
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a23);

  _Unwind_Resume(a1);
}

void sub_436AD8(uint64_t a1, int a2, unsigned int a3, int a4)
{
  int v56 = 1;
  sub_42F210((uint64_t)buf, a1, COERCE_DOUBLE(1768845428));
  uint64_t v59 = 0;
  *(_OWORD *)std::condition_variable __p = 0u;
  int v8 = buf[24];
  uint64_t v9 = __p;
  if (buf[24]) {
    uint64_t v9 = (void **)buf;
  }
  uint64_t v10 = (char *)*v9;
  int32x2_t v11 = vdup_n_s32(buf[24] == 0);
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  int8x16_t v13 = vandq_s8(*(int8x16_t *)&buf[8], (int8x16_t)vcgezq_s64(vshlq_n_s64(v12, 0x3FuLL)));
  *(_OWORD *)(v9 + 1) = 0uLL;
  _OWORD *v9 = 0;
  uint64_t v54 = v10;
  uint64_t v53 = (char *)v13.i64[0];
  int8x16_t v55 = v13;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v8 && *(void *)buf) {
    operator delete(*(void **)buf);
  }
  id v14 = *(id *)sub_32A48(17);
  BOOL v15 = v14;
  if (v14)
  {
    uint64_t v16 = v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(__p, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 705;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void **)&buf[20] = __p[0];
      __int16 v62 = 1024;
      *(_DWORD *)uint64_t v63 = (unint64_t)(v53 - v10) >> 2;
      *(_WORD *)&v63[4] = 2080;
      *(void *)&v63[6] = "Enabling";
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Device %@ has %d input streams before %s tapstream", buf, 0x2Cu);
      sub_72924((uint64_t)__p);
    }
  }
  if (a2 == 1 && *(unsigned char *)(a1 + 480))
  {
    AudioObjectID v17 = *(_DWORD *)(a1 + 268);
    strcpy(buf, "#mtsptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LODWORD(__p[0]) = 0;
    AudioObjectGetPropertyDataSize(v17, (const AudioObjectPropertyAddress *)buf, 0, 0, (UInt32 *)__p);
    if (!LODWORD(__p[0]))
    {
      char v40 = *(id *)sub_32A48(17);
      int v41 = v40;
      if (!v40)
      {
LABEL_58:

        goto LABEL_70;
      }
      int v41 = v40;
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
LABEL_57:

        goto LABEL_58;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(__p, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 716;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void **)&buf[20] = __p[0];
      char v42 = "%25s:%-5d Simulated device %@ has no output stream to tap -- skipping tapstream enablement";
LABEL_56:
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, v42, buf, 0x1Cu);
      sub_72924((uint64_t)__p);
      goto LABEL_57;
    }
    if (v10 != v53)
    {
      unint64_t v18 = v10;
      while (1)
      {
        LODWORD(__p[0]) = *(_DWORD *)v18;
        strcpy(buf, "spatbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unint64_t v19 = sub_26DAC((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0);
        *((void *)&v21 + 1) = v20;
        *(void *)&long long v21 = v19;
        if (((v21 >> 32) & 0xFF00000000) != 0 && HIDWORD(v19) != 0) {
          break;
        }
        v18 += 4;
        if (v18 == v53) {
          goto LABEL_23;
        }
      }
      uint64_t v43 = *(id *)sub_32A48(17);
      int v41 = v43;
      if (!v43) {
        goto LABEL_58;
      }
      int v41 = v43;
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_57;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(__p, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 728;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void **)&buf[20] = __p[0];
      char v42 = "%25s:%-5d Simulated device %@ has already posted tapstream -- skipping tapstream enablement";
      goto LABEL_56;
    }
LABEL_23:
    id v23 = *(id *)sub_32A48(17);
    char v24 = v23;
    if (v23)
    {
      id v25 = v23;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(__p, a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 735;
        *(_WORD *)&unsigned char buf[18] = 2112;
        *(void **)&buf[20] = __p[0];
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Overriding stream count change waiting policy for device %@: simulated devices must wait for stream count change", buf, 0x1Cu);
        sub_72924((uint64_t)__p);
      }
    }
    a2 = 0;
  }
  if (a4)
  {
    int inData = 1;
    *(_DWORD *)AudioObjectPropertyAddress buf = 1668575852;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_DWORD *)&_DWORD buf[8] = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, buf))
    {
      LODWORD(__p[0]) = 1668575852;
      *(void **)((char *)__p + 4) = (void *)a3;
      sub_1B2590((uint64_t)buf, a1);
      int v26 = *(_DWORD *)buf;
      if (*(_DWORD *)buf || !v63[2])
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = v26;
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v59 = 0;
      CFStringRef v27 = *(void **)&buf[8];
      sub_46B38(__p, *(const void **)&buf[8], *(uint64_t *)&buf[16], (uint64_t)(*(void *)&buf[16] - *(void *)&buf[8]) >> 2);
      if (v27) {
        operator delete(v27);
      }
      __int16 v28 = __p[0];
      int v29 = (AudioObjectID *)__p[1];
      if (__p[0] != __p[1])
      {
        __int16 v30 = (AudioObjectID *)__p[0];
        while (1)
        {
          LODWORD(__p[0]) = *v30;
          *(_DWORD *)AudioObjectPropertyAddress buf = 1668047219;
          *(_DWORD *)&uint8_t buf[4] = a3;
          *(_DWORD *)&_DWORD buf[8] = 0;
          unint64_t v31 = sub_26DAC((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0);
          int v33 = v31;
          if (v31 || !v32)
          {
            uint64_t v51 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v51 = &off_6414D8;
            double v51[2] = v33;
          }
          if (HIDWORD(v31) == 1702259059) {
            break;
          }
          if (++v30 == v29) {
            goto LABEL_66;
          }
        }
        *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F626263766CLL;
        inAddress.AudioObjectPropertyElement mElement = 0;
        OSStatus v44 = AudioObjectSetPropertyData(*v30, &inAddress, 0, 0, 4u, &inData);
        id v45 = *(id *)sub_32A48(17);
        __int16 v46 = v45;
        if (v45)
        {
          int v47 = v45;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            int v48 = inData;
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(__p, a1);
            uint64_t v49 = "Enabling";
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(_WORD *)&unsigned char buf[12] = 1024;
            if (!v48) {
              uint64_t v49 = "Disabling";
            }
            *(_DWORD *)&_DWORD buf[14] = 776;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v49;
            __int16 v62 = 2112;
            *(void **)uint64_t v63 = __p[0];
            *(_WORD *)&v63[8] = 1024;
            *(_DWORD *)&v63[10] = v44;
            _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s reference stream control on device %@. status: %u", buf, 0x2Cu);
            sub_72924((uint64_t)__p);
          }
        }
      }
LABEL_66:
      if (v28) {
        operator delete(v28);
      }
    }
    if (!a2)
    {
      AudioObjectID v50 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      sub_42F284(v50, 0x696E7074u, &v54);
    }
  }
  else
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1952542820;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_DWORD *)&_DWORD buf[8] = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, buf))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 1952542820;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_DWORD *)&_DWORD buf[8] = 0;
      int v34 = sub_FE8A8(a1);
      id v35 = *(id *)sub_32A48(17);
      __int16 v36 = v35;
      if (v35)
      {
        unint64_t v37 = v35;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(__p, a1);
          char v38 = "Enabling";
          *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(_WORD *)&unsigned char buf[12] = 1024;
          if (!v56) {
            char v38 = "Disabling";
          }
          *(_DWORD *)&_DWORD buf[14] = 743;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v38;
          __int16 v62 = 2112;
          *(void **)uint64_t v63 = __p[0];
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v34;
          _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s reference stream property on device %@. status: %u", buf, 0x2Cu);
          sub_72924((uint64_t)__p);
        }
      }
      if (!a2)
      {
        AudioObjectID v39 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        sub_42F284(v39, 0x696E7074u, &v54);
      }
    }
  }
LABEL_70:
  if (v10) {
    operator delete(v10);
  }
}

void sub_437474(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_437550(uint64_t a1, UInt32 *a2, float *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D268))
  {
    byte_64D260 = sub_20A1D4();
    __cxa_guard_release(&qword_64D268);
  }
  if (byte_64D260)
  {
    *(void *)&v10.AudioObjectPropertySelector mSelector = 0x676C6F62636C6B64;
    v10.AudioObjectPropertyElement mElement = 0;
    sub_432AE8(a1, &v10, 0, 0, a2, a3);
    if (!*(_DWORD *)a3)
    {
      int v6 = *(id *)sub_32A48(17);
      uint64_t v7 = v6;
      if (v6)
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int64x2_t v12 = "Device_HAL_Common.mm";
          __int16 v13 = 1024;
          int v14 = 902;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d We expect this device to report a correct clock domain, but it is coming back as NULL/zero?!?!", buf, 0x12u);
        }
      }
    }
  }
  else
  {
    int v8 = *(id *)sub_32A48(17);
    uint64_t v9 = v8;
    if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int64x2_t v12 = "Device_HAL_Common.mm";
      __int16 v13 = 1024;
      int v14 = 909;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Driver does not report correct clock domain for the product, setting clock domain to 0", buf, 0x12u);
    }

    sub_9EC7C(0, a2, a3);
  }
}

void sub_437730(_Unwind_Exception *a1)
{
}

uint64_t sub_437750(os_unfair_lock_s *a1)
{
  char v2 = 0;
  uint64_t v3 = 0;
  __int16 v26 = 256;
  uint64_t v4 = (uint64_t *)&a1[68];
  BOOL v5 = (uint64_t *)&a1[74];
  uint64_t v6 = 4;
  do
  {
    char v7 = v2;
    int v8 = *((unsigned __int8 *)&v26 + v3);
    AudioObjectID os_unfair_lock_opaque = a1[67]._os_unfair_lock_opaque;
    if (*((unsigned char *)&v26 + v3)) {
      uint64_t v10 = 74;
    }
    else {
      uint64_t v10 = 68;
    }
    if (*((unsigned char *)&v26 + v3)) {
      int32x2_t v11 = v5;
    }
    else {
      int32x2_t v11 = v4;
    }
    if (*((unsigned char *)&v26 + v3)) {
      AudioObjectPropertyScope v12 = 1869968496;
    }
    else {
      AudioObjectPropertyScope v12 = 1768845428;
    }
    inAddress.AudioObjectPropertySelector mSelector = 1937009955;
    inAddress.AudioObjectPropertyScope mScope = v12;
    inAddress.AudioObjectPropertyElement mElement = 0;
    outDataSize[0] = 0;
    AudioObjectGetPropertyDataSize(os_unfair_lock_opaque, &inAddress, 0, 0, outDataSize);
    __int16 v13 = *(char **)&a1[v10]._os_unfair_lock_opaque;
    int v14 = (char *)v11[1];
    if (outDataSize[0])
    {
      if (v13 == v14)
      {
        sub_42E984(a1, v8 != 0);
        uint64_t v6 = 1;
      }
    }
    else if (v13 != v14)
    {
      *(void *)UInt32 outDataSize = 0;
      char v24 = 0;
      uint64_t v25 = 0;
      sub_437A10(outDataSize, v13, v14, (v14 - v13) >> 4);
      sub_63970(v11);
      (*(void (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 432))(a1);
      uint64_t v20 = 0;
      long long v21 = 0;
      uint64_t v22 = 0;
      sub_437A10(&v20, *(void **)outDataSize, v24, ((uint64_t)v24 - *(void *)outDataSize) >> 4);
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      sub_437A10(&v18, v20, v21, (v21 - v20) >> 4);
      BOOL v15 = sub_13910();
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      id v16 = v15;
      operator new();
    }
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v7 & 1) == 0);
  sub_D26B4((uint64_t)a1);
  return v6;
}

void sub_4379BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a17;
  sub_638B4(&a21);
  _Unwind_Resume(a1);
}

void *sub_437A10(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      sub_60548();
    }
    uint64_t v6 = result;
    uint64_t result = sub_10724(a4);
    *uint64_t v6 = result;
    v6[1] = result;
    for (v6[2] = &result[2 * v7]; a2 != a3; a2 += 2)
    {
      *uint64_t result = *a2;
      uint64_t v8 = a2[1];
      result[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_437AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_437AC8(void ***result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    char v2 = v1;
    sub_638B4(&v2);
    operator delete();
  }
  return result;
}

void sub_437B24(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_298DA4();
  operator new();
}

void sub_437C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, __int16 *a17, void *__p, int a19, __int16 a20,int a21,__int16 a22,__int16 a23,char a24,char a25,__int16 a26,uint64_t a27,__int16 a28,int a29,int a30)
{
  if (a2)
  {
    a17 = &a12;
    sub_638B4((void ***)&a17);
    if (SHIBYTE(a23) < 0) {
      operator delete(__p);
    }
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_437FC4@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_63970((uint64_t *)(a1 + 8));

  return sub_12053C(a2, 1920099684);
}

void sub_438008(void **a1)
{
  char v2 = a1 + 1;
  sub_638B4(&v2);

  operator delete(a1);
}

void sub_438054(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  sub_638B4(&v1);
}

void *sub_438080(uint64_t a1, void *a2)
{
  *a2 = off_63E6C0;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return sub_437A10(a2 + 1, *(void **)(a1 + 8), *(void **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
}

void *sub_4380BC(uint64_t a1)
{
  char v2 = operator new(0x20uLL);
  void *v2 = off_63E6C0;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_437A10(v2 + 1, *(void **)(a1 + 8), *(void **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  return v2;
}

void sub_438120(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_438134(uint64_t a1)
{
  *(void *)a1 = off_63E6C0;
  uint64_t v1 = (void **)(a1 + 8);
  sub_638B4(&v1);

  operator delete();
}

uint64_t sub_4381AC(uint64_t a1)
{
  *(void *)a1 = off_63E6C0;
  uint64_t v3 = (void **)(a1 + 8);
  sub_638B4(&v3);
  return a1;
}

__CFArray *sub_438204(uint64_t a1, int a2)
{
  v30[0] = 1936941859;
  v30[1] = a2;
  v30[2] = 0;
  if (a2 == 1768845428) {
    CFStringRef v4 = @"input source ID";
  }
  else {
    CFStringRef v4 = @"output destination ID";
  }
  CFStringRef v5 = @"output destination name";
  if (a2 == 1768845428) {
    CFStringRef v5 = @"input source name";
  }
  CFStringRef v22 = v5;
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  __int16 v29 = 257;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, _DWORD *, void, void))(*(void *)a1 + 32))(a1, v30, 0, 0);
  unsigned int v7 = v6;
  unsigned int v8 = v6 >> 2;
  __n128 v9 = __chkstk_darwin(v6);
  int32x2_t v11 = (int *)((char *)&v21 - ((v10 + 15) & 0x1FFFFFFF0));
  int v27 = v12;
  (*(void (**)(uint64_t, _DWORD *, void, void, int *, int *, __n128))(*(void *)a1 + 40))(a1, v30, 0, 0, &v27, v11, v9);
  uint64_t v21 = (uint64_t)&v21;
  if (v27 != v7)
  {
    uint64_t v17 = sub_32A48(13);
    long long v18 = sub_7D5E8(1, *(void **)v17, *(void *)(v17 + 8));
    uint64_t v19 = v18;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      __int16 v32 = 1024;
      *(_DWORD *)int v33 = 991;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v7;
      LOWORD(v34[0]) = 1024;
      *(_DWORD *)((char *)v34 + 2) = v27;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Expected %u bytes, got %u bytes instead\"", buf, 0x1Eu);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Expected %u bytes, got %u bytes instead");
  }
  if (v7 >= 4)
  {
    if (v8 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v8;
    }
    do
    {
      __int16 v26 = 0;
      *(void *)AudioObjectPropertyAddress buf = v11;
      *(_DWORD *)&_DWORD buf[8] = 4;
      *(void *)&CFStringRef v33[2] = &v26;
      v34[0] = 8;
      v25[0] = 1819501422;
      v25[1] = a2;
      void v25[2] = 0;
      int v27 = 32;
      (*(void (**)(uint64_t, _DWORD *, void, void, int *, unsigned char *))(*(void *)a1 + 40))(a1, v25, 0, 0, &v27, buf);
      CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      __int16 v24 = 257;
      sub_1D4AF4((uint64_t)&v23, v4, *v11);
      CFMutableDictionaryRef v14 = v23;
      if (HIBYTE(v24) && v26 && v23)
      {
        CFDictionarySetValue(v23, v22, v26);
        CFMutableDictionaryRef v14 = v23;
      }
      if (Mutable && HIBYTE(v29)) {
        CFArrayAppendValue(Mutable, v14);
      }
      if (v26) {
        CFRelease(v26);
      }
      sub_80594((uint64_t)&v23);
      ++v11;
      --v13;
    }
    while (v13);
  }
  if (Mutable)
  {
    CFRetain(Mutable);
    BOOL v15 = Mutable;
  }
  else
  {
    BOOL v15 = 0;
  }
  sub_3D61C((uint64_t)&Mutable);
  return v15;
}

void sub_4385C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  sub_3D61C(v2 - 160);
  _Unwind_Resume(a1);
}

CFNumberRef sub_438610(uint64_t a1, unsigned int a2)
{
  int v10 = 4;
  int valuePtr = 0;
  *(_DWORD *)AudioObjectPropertyAddress buf = 1936945763;
  uint64_t v13 = (const char *)a2;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, int *))(*(void *)a1 + 40))(a1, buf, 0, 0, &v10, &valuePtr);
  uint64_t v3 = sub_32A48(17);
  if (*(unsigned char *)(v3 + 8))
  {
    id v4 = *(id *)v3;
    if (v4)
    {
      CFStringRef v5 = v4;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, a2);
        if (v9 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v13 = "Device_HAL_Common.mm";
        __int16 v14 = 1024;
        int v15 = 1030;
        __int16 v16 = 2080;
        uint64_t v17 = v6;
        __int16 v18 = 1024;
        int v19 = valuePtr;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d retrieved data source (scope = %s) of %u", buf, 0x22u);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
}

void sub_4387A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_4387BC(uint64_t a1, unsigned int a2, CFNumberRef number)
{
  CFNumberRef v14 = number;
  char v15 = 0;
  int valuePtr = 0;
  if (number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    int v5 = valuePtr;
  }
  else
  {
    int v5 = 0;
  }
  int v13 = v5;
  uint64_t v6 = sub_32A48(17);
  if (*(unsigned char *)(v6 + 8))
  {
    id v7 = *(id *)v6;
    if (v7)
    {
      unsigned int v8 = v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, a2);
        if (v12 >= 0) {
          char v9 = __p;
        }
        else {
          char v9 = (void **)__p[0];
        }
        int valuePtr = 136315906;
        uint64_t v17 = "Device_HAL_Common.mm";
        __int16 v18 = 1024;
        int v19 = 1043;
        __int16 v20 = 2080;
        uint64_t v21 = v9;
        __int16 v22 = 1024;
        int v23 = v5;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting data source (scope = %s) to %u", (uint8_t *)&valuePtr, 0x22u);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  int valuePtr = 1936945763;
  uint64_t v17 = (const char *)a2;
  (*(void (**)(uint64_t, int *, void, void, uint64_t, int *))(*(void *)a1 + 48))(a1, &valuePtr, 0, 0, 4, &v13);
  return sub_45260((uint64_t)&v14);
}

void sub_438974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_45260((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4389A8(uint64_t *a1, std::mutex *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  id v4 = (os_unfair_lock_s *)a2;
  int v5 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  inAddress.AudioObjectPropertySelector mSelector = 1936941859;
  inAddress.AudioObjectPropertyScope mScope = a3;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v51 = a1;
  sub_50848(a2);
  uint64_t result = AudioObjectHasProperty(v4[67]._os_unfair_lock_opaque, &inAddress);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *, void, void))(*(void *)&v4->_os_unfair_lock_opaque + 32))(v4, &inAddress, 0, 0);
    unsigned int v8 = v7;
    v48[1] = v48;
    LODWORD(v9) = v7 >> 2;
    __n128 v10 = __chkstk_darwin(v7);
    char v12 = (unsigned int *)((char *)v48 - ((v11 + 15) & 0x1FFFFFFF0));
    int v65 = v13;
    uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *, void, void, int *, unsigned int *, __n128))(*(void *)&v4->_os_unfair_lock_opaque + 40))(v4, &inAddress, 0, 0, &v65, v12, v10);
    if (v65 != v8)
    {
      uint64_t v44 = sub_32A48(13);
      id v45 = sub_7D5E8(1, *(void **)v44, *(void *)(v44 + 8));
      __int16 v46 = v45;
      if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1075;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v8;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = v65;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Expected %u bytes, got %u bytes instead\"", buf, 0x1Eu);
      }

      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Expected %u bytes, got %u bytes instead");
    }
    if (v8 >= 4)
    {
      if (v9 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v9;
      }
      uint64_t v55 = (uint64_t)&v73 + 4;
      os_unfair_lock_t v50 = v4 + 2;
      __int16 v52 = v5 + 2;
      *(void *)&long long v14 = 136316674;
      long long v49 = v14;
      uint64_t v54 = v4;
      do
      {
        unsigned int v17 = *v12;
        char v15 = v12 + 1;
        uint64_t v16 = v17;
        LODWORD(v57) = v17;
        uint64_t v60 = 0;
        *(void *)AudioObjectPropertyAddress buf = &v57;
        *(_DWORD *)&_DWORD buf[8] = 4;
        *(void *)&buf[16] = &v60;
        *(_DWORD *)&unsigned char buf[24] = 8;
        LODWORD(v68.__r_.__value_.__l.__data_) = 1819501422;
        *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = v3;
        int v67 = 32;
        (*(void (**)(os_unfair_lock_s *, std::string *, void, void, int *, unsigned char *))(*(void *)&v4->_os_unfair_lock_opaque
                                                                                                  + 40))(v4, &v68, 0, 0, &v67, buf);
        p_isa = &v60->isa;
        uint64_t v63 = v60;
        char v64 = 1;
        int v19 = (std::__shared_weak_count *)operator new(0x60uLL);
        v19->__shared_owners_ = 0;
        v19->__shared_weak_owners_ = 0;
        v19->__vftable = (std::__shared_weak_count_vtbl *)off_640120;
        id v57 = p_isa;
        unsigned __int8 v58 = 1;
        if (p_isa) {
          CFRetain(p_isa);
        }
        sub_45719C((uint64_t)buf, v16);
        memset(&v68, 0, sizeof(v68));
        uint64_t v60 = (__CFString *)&v68;
        char v61 = 0;
        __int16 v20 = operator new(0x40uLL);
        int v56 = v15;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
        v68.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
        v68.__r_.__value_.__r.__words[2] = (std::string::size_type)v20 + 64;
        v68.__r_.__value_.__l.__size_ = sub_726E8((uint64_t)buf, v55, (uint64_t)v20);
        sub_72890((uint64_t)&v19[1], v16, 1735291491, 0, (uint64_t *)&v68);
        uint64_t v60 = (__CFString *)&v68;
        sub_72620((void ***)&v60);
        if (v70)
        {
          *(void *)uint64_t v71 = v70;
          operator delete(v70);
        }
        if (*(void *)&buf[8])
        {
          *(void *)&buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        uint64_t v21 = v57;
        v19[3].__shared_owners_ = (uint64_t)v57;
        int v22 = v58;
        LOBYTE(v19[3].__shared_weak_owners_) = v58;
        if (v22 && v21) {
          CFRetain(v21);
        }
        sub_72924((uint64_t)&v57);
        id v23 = *(id *)sub_32A48(17);
        __int16 v24 = v23;
        if (v23)
        {
          uint64_t v25 = v23;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            os_log_t v53 = v25;
            sub_456B74(&v68, (uint64_t)&v19[1]);
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v26 = &v68;
            }
            else {
              __int16 v26 = (std::string *)v68.__r_.__value_.__r.__words[0];
            }
            CStringPtr = CFStringGetCStringPtr(v63, 0x8000100u);
            uint64_t v28 = v3;
            sub_4F64((uint64_t)&v60, v50);
            int v29 = v62;
            __int16 v30 = &v60->isa;
            sub_2417C(&v57, v28);
            unint64_t v31 = (void ***)&v60;
            if (v29 < 0) {
              unint64_t v31 = (void ***)v30;
            }
            __int16 v32 = (void **)&v57;
            if (v59 < 0) {
              __int16 v32 = v57;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = v49;
            *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 1089;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v26;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&unsigned char buf[30] = v16;
            *(_WORD *)&unsigned char buf[38] = 2080;
            int v70 = (char *)CStringPtr;
            *(_WORD *)uint64_t v71 = 2080;
            *(void *)&v71[2] = v31;
            __int16 v72 = 2080;
            int v73 = v32;
            uint64_t v25 = v53;
            _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating sub-port '%s' to represent data source ID: %lu with name: '%s' for device: '%s'. Scope: '%s'.", buf, 0x44u);
            if (v59 < 0) {
              operator delete(v57);
            }
            int v5 = v51;
            uint64_t v3 = v28;
            if (v62 < 0) {
              operator delete(v60);
            }
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v68.__r_.__value_.__l.__data_);
            }
          }
        }
        int v33 = (void *)v5[1];
        unint64_t v34 = v5[2];
        if ((unint64_t)v33 >= v34)
        {
          uint64_t v36 = ((uint64_t)v33 - *v5) >> 4;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60) {
            sub_60548();
          }
          uint64_t v38 = v34 - *v5;
          if (v38 >> 3 > v37) {
            unint64_t v37 = v38 >> 3;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          *(void *)&unsigned char buf[32] = v52;
          char v40 = (char *)sub_10724(v39);
          *(void *)&long long v41 = v19 + 1;
          *((void *)&v41 + 1) = v19;
          char v42 = &v40[16 * v36];
          *(void *)AudioObjectPropertyAddress buf = v40;
          *(void *)&_DWORD buf[8] = v42;
          *(void *)&unsigned char buf[24] = &v40[16 * v43];
          *(_OWORD *)char v42 = v41;
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)&buf[16] = v42 + 16;
          sub_FBB48(v5, buf);
          id v35 = (void *)v5[1];
          sub_98E24((uint64_t)buf);
        }
        else
        {
          *int v33 = v19 + 1;
          v33[1] = v19;
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          id v35 = v33 + 2;
          v5[1] = (uint64_t)(v33 + 2);
        }
        v5[1] = (uint64_t)v35;
        sub_4636C(v19);
        uint64_t result = sub_72924((uint64_t)&v63);
        --v9;
        id v4 = v54;
        char v12 = v56;
      }
      while (v9);
    }
  }
  return result;
}

void sub_439088(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  *(void *)(v2 - 240) = *(void *)(v2 - 336);
  sub_74004((void ***)(v2 - 240));
  _Unwind_Resume(a1);
}

uint64_t sub_4391DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  if ((result & 0xFF00000000) != 0 || a3 != 0) {
    operator new();
  }
  return result;
}

void sub_4395C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  sub_72924((uint64_t)&a27);
  sub_103C0C(v28);
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_4396B8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_4396DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63E738;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_439730(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63E738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_439750()
{
}

void sub_439C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf)
{
  if (a2)
  {
    if (*((void *)&buf + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&buf + 1));
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = sub_32A48(17);
    unsigned int v17 = sub_7D5E8(1, *(void **)v16, *(void *)(v16 + 8));
    __int16 v18 = v17;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "Device_HAL_Common.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1147;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Caught exception trying to create controls", (uint8_t *)&buf, 0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x439B98);
  }
  _Unwind_Resume(a1);
}

void sub_439D74()
{
}

void sub_439D80(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x439C9CLL);
}

void sub_439D90()
{
}

uint64_t sub_439D9C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_439DC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63E820;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_439E14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63E820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_439E34()
{
}

void sub_43A1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf, uint64_t a12)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void sub_43A330()
{
}

void sub_43A6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf, uint64_t a12)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_43A824(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_43A848(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63E990;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_43A89C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63E990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_43A8BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_43A8C4(uint64_t result)
{
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t sub_43A8CC(uint64_t result)
{
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void sub_43A8D8(uint64_t a1)
{
  sub_43A914((void *)(a1 - 80));

  operator delete();
}

void *sub_43A914(void *a1)
{
  *a1 = off_63E9C8;
  a1[10] = off_63EA98;
  uint64_t v2 = (os_log_t *)sub_32A48(1);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315650;
    uint64_t v7 = "SplitterMasterVolumeControl.cpp";
    __int16 v8 = 1024;
    int v9 = 70;
    __int16 v10 = 2048;
    uint64_t v11 = a1;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Destroyed master volume (%p)", (uint8_t *)&v6, 0x1Cu);
  }
  sub_1A97C8((uint64_t)(a1 + 16));
  id v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  sub_FE920((uint64_t)a1);
  return a1;
}

void sub_43AA40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void *sub_43AA4C(uint64_t a1)
{
  return sub_43A914((void *)(a1 - 80));
}

uint64_t sub_43AA54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_43AA5C(uint64_t result)
{
  *(unsigned char *)(result + 96) = 0;
  return result;
}

uint64_t sub_43AA64(uint64_t result)
{
  *(unsigned char *)(result + 96) = 1;
  return result;
}

std::string *sub_43AA70@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_21C8C(&v11, __str);
  id v4 = std::string::insert(&v11, 0, "addr: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v12, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v14 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::condition_variable __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    __int16 v8 = __p;
  }
  else {
    __int16 v8 = (void **)__p[0];
  }
  if (v14 >= 0) {
    std::string::size_type v9 = HIBYTE(v14);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_43ABCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

double sub_43AC34()
{
  return 0.0;
}

double sub_43AC40()
{
  return 0.0;
}

void sub_43AC4C()
{
  long long v0 = (os_log_t *)sub_32A48(1);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315394;
      uint64_t v3 = "SplitterMasterVolumeControl.cpp";
      __int16 v4 = 1024;
      int v5 = 271;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Request to reconfigure master volume control", (uint8_t *)&v2, 0x12u);
    }
  }
}

void sub_43AD08()
{
  long long v0 = (os_log_t *)sub_32A48(1);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315394;
      uint64_t v3 = "SplitterMasterVolumeControl.cpp";
      __int16 v4 = 1024;
      int v5 = 264;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Request to reconfigure master volume control", (uint8_t *)&v2, 0x12u);
    }
  }
}

uint64_t sub_43ADC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    char v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v22 = 1024;
      *(_DWORD *)id v23 = 339;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (*(_DWORD *)a2 == 1987013741)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6277736D76;
    inAddress.AudioObjectPropertyElement mElement = 0;
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = *(_DWORD *)(a2 + 8);
    *(void *)&void v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_1A4260(a1 + 16, &inAddress.mSelector, (uint64_t)buf);
    __int16 v8 = (AudioObjectID *)a1[13];
    for (uint64_t i = (AudioObjectID *)a1[14]; v8 != i; ++v8)
    {
      AudioObjectRemovePropertyListener(*v8, &inAddress, (AudioObjectPropertyListenerProc)sub_43B084, a1);
      __int16 v10 = (os_log_t *)sub_32A48(18);
      std::string v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectID v12 = *v8;
        sub_2417C(__p, 0x77736D76u);
        int v13 = __p;
        if (v19 < 0) {
          int v13 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
        __int16 v22 = 1024;
        *(_DWORD *)id v23 = 357;
        *(_WORD *)&v23[4] = 2048;
        *(void *)&_DWORD v23[6] = a1;
        *(_WORD *)&unsigned char v23[14] = 1024;
        *(_DWORD *)&v23[16] = v12;
        __int16 v24 = 2080;
        uint64_t v25 = v13;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p RemovePropertyListener() succeeded. device: %u; selector: '%s'.",
          buf,
          0x2Cu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_43B084(int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    __int16 v18 = (os_log_t *)sub_32A48(13);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v30 = 1024;
      int v31 = 393;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inNumberAddresses is 0.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }
  if (!a4)
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    __int16 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v30 = 1024;
      int v31 = 394;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: \"inClientData is NULL.\"", buf, 0x12u);
    }
    id v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "inClientData is NULL.");
  }
  if (!a3)
  {
    __int16 v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v30 = 1024;
      int v31 = 395;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: \"inAddresses is NULL.\"", buf, 0x12u);
    }
    __int16 v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v26, "inAddresses is NULL.");
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2;
  do
  {
    uint64_t v8 = sub_32A48(17);
    uint64_t v9 = sub_32A48(28);
    char v10 = 0;
    uint64_t v11 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1;
      if (v14) {
        goto LABEL_11;
      }
    }
    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_11:
    char v15 = *(NSObject **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, *(_DWORD *)(a3 + 12 * v6));
      uint64_t v16 = __p;
      if (v28 < 0) {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v30 = 1024;
      int v31 = 401;
      __int16 v32 = 2080;
      int v33 = v16;
      __int16 v34 = 1024;
      int v35 = a1;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received notification (%s) from audio device with ID %u", buf, 0x22u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    if (*(_DWORD *)(a3 + 12 * v6 + 4) == qword_668A70
      && *(_DWORD *)(a3 + 12 * v6) == 2004053366
      && *(_DWORD *)(a3 + 12 * v6 + 8) == HIDWORD(qword_668A70))
    {
      sub_13910();
      operator new();
    }
    ++v6;
  }
  while (v6 != v7);
  return 0;
}

void sub_43B4D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_43B50C(_DWORD *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned int **)(*(void *)a1 + 104);
  for (uint64_t i = *(unsigned int **)(*(void *)a1 + 112); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (*v3 == a1[2])
    {
      unsigned int v18 = *v3;
      buf.AudioObjectPropertySelector mSelector = 2004053366;
      *(void *)&buf.AudioObjectPropertyScope mScope = qword_668A70;
      unint64_t v6 = sub_1F13D8(&v18, &buf, 0, 0);
      *((void *)&v9 + 1) = v7;
      *(void *)&long long v9 = v6;
      uint64_t v8 = v9 >> 32;
      if ((v8 & 0xFF00000000) != 0)
      {
        uint64_t v10 = sub_32A48(17);
        uint64_t v11 = sub_32A48(28);
        char v12 = 0;
        uint64_t v13 = 0;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
        uint64_t v14 = *(void *)(v10 + 8);
        while (1)
        {
          uint64_t v15 = *((int *)&buf.mSelector + v13);
          char v16 = v12;
          if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
            break;
          }
          char v12 = 1;
          uint64_t v13 = 1;
          if (v16) {
            goto LABEL_10;
          }
        }
        if ((v14 & v15) == 0) {
          uint64_t v10 = v11;
        }
LABEL_10:
        unsigned int v17 = *(NSObject **)v10;
        if (v17)
        {
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            buf.AudioObjectPropertySelector mSelector = 136316162;
            *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
            __int16 v21 = 1024;
            int v22 = 380;
            __int16 v23 = 2048;
            uint64_t v24 = v2;
            __int16 v25 = 2048;
            double v26 = *(float *)&v8;
            __int16 v27 = 1024;
            unsigned int v28 = v5;
            _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Master volume (%p) updated to %f for device %u", (uint8_t *)&buf, 0x2Cu);
          }
        }
        *(_DWORD *)(v2 + 92) = v8;
        unsigned int v18 = 2004053366;
        uint64_t v19 = qword_668A70;
        sub_1A1D20((void *)(v2 + 128), &v18);
      }
    }
  }
  operator delete();
}

void sub_43B728(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    __int16 v21 = __cxa_begin_catch(a1);
    int v22 = (os_log_t *)sub_32A48(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = a9;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v24;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      __int16 v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      double v26 = v23;
      uint32_t v27 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }
  else
  {
    unsigned int v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v29 = v28;
      __int16 v30 = (os_log_t *)sub_32A48(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
        LODWORD(buf) = a9;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v32;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        __int16 v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        double v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v33 = (os_log_t *)sub_32A48(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        __int16 v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        double v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x43B6D0);
}

uint64_t sub_43B990(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    double v26 = (os_log_t *)sub_32A48(13);
    uint32_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      __int16 v35 = 1024;
      *(_DWORD *)uint64_t v36 = 291;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (*a2 != 1987013741) {
    return 1;
  }
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6277736D76;
  inAddress.AudioObjectPropertyElement mElement = 0;
  *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
  *(_DWORD *)&_DWORD buf[8] = a2[2];
  *(void *)&CFStringRef v36[2] = a3;
  *(void *)&v36[10] = a4;
  sub_1A4AA0(a1 + 16, &inAddress.mSelector, (uint64_t)buf);
  uint64_t v8 = (AudioObjectID *)a1[13];
  long long v9 = (AudioObjectID *)a1[14];
  if (v8 == v9) {
    return 1;
  }
  uint64_t v10 = "SplitterMasterVolumeControl.cpp";
  do
  {
    OSStatus v11 = AudioObjectAddPropertyListener(*v8, &inAddress, (AudioObjectPropertyListenerProc)sub_43B084, a1);
    BOOL v12 = v11 == 0;
    if (v11)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(18);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v31, v11);
          uint64_t v15 = v10;
          int v16 = v32;
          unsigned int v17 = (void **)v31[0];
          AudioObjectID v18 = *v8;
          sub_2417C(__p, 0x77736D76u);
          uint64_t v19 = v31;
          if (v16 < 0) {
            uint64_t v19 = v17;
          }
          __int16 v20 = __p;
          if (v30 < 0) {
            __int16 v20 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          uint64_t v10 = v15;
          *(void *)&uint8_t buf[4] = v15;
          __int16 v35 = 1024;
          *(_DWORD *)uint64_t v36 = 316;
          *(_WORD *)&v36[4] = 2080;
          *(void *)&v36[6] = v19;
          *(_WORD *)&v36[14] = 1024;
          *(_DWORD *)&v36[16] = v18;
          __int16 v37 = 2080;
          uint64_t v38 = v20;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d AddPropertyListener() failed with status '%s'. device: %u; selector: '%s'.",
            buf,
            0x2Cu);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
          if (v32 < 0) {
            operator delete(v31[0]);
          }
        }
      }
    }
    __int16 v21 = (os_log_t *)sub_32A48(18);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v23 = *v8;
      sub_2417C(v31, 0x77736D76u);
      if (v32 >= 0) {
        int v24 = v31;
      }
      else {
        int v24 = (void **)v31[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v35 = 1024;
      *(_DWORD *)uint64_t v36 = 322;
      *(_WORD *)&v36[4] = 2048;
      *(void *)&v36[6] = a1;
      *(_WORD *)&v36[14] = 1024;
      *(_DWORD *)&v36[16] = v23;
      __int16 v37 = 2080;
      uint64_t v38 = v24;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p AddPropertyListener() succeeded. device: %u; selector: '%s'.",
        buf,
        0x2Cu);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }
    ++v8;
  }
  while (v8 != v9);
  return v12;
}

void sub_43BD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_43BD6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    unsigned int v28 = (os_log_t *)sub_32A48(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *a2;
      int v41 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)inData, (unsigned int *)&v40);
      char v30 = v43 >= 0 ? inData : (void **)inData[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v45 = 1024;
      int v46 = 218;
      __int16 v47 = 2080;
      int v48 = v30;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", (uint8_t *)&buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(inData[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    char v32 = (os_log_t *)sub_32A48(13);
    int v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *a2;
      int v41 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)inData, (unsigned int *)&v40);
      os_log_t v34 = v43 >= 0 ? inData : (void **)inData[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v45 = 1024;
      int v46 = 219;
      __int16 v47 = 2080;
      int v48 = v34;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Property %s is not settable.\"", (uint8_t *)&buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(inData[0]);
      }
    }
    __int16 v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v35 = &off_6414D8;
    v35[2] = 1970171760;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
  {
    uint64_t v36 = (os_log_t *)sub_32A48(13);
    __int16 v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *a2;
      int v41 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)inData, (unsigned int *)&v40);
      uint64_t v38 = v43 >= 0 ? inData : (void **)inData[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v45 = 1024;
      int v46 = 220;
      __int16 v47 = 2080;
      int v48 = v38;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for property %s.\"", (uint8_t *)&buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(inData[0]);
      }
    }
    unint64_t v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v39 = &off_6414D8;
    v39[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1987013741 || *(_DWORD *)a2 == 1986817377)
  {
    float v13 = *a6;
    *(float *)int inData = *a6;
    uint64_t v14 = (os_log_t *)sub_32A48(1);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v45 = 1024;
      int v46 = 228;
      __int16 v47 = 2048;
      int v48 = (void **)a1;
      __int16 v49 = 2048;
      double v50 = v13;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Request to set master volume (%p) %f", (uint8_t *)&buf, 0x26u);
    }
    if (vabds_f32(*(float *)(a1 + 92), v13) >= 0.001)
    {
      int v16 = *(AudioObjectID **)(a1 + 104);
      for (uint64_t i = *(AudioObjectID **)(a1 + 112); v16 != i; ++v16)
      {
        AudioObjectID v18 = *v16;
        buf.AudioObjectPropertySelector mSelector = 2004053366;
        *(void *)&buf.AudioObjectPropertyScope mScope = qword_668A70;
        OSStatus v19 = AudioObjectSetPropertyData(v18, &buf, 0, 0, 4u, inData);
        if (v19)
        {
          uint32_t v27 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint32_t v27 = &off_6414D8;
          v27[2] = v19;
        }
        *(_DWORD *)(a1 + 92) = inData[0];
        __int16 v20 = (os_log_t *)sub_32A48(1);
        __int16 v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
        {
          double v22 = *(float *)(a1 + 92);
          AudioObjectID v23 = *v16;
          buf.AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
          __int16 v45 = 1024;
          int v46 = 237;
          __int16 v47 = 2048;
          int v48 = (void **)a1;
          __int16 v49 = 2048;
          double v50 = v22;
          __int16 v51 = 1024;
          AudioObjectID v52 = v23;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applied master volume (%p) %f to %u", (uint8_t *)&buf, 0x2Cu);
        }
      }
    }
  }
  else
  {
    int v24 = (os_log_t *)sub_32A48(1);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = *a2;
      int v41 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)inData, (unsigned int *)&v40);
      if (v43 >= 0) {
        double v26 = inData;
      }
      else {
        double v26 = (void **)inData[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v45 = 1024;
      int v46 = 248;
      __int16 v47 = 2080;
      int v48 = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", (uint8_t *)&buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(inData[0]);
      }
    }
  }
}

void sub_43C470(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_43C540(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v24 = (os_log_t *)sub_32A48(13);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *a2;
      int v33 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      double v26 = v35 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v37 = 1024;
      int v38 = 175;
      __int16 v39 = 2080;
      uint64_t v40 = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", (uint8_t *)&buf, 0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v12 = *a5;
  if (v12 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4))
  {
    unsigned int v28 = (os_log_t *)sub_32A48(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *a2;
      int v33 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      char v30 = v35 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v37 = 1024;
      int v38 = 176;
      __int16 v39 = 2080;
      uint64_t v40 = v30;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for property %s.\"", (uint8_t *)&buf, 0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    os_log_t v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v31 = &off_6414D8;
    v31[2] = 561211770;
  }
  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 > 1986817376)
  {
    if (v13 == 1987013741 || v13 == 1986817377)
    {
      *a6 = *(_DWORD *)(a1 + 92);
      return;
    }
    goto LABEL_13;
  }
  if (v13 != 1986225518)
  {
    if (v13 == 1986229104)
    {
      *a6 = 1;
      return;
    }
LABEL_13:
    uint64_t v15 = (os_log_t *)sub_32A48(1);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *a2;
      int v33 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v32);
      if (v35 >= 0) {
        unsigned int v17 = __p;
      }
      else {
        unsigned int v17 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v37 = 1024;
      int v38 = 210;
      __int16 v39 = 2080;
      uint64_t v40 = v17;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", (uint8_t *)&buf, 0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    return;
  }
  AudioObjectID v18 = *(_DWORD **)(a1 + 104);
  OSStatus v19 = *(_DWORD **)(a1 + 112);
  if (v18 == v19)
  {
LABEL_25:
    LODWORD(v22) = 0;
  }
  else
  {
    while (1)
    {
      LODWORD(__p[0]) = *v18;
      strcpy((char *)&buf, "necvbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      unint64_t v20 = sub_26DAC((AudioObjectID *)__p, &buf, 0, 0);
      *((void *)&v23 + 1) = v21;
      *(void *)&long long v23 = v20;
      uint64_t v22 = v23 >> 32;
      if ((v22 & 0xFF00000000) == 0) {
        LODWORD(v22) = 1;
      }
      if (v22) {
        break;
      }
      if (++v18 == v19) {
        goto LABEL_25;
      }
    }
  }
  *a6 = v22;
  *a5 = 4;
}

uint64_t sub_43C9CC(uint64_t a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
      uint64_t v14 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v21 = "SplitterMasterVolumeControl.cpp";
      __int16 v22 = 1024;
      int v23 = 148;
      __int16 v24 = 2080;
      __int16 v25 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v3 = *(_DWORD *)a2;
  uint64_t result = 4;
  if (*(int *)a2 > 1986817376)
  {
    BOOL v5 = v3 == 1986817377;
    int v6 = 1987013741;
  }
  else
  {
    BOOL v5 = v3 == 1986225518;
    int v6 = 1986229104;
  }
  if (!v5 && v3 != v6)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(1);
    long long v9 = *v8;
    if (!*v8) {
      return 0;
    }
    BOOL v10 = os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v10)
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
      if (v19 >= 0) {
        OSStatus v11 = __p;
      }
      else {
        OSStatus v11 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v21 = "SplitterMasterVolumeControl.cpp";
      __int16 v22 = 1024;
      int v23 = 165;
      __int16 v24 = 2080;
      __int16 v25 = v11;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_43CC68(void *a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    unint64_t v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
      __int16 v22 = v27 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
      __int16 v29 = 1024;
      int v30 = 115;
      __int16 v31 = 2080;
      uint64_t v32 = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", (uint8_t *)&buf, 0x1Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v4 = *(_DWORD *)a2;
  if (*(int *)a2 > 1986817376)
  {
    BOOL v5 = v4 == 1987013741 || v4 == 1986817377;
    if (!v5) {
      goto LABEL_17;
    }
    uint64_t v6 = a1[13];
    uint64_t v7 = a1[14];
    if (v6 != v7)
    {
      uint64_t v8 = v6 + 4;
      do
      {
        AudioObjectID v9 = *(_DWORD *)(v8 - 4);
        buf.AudioObjectPropertySelector mSelector = 2004053366;
        *(void *)&buf.AudioObjectPropertyScope mScope = qword_668A70;
        BOOL result = sub_55020(v9, &buf);
        if (result) {
          break;
        }
        BOOL v5 = v8 == v7;
        v8 += 4;
      }
      while (!v5);
      return result;
    }
    return 0;
  }
  if (v4 == 1986225518)
  {
    uint64_t v15 = a1[13];
    uint64_t v16 = a1[14];
    if (v15 == v16) {
      return 1;
    }
    uint64_t v17 = v15 + 4;
    do
    {
      AudioObjectID v18 = *(_DWORD *)(v17 - 4);
      strcpy((char *)&buf, "necvbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      BOOL result = sub_55020(v18, &buf);
      BOOL v19 = !result || v17 == v16;
      v17 += 4;
    }
    while (!v19);
    return result;
  }
  if (v4 == 1986229104) {
    return 0;
  }
LABEL_17:
  OSStatus v11 = (os_log_t *)sub_32A48(1);
  int v12 = *v11;
  if (!*v11) {
    return 0;
  }
  BOOL v13 = os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v13)
  {
    uint64_t v24 = *a2;
    int v25 = *((_DWORD *)a2 + 2);
    sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
    if (v27 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
    __int16 v29 = 1024;
    int v30 = 138;
    __int16 v31 = 2080;
    uint64_t v32 = v14;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", (uint8_t *)&buf, 0x1Cu);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

BOOL sub_43CFB0(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 > 1986817376)
  {
    if (v3 > 2004053365)
    {
      if (v3 == 2021027692) {
        return 0;
      }
      if (v3 != 2004053366) {
        goto LABEL_36;
      }
    }
    else if (v3 != 1986817377 && v3 != 1987013741)
    {
LABEL_36:
      BOOL v19 = (os_log_t *)sub_32A48(1);
      unint64_t v20 = *v19;
      if (*v19)
      {
        BOOL v21 = os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v21) {
          return result;
        }
        uint64_t v23 = *(void *)a2;
        int v24 = a2[2];
        sub_16C9C4((uint64_t)&v25, (unsigned int *)&v23);
        if (v26 >= 0) {
          __int16 v22 = &v25;
        }
        else {
          __int16 v22 = *(AudioObjectPropertyAddress **)&v25.mSelector;
        }
        inAddress.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&inAddress.AudioObjectPropertyScope mScope = "SplitterMasterVolumeControl.cpp";
        __int16 v28 = 1024;
        int v29 = 105;
        __int16 v30 = 2080;
        __int16 v31 = v22;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled property %s.", (uint8_t *)&inAddress, 0x1Cu);
        if (v26 < 0) {
          operator delete(*(void **)&v25.mSelector);
        }
      }
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 104);
    uint64_t v8 = *(void *)(a1 + 112);
    if (v7 == v8) {
      return 0;
    }
    for (uint64_t i = v7 + 4; ; i += 4)
    {
      AudioObjectID v10 = *(_DWORD *)(i - 4);
      inAddress.AudioObjectPropertySelector mSelector = 2004053366;
      *(void *)&inAddress.AudioObjectPropertyScope mScope = qword_668A70;
      if (AudioObjectHasProperty(v10, &inAddress)) {
        break;
      }
      v25.AudioObjectPropertySelector mSelector = 1987013741;
      *(void *)&v25.AudioObjectPropertyScope mScope = qword_668A78;
      int HasProperty = AudioObjectHasProperty(v10, &v25);
      BOOL v4 = HasProperty == 0;
      BOOL result = HasProperty != 0;
      if (!v4 || i == v8) {
        return result;
      }
    }
    return 1;
  }
  if (v3 <= 1986225517)
  {
    BOOL v4 = v3 == 1064725619 || v3 == 1684633187;
    if (!v4) {
      goto LABEL_36;
    }
    return 0;
  }
  if (v3 != 1986225518)
  {
    if (v3 != 1986229104) {
      goto LABEL_36;
    }
    return 1;
  }
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 112);
  if (v13 == v14) {
    return 0;
  }
  uint64_t v15 = v13 + 4;
  do
  {
    AudioObjectID v16 = *(_DWORD *)(v15 - 4);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F627663656ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    int v17 = AudioObjectHasProperty(v16, &inAddress);
    BOOL v4 = v17 == 0;
    BOOL result = v17 != 0;
    BOOL v18 = !v4 || v15 == v14;
    v15 += 4;
  }
  while (!v18);
  return result;
}

void sub_43D264(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_43D27C(void *a1)
{
  sub_43A914(a1);

  operator delete();
}

void sub_43D2B8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      int v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        BOOL v4 = std::__shared_weak_count::lock(v3);
        if (v4)
        {
          BOOL v5 = v4;
          uint64_t v6 = v2[2];
          if (v6)
          {
            uint64_t v9 = 0;
            uint64_t v7 = *(void *)(v6 + 192);
            uint64_t v8 = 0x696E7074696E6A45;
            sub_4581B0(v7, (uint64_t)&v8, 4, (uint64_t)&v9 + 4);
          }
          sub_4636C(v5);
        }
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
  }
}

void sub_43D350(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_43D364(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 8))
  {
    do
    {
      int v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        BOOL v4 = std::__shared_weak_count::lock(v3);
        if (v4)
        {
          BOOL v5 = v4;
          uint64_t v6 = v2[2];
          if (v6)
          {
            int v9 = 0;
            int v10 = 1;
            uint64_t v7 = *(void *)(v6 + 192);
            uint64_t v8 = 0x696E7074696E6A45;
            sub_4581B0(v7, (uint64_t)&v8, 4, (uint64_t)&v10);
          }
          sub_4636C(v5);
        }
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
  }
}

void sub_43D400(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_43D414(uint64_t a1)
{
  sub_8108((uint64_t *)(a1 + 8));

  operator delete();
}

uint64_t sub_43D460(uint64_t a1)
{
  return a1;
}

void sub_43D490(uint64_t a1)
{
}

void sub_43D498(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63EB20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_43D4EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63EB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_43D50C(void *a1)
{
  *a1 = off_625BF0;
  sub_FE920((uint64_t)a1);

  operator delete();
}

uint64_t sub_43D560(uint64_t a1)
{
  *(void *)a1 = off_625BF0;
  return sub_FE920(a1);
}

uint64_t sub_43D580(uint64_t a1)
{
  uint64_t result = pthread_cond_broadcast((pthread_cond_t *)(a1 + 88));
  if (result)
  {
    int v3 = result;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      BOOL v5 = "CAGuard.cpp";
      __int16 v6 = 1024;
      int v7 = 320;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAGuard::NotifyAll: failed", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v3;
  }
  return result;
}

uint64_t sub_43D684(uint64_t a1)
{
  uint64_t result = pthread_cond_signal((pthread_cond_t *)(a1 + 88));
  if (result)
  {
    int v3 = result;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      BOOL v5 = "CAGuard.cpp";
      __int16 v6 = 1024;
      int v7 = 302;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAGuard::Notify: failed", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v3;
  }
  return result;
}

uint64_t sub_43D788(uint64_t a1, unint64_t a2)
{
  mach_absolute_time();
  unint64_t v4 = __udivti3();
  if (a2 <= v4) {
    return 1;
  }
  BOOL v5 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 64);

  return v5(a1, a2 - v4);
}

BOOL sub_43D818(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = pthread_self();
  BOOL v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (!pthread_equal(v4, v5))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "CAGuard.cpp";
      __int16 v15 = 1024;
      int v16 = 130;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAGuard::WaitFor: A thread has to have locked a guard be for it can wait", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1;
LABEL_14:
  }
  if (a2 <= 0x3B9AC9FF)
  {
    __darwin_time_t v6 = 0;
  }
  else
  {
    __darwin_time_t v6 = a2 / 0x3B9ACA00;
    a2 %= 0x3B9ACA00uLL;
  }
  v12.tv_sec = v6;
  v12.tv_nsec = a2;
  int v7 = (unint64_t *)(a1 + 16);
  atomic_store(0, (unint64_t *)(a1 + 16));
  int v8 = pthread_cond_timedwait_relative_np((pthread_cond_t *)(a1 + 88), (pthread_mutex_t *)(a1 + 24), &v12);
  int v9 = v8;
  if (v8 && v8 != 60)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "CAGuard.cpp";
      __int16 v15 = 1024;
      int v16 = 169;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAGuard::WaitFor: Wait got an error", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v9;
    goto LABEL_14;
  }
  atomic_store((unint64_t)pthread_self(), v7);
  return v9 == 60;
}

pthread_t sub_43DA28(uint64_t a1)
{
  uint64_t v2 = pthread_self();
  int v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (!pthread_equal(v2, v3))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "CAGuard.cpp";
      __int16 v10 = 1024;
      int v11 = 88;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAGuard::Wait: A thread has to have locked a guard before it can wait", (uint8_t *)&v8, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1;
LABEL_10:
  }
  atomic_store(0, (unint64_t *)(a1 + 16));
  int v4 = pthread_cond_wait((pthread_cond_t *)(a1 + 88), (pthread_mutex_t *)(a1 + 24));
  if (v4)
  {
    int v7 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "CAGuard.cpp";
      __int16 v10 = 1024;
      int v11 = 97;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAGuard::Wait: Could not wait for a signal", (uint8_t *)&v8, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v7;
    goto LABEL_10;
  }
  pthread_t result = pthread_self();
  atomic_store((unint64_t)result, (unint64_t *)(a1 + 16));
  return result;
}

void sub_43DBF0(uint64_t a1)
{
  sub_43DC28(a1);

  operator delete();
}

uint64_t sub_43DC28(uint64_t a1)
{
  *(void *)a1 = off_63EC18;
  pthread_cond_destroy((pthread_cond_t *)(a1 + 88));

  return sub_AEF0C(a1);
}

uint64_t sub_43DC84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_AEF58(a1, a2);
  *(void *)uint64_t v3 = off_63EC18;
  int v4 = pthread_cond_init((pthread_cond_t *)(v3 + 88), 0);
  if (v4)
  {
    int v6 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "CAGuard.cpp";
      __int16 v10 = 1024;
      int v11 = 66;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAGuard::CAGuard: Could not init the cond var", (uint8_t *)&v8, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v6;
  }
  return a1;
}

void sub_43DDB8(_Unwind_Exception *a1)
{
  sub_AEF0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_43DDCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 496);
  uint64_t v2 = *(unsigned int **)(v1 + 160);
  if (v2 == *(unsigned int **)(v1 + 168)) {
    return 0;
  }
  else {
    return *v2;
  }
}

uint64_t sub_43DDF0(uint64_t a1, unsigned int a2)
{
  if (a2 != 1819306350)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      BOOL v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_AOP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 304;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_AOP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 305;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_43DFA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_43DFC4(os_unfair_lock_s *a1)
{
}

void sub_43E098()
{
}

uint64_t sub_43E0D0(double a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(17);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315650;
    uint64_t v13 = "Device_AOP_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 372;
    __int16 v16 = 2048;
    double v17 = a1;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d Requested to set sample rate synchronously for AOP Device %f", (uint8_t *)&v12, 0x1Cu);
  }
  double v4 = fabs(a1);
  if (v4 < 16000.0) {
    double v4 = 16000.0;
  }
  if (v4 >= 1.0) {
    double v5 = v4 * 2.22044605e-16;
  }
  else {
    double v5 = 2.22044605e-16;
  }
  if (fabs(a1 + -16000.0) > v5)
  {
    int v9 = (os_log_t *)sub_32A48(13);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "Device_AOP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 378;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v12, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v6 = (os_log_t *)sub_32A48(17);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315394;
    uint64_t v13 = "Device_AOP_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 379;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Ignoring sample rate change for AOP Device because it is fixed at 16k and is not settable", (uint8_t *)&v12, 0x12u);
  }
  return 0;
}

void sub_43E300(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_43E31C(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v33 = (os_log_t *)sub_32A48(13);
    os_log_t v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v62 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v62);
      char v35 = v65 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      __int16 v67 = 1024;
      int v68 = 225;
      __int16 v69 = 2080;
      int v70 = (const char *)v35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v37 = (os_log_t *)sub_32A48(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v62 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v62);
      __int16 v39 = v65 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      __int16 v67 = 1024;
      int v68 = 226;
      __int16 v69 = 2080;
      int v70 = (const char *)v39;
      __int16 v71 = 1024;
      LODWORD(v72[0]) = a3;
      WORD2(v72[0]) = 2048;
      *(void *)((char *)v72 + 6) = a4;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v40 = &off_6414D8;
    v40[2] = 561211770;
  }
  if (!a6)
  {
    int v41 = (os_log_t *)sub_32A48(13);
    char v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v62 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v62);
      char v43 = v65 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      __int16 v67 = 1024;
      int v68 = 227;
      __int16 v69 = 2080;
      int v70 = "inData";
      __int16 v71 = 2080;
      v72[0] = v43;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v65 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v44 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v44 = &off_6414D8;
    void v44[2] = 561211770;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1684370275)
  {
    switch(mSelector)
    {
      case 0x64657364u:
        if (*(_DWORD *)(a1 + 504) == 1) {
          return;
        }
        uint64_t v24 = *(void *)(a1 + 496);
        uint64_t v25 = *(void *)(v24 + 112);
        uint64_t v26 = *(void *)(v24 + 120);
        uint64_t v15 = v24 + 112;
        if (v25 == v26) {
          return;
        }
        int v16 = 1;
        goto LABEL_30;
      case 0x6470656Cu:
        AudioObjectID v31 = *(_DWORD *)(a1 + 268);
        strcpy(buf, "lepdbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        int v32 = sub_43EEA0(v31, (uint64_t)buf, a3, a4, a6);
        if (v32)
        {
          char v59 = (os_log_t *)sub_32A48(13);
          uint64_t v60 = *v59;
          if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
            __int16 v67 = 1024;
            int v68 = 270;
            _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"error setting kAudioDevicePropertyEnableListening\"", buf, 0x12u);
          }
          char v61 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v61 = &off_6414D8;
          v61[2] = v32;
        }
        return;
      case 0x70647372u:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          AudioObjectID v52 = (os_log_t *)sub_32A48(13);
          os_log_t v53 = *v52;
          if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t v62 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)__p, (unsigned int *)&v62);
            int v54 = v65;
            uint64_t v55 = (void **)__p[0];
            int v56 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            id v57 = __p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
            if (v54 < 0) {
              id v57 = v55;
            }
            __int16 v67 = 1024;
            int v68 = 233;
            __int16 v69 = 2080;
            int v70 = (const char *)v57;
            __int16 v71 = 1024;
            LODWORD(v72[0]) = a5;
            WORD2(v72[0]) = 1024;
            *(_DWORD *)((char *)v72 + 6) = v56;
            _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v65 < 0) {
              operator delete(__p[0]);
            }
          }
          unsigned __int8 v58 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned __int8 v58 = &off_6414D8;
          v58[2] = 561211770;
        }
        uint64_t v17 = sub_43EE14();
        if (v17)
        {
          v18.n128_u64[0] = *(void *)a6;
          BOOL v19 = *(void (**)(__n128))(*(void *)v17 + 112);
          v19(v18);
        }
        return;
    }
    goto LABEL_34;
  }
  if (mSelector == 1634690413)
  {
    if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      __int16 v45 = (os_log_t *)sub_32A48(13);
      int v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        uint64_t v62 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v62);
        int v47 = v65;
        int v48 = (void **)__p[0];
        int v49 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        double v50 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
        if (v47 < 0) {
          double v50 = v48;
        }
        __int16 v67 = 1024;
        int v68 = 244;
        __int16 v69 = 2080;
        int v70 = (const char *)v50;
        __int16 v71 = 1024;
        LODWORD(v72[0]) = a5;
        WORD2(v72[0]) = 1024;
        *(_DWORD *)((char *)v72 + 6) = v49;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v65 < 0) {
          operator delete(__p[0]);
        }
      }
      __int16 v51 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v51 = &off_6414D8;
      double v51[2] = 561211770;
    }
    int v20 = sub_43EEA0(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
    if (v20)
    {
      int v21 = v20;
      __int16 v22 = (os_log_t *)sub_32A48(17);
      uint64_t v23 = *v22;
      if (*v22)
      {
        if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
          __int16 v67 = 1024;
          int v68 = 246;
          __int16 v69 = 1024;
          LODWORD(v70) = v21;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting kAOPAudio_DriverEnabledChannelMask", buf, 0x18u);
        }
      }
    }
    return;
  }
  if (mSelector == 1651664739)
  {
    int v27 = *(unsigned __int8 *)a6;
    if (*(unsigned __int8 *)(a1 + 508) != v27)
    {
      *(unsigned char *)(a1 + 508) = v27;
      if (*(_DWORD *)(a1 + 504) == 2)
      {
        uint64_t v28 = *(void *)(a1 + 496);
        BOOL v29 = v27 == 0;
        uint64_t v30 = 112;
        if (v29)
        {
          uint64_t v30 = 136;
          uint64_t v15 = v28 + 136;
        }
        else
        {
          uint64_t v15 = v28 + 112;
        }
        if (*(void *)(v28 + v30) != *(void *)(v15 + 8)) {
          goto LABEL_31;
        }
      }
    }
    return;
  }
  if (mSelector != 1684365924)
  {
LABEL_34:
    sub_4321A0(a1, a2, a3, a4, a5, a6);
    return;
  }
  if (*(_DWORD *)(a1 + 504) != 2)
  {
    uint64_t v13 = *(void *)(a1 + 496);
    uint64_t v14 = 112;
    if (*(unsigned char *)(a1 + 508))
    {
      uint64_t v15 = v13 + 112;
    }
    else
    {
      uint64_t v14 = 136;
      uint64_t v15 = v13 + 136;
    }
    if (*(void *)(v13 + v14) != *(void *)(v15 + 8))
    {
      int v16 = 2;
LABEL_30:
      *(_DWORD *)(a1 + 504) = v16;
LABEL_31:
      sub_43F80C(v15);
    }
  }
}

void sub_43EDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_43EE14()
{
  if (sub_20A008()) {
    return 0;
  }
  uint64_t v1 = (void *)sub_F820C();
  CFStringRef v3 = CFStringCreateWithCString(0, "Codec", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_F832C(v1, &v3);
  sub_72924((uint64_t)&v3);
  return v0;
}

void sub_43EE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_43EEA0(AudioObjectID a1, uint64_t a2, UInt32 a3, const void *a4, _DWORD *a5)
{
  uint64_t v10 = sub_32A48(13);
  if (*(unsigned char *)(v10 + 8))
  {
    char v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v73, (unsigned int *)&__p);
        int v12 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 166;
        __int16 v65 = 2080;
        *(void *)OSStatus v66 = v12;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v57 = a1;
  uint64_t v58 = *(void *)a2;
  int v59 = *(_DWORD *)(a2 + 8);
  UInt32 v60 = a3;
  char v61 = a4;
  unint64_t v13 = sub_43FA00((uint64_t)&v57);
  if (HIDWORD(v13)) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = *a5 == v13;
  }
  int v15 = v14;
  uint64_t v16 = sub_32A48(13);
  uint64_t v17 = *(void *)(v16 + 8);
  if (v15)
  {
    if ((v17 & 1) == 0) {
      return 0;
    }
    __n128 v18 = *(NSObject **)v16;
    if (!*(void *)v16 || !os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v63 = 1024;
    int v64 = 191;
    __int16 v65 = 1024;
    *(_DWORD *)OSStatus v66 = a1;
LABEL_20:
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    return 0;
  }
  if (v17)
  {
    BOOL v19 = *(NSObject **)v16;
    if (*(void *)v16)
    {
      if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v73, (unsigned int *)&__p);
        int v20 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 199;
        __int16 v65 = 2080;
        *(void *)OSStatus v66 = v20;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v21 = AudioObjectSetPropertyData(a1, &buf, a3, a4, 4u, a5);
  if (!v21)
  {
    unint64_t v28 = sub_43FA00((uint64_t)&v57);
    if (!HIDWORD(v28) && *a5 == v28)
    {
      uint64_t v29 = sub_32A48(13);
      if ((*(unsigned char *)(v29 + 8) & 1) == 0) {
        return 0;
      }
      __n128 v18 = *(NSObject **)v29;
      if (!*(void *)v29 || !os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v63 = 1024;
      int v64 = 219;
      __int16 v65 = 1024;
      *(_DWORD *)OSStatus v66 = a1;
      goto LABEL_20;
    }
    memset(v73.__m_.__opaque, 0, sizeof(v73.__m_.__opaque));
    v73.__m_.__uint64_t sig = 850045863;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795;
    char v56 = 0;
    sub_662FC(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v73, (uint64_t)&v56);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v34.__d_.__rep_) / -1000)
    {
      unint64_t v32 = sub_43FA00((uint64_t)&v57);
      int v33 = v32;
      uint64_t v21 = HIDWORD(v32);
      if (HIDWORD(v32)) {
        goto LABEL_95;
      }
      if (*a5 == v32) {
        break;
      }
      if (i <= 0)
      {
        int v46 = (os_log_t *)sub_32A48(13);
        uint64_t v21 = 2003329396;
        int v47 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = *(void *)a2;
          int v51 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v50);
          int v48 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v49 = *a5 == v33;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v63 = 1024;
          int v64 = 248;
          __int16 v65 = 2080;
          *(void *)OSStatus v66 = "set";
          *(_WORD *)&v66[8] = 2080;
          *(void *)&v66[10] = v48;
          *(_WORD *)&v66[18] = 2080;
          *(void *)&v66[20] = "set";
          *(_WORD *)&v66[28] = 1024;
          BOOL v67 = v49;
          __int16 v68 = 1024;
          int v69 = 0;
          __int16 v70 = 1024;
          AudioObjectID v71 = a1;
          _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }
LABEL_95:
        sub_6651C((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v73);
        return v21;
      }
      v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v35 = sub_32A48(13);
      if (*(unsigned char *)(v35 + 8))
      {
        uint64_t v36 = *(NSObject **)v35;
        if (*(void *)v35)
        {
          if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v63 = 1024;
            int v64 = 257;
            __int16 v65 = 2080;
            *(void *)OSStatus v66 = "with timeout";
            *(_WORD *)&v66[8] = 1024;
            *(_DWORD *)&v66[10] = a1;
            _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v73;
      __lk.__owns_ = 1;
      std::mutex::lock(&v73);
      v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v56)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v38 = v37.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v38 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_58;
          }
          v39.__d_.__rep_ = v38 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v39.__d_.__rep_ >= 1) {
            break;
          }
LABEL_76:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v38 || v56) {
            goto LABEL_58;
          }
        }
        std::chrono::steady_clock::now();
        v40.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v40.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 0;
          goto LABEL_72;
        }
        if (v40.__d_.__rep_ < 1)
        {
          if ((unint64_t)v40.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_71;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v40.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_72;
          }
LABEL_71:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 1000 * v40.__d_.__rep_;
LABEL_72:
          if (v41 > (v39.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v42.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_75:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v42);
            std::chrono::steady_clock::now();
            goto LABEL_76;
          }
        }
        v42.__d_.__rep_ = v41 + v39.__d_.__rep_;
        goto LABEL_75;
      }
LABEL_58:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v43 = sub_32A48(13);
    if (*(unsigned char *)(v43 + 8))
    {
      uint64_t v44 = *(NSObject **)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v50 = *(void *)a2;
          int v51 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v50);
          __int16 v45 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v63 = 1024;
          int v64 = 288;
          __int16 v65 = 2080;
          *(void *)OSStatus v66 = v45;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = a1;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    uint64_t v21 = 0;
    goto LABEL_95;
  }
  __int16 v22 = (os_log_t *)sub_32A48(13);
  uint64_t v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v73, v21);
    int v24 = v73.__m_.__opaque[15];
    uint64_t sig = v73.__m_.__sig;
    uint64_t inClientData = *(void *)a2;
    int v55 = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)&__p, (unsigned int *)&inClientData);
    uint64_t v26 = &v73;
    if (v24 < 0) {
      uint64_t v26 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v63 = 1024;
    int v64 = 207;
    __int16 v65 = 1024;
    *(_DWORD *)OSStatus v66 = v21;
    *(_WORD *)&v66[4] = 2080;
    *(void *)&v66[6] = v26;
    *(_WORD *)&v66[14] = 2080;
    *(void *)&v66[16] = p_p;
    *(_WORD *)&v66[24] = 1024;
    *(_DWORD *)&v66[26] = a1;
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v73.__m_.__opaque[15] < 0) {
      operator delete((void *)v73.__m_.__sig);
    }
  }
  return v21;
}

void sub_43F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v36 - 168));
  _Unwind_Resume(a1);
}

void sub_43F80C(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    double v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 319;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"No datasources found in the transducer database!\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003329396;
  }
  uint64_t v2 = sub_43EE14();
  uint64_t v8 = 0x696E707450444573;
  int v9 = 0;
  if (v2)
  {
    uint64_t v3 = v2;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v8))
    {
      memset(buf, 0, sizeof(buf));
      sub_46B38(buf, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
      char v4 = *(void **)buf;
      (*(void (**)(uint64_t, uint64_t *, void, void, void, void))(*(void *)v3 + 48))(v3, &v8, 0, 0, (*(_DWORD *)&buf[8] - *(_DWORD *)buf) & 0xFFFFFFFC, *(void *)buf);
      if (v4) {
        operator delete(v4);
      }
    }
  }
}

void sub_43F9E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_43FA00(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_26DAC((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        char v11 = v20;
        if (v9 < 0) {
          char v11 = v10;
        }
        if (v19 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        unint64_t v28 = v11;
        __int16 v29 = 2080;
        uint64_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_43FBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_43FBD0(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1684370275)
  {
    if (mSelector == 1651664739)
    {
      *a5 = 4;
      int v16 = *(unsigned __int8 *)(a1 + 508);
LABEL_18:
      *(_DWORD *)a6 = v16;
      return;
    }
    if (mSelector == 1684365924)
    {
      *a5 = 4;
      BOOL v13 = *(_DWORD *)(a1 + 504) == 2;
      goto LABEL_15;
    }
LABEL_10:
    sub_432AE8(a1, a2, a3, a4, a5, a6);
    return;
  }
  if (mSelector == 1684370276)
  {
    *a5 = 4;
    BOOL v13 = *(_DWORD *)(a1 + 504) == 1;
LABEL_15:
    int v16 = v13;
    goto LABEL_18;
  }
  if (mSelector != 1885631346) {
    goto LABEL_10;
  }
  UInt32 v14 = *a5;
  if (v14 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
  {
    int v17 = (os_log_t *)sub_32A48(13);
    __n128 v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v25);
      int v19 = v28;
      int v20 = (void **)__p[0];
      UInt32 v21 = *a5;
      int v22 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
      __int16 v23 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_AOP_Aspen.cpp";
      if (v19 < 0) {
        __int16 v23 = v20;
      }
      __int16 v30 = 1024;
      int v31 = 192;
      __int16 v32 = 2080;
      int v33 = v23;
      __int16 v34 = 1024;
      UInt32 v35 = v21;
      __int16 v36 = 1024;
      int v37 = v22;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 561211770;
  }
  uint64_t v15 = sub_43EE14();
  if (v15)
  {
    strcpy(buf, "trsnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, unsigned char *, uint64_t, const void *, UInt32 *, float *))(*(void *)v15 + 40))(v15, buf, a3, a4, a5, a6);
  }
}

void sub_43FF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_43FF44(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    char v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      int v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v23 = "Device_AOP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 161;
      __int16 v26 = 2080;
      __int16 v27 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    UInt32 v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      int v16 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v23 = "Device_AOP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 162;
      __int16 v26 = 2080;
      __int16 v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      int v31 = a4;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    int v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v17 = &off_6414D8;
    v17[2] = 561211770;
  }
  uint64_t result = 0;
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1684370275)
  {
    if (mSelector == 1684370276) {
      return result;
    }
    if (mSelector == 1885631346) {
      return 8;
    }
  }
  else if (mSelector == 1651664739 || mSelector == 1684365924)
  {
    return result;
  }

  return sub_433254(a1, a2, a3, a4);
}

uint64_t sub_4402C0(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1684370275)
  {
    if (mSelector != 1684370276)
    {
      if (mSelector == 1885631346) {
        return sub_43EE14() != 0;
      }
      goto LABEL_9;
    }
LABEL_8:
    AudioObjectPropertyScope mScope = a2->mScope;
    v5[0] = 1634689389;
    v5[1] = mScope;
    v5[2] = 0;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 24))(a1, v5);
  }
  if (mSelector == 1651664739) {
    return 1;
  }
  if (mSelector == 1684365924) {
    goto LABEL_8;
  }
LABEL_9:

  return sub_43356C(a1, a2);
}

uint64_t sub_4403A4(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1684370275)
  {
    if (mSelector == 1651664739) {
      return 1;
    }
    if (mSelector != 1684365924) {
      goto LABEL_9;
    }
LABEL_8:
    AudioObjectPropertyScope mScope = a2->mScope;
    v8[0] = 1634689389;
    v8[1] = mScope;
    v8[2] = 0;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, v8);
  }
  if (mSelector == 1684370276) {
    goto LABEL_8;
  }
  if (mSelector == 1885631346)
  {
    BOOL v5 = sub_43EE14() == 0;
    return !v5;
  }
LABEL_9:
  sub_50848((std::mutex *)a1);
  BOOL v5 = AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) == 0;
  return !v5;
}

void sub_44049C(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_4404D8(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_433710(a1, a2, a3, a3, 0) = &off_63EC88;
  *(void *)(a1 + 496) = sub_3EFF58();
  *(_DWORD *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 508) = 0;
  return a1;
}

void sub_440534(_Unwind_Exception *a1)
{
  sub_43456C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_440548(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885891433)
  {
    UInt32 v3 = (os_log_t *)sub_32A48(17);
    unint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      BOOL v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      BOOL v13 = "Device_Hawking_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 84;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    char v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      BOOL v13 = "Device_Hawking_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 85;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_440700(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_44071C(os_unfair_lock_s *a1)
{
}

void sub_44160C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p)
{
  sub_6651C((uint64_t)&a43);
  std::condition_variable::~condition_variable((std::condition_variable *)(v55 - 232));
  std::mutex::~mutex((std::mutex *)(v55 - 184));
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void sub_441818(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].int mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        char v11 = v19;
        if (v9 < 0) {
          char v11 = v10;
        }
        int v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          int v12 = __p;
        }
        buf[0].int mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        __int16 v27 = v11;
        __int16 v28 = 2080;
        UInt32 v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_441A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_441A50(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

void sub_441A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  if ((sub_1151A0(*(uint64_t **)(a5 + 8), 5) & 1) == 0)
  {
    int v46 = (os_log_t *)sub_32A48(13);
    int v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string theString1 = 136315394;
      *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
      *(_WORD *)&theString1[12] = 1024;
      *(_DWORD *)&theString1[14] = 91;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", theString1, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((sub_1151A0(*(uint64_t **)(v5 + 8), 6) & 1) == 0)
  {
    BOOL v49 = (os_log_t *)sub_32A48(13);
    uint64_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string theString1 = 136315394;
      *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
      *(_WORD *)&theString1[12] = 1024;
      *(_DWORD *)&theString1[14] = 92;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", theString1, 0x12u);
    }
    int v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v51, "Precondition failure.");
  }
  int v7 = (uint64_t *)sub_115244(v5, 5);
  uint64_t v8 = sub_115244(v5, 6);
  AudioObjectPropertyAddress v85 = v7;
  sub_43F38(&v110, v7, "", 97);
  uint64_t v89 = v8;
  sub_43F38(&v108, (uint64_t *)(v8 + 16), "", 98);
  int v9 = (__CFString *)v110;
  unsigned int v83 = *(_DWORD *)(v110 + 144);
  uint64_t v10 = v108;
  unsigned int v11 = *(_DWORD *)(v108 + 144);
  if (sub_209B38() && (v11 == 1886613611 || v11 == 1885892727)) {
    sub_1151A0(*(uint64_t **)(v5 + 8), 9);
  }
  unsigned int v87 = v11;
  if (v11 == 1886613611) {
    unsigned int v84 = sub_1151A0(*(uint64_t **)(v5 + 8), 4);
  }
  else {
    unsigned int v84 = 0;
  }
  int v12 = (void *)sub_F820C();
  *(void *)std::string theString1 = CFStringCreateWithCString(0, "Baseband Voice", 0x600u);
  theString1[8] = 1;
  uint64_t v13 = sub_F832C(v12, (CFStringRef *)theString1);
  sub_72924((uint64_t)theString1);
  if (!v13)
  {
    AudioObjectID v52 = (os_log_t *)sub_32A48(13);
    char v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string theString1 = 136315394;
      *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
      *(_WORD *)&theString1[12] = 1024;
      *(_DWORD *)&theString1[14] = 113;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [basebandDevice is NULL]: \"could not get baseband device\"", theString1, 0x12u);
    }
    int v54 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v54 = &off_6414D8;
    v54[2] = 2003329396;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a3);
  strcpy(theString1, "crscbolg");
  theString1[9] = 0;
  *(_WORD *)&theString1[10] = 0;
  sub_1F4340((uint64_t)theString1);
  __p[1] = 0;
  __p[0] = 0;
  uint64_t v107 = 0;
  uint64_t isa = (uint64_t)v9[6].isa;
  if (!isa)
  {
    uint64_t v55 = (os_log_t *)sub_32A48(13);
    char v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
    {
      (*((void (**)(void *__return_ptr, __CFString *))v9->isa + 18))(v92, v9);
      uint64_t v57 = v92[0];
      sub_2417C(v93, v83);
      if (v94 >= 0) {
        uint64_t v58 = v93;
      }
      else {
        uint64_t v58 = (CFStringRef *)v93[0];
      }
      *(_DWORD *)std::string theString1 = 136315906;
      *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
      *(_WORD *)&theString1[12] = 1024;
      *(_DWORD *)&theString1[14] = 130;
      *(_WORD *)&theString1[18] = 2112;
      *(void *)&theString1[20] = v57;
      __int16 v113 = 2080;
      uint64_t v114 = (std::__shared_weak_count *)v58;
      _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputControlDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", theString1, 0x26u);
      if (v94 < 0) {
        operator delete((void *)v93[0]);
      }
      sub_72924((uint64_t)v92);
    }
    int v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v59 = &off_6414D8;
    v59[2] = 2003329396;
  }
  uint64_t v104 = 0;
  unsigned int v103 = 0;
  uint64_t v105 = 0;
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)isa + 128))(theString1, isa);
  if (CFStringCompare(*(CFStringRef *)theString1, @"Codec", 0))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)isa + 128))(v93, isa);
    CFComparisonResult v15 = CFStringCompare(v93[0], @"Digital Mic", 0);
    sub_72924((uint64_t)v93);
    sub_72924((uint64_t)theString1);
    if (v15)
    {
      int v16 = (os_unfair_lock_s *)isa;
      if (v83 != 1886216820)
      {
        sub_1EE03C((uint64_t)theString1, isa, (uint64_t)v9, a2, v85[7], *(_DWORD *)(a2 + 12));
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)std::condition_variable __p = *(_OWORD *)theString1;
        uint64_t v107 = *(void *)&theString1[16];
        int v16 = (os_unfair_lock_s *)isa;
      }
      goto LABEL_32;
    }
  }
  else
  {
    sub_72924((uint64_t)theString1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a3);
  sub_1ED40C(theString1, (uint64_t)v9, a2, v85[7], *(_DWORD *)(a2 + 12));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::condition_variable __p = *(_OWORD *)theString1;
  uint64_t v107 = *(void *)&theString1[16];
  int v17 = v111;
  v93[0] = v9;
  v93[1] = (CFStringRef)v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1F4188((uint64_t)theString1, (uint64_t)__p, (uint64_t *)v93);
  sub_6720C((char *)&v103, *(char **)theString1, *(uint64_t *)&theString1[8], (uint64_t)(*(void *)&theString1[8] - *(void *)theString1) >> 2);
  if (*(void *)theString1)
  {
    *(void *)&theString1[8] = *(void *)theString1;
    operator delete(*(void **)theString1);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  unint64_t v18 = (unint64_t)(v104 - (void)v103) >> 2;
  *(void *)std::string theString1 = v10;
  *(void *)&theString1[8] = v109;
  if (v109) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 16), 1uLL, memory_order_relaxed);
  }
  int v16 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t, unint64_t, unsigned char *))(*(void *)a1 + 56))(a1, v18, theString1);
  if (*(void *)&theString1[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&theString1[8]);
  }
  if (!v16)
  {
    __int16 v65 = (os_log_t *)sub_32A48(13);
    OSStatus v66 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string theString1 = 136315394;
      *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
      *(_WORD *)&theString1[12] = 1024;
      *(_DWORD *)&theString1[14] = 143;
      _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputIODevice is NULL]: \"could not get codec input device\"", theString1, 0x12u);
    }
    BOOL v67 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v67 = &off_6414D8;
    v67[2] = 2003329396;
  }
LABEL_32:
  sub_1EE408(v16, 0, *(_DWORD *)(a2 + 12), v85[7]);
  sub_85F24();
  if (byte_64A0E0) {
    sub_1F28E8(1, (uint64_t)v9[6].isa);
  }
  int v19 = v111;
  *(void *)std::string theString1 = v9;
  *(void *)&theString1[8] = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1F3044((unsigned int **)__p, (uint64_t *)theString1, v16);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  __int16 v91 = *(os_unfair_lock_s **)(v10 + 192);
  if (!v91)
  {
    UInt32 v60 = (os_log_t *)sub_32A48(13);
    char v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v10 + 144))(v92, v10);
      uint64_t v62 = v92[0];
      sub_2417C(v93, v87);
      if (v94 >= 0) {
        __int16 v63 = v93;
      }
      else {
        __int16 v63 = (CFStringRef *)v93[0];
      }
      *(_DWORD *)std::string theString1 = 136315906;
      *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
      *(_WORD *)&theString1[12] = 1024;
      *(_DWORD *)&theString1[14] = 184;
      *(_WORD *)&theString1[18] = 2112;
      *(void *)&theString1[20] = v62;
      __int16 v113 = 2080;
      uint64_t v114 = (std::__shared_weak_count *)v63;
      _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [outputControlDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", theString1, 0x26u);
      if (v94 < 0) {
        operator delete((void *)v93[0]);
      }
      sub_72924((uint64_t)v92);
    }
    int v64 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v64 = &off_6414D8;
    v64[2] = 2003329396;
  }
  switch(v87)
  {
    case 0x70687077u:
      if (*(_DWORD *)(v10 + 264) == 1752709424) {
        sub_474A74((uint64_t)v91, 4);
      }
      break;
    case 0x70726563u:
      char v20 = (void *)sub_F820C();
      *(void *)std::string theString1 = CFStringCreateWithCString(0, "Speaker", 0x600u);
      theString1[8] = 1;
      uint64_t v21 = sub_F832C(v20, (CFStringRef *)theString1);
      sub_72924((uint64_t)theString1);
      if (v21 && sub_36B52C(v21)) {
        operator new();
      }
      break;
    case 0x7074746Fu:
      if (v83 == 1886680169) {
        operator new();
      }
      int v77 = (os_log_t *)sub_32A48(13);
      __int16 v78 = *v77;
      if (*v77)
      {
        if (os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string theString1 = 136315394;
          *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
          *(_WORD *)&theString1[12] = 1024;
          *(_DWORD *)&theString1[14] = 191;
          _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Invalid input route encountered when attempting to set TTY output route\"", theString1, 0x12u);
        }
      }
      __int16 v79 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v79, "Invalid input route encountered when attempting to set TTY output route");
  }
  int v22 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v91->_os_unfair_lock_opaque + 240))(v91, v87);
  uint64_t v101 = 0x6F7574706D757465;
  int v102 = v22;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&v91->_os_unfair_lock_opaque + 24))(v91, &v101))
  {
    operator new();
  }
  sub_1EE408(v91, 1, *(_DWORD *)(a2 + 12), *(void *)(v89 + 56));
  if (sub_1151A0(*(uint64_t **)(v5 + 8), 3))
  {
    uint64_t v23 = (void *)sub_F820C();
    *(void *)std::string theString1 = CFStringCreateWithCString(0, "Codec", 0x600u);
    theString1[8] = 1;
    uint64_t v24 = sub_F832C(v23, (CFStringRef *)theString1);
    sub_72924((uint64_t)theString1);
    if (v24
      || (int v25 = (void *)sub_F820C(),
          *(void *)std::string theString1 = CFStringCreateWithCString(0, "Receiver", 0x600u),
          theString1[8] = 1,
          uint64_t v24 = sub_F832C(v25, (CFStringRef *)theString1),
          sub_72924((uint64_t)theString1),
          v24))
    {
      uint64_t v26 = sub_115244(v5, 3);
      sub_43F38((uint64_t *)v93, (uint64_t *)(v26 + 16), "", 243);
      if (v87 == 1886545251)
      {
        if (v93[0][6].isa == v91)
        {
          if (LODWORD(v93[0][4].data) == 1885888867)
          {
            if (!sub_1151A0(*(uint64_t **)(v5 + 8), 2))
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 240))(v24, 1885888867);
              operator new();
            }
            char v75 = (os_log_t *)sub_32A48(13);
            char v76 = *v75;
            if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string theString1 = 136315394;
              *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
              *(_WORD *)&theString1[12] = 1024;
              *(_DWORD *)&theString1[14] = 257;
              _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: both HAC and ANC are present in route. Database error?\"", theString1, 0x12u);
            }
            __int16 v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v70, "Illegal route: both HAC and ANC are present in route. Database error?");
          }
          else
          {
            std::mutex v73 = (os_log_t *)sub_32A48(13);
            char v74 = *v73;
            if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string theString1 = 136315394;
              *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
              *(_WORD *)&theString1[12] = 1024;
              *(_DWORD *)&theString1[14] = 254;
              _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: HAC connection's destination port type is not HAC. Database error?\"", theString1, 0x12u);
            }
            __int16 v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v70, "Illegal route: HAC connection's destination port type is not HAC. Database error?");
          }
        }
        else
        {
          AudioObjectID v71 = (os_log_t *)sub_32A48(13);
          __int16 v72 = *v71;
          if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string theString1 = 136315394;
            *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
            *(_WORD *)&theString1[12] = 1024;
            *(_DWORD *)&theString1[14] = 251;
            _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal route: HAC and downlink connections' destination devices do not match. Database error?\"", theString1, 0x12u);
          }
          __int16 v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v70, "Illegal route: HAC and downlink connections' destination devices do not match. Database error?");
        }
      }
      else
      {
        __int16 v68 = (os_log_t *)sub_32A48(13);
        int v69 = *v68;
        if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string theString1 = 136315394;
          *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
          *(_WORD *)&theString1[12] = 1024;
          *(_DWORD *)&theString1[14] = 248;
          _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Detected presence of HAC connection in a non-Receiver route. Database error?\"", theString1, 0x12u);
        }
        __int16 v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v70, "Detected presence of HAC connection in a non-Receiver route. Database error?");
      }
    }
    uint64_t v80 = (os_log_t *)sub_32A48(13);
    __int16 v81 = *v80;
    if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string theString1 = 136315394;
      *(void *)&theString1[4] = "RoutingHandler_Call_GenericConfig2.cpp";
      *(_WORD *)&theString1[12] = 1024;
      *(_DWORD *)&theString1[14] = 240;
      _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [hacDevice is NULL]: \"could not get owning device for HAC\"", theString1, 0x12u);
    }
    AudioObjectPropertyScope v82 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectPropertyScope v82 = &off_6414D8;
    v82[2] = 2003329396;
  }
  int v98 = &v98;
  __int16 v99 = &v98;
  uint64_t v100 = 0;
  char v95 = &v95;
  AudioObjectID v96 = &v95;
  uint64_t v97 = 0;
  if (v16 == v91)
  {
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v30 = operator new(0x20uLL);
    v30[2] = v9;
    _DWORD v30[3] = v19;
    void *v30 = &v98;
    v30[1] = &v98;
    __int16 v99 = v30;
    int v98 = v30;
    ++v100;
    uint64_t v31 = v109;
    if (v109) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 16), 1uLL, memory_order_relaxed);
    }
    UInt32 v29 = operator new(0x20uLL);
    v29[2] = v10;
    v29[3] = v31;
    *UInt32 v29 = v30;
    v29[1] = &v98;
    v30[1] = v29;
  }
  else
  {
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v27 = operator new(0x20uLL);
    v27[2] = v9;
    uint64_t v27[3] = v19;
    void *v27 = &v95;
    v27[1] = &v95;
    AudioObjectID v96 = v27;
    char v95 = v27;
    ++v97;
    uint64_t v28 = v109;
    if (v109) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 16), 1uLL, memory_order_relaxed);
    }
    UInt32 v29 = operator new(0x20uLL);
    v29[2] = v10;
    v29[3] = v28;
    *UInt32 v29 = &v98;
    v29[1] = &v98;
    __int16 v99 = v29;
  }
  int v98 = v29;
  ++v100;
  uint64_t v88 = v5;
  if (!sub_1151A0(*(uint64_t **)(v5 + 8), 3))
  {
LABEL_77:
    if (!v84) {
      goto LABEL_84;
    }
    std::chrono::steady_clock::time_point v39 = (uint64_t *)sub_115244(v5, 4);
    std::chrono::system_clock::time_point v40 = (std::__shared_weak_count *)v39[1];
    if (v40)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = std::__shared_weak_count::lock(v40);
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v42 = v41;
      if (v41)
      {
        uint64_t v43 = *v39;
        atomic_fetch_add_explicit(&v41->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v41);
LABEL_83:
        uint64_t v44 = operator new(0x20uLL);
        void v44[2] = v43;
        void v44[3] = v42;
        __int16 v45 = v95;
        *uint64_t v44 = v95;
        v44[1] = &v95;
        v45[1] = v44;
        char v95 = v44;
        ++v97;
LABEL_84:
        operator new();
      }
    }
    else
    {
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v42 = 0;
    }
    uint64_t v43 = 0;
    goto LABEL_83;
  }
  uint64_t v32 = sub_115244(v5, 3);
  int v33 = *(std::__shared_weak_count **)(v32 + 24);
  if (v33)
  {
    __int16 v34 = std::__shared_weak_count::lock(v33);
    UInt32 v35 = v34;
    if (v34)
    {
      uint64_t v36 = *(void *)(v32 + 16);
      atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v34);
LABEL_76:
      int v37 = operator new(0x20uLL);
      void v37[2] = v36;
      void v37[3] = v35;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v38 = v98;
      *int v37 = v98;
      v37[1] = &v98;
      v38[1] = v37;
      int v98 = v37;
      ++v100;
      uint64_t v5 = v88;
      goto LABEL_77;
    }
  }
  else
  {
    UInt32 v35 = 0;
  }
  uint64_t v36 = 0;
  goto LABEL_76;
}

void sub_444D84(_Unwind_Exception *a1)
{
  sub_72924((uint64_t)&STACK[0x280]);
  if (STACK[0x3D8]) {
    operator delete((void *)STACK[0x3D8]);
  }
  uint64_t v2 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v2;
    operator delete(v2);
  }
  if (STACK[0x418]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x418]);
  }
  if (STACK[0x428]) {
    sub_4636C((std::__shared_weak_count *)STACK[0x428]);
  }
  _Unwind_Resume(a1);
}

void sub_4455B8(uint64_t **a1, int a2, uint64_t a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  int v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = (char *)operator new(0x90uLL);
    v22[1] = v6;
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *((void *)v10 + 5) = *(void *)(a3 + 8);
    *((_OWORD *)v10 + 3) = *(_OWORD *)(a3 + 16);
    *((void *)v10 + 8) = *(void *)(a3 + 32);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(_OWORD *)(v10 + 72) = *(_OWORD *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    uint64_t v11 = *(void *)(a3 + 56);
    uint64_t v12 = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    uint64_t v13 = (void *)(a3 + 72);
    uint64_t v14 = *(void *)(a3 + 72);
    *((void *)v10 + 11) = v11;
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v14;
    CFComparisonResult v15 = v10 + 104;
    uint64_t v16 = *(void *)(a3 + 80);
    *((void *)v10 + 14) = v16;
    if (v16)
    {
      *(void *)(v14 + 16) = v15;
      *(void *)(a3 + 64) = v13;
      *uint64_t v13 = 0;
      *(void *)(a3 + 80) = 0;
    }
    else
    {
      *((void *)v10 + 12) = v15;
    }
    int v17 = (void *)(a3 + 96);
    uint64_t v18 = *(void *)(a3 + 96);
    uint64_t v19 = *(void *)(a3 + 88);
    *((void *)v10 + 16) = v18;
    char v20 = v10 + 128;
    *((void *)v10 + 15) = v19;
    uint64_t v21 = *(void *)(a3 + 104);
    *((void *)v10 + 17) = v21;
    if (v21)
    {
      *(void *)(v18 + 16) = v20;
      *(void *)(a3 + 88) = v17;
      *int v17 = 0;
      *(void *)(a3 + 104) = 0;
    }
    else
    {
      *((void *)v10 + 15) = v20;
    }
    char v23 = 1;
    sub_46CA8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v22[0] = 0;
    sub_445818((uint64_t)v22);
  }
}

uint64_t sub_445710(uint64_t a1)
{
  sub_73038(*(void **)(a1 + 96));
  sub_73038(*(void **)(a1 + 72));
  UInt32 v3 = (void **)(a1 + 40);
  sub_7308C(&v3);
  UInt32 v3 = (void **)(a1 + 16);
  sub_7308C(&v3);
  return a1;
}

void sub_44576C(void *a1)
{
  if (a1)
  {
    sub_44576C(*a1);
    sub_44576C(a1[1]);
    sub_4457C0((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_4457C0(uint64_t a1)
{
  sub_73038(*(void **)(a1 + 96));
  sub_73038(*(void **)(a1 + 72));
  uint64_t v2 = (void **)(a1 + 40);
  sub_7308C(&v2);
  uint64_t v2 = (void **)(a1 + 16);
  sub_7308C(&v2);
}

void sub_445818(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_4457C0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_445870()
{
  sub_20A0D0();
  char v8 = 1;
  *(_OWORD *)int v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  *(_DWORD *)uint64_t v12 = 0;
  void v12[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v12[5] = 1;
  *(void *)&v12[6] = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  CFComparisonResult v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v96[0] = 0;
  v96[40] = 0;
  v96[48] = 0;
  v96[120] = 0;
  v96[128] = 0;
  v96[168] = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  LOBYTE(v99) = 0;
  char v100 = 0;
  LOBYTE(v101) = 0;
  char v102 = 0;
  LOBYTE(v103) = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 1;
  char v132 = 0;
  char v133 = 0;
  LOBYTE(v134) = 0;
  char v135 = 0;
  LOBYTE(v136) = 0;
  char v137 = 0;
  LOBYTE(v138) = 0;
  char v139 = 0;
  LOBYTE(v140) = 0;
  char v141 = 0;
  __int16 v142 = 0;
  LOBYTE(v143) = 0;
  char v144 = 0;
  LOBYTE(v145) = 0;
  char v146 = 0;
  LOBYTE(v147) = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  char v152 = 0;
  LOBYTE(v153) = 0;
  char v154 = 0;
  LOBYTE(v155) = 0;
  char v156 = 0;
  LOBYTE(v157) = 0;
  char v158 = 0;
  LOBYTE(v159) = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  char v164 = 0;
  LOBYTE(__p) = 0;
  char v167 = 0;
  char v168 = 0;
  char v169 = 0;
  char v170 = 0;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  int v174 = 256;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  char v180 = 0;
  __int16 v181 = 0;
  char v4 = 1;
  int v3 = 1953460273;
  char v6 = 1;
  int v5 = 1;
  int v7 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v9, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v10[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(void *)uint64_t v12 = 0x101010101000100;
  *(_WORD *)&v12[12] = 257;
  int v14 = 16843008;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 1090519040;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  int v94 = 16843009;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 1836282987;
  if (!v100) {
    char v100 = 1;
  }
  int v99 = 2;
  if (!v102) {
    char v102 = 1;
  }
  int v101 = 2;
  if (!v104) {
    char v104 = 1;
  }
  int v103 = 4;
  if (!v144) {
    char v144 = 1;
  }
  int v143 = 2;
  if (!v148) {
    char v148 = 1;
  }
  int v147 = 2;
  if (!v146) {
    char v146 = 1;
  }
  int v145 = 2;
  int v134 = 41;
  char v135 = 1;
  int v136 = 3;
  char v137 = 1;
  int v138 = 25;
  char v139 = 1;
  int v140 = 41;
  char v141 = 1;
  __int16 v142 = 257;
  int v153 = 41;
  char v154 = 1;
  int v155 = 41;
  char v156 = 1;
  int v157 = 23;
  char v158 = 1;
  int v159 = 7;
  char v160 = 1;
  sub_208140(&__src, 92);
  if (v167)
  {
    if (SHIBYTE(v166) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    char v166 = v190;
  }
  else
  {
    long long __p = __src;
    char v166 = v190;
    char v167 = 1;
  }
  __int16 v17 = 257;
  sub_21C8C(&v187, "");
  sub_208ED4(__dst);
  sub_21C8C(&v184, off_648B50);
  sub_21C8C(&v183, "AU");
  sub_21C8C(&v182, "VAD");
  sub_6D364((char *)&__src, &v187, (uint64_t)__dst, &v184, &v183, &v182);
  sub_6D600((uint64_t)v95, &__src);
  if (v194 < 0) {
    operator delete(v193);
  }
  if (v192 < 0) {
    operator delete(v191);
  }
  if (SHIBYTE(v190) < 0) {
    operator delete((void *)__src);
  }
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v184.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v188) < 0) {
    operator delete((void *)v187);
  }
  uint64_t v0 = operator new(4uLL);
  *uint64_t v0 = 1;
  *((void *)&v187 + 1) = v0 + 1;
  v188 = v0 + 1;
  *(void *)&long long v187 = v0;
  uint64_t v1 = operator new(8uLL);
  *uint64_t v1 = 0x200000001;
  __dst[1] = v1 + 1;
  int v186 = v1 + 1;
  __dst[0] = v1;
  sub_424954((uint64_t)&__src);
  sub_6D31C((uint64_t)v96, (uint64_t *)&__src);
  sub_6C7E4(v190);
  uint64_t v2 = (void *)__src;
  *(void *)&long long __src = 0;
  if (v2) {
    operator delete(v2);
  }
  operator delete(v1);
  operator delete(v0);
  sub_402E04(&v3);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_446034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4460F0(uint64_t a1, unsigned __int32 a2)
{
  int v3 = wmemchr(dword_5967D0, a2, 8uLL);
  char v4 = "St19bad_optional_access";
  if (v3) {
    char v4 = (const char *)v3;
  }
  if (v4 - (const char *)dword_5967D0 == 32)
  {
    uint64_t v6 = sub_32A48(17);
    uint64_t v7 = sub_32A48(27);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_11;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_11:
    __int16 v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      int v14 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_AirPlay_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 219;
      __int16 v23 = 2080;
      char v24 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    CFComparisonResult v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_AirPlay_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 220;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_446330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_44634C(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 1))
  {
    uint64_t v2 = wmemchr(dword_5967D0, a1[123]._os_unfair_lock_opaque, 8uLL);
    int v3 = "St19bad_optional_access";
    if (v2) {
      int v3 = (const char *)v2;
    }
    if (v3 - (const char *)dword_5967D0 != 32)
    {
      uint64_t v40 = 0;
      char v41 = 1;
      uint64_t v38 = 0x676C6F626C6E616DLL;
      int v39 = 0;
      if ((*(uint64_t (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v38))
      {
        int v37 = 16;
        (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, int *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                                + 40))(a1, &v38, 0, 0, &v37, &v40);
        uint64_t v35 = 0x6F7574706374726CLL;
        int v36 = 0;
        if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                           + 16))(a1, &v35))
        {
          uint64_t v4 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t *, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                        + 32))(a1, &v35, 0, 0);
          uint64_t v5 = v4;
          if (!v4)
          {
            char v30 = (os_log_t *)sub_32A48(13);
            int v31 = *v30;
            if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
            {
              buf.int mSelector = 136315394;
              *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
              __int16 v45 = 1024;
              int v46 = 146;
              _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"AirPlay audio device returned control list size of 0\"", (uint8_t *)&buf, 0x12u);
            }
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "AirPlay audio device returned control list size of 0");
          }
          unsigned int v6 = v4 >> 2;
          __n128 v7 = __chkstk_darwin(v4);
          uint64_t v9 = (AudioObjectID *)&v33[-((v8 + 15) & 0x1FFFFFFF0)];
          int v37 = v5 & 0xFFFFFFFC;
          (*(void (**)(os_unfair_lock_s *, uint64_t *, uint64_t, void, int *, AudioObjectID *, __n128))(*(void *)&a1->_os_unfair_lock_opaque + 40))(a1, &v35, v5, 0, &v37, v9, v7);
          *(void *)&inAddress.int mSelector = 0x6F757470636C6173;
          inAddress.AudioObjectPropertyElement mElement = 0;
          if (v5 > 3)
          {
            if (v6 <= 1) {
              uint64_t v10 = 1;
            }
            else {
              uint64_t v10 = v6;
            }
            do
            {
              if (!AudioObjectHasProperty(*v9, &inAddress))
              {
                CFComparisonResult v15 = (os_log_t *)sub_32A48(13);
                uint64_t v16 = *v15;
                if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
                {
                  sub_2417C(&v42, 0x636C6173u);
                  __int16 v17 = v43 >= 0 ? &v42 : (long long *)v42;
                  buf.int mSelector = 136315650;
                  *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
                  __int16 v45 = 1024;
                  int v46 = 157;
                  __int16 v47 = 2080;
                  char v48 = v17;
                  _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"AirPlay audio device does not have property %s\"", (uint8_t *)&buf, 0x1Cu);
                  if (v43 < 0) {
                    operator delete((void *)v42);
                  }
                }
                char v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v18, "AirPlay audio device does not have property %s");
              }
              LODWORD(v42) = *v9;
              strcpy((char *)&buf, "salcptuo");
              BYTE1(buf.mElement) = 0;
              HIWORD(buf.mElement) = 0;
              unint64_t v11 = sub_26DAC((AudioObjectID *)&v42, &buf, 0, 0);
              int v13 = v11;
              if (v11 || !v12)
              {
                int v14 = __cxa_allocate_exception(0x10uLL);
                *(void *)int v14 = &off_6414D8;
                void v14[2] = v13;
              }
              if (HIDWORD(v11) == 1986817381) {
                operator new();
              }
              if (HIDWORD(v11) == 1836414053) {
                operator new();
              }
              ++v9;
              --v10;
            }
            while (v10);
          }
        }
        operator new();
      }
      char v26 = (os_log_t *)sub_32A48(13);
      int v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v42, 0x6C6E616Du);
        char v28 = v43 >= 0 ? &v42 : (long long *)v42;
        buf.int mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
        __int16 v45 = 1024;
        int v46 = 133;
        __int16 v47 = 2080;
        char v48 = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"AirPlay audio device does not have property %s\"", (uint8_t *)&buf, 0x1Cu);
        if (v43 < 0) {
          operator delete((void *)v42);
        }
      }
      int v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "AirPlay audio device does not have property %s");
    }
    int v22 = (os_log_t *)sub_32A48(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v42, a1[123]._os_unfair_lock_opaque);
      char v24 = v43 >= 0 ? &v42 : (long long *)v42;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
      __int16 v45 = 1024;
      int v46 = 129;
      __int16 v47 = 2080;
      char v48 = v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"AirPlay audio device has incorrect port type %s\"", (uint8_t *)&buf, 0x1Cu);
      if (v43 < 0) {
        operator delete((void *)v42);
      }
    }
    int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "AirPlay audio device has incorrect port type %s");
  }
  char v19 = (os_log_t *)sub_32A48(13);
  char v20 = *v19;
  if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
  {
    buf.int mSelector = 136315394;
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_AirPlay_Aspen.cpp";
    __int16 v45 = 1024;
    int v46 = 128;
    _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"AirPlay audio device has no output streams.\"", (uint8_t *)&buf, 0x12u);
  }
  __int16 v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v21, "AirPlay audio device has no output streams.");
}

void sub_446EFC(_Unwind_Exception *a1)
{
  sub_72924(v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_44708C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_4470B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F588;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_447104(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_447124(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v14 = (os_log_t *)sub_32A48(13);
    CFComparisonResult v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v22);
      uint64_t v16 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v27 = "Device_AirPlay_Aspen.cpp";
      __int16 v28 = 1024;
      int v29 = 99;
      __int16 v30 = 2080;
      int v31 = (const char *)v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (!a6)
  {
    char v18 = (os_log_t *)sub_32A48(13);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v22);
      char v20 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v27 = "Device_AirPlay_Aspen.cpp";
      __int16 v28 = 1024;
      int v29 = 100;
      __int16 v30 = 2080;
      int v31 = "outData";
      __int16 v32 = 2080;
      int v33 = v20;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v21 = &off_6414D8;
    void v21[2] = 561211770;
  }
  if (a2->mSelector == 1064725619)
  {
    *a6 = 0.0;
    char v12 = (os_log_t *)sub_32A48(17);
    int v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v27 = "Device_AirPlay_Aspen.cpp";
        __int16 v28 = 1024;
        int v29 = 106;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d KnowableVolumeLevels is 0", buf, 0x12u);
      }
    }
  }
  else
  {
    sub_432AE8(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sub_4474C8(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      unint64_t v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v22 = "Device_AirPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 83;
      __int16 v25 = 2080;
      char v26 = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v13 = (os_log_t *)sub_32A48(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      CFComparisonResult v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v22 = "Device_AirPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 84;
      __int16 v25 = 2080;
      char v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      __int16 v30 = a4;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v16 = &off_6414D8;
    v16[2] = 561211770;
  }
  if (a2->mSelector == 1064725619) {
    return 4;
  }

  return sub_433254(a1, a2, a3, a4);
}

BOOL sub_4477FC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1064725619 && sub_43356C(a1, a2);
}

BOOL sub_44781C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1064725619) {
    return a2->mScope == 1869968496;
  }
  sub_50848((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

void sub_447884(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_4478C0(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_433710(a1, a2, a3, a3, 0) = &off_63F3A0;
  v10.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v11 = a2;
  *(void *)&v10.int mSelector = 0x676C6F6261707074;
  unint64_t v5 = sub_26DAC(&v11, &v10, 0, 0);
  if (v5 || !v6)
  {
    int v8 = v5;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v8;
  }
  *(_DWORD *)(a1 + 492) = HIDWORD(v5);
  sub_436AD8(a1, 0, 0x6F757470u, 0);
  return a1;
}

void sub_4479B4(_Unwind_Exception *a1)
{
  sub_43456C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4479CC(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_447A48;
  v2[3] = &unk_63F5B0;
  v2[4] = *(void *)(a1 + 32);
  return sub_61CCC((uint64_t)v2);
}

void sub_447A48(uint64_t a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    AudioObjectPropertyAddress v10 = (os_log_t *)sub_32A48(13);
    AudioObjectID v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v45 = 1024;
      int v46 = 47;
      __int16 v47 = 2080;
      char v48 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-trim-gains-1", 20, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v3;
  if (!v3)
  {
    int v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_1534E8(cf, CFProperty);
  if (!cf[0])
  {
    int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  sub_16E0A8(&v42, cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v3);
  IOObjectRelease(v2);
  unint64_t v5 = v42;
  if (v42 == v43)
  {
    CFTypeRef v39 = 0;
  }
  else
  {
    sub_36F1B0((CFArrayRef *)&v39, v42, v43);
    uint64_t v6 = sub_32A48(17);
    if (*(unsigned char *)(v6 + 8))
    {
      __n128 v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v8 = CFCopyDescription(v39);
          sub_20B40((uint64_t)cf, v8);
          if (v8) {
            CFRelease(v8);
          }
          uint64_t v9 = cf;
          if (v41 < 0) {
            uint64_t v9 = (CFTypeRef *)cf[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
          __int16 v45 = 1024;
          int v46 = 285;
          __int16 v47 = 2080;
          char v48 = "IODeviceTree:/product/audio";
          __int16 v49 = 2080;
          char v50 = "speaker-trim-gains-1";
          __int16 v51 = 2080;
          char v52 = v9;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
          if (v41 < 0) {
            operator delete((void *)cf[0]);
          }
        }
      }
    }
  }
  if (v5) {
    operator delete(v5);
  }
  io_registry_entry_t v15 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v15)
  {
    __int16 v23 = (os_log_t *)sub_32A48(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v45 = 1024;
      int v46 = 47;
      __int16 v47 = 2080;
      char v48 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    __int16 v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-trim-gains-0", 20, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v16;
  if (!v16)
  {
    char v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
  }
  CFTypeRef v17 = IORegistryEntryCreateCFProperty(v15, v16, kCFAllocatorDefault, 0);
  sub_1534E8(cf, v17);
  if (!cf[0])
  {
    __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
  }
  sub_16E0A8(&v42, cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v16);
  IOObjectRelease(v15);
  char v18 = v42;
  if (v42 == v43)
  {
    CFTypeRef v38 = 0;
  }
  else
  {
    sub_36F1B0((CFArrayRef *)&v38, v42, v43);
    uint64_t v19 = sub_32A48(17);
    if (*(unsigned char *)(v19 + 8))
    {
      char v20 = *(NSObject **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v21 = CFCopyDescription(v38);
          sub_20B40((uint64_t)cf, v21);
          if (v21) {
            CFRelease(v21);
          }
          uint64_t v22 = cf;
          if (v41 < 0) {
            uint64_t v22 = (CFTypeRef *)cf[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
          __int16 v45 = 1024;
          int v46 = 285;
          __int16 v47 = 2080;
          char v48 = "IODeviceTree:/product/audio";
          __int16 v49 = 2080;
          char v50 = "speaker-trim-gains-0";
          __int16 v51 = 2080;
          char v52 = v22;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
          if (v41 < 0) {
            operator delete((void *)cf[0]);
          }
        }
      }
    }
  }
  if (v18) {
    operator delete(v18);
  }
  sub_36F964((CFArrayRef *)buf, (const __CFArray **)&v39, (const __CFArray **)&v38);
  if (v38) {
    CFRelease(v38);
  }
  if (v39) {
    CFRelease(v39);
  }
  qword_668E60 = *(void *)buf;
  uint64_t v28 = *(void *)(a1 + 32);
  __int16 v29 = *(const void **)v28;
  uint64_t v30 = *(void *)(v28 + 8);
  if (*(void *)v28 != v30)
  {
    int v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
    sub_46B38(&v35, v29, v30, (v30 - (uint64_t)v29) >> 2);
    int v31 = (const void *)qword_668E60;
    if (qword_668E60) {
      CFRetain((CFTypeRef)qword_668E60);
    }
    CFTypeRef v34 = v31;
    __int16 v32 = v35;
    sub_448500((CFArrayRef *)buf, v35, v36, (CFArrayRef *)&v34);
    int v33 = (const void *)qword_668E60;
    qword_668E60 = *(void *)buf;
    *(void *)AudioObjectPropertyAddress buf = v33;
    if (v33) {
      CFRelease(v33);
    }
    if (v34) {
      CFRelease(v34);
    }
    if (v32) {
      operator delete(v32);
    }
  }
}

void sub_448488()
{
  sub_63908(&v0);
  JUMPOUT(0x4484F8);
}

void sub_448490()
{
  __cxa_end_catch();
  sub_63908(&v0);
  JUMPOUT(0x4484F8);
}

void sub_4484AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_63908(&a9);
  if (v9) {
    JUMPOUT(0x4484C0);
  }
  _Unwind_Resume(a1);
}

void sub_4484CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_4484DC(_Unwind_Exception *a1)
{
}

void sub_4484E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_63908((const void **)va);
  JUMPOUT(0x4484F0);
}

void sub_448500(CFArrayRef *a1, int *a2, int *a3, CFArrayRef *a4)
{
  if (*a4)
  {
    unint64_t v5 = a2;
    long long v66 = 0uLL;
    for (unint64_t i = 0; v5 != a3; ++v5)
    {
      int v6 = *v5;
      LOBYTE(cf) = 0;
      unsigned __int8 v65 = 0;
      CFArrayRef v7 = *a4;
      if (!*a4) {
        goto LABEL_31;
      }
      CFIndex Count = CFArrayGetCount(*a4);
      CFIndex v9 = Count;
      CFArrayRef v10 = *a4;
      if (*a4)
      {
        CFIndex v11 = CFArrayGetCount(*a4);
        if (!v9) {
          goto LABEL_31;
        }
      }
      else
      {
        CFIndex v11 = 0;
        if (!Count) {
          goto LABEL_31;
        }
      }
      unint64_t v12 = 0;
      while (v7 != v10 || v11 != v12)
      {
        sub_36FD1C(valuePtr, v7, v12);
        if (!*(void *)valuePtr)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        CFNumberRef v13 = (const __CFNumber *)sub_7E324(*(const __CFDictionary **)valuePtr, "trim_gain_data_source_id");
        if (v13)
        {
          CFNumberRef v14 = sub_22314(v13);
          if ((unint64_t)v14 >> 32 && v6 == v14)
          {
            if (v65)
            {
              CFTypeRef v16 = cf;
              CFTypeRef cf = *(CFTypeRef *)valuePtr;
              if (*(void *)valuePtr) {
                CFRetain(*(CFTypeRef *)valuePtr);
              }
              if (v16) {
                CFRelease(v16);
              }
            }
            else
            {
              CFTypeRef v17 = *(const void **)valuePtr;
              if (*(void *)valuePtr) {
                CFRetain(*(CFTypeRef *)valuePtr);
              }
              CFTypeRef cf = v17;
              unsigned __int8 v65 = 1;
            }
            if (*(void *)valuePtr) {
              CFRelease(*(CFTypeRef *)valuePtr);
            }
            break;
          }
        }
        if (*(void *)valuePtr) {
          CFRelease(*(CFTypeRef *)valuePtr);
        }
        if (v9 == ++v12) {
          break;
        }
      }
LABEL_31:
      CFTypeRef v61 = CFStringCreateWithBytes(0, (const UInt8 *)"trim_gain_data_source_id", 24, 0x8000100u, 0);
      if (!v61)
      {
        __int16 v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, "Could not construct");
      }
      *(_DWORD *)int valuePtr = v6;
      CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
      CFNumberRef v60 = v18;
      if (!v18)
      {
        char v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v50, "Could not construct");
      }
      sub_36F904(__p, v61, (const void **)&v60);
      CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"trim_gain_db", 12, 0x8000100u, 0);
      CFTypeRef v59 = v19;
      if (!v19)
      {
        __int16 v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
      }
      int v20 = v65;
      if (v65)
      {
        if (!cf)
        {
          char v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
        }
        CFNumberRef v21 = (const __CFNumber *)sub_7E430((const __CFDictionary *)cf, "trim_gain_db");
        if (!v21) {
          goto LABEL_86;
        }
        CFNumberRef v22 = v21;
        CFRetain(v21);
        CFTypeID v23 = CFGetTypeID(v22);
        if (v23 != CFNumberGetTypeID())
        {
          CFRelease(v22);
LABEL_86:
          LOBYTE(v56) = 0;
          char v57 = 0;
          sub_7F218();
        }
        char v57 = 1;
        CFNumberRef v58 = v22;
        uint64_t v56 = 0;
      }
      else
      {
        *(void *)int valuePtr = 0;
        CFNumberRef v22 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
        CFNumberRef v58 = v22;
        if (!v22)
        {
          int v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
        }
      }
      sub_36F904(v69, v19, (const void **)&v58);
      v62[0] = __p;
      v62[1] = 2;
      CFDictionaryRef v24 = sub_4D3D8((uint64_t)v62);
      CFDictionaryRef v25 = v24;
      CFDictionaryRef v63 = v24;
      char v26 = (void *)*((void *)&v66 + 1);
      if (*((void *)&v66 + 1) >= i)
      {
        __int16 v27 = (void *)v66;
        uint64_t v28 = (uint64_t)(*((void *)&v66 + 1) - v66) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v30 = i - v66;
        if ((uint64_t)(i - v66) >> 2 > v29) {
          unint64_t v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        p_unint64_t i = &i;
        if (v31)
        {
          unint64_t v31 = (unint64_t)sub_106EC(v31);
          char v26 = (void *)*((void *)&v66 + 1);
          __int16 v27 = (void *)v66;
        }
        else
        {
          uint64_t v32 = 0;
        }
        int v33 = (CFDictionaryRef *)(v31 + 8 * v28);
        unint64_t v34 = v31 + 8 * v32;
        *(void *)&valuePtr[24] = v34;
        *int v33 = v25;
        uint64_t v35 = v33 + 1;
        CFDictionaryRef v63 = 0;
        *(void *)&valuePtr[16] = v33 + 1;
        if (v26 == v27)
        {
          CFDictionaryRef v37 = 0;
        }
        else
        {
          do
          {
            CFDictionaryRef v36 = (const __CFDictionary *)*--v26;
            *--int v33 = v36;
            void *v26 = 0;
          }
          while (v26 != v27);
          uint64_t v35 = *(void **)&valuePtr[16];
          unint64_t v34 = *(void *)&valuePtr[24];
          CFDictionaryRef v37 = v63;
        }
        long long v38 = v66;
        *(void *)&long long v66 = v33;
        *((void *)&v66 + 1) = v35;
        *(_OWORD *)&valuePtr[8] = v38;
        unint64_t v39 = i;
        unint64_t i = v34;
        *(void *)&valuePtr[24] = v39;
        *(void *)int valuePtr = v38;
        sub_A78F0((uint64_t)valuePtr);
        *((void *)&v66 + 1) = v35;
        if (v37) {
          CFRelease(v37);
        }
      }
      else
      {
        **((void **)&v66 + 1) = v24;
        CFDictionaryRef v63 = 0;
        *((void *)&v66 + 1) = v26 + 1;
      }
      for (uint64_t j = 0; j != -4; j -= 2)
      {
        char v41 = (const void *)v69[j + 1];
        if (v41) {
          CFRelease(v41);
        }
        long long v42 = __p[j + 2];
        if (v42) {
          CFRelease(v42);
        }
      }
      CFRelease(v22);
      if (v20) {
        sub_15EF88((uint64_t)&v56);
      }
      if (v59) {
        CFRelease(v59);
      }
      CFRelease(v18);
      if (v61) {
        CFRelease(v61);
      }
      sub_7E2E8((uint64_t)&cf);
    }
    CFArrayRef v43 = sub_36F86C((uint64_t **)&v66);
    *a1 = v43;
    char v44 = (os_log_t *)sub_32A48(13);
    __int16 v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v46 = CFCopyDescription(v43);
      sub_20B40((uint64_t)__p, v46);
      if (v46) {
        CFRelease(v46);
      }
      __int16 v47 = __p;
      if (v69[0] < 0) {
        __int16 v47 = (void **)__p[0];
      }
      *(_DWORD *)int valuePtr = 136315650;
      *(void *)&int valuePtr[4] = "FDRUtils.cpp";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 55;
      *(_WORD *)&valuePtr[18] = 2080;
      *(void *)&valuePtr[20] = v47;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR Sorted TrimGains ArrayRef: %s", valuePtr, 0x1Cu);
      if (SHIBYTE(v69[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    *(void *)int valuePtr = &v66;
    sub_A7940((void ***)valuePtr);
  }
  else
  {
    *a1 = 0;
    *a4 = 0;
  }
}

void sub_448BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,CFTypeRef cf,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_448DAC(id a1)
{
}

void sub_448DC4(id a1)
{
  io_registry_entry_t v1 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v1)
  {
    CFIndex v9 = (os_log_t *)sub_32A48(13);
    CFArrayRef v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v20 = "EDTUtilsImpl.h";
      __int16 v21 = 1024;
      int v22 = 47;
      __int16 v23 = 2080;
      CFDictionaryRef v24 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v2 = CFStringCreateWithBytes(0, (const UInt8 *)"filler-key-string-no-receiver-trim-gain-written", 47, 0x8000100u, 0);
  if (!v2)
  {
    unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v1, v2, kCFAllocatorDefault, 0);
  sub_1534E8(cf, CFProperty);
  if (!cf[0])
  {
    CFNumberRef v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  sub_16E0A8(&v17, cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v2);
  IOObjectRelease(v1);
  uint64_t v4 = v17;
  if (v17 == v18)
  {
    CFTypeRef v14 = 0;
  }
  else
  {
    sub_36F1B0((CFArrayRef *)&v14, v17, v18);
    uint64_t v5 = sub_32A48(17);
    if (*(unsigned char *)(v5 + 8))
    {
      int v6 = *(NSObject **)v5;
      if (*(void *)v5)
      {
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v7 = CFCopyDescription(v14);
          sub_20B40((uint64_t)cf, v7);
          if (v7) {
            CFRelease(v7);
          }
          CFStringRef v8 = cf;
          if (v16 < 0) {
            CFStringRef v8 = (CFTypeRef *)cf[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          int v20 = "FDRDataImpl.cpp";
          __int16 v21 = 1024;
          int v22 = 285;
          __int16 v23 = 2080;
          CFDictionaryRef v24 = "IODeviceTree:/product/audio";
          __int16 v25 = 2080;
          char v26 = "filler-key-string-no-receiver-trim-gain-written";
          __int16 v27 = 2080;
          uint64_t v28 = v8;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
          if (v16 < 0) {
            operator delete((void *)cf[0]);
          }
        }
      }
    }
  }
  if (v4) {
    operator delete(v4);
  }
  qword_668E78 = (uint64_t)v14;
}

void sub_4492EC()
{
}

void sub_4492F4()
{
}

uint64_t sub_449304(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_449380;
  v2[3] = &unk_63F670;
  v2[4] = *(void *)(a1 + 32);
  return sub_61CCC((uint64_t)v2);
}

void sub_449380(uint64_t a1)
{
  if (sub_2099D4())
  {
    io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v2)
    {
      CFNumberRef v18 = (os_log_t *)sub_32A48(13);
      CFStringRef v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        int v76 = "IODeviceTree:/product/audio";
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }
    CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"mic-trim-gains", 14, 0x8000100u, 0);
    if (!v3)
    {
      CFDictionaryRef v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
    }
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
    sub_1534E8(cf, CFProperty);
    if (!cf[0])
    {
      char v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Could not construct");
    }
    sub_16E0A8(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v3);
    IOObjectRelease(v2);
    CFArrayRef v5 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v67 = 0;
    }
    else
    {
      sub_36F1B0((CFArrayRef *)&v67, v70, v71);
      uint64_t v6 = sub_32A48(17);
      if (*(unsigned char *)(v6 + 8))
      {
        CFStringRef v7 = *(NSObject **)v6;
        if (*(void *)v6)
        {
          if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v8 = CFCopyDescription(v67);
            sub_20B40((uint64_t)cf, v8);
            if (v8) {
              CFRelease(v8);
            }
            CFIndex v9 = cf;
            if (v69 < 0) {
              CFIndex v9 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            int v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            int v78 = "mic-trim-gains";
            __int16 v79 = 2080;
            int v80 = v9;
            _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }
    if (v5) {
      operator delete(v5);
    }
    char v54 = (unsigned __int8 *)v67;
  }
  else
  {
    io_registry_entry_t v10 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v10)
    {
      __int16 v21 = (os_log_t *)sub_32A48(13);
      int v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        int v76 = "IODeviceTree:/product/audio";
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
      }
      __int16 v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v23, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }
    CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"mic-trim-gains-2", 16, 0x8000100u, 0);
    *(void *)AudioObjectPropertyAddress buf = v11;
    if (!v11)
    {
      __int16 v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Could not construct");
    }
    CFTypeRef v12 = IORegistryEntryCreateCFProperty(v10, v11, kCFAllocatorDefault, 0);
    sub_1534E8(cf, v12);
    if (!cf[0])
    {
      __int16 v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Could not construct");
    }
    sub_16E0A8(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v11);
    IOObjectRelease(v10);
    CFArrayRef v13 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v67 = 0;
    }
    else
    {
      sub_36F1B0((CFArrayRef *)&v67, v70, v71);
      uint64_t v14 = sub_32A48(17);
      if (*(unsigned char *)(v14 + 8))
      {
        io_registry_entry_t v15 = *(NSObject **)v14;
        if (*(void *)v14)
        {
          if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v16 = CFCopyDescription(v67);
            sub_20B40((uint64_t)cf, v16);
            if (v16) {
              CFRelease(v16);
            }
            CFTypeRef v17 = cf;
            if (v69 < 0) {
              CFTypeRef v17 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            int v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            int v78 = "mic-trim-gains-2";
            __int16 v79 = 2080;
            int v80 = v17;
            _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }
    if (v13) {
      operator delete(v13);
    }
    io_registry_entry_t v28 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v28)
    {
      CFDictionaryRef v36 = (os_log_t *)sub_32A48(13);
      CFDictionaryRef v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        int v76 = "IODeviceTree:/product/audio";
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
      }
      long long v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v38, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }
    CFStringRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"mic-trim-gains-1", 16, 0x8000100u, 0);
    *(void *)AudioObjectPropertyAddress buf = v29;
    if (!v29)
    {
      unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
    }
    CFTypeRef v30 = IORegistryEntryCreateCFProperty(v28, v29, kCFAllocatorDefault, 0);
    sub_1534E8(cf, v30);
    if (!cf[0])
    {
      uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }
    sub_16E0A8(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v29);
    IOObjectRelease(v28);
    CFArrayRef v31 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v66 = 0;
    }
    else
    {
      sub_36F1B0((CFArrayRef *)&v66, v70, v71);
      uint64_t v32 = sub_32A48(17);
      if (*(unsigned char *)(v32 + 8))
      {
        int v33 = *(NSObject **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v34 = CFCopyDescription(v66);
            sub_20B40((uint64_t)cf, v34);
            if (v34) {
              CFRelease(v34);
            }
            uint64_t v35 = cf;
            if (v69 < 0) {
              uint64_t v35 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            int v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            int v78 = "mic-trim-gains-1";
            __int16 v79 = 2080;
            int v80 = v35;
            _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }
    if (v31) {
      operator delete(v31);
    }
    io_registry_entry_t v41 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v41)
    {
      __int16 v49 = (os_log_t *)sub_32A48(13);
      char v50 = *v49;
      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v73 = 1024;
        int v74 = 47;
        __int16 v75 = 2080;
        int v76 = "IODeviceTree:/product/audio";
        _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
      }
      __int16 v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v51, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }
    CFStringRef v42 = CFStringCreateWithBytes(0, (const UInt8 *)"mic-trim-gains-0", 16, 0x8000100u, 0);
    *(void *)AudioObjectPropertyAddress buf = v42;
    if (!v42)
    {
      char v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v52, "Could not construct");
    }
    CFTypeRef v43 = IORegistryEntryCreateCFProperty(v41, v42, kCFAllocatorDefault, 0);
    sub_1534E8(cf, v43);
    if (!cf[0])
    {
      int v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v53, "Could not construct");
    }
    sub_16E0A8(&v70, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v42);
    IOObjectRelease(v41);
    CFArrayRef v44 = (CFArrayRef)v70;
    if (v70 == v71)
    {
      CFTypeRef v65 = 0;
    }
    else
    {
      sub_36F1B0((CFArrayRef *)&v65, v70, v71);
      uint64_t v45 = sub_32A48(17);
      if (*(unsigned char *)(v45 + 8))
      {
        CFStringRef v46 = *(NSObject **)v45;
        if (*(void *)v45)
        {
          if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v47 = CFCopyDescription(v65);
            sub_20B40((uint64_t)cf, v47);
            if (v47) {
              CFRelease(v47);
            }
            char v48 = cf;
            if (v69 < 0) {
              char v48 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v73 = 1024;
            int v74 = 285;
            __int16 v75 = 2080;
            int v76 = "IODeviceTree:/product/audio";
            __int16 v77 = 2080;
            int v78 = "mic-trim-gains-0";
            __int16 v79 = 2080;
            int v80 = v48;
            _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
            if (v69 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }
    if (v44) {
      operator delete(v44);
    }
    sub_36F964((CFArrayRef *)buf, (const __CFArray **)&v66, (const __CFArray **)&v65);
    sub_36F964((CFArrayRef *)&v70, (const __CFArray **)&v67, (const __CFArray **)buf);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    if (v65) {
      CFRelease(v65);
    }
    if (v66) {
      CFRelease(v66);
    }
    if (v67) {
      CFRelease(v67);
    }
    char v54 = v70;
  }
  qword_668E90 = (uint64_t)v54;
  uint64_t v55 = *(void *)(a1 + 32);
  uint64_t v56 = *(const void **)v55;
  uint64_t v57 = *(void *)(v55 + 8);
  if (*(void *)v55 != v57)
  {
    CFDictionaryRef v63 = 0;
    uint64_t v64 = 0;
    char v62 = 0;
    sub_46B38(&v62, v56, v57, (v57 - (uint64_t)v56) >> 2);
    CFNumberRef v58 = (const void *)qword_668E90;
    if (qword_668E90) {
      CFRetain((CFTypeRef)qword_668E90);
    }
    CFTypeRef v61 = v58;
    CFTypeRef v59 = v62;
    sub_448500((CFArrayRef *)buf, v62, v63, (CFArrayRef *)&v61);
    CFNumberRef v60 = (const void *)qword_668E90;
    qword_668E90 = *(void *)buf;
    *(void *)AudioObjectPropertyAddress buf = v60;
    if (v60) {
      CFRelease(v60);
    }
    if (v61) {
      CFRelease(v61);
    }
    if (v59) {
      operator delete(v59);
    }
  }
}

void sub_44A794()
{
}

void sub_44A7AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_44A7C4(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_63908((const void **)va);
  if (v1) {
    JUMPOUT(0x44A7D8);
  }
  JUMPOUT(0x44A7B4);
}

void sub_44A7E0()
{
}

void sub_44A7E8(uint64_t *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_668EB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_668EB0))
  {
    __cxa_guard_release(&qword_668EB0);
  }
  if (qword_668EB8 != -1) {
    dispatch_once(&qword_668EB8, &stru_63F6D0);
  }
  uint64_t v2 = qword_668EA8;
  if (qword_668EA8) {
    CFRetain((CFTypeRef)qword_668EA8);
  }
  *a1 = v2;
}

void sub_44A87C(id a1)
{
}

void sub_44A894(id a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D1B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D1B8))
  {
    byte_64D1B0 = MGGetSInt32Answer() == 3;
    __cxa_guard_release(&qword_64D1B8);
  }
  if (byte_64D1B0)
  {
    io_registry_entry_t v1 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
    if (!v1)
    {
      io_registry_entry_t v10 = (os_log_t *)sub_32A48(13);
      CFStringRef v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
        __int16 v21 = 1024;
        int v22 = 47;
        __int16 v23 = 2080;
        CFDictionaryRef v24 = "IODeviceTree:/product/audio";
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
    }
    CFStringRef v2 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-thiele-small", 20, 0x8000100u, 0);
    if (!v2)
    {
      CFArrayRef v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
    }
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v1, v2, kCFAllocatorDefault, 0);
    sub_1534E8(cf, CFProperty);
    if (!cf[0])
    {
      uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
    }
    sub_16E0A8(&v18, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v2);
    IOObjectRelease(v1);
    uint64_t v4 = v18;
    if (v18 == v19)
    {
      CFTypeRef v15 = 0;
    }
    else
    {
      sub_372444((CFArrayRef *)&v15, v18, v19);
      uint64_t v5 = sub_32A48(17);
      if (*(unsigned char *)(v5 + 8))
      {
        uint64_t v6 = *(NSObject **)v5;
        if (*(void *)v5)
        {
          if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v7 = CFCopyDescription(v15);
            sub_20B40((uint64_t)cf, v7);
            if (v7) {
              CFRelease(v7);
            }
            CFStringRef v8 = cf;
            if (v17 < 0) {
              CFStringRef v8 = (CFTypeRef *)cf[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            __int16 v21 = 1024;
            int v22 = 285;
            __int16 v23 = 2080;
            CFDictionaryRef v24 = "IODeviceTree:/product/audio";
            __int16 v25 = 2080;
            char v26 = "speaker-thiele-small";
            __int16 v27 = 2080;
            io_registry_entry_t v28 = v8;
            _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
            if (v17 < 0) {
              operator delete((void *)cf[0]);
            }
          }
        }
      }
    }
    if (v4) {
      operator delete(v4);
    }
    CFTypeRef v9 = v15;
  }
  else
  {
    sub_36FE1C((CFArrayRef *)buf);
    CFTypeRef v9 = *(CFTypeRef *)buf;
  }
  qword_668EA8 = (uint64_t)v9;
}

void sub_44AE30(_Unwind_Exception *a1)
{
}

void sub_44AE4C(uint64_t *a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_668EC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a2;
    int v5 = __cxa_guard_acquire(&qword_668EC8);
    a2 = v4;
    if (v5)
    {
      __cxa_guard_release(&qword_668EC8);
      a2 = v4;
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_44AF38;
  block[3] = &unk_63F750;
  block[4] = a2;
  if (qword_668ED0 != -1) {
    dispatch_once(&qword_668ED0, block);
  }
  uint64_t v3 = qword_668EC0;
  if (qword_668EC0) {
    CFRetain((CFTypeRef)qword_668EC0);
  }
  *a1 = v3;
}

uint64_t sub_44AF38(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_44AFB4;
  v2[3] = &unk_63F730;
  v2[4] = *(void *)(a1 + 32);
  return sub_61CCC((uint64_t)v2);
}

void sub_44AFB4(uint64_t a1)
{
  io_registry_entry_t v1 = *(void **)(a1 + 32);
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    long long v38 = (os_log_t *)sub_32A48(13);
    unint64_t v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 47;
      __int16 v75 = 2080;
      *(void *)int v76 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-eq-0", 12, 0x8000100u, 0);
  if (!v3)
  {
    io_registry_entry_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_1534E8(&valuePtr, CFProperty);
  if (!valuePtr)
  {
    uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Could not construct");
  }
  sub_16E0A8(&v58, valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFRelease(v3);
  IOObjectRelease(v2);
  int v5 = v58;
  sub_373284(&v51, v58, v59);
  if (v5) {
    operator delete(v5);
  }
  io_registry_entry_t v6 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v6)
  {
    CFStringRef v42 = (os_log_t *)sub_32A48(13);
    CFTypeRef v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 47;
      __int16 v75 = 2080;
      *(void *)int v76 = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    CFArrayRef v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v44, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-eq-1", 12, 0x8000100u, 0);
  if (!v7)
  {
    CFStringRef v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
  }
  CFTypeRef v8 = IORegistryEntryCreateCFProperty(v6, v7, kCFAllocatorDefault, 0);
  sub_1534E8(&valuePtr, v8);
  if (!valuePtr)
  {
    CFStringRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
  }
  sub_16E0A8(&v58, valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFRelease(v7);
  IOObjectRelease(v6);
  CFTypeRef v9 = v58;
  sub_373284(&v50, v58, v59);
  if (v9) {
    operator delete(v9);
  }
  memset(v66, 0, sizeof(v66));
  uint64_t v10 = (uint64_t)(v1[1] - *v1) >> 2;
  uint64_t v64 = 1;
  unint64_t v65 = v10;
  char v63 = 0;
  CFNumberRef v58 = v66;
  CFTypeRef v59 = &v64;
  CFNumberRef v60 = &v65;
  CFTypeRef v61 = v1;
  char v62 = &v63;
  sub_373A18((uint64_t)&v58, (unsigned int *)v51.i64[0], (unsigned int *)v51.i64[1]);
  sub_373A18((uint64_t)&v58, (unsigned int *)v50.i64[0], (unsigned int *)v50.i64[1]);
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  uint64_t v55 = &v56;
  if (v65)
  {
    for (unint64_t i = 1; i <= v65; ++i)
    {
      sub_21C8C(&v54, "ch");
      std::to_string(&v53, i);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFTypeRef v12 = &v53;
      }
      else {
        CFTypeRef v12 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v53.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::string::append(&v54, (const std::string::value_type *)v12, size);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      std::string::size_type v69 = v14->__r_.__value_.__r.__words[2];
      long long v68 = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      sub_22210((CFStringRef *)buf, "Mute");
      *(void *)&_DWORD buf[8] = kCFBooleanFalse;
      sub_22210((CFStringRef *)&buf[16], "PhaseFlip");
      *(void *)&v76[4] = kCFBooleanFalse;
      v52[0] = (void **)buf;
      v52[1] = (void **)(&def_1E50E8 + 2);
      CFDictionaryRef v16 = sub_4D3D8((uint64_t)v52);
      char v17 = sub_15DF8((uint64_t)&v55, &v67, (void **)&v68);
      if (*v17)
      {
        if (v16) {
          CFRelease(v16);
        }
      }
      else
      {
        CFNumberRef v18 = v17;
        CFStringRef v19 = operator new(0x40uLL);
        char v71 = &v56;
        v19[2] = v68;
        std::string::size_type v20 = v69;
        long long v68 = 0uLL;
        std::string::size_type v69 = 0;
        *((void *)v19 + 6) = v20;
        *((void *)v19 + 7) = v16;
        LOBYTE(v72) = 1;
        uint64_t v21 = v67;
        *(void *)CFStringRef v19 = 0;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = v21;
        *CFNumberRef v18 = v19;
        if (*v55)
        {
          uint64_t v55 = (uint64_t **)*v55;
          CFStringRef v19 = (_OWORD *)*v18;
        }
        sub_46D00(v56, (uint64_t *)v19);
        ++v57;
        CFStringRef valuePtr = 0;
        sub_37437C((uint64_t)&valuePtr);
      }
      for (uint64_t j = 0; j != -32; j -= 16)
      {
        __int16 v23 = *(const void **)&v76[j + 4];
        if (v23) {
          CFRelease(v23);
        }
        CFDictionaryRef v24 = *(const void **)&buf[j + 16];
        if (v24) {
          CFRelease(v24);
        }
      }
      if (SHIBYTE(v69) < 0) {
        operator delete((void *)v68);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_22210((CFStringRef *)buf, "Filters");
  *(void *)&_DWORD buf[8] = sub_36F86C(v66);
  sub_22210((CFStringRef *)&buf[16], "QVersion");
  LODWORD(valuePtr) = 1;
  *(void *)&v76[4] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!*(void *)&v76[4])
  {
    char v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
  }
  long long v68 = 0uLL;
  std::string::size_type v69 = 0;
  sub_162D4(&v68, v57);
  __int16 v25 = v55;
  if (v55 != &v56)
  {
    do
    {
      sub_374178(&v68, (const UInt8 *)v25 + 32, (const void **)v25 + 7);
      char v26 = v25[1];
      if (v26)
      {
        do
        {
          __int16 v27 = (uint64_t **)v26;
          char v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          __int16 v27 = (uint64_t **)v25[2];
          BOOL v28 = *v27 == (uint64_t *)v25;
          __int16 v25 = v27;
        }
        while (!v28);
      }
      __int16 v25 = v27;
    }
    while (v27 != &v56);
  }
  CFDictionaryRef v29 = sub_4D69C((void ***)&v68);
  v52[0] = (void **)&v68;
  sub_14F84(v52);
  sub_22210(&valuePtr, "Channels");
  if (v29) {
    CFRetain(v29);
  }
  char v71 = (uint64_t **)v29;
  sub_22210(&v72, "InputGain");
  LODWORD(v68) = 0;
  if (!CFNumberCreate(0, kCFNumberIntType, &v68))
  {
    __int16 v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
  }
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&valuePtr;
  v53.__r_.__value_.__l.__size_ = 2;
  CFDictionaryRef v30 = sub_4D3D8((uint64_t)&v53);
  sub_22210(&v77, "Global");
  if (v30) {
    CFRetain(v30);
  }
  v78[0] = v30;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v54.__r_.__value_.__l.__size_ = 3;
  CFDictionaryRef v31 = sub_4D3D8((uint64_t)&v54);
  for (uint64_t k = 0; k != -6; k -= 2)
  {
    int v33 = (const void *)v78[k];
    if (v33) {
      CFRelease(v33);
    }
    CFStringRef v34 = (const void *)v78[k - 1];
    if (v34) {
      CFRelease(v34);
    }
  }
  if (v30) {
    CFRelease(v30);
  }
  for (uint64_t m = 0; m != -32; m -= 16)
  {
    CFDictionaryRef v36 = *(const void **)&buf[m - 8];
    if (v36) {
      CFRelease(v36);
    }
    CFDictionaryRef v37 = *(CFStringRef *)((char *)&v72 + m);
    if (v37) {
      CFRelease(v37);
    }
  }
  if (v29) {
    CFRelease(v29);
  }
  sub_3740CC(v56);
  *(void *)AudioObjectPropertyAddress buf = v66;
  sub_A7940((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v50;
  sub_373928((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v51;
  sub_373928((void ***)buf);
  qword_668EC0 = (uint64_t)v31;
}

void sub_44B8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  __cxa_free_exception(v41);
  if (a2 == 1)
  {
    CFStringRef v46 = __cxa_begin_catch(a1);
    CFStringRef v47 = (os_log_t *)sub_32A48(17);
    char v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = (*(uint64_t (**)(void *))(*(void *)v46 + 16))(v46);
      *(_DWORD *)(v43 - 160) = 136316162;
      uint64_t v50 = v43 - 224;
      *(void *)(v50 + 68) = "EDTUtilsImpl.h";
      *(_WORD *)(v43 - 148) = 1024;
      *(_DWORD *)(v50 + 78) = 74;
      *(_WORD *)(v43 - 142) = 2080;
      *(void *)(v50 + 84) = v49;
      *(_WORD *)(v43 - 132) = 2080;
      *(void *)(v50 + 94) = v42;
      *(_WORD *)(v43 - 122) = 2080;
      *(void *)(v43 - 120) = "speaker-eq-1";
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)(v43 - 160),
        0x30u);
    }
    __cxa_end_catch();
    JUMPOUT(0x44B148);
  }
  *(void *)(v43 - 160) = &a13;
  sub_373928((void ***)(v43 - 160));
  _Unwind_Resume(a1);
}

void sub_44BF78(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 664);
  if (!v3)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      CFTypeRef v8 = "Device_Receiver_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 921;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No valid support policy present\"", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No valid support policy present");
  }

  sub_3901F4(v3, a2, a3);
}

void sub_44C088(_Unwind_Exception *exception_object)
{
}

uint64_t sub_44C0A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 144);
  if (v4 == 1886545251)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v8 = 0;
    uint64_t result = sub_44C15C(result, 3, (uint64_t)&v8);
    if (!result) {
      return result;
    }
    int v5 = operator new(4uLL);
    int v6 = v8;
    goto LABEL_7;
  }
  if (v4 == 1886613611)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v7 = 0;
    uint64_t result = sub_44C15C(result, 4, (uint64_t)&v7);
    if (!result) {
      return result;
    }
    int v5 = operator new(4uLL);
    int v6 = v7;
LABEL_7:
    *a3 = v5;
    *int v5 = v6;
    uint64_t result = (uint64_t)(v5 + 1);
    a3[1] = result;
    a3[2] = result;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t sub_44C15C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v8 = 0x6F75747061747363;
  int v9 = a2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v8);
  if (v5)
  {
    int v7 = 4;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, uint64_t))(*(void *)a1 + 40))(a1, &v8, 0, 0, &v7, a3);
  }
  return v5;
}

void *sub_44C218@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1886549104) {
    goto LABEL_16;
  }
  if (a2 != 1886216809)
  {
    uint64_t v9 = result[83];
    if (v9)
    {
      return sub_3921D0(a3, v9, a2);
    }
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  uint64_t v4 = *(void *)(result[84] + 24);
  if (!v4)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    CFStringRef v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      __int32 v13 = 136315394;
      uint64_t v14 = "Device_Receiver_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 930;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: \"No default sub-port specified for built-in mic.\"", (uint8_t *)&v13, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
  }
  uint64_t v5 = *(__int32 **)(v4 + 32);
  int v6 = *(__int32 **)(v4 + 40);
  if ((unint64_t)((char *)v6 - (char *)v5) >= 0x41 && v5 != v6)
  {
    uint64_t v8 = v5;
    while (v8[8] != 1869442665)
    {
      v8 += 16;
      if (v8 == v6) {
        goto LABEL_18;
      }
    }
    uint64_t v5 = v8;
  }
LABEL_18:
  __int32 v13 = *v5;
  return sub_72300(a3, &v13, 1);
}

void sub_44C3E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_44C404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_32A48(17);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 16);
        sub_19D4F8(&__p, *(void *)(a2 + 8), a2);
        int v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v14 = "Device_Receiver_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 911;
        __int16 v17 = 2048;
        uint64_t v18 = v6;
        __int16 v19 = 2080;
        std::string::size_type v20 = v7;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inPortList (%zu): %s.", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  BOOL v8 = sub_24AA28(1886154613, a2);
  BOOL v9 = v8;
  if (v8)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    CFStringRef v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v14 = "Device_Receiver_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 914;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected lineout port\"", buf, 0x12u);
      }
    }
  }
  *(unsigned char *)(a1 + 656) = v9;
}

uint64_t sub_44C5B8(uint64_t a1, signed int a2)
{
  if (a2 > 1886545250)
  {
    switch(a2)
    {
      case 1886545251:
        return 3;
      case 1886613611:
        return 4;
      case 1886680175:
        return 1;
      default:
        goto LABEL_13;
    }
  }
  else
  {
    if (a2 != 1885888867)
    {
      if (a2 != 1885892727)
      {
        if (a2 == 1886154613) {
          return 2;
        }
LABEL_13:
        uint64_t v3 = (os_log_t *)sub_32A48(17);
        uint64_t v4 = *v3;
        if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, a2);
          uint64_t v5 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v14 = "Device_Receiver_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 895;
          __int16 v17 = 2080;
          uint64_t v18 = v5;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v6 = (os_log_t *)sub_32A48(13);
        int v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, a2);
          if (v12 >= 0) {
            BOOL v8 = __p;
          }
          else {
            BOOL v8 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v14 = "Device_Receiver_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 896;
          __int16 v17 = 2080;
          uint64_t v18 = v8;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType: %s.\"", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
      }
      return 1;
    }
    return 5;
  }
}

void sub_44C82C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_44C848()
{
  if (sub_20A008()) {
    return 0;
  }
  io_registry_entry_t v1 = (void *)sub_F820C();
  CFStringRef v3 = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_F832C(v1, &v3);
  sub_72924((uint64_t)&v3);
  return v0;
}

void sub_44C8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_44C8DC(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  v8[0] = 1;
  *(void *)&v8[1] = 0x6F7574706D757465;
  _DWORD v8[3] = 1;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v8[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48))(a1, &v8[1], 0, 0, 4, v8);
  }
  _DWORD v8[3] = 2;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v8[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48))(a1, &v8[1], 0, 0, 4, v8);
  }
  _DWORD v8[3] = 3;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v8[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48))(a1, &v8[1], 0, 0, 4, v8);
  }
  _DWORD v8[3] = 4;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v8[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48))(a1, &v8[1], 0, 0, 4, v8);
  }
  int v6 = 4;
  float v7 = 0.0;
  strcpy((char *)&v8[1], "dlovptuo");
  BYTE1(v8[3]) = 0;
  HIWORD(v8[3]) = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v8[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, int *, float *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                         + 40))(a1, &v8[1], 0, 0, &v6, &v7);
    float v2 = v7;
    if (v7 != 0.0)
    {
      float v7 = 0.0;
      (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, float *, float))(*(void *)&a1->_os_unfair_lock_opaque + 48))(a1, &v8[1], 0, 0, 4, &v7, v2);
    }
  }
  BYTE1(v8[3]) = 0;
  HIWORD(v8[3]) = 0;
  strcpy((char *)v8, "Ms2icrscbolg");
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v8[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48))(a1, &v8[1], 0, 0, 4, v8);
  }
  *(void *)&inAddress.int mSelector = 0x6F7574706A61636BLL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v3 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
  if (AudioObjectHasProperty(v3, &inAddress))
  {
    AudioObjectID v4 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
    sub_44F5BC(v4, 1u);
    operator new();
  }
  AudioObjectID v5 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
  sub_44F5BC(v5, 3u);
  operator new();
}

void sub_44E500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  __cxa_free_exception(v57);
  _Unwind_Resume(a1);
}

void sub_44E9A8(os_unfair_lock_s *a1)
{
  float v2 = operator new(4uLL);
  *(void *)std::string __p = v2;
  _DWORD *v2 = 1885888867;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(&__p[24], "cwdv");
  __p[32] = 0;
  LODWORD(v47) = 3;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v48 = (uint64_t *)&v49;
  int v51 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C(v44, (uint64_t)a1, (uint64_t)__p);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v49);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v45 >= 2)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    std::string::size_type v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)&v41, a1 + 2);
      uint64_t v21 = (__val & 0x8000000000000000) == 0 ? &v41 : (void **)v41;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Receiver_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 1372;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&__p[20] = v21;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Encountered more than one Hearing Aid Compliance port in device %s\"", __p, 0x1Cu);
      if (SHIBYTE(__val) < 0) {
        operator delete(v41);
      }
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Encountered more than one Hearing Aid Compliance port in device %s");
  }
  if (v45)
  {
    sub_43F38(&v39, (uint64_t *)(v44[1] + 16), "", 1376);
    uint64_t v3 = v39;
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 152))(v39);
    (*(void (**)(uint64_t))(*(void *)v3 + 544))(v3);
    if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)v3 + 152))(v3))
    {
      AudioObjectID v5 = operator new(4uLL);
      *AudioObjectID v5 = 1886545251;
      *(void *)std::string __p = v5;
      *(void *)&__p[8] = v5 + 1;
      *(void *)&__p[16] = v5 + 1;
      strcpy(&__p[24], "cwdv");
      __p[32] = 0;
      LODWORD(v47) = 3;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      char v48 = (uint64_t *)&v49;
      int v51 = 44739242;
      CFTypeRef cf = 0;
      sub_43637C((uint64_t *)&v41, (uint64_t)a1, (uint64_t)__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0(v49);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      if (__val != 1)
      {
        __int16 v23 = (os_log_t *)sub_32A48(13);
        CFDictionaryRef v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          std::to_string(&v38, __val);
          int v25 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
          std::string::size_type v26 = v38.__r_.__value_.__r.__words[0];
          sub_4F64((uint64_t)&v35, a1 + 2);
          __int16 v27 = &v38;
          if (v25 < 0) {
            __int16 v27 = (std::string *)v26;
          }
          if (v37 >= 0) {
            BOOL v28 = &v35;
          }
          else {
            BOOL v28 = v35;
          }
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "Device_Receiver_Aspen.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 1390;
          *(_WORD *)&unsigned char __p[18] = 2080;
          *(void *)&__p[20] = v27;
          *(_WORD *)&__p[28] = 2080;
          *(void *)&__p[30] = v28;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered %s receiver ports in device %s (expected 1)\"", __p, 0x26u);
          if (SHIBYTE(v37) < 0) {
            operator delete(v35);
          }
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
        }
        CFDictionaryRef v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v29, "Encountered %s receiver ports in device %s (expected 1)");
      }
      sub_43F38((uint64_t *)__p, (uint64_t *)(v42 + 16), "", 1396);
      if (v4) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = 1919443299;
      }
      (*(void (**)(void, uint64_t))(**(void **)__p + 104))(*(void *)__p, v6);
      if (*(void *)&__p[8]) {
        sub_4636C(*(std::__shared_weak_count **)&__p[8]);
      }
      uint64_t v33 = v3;
      CFStringRef v34 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1A2D0C((uint64_t *)&v35, &v33);
      *(_DWORD *)std::string __p = 1852011125;
      *(void *)&__p[8] = &__p[8];
      *(void *)&__p[16] = &__p[8];
      *(void *)&__p[24] = 0;
      uint64_t v7 = v37;
      if (v37)
      {
        BOOL v9 = (void **)v35;
        BOOL v8 = v36;
        uint64_t v10 = *v36;
        *(void *)(v10 + 8) = *((void *)v35 + 1);
        *v9[1] = v10;
        uint64_t v11 = *(void *)&__p[8];
        *(void *)(*(void *)&__p[8] + 8) = v8;
        *BOOL v8 = v11;
        *(void *)&__p[8] = v9;
        v9[1] = &__p[8];
        *(void *)&__p[24] = v7;
        uint64_t v37 = 0;
      }
      sub_1A2D0C(&v30, (uint64_t *)(v42 + 16));
      *(_DWORD *)&__p[32] = 1886418288;
      uint64_t v47 = (uint64_t)&v47;
      char v48 = &v47;
      uint64_t v49 = 0;
      char v12 = v32;
      if (v32)
      {
        uint64_t v14 = v30;
        __int32 v13 = v31;
        uint64_t v15 = *v31;
        *(void *)(v15 + 8) = *(void *)(v30 + 8);
        **(void **)(v14 + 8) = v15;
        uint64_t v16 = v47;
        *(void *)(v47 + 8) = v13;
        *__int32 v13 = v16;
        uint64_t v47 = v14;
        *(void *)(v14 + 8) = &v47;
        uint64_t v49 = v12;
        uint64_t v32 = 0;
      }
      sub_FB3C0((uint64_t)&v38, (unsigned int *)__p, 2);
      for (uint64_t i = 40; i != -24; i -= 32)
        sub_8108((uint64_t *)&__p[i]);
      sub_8108(&v30);
      sub_8108((uint64_t *)&v35);
      if (v34) {
        std::__shared_weak_count::__release_weak(v34);
      }
      uint64_t v18 = (_DWORD *)sub_10FBF0();
      sub_110B44(v18, &v38, 0);
      sub_FB43C((void *)v38.__r_.__value_.__l.__size_);
      sub_8108((uint64_t *)&v41);
    }
    if (v40) {
      sub_4636C(v40);
    }
  }
  sub_8108(v44);
}

void sub_44EFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_8108(&a26);
  if (a25) {
    sub_4636C(a25);
  }
  sub_8108(&a29);
  _Unwind_Resume(a1);
}

void sub_44F11C(os_unfair_lock_s *a1)
{
  if (!a1)
  {
    float v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        AudioObjectID v5 = "Device_Receiver_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 1361;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"SystemSettingsManager passed clientData as NULL.\"", (uint8_t *)&v4, 0x12u);
      }
    }
  }
  sub_44E9A8(a1);
}

uint64_t sub_44F1EC(uint64_t a1)
{
  *(void *)&inAddress.int mSelector = 0x6F7574706A61636BLL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669030, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_669030))
  {
    AudioObjectID v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    byte_669028 = AudioObjectHasProperty(v2, &inAddress) != 0;
    __cxa_guard_release(&qword_669030);
  }
  return byte_669028;
}

void sub_44F2A0(_Unwind_Exception *a1)
{
}

BOOL sub_44F2B8(uint64_t a1)
{
  if (sub_8B774()) {
    return 0;
  }
  *(void *)&v6.int mSelector = 0x696E70746A61636BLL;
  v6.AudioObjectPropertyElement mElement = 0;
  uint64_t v3 = &dword_669000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669040, memory_order_acquire) & 1) == 0)
  {
    int v4 = __cxa_guard_acquire(&qword_669040);
    uint64_t v3 = &dword_669000;
    if (v4)
    {
      AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      byte_669038 = AudioObjectHasProperty(v5, &v6) == 1;
      __cxa_guard_release(&qword_669040);
      uint64_t v3 = &dword_669000;
    }
  }
  return *((unsigned char *)v3 + 56) != 0;
}

void sub_44F388(_Unwind_Exception *a1)
{
}

uint64_t sub_44F3A0(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_669050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_669050))
  {
    BOOL v2 = sub_44F1EC(a1) && sub_44F2B8(a1) && MGGetSInt32Answer() == 1;
    byte_669048 = v2;
    __cxa_guard_release(&qword_669050);
  }
  return byte_669048;
}

void sub_44F444(_Unwind_Exception *a1)
{
}

BOOL sub_44F45C()
{
  uint64_t v0 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 40))(v0) == 543711587;
}

void sub_44F4B0(uint64_t a1, void *a2)
{
  *a2 = off_63FA28;
}

void *sub_44F4D0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_63FA28;
  return result;
}

void sub_44F508()
{
}

uint64_t sub_44F524(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_44F548(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_44F59C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double sub_44F5BC(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  if (!a1)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      inAddress.int mSelector = 136315394;
      *(void *)&inAddress.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 97;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&inAddress, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  double outData = 0.0;
  double v15 = 0.0;
  *(void *)&inAddress.int mSelector = 0x6F75747076646223;
  inAddress.AudioObjectPropertyElement mElement = a2;
  UInt32 ioDataSize = 16;
  if (AudioObjectHasProperty(a1, &inAddress)) {
    AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  }
  switch(a2)
  {
    case 1u:
      double v8 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v8 = v15;
      }
      double v15 = v8;
      double v6 = -76.0;
      goto LABEL_14;
    case 2u:
      double v9 = v15;
      if (v15 > 0.0) {
        double v9 = 0.0;
      }
      double v15 = v9;
      double result = -58.0;
      if (outData >= -58.0) {
        double result = outData;
      }
      break;
    case 3u:
    case 5u:
      double v4 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v4 = v15;
      }
      double v15 = v4;
      double v6 = -58.0;
LABEL_14:
      double result = v6;
      if (v5 >= v6) {
        double result = v5;
      }
      break;
    case 4u:
      double result = outData;
      if (outData < -58.0) {
        double result = -58.0;
      }
      break;
    default:
      double result = outData;
      break;
  }
  return result;
}

void sub_44F7BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_44F7EC(uint64_t a1, double a2)
{
  double v19 = a2;
  uint64_t v4 = sub_42FD90(a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  uint64_t v17 = 0x676C6F62616F7372;
  int v18 = 0;
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = v5;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v17))
    {
      uint64_t v8 = sub_32A48(17);
      uint64_t v9 = sub_32A48(36);
      char v10 = 0;
      uint64_t v11 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1;
        if (v14) {
          goto LABEL_13;
        }
      }
      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_13:
      double v15 = *(NSObject **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 837;
        __int16 v23 = 2048;
        double v24 = a2;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informing AOP of Codec sample rate %f Hz", buf, 0x1Cu);
      }
      (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, double *))(*(void *)v7 + 48))(v7, &v17, 0, 0, 8, &v19);
    }
  }
  return v4;
}

void sub_44F9F0(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v2 + 56))(v2, sub_44F11C);

  sub_430D98(a1);
}

BOOL sub_44FA5C(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_668F58 && a2->mElement == dword_668F60
    || *(void *)&a2->mSelector == qword_668F68 && a2->mElement == dword_668F70
    || *(void *)&a2->mSelector == qword_668F78 && a2->mElement == dword_668F80)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    uint64_t v12 = a3;
    sub_1A4260((void *)(a1 + 512), (unsigned int *)&v14, (uint64_t)&v10);
    return 1;
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
}

BOOL sub_44FBA4(void *a1, uint64_t a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void **)a2;
      int v14 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v13);
      AudioObjectPropertyElement v11 = v17 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)std::string::size_type v20 = 681;
      *(_WORD *)&v20[4] = 2080;
      *(void *)&v20[6] = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (*(void *)a2 == qword_668F58 && *(_DWORD *)(a2 + 8) == dword_668F60
    || *(void *)a2 == qword_668F68 && *(_DWORD *)(a2 + 8) == dword_668F70
    || *(void *)a2 == qword_668F78 && *(_DWORD *)(a2 + 8) == dword_668F80)
  {
    std::string __p = *(void **)a2;
    int v16 = *(_DWORD *)(a2 + 8);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = *(_DWORD *)(a2 + 8);
    *(void *)&void v20[2] = a3;
    *(void *)&v20[10] = a4;
    sub_1A4AA0(a1 + 64, (unsigned int *)&__p, (uint64_t)buf);
    return 1;
  }
  else
  {
    return sub_431F5C((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4);
  }
}

void sub_44FE70(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    __int16 v79 = (os_log_t *)sub_32A48(13);
    int v80 = *v79;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      char v81 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 560;
      __int16 v145 = 2080;
      *(void *)char v146 = v81;
      _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)&buf, 0x1Cu);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v83 = (os_log_t *)sub_32A48(13);
    int v84 = *v83;
    if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      char v85 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 561;
      __int16 v145 = 2080;
      *(void *)char v146 = v85;
      *(_WORD *)&v146[8] = 1024;
      *(_DWORD *)&v146[10] = a3;
      *(_WORD *)&v146[14] = 2048;
      *(void *)&v146[16] = a4;
      _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    int v86 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v86 = &off_6414D8;
    v86[2] = 561211770;
  }
  if (!a6)
  {
    char v87 = (os_log_t *)sub_32A48(13);
    int v88 = *v87;
    if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      char v89 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 562;
      __int16 v145 = 2080;
      *(void *)char v146 = "inData";
      *(_WORD *)&v146[8] = 2080;
      *(void *)&v146[10] = v89;
      _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)&buf, 0x26u);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    int v90 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v90 = &off_6414D8;
    v90[2] = 561211770;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1685483629)
  {
    switch(v12)
    {
      case 1162046576:
        unsigned int v18 = *a6;
        __int16 v19 = (os_log_t *)sub_32A48(17);
        std::string::size_type v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          __int16 v143 = 1024;
          int v144 = 583;
          __int16 v145 = 1024;
          *(_DWORD *)char v146 = v18;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set DevicePropertyCodecLowPowerModeEnable = %u.", (uint8_t *)&buf, 0x18u);
        }
        break;
      case 1162701936:
        unsigned int v23 = *a6;
        double v24 = (os_log_t *)sub_32A48(17);
        int v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          __int16 v143 = 1024;
          int v144 = 595;
          __int16 v145 = 1024;
          *(_DWORD *)char v146 = v23;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set DevicePropertyMicrophoneLowPowerModeEnable = %u.", (uint8_t *)&buf, 0x18u);
        }
        break;
      case 1634759542:
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          char v105 = (os_log_t *)sub_32A48(13);
          char v106 = *v105;
          if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
          {
            v152.__cv_.__uint64_t sig = *(void *)a2;
            *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
            int v107 = v153.__m_.__opaque[15];
            uint64_t sig = v153.__m_.__sig;
            int v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            char v110 = &v153;
            buf.int mSelector = 136316162;
            *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
            if (v107 < 0) {
              char v110 = (std::mutex *)sig;
            }
            __int16 v143 = 1024;
            int v144 = 568;
            __int16 v145 = 2080;
            *(void *)char v146 = v110;
            *(_WORD *)&v146[8] = 1024;
            *(_DWORD *)&v146[10] = a5;
            *(_WORD *)&v146[14] = 1024;
            *(_DWORD *)&v146[16] = v109;
            _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              (uint8_t *)&buf,
              0x28u);
            if (v153.__m_.__opaque[15] < 0) {
              operator delete((void *)v153.__m_.__sig);
            }
          }
          char v111 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v111 = &off_6414D8;
          v111[2] = 561211770;
        }
        AudioObjectPropertyScope v14 = *(_DWORD *)(a2 + 4);
        buf.int mSelector = 1987013732;
        buf.AudioObjectPropertyScope mScope = v14;
        buf.AudioObjectPropertyElement mElement = 0;
        (*(void (**)(uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, &buf, a3, a4, a5, a6);
        return;
      default:
LABEL_43:
        sub_4321A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
        return;
    }
    sub_4321A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
    return;
  }
  if (v12 > 1836414052)
  {
    if (v12 == 1836414053)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
      {
        char v98 = (os_log_t *)sub_32A48(13);
        int v99 = *v98;
        if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
        {
          v152.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
          int v100 = v153.__m_.__opaque[15];
          uint64_t v101 = v153.__m_.__sig;
          int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          int v103 = &v153;
          buf.int mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          if (v100 < 0) {
            int v103 = (std::mutex *)v101;
          }
          __int16 v143 = 1024;
          int v144 = 625;
          __int16 v145 = 2080;
          *(void *)char v146 = v103;
          *(_WORD *)&v146[8] = 1024;
          *(_DWORD *)&v146[10] = a5;
          *(_WORD *)&v146[14] = 1024;
          *(_DWORD *)&v146[16] = v102;
          _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v153.__m_.__opaque[15] < 0) {
            operator delete((void *)v153.__m_.__sig);
          }
        }
        char v104 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v104 = &off_6414D8;
        v104[2] = 561211770;
      }
      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v21 = sub_23EE78();
        BOOL v22 = *a6 != 0;
        sub_24063C(v21, v22);
        return;
      }
    }
    else if (v12 == 1987013732)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
      {
        char v112 = (os_log_t *)sub_32A48(13);
        char v113 = *v112;
        if (*v112 && os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
        {
          v152.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
          int v114 = v153.__m_.__opaque[15];
          uint64_t v115 = v153.__m_.__sig;
          int v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          char v117 = &v153;
          buf.int mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
          if (v114 < 0) {
            char v117 = (std::mutex *)v115;
          }
          __int16 v143 = 1024;
          int v144 = 601;
          __int16 v145 = 2080;
          *(void *)char v146 = v117;
          *(_WORD *)&v146[8] = 1024;
          *(_DWORD *)&v146[10] = a5;
          *(_WORD *)&v146[14] = 1024;
          *(_DWORD *)&v146[16] = v116;
          _os_log_impl(&def_1E50E8, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v153.__m_.__opaque[15] < 0) {
            operator delete((void *)v153.__m_.__sig);
          }
        }
        char v118 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v118 = &off_6414D8;
        v118[2] = 561211770;
      }
      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v15 = sub_23EE78();
        if (sub_23FC74(v15))
        {
          float v16 = (float)(*(float *)a6 + 100.0) / 100.0;
          uint64_t v17 = sub_23EE78();
          sub_240048(v17, v16);
          if (sub_1A1BE4((void *)(a1 + 512), (uint64_t)&qword_668F58)) {
            sub_1A1D20((void *)(a1 + 512), (unsigned int *)&qword_668F58);
          }
          if (sub_1A1BE4((void *)(a1 + 512), (uint64_t)&qword_668F68))
          {
            sub_1A1D20((void *)(a1 + 512), (unsigned int *)&qword_668F68);
          }
        }
        return;
      }
    }
    goto LABEL_43;
  }
  if (v12 == 1685483630)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      char v91 = (os_log_t *)sub_32A48(13);
      int v92 = *v91;
      if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
      {
        v152.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
        int v93 = v153.__m_.__opaque[15];
        uint64_t v94 = v153.__m_.__sig;
        int v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        AudioObjectID v96 = &v153;
        buf.int mSelector = 136316162;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
        if (v93 < 0) {
          AudioObjectID v96 = (std::mutex *)v94;
        }
        __int16 v143 = 1024;
        int v144 = 637;
        __int16 v145 = 2080;
        *(void *)char v146 = v96;
        *(_WORD *)&v146[8] = 1024;
        *(_DWORD *)&v146[10] = a5;
        *(_WORD *)&v146[14] = 1024;
        *(_DWORD *)&v146[16] = v95;
        _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          (uint8_t *)&buf,
          0x28u);
        if (v153.__m_.__opaque[15] < 0) {
          operator delete((void *)v153.__m_.__sig);
        }
      }
      int v97 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v97 = &off_6414D8;
      v97[2] = 561211770;
    }
    *(unsigned char *)(a1 + 684) = *a6 != 0;
    return;
  }
  if (v12 != 1768255076) {
    goto LABEL_43;
  }
  if (__PAIR64__(*(_DWORD *)(a2 + 4), 1768255076) != qword_668F88 || *(_DWORD *)(a2 + 8) != dword_668F90)
  {
    std::string::size_type v26 = (os_log_t *)sub_32A48(17);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      buf.int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 663;
      BOOL v28 = "%25s:%-5d Unknown property address using selector kAppleEmbeddedAudio_DevicePropertyInputEnableDevice. Ignoring.";
      CFDictionaryRef v29 = v27;
      os_log_type_t v30 = OS_LOG_TYPE_ERROR;
      uint32_t v31 = 18;
LABEL_53:
      _os_log_impl(&def_1E50E8, v29, v30, v28, (uint8_t *)&buf, v31);
      return;
    }
    return;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
  {
    char v119 = (os_log_t *)sub_32A48(13);
    char v120 = *v119;
    if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      int v121 = v153.__m_.__opaque[15];
      uint64_t v122 = v153.__m_.__sig;
      int v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
      char v124 = &v153;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
      if (v121 < 0) {
        char v124 = (std::mutex *)v122;
      }
      __int16 v143 = 1024;
      int v144 = 644;
      __int16 v145 = 2080;
      *(void *)char v146 = v124;
      *(_WORD *)&v146[8] = 1024;
      *(_DWORD *)&v146[10] = a5;
      *(_WORD *)&v146[14] = 1024;
      *(_DWORD *)&v146[16] = v123;
      _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        (uint8_t *)&buf,
        0x28u);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    char v125 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v125 = &off_6414D8;
    v125[2] = 561211770;
  }
  unsigned int v13 = *a6;
  if (v13)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(a1 + 688), 1u)) {
      return;
    }
  }
  else
  {
    if (!atomic_load((unsigned int *)(a1 + 688)))
    {
      char v126 = (os_log_t *)sub_32A48(13);
      char v127 = *v126;
      if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
        __int16 v143 = 1024;
        int v144 = 648;
        _os_log_impl(&def_1E50E8, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Attempt to power off the built-in mic when mMicPowerOnCount is 0.\"", (uint8_t *)&buf, 0x12u);
      }
      char v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v128, "Attempt to power off the built-in mic when mMicPowerOnCount is 0.");
    }
    if (atomic_fetch_add((atomic_uint *volatile)(a1 + 688), 0xFFFFFFFF) != 1) {
      return;
    }
  }
  uint64_t v33 = (os_log_t *)sub_32A48(17);
  CFStringRef v34 = *v33;
  if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_INFO))
  {
    uint64_t v35 = "dis";
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Receiver_Aspen.cpp";
    buf.int mSelector = 136315650;
    if (v13) {
      uint64_t v35 = "en";
    }
    __int16 v143 = 1024;
    int v144 = 654;
    __int16 v145 = 2080;
    *(void *)char v146 = v35;
    _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_INFO, "%25s:%-5d Non-redundant requesting to %sable microphone power. Calling the HAL.", (uint8_t *)&buf, 0x1Cu);
  }
  AudioObjectID v36 = *(_DWORD *)(a1 + 268);
  int inData = v13 != 0;
  uint64_t v37 = sub_32A48(13);
  if (*(unsigned char *)(v37 + 8))
  {
    std::string v38 = *(NSObject **)v37;
    if (*(void *)v37)
    {
      if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        v152.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
        uint64_t v39 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v143 = 1024;
        int v144 = 166;
        __int16 v145 = 2080;
        *(void *)char v146 = v39;
        *(_WORD *)&v146[8] = 1024;
        *(_DWORD *)&v146[10] = v36;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v153.__m_.__opaque[15] < 0) {
          operator delete((void *)v153.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v137 = v36;
  uint64_t v138 = *(void *)a2;
  int v139 = *(_DWORD *)(a2 + 8);
  int v140 = a3;
  char v141 = a4;
  unint64_t v40 = sub_451910((uint64_t)&v137);
  if (HIDWORD(v40)) {
    BOOL v41 = 0;
  }
  else {
    BOOL v41 = inData == v40;
  }
  int v42 = v41;
  uint64_t v43 = sub_32A48(13);
  uint64_t v44 = *(void *)(v43 + 8);
  if (v42)
  {
    if (v44)
    {
      os_log_t v45 = *(os_log_t *)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v143 = 1024;
          int v144 = 191;
          __int16 v145 = 1024;
          *(_DWORD *)char v146 = v36;
          BOOL v28 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitiv"
                "e for a notification on id %u.";
LABEL_81:
          CFDictionaryRef v29 = v45;
          os_log_type_t v30 = OS_LOG_TYPE_DEBUG;
          uint32_t v31 = 24;
          goto LABEL_53;
        }
      }
    }
    return;
  }
  if (v44)
  {
    CFStringRef v46 = *(NSObject **)v43;
    if (*(void *)v43)
    {
      if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
      {
        v152.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
        uint64_t v47 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v143 = 1024;
        int v144 = 199;
        __int16 v145 = 2080;
        *(void *)char v146 = v47;
        *(_WORD *)&v146[8] = 1024;
        *(_DWORD *)&v146[10] = v36;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v153.__m_.__opaque[15] < 0) {
          operator delete((void *)v153.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  OSStatus v48 = AudioObjectSetPropertyData(v36, &buf, a3, a4, 4u, &inData);
  if (v48)
  {
    uint64_t v49 = (os_log_t *)sub_32A48(13);
    uint64_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v153, v48);
      int v51 = v153.__m_.__opaque[15];
      uint64_t v52 = v153.__m_.__sig;
      uint64_t inClientData = *(void *)a2;
      int v135 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v152, (unsigned int *)&inClientData);
      std::string v53 = &v153;
      if (v51 < 0) {
        std::string v53 = (std::mutex *)v52;
      }
      if (v152.__cv_.__opaque[15] >= 0) {
        uint64_t v54 = (uint64_t)&v152;
      }
      else {
        uint64_t v54 = v152.__cv_.__sig;
      }
      buf.int mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v143 = 1024;
      int v144 = 207;
      __int16 v145 = 1024;
      *(_DWORD *)char v146 = v48;
      *(_WORD *)&v146[4] = 2080;
      *(void *)&v146[6] = v53;
      *(_WORD *)&v146[14] = 2080;
      *(void *)&v146[16] = v54;
      *(_WORD *)&v146[24] = 1024;
      *(_DWORD *)&v146[26] = v36;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (v152.__cv_.__opaque[15] < 0) {
        operator delete((void *)v152.__cv_.__sig);
      }
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    return;
  }
  unint64_t v55 = sub_451910((uint64_t)&v137);
  if (HIDWORD(v55) || inData != v55)
  {
    memset(v153.__m_.__opaque, 0, sizeof(v153.__m_.__opaque));
    v152.__cv_.__uint64_t sig = 1018212795;
    memset(v152.__cv_.__opaque, 0, sizeof(v152.__cv_.__opaque));
    v153.__m_.__uint64_t sig = 850045863;
    char v136 = 0;
    sub_662FC(&inClientData, v36, (AudioObjectPropertyAddress *)a2, (uint64_t)&v152, (uint64_t)&v153, (uint64_t)&v136);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v60.__d_.__rep_) / -1000)
    {
      unint64_t v58 = sub_451910((uint64_t)&v137);
      int v59 = v58;
      if (HIDWORD(v58)) {
        goto LABEL_153;
      }
      if (inData == v58) {
        break;
      }
      if (i <= 0)
      {
        int v76 = (os_log_t *)sub_32A48(13);
        os_log_t v77 = *v76;
        if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
        {
          uint64_t v130 = *(void *)a2;
          int v131 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v130);
          if (v133 >= 0) {
            p_luint64_t k = &__lk;
          }
          else {
            p_luint64_t k = __lk.__m_;
          }
          buf.int mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v143 = 1024;
          int v144 = 248;
          __int16 v145 = 2080;
          *(void *)char v146 = "set";
          *(_WORD *)&v146[8] = 2080;
          *(void *)&v146[10] = p_lk;
          *(_WORD *)&v146[18] = 2080;
          *(void *)&v146[20] = "set";
          *(_WORD *)&v146[28] = 1024;
          BOOL v147 = inData == v59;
          __int16 v148 = 1024;
          int v149 = 0;
          __int16 v150 = 1024;
          AudioObjectID v151 = v36;
          CFStringRef v72 = "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.";
          __int16 v73 = v77;
          os_log_type_t v74 = OS_LOG_TYPE_ERROR;
          uint32_t v75 = 66;
LABEL_151:
          _os_log_impl(&def_1E50E8, v73, v74, v72, (uint8_t *)&buf, v75);
          if (v133 < 0) {
            operator delete(__lk.__m_);
          }
        }
        goto LABEL_153;
      }
      v60.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v61 = sub_32A48(13);
      if (*(unsigned char *)(v61 + 8))
      {
        char v62 = *(NSObject **)v61;
        if (*(void *)v61)
        {
          if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
          {
            buf.int mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v143 = 1024;
            int v144 = 257;
            __int16 v145 = 2080;
            *(void *)char v146 = "with timeout";
            *(_WORD *)&v146[8] = 1024;
            *(_DWORD *)&v146[10] = v36;
            _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.int mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v153;
      __lk.__owns_ = 1;
      std::mutex::lock(&v153);
      v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v136)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v63.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v64 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_117;
          }
          v65.__d_.__rep_ = v64 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v65.__d_.__rep_ >= 1) {
            break;
          }
LABEL_135:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v64 || v136) {
            goto LABEL_117;
          }
        }
        std::chrono::steady_clock::now();
        v66.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v66.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0;
          goto LABEL_131;
        }
        if (v66.__d_.__rep_ < 1)
        {
          if ((unint64_t)v66.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_130;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v66.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_131;
          }
LABEL_130:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 1000 * v66.__d_.__rep_;
LABEL_131:
          if (v67 > (v65.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v68.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_134:
            std::condition_variable::__do_timed_wait(&v152, &__lk, v68);
            std::chrono::steady_clock::now();
            goto LABEL_135;
          }
        }
        v68.__d_.__rep_ = v67 + v65.__d_.__rep_;
        goto LABEL_134;
      }
LABEL_117:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v69 = sub_32A48(13);
    if (*(unsigned char *)(v69 + 8))
    {
      os_log_t v70 = *(os_log_t *)v69;
      if (*(void *)v69)
      {
        if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v130 = *(void *)a2;
          int v131 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v130);
          if (v133 >= 0) {
            uint64_t m = &__lk;
          }
          else {
            uint64_t m = __lk.__m_;
          }
          buf.int mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v143 = 1024;
          int v144 = 288;
          __int16 v145 = 2080;
          *(void *)char v146 = m;
          *(_WORD *)&v146[8] = 1024;
          *(_DWORD *)&v146[10] = v36;
          CFStringRef v72 = "%25s:%-5d Successfully synchronized the property %s on id %u.";
          __int16 v73 = v70;
          os_log_type_t v74 = OS_LOG_TYPE_DEBUG;
          uint32_t v75 = 34;
          goto LABEL_151;
        }
      }
    }
LABEL_153:
    sub_6651C((uint64_t)&inClientData);
    std::condition_variable::~condition_variable(&v152);
    std::mutex::~mutex(&v153);
    return;
  }
  uint64_t v56 = sub_32A48(13);
  if (*(unsigned char *)(v56 + 8))
  {
    os_log_t v45 = *(os_log_t *)v56;
    if (*(void *)v56)
    {
      if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
      {
        buf.int mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v143 = 1024;
        int v144 = 219;
        __int16 v145 = 1024;
        *(_DWORD *)char v146 = v36;
        BOOL v28 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive "
              "for a notification on id %u.";
        goto LABEL_81;
      }
    }
  }
}

void sub_451868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v36 - 184));
  _Unwind_Resume(a1);
}

unint64_t sub_451910(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.int mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_26DAC((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        AudioObjectPropertyElement v11 = v20;
        if (v9 < 0) {
          AudioObjectPropertyElement v11 = v10;
        }
        if (v19 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.int mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        BOOL v28 = v11;
        __int16 v29 = 2080;
        os_log_type_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_451ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_451AE0(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    AudioObjectID v32 = (os_log_t *)sub_32A48(13);
    uint64_t v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
      CFStringRef v34 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 449;
      __int16 v107 = 2080;
      char v108 = (const char *)v34;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v36 = (os_log_t *)sub_32A48(13);
    uint64_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
      std::string v38 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 450;
      __int16 v107 = 2080;
      char v108 = (const char *)v38;
      __int16 v109 = 1024;
      LODWORD(v110[0]) = a3;
      WORD2(v110[0]) = 2048;
      *(void *)((char *)v110 + 6) = a4;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    uint64_t v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v39 = &off_6414D8;
    v39[2] = 561211770;
  }
  if (!a6)
  {
    unint64_t v40 = (os_log_t *)sub_32A48(13);
    BOOL v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
      int v42 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 451;
      __int16 v107 = 2080;
      char v108 = "outData";
      __int16 v109 = 2080;
      v110[0] = v42;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    uint64_t v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v43 = &off_6414D8;
    void v43[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector <= 1986290210)
    {
      if (mSelector == 1836414053)
      {
        UInt32 v26 = *a5;
        if (v26 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          uint64_t v52 = (os_log_t *)sub_32A48(13);
          std::string v53 = *v52;
          if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
            int v54 = v103;
            unint64_t v55 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v56 = *a5;
            int v57 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            p_p = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            if (v54 < 0) {
              p_p = v55;
            }
            __int16 v105 = 1024;
            int v106 = 513;
            __int16 v107 = 2080;
            char v108 = (const char *)p_p;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v56;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v57;
            _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }
          int v59 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v59 = &off_6414D8;
          v59[2] = 561211770;
        }
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        __int16 v27 = (unsigned __int8 *)sub_23EE78();
        int v17 = sub_2404BC(v27);
      }
      else
      {
        if (mSelector != 1986229104) {
          goto LABEL_49;
        }
        UInt32 v15 = *a5;
        if (v15 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          int v76 = (os_log_t *)sub_32A48(13);
          os_log_t v77 = *v76;
          if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
            int v78 = v103;
            __int16 v79 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v80 = *a5;
            int v81 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            int v82 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            if (v78 < 0) {
              int v82 = v79;
            }
            __int16 v105 = 1024;
            int v106 = 525;
            __int16 v107 = 2080;
            char v108 = (const char *)v82;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v80;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v81;
            _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }
          char v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v83 = &off_6414D8;
          v83[2] = 561211770;
        }
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        uint64_t v16 = sub_23EE78();
        int v17 = sub_23FC74(v16);
      }
      *(_DWORD *)a6 = v17;
      return;
    }
    if (mSelector == 1986290211)
    {
      UInt32 v31 = *a5;
      if (v31 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        std::chrono::system_clock::time_point v60 = (os_log_t *)sub_32A48(13);
        uint64_t v61 = *v60;
        if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
          int v62 = v103;
          std::chrono::steady_clock::time_point v63 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v64 = *a5;
          int v65 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          std::chrono::system_clock::time_point v66 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
          if (v62 < 0) {
            std::chrono::system_clock::time_point v66 = v63;
          }
          __int16 v105 = 1024;
          int v106 = 500;
          __int16 v107 = 2080;
          char v108 = (const char *)v66;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v64;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v65;
          _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = &off_6414D8;
        v67[2] = 561211770;
      }
      if (a2->mElement == 6 && a2->mScope == 1869968496)
      {
        *(_OWORD *)a6 = xmmword_4E7920;
        return;
      }
    }
    else if (mSelector == 1987013732)
    {
      UInt32 v22 = *a5;
      if (v22 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        int v92 = (os_log_t *)sub_32A48(13);
        int v93 = *v92;
        if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
          int v94 = v103;
          int v95 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v96 = *a5;
          int v97 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          char v98 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
          if (v94 < 0) {
            char v98 = v95;
          }
          __int16 v105 = 1024;
          int v106 = 487;
          __int16 v107 = 2080;
          char v108 = (const char *)v98;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v96;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v97;
          _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        int v99 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v99 = &off_6414D8;
        v99[2] = 561211770;
      }
      if (a2->mElement == 6 && a2->mScope == 1869968496)
      {
        __int16 v23 = (float *)sub_23EE78();
        float v24 = (float)(sub_23FDA8(v23) * 100.0) + -100.0;
        goto LABEL_53;
      }
    }
LABEL_49:
    sub_432AE8(a1, a2, a3, a4, a5, a6);
    return;
  }
  if (mSelector <= 1685483629)
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542)
      {
        UInt32 v13 = *a5;
        if (v13 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = (os_log_t *)sub_32A48(13);
          uint64_t v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
            int v70 = v103;
            char v71 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v72 = *a5;
            int v73 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            os_log_type_t v74 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
            if (v70 < 0) {
              os_log_type_t v74 = v71;
            }
            __int16 v105 = 1024;
            int v106 = 457;
            __int16 v107 = 2080;
            char v108 = (const char *)v74;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v72;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v73;
            _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }
          uint32_t v75 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint32_t v75 = &off_6414D8;
          v75[2] = 561211770;
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
        *(_DWORD *)&uint8_t buf[4] = mScope;
        *(_DWORD *)&_DWORD buf[8] = 0;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, const void *, UInt32 *, float *))(*(void *)a1 + 40))(a1, buf, a3, a4, a5, a6);
        return;
      }
      goto LABEL_49;
    }
    UInt32 v25 = *a5;
    if (v25 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
    {
      uint64_t v44 = (os_log_t *)sub_32A48(13);
      os_log_t v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
        int v46 = v103;
        uint64_t v47 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v48 = *a5;
        int v49 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        uint64_t v50 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
        if (v46 < 0) {
          uint64_t v50 = v47;
        }
        __int16 v105 = 1024;
        int v106 = 543;
        __int16 v107 = 2080;
        char v108 = (const char *)v50;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v48;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v49;
        _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }
      int v51 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v51 = &off_6414D8;
      double v51[2] = 561211770;
    }
    int v21 = 1;
LABEL_31:
    *(_DWORD *)a6 = v21;
    return;
  }
  if (mSelector != 1685483630)
  {
    if (mSelector == 1835103844)
    {
      UInt32 v18 = *a5;
      if (v18 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        int v84 = (os_log_t *)sub_32A48(13);
        char v85 = *v84;
        if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
          int v86 = v103;
          char v87 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v88 = *a5;
          int v89 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          int v90 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
          if (v86 < 0) {
            int v90 = v87;
          }
          __int16 v105 = 1024;
          int v106 = 466;
          __int16 v107 = 2080;
          char v108 = (const char *)v90;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v88;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v89;
          _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        char v91 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v91 = &off_6414D8;
        void v91[2] = 561211770;
      }
      AudioObjectPropertyScope v20 = a2->mScope;
      AudioObjectPropertyElement v19 = a2->mElement;
      if (v19 == 6 && v20 == 1869968496)
      {
        int v21 = -1027131310;
        goto LABEL_31;
      }
      __p.int mSelector = 1986290211;
      __p.AudioObjectPropertyScope mScope = v20;
      __p.AudioObjectPropertyElement mElement = v19;
      LODWORD(v100) = 16;
      sub_432AE8(a1, &__p, 0, 0, (UInt32 *)&v100, (float *)buf);
      float v24 = *(double *)buf;
LABEL_53:
      *a6 = v24;
      return;
    }
    goto LABEL_49;
  }
  BOOL v28 = (os_log_t *)sub_32A48(17);
  __int16 v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(&__p, a2->mSelector);
    os_log_type_t v30 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_Receiver_Aspen.cpp";
    __int16 v105 = 1024;
    int v106 = 538;
    __int16 v107 = 2080;
    char v108 = (const char *)v30;
    _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property '%s' is write-only", buf, 0x1Cu);
    if (v103 < 0) {
      operator delete(*(void **)&__p.mSelector);
    }
  }
  *a5 = 0;
}

void sub_452D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_452D60(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    AudioObjectPropertyElement v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      UInt32 v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      float v24 = "Device_Receiver_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 388;
      __int16 v27 = 2080;
      BOOL v28 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    UInt32 v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      int v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      float v24 = "Device_Receiver_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 389;
      __int16 v27 = 2080;
      BOOL v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      AudioObjectID v32 = a4;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    UInt32 v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)UInt32 v18 = &off_6414D8;
    v18[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  uint64_t result = 4;
  if ((int)a2->mSelector <= 1836414052)
  {
    if (mSelector > 1685483629)
    {
      if (mSelector == 1685483630) {
        return result;
      }
      int v10 = 1835103844;
    }
    else
    {
      if (mSelector == 1064725619) {
        return result;
      }
      int v10 = 1634759542;
    }
LABEL_16:
    if (mSelector == v10) {
      return result;
    }
    goto LABEL_18;
  }
  if (mSelector > 1986290210)
  {
    if (mSelector == 1986290211) {
      return 16;
    }
    int v10 = 1987013732;
    goto LABEL_16;
  }
  if (mSelector != 1836414053)
  {
    int v10 = 1986229104;
    goto LABEL_16;
  }
  if (a2->mElement == 6)
  {
    int mSelector = a2->mScope;
    int v10 = 1869968496;
    goto LABEL_16;
  }
LABEL_18:

  return sub_433254(a1, a2, a3, a4);
}

uint64_t sub_45314C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211)
      {
LABEL_18:
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          return sub_43356C(a1, a2);
        }
        return 0;
      }
      if (mSelector != 1987013732) {
        return sub_43356C(a1, a2);
      }
    }
    else if (mSelector != 1836414053)
    {
      if (mSelector != 1986229104) {
        return sub_43356C(a1, a2);
      }
      goto LABEL_18;
    }
    if (a2->mElement != 6 || a2->mScope != 1869968496) {
      return sub_43356C(a1, a2);
    }
    return 1;
  }
  uint64_t v3 = 1;
  if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return v3;
    }
    if (mSelector != 1835103844) {
      return sub_43356C(a1, a2);
    }
    return 0;
  }
  if (mSelector == 1064725619) {
    return 0;
  }
  if (mSelector != 1634759542) {
    return sub_43356C(a1, a2);
  }
  return v3;
}

BOOL sub_453260(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      BOOL v6 = mSelector == 1987013732;
      int v7 = 1986290211;
    }
    else
    {
      BOOL v6 = mSelector == 1836414053;
      int v7 = 1986229104;
    }
    BOOL v9 = v6 || mSelector == v7;
    if (v9 && a2->mElement == 6 && a2->mScope == 1869968496) {
      return 1;
    }
    goto LABEL_22;
  }
  BOOL result = 1;
  if (mSelector > 1685483629)
  {
    if (mSelector != 1685483630 && mSelector != 1835103844)
    {
LABEL_22:
      sub_50848((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }
  else
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542) {
        return result;
      }
      goto LABEL_22;
    }
    return a2->mScope == 1869968496;
  }
  return result;
}

void sub_453390(void *a1)
{
  sub_4533C8(a1);

  operator delete();
}

uint64_t sub_4533C8(void *a1)
{
  *a1 = off_63F798;
  uint64_t v2 = a1[83];
  a1[83] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1A97C8((uint64_t)(a1 + 64));
  sub_1A980C(a1 + 63);
  uint64_t v3 = a1[62];
  a1[62] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_43456C((uint64_t)a1);
}

uint64_t sub_45348C(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  BOOL v6 = (void *)sub_433710(a1, a2, a3, a3, 0);
  *BOOL v6 = off_63F798;
  v6[62] = 0;
  v6[63] = 0;
  sub_1A9860((uint64_t)(v6 + 64));
  *(unsigned char *)(a1 + 656) = 0;
  if (!sub_8B774())
  {
    *(void *)AudioObjectPropertyAddress inAddress = &inAddress[8];
    *(void *)&inAddress[8] = 0;
    v23[0] = 0;
    v23[1] = 0;
    *(void *)&inAddress[16] = 0;
    char v22 = v23;
    sub_38DB90((uint64_t *)inAddress, 0x706D6269u, 1768778083);
    sub_38DB90((uint64_t *)inAddress, 0x706D6269u, 1768778033);
    sub_38DB90((uint64_t *)inAddress, 0x706D7769u, 1701669219);
    sub_38DB90((uint64_t *)inAddress, 0x70747469u, 1701669219);
    sub_38DD5C((uint64_t)inAddress, 0x656D6963u, 1886222185);
    sub_38DD5C((uint64_t)inAddress, 0x656D6963u, 1886680169);
    sub_38DD5C((uint64_t)inAddress, 0x696D6963u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x696D6931u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x736D6963u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x696D6932u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x6C6D6963u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x666D6963u, 1886216809);
    operator new();
  }
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = sub_3EFF58();
  *(_DWORD *)(a1 + 680) = 2;
  *(unsigned char *)(a1 + 684) = 0;
  *(_DWORD *)(a1 + 688) = 0;
  if (!a2)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    UInt32 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_Receiver_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 252;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", inAddress, 0x12u);
    }
    goto LABEL_13;
  }
  if (!a3)
  {
    UInt32 v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_Receiver_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 253;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", inAddress, 0x12u);
    }
LABEL_13:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    goto LABEL_23;
  }
  AudioObjectID v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v7, (const AudioObjectPropertyAddress *)&qword_668F88))
  {
    AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    int inData = 0;
    strcpy(inAddress, "dneitpni");
    inAddress[9] = 0;
    *(_WORD *)&inAddress[10] = 0;
    OSStatus v9 = AudioObjectSetPropertyData(v8, (const AudioObjectPropertyAddress *)inAddress, 0, 0, 4u, &inData);
    if (v9)
    {
      int v17 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v17 = &off_6414D8;
      v17[2] = v9;
    }
    if (atomic_load((unsigned int *)(a1 + 688)))
    {
      UInt32 v18 = (os_log_t *)sub_32A48(13);
      uint64_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_Receiver_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 261;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", inAddress, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Postcondition failure.");
LABEL_23:
    }
  }
  sub_436AD8(a1, 0, 0x6F757470u, 0);
  return a1;
}

void sub_453994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __cxa_free_exception(v17);
  uint64_t v19 = v15[83];
  v15[83] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_1A97C8(v16);
  sub_1A980C(v15 + 63);
  uint64_t v20 = v15[62];
  v15[62] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_43456C((uint64_t)v15);
  _Unwind_Resume(a1);
}

void sub_453AA4()
{
}

void sub_453B5C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_4D60(&v6, (unsigned int *)(a1 + 12));
  uint64_t v3 = std::string::insert(&v6, 0, "Notifying ", 0xAuLL);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  char v5 = std::string::append(&v7, " of time sync clock creation", 0x1CuLL);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_453C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_453C40@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (os_log_t *)sub_32A48(6);
  char v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_4D60(&__p, (unsigned int *)(a1 + 12));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "TimeSyncClockCreatedHandler.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 25;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = p_p;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TimeSync clock created for %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v7 = sub_463468();
  *(_OWORD *)&_DWORD buf[8] = 0uLL;
  *(void *)AudioObjectPropertyAddress buf = &buf[8];
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  sub_463CAC(v7, a1 + 12, (uint64_t)buf, (unsigned int *)&__p);
  sub_463E0(*(void **)&buf[8]);
  return sub_12053C(a2, 1920099684);
}

void sub_453D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_453DA8()
{
}

void sub_453DC8(uint64_t a1, void *a2)
{
  *a2 = off_63FA70;
}

void *sub_453DE8()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_63FA70;
  return result;
}

void sub_453E20()
{
}

uint64_t sub_453E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _TimeSyncgPTPManagerNotifyWhenAvailable(a2, a3);
}

uint64_t sub_453E48(uint64_t a1, uint64_t a2)
{
  return _TimeSyncClockCreateAudioClockDeviceUID(a2);
}

uint64_t sub_453E50(uint64_t a1, uint64_t a2)
{
  return _TimeSyncClockDispose(a2);
}

uint64_t sub_453E58(uint64_t a1, uint64_t a2)
{
  return _TimeSyncClockCreateWithClockIdentifer(a2);
}

uint64_t sub_453E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _TimeSyncClockManagerNotifyWhenAvailable(a2, a3);
}

void sub_453E70()
{
}

uint64_t sub_453E8C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_453EB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63FB40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_453F04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63FB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_453F24(const __CFString *a1, BOOL *a2)
{
  int valuePtr = -1;
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    int v5 = valuePtr + 3;
  }
  else
  {
    if (v4 != CFStringGetTypeID()) {
      goto LABEL_22;
    }
    if (CFEqual(a1, @"error"))
    {
      int v5 = 1;
      goto LABEL_23;
    }
    if (CFEqual(a1, @"warning"))
    {
      int v5 = 2;
      goto LABEL_23;
    }
    if (CFEqual(a1, @"note") || CFEqual(a1, @"notice"))
    {
      int v5 = 3;
      goto LABEL_23;
    }
    if (CFEqual(a1, @"info"))
    {
      int v5 = 4;
      goto LABEL_23;
    }
    if (CFEqual(a1, @"details"))
    {
      int v5 = 5;
      goto LABEL_23;
    }
    if (CFEqual(a1, @"minutiae"))
    {
      int v5 = 6;
      goto LABEL_23;
    }
    if (CFEqual(a1, @"spew"))
    {
      int v5 = 7;
      goto LABEL_23;
    }
    if (!CFStringGetCString(a1, buffer, 64, 0x8000100u))
    {
LABEL_22:
      int v5 = -1;
      goto LABEL_23;
    }
    int v9 = 0;
    int v6 = sscanf(buffer, "%d", &v9);
    int v5 = v9 + 3;
    if (v6 != 1) {
      int v5 = -1;
    }
  }
LABEL_23:
  *a2 = v5 > 0;
  return v5 & ~(v5 >> 31);
}

uint64_t sub_454100(uint64_t result, int *a2)
{
  uint64_t v2 = 3;
  if (*a2 <= 6) {
    uint64_t v2 = 1;
  }
  *(void *)(*(void *)(result + 8) + 8) = v2;
  return result;
}

uint64_t sub_454124(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_63FBC0;
  a2[1] = v2;
  return result;
}

void *sub_454148(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_63FBC0;
  result[1] = v3;
  return result;
}

void sub_454190()
{
}

void *sub_4541A8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  a1[3] = *(void *)(a2 + 24);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  a1[7] = *(void *)(a2 + 56);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  a1[10] = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  a1[11] = 0;
  a1[12] = 0;
  CFTypeID v4 = a1 + 11;
  uint64_t v4[2] = 0;
  sub_46B38(v4, *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  a1[16] = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 136);
  a1[19] = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  return a1;
}

void sub_4542CC(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_454308()
{
  qword_660B08 = (uint64_t)off_63FC08;
  long long v285 = xmmword_4E7880;
  sub_72300(&__p, (__int32 *)&v285, 4);
  sub_857F4((uint64_t)&v157, (uint64_t)&__p);
  if (__p)
  {
    int v252 = __p;
    operator delete(__p);
  }
  uint64_t v231 = 0;
  long long __src = 0;
  uint64_t v232 = 0;
  sub_46B38(&__src, v161, v162, (v162 - (uint64_t)v161) >> 2);
  sub_72384((uint64_t)&v285, 1651797297, (uint64_t)&__src, 1869442665, -1, (uint64_t)&qword_6690E8);
  sub_72384((uint64_t)&v246, 1651797298, (uint64_t)&__src, 1869442665, -1, (uint64_t)&qword_6690E8);
  sub_72384((uint64_t)&v240, 1650551601, (uint64_t)&__src, 1869442665, -1, (uint64_t)&qword_6690E8);
  sub_72384((uint64_t)&v234, 1718514737, (uint64_t)&__src, 1869442665, -1, (uint64_t)&qword_6690E8);
  sub_72384((uint64_t)&v279, 1650811245, (uint64_t)&__src, 1935827812, 1, (uint64_t)&qword_669100);
  sub_72384((uint64_t)&v224, 1650811245, (uint64_t)&__src, 1668441188, 0, (uint64_t)&qword_669100);
  sub_72384((uint64_t)&v218, 1986228839, (uint64_t)&__src, 1668441188, 0, (uint64_t)&qword_669100);
  sub_72384((uint64_t)&v212, 1937007986, (uint64_t)&__src, 1937007986, 0, (uint64_t)&qword_669118);
  sub_72384((uint64_t)&v206, 1937007986, (uint64_t)&__src, 1937007986, 1, (uint64_t)&qword_669118);
  uint64_t v0 = operator new(8uLL);
  *uint64_t v0 = 0x766D736776726367;
  v253 = v0 + 1;
  std::string __p = v0;
  int v252 = v0 + 1;
  sub_72384((uint64_t)&v201, 1634495520, (uint64_t)&__src, 1852796517, -1, (uint64_t)&__p);
  operator delete(v0);
  int v252 = 0;
  std::string __p = 0;
  v253 = 0;
  sub_72384((uint64_t)&v196, 1870033508, (uint64_t)&__src, 1852796517, -1, (uint64_t)&__p);
  sub_72424((uint64_t)&v191, 1668112945, (uint64_t)&__src);
  sub_72424((uint64_t)&v186, 1668112946, (uint64_t)&__src);
  sub_72424((uint64_t)&v181, 1668112947, (uint64_t)&__src);
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_669168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_669168))
  {
    sub_7245C((uint64_t)&__p, (uint64_t)&v285);
    sub_724F8(&v178, (uint64_t)&__p, 1uLL);
    sub_7258C((uint64_t)&unk_669130, 1835216945, 1835229812, 0, 1819244402, 1651799149, (uint64_t *)&v178);
    char v175 = (void **)&v178;
    sub_72620(&v175);
    sub_726A4(&__p);
    __cxa_guard_release((__guard *)&unk_669168);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_6691A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_6691A8))
  {
    sub_7245C((uint64_t)&__p, (uint64_t)&v246);
    sub_724F8(&v178, (uint64_t)&__p, 1uLL);
    sub_7258C((uint64_t)&unk_669170, 1835216948, 1835229812, 1, 1819244402, 1651799149, (uint64_t *)&v178);
    char v175 = (void **)&v178;
    sub_72620(&v175);
    sub_726A4(&__p);
    __cxa_guard_release((__guard *)&unk_6691A8);
  }
  LODWORD(__p) = v234;
  uint64_t v254 = 0;
  int v252 = 0;
  v253 = 0;
  sub_46B38(&v252, v235, (uint64_t)v236, (v236 - (unsigned char *)v235) >> 2);
  uint64_t v255 = v237;
  char v256 = 0;
  uint64_t v258 = 0;
  int v257 = 0;
  sub_46B38(&v256, v238, (uint64_t)v239, (v239 - (unsigned char *)v238) >> 2);
  int v259 = (int)v224;
  uint64_t v262 = 0;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  sub_46B38(&v260, v225, (uint64_t)v226, (v226 - (unsigned char *)v225) >> 2);
  uint64_t v263 = v227;
  uint64_t v264 = 0;
  uint64_t v266 = 0;
  uint64_t v265 = 0;
  sub_46B38(&v264, v228, (uint64_t)v229, (v229 - (unsigned char *)v228) >> 2);
  int v267 = v218;
  uint64_t v270 = 0;
  uint64_t v268 = 0;
  uint64_t v269 = 0;
  sub_46B38(&v268, v219, (uint64_t)v220, (v220 - (unsigned char *)v219) >> 2);
  uint64_t v271 = v221;
  uint64_t v272 = 0;
  uint64_t v274 = 0;
  uint64_t v273 = 0;
  sub_46B38(&v272, v222, (uint64_t)v223, (v223 - (unsigned char *)v222) >> 2);
  int v275 = (int)v212;
  v277[1] = 0;
  uint64_t v276 = 0;
  v277[0] = 0;
  sub_46B38(&v276, v213, (uint64_t)v214, (v214 - (unsigned char *)v213) >> 2);
  v277[2] = v215;
  memset(v278, 0, sizeof(v278));
  sub_46B38(v278, v216, (uint64_t)v217, (v217 - (unsigned char *)v216) >> 2);
  char v178 = 0;
  uint64_t v179 = 0;
  char v180 = 0;
  char v175 = (void **)&v178;
  LOBYTE(v176) = 0;
  char v178 = (char *)operator new(0x100uLL);
  uint64_t v179 = (uint64_t)v178;
  char v180 = v178 + 256;
  uint64_t v1 = 0;
  uint64_t v179 = sub_726E8((uint64_t)&__p, (uint64_t)&v279, (uint64_t)v178);
  do
  {
    uint64_t v2 = (char *)&__p + v1 * 8;
    uint64_t v3 = (void *)v278[v1];
    if (v3)
    {
      *((void *)v2 + 30) = v3;
      operator delete(v3);
    }
    CFTypeID v4 = (void *)*((void *)v2 + 25);
    if (v4)
    {
      v277[v1] = v4;
      operator delete(v4);
    }
    v1 -= 8;
  }
  while (v1 != -32);
  LODWORD(__p) = v240;
  uint64_t v254 = 0;
  int v252 = 0;
  v253 = 0;
  sub_46B38(&v252, v241, (uint64_t)v242, (v242 - (unsigned char *)v241) >> 2);
  uint64_t v255 = v243;
  char v256 = 0;
  uint64_t v258 = 0;
  int v257 = 0;
  sub_46B38(&v256, v244, (uint64_t)v245, (v245 - (unsigned char *)v244) >> 2);
  int v259 = v279;
  uint64_t v262 = 0;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  sub_46B38(&v260, v280, (uint64_t)v281, (v281 - (unsigned char *)v280) >> 2);
  uint64_t v263 = v282;
  uint64_t v264 = 0;
  uint64_t v266 = 0;
  uint64_t v265 = 0;
  sub_46B38(&v264, v283, (uint64_t)v284, (v284 - (unsigned char *)v283) >> 2);
  int v267 = v206;
  uint64_t v270 = 0;
  uint64_t v268 = 0;
  uint64_t v269 = 0;
  sub_46B38(&v268, v207, (uint64_t)v208, (v208 - (unsigned char *)v207) >> 2);
  uint64_t v271 = v209;
  uint64_t v272 = 0;
  uint64_t v274 = 0;
  uint64_t v273 = 0;
  sub_46B38(&v272, v210, (uint64_t)v211, (v211 - (unsigned char *)v210) >> 2);
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v173 = &v175;
  char v174 = 0;
  char v175 = (void **)operator new(0xC0uLL);
  char v176 = v175;
  char v177 = v175 + 24;
  uint64_t v5 = 0;
  char v176 = (void **)sub_726E8((uint64_t)&__p, (uint64_t)&v275, (uint64_t)v175);
  do
  {
    int v6 = (char *)&__p + v5;
    uint64_t v7 = *(void **)((char *)&v272 + v5);
    if (v7)
    {
      *((void *)v6 + 22) = v7;
      operator delete(v7);
    }
    AudioObjectID v8 = (void *)*((void *)v6 + 17);
    if (v8)
    {
      *(uint64_t *)((char *)&v269 + v5) = (uint64_t)v8;
      operator delete(v8);
    }
    v5 -= 64;
  }
  while (v5 != -192);
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_6691E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_6691E8))
  {
    sub_7258C((uint64_t)&unk_6691B0, 1835216946, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)&v178);
    __cxa_guard_release((__guard *)&unk_6691E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_669228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_669228))
  {
    sub_7258C((uint64_t)&unk_6691F0, 1835216947, 1835229803, 0, 1970303090, 1650549611, (uint64_t *)&v175);
    __cxa_guard_release((__guard *)&unk_669228);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_669268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_669268))
  {
    sub_7245C((uint64_t)&__p, (uint64_t)&v201);
    sub_724F8(&v173, (uint64_t)&__p, 1uLL);
    sub_72890((uint64_t)&unk_669230, 1634495520, 1835229548, 1, (uint64_t *)&v173);
    v233 = &v173;
    sub_72620((void ***)&v233);
    sub_726A4(&__p);
    __cxa_guard_release((__guard *)&unk_669268);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_6692A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_6692A8))
  {
    sub_7245C((uint64_t)&__p, (uint64_t)&v191);
    sub_724F8(&v173, (uint64_t)&__p, 1uLL);
    sub_72890((uint64_t)&unk_669270, 1668112945, 1835229548, 2, (uint64_t *)&v173);
    v233 = &v173;
    sub_72620((void ***)&v233);
    sub_726A4(&__p);
    __cxa_guard_release((__guard *)&unk_6692A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_6692E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_6692E8))
  {
    sub_7245C((uint64_t)&__p, (uint64_t)&v186);
    sub_724F8(&v173, (uint64_t)&__p, 1uLL);
    sub_72890((uint64_t)&unk_6692B0, 1668112946, 1835229548, 2, (uint64_t *)&v173);
    v233 = &v173;
    sub_72620((void ***)&v233);
    sub_726A4(&__p);
    __cxa_guard_release((__guard *)&unk_6692E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_669328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_669328))
  {
    sub_7245C((uint64_t)&__p, (uint64_t)&v181);
    sub_724F8(&v173, (uint64_t)&__p, 1uLL);
    sub_72890((uint64_t)&unk_6692F0, 1668112947, 1835229548, 2, (uint64_t *)&v173);
    v233 = &v173;
    sub_72620((void ***)&v233);
    sub_726A4(&__p);
    __cxa_guard_release((__guard *)&unk_669328);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_669368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_669368))
  {
    sub_7245C((uint64_t)&__p, (uint64_t)&v196);
    sub_724F8(&v173, (uint64_t)&__p, 1uLL);
    sub_72890((uint64_t)&unk_669330, 1870033508, 1735291491, 2, (uint64_t *)&v173);
    v233 = &v173;
    sub_72620((void ***)&v233);
    sub_726A4(&__p);
    __cxa_guard_release((__guard *)&unk_669368);
  }
  int v9 = v158;
  if ((unint64_t)v158 >= v159)
  {
    uint64_t v11 = (v158 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v12 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v12 <= v11 + 1) {
      unint64_t v12 = v11 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      unint64_t v13 = (unint64_t)sub_106EC(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    UInt32 v15 = (void *)(v13 + 8 * v11);
    unint64_t v16 = v13 + 8 * v14;
    *UInt32 v15 = &unk_669130;
    int v10 = v15 + 1;
    UInt32 v18 = (char *)v157;
    int v17 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *--UInt32 v15 = v19;
      }
      while (v17 != v18);
      int v17 = (char *)v157;
    }
    int v157 = v15;
    char v158 = (char *)v10;
    unint64_t v159 = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(void *)char v158 = &unk_669130;
    int v10 = v9 + 8;
  }
  char v158 = (char *)v10;
  if ((unint64_t)v10 >= v159)
  {
    uint64_t v21 = ((char *)v10 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v22 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v22 <= v21 + 1) {
      unint64_t v22 = v21 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23) {
      unint64_t v23 = (unint64_t)sub_106EC(v23);
    }
    else {
      uint64_t v24 = 0;
    }
    __int16 v25 = (void *)(v23 + 8 * v21);
    unint64_t v26 = v23 + 8 * v24;
    void *v25 = &unk_669170;
    uint64_t v20 = v25 + 1;
    BOOL v28 = (char *)v157;
    __int16 v27 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v29 = *((void *)v27 - 1);
        v27 -= 8;
        *--__int16 v25 = v29;
      }
      while (v27 != v28);
      __int16 v27 = (char *)v157;
    }
    int v157 = v25;
    char v158 = (char *)v20;
    unint64_t v159 = v26;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    *int v10 = &unk_669170;
    uint64_t v20 = v10 + 1;
  }
  char v158 = (char *)v20;
  if ((unint64_t)v20 >= v159)
  {
    uint64_t v31 = ((char *)v20 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v31 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v32 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v32 <= v31 + 1) {
      unint64_t v32 = v31 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v32;
    }
    if (v33) {
      unint64_t v33 = (unint64_t)sub_106EC(v33);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = (void *)(v33 + 8 * v31);
    unint64_t v36 = v33 + 8 * v34;
    char *v35 = &unk_6691B0;
    UInt32 v30 = (char *)(v35 + 1);
    std::string v38 = (char *)v157;
    uint64_t v37 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v39 = *((void *)v37 - 1);
        v37 -= 8;
        *--uint64_t v35 = v39;
      }
      while (v37 != v38);
      uint64_t v37 = (char *)v157;
    }
    int v157 = v35;
    char v158 = v30;
    unint64_t v159 = v36;
    if (v37) {
      operator delete(v37);
    }
  }
  else
  {
    *uint64_t v20 = &unk_6691B0;
    UInt32 v30 = (char *)(v20 + 1);
  }
  char v158 = v30;
  if ((unint64_t)v30 >= v159)
  {
    uint64_t v41 = (v30 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v41 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v42 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v42 <= v41 + 1) {
      unint64_t v42 = v41 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v42;
    }
    if (v43) {
      unint64_t v43 = (unint64_t)sub_106EC(v43);
    }
    else {
      uint64_t v44 = 0;
    }
    os_log_t v45 = (char *)(v43 + 8 * v41);
    unint64_t v46 = v43 + 8 * v44;
    *(void *)os_log_t v45 = &unk_6691F0;
    unint64_t v40 = v45 + 8;
    UInt32 v48 = (char *)v157;
    uint64_t v47 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v49 = *((void *)v47 - 1);
        v47 -= 8;
        *((void *)v45 - 1) = v49;
        v45 -= 8;
      }
      while (v47 != v48);
      uint64_t v47 = (char *)v157;
    }
    int v157 = v45;
    char v158 = v40;
    unint64_t v159 = v46;
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    *(void *)UInt32 v30 = &unk_6691F0;
    unint64_t v40 = v30 + 8;
  }
  char v158 = v40;
  if ((unint64_t)v40 >= v159)
  {
    uint64_t v51 = (v40 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v51 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v52 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v52 <= v51 + 1) {
      unint64_t v52 = v51 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v52;
    }
    if (v53) {
      unint64_t v53 = (unint64_t)sub_106EC(v53);
    }
    else {
      uint64_t v54 = 0;
    }
    unint64_t v55 = (char *)(v53 + 8 * v51);
    unint64_t v56 = v53 + 8 * v54;
    *(void *)unint64_t v55 = &unk_669230;
    uint64_t v50 = v55 + 8;
    unint64_t v58 = (char *)v157;
    int v57 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v59 = *((void *)v57 - 1);
        v57 -= 8;
        *((void *)v55 - 1) = v59;
        v55 -= 8;
      }
      while (v57 != v58);
      int v57 = (char *)v157;
    }
    int v157 = v55;
    char v158 = v50;
    unint64_t v159 = v56;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    *(void *)unint64_t v40 = &unk_669230;
    uint64_t v50 = v40 + 8;
  }
  char v158 = v50;
  if ((unint64_t)v50 >= v159)
  {
    uint64_t v61 = (v50 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v61 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v62 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v62 <= v61 + 1) {
      unint64_t v62 = v61 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v62;
    }
    if (v63) {
      unint64_t v63 = (unint64_t)sub_106EC(v63);
    }
    else {
      uint64_t v64 = 0;
    }
    int v65 = (char *)(v63 + 8 * v61);
    unint64_t v66 = v63 + 8 * v64;
    *(void *)int v65 = &unk_669270;
    std::chrono::system_clock::time_point v60 = v65 + 8;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = (char *)v157;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v69 = *((void *)v67 - 1);
        v67 -= 8;
        *((void *)v65 - 1) = v69;
        v65 -= 8;
      }
      while (v67 != v68);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = (char *)v157;
    }
    int v157 = v65;
    char v158 = v60;
    unint64_t v159 = v66;
    if (v67) {
      operator delete(v67);
    }
  }
  else
  {
    *(void *)uint64_t v50 = &unk_669270;
    std::chrono::system_clock::time_point v60 = v50 + 8;
  }
  char v158 = v60;
  if ((unint64_t)v60 >= v159)
  {
    uint64_t v71 = (v60 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v71 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v72 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v72 <= v71 + 1) {
      unint64_t v72 = v71 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v73 = v72;
    }
    if (v73) {
      unint64_t v73 = (unint64_t)sub_106EC(v73);
    }
    else {
      uint64_t v74 = 0;
    }
    uint32_t v75 = (char *)(v73 + 8 * v71);
    unint64_t v76 = v73 + 8 * v74;
    *(void *)uint32_t v75 = &unk_6692B0;
    int v70 = v75 + 8;
    int v78 = (char *)v157;
    os_log_t v77 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v79 = *((void *)v77 - 1);
        v77 -= 8;
        *((void *)v75 - 1) = v79;
        v75 -= 8;
      }
      while (v77 != v78);
      os_log_t v77 = (char *)v157;
    }
    int v157 = v75;
    char v158 = v70;
    unint64_t v159 = v76;
    if (v77) {
      operator delete(v77);
    }
  }
  else
  {
    *(void *)std::chrono::system_clock::time_point v60 = &unk_6692B0;
    int v70 = v60 + 8;
  }
  char v158 = v70;
  if ((unint64_t)v70 >= v159)
  {
    uint64_t v81 = (v70 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v81 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v82 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v82 <= v81 + 1) {
      unint64_t v82 = v81 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v83 = v82;
    }
    if (v83) {
      unint64_t v83 = (unint64_t)sub_106EC(v83);
    }
    else {
      uint64_t v84 = 0;
    }
    char v85 = (char *)(v83 + 8 * v81);
    unint64_t v86 = v83 + 8 * v84;
    *(void *)char v85 = &unk_6692F0;
    UInt32 v80 = v85 + 8;
    UInt32 v88 = (char *)v157;
    char v87 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v89 = *((void *)v87 - 1);
        v87 -= 8;
        *((void *)v85 - 1) = v89;
        v85 -= 8;
      }
      while (v87 != v88);
      char v87 = (char *)v157;
    }
    int v157 = v85;
    char v158 = v80;
    unint64_t v159 = v86;
    if (v87) {
      operator delete(v87);
    }
  }
  else
  {
    *(void *)int v70 = &unk_6692F0;
    UInt32 v80 = v70 + 8;
  }
  char v158 = v80;
  if ((unint64_t)v80 >= v159)
  {
    uint64_t v91 = (v80 - (unsigned char *)v157) >> 3;
    if ((unint64_t)(v91 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v92 = (uint64_t)(v159 - (void)v157) >> 2;
    if (v92 <= v91 + 1) {
      unint64_t v92 = v91 + 1;
    }
    if (v159 - (unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v92;
    }
    if (v93) {
      unint64_t v93 = (unint64_t)sub_106EC(v93);
    }
    else {
      uint64_t v94 = 0;
    }
    int v95 = (char *)(v93 + 8 * v91);
    unint64_t v96 = v93 + 8 * v94;
    *(void *)int v95 = &unk_669330;
    int v90 = v95 + 8;
    char v98 = (char *)v157;
    int v97 = v158;
    if (v158 != v157)
    {
      do
      {
        uint64_t v99 = *((void *)v97 - 1);
        v97 -= 8;
        *((void *)v95 - 1) = v99;
        v95 -= 8;
      }
      while (v97 != v98);
      int v97 = (char *)v157;
    }
    int v157 = v95;
    char v158 = v90;
    unint64_t v159 = v96;
    if (v97) {
      operator delete(v97);
    }
  }
  else
  {
    *(void *)UInt32 v80 = &unk_669330;
    int v90 = v80 + 8;
  }
  char v158 = v90;
  char v160 = &unk_669130;
  uint64_t v100 = __src;
  sub_6720C(&v163, (char *)__src, v231, (v231 - (uint64_t)__src) >> 2);
  sub_6720C(&v164, *((char **)&v285 + 1), (uint64_t)v286, ((uint64_t)v286 - *((void *)&v285 + 1)) >> 2);
  sub_6720C(&v165, *((char **)&v285 + 1), (uint64_t)v286, ((uint64_t)v286 - *((void *)&v285 + 1)) >> 2);
  sub_4541A8(v166, (uint64_t)&v157);
  std::string __p = &v175;
  sub_72620((void ***)&__p);
  std::string __p = &v178;
  sub_72620((void ***)&__p);
  if (v184)
  {
    int v185 = v184;
    operator delete(v184);
  }
  if (v182)
  {
    std::string v183 = v182;
    operator delete(v182);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v194)
  {
    char v195 = v194;
    operator delete(v194);
  }
  if (v192)
  {
    std::string v193 = v192;
    operator delete(v192);
  }
  if (v199)
  {
    char v200 = v199;
    operator delete(v199);
  }
  if (v197)
  {
    unint64_t v198 = v197;
    operator delete(v197);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v202)
  {
    char v203 = v202;
    operator delete(v202);
  }
  if (v210)
  {
    __int16 v211 = v210;
    operator delete(v210);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v213)
  {
    char v214 = v213;
    operator delete(v213);
  }
  if (v222)
  {
    CFTypeRef v223 = v222;
    operator delete(v222);
  }
  if (v219)
  {
    CFTypeRef v220 = v219;
    operator delete(v219);
  }
  if (v228)
  {
    CFTypeRef v229 = v228;
    operator delete(v228);
  }
  if (v225)
  {
    int v226 = v225;
    operator delete(v225);
  }
  if (v283)
  {
    v284 = v283;
    operator delete(v283);
  }
  if (v280)
  {
    int v281 = v280;
    operator delete(v280);
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v235)
  {
    char v236 = v235;
    operator delete(v235);
  }
  if (v244)
  {
    char v245 = v244;
    operator delete(v244);
  }
  if (v241)
  {
    v242 = v241;
    operator delete(v241);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v287)
  {
    v288 = v287;
    operator delete(v287);
  }
  if (*((void *)&v285 + 1))
  {
    int v286 = (void *)*((void *)&v285 + 1);
    operator delete(*((void **)&v285 + 1));
  }
  if (v100) {
    operator delete(v100);
  }
  char v225 = 0;
  v224 = 0;
  int v226 = 0;
  sub_46B38(&v224, v171, v172, (v172 - (uint64_t)v171) >> 2);
  uint64_t v101 = operator new(8uLL);
  void *v101 = 0x726D76637670766FLL;
  *((void *)&v285 + 1) = v101 + 1;
  int v286 = v101 + 1;
  *(void *)&long long v285 = v101;
  sub_72384((uint64_t)&__p, 1634495520, (uint64_t)&v224, 1935827812, 1, (uint64_t)&v285);
  operator delete(v101);
  int v102 = operator new(8uLL);
  *int v102 = 0x726D76637670766FLL;
  v248 = v102 + 1;
  int v246 = v102;
  v247 = v102 + 1;
  sub_72384((uint64_t)&v285, 1634495520, (uint64_t)&v224, 1668441188, 0, (uint64_t)&v246);
  operator delete(v102);
  char v103 = operator new(8uLL);
  void *v103 = 0x726D76637670766FLL;
  v242 = v103 + 1;
  CFTypeRef v240 = v103;
  int v241 = v103 + 1;
  sub_72384((uint64_t)&v246, 1668112945, (uint64_t)&v224, 1852796517, -1, (uint64_t)&v240);
  operator delete(v103);
  char v104 = operator new(8uLL);
  *char v104 = 0x726D76637670766FLL;
  char v236 = v104 + 1;
  CFTypeRef v234 = v104;
  v235 = v104 + 1;
  sub_72384((uint64_t)&v240, 1634495520, (uint64_t)&v224, 1852796517, -1, (uint64_t)&v234);
  operator delete(v104);
  uint64_t v279 = 0;
  CFTypeRef v280 = 0;
  int v281 = 0;
  sub_72384((uint64_t)&v234, 1870033508, (uint64_t)&v224, 1852796517, -1, (uint64_t)&v279);
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_6693A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_6693A8))
  {
    sub_7245C((uint64_t)&v279, (uint64_t)&v285);
    sub_724F8(&v218, (uint64_t)&v279, 1uLL);
    sub_7258C((uint64_t)&unk_669370, 1835216946, 1835230834, 0, 1970303090, 1718775412, &v218);
    CFTypeRef v212 = (void **)&v218;
    sub_72620(&v212);
    sub_726A4(&v279);
    __cxa_guard_release((__guard *)&unk_6693A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_6693E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_6693E8))
  {
    sub_7245C((uint64_t)&v279, (uint64_t)&__p);
    sub_724F8(&v218, (uint64_t)&v279, 1uLL);
    sub_7258C((uint64_t)&unk_6693B0, 1835216947, 1835229803, 0, 1970303090, 1650549611, &v218);
    CFTypeRef v212 = (void **)&v218;
    sub_72620(&v212);
    sub_726A4(&v279);
    __cxa_guard_release((__guard *)&unk_6693E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_669428, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_669428))
  {
    sub_7245C((uint64_t)&v279, (uint64_t)&v246);
    sub_724F8(&v218, (uint64_t)&v279, 1uLL);
    sub_72890((uint64_t)&unk_6693F0, 1668112945, 1835229548, 2, &v218);
    CFTypeRef v212 = (void **)&v218;
    sub_72620(&v212);
    sub_726A4(&v279);
    __cxa_guard_release((__guard *)&unk_669428);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_669468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_669468))
  {
    sub_7245C((uint64_t)&v279, (uint64_t)&v240);
    sub_724F8(&v218, (uint64_t)&v279, 1uLL);
    sub_72890((uint64_t)&unk_669430, 1634495520, 1835229548, 2, &v218);
    CFTypeRef v212 = (void **)&v218;
    sub_72620(&v212);
    sub_726A4(&v279);
    __cxa_guard_release((__guard *)&unk_669468);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_6694A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_6694A8))
  {
    sub_7245C((uint64_t)&v279, (uint64_t)&v234);
    sub_724F8(&v218, (uint64_t)&v279, 1uLL);
    sub_72890((uint64_t)&unk_669470, 1870033508, 1735291491, 2, &v218);
    CFTypeRef v212 = (void **)&v218;
    sub_72620(&v212);
    sub_726A4(&v279);
    __cxa_guard_release((__guard *)&unk_6694A8);
  }
  __int16 v105 = v168;
  if ((unint64_t)v168 >= v169)
  {
    uint64_t v107 = (v168 - (unsigned char *)v167) >> 3;
    if ((unint64_t)(v107 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v108 = (uint64_t)(v169 - (void)v167) >> 2;
    if (v108 <= v107 + 1) {
      unint64_t v108 = v107 + 1;
    }
    if (v169 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v109 = v108;
    }
    if (v109) {
      unint64_t v109 = (unint64_t)sub_106EC(v109);
    }
    else {
      uint64_t v110 = 0;
    }
    char v111 = (char *)(v109 + 8 * v107);
    unint64_t v112 = v109 + 8 * v110;
    *(void *)char v111 = &unk_669370;
    int v106 = v111 + 8;
    int v114 = (char *)v167;
    char v113 = v168;
    if (v168 != v167)
    {
      do
      {
        uint64_t v115 = *((void *)v113 - 1);
        v113 -= 8;
        *((void *)v111 - 1) = v115;
        v111 -= 8;
      }
      while (v113 != v114);
      char v113 = (char *)v167;
    }
    char v167 = v111;
    char v168 = v106;
    unint64_t v169 = v112;
    if (v113) {
      operator delete(v113);
    }
  }
  else
  {
    *(void *)char v168 = &unk_669370;
    int v106 = v105 + 8;
  }
  char v168 = v106;
  if ((unint64_t)v106 >= v169)
  {
    uint64_t v117 = (v106 - (unsigned char *)v167) >> 3;
    if ((unint64_t)(v117 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v118 = (uint64_t)(v169 - (void)v167) >> 2;
    if (v118 <= v117 + 1) {
      unint64_t v118 = v117 + 1;
    }
    if (v169 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v119 = v118;
    }
    if (v119) {
      unint64_t v119 = (unint64_t)sub_106EC(v119);
    }
    else {
      uint64_t v120 = 0;
    }
    int v121 = (char *)(v119 + 8 * v117);
    unint64_t v122 = v119 + 8 * v120;
    *(void *)int v121 = &unk_6693B0;
    int v116 = v121 + 8;
    char v124 = (char *)v167;
    int v123 = v168;
    if (v168 != v167)
    {
      do
      {
        uint64_t v125 = *((void *)v123 - 1);
        v123 -= 8;
        *((void *)v121 - 1) = v125;
        v121 -= 8;
      }
      while (v123 != v124);
      int v123 = (char *)v167;
    }
    char v167 = v121;
    char v168 = v116;
    unint64_t v169 = v122;
    if (v123) {
      operator delete(v123);
    }
  }
  else
  {
    *(void *)int v106 = &unk_6693B0;
    int v116 = v106 + 8;
  }
  char v168 = v116;
  if ((unint64_t)v116 >= v169)
  {
    uint64_t v127 = (v116 - (unsigned char *)v167) >> 3;
    if ((unint64_t)(v127 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v128 = (uint64_t)(v169 - (void)v167) >> 2;
    if (v128 <= v127 + 1) {
      unint64_t v128 = v127 + 1;
    }
    if (v169 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v129 = v128;
    }
    if (v129) {
      unint64_t v129 = (unint64_t)sub_106EC(v129);
    }
    else {
      uint64_t v130 = 0;
    }
    int v131 = (char *)(v129 + 8 * v127);
    unint64_t v132 = v129 + 8 * v130;
    *(void *)int v131 = &unk_6693F0;
    char v126 = v131 + 8;
    int v134 = (char *)v167;
    char v133 = v168;
    if (v168 != v167)
    {
      do
      {
        uint64_t v135 = *((void *)v133 - 1);
        v133 -= 8;
        *((void *)v131 - 1) = v135;
        v131 -= 8;
      }
      while (v133 != v134);
      char v133 = (char *)v167;
    }
    char v167 = v131;
    char v168 = v126;
    unint64_t v169 = v132;
    if (v133) {
      operator delete(v133);
    }
  }
  else
  {
    *(void *)int v116 = &unk_6693F0;
    char v126 = v116 + 8;
  }
  char v168 = v126;
  if ((unint64_t)v126 >= v169)
  {
    uint64_t v137 = (v126 - (unsigned char *)v167) >> 3;
    if ((unint64_t)(v137 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v138 = (uint64_t)(v169 - (void)v167) >> 2;
    if (v138 <= v137 + 1) {
      unint64_t v138 = v137 + 1;
    }
    if (v169 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v139 = v138;
    }
    if (v139) {
      unint64_t v139 = (unint64_t)sub_106EC(v139);
    }
    else {
      uint64_t v140 = 0;
    }
    char v141 = (char *)(v139 + 8 * v137);
    unint64_t v142 = v139 + 8 * v140;
    *(void *)char v141 = &unk_669430;
    char v136 = v141 + 8;
    int v144 = (char *)v167;
    __int16 v143 = v168;
    if (v168 != v167)
    {
      do
      {
        uint64_t v145 = *((void *)v143 - 1);
        v143 -= 8;
        *((void *)v141 - 1) = v145;
        v141 -= 8;
      }
      while (v143 != v144);
      __int16 v143 = (char *)v167;
    }
    char v167 = v141;
    char v168 = v136;
    unint64_t v169 = v142;
    if (v143) {
      operator delete(v143);
    }
  }
  else
  {
    *(void *)char v126 = &unk_669430;
    char v136 = v126 + 8;
  }
  char v168 = v136;
  if ((unint64_t)v136 >= v169)
  {
    uint64_t v147 = (v136 - (unsigned char *)v167) >> 3;
    if ((unint64_t)(v147 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v148 = (uint64_t)(v169 - (void)v167) >> 2;
    if (v148 <= v147 + 1) {
      unint64_t v148 = v147 + 1;
    }
    if (v169 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v149 = v148;
    }
    if (v149) {
      unint64_t v149 = (unint64_t)sub_106EC(v149);
    }
    else {
      uint64_t v150 = 0;
    }
    AudioObjectID v151 = (char *)(v149 + 8 * v147);
    unint64_t v152 = v149 + 8 * v150;
    *(void *)AudioObjectID v151 = &unk_669470;
    char v146 = v151 + 8;
    char v154 = (char *)v167;
    std::mutex v153 = v168;
    if (v168 != v167)
    {
      do
      {
        uint64_t v155 = *((void *)v153 - 1);
        v153 -= 8;
        *((void *)v151 - 1) = v155;
        v151 -= 8;
      }
      while (v153 != v154);
      std::mutex v153 = (char *)v167;
    }
    char v167 = v151;
    char v168 = v146;
    unint64_t v169 = v152;
    if (v153) {
      operator delete(v153);
    }
  }
  else
  {
    *(void *)char v136 = &unk_669470;
    char v146 = v136 + 8;
  }
  char v168 = v146;
  char v170 = &unk_669370;
  sub_4541A8(&unk_660B10, (uint64_t)v166);
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v235)
  {
    char v236 = v235;
    operator delete(v235);
  }
  if (v244)
  {
    char v245 = v244;
    operator delete(v244);
  }
  if (v241)
  {
    v242 = v241;
    operator delete(v241);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v287)
  {
    v288 = v287;
    operator delete(v287);
  }
  if (*((void *)&v285 + 1))
  {
    int v286 = (void *)*((void *)&v285 + 1);
    operator delete(*((void **)&v285 + 1));
  }
  if (v256)
  {
    int v257 = v256;
    operator delete(v256);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (v224) {
    operator delete(v224);
  }
  sub_72960((uint64_t)v166);
  return sub_72960((uint64_t)&v157);
}

void sub_455F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  STACK[0x340] = v33;
  sub_72620((void ***)&STACK[0x340]);
  sub_726A4((void *)(v34 - 176));
  __cxa_guard_abort(&qword_6694A8);
  sub_726A4(&STACK[0x420]);
  sub_726A4(&STACK[0x460]);
  sub_726A4(&STACK[0x4A0]);
  sub_726A4((void *)(v34 - 112));
  sub_726A4(&STACK[0x4E0]);
  if (STACK[0x3C0]) {
    operator delete((void *)STACK[0x3C0]);
  }
  sub_72960((uint64_t)&a33);
  sub_72960((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_4565D8(void *a1)
{
  *a1 = off_63FC08;
  sub_72960((uint64_t)(a1 + 1));

  operator delete();
}

void *sub_45663C(void *a1)
{
  *a1 = off_63FC08;
  sub_72960((uint64_t)(a1 + 1));
  return a1;
}

void *sub_456680(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 4 * a3;
    uint64_t v7 = a1;
    do
    {
      AudioObjectID v8 = operator new(0x18uLL);
      void v8[4] = *(_DWORD *)(a2 + 4 * v5);
      *(void *)AudioObjectID v8 = v7;
      *((void *)v8 + 1) = a1;
      *((void *)v7 + 1) = v8;
      *a1 = v8;
      a1[2] = ++v5;
      uint64_t v7 = v8;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_456700(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

void sub_456714(uint64_t *a1, uint64_t *a2, int *a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a4 + 8); i != a4; uint64_t i = *(void *)(i + 8))
  {
    int v9 = *(_DWORD *)(i + 16);
    if (v9 > 1935827811)
    {
      if (v9 == 1935827812)
      {
LABEL_9:
        sub_72384((uint64_t)&v10, 1650811245, *a2, v9, 0, (uint64_t)&qword_669100);
        sub_4569C4(a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      if (v9 == 1937007986)
      {
        sub_72384((uint64_t)&v10, 1937007986, *a2, 1937007986, 0, (uint64_t)&qword_669118);
        sub_4569C4(a1, (uint64_t)&v10);
        goto LABEL_10;
      }
    }
    else
    {
      if (v9 == 1668441188) {
        goto LABEL_9;
      }
      if (v9 == 1869442665)
      {
        sub_72384((uint64_t)&v10, *a3, *a2, 1869442665, -1, a2[1]);
        sub_4569C4(a1, (uint64_t)&v10);
LABEL_10:
        if (__p)
        {
          uint64_t v14 = __p;
          operator delete(__p);
        }
        if (v11)
        {
          unint64_t v12 = v11;
          operator delete(v11);
        }
      }
    }
  }
}

void sub_456890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_4568C8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = sub_66F48(v7, v11);
    unint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      UInt32 v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    UInt32 v18 = v9;
    uint64_t v19 = v16;
LABEL_17:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *unint64_t v12 = &v9[v17];
  return result;
}

uint64_t sub_4569C4(uint64_t *a1, uint64_t a2)
{
  CFTypeID v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 6;
    if ((unint64_t)(v9 + 1) >> 58) {
      sub_60548();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    UInt32 v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_72AB8(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + (v9 << 6);
    unint64_t v17 = v12 + (v13 << 6);
    sub_456AD8(v15, a2);
    uint64_t v16 = v15 + 64;
    sub_72B8C(a1, &v14);
    uint64_t v8 = a1[1];
    uint64_t result = sub_72C60((uint64_t)&v14);
  }
  else
  {
    uint64_t result = sub_456AD8(a1[1], a2);
    uint64_t v8 = v6 + 64;
    a1[1] = v6 + 64;
  }
  a1[1] = v8;
  return result;
}

void sub_456AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_456AD8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_46B38((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_46B38((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_456B58(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_456B74(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  sub_2417C(&v26, *(_DWORD *)a2);
  uint64_t v4 = std::string::insert(&v26, 0, "ID: ", 4uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = std::string::append(&v27, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v29 = v6->__r_.__value_.__r.__words[2];
  long long v28 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0) {
    uint64_t v8 = (const std::string::value_type *)&v28;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)v28;
  }
  if (v29 >= 0) {
    std::string::size_type v9 = HIBYTE(v29);
  }
  else {
    std::string::size_type v9 = *((void *)&v28 + 1);
  }
  std::string::append(a1, v8, v9);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  CFStringRef v10 = *(const __CFString **)(a2 + 56);
  CFStringRef theString = v10;
  char v25 = *(unsigned char *)(a2 + 64);
  if (v25 && v10)
  {
    CFRetain(v10);
    CFStringRef v10 = theString;
  }
  sub_21B7C(&v26, v10);
  uint64_t v11 = std::string::insert(&v26, 0, "name: ", 6uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v27, "; ", 2uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v29 = v13->__r_.__value_.__r.__words[2];
  long long v28 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0) {
    uint64_t v15 = (const std::string::value_type *)&v28;
  }
  else {
    uint64_t v15 = (const std::string::value_type *)v28;
  }
  if (v29 >= 0) {
    std::string::size_type v16 = HIBYTE(v29);
  }
  else {
    std::string::size_type v16 = *((void *)&v28 + 1);
  }
  std::string::append(a1, v15, v16);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  sub_72924((uint64_t)&theString);
  sub_2417C(&v26, *(_DWORD *)(a2 + 4));
  unint64_t v17 = std::string::insert(&v26, 0, "type: ", 6uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v27, "; ", 2uLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v29 = v19->__r_.__value_.__r.__words[2];
  long long v28 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0) {
    uint64_t v21 = (const std::string::value_type *)&v28;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)v28;
  }
  if (v29 >= 0) {
    std::string::size_type v22 = HIBYTE(v29);
  }
  else {
    std::string::size_type v22 = *((void *)&v28 + 1);
  }
  std::string::append(a1, v21, v22);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, "]", 1uLL);
}

void sub_456E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 + 23) < 0) {
    operator delete(*(void **)v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_456EFC(uint64_t *a1, int *a2, int *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v6 = a1 + 2;
    do
    {
      int v7 = *v4;
      uint64_t v8 = (char *)operator new(0x60uLL);
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(void *)uint64_t v8 = off_640120;
      sub_45719C((uint64_t)&v26, v7);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = &v21;
      char v25 = 0;
      uint64_t v21 = (char *)operator new(0x40uLL);
      uint64_t v22 = (uint64_t)v21;
      uint64_t v23 = v21 + 64;
      uint64_t v22 = sub_726E8((uint64_t)&v26, (uint64_t)&v33, (uint64_t)v21);
      sub_72890((uint64_t)(v8 + 24), v7, 1735291491, 0, (uint64_t *)&v21);
      uint64_t v24 = &v21;
      sub_72620((void ***)&v24);
      if (__p)
      {
        unint64_t v32 = __p;
        operator delete(__p);
      }
      if (v27)
      {
        long long v28 = v27;
        operator delete(v27);
      }
      sub_23B86C((uint64_t)(v8 + 80), *((_DWORD *)v8 + 7));
      *(void *)&long long v9 = v8 + 24;
      *((void *)&v9 + 1) = v8;
      uint64_t v11 = (_OWORD *)a1[1];
      unint64_t v10 = a1[2];
      if ((unint64_t)v11 >= v10)
      {
        long long v20 = v9;
        uint64_t v13 = ((uint64_t)v11 - *a1) >> 4;
        if ((unint64_t)(v13 + 1) >> 60) {
          sub_60548();
        }
        uint64_t v14 = v10 - *a1;
        uint64_t v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        UInt32 v30 = v6;
        unint64_t v17 = (char *)sub_10724(v16);
        long long v18 = &v17[16 * v13];
        std::string v26 = v17;
        std::string v27 = v18;
        int64_t v29 = &v17[16 * v19];
        *(_OWORD *)long long v18 = v20;
        long long v28 = v18 + 16;
        sub_FBB48(a1, &v26);
        long long v12 = (_OWORD *)a1[1];
        sub_98E24((uint64_t)&v26);
      }
      else
      {
        _OWORD *v11 = v9;
        long long v12 = v11 + 1;
      }
      a1[1] = (uint64_t)v12;
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_457110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4636C(v3);
  sub_74004((void ***)va);
  _Unwind_Resume(a1);
}

void sub_45719C(uint64_t a1, int a2)
{
  __int32 v4 = a2;
  sub_72300(__p, &v4, 1);
  sub_72424(a1, a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_4571FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_457218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a2 + 4)) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == v6) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v8 = sub_4573CC(*(_DWORD *)(v5 + 36));
    int v9 = *(unsigned __int8 *)(a2 + 4);
    if ((v8 & 0xFF00000000) == 0 || v9 == 0)
    {
      if (((v8 & 0xFF00000000) != 0) == (v9 != 0)) {
        goto LABEL_13;
      }
    }
    else if (*(float *)a2 == *(float *)&v8)
    {
      goto LABEL_13;
    }
    v5 += 64;
  }
  while (v5 != v6);
  uint64_t v5 = v6;
LABEL_13:
  if (v5 == *(void *)(a1 + 40)) {
LABEL_14:
  }
    uint64_t v5 = 0;
  if (!*(unsigned char *)(a3 + 4)) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  if (v11 != v12)
  {
    while (*(_DWORD *)(v11 + 32) != *(_DWORD *)a3)
    {
      v11 += 64;
      if (v11 == v12) {
        goto LABEL_27;
      }
    }
  }
  if (v11 == v12)
  {
LABEL_27:
    uint64_t v11 = 0;
    if (v5) {
      goto LABEL_22;
    }
    return v11;
  }
  if (!v5) {
    return v11;
  }
LABEL_22:
  if (v11)
  {
    if (v5 != v11)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(13);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          int v16 = 136315394;
          unint64_t v17 = "SubPort.cpp";
          __int16 v18 = 1024;
          int v19 = 253;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Config mismatch.\"", (uint8_t *)&v16, 0x12u);
        }
      }
    }
  }
  return v5;
}

uint64_t sub_4573CC(int a1)
{
  int v1 = a1 + 1;
  if ((a1 + 1) >= 3)
  {
    __int32 v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "SubPort.cpp";
      __int16 v9 = 1024;
      int v10 = 48;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected case in switch\"", (uint8_t *)&v7, 0x12u);
    }
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v2 = qword_596880[v1];
    uint64_t v3 = qword_596898[v1];
  }
  return v3 | v2;
}

uint64_t sub_4574BC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 4))
  {
    v7[0] = 0;
    void v7[4] = 0;
    uint64_t result = sub_457218(a1, (uint64_t)v7, a2);
    goto LABEL_10;
  }
  uint64_t result = *(void *)(a1 + 32);
  __int32 v4 = *(unsigned int **)(a1 + 40);
  if ((unint64_t)v4 - result < 0x41 || result == (void)v4)
  {
LABEL_10:
    uint64_t v6 = (unsigned int *)result;
    if (!result) {
      return result;
    }
    return *v6;
  }
  uint64_t v6 = (unsigned int *)result;
  while (v6[8] != 1869442665)
  {
    v6 += 16;
    if (v6 == v4) {
      goto LABEL_10;
    }
  }
  return *v6;
}

void *sub_457544(void *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 != a3)
  {
    while (*(_DWORD *)a2 != a4)
    {
      a2 += 64;
      if (a2 == a3) {
        goto LABEL_7;
      }
    }
  }
  if (a2 == a3)
  {
LABEL_7:
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    return sub_46B38(result, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return result;
}

BOOL sub_457598(uint64_t a1, int a2, int *a3, int *a4)
{
  sub_457544(v11, *(void *)(a1 + 32), *(void *)(a1 + 40), a2);
  int v7 = (void *)v11[0];
  if (v11[0] == v11[1]
    || *((unsigned char *)a3 + 4)
    && (v14 = *a3, v15 = 1, LOBYTE(v12) = 0, char v13 = 0, !sub_457218(a1, (uint64_t)&v14, (uint64_t)&v12)))
  {
    BOOL v8 = 0;
  }
  else
  {
    BOOL v8 = 1;
    if (*((unsigned char *)a4 + 4))
    {
      int v9 = *a4;
      LOBYTE(v14) = 0;
      char v15 = 0;
      int v12 = v9;
      char v13 = 1;
      BOOL v8 = sub_457218(a1, (uint64_t)&v14, (uint64_t)&v12) != 0;
    }
  }
  if (v7) {
    operator delete(v7);
  }
  return v8;
}

void sub_457670(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_457688(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v2) {
    sub_4636C(v2);
  }
}

void *sub_4576A0(void *result)
{
  if (!result[2])
  {
    int v1 = result;
    uint64_t v2 = result[1];
    uint64_t v4 = 0x676C6F626470656CLL;
    int v5 = 0;
    v8[0] = off_63FC78;
    v8[1] = v2;
    _DWORD v8[3] = v8;
    v7[0] = off_63FCC0;
    v7[1] = v2;
    uint64_t v7[3] = v7;
    sub_FF0AC(&v6, v2, (int *)&v4, (uint64_t)v8, (uint64_t)v7);
    uint64_t v3 = (std::__shared_weak_count *)v1[3];
    *((_OWORD *)v1 + 1) = v6;
    if (v3) {
      sub_4636C(v3);
    }
    sub_4F750(v7);
    return sub_4F750(v8);
  }
  return result;
}

void sub_457790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_4F750((uint64_t *)va);
  sub_4F750((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_4577AC(uint64_t a1)
{
  int v7 = 0;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t)))(*(void *)v2 + 160))(v2, sub_459D64);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = 0x676C6F626470656CLL;
  int v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, int *))(*(void *)v3 + 48))(v3, &v5, 0, 0, 4, &v7);
}

uint64_t sub_457864(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_63FCC0;
  a2[1] = v2;
  return result;
}

void *sub_457888(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_63FCC0;
  result[1] = v3;
  return result;
}

void sub_4578D0()
{
}

uint64_t sub_4578E8(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), void))(*(void *)v2 + 152))(v2, sub_459D64, *(void *)(a1 + 8));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_298DA4() + 168);

  return v3();
}

uint64_t sub_457980(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_63FC78;
  a2[1] = v2;
  return result;
}

void *sub_4579A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_63FC78;
  result[1] = v3;
  return result;
}

void sub_4579EC()
{
}

void sub_457A04(void *a1)
{
  *a1 = off_63FC40;
  int v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_4636C(v1);
  }

  operator delete();
}

void *sub_457A70(void *a1)
{
  *a1 = off_63FC40;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_4636C(v2);
  }
  return a1;
}

uint64_t sub_457ABC(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886613860)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v13 = "Device_Squid_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 73;
      __int16 v16 = 2080;
      unint64_t v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v13 = "Device_Squid_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 74;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_457C74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_457C90(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 0))
  {
    operator new();
  }
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  uint64_t v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "Device_Squid_Aspen.cpp";
      __int16 v7 = 1024;
      int v8 = 47;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HDMI input device has no input streams.\"", (uint8_t *)&buf, 0x12u);
    }
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "HDMI input device has no input streams.");
}

void sub_4580A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

void sub_458174(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_4581B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
    if (result)
    {
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)a1 + 48);
      return v9(a1, a2, 0, 0, a3, a4);
    }
  }
  return result;
}

uint64_t sub_458294(uint64_t a1)
{
  uint64_t v6 = 0x6F75747054684277;
  int v7 = 0;
  uint64_t v4 = 0x6F75747050504277;
  int v5 = 0;
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v6);
  uint64_t result = 0;
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v4);
  }
  return result;
}

BOOL sub_45833C(uint64_t a1)
{
  sub_2504FC(&v11, a1, COERCE_DOUBLE(1735159650));
  if (v12)
  {
    CFDictionaryRef v1 = v11;
    if (!v11)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFStringRef v2 = CFStringCreateWithBytes(0, (const UInt8 *)"kBluetoothAudioDeviceFeatureHearingAssistCapability", 51, 0x8000100u, 0);
    if (!v2)
    {
      int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
    }
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v1, v2);
    CFRelease(v2);
    if (Value)
    {
      __int16 v4 = sub_20610(Value);
      int v5 = HIBYTE(v4);
    }
    else
    {
      int v5 = 0;
      LOBYTE(v4) = 0;
    }
    unsigned int v9 = v4 | (v5 << 8);
    if (v9 <= 0x100) {
      LOBYTE(v9) = 0;
    }
    BOOL v6 = v9 != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  sub_7E2E8((uint64_t)&v11);
  return v6;
}

uint64_t sub_4584EC(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  if (a2)
  {
    int v5 = v4();
    if (v5)
    {
LABEL_3:
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, v6);
        uint64_t v9 = v8;
        if (v8)
        {
          strcpy(buf, "spatbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          uint64_t v10 = sub_99A40(v8);
          *((void *)&v12 + 1) = v11;
          *(void *)&long long v12 = v10;
          if (((v12 >> 32) & 0xFF00000000) == 0 || HIDWORD(v10) == 0)
          {
            unsigned int v14 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v9 + 112))(v9, buf);
            if (v14)
            {
              uint64_t v22 = (os_log_t *)sub_32A48(17);
              uint64_t v23 = *v22;
              if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
              {
                sub_2417C(__p, v14);
                if (v28 >= 0) {
                  uint64_t v24 = __p;
                }
                else {
                  uint64_t v24 = (void **)__p[0];
                }
                char v25 = "input";
                *(void *)&v37[4] = "PhysicalDeviceUtilities.cpp";
                *(_DWORD *)uint64_t v37 = 136315906;
                __int16 v38 = 1024;
                if (a2) {
                  char v25 = "output";
                }
                int v39 = 170;
                __int16 v40 = 2080;
                uint64_t v41 = v24;
                __int16 v42 = 2080;
                unint64_t v43 = v25;
                _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d error '%s' getting current stream format, returning 0 non tapstream %s channels", v37, 0x26u);
                if (v28 < 0) {
                  operator delete(__p[0]);
                }
              }
              return 0;
            }
            uint64_t v7 = (*(_DWORD *)v34 + v7);
          }
        }
        uint64_t v6 = (v6 + 1);
        if (v5 == v6)
        {
          int v15 = (os_log_t *)sub_32A48(17);
          __int16 v16 = *v15;
          if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_INFO))
          {
            if (a2) {
              unint64_t v17 = "output";
            }
            else {
              unint64_t v17 = "input";
            }
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 128))(v37, a1);
            *(_DWORD *)int buf = 136316162;
            *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
            __int16 v30 = 1024;
            int v31 = 179;
            __int16 v32 = 2080;
            uint64_t v33 = v17;
            *(_WORD *)uint64_t v34 = 2112;
            *(void *)&_DWORD v34[2] = *(void *)v37;
            __int16 v35 = 1024;
            int v36 = v7;
            _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Non tapstream %s channel count for device %@: %d", buf, 0x2Cu);
            sub_72924((uint64_t)v37);
          }
          return v7;
        }
      }
    }
  }
  else
  {
    int v18 = v4();
    int v5 = v18 - (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1) & 0xFF00000000) != 0);
    if (v5) {
      goto LABEL_3;
    }
  }
  int v19 = (os_log_t *)sub_32A48(17);
  long long v20 = *v19;
  if (!*v19) {
    return 0;
  }
  uint64_t v7 = 0;
  if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v21 = "output";
    }
    else {
      uint64_t v21 = "input";
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 128))(v37, a1);
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
    __int16 v30 = 1024;
    int v31 = 156;
    __int16 v32 = 2080;
    uint64_t v33 = v21;
    *(_WORD *)uint64_t v34 = 2112;
    *(void *)&_DWORD v34[2] = *(void *)v37;
    _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Non tapstream %s stream count is zero for device %@", buf, 0x26u);
    sub_72924((uint64_t)v37);
    return 0;
  }
  return v7;
}

void sub_458938(unint64_t a1, double *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 2;
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          unint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*v10 < *(double *)v11)
                {
                  long long v84 = *(_OWORD *)v11;
                  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = v84;
                }
                break;
              case 3uLL:
                sub_1E54E4((double *)v11, (double *)(v11 + 16), a2 - 2);
                break;
              case 4uLL:
                sub_1E5588((double *)v11, (double *)(v11 + 16), (double *)(v11 + 32), (unint64_t *)a2 - 2);
                break;
              case 5uLL:
                int v36 = (long long *)(v11 + 16);
                uint64_t v37 = (long long *)(v11 + 32);
                __int16 v38 = (long long *)(v11 + 48);
                sub_1E5588((double *)v11, (double *)(v11 + 16), (double *)(v11 + 32), (unint64_t *)(v11 + 48));
                if (*v10 < *(double *)(v11 + 48))
                {
                  long long v39 = *v38;
                  long long *v38 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = v39;
                  if (*(double *)v38 < *(double *)v37)
                  {
                    long long v40 = *v37;
                    *uint64_t v37 = *v38;
                    long long *v38 = v40;
                    if (*(double *)v37 < *(double *)v36)
                    {
                      long long v41 = *v36;
                      *int v36 = *v37;
                      *uint64_t v37 = v41;
                      if (*(double *)(v11 + 16) < *(double *)v11)
                      {
                        long long v85 = *(_OWORD *)v11;
                        *(_OWORD *)unint64_t v11 = *v36;
                        *int v36 = v85;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            __int16 v42 = (double *)(v11 + 16);
            BOOL v44 = (double *)v11 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                unint64_t v46 = v11;
                do
                {
                  uint64_t v47 = v42;
                  double v48 = *(double *)(v46 + 16);
                  if (v48 < *(double *)v46)
                  {
                    uint64_t v49 = *(void *)(v46 + 24);
                    uint64_t v50 = v45;
                    while (1)
                    {
                      *(_OWORD *)(v11 + v50 + 16) = *(_OWORD *)(v11 + v50);
                      if (!v50) {
                        break;
                      }
                      double v51 = *(double *)(v11 + v50 - 16);
                      v50 -= 16;
                      if (v48 >= v51)
                      {
                        uint64_t v52 = v11 + v50 + 16;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v52 = v11;
LABEL_81:
                    *(double *)uint64_t v52 = v48;
                    *(void *)(v52 + 8) = v49;
                  }
                  __int16 v42 = v47 + 2;
                  v45 += 16;
                  unint64_t v46 = (unint64_t)v47;
                }
                while (v47 + 2 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                unint64_t v77 = (unint64_t)v42;
                double v78 = *(double *)(a1 + 16);
                if (v78 < *(double *)a1)
                {
                  uint64_t v79 = *(void *)(a1 + 24);
                  UInt32 v80 = v42;
                  do
                  {
                    *(_OWORD *)UInt32 v80 = *((_OWORD *)v80 - 1);
                    double v81 = *(v80 - 4);
                    v80 -= 2;
                  }
                  while (v78 < v81);
                  *UInt32 v80 = v78;
                  *((void *)v80 + 1) = v79;
                }
                v42 += 2;
                a1 = v77;
              }
              while ((double *)(v77 + 16) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((double *)v11 != a2)
            {
              int64_t v53 = (v13 - 2) >> 1;
              int64_t v54 = v53;
              do
              {
                int64_t v55 = v54;
                if (v53 >= v54)
                {
                  uint64_t v56 = (2 * v54) | 1;
                  int v57 = (double *)(v11 + 16 * v56);
                  if (2 * v55 + 2 < (uint64_t)v13 && *v57 < v57[2])
                  {
                    v57 += 2;
                    uint64_t v56 = 2 * v55 + 2;
                  }
                  unint64_t v58 = (double *)(v11 + 16 * v55);
                  double v59 = *v58;
                  if (*v57 >= *v58)
                  {
                    uint64_t v60 = *((void *)v58 + 1);
                    do
                    {
                      uint64_t v61 = v58;
                      unint64_t v58 = v57;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v57;
                      if (v53 < v56) {
                        break;
                      }
                      uint64_t v62 = 2 * v56;
                      uint64_t v56 = (2 * v56) | 1;
                      int v57 = (double *)(v11 + 16 * v56);
                      uint64_t v63 = v62 + 2;
                      if (v63 < (uint64_t)v13 && *v57 < v57[2])
                      {
                        v57 += 2;
                        uint64_t v56 = v63;
                      }
                    }
                    while (*v57 >= v59);
                    *unint64_t v58 = v59;
                    *((void *)v58 + 1) = v60;
                  }
                }
                int64_t v54 = v55 - 1;
              }
              while (v55);
              uint64_t v64 = (unint64_t)v12 >> 4;
              do
              {
                uint64_t v65 = 0;
                long long v86 = *(_OWORD *)v11;
                unint64_t v66 = (double *)v11;
                do
                {
                  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v66;
                  v66 += 2 * v65 + 2;
                  uint64_t v68 = 2 * v65;
                  uint64_t v65 = (2 * v65) | 1;
                  uint64_t v69 = v68 + 2;
                  if (v69 < v64 && *v66 < v66[2])
                  {
                    v66 += 2;
                    uint64_t v65 = v69;
                  }
                  *(_OWORD *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = *(_OWORD *)v66;
                }
                while (v65 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                a2 -= 2;
                if (v66 == a2)
                {
                  *(_OWORD *)unint64_t v66 = v86;
                }
                else
                {
                  *(_OWORD *)unint64_t v66 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v86;
                  uint64_t v70 = (uint64_t)v66 - v11 + 16;
                  if (v70 >= 17)
                  {
                    unint64_t v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                    unint64_t v72 = (double *)(v11 + 16 * v71);
                    double v73 = *v66;
                    if (*v72 < *v66)
                    {
                      uint64_t v74 = *((void *)v66 + 1);
                      do
                      {
                        uint32_t v75 = v66;
                        unint64_t v66 = v72;
                        *(_OWORD *)uint32_t v75 = *(_OWORD *)v72;
                        if (!v71) {
                          break;
                        }
                        unint64_t v71 = (v71 - 1) >> 1;
                        unint64_t v72 = (double *)(v11 + 16 * v71);
                      }
                      while (*v72 < v73);
                      double *v66 = v73;
                      *((void *)v66 + 1) = v74;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          int v15 = (double *)(v11 + 16 * (v13 >> 1));
          if ((unint64_t)v12 >= 0x801)
          {
            sub_1E54E4((double *)a1, (double *)(a1 + 16 * (v13 >> 1)), a2 - 2);
            sub_1E54E4((double *)(a1 + 16), v15 - 2, a2 - 4);
            sub_1E54E4((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v14), a2 - 6);
            sub_1E54E4(v15 - 2, v15, (double *)(a1 + 16 + 16 * v14));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(_OWORD *)int v15 = v82;
          }
          else
          {
            sub_1E54E4((double *)(a1 + 16 * (v13 >> 1)), (double *)a1, a2 - 2);
          }
          --a3;
          double v16 = *(double *)a1;
          if ((a4 & 1) != 0 || *(double *)(a1 - 16) < v16) {
            break;
          }
          if (v16 >= *v10)
          {
            unint64_t v30 = a1 + 16;
            do
            {
              unint64_t v11 = v30;
              if (v30 >= (unint64_t)a2) {
                break;
              }
              v30 += 16;
            }
            while (v16 >= *(double *)v11);
          }
          else
          {
            unint64_t v11 = a1;
            do
            {
              double v29 = *(double *)(v11 + 16);
              v11 += 16;
            }
            while (v16 >= v29);
          }
          int v31 = a2;
          if (v11 < (unint64_t)a2)
          {
            int v31 = a2;
            do
            {
              double v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < v32);
          }
          uint64_t v33 = *(void *)(a1 + 8);
          while (v11 < (unint64_t)v31)
          {
            long long v83 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v31;
            *(_OWORD *)int v31 = v83;
            do
            {
              double v34 = *(double *)(v11 + 16);
              v11 += 16;
            }
            while (v16 >= v34);
            do
            {
              double v35 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < v35);
          }
          BOOL v4 = v11 - 16 >= a1;
          BOOL v5 = v11 - 16 == a1;
          if (v11 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v11 - 16);
          }
          a4 = 0;
          *(double *)(v11 - 16) = v16;
          *(void *)(v11 - 8) = v33;
        }
        uint64_t v17 = *(void *)(a1 + 8);
        unint64_t v18 = a1;
        do
        {
          unint64_t v19 = v18;
          double v20 = *(double *)(v18 + 16);
          v18 += 16;
        }
        while (v20 < v16);
        uint64_t v21 = a2;
        if (v19 == a1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v18 >= (unint64_t)v21) {
              break;
            }
            double v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
        else
        {
          do
          {
            double v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= v16);
        }
        unint64_t v11 = v18;
        if (v18 < (unint64_t)v21)
        {
          uint64_t v24 = v21;
          do
          {
            long long v25 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v24;
            *(_OWORD *)uint64_t v24 = v25;
            do
            {
              double v26 = *(double *)(v11 + 16);
              v11 += 16;
            }
            while (v26 < v16);
            do
            {
              double v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v11 < (unint64_t)v24);
        }
        if (v11 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v11 - 16);
        }
        *(double *)(v11 - 16) = v16;
        *(void *)(v11 - 8) = v17;
        if (v18 >= (unint64_t)v21) {
          break;
        }
LABEL_30:
        sub_458938(a1, v11 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = sub_459B38(a1, v11 - 16);
      if (sub_459B38(v11, (uint64_t)a2)) {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (double *)(v11 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

void sub_459068(double *a1, double *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 2;
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = ((char *)a2 - (char *)v11) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(a2 - 1) > v11[1])
                {
                  long long v88 = *(_OWORD *)v11;
                  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = v88;
                }
                break;
              case 3uLL:
                sub_4597C8(v11, v11 + 2, a2 - 2);
                break;
              case 4uLL:
                sub_45986C(v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(a2 - 2));
                break;
              case 5uLL:
                long long v40 = (long long *)(v11 + 2);
                long long v41 = (long long *)(v11 + 4);
                __int16 v42 = (long long *)(v11 + 6);
                sub_45986C(v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(v11 + 6));
                if (*(a2 - 1) > v11[7])
                {
                  long long v43 = *v42;
                  long long *v42 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = v43;
                  if (v11[7] > v11[5])
                  {
                    long long v44 = *v41;
                    long long *v41 = *v42;
                    long long *v42 = v44;
                    if (v11[5] > v11[3])
                    {
                      long long v45 = *v40;
                      long long *v40 = *v41;
                      long long *v41 = v45;
                      if (v11[3] > v11[1])
                      {
                        long long v89 = *(_OWORD *)v11;
                        *(_OWORD *)unint64_t v11 = *v40;
                        long long *v40 = v89;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            unint64_t v46 = v11 + 2;
            BOOL v48 = v11 == a2 || v46 == a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                uint64_t v50 = v11;
                do
                {
                  double v51 = v50[3];
                  double v52 = v50[1];
                  uint64_t v50 = v46;
                  if (v51 > v52)
                  {
                    double v53 = *v46;
                    uint64_t v54 = v49;
                    while (1)
                    {
                      *(_OWORD *)((char *)v11 + v54 + 16) = *(_OWORD *)((char *)v11 + v54);
                      if (!v54) {
                        break;
                      }
                      double v55 = *(double *)((char *)v11 + v54 - 8);
                      v54 -= 16;
                      if (v51 <= v55)
                      {
                        uint64_t v56 = (uint64_t)v11 + v54 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v56 = (uint64_t)v11;
LABEL_84:
                    *(double *)uint64_t v56 = v53;
                    *(double *)(v56 + 8) = v51;
                  }
                  unint64_t v46 = v50 + 2;
                  v49 += 16;
                }
                while (v50 + 2 != a2);
              }
            }
            else if (!v48)
            {
              do
              {
                double v81 = a1[3];
                double v82 = a1[1];
                a1 = v46;
                if (v81 > v82)
                {
                  double v83 = *v46;
                  long long v84 = v46;
                  do
                  {
                    *(_OWORD *)long long v84 = *((_OWORD *)v84 - 1);
                    double v85 = *(v84 - 3);
                    v84 -= 2;
                  }
                  while (v81 > v85);
                  *long long v84 = v83;
                  v84[1] = v81;
                }
                v46 += 2;
              }
              while (a1 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v57 = (v13 - 2) >> 1;
              int64_t v58 = v57;
              do
              {
                int64_t v59 = v58;
                if (v57 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  uint64_t v61 = &v11[2 * v60];
                  if (2 * v59 + 2 < (uint64_t)v13 && v61[1] > v61[3])
                  {
                    v61 += 2;
                    uint64_t v60 = 2 * v59 + 2;
                  }
                  uint64_t v62 = &v11[2 * v59];
                  double v63 = v62[1];
                  if (v61[1] <= v63)
                  {
                    uint64_t v64 = *(void *)v62;
                    do
                    {
                      uint64_t v65 = v62;
                      uint64_t v62 = v61;
                      *(_OWORD *)uint64_t v65 = *(_OWORD *)v61;
                      if (v57 < v60) {
                        break;
                      }
                      uint64_t v66 = 2 * v60;
                      uint64_t v60 = (2 * v60) | 1;
                      uint64_t v61 = &v11[2 * v60];
                      uint64_t v67 = v66 + 2;
                      if (v67 < (uint64_t)v13 && v61[1] > v61[3])
                      {
                        v61 += 2;
                        uint64_t v60 = v67;
                      }
                    }
                    while (v61[1] <= v63);
                    *(void *)uint64_t v62 = v64;
                    v62[1] = v63;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              uint64_t v68 = (unint64_t)v12 >> 4;
              do
              {
                uint64_t v69 = 0;
                long long v90 = *(_OWORD *)v11;
                uint64_t v70 = v11;
                do
                {
                  unint64_t v71 = v70;
                  v70 += 2 * v69 + 2;
                  uint64_t v72 = 2 * v69;
                  uint64_t v69 = (2 * v69) | 1;
                  uint64_t v73 = v72 + 2;
                  if (v73 < v68 && v70[1] > v70[3])
                  {
                    v70 += 2;
                    uint64_t v69 = v73;
                  }
                  *(_OWORD *)unint64_t v71 = *(_OWORD *)v70;
                }
                while (v69 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(_OWORD *)uint64_t v70 = v90;
                }
                else
                {
                  *(_OWORD *)uint64_t v70 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v90;
                  uint64_t v74 = (char *)v70 - (char *)v11 + 16;
                  if (v74 >= 17)
                  {
                    unint64_t v75 = (((unint64_t)v74 >> 4) - 2) >> 1;
                    unint64_t v76 = &v11[2 * v75];
                    double v77 = v70[1];
                    if (v76[1] > v77)
                    {
                      uint64_t v78 = *(void *)v70;
                      do
                      {
                        uint64_t v79 = v70;
                        uint64_t v70 = v76;
                        *(_OWORD *)uint64_t v79 = *(_OWORD *)v76;
                        if (!v75) {
                          break;
                        }
                        unint64_t v75 = (v75 - 1) >> 1;
                        unint64_t v76 = &v11[2 * v75];
                      }
                      while (v76[1] > v77);
                      *(void *)uint64_t v70 = v78;
                      v70[1] = v77;
                    }
                  }
                }
              }
              while (v68-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          int v15 = &v11[2 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x801)
          {
            sub_4597C8(a1, &a1[2 * (v13 >> 1)], a2 - 2);
            sub_4597C8(a1 + 2, v15 - 2, a2 - 4);
            sub_4597C8(a1 + 4, &a1[2 * v14 + 2], a2 - 6);
            sub_4597C8(v15 - 2, v15, &a1[2 * v14 + 2]);
            long long v86 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(_OWORD *)int v15 = v86;
          }
          else
          {
            sub_4597C8(&a1[2 * (v13 >> 1)], a1, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          double v16 = a1[1];
          if (*(a1 - 1) > v16) {
            goto LABEL_12;
          }
          if (v16 <= *(a2 - 1))
          {
            double v32 = a1 + 2;
            do
            {
              unint64_t v11 = v32;
              if (v32 >= a2) {
                break;
              }
              double v33 = v32[1];
              v32 += 2;
            }
            while (v16 <= v33);
          }
          else
          {
            unint64_t v30 = a1;
            do
            {
              unint64_t v11 = v30 + 2;
              double v31 = v30[3];
              v30 += 2;
            }
            while (v16 <= v31);
          }
          double v34 = a2;
          if (v11 < a2)
          {
            double v35 = a2;
            do
            {
              double v34 = v35 - 2;
              double v36 = *(v35 - 1);
              v35 -= 2;
            }
            while (v16 > v36);
          }
          double v37 = *a1;
          while (v11 < v34)
          {
            long long v87 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v34;
            *(_OWORD *)double v34 = v87;
            do
            {
              double v38 = v11[3];
              v11 += 2;
            }
            while (v16 <= v38);
            do
            {
              double v39 = *(v34 - 1);
              v34 -= 2;
            }
            while (v16 > v39);
          }
          BOOL v4 = v11 - 2 >= a1;
          BOOL v5 = v11 - 2 == a1;
          if (v11 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
          }
          a4 = 0;
          *(v11 - 2) = v37;
          *(v11 - 1) = v16;
        }
        double v16 = a1[1];
LABEL_12:
        double v17 = *a1;
        unint64_t v18 = a1;
        do
        {
          unint64_t v19 = v18;
          v18 += 2;
        }
        while (v19[3] > v16);
        double v20 = a2;
        if (v19 == a1)
        {
          double v23 = a2;
          while (v18 < v23)
          {
            uint64_t v21 = v23 - 2;
            double v24 = *(v23 - 1);
            v23 -= 2;
            if (v24 > v16) {
              goto LABEL_22;
            }
          }
          uint64_t v21 = v23;
        }
        else
        {
          do
          {
            uint64_t v21 = v20 - 2;
            double v22 = *(v20 - 1);
            v20 -= 2;
          }
          while (v22 <= v16);
        }
LABEL_22:
        unint64_t v11 = v18;
        if (v18 < v21)
        {
          long long v25 = v21;
          do
          {
            long long v26 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v25;
            *(_OWORD *)long long v25 = v26;
            do
            {
              double v27 = v11[3];
              v11 += 2;
            }
            while (v27 > v16);
            do
            {
              double v28 = *(v25 - 1);
              v25 -= 2;
            }
            while (v28 <= v16);
          }
          while (v11 < v25);
        }
        if (v11 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
        }
        *(v11 - 2) = v17;
        *(v11 - 1) = v16;
        if (v18 >= v21) {
          break;
        }
LABEL_33:
        sub_459068(a1, v11 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_45990C(a1, v11 - 2);
      if (sub_45990C(v11, a2)) {
        break;
      }
      if (!v29) {
        goto LABEL_33;
      }
    }
    a2 = v11 - 2;
    if (!v29) {
      continue;
    }
    break;
  }
}

double *sub_4597C8(double *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 <= result[1])
  {
    if (v4 > v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (a2[1] > result[1])
      {
        long long v7 = *(_OWORD *)result;
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      long long v8 = *(_OWORD *)result;
      *(_OWORD *)uint64_t result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (a3[1] <= a2[1]) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *(_OWORD *)result;
      *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

__n128 sub_45986C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_4597C8(a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] > *(double *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] > *(double *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] > a1[1])
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

BOOL sub_45990C(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > a1[1])
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return result;
    case 3:
      sub_4597C8(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_45986C(a1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 4), (uint64_t)(a2 - 2));
      return 1;
    case 5:
      double v16 = (long long *)(a1 + 2);
      double v17 = (long long *)(a1 + 4);
      unint64_t v18 = (long long *)(a1 + 6);
      sub_45986C(a1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 4), (uint64_t)(a1 + 6));
      if (*(a2 - 1) > a1[7])
      {
        long long v19 = *v18;
        *unint64_t v18 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v19;
        if (a1[7] > a1[5])
        {
          long long v20 = *v17;
          *double v17 = *v18;
          *unint64_t v18 = v20;
          if (a1[5] > a1[3])
          {
            long long v21 = *v16;
            *double v16 = *v17;
            *double v17 = v21;
            if (a1[3] > a1[1])
            {
              long long v22 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v16;
              *double v16 = v22;
            }
          }
        }
      }
      return 1;
    default:
      long long v7 = a1 + 4;
      sub_4597C8(a1, a1 + 2, a1 + 4);
      long long v8 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    double v11 = v8[1];
    if (v11 > v7[1])
    {
      uint64_t v12 = *(void *)v8;
      uint64_t v13 = v9;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v13 + 48) = *(_OWORD *)((char *)a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        double v14 = *(double *)((char *)a1 + v13 + 24);
        v13 -= 16;
        if (v11 <= v14)
        {
          uint64_t v15 = (uint64_t)a1 + v13 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v15 = (uint64_t)a1;
LABEL_13:
      *(void *)uint64_t v15 = v12;
      *(double *)(v15 + 8) = v11;
      if (++v10 == 8) {
        return v8 + 2 == a2;
      }
    }
    long long v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2) {
      return 1;
    }
  }
}

BOOL sub_459B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *long long v6 = v7;
      }
      return result;
    case 3:
      sub_1E54E4((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_1E5588((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1;
    case 5:
      double v17 = (long long *)(a1 + 16);
      unint64_t v18 = (long long *)(a1 + 32);
      long long v19 = (long long *)(a1 + 48);
      sub_1E5588((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a1 + 48));
      double v21 = *(double *)(a2 - 16);
      long long v20 = (long long *)(a2 - 16);
      if (v21 < *(double *)(a1 + 48))
      {
        long long v22 = *v19;
        *long long v19 = *v20;
        *long long v20 = v22;
        if (*(double *)v19 < *(double *)v18)
        {
          long long v23 = *v18;
          *unint64_t v18 = *v19;
          *long long v19 = v23;
          if (*(double *)v18 < *(double *)v17)
          {
            long long v24 = *v17;
            *double v17 = *v18;
            *unint64_t v18 = v24;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *double v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      long long v8 = (double *)(a1 + 32);
      sub_1E54E4((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        double v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(double *)uint64_t v16 = v12;
      *(void *)(v16 + 8) = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    long long v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_459D64(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
        __int16 v13 = 1024;
        int v14 = 274;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"RoutingHandlerAction passed clientData as NULL.\"", buf, 0x12u);
      }
    }
  }
  uint64_t v2 = sub_298DA4();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v2);
  uint64_t v4 = (os_log_t *)sub_32A48(10);
  long long v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    long long v6 = "disabled";
    if (v3) {
      long long v6 = "enabled";
    }
    long long v7 = "on";
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
    __int16 v13 = 1024;
    int v14 = 62;
    uint64_t v16 = v6;
    __int16 v15 = 2080;
    if (v3) {
      long long v7 = "off";
    }
    __int16 v17 = 2080;
    unint64_t v18 = v7;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Low Power Mode %s, turning %s always listening", buf, 0x26u);
  }
  int v11 = v3 ^ 1;
  strcpy(buf, "lepdbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  return (*(uint64_t (**)(uint64_t, unsigned char *, void, void, uint64_t, int *))(*(void *)a1 + 48))(a1, buf, 0, 0, 4, &v11);
}

uint64_t sub_459F60(int *a1, int *a2, void *a3)
{
  sub_B680(&v11, a3, "", 341);
  long long v5 = v12;
  if (v12 == &v11)
  {
    uint64_t v9 = 0;
  }
  else
  {
    int v6 = *a2;
    int v7 = *a1;
    do
    {
      uint64_t v8 = v5[2];
      v13[0] = v7;
      v13[1] = v6;
      void v13[2] = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v8 + 16))(v8, v13);
      if (v9) {
        break;
      }
      long long v5 = (uint64_t *)v5[1];
    }
    while (v5 != &v11);
  }
  sub_B8E4(&v11);
  return v9;
}

void sub_45A02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_45A040(int *a1, int *a2, void *a3)
{
  sub_B680(&v11, a3, "", 353);
  long long v5 = v12;
  if (v12 == &v11)
  {
    uint64_t v9 = 0;
  }
  else
  {
    int v6 = *a2;
    int v7 = *a1;
    do
    {
      uint64_t v8 = v5[2];
      v13[0] = v7;
      v13[1] = v6;
      void v13[2] = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v8 + 24))(v8, v13);
      if (v9) {
        break;
      }
      long long v5 = (uint64_t *)v5[1];
    }
    while (v5 != &v11);
  }
  sub_B8E4(&v11);
  return v9;
}

void sub_45A10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_45A120(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  sub_FF944(a1, a2);
  *(unsigned char *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  long long v5 = *(uint64_t **)(a1 + 96);
  uint64_t v4 = *(uint64_t **)(a1 + 104);
  if (v5 == v4) {
    return;
  }
  while (1)
  {
    unsigned int v6 = *(_DWORD *)*v5;
    if (sub_457598(*v5, v2, (int *)(a1 + 560), (int *)(a1 + 568))) {
      break;
    }
LABEL_19:
    v5 += 2;
    if (v5 == v4) {
      return;
    }
  }
  if (!*(unsigned char *)(a1 + 140) || *(_DWORD *)(a1 + 136) != v6)
  {
    if (*(unsigned char *)(a1 + 580))
    {
      int v7 = (os_log_t *)sub_32A48(23);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
        {
          sub_2417C(__p, *(_DWORD *)(a1 + 576));
          uint64_t v9 = __p;
          if (v17 < 0) {
            uint64_t v9 = (void **)__p[0];
          }
          *(_DWORD *)int buf = 136315650;
          long long v19 = "Port_MicrophoneBuiltIn_Aspen.cpp";
          __int16 v20 = 1024;
          int v21 = 230;
          __int16 v22 = 2080;
          long long v23 = v9;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Active sub-port client ID already exists %s.", buf, 0x1Cu);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v10 = (os_log_t *)sub_32A48(23);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
    {
      sub_2417C(__p, v6);
      double v12 = __p;
      if (v17 < 0) {
        double v12 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      long long v19 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v20 = 1024;
      int v21 = 231;
      __int16 v22 = 2080;
      long long v23 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting active sub-port client ID %s.", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    *(_DWORD *)(a1 + 576) = v6;
    *(unsigned char *)(a1 + 580) = 1;
    goto LABEL_19;
  }
  __int16 v13 = (os_log_t *)sub_32A48(23);
  int v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
  {
    sub_2417C(__p, v6);
    __int16 v15 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315650;
    long long v19 = "Port_MicrophoneBuiltIn_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 224;
    __int16 v22 = 2080;
    long long v23 = v15;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Found matching preferred client ID. Setting active sub-port client ID %s.", buf, 0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  *(_DWORD *)(a1 + 576) = v6;
  *(unsigned char *)(a1 + 580) = 1;
}

void sub_45A414(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1870033508)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(23);
    long long v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v13 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 391;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Looking up runtime override for built-in mic data sources", buf, 0x12u);
    }
    sub_162C24(a3);
    if (*a3 == a3[1])
    {
      unsigned int v6 = (os_log_t *)sub_32A48(13);
      int v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, 0x6F767264u);
        if (v11 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315906;
        __int16 v13 = "Port_MicrophoneBuiltIn_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 393;
        __int16 v16 = 2080;
        char v17 = v8;
        __int16 v18 = 1024;
        int v19 = 1870033508;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not translate data sources for sub-port ID:%s (%u)\"", buf, 0x22u);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Could not translate data sources for sub-port ID:%s (%u)");
    }
  }
  else
  {
    sub_FFD74(a1, a2, a3);
  }
}

void sub_45A63C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_45A678(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v1 = *(void *)(a1 + 104);
  if (v2 == v1) {
    return 0;
  }
  uint64_t v3 = v2 + 16;
  do
  {
    int v4 = *(_DWORD *)(*(void *)(v3 - 16) + 8);
    BOOL result = v4 == 1;
    BOOL v6 = v4 == 1 || v3 == v1;
    v3 += 16;
  }
  while (!v6);
  return result;
}

uint64_t sub_45A6B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4 = *(uint64_t **)(a1 + 96);
  long long v5 = *(uint64_t **)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_53;
  }
  do
  {
    uint64_t v9 = (int *)*v4;
    uint64_t v8 = (std::__shared_weak_count *)v4[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v10 = *v9;
      sub_4636C(v8);
      if (v10 == a2) {
        goto LABEL_8;
      }
    }
    else if (*v9 == a2)
    {
      goto LABEL_8;
    }
    v4 += 2;
  }
  while (v4 != v5);
  int v4 = v5;
LABEL_8:
  if (v4 == *(uint64_t **)(a1 + 104))
  {
LABEL_53:
    BOOL v29 = (os_log_t *)sub_32A48(13);
    unint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&__p, a2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315906;
      long long v41 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v42 = 1024;
      int v43 = 377;
      __int16 v44 = 1024;
      LODWORD(v45[0]) = a2;
      WORD2(v45[0]) = 2080;
      *(void *)((char *)v45 + 6) = p_p;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not find sub-port for id: %u (%s)\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Could not find sub-port for id: %u (%s)");
  }
  uint64_t v12 = *v4;
  char v11 = (std::__shared_weak_count *)v4[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12)
  {
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v13 = *(void *)(v12 + 40);
    if (v14 == v13) {
      goto LABEL_61;
    }
    uint64_t v15 = v14 + 64;
    do
    {
      int v16 = *(_DWORD *)(v15 - 32);
      BOOL v17 = v16 != 1852796517 || v15 == v13;
      v15 += 64;
    }
    while (!v17);
    if (v16 == 1852796517)
    {
LABEL_61:
      double v33 = (os_log_t *)sub_32A48(13);
      double v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        sub_456B74(&__p, v12);
        double v35 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)int buf = 136315650;
        long long v41 = "Port_MicrophoneBuiltIn_Aspen.cpp";
        __int16 v42 = 1024;
        int v43 = 362;
        __int16 v44 = 2080;
        v45[0] = v35;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Sub-port %s does not have any polar patterns\"", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      double v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v36, "Sub-port %s does not have any polar patterns");
    }
    else
    {
      if (*(int *)(v12 + 8) >= 2)
      {
        __int16 v18 = (os_log_t *)sub_32A48(23);
        int v19 = *v18;
        if (*v18)
        {
          if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
          {
            sub_456B74(&__p, v12);
            __int16 v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)int buf = 136315650;
            long long v41 = "Port_MicrophoneBuiltIn_Aspen.cpp";
            __int16 v42 = 1024;
            int v43 = 363;
            __int16 v44 = 2080;
            v45[0] = v20;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Accessing a sub-port that does not have client visibility: %s", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      if (*(unsigned char *)(a1 + 572))
      {
        a3 = *(unsigned int *)(a1 + 568);
        goto LABEL_49;
      }
      if (*(unsigned char *)(a3 + 4))
      {
        buf[0] = 0;
        LOBYTE(v41) = 0;
        uint64_t v21 = sub_457218(v12, a3, (uint64_t)buf);
        if (v21)
        {
          a3 = *(unsigned int *)(v21 + 32);
          goto LABEL_49;
        }
      }
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v23 = *(void *)(v12 + 40);
      if (v22 != v23)
      {
        uint64_t v24 = v22 + 64;
        do
        {
          int v25 = *(_DWORD *)(v24 - 32);
          BOOL v26 = v25 != 1852796517 || v24 == v23;
          v24 += 64;
        }
        while (!v26);
        if (v25 != 1852796517)
        {
          if ((unint64_t)(v23 - v22) >= 0x41)
          {
            uint64_t v27 = *(void *)(v12 + 32);
            while (*(_DWORD *)(v27 + 32) != 1869442665)
            {
              v27 += 64;
              if (v27 == v23) {
                goto LABEL_48;
              }
            }
            uint64_t v22 = v27;
          }
LABEL_48:
          a3 = *(unsigned int *)(v22 + 32);
          goto LABEL_49;
        }
      }
      double v37 = (os_log_t *)sub_32A48(13);
      double v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        long long v41 = "SubPort.cpp";
        __int16 v42 = 1024;
        int v43 = 189;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      double v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v36, "Precondition failure.");
    }
  }
LABEL_49:
  if (v11) {
    sub_4636C(v11);
  }
  if (!v12) {
    goto LABEL_53;
  }
  return a3;
}

void sub_45ABA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_45AC00(unsigned char *result)
{
  result[128] = 0;
  result[132] = 0;
  result[136] = 0;
  result[140] = 0;
  result[560] = 0;
  result[564] = 0;
  result[568] = 0;
  result[572] = 0;
  return result;
}

void sub_45AC24(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  int v10 = (os_log_t *)sub_32A48(23);
  char v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = &v54;
    sub_2417C(&v54, a3);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v12 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    uint64_t v13 = &v53;
    sub_4F64((uint64_t)&v53, (os_unfair_lock_t)(a1 + 8));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v13 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if (*(unsigned char *)(a4 + 4))
    {
      sub_2417C(__p, *(_DWORD *)a4);
      if (v52 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 307;
      __int16 v56 = 2080;
      int64_t v57 = v12;
      __int16 v58 = 2080;
      int64_t v59 = v13;
      __int16 v60 = 2080;
      uint64_t v61 = (const char *)v14;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting preferred sub-port: %s on port: %s with preferred polar pattern: %s", buf, 0x30u);
      if (v52 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 307;
      __int16 v56 = 2080;
      int64_t v57 = v12;
      __int16 v58 = 2080;
      int64_t v59 = v13;
      __int16 v60 = 2080;
      uint64_t v61 = "none";
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting preferred sub-port: %s on port: %s with preferred polar pattern: %s", buf, 0x30u);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
  sub_45B494(&v49, a3, *(void *)(a1 + 96), *(void *)(a1 + 104));
  uint64_t v15 = v49;
  if (!v49)
  {
    double v35 = (os_log_t *)sub_32A48(13);
    double v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v54, a3);
      int v37 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
      std::string::size_type v38 = v54.__r_.__value_.__r.__words[0];
      sub_2417C(&v53, *(_DWORD *)(a1 + 144));
      double v39 = &v54;
      if (v37 < 0) {
        double v39 = (std::string *)v38;
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v40 = &v53;
      }
      else {
        long long v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 314;
      __int16 v56 = 2080;
      int64_t v57 = v39;
      __int16 v58 = 2080;
      int64_t v59 = v40;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [subPort is NULL]: \"Attempt to set unknown sub-port (%s) preferred on port with type %s.\"", buf, 0x26u);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to set unknown sub-port (%s) preferred on port with type %s.");
  }
  if (*(unsigned char *)(a4 + 4))
  {
    buf[0] = 0;
    uint8_t buf[4] = 0;
    uint64_t v16 = sub_457218(v49, (uint64_t)buf, a4);
    if (!v16)
    {
      __int16 v42 = (os_log_t *)sub_32A48(13);
      int v43 = *v42;
      if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v54, *(_DWORD *)a4);
        int v44 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
        std::string::size_type v45 = v54.__r_.__value_.__r.__words[0];
        sub_456B74(&v53, v15);
        unint64_t v46 = &v54;
        if (v44 < 0) {
          unint64_t v46 = (std::string *)v45;
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v47 = &v53;
        }
        else {
          uint64_t v47 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 321;
        __int16 v56 = 2080;
        int64_t v57 = v46;
        __int16 v58 = 2080;
        int64_t v59 = v47;
        _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [config is NULL]: \"Invalid pattern %s for sub-port %s\"", buf, 0x26u);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
      }
      BOOL v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v48, "Invalid pattern %s for sub-port %s");
    }
    for (uint64_t i = *(_DWORD **)(v16 + 40); ; ++i)
    {
      if (i == *(_DWORD **)(v16 + 48))
      {
        unsigned int v18 = *(_DWORD *)a4;
        *(unsigned char *)(a1 + 572) = *(unsigned char *)(a4 + 4);
        *(_DWORD *)(a1 + 568) = v18;
        goto LABEL_26;
      }
      if (*i == a2) {
        break;
      }
    }
    uint64_t v27 = (os_log_t *)sub_32A48(23);
    double v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_INFO))
    {
      unsigned int v29 = *(_DWORD *)a4;
      unint64_t v30 = &v54;
      sub_2417C(&v54, v29);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v30 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      sub_456B74(&v53, v15);
      int v31 = SHIBYTE(v53.__r_.__value_.__r.__words[2]);
      std::string::size_type v32 = v53.__r_.__value_.__r.__words[0];
      sub_2417C(__p, a2);
      double v33 = &v53;
      if (v31 < 0) {
        double v33 = (std::string *)v32;
      }
      if (v52 >= 0) {
        double v34 = __p;
      }
      else {
        double v34 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 335;
      __int16 v56 = 2080;
      int64_t v57 = v30;
      __int16 v58 = 2080;
      int64_t v59 = v33;
      __int16 v60 = 2080;
      uint64_t v61 = (const char *)v34;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_INFO, "%25s:%-5d Ignoring set of polar pattern: %s on sub-port %s, because it is not allowed for the current mode: %s", buf, 0x30u);
      if (v52 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_26:
  *(_DWORD *)(a1 + 136) = a3;
  *(unsigned char *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 128) = sub_4574BC(v15, a1 + 568);
  *(unsigned char *)(a1 + 132) = 1;
  if (*(unsigned char *)(a1 + 572))
  {
    buf[0] = 0;
    uint8_t buf[4] = 0;
    uint64_t v19 = sub_457218(v15, (uint64_t)buf, a1 + 568);
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v15 + 32);
  uint64_t v26 = *(void *)(v15 + 40);
  if ((unint64_t)(v26 - v19) < 0x41 || v19 == v26)
  {
LABEL_28:
    uint64_t v20 = v19;
    if (!v19) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v20 = *(void *)(v15 + 32);
  while (*(_DWORD *)(v20 + 32) != 1869442665)
  {
    v20 += 64;
    if (v20 == v26) {
      goto LABEL_28;
    }
  }
LABEL_29:
  uint64_t v19 = sub_4573CC(*(_DWORD *)(v20 + 36));
LABEL_30:
  *(_DWORD *)(a1 + 560) = v19;
  *(unsigned char *)(a1 + 564) = BYTE4(v19);
  if (*(int *)(v15 + 8) >= 2)
  {
    uint64_t v21 = (os_log_t *)sub_32A48(23);
    uint64_t v22 = *v21;
    if (*v21)
    {
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
      {
        sub_456B74(&v54, v15);
        uint64_t v23 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v54
            : (std::string *)v54.__r_.__value_.__r.__words[0];
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 344;
        __int16 v56 = 2080;
        int64_t v57 = v23;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client has set a preferred sub-port that does not have client scope: %s", buf, 0x1Cu);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v24 = (_DWORD *)sub_10FBF0();
  int v25 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)int buf = *(void *)(a1 + 80);
  *(void *)&_DWORD buf[8] = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_110788(v24, 0x70707570u, (uint64_t *)buf, a5);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v50) {
    sub_4636C(v50);
  }
}

void sub_45B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a11) {
    sub_4636C(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_45B494(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    while (**(_DWORD **)a3 != a2)
    {
      a3 += 16;
      if (a3 == a4) {
        goto LABEL_4;
      }
    }
  }
  if (a3 == a4)
  {
LABEL_4:
    int v4 = (os_log_t *)sub_32A48(13);
    long long v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      if (v11 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v13 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 115;
      __int16 v16 = 2080;
      BOOL v17 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not find sub-port with client ID: %s for built-in mic port\"", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find sub-port with client ID: %s for built-in mic port");
  }
  *BOOL result = *(void *)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  result[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_45B618(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_45B634()
{
  return 1;
}

uint64_t sub_45B63C(uint64_t a1)
{
  return *(void *)(a1 + 560);
}

uint64_t sub_45B644(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  char v5 = 1;
  return sub_45B674(a1, a2, (int *)&v4);
}

uint64_t sub_45B674(uint64_t a1, int a2, int *a3)
{
  uint64_t v3 = (uint64_t **)(a1 + 96);
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    unint64_t v30 = (os_log_t *)sub_32A48(13);
    int v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v46 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v47 = 1024;
      int v48 = 249;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(unsigned char *)(a1 + 124))
  {
    double v33 = (os_log_t *)sub_32A48(13);
    double v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v46 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v47 = 1024;
      int v48 = 250;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }
    double v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v35, "Invariant failure.");
  }
  int v6 = 1;
  if (a2 <= 1987077986)
  {
    if (a2 == 1768057203) {
      goto LABEL_11;
    }
    int v7 = 1919776355;
  }
  else
  {
    if (a2 == 1987077987 || a2 == 1987081833) {
      goto LABEL_11;
    }
    int v7 = 1987081839;
  }
  if (a2 != v7) {
    int v6 = 0;
  }
LABEL_11:
  unsigned int v8 = *(_DWORD *)(a1 + 120);
  uint64_t v9 = (os_log_t *)sub_32A48(23);
  int v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
  {
    sub_2417C(__p, v8);
    char v11 = v44 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315906;
    unint64_t v46 = "Port_MicrophoneBuiltIn_Aspen.cpp";
    __int16 v47 = 1024;
    int v48 = 255;
    __int16 v49 = 1024;
    *(_DWORD *)uint64_t v50 = v8;
    *(_WORD *)&v50[4] = 2080;
    *(void *)&v50[6] = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_INFO, "%25s:%-5d Looking up client visible sub-port ID for %u (%s)", buf, 0x22u);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v6) {
    uint64_t v12 = (uint64_t **)(a1 + 528);
  }
  else {
    uint64_t v12 = v3;
  }
  sub_45BCE0(&v41, v8, v12, a1 + 576, a3, (int *)(a1 + 568));
  uint64_t v13 = v41;
  if (v41)
  {
    __int16 v14 = (os_log_t *)sub_32A48(23);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
    {
      sub_2417C(__p, *v13);
      int v16 = v44;
      BOOL v17 = (void **)__p[0];
      sub_2417C(v39, v8);
      unsigned int v18 = __p;
      if (v16 < 0) {
        unsigned int v18 = v17;
      }
      if (v40 >= 0) {
        uint64_t v19 = v39;
      }
      else {
        uint64_t v19 = (void **)v39[0];
      }
      *(_DWORD *)int buf = 136315906;
      unint64_t v46 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v47 = 1024;
      int v48 = 264;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = v18;
      *(_WORD *)&v50[8] = 2080;
      *(void *)&v50[10] = v19;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Returning client visible sub-port ID %s for active ID %s", buf, 0x26u);
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }
    unsigned int v20 = *v13;
  }
  else
  {
    if (v42) {
      sub_4636C(v42);
    }
    uint64_t v22 = 552;
    if (v6) {
      uint64_t v22 = 556;
    }
    unsigned int v23 = *(_DWORD *)(a1 + v22);
    buf[0] = 0;
    LOBYTE(v46) = 0;
    LOBYTE(__p[0]) = 0;
    BYTE4(__p[0]) = 0;
    LOBYTE(v39[0]) = 0;
    BYTE4(v39[0]) = 0;
    sub_45BCE0(&v41, v23, v12, (uint64_t)buf, (int *)__p, (int *)v39);
    if (!v41)
    {
      if (v42) {
        sub_4636C(v42);
      }
      double v36 = (os_log_t *)sub_32A48(13);
      int v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        unint64_t v46 = "Port_MicrophoneBuiltIn_Aspen.cpp";
        __int16 v47 = 1024;
        int v48 = 280;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not find client-visible sub-port for active ID or fallback.\"", buf, 0x12u);
      }
      std::string::size_type v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v38, "Could not find client-visible sub-port for active ID or fallback.");
    }
    unsigned int v20 = *v41;
    uint64_t v24 = (os_log_t *)sub_32A48(23);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_INFO))
    {
      sub_2417C(__p, v8);
      int v26 = v44;
      uint64_t v27 = (void **)__p[0];
      sub_2417C(v39, v20);
      double v28 = __p;
      if (v26 < 0) {
        double v28 = v27;
      }
      if (v40 >= 0) {
        unsigned int v29 = v39;
      }
      else {
        unsigned int v29 = (void **)v39[0];
      }
      *(_DWORD *)int buf = 136315906;
      unint64_t v46 = "Port_MicrophoneBuiltIn_Aspen.cpp";
      __int16 v47 = 1024;
      int v48 = 275;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = v28;
      *(_WORD *)&v50[8] = 2080;
      *(void *)&v50[10] = v29;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_INFO, "%25s:%-5d The current active sub-port (%s) is not client-visible. Substituting sub-port ID: %s", buf, 0x26u);
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v42) {
    sub_4636C(v42);
  }
  return v20 | 0x100000000;
}

void sub_45BC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_45BCE0(void *a1, unsigned int a2, uint64_t **a3, uint64_t a4, int *a5, int *a6)
{
  uint64_t v6 = a4;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  unint64_t v74 = 0;
  unsigned int v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 == v9)
  {
    uint64_t v24 = 0;
    unsigned int v23 = 0;
  }
  else
  {
    do
    {
      if (sub_457598(*v8, a2, a5, a6))
      {
        uint64_t v12 = v73;
        if ((unint64_t)v73 >= v74)
        {
          uint64_t v15 = ((uint64_t)v73 - v72) >> 4;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60) {
            sub_60548();
          }
          uint64_t v17 = v74 - v72;
          if ((uint64_t)(v74 - v72) >> 3 > v16) {
            unint64_t v16 = v17 >> 3;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          *(void *)&unsigned char buf[32] = &v74;
          uint64_t v19 = (char *)sub_10724(v18);
          unsigned int v20 = &v19[16 * v15];
          *(void *)int buf = v19;
          *(void *)&_DWORD buf[8] = v20;
          *(void *)&uint8_t buf[24] = &v19[16 * v21];
          long long v22 = *(_OWORD *)v8;
          *(_OWORD *)unsigned int v20 = *(_OWORD *)v8;
          if (*((void *)&v22 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&buf[16] = v20 + 16;
          sub_FBB48(&v72, buf);
          __int16 v14 = v73;
          sub_98E24((uint64_t)buf);
        }
        else
        {
          *uint64_t v73 = *v8;
          uint64_t v13 = v8[1];
          v12[1] = v13;
          if (v13) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
          }
          __int16 v14 = v12 + 2;
        }
        uint64_t v73 = v14;
      }
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v24 = v72;
    unsigned int v23 = v73;
    uint64_t v6 = a4;
  }
  uint64_t v25 = ((uint64_t)v23 - v24) >> 4;
  if (v25 == 1)
  {
    unsigned int v29 = (os_log_t *)sub_32A48(23);
    unint64_t v30 = *v29;
    if (!*v29 || !os_log_type_enabled(*v29, OS_LOG_TYPE_INFO)) {
      goto LABEL_105;
    }
    sub_2417C(__p, a2);
    int v31 = SHIBYTE(v77);
    std::string::size_type v32 = (void **)__p[0];
    sub_2417C(&v75, **(_DWORD **)v72);
    double v33 = __p;
    if (v31 < 0) {
      double v33 = v32;
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v34 = &v75;
    }
    else {
      double v34 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 146;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v33;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&unsigned char buf[30] = v34;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_INFO, "%25s:%-5d Found match for internal sub-port ID %s: %s.", buf, 0x26u);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
LABEL_103:
    if (SHIBYTE(v77) < 0) {
      operator delete(__p[0]);
    }
LABEL_105:
    uint64_t v56 = *(void *)(v72 + 8);
    *a1 = *(void *)v72;
    a1[1] = v56;
    if (!v56) {
      goto LABEL_107;
    }
LABEL_106:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_107;
  }
  if (!v25)
  {
    int v26 = (os_log_t *)sub_32A48(23);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a2);
      if (v77 >= 0) {
        double v28 = __p;
      }
      else {
        double v28 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 139;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v28;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not find match for internal sub-port ID %s.", buf, 0x1Cu);
      if (SHIBYTE(v77) < 0) {
        operator delete(__p[0]);
      }
    }
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_107;
  }
  double v35 = (os_log_t *)sub_32A48(23);
  double v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_INFO))
  {
    sub_2417C(v70, a2);
    if (v71 >= 0) {
      int v37 = v70;
    }
    else {
      int v37 = (void **)v70[0];
    }
    memset(&v69, 0, sizeof(v69));
    std::string::size_type v38 = (unsigned int **)v72;
    double v39 = (unsigned int **)v73;
    if ((uint64_t *)v72 == v73)
    {
      int v48 = &v69;
    }
    else
    {
      do
      {
        sub_2417C(&v75, **v38);
        char v40 = (unsigned int *)*(v73 - 2);
        BOOL v41 = *v38 == v40;
        BOOL v42 = *v38 != v40;
        if (v41) {
          int v43 = "";
        }
        else {
          int v43 = ", ";
        }
        char v44 = std::string::append(&v75, v43, 2 * v42);
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        int64_t v77 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v77 >= 0) {
          unint64_t v46 = __p;
        }
        else {
          unint64_t v46 = (void **)__p[0];
        }
        if (v77 >= 0) {
          std::string::size_type v47 = HIBYTE(v77);
        }
        else {
          std::string::size_type v47 = (std::string::size_type)__p[1];
        }
        std::string::append(&v69, (const std::string::value_type *)v46, v47);
        if (SHIBYTE(v77) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        v38 += 2;
      }
      while (v38 != v39);
      int v48 = &v69;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v48 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 161;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v37;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&unsigned char buf[30] = v48;
    _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_INFO, "%25s:%-5d Multiple matches found for internal sub-port ID %s: %s.", buf, 0x26u);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (v71 < 0) {
      operator delete(v70[0]);
    }
  }
  if (!*(unsigned char *)(v6 + 4))
  {
LABEL_97:
    double v63 = (os_log_t *)sub_32A48(23);
    uint64_t v64 = *v63;
    if (!*v63 || !os_log_type_enabled(*v63, OS_LOG_TYPE_INFO)) {
      goto LABEL_105;
    }
    sub_2417C(__p, **(_DWORD **)v72);
    if (v77 >= 0) {
      uint64_t v65 = __p;
    }
    else {
      uint64_t v65 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 181;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v65;
    _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_INFO, "%25s:%-5d Returning first matching sub-port %s.", buf, 0x1Cu);
    goto LABEL_103;
  }
  uint64_t v49 = v72;
  if ((uint64_t *)v72 != v73)
  {
    while (*(_DWORD *)v6 != **(_DWORD **)v49)
    {
      v49 += 16;
      if ((uint64_t *)v49 == v73)
      {
        uint64_t v49 = (uint64_t)v73;
        break;
      }
    }
  }
  if ((uint64_t *)v49 == a3[1])
  {
    int64_t v57 = (os_log_t *)sub_32A48(23);
    __int16 v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a2);
      int v59 = SHIBYTE(v77);
      __int16 v60 = (void **)__p[0];
      sub_2417C(&v75, *(_DWORD *)v6);
      uint64_t v61 = __p;
      if (v59 < 0) {
        uint64_t v61 = v60;
      }
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v62 = &v75;
      }
      else {
        uint64_t v62 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 177;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v61;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&unsigned char buf[30] = v62;
      _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to find match for internal sub-port ID %s using client ID %s.", buf, 0x26u);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77) < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_97;
  }
  uint64_t v50 = (os_log_t *)sub_32A48(23);
  double v51 = *v50;
  if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_INFO))
  {
    sub_2417C(__p, a2);
    int v52 = SHIBYTE(v77);
    std::string v53 = (void **)__p[0];
    sub_2417C(&v75, *(_DWORD *)v6);
    std::string v54 = __p;
    if (v52 < 0) {
      std::string v54 = v53;
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v55 = &v75;
    }
    else {
      double v55 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 171;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v54;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&unsigned char buf[30] = v55;
    _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_INFO, "%25s:%-5d Found match for internal sub-port ID %s using client ID %s.", buf, 0x26u);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77) < 0) {
      operator delete(__p[0]);
    }
  }
  *a1 = *(void *)v49;
  uint64_t v56 = *(void *)(v49 + 8);
  a1[1] = v56;
  if (v56) {
    goto LABEL_106;
  }
LABEL_107:
  *(void *)int buf = &v72;
  sub_74004((void ***)buf);
}

void sub_45C4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  std::string __p = &a25;
  sub_74004((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_45C5A0(uint64_t a1, int a2)
{
  LOBYTE(v3) = 0;
  char v4 = 0;
  return sub_45B674(a1, a2, &v3);
}

void sub_45C5CC(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  if (*a2 == 1668703084 || *a2 == 1668576377)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = a2[1];
    if (v4 <= 1987077986)
    {
      BOOL v5 = v4 == 1768057203;
      int v6 = 1919776355;
    }
    else
    {
      BOOL v5 = v4 == 1987077987 || v4 == 1987081833;
      int v6 = 1987081839;
    }
    if (v5 || v4 == v6) {
      unsigned int v8 = (__int32 ***)(a1 + 528);
    }
    else {
      unsigned int v8 = (__int32 ***)(a1 + 96);
    }
    sub_101A6C(a3, v4, *v8, v8[1]);
  }
}

void sub_45C664(uint64_t a1)
{
  *(void *)a1 = off_63FEF0;
  uint64_t v2 = (void **)(a1 + 528);
  sub_74004(&v2);
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_45C6E0(uint64_t a1)
{
  *(void *)a1 = off_63FEF0;
  int v3 = (void **)(a1 + 528);
  sub_74004(&v3);

  return sub_103C0C(a1);
}

uint64_t sub_45C748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v72 = 0uLL;
  unint64_t v73 = 0;
  unsigned int v8 = *(uint64_t **)a6;
  int v7 = *(uint64_t **)(a6 + 8);
  if (*(uint64_t **)a6 != v7)
  {
    do
    {
      sub_FB85C(&v74, *v8);
      uint64_t v9 = sub_32A48(23);
      if (*(unsigned char *)(v9 + 8))
      {
        int v10 = *(NSObject **)v9;
        if (*(void *)v9)
        {
          if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
          {
            sub_456B74(&__p, v74);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 87;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = p_p;
            _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding a sub-port %s", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      uint64_t v12 = *((void *)&v72 + 1);
      if (*((void *)&v72 + 1) >= v73)
      {
        uint64_t v15 = (uint64_t)(*((void *)&v72 + 1) - v72) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          sub_60548();
        }
        uint64_t v17 = v73 - v72;
        if ((uint64_t)(v73 - v72) >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        int64_t v77 = &v73;
        uint64_t v19 = (char *)sub_10724(v18);
        unsigned int v20 = &v19[16 * v15];
        *(void *)int buf = v19;
        *(void *)&_DWORD buf[8] = v20;
        *(void *)&uint8_t buf[24] = &v19[16 * v21];
        long long v22 = (std::__shared_weak_count *)*((void *)&v74 + 1);
        *(_OWORD *)unsigned int v20 = v74;
        uint64_t v13 = v22;
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = (std::__shared_weak_count *)*((void *)&v74 + 1);
        }
        *(void *)&buf[16] = v20 + 16;
        sub_FBB48((uint64_t *)&v72, buf);
        uint64_t v14 = *((void *)&v72 + 1);
        sub_98E24((uint64_t)buf);
      }
      else
      {
        uint64_t v13 = (std::__shared_weak_count *)*((void *)&v74 + 1);
        **((void **)&v72 + 1) = v74;
        *(void *)(v12 + 8) = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = v12 + 16;
      }
      *((void *)&v72 + 1) = v14;
      if (v13) {
        sub_4636C(v13);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  uint64_t v23 = sub_32A48(23);
  if (*(unsigned char *)(v23 + 8))
  {
    uint64_t v24 = *(NSObject **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 91;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = (uint64_t)(*((void *)&v72 + 1) - v72) >> 4;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Finished creating sub-ports.  Added %lu subPorts", buf, 0x1Cu);
      }
    }
  }
  sub_21C8C(buf, "");
  sub_105158(a1, &qword_669888, a2, a3, a4, a5, (uint64_t)&v72, (long long *)buf);
  *(void *)a1 = &off_621AD0;
  *(_WORD *)(a1 + 520) = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)int buf = &v72;
  sub_74004((void ***)buf);
  *(void *)a1 = off_63FEF0;
  uint64_t v25 = (void *)(a1 + 528);
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  int v26 = *(uint64_t **)(a6 + 32);
  for (uint64_t i = *(uint64_t **)(a6 + 40); v26 != i; ++v26)
  {
    sub_FB85C(&v72, *v26);
    uint64_t v28 = sub_32A48(23);
    if (*(unsigned char *)(v28 + 8))
    {
      unsigned int v29 = *(NSObject **)v28;
      if (*(void *)v28)
      {
        if (os_log_type_enabled(*(os_log_t *)v28, OS_LOG_TYPE_DEBUG))
        {
          sub_456B74(&__p, v72);
          unint64_t v30 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 101;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v30;
          _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding a sub-port %s", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    int v31 = *(void **)(a1 + 536);
    unint64_t v32 = *(void *)(a1 + 544);
    if ((unint64_t)v31 >= v32)
    {
      uint64_t v35 = ((uint64_t)v31 - *v25) >> 4;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v37 = v32 - *v25;
      if (v37 >> 3 > v36) {
        unint64_t v36 = v37 >> 3;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      int64_t v77 = (unint64_t *)(a1 + 544);
      double v39 = (char *)sub_10724(v38);
      char v40 = &v39[16 * v35];
      *(void *)int buf = v39;
      *(void *)&_DWORD buf[8] = v40;
      *(void *)&uint8_t buf[24] = &v39[16 * v41];
      BOOL v42 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      *(_OWORD *)char v40 = v72;
      double v33 = v42;
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        double v33 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      }
      *(void *)&buf[16] = v40 + 16;
      sub_FBB48((uint64_t *)(a1 + 528), buf);
      double v34 = *(void **)(a1 + 536);
      sub_98E24((uint64_t)buf);
    }
    else
    {
      *int v31 = v72;
      double v33 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      v31[1] = *((void *)&v72 + 1);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v34 = v31 + 2;
      *(void *)(a1 + 536) = v31 + 2;
    }
    *(void *)(a1 + 536) = v34;
    if (v33) {
      sub_4636C(v33);
    }
  }
  uint64_t v43 = sub_32A48(23);
  if (*(unsigned char *)(v43 + 8))
  {
    char v44 = *(NSObject **)v43;
    if (*(void *)v43)
    {
      if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v45 = (uint64_t)(*(void *)(a1 + 536) - *(void *)(a1 + 528)) >> 4;
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 105;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v45;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Finished creating sub-ports.  Added %lu subPorts", buf, 0x1Cu);
      }
    }
  }
  *(unsigned char *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 564) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 572) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  uint64_t v46 = *(void *)(a6 + 24);
  if (!v46)
  {
    __int16 v60 = (os_log_t *)sub_32A48(13);
    uint64_t v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 197;
      _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_101;
  }
  std::string::size_type v47 = *(char **)(v46 + 32);
  int v48 = *(char **)(v46 + 40);
  BOOL v49 = (unint64_t)(v48 - v47) < 0x41 || v48 == v47;
  char v50 = v49;
  if (v49)
  {
LABEL_70:
    if (v47) {
      goto LABEL_71;
    }
    uint64_t v64 = (os_log_t *)sub_32A48(13);
    uint64_t v65 = *v64;
    if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 198;
      _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_101:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  double v51 = v47;
  while (*((_DWORD *)v51 + 8) != 1869442665)
  {
    v51 += 64;
    if (v51 == v48) {
      goto LABEL_70;
    }
  }
LABEL_71:
  if (!*(void *)(a6 + 56))
  {
    uint64_t v62 = (os_log_t *)sub_32A48(13);
    double v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 199;
      _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_101;
  }
  if ((v50 & 1) == 0)
  {
    int v52 = v47;
    while (*((_DWORD *)v52 + 8) != 1869442665)
    {
      v52 += 64;
      if (v52 == v48) {
        goto LABEL_78;
      }
    }
    std::string::size_type v47 = v52;
  }
LABEL_78:
  int v53 = *(_DWORD *)v47;
  *(_DWORD *)(a1 + 120) = v53;
  *(unsigned char *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 552) = v53;
  uint64_t v54 = *(void *)(a6 + 56);
  double v55 = *(char **)(v54 + 32);
  uint64_t v56 = *(char **)(v54 + 40);
  if ((unint64_t)(v56 - v55) >= 0x41 && v55 != v56)
  {
    __int16 v58 = v55;
    while (*((_DWORD *)v58 + 8) != 1869442665)
    {
      v58 += 64;
      if (v58 == v56) {
        goto LABEL_87;
      }
    }
    double v55 = v58;
  }
LABEL_87:
  *(_DWORD *)(a1 + 556) = *(_DWORD *)v55;
  return a1;
}

void sub_45CFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  __cxa_free_exception(v33);
  sub_74004((void ***)&__p);
  sub_103C0C(v32);
  _Unwind_Resume(a1);
}

void sub_45D08C(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_45D0C8(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885434467)
  {
    int v3 = (os_log_t *)sub_32A48(17);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      BOOL v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v13 = "Device_VirtualEARC_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 73;
      __int16 v16 = 2080;
      uint64_t v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v13 = "Device_VirtualEARC_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 74;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_45D280(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_45D29C(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 0))
  {
    operator new();
  }
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  int v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "Device_VirtualEARC_Aspen.cpp";
      __int16 v7 = 1024;
      int v8 = 47;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Virtual eARC device has no input streams.\"", (uint8_t *)&buf, 0x12u);
    }
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Virtual eARC device has no input streams.");
}

void sub_45D6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

void sub_45D780(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

void sub_45D7BC(uint64_t a1, uint64_t a2)
{
  long long v23 = 0u;
  long long v24 = 0u;
  int v25 = 1065353216;
  sub_21C8C(buf, "");
  sub_21C8C(v15, "");
  sub_21C8C(&cf, off_648B50);
  sub_21C8C(&v13, "AU");
  sub_21C8C(&__p, "VAD");
  sub_6D364((char *)__dst, (long long *)buf, (uint64_t)v15, &cf, &v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(cf.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if ((v28[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_D7930((CFDataRef *)v15, a2);
  int v4 = v15[0];
  sub_16D024(&cf, (const __CFData *)v15[0]);
  if (v4) {
    CFRelease(v4);
  }
  if (!cf.__r_.__value_.__r.__words[0])
  {
    int v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = *(void *)a2;
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
      __int16 v27 = 1024;
      *(_DWORD *)uint64_t v28 = 47;
      *(_WORD *)&v28[4] = 2080;
      *(void *)&v28[6] = v10;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Failed to load CFDictionary from path %s\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to load CFDictionary from path %s");
  }
  sub_45DD30((uint64_t)buf, (const __CFDictionary **)&cf, (uint64_t)__dst);
  sub_6DB24((uint64_t)&v23, (uint64_t *)buf);
  sub_6C7E4(*(void **)&v28[2]);
  BOOL v5 = *(void **)buf;
  *(void *)int buf = 0;
  if (v5) {
    operator delete(v5);
  }
  if (cf.__r_.__value_.__r.__words[0]) {
    CFRelease(cf.__r_.__value_.__l.__data_);
  }
  sub_6E9C8(a1, (uint64_t)&v23);
  if (SHIBYTE(v18) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 40), __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)__dst;
    *(void *)(a1 + 56) = v18;
  }
  if (SHIBYTE(v20) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 64), (void *)v19, *((unint64_t *)&v19 + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 64) = v19;
    *(void *)(a1 + 80) = v20;
  }
  int v6 = (unsigned char *)(a1 + 88);
  if (SHIBYTE(v22) < 0)
  {
    sub_21E8C(v6, (void *)v21, *((unint64_t *)&v21 + 1));
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
  }
  else
  {
    *(_OWORD *)int v6 = v21;
    *(void *)(a1 + 104) = v22;
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
  sub_6C7E4((void *)v24);
  __int16 v7 = (void *)v23;
  *(void *)&long long v23 = 0;
  if (v7) {
    operator delete(v7);
  }
}

void sub_45DB08(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v18 = va_arg(va1, const void *);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);
  uint64_t v23 = va_arg(va1, void);
  uint64_t v24 = va_arg(va1, void);
  sub_60394((const void **)va);
  if (a2 == 1)
  {
    std::string v13 = __cxa_begin_catch(a1);
    __int16 v14 = (os_log_t *)sub_32A48(20);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v9 + 23) < 0) {
        uint64_t v9 = (uint64_t **)*v9;
      }
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v13 + 16))(v13);
      *(_DWORD *)(v10 - 96) = 136315906;
      uint64_t v17 = v10 - 144;
      *(void *)(v17 + 52) = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)(v10 - 84) = 1024;
      *(_DWORD *)(v17 + 62) = 52;
      *(_WORD *)(v10 - 78) = 2080;
      *(void *)(v17 + 68) = v9;
      *(_WORD *)(v10 - 68) = 2080;
      *(void *)(v17 + 78) = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception getting configuration data from %s : %s", (uint8_t *)(v10 - 96), 0x26u);
    }
    __cxa_rethrow();
  }
  sub_6D780((uint64_t)va1);
  sub_6C74C(v10 - 144);
  _Unwind_Resume(a1);
}

void sub_45DC7C()
{
}

void sub_45DCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  sub_6C74C(v33 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_45DD30(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  CFDictionaryRef v5 = *a2;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  uint64_t v7 = a1;
  sub_27F0C0(v180, v5, (const UInt8 *)"CommonData");
  if (!v181)
  {
    char v158 = (os_log_t *)sub_32A48(13);
    unint64_t v159 = *v158;
    if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string cf = 136315394;
      *(void *)&cf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 670;
      _os_log_impl(&def_1E50E8, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unable to find CommonData dictionary\"", cf, 0x12u);
    }
    char v160 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v160, "Unable to find CommonData dictionary");
  }
  sub_21C8C(v217, "");
  sub_21C8C(buf, "");
  sub_21C8C(&v175, off_648B50);
  sub_21C8C(&v223, "AU");
  sub_21C8C(&__p, "VAD");
  sub_6D364(cf, (long long *)v217, (uint64_t)buf, &v175, &v223, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v175.__r_.__value_.__l.__data_);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ((v217[23] & 0x80000000) != 0) {
    operator delete(*(void **)v217);
  }
  if (!*(void *)v180)
  {
    char v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v161, "Could not construct");
  }
  if (!sub_D85C4(*(const __CFDictionary **)v180, (const UInt8 *)"tuningPath"))
  {
    uint64_t v162 = (os_log_t *)sub_32A48(13);
    char v163 = *v162;
    if (*v162 && os_log_type_enabled(*v162, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v217 = 136315394;
      *(void *)&v217[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&v217[12] = 1024;
      *(_DWORD *)&v217[14] = 465;
      _os_log_impl(&def_1E50E8, v163, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v217, 0x12u);
    }
LABEL_369:
    char v167 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v167, "Precondition failure.");
  }
  if (!*(void *)v180)
  {
    char v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v164, "Could not construct");
  }
  if (!sub_D85C4(*(const __CFDictionary **)v180, (const UInt8 *)"presetPath"))
  {
    char v165 = (os_log_t *)sub_32A48(13);
    char v166 = *v165;
    if (*v165 && os_log_type_enabled(*v165, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v217 = 136315394;
      *(void *)&v217[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&v217[12] = 1024;
      *(_DWORD *)&v217[14] = 466;
      _os_log_impl(&def_1E50E8, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v217, 0x12u);
    }
    goto LABEL_369;
  }
  if (!*(void *)v180)
  {
    char v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v168, "Could not construct");
  }
  sub_4604B0((uint64_t)v217, *(const __CFDictionary **)v180, (const UInt8 *)"tuningPath");
  if (SHIBYTE(v195) < 0) {
    operator delete((void *)v194);
  }
  long long v194 = *(_OWORD *)v217;
  char v195 = *(void **)&v217[16];
  if (!*(void *)v180)
  {
    unint64_t v169 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v169, "Could not construct");
  }
  sub_4604B0((uint64_t)v217, *(const __CFDictionary **)v180, (const UInt8 *)"presetPath");
  if (SHIBYTE(v197) < 0) {
    operator delete((void *)v196);
  }
  long long v196 = *(_OWORD *)v217;
  uint64_t v197 = *(void *)&v217[16];
  if (!*(void *)v180)
  {
    char v170 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v170, "Could not construct");
  }
  if (sub_D85C4(*(const __CFDictionary **)v180, (const UInt8 *)"tuningFilePrefix"))
  {
    if (!*(void *)v180)
    {
      uint64_t v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v172, "Could not construct");
    }
    sub_4604B0((uint64_t)v217, *(const __CFDictionary **)v180, (const UInt8 *)"tuningFilePrefix");
    if ((cf[23] & 0x80000000) != 0) {
      operator delete(*(void **)cf);
    }
    *(_OWORD *)std::string cf = *(_OWORD *)v217;
    *(void *)&cf[16] = *(void *)&v217[16];
  }
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = *(_OWORD *)cf;
  *(void *)(a3 + 16) = *(void *)&cf[16];
  cf[23] = 0;
  cf[0] = 0;
  int v8 = (void **)(a3 + 24);
  if (*(char *)(a3 + 47) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)int v8 = v194;
  *(void *)(a3 + 40) = v195;
  HIBYTE(v195) = 0;
  LOBYTE(v194) = 0;
  uint64_t v9 = (void **)(a3 + 48);
  if (*(char *)(a3 + 71) < 0)
  {
    operator delete(*v9);
    int v10 = SHIBYTE(v195);
    *(_OWORD *)uint64_t v9 = v196;
    *(void *)(a3 + 64) = v197;
    HIBYTE(v197) = 0;
    LOBYTE(v196) = 0;
    if (v10 < 0) {
      operator delete((void *)v194);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v9 = v196;
    *(void *)(a3 + 64) = v197;
    HIBYTE(v197) = 0;
    LOBYTE(v196) = 0;
  }
  if ((cf[23] & 0x80000000) != 0) {
    operator delete(*(void **)cf);
  }
  CFDictionaryRef v11 = *a2;
  if (!*a2)
  {
    char v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v171, "Could not construct");
  }
  *(void *)std::string cf = 0;
  sub_460334(&theDict, v11, (const UInt8 *)"Configurations", cf);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  CFDictionaryRef v12 = theDict;
  sub_27EA8C((uint64_t)v217, theDict);
  char v173 = (void *)(v7 + 16);
  while (1)
  {
    sub_27EA8C((uint64_t)cf, v12);
    std::string v13 = *(void **)&cf[16];
    *(void *)&cf[8] = (uint64_t)(v194 - *(void *)&cf[16]) >> 3;
    BOOL v14 = !*(void *)v217
       || *(void *)&v217[8] == (v218 - *(void *)&v217[16]) >> 3
       || *(void *)v217 == *(void *)cf && *(void *)&v217[8] == (uint64_t)(v194 - *(void *)&cf[16]) >> 3;
    if (v195)
    {
      *(void *)&long long v196 = v195;
      operator delete(v195);
      std::string v13 = *(void **)&cf[16];
    }
    if (v13)
    {
      *(void *)&long long v194 = v13;
      operator delete(v13);
    }
    if (v14) {
      break;
    }
    sub_4603A0((uint64_t)cf, v217);
    if ((cf[23] & 0x80000000) != 0)
    {
      sub_21E8C(__dst, *(void **)cf, *(unint64_t *)&cf[8]);
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)cf;
      uint64_t v178 = *(void *)&cf[16];
    }
    if ((void)v194) {
      CFRelease((CFTypeRef)v194);
    }
    if ((cf[23] & 0x80000000) != 0) {
      operator delete(*(void **)cf);
    }
    sub_4603A0((uint64_t)&v175, v217);
    sub_32CDD4((uint64_t)cf);
    if (!v176)
    {
      uint64_t v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Could not construct");
    }
    if (!sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"graph"))
    {
      char v126 = (os_log_t *)sub_32A48(13);
      uint64_t v127 = *v126;
      if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 484;
        _os_log_impl(&def_1E50E8, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      unint64_t v128 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v128, "Precondition failure.");
    }
    if (!v176)
    {
      int v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v131, "Could not construct");
    }
    sub_4604B0((uint64_t)buf, (const __CFDictionary *)v176, (const UInt8 *)"graph");
    if ((cf[23] & 0x80000000) != 0) {
      operator delete(*(void **)cf);
    }
    *(_OWORD *)std::string cf = *(_OWORD *)buf;
    *(void *)&cf[16] = *(void *)&buf[16];
    if (!v176)
    {
      unint64_t v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v132, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"austrip"))
    {
      if (!v176)
      {
        unint64_t v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v142, "Could not construct");
      }
      sub_4604B0((uint64_t)buf, (const __CFDictionary *)v176, (const UInt8 *)"austrip");
      if (SHIBYTE(v197) < 0) {
        operator delete((void *)v196);
      }
      long long v196 = *(_OWORD *)buf;
      uint64_t v197 = *(void *)&buf[16];
    }
    if (!v176)
    {
      uint64_t v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v125, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"propstrip"))
    {
      if (!v176)
      {
        uint64_t v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v145, "Could not construct");
      }
      sub_4604B0((uint64_t)buf, (const __CFDictionary *)v176, (const UInt8 *)"propstrip");
      if (SHIBYTE(v199) < 0) {
        operator delete((void *)v198);
      }
      long long v198 = *(_OWORD *)buf;
      uint64_t v199 = *(void *)&buf[16];
    }
    if (!v176)
    {
      unint64_t v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v129, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"metaparameter"))
    {
      if (!v176)
      {
        int v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v144, "Could not construct");
      }
      sub_4604B0((uint64_t)buf, (const __CFDictionary *)v176, (const UInt8 *)"metaparameter");
      if (SHIBYTE(v201) < 0) {
        operator delete((void *)v200);
      }
      long long v200 = *(_OWORD *)buf;
      uint64_t v201 = *(void *)&buf[16];
    }
    if (!v176)
    {
      char v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v133, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"properties"))
    {
      if (v176)
      {
        CFArrayRef v16 = (const __CFArray *)sub_D86AC((const __CFDictionary *)v176, (const UInt8 *)"properties");
        if (v16)
        {
          CFArrayRef v17 = v16;
          CFTypeID TypeID = CFArrayGetTypeID();
          if (TypeID == CFGetTypeID(v17))
          {
            int Count = CFArrayGetCount(v17);
            memset(&v223, 0, sizeof(v223));
            sub_301C00(&v223, Count);
            if (Count >= 1)
            {
              CFIndex v20 = 0;
              unint64_t i = Count;
              do
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v17, v20);
                uint64_t v22 = ValueAtIndex;
                if (ValueAtIndex)
                {
                  CFRetain(ValueAtIndex);
                  sub_22084(&__p, v22);
                }
                else
                {
                  __p.__r_.__value_.__r.__words[0] = 0;
                }
                std::string::size_type size = (void *)v223.__r_.__value_.__l.__size_;
                if (v223.__r_.__value_.__l.__size_ >= v223.__r_.__value_.__r.__words[2])
                {
                  std::string::size_type v24 = v223.__r_.__value_.__r.__words[0];
                  uint64_t v25 = (uint64_t)(v223.__r_.__value_.__l.__size_ - v223.__r_.__value_.__r.__words[0]) >> 3;
                  unint64_t v26 = v25 + 1;
                  if ((unint64_t)(v25 + 1) >> 61) {
                    sub_60548();
                  }
                  int64_t v27 = v223.__r_.__value_.__r.__words[2] - v223.__r_.__value_.__r.__words[0];
                  if ((uint64_t)(v223.__r_.__value_.__r.__words[2] - v223.__r_.__value_.__r.__words[0]) >> 2 > v26) {
                    unint64_t v26 = v27 >> 2;
                  }
                  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v28 = v26;
                  }
                  *(void *)&unsigned char buf[32] = (char *)&v223.__r_.__value_.__l + 16;
                  if (v28)
                  {
                    unint64_t v28 = (unint64_t)sub_106EC(v28);
                    std::string::size_type size = (void *)v223.__r_.__value_.__l.__size_;
                    std::string::size_type v24 = v223.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    uint64_t v29 = 0;
                  }
                  unint64_t v30 = (void *)(v28 + 8 * v25);
                  std::string::size_type v31 = v28 + 8 * v29;
                  *(void *)&uint8_t buf[24] = v31;
                  void *v30 = __p.__r_.__value_.__r.__words[0];
                  std::string::size_type v32 = (std::string::size_type)(v30 + 1);
                  __p.__r_.__value_.__r.__words[0] = 0;
                  *(void *)&buf[16] = v30 + 1;
                  if (size != (void *)v24)
                  {
                    do
                    {
                      uint64_t v33 = *--size;
                      *--unint64_t v30 = v33;
                      void *size = 0;
                    }
                    while (size != (void *)v24);
                    std::string::size_type v32 = *(void *)&buf[16];
                    std::string::size_type v31 = *(void *)&buf[24];
                  }
                  long long v34 = *(_OWORD *)&v223.__r_.__value_.__l.__data_;
                  v223.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
                  v223.__r_.__value_.__l.__size_ = v32;
                  *(_OWORD *)&_DWORD buf[8] = v34;
                  std::string::size_type v35 = v223.__r_.__value_.__r.__words[2];
                  v223.__r_.__value_.__r.__words[2] = v31;
                  *(void *)&uint8_t buf[24] = v35;
                  *(void *)int buf = v34;
                  sub_A78F0((uint64_t)buf);
                  v223.__r_.__value_.__l.__size_ = v32;
                  if (__p.__r_.__value_.__r.__words[0]) {
                    CFRelease(__p.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  *(void *)v223.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  v223.__r_.__value_.__l.__size_ = (std::string::size_type)(size + 1);
                }
                ++v20;
              }
              while (v20 != i);
            }
            std::string::size_type v37 = v223.__r_.__value_.__l.__size_;
            unint64_t v36 = (const __CFDictionary **)v223.__r_.__value_.__r.__words[0];
            while (2)
            {
              if (v36 == (const __CFDictionary **)v37)
              {
                *(void *)int buf = &v223;
                sub_A7940((void ***)buf);
                goto LABEL_146;
              }
              if (!*v36)
              {
                unint64_t v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v119, "Could not construct");
              }
              if (!sub_D85C4(*v36, (const UInt8 *)"ID"))
              {
                uint64_t v120 = (os_log_t *)sub_32A48(13);
                int v121 = *v120;
                if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&_DWORD buf[14] = 516;
                  _os_log_impl(&def_1E50E8, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Property dictionary requires ID\"", buf, 0x12u);
                }
                unint64_t v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v122, "Property dictionary requires ID");
              }
              if (!*v36)
              {
                int v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v123, "Could not construct");
              }
              sub_46053C(buf, *v36, (const UInt8 *)"ID");
              unsigned int v38 = sub_170648((const void **)buf);
              if (*(void *)buf) {
                CFRelease(*(CFTypeRef *)buf);
              }
              CFDictionaryRef v39 = *v36;
              if (!*v36)
              {
                char v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v124, "Could not construct");
              }
              v190[0] = 0;
              sub_460334(&__p, v39, (const UInt8 *)"Info", v190);
              *(_DWORD *)int buf = v38;
              std::string::size_type v40 = __p.__r_.__value_.__r.__words[0];
              *(void *)&_DWORD buf[8] = __p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              uint64_t v41 = v203.i64[1];
              if (v203.i64[1] < (unint64_t)v204)
              {
                *(_DWORD *)v203.i64[1] = v38;
                *(void *)(v41 + 8) = v40;
                BOOL v42 = (char *)(v41 + 16);
                *(void *)&_DWORD buf[8] = 0;
                goto LABEL_141;
              }
              uint64_t v43 = (v203.i64[1] - v203.i64[0]) >> 4;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 60) {
                sub_60548();
              }
              uint64_t v45 = (uint64_t)&v204[-v203.i64[0]];
              if ((uint64_t)&v204[-v203.i64[0]] >> 3 > v44) {
                unint64_t v44 = v45 >> 3;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              std::string::size_type v47 = (char *)sub_10724(v46);
              BOOL v49 = &v47[16 * v43];
              *(_DWORD *)BOOL v49 = v38;
              *((void *)v49 + 1) = v40;
              *(void *)&_DWORD buf[8] = 0;
              uint64_t v50 = v203.i64[1];
              uint64_t v51 = v203.i64[0];
              if (v203.i64[1] == v203.i64[0])
              {
                int64x2_t v54 = vdupq_n_s64(v203.u64[1]);
                int v52 = &v47[16 * v43];
              }
              else
              {
                int v52 = &v47[16 * v43];
                do
                {
                  int v53 = *(_DWORD *)(v50 - 16);
                  v50 -= 16;
                  *((_DWORD *)v52 - 4) = v53;
                  v52 -= 16;
                  *((void *)v52 + 1) = *(void *)(v50 + 8);
                  *(void *)(v50 + 8) = 0;
                }
                while (v50 != v51);
                int64x2_t v54 = v203;
              }
              BOOL v42 = v49 + 16;
              v203.i64[0] = (uint64_t)v52;
              v203.i64[1] = (uint64_t)(v49 + 16);
              int v204 = &v47[16 * v48];
              uint64_t v55 = v54.i64[1];
              uint64_t v56 = (void *)v54.i64[0];
              if (v54.i64[1] != v54.i64[0])
              {
                do
                {
                  int64_t v57 = (void *)(v55 - 16);
                  sub_6CA7C(*(const void **)(v55 - 8));
                  uint64_t v55 = (uint64_t)v57;
                }
                while (v57 != v56);
              }
              if (v56)
              {
                operator delete(v56);
                v203.i64[1] = (uint64_t)v42;
                uint64_t v7 = a1;
                if (__p.__r_.__value_.__r.__words[0]) {
                  CFRelease(__p.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                uint64_t v7 = a1;
LABEL_141:
                v203.i64[1] = (uint64_t)v42;
              }
              if (v190[0]) {
                CFRelease(v190[0]);
              }
              ++v36;
              continue;
            }
          }
          __int16 v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v143, "Could not convert");
        }
        else
        {
          __int16 v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v143, "Could not find item");
        }
      }
      else
      {
        __int16 v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v143, "Could not construct");
      }
    }
LABEL_146:
    if (!v176)
    {
      int v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v134, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"presets"))
    {
      if (!v176)
      {
        uint64_t v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v147, "Could not construct");
      }
      sub_156174(&v185, (const __CFDictionary *)v176, (const UInt8 *)"presets");
      CFTypeRef v58 = v185;
      if (!v185)
      {
        char v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v146, "Could not construct");
LABEL_342:
      }
      CFTypeID v59 = CFDictionaryGetTypeID();
      if (v59 != CFGetTypeID(v58))
      {
        char v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v146, "Could not convert");
        goto LABEL_342;
      }
      CFIndex v60 = CFDictionaryGetCount((CFDictionaryRef)v58);
      std::string v183 = 0;
      std::string v184 = 0;
      std::string v182 = &v183;
      sub_4ECEC(&__p, v60);
      sub_4ECEC(v190, v60);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)v58, (const void **)__p.__r_.__value_.__l.__data_, (const void **)v190[0]);
      if (v60)
      {
        for (unint64_t i = 0; i != v60; ++i)
        {
          sub_20C54((uint64_t)v188, *(const __CFString **)(__p.__r_.__value_.__r.__words[0] + 8 * i));
          sub_20C54((uint64_t)v186, *((const __CFString **)v190[0] + i));
          *(_OWORD *)int buf = *(_OWORD *)v188;
          *(void *)&buf[16] = v189;
          v188[1] = 0;
          uint64_t v189 = 0;
          *(_OWORD *)&uint8_t buf[24] = *(_OWORD *)v186;
          v222 = v187;
          v186[0] = 0;
          v186[1] = 0;
          long long v187 = 0;
          v188[0] = 0;
          uint64_t v61 = (char **)sub_15DF8((uint64_t)&v182, &v192, (void **)buf);
          if (!*v61)
          {
            uint64_t v62 = v61;
            double v63 = (char *)operator new(0x50uLL);
            v223.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
            v223.__r_.__value_.__l.__size_ = (std::string::size_type)&v183;
            v223.__r_.__value_.__s.__data_[16] = 0;
            uint64_t v64 = v63 + 32;
            if ((buf[23] & 0x80000000) != 0)
            {
              sub_21E8C(v64, *(void **)buf, *(unint64_t *)&buf[8]);
            }
            else
            {
              *(_OWORD *)uint64_t v64 = *(_OWORD *)buf;
              *((void *)v63 + 6) = *(void *)&buf[16];
            }
            *(_OWORD *)(v63 + 56) = *(_OWORD *)&buf[24];
            *((void *)v63 + 9) = v222;
            *(void *)&unsigned char buf[32] = 0;
            v222 = 0;
            *(void *)&uint8_t buf[24] = 0;
            v223.__r_.__value_.__s.__data_[16] = 1;
            uint64_t v65 = v192;
            *(void *)double v63 = 0;
            *((void *)v63 + 1) = 0;
            *((void *)v63 + 2) = v65;
            os_log_t *v62 = v63;
            if (*v182)
            {
              std::string v182 = (uint64_t **)*v182;
              double v63 = *v62;
            }
            sub_46D00(v183, (uint64_t *)v63);
            std::string v184 = (void *)((char *)v184 + 1);
            v223.__r_.__value_.__r.__words[0] = 0;
            sub_6E930((uint64_t)&v223);
          }
          if (SHIBYTE(v222) < 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v187) < 0) {
            operator delete(v186[0]);
          }
          if (SHIBYTE(v189) < 0) {
            operator delete(v188[0]);
          }
        }
      }
      if (v190[0])
      {
        v190[1] = v190[0];
        operator delete((void *)v190[0]);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_6C9A0(v209[0]);
      uint64_t v66 = v183;
      v208 = v182;
      v209[0] = v183;
      v209[1] = v184;
      if (v184)
      {
        v183[2] = (uint64_t)v209;
        std::string v182 = &v183;
        std::string v183 = 0;
        std::string v184 = 0;
        uint64_t v66 = 0;
      }
      else
      {
        v208 = v209;
      }
      sub_6C9A0(v66);
      if (v185) {
        CFRelease(v185);
      }
    }
    if (!v176)
    {
      uint64_t v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v137, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"volumeCommands"))
    {
      if (!v176)
      {
        unint64_t v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v148, "Could not construct");
      }
      sub_4605C0(&v223, (const __CFDictionary *)v176, (const UInt8 *)"volumeCommands");
      sub_1704A8((unsigned int **)buf, (CFArrayRef *)&v223);
      if (v206[0])
      {
        v206[1] = v206[0];
        operator delete(v206[0]);
      }
      *(_OWORD *)int v206 = *(_OWORD *)buf;
      uint64_t v207 = *(void *)&buf[16];
      if (v223.__r_.__value_.__r.__words[0]) {
        CFRelease(v223.__r_.__value_.__l.__data_);
      }
    }
    if (!v176)
    {
      uint64_t v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v135, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"volumeInfo"))
    {
      if (!v176)
      {
        uint64_t v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v150, "Could not construct");
      }
      sub_156174(buf, (const __CFDictionary *)v176, (const UInt8 *)"volumeInfo");
      CFTypeRef v67 = v205;
      CFTypeRef v205 = *(CFTypeRef *)buf;
      *(void *)int buf = v67;
      if (v67) {
        CFRelease(v67);
      }
    }
    if (!v176)
    {
      char v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v136, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"busChannelCounts"))
    {
      sub_32CF54(&v210, 0, 0, 0);
      if (!v176)
      {
        unint64_t v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v149, "Could not construct");
      }
      sub_4605C0(&__p, (const __CFDictionary *)v176, (const UInt8 *)"busChannelCounts");
      CFArrayRef v68 = (const __CFArray *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
      {
LABEL_298:
        int v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v114, "Could not construct");
      }
      unint64_t v69 = 0;
      while (v69 < CFArrayGetCount(v68))
      {
        CFArrayRef v70 = (const __CFArray *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
        {
          uint64_t v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v115, "Could not construct");
        }
        if (CFArrayGetCount((CFArrayRef)__p.__r_.__value_.__l.__data_) <= v69
          || (char v71 = CFArrayGetValueAtIndex(v70, v69)) == 0)
        {
          char v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v113, "Could not find item");
        }
        sub_397C54((uint64_t)buf, v71);
        long long v72 = *(void **)buf;
        if (*(void *)&buf[8] - *(void *)buf != 8)
        {
          int v116 = (os_log_t *)sub_32A48(13);
          uint64_t v117 = *v116;
          if (*v116 && os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v223.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v223.__r_.__value_.__r.__words + 4) = (std::string::size_type)"DSPGraphConfig_Utilities.cpp";
            WORD2(v223.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v223.__r_.__value_.__r.__words[1] + 6) = 550;
            _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v223, 0x12u);
          }
          unint64_t v118 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v118, "Precondition failure.");
        }
        uint64_t v73 = **(void **)buf;
        long long v74 = (char *)v211;
        if ((unint64_t)v211 >= v212)
        {
          uint64_t v76 = ((unsigned char *)v211 - v210) >> 3;
          if ((unint64_t)(v76 + 1) >> 61) {
            sub_60548();
          }
          unint64_t v77 = (uint64_t)(v212 - (void)v210) >> 2;
          if (v77 <= v76 + 1) {
            unint64_t v77 = v76 + 1;
          }
          if (v212 - (unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v77;
          }
          uint64_t v79 = (char *)sub_106EC(v78);
          double v81 = &v79[8 * v76];
          *(void *)double v81 = v73;
          std::string v75 = v81 + 8;
          double v82 = (char *)v211;
          double v83 = v210;
          if (v211 != v210)
          {
            do
            {
              uint64_t v84 = *((void *)v82 - 1);
              v82 -= 8;
              *((void *)v81 - 1) = v84;
              v81 -= 8;
            }
            while (v82 != v83);
            double v82 = v210;
          }
          int v210 = v81;
          __int16 v211 = v75;
          unint64_t v212 = (unint64_t)&v79[8 * v80];
          if (v82) {
            operator delete(v82);
          }
        }
        else
        {
          *(void *)__int16 v211 = v73;
          std::string v75 = v74 + 8;
        }
        __int16 v211 = v75;
        operator delete(v72);
        ++v69;
        CFArrayRef v68 = (const __CFArray *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_298;
        }
      }
      if (__p.__r_.__value_.__r.__words[0]) {
        CFRelease(__p.__r_.__value_.__l.__data_);
      }
    }
    if (!v176)
    {
      unint64_t v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v138, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"busCount"))
    {
      if (!v176)
      {
        unint64_t v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v152, "Could not construct");
        goto LABEL_354;
      }
      double v85 = sub_D86AC((const __CFDictionary *)v176, (const UInt8 *)"busCount");
      if (!v85)
      {
        unint64_t v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v152, "Could not find item");
LABEL_354:
      }
      sub_397C54((uint64_t)buf, v85);
      if (*(void *)&buf[8] - *(void *)buf != 8)
      {
        char v154 = (os_log_t *)sub_32A48(13);
        uint64_t v155 = *v154;
        if (*v154 && os_log_type_enabled(*v154, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v223.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v223.__r_.__value_.__r.__words + 4) = (std::string::size_type)"DSPGraphConfig_Utilities.cpp";
          WORD2(v223.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v223.__r_.__value_.__r.__words[1] + 6) = 558;
          _os_log_impl(&def_1E50E8, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v223, 0x12u);
        }
        char v156 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v156, "Precondition failure.");
      }
      uint64_t v86 = **(_DWORD **)buf;
      uint64_t v87 = *(unsigned int *)(*(void *)buf + 4);
      if (v214)
      {
        unint64_t v213 = __PAIR64__(v87, v86);
      }
      else
      {
        unint64_t v213 = v86 | (v87 << 32);
        char v214 = 1;
      }
      operator delete(*(void **)buf);
    }
    if (!v176)
    {
      unint64_t v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v139, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"chainType"))
    {
      if (!v176)
      {
        std::mutex v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v153, "Could not construct");
      }
      sub_46053C(buf, (const __CFDictionary *)v176, (const UInt8 *)"chainType");
      unsigned int v202 = sub_170648((const void **)buf);
      if (*(void *)buf) {
        CFRelease(*(CFTypeRef *)buf);
      }
    }
    if (!v176)
    {
      uint64_t v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v140, "Could not construct");
    }
    BOOL v215 = (unsigned __int16)sub_27F1CC((const __CFDictionary *)v176, (const UInt8 *)"shouldCache") > 0x100u;
    long long v88 = (os_log_t *)sub_32A48(20);
    long long v89 = *v88;
    if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_INFO))
    {
      long long v90 = "true";
      if (!v215) {
        long long v90 = "false";
      }
      uint64_t v91 = cf;
      if (cf[23] < 0) {
        uint64_t v91 = *(unsigned char **)cf;
      }
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 569;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v90;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&unsigned char buf[30] = "shouldCache";
      *(_WORD *)&unsigned char buf[38] = 2080;
      v222 = v91;
      _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_INFO, "%25s:%-5d Parsed value %s for key %s in graph %s", buf, 0x30u);
    }
    if (!v176)
    {
      char v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v141, "Could not construct");
    }
    if (sub_D85C4((const __CFDictionary *)v176, (const UInt8 *)"customMacros"))
    {
      if (!v176)
      {
        AudioObjectID v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v151, "Could not construct");
      }
      sub_156174(buf, (const __CFDictionary *)v176, (const UInt8 *)"customMacros");
      CFTypeRef v92 = v216;
      CFTypeRef v216 = *(CFTypeRef *)buf;
      *(void *)int buf = v92;
      if (v92) {
        CFRelease(v92);
      }
    }
    if (v176) {
      CFRelease(v176);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    unint64_t v93 = sub_6789C((uint64_t)__dst);
    unint64_t v94 = v93;
    unint64_t v95 = *(void *)(v7 + 8);
    if (v95)
    {
      uint8x8_t v96 = (uint8x8_t)vcnt_s8((int8x8_t)v95);
      v96.i16[0] = vaddlv_u8(v96);
      unint64_t v97 = v96.u32[0];
      if (v96.u32[0] > 1uLL)
      {
        unint64_t i = v93;
        if (v93 >= v95) {
          unint64_t i = v93 % v95;
        }
      }
      else
      {
        unint64_t i = (v95 - 1) & v93;
      }
      char v98 = *(unsigned __int8 ***)(*(void *)v7 + 8 * i);
      if (v98)
      {
        for (uint64_t j = *v98; j; uint64_t j = *(unsigned __int8 **)j)
        {
          unint64_t v100 = *((void *)j + 1);
          if (v100 == v94)
          {
            if (sub_67CEC(j + 16, (unsigned __int8 *)__dst))
            {
              uint64_t v111 = (uint64_t)(j + 40);
              uint64_t v7 = a1;
              sub_6EA40(v111, (uint64_t)cf);
              goto LABEL_287;
            }
          }
          else
          {
            if (v97 > 1)
            {
              if (v100 >= v95) {
                v100 %= v95;
              }
            }
            else
            {
              v100 &= v95 - 1;
            }
            if (v100 != i) {
              break;
            }
          }
        }
        uint64_t v7 = a1;
      }
    }
    uint64_t v101 = operator new(0x158uLL);
    *(void *)int buf = v101;
    *(void *)&_DWORD buf[8] = v173;
    buf[16] = 0;
    void *v101 = 0;
    v101[1] = v94;
    sub_6D224((unsigned char *)v101 + 16, (long long *)__dst, (long long *)cf);
    buf[16] = 1;
    float v102 = (float)(unint64_t)(*(void *)(v7 + 24) + 1);
    float v103 = *(float *)(v7 + 32);
    if (!v95 || (float)(v103 * (float)v95) < v102)
    {
      BOOL v104 = (v95 & (v95 - 1)) != 0;
      if (v95 < 3) {
        BOOL v104 = 1;
      }
      unint64_t v105 = v104 | (2 * v95);
      unint64_t v106 = vcvtps_u32_f32(v102 / v103);
      if (v105 <= v106) {
        size_t v107 = v106;
      }
      else {
        size_t v107 = v105;
      }
      sub_6DEC4(v7, v107);
      unint64_t v95 = *(void *)(v7 + 8);
      if ((v95 & (v95 - 1)) != 0)
      {
        if (v94 >= v95) {
          unint64_t i = v94 % v95;
        }
        else {
          unint64_t i = v94;
        }
      }
      else
      {
        unint64_t i = (v95 - 1) & v94;
      }
    }
    uint64_t v108 = *(void *)v7;
    unint64_t v109 = *(void **)(*(void *)v7 + 8 * i);
    if (v109)
    {
      void *v101 = *v109;
LABEL_285:
      *unint64_t v109 = v101;
      goto LABEL_286;
    }
    void *v101 = *v173;
    void *v173 = v101;
    *(void *)(v108 + 8 * i) = v173;
    if (*v101)
    {
      unint64_t v110 = *(void *)(*v101 + 8);
      if ((v95 & (v95 - 1)) != 0)
      {
        if (v110 >= v95) {
          v110 %= v95;
        }
      }
      else
      {
        v110 &= v95 - 1;
      }
      unint64_t v109 = (void *)(*(void *)v7 + 8 * v110);
      goto LABEL_285;
    }
LABEL_286:
    *(void *)int buf = 0;
    ++*(void *)(v7 + 24);
    sub_6E0C0((uint64_t)buf);
LABEL_287:
    sub_6C878((uint64_t)cf);
    if (SHIBYTE(v178) < 0) {
      operator delete(__dst[0]);
    }
    ++*(void *)&v217[8];
    CFDictionaryRef v12 = theDict;
  }
  if (v219)
  {
    CFTypeRef v220 = v219;
    operator delete(v219);
  }
  if (*(void *)&v217[16])
  {
    uint64_t v218 = *(void *)&v217[16];
    operator delete(*(void **)&v217[16]);
  }
  if (v12) {
    CFRelease(v12);
  }
  return sub_7E2E8((uint64_t)v180);
}

void sub_45FDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,__int16 a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  __cxa_free_exception(v49);
  sub_6D780((uint64_t)&a49);
  sub_7E2E8((uint64_t)&a30);
  sub_6C74C(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_460334(void *a1, const __CFDictionary *a2, const UInt8 *a3, void *a4)
{
  sub_27F0C0(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return sub_7E2E8((uint64_t)&cf);
}

void sub_4603A0(uint64_t a1, void *a2)
{
  sub_27EB10((uint64_t)__p, a2);
  int v3 = SHIBYTE(v7);
  if (SHIBYTE(v7) < 0)
  {
    sub_21E8C((unsigned char *)a1, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v7;
  }
  CFTypeRef v4 = cf;
  if (cf)
  {
    CFRetain(cf);
    *(void *)(a1 + 24) = v4;
    CFRelease(v4);
    if ((v3 & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    if ((v3 & 0x80000000) == 0) {
      return;
    }
  }
  CFDictionaryRef v5 = __p[0];

  operator delete(v5);
}

void sub_460450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_46046C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_4604B0(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFStringRef v4 = (const __CFString *)sub_D86AC(a2, __s);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }

  return sub_20C54(a1, v4);
}

void sub_460528(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFTypeRef sub_46053C(void *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFStringRef v4 = sub_D86AC(a2, __s);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }
  CFDictionaryRef v5 = v4;
  CFTypeRef result = CFRetain(v4);
  *a1 = v5;
  return result;
}

void sub_4605A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_4605C0(void *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFStringRef v4 = sub_D86AC(a2, __s);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }
  CFDictionaryRef v5 = v4;
  CFRetain(v4);

  return sub_68780(a1, v5);
}

void sub_460640(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_460658(std::__fs::filesystem::path *a1, std::string *a2)
{
  sub_208ED4(&v5);
  sub_21C8C(&v4, "VAD");
  sub_3BFF68(&v12, (std::string **)&off_648B50);
  sub_6D838(&v8.__pn_, &v5);
  sub_6D8A0(&__dst, (uint64_t)&v12, &v8);
  sub_6D838(&v7.__pn_, &v4);
  sub_6D8A0(&v10, (uint64_t)&__dst, &v7);
  sub_6D838(&__p, a2);
  sub_6D8A0(&v11, (uint64_t)&v10, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21E8C(a1, v11.__pn_.__r_.__value_.__l.__data_, v11.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_4607C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 57) < 0) {
    operator delete(*(void **)(v45 - 80));
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 81) < 0) {
    operator delete(*(void **)(v45 - 104));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v45 - 33) < 0) {
    operator delete(*(void **)(v45 - 56));
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_46089C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (!sub_15ABD8(*a1, v4, 1685090928))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v12 = 0u;
    int v13 = 1065353216;
    sub_3843C8((uint64_t)v18);
  }
  std::string v5 = sub_15ABD8(v3, v4, 1685090928);
  uint64_t v6 = sub_3856EC((int *)v5 + 6);
  std::__fs::filesystem::path v7 = *(uint64_t **)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = v6;
    do
    {
      int v9 = *((_DWORD *)v7 + 4);
      if (sub_D7374((void *)v8, v9))
      {
        std::__fs::filesystem::path v10 = sub_15ABD8(*(void *)v8, *(void *)(v8 + 8), v9);
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 16)
          {
            sub_3857F4((int *)v10 + 6);
            LODWORD(v14) = v9;
            sub_3847B8((uint64_t)&v15, (int *)v7 + 6);
            sub_15A1EC((uint64_t)__p, (int *)&v14, 1);
            sub_3843C8((uint64_t)v18);
          }
          int v16 = v9;
          sub_3847B8((uint64_t)&v17, (int *)v7 + 6);
          sub_15A1EC((uint64_t)__p, &v16, 1);
          sub_3843C8((uint64_t)v18);
        }
        sub_8251C("unordered_map::at: key not found");
      }
      sub_D87CC(v8, v9, (_DWORD *)v7 + 4);
      std::__fs::filesystem::path v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
}

void sub_460BC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_460BD4(int a1, int *a2, uint64_t *a3)
{
  int v7 = a1;
  sub_3847B8((uint64_t)v8, a2);
  sub_15A1EC((uint64_t)__p, &v7, 1);
  sub_46089C(a3, (uint64_t)__p);
  sub_D7EFC((void *)__p[2]);
  unint64_t v4 = __p[0];
  __p[0] = 0;
  if (v4) {
    operator delete(v4);
  }
  return sub_3840C4((uint64_t)v8);
}

void sub_460C78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_460C84()
{
  *(_OWORD *)uint64_t v0 = 0u;
  long long v1 = 0u;
  int v2 = 1065353216;
  LODWORD(__p[0]) = 7;
  __p[1] = (void *)1685287015;
  *(_DWORD *)int buf = 1685090932;
  sub_3847B8((uint64_t)&buf[8], (int *)__p);
  sub_158DE0((uint64_t)v0, *(int *)buf, buf);
  sub_3840C4((uint64_t)&buf[8]);
  sub_3840C4((uint64_t)__p);
  operator new();
}

void sub_462028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  __cxa_free_exception(v51);
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_D7EC0((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_462414(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_21E8C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }
  int v10 = a3;
  *(void *)(a1 + 24) = 0;
  std::string v5 = (char *)operator new(0x28uLL);
  *(void *)std::string v5 = off_6406C8;
  uint64_t v6 = v5 + 8;
  if (SHIBYTE(v9) < 0)
  {
    sub_21E8C(v6, __p[0], (unint64_t)__p[1]);
    int v7 = SHIBYTE(v9);
    *((_DWORD *)v5 + 8) = v10;
    *(void *)(a1 + 24) = v5;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
    *((void *)v5 + 3) = v9;
    *((_DWORD *)v5 + 8) = a3;
    *(void *)(a1 + 24) = v5;
  }
}

void sub_4624EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_462518(unsigned int a1)
{
  if (!qword_6699C8) {
    return 0;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)qword_6699C8);
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
    if (qword_6699C8 <= (unint64_t)a1) {
      unint64_t v2 = a1 % (unint64_t)qword_6699C8;
    }
  }
  else
  {
    unint64_t v2 = (qword_6699C8 - 1) & a1;
  }
  unint64_t i = *(uint64_t **)(qword_6699C0 + 8 * v2);
  if (i)
  {
    for (unint64_t i = (uint64_t *)*i; i; unint64_t i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= qword_6699C8) {
            v4 %= (unint64_t)qword_6699C8;
          }
        }
        else
        {
          v4 &= qword_6699C8 - 1;
        }
        if (v4 != v2) {
          return 0;
        }
      }
    }
  }
  return i;
}

uint64_t *sub_4625D8(unsigned int a1)
{
  if (!qword_6699F0) {
    return 0;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)qword_6699F0);
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
    if (qword_6699F0 <= (unint64_t)a1) {
      unint64_t v2 = a1 % (unint64_t)qword_6699F0;
    }
  }
  else
  {
    unint64_t v2 = (qword_6699F0 - 1) & a1;
  }
  unint64_t i = *(uint64_t **)(qword_6699E8 + 8 * v2);
  if (i)
  {
    for (unint64_t i = (uint64_t *)*i; i; unint64_t i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= qword_6699F0) {
            v4 %= (unint64_t)qword_6699F0;
          }
        }
        else
        {
          v4 &= qword_6699F0 - 1;
        }
        if (v4 != v2) {
          return 0;
        }
      }
    }
  }
  return i;
}

double sub_462698@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  std::string v5 = (os_log_t *)sub_32A48(24);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (*(char *)(a1 + 55) >= 0) {
      uint64_t v7 = a1 + 32;
    }
    uint64_t v8 = *(void *)(a1 + 8);
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v8 = v4;
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)unint64_t v28 = "DSPGraphConfig_Utilities.cpp";
    *(_WORD *)&v28[8] = 1024;
    *(_DWORD *)&v28[10] = 241;
    __int16 v29 = 2080;
    *(void *)unint64_t v30 = v7;
    *(_WORD *)&v30[8] = 2080;
    *(void *)&v30[10] = v8;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading preset for box %s from path %s", buf, 0x26u);
  }
  sub_16CD18(&v26, v4);
  uint64_t v9 = v26;
  if (v26)
  {
    sub_22210((CFStringRef *)buf, "BoxName");
    long long v12 = *(const UInt8 **)(a1 + 32);
    uint64_t v11 = a1 + 32;
    int v10 = v12;
    int v13 = *(char *)(v11 + 23);
    if (v13 >= 0) {
      BOOL v14 = (const UInt8 *)v11;
    }
    else {
      BOOL v14 = v10;
    }
    if (v13 >= 0) {
      CFIndex v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      CFIndex v15 = *(void *)(v11 + 8);
    }
    *(void *)&v28[4] = CFStringCreateWithBytes(0, v14, v15, 0x8000100u, 0);
    if (!*(void *)&v28[4])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_22210((CFStringRef *)&v28[12], "Preset");
    CFRetain(v9);
    *(void *)&v30[4] = v9;
    v25[0] = buf;
    v25[1] = 2;
    CFDictionaryRef v16 = sub_4D3D8((uint64_t)v25);
    for (uint64_t i = 0; i != -32; i -= 16)
    {
      uint64_t v18 = *(const void **)&v30[i + 4];
      if (v18) {
        CFRelease(v18);
      }
      long long v19 = *(const void **)&v28[i + 12];
      if (v19) {
        CFRelease(v19);
      }
    }
    sub_384254((uint64_t)v25, v16);
    *(_DWORD *)int buf = 1652060275;
    sub_3847B8((uint64_t)&v28[4], (int *)v25);
    sub_15A1EC(a2, (int *)buf, 1);
    sub_3840C4((uint64_t)&v28[4]);
    sub_3840C4((uint64_t)v25);
    CFRelease(v16);
    if (v9) {
      CFRelease(v9);
    }
  }
  else
  {
    uint64_t v21 = (os_log_t *)sub_32A48(24);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 31) >= 0) {
        uint64_t v23 = v4;
      }
      else {
        uint64_t v23 = *(void *)(a1 + 8);
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)unint64_t v28 = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&v28[8] = 1024;
      *(_DWORD *)&v28[10] = 251;
      __int16 v29 = 2080;
      *(void *)unint64_t v30 = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Loading plist for preset from path %s returned invalid", buf, 0x1Cu);
    }
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void sub_4629A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_60594(&a13);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_462AB4(void *a1)
{
  sub_63A00((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_462AF0(uint64_t a1)
{
}

char *sub_462AF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_640710;
  return sub_462B24((char *)(a2 + 8), (long long *)(a1 + 8));
}

char *sub_462B24(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::__fs::filesystem::path __dst = v4;
  }
  std::string v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_21E8C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)std::string v5 = v6;
  }
  return __dst;
}

void sub_462BA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_462BBC(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = off_640710;
  sub_462B24(v2 + 8, v1);
  return v2;
}

void sub_462C10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_462C24(uint64_t a1)
{
  *(void *)a1 = off_640710;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

uint64_t sub_462CA4(uint64_t a1)
{
  *(void *)a1 = off_640710;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

double sub_462D04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  std::string v5 = (os_log_t *)sub_32A48(24);
  long long v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(__p, *(_DWORD *)(a1 + 32));
    uint64_t v7 = v17 >= 0 ? __p : (void **)__p[0];
    uint64_t v8 = *(char *)(a1 + 31) >= 0 ? v4 : *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315906;
    long long v19 = "DSPGraphConfig_Utilities.cpp";
    __int16 v20 = 1024;
    int v21 = 274;
    __int16 v22 = 2080;
    uint64_t v23 = v7;
    __int16 v24 = 2080;
    uint64_t v25 = v8;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading plist for property %s from path %s", buf, 0x26u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_16CD18(&cf, v4);
  CFTypeRef v9 = cf;
  if (cf)
  {
    sub_384254((uint64_t)__p, cf);
    *(_DWORD *)int buf = *(_DWORD *)(a1 + 32);
    sub_3847B8((uint64_t)&v19 + 4, (int *)__p);
    sub_15A1EC(a2, (int *)buf, 1);
    sub_3840C4((uint64_t)&v19 + 4);
    sub_3840C4((uint64_t)__p);
    CFRelease(v9);
  }
  else
  {
    uint64_t v11 = (os_log_t *)sub_32A48(24);
    long long v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, *(_DWORD *)(a1 + 32));
      if (v17 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      if (*(char *)(a1 + 31) >= 0) {
        uint64_t v14 = v4;
      }
      else {
        uint64_t v14 = *(void *)(a1 + 8);
      }
      *(_DWORD *)int buf = 136315906;
      long long v19 = "DSPGraphConfig_Utilities.cpp";
      __int16 v20 = 1024;
      int v21 = 283;
      __int16 v22 = 2080;
      uint64_t v23 = v13;
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Loading plist for property %s from path %s was invalid", buf, 0x26u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void sub_462F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_462FBC(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void sub_463000(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

unsigned char *sub_463014(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6406C8;
  double result = (unsigned char *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    double result = sub_21E8C(result, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)double result = v5;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

char *sub_463088(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = off_6406C8;
  uint64_t v3 = v2 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_21E8C(v3, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_463104(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_463118(uint64_t a1)
{
  *(void *)a1 = off_6406C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

uint64_t sub_463188(uint64_t a1)
{
  *(void *)a1 = off_6406C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_4631D8(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  if (sub_2D4480(a2, a3))
  {
    sub_460C84();
  }
  long long v5 = (os_log_t *)sub_32A48(20);
  long long v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    if ((a3[23] & 0x80u) == 0) {
      uint64_t v7 = (uint64_t *)a3;
    }
    else {
      uint64_t v7 = *(uint64_t **)a3;
    }
    int v8 = 136315650;
    CFTypeRef v9 = "DSPGraphConfig_Utilities.cpp";
    __int16 v10 = 1024;
    int v11 = 452;
    __int16 v12 = 2080;
    int v13 = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Graph collection missing expected key %s", (uint8_t *)&v8, 0x1Cu);
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  strcpy((char *)(a1 + 48), "tlfd");
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
}

void sub_46334C(uint64_t a1)
{
  *(void *)a1 = off_640770;
  sub_4633BC(*(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));

  operator delete();
}

void sub_4633BC(void *a1)
{
  if (a1)
  {
    sub_4633BC(*a1);
    sub_4633BC(a1[1]);
    sub_463E0((void *)a1[8]);
    sub_463E0((void *)a1[5]);
    operator delete(a1);
  }
}

uint64_t sub_463418(uint64_t a1)
{
  *(void *)a1 = off_640770;
  sub_4633BC(*(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

uint64_t sub_463468()
{
  uint64_t result = qword_669A10;
  if (!qword_669A10)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    unint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        long long v5 = "DeviceInfoListener.cpp";
        __int16 v6 = 1024;
        int v7 = 46;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [sDeviceInfoListener is NULL]: \"sDeviceInfoListener is NULL!\"", (uint8_t *)&v4, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sDeviceInfoListener is NULL!");
  }
  return result;
}

void sub_46356C(_Unwind_Exception *exception_object)
{
}

void sub_463588(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  __int16 v6 = (uint64_t **)(a1 + 80);
  long long v5 = *(uint64_t **)(a1 + 80);
  if (!v5)
  {
    int v7 = (uint64_t **)(a1 + 80);
LABEL_9:
    CFTypeRef v9 = (uint64_t *)operator new(0x60uLL);
    sub_46A4C(v9 + 4, a2);
    sub_463774(v9 + 7, (void *)(a2 + 24));
    *((_OWORD *)v9 + 5) = *(_OWORD *)(a2 + 48);
    uint64_t *v9 = 0;
    v9[1] = 0;
    uint64_t v9[2] = (uint64_t)v7;
    *__int16 v6 = v9;
    uint64_t v10 = **(void **)(a1 + 72);
    if (v10)
    {
      *(void *)(a1 + 72) = v10;
      CFTypeRef v9 = *v6;
    }
    sub_46D00(*(uint64_t **)(a1 + 80), v9);
    ++*(void *)(a1 + 88);
    goto LABEL_12;
  }
  while (1)
  {
    while (1)
    {
      int v7 = (uint64_t **)v5;
      uint64_t v8 = (uint64_t)(v5 + 4);
      if (!sub_463820(a2, (uint64_t)(v5 + 4))) {
        break;
      }
      long long v5 = *v7;
      __int16 v6 = v7;
      if (!*v7) {
        goto LABEL_9;
      }
    }
    if (!sub_463820(v8, a2)) {
      break;
    }
    __int16 v6 = v7 + 1;
    long long v5 = v7[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!*v6) {
    goto LABEL_9;
  }
  int v11 = (os_log_t *)sub_32A48(17);
  __int16 v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    int v13 = 136315394;
    uint64_t v14 = "DeviceInfoListener.cpp";
    __int16 v15 = 1024;
    int v16 = 55;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified listener already exists!", (uint8_t *)&v13, 0x12u);
  }
LABEL_12:
  std::mutex::unlock(v4);
}

void sub_463738(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_463774(uint64_t *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  int v4 = a2 + 1;
  long long v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_1773E0(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      __int16 v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          __int16 v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      long long v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_46380C(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

BOOL sub_463820(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 56);
  unint64_t v3 = *(void *)(a2 + 56);
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    unint64_t v5 = *(void *)(a1 + 48);
    unint64_t v6 = *(void *)(a2 + 48);
    BOOL v4 = v5 >= v6;
    if (v5 == v6)
    {
      CFTypeRef v9 = *(void **)a1;
      if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
      {
        if (v9 == (void *)(a1 + 8))
        {
LABEL_22:
          uint64_t v18 = *(void **)(a1 + 24);
          if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
          {
            if (v18 == (void *)(a1 + 32)) {
              return 0;
            }
            long long v19 = *(void **)(a2 + 24);
            __int16 v20 = v19;
            int v21 = *(void **)(a1 + 24);
            while (*((_DWORD *)v21 + 7) == *((_DWORD *)v20 + 7))
            {
              __int16 v22 = (void *)v21[1];
              uint64_t v23 = v21;
              if (v22)
              {
                do
                {
                  int v21 = v22;
                  __int16 v22 = (void *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  int v21 = (void *)v23[2];
                  BOOL v15 = *v21 == (void)v23;
                  uint64_t v23 = v21;
                }
                while (!v15);
              }
              __int16 v24 = (void *)v20[1];
              if (v24)
              {
                do
                {
                  uint64_t v25 = v24;
                  __int16 v24 = (void *)*v24;
                }
                while (v24);
              }
              else
              {
                do
                {
                  uint64_t v25 = (void *)v20[2];
                  BOOL v15 = *v25 == (void)v20;
                  __int16 v20 = v25;
                }
                while (!v15);
              }
              uint64_t v7 = 0;
              __int16 v20 = v25;
              if (v21 == (void *)(a1 + 32)) {
                return v7;
              }
            }
          }
          else
          {
            long long v19 = *(void **)(a2 + 24);
          }
          int64_t v27 = (void *)(a1 + 32);
          unint64_t v28 = (void *)(a2 + 32);
          BOOL v29 = v19 == (void *)(a2 + 32);
          BOOL v30 = v18 == (void *)(a1 + 32);
          if (v18 == (void *)(a1 + 32) || v19 == v28)
          {
LABEL_57:
            if (v30) {
              char v26 = v29 - 1;
            }
            else {
              char v26 = 1;
            }
          }
          else
          {
            while (1)
            {
              char v26 = sub_463AD0((_DWORD *)v18 + 7, (_DWORD *)v19 + 7);
              if (v26) {
                break;
              }
              std::string::size_type v31 = (void *)v18[1];
              if (v31)
              {
                do
                {
                  std::string::size_type v32 = v31;
                  std::string::size_type v31 = (void *)*v31;
                }
                while (v31);
              }
              else
              {
                do
                {
                  std::string::size_type v32 = (void *)v18[2];
                  BOOL v15 = *v32 == (void)v18;
                  uint64_t v18 = v32;
                }
                while (!v15);
              }
              uint64_t v33 = (void *)v19[1];
              if (v33)
              {
                do
                {
                  long long v34 = v33;
                  uint64_t v33 = (void *)*v33;
                }
                while (v33);
              }
              else
              {
                do
                {
                  long long v34 = (void *)v19[2];
                  BOOL v15 = *v34 == (void)v19;
                  long long v19 = v34;
                }
                while (!v15);
              }
              BOOL v29 = v34 == v28;
              BOOL v30 = v32 == v27;
              if (v32 != v27)
              {
                uint64_t v18 = v32;
                long long v19 = v34;
                if (v34 != v28) {
                  continue;
                }
              }
              goto LABEL_57;
            }
          }
          return v26 < 0;
        }
        uint64_t v10 = *(void **)a2;
        int v11 = *(void **)a2;
        __int16 v12 = *(void **)a1;
        while (*((_DWORD *)v12 + 7) == *((_DWORD *)v11 + 7))
        {
          int v13 = (void *)v12[1];
          uint64_t v14 = v12;
          if (v13)
          {
            do
            {
              __int16 v12 = v13;
              int v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              __int16 v12 = (void *)v14[2];
              BOOL v15 = *v12 == (void)v14;
              uint64_t v14 = v12;
            }
            while (!v15);
          }
          int v16 = (void *)v11[1];
          if (v16)
          {
            do
            {
              char v17 = v16;
              int v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              char v17 = (void *)v11[2];
              BOOL v15 = *v17 == (void)v11;
              int v11 = v17;
            }
            while (!v15);
          }
          int v11 = v17;
          if (v12 == (void *)(a1 + 8)) {
            goto LABEL_22;
          }
        }
      }
      else
      {
        uint64_t v10 = *(void **)a2;
      }
      std::string::size_type v35 = (uint64_t (*)(uint64_t, uint64_t))sub_3F3330;
      char v26 = sub_3F3234(v9, (void *)(a1 + 8), v10, (void *)(a2 + 8), &v35);
      return v26 < 0;
    }
  }
  return !v4;
}

uint64_t sub_463AD0(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 1;
  }
  if (*a1 == *a2) {
    return 0;
  }
  else {
    return v2;
  }
}

void sub_463AEC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  unint64_t v5 = *(void **)(a1 + 80);
  if (!v5) {
    goto LABEL_8;
  }
  unint64_t v6 = (void *)(a1 + 80);
  do
  {
    BOOL v7 = sub_463820((uint64_t)(v5 + 4), a2);
    BOOL v8 = v5 + 1;
    if (!v7)
    {
      BOOL v8 = v5;
      unint64_t v6 = v5;
    }
    unint64_t v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 == (void *)(a1 + 80) || sub_463820(a2, (uint64_t)(v6 + 4)))
  {
LABEL_8:
    CFTypeRef v9 = (os_log_t *)sub_32A48(17);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      char v17 = "DeviceInfoListener.cpp";
      __int16 v18 = 1024;
      int v19 = 64;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified listener does not exist", (uint8_t *)&v16, 0x12u);
    }
  }
  else
  {
    int v11 = (void *)v6[1];
    if (v11)
    {
      do
      {
        __int16 v12 = v11;
        int v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      int v13 = v6;
      do
      {
        __int16 v12 = (void *)v13[2];
        BOOL v14 = *v12 == (void)v13;
        int v13 = v12;
      }
      while (!v14);
    }
    if (*(void **)(a1 + 72) == v6) {
      *(void *)(a1 + 72) = v12;
    }
    BOOL v15 = *(uint64_t **)(a1 + 80);
    --*(void *)(a1 + 88);
    sub_89144(v15, v6);
    sub_463E0((void *)v6[8]);
    sub_463E0((void *)v6[5]);
    operator delete(v6);
  }
  std::mutex::unlock(v4);
}

void sub_463C90(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_463CAC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int v21 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  BOOL v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
  {
    do
    {
      if (v8[6]) {
        uint64_t v9 = (uint64_t)(v8 + 4);
      }
      else {
        uint64_t v9 = a3;
      }
      sub_46A4C((uint64_t *)&v27, v9);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      __int16 v24 = &v25;
      sub_242658((uint64_t)buf, *(void **)a3, (void *)(a3 + 8), v27, v28, (uint64_t)&v24, (uint64_t)&v25);
      if (v26) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v28[1] == 0;
      }
      if (v10)
      {
        sub_463774(&v22, v8 + 7);
        int v11 = v23[0];
        if (v23[0])
        {
          int v12 = *a4;
          int v13 = v23;
          do
          {
            BOOL v14 = v11;
            BOOL v15 = v13;
            int v16 = *((_DWORD *)v11 + 7);
            char v17 = v11 + 1;
            if (v16 >= v12)
            {
              char v17 = v14;
              int v13 = (void **)v14;
            }
            int v11 = (void *)*v17;
          }
          while (v11);
          if (v13 != v23)
          {
            if (v16 < v12) {
              BOOL v14 = v15;
            }
            if (v12 >= *((_DWORD *)v14 + 7))
            {
              __int16 v18 = (void (*)(uint64_t, uint64_t *, void, void))v8[10];
              sub_46A4C(v29, (uint64_t)&v24);
              v18(a2, v29, *a4, v8[11]);
              sub_463E0((void *)v29[1]);
            }
          }
        }
        sub_463E0(v23[0]);
      }
      sub_463E0(v25);
      sub_463E0(v28[0]);
      int v19 = (void *)v8[1];
      if (v19)
      {
        do
        {
          __int16 v20 = v19;
          int v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          __int16 v20 = (void *)v8[2];
          BOOL v10 = *v20 == (void)v8;
          BOOL v8 = v20;
        }
        while (!v10);
      }
      BOOL v8 = v20;
    }
    while (v20 != (void *)(a1 + 80));
  }
  std::mutex::unlock(v21);
}

void sub_4640E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
}

std::string *sub_464158(void *a1, int a2)
{
  unint64_t v3 = a1;
  uint64_t result = (std::string *)sub_21C8C(a1, "unknown");
  switch(a2)
  {
    case 0:
      return sub_635BC((std::string *)v3, "ChannelConfigurationChanged", 0x1BuLL);
    case 1:
      if (*((char *)v3 + 23) < 0)
      {
        v3[1] = 21;
        unint64_t v3 = (void *)*v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 21;
      }
      qmemcpy(v3, "TimeSyncDeviceCreated", 21);
      unint64_t v6 = (char *)v3 + 21;
      goto LABEL_16;
    case 2:
      if (*((char *)v3 + 23) < 0)
      {
        v3[1] = 14;
        unint64_t v3 = (void *)*v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 14;
      }
      unint64_t v5 = "PortsConnected";
      goto LABEL_13;
    case 3:
      if (*((char *)v3 + 23) < 0)
      {
        v3[1] = 14;
        unint64_t v3 = (void *)*v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 14;
      }
      unint64_t v5 = "RouteDidChange";
LABEL_13:
      *unint64_t v3 = *(void *)v5;
      *(void *)((char *)v3 + 6) = *(void *)(v5 + 6);
      unint64_t v6 = (char *)v3 + 14;
LABEL_16:
      *unint64_t v6 = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_464278(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_4642A4()
{
  sub_464320((uint64_t)v0);
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    BOOL v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    unsigned int v2 = v1;
    operator delete(v1);
  }
}

void sub_46430C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_464320(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v3 = sub_6C174(v1);
  *(_DWORD *)(v3 + 80) = 16843009;
  *(_DWORD *)(v3 + 72) = 16843009;
  *(_WORD *)(v3 + 76) = 257;
  *(_WORD *)(v3 + 84) = 257;
  if (!*(unsigned char *)(v3 + 20)) {
    *(unsigned char *)(v2 + 20) = 1;
  }
  *(_DWORD *)(v2 + 16) = 4;
  v1298[0] = (void *)0x300000002;
  sub_8732C((char *)(v2 + 48), (char *)v1298, (uint64_t)&v1298[1], 2uLL);
  LODWORD(v1298[0]) = 4;
  sub_8732C((char *)(v2 + 24), (char *)v1298, (uint64_t)v1298 + 4, 1uLL);
  *(_WORD *)(v2 + 90) = 257;
  *(_OWORD *)v1298 = xmmword_4E78E0;
  sub_6C4EC((uint64_t **)(v2 + 96), (unsigned int *)v1298, &v1299);
  *(_DWORD *)(v2 + 404) = 1077936128;
  *(unsigned char *)(v2 + 408) = 1;
  *(_WORD *)(v2 + 322) = 257;
  if (!*(unsigned char *)(v2 + 956)) {
    *(unsigned char *)(v2 + 956) = 1;
  }
  *(_DWORD *)(v2 + 952) = 2;
  BOOL v4 = (uint64_t *)sub_3EFF58();
  uint64_t v193 = v2;
  sub_21C8C(v398, "");
  sub_21C8C(v1263, "");
  sub_21C8C(&v1229, off_648B50);
  sub_21C8C(&v1195, "AU");
  sub_21C8C(&v1161, "VAD");
  sub_6D364((char *)v1298, (long long *)v398, (uint64_t)v1263, &v1229, &v1195, &v1161);
  sub_6D600(v2 + 432, (long long *)v1298);
  if (v1304 < 0) {
    operator delete(__p);
  }
  if (v1302 < 0) {
    operator delete(v1301);
  }
  if (v1300 < 0) {
    operator delete(v1298[0]);
  }
  if (SHIBYTE(v1161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1229.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1264) < 0) {
    operator delete(v1263[0]);
  }
  if (v399 < 0) {
    operator delete(v398[0]);
  }
  sub_21C8C(v422, "speaker_general");
  sub_21C8C(v398, "speaker_general");
  uint64_t v401 = 0;
  uint64_t v400 = 0;
  uint64_t v402 = 0;
  sub_21C8C(v403, "speaker_general");
  sub_21C8C(v404, "speaker_general");
  memset(&v404[3], 0, 24);
  int v405 = 1668051824;
  CFTypeRef v397 = 0;
  v1292[0] = 1936749683;
  uint64_t v1293 = 0;
  CFTypeRef v396 = 0;
  int v1294 = 1936746861;
  uint64_t v1295 = 0;
  unint64_t v5 = operator new(0xCuLL);
  v1289 = (char *)(v5 + 3);
  *(void *)unint64_t v5 = 0x6473706700000001;
  v5[2] = 1869768046;
  v1287 = v5;
  v1288 = v5 + 3;
  long long v393 = 0;
  long long v391 = 0;
  long long v392 = 0;
  v1263[0] = &v391;
  LOBYTE(v1263[1]) = 0;
  long long v391 = operator new(0x18uLL);
  long long v392 = v391;
  long long v393 = v391 + 3;
  long long v392 = sub_1CDC20((uint64_t)&v393, (uint64_t)&v1287, (uint64_t)&v1290, v391);
  sub_1CDCD4((uint64_t)&v1290, (uint64_t *)&v391);
  v394[0] = &v1290;
  v394[1] = 1;
  CFDictionaryRef v6 = sub_4D3D8((uint64_t)v394);
  int v1296 = 1768907891;
  CFDictionaryRef v1297 = v6;
  CFTypeRef v395 = 0;
  uint64_t v407 = 0;
  uint64_t v408 = 0;
  v406 = 0;
  v1263[0] = &v406;
  LOBYTE(v1263[1]) = 0;
  BOOL v7 = (char *)operator new(0x30uLL);
  uint64_t v8 = 0;
  v406 = v7;
  uint64_t v407 = v7;
  uint64_t v408 = v7 + 48;
  do
  {
    sub_6D16C((uint64_t)&v7[v8 * 4], v1292[v8], *(CFTypeRef *)&v1292[v8 + 2]);
    v8 += 4;
  }
  while (v8 != 12);
  uint64_t v407 = v7 + 48;
  long long v409 = 0u;
  long long v410 = 0u;
  uint64_t v9 = operator new(8uLL);
  *((void *)&v409 + 1) = v9;
  void *v9 = 0x6C766F6C766F6C75;
  *((void *)&v410 + 1) = v9 + 1;
  *(void *)&long long v410 = v9 + 1;
  v412[0] = 0;
  v412[1] = 0;
  v411 = v412;
  int v415 = 0;
  CFTypeRef v413 = 0;
  CFTypeRef v414 = 0;
  BOOL v10 = operator new(0x10uLL);
  CFTypeRef v413 = v10;
  *BOOL v10 = xmmword_4E78D0;
  int v415 = v10 + 1;
  CFTypeRef v414 = v10 + 1;
  char v416 = 0;
  char v417 = 0;
  memset(v418, 0, sizeof(v418));
  uint64_t v419 = 0;
  *(_OWORD *)v1263 = xmmword_5968C4;
  uint64_t v1264 = 2;
  sub_6D1AC((uint64_t)v418, (int *)v1263, 3);
  char v420 = 0;
  uint64_t v421 = 0;
  sub_6D224(v1298, (long long *)v422, (long long *)v398);
  sub_21C8C(v389, "speaker_latenight_general");
  sub_21C8C(v1263, "speaker_general");
  uint64_t v1266 = 0;
  uint64_t v1265 = 0;
  uint64_t v1267 = 0;
  sub_21C8C(v1268, "speaker_latenight_general");
  sub_21C8C(v1269, "speaker_general");
  memset(&v1269[3], 0, 24);
  int v1270 = 1668051824;
  CFTypeRef v388 = 0;
  v1257[0] = 1936749683;
  uint64_t v1258 = 0;
  CFTypeRef v387 = 0;
  int v1259 = 1936746861;
  uint64_t v1260 = 0;
  int v11 = operator new(0xCuLL);
  v1254 = (char *)(v11 + 3);
  *(void *)int v11 = 0x6473706700000001;
  v11[2] = 1869768046;
  v1252 = v11;
  v1253 = v11 + 3;
  uint64_t v384 = 0;
  long long v382 = 0;
  uint64_t v383 = 0;
  v1229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v382;
  v1229.__r_.__value_.__s.__data_[8] = 0;
  long long v382 = operator new(0x18uLL);
  uint64_t v383 = v382;
  uint64_t v384 = v382 + 3;
  uint64_t v383 = sub_1CDC20((uint64_t)&v384, (uint64_t)&v1252, (uint64_t)&v1255, v382);
  sub_1CDCD4((uint64_t)&v1255, (uint64_t *)&v382);
  v385[0] = &v1255;
  v385[1] = 1;
  CFDictionaryRef v12 = sub_4D3D8((uint64_t)v385);
  int v1261 = 1768907891;
  CFDictionaryRef v1262 = v12;
  CFTypeRef v386 = 0;
  v1272 = 0;
  v1273 = 0;
  v1271 = 0;
  v1229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1271;
  v1229.__r_.__value_.__s.__data_[8] = 0;
  int v13 = (char *)operator new(0x30uLL);
  uint64_t v14 = 0;
  v1271 = v13;
  v1272 = v13;
  v1273 = v13 + 48;
  do
  {
    sub_6D16C((uint64_t)&v13[v14 * 4], v1257[v14], *(CFTypeRef *)&v1257[v14 + 2]);
    v14 += 4;
  }
  while (v14 != 12);
  v1272 = v13 + 48;
  long long v1274 = 0u;
  long long v1275 = 0u;
  BOOL v15 = operator new(8uLL);
  *((void *)&v1274 + 1) = v15;
  *BOOL v15 = 0x6C766F6C766F6C75;
  *((void *)&v1275 + 1) = v15 + 1;
  *(void *)&long long v1275 = v15 + 1;
  v1277[0] = 0;
  v1277[1] = 0;
  v1276 = v1277;
  v1280 = 0;
  v1278 = 0;
  v1279 = 0;
  int v16 = operator new(0x10uLL);
  v1278 = v16;
  *int v16 = xmmword_4E78D0;
  v1280 = v16 + 1;
  v1279 = v16 + 1;
  char v1281 = 0;
  char v1282 = 0;
  memset(v1283, 0, sizeof(v1283));
  uint64_t v1284 = 0;
  *(_OWORD *)&v1229.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v1229.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v1283, (int *)&v1229, 3);
  char v1285 = 0;
  uint64_t v1286 = 0;
  sub_6D224(v1305, (long long *)v389, (long long *)v1263);
  sub_21C8C(v380, "speaker_movie");
  sub_21C8C(&v1229, "speaker_general");
  uint64_t v1231 = 0;
  uint64_t v1230 = 0;
  uint64_t v1232 = 0;
  sub_21C8C(v1233, "speaker_movie");
  sub_21C8C(v1234, "speaker_general");
  memset(&v1234[3], 0, 24);
  int v1235 = 1668051824;
  CFTypeRef v379 = 0;
  v1223[0] = 1936749683;
  uint64_t v1224 = 0;
  CFTypeRef v378 = 0;
  int v1225 = 1936746861;
  uint64_t v1226 = 0;
  char v17 = operator new(0xCuLL);
  v1220 = (char *)(v17 + 3);
  *(void *)char v17 = 0x6473706700000001;
  v17[2] = 1869768046;
  v1218 = v17;
  v1219 = v17 + 3;
  v375 = 0;
  char v373 = 0;
  v374 = 0;
  v1195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373;
  v1195.__r_.__value_.__s.__data_[8] = 0;
  char v373 = operator new(0x18uLL);
  v374 = v373;
  v375 = v373 + 3;
  v374 = sub_1CDC20((uint64_t)&v375, (uint64_t)&v1218, (uint64_t)&v1221, v373);
  sub_1CDCD4((uint64_t)&v1221, (uint64_t *)&v373);
  v376[0] = &v1221;
  v376[1] = 1;
  CFDictionaryRef v18 = sub_4D3D8((uint64_t)v376);
  int v1227 = 1768907891;
  CFDictionaryRef v1228 = v18;
  CFTypeRef v377 = 0;
  v1237 = 0;
  v1238 = 0;
  v1236 = 0;
  v1195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1236;
  v1195.__r_.__value_.__s.__data_[8] = 0;
  int v19 = (char *)operator new(0x30uLL);
  uint64_t v20 = 0;
  v1236 = v19;
  v1237 = v19;
  v1238 = v19 + 48;
  do
  {
    sub_6D16C((uint64_t)&v19[v20 * 4], v1223[v20], *(CFTypeRef *)&v1223[v20 + 2]);
    v20 += 4;
  }
  while (v20 != 12);
  v1237 = v19 + 48;
  long long v1239 = 0u;
  long long v1240 = 0u;
  int v21 = operator new(8uLL);
  *((void *)&v1239 + 1) = v21;
  void *v21 = 0x6C766F6C766F6C75;
  *((void *)&v1240 + 1) = v21 + 1;
  *(void *)&long long v1240 = v21 + 1;
  v1242[0] = 0;
  v1242[1] = 0;
  v1241 = v1242;
  v1245 = 0;
  v1243 = 0;
  v1244 = 0;
  uint64_t v22 = operator new(0x10uLL);
  v1243 = v22;
  *uint64_t v22 = xmmword_4E78D0;
  v1245 = v22 + 1;
  v1244 = v22 + 1;
  char v1246 = 0;
  char v1247 = 0;
  memset(v1248, 0, sizeof(v1248));
  uint64_t v1249 = 0;
  *(_OWORD *)&v1195.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v1195.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v1248, (int *)&v1195, 3);
  char v1250 = 0;
  uint64_t v1251 = 0;
  sub_6D224(v1306, (long long *)v380, (long long *)&v1229);
  sub_21C8C(v371, "speaker_latenight_movie");
  sub_21C8C(&v1195, "speaker_general");
  uint64_t v1197 = 0;
  uint64_t v1196 = 0;
  uint64_t v1198 = 0;
  sub_21C8C(v1199, "speaker_latenight_movie");
  sub_21C8C(v1200, "speaker_general");
  memset(&v1200[3], 0, 24);
  int v1201 = 1668051824;
  CFTypeRef v370 = 0;
  v1189[0] = 1936749683;
  uint64_t v1190 = 0;
  CFTypeRef v369 = 0;
  int v1191 = 1936746861;
  uint64_t v1192 = 0;
  uint64_t v23 = operator new(0xCuLL);
  v1186 = (char *)(v23 + 3);
  *(void *)uint64_t v23 = 0x6473706700000001;
  void v23[2] = 1869768046;
  v1184 = v23;
  v1185 = v23 + 3;
  char v366 = 0;
  v364 = 0;
  v365 = 0;
  v1161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v364;
  v1161.__r_.__value_.__s.__data_[8] = 0;
  v364 = operator new(0x18uLL);
  v365 = v364;
  char v366 = v364 + 3;
  v365 = sub_1CDC20((uint64_t)&v366, (uint64_t)&v1184, (uint64_t)&v1187, v364);
  sub_1CDCD4((uint64_t)&v1187, (uint64_t *)&v364);
  v367[0] = &v1187;
  v367[1] = 1;
  CFDictionaryRef v24 = sub_4D3D8((uint64_t)v367);
  int v1193 = 1768907891;
  CFDictionaryRef v1194 = v24;
  CFTypeRef v368 = 0;
  v1203 = 0;
  v1204 = 0;
  v1202 = 0;
  v1161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1202;
  v1161.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v25 = (char *)operator new(0x30uLL);
  uint64_t v26 = 0;
  v1202 = v25;
  v1203 = v25;
  v1204 = v25 + 48;
  do
  {
    sub_6D16C((uint64_t)&v25[v26 * 4], v1189[v26], *(CFTypeRef *)&v1189[v26 + 2]);
    v26 += 4;
  }
  while (v26 != 12);
  v1203 = v25 + 48;
  long long v1205 = 0u;
  long long v1206 = 0u;
  int64_t v27 = operator new(8uLL);
  *((void *)&v1205 + 1) = v27;
  void *v27 = 0x6C766F6C766F6C75;
  *((void *)&v1206 + 1) = v27 + 1;
  *(void *)&long long v1206 = v27 + 1;
  v1208[0] = 0;
  v1208[1] = 0;
  v1207 = v1208;
  v1211 = 0;
  v1209 = 0;
  v1210 = 0;
  unint64_t v28 = operator new(0x10uLL);
  v1209 = v28;
  _OWORD *v28 = xmmword_4E78D0;
  v1211 = v28 + 1;
  v1210 = v28 + 1;
  char v1212 = 0;
  char v1213 = 0;
  memset(v1214, 0, sizeof(v1214));
  uint64_t v1215 = 0;
  *(_OWORD *)&v1161.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v1161.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v1214, (int *)&v1161, 3);
  char v1216 = 0;
  uint64_t v1217 = 0;
  sub_6D224(v1307, (long long *)v371, (long long *)&v1195);
  sub_21C8C(v362, "speaker_alarm");
  sub_21C8C(&v1161, "speaker_general");
  uint64_t v1163 = 0;
  uint64_t v1162 = 0;
  uint64_t v1164 = 0;
  sub_21C8C(v1165, "speaker_alarm");
  sub_21C8C(v1166, "speaker_general");
  memset(&v1166[3], 0, 24);
  int v1167 = 1668051824;
  CFTypeRef v361 = 0;
  v1155[0] = 1936749683;
  uint64_t v1156 = 0;
  CFTypeRef v360 = 0;
  int v1157 = 1936746861;
  uint64_t v1158 = 0;
  BOOL v29 = operator new(0xCuLL);
  v1152 = (char *)(v29 + 3);
  *(void *)BOOL v29 = 0x6473706700000001;
  v29[2] = 1869768046;
  v1150 = v29;
  v1151 = v29 + 3;
  v357 = 0;
  int v355 = 0;
  v356 = 0;
  *(void *)&long long v1126 = &v355;
  BYTE8(v1126) = 0;
  int v355 = operator new(0x18uLL);
  v356 = v355;
  v357 = v355 + 3;
  v356 = sub_1CDC20((uint64_t)&v357, (uint64_t)&v1150, (uint64_t)&v1153, v355);
  sub_1CDCD4((uint64_t)&v1153, (uint64_t *)&v355);
  v358[0] = &v1153;
  v358[1] = 1;
  CFDictionaryRef v30 = sub_4D3D8((uint64_t)v358);
  int v1159 = 1768907891;
  CFDictionaryRef v1160 = v30;
  CFTypeRef v359 = 0;
  v1169 = 0;
  v1170 = 0;
  v1168 = 0;
  *(void *)&long long v1126 = &v1168;
  BYTE8(v1126) = 0;
  std::string::size_type v31 = (char *)operator new(0x30uLL);
  uint64_t v32 = 0;
  v1168 = v31;
  v1169 = v31;
  v1170 = v31 + 48;
  do
  {
    sub_6D16C((uint64_t)&v31[v32 * 4], v1155[v32], *(CFTypeRef *)&v1155[v32 + 2]);
    v32 += 4;
  }
  while (v32 != 12);
  v1169 = v31 + 48;
  long long v1171 = 0u;
  long long v1172 = 0u;
  uint64_t v33 = operator new(8uLL);
  *((void *)&v1171 + 1) = v33;
  *uint64_t v33 = 0x6C766F6C766F6C75;
  *((void *)&v1172 + 1) = v33 + 1;
  *(void *)&long long v1172 = v33 + 1;
  v1174[0] = 0;
  v1174[1] = 0;
  v1173 = v1174;
  v1177 = 0;
  v1175 = 0;
  v1176 = 0;
  long long v34 = operator new(0x10uLL);
  v1175 = v34;
  _OWORD *v34 = xmmword_4E78D0;
  v1177 = v34 + 1;
  v1176 = v34 + 1;
  char v1178 = 0;
  char v1179 = 0;
  memset(v1180, 0, sizeof(v1180));
  uint64_t v1181 = 0;
  long long v1126 = xmmword_5968C4;
  uint64_t v1127 = 2;
  sub_6D1AC((uint64_t)v1180, (int *)&v1126, 3);
  char v1182 = 0;
  uint64_t v1183 = 0;
  sub_6D224(v1308, (long long *)v362, (long long *)&v1161);
  sub_21C8C(v353, "speaker_measurement");
  sub_21C8C(&v1126, "speaker_measurement");
  uint64_t v1129 = 0;
  uint64_t v1128 = 0;
  uint64_t v1130 = 0;
  sub_21C8C(v1131, "speaker_measurement");
  sub_21C8C(v1132, "speaker_measurement");
  memset(&v1132[3], 0, 24);
  int v1133 = 1668051824;
  CFTypeRef v352 = 0;
  v1120[0] = 1936749683;
  uint64_t v1121 = 0;
  CFTypeRef v351 = 0;
  int v1122 = 1936746861;
  uint64_t v1123 = 0;
  std::string::size_type v35 = operator new(0xCuLL);
  v1117 = (char *)(v35 + 3);
  *(void *)std::string::size_type v35 = 0x6473706700000001;
  v35[2] = 1869768046;
  v1115 = v35;
  v1116 = v35 + 3;
  CFTypeRef v348 = 0;
  v346 = 0;
  CFTypeRef v347 = 0;
  *(void *)&long long v1091 = &v346;
  BYTE8(v1091) = 0;
  v346 = operator new(0x18uLL);
  CFTypeRef v347 = v346;
  CFTypeRef v348 = v346 + 3;
  CFTypeRef v347 = sub_1CDC20((uint64_t)&v348, (uint64_t)&v1115, (uint64_t)&v1118, v346);
  sub_1CDCD4((uint64_t)&v1118, (uint64_t *)&v346);
  v349[0] = &v1118;
  v349[1] = 1;
  CFDictionaryRef v36 = sub_4D3D8((uint64_t)v349);
  int v1124 = 1768907891;
  CFDictionaryRef v1125 = v36;
  CFTypeRef v350 = 0;
  v1135 = 0;
  v1136 = 0;
  v1134 = 0;
  *(void *)&long long v1091 = &v1134;
  BYTE8(v1091) = 0;
  std::string::size_type v37 = (char *)operator new(0x30uLL);
  uint64_t v38 = 0;
  v1134 = v37;
  v1135 = v37;
  v1136 = v37 + 48;
  do
  {
    sub_6D16C((uint64_t)&v37[v38 * 4], v1120[v38], *(CFTypeRef *)&v1120[v38 + 2]);
    v38 += 4;
  }
  while (v38 != 12);
  v1135 = v37 + 48;
  long long v1137 = 0u;
  long long v1138 = 0u;
  CFDictionaryRef v39 = operator new(4uLL);
  *((void *)&v1137 + 1) = v39;
  _DWORD *v39 = 1987405668;
  *((void *)&v1138 + 1) = v39 + 1;
  *(void *)&long long v1138 = v39 + 1;
  v1140[0] = 0;
  v1140[1] = 0;
  v1139 = v1140;
  v1143 = 0;
  v1141 = 0;
  v1142 = 0;
  std::string::size_type v40 = operator new(0x10uLL);
  v1141 = v40;
  _OWORD *v40 = xmmword_4E78D0;
  v1143 = v40 + 1;
  v1142 = v40 + 1;
  char v1144 = 0;
  char v1145 = 0;
  memset(v1146, 0, sizeof(v1146));
  uint64_t v1147 = 0;
  long long v1091 = xmmword_5968C4;
  uint64_t v1092 = 2;
  sub_6D1AC((uint64_t)v1146, (int *)&v1091, 3);
  char v1148 = 0;
  uint64_t v1149 = 0;
  sub_6D224(v1309, (long long *)v353, &v1126);
  sub_21C8C(v344, "speaker_raw");
  sub_21C8C(&v1091, "speaker_raw");
  uint64_t v1094 = 0;
  uint64_t v1093 = 0;
  uint64_t v1095 = 0;
  sub_21C8C(v1096, "speaker_measurement");
  sub_21C8C(v1097, "speaker_raw");
  memset(&v1097[3], 0, 24);
  int v1098 = 1668051824;
  CFTypeRef v343 = 0;
  v1085[0] = 1936749683;
  uint64_t v1086 = 0;
  CFTypeRef v342 = 0;
  int v1087 = 1936746861;
  uint64_t v1088 = 0;
  uint64_t v41 = operator new(0xCuLL);
  v1082 = (char *)(v41 + 3);
  *(void *)uint64_t v41 = 0x6473706700000001;
  uint64_t v41[2] = 1869768046;
  v1080 = v41;
  v1081 = v41 + 3;
  CFTypeRef v339 = 0;
  v337 = 0;
  v338 = 0;
  *(void *)&long long v1056 = &v337;
  BYTE8(v1056) = 0;
  v337 = operator new(0x18uLL);
  v338 = v337;
  CFTypeRef v339 = v337 + 3;
  v338 = sub_1CDC20((uint64_t)&v339, (uint64_t)&v1080, (uint64_t)&v1083, v337);
  sub_1CDCD4((uint64_t)&v1083, (uint64_t *)&v337);
  v340[0] = &v1083;
  v340[1] = 1;
  CFDictionaryRef v42 = sub_4D3D8((uint64_t)v340);
  int v1089 = 1768907891;
  CFDictionaryRef v1090 = v42;
  CFTypeRef v341 = 0;
  v1100 = 0;
  v1101 = 0;
  v1099 = 0;
  *(void *)&long long v1056 = &v1099;
  BYTE8(v1056) = 0;
  uint64_t v43 = (char *)operator new(0x30uLL);
  uint64_t v44 = 0;
  v1099 = v43;
  v1100 = v43;
  v1101 = v43 + 48;
  do
  {
    sub_6D16C((uint64_t)&v43[v44 * 4], v1085[v44], *(CFTypeRef *)&v1085[v44 + 2]);
    v44 += 4;
  }
  while (v44 != 12);
  v1100 = v43 + 48;
  long long v1102 = 0u;
  long long v1103 = 0u;
  uint64_t v45 = operator new(4uLL);
  *((void *)&v1102 + 1) = v45;
  *uint64_t v45 = 1987405668;
  *((void *)&v1103 + 1) = v45 + 1;
  *(void *)&long long v1103 = v45 + 1;
  v1105[0] = 0;
  v1105[1] = 0;
  v1104 = v1105;
  v1108 = 0;
  v1106 = 0;
  v1107 = 0;
  unint64_t v46 = operator new(0x10uLL);
  v1106 = v46;
  _OWORD *v46 = xmmword_4E78D0;
  v1108 = v46 + 1;
  v1107 = v46 + 1;
  char v1109 = 0;
  char v1110 = 0;
  memset(v1111, 0, sizeof(v1111));
  uint64_t v1112 = 0;
  long long v1056 = xmmword_5968C4;
  uint64_t v1057 = 2;
  sub_6D1AC((uint64_t)v1111, (int *)&v1056, 3);
  char v1113 = 0;
  uint64_t v1114 = 0;
  sub_6D224(v1310, (long long *)v344, &v1091);
  sub_21C8C(v335, "speaker_ringtone");
  sub_21C8C(&v1056, "speaker_general");
  uint64_t v1059 = 0;
  uint64_t v1058 = 0;
  uint64_t v1060 = 0;
  sub_21C8C(v1061, "speaker_ringtone");
  sub_21C8C(v1062, "speaker_general");
  memset(&v1062[3], 0, 24);
  int v1063 = 1668051824;
  CFTypeRef v334 = 0;
  v1050[0] = 1936749683;
  uint64_t v1051 = 0;
  CFTypeRef v333 = 0;
  int v1052 = 1936746861;
  uint64_t v1053 = 0;
  std::string::size_type v47 = operator new(0xCuLL);
  v1047 = (char *)(v47 + 3);
  *(void *)std::string::size_type v47 = 0x6473706700000001;
  v47[2] = 1869768046;
  long long v1045 = v47;
  long long v1046 = v47 + 3;
  v330 = 0;
  v328 = 0;
  v329 = 0;
  *(void *)&long long v1024 = &v328;
  BYTE8(v1024) = 0;
  v328 = operator new(0x18uLL);
  v329 = v328;
  v330 = v328 + 3;
  v329 = sub_1CDC20((uint64_t)&v330, (uint64_t)&v1045, (uint64_t)&v1048, v328);
  sub_1CDCD4((uint64_t)&v1048, (uint64_t *)&v328);
  v331[0] = &v1048;
  v331[1] = 1;
  CFDictionaryRef v48 = sub_4D3D8((uint64_t)v331);
  int v1054 = 1768907891;
  CFDictionaryRef v1055 = v48;
  CFTypeRef v332 = 0;
  int v1065 = 0;
  CFDictionaryRef v1066 = 0;
  uint64_t v1064 = 0;
  *(void *)&long long v1024 = &v1064;
  BYTE8(v1024) = 0;
  BOOL v49 = (char *)operator new(0x30uLL);
  uint64_t v50 = 0;
  uint64_t v1064 = v49;
  int v1065 = v49;
  CFDictionaryRef v1066 = v49 + 48;
  do
  {
    sub_6D16C((uint64_t)&v49[v50 * 4], v1050[v50], *(CFTypeRef *)&v1050[v50 + 2]);
    v50 += 4;
  }
  while (v50 != 12);
  int v1065 = v49 + 48;
  long long v1067 = 0u;
  long long v1068 = 0u;
  uint64_t v51 = operator new(8uLL);
  *((void *)&v1067 + 1) = v51;
  void *v51 = 0x6C766F6C766F6C75;
  *((void *)&v1068 + 1) = v51 + 1;
  *(void *)&long long v1068 = v51 + 1;
  v1070[0] = 0;
  v1070[1] = 0;
  v1069 = v1070;
  v1073 = 0;
  v1071 = 0;
  v1072 = 0;
  int v52 = operator new(0x10uLL);
  v1071 = v52;
  _OWORD *v52 = xmmword_4E78D0;
  v1073 = v52 + 1;
  v1072 = v52 + 1;
  char v1074 = 0;
  char v1075 = 0;
  memset(v1076, 0, sizeof(v1076));
  uint64_t v1077 = 0;
  long long v1024 = xmmword_5968C4;
  uint64_t v1025 = 2;
  sub_6D1AC((uint64_t)v1076, (int *)&v1024, 3);
  char v1078 = 0;
  uint64_t v1079 = 0;
  sub_6D224(v1311, (long long *)v335, &v1056);
  sub_21C8C(v326, "front_mic_general");
  sub_21C8C(&v1024, "front_mic_general");
  uint64_t v1027 = 0;
  uint64_t v1026 = 0;
  uint64_t v1028 = 0;
  sub_21C8C(v1029, "front_mic_general");
  sub_21C8C(v1030, "front_mic_general");
  memset(&v1030[3], 0, 24);
  int v1031 = 1684434036;
  sub_1CDF04(v1021, "aufx-firf-appl");
  int v323 = sub_8598C(v4, 0x666E7431u);
  sub_1CDF58((uint64_t)v1022, "VPMicIndex", &v323);
  v324[0] = v1021;
  v324[1] = 2;
  CFDictionaryRef v53 = sub_4D3D8((uint64_t)v324);
  v1022[4] = 1718186601;
  CFTypeRef v1023 = v53;
  CFTypeRef v325 = 0;
  CFDictionaryRef v1033 = 0;
  long long v1034 = 0;
  int v1032 = 0;
  *(void *)&long long v1000 = &v1032;
  BYTE8(v1000) = 0;
  int v1032 = (char *)operator new(0x10uLL);
  CFDictionaryRef v1033 = v1032;
  int64x2_t v54 = v1032 + 16;
  long long v1034 = v1032 + 16;
  sub_6D16C((uint64_t)v1032, 1718186601, v53);
  memset(v1038, 0, sizeof(v1038));
  long long v1035 = 0u;
  long long v1036 = 0u;
  CFDictionaryRef v1033 = v54;
  uint64_t v1037 = v1038;
  char v1040 = 0;
  memset(v1041, 0, sizeof(v1041));
  uint64_t v1042 = 0;
  char v1039 = 0;
  long long v1000 = xmmword_5968C4;
  uint64_t v1001 = 2;
  sub_6D1AC((uint64_t)v1041, (int *)&v1000, 3);
  char v1043 = 0;
  uint64_t v1044 = 0;
  sub_6D224(v1312, (long long *)v326, &v1024);
  sub_21C8C(v321, "bottom_mic_general");
  sub_21C8C(&v1000, "bottom_mic_general");
  uint64_t v1003 = 0;
  uint64_t v1002 = 0;
  uint64_t v1004 = 0;
  sub_21C8C(v1005, "bottom_mic_general");
  sub_21C8C(v1006, "bottom_mic_general");
  memset(&v1006[3], 0, 24);
  int v1007 = 1684434036;
  sub_1CDF04(v997, "aufx-firf-appl");
  int v318 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v998, "VPMicIndex", &v318);
  v319[0] = v997;
  v319[1] = 2;
  CFDictionaryRef v55 = sub_4D3D8((uint64_t)v319);
  v998[4] = 1718186601;
  CFTypeRef v999 = v55;
  CFTypeRef v320 = 0;
  v1009 = 0;
  v1010 = 0;
  int v1008 = 0;
  *(void *)&long long v976 = &v1008;
  BYTE8(v976) = 0;
  int v1008 = (char *)operator new(0x10uLL);
  v1009 = v1008;
  uint64_t v56 = v1008 + 16;
  v1010 = v1008 + 16;
  sub_6D16C((uint64_t)v1008, 1718186601, v55);
  memset(v1014, 0, sizeof(v1014));
  long long v1011 = 0u;
  long long v1012 = 0u;
  v1009 = v56;
  long long v1013 = v1014;
  char v1016 = 0;
  memset(v1017, 0, sizeof(v1017));
  uint64_t v1018 = 0;
  char v1015 = 0;
  long long v976 = xmmword_5968C4;
  uint64_t v977 = 2;
  sub_6D1AC((uint64_t)v1017, (int *)&v976, 3);
  char v1019 = 0;
  uint64_t v1020 = 0;
  sub_6D224(v1313, (long long *)v321, &v1000);
  sub_21C8C(v316, "bottom_mic_hearing_accessibility");
  sub_21C8C(&v976, "bottom_mic_hearing_accessibility");
  uint64_t v979 = 0;
  uint64_t v978 = 0;
  uint64_t v980 = 0;
  sub_21C8C(v981, "bottom_mic_hearing_accessibility");
  sub_21C8C(v982, "bottom_mic_hearing_accessibility");
  memset(&v982[3], 0, 24);
  int v983 = 1684434036;
  sub_1CDF04(v973, "aufx-firf-appl");
  int v313 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v974, "VPMicIndex", &v313);
  v314[0] = v973;
  v314[1] = 2;
  CFDictionaryRef v57 = sub_4D3D8((uint64_t)v314);
  v974[4] = 1718186601;
  CFTypeRef v975 = v57;
  CFTypeRef v315 = 0;
  v985 = 0;
  char v986 = 0;
  v984 = 0;
  *(void *)&long long v952 = &v984;
  BYTE8(v952) = 0;
  v984 = (char *)operator new(0x10uLL);
  v985 = v984;
  CFTypeRef v58 = v984 + 16;
  char v986 = v984 + 16;
  sub_6D16C((uint64_t)v984, 1718186601, v57);
  memset(v990, 0, sizeof(v990));
  long long v987 = 0u;
  long long v988 = 0u;
  v985 = v58;
  uint64_t v989 = v990;
  char v992 = 0;
  memset(v993, 0, sizeof(v993));
  uint64_t v994 = 0;
  char v991 = 0;
  long long v952 = xmmword_5968C4;
  uint64_t v953 = 2;
  sub_6D1AC((uint64_t)v993, (int *)&v952, 3);
  char v995 = 0;
  uint64_t v996 = 0;
  sub_6D224(v1314, (long long *)v316, &v976);
  sub_21C8C(v311, "bottom_mic2_general");
  sub_21C8C(&v952, "bottom_mic_general");
  uint64_t v955 = 0;
  uint64_t v954 = 0;
  uint64_t v956 = 0;
  sub_21C8C(v957, "bottom_mic_general");
  sub_21C8C(v958, "bottom_mic_general");
  memset(&v958[3], 0, 24);
  int v959 = 1684434036;
  sub_1CDF04(v949, "aufx-firf-appl");
  int v308 = sub_8598C(v4, 0x62746D32u);
  sub_1CDF58((uint64_t)v950, "VPMicIndex", &v308);
  v309[0] = v949;
  v309[1] = 2;
  CFDictionaryRef v59 = sub_4D3D8((uint64_t)v309);
  v950[4] = 1718186601;
  CFTypeRef v951 = v59;
  CFTypeRef v310 = 0;
  v961 = 0;
  CFTypeRef v962 = 0;
  v960 = 0;
  *(void *)&long long v928 = &v960;
  BYTE8(v928) = 0;
  v960 = (char *)operator new(0x10uLL);
  v961 = v960;
  CFIndex v60 = v960 + 16;
  CFTypeRef v962 = v960 + 16;
  sub_6D16C((uint64_t)v960, 1718186601, v59);
  memset(v966, 0, sizeof(v966));
  long long v963 = 0u;
  long long v964 = 0u;
  v961 = v60;
  uint64_t v965 = v966;
  char v968 = 0;
  memset(v969, 0, sizeof(v969));
  uint64_t v970 = 0;
  char v967 = 0;
  long long v928 = xmmword_5968C4;
  uint64_t v929 = 2;
  sub_6D1AC((uint64_t)v969, (int *)&v928, 3);
  char v971 = 0;
  uint64_t v972 = 0;
  sub_6D224(v1315, (long long *)v311, &v952);
  sub_21C8C(v306, "back_mic_general");
  sub_21C8C(&v928, "back_mic_general");
  uint64_t v931 = 0;
  uint64_t v930 = 0;
  uint64_t v932 = 0;
  sub_21C8C(v933, "back_mic_general");
  sub_21C8C(v934, "back_mic_general");
  memset(&v934[3], 0, 24);
  int v935 = 1684434036;
  sub_1CDF04(v925, "aufx-firf-appl");
  int v303 = sub_8598C(v4, 0x62616B31u);
  sub_1CDF58((uint64_t)v926, "VPMicIndex", &v303);
  v304[0] = v925;
  v304[1] = 2;
  CFDictionaryRef v61 = sub_4D3D8((uint64_t)v304);
  v926[4] = 1718186601;
  CFTypeRef v927 = v61;
  CFTypeRef v305 = 0;
  uint64_t v937 = 0;
  uint64_t v938 = 0;
  uint64_t v936 = 0;
  *(void *)&long long v901 = &v936;
  BYTE8(v901) = 0;
  uint64_t v936 = (char *)operator new(0x10uLL);
  uint64_t v937 = v936;
  uint64_t v62 = v936 + 16;
  uint64_t v938 = v936 + 16;
  sub_6D16C((uint64_t)v936, 1718186601, v61);
  memset(v942, 0, sizeof(v942));
  long long v939 = 0u;
  long long v940 = 0u;
  uint64_t v937 = v62;
  v941 = v942;
  char v944 = 0;
  memset(v945, 0, sizeof(v945));
  uint64_t v946 = 0;
  char v943 = 0;
  long long v901 = xmmword_5968C4;
  uint64_t v902 = 2;
  sub_6D1AC((uint64_t)v945, (int *)&v901, 3);
  char v947 = 0;
  uint64_t v948 = 0;
  sub_6D224(v1316, (long long *)v306, &v928);
  sub_21C8C(v301, "beamformed_mic_general");
  sub_21C8C(&v901, "beam_mic_general");
  uint64_t v904 = 0;
  uint64_t v903 = 0;
  uint64_t v905 = 0;
  sub_21C8C(v906, "beam_mic_general");
  sub_21C8C(v907, "beam_mic_general");
  memset(&v907[3], 0, 24);
  int v908 = 1684434036;
  int v298 = 0;
  sub_46DD60((uint64_t)&v895, &v298);
  v299[0] = &v895;
  v299[1] = 1;
  CFDictionaryRef v63 = sub_4D3D8((uint64_t)v299);
  v897[0] = 1651074168;
  CFDictionaryRef v898 = v63;
  CFTypeRef v300 = 0;
  int v295 = 0;
  sub_1CE110((uint64_t)&v893, &v295);
  v296[0] = &v893;
  v296[1] = 1;
  CFDictionaryRef v64 = sub_4D3D8((uint64_t)v296);
  int v899 = 1920365171;
  CFDictionaryRef v900 = v64;
  CFTypeRef v297 = 0;
  v910 = 0;
  v911 = 0;
  int v909 = 0;
  *(void *)&long long v872 = &v909;
  BYTE8(v872) = 0;
  uint64_t v65 = (char *)operator new(0x20uLL);
  uint64_t v66 = 0;
  int v909 = v65;
  v910 = v65;
  v911 = v65 + 32;
  do
  {
    sub_6D16C((uint64_t)&v65[v66 * 4], v897[v66], *(CFTypeRef *)&v897[v66 + 2]);
    v66 += 4;
  }
  while (v66 != 8);
  v915[0] = 0;
  v915[1] = 0;
  long long v912 = 0u;
  long long v913 = 0u;
  v910 = v65 + 32;
  long long v914 = v915;
  v918 = 0;
  v916 = 0;
  v917 = 0;
  CFTypeRef v67 = operator new(8uLL);
  v916 = v67;
  void *v67 = 0x100000002;
  v918 = v67 + 1;
  v917 = v67 + 1;
  char v919 = 0;
  char v920 = 0;
  memset(v921, 0, sizeof(v921));
  uint64_t v922 = 0;
  long long v872 = xmmword_5968C4;
  uint64_t v873 = 2;
  sub_6D1AC((uint64_t)v921, (int *)&v872, 3);
  char v923 = 0;
  uint64_t v924 = 0;
  sub_6D224(v1317, (long long *)v301, &v901);
  sub_21C8C(v293, "front_mic_measurement");
  sub_21C8C(&v872, "front_mic_measurement");
  uint64_t v875 = 0;
  uint64_t v874 = 0;
  uint64_t v876 = 0;
  sub_21C8C(v877, "front_mic_measurement");
  sub_21C8C(v878, "front_mic_measurement");
  memset(&v878[3], 0, 24);
  int v879 = 1684434036;
  sub_1CDF04(v869, "aufx-firf-appl");
  int v290 = sub_8598C(v4, 0x666E7431u);
  sub_1CDF58((uint64_t)v870, "VPMicIndex", &v290);
  v291[0] = v869;
  v291[1] = 2;
  CFDictionaryRef v68 = sub_4D3D8((uint64_t)v291);
  v870[4] = 1718186601;
  CFTypeRef v871 = v68;
  CFTypeRef v292 = 0;
  long long v881 = 0;
  v882 = 0;
  long long v880 = 0;
  *(void *)&long long v848 = &v880;
  BYTE8(v848) = 0;
  long long v880 = (char *)operator new(0x10uLL);
  long long v881 = v880;
  unint64_t v69 = v880 + 16;
  v882 = v880 + 16;
  sub_6D16C((uint64_t)v880, 1718186601, v68);
  memset(v886, 0, sizeof(v886));
  long long v883 = 0u;
  long long v884 = 0u;
  long long v881 = v69;
  v885 = v886;
  char v888 = 0;
  memset(v889, 0, sizeof(v889));
  uint64_t v890 = 0;
  char v887 = 0;
  long long v848 = xmmword_5968C4;
  uint64_t v849 = 2;
  sub_6D1AC((uint64_t)v889, (int *)&v848, 3);
  char v891 = 0;
  uint64_t v892 = 0;
  sub_6D224(v1318, (long long *)v293, &v872);
  sub_21C8C(v288, "bottom_mic_measurement");
  sub_21C8C(&v848, "bottom_mic_measurement");
  uint64_t v851 = 0;
  uint64_t v850 = 0;
  uint64_t v852 = 0;
  sub_21C8C(v853, "bottom_mic_measurement");
  sub_21C8C(v854, "bottom_mic_measurement");
  memset(&v854[3], 0, 24);
  int v855 = 1684434036;
  sub_1CDF04(v845, "aufx-firf-appl");
  int v285 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v846, "VPMicIndex", &v285);
  v286[0] = v845;
  v286[1] = 2;
  CFDictionaryRef v70 = sub_4D3D8((uint64_t)v286);
  v846[4] = 1718186601;
  CFTypeRef v847 = v70;
  CFTypeRef v287 = 0;
  uint64_t v857 = 0;
  char v858 = 0;
  v856 = 0;
  *(void *)&long long v824 = &v856;
  BYTE8(v824) = 0;
  v856 = (char *)operator new(0x10uLL);
  uint64_t v857 = v856;
  char v71 = v856 + 16;
  char v858 = v856 + 16;
  sub_6D16C((uint64_t)v856, 1718186601, v70);
  memset(v862, 0, sizeof(v862));
  long long v859 = 0u;
  long long v860 = 0u;
  uint64_t v857 = v71;
  v861 = v862;
  char v864 = 0;
  memset(v865, 0, sizeof(v865));
  uint64_t v866 = 0;
  char v863 = 0;
  long long v824 = xmmword_5968C4;
  uint64_t v825 = 2;
  sub_6D1AC((uint64_t)v865, (int *)&v824, 3);
  char v867 = 0;
  uint64_t v868 = 0;
  sub_6D224(v1319, (long long *)v288, &v848);
  sub_21C8C(v283, "bottom_mic2_measurement");
  sub_21C8C(&v824, "bottom_mic_measurement");
  uint64_t v827 = 0;
  uint64_t v826 = 0;
  uint64_t v828 = 0;
  sub_21C8C(v829, "bottom_mic_measurement");
  sub_21C8C(v830, "bottom_mic_measurement");
  memset(&v830[3], 0, 24);
  int v831 = 1684434036;
  sub_1CDF04(v821, "aufx-firf-appl");
  int v280 = sub_8598C(v4, 0x62746D32u);
  sub_1CDF58((uint64_t)v822, "VPMicIndex", &v280);
  v281[0] = v821;
  v281[1] = 2;
  CFDictionaryRef v72 = sub_4D3D8((uint64_t)v281);
  v822[4] = 1718186601;
  CFTypeRef v823 = v72;
  CFTypeRef v282 = 0;
  CFDictionaryRef v833 = 0;
  long long v834 = 0;
  int v832 = 0;
  *(void *)&long long v800 = &v832;
  BYTE8(v800) = 0;
  int v832 = (char *)operator new(0x10uLL);
  CFDictionaryRef v833 = v832;
  uint64_t v73 = v832 + 16;
  long long v834 = v832 + 16;
  sub_6D16C((uint64_t)v832, 1718186601, v72);
  memset(v838, 0, sizeof(v838));
  long long v835 = 0u;
  long long v836 = 0u;
  CFDictionaryRef v833 = v73;
  uint64_t v837 = v838;
  char v840 = 0;
  memset(v841, 0, sizeof(v841));
  uint64_t v842 = 0;
  char v839 = 0;
  long long v800 = xmmword_5968C4;
  uint64_t v801 = 2;
  sub_6D1AC((uint64_t)v841, (int *)&v800, 3);
  char v843 = 0;
  uint64_t v844 = 0;
  sub_6D224(v1320, (long long *)v283, &v824);
  sub_21C8C(v278, "back_mic_measurement");
  sub_21C8C(&v800, "back_mic_measurement");
  uint64_t v803 = 0;
  uint64_t v802 = 0;
  uint64_t v804 = 0;
  sub_21C8C(v805, "back_mic_measurement");
  sub_21C8C(v806, "back_mic_measurement");
  memset(&v806[3], 0, 24);
  int v807 = 1684434036;
  sub_1CDF04(v797, "aufx-firf-appl");
  int v275 = sub_8598C(v4, 0x62616B31u);
  sub_1CDF58((uint64_t)v798, "VPMicIndex", &v275);
  v276[0] = v797;
  v276[1] = 2;
  CFDictionaryRef v74 = sub_4D3D8((uint64_t)v276);
  v798[4] = 1718186601;
  CFTypeRef v799 = v74;
  CFTypeRef v277 = 0;
  CFDictionaryRef v809 = 0;
  v810 = 0;
  v808 = 0;
  *(void *)&long long v773 = &v808;
  BYTE8(v773) = 0;
  v808 = (char *)operator new(0x10uLL);
  CFDictionaryRef v809 = v808;
  std::string v75 = v808 + 16;
  v810 = v808 + 16;
  sub_6D16C((uint64_t)v808, 1718186601, v74);
  memset(v814, 0, sizeof(v814));
  long long v811 = 0u;
  long long v812 = 0u;
  CFDictionaryRef v809 = v75;
  v813 = v814;
  char v816 = 0;
  memset(v817, 0, sizeof(v817));
  uint64_t v818 = 0;
  char v815 = 0;
  long long v773 = xmmword_5968C4;
  uint64_t v774 = 2;
  sub_6D1AC((uint64_t)v817, (int *)&v773, 3);
  char v819 = 0;
  uint64_t v820 = 0;
  sub_6D224(v1321, (long long *)v278, &v800);
  sub_21C8C(v273, "beamformed_mic_measurement");
  sub_21C8C(&v773, "beam_mic_measurement");
  uint64_t v776 = 0;
  uint64_t v775 = 0;
  uint64_t v777 = 0;
  sub_21C8C(v778, "beam_mic_measurement");
  sub_21C8C(v779, "beam_mic_measurement");
  memset(&v779[3], 0, 24);
  int v780 = 1684434036;
  int v270 = 0;
  sub_46DD60((uint64_t)&v767, &v270);
  v271[0] = &v767;
  v271[1] = 1;
  CFDictionaryRef v76 = sub_4D3D8((uint64_t)v271);
  v769[0] = 1651074168;
  CFDictionaryRef v770 = v76;
  CFTypeRef v272 = 0;
  int v267 = 0;
  sub_1CE110((uint64_t)&v765, &v267);
  v268[0] = &v765;
  v268[1] = 1;
  CFDictionaryRef v77 = sub_4D3D8((uint64_t)v268);
  int v771 = 1920365171;
  CFDictionaryRef v772 = v77;
  CFTypeRef v269 = 0;
  char v782 = 0;
  char v783 = 0;
  v781 = 0;
  *(void *)&long long v744 = &v781;
  BYTE8(v744) = 0;
  unint64_t v78 = (char *)operator new(0x20uLL);
  uint64_t v79 = 0;
  v781 = v78;
  char v782 = v78;
  char v783 = v78 + 32;
  do
  {
    sub_6D16C((uint64_t)&v78[v79 * 4], v769[v79], *(CFTypeRef *)&v769[v79 + 2]);
    v79 += 4;
  }
  while (v79 != 8);
  v787[0] = 0;
  v787[1] = 0;
  long long v784 = 0u;
  long long v785 = 0u;
  char v782 = v78 + 32;
  char v786 = v787;
  CFTypeRef v790 = 0;
  CFTypeRef v788 = 0;
  CFTypeRef v789 = 0;
  uint64_t v80 = operator new(8uLL);
  CFTypeRef v788 = v80;
  *uint64_t v80 = 0x100000002;
  CFTypeRef v790 = v80 + 1;
  CFTypeRef v789 = v80 + 1;
  char v791 = 0;
  char v792 = 0;
  memset(v793, 0, sizeof(v793));
  uint64_t v794 = 0;
  long long v744 = xmmword_5968C4;
  uint64_t v745 = 2;
  sub_6D1AC((uint64_t)v793, (int *)&v744, 3);
  char v795 = 0;
  uint64_t v796 = 0;
  sub_6D224(v1322, (long long *)v273, &v773);
  sub_21C8C(v265, "bottom_mic_voice_messages");
  sub_21C8C(&v744, "bottom_mic_voice_messages");
  uint64_t v747 = 0;
  uint64_t v746 = 0;
  uint64_t v748 = 0;
  sub_21C8C(v749, "bottom_mic_voice_messages");
  sub_21C8C(v750, "bottom_mic_voice_messages");
  memset(&v750[3], 0, 24);
  int v751 = 1684434036;
  sub_1CDF04(v741, "aufx-firf-appl");
  int v262 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v742, "VPMicIndex", &v262);
  v263[0] = v741;
  v263[1] = 2;
  CFDictionaryRef v81 = sub_4D3D8((uint64_t)v263);
  v742[4] = 1718186601;
  CFTypeRef v743 = v81;
  CFTypeRef v264 = 0;
  CFTypeRef v753 = 0;
  CFTypeRef v754 = 0;
  CFTypeRef v752 = 0;
  *(void *)&long long v720 = &v752;
  BYTE8(v720) = 0;
  CFTypeRef v752 = (char *)operator new(0x10uLL);
  CFTypeRef v753 = v752;
  double v82 = v752 + 16;
  CFTypeRef v754 = v752 + 16;
  sub_6D16C((uint64_t)v752, 1718186601, v81);
  memset(v758, 0, sizeof(v758));
  long long v755 = 0u;
  long long v756 = 0u;
  CFTypeRef v753 = v82;
  v757 = v758;
  char v760 = 0;
  memset(v761, 0, sizeof(v761));
  uint64_t v762 = 0;
  char v759 = 0;
  long long v720 = xmmword_5968C4;
  uint64_t v721 = 2;
  sub_6D1AC((uint64_t)v761, (int *)&v720, 3);
  char v763 = 0;
  uint64_t v764 = 0;
  sub_6D224(v1323, (long long *)v265, &v744);
  sub_21C8C(v260, "bottom_mic_voice_recognition");
  sub_21C8C(&v720, "bottom_mic_voice_recognition");
  uint64_t v723 = 0;
  uint64_t v722 = 0;
  uint64_t v724 = 0;
  sub_21C8C(v725, "bottom_mic_voice_recognition");
  sub_21C8C(v726, "bottom_mic_voice_recognition");
  memset(&v726[3], 0, 24);
  int v727 = 1684434036;
  sub_1CDF04(v717, "aufx-firf-appl");
  int v257 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v718, "VPMicIndex", &v257);
  v258[0] = v717;
  v258[1] = 2;
  CFDictionaryRef v83 = sub_4D3D8((uint64_t)v258);
  v718[4] = 1718186601;
  CFTypeRef v719 = v83;
  CFTypeRef v259 = 0;
  uint64_t v729 = 0;
  uint64_t v730 = 0;
  uint64_t v728 = 0;
  *(void *)&long long v693 = &v728;
  BYTE8(v693) = 0;
  uint64_t v728 = (char *)operator new(0x10uLL);
  uint64_t v729 = v728;
  uint64_t v84 = v728 + 16;
  uint64_t v730 = v728 + 16;
  sub_6D16C((uint64_t)v728, 1718186601, v83);
  memset(v734, 0, sizeof(v734));
  long long v731 = 0u;
  long long v732 = 0u;
  uint64_t v729 = v84;
  int v733 = v734;
  char v736 = 0;
  memset(v737, 0, sizeof(v737));
  uint64_t v738 = 0;
  char v735 = 0;
  long long v693 = xmmword_5968C4;
  uint64_t v694 = 2;
  sub_6D1AC((uint64_t)v737, (int *)&v693, 3);
  char v739 = 0;
  uint64_t v740 = 0;
  sub_6D224(v1324, (long long *)v260, &v720);
  sub_21C8C(v255, "beamformed_mic_voice_messages");
  sub_21C8C(&v693, "beam_mic_voice_messages");
  uint64_t v696 = 0;
  uint64_t v695 = 0;
  uint64_t v697 = 0;
  sub_21C8C(v698, "beam_mic_voice_messages");
  sub_21C8C(v699, "beam_mic_voice_messages");
  memset(&v699[3], 0, 24);
  int v700 = 1684434036;
  int v252 = 0;
  sub_46DD60((uint64_t)&v687, &v252);
  v253[0] = &v687;
  v253[1] = 1;
  CFDictionaryRef v85 = sub_4D3D8((uint64_t)v253);
  v689[0] = 1651074168;
  CFDictionaryRef v690 = v85;
  CFTypeRef v254 = 0;
  int v249 = 0;
  sub_1CE110((uint64_t)&v685, &v249);
  v250[0] = &v685;
  v250[1] = 1;
  CFDictionaryRef v86 = sub_4D3D8((uint64_t)v250);
  int v691 = 1920365171;
  CFDictionaryRef v692 = v86;
  CFTypeRef v251 = 0;
  v702 = 0;
  v703 = 0;
  v701 = 0;
  *(void *)&long long v661 = &v701;
  BYTE8(v661) = 0;
  uint64_t v87 = (char *)operator new(0x20uLL);
  uint64_t v88 = 0;
  v701 = v87;
  v702 = v87;
  v703 = v87 + 32;
  do
  {
    sub_6D16C((uint64_t)&v87[v88 * 4], v689[v88], *(CFTypeRef *)&v689[v88 + 2]);
    v88 += 4;
  }
  while (v88 != 8);
  v707[0] = 0;
  v707[1] = 0;
  long long v704 = 0u;
  long long v705 = 0u;
  v702 = v87 + 32;
  char v706 = v707;
  char v710 = 0;
  v708 = 0;
  uint64_t v709 = 0;
  long long v89 = operator new(8uLL);
  v708 = v89;
  void *v89 = 0x100000002;
  char v710 = v89 + 1;
  uint64_t v709 = v89 + 1;
  char v711 = 0;
  char v712 = 0;
  memset(v713, 0, sizeof(v713));
  uint64_t v714 = 0;
  long long v661 = xmmword_5968C4;
  uint64_t v662 = 2;
  sub_6D1AC((uint64_t)v713, (int *)&v661, 3);
  char v715 = 0;
  uint64_t v716 = 0;
  sub_6D224(v1325, (long long *)v255, &v693);
  sub_21C8C(v247, "beamformed_mic_voice_recognition");
  sub_21C8C(&v661, "beam_mic_voice_recognition");
  uint64_t v664 = 0;
  uint64_t v663 = 0;
  uint64_t v665 = 0;
  sub_21C8C(v666, "beam_mic_voice_recognition");
  sub_21C8C(v667, "beam_mic_voice_recognition");
  memset(&v667[3], 0, 24);
  int v668 = 1684434036;
  int v244 = 0;
  sub_46DD60((uint64_t)&v655, &v244);
  v245[0] = &v655;
  v245[1] = 1;
  CFDictionaryRef v90 = sub_4D3D8((uint64_t)v245);
  v657[0] = 1651074168;
  CFDictionaryRef v658 = v90;
  CFTypeRef v246 = 0;
  int v241 = 0;
  sub_1CE110((uint64_t)&v653, &v241);
  v242[0] = &v653;
  v242[1] = 1;
  CFDictionaryRef v91 = sub_4D3D8((uint64_t)v242);
  int v659 = 1920365171;
  CFDictionaryRef v660 = v91;
  CFTypeRef v243 = 0;
  char v670 = 0;
  uint64_t v671 = 0;
  uint64_t v669 = 0;
  *(void *)&long long v630 = &v669;
  BYTE8(v630) = 0;
  CFTypeRef v92 = (char *)operator new(0x20uLL);
  uint64_t v93 = 0;
  uint64_t v669 = v92;
  char v670 = v92;
  uint64_t v671 = v92 + 32;
  do
  {
    sub_6D16C((uint64_t)&v92[v93 * 4], v657[v93], *(CFTypeRef *)&v657[v93 + 2]);
    v93 += 4;
  }
  while (v93 != 8);
  v675[0] = 0;
  v675[1] = 0;
  long long v672 = 0u;
  long long v673 = 0u;
  char v670 = v92 + 32;
  CFTypeRef v674 = v675;
  CFTypeRef v678 = 0;
  CFTypeRef v676 = 0;
  CFTypeRef v677 = 0;
  unint64_t v94 = operator new(8uLL);
  CFTypeRef v676 = v94;
  void *v94 = 0x100000002;
  CFTypeRef v678 = v94 + 1;
  CFTypeRef v677 = v94 + 1;
  char v679 = 0;
  char v680 = 0;
  memset(v681, 0, sizeof(v681));
  uint64_t v682 = 0;
  long long v630 = xmmword_5968C4;
  uint64_t v631 = 2;
  sub_6D1AC((uint64_t)v681, (int *)&v630, 3);
  char v683 = 0;
  uint64_t v684 = 0;
  sub_6D224(v1326, (long long *)v247, &v661);
  sub_21C8C(v239, "siri_barge_in");
  sub_21C8C(&v630, "mic_voice_recognition");
  uint64_t v633 = 0;
  uint64_t v632 = 0;
  uint64_t v634 = 0;
  sub_21C8C(v635, "mic_voice_recognition");
  sub_21C8C(v636, "mic_voice_recognition");
  memset(&v636[3], 0, 24);
  int v637 = 1684434036;
  v643[0] = 0;
  v643[1] = 0;
  long long v638 = 0u;
  long long v639 = 0u;
  long long v640 = 0u;
  uint64_t v641 = 0;
  v642 = v643;
  long long v646 = 0;
  int v644 = 0;
  CFDictionaryRef v645 = 0;
  unint64_t v95 = operator new(0x10uLL);
  int v644 = v95;
  _OWORD *v95 = xmmword_4E7970;
  long long v646 = v95 + 1;
  CFDictionaryRef v645 = v95 + 1;
  char v647 = 0;
  char v648 = 0;
  memset(v649, 0, sizeof(v649));
  uint64_t v650 = 0;
  long long v606 = xmmword_5968C4;
  uint64_t v607 = 2;
  sub_6D1AC((uint64_t)v649, (int *)&v606, 3);
  char v651 = 0;
  uint64_t v652 = 0;
  sub_6D224(v1327, (long long *)v239, &v630);
  sub_21C8C(v237, "beamformed_mic_video_recording");
  sub_21C8C(&v606, "beam_mic_video_recording");
  uint64_t v609 = 0;
  uint64_t v608 = 0;
  uint64_t v610 = 0;
  sub_21C8C(v611, "beam_mic_video_recording");
  sub_21C8C(v612, "beam_mic_video_recording");
  memset(&v612[3], 0, 24);
  int v613 = 1684434036;
  int v234 = 0;
  sub_46DD60((uint64_t)&v600, &v234);
  v235[0] = &v600;
  v235[1] = 1;
  CFDictionaryRef v96 = sub_4D3D8((uint64_t)v235);
  v602[0] = 1651074168;
  CFDictionaryRef v603 = v96;
  CFTypeRef v236 = 0;
  int v231 = 0;
  sub_1CE110((uint64_t)&v598, &v231);
  v232[0] = &v598;
  v232[1] = 1;
  CFDictionaryRef v97 = sub_4D3D8((uint64_t)v232);
  int v604 = 1920365171;
  CFDictionaryRef v605 = v97;
  CFTypeRef v233 = 0;
  v615 = 0;
  v616 = 0;
  uint64_t v614 = 0;
  *(void *)&long long v574 = &v614;
  BYTE8(v574) = 0;
  char v98 = (char *)operator new(0x20uLL);
  uint64_t v99 = 0;
  uint64_t v614 = v98;
  v615 = v98;
  v616 = v98 + 32;
  do
  {
    sub_6D16C((uint64_t)&v98[v99 * 4], v602[v99], *(CFTypeRef *)&v602[v99 + 2]);
    v99 += 4;
  }
  while (v99 != 8);
  v620[0] = 0;
  v620[1] = 0;
  long long v617 = 0u;
  long long v618 = 0u;
  v615 = v98 + 32;
  v619 = v620;
  v623 = 0;
  CFDictionaryRef v621 = 0;
  v622 = 0;
  unint64_t v100 = operator new(8uLL);
  CFDictionaryRef v621 = v100;
  void *v100 = 0x100000002;
  v623 = v100 + 1;
  v622 = v100 + 1;
  char v624 = 0;
  char v625 = 0;
  memset(v626, 0, sizeof(v626));
  uint64_t v627 = 0;
  long long v574 = xmmword_5968C4;
  uint64_t v575 = 2;
  sub_6D1AC((uint64_t)v626, (int *)&v574, 3);
  char v628 = 0;
  uint64_t v629 = 0;
  sub_6D224(v1328, (long long *)v237, &v606);
  sub_21C8C(v229, "spatial_video_recording");
  sub_21C8C(&v574, "spatial_video_recording");
  uint64_t v577 = 0;
  uint64_t v576 = 0;
  uint64_t v578 = 0;
  sub_21C8C(v579, "mic_spatial");
  sub_21C8C(v580, "mic_spatial");
  memset(&v580[3], 0, 24);
  int v581 = 1684434036;
  uint64_t v101 = operator new(8uLL);
  void *v101 = 0x7472696D706D6269;
  v223[1] = v101 + 1;
  v223[2] = v101 + 1;
  v223[0] = v101;
  CFArrayRef v102 = sub_650B4((int **)v223);
  CFTypeRef v567 = v102;
  char v225 = 0;
  int v226 = 0;
  v224 = 0;
  *(void *)&long long v538 = &v224;
  BYTE8(v538) = 0;
  v224 = (uint64_t *)operator new(8uLL);
  char v225 = v224;
  float v103 = v224 + 1;
  int v226 = v224 + 1;
  sub_1CE2D0(v224, v102);
  char v225 = v103;
  sub_1CE30C((uint64_t)&v568, &v224);
  v227[0] = &v568;
  v227[1] = 1;
  CFDictionaryRef v104 = sub_4D3D8((uint64_t)v227);
  v570[0] = 1684303986;
  CFDictionaryRef v571 = v104;
  CFTypeRef v228 = 0;
  unint64_t v105 = operator new(0xCuLL);
  v564 = (char *)(v105 + 3);
  *(void *)unint64_t v105 = 0x6473706700000000;
  v105[2] = 1969844082;
  CFTypeRef v562 = v105;
  CFTypeRef v563 = v105 + 3;
  v219 = 0;
  CFTypeRef v220 = 0;
  uint64_t v218 = 0;
  *(void *)&long long v538 = &v218;
  BYTE8(v538) = 0;
  uint64_t v218 = operator new(0x18uLL);
  v219 = v218;
  CFTypeRef v220 = v218 + 3;
  v219 = sub_1CDC20((uint64_t)&v220, (uint64_t)&v562, (uint64_t)&v565, v218);
  sub_1CDCD4((uint64_t)&v565, (uint64_t *)&v218);
  v221[0] = &v565;
  v221[1] = 1;
  CFDictionaryRef v106 = sub_4D3D8((uint64_t)v221);
  int v572 = 1768907891;
  CFDictionaryRef v573 = v106;
  CFTypeRef v222 = 0;
  v583 = 0;
  v584 = 0;
  v582 = 0;
  *(void *)&long long v538 = &v582;
  BYTE8(v538) = 0;
  size_t v107 = (char *)operator new(0x20uLL);
  uint64_t v108 = 0;
  v582 = v107;
  v583 = v107;
  v584 = v107 + 32;
  do
  {
    sub_6D16C((uint64_t)&v107[v108 * 4], v570[v108], *(CFTypeRef *)&v570[v108 + 2]);
    v108 += 4;
  }
  while (v108 != 8);
  v588[0] = 0;
  v588[1] = 0;
  long long v585 = 0u;
  long long v586 = 0u;
  v583 = v107 + 32;
  v587 = v588;
  char v591 = 0;
  v589 = 0;
  char v590 = 0;
  unint64_t v109 = operator new(0x10uLL);
  v589 = v109;
  *unint64_t v109 = xmmword_4E7970;
  char v591 = v109 + 1;
  char v590 = v109 + 1;
  char v592 = 0;
  char v593 = 0;
  memset(v594, 0, sizeof(v594));
  uint64_t v595 = 0;
  long long v538 = xmmword_5968C4;
  uint64_t v539 = 2;
  sub_6D1AC((uint64_t)v594, (int *)&v538, 3);
  char v596 = 0;
  uint64_t v597 = 0;
  sub_6D224(v1329, (long long *)v229, &v574);
  sub_21C8C(v216, "multicam_recording");
  sub_21C8C(&v538, "multicam");
  uint64_t v541 = 0;
  uint64_t v540 = 0;
  uint64_t v542 = 0;
  sub_21C8C(v543, "multicam");
  sub_21C8C(v544, "multicam");
  memset(&v544[3], 0, 24);
  int v545 = 1684434036;
  unint64_t v110 = operator new(0xCuLL);
  v213[1] = v110 + 3;
  v213[2] = v110 + 3;
  *(void *)unint64_t v110 = 0x300000002;
  v110[2] = 4;
  v213[0] = v110;
  sub_1CE360((uint64_t)&v534, (int **)v213);
  v214[0] = &v534;
  v214[1] = 1;
  CFDictionaryRef v111 = sub_4D3D8((uint64_t)v214);
  int v536 = 1667789676;
  CFTypeRef v537 = v111;
  CFTypeRef v215 = 0;
  v547 = 0;
  v548 = 0;
  v546 = 0;
  *(void *)&long long v510 = &v546;
  BYTE8(v510) = 0;
  v546 = (char *)operator new(0x10uLL);
  v547 = v546;
  unint64_t v112 = v546 + 16;
  v548 = v546 + 16;
  sub_6D16C((uint64_t)v546, 1667789676, v111);
  v552[0] = 0;
  v552[1] = 0;
  long long v549 = 0u;
  long long v550 = 0u;
  v547 = v112;
  char v551 = v552;
  uint64_t v555 = 0;
  uint64_t v553 = 0;
  char v554 = 0;
  char v113 = operator new(8uLL);
  uint64_t v553 = v113;
  *char v113 = 0x300000004;
  uint64_t v555 = v113 + 1;
  char v554 = v113 + 1;
  char v556 = 0;
  char v557 = 0;
  memset(v558, 0, sizeof(v558));
  uint64_t v559 = 0;
  long long v510 = xmmword_5968C4;
  uint64_t v511 = 2;
  sub_6D1AC((uint64_t)v558, (int *)&v510, 3);
  char v560 = 0;
  uint64_t v561 = 0;
  sub_6D224(v1330, (long long *)v216, &v538);
  sub_21C8C(v211, "stereo_recording");
  sub_21C8C(&v510, "stereo_recording_no_tap");
  uint64_t v513 = 0;
  uint64_t v512 = 0;
  uint64_t v514 = 0;
  sub_21C8C(v515, "mic_spatial");
  sub_21C8C(v516, "mic_spatial");
  memset(&v516[3], 0, 24);
  int v517 = 1684434036;
  int v114 = operator new(8uLL);
  *int v114 = 0x7472696D706D6269;
  v205[1] = v114 + 1;
  void v205[2] = v114 + 1;
  v205[0] = v114;
  CFArrayRef v115 = sub_650B4((int **)v205);
  CFTypeRef v505 = v115;
  uint64_t v207 = 0;
  v208 = 0;
  int v206 = 0;
  *(void *)&long long v481 = &v206;
  BYTE8(v481) = 0;
  int v206 = (uint64_t *)operator new(8uLL);
  uint64_t v207 = v206;
  int v116 = v206 + 1;
  v208 = v206 + 1;
  sub_1CE2D0(v206, v115);
  uint64_t v207 = v116;
  sub_1CE30C((uint64_t)&v506, &v206);
  v209[0] = &v506;
  v209[1] = 1;
  CFDictionaryRef v117 = sub_4D3D8((uint64_t)v209);
  int v508 = 1684303986;
  CFTypeRef v509 = v117;
  CFTypeRef v210 = 0;
  CFTypeRef v519 = 0;
  CFTypeRef v520 = 0;
  CFTypeRef v518 = 0;
  *(void *)&long long v481 = &v518;
  BYTE8(v481) = 0;
  CFTypeRef v518 = (char *)operator new(0x10uLL);
  CFTypeRef v519 = v518;
  unint64_t v118 = v518 + 16;
  CFTypeRef v520 = v518 + 16;
  sub_6D16C((uint64_t)v518, 1684303986, v117);
  v524[0] = 0;
  v524[1] = 0;
  long long v521 = 0u;
  long long v522 = 0u;
  CFTypeRef v519 = v118;
  CFTypeRef v523 = v524;
  CFDictionaryRef v527 = 0;
  CFDictionaryRef v525 = 0;
  int v526 = 0;
  unint64_t v119 = operator new(8uLL);
  CFDictionaryRef v525 = v119;
  *unint64_t v119 = 0x200000004;
  CFDictionaryRef v527 = v119 + 1;
  int v526 = v119 + 1;
  char v528 = 0;
  char v529 = 0;
  memset(v530, 0, sizeof(v530));
  uint64_t v531 = 0;
  long long v481 = xmmword_5968C4;
  uint64_t v482 = 2;
  sub_6D1AC((uint64_t)v530, (int *)&v481, 3);
  char v532 = 0;
  uint64_t v533 = 0;
  sub_6D224(v1331, (long long *)v211, &v510);
  sub_21C8C(v203, "mic_peripheral");
  sub_21C8C(&v481, "mic_peripheral");
  uint64_t v484 = 0;
  uint64_t v483 = 0;
  uint64_t v485 = 0;
  sub_21C8C(v486, "mic_peripheral");
  sub_21C8C(v487, "mic_peripheral");
  memset(&v487[3], 0, 24);
  int v488 = 1684434036;
  sub_22210((CFStringRef *)&v475, "BeamIndex");
  LODWORD(valuePtr) = 1;
  CFTypeRef v476 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v476)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v201[0] = &v475;
  v201[1] = 1;
  CFDictionaryRef v120 = sub_4D3D8((uint64_t)v201);
  v477[0] = 1651074168;
  CFDictionaryRef v478 = v120;
  CFTypeRef v202 = 0;
  int v198 = 0;
  sub_1CE110((uint64_t)&v473, &v198);
  v199[0] = &v473;
  v199[1] = 1;
  CFDictionaryRef v121 = sub_4D3D8((uint64_t)v199);
  int v479 = 1920365171;
  CFDictionaryRef v480 = v121;
  CFTypeRef cf = 0;
  uint64_t v490 = 0;
  char v491 = 0;
  v489 = 0;
  *(void *)&long long valuePtr = &v489;
  BYTE8(valuePtr) = 0;
  unint64_t v122 = (char *)operator new(0x20uLL);
  uint64_t v123 = 0;
  v489 = v122;
  uint64_t v490 = v122;
  char v491 = v122 + 32;
  do
  {
    sub_6D16C((uint64_t)&v122[v123 * 4], v477[v123], *(CFTypeRef *)&v477[v123 + 2]);
    v123 += 4;
  }
  while (v123 != 8);
  v495[0] = 0;
  v495[1] = 0;
  long long v492 = 0u;
  long long v493 = 0u;
  uint64_t v490 = v122 + 32;
  uint64_t v494 = v495;
  v498 = 0;
  uint64_t v496 = 0;
  uint64_t v497 = 0;
  char v124 = operator new(8uLL);
  uint64_t v496 = v124;
  *char v124 = 0x100000002;
  v498 = v124 + 1;
  uint64_t v497 = v124 + 1;
  char v499 = 0;
  char v500 = 0;
  memset(v501, 0, sizeof(v501));
  uint64_t v502 = 0;
  long long valuePtr = xmmword_5968C4;
  uint64_t v451 = 2;
  sub_6D1AC((uint64_t)v501, (int *)&valuePtr, 3);
  char v503 = 0;
  uint64_t v504 = 0;
  sub_6D224(v1332, (long long *)v203, &v481);
  sub_21C8C(v196, "mic_peripheral_allmics");
  sub_21C8C(&valuePtr, "mic_peripheral_sender_all_mics");
  uint64_t v453 = 0;
  uint64_t v452 = 0;
  uint64_t v454 = 0;
  sub_21C8C(v455, "mic_peripheral_sender_all_mics");
  sub_21C8C(v456, "mic_peripheral_sender_all_mics");
  memset(&v456[3], 0, 24);
  int v457 = 1684434036;
  v463[0] = 0;
  v463[1] = 0;
  long long v458 = 0u;
  long long v459 = 0u;
  long long v460 = 0u;
  uint64_t v461 = 0;
  uint64_t v462 = v463;
  CFTypeRef v466 = 0;
  uint64_t v464 = 0;
  CFTypeRef v465 = 0;
  uint64_t v125 = operator new(8uLL);
  uint64_t v464 = v125;
  *uint64_t v125 = 0x400000004;
  CFTypeRef v466 = v125 + 1;
  CFTypeRef v465 = v125 + 1;
  char v467 = 0;
  char v468 = 0;
  memset(v469, 0, sizeof(v469));
  uint64_t v470 = 0;
  long long v425 = xmmword_5968C4;
  uint64_t v426 = 2;
  sub_6D1AC((uint64_t)v469, (int *)&v425, 3);
  char v471 = 0;
  uint64_t v472 = 0;
  sub_6D224(v1333, (long long *)v196, &valuePtr);
  sub_21C8C(v194, "actuator_general");
  sub_21C8C(&v425, "actuator_general");
  uint64_t v428 = 0;
  uint64_t v427 = 0;
  uint64_t v429 = 0;
  sub_21C8C(v430, "actuator_general");
  long long v433 = 0u;
  long long v432 = 0u;
  long long v431 = 0u;
  int v434 = 1684434036;
  v440[0] = 0;
  v440[1] = 0;
  long long v435 = 0u;
  long long v436 = 0u;
  long long v437 = 0u;
  uint64_t v438 = 0;
  uint64_t v439 = v440;
  uint64_t v443 = 0;
  CFDictionaryRef v441 = 0;
  long long v442 = 0;
  char v126 = operator new(8uLL);
  CFDictionaryRef v441 = v126;
  *char v126 = 0x100000002;
  uint64_t v443 = v126 + 1;
  long long v442 = v126 + 1;
  char v444 = 0;
  char v445 = 0;
  memset(v446, 0, sizeof(v446));
  uint64_t v447 = 0;
  long long v1335 = xmmword_5968C4;
  uint64_t v1336 = 2;
  sub_6D1AC((uint64_t)v446, (int *)&v1335, 3);
  char v448 = 0;
  uint64_t v449 = 0;
  sub_6D224(v1334, (long long *)v194, &v425);
  sub_6D2A0((uint64_t)v424, (unsigned __int8 *)v1298, 31);
  sub_6D31C(v193 + 512, (uint64_t *)v424);
  sub_6C7E4((void *)v424[2]);
  uint64_t v127 = v424[0];
  v424[0] = 0;
  if (v127) {
    operator delete(v127);
  }
  for (uint64_t i = 0; i != -10168; i -= 328)
  {
    sub_6C878((uint64_t)&v1334[i + 24]);
    if ((char)v1334[i + 23] < 0) {
      operator delete(*(void **)&v1334[i]);
    }
  }
  sub_6C878((uint64_t)&v425);
  if (v195 < 0) {
    operator delete(v194[0]);
  }
  sub_6C878((uint64_t)&valuePtr);
  if (v197 < 0) {
    operator delete(v196[0]);
  }
  sub_6C878((uint64_t)&v481);
  for (uint64_t j = 6; j != -2; j -= 4)
  {
    uint64_t v130 = *(const void **)&v477[j];
    if (v130) {
      CFRelease(v130);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v474) {
    CFRelease(v474);
  }
  if (v473) {
    CFRelease(v473);
  }
  if (v202) {
    CFRelease(v202);
  }
  if (v476) {
    CFRelease(v476);
  }
  if (v475) {
    CFRelease(v475);
  }
  if (v204 < 0) {
    operator delete(v203[0]);
  }
  sub_6C878((uint64_t)&v510);
  if (v509) {
    CFRelease(v509);
  }
  if (v210) {
    CFRelease(v210);
  }
  if (v507) {
    CFRelease(v507);
  }
  if (v506) {
    CFRelease(v506);
  }
  *(void *)&long long v481 = &v206;
  sub_15CB74((void ***)&v481);
  if (v505) {
    CFRelease(v505);
  }
  if (v205[0]) {
    operator delete(v205[0]);
  }
  if (v212 < 0) {
    operator delete(v211[0]);
  }
  sub_6C878((uint64_t)&v538);
  if (v537) {
    CFRelease(v537);
  }
  if (v215) {
    CFRelease(v215);
  }
  if (v535) {
    CFRelease(v535);
  }
  if (v534) {
    CFRelease(v534);
  }
  if (v213[0]) {
    operator delete(v213[0]);
  }
  if (v217 < 0) {
    operator delete(v216[0]);
  }
  sub_6C878((uint64_t)&v574);
  for (uint64_t k = 6; k != -2; k -= 4)
  {
    unint64_t v132 = *(const void **)&v570[k];
    if (v132) {
      CFRelease(v132);
    }
  }
  if (v222) {
    CFRelease(v222);
  }
  if (v566) {
    CFRelease(v566);
  }
  if (v565) {
    CFRelease(v565);
  }
  *(void *)&long long v538 = &v218;
  sub_15B944((void ***)&v538);
  if (v562)
  {
    CFTypeRef v563 = v562;
    operator delete(v562);
  }
  if (v228) {
    CFRelease(v228);
  }
  if (v569) {
    CFRelease(v569);
  }
  if (v568) {
    CFRelease(v568);
  }
  *(void *)&long long v538 = &v224;
  sub_15CB74((void ***)&v538);
  if (v567) {
    CFRelease(v567);
  }
  if (v223[0]) {
    operator delete(v223[0]);
  }
  if (v230 < 0) {
    operator delete(v229[0]);
  }
  sub_6C878((uint64_t)&v606);
  for (uint64_t m = 6; m != -2; m -= 4)
  {
    int v134 = *(const void **)&v602[m];
    if (v134) {
      CFRelease(v134);
    }
  }
  if (v233) {
    CFRelease(v233);
  }
  if (v599) {
    CFRelease(v599);
  }
  if (v598) {
    CFRelease(v598);
  }
  if (v236) {
    CFRelease(v236);
  }
  if (v601) {
    CFRelease(v601);
  }
  if (v600) {
    CFRelease(v600);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  sub_6C878((uint64_t)&v630);
  if (v240 < 0) {
    operator delete(v239[0]);
  }
  sub_6C878((uint64_t)&v661);
  for (uint64_t n = 6; n != -2; n -= 4)
  {
    char v136 = *(const void **)&v657[n];
    if (v136) {
      CFRelease(v136);
    }
  }
  if (v243) {
    CFRelease(v243);
  }
  if (v654) {
    CFRelease(v654);
  }
  if (v653) {
    CFRelease(v653);
  }
  if (v246) {
    CFRelease(v246);
  }
  if (v656) {
    CFRelease(v656);
  }
  if (v655) {
    CFRelease(v655);
  }
  if (v248 < 0) {
    operator delete(v247[0]);
  }
  sub_6C878((uint64_t)&v693);
  for (iuint64_t i = 6; ii != -2; ii -= 4)
  {
    unint64_t v138 = *(const void **)&v689[ii];
    if (v138) {
      CFRelease(v138);
    }
  }
  if (v251) {
    CFRelease(v251);
  }
  if (v686) {
    CFRelease(v686);
  }
  if (v685) {
    CFRelease(v685);
  }
  if (v254) {
    CFRelease(v254);
  }
  if (v688) {
    CFRelease(v688);
  }
  if (v687) {
    CFRelease(v687);
  }
  if (v256 < 0) {
    operator delete(v255[0]);
  }
  sub_6C878((uint64_t)&v720);
  if (v719) {
    CFRelease(v719);
  }
  if (v259) {
    CFRelease(v259);
  }
  for (juint64_t j = 0; jj != -32; jj -= 16)
  {
    uint64_t v140 = *(const void **)&v718[jj / 4 + 2];
    if (v140) {
      CFRelease(v140);
    }
    CFStringRef v141 = v717[jj / 8 + 2];
    if (v141) {
      CFRelease(v141);
    }
  }
  if (v261 < 0) {
    operator delete(v260[0]);
  }
  sub_6C878((uint64_t)&v744);
  if (v743) {
    CFRelease(v743);
  }
  if (v264) {
    CFRelease(v264);
  }
  for (kuint64_t k = 0; kk != -32; kk -= 16)
  {
    __int16 v143 = *(const void **)&v742[kk / 4 + 2];
    if (v143) {
      CFRelease(v143);
    }
    CFStringRef v144 = v741[kk / 8 + 2];
    if (v144) {
      CFRelease(v144);
    }
  }
  if (v266 < 0) {
    operator delete(v265[0]);
  }
  sub_6C878((uint64_t)&v773);
  for (muint64_t m = 6; mm != -2; mm -= 4)
  {
    char v146 = *(const void **)&v769[mm];
    if (v146) {
      CFRelease(v146);
    }
  }
  if (v269) {
    CFRelease(v269);
  }
  if (v766) {
    CFRelease(v766);
  }
  if (v765) {
    CFRelease(v765);
  }
  if (v272) {
    CFRelease(v272);
  }
  if (v768) {
    CFRelease(v768);
  }
  if (v767) {
    CFRelease(v767);
  }
  if (v274 < 0) {
    operator delete(v273[0]);
  }
  sub_6C878((uint64_t)&v800);
  if (v799) {
    CFRelease(v799);
  }
  if (v277) {
    CFRelease(v277);
  }
  for (nuint64_t n = 0; nn != -32; nn -= 16)
  {
    unint64_t v148 = *(const void **)&v798[nn / 4 + 2];
    if (v148) {
      CFRelease(v148);
    }
    CFStringRef v149 = v797[nn / 8 + 2];
    if (v149) {
      CFRelease(v149);
    }
  }
  if (v279 < 0) {
    operator delete(v278[0]);
  }
  sub_6C878((uint64_t)&v824);
  if (v823) {
    CFRelease(v823);
  }
  if (v282) {
    CFRelease(v282);
  }
  for (unint64_t i1 = 0; i1 != -32; i1 -= 16)
  {
    AudioObjectID v151 = *(const void **)&v822[i1 / 4 + 2];
    if (v151) {
      CFRelease(v151);
    }
    CFStringRef v152 = v821[i1 / 8 + 2];
    if (v152) {
      CFRelease(v152);
    }
  }
  if (v284 < 0) {
    operator delete(v283[0]);
  }
  sub_6C878((uint64_t)&v848);
  if (v847) {
    CFRelease(v847);
  }
  if (v287) {
    CFRelease(v287);
  }
  for (unint64_t i2 = 0; i2 != -32; i2 -= 16)
  {
    char v154 = *(const void **)&v846[i2 / 4 + 2];
    if (v154) {
      CFRelease(v154);
    }
    CFStringRef v155 = v845[i2 / 8 + 2];
    if (v155) {
      CFRelease(v155);
    }
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  sub_6C878((uint64_t)&v872);
  if (v871) {
    CFRelease(v871);
  }
  if (v292) {
    CFRelease(v292);
  }
  for (unint64_t i3 = 0; i3 != -32; i3 -= 16)
  {
    int v157 = *(const void **)&v870[i3 / 4 + 2];
    if (v157) {
      CFRelease(v157);
    }
    CFStringRef v158 = v869[i3 / 8 + 2];
    if (v158) {
      CFRelease(v158);
    }
  }
  if (v294 < 0) {
    operator delete(v293[0]);
  }
  sub_6C878((uint64_t)&v901);
  for (uint64_t i4 = 6; i4 != -2; i4 -= 4)
  {
    char v160 = *(const void **)&v897[i4];
    if (v160) {
      CFRelease(v160);
    }
  }
  if (v297) {
    CFRelease(v297);
  }
  if (v894) {
    CFRelease(v894);
  }
  if (v893) {
    CFRelease(v893);
  }
  if (v300) {
    CFRelease(v300);
  }
  if (v896) {
    CFRelease(v896);
  }
  if (v895) {
    CFRelease(v895);
  }
  if (v302 < 0) {
    operator delete(v301[0]);
  }
  sub_6C878((uint64_t)&v928);
  if (v927) {
    CFRelease(v927);
  }
  if (v305) {
    CFRelease(v305);
  }
  for (unint64_t i5 = 0; i5 != -32; i5 -= 16)
  {
    uint64_t v162 = *(const void **)&v926[i5 / 4 + 2];
    if (v162) {
      CFRelease(v162);
    }
    CFStringRef v163 = v925[i5 / 8 + 2];
    if (v163) {
      CFRelease(v163);
    }
  }
  if (v307 < 0) {
    operator delete(v306[0]);
  }
  sub_6C878((uint64_t)&v952);
  if (v951) {
    CFRelease(v951);
  }
  if (v310) {
    CFRelease(v310);
  }
  for (unint64_t i6 = 0; i6 != -32; i6 -= 16)
  {
    char v165 = *(const void **)&v950[i6 / 4 + 2];
    if (v165) {
      CFRelease(v165);
    }
    CFStringRef v166 = v949[i6 / 8 + 2];
    if (v166) {
      CFRelease(v166);
    }
  }
  if (v312 < 0) {
    operator delete(v311[0]);
  }
  sub_6C878((uint64_t)&v976);
  if (v975) {
    CFRelease(v975);
  }
  if (v315) {
    CFRelease(v315);
  }
  for (unint64_t i7 = 0; i7 != -32; i7 -= 16)
  {
    char v168 = *(const void **)&v974[i7 / 4 + 2];
    if (v168) {
      CFRelease(v168);
    }
    CFStringRef v169 = v973[i7 / 8 + 2];
    if (v169) {
      CFRelease(v169);
    }
  }
  if (v317 < 0) {
    operator delete(v316[0]);
  }
  sub_6C878((uint64_t)&v1000);
  if (v999) {
    CFRelease(v999);
  }
  if (v320) {
    CFRelease(v320);
  }
  for (unint64_t i8 = 0; i8 != -32; i8 -= 16)
  {
    char v171 = *(const void **)&v998[i8 / 4 + 2];
    if (v171) {
      CFRelease(v171);
    }
    CFStringRef v172 = v997[i8 / 8 + 2];
    if (v172) {
      CFRelease(v172);
    }
  }
  if (v322 < 0) {
    operator delete(v321[0]);
  }
  sub_6C878((uint64_t)&v1024);
  if (v1023) {
    CFRelease(v1023);
  }
  if (v325) {
    CFRelease(v325);
  }
  for (unint64_t i9 = 0; i9 != -32; i9 -= 16)
  {
    char v174 = *(const void **)&v1022[i9 / 4 + 2];
    if (v174) {
      CFRelease(v174);
    }
    CFStringRef v175 = v1021[i9 / 8 + 2];
    if (v175) {
      CFRelease(v175);
    }
  }
  if (v327 < 0) {
    operator delete(v326[0]);
  }
  sub_6C878((uint64_t)&v1056);
  for (uint64_t i10 = 10; i10 != -2; i10 -= 4)
  {
    char v177 = *(const void **)&v1050[i10];
    if (v177) {
      CFRelease(v177);
    }
  }
  if (v332) {
    CFRelease(v332);
  }
  if (v1049) {
    CFRelease(v1049);
  }
  if (v1048) {
    CFRelease(v1048);
  }
  *(void *)&long long v1024 = &v328;
  sub_15B944((void ***)&v1024);
  if (v1045)
  {
    long long v1046 = v1045;
    operator delete(v1045);
  }
  if (v333) {
    CFRelease(v333);
  }
  if (v334) {
    CFRelease(v334);
  }
  if (v336 < 0) {
    operator delete(v335[0]);
  }
  sub_6C878((uint64_t)&v1091);
  for (uint64_t i11 = 10; i11 != -2; i11 -= 4)
  {
    uint64_t v179 = *(const void **)&v1085[i11];
    if (v179) {
      CFRelease(v179);
    }
  }
  if (v341) {
    CFRelease(v341);
  }
  if (v1084) {
    CFRelease(v1084);
  }
  if (v1083) {
    CFRelease(v1083);
  }
  *(void *)&long long v1056 = &v337;
  sub_15B944((void ***)&v1056);
  if (v1080)
  {
    v1081 = v1080;
    operator delete(v1080);
  }
  if (v342) {
    CFRelease(v342);
  }
  if (v343) {
    CFRelease(v343);
  }
  if (v345 < 0) {
    operator delete(v344[0]);
  }
  sub_6C878((uint64_t)&v1126);
  for (uint64_t i12 = 10; i12 != -2; i12 -= 4)
  {
    char v181 = *(const void **)&v1120[i12];
    if (v181) {
      CFRelease(v181);
    }
  }
  if (v350) {
    CFRelease(v350);
  }
  if (v1119) {
    CFRelease(v1119);
  }
  if (v1118) {
    CFRelease(v1118);
  }
  *(void *)&long long v1091 = &v346;
  sub_15B944((void ***)&v1091);
  if (v1115)
  {
    v1116 = v1115;
    operator delete(v1115);
  }
  if (v351) {
    CFRelease(v351);
  }
  if (v352) {
    CFRelease(v352);
  }
  if (v354 < 0) {
    operator delete(v353[0]);
  }
  sub_6C878((uint64_t)&v1161);
  for (uint64_t i13 = 10; i13 != -2; i13 -= 4)
  {
    std::string v183 = *(const void **)&v1155[i13];
    if (v183) {
      CFRelease(v183);
    }
  }
  if (v359) {
    CFRelease(v359);
  }
  if (v1154) {
    CFRelease(v1154);
  }
  if (v1153) {
    CFRelease(v1153);
  }
  *(void *)&long long v1126 = &v355;
  sub_15B944((void ***)&v1126);
  if (v1150)
  {
    v1151 = v1150;
    operator delete(v1150);
  }
  if (v360) {
    CFRelease(v360);
  }
  if (v361) {
    CFRelease(v361);
  }
  if (v363 < 0) {
    operator delete(v362[0]);
  }
  sub_6C878((uint64_t)&v1195);
  for (uint64_t i14 = 10; i14 != -2; i14 -= 4)
  {
    CFTypeRef v185 = *(const void **)&v1189[i14];
    if (v185) {
      CFRelease(v185);
    }
  }
  if (v368) {
    CFRelease(v368);
  }
  if (v1188) {
    CFRelease(v1188);
  }
  if (v1187) {
    CFRelease(v1187);
  }
  v1161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v364;
  sub_15B944((void ***)&v1161);
  if (v1184)
  {
    v1185 = v1184;
    operator delete(v1184);
  }
  if (v369) {
    CFRelease(v369);
  }
  if (v370) {
    CFRelease(v370);
  }
  if (v372 < 0) {
    operator delete(v371[0]);
  }
  sub_6C878((uint64_t)&v1229);
  for (uint64_t i15 = 10; i15 != -2; i15 -= 4)
  {
    long long v187 = *(const void **)&v1223[i15];
    if (v187) {
      CFRelease(v187);
    }
  }
  if (v377) {
    CFRelease(v377);
  }
  if (v1222) {
    CFRelease(v1222);
  }
  if (v1221) {
    CFRelease(v1221);
  }
  v1195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373;
  sub_15B944((void ***)&v1195);
  if (v1218)
  {
    v1219 = v1218;
    operator delete(v1218);
  }
  if (v378) {
    CFRelease(v378);
  }
  if (v379) {
    CFRelease(v379);
  }
  if (v381 < 0) {
    operator delete(v380[0]);
  }
  sub_6C878((uint64_t)v1263);
  for (uint64_t i16 = 10; i16 != -2; i16 -= 4)
  {
    uint64_t v189 = *(const void **)&v1257[i16];
    if (v189) {
      CFRelease(v189);
    }
  }
  if (v386) {
    CFRelease(v386);
  }
  if (v1256) {
    CFRelease(v1256);
  }
  if (v1255) {
    CFRelease(v1255);
  }
  v1229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v382;
  sub_15B944((void ***)&v1229);
  if (v1252)
  {
    v1253 = v1252;
    operator delete(v1252);
  }
  if (v387) {
    CFRelease(v387);
  }
  if (v388) {
    CFRelease(v388);
  }
  if (v390 < 0) {
    operator delete(v389[0]);
  }
  sub_6C878((uint64_t)v398);
  for (uint64_t i17 = 10; i17 != -2; i17 -= 4)
  {
    char v191 = *(const void **)&v1292[i17];
    if (v191) {
      CFRelease(v191);
    }
  }
  if (v395) {
    CFRelease(v395);
  }
  if (v1291) {
    CFRelease(v1291);
  }
  if (v1290) {
    CFRelease(v1290);
  }
  v1263[0] = &v391;
  sub_15B944((void ***)v1263);
  if (v1287)
  {
    v1288 = v1287;
    operator delete(v1287);
  }
  if (v396) {
    CFRelease(v396);
  }
  if (v397) {
    CFRelease(v397);
  }
  if (v423 < 0) {
    operator delete(v422[0]);
  }
  if (!*(unsigned char *)(v193 + 1104)) {
    *(unsigned char *)(v193 + 1104) = 1;
  }
  *(_DWORD *)(v193 + 1100) = 2;
  if (!*(unsigned char *)(v193 + 1112)) {
    *(unsigned char *)(v193 + 1112) = 1;
  }
  *(_DWORD *)(v193 + 1108) = 33;
}

void sub_469428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,const void *a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,const void *a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0xCB8]) {
    CFRelease((CFTypeRef)STACK[0xCB8]);
  }
  if (STACK[0xCB0]) {
    CFRelease((CFTypeRef)STACK[0xCB0]);
  }
  if (SLOBYTE(STACK[0xD57]) < 0) {
    operator delete((void *)STACK[0xD40]);
  }
  if (SLOBYTE(STACK[0xD3F]) < 0) {
    operator delete((void *)STACK[0xD28]);
  }
  if (SLOBYTE(STACK[0xD27]) < 0) {
    operator delete((void *)STACK[0xD10]);
  }
  if (SLOBYTE(STACK[0xD0F]) < 0) {
    operator delete((void *)STACK[0xCF8]);
  }
  if (SLOBYTE(STACK[0xCF7]) < 0) {
    operator delete((void *)STACK[0xCE0]);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_6C878((uint64_t)&STACK[0xE40]);
  sub_6D74C((uint64_t)&STACK[0xE30]);
  sub_60394(&a42);
  sub_602D0((uint64_t)&STACK[0xE20]);
  STACK[0xCC0] = (unint64_t)&a37;
  sub_15CB74((void ***)&STACK[0xCC0]);
  sub_63908((const void **)&STACK[0xE18]);
  if (a34) {
    operator delete(a34);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  CFDictionaryRef v76 = a49;
  sub_6C878((uint64_t)&STACK[0xF90]);
  sub_6D74C((uint64_t)&STACK[0xF80]);
  sub_60394(&a54);
  sub_602D0((uint64_t)&STACK[0xF70]);
  if (v76)
  {
    a50 = v76;
    operator delete(v76);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  sub_6C878((uint64_t)&STACK[0x1120]);
  for (uint64_t i = 16; i != -16; i -= 16)
    sub_6D74C((uint64_t)&STACK[0x1100] + i);
  sub_60394(&a66);
  sub_602D0((uint64_t)&STACK[0x10D8]);
  STACK[0xCC0] = (unint64_t)&a61;
  sub_15B944((void ***)&STACK[0xCC0]);
  unint64_t v78 = (void *)STACK[0x10C0];
  if (STACK[0x10C0])
  {
    STACK[0x10C8] = (unint64_t)v78;
    operator delete(v78);
  }
  sub_60394(&a72);
  uint64_t v79 = a67;
  sub_602D0((uint64_t)&STACK[0x10F0]);
  STACK[0xCC0] = (unint64_t)&a70;
  sub_15CB74((void ***)&STACK[0xCC0]);
  sub_63908((const void **)&STACK[0x10E8]);
  if (v79)
  {
    a68 = v79;
    operator delete(v79);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  sub_6C878((uint64_t)&STACK[0x1290]);
  for (uint64_t j = 16; j != -16; j -= 16)
    sub_6D74C((uint64_t)&STACK[0x1270] + j);
  sub_60394((const void **)&STACK[0x200]);
  sub_602D0((uint64_t)&STACK[0x1250]);
  sub_60394((const void **)&STACK[0x220]);
  sub_602D0((uint64_t)&STACK[0x1260]);
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  sub_6C878((uint64_t)&STACK[0x13C0]);
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  sub_6C878((uint64_t)&STACK[0x1530]);
  for (uint64_t k = 16; k != -16; k -= 16)
    sub_6D74C((uint64_t)&STACK[0x1510] + k);
  sub_60394((const void **)&STACK[0x270]);
  sub_602D0((uint64_t)&STACK[0x14F0]);
  sub_60394((const void **)&STACK[0x290]);
  sub_602D0((uint64_t)&STACK[0x1500]);
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  sub_6C878((uint64_t)&STACK[0x16A0]);
  for (uint64_t m = 16; m != -16; m -= 16)
    sub_6D74C((uint64_t)&STACK[0x1680] + m);
  sub_60394((const void **)&STACK[0x2C8]);
  sub_602D0((uint64_t)&STACK[0x1660]);
  sub_60394((const void **)&STACK[0x2E8]);
  sub_602D0((uint64_t)&STACK[0x1670]);
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  sub_6C878((uint64_t)&STACK[0x1800]);
  sub_6D74C((uint64_t)&STACK[0x17F0]);
  sub_60394((const void **)&STACK[0x320]);
  for (uint64_t n = 16; n != -16; n -= 16)
    sub_602D0((uint64_t)&STACK[0x17D0] + n);
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  sub_6C878((uint64_t)&STACK[0x1960]);
  sub_6D74C((uint64_t)&STACK[0x1950]);
  sub_60394((const void **)&STACK[0x358]);
  for (iuint64_t i = 16; ii != -16; ii -= 16)
    sub_602D0((uint64_t)&STACK[0x1930] + ii);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  sub_6C878((uint64_t)&STACK[0x1AD0]);
  for (juint64_t j = 16; jj != -16; jj -= 16)
    sub_6D74C((uint64_t)&STACK[0x1AB0] + jj);
  sub_60394((const void **)&STACK[0x390]);
  sub_602D0((uint64_t)&STACK[0x1A90]);
  sub_60394((const void **)&STACK[0x3B0]);
  sub_602D0((uint64_t)&STACK[0x1AA0]);
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  sub_6C878((uint64_t)&STACK[0x1C30]);
  sub_6D74C((uint64_t)&STACK[0x1C20]);
  sub_60394((const void **)&STACK[0x3E8]);
  for (kuint64_t k = 16; kk != -16; kk -= 16)
    sub_602D0((uint64_t)&STACK[0x1C00] + kk);
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  sub_6C878((uint64_t)&STACK[0x1D90]);
  sub_6D74C((uint64_t)&STACK[0x1D80]);
  sub_60394((const void **)&STACK[0x420]);
  for (muint64_t m = 16; mm != -16; mm -= 16)
    sub_602D0((uint64_t)&STACK[0x1D60] + mm);
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  sub_6C878((uint64_t)&STACK[0x1EF0]);
  sub_6D74C((uint64_t)&STACK[0x1EE0]);
  sub_60394((const void **)&STACK[0x458]);
  for (nuint64_t n = 16; nn != -16; nn -= 16)
    sub_602D0((uint64_t)&STACK[0x1EC0] + nn);
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  sub_6C878((uint64_t)&STACK[0x2050]);
  sub_6D74C((uint64_t)&STACK[0x2040]);
  sub_60394((const void **)&STACK[0x490]);
  for (uint64_t i1 = 16; i1 != -16; i1 -= 16)
    sub_602D0((uint64_t)&STACK[0x2020] + i1);
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  sub_6C878((uint64_t)&STACK[0x21C0]);
  for (uint64_t i2 = 16; i2 != -16; i2 -= 16)
    sub_6D74C((uint64_t)&STACK[0x21A0] + i2);
  sub_60394((const void **)&STACK[0x4C8]);
  sub_602D0((uint64_t)&STACK[0x2180]);
  sub_60394((const void **)&STACK[0x4E8]);
  sub_602D0((uint64_t)&STACK[0x2190]);
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  sub_6C878((uint64_t)&STACK[0x2320]);
  sub_6D74C((uint64_t)&STACK[0x2310]);
  sub_60394((const void **)&STACK[0x520]);
  for (uint64_t i3 = 16; i3 != -16; i3 -= 16)
    sub_602D0((uint64_t)&STACK[0x22F0] + i3);
  if (SLOBYTE(STACK[0x53F]) < 0) {
    operator delete((void *)STACK[0x528]);
  }
  sub_6C878((uint64_t)&STACK[0x2480]);
  sub_6D74C((uint64_t)&STACK[0x2470]);
  sub_60394((const void **)&STACK[0x558]);
  for (uint64_t i4 = 16; i4 != -16; i4 -= 16)
    sub_602D0((uint64_t)&STACK[0x2450] + i4);
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  sub_6C878((uint64_t)&STACK[0x25E0]);
  sub_6D74C((uint64_t)&STACK[0x25D0]);
  sub_60394((const void **)&STACK[0x590]);
  for (uint64_t i5 = 16; i5 != -16; i5 -= 16)
    sub_602D0((uint64_t)&STACK[0x25B0] + i5);
  if (SLOBYTE(STACK[0x5AF]) < 0) {
    operator delete((void *)STACK[0x598]);
  }
  sub_6C878((uint64_t)&STACK[0x2740]);
  sub_6D74C((uint64_t)&STACK[0x2730]);
  sub_60394((const void **)&STACK[0x5C8]);
  for (uint64_t i6 = 16; i6 != -16; i6 -= 16)
    sub_602D0((uint64_t)&STACK[0x2710] + i6);
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  sub_6C878((uint64_t)&STACK[0x28A0]);
  sub_6D74C((uint64_t)&STACK[0x2890]);
  sub_60394((const void **)&STACK[0x600]);
  for (uint64_t i7 = 16; i7 != -16; i7 -= 16)
    sub_602D0((uint64_t)&STACK[0x2870] + i7);
  if (SLOBYTE(STACK[0x61F]) < 0) {
    operator delete((void *)STACK[0x608]);
  }
  sub_6C878((uint64_t)&STACK[0x2A30]);
  for (uint64_t i8 = 32; i8 != -16; i8 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2A00] + i8);
  sub_60394((const void **)&STACK[0x648]);
  sub_602D0((uint64_t)&STACK[0x29F0]);
  STACK[0x2870] = (unint64_t)&STACK[0x620];
  sub_15B944((void ***)&STACK[0x2870]);
  CFDictionaryRef v97 = (void *)STACK[0x29D8];
  if (STACK[0x29D8])
  {
    STACK[0x29E0] = (unint64_t)v97;
    operator delete(v97);
  }
  sub_60394((const void **)&STACK[0x650]);
  sub_60394((const void **)&STACK[0x658]);
  if (SLOBYTE(STACK[0x677]) < 0) {
    operator delete((void *)STACK[0x660]);
  }
  sub_6C878((uint64_t)&STACK[0x2BC0]);
  for (uint64_t i9 = 32; i9 != -16; i9 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2B90] + i9);
  sub_60394((const void **)&STACK[0x6A0]);
  sub_602D0((uint64_t)&STACK[0x2B80]);
  STACK[0x2A00] = (unint64_t)&STACK[0x678];
  sub_15B944((void ***)&STACK[0x2A00]);
  uint64_t v99 = (void *)STACK[0x2B68];
  if (STACK[0x2B68])
  {
    STACK[0x2B70] = (unint64_t)v99;
    operator delete(v99);
  }
  sub_60394((const void **)&STACK[0x6A8]);
  sub_60394((const void **)&STACK[0x6B0]);
  if (SLOBYTE(STACK[0x6CF]) < 0) {
    operator delete((void *)STACK[0x6B8]);
  }
  sub_6C878((uint64_t)&STACK[0x2D50]);
  for (uint64_t i10 = 32; i10 != -16; i10 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2D20] + i10);
  sub_60394((const void **)&STACK[0x6F8]);
  sub_602D0((uint64_t)&STACK[0x2D10]);
  STACK[0x2B90] = (unint64_t)&STACK[0x6D0];
  sub_15B944((void ***)&STACK[0x2B90]);
  uint64_t v101 = (void *)STACK[0x2CF8];
  if (STACK[0x2CF8])
  {
    STACK[0x2D00] = (unint64_t)v101;
    operator delete(v101);
  }
  sub_60394((const void **)&STACK[0x700]);
  sub_60394((const void **)&STACK[0x708]);
  if (SLOBYTE(STACK[0x727]) < 0) {
    operator delete((void *)STACK[0x710]);
  }
  sub_6C878((uint64_t)&STACK[0x2EE0]);
  for (uint64_t i11 = 32; i11 != -16; i11 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2EB0] + i11);
  sub_60394((const void **)&STACK[0x750]);
  sub_602D0((uint64_t)&STACK[0x2EA0]);
  STACK[0x2D20] = (unint64_t)&STACK[0x728];
  sub_15B944((void ***)&STACK[0x2D20]);
  float v103 = (void *)STACK[0x2E88];
  if (STACK[0x2E88])
  {
    STACK[0x2E90] = (unint64_t)v103;
    operator delete(v103);
  }
  sub_60394((const void **)&STACK[0x758]);
  sub_60394((const void **)&STACK[0x760]);
  if (SLOBYTE(STACK[0x77F]) < 0) {
    operator delete((void *)STACK[0x768]);
  }
  sub_6C878((uint64_t)&STACK[0x3070]);
  for (uint64_t i12 = 32; i12 != -16; i12 -= 16)
    sub_6D74C((uint64_t)&STACK[0x3040] + i12);
  sub_60394((const void **)&STACK[0x7A8]);
  sub_602D0((uint64_t)&STACK[0x3030]);
  STACK[0x2EB0] = (unint64_t)&STACK[0x780];
  sub_15B944((void ***)&STACK[0x2EB0]);
  unint64_t v105 = (void *)STACK[0x3018];
  if (STACK[0x3018])
  {
    STACK[0x3020] = (unint64_t)v105;
    operator delete(v105);
  }
  sub_60394((const void **)&STACK[0x7B0]);
  sub_60394((const void **)&STACK[0x7B8]);
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  sub_6C878((uint64_t)&STACK[0x3200]);
  for (uint64_t i13 = 32; i13 != -16; i13 -= 16)
    sub_6D74C((uint64_t)&STACK[0x31D0] + i13);
  sub_60394((const void **)&STACK[0x800]);
  sub_602D0((uint64_t)&STACK[0x31C0]);
  STACK[0x3040] = (unint64_t)&STACK[0x7D8];
  sub_15B944((void ***)&STACK[0x3040]);
  size_t v107 = (void *)STACK[0x31A8];
  if (STACK[0x31A8])
  {
    STACK[0x31B0] = (unint64_t)v107;
    operator delete(v107);
  }
  sub_60394((const void **)&STACK[0x808]);
  sub_60394((const void **)&STACK[0x810]);
  if (SLOBYTE(STACK[0x82F]) < 0) {
    operator delete((void *)STACK[0x818]);
  }
  sub_6C878((uint64_t)&STACK[0x3390]);
  for (uint64_t i14 = 32; i14 != -16; i14 -= 16)
    sub_6D74C((uint64_t)&STACK[0x3360] + i14);
  sub_60394((const void **)&STACK[0x858]);
  sub_602D0((uint64_t)&STACK[0x3350]);
  STACK[0x31D0] = (unint64_t)&STACK[0x830];
  sub_15B944((void ***)&STACK[0x31D0]);
  unint64_t v109 = (void *)STACK[0x3338];
  if (STACK[0x3338])
  {
    STACK[0x3340] = (unint64_t)v109;
    operator delete(v109);
  }
  sub_60394((const void **)&STACK[0x860]);
  sub_60394((const void **)&STACK[0x868]);
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  sub_6C878((uint64_t)&STACK[0x8C8]);
  for (uint64_t i15 = 32; i15 != -16; i15 -= 16)
    sub_6D74C((uint64_t)&STACK[0x34F0] + i15);
  sub_60394((const void **)&STACK[0x8B0]);
  sub_602D0((uint64_t)&STACK[0x34E0]);
  STACK[0x3360] = (unint64_t)&STACK[0x888];
  sub_15B944((void ***)&STACK[0x3360]);
  CFDictionaryRef v111 = (void *)STACK[0x34C8];
  if (STACK[0x34C8])
  {
    STACK[0x34D0] = (unint64_t)v111;
    operator delete(v111);
  }
  sub_60394((const void **)&STACK[0x8B8]);
  sub_60394((const void **)&STACK[0x8C0]);
  if (SLOBYTE(STACK[0xA0F]) < 0) {
    operator delete((void *)STACK[0x9F8]);
  }
  while (v74 != &STACK[0x3520])
  {
    v74 -= 41;
    sub_6D710((uint64_t)v74);
  }
  sub_6C63C(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_46DD60(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "BeamIndex");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_46DE00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_46DE44(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8))
  {
    CFDictionaryRef v68 = (os_log_t *)sub_32A48(13);
    unint64_t v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v89 = 136315394;
      *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&v89[12] = 1024;
      *(_DWORD *)&v89[14] = 36;
      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v89, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v84 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == a2)
  {
    long long v78 = 0uLL;
    CFNumberRef v4 = 0;
  }
  else
  {
    CFNumberRef v4 = 0;
    long long v78 = 0uLL;
    do
    {
      uint64_t v5 = *(void *)(v3 + 16);
      if (!v5)
      {
        uint64_t v50 = (os_log_t *)sub_32A48(13);
        uint64_t v51 = *v50;
        if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v89 = 136315394;
          *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v89[12] = 1024;
          *(_DWORD *)&v89[14] = 130;
          _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v89, 0x12u);
        }
        int v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v52, "Precondition failure.");
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 96))(v5, 0, 0);
      if (!v6)
      {
        CFDictionaryRef v53 = (os_log_t *)sub_32A48(13);
        int64x2_t v54 = *v53;
        if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v89 = 136315394;
          *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v89[12] = 1024;
          *(_DWORD *)&v89[14] = 133;
          _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v89, 0x12u);
        }
        CFDictionaryRef v55 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v55, "Precondition failure.");
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 112))(v6, v89);
      BOOL v7 = (char *)v78;
      if ((unint64_t)v78 >= *((void *)&v78 + 1))
      {
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v78 - (void)v4) >> 3) + 1;
        if (v11 > 0x666666666666666) {
          sub_60548();
        }
        if (0x999999999999999ALL * ((uint64_t)(*((void *)&v78 + 1) - (void)v4) >> 3) > v11) {
          unint64_t v11 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v78 + 1) - (void)v4) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v78 + 1) - (void)v4) >> 3) >= 0x333333333333333) {
          unint64_t v12 = 0x666666666666666;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)sub_2831B8(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        unint64_t v14 = v12 + 8 * ((uint64_t)(v78 - (void)v4) >> 3);
        long long v15 = *(_OWORD *)v89;
        long long v16 = *(_OWORD *)&v89[16];
        *(void *)(v14 + 32) = *(void *)&v89[32];
        *(_OWORD *)unint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        if ((char *)v78 == v4)
        {
          uint64_t v20 = (char *)(v12 + 8 * ((uint64_t)(v78 - (void)v4) >> 3));
        }
        else
        {
          unint64_t v17 = v12 + 8 * ((uint64_t)(v78 - (void)v4) >> 3);
          do
          {
            long long v18 = *(_OWORD *)(v7 - 40);
            long long v19 = *(_OWORD *)(v7 - 24);
            uint64_t v20 = (char *)(v17 - 40);
            *(void *)(v17 - 8) = *((void *)v7 - 1);
            *(_OWORD *)(v17 - 24) = v19;
            *(_OWORD *)(v17 - 40) = v18;
            v7 -= 40;
            v17 -= 40;
          }
          while (v7 != v4);
        }
        unint64_t v10 = v14 + 40;
        *((void *)&v78 + 1) = v12 + 40 * v13;
        if (v4) {
          operator delete(v4);
        }
        CFNumberRef v4 = v20;
      }
      else
      {
        long long v8 = *(_OWORD *)v89;
        long long v9 = *(_OWORD *)&v89[16];
        *(void *)(v78 + 32) = *(void *)&v89[32];
        *(_OWORD *)long long v78 = v8;
        *(_OWORD *)(v78 + 16) = v9;
        unint64_t v10 = v78 + 40;
      }
      int v21 = (os_log_t *)sub_32A48(16);
      uint64_t v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
      {
        sub_4F64((uint64_t)&v86, (os_unfair_lock_t)(*(void *)(v3 + 16) + 8));
        int v23 = v88;
        CFDictionaryRef v24 = (void **)v86;
        sub_259A4(&__p, (uint64_t)v89);
        uint64_t v25 = &v86;
        if (v23 < 0) {
          uint64_t v25 = v24;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "HapticDebugIOMonitor.cpp";
        __int16 v96 = 1024;
        int v97 = 139;
        __int16 v98 = 2080;
        *(void *)uint64_t v99 = v25;
        *(_WORD *)&v99[8] = 2080;
        *(void *)&v99[10] = p_p;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d input stream format on physical device %s : %s", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v88 < 0) {
          operator delete(v86);
        }
      }
      *((void *)&v27 + 1) = *((void *)&v78 + 1);
      *(void *)&long long v27 = v10;
      long long v78 = v27;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != a2);
  }
  unint64_t v28 = *(void **)(a1 + 80);
  if (v28)
  {
    *(void *)(a1 + 88) = v28;
    operator delete(v28);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(void *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 88) = v78;
  if ((char *)v78 == v4)
  {
    char v71 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v72 = *v71;
    if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v89 = 136315394;
      *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&v89[12] = 1024;
      *(_DWORD *)&v89[14] = 151;
      _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v89, 0x12u);
    }
    uint64_t v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v73, "Precondition failure.");
  }
  long long v29 = *(_OWORD *)v4;
  long long v30 = *((_OWORD *)v4 + 1);
  uint64_t v84 = *((void *)v4 + 4);
  long long v82 = v29;
  long long v83 = v30;
  int v31 = DWORD1(v30);
  if (DWORD1(v30) != 1)
  {
    CFDictionaryRef v74 = (os_log_t *)sub_32A48(13);
    std::string v75 = *v74;
    if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v89 = 136315650;
      *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
      *(_WORD *)&v89[12] = 1024;
      *(_DWORD *)&v89[14] = 154;
      *(_WORD *)&v89[18] = 1024;
      *(_DWORD *)&v89[20] = v31;
      _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"More than 1 frame per packet in input stream: %u\"", v89, 0x18u);
    }
    CFDictionaryRef v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v76, "More than 1 frame per packet in input stream: %u");
  }
  uint64_t v32 = v4 + 40;
  if (v32 != (char *)v78)
  {
    unsigned int v33 = HIDWORD(v83);
    unsigned int v34 = v83;
    do
    {
      if (*(double *)v32 != *(double *)&v82)
      {
        uint64_t v56 = (os_log_t *)sub_32A48(13);
        CFDictionaryRef v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
        {
          double v58 = *(double *)v32;
          *(_DWORD *)long long v89 = 136315906;
          *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v89[12] = 1024;
          *(_DWORD *)&v89[14] = 158;
          *(_WORD *)&v89[18] = 2048;
          *(double *)&v89[20] = v58;
          *(_WORD *)&v89[28] = 2048;
          *(void *)&v89[30] = v82;
          _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"SampleRate mismatch between input streams: %f %f\"", v89, 0x26u);
        }
        CFDictionaryRef v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v59, "SampleRate mismatch between input streams: %f %f");
      }
      if (*((_DWORD *)v32 + 8) != v84)
      {
        CFDictionaryRef v64 = (os_log_t *)sub_32A48(13);
        uint64_t v65 = *v64;
        if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
        {
          int v66 = *((_DWORD *)v32 + 8);
          *(_DWORD *)long long v89 = 136315906;
          *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v89[12] = 1024;
          *(_DWORD *)&v89[14] = 159;
          *(_WORD *)&v89[18] = 1024;
          *(_DWORD *)&v89[20] = v66;
          *(_WORD *)&v89[24] = 1024;
          *(_DWORD *)&v89[26] = v84;
          _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Bits per sample mismatch between input streams: %u %u\"", v89, 0x1Eu);
        }
        CFTypeRef v67 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v67, "Bits per sample mismatch between input streams: %u %u");
      }
      if (*((_DWORD *)v32 + 5) != 1)
      {
        CFIndex v60 = (os_log_t *)sub_32A48(13);
        CFDictionaryRef v61 = *v60;
        if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
        {
          int v62 = *((_DWORD *)v32 + 5);
          *(_DWORD *)long long v89 = 136315650;
          *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
          *(_WORD *)&v89[12] = 1024;
          *(_DWORD *)&v89[14] = 160;
          *(_WORD *)&v89[18] = 1024;
          *(_DWORD *)&v89[20] = v62;
          _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"More than 1 frame per packet in input stream: %u\"", v89, 0x18u);
        }
        CFDictionaryRef v63 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v63, "More than 1 frame per packet in input stream: %u");
      }
      v33 += *((_DWORD *)v32 + 7);
      v34 += *((_DWORD *)v32 + 4);
      LODWORD(v83) = v34;
      *((void *)&v83 + 1) = __PAIR64__(v33, v34);
      v32 += 40;
    }
    while (v32 != (char *)v78);
  }
  std::string::size_type v35 = (os_log_t *)sub_32A48(16);
  CFDictionaryRef v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_INFO))
  {
    sub_259A4((std::string *)buf, (uint64_t)&v82);
    std::string::size_type v37 = v99[3] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)long long v89 = 136315650;
    *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
    *(_WORD *)&v89[12] = 1024;
    *(_DWORD *)&v89[14] = 166;
    *(_WORD *)&v89[18] = 2080;
    *(void *)&v89[20] = v37;
    _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_INFO, "%25s:%-5d output stream format for capture: %s", v89, 0x1Cu);
    if ((v99[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  long long v81 = xmmword_4E7C20;
  uint64_t v38 = sub_10FBF0();
  memset(v89, 0, 24);
  strcpy(&v89[24], "cwdv");
  v89[32] = 0;
  int v90 = 3;
  v92[0] = 0;
  v92[1] = 0;
  CFDictionaryRef v91 = v92;
  int v93 = 44739242;
  CFTypeRef cf = 0;
  *(void *)int buf = off_6407B8;
  *(void *)&v99[4] = buf;
  sub_10EA24((uint64_t *)&v86, v38, v89, (uint64_t)buf);
  sub_6AFD4(buf);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v92[0]);
  if (*(void *)v89)
  {
    *(void *)&v89[8] = *(void *)v89;
    operator delete(*(void **)v89);
  }
  CFDictionaryRef v39 = v87;
  if (v87 == &v86) {
    goto LABEL_64;
  }
  while (1)
  {
    sub_549A4((uint64_t *)v89, (uint64_t *)v39 + 2, "", 45);
    int v40 = *(_DWORD *)(*(void *)v89 + 144);
    if (*(void *)&v89[8]) {
      sub_4636C(*(std::__shared_weak_count **)&v89[8]);
    }
    if (v40 == 1751409257) {
      break;
    }
    CFDictionaryRef v39 = (void **)v39[1];
    if (v39 == &v86) {
      goto LABEL_64;
    }
  }
  if (v39 == &v86)
  {
LABEL_64:
    uint64_t v41 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v42 = *v41;
    if (*v41)
    {
      if (os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v89 = 136315394;
        *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
        *(_WORD *)&v89[12] = 1024;
        *(_DWORD *)&v89[14] = 47;
        _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"No Haptic Debug Input ports present\"", v89, 0x12u);
      }
    }
    uint64_t v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v43, "No Haptic Debug Input ports present");
  }
  uint64_t v44 = (atomic_ullong *)v39[3];
  *(void *)long long v89 = v39[2];
  *(void *)&v89[8] = v44;
  if (v44) {
    atomic_fetch_add_explicit(v44 + 2, 1uLL, memory_order_relaxed);
  }
  sub_D1200((uint64_t *)buf, (uint64_t *)v89, 1);
  if (*(void *)&v89[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v89[8]);
  }
  uint64_t v45 = (os_log_t *)sub_32A48(16);
  unint64_t v46 = *v45;
  if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEBUG))
  {
    sub_549A4(&v79, (uint64_t *)v39 + 2, "", 52);
    sub_2417C(&__p, *(_DWORD *)(v79 + 144));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = &__p;
    }
    else {
      std::string::size_type v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long v89 = 136315650;
    *(void *)&v89[4] = "HapticDebugIOMonitor.cpp";
    *(_WORD *)&v89[12] = 1024;
    *(_DWORD *)&v89[14] = 52;
    *(_WORD *)&v89[18] = 2080;
    *(void *)&v89[20] = v47;
    _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring AudioIOMonitor for %s", v89, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v80) {
      sub_4636C(v80);
    }
  }
  uint64_t v48 = *(void *)(a1 + 8);
  if (v48) {
    (*(void (**)(uint64_t, long long *, long long *, unsigned char *))(*(void *)v48 + 16))(v48, &v81, &v82, buf);
  }
  sub_8108((uint64_t *)buf);
  if (!*(void *)(a1 + 32)) {
    operator new[]();
  }
  long long v49 = v83;
  *(_OWORD *)(a1 + 40) = v82;
  *(_OWORD *)(a1 + 56) = v49;
  *(void *)(a1 + 72) = v84;
  *(_OWORD *)(a1 + 104) = v81;
  sub_8108((uint64_t *)&v86);
}

void sub_46EDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,std::__shared_weak_count *a35)
{
  __cxa_free_exception(v35);
  sub_8108((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_46EF00()
{
  return 1;
}

void sub_46EF10(uint64_t a1, void *a2)
{
  *a2 = off_6407B8;
}

void *sub_46EF30()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6407B8;
  return result;
}

void sub_46EF68()
{
}

void sub_46EF80(void *a1)
{
  sub_46EFB8(a1);

  operator delete();
}

void *sub_46EFB8(void *a1)
{
  *a1 = off_640790;
  uint64_t v2 = a1[16];
  a1[16] = 0;
  if (v2) {
    operator delete[]();
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_46F05C(uint64_t a1, int a2)
{
  *(void *)a1 = off_640790;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 48) = -1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 120) = a2;
  *(void *)(a1 + 128) = 0;
  sub_21C8C(&__p, "");
  sub_3DA6A4();
}

void sub_46F154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *(void *)(v15 + 128);
  *(void *)(v15 + 128) = 0;
  if (v19) {
    operator delete[]();
  }
  uint64_t v20 = *v17;
  if (*v17)
  {
    *(void *)(v15 + 88) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v16;
  *long long v16 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_46F1D8(uint64_t a1, unsigned int *a2)
{
  if (!*(void *)(a1 + 32) || *(_DWORD *)(a1 + 16) != 1)
  {
    unint64_t v28 = (os_log_t *)sub_32A48(13);
    long long v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v48 = "HapticDebugIOMonitor.cpp";
      __int16 v49 = 1024;
      int v50 = 86;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(_DWORD *)(a1 + 48) == -1)
  {
    int v31 = (os_log_t *)sub_32A48(13);
    uint64_t v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v48 = "HapticDebugIOMonitor.cpp";
      __int16 v49 = 1024;
      int v50 = 87;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unsigned int v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Precondition failure.");
  }
  if (!a2)
  {
    unsigned int v34 = (os_log_t *)sub_32A48(13);
    std::string::size_type v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v48 = "HapticDebugIOMonitor.cpp";
      __int16 v49 = 1024;
      int v50 = 88;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    CFDictionaryRef v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v36, "Precondition failure.");
  }
  uint64_t v4 = *a2;
  if (!v4)
  {
    std::string::size_type v37 = (os_log_t *)sub_32A48(13);
    uint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v48 = "HapticDebugIOMonitor.cpp";
      __int16 v49 = 1024;
      int v50 = 89;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    CFDictionaryRef v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "Precondition failure.");
  }
  uint64_t v46 = a1 + 16;
  unint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 16 * v4;
  do
  {
    v6 += a2[v5 / 4 + 3];
    v5 += 16;
  }
  while (v7 != v5);
  unsigned int v8 = *(_DWORD *)(a1 + 64);
  uint64_t v9 = v6 / v8;
  unsigned int v10 = *(_DWORD *)(a1 + 28);
  if (v9 != v10 / v8)
  {
    int v40 = (os_log_t *)sub_32A48(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v48 = "HapticDebugIOMonitor.cpp";
      __int16 v49 = 1024;
      int v50 = 99;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    CFDictionaryRef v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v42, "Precondition failure.");
  }
  if (v6 != v10)
  {
    uint64_t v43 = (os_log_t *)sub_32A48(13);
    uint64_t v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v48 = "HapticDebugIOMonitor.cpp";
      __int16 v49 = 1024;
      int v50 = 100;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v45, "Precondition failure.");
  }
  if (v8 <= v6)
  {
    int v11 = 0;
    int v12 = 0;
    if (v9 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = v6 / v8;
    }
    LODWORD(v14) = 1;
    do
    {
      if (v14)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 24;
        uint64_t v17 = 4;
        do
        {
          unsigned int v18 = *(_DWORD *)(*(void *)(a1 + 80) + v16);
          if (*(_DWORD *)(a1 + 28) - v12 < v18)
          {
            uint64_t v25 = (os_log_t *)sub_32A48(13);
            uint64_t v26 = *v25;
            if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315394;
              uint64_t v48 = "HapticDebugIOMonitor.cpp";
              __int16 v49 = 1024;
              int v50 = 111;
              _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }
            long long v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v27, "Precondition failure.");
          }
          memcpy((void *)(*(void *)(a1 + 32) + v12), (const void *)(*(void *)&a2[v17] + v18 * v11), *(unsigned int *)(*(void *)(a1 + 80) + v16));
          v12 += v18;
          ++v15;
          unint64_t v14 = *a2;
          v17 += 4;
          v16 += 40;
        }
        while (v15 < v14);
      }
      ++v11;
    }
    while (v11 != v13);
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if (v19)
  {
    if ((*(unsigned char *)(v19 + 16) & 1) == 0) {
      return 0;
    }
    uint64_t v20 = sub_3FAC24(v19 + 24, (_DWORD *)(a1 + 104));
    if (v19 + 32 == v20)
    {
      return 0;
    }
    else
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)(v20 + 48);
      int v23 = *(std::__shared_weak_count **)(v21 + 56);
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v22)
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v22 + 24))(v22, v9, v46, 0);
        if (!v23) {
          return v19;
        }
        goto LABEL_30;
      }
      uint64_t v19 = 0;
      if (v23) {
LABEL_30:
      }
        sub_4636C(v23);
    }
  }
  return v19;
}

void sub_46F888(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_46F8D0()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)unsigned int v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  int v9 = 0;
  BOOL v10 = (unsigned __int16)sub_6CBEC() > 0x100u;
  char v11 = 1;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  unint64_t v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  unsigned char v95[80] = 0;
  v95[120] = 0;
  v95[128] = 0;
  v95[200] = 0;
  v95[208] = 0;
  v95[248] = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  LOBYTE(v108) = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  LOBYTE(v116) = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 1;
  char v131 = 0;
  char v132 = 0;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  LOBYTE(v137) = 0;
  char v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  __int16 v141 = 0;
  LOBYTE(v142) = 0;
  char v143 = 0;
  LOBYTE(v144) = 0;
  char v145 = 0;
  LOBYTE(v146) = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  LOBYTE(v152) = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(v156) = 0;
  char v157 = 0;
  LOBYTE(v158) = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  LOBYTE(__p) = 0;
  char v166 = 0;
  v167.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  v169.__r_.__value_.__s.__data_[0] = 0;
  char v170 = 0;
  v171.__r_.__value_.__s.__data_[0] = 0;
  char v172 = 0;
  int v173 = 256;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  __int16 v180 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 2;
  int v4 = 5;
  LODWORD(__src) = 3;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x400000003;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  int v9 = 16843009;
  LOWORD(v12) = 257;
  HIWORD(v12) = 257;
  LOWORD(v14) = 256;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 1090519040;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  LOWORD(v67) = 257;
  int v94 = 16843009;
  if (!v97) {
    char v97 = 1;
  }
  int v96 = 1836282987;
  if (!v99) {
    char v99 = 1;
  }
  int v98 = 2;
  if (!v101) {
    char v101 = 1;
  }
  int v100 = 8;
  if (!v103) {
    char v103 = 1;
  }
  int v102 = 16;
  int v106 = 36;
  char v107 = 1;
  int v108 = 36;
  char v109 = 1;
  int v110 = 36;
  char v111 = 1;
  int v116 = 36;
  char v117 = 1;
  int v133 = 42;
  char v134 = 1;
  int v135 = 3;
  char v136 = 1;
  int v137 = 25;
  char v138 = 1;
  int v139 = 42;
  char v140 = 1;
  int v152 = 13;
  char v153 = 1;
  int v154 = 42;
  char v155 = 1;
  int v156 = 23;
  char v157 = 1;
  int v158 = 7;
  char v159 = 1;
  __int16 v141 = 257;
  if (!v143) {
    char v143 = 1;
  }
  int v142 = 4;
  if (!v147) {
    char v147 = 1;
  }
  int v146 = 8;
  if (!v145) {
    char v145 = 1;
  }
  int v144 = 2;
  sub_208140(&__src, 96);
  if (v166)
  {
    if (SHIBYTE(v165) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v165 = v182;
  }
  else
  {
    long long __p = __src;
    uint64_t v165 = v182;
    char v166 = 1;
  }
  sub_87428(&v167, "_top_mic_general");
  sub_87428(&v169, "_top_mic_measurement");
  sub_87428(&v171, "_top_mic_hearing_accessibility");
  sub_402E04(&v0);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_46FF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_46FF9C(unint64_t *a1)
{
  unint64_t v1 = atomic_load(a1);
  pthread_t v2 = pthread_self();
  if (v2) {
    BOOL v3 = v2 == (pthread_t)v1;
  }
  else {
    BOOL v3 = 0;
  }
  unsigned int v4 = v3;
  if (v1) {
    return v4;
  }
  else {
    return v2 == 0;
  }
}

void sub_46FFE0(uint64_t a1, _DWORD **a2, int a3)
{
  BOOL v3 = *a2;
  if (a3)
  {
    if (*v3 == 1701669219) {
      return;
    }
  }
  else if (v3 == a2[1])
  {
    return;
  }
  unsigned int v4 = (os_log_t *)sub_32A48(13);
  char v5 = *v4;
  if (*v4)
  {
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "Device_MikeyBus_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 633;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid SubPortIDs found for Mikeybus device\"", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t sub_4700C8(uint64_t a1, signed int a2)
{
  if (a2 > 1886222184)
  {
    if (a2 == 1886680175) {
      return 0;
    }
    int v2 = 1886222185;
  }
  else
  {
    if (a2 == 1885892727) {
      return 0;
    }
    int v2 = 1886154613;
  }
  if (a2 != v2)
  {
    unsigned int v4 = (os_log_t *)sub_32A48(13);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      if (v10 >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v12 = "Device_MikeyBus_Aspen.cpp";
      __int16 v13 = 1024;
      int v14 = 622;
      __int16 v15 = 2080;
      uint64_t v16 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType: %s.\"", buf, 0x1Cu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
  }
  return 0;
}

void sub_470250(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_47026C(os_unfair_lock_s *a1)
{
  return 1;
}

void sub_47029C(os_unfair_lock_s *a1)
{
  if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 0))
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v99 = 0x696E70747465726DLL;
      LODWORD(v100) = 0;
      uint64_t v3 = (*(uint64_t (**)(os_unfair_lock_s *, void, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 96))(a1, 0, v2);
      LODWORD(v97) = 0;
      LODWORD(v96) = 4;
      (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t *, void ***))(*(void *)v3 + 40))(v3, &v99, 0, 0, &v96, &v97);
      int v4 = (int)v97;
      if (v97 == 1752000867)
      {
        if (sub_4724FC((uint64_t)a1))
        {
          uint64_t v5 = sub_32A48(17);
          uint64_t v6 = sub_32A48(32);
          char v7 = 0;
          uint64_t v8 = 0;
          *(void *)int buf = 0x100000002;
          uint64_t v9 = *(void *)(v5 + 8);
          while (1)
          {
            uint64_t v10 = (int)buf[v8];
            char v11 = v7;
            if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
              break;
            }
            char v7 = 1;
            uint64_t v8 = 1;
            if (v11) {
              goto LABEL_29;
            }
          }
          if ((v9 & v10) == 0) {
            uint64_t v5 = v6;
          }
LABEL_29:
          char v22 = *(NSObject **)v5;
          if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 471;
            _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating X90 input port subtype", (uint8_t *)buf, 0x12u);
          }
          buf[0] = 1701669219;
          sub_26B048(v116, 1uLL, buf);
          uint64_t inAddress = 0;
          uint64_t inAddress_8 = 0;
          uint64_t v105 = 0;
          sub_105048((uint64_t)buf, qword_669C30);
          int v94 = 0;
          uint64_t v95 = 0;
          char v93 = 0;
          sub_46B38(&v93, v116[0], (uint64_t)v116[1], ((char *)v116[1] - (char *)v116[0]) >> 2);
          int v23 = v93;
          sub_456EFC(v106, v93, v94);
          char v24 = operator new(0x228uLL);
          v24[1] = 0;
          void v24[2] = 0;
          void *v24 = off_640AB8;
          *(void *)&long long v102 = CFStringCreateWithCString(0, "Mikeybus Headset Microphone", 0x600u);
          BYTE8(v102) = 1;
          sub_21C8C(__p, "");
          sub_105158((uint64_t)(v24 + 3), &qword_669C30, (uint64_t)a1, (uint64_t)&inAddress, (uint64_t)buf, (uint64_t)&v102, (uint64_t)v106, (long long *)__p);
          uint64_t v24[3] = &off_621AD0;
          *((_WORD *)v24 + 272) = 0;
          if (SHIBYTE(v108) < 0) {
            operator delete(__p[0]);
          }
          sub_72924((uint64_t)&v102);
          *(void *)&long long v101 = v24 + 3;
          *((void *)&v101 + 1) = v24;
          sub_56E64((uint64_t)&v101, v24 + 13, (uint64_t)(v24 + 3));
          __p[0] = v106;
          sub_74004((void ***)__p);
          if (v23)
          {
            int v94 = v23;
            operator delete(v23);
          }
          sub_72924((uint64_t)&buf[8]);
          sub_72924((uint64_t)&buf[4]);
          sub_72924((uint64_t)buf);
          (*(void (**)(void *, uint64_t))(v24[3] + 104))(v24 + 3, 2004367664);
          long long v92 = v101;
          sub_436484((uint64_t)a1, (void ***)&v92);
          if (*((void *)&v92 + 1)) {
            sub_4636C(*((std::__shared_weak_count **)&v92 + 1));
          }
          strcpy((char *)buf, "dlovtpni");
          BYTE1(buf[2]) = 0;
          HIWORD(buf[2]) = 0;
          if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                            + 16))(a1, buf))
          {
            operator new();
          }
          operator new();
        }
        int v4 = (int)v97;
      }
      if (v4 != 1751412840
        || ((strcpy((char *)buf, "spatbolg"),
             BYTE1(buf[2]) = 0,
             HIWORD(buf[2]) = 0,
             uint64_t v12 = sub_99A40(v3),
             *((void *)&v14 + 1) = v13,
             *(void *)&long long v14 = v12,
             ((v14 >> 32) & 0xFF00000000) != 0)
          ? (BOOL v15 = HIDWORD(v12) == 0)
          : (BOOL v15 = 1),
            v15))
      {
        uint64_t v16 = (os_log_t *)sub_32A48(17);
        __int16 v17 = *v16;
        if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(__p, v97);
          char v18 = __p;
          if (v108 < 0) {
            char v18 = (void **)__p[0];
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 506;
          HIWORD(buf[4]) = 1024;
          buf[5] = v2;
          LOWORD(buf[6]) = 2080;
          *(void *)((char *)&buf[6] + 2) = v18;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring headset input stream (%u, %s)", (uint8_t *)buf, 0x22u);
          if (SHIBYTE(v108) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else
      {
        int v19 = (os_log_t *)sub_32A48(17);
        char v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 501;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating port for headphone reference stream", (uint8_t *)buf, 0x12u);
        }
        int v21 = operator new(0x228uLL);
        v21[1] = 0;
        void v21[2] = 0;
        void *v21 = off_640AF0;
        *(void *)int buf = CFStringCreateWithCString(0, "Mikeybus Headphones Reference", 0x600u);
        LOBYTE(buf[2]) = 1;
        sub_3D3138((uint64_t)(v21 + 3), (uint64_t)a1, (uint64_t)buf);
        sub_72924((uint64_t)buf);
        __p[0] = v21 + 3;
        __p[1] = v21;
        sub_56E64((uint64_t)__p, v21 + 13, (uint64_t)(v21 + 3));
        long long v91 = *(_OWORD *)__p;
        sub_436484((uint64_t)a1, (void ***)&v91);
        if (*((void *)&v91 + 1)) {
          sub_4636C(*((std::__shared_weak_count **)&v91 + 1));
        }
      }
      uint64_t v2 = (v2 + 1);
    }
    while (v2 < (*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                          + 88))(a1, 0));
  }
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 1))
  {
    uint64_t v89 = 0x6F7574707465726DLL;
    int v90 = 0;
    uint64_t v25 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void))(*(void *)&a1->_os_unfair_lock_opaque + 96))(a1, 1, 0);
    if (!v25)
    {
      char v77 = (os_log_t *)sub_32A48(13);
      int v78 = *v77;
      if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 516;
        _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    int v87 = 4;
    unsigned int v88 = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, unsigned int *))(*(void *)v25 + 40))(v25, &v89, 0, 0, &v87, &v88);
    if (v88 != 1818848869)
    {
      if (v88 != 1818845552)
      {
        if (v88 != 1751412840)
        {
          int v80 = (os_log_t *)sub_32A48(13);
          char v81 = *v80;
          if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
          {
            sub_2417C(__p, v88);
            int v82 = v108 >= 0 ? __p : (void **)__p[0];
            buf[0] = 136315650;
            *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 570;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v82;
            _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unknown Stream Terminal Type :%s\"", (uint8_t *)buf, 0x1Cu);
            if (SHIBYTE(v108) < 0) {
              operator delete(__p[0]);
            }
          }
          char v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v83, "Unknown Stream Terminal Type :%s");
        }
        if (!sub_4724FC((uint64_t)a1))
        {
          int v59 = (std::__shared_weak_count *)operator new(0x228uLL);
          v59->__shared_owners_ = 0;
          v59->__shared_weak_owners_ = 0;
          v59->__vftable = (std::__shared_weak_count_vtbl *)off_640B28;
          sub_1730FC((uint64_t)&v59[1], (uint64_t)a1, 1);
          *(void *)&long long v102 = v59 + 1;
          *((void *)&v102 + 1) = v59;
          sub_56E64((uint64_t)&v102, &v59[4].__shared_owners_, (uint64_t)&v59[1]);
          char v60 = (os_log_t *)sub_32A48(17);
          int v61 = *v60;
          if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 762;
            _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a wired-microphone port", (uint8_t *)buf, 0x12u);
          }
          char v62 = operator new(4uLL);
          _DWORD *v62 = 1701669219;
          __p[1] = 0;
          uint64_t v108 = 0;
          __p[0] = 0;
          sub_46B38(__p, v62, (uint64_t)(v62 + 1), 1uLL);
          int v63 = __p[0];
          sub_456EFC((uint64_t *)buf, (int *)__p[0], (int *)__p[1]);
          if (v63)
          {
            __p[1] = v63;
            operator delete(v63);
          }
          char v64 = (std::__shared_weak_count *)operator new(0x228uLL);
          v64->__shared_owners_ = 0;
          v64->__shared_weak_owners_ = 0;
          v64->__vftable = (std::__shared_weak_count_vtbl *)off_640B60;
          sub_17371C((uint64_t)&v64[1], (uint64_t)a1, (uint64_t)buf);
          *(void *)&long long v101 = v64 + 1;
          *((void *)&v101 + 1) = v64;
          sub_56E64((uint64_t)&v101, &v64[4].__shared_owners_, (uint64_t)&v64[1]);
          sub_250C08((uint64_t)&v64[1], (uint64_t)&v59[1]);
          uint64_t v99 = (uint64_t)&v64[1];
          int v100 = v64;
          atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_436484((uint64_t)a1, (void ***)&v99);
          if (v100) {
            sub_4636C(v100);
          }
          char v97 = (void **)&v59[1].__vftable;
          int v98 = v59;
          atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_436484((uint64_t)a1, &v97);
          if (v98) {
            sub_4636C(v98);
          }
          operator new();
        }
        uint64_t v26 = sub_32A48(17);
        uint64_t v27 = sub_32A48(32);
        char v28 = 0;
        uint64_t v29 = 0;
        *(void *)int buf = 0x100000002;
        uint64_t v30 = *(void *)(v26 + 8);
        while (1)
        {
          uint64_t v31 = (int)buf[v29];
          char v32 = v28;
          if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
            break;
          }
          char v28 = 1;
          uint64_t v29 = 1;
          if (v32) {
            goto LABEL_96;
          }
        }
        if ((v30 & v31) == 0) {
          uint64_t v26 = v27;
        }
LABEL_96:
        int v65 = *(NSObject **)v26;
        if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 526;
          _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating X90 output port subtype", (uint8_t *)buf, 0x12u);
        }
        v116[0] = 0;
        v116[1] = 0;
        uint64_t v117 = 0;
        sub_105048((uint64_t)buf, qword_669C00);
        uint64_t inAddress = 0;
        uint64_t inAddress_8 = 0;
        uint64_t v105 = 0;
        char v66 = (std::__shared_weak_count *)operator new(0x228uLL);
        v66->__shared_owners_ = 0;
        v66->__shared_weak_owners_ = 0;
        v66->__vftable = (std::__shared_weak_count_vtbl *)off_640AB8;
        v106[0] = (uint64_t)CFStringCreateWithCString(0, "Mikeybus Headphones", 0x600u);
        LOBYTE(v106[1]) = 1;
        sub_21C8C(__p, "");
        sub_105158((uint64_t)&v66[1], &qword_669C00, (uint64_t)a1, (uint64_t)v116, (uint64_t)buf, (uint64_t)v106, (uint64_t)&inAddress, (long long *)__p);
        v66[1].__vftable = (std::__shared_weak_count_vtbl *)&off_621AD0;
        LOWORD(v66[22].__shared_weak_owners_) = 0;
        if (SHIBYTE(v108) < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)v106);
        *(void *)&long long v102 = v66 + 1;
        *((void *)&v102 + 1) = v66;
        sub_56E64((uint64_t)&v102, &v66[4].__shared_owners_, (uint64_t)&v66[1]);
        __p[0] = &inAddress;
        sub_74004((void ***)__p);
        sub_72924((uint64_t)&buf[8]);
        sub_72924((uint64_t)&buf[4]);
        sub_72924((uint64_t)buf);
        ((void (*)(std::__shared_weak_count *, uint64_t))v66[1].__vftable[2].__get_deleter)(&v66[1], 1752709424);
        char v85 = (void **)&v66[1].__vftable;
        int v86 = v66;
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_436484((uint64_t)a1, &v85);
        if (v86) {
          sub_4636C(v86);
        }
        sub_47254C((uint64_t)a1, qword_669C00 | 0x6878393000000000);
      }
      (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                            + 128))(v116, a1);
      int v33 = operator new(0x280uLL);
      v33[1] = 0;
      CFStringRef v33[2] = 0;
      *int v33 = off_640A80;
      sub_1A3334((unsigned char *)v33 + 24, (uint64_t)a1, v116);
      *(void *)int buf = v33 + 3;
      *(void *)&AudioObjectPropertyAddress buf[2] = v33;
      sub_56E64((uint64_t)buf, v33 + 13, (uint64_t)(v33 + 3));
      *(_OWORD *)long long __p = *(_OWORD *)buf;
      sub_436484((uint64_t)a1, (void ***)__p);
      if (__p[1]) {
        sub_4636C((std::__shared_weak_count *)__p[1]);
      }
      sub_72924((uint64_t)v116);
      uint64_t v34 = sub_32A48(17);
      uint64_t v35 = sub_32A48(32);
      char v36 = 0;
      uint64_t v37 = 0;
      *(void *)int buf = 0x100000002;
      uint64_t v38 = *(void *)(v34 + 8);
      while (1)
      {
        uint64_t v39 = (int)buf[v37];
        char v40 = v36;
        if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
          break;
        }
        char v36 = 1;
        uint64_t v37 = 1;
        if (v40) {
          goto LABEL_80;
        }
      }
      if ((v38 & v39) == 0) {
        uint64_t v34 = v35;
      }
LABEL_80:
      char v56 = *(NSObject **)v34;
      if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 378;
        _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating an iAP Mikeybus LineOut port", (uint8_t *)buf, 0x12u);
      }
      LOBYTE(a1[123]._os_unfair_lock_opaque) = 1;
      int v57 = (uint64_t **)sub_23EE78();
      sub_23EF98(v57, (unint64_t)sub_473074, (unint64_t)a1);
      sub_472B48(a1, 1819176821);
      uint64_t v58 = sub_23EE78();
      sub_23F584(v58, 1819176821, (unint64_t)sub_472EF0, (unint64_t)a1);
      sub_47254C((uint64_t)a1, 0x6C696170706C6F75);
    }
    uint64_t v41 = sub_32A48(17);
    uint64_t v42 = sub_32A48(23);
    char v43 = 0;
    uint64_t v44 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v45 = *(void *)(v41 + 8);
    while (1)
    {
      uint64_t v46 = (int)buf[v44];
      char v47 = v43;
      if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
        break;
      }
      char v43 = 1;
      uint64_t v44 = 1;
      if (v47) {
        goto LABEL_64;
      }
    }
    if ((v45 & v46) == 0) {
      uint64_t v41 = v42;
    }
LABEL_64:
    uint64_t v48 = sub_32A48(32);
    char v49 = 0;
    uint64_t v50 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v51 = *(void *)(v41 + 8);
    while (1)
    {
      uint64_t v52 = (int)buf[v50];
      char v53 = v49;
      if (((v51 & v52) != 0) != ((*(void *)(v48 + 8) & v52) != 0)) {
        break;
      }
      char v49 = 1;
      uint64_t v50 = 1;
      if (v53) {
        goto LABEL_70;
      }
    }
    if ((v51 & v52) == 0) {
      uint64_t v41 = v48;
    }
LABEL_70:
    char v54 = *(NSObject **)v41;
    if (v54 && os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "Device_MikeyBus_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 557;
      _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a Mikeybus LineOut port", (uint8_t *)buf, 0x12u);
    }
    v116[0] = 0;
    v116[1] = 0;
    uint64_t v117 = 0;
    sub_105048((uint64_t)buf, 0x706C6F75u);
    uint64_t inAddress = 0;
    uint64_t inAddress_8 = 0;
    uint64_t v105 = 0;
    int v55 = operator new(0x228uLL);
    v55[1] = 0;
    v55[2] = 0;
    *int v55 = off_640AB8;
    v106[0] = (uint64_t)CFStringCreateWithCString(0, "Mikeybus LineOut", 0x600u);
    LOBYTE(v106[1]) = 1;
    sub_21C8C(__p, "");
    sub_105158((uint64_t)(v55 + 3), &qword_669BD0, (uint64_t)a1, (uint64_t)v116, (uint64_t)buf, (uint64_t)v106, (uint64_t)&inAddress, (long long *)__p);
    v55[3] = &off_621AD0;
    *((_WORD *)v55 + 272) = 0;
    if (SHIBYTE(v108) < 0) {
      operator delete(__p[0]);
    }
    sub_72924((uint64_t)v106);
    *(void *)&long long v102 = v55 + 3;
    *((void *)&v102 + 1) = v55;
    sub_56E64((uint64_t)&v102, v55 + 13, (uint64_t)(v55 + 3));
    long long v84 = v102;
    long long v102 = 0uLL;
    sub_436484((uint64_t)a1, (void ***)&v84);
    if (*((void *)&v84 + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&v84 + 1));
    }
    __p[0] = &inAddress;
    sub_74004((void ***)__p);
    sub_72924((uint64_t)&buf[8]);
    sub_72924((uint64_t)&buf[4]);
    sub_72924((uint64_t)buf);
    sub_47254C((uint64_t)a1, 1886154613);
  }
  int v67 = operator new(4uLL);
  _DWORD *v67 = 1885894516;
  *(void *)int buf = v67;
  *(void *)&AudioObjectPropertyAddress buf[2] = v67 + 1;
  *(void *)&uint8_t buf[4] = v67 + 1;
  strcpy((char *)&buf[6], "cwdv");
  LOBYTE(buf[8]) = 0;
  LODWORD(v110) = 3;
  uint64_t v113 = 0;
  char v112 = 0;
  char v111 = &v112;
  LODWORD(v114) = 44739242;
  CFTypeRef v115 = 0;
  sub_43637C((uint64_t *)__p, (uint64_t)a1, (uint64_t)buf);
  if (v115) {
    CFRelease(v115);
  }
  sub_463E0(v112);
  if (*(void *)buf)
  {
    *(void *)&AudioObjectPropertyAddress buf[2] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v108 == 1)
  {
    uint64_t v69 = *((void *)__p[1] + 2);
    int v68 = (std::__shared_weak_count *)*((void *)__p[1] + 3);
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v69 = 0;
    int v68 = 0;
  }
  int v70 = operator new(4uLL);
  _DWORD *v70 = 1885892727;
  *(void *)int buf = v70;
  *(void *)&AudioObjectPropertyAddress buf[2] = v70 + 1;
  *(void *)&uint8_t buf[4] = v70 + 1;
  strcpy((char *)&buf[6], "cwdv");
  LOBYTE(buf[8]) = 0;
  LODWORD(v110) = 3;
  uint64_t v113 = 0;
  char v112 = 0;
  char v111 = &v112;
  LODWORD(v114) = 44739242;
  CFTypeRef v115 = 0;
  sub_43637C((uint64_t *)v116, (uint64_t)a1, (uint64_t)buf);
  if (v115) {
    CFRelease(v115);
  }
  sub_463E0(v112);
  if (*(void *)buf)
  {
    *(void *)&AudioObjectPropertyAddress buf[2] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v117 != 1)
  {
    int data = 0;
    length = 0;
    if (!v68) {
      goto LABEL_130;
    }
    goto LABEL_122;
  }
  int data = v116[1]->data;
  length = (std::__shared_weak_count *)v116[1]->length;
  if (length) {
    atomic_fetch_add_explicit(&length->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v68)
  {
LABEL_122:
    char v73 = std::__shared_weak_count::lock(v68);
    if (v73)
    {
      int v74 = v73;
      if (v69)
      {
        if (length)
        {
          char v75 = std::__shared_weak_count::lock(length);
          if (v75)
          {
            int v76 = v75;
            if (data) {
              sub_250C08(v69, (uint64_t)data);
            }
            sub_4636C(v76);
          }
        }
      }
      sub_4636C(v74);
    }
  }
LABEL_130:
  if (length) {
    std::__shared_weak_count::__release_weak(length);
  }
  sub_8108((uint64_t *)v116);
  if (v68) {
    std::__shared_weak_count::__release_weak(v68);
  }
  sub_8108((uint64_t *)__p);
}

void sub_471FF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_4724FC(uint64_t a1)
{
  sub_234BEC((uint64_t)v3, a1, COERCE_DOUBLE(1735159650));
  int v1 = v4;
  if (v4) {
    sub_49A90(v3);
  }
  return v1 == 0;
}

void sub_47254C(uint64_t a1, uint64_t a2)
{
  int v2 = HIDWORD(a2);
  *(void *)&v42.int mSelector = 0x6F757470766F6C64;
  v42.AudioObjectPropertyElement mElement = 0;
  sub_50848((std::mutex *)a1);
  if (AudioObjectHasProperty(*(_DWORD *)(a1 + 268), &v42))
  {
    uint64_t v4 = sub_32A48(17);
    uint64_t v5 = sub_32A48(32);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)&v42.int mSelector = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *((int *)&v42.mSelector + v7);
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = sub_32A48(38);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)&v42.int mSelector = 0x100000002;
    uint64_t v21 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v22 = *((int *)&v42.mSelector + v20);
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23) {
        goto LABEL_19;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v4 = v18;
    }
LABEL_19:
    char v24 = *(NSObject **)v4;
    if (v24)
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        v42.int mSelector = 136315394;
        *(void *)&v42.AudioObjectPropertyScope mScope = "Device_MikeyBus_Aspen.cpp";
        __int16 v43 = 1024;
        int v44 = 395;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Output Volume Control", (uint8_t *)&v42, 0x12u);
      }
    }
    operator new();
  }
  uint64_t v11 = sub_32A48(17);
  uint64_t v12 = sub_32A48(32);
  char v13 = 0;
  uint64_t v14 = 0;
  if (v2 == 1818845552)
  {
    *(void *)&v42.int mSelector = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = *((int *)&v42.mSelector + v14);
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_29;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_29:
    uint64_t v28 = sub_32A48(38);
    char v29 = 0;
    uint64_t v30 = 0;
    *(void *)&v42.int mSelector = 0x100000002;
    uint64_t v31 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v32 = *((int *)&v42.mSelector + v30);
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1;
      if (v33) {
        goto LABEL_41;
      }
    }
    if ((v31 & v32) == 0) {
      uint64_t v11 = v28;
    }
LABEL_41:
    char v40 = *(NSObject **)v11;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      v42.int mSelector = 136315394;
      *(void *)&v42.AudioObjectPropertyScope mScope = "Device_MikeyBus_Aspen.cpp";
      __int16 v43 = 1024;
      int v44 = 416;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Output Volume Control for IAP device", (uint8_t *)&v42, 0x12u);
    }
    operator new();
  }
  *(void *)&v42.int mSelector = 0x100000002;
  uint64_t v25 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v26 = *((int *)&v42.mSelector + v14);
    char v27 = v13;
    if (((v25 & v26) != 0) != ((*(void *)(v12 + 8) & v26) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1;
    if (v27) {
      goto LABEL_35;
    }
  }
  if ((v25 & v26) == 0) {
    uint64_t v11 = v12;
  }
LABEL_35:
  uint64_t v34 = sub_32A48(38);
  char v35 = 0;
  uint64_t v36 = 0;
  *(void *)&v42.int mSelector = 0x100000002;
  uint64_t v37 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v38 = *((int *)&v42.mSelector + v36);
    char v39 = v35;
    if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
      break;
    }
    char v35 = 1;
    uint64_t v36 = 1;
    if (v39) {
      goto LABEL_47;
    }
  }
  if ((v37 & v38) == 0) {
    uint64_t v11 = v34;
  }
LABEL_47:
  uint64_t v41 = *(NSObject **)v11;
  if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
  {
    v42.int mSelector = 136315394;
    *(void *)&v42.AudioObjectPropertyScope mScope = "Device_MikeyBus_Aspen.cpp";
    __int16 v43 = 1024;
    int v44 = 427;
    _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating NULL Output Volume Control", (uint8_t *)&v42, 0x12u);
  }
  operator new();
}

void sub_472AD0()
{
}

void sub_472B48(os_unfair_lock_s *a1, int a2)
{
  if (a2 == 1819176821)
  {
    uint64_t v3 = operator new(4uLL);
    *(void *)long long __p = v3;
    *uint64_t v3 = 1886154613;
    *(void *)&__p[8] = v3 + 1;
    *(void *)&__p[16] = v3 + 1;
    strcpy(&__p[24], "cwdv");
    BYTE2(v24) = 0;
    LODWORD(v26) = 3;
    v28[0] = 0;
    v28[1] = 0;
    char v27 = v28;
    int v29 = 44739242;
    CFTypeRef cf = 0;
    sub_43637C((uint64_t *)v18, (uint64_t)a1, (uint64_t)__p);
    sub_FB288(&v20, v18);
    sub_8108((uint64_t *)v18);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v28[0]);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (v22 != 1)
    {
      uint64_t v8 = (os_log_t *)sub_32A48(13);
      uint64_t v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = v22;
        sub_2417C(v18, 0x706C6F75u);
        int v11 = v19;
        uint64_t v12 = (void **)v18[0];
        sub_4F64((uint64_t)v16, a1 + 2);
        char v13 = v18;
        if (v11 < 0) {
          char v13 = v12;
        }
        if (v17 >= 0) {
          uint64_t v14 = v16;
        }
        else {
          uint64_t v14 = (void **)v16[0];
        }
        *(_DWORD *)long long __p = 136316162;
        *(void *)&__p[4] = "Device_MikeyBus_Aspen.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 649;
        *(_WORD *)&unsigned char __p[18] = 2048;
        *(void *)&__p[20] = v10;
        *(_WORD *)&__p[28] = 2080;
        char v24 = v13;
        __int16 v25 = 2080;
        uint64_t v26 = v14;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Found %lu ports of type '%s' in device %s (looking for exactly 1)\"", __p, 0x30u);
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found %lu ports of type '%s' in device %s (looking for exactly 1)");
    }
    uint64_t v5 = *(void *)(v21 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(v21 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v5);
    sub_18EB10(v5);
    if (v6 != (*(unsigned int (**)(uint64_t))(*(void *)v5 + 152))(v5))
    {
      uint64_t v7 = (_DWORD *)sub_10FBF0();
      *(void *)long long __p = v5;
      *(void *)&__p[8] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1106D8(v7, (uint64_t *)__p);
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v4) {
      sub_4636C(v4);
    }
    sub_B8E4(&v20);
  }
}

void sub_472E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_B8E4(&a19);
  _Unwind_Resume(a1);
}

void *sub_472EF0(void *result, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "Device_MikeyBus_Aspen.cpp";
      __int16 v8 = 1024;
      int v9 = 681;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (result == 1819176821)
  {
    int v2 = (void *)(a2 + 496);
    uint64_t result = (void *)sub_1A1BE4((void *)(a2 + 496), (uint64_t)&qword_669C80);
    if (result)
    {
      return sub_1A1D20(v2, (unsigned int *)&qword_669C80);
    }
  }
  return result;
}

void sub_473058(_Unwind_Exception *exception_object)
{
}

void sub_473074(int a1, os_unfair_lock_s *a2)
{
  if (!a2)
  {
    int v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "Device_MikeyBus_Aspen.cpp";
      __int16 v7 = 1024;
      int v8 = 672;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_472B48(a2, a1);
}

void sub_47318C(_Unwind_Exception *exception_object)
{
}

void sub_4731A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 492))
  {
    int v2 = (void *)sub_23EE78();
    sub_23F948(v2, 1819176821, (unint64_t)sub_472EF0);
    uint64_t v3 = (uint64_t **)sub_23EE78();
    sub_23F288(v3, (unint64_t)sub_473074);
  }
  uint64_t v4 = *(uint64_t **)(a1 + 640);
  if (v4) {
    sub_257BD0(v4);
  }
  sub_20DCF4(a1);

  sub_430D98(a1);
}

BOOL sub_473230(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_669C60 && a2->mElement == dword_669C68
    || *(void *)&a2->mSelector == qword_669C70 && a2->mElement == dword_669C78
    || *(void *)&a2->mSelector == qword_669C80 && a2->mElement == dword_669C88)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    char v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    uint64_t v12 = a3;
    sub_1A4260((void *)(a1 + 496), (unsigned int *)&v14, (uint64_t)&v10);
    return 1;
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
}

BOOL sub_473378(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_669C60 && a2->mElement == dword_669C68
    || *(void *)&a2->mSelector == qword_669C70 && a2->mElement == dword_669C78
    || *(void *)&a2->mSelector == qword_669C80 && a2->mElement == dword_669C88)
  {
    uint64_t v9 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v5 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v6 = a2->mElement;
    __int16 v7 = a3;
    uint64_t v8 = a4;
    sub_1A4AA0((void *)(a1 + 496), (unsigned int *)&v9, (uint64_t)&v5);
    return 1;
  }
  else
  {
    return sub_431F5C(a1, a2, a3, a4);
  }
}

void sub_473494(void *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    char v17 = (os_log_t *)sub_32A48(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      char v19 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v38 = "Device_MikeyBus_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 293;
      __int16 v41 = 2080;
      AudioObjectPropertyAddress v42 = (const char *)v19;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      char v23 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      uint64_t v38 = "Device_MikeyBus_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 294;
      __int16 v41 = 2080;
      AudioObjectPropertyAddress v42 = (const char *)v23;
      __int16 v43 = 1024;
      LODWORD(v44[0]) = a3;
      WORD2(v44[0]) = 2048;
      *(void *)((char *)v44 + 6) = a4;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    char v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v24 = &off_6414D8;
    void v24[2] = 561211770;
  }
  if (!a6)
  {
    __int16 v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      char v27 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      uint64_t v38 = "Device_MikeyBus_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 295;
      __int16 v41 = 2080;
      AudioObjectPropertyAddress v42 = "inData";
      __int16 v43 = 2080;
      v44[0] = v27;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v28 = &off_6414D8;
    void v28[2] = 561211770;
  }
  if (((*(uint64_t (**)(void *, const AudioObjectPropertyAddress *))(*a1 + 24))(a1, a2) & 1) == 0)
  {
    int v29 = (os_log_t *)sub_32A48(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v33);
      uint64_t v31 = v36 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v38 = "Device_MikeyBus_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 296;
      __int16 v41 = 2080;
      AudioObjectPropertyAddress v42 = (const char *)v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v32 = &off_6414D8;
    v32[2] = 1852797029;
  }
  if (a2->mSelector != 1836414053)
  {
    if (a2->mSelector == 1987013732 && a2->mElement == 1)
    {
      uint64_t v12 = sub_23EE78();
      if (sub_23FC74(v12))
      {
        float v13 = (float)(*(float *)a6 + 100.0) / 100.0;
        uint64_t v14 = sub_23EE78();
        sub_240048(v14, v13);
        if (sub_1A1BE4(a1 + 62, (uint64_t)&qword_669C60)) {
          sub_1A1D20(a1 + 62, (unsigned int *)&qword_669C60);
        }
        if (sub_1A1BE4(a1 + 62, (uint64_t)&qword_669C70))
        {
          sub_1A1D20(a1 + 62, (unsigned int *)&qword_669C70);
        }
      }
      return;
    }
    goto LABEL_20;
  }
  if (a2->mElement != 1 || a2->mScope != 1869968496)
  {
LABEL_20:
    sub_4321A0((uint64_t)a1, a2, a3, a4, a5, a6);
    return;
  }
  uint64_t v15 = sub_23EE78();
  BOOL v16 = *a6 != 0;

  sub_24063C(v15, v16);
}

void sub_473B88(uint64_t a1, uint64_t *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v39);
      uint64_t v21 = v42 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 217;
      __int16 v46 = 2080;
      char v47 = (const char *)v21;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v42 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v23 = (os_log_t *)sub_32A48(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v39);
      __int16 v25 = v42 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 218;
      __int16 v46 = 2080;
      char v47 = (const char *)v25;
      __int16 v48 = 1024;
      LODWORD(v49[0]) = a3;
      WORD2(v49[0]) = 2048;
      *(void *)((char *)v49 + 6) = a4;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v42 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v26 = &off_6414D8;
    void v26[2] = 561211770;
  }
  if (!a6)
  {
    char v27 = (os_log_t *)sub_32A48(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *a2;
      int v40 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v39);
      int v29 = v42 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 219;
      __int16 v46 = 2080;
      char v47 = "outData";
      __int16 v48 = 2080;
      v49[0] = v29;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v42 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    uint64_t v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v30 = &off_6414D8;
    v30[2] = 561211770;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 > 1986229103)
  {
    if (v12 != 1986229104)
    {
      if (v12 == 1986290211)
      {
        if (*((_DWORD *)a2 + 2) == 1)
        {
          *(_OWORD *)a6 = xmmword_4E7920;
          return;
        }
      }
      else if (v12 == 1987013732 && *((_DWORD *)a2 + 2) == 1)
      {
        float v13 = (float *)sub_23EE78();
        float v14 = (float)(sub_23FDA8(v13) * 100.0) + -100.0;
LABEL_24:
        *a6 = v14;
        return;
      }
      goto LABEL_19;
    }
    if (*((_DWORD *)a2 + 2) != 1) {
      goto LABEL_19;
    }
    uint64_t v17 = sub_23EE78();
    int v16 = sub_23FC74(v17);
LABEL_16:
    *(_DWORD *)a6 = v16;
    return;
  }
  if (v12 == 1835103844)
  {
    UInt32 v18 = *a5;
    if (v18 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
    {
      uint64_t v31 = (os_log_t *)sub_32A48(13);
      uint64_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = *a2;
        int v40 = *((_DWORD *)a2 + 2);
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v39);
        int v33 = v42;
        uint64_t v34 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v35 = *a5;
        int v36 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        p_p = &__p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
        if (v33 < 0) {
          p_p = v34;
        }
        __int16 v44 = 1024;
        int v45 = 226;
        __int16 v46 = 2080;
        char v47 = (const char *)p_p;
        __int16 v48 = 1024;
        LODWORD(v49[0]) = v35;
        WORD2(v49[0]) = 1024;
        *(_DWORD *)((char *)v49 + 6) = v36;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v42 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }
      uint64_t v38 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v38 = &off_6414D8;
      v38[2] = 561211770;
    }
    __p.int mSelector = 1986290211;
    *(void *)&__p.AudioObjectPropertyScope mScope = *(uint64_t *)((char *)a2 + 4);
    LODWORD(v39) = 16;
    sub_432AE8(a1, &__p, 0, 0, (UInt32 *)&v39, (float *)buf);
    float v14 = *(double *)buf;
    goto LABEL_24;
  }
  if (v12 == 1836414053 && *((_DWORD *)a2 + 2) == 1)
  {
    uint64_t v15 = (unsigned __int8 *)sub_23EE78();
    int v16 = sub_2404BC(v15);
    goto LABEL_16;
  }
LABEL_19:

  sub_432AE8(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
}

void sub_474298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4742BC(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    AudioObjectPropertyElement v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      int v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      char v23 = "Device_MikeyBus_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 179;
      __int16 v26 = 2080;
      char v27 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    float v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
      int v16 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      char v23 = "Device_MikeyBus_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 180;
      __int16 v26 = 2080;
      char v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      uint64_t v31 = a4;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v17 = &off_6414D8;
    v17[2] = 561211770;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t result = 4;
  if ((int)a2->mSelector <= 1986229103)
  {
    if (mSelector == 1835103844 || mSelector == 1836414053) {
      return result;
    }
  }
  else
  {
    if (mSelector == 1986229104 || mSelector == 1987013732) {
      return result;
    }
    if (mSelector == 1986290211) {
      return 16;
    }
  }

  return sub_433254(a1, a2, a3, a4);
}

uint64_t sub_474648(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1986229103)
  {
    if (mSelector != 1835103844)
    {
      int v5 = 1836414053;
      goto LABEL_12;
    }
    return 0;
  }
  if (mSelector == 1986229104 || mSelector == 1986290211)
  {
    if (a2->mElement != 1) {
      return sub_43356C(a1, a2);
    }
    return 0;
  }
  int v5 = 1987013732;
LABEL_12:
  if (mSelector == v5 && a2->mElement == 1) {
    return 1;
  }
  return sub_43356C(a1, a2);
}

BOOL sub_4746D4(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1986229103)
  {
    if (mSelector != 1986229104 && mSelector != 1987013732 && mSelector != 1986290211) {
      goto LABEL_14;
    }
LABEL_12:
    if (a2->mElement == 1) {
      return 1;
    }
    goto LABEL_14;
  }
  if (mSelector == 1835103844) {
    return 1;
  }
  if (mSelector == 1836414053) {
    goto LABEL_12;
  }
LABEL_14:
  sub_50848((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

void sub_474788(void *a1)
{
  sub_4747C0(a1);

  operator delete();
}

uint64_t sub_4747C0(void *a1)
{
  *a1 = off_640800;
  uint64_t v2 = a1[80];
  a1[80] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1A97C8((uint64_t)(a1 + 62));

  return sub_43456C((uint64_t)a1);
}

uint64_t sub_47484C(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  uint64_t v5 = sub_433710(a1, a2, a3, a3, 0);
  *(void *)uint64_t v5 = off_640800;
  *(unsigned char *)(v5 + 492) = 0;
  sub_1A9860(v5 + 496);
  *(void *)(a1 + 640) = 0;
  uint64_t v6 = sub_32A48(17);
  uint64_t v7 = sub_32A48(32);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_7;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  float v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    sub_21B7C(__p, a3);
    if (v17 >= 0) {
      float v14 = __p;
    }
    else {
      float v14 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_MikeyBus_Aspen.cpp";
    __int16 v19 = 1024;
    int v20 = 95;
    __int16 v21 = 2080;
    uint64_t v22 = v14;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Constructing MikeyBus device with UID \"%s\".", buf, 0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_436AD8(a1, 1, 0x6F757470u, 0);
  return a1;
}

void sub_474A18(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 640);
  *(void *)(v1 + 640) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1A97C8(v2);
  sub_43456C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_474A74(uint64_t a1, int a2)
{
  uint64_t v8 = 0x676C6F6263646573;
  int v9 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v8);
  if (result)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    __int16 v7 = 257;
    sub_1D4AF4((uint64_t)&Mutable, @"kind", a2);
    sub_1D4AF4((uint64_t)&Mutable, @"UsageCaseSampleRate", 0);
    CFMutableDictionaryRef v5 = Mutable;
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, CFMutableDictionaryRef *))(*(void *)a1 + 48))(a1, &v8, 0, 0, 8, &v5);
    return sub_80594((uint64_t)&Mutable);
  }
  return result;
}

void sub_474B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_80594((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_474B90(uint64_t a1)
{
  sub_54694();
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 40, 8);
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)uint64_t v2 = &off_641428;
  *(void *)(v2 + 8) = 0;

  return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v2);
}

uint64_t sub_474C2C(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                           + 24))(caulk::alloc::realtime_safe_resource, a1, 40, 8);
}

void sub_474CA0(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  operator delete();
}

id sub_474CDC(uint64_t a1)
{
  return sub_5676C(*(uint64_t **)(a1 + 8));
}

void sub_474CE4(uint64_t a1)
{
  sub_474D1C(a1);

  operator delete();
}

uint64_t sub_474D1C(uint64_t a1)
{
  sub_567A8(*(void ****)(a1 + 8));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_4636C(v2);
  }
  return a1;
}

uint64_t sub_474D5C(uint64_t a1)
{
  return sub_474D1C(a1 + 24);
}

void sub_474D64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_641450;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_474DB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_641450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_474DD8(unsigned int a1)
{
  if (a1 == 1768845428) {
    return 0;
  }
  if (a1 != 1869968496)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a1);
      if (v8 >= 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v10 = "ParameterTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 30;
      __int16 v13 = 2080;
      float v14 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Scope %s is not an explicit input/output scope\"", buf, 0x1Cu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 1852797029;
  }
  return 1;
}

void *sub_474F54()
{
  qword_648CA0 = 0;
  qword_648CA8 = 0;
  qword_648CB0 = 0;
  qword_648CA0 = (uint64_t)operator new(0x680uLL);
  uint64_t v0 = qword_648CA0 + 1664;
  qword_648CB0 = qword_648CA0 + 1664;
  uint64_t result = memcpy((void *)qword_648CA0, &unk_61DE50, 0x680uLL);
  qword_648CA8 = v0;
  return result;
}

double sub_474FA8()
{
  qword_648CB8 = 0;
  unk_648CC0 = 0;
  qword_648CC8 = 0;
  uint64_t v0 = operator new(0xA0uLL);
  qword_648CC8 = (uint64_t)(v0 + 10);
  v0[6] = off_61E880;
  v0[7] = *(_OWORD *)&off_61E890;
  v0[8] = off_61E8A0;
  v0[9] = *(_OWORD *)&off_61E8B0;
  v0[2] = off_61E840;
  v0[3] = *(_OWORD *)&off_61E850;
  v0[4] = off_61E860;
  v0[5] = *(_OWORD *)&off_61E870;
  double result = COERCE_DOUBLE("P");
  *uint64_t v0 = off_61E820;
  v0[1] = *(_OWORD *)&off_61E830;
  qword_648CB8 = (uint64_t)v0;
  unk_648CC0 = v0 + 10;
  return result;
}

uint64_t **sub_475018()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_648CD0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_636F8((uint64_t **)&unk_648CE8, (unsigned int *)v1, 8);
  qword_648D10 = 0;
  qword_648D08 = 0;
  qword_648D00 = (uint64_t)&qword_648D08;
  return result;
}

uint64_t sub_4750E8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_648D18, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  return sub_6367C((uint64_t)&unk_648D30, (unsigned int *)v1, 1);
}

void *sub_47519C()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)CFMutableDictionaryRef v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_648D48, (unsigned int *)v5, 8);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986295651;
  sub_6367C((uint64_t)&unk_648D60, (unsigned int *)v5, 1);
  qword_648D88 = 0;
  qword_648D80 = 0;
  qword_648D78 = (uint64_t)&qword_648D80;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_648D90 = 3;
  sub_6367C((uint64_t)&unk_648D98, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_648DB0 = 3;
  sub_6367C((uint64_t)&unk_648DB8, (unsigned int *)v5, 9);
  *(_OWORD *)CFMutableDictionaryRef v5 = xmmword_4E7850;
  dword_648DD0 = 3;
  sub_6367C((uint64_t)&unk_648DD8, (unsigned int *)v5, 4);
  *(_OWORD *)CFMutableDictionaryRef v5 = xmmword_4E7860;
  dword_648DF0 = 3;
  sub_6367C((uint64_t)&unk_648DF8, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_648E10 = 3;
  sub_6367C((uint64_t)&unk_648E18, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_648E30 = 3;
  sub_6367C((uint64_t)&unk_648E38, (unsigned int *)v5, 7);
  *(_OWORD *)CFMutableDictionaryRef v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_648E50 = 2;
  sub_6367C((uint64_t)&unk_648E58, (unsigned int *)v5, 8);
  *(_OWORD *)CFMutableDictionaryRef v5 = xmmword_4E7870;
  dword_648E70 = 2;
  sub_6367C((uint64_t)&unk_648E78, (unsigned int *)v5, 4);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1918990112;
  dword_648E90 = 2;
  sub_6367C((uint64_t)&unk_648E98, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1836281204;
  dword_648EB0 = 2;
  sub_6367C((uint64_t)&unk_648EB8, (unsigned int *)v5, 1);
  *(void *)CFMutableDictionaryRef v5 = 0x7670766976706763;
  dword_648ED0 = 2;
  sub_6367C((uint64_t)&unk_648ED8, (unsigned int *)v5, 2);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1987080813;
  dword_648EF0 = 2;
  sub_6367C((uint64_t)&unk_648EF8, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1987208039;
  dword_648F10 = 2;
  sub_6367C((uint64_t)&unk_648F18, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1919776355;
  dword_648F30 = 2;
  sub_6367C((uint64_t)&unk_648F38, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_648F50 = 2;
  sub_6367C((uint64_t)&unk_648F58, (unsigned int *)v5, 5);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1768778864;
  dword_648F70 = 3;
  sub_6367C((uint64_t)&unk_648F78, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1768776806;
  dword_648F90 = 2;
  sub_6367C((uint64_t)&unk_648F98, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_648FB0 = 2;
  sub_6367C((uint64_t)&unk_648FB8, (unsigned int *)v5, 3);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1751212899;
  dword_648FD0 = 2;
  sub_6367C((uint64_t)&unk_648FD8, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1751212899;
  dword_648FF0 = 3;
  sub_6367C((uint64_t)&unk_648FF8, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986556788;
  dword_649010 = 2;
  sub_6367C((uint64_t)&unk_649018, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986556788;
  dword_649030 = 3;
  sub_6367C((uint64_t)&unk_649038, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_649050 = 2;
  sub_6367C((uint64_t)&unk_649058, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_649070 = 3;
  sub_6367C((uint64_t)&unk_649078, (unsigned int *)v5, 5);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986098036;
  dword_649090 = 2;
  sub_6367C((uint64_t)&unk_649098, (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986098036;
  dword_6490B0 = 3;
  sub_6367C((uint64_t)&unk_6490B8, (unsigned int *)v5, 1);
  *(void *)CFMutableDictionaryRef v5 = 0x6563692065637620;
  dword_6490D0 = 2;
  sub_6367C((uint64_t)&unk_6490D8, (unsigned int *)v5, 2);
  *(void *)CFMutableDictionaryRef v5 = 0x6563692065637620;
  dword_6490F0 = 3;
  sub_6367C((uint64_t)&unk_6490F8, (unsigned int *)v5, 2);
  *(_DWORD *)CFMutableDictionaryRef v5 = 0;
  dword_649110 = 2;
  sub_6AEC0(qword_649118, (int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 0;
  dword_649130 = 3;
  sub_6AEC0(qword_649138, (int *)v5, 1);
  *(void *)CFMutableDictionaryRef v5 = off_61EC50;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_649150, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_61EC98;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_649198, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  uint64_t v0 = operator new(0x10uLL);
  *uint64_t v0 = &unk_649150;
  v0[1] = &unk_649198;
  qword_6491E0 = (uint64_t)off_63E0B0;
  qword_6491F0 = 0;
  unk_6491F8 = 0;
  qword_6491E8 = 0;
  sub_6B058(&qword_6491E8, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)CFMutableDictionaryRef v5 = off_61ECE0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_649200, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_61ED28;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_649248, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_61ED70;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_649290, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_61EDB8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_6492D8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_61EE00;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_649320, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  double result = sub_6AFD4(v5);
  qword_649368 = (uint64_t)off_63E0E0;
  dword_649370 = 6;
  qword_649378 = (uint64_t)off_63E110;
  unk_649380 = &qword_649368;
  return result;
}

void sub_475A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_475B0C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_649388, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_6493A0, (unsigned int *)v1, 1);
  qword_6493C8 = 0;
  qword_6493C0 = 0;
  qword_6493B8 = (uint64_t)&qword_6493C0;
  return result;
}

uint64_t **sub_475BDC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6493D0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_6493E8, (unsigned int *)v1, 8);
  qword_649410 = 0;
  qword_649408 = 0;
  qword_649400 = (uint64_t)&qword_649408;
  return result;
}

uint64_t **sub_475CAC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6498B0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_6498C8, (unsigned int *)v1, 8);
  qword_6498F0 = 0;
  qword_6498E8 = 0;
  qword_6498E0 = (uint64_t)&qword_6498E8;
  return result;
}

uint64_t **sub_475D7C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_6498F8, (unsigned int *)v1, 8);
}

uint64_t sub_475E10()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_649A38, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_649A50, (unsigned int *)v1, 8);
  qword_649A70 = 0;
  qword_649A78 = 0;
  qword_649A68 = (uint64_t)&qword_649A70;
  qword_649A80 = 0x7063776970616374;
  dword_649A88 = 0;
  byte_649A8C = 0;
  if (qword_64BB40 != -1) {
    dispatch_once(&qword_64BB40, &stru_623678);
  }
  if (byte_64BB38)
  {
    *(void *)&v1[0] = 0x767A7A7A76646566;
    uint64_t result = sub_6367C((uint64_t)&unk_649A90, (unsigned int *)v1, 2);
  }
  else
  {
    LODWORD(v1[0]) = 1987738234;
    uint64_t result = sub_6367C((uint64_t)&unk_649A90, (unsigned int *)v1, 1);
  }
  word_649AA8 = word_649AA8 & 0xF800 | 0x434;
  return result;
}

uint64_t **sub_475F8C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_649AB0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_649AC8, (unsigned int *)v1, 8);
  qword_649AF0 = 0;
  qword_649AE8 = 0;
  qword_649AE0 = (uint64_t)&qword_649AE8;
  return result;
}

void sub_47605C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_649AF8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_649B10, (unsigned int *)v1, 8);
  qword_649B38 = 0;
  qword_649B30 = 0;
  qword_649B28 = (uint64_t)&qword_649B30;
}

uint64_t **sub_476144()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_649BA8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_649BC0, (unsigned int *)v1, 8);
  qword_649BE8 = 0;
  qword_649BE0 = 0;
  qword_649BD8 = (uint64_t)&qword_649BE0;
  return result;
}

uint64_t **sub_476214()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A088, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64A0A0, (unsigned int *)v1, 8);
  qword_64A0C8 = 0;
  qword_64A0C0 = 0;
  qword_64A0B8 = (uint64_t)&qword_64A0C0;
  return result;
}

uint64_t sub_4762E4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A0F0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64A108, (unsigned int *)v1, 1);
  qword_64A130 = 0;
  qword_64A128 = 0;
  qword_64A120 = (uint64_t)&qword_64A128;
  return result;
}

uint64_t sub_4763B4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A138, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64A150, (unsigned int *)v1, 1);
  qword_64A178 = 0;
  qword_64A170 = 0;
  qword_64A168 = (uint64_t)&qword_64A170;
  return result;
}

void sub_476484()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A180, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A198, (unsigned int *)v1, 1);
  qword_64A1C0 = 0;
  qword_64A1B8 = 0;
  qword_64A1B0 = (uint64_t)&qword_64A1B8;
}

uint64_t **sub_47656C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A1E8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64A200, (unsigned int *)v1, 8);
}

void *sub_476620()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A240, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A258, (unsigned int *)v2, 8);
  qword_64A280 = 0;
  qword_64A278 = 0;
  qword_64A270 = (uint64_t)&qword_64A278;
  if (MGGetSInt32Answer() == 6) {
    int v0 = 1;
  }
  else {
    int v0 = 3;
  }
  dword_64A288 = v0;
  sub_16FEBC((uint64_t)&unk_64A290, 0, -96.0, 0.0);
  return sub_21C8C(&qword_64A2C0, "stereo_input_orientation");
}

uint64_t **sub_476744()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64A2D8, (unsigned int *)v1, 8);
}

uint64_t *sub_4767D8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A300, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A318, (unsigned int *)v1, 1);
  qword_64A340 = 0;
  qword_64A338 = 0;
  qword_64A330 = (uint64_t)&qword_64A338;
  qmemcpy(&qword_64A348, "oiupiwcpnupe", 12);
  byte_64A354 = 1;
  sub_46A4C(qword_64A358, (uint64_t)&unk_64A318);
  word_64A370 = word_64A370 & 0xF800 | 0x61E;
  qmemcpy(&qword_64A378, "iiupiwcpnupe", 12);
  byte_64A384 = 1;
  uint64_t result = sub_46A4C((uint64_t *)&algn_64A385[3], (uint64_t)&unk_64A318);
  word_64A3A0 = word_64A3A0 & 0xF800 | 0x617;
  return result;
}

uint64_t **sub_476948()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A3A8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64A3C0, (unsigned int *)v1, 8);
  qword_64A3E8 = 0;
  qword_64A3E0 = 0;
  qword_64A3D8 = (uint64_t)&qword_64A3E0;
  return result;
}

uint64_t sub_476A18()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A3F0, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A408, (unsigned int *)v2, 8);
  qword_64A430 = 0;
  qword_64A428 = 0;
  qword_64A420 = (uint64_t)&qword_64A428;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64A438 = v1;
  return result;
}

uint64_t sub_476B0C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A500, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64A518, (unsigned int *)v1, 1);
  qword_64A540 = 0;
  qword_64A538 = 0;
  qword_64A530 = (uint64_t)&qword_64A538;
  return result;
}

uint64_t sub_476BDC()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A548, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A560, (unsigned int *)v2, 8);
  qword_64A588 = 0;
  qword_64A580 = 0;
  qword_64A578 = (uint64_t)&qword_64A580;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64A590 = v1;
  return result;
}

uint64_t sub_476CD0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A598, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64A5B0, (unsigned int *)v1, 1);
  qword_64A5D8 = 0;
  qword_64A5D0 = 0;
  qword_64A5C8 = (uint64_t)&qword_64A5D0;
  return result;
}

uint64_t *sub_476DA0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A5E0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A5F8, (unsigned int *)v1, 1);
  qword_64A620 = 0;
  qword_64A618 = 0;
  qword_64A610 = (uint64_t)&qword_64A618;
  qmemcpy(&qword_64A628, "obtpiwcpnupe", 12);
  byte_64A634 = 1;
  sub_46A4C(qword_64A638, (uint64_t)&unk_64A5F8);
  word_64A650 = word_64A650 & 0xF800 | 0x616;
  qmemcpy(&qword_64A658, "ibtpiwcpnupe", 12);
  byte_64A664 = 1;
  sub_46A4C((uint64_t *)&algn_64A665[3], (uint64_t)&unk_64A5F8);
  word_64A680 = word_64A680 & 0xF800 | 0x617;
  qmemcpy(&qword_64A688, "tbtpiwcpnupe", 12);
  byte_64A694 = 1;
  uint64_t result = sub_46A4C(qword_64A698, (uint64_t)&unk_64A5F8);
  word_64A6B0 = word_64A6B0 & 0xF800 | 0x607;
  return result;
}

uint64_t sub_476F5C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A6B8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A6D0, (unsigned int *)v1, 1);
  qword_64A6F0 = 0;
  qword_64A6F8 = 0;
  qword_64A6E8 = (uint64_t)&qword_64A6F0;
  qword_64A700 = 0x7063776970616976;
  dword_64A708 = 0;
  byte_64A70C = 0;
  if (qword_64BB40 != -1) {
    dispatch_once(&qword_64BB40, &stru_623678);
  }
  if (byte_64BB38)
  {
    *(void *)&v1[0] = 0x767A7A7A76646566;
    uint64_t result = sub_6367C((uint64_t)&unk_64A710, (unsigned int *)v1, 2);
  }
  else
  {
    LODWORD(v1[0]) = 1987738234;
    uint64_t result = sub_6367C((uint64_t)&unk_64A710, (unsigned int *)v1, 1);
  }
  word_64A728 = word_64A728 & 0xF800 | 0x435;
  return result;
}

uint64_t **sub_4770D8()
{
  *(_DWORD *)int v1 = 1986295651;
  sub_6367C((uint64_t)&unk_64A730, (unsigned int *)v1, 1);
  *(_OWORD *)&v1[128] = off_641340;
  *(_OWORD *)&v1[144] = *(_OWORD *)"lovc";
  *(_OWORD *)&v1[160] = xmmword_641360;
  *(_OWORD *)&v1[176] = *(_OWORD *)&off_641370;
  *(_OWORD *)&v1[64] = xmmword_641300;
  *(_OWORD *)&v1[80] = *(_OWORD *)&off_641310;
  *(_OWORD *)&v1[96] = *(_OWORD *)"lovl";
  *(_OWORD *)&v1[112] = unk_641330;
  *(_OWORD *)int v1 = *(_OWORD *)"ulov";
  *(_OWORD *)&v1[16] = unk_6412D0;
  *(_OWORD *)&unsigned char v1[32] = off_6412E0;
  *(_OWORD *)&v1[48] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A748, (unsigned int *)v1, 8);
  xmmword_64A760 = 0u;
  *(_OWORD *)algn_64A770 = 0u;
  dword_64A780 = 1065353216;
  qword_64A788 = (uint64_t)&qword_64A788;
  unk_64A790 = &qword_64A788;
  qword_64A798 = 0;
  memcpy(v1, "2meb", sizeof(v1));
  sub_D6FE8(&qword_64A7A0, (unsigned int *)v1, 23);
  *(_OWORD *)&v1[96] = xmmword_4E8064;
  *(_OWORD *)&v1[112] = unk_4E8074;
  *(_OWORD *)&v1[128] = xmmword_4E8084;
  *(_OWORD *)&unsigned char v1[32] = xmmword_4E8024;
  *(_OWORD *)&v1[48] = unk_4E8034;
  *(_OWORD *)&v1[64] = xmmword_4E8044;
  *(_OWORD *)&v1[80] = unk_4E8054;
  *(_OWORD *)int v1 = xmmword_4E8004;
  *(_OWORD *)&v1[16] = unk_4E8014;
  return sub_D6FE8(&qword_64A7B8, (unsigned int *)v1, 12);
}

uint64_t sub_47722C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A7D0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64A7E8, (unsigned int *)v1, 1);
  qword_64A810 = 0;
  qword_64A808 = 0;
  qword_64A800 = (uint64_t)&qword_64A808;
  return result;
}

double sub_4772FC()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A818, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A830, (unsigned int *)v2, 8);
  qword_64A858 = 0;
  qword_64A850 = 0;
  qword_64A848 = (uint64_t)&qword_64A850;
  qword_64A868 = 0;
  unk_64A870 = 0;
  qword_64A860 = 0;
  int v0 = (char *)operator new(0x30uLL);
  qword_64A868 = (uint64_t)(v0 + 48);
  unk_64A870 = v0 + 48;
  qmemcpy(v0, "mtslgaswnepsnehsshpsdmpsfcpsafrhdmlussthsslcemps", 48);
  double result = *(double *)"dmlussthsslcemps";
  qword_64A860 = (uint64_t)v0;
  return result;
}

double sub_477410()
{
  qword_64A878 = 0;
  unk_64A880 = 0;
  qword_64A888 = 0;
  int v0 = operator new(0xF0uLL);
  qword_64A888 = (uint64_t)(v0 + 15);
  v0[12] = off_620BA8;
  v0[13] = *(_OWORD *)&off_620BB8;
  v0[14] = off_620BC8;
  v0[8] = off_620B68;
  v0[9] = *(_OWORD *)&off_620B78;
  v0[10] = off_620B88;
  v0[11] = *(_OWORD *)&off_620B98;
  v0[4] = off_620B28;
  v0[5] = *(_OWORD *)&off_620B38;
  v0[6] = off_620B48;
  v0[7] = *(_OWORD *)&off_620B58;
  *int v0 = off_620AE8;
  v0[1] = *(_OWORD *)&off_620AF8;
  double result = COERCE_DOUBLE("Z");
  v0[2] = off_620B08;
  v0[3] = *(_OWORD *)&off_620B18;
  qword_64A878 = (uint64_t)v0;
  unk_64A880 = v0 + 15;
  return result;
}

uint64_t **sub_477498()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A890, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_636F8((uint64_t **)&unk_64A8A8, (unsigned int *)v1, 8);
  qword_64A8D0 = 0;
  qword_64A8C8 = 0;
  qword_64A8C0 = (uint64_t)&qword_64A8C8;
  return result;
}

uint64_t sub_477568()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A8D8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64A8F0, (unsigned int *)v1, 1);
  qword_64A918 = 0;
  qword_64A910 = 0;
  qword_64A908 = (uint64_t)&qword_64A910;
  return result;
}

uint64_t sub_477638()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A920, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64A938, (unsigned int *)v2, 1);
  qword_64A958 = 0;
  qword_64A960 = 0;
  qword_64A950 = (uint64_t)&qword_64A958;
  qword_64A968 = 0x706362696C70696ELL;
  dword_64A970 = 0;
  byte_64A974 = 0;
  *(void *)&v2[0] = 0x766D696E766F6464;
  sub_6367C((uint64_t)&unk_64A978, (unsigned int *)v2, 2);
  word_64A990 = word_64A990 & 0xF800 | 0x630;
  qword_64A998 = 0x706362696870696ELL;
  dword_64A9A0 = 0;
  byte_64A9A4 = 0;
  LODWORD(v2[0]) = 1987011684;
  sub_6367C((uint64_t)&algn_64A9A5[3], (unsigned int *)v2, 1);
  word_64A9C0 = word_64A9C0 & 0xF800 | 0x630;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64A9C8 = v1;
  return result;
}

uint64_t sub_4777D0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64A9D0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64A9E8, (unsigned int *)v1, 1);
  qword_64AA10 = 0;
  qword_64AA08 = 0;
  qword_64AA00 = (uint64_t)&qword_64AA08;
  return result;
}

uint64_t sub_4778A0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64AA18, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64AA30, (unsigned int *)v1, 1);
  qword_64AA58 = 0;
  qword_64AA50 = 0;
  qword_64AA48 = (uint64_t)&qword_64AA50;
  return result;
}

uint64_t sub_477970()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64AA60, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64AA78, (unsigned int *)v2, 8);
  qword_64AAA0 = 0;
  qword_64AA98 = 0;
  qword_64AA90 = (uint64_t)&qword_64AA98;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64AAA8 = v1;
  return result;
}

uint64_t **sub_477A64()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64AAB0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64AAC8, (unsigned int *)v1, 8);
  qword_64AAF0 = 0;
  qword_64AAE8 = 0;
  qword_64AAE0 = (uint64_t)&qword_64AAE8;
  return result;
}

uint64_t **sub_477B34()
{
  qword_64AB08 = 0;
  qword_64AB00 = 0;
  qword_64AAF8 = (uint64_t)&qword_64AB00;
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64AB10, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64AB28, (unsigned int *)v1, 8);
}

uint64_t sub_477C04()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64AB40, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64AB58, (unsigned int *)v2, 8);
  qword_64AB80 = 0;
  qword_64AB78 = 0;
  qword_64AB70 = (uint64_t)&qword_64AB78;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64AB88 = v1;
  return result;
}

void sub_477CF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_477DB0(_Unwind_Exception *a1)
{
}

void sub_477DC8()
{
  v8[0] = off_641340;
  v8[1] = *(_OWORD *)"lovc";
  v8[2] = xmmword_641360;
  _DWORD v8[3] = *(_OWORD *)&off_641370;
  v5[0] = xmmword_641300;
  v5[1] = *(_OWORD *)&off_641310;
  long long v6 = *(_OWORD *)"lovl";
  long long v7 = unk_641330;
  long long v2 = *(_OWORD *)"ulov";
  v3[0] = unk_6412D0;
  v3[1] = off_6412E0;
  long long v4 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64AC10, (unsigned int *)&v2, 8);
  LODWORD(v2) = 1986295651;
  sub_6367C((uint64_t)&unk_64AC28, (unsigned int *)&v2, 1);
  qword_64AC50 = 0;
  qword_64AC48 = 0;
  qword_64AC40 = (uint64_t)&qword_64AC48;
  sub_21C8C(&v2, "Null_Device");
  sub_21C8C((void *)v3 + 1, "Actuator");
  sub_21C8C(&v4, "Halogen");
  sub_21C8C((void *)v5 + 1, "Hawking");
  sub_21C8C(&v6, "Flicker");
  sub_21C8C((void *)&v7 + 1, "Penrose");
  uint64_t v0 = 0;
  dword_64AC60 = 2;
  qword_64AC78 = 0;
  qword_64AC70 = 0;
  qword_64AC68 = (uint64_t)&qword_64AC70;
  do
  {
    sub_F42BC((uint64_t)&qword_64AC68, (uint64_t)&qword_64AC70, (void **)((char *)&v3[-1] + v0), (uint64_t)&v3[-1] + v0);
    v0 += 24;
  }
  while (v0 != 144);
  for (uint64_t i = 0; i != -144; i -= 24)
  {
    if (*((char *)v8 + i + 15) < 0) {
      operator delete(*(void **)((char *)&v7 + i + 8));
    }
  }
  dword_64AC80 = 3;
  qword_64AC98 = 0;
  qword_64AC90 = 0;
  qword_64AC88 = (uint64_t)&qword_64AC90;
}

void sub_477FBC(_Unwind_Exception *exception_object)
{
}

uint64_t **sub_47802C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64ACA0, (unsigned int *)v1, 8);
}

uint64_t *sub_4780C0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64ACB8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64ACD0, (unsigned int *)v1, 8);
  qword_64ACF8 = 0;
  qword_64ACF0 = 0;
  qword_64ACE8 = (uint64_t)&qword_64ACF0;
  qword_64AD00 = 0x7063787870616E63;
  dword_64AD08 = 0;
  byte_64AD0C = 0;
  uint64_t result = sub_46A4C(qword_64AD10, (uint64_t)&unk_64ACB8);
  word_64AD28 = word_64AD28 & 0xF800 | 0x421;
  return result;
}

uint64_t sub_4781D4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64AD30, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64AD48, (unsigned int *)v1, 1);
  qword_64AD70 = 0;
  qword_64AD68 = 0;
  qword_64AD60 = (uint64_t)&qword_64AD68;
  return result;
}

void *sub_4782A4()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)CFMutableDictionaryRef v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64AD78, (unsigned int *)v5, 8);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986295651;
  sub_6367C((uint64_t)&unk_64AD90, (unsigned int *)v5, 1);
  qword_64ADB8 = 0;
  qword_64ADB0 = 0;
  qword_64ADA8 = (uint64_t)&qword_64ADB0;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_64ADC0 = 3;
  sub_6367C((uint64_t)&algn_64ADC4[4], (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_64ADE0 = 3;
  sub_6367C((uint64_t)&algn_64ADE4[4], (unsigned int *)v5, 9);
  *(_OWORD *)CFMutableDictionaryRef v5 = xmmword_4E7850;
  dword_64AE00 = 3;
  sub_6367C((uint64_t)&algn_64AE04[4], (unsigned int *)v5, 4);
  *(_OWORD *)CFMutableDictionaryRef v5 = xmmword_4E7860;
  dword_64AE20 = 3;
  sub_6367C((uint64_t)&algn_64AE24[4], (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_64AE40 = 3;
  sub_6367C((uint64_t)&algn_64AE44[4], (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_64AE60 = 3;
  sub_6367C((uint64_t)&algn_64AE64[4], (unsigned int *)v5, 7);
  *(_OWORD *)CFMutableDictionaryRef v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_64AE80 = 2;
  sub_6367C((uint64_t)&algn_64AE84[4], (unsigned int *)v5, 8);
  *(_OWORD *)CFMutableDictionaryRef v5 = xmmword_4E7870;
  dword_64AEA0 = 2;
  sub_6367C((uint64_t)&algn_64AEA4[4], (unsigned int *)v5, 4);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1918990112;
  dword_64AEC0 = 2;
  sub_6367C((uint64_t)&algn_64AEC4[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1836281204;
  dword_64AEE0 = 2;
  sub_6367C((uint64_t)&algn_64AEE4[4], (unsigned int *)v5, 1);
  *(void *)CFMutableDictionaryRef v5 = 0x7670766976706763;
  dword_64AF00 = 2;
  sub_6367C((uint64_t)&algn_64AF04[4], (unsigned int *)v5, 2);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1987080813;
  dword_64AF20 = 2;
  sub_6367C((uint64_t)&algn_64AF24[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1987208039;
  dword_64AF40 = 2;
  sub_6367C((uint64_t)&algn_64AF44[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1919776355;
  dword_64AF60 = 2;
  sub_6367C((uint64_t)&algn_64AF64[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_64AF80 = 2;
  sub_6367C((uint64_t)&algn_64AF84[4], (unsigned int *)v5, 5);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1768778864;
  dword_64AFA0 = 3;
  sub_6367C((uint64_t)&algn_64AFA4[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1768776806;
  dword_64AFC0 = 2;
  sub_6367C((uint64_t)&algn_64AFC4[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_64AFE0 = 2;
  sub_6367C((uint64_t)&algn_64AFE4[4], (unsigned int *)v5, 3);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1751212899;
  dword_64B000 = 2;
  sub_6367C((uint64_t)&algn_64B004[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1751212899;
  dword_64B020 = 3;
  sub_6367C((uint64_t)&algn_64B024[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986556788;
  dword_64B040 = 2;
  sub_6367C((uint64_t)&algn_64B044[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986556788;
  dword_64B060 = 3;
  sub_6367C((uint64_t)&algn_64B064[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_64B080 = 2;
  sub_6367C((uint64_t)&algn_64B084[4], (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_64B0A0 = 3;
  sub_6367C((uint64_t)&algn_64B0A4[4], (unsigned int *)v5, 5);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986098036;
  dword_64B0C0 = 2;
  sub_6367C((uint64_t)&algn_64B0C4[4], (unsigned int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 1986098036;
  dword_64B0E0 = 3;
  sub_6367C((uint64_t)&algn_64B0E4[4], (unsigned int *)v5, 1);
  *(void *)CFMutableDictionaryRef v5 = 0x6563692065637620;
  dword_64B100 = 2;
  sub_6367C((uint64_t)&algn_64B104[4], (unsigned int *)v5, 2);
  *(void *)CFMutableDictionaryRef v5 = 0x6563692065637620;
  dword_64B120 = 3;
  sub_6367C((uint64_t)&algn_64B124[4], (unsigned int *)v5, 2);
  *(_DWORD *)CFMutableDictionaryRef v5 = 0;
  dword_64B140 = 2;
  sub_6AEC0((uint64_t *)&algn_64B144[4], (int *)v5, 1);
  *(_DWORD *)CFMutableDictionaryRef v5 = 0;
  dword_64B160 = 3;
  sub_6AEC0((uint64_t *)&algn_64B164[4], (int *)v5, 1);
  *(void *)CFMutableDictionaryRef v5 = off_621610;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_64B180, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_621658;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_64B1C8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  uint64_t v0 = operator new(0x10uLL);
  *uint64_t v0 = &unk_64B180;
  v0[1] = &unk_64B1C8;
  qword_64B210 = (uint64_t)off_63E0B0;
  qword_64B220 = 0;
  unk_64B228 = 0;
  qword_64B218 = 0;
  sub_6B058(&qword_64B218, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)CFMutableDictionaryRef v5 = off_6216A0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_64B230, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_6216E8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_64B278, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_621730;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_64B2C0, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_621778;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_64B308, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)CFMutableDictionaryRef v5 = off_6217C0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_64B350, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_64B398 = (uint64_t)off_63E0E0;
  dword_64B3A0 = 6;
  qword_64B3A8 = (uint64_t)off_63E110;
  unk_64B3B0 = &qword_64B398;
  return result;
}

void sub_478BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_478C14()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64B3B8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64B3D0, (unsigned int *)v1, 1);
  qword_64B3F8 = 0;
  qword_64B3F0 = 0;
  qword_64B3E8 = (uint64_t)&qword_64B3F0;
  return result;
}

uint64_t sub_478CE4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64B400, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64B418, (unsigned int *)v1, 1);
  qword_64B440 = 0;
  qword_64B438 = 0;
  qword_64B430 = (uint64_t)&qword_64B438;
  return result;
}

uint64_t **sub_478DB4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&qword_64B448, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64B460, (unsigned int *)v1, 8);
  qword_64B488 = 0;
  qword_64B480 = 0;
  qword_64B478 = (uint64_t)&qword_64B480;
  return result;
}

uint64_t **sub_478E84()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64B490, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64B4A8, (unsigned int *)v1, 8);
  qword_64B4D0 = 0;
  qword_64B4C8 = 0;
  qword_64B4C0 = (uint64_t)&qword_64B4C8;
  return result;
}

void sub_478F54()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_47900C(_Unwind_Exception *a1)
{
}

uint64_t sub_479024()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64B4D8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  return sub_6367C((uint64_t)&unk_64B4F0, (unsigned int *)v1, 1);
}

uint64_t *sub_4790D8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64B5A0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64B5B8, (unsigned int *)v1, 8);
  qword_64B5E0 = 0;
  qword_64B5D8 = 0;
  qword_64B5D0 = (uint64_t)&qword_64B5D8;
  qword_64B5F0 = 0x7063787870617020;
  dword_64B5F8 = 0;
  byte_64B5FC = 0;
  uint64_t result = sub_46A4C(qword_64B600, (uint64_t)&unk_64B5A0);
  word_64B618 = word_64B618 & 0xF800 | 0x620;
  return result;
}

void sub_4791EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_4792A4(_Unwind_Exception *a1)
{
}

uint64_t sub_4792BC()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64B620, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64B638, (unsigned int *)v2, 1);
  qword_64B660 = 0;
  qword_64B658 = 0;
  qword_64B650 = (uint64_t)&qword_64B658;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64B668 = v1;
  return result;
}

void sub_4793B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_479468(_Unwind_Exception *a1)
{
}

uint64_t sub_479480()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64B670, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64B688, (unsigned int *)v2, 8);
  qword_64B6B0 = 0;
  qword_64B6A8 = 0;
  qword_64B6A0 = (uint64_t)&qword_64B6A8;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64B6B8 = v1;
  return result;
}

double sub_479574()
{
  long long v11 = off_641340;
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v3 = *(_OWORD *)"ulov";
  long long v4 = unk_6412D0;
  long long v5 = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64B6C0, (unsigned int *)&v3, 8);
  LODWORD(v3) = 1986295651;
  sub_6367C((uint64_t)&unk_64B6D8, (unsigned int *)&v3, 1);
  LODWORD(v3) = 1885500772;
  *((void *)&v3 + 1) = off_6405F0;
  *(void *)&long long v4 = sub_15F064;
  *(void *)&long long v5 = (char *)&v3 + 8;
  DWORD2(v5) = 1718186601;
  *(void *)&long long v6 = off_6405F0;
  *((void *)&v6 + 1) = sub_15E3D0;
  *((void *)&v7 + 1) = &v6;
  LODWORD(v8) = 1651074168;
  *((void *)&v8 + 1) = off_6405F0;
  *(void *)&long long v9 = sub_15DF94;
  *(void *)&long long v10 = (char *)&v8 + 8;
  DWORD2(v10) = 1735287906;
  *(void *)&long long v11 = off_6405F0;
  *((void *)&v11 + 1) = sub_15D974;
  *((void *)&v12 + 1) = &v11;
  LODWORD(v13) = 21;
  *((void *)&v13 + 1) = off_6405F0;
  *(void *)&long long v14 = sub_15D028;
  uint64_t v15 = (char *)&v13 + 8;
  int v16 = 1920365171;
  char v17 = off_6405F0;
  uint64_t v18 = sub_15CD24;
  __int16 v19 = &v17;
  int v20 = 1684303986;
  __int16 v21 = off_6405F0;
  uint64_t v22 = sub_15C1B0;
  char v23 = &v21;
  int v24 = 1667789676;
  int v25 = off_6405F0;
  __int16 v26 = sub_15BE08;
  char v27 = &v25;
  int v28 = 1768907891;
  v29[0] = off_6405F0;
  v29[1] = sub_15B254;
  uint64_t v29[3] = v29;
  int v30 = 1936749683;
  v31[0] = off_6405F0;
  v31[1] = sub_15A268;
  v31[3] = v31;
  int v32 = 14;
  v33[0] = off_6405F0;
  v33[1] = sub_159E94;
  v33[3] = v33;
  int v34 = 1936746861;
  v35[0] = off_6405F0;
  v35[1] = sub_159DF8;
  v35[3] = v35;
  int v36 = 1835235437;
  v37[0] = off_6405F0;
  v37[1] = sub_159D5C;
  void v37[3] = v37;
  int v38 = 1886548852;
  v39[0] = off_6405F0;
  v39[1] = sub_159C94;
  void v39[3] = v39;
  int v40 = 1886610801;
  v41[0] = off_6405F0;
  v41[1] = sub_159BF8;
  v41[3] = v41;
  int v42 = 1886352244;
  v43[0] = off_6405F0;
  v43[1] = sub_159B5C;
  void v43[3] = v43;
  int v44 = 1701737068;
  v45[0] = off_6405F0;
  v45[1] = sub_159A88;
  uint64_t v45[3] = v45;
  int v46 = 1818326117;
  v47[0] = off_6405F0;
  v47[1] = sub_1599B4;
  v47[3] = v47;
  int v48 = 1701080167;
  v49[0] = off_6405F0;
  v49[1] = sub_1598E0;
  void v49[3] = v49;
  int v50 = 1633972835;
  v51[0] = off_6405F0;
  v51[1] = sub_1590D0;
  v51[3] = v51;
  int v52 = 1668248691;
  v53[0] = off_6405F0;
  v53[1] = sub_159034;
  v53[3] = v53;
  int v54 = 1634625388;
  v55[0] = off_6405F0;
  v55[1] = sub_158D44;
  v55[3] = v55;
  sub_14DFAC((uint64_t)&unk_64B6F0, (unsigned int *)&v3, 22);
  for (uint64_t i = 848; i != -32; i -= 40)
    sub_14E474((long long *)((char *)&v3 + i));
  LODWORD(v3) = 1987405668;
  *((void *)&v3 + 1) = off_640638;
  *(void *)&long long v4 = sub_158B30;
  *(void *)&long long v5 = (char *)&v3 + 8;
  DWORD2(v5) = 1987013749;
  *(void *)&long long v6 = off_640638;
  *((void *)&v6 + 1) = sub_15462C;
  *((void *)&v7 + 1) = &v6;
  LODWORD(v8) = 1668706156;
  *((void *)&v8 + 1) = off_640638;
  *(void *)&long long v9 = sub_15440C;
  *(void *)&long long v10 = (char *)&v8 + 8;
  DWORD2(v10) = 1819701100;
  *(void *)&long long v11 = off_640638;
  *((void *)&v11 + 1) = sub_1541C8;
  *((void *)&v12 + 1) = &v11;
  LODWORD(v13) = 1953918828;
  *((void *)&v13 + 1) = off_640638;
  *(void *)&long long v14 = sub_153E4C;
  uint64_t v15 = (char *)&v13 + 8;
  int v16 = 1752659567;
  char v17 = off_640638;
  uint64_t v18 = sub_153B0C;
  __int16 v19 = &v17;
  int v20 = 1987343987;
  __int16 v21 = off_640638;
  uint64_t v22 = sub_151960;
  char v23 = &v21;
  int v24 = 1651275122;
  int v25 = off_640638;
  __int16 v26 = sub_150890;
  char v27 = &v25;
  sub_14E4F8((uint64_t)&unk_64B718, (unsigned int *)&v3, 8);
  for (uint64_t j = 288; j != -32; j -= 40)
    sub_14E9C0((long long *)((char *)&v3 + j));
  qword_64B748 = 0;
  qword_64B750 = 0;
  qword_64B740 = (uint64_t)&qword_64B748;
  xmmword_64B790 = xmmword_4E78A0;
  xmmword_64B8C8 = xmmword_4E78A0;
  xmmword_64B870 = xmmword_4E78B0;
  xmmword_64B7B0 = xmmword_4E78B0;
  sub_16FEBC((uint64_t)&dword_64B758, 6u, -58.0, 0.0);
  return sub_14EA44(qword_64B7A0, &xmmword_64B7B0);
}

void sub_479E94(_Unwind_Exception *a1)
{
  for (uint64_t i = 288; i != -32; i -= 40)
    sub_14E9C0((void *)(v1 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_479EE4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64BA68, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64BA80, (unsigned int *)v1, 1);
  qword_64BAA8 = 0;
  qword_64BAA0 = 0;
  qword_64BA98 = (uint64_t)&qword_64BAA0;
  return result;
}

uint64_t **sub_479FB4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64BAB0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64BAC8, (unsigned int *)v1, 8);
  qword_64BAF0 = 0;
  qword_64BAE8 = 0;
  qword_64BAE0 = (uint64_t)&qword_64BAE8;
  return result;
}

void *sub_47A084()
{
  qword_64BAF8 = 0;
  qword_64BB00 = 0;
  qword_64BB08 = 0;
  qword_64BAF8 = (uint64_t)operator new(0x620uLL);
  uint64_t v0 = qword_64BAF8 + 1568;
  qword_64BB08 = qword_64BAF8 + 1568;
  uint64_t result = memcpy((void *)qword_64BAF8, &unk_622EF8, 0x620uLL);
  qword_64BB00 = v0;
  return result;
}

uint64_t **sub_47A0D8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64BDE0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64BDF8, (unsigned int *)v1, 8);
}

uint64_t sub_47A18C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64BE10, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64BE28, (unsigned int *)v1, 1);
  qword_64BE50 = 0;
  qword_64BE48 = 0;
  qword_64BE40 = (uint64_t)&qword_64BE48;
  return result;
}

uint64_t sub_47A25C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64BE58, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64BE70, (unsigned int *)v1, 1);
  qword_64BE98 = 0;
  qword_64BE90 = 0;
  qword_64BE88 = (uint64_t)&qword_64BE90;
  return result;
}

uint64_t **sub_47A32C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64BEA0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64BEB8, (unsigned int *)v1, 8);
}

uint64_t *sub_47A3E0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64BEF0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64BF08, (unsigned int *)v1, 8);
  qword_64BF30 = 0;
  qword_64BF28 = 0;
  qword_64BF20 = (uint64_t)&qword_64BF28;
  qmemcpy(&qword_64BF38, "wphpiwcpphpe", 12);
  byte_64BF44 = 1;
  sub_46A4C((uint64_t *)&algn_64BF45[3], (uint64_t)&unk_64BEF0);
  word_64BF60 = word_64BF60 & 0xF800 | 0x416;
  qmemcpy(&qword_64BF68, "wphpiwcpphpe", 12);
  byte_64BF74 = 1;
  uint64_t result = sub_46A4C(qword_64BF78, (uint64_t)&unk_64BEF0);
  word_64BF90 = word_64BF90 & 0xF800 | 0x616;
  return result;
}

uint64_t *sub_47A554()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64BF98, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64BFB0, (unsigned int *)v1, 8);
  qword_64BFC8 = 0x70637769706D7769;
  dword_64BFD0 = 0;
  byte_64BFD4 = 0;
  uint64_t result = sub_46A4C(qword_64BFD8, (uint64_t)&unk_64BF98);
  word_64BFF0 = word_64BFF0 & 0xF800 | 0x417;
  return result;
}

uint64_t sub_47A650()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8(&qword_64BFF8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C010, (unsigned int *)v1, 1);
  qword_64C038 = 0;
  qword_64C030 = 0;
  qword_64C028 = (uint64_t)&qword_64C030;
  return result;
}

uint64_t sub_47A720()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C140, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C158, (unsigned int *)v1, 1);
  qword_64C180 = 0;
  qword_64C178 = 0;
  qword_64C170 = (uint64_t)&qword_64C178;
  return result;
}

uint64_t sub_47A7F0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C188, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C1A0, (unsigned int *)v1, 1);
  qword_64C1C8 = 0;
  qword_64C1C0 = 0;
  qword_64C1B8 = (uint64_t)&qword_64C1C0;
  return result;
}

uint64_t sub_47A8C0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C1D0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C1E8, (unsigned int *)v1, 1);
  qword_64C210 = 0;
  qword_64C208 = 0;
  qword_64C200 = (uint64_t)&qword_64C208;
  return result;
}

uint64_t sub_47A990()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C218, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C230, (unsigned int *)v2, 1);
  qword_64C258 = 0;
  qword_64C250 = 0;
  qword_64C248 = (uint64_t)&qword_64C250;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64C260 = v1;
  return result;
}

uint64_t sub_47AA84()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C268, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C280, (unsigned int *)v1, 1);
  qword_64C2A8 = 0;
  qword_64C2A0 = 0;
  qword_64C298 = (uint64_t)&qword_64C2A0;
  return result;
}

uint64_t sub_47AB54()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C2B0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C2C8, (unsigned int *)v1, 1);
  qword_64C2F0 = 0;
  qword_64C2E8 = 0;
  qword_64C2E0 = (uint64_t)&qword_64C2E8;
  return result;
}

uint64_t sub_47AC24()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C2F8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C310, (unsigned int *)v1, 1);
  qword_64C338 = 0;
  qword_64C330 = 0;
  qword_64C328 = (uint64_t)&qword_64C330;
  return result;
}

uint64_t *sub_47ACF4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C340, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C358, (unsigned int *)v1, 1);
  qword_64C380 = 0;
  qword_64C378 = 0;
  qword_64C370 = (uint64_t)&qword_64C378;
  qword_64C388 = 0x706362697073706BLL;
  dword_64C390 = 0;
  byte_64C394 = 0;
  sub_46A4C(qword_64C398, (uint64_t)&unk_64C358);
  word_64C3B0 = word_64C3B0 & 0xF800 | 0x630;
  qword_64C3B8 = 0x70636269706D6269;
  dword_64C3C0 = 0;
  byte_64C3C4 = 0;
  uint64_t result = sub_46A4C((uint64_t *)&algn_64C3C5[3], (uint64_t)&unk_64C358);
  word_64C3E0 = word_64C3E0 & 0xF800 | 0x631;
  return result;
}

uint64_t sub_47AE4C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C3E8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C400, (unsigned int *)v1, 1);
  qword_64C428 = 0;
  qword_64C420 = 0;
  qword_64C418 = (uint64_t)&qword_64C420;
  return result;
}

uint64_t **sub_47AF1C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C430, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64C448, (unsigned int *)v1, 8);
  qword_64C470 = 0;
  qword_64C468 = 0;
  qword_64C460 = (uint64_t)&qword_64C468;
  return result;
}

uint64_t **sub_47AFEC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C478, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64C490, (unsigned int *)v1, 8);
  qword_64C4B8 = 0;
  qword_64C4B0 = 0;
  qword_64C4A8 = (uint64_t)&qword_64C4B0;
  return result;
}

uint64_t sub_47B0BC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C578, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C590, (unsigned int *)v1, 1);
  qword_64C5B8 = 0;
  qword_64C5B0 = 0;
  qword_64C5A8 = (uint64_t)&qword_64C5B0;
  return result;
}

uint64_t sub_47B18C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C5C0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C5D8, (unsigned int *)v1, 1);
  qword_64C600 = 0;
  qword_64C5F8 = 0;
  qword_64C5F0 = (uint64_t)&qword_64C5F8;
  return result;
}

uint64_t **sub_47B25C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C608, (unsigned int *)v1, 1);
  qmemcpy(&qword_64C620, "uolpiwcpnupe", 12);
  byte_64C62C = 1;
  sub_46A4C(qword_64C630, (uint64_t)&unk_64C608);
  word_64C648 = word_64C648 & 0xF800 | 0x41E;
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64C650, (unsigned int *)v1, 8);
}

uint64_t **sub_47B36C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C668, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64C680, (unsigned int *)v1, 8);
}

uint64_t sub_47B420()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C6B0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C6C8, (unsigned int *)v1, 1);
  qword_64C6F0 = 0;
  qword_64C6E8 = 0;
  qword_64C6E0 = (uint64_t)&qword_64C6E8;
  return result;
}

uint64_t sub_47B4F0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C6F8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C710, (unsigned int *)v1, 1);
  qword_64C738 = 0;
  qword_64C730 = 0;
  qword_64C728 = (uint64_t)&qword_64C730;
  return result;
}

uint64_t sub_47B5C0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C740, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C758, (unsigned int *)v1, 1);
  qword_64C780 = 0;
  qword_64C778 = 0;
  qword_64C770 = (uint64_t)&qword_64C778;
  return result;
}

uint64_t sub_47B690()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C788, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64C7A0, (unsigned int *)v1, 1);
  qword_64C7C8 = 0;
  qword_64C7C0 = 0;
  qword_64C7B8 = (uint64_t)&qword_64C7C0;
  return result;
}

uint64_t **sub_47B760()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C7D0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64C7E8, (unsigned int *)v1, 8);
  qword_64C810 = 0;
  qword_64C808 = 0;
  qword_64C800 = (uint64_t)&qword_64C808;
  return result;
}

uint64_t *sub_47B830()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C818, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64C830, (unsigned int *)v2, 8);
  qword_64C858 = 0;
  qword_64C850 = 0;
  qword_64C848 = (uint64_t)&qword_64C850;
  if (MGGetSInt32Answer() == 6) {
    int v0 = 1;
  }
  else {
    int v0 = 3;
  }
  dword_64C860 = v0;
  qmemcpy(&qword_64C868, "uolpiwcpnupe", 12);
  byte_64C874 = 1;
  sub_46A4C(qword_64C878, (uint64_t)&unk_64C818);
  word_64C890 = word_64C890 & 0xF800 | 0x41E;
  qword_64C898 = 0x6F757470766F6C6DLL;
  dword_64C8A0 = 6;
  qword_64C8A8 = 0x6F757470766F6C64;
  dword_64C8B0 = 6;
  qword_64C8B8 = 0x6F75747076637370;
  dword_64C8C0 = 6;
  qword_64C8C8 = 0x696E707469656E64;
  dword_64C8D0 = 0;
  qword_64C8D8 = 0x7063626970726563;
  dword_64C8E0 = 0;
  byte_64C8E4 = 0;
  sub_46A4C((uint64_t *)&algn_64C8E5[3], (uint64_t)&unk_64C818);
  word_64C900 = word_64C900 & 0xF800 | 0x434;
  qword_64C908 = 0x706362697073706BLL;
  dword_64C910 = 0;
  byte_64C914 = 0;
  sub_46A4C(qword_64C918, (uint64_t)&unk_64C818);
  word_64C930 = word_64C930 & 0xF800 | 0x43C;
  qword_64C938 = 0x7063626970686163;
  dword_64C940 = 0;
  byte_64C944 = 0;
  uint64_t result = sub_46A4C((uint64_t *)&algn_64C945[3], (uint64_t)&unk_64C818);
  word_64C960 = word_64C960 & 0xF800 | 0x424;
  return result;
}

void sub_47BAA4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_47BB5C(_Unwind_Exception *a1)
{
}

void sub_47BB74()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8(&qword_64C9B8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64C9D0, (unsigned int *)v1, 1);
  qword_64C9F8 = 0;
  qword_64C9F0 = 0;
  qword_64C9E8 = (uint64_t)&qword_64C9F0;
  qword_64CA00 = (uint64_t)&qword_64CA00;
  qword_64CA08 = (uint64_t)&qword_64CA00;
  qword_64CA10 = 0;
}

uint64_t **sub_47BC6C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CA18, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64CA30, (unsigned int *)v1, 8);
  qword_64CA58 = 0;
  qword_64CA50 = 0;
  qword_64CA48 = (uint64_t)&qword_64CA50;
  return result;
}

uint64_t sub_47BD3C()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CA60, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CA78, (unsigned int *)v2, 1);
  qword_64CAA0 = 0;
  qword_64CA98 = 0;
  qword_64CA90 = (uint64_t)&qword_64CA98;
  qword_64CAB0 = 0;
  unk_64CAB8 = 0;
  qword_64CAA8 = 0;
  int v0 = operator new(0x10uLL);
  qword_64CAA8 = (uint64_t)v0;
  *int v0 = xmmword_4E78D0;
  uint64_t result = (uint64_t)(v0 + 1);
  qword_64CAB0 = result;
  unk_64CAB8 = result;
  return result;
}

void sub_47BE40()
{
  qword_64CAC0 = 0x6F75747074686264;
  dword_64CAC8 = 0;
  qword_64CAD0 = kCPMSPowerTimeScale1s;
  qword_64CAD8 = kCPMSPowerTimeScale100ms;
  qword_64CAE0 = kCPMSPowerTimeScaleInstantaneous;
  qword_64CAE8 = kCPMSPowerTimeScaleThermal;
}

uint64_t sub_47BED0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CAF0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64CB08, (unsigned int *)v1, 1);
  qword_64CB30 = 0;
  qword_64CB28 = 0;
  qword_64CB20 = (uint64_t)&qword_64CB28;
  return result;
}

uint64_t *sub_47BFA0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CB38, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CB50, (unsigned int *)v1, 1);
  qword_64CB78 = 0;
  qword_64CB70 = 0;
  qword_64CB68 = (uint64_t)&qword_64CB70;
  qword_64CB80 = 0x7063787868646269;
  dword_64CB88 = 0;
  byte_64CB8C = 0;
  uint64_t result = sub_46A4C(qword_64CB90, (uint64_t)&unk_64CB50);
  word_64CBA8 = word_64CBA8 & 0xF800 | 0x421;
  return result;
}

uint64_t sub_47C0B4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CBB0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64CBC8, (unsigned int *)v1, 1);
  qword_64CBF0 = 0;
  qword_64CBE8 = 0;
  qword_64CBE0 = (uint64_t)&qword_64CBE8;
  return result;
}

uint64_t **sub_47C184()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CBF8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64CC10, (unsigned int *)v1, 8);
  qword_64CC38 = 0;
  qword_64CC30 = 0;
  qword_64CC28 = (uint64_t)&qword_64CC30;
  return result;
}

uint64_t sub_47C254()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CCF0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64CD08, (unsigned int *)v1, 1);
  qword_64CD30 = 0;
  qword_64CD28 = 0;
  qword_64CD20 = (uint64_t)&qword_64CD28;
  return result;
}

void sub_47C324()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_47C3DC(_Unwind_Exception *a1)
{
}

uint64_t sub_47C3F4()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CD38, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CD50, (unsigned int *)v2, 8);
  qword_64CD78 = 0;
  qword_64CD70 = 0;
  qword_64CD68 = (uint64_t)&qword_64CD70;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64CD80 = v1;
  return result;
}

uint64_t **sub_47C4E8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CD88, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64CDA0, (unsigned int *)v1, 8);
  qword_64CDC8 = 0;
  qword_64CDC0 = 0;
  qword_64CDB8 = (uint64_t)&qword_64CDC0;
  return result;
}

uint64_t **sub_47C5B8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CDD0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64CDE8, (unsigned int *)v1, 8);
  qword_64CE10 = 0;
  qword_64CE08 = 0;
  qword_64CE00 = (uint64_t)&qword_64CE08;
  return result;
}

uint64_t sub_47C688()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CE18, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64CE30, (unsigned int *)v1, 1);
  qword_64CE58 = 0;
  qword_64CE50 = 0;
  qword_64CE48 = (uint64_t)&qword_64CE50;
  return result;
}

uint64_t sub_47C758()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CE60, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64CE78, (unsigned int *)v1, 1);
  qword_64CEA0 = 0;
  qword_64CE98 = 0;
  qword_64CE90 = (uint64_t)&qword_64CE98;
  return result;
}

uint64_t sub_47C828()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CEA8, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CEC0, (unsigned int *)v2, 1);
  qword_64CEE8 = 0;
  qword_64CEE0 = 0;
  qword_64CED8 = (uint64_t)&qword_64CEE0;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64CEF0 = v1;
  return result;
}

uint64_t sub_47C91C()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CF00, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64CF18, (unsigned int *)v2, 1);
  qword_64CF40 = 0;
  qword_64CF38 = 0;
  qword_64CF30 = (uint64_t)&qword_64CF38;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64CF48 = v1;
  return result;
}

void sub_47CA10()
{
  sub_21C8C(&v7, "PRAM0");
  LODWORD(v9) = 0;
  sub_21C8C(&v10, "PRAM1");
  LODWORD(v12) = 0;
  sub_21C8C(&v13, "PRAM2");
  LODWORD(v15) = 0;
  sub_21C8C(&v16, "PRAM3");
  LODWORD(v19) = 0;
  sub_21C8C(v20, "PRAM4");
  int v21 = 0;
  sub_21C8C(v22, "XRAM0");
  int v23 = 1;
  sub_21C8C(v24, "XRAM1");
  int v25 = 1;
  sub_21C8C(v26, "XRAM2");
  int v27 = 1;
  sub_21C8C(v28, "XRAM3");
  int v29 = 1;
  sub_21C8C(v30, "YRAM0");
  int v31 = 2;
  sub_21C8C(v32, "YRAM1");
  int v33 = 2;
  sub_21C8C(v34, "YRAM2");
  int v35 = 2;
  sub_21C8C(v36, "YRAM3");
  int v37 = 2;
  sub_21C8C(v38, "ZRAM");
  int v39 = 3;
  sub_21C8C(v40, "ZREGS");
  int v41 = 5;
  sub_21C8C(v42, "STREAM_ARB");
  int v43 = 4;
  sub_2045C8((uint64_t **)&unk_64CF78, &v7, 16);
  uint64_t v0 = 512;
  do
  {
    if (*((char *)&v7 + v0 - 9) < 0) {
      operator delete(*(void **)((char *)&v7 + v0 - 32));
    }
    v0 -= 32;
  }
  while (v0);
  int v1 = operator new(8uLL);
  *int v1 = 0x500000003;
  *(void *)&long long v7 = @"Registers";
  *((void *)&v7 + 1) = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_20478C((void *)&v7 + 1, v1, (uint64_t)(v1 + 1), 2uLL);
  long long v2 = operator new(8uLL);
  void *v2 = 0x500000003;
  CFStringRef v10 = @"Oversight";
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  sub_20478C(v11, v2, (uint64_t)(v2 + 1), 2uLL);
  long long v3 = operator new(8uLL);
  *long long v3 = 0x500000003;
  CFStringRef v13 = @"Filters";
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  sub_20478C(v14, v3, (uint64_t)(v3 + 1), 2uLL);
  long long v4 = operator new(0x20uLL);
  _OWORD *v4 = xmmword_573A54;
  v4[1] = unk_573A64;
  CFStringRef v16 = @"FIR filters";
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_20478C(&v17, v4, (uint64_t)(v4 + 2), 8uLL);
  sub_204830((uint64_t **)&unk_64CF90, (uint64_t)&v7, 4);
  for (uint64_t i = 0; i != -128; i -= 32)
  {
    long long v6 = *(void **)((char *)&v17 + i);
    if (v6)
    {
      *(uint64_t *)((char *)&v18 + i) = (uint64_t)v6;
      operator delete(v6);
    }
  }
  operator delete(v4);
  operator delete(v3);
  operator delete(v2);
  operator delete(v1);
}

void sub_47CDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = *(void **)(v14 + v16 + 104);
    if (v17)
    {
      *(void *)(v14 + v16 + 112) = v17;
      operator delete(v17);
    }
    v16 -= 32;
    if (v16 == -128)
    {
      operator delete(v13);
      operator delete(v12);
      operator delete(v11);
      operator delete(v10);
      _Unwind_Resume(a1);
    }
  }
}

void sub_47CF10()
{
}

uint64_t sub_47CF18()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CFA8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64CFC0, (unsigned int *)v1, 1);
  qword_64CFE8 = 0;
  qword_64CFE0 = 0;
  qword_64CFD8 = (uint64_t)&qword_64CFE0;
  return result;
}

uint64_t sub_47CFE8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64CFF0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64D008, (unsigned int *)v1, 1);
  qword_64D030 = 0;
  qword_64D028 = 0;
  qword_64D020 = (uint64_t)&qword_64D028;
  return result;
}

uint64_t sub_47D0B8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64D038, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64D050, (unsigned int *)v1, 1);
  qword_64D078 = 0;
  qword_64D070 = 0;
  qword_64D068 = (uint64_t)&qword_64D070;
  return result;
}

uint64_t **sub_47D188()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64D080, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64D098, (unsigned int *)v1, 8);
  qword_64D0C0 = 0;
  qword_64D0B8 = 0;
  qword_64D0B0 = (uint64_t)&qword_64D0B8;
  return result;
}

void sub_47D258()
{
  if (!sub_207A20())
  {
    int v1 = *(id *)sub_32A48(13);
    long long v2 = v1;
    if (v1 && os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      long long v5 = "PlatformUtilities_Aspen.mm";
      __int16 v6 = 1024;
      int v7 = 39;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown device! Please file a bug against \"Audio (New Bugs)\".", (uint8_t *)&v4, 0x12u);
    }
  }
  byte_64D128 = 1;
  qword_64D138 = 0;
  qword_64D140 = 0;
  qword_64D130 = 0;
  long long v3 = operator new(0xBCuLL);
  qword_64D140 = (uint64_t)v3 + 188;
  v3[8] = xmmword_4E867C;
  v3[9] = unk_4E868C;
  v3[10] = xmmword_4E869C;
  *(_OWORD *)((char *)v3 + 172) = *(long long *)((char *)&xmmword_4E869C + 12);
  v3[4] = xmmword_4E863C;
  v3[5] = unk_4E864C;
  v3[6] = xmmword_4E865C;
  v3[7] = unk_4E866C;
  *long long v3 = *(_OWORD *)"\t";
  v3[1] = unk_4E860C;
  _OWORD v3[2] = xmmword_4E861C;
  uint64_t v3[3] = unk_4E862C;
  qword_64D130 = (uint64_t)v3;
  qword_64D138 = (uint64_t)v3 + 188;
}

uint64_t **sub_47D3AC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64D320, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64D338, (unsigned int *)v1, 8);
  qword_64D360 = 0;
  qword_64D358 = 0;
  qword_64D350 = (uint64_t)&qword_64D358;
  return result;
}

uint64_t sub_47D47C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64D368, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64D380, (unsigned int *)v1, 1);
  qword_64D3A8 = 0;
  qword_64D3A0 = 0;
  qword_64D398 = (uint64_t)&qword_64D3A0;
  return result;
}

uint64_t sub_47D54C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64D3B0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64D3C8, (unsigned int *)v1, 1);
  qword_64D3F0 = 0;
  qword_64D3E8 = 0;
  qword_64D3E0 = (uint64_t)&qword_64D3E8;
  return result;
}

uint64_t sub_47D61C()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64D3F8, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64D410, (unsigned int *)v2, 1);
  qword_64D438 = 0;
  qword_64D430 = 0;
  qword_64D428 = (uint64_t)&qword_64D430;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64D440 = v1;
  return result;
}

uint64_t sub_47D710()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64DE48, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64DE60, (unsigned int *)v1, 1);
  qword_64DE88 = 0;
  qword_64DE80 = 0;
  qword_64DE78 = (uint64_t)&qword_64DE80;
  return result;
}

uint64_t **sub_47D7E0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64DE90, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64DEA8, (unsigned int *)v1, 8);
  qword_64DED0 = 0;
  qword_64DEC8 = 0;
  qword_64DEC0 = (uint64_t)&qword_64DEC8;
  return result;
}

uint64_t **sub_47D8B0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64DED8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64DEF0, (unsigned int *)v1, 8);
  qword_64DF18 = 0;
  qword_64DF10 = 0;
  qword_64DF08 = (uint64_t)&qword_64DF10;
  return result;
}

uint64_t sub_47D980()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64DF20, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64DF38, (unsigned int *)v1, 1);
  qword_64DF60 = 0;
  qword_64DF58 = 0;
  qword_64DF50 = (uint64_t)&qword_64DF58;
  return result;
}

uint64_t *sub_47DA50()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64DF68, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64DF80, (unsigned int *)v2, 8);
  qword_64DFA8 = 0;
  qword_64DFA0 = 0;
  qword_64DF98 = (uint64_t)&qword_64DFA0;
  if (MGGetSInt32Answer() == 6) {
    int v0 = 1;
  }
  else {
    int v0 = 3;
  }
  dword_64DFB0 = v0;
  qmemcpy(&qword_64DFB8, "uolpiwcpnupe", 12);
  byte_64DFC4 = 1;
  sub_46A4C((uint64_t *)&algn_64DFC5[3], (uint64_t)&unk_64DF68);
  word_64DFE0 = word_64DFE0 & 0xF800 | 0x41E;
  qword_64DFE8 = 0x706362696C70696ELL;
  dword_64DFF0 = 0;
  byte_64DFF4 = 0;
  *(void *)&v2[0] = 0x766D696E766F6464;
  sub_6367C((uint64_t)&unk_64DFF8, (unsigned int *)v2, 2);
  word_64E010 = word_64E010 & 0xF800 | 0x630;
  qword_64E018 = 0x706362696870696ELL;
  dword_64E020 = 0;
  byte_64E024 = 0;
  LODWORD(v2[0]) = 1987011684;
  sub_6367C((uint64_t)&algn_64E025[3], (unsigned int *)v2, 1);
  word_64E040 = word_64E040 & 0xF800 | 0x630;
  qword_64E048 = 0x6F757470766F6C6DLL;
  dword_64E050 = 6;
  qword_64E058 = 0x6F757470766F6C64;
  dword_64E060 = 6;
  qword_64E068 = 0x6F75747076637370;
  dword_64E070 = 6;
  qword_64E078 = 0x696E707469656E64;
  dword_64E080 = 0;
  qword_64E088 = 0x7063626970726563;
  dword_64E090 = 0;
  byte_64E094 = 0;
  sub_46A4C(qword_64E098, (uint64_t)&unk_64DF68);
  word_64E0B0 = word_64E0B0 & 0xF800 | 0x434;
  qword_64E0B8 = 0x706362697073706BLL;
  dword_64E0C0 = 0;
  byte_64E0C4 = 0;
  sub_46A4C((uint64_t *)&algn_64E0C5[3], (uint64_t)&unk_64DF68);
  word_64E0E0 = word_64E0E0 & 0xF800 | 0x43C;
  qword_64E0E8 = 0x7063626970686163;
  dword_64E0F0 = 0;
  byte_64E0F4 = 0;
  uint64_t result = sub_46A4C(qword_64E0F8, (uint64_t)&unk_64DF68);
  word_64E110 = word_64E110 & 0xF800 | 0x424;
  return result;
}

uint64_t *sub_47DD68()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E168, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E180, (unsigned int *)v1, 1);
  qword_64E1A8 = 0;
  qword_64E1A0 = 0;
  qword_64E198 = (uint64_t)&qword_64E1A0;
  qmemcpy(&qword_64E1B0, "uolpiwcpnupe", 12);
  byte_64E1BC = 1;
  sub_46A4C(qword_64E1C0, (uint64_t)&unk_64E180);
  word_64E1D8 = word_64E1D8 & 0xF800 | 0x41E;
  qword_64E1E0 = 0x676C6F626E737274;
  dword_64E1E8 = 0;
  qword_64E1F0 = 0x6F757470766F6C6DLL;
  dword_64E1F8 = 0;
  qword_64E200 = 0x6F757470766F6C64;
  dword_64E208 = 0;
  qword_64E210 = 0x6F75747076637370;
  dword_64E218 = 0;
  qmemcpy(&qword_64E220, "osupiwcpnupe", 12);
  byte_64E22C = 1;
  uint64_t result = sub_46A4C(qword_64E230, (uint64_t)&unk_64E180);
  word_64E248 = word_64E248 & 0xF800 | 0x61E;
  return result;
}

uint64_t sub_47DF38()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E250, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E268, (unsigned int *)v1, 1);
  qword_64E290 = 0;
  qword_64E288 = 0;
  qword_64E280 = (uint64_t)&qword_64E288;
  qword_64E298 = 0x70636269706C7169;
  dword_64E2A0 = 0;
  byte_64E2A4 = 0;
  LODWORD(v1[0]) = 1986818404;
  sub_6367C((uint64_t)&algn_64E2A5[3], (unsigned int *)v1, 1);
  word_64E2C0 = word_64E2C0 & 0xF800 | 0x421;
  qword_64E2C8 = 0x70636269706C716FLL;
  dword_64E2D0 = 0;
  byte_64E2D4 = 0;
  LODWORD(v1[0]) = 1986818404;
  uint64_t result = sub_6367C((uint64_t)&unk_64E2D8, (unsigned int *)v1, 1);
  word_64E2F0 = word_64E2F0 & 0xF800 | 0x420;
  return result;
}

uint64_t *sub_47E0A8()
{
  v3[8] = off_641340;
  v3[9] = *(_OWORD *)"lovc";
  v3[10] = xmmword_641360;
  v3[11] = *(_OWORD *)&off_641370;
  v3[4] = xmmword_641300;
  v3[5] = *(_OWORD *)&off_641310;
  v3[6] = *(_OWORD *)"lovl";
  v3[7] = unk_641330;
  v3[0] = *(_OWORD *)"ulov";
  v3[1] = unk_6412D0;
  _OWORD v3[2] = off_6412E0;
  uint64_t v3[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E2F8, (unsigned int *)v3, 8);
  LODWORD(v3[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E310, (unsigned int *)v3, 1);
  qword_64E338 = 0;
  qword_64E330 = 0;
  qword_64E328 = (uint64_t)&qword_64E330;
  if (MGGetSInt32Answer() == 6) {
    int v0 = 1;
  }
  else {
    int v0 = 3;
  }
  dword_64E340 = v0;
  qword_64E348 = 0x706377697075736FLL;
  if (sub_20ACA4())
  {
    dword_64E350 = 1701867895;
    byte_64E354 = 1;
  }
  else
  {
    byte_64E354 = 1;
    dword_64E350 = 1701868910;
  }
  sub_46A4C(&qword_64E358, (uint64_t)&unk_64E310);
  word_64E370 = word_64E370 & 0xFFC0 | 0x1E;
  if (sub_20ACA4()) {
    __int16 v1 = 1600;
  }
  else {
    __int16 v1 = 1536;
  }
  word_64E370 = word_64E370 & 0xF83F | v1;
  qmemcpy(&qword_64E378, "isupiwcpnupe", 12);
  byte_64E384 = 1;
  sub_46A4C((uint64_t *)&algn_64E385[3], (uint64_t)&unk_64E310);
  word_64E3A0 = word_64E3A0 & 0xF800 | 0x617;
  qmemcpy(&qword_64E3A8, "taupiwcpnupe", 12);
  byte_64E3B4 = 1;
  uint64_t result = sub_46A4C(qword_64E3B8, (uint64_t)&unk_64E310);
  word_64E3D0 = word_64E3D0 & 0xF800 | 0x607;
  return result;
}

void sub_47E2CC(_Unwind_Exception *a1)
{
}

uint64_t sub_47E2EC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E3E8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64E400, (unsigned int *)v1, 1);
  qword_64E428 = 0;
  qword_64E420 = 0;
  qword_64E418 = (uint64_t)&qword_64E420;
  return result;
}

uint64_t sub_47E3BC()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E430, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E448, (unsigned int *)v2, 8);
  qword_64E470 = 0;
  qword_64E468 = 0;
  qword_64E460 = (uint64_t)&qword_64E468;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64E478 = v1;
  return result;
}

uint64_t sub_47E4B0()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E480, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E498, (unsigned int *)v2, 8);
  qword_64E4C0 = 0;
  qword_64E4B8 = 0;
  qword_64E4B0 = (uint64_t)&qword_64E4B8;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64E4C8 = v1;
  return result;
}

uint64_t sub_47E5A4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E548, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E560, (unsigned int *)v1, 1);
  qword_64E580 = 0;
  qword_64E588 = 0;
  qword_64E578 = (uint64_t)&qword_64E580;
  qword_64E590 = 0x706362696C70696ELL;
  dword_64E598 = 0;
  byte_64E59C = 0;
  *(void *)&v1[0] = 0x766D696E766F6464;
  sub_6367C((uint64_t)&unk_64E5A0, (unsigned int *)v1, 2);
  word_64E5B8 = word_64E5B8 & 0xF800 | 0x630;
  qword_64E5C0 = 0x706362696870696ELL;
  dword_64E5C8 = 0;
  byte_64E5CC = 0;
  LODWORD(v1[0]) = 1987011684;
  uint64_t result = sub_6367C((uint64_t)&unk_64E5D0, (unsigned int *)v1, 1);
  word_64E5E8 = word_64E5E8 & 0xF800 | 0x630;
  return result;
}

double sub_47E718()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E5F0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E608, (unsigned int *)v1, 1);
  qword_64E630 = 0;
  qword_64E628 = 0;
  qword_64E620 = (uint64_t)&qword_64E628;
  double result = 1.58366012e190;
  qword_64E638 = 0x676C6F6273747674;
  dword_64E640 = 0;
  return result;
}

uint64_t **sub_47E800()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E648, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64E660, (unsigned int *)v1, 8);
}

uint64_t sub_47E8B4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E678, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64E690, (unsigned int *)v1, 1);
  qword_64E6B8 = 0;
  qword_64E6B0 = 0;
  qword_64E6A8 = (uint64_t)&qword_64E6B0;
  return result;
}

uint64_t sub_47E984()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E6C0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64E6D8, (unsigned int *)v1, 1);
  qword_64E700 = 0;
  qword_64E6F8 = 0;
  qword_64E6F0 = (uint64_t)&qword_64E6F8;
  return result;
}

uint64_t sub_47EA54()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E708, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E720, (unsigned int *)v2, 1);
  qword_64E748 = 0;
  qword_64E740 = 0;
  qword_64E738 = (uint64_t)&qword_64E740;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64E750 = v1;
  return result;
}

uint64_t sub_47EB48()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E758, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64E770, (unsigned int *)v1, 1);
  qword_64E798 = 0;
  qword_64E790 = 0;
  qword_64E788 = (uint64_t)&qword_64E790;
  return result;
}

uint64_t sub_47EC18()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E7A0, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E7B8, (unsigned int *)v2, 1);
  qword_64E7E0 = 0;
  qword_64E7D8 = 0;
  qword_64E7D0 = (uint64_t)&qword_64E7D8;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64E7E8 = v1;
  return result;
}

uint64_t **sub_47ED0C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E7F0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64E808, (unsigned int *)v1, 8);
  qword_64E830 = 0;
  qword_64E828 = 0;
  qword_64E820 = (uint64_t)&qword_64E828;
  return result;
}

double sub_47EDDC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E838, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E850, (unsigned int *)v1, 1);
  qword_64E870 = 0;
  qword_64E868 = (uint64_t)&qword_64E870;
  qword_64E878 = 0;
  *(void *)&xmmword_658CD8 = 0x40E5888000000000;
  *(long long *)((char *)&xmmword_658CD8 + 8) = xmmword_4E7930;
  *(void *)&double result = 0x100000004;
  unk_658CF0 = xmmword_4E7940;
  return result;
}

uint64_t sub_47EED8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E8C8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64E8E0, (unsigned int *)v1, 1);
  qword_64E908 = 0;
  qword_64E900 = 0;
  qword_64E8F8 = (uint64_t)&qword_64E900;
  return result;
}

uint64_t *sub_47EFA8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E910, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64E928, (unsigned int *)v1, 1);
  qword_64E950 = 0;
  qword_64E948 = 0;
  qword_64E940 = (uint64_t)&qword_64E948;
  qmemcpy(&qword_64E958, "mocpw!cpnupe", 12);
  byte_64E964 = 1;
  uint64_t result = sub_46A4C((uint64_t *)&algn_64E965[3], (uint64_t)&unk_64E928);
  word_64E980 = word_64E980 & 0xF800 | 0x61D;
  return result;
}

double sub_47F0D0()
{
  qword_64E988 = 0;
  unk_64E990 = 0;
  qword_64E998 = 0;
  int v0 = operator new(0xF0uLL);
  qword_64E998 = (uint64_t)(v0 + 15);
  v0[12] = off_629610;
  v0[13] = *(_OWORD *)&off_629620;
  v0[14] = off_629630;
  v0[8] = off_6295D0;
  _OWORD v0[9] = *(_OWORD *)&off_6295E0;
  v0[10] = off_6295F0;
  v0[11] = *(_OWORD *)&off_629600;
  v0[4] = off_629590;
  v0[5] = *(_OWORD *)&off_6295A0;
  v0[6] = off_6295B0;
  v0[7] = *(_OWORD *)&off_6295C0;
  *int v0 = off_629550;
  v0[1] = *(_OWORD *)&off_629560;
  double result = COERCE_DOUBLE("Z");
  v0[2] = off_629570;
  v0[3] = *(_OWORD *)&off_629580;
  qword_64E988 = (uint64_t)v0;
  unk_64E990 = v0 + 15;
  return result;
}

uint64_t sub_47F158()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E9A0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64E9B8, (unsigned int *)v1, 1);
  qword_64E9E0 = 0;
  qword_64E9D8 = 0;
  qword_64E9D0 = (uint64_t)&qword_64E9D8;
  return result;
}

uint64_t sub_47F228()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64E9E8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64EA00, (unsigned int *)v1, 1);
  qword_64EA28 = 0;
  qword_64EA20 = 0;
  qword_64EA18 = (uint64_t)&qword_64EA20;
  return result;
}

uint64_t **sub_47F2F8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EA68, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64EA80, (unsigned int *)v1, 8);
  qword_64EAA8 = 0;
  qword_64EAA0 = 0;
  qword_64EA98 = (uint64_t)&qword_64EAA0;
  return result;
}

uint64_t **sub_47F3C8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EAB0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64EAC8, (unsigned int *)v1, 8);
  qword_64EAF0 = 0;
  qword_64EAE8 = 0;
  qword_64EAE0 = (uint64_t)&qword_64EAE8;
  return result;
}

uint64_t sub_47F498()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EAF8, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EB10, (unsigned int *)v2, 8);
  qword_64EB38 = 0;
  qword_64EB30 = 0;
  qword_64EB28 = (uint64_t)&qword_64EB30;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_64EB40 = v1;
  return result;
}

uint64_t **sub_47F58C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EB48, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64EB60, (unsigned int *)v1, 8);
  qword_64EB88 = 0;
  qword_64EB80 = 0;
  qword_64EB78 = (uint64_t)&qword_64EB80;
  return result;
}

uint64_t **sub_47F65C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_64EB90, (unsigned int *)v1, 8);
}

uint64_t sub_47F6F0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EBD8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64EBF0, (unsigned int *)v1, 1);
  qword_64EC18 = 0;
  qword_64EC10 = 0;
  qword_64EC08 = (uint64_t)&qword_64EC10;
  return result;
}

uint64_t sub_47F7C0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EC20, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64EC38, (unsigned int *)v1, 1);
  qword_64EC60 = 0;
  qword_64EC58 = 0;
  qword_64EC50 = (uint64_t)&qword_64EC58;
  return result;
}

uint64_t **sub_47F890()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EC68, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64EC80, (unsigned int *)v1, 8);
  qword_64ECA8 = 0;
  qword_64ECA0 = 0;
  qword_64EC98 = (uint64_t)&qword_64ECA0;
  return result;
}

uint64_t *sub_47F960()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64ECB0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64ECC8, (unsigned int *)v1, 1);
  qword_64ECF0 = 0;
  qword_64ECE8 = 0;
  qword_64ECE0 = (uint64_t)&qword_64ECE8;
  qword_64ECF8 = 0x70636269706D7372;
  dword_64ED00 = 0;
  byte_64ED04 = 0;
  LODWORD(v1[0]) = 1987276900;
  sub_6367C((uint64_t)&algn_64ED05[3], (unsigned int *)v1, 1);
  word_64ED20 = word_64ED20 & 0xF800 | 0x635;
  qword_64ED28 = 0x7063626970636F70;
  dword_64ED30 = 0;
  byte_64ED34 = 0;
  uint64_t result = sub_46A4C(qword_64ED38, (uint64_t)&unk_64ECC8);
  word_64ED50 = word_64ED50 & 0xF800 | 0x635;
  return result;
}

uint64_t *sub_47FAC8()
{
  unsigned int v1 = 1986295651;
  sub_6367C((uint64_t)&unk_64ED58, &v1, 1);
  qword_64ED70 = 0x7063787870737470;
  dword_64ED78 = 0;
  byte_64ED7C = 0;
  uint64_t result = sub_46A4C(qword_64ED80, (uint64_t)&unk_64ED58);
  word_64ED98 = word_64ED98 & 0xF800 | 0x21;
  return result;
}

uint64_t *sub_47FB4C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EDA0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EDB8, (unsigned int *)v1, 1);
  qword_64EDE0 = 0;
  qword_64EDD8 = 0;
  qword_64EDD0 = (uint64_t)&qword_64EDD8;
  qmemcpy(&qword_64EDE8, "pcspiwcpnupe", 12);
  byte_64EDF4 = 1;
  uint64_t result = sub_46A4C(qword_64EDF8, (uint64_t)&unk_64EDB8);
  word_64EE10 = word_64EE10 & 0xF800 | 0x61E;
  return result;
}

float sub_47FC74()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EE18, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EE30, (unsigned int *)v1, 8);
  qword_64EE58 = 0;
  qword_64EE50 = 0;
  qword_64EE48 = (uint64_t)&qword_64EE50;
  return sub_16FEBC((uint64_t)&unk_64EE60, 0, -96.0, 0.0);
}

void sub_47FD60()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EF40, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64EF58, (unsigned int *)v1, 1);
}

uint64_t sub_47FE2C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EF70, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64EF88, (unsigned int *)v1, 1);
  qword_64EFB0 = 0;
  qword_64EFA8 = 0;
  qword_64EFA0 = (uint64_t)&qword_64EFA8;
  return result;
}

uint64_t sub_47FEFC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64EFB8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64EFD0, (unsigned int *)v1, 1);
  qword_64EFF8 = 0;
  qword_64EFF0 = 0;
  qword_64EFE8 = (uint64_t)&qword_64EFF0;
  return result;
}

void *sub_47FFCC()
{
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_64F000, (unsigned int *)v5, 1);
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64F018, (unsigned int *)v5, 8);
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_64F030 = 3;
  sub_6367C((uint64_t)&unk_64F038, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_64F050 = 3;
  sub_6367C((uint64_t)&unk_64F058, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_64F070 = 3;
  sub_6367C((uint64_t)&unk_64F078, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_64F090 = 3;
  sub_6367C((uint64_t)&unk_64F098, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_64F0B0 = 3;
  sub_6367C((uint64_t)&unk_64F0B8, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_64F0D0 = 3;
  sub_6367C((uint64_t)&unk_64F0D8, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_64F0F0 = 2;
  sub_6367C((uint64_t)&unk_64F0F8, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_64F110 = 2;
  sub_6367C((uint64_t)&unk_64F118, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_64F130 = 2;
  sub_6367C((uint64_t)&unk_64F138, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_64F150 = 2;
  sub_6367C((uint64_t)&unk_64F158, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_64F170 = 2;
  sub_6367C((uint64_t)&unk_64F178, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_64F190 = 2;
  sub_6367C((uint64_t)&unk_64F198, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_64F1B0 = 2;
  sub_6367C((uint64_t)&unk_64F1B8, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_64F1D0 = 2;
  sub_6367C((uint64_t)&unk_64F1D8, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_64F1F0 = 2;
  sub_6367C((uint64_t)&unk_64F1F8, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_64F210 = 3;
  sub_6367C((uint64_t)&unk_64F218, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_64F230 = 2;
  sub_6367C((uint64_t)&unk_64F238, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_64F250 = 2;
  sub_6367C((uint64_t)&unk_64F258, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_64F270 = 2;
  sub_6367C((uint64_t)&unk_64F278, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_64F290 = 3;
  sub_6367C((uint64_t)&unk_64F298, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_64F2B0 = 2;
  sub_6367C((uint64_t)&unk_64F2B8, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_64F2D0 = 3;
  sub_6367C((uint64_t)&unk_64F2D8, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_64F2F0 = 2;
  sub_6367C((uint64_t)&unk_64F2F8, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_64F310 = 3;
  sub_6367C((uint64_t)&unk_64F318, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_64F330 = 2;
  sub_6367C((uint64_t)&unk_64F338, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_64F350 = 3;
  sub_6367C((uint64_t)&unk_64F358, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_64F370 = 2;
  sub_6367C((uint64_t)&unk_64F378, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_64F390 = 3;
  sub_6367C((uint64_t)&unk_64F398, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_64F3B0 = 2;
  sub_6AEC0(qword_64F3B8, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_64F3D0 = 3;
  sub_6AEC0(qword_64F3D8, (int *)v5, 1);
  *(void *)long long v5 = off_62ABB0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_64F3F0, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_62ABF8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_64F438, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  int v0 = operator new(0x10uLL);
  *int v0 = &unk_64F3F0;
  v0[1] = &unk_64F438;
  qword_64F480 = (uint64_t)off_63E0B0;
  qword_64F490 = 0;
  unk_64F498 = 0;
  qword_64F488 = 0;
  sub_6B058(&qword_64F488, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_62AC40;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_64F4A0, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_62AC88;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_64F4E8, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_62ACD0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_64F530, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_62AD18;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_64F578, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_62AD60;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_64F5C0, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_64F608 = (uint64_t)off_63E0E0;
  dword_64F610 = 6;
  qword_64F618 = (uint64_t)off_63E110;
  unk_64F620 = &qword_64F608;
  qword_64F638 = 0;
  qword_64F630 = 0;
  qword_64F628 = (uint64_t)&qword_64F630;
  return result;
}

void sub_4808C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_48093C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64FD70, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64FD88, (unsigned int *)v1, 1);
  qword_64FDB0 = 0;
  qword_64FDA8 = 0;
  qword_64FDA0 = (uint64_t)&qword_64FDA8;
  return result;
}

uint64_t sub_480A0C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64FDB8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64FDD0, (unsigned int *)v1, 1);
  qword_64FDF8 = 0;
  qword_64FDF0 = 0;
  qword_64FDE8 = (uint64_t)&qword_64FDF0;
  return result;
}

uint64_t **sub_480ADC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64FE00, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_64FE18, (unsigned int *)v1, 8);
  qword_64FE40 = 0;
  qword_64FE38 = 0;
  qword_64FE30 = (uint64_t)&qword_64FE38;
  return result;
}

void sub_480BAC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64FE48, (unsigned int *)v1, 8);
}

uint64_t sub_480C58()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64FE70, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_64FE88, (unsigned int *)v1, 1);
  qword_64FEB0 = 0;
  qword_64FEA8 = 0;
  qword_64FEA0 = (uint64_t)&qword_64FEA8;
  return result;
}

double sub_480D28()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_64FEB8, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_64FED0, (unsigned int *)v2, 8);
  qword_64FEF8 = 0;
  qword_64FEF0 = 0;
  qword_64FEE8 = (uint64_t)&qword_64FEF0;
  int v0 = (char *)operator new(0x48uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)int v0 = off_638728;
  *((void *)v0 + 4) = 0x5F737776766F6C69;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001;
  double result = *(double *)"";
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"";
  *((void *)v0 + 3) = off_638760;
  qword_64FF00 = (uint64_t)(v0 + 24);
  *(void *)algn_64FF08 = v0;
  return result;
}

uint64_t **sub_480E74()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_650010, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_636F8((uint64_t **)&unk_650028, (unsigned int *)v1, 8);
  qword_650050 = 0;
  qword_650048 = 0;
  qword_650040 = (uint64_t)&qword_650048;
  return result;
}

char *sub_480F44()
{
  LODWORD(v3[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_650070, (unsigned int *)v3, 1);
  v3[8] = off_641340;
  v3[9] = *(_OWORD *)"lovc";
  v3[10] = xmmword_641360;
  v3[11] = *(_OWORD *)&off_641370;
  v3[4] = xmmword_641300;
  v3[5] = *(_OWORD *)&off_641310;
  v3[6] = *(_OWORD *)"lovl";
  v3[7] = unk_641330;
  v3[0] = *(_OWORD *)"ulov";
  v3[1] = unk_6412D0;
  _OWORD v3[2] = off_6412E0;
  uint64_t v3[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_650088, (unsigned int *)v3, 8);
  qword_6500B0 = 0;
  qword_6500A8 = 0;
  qword_6500A0 = (uint64_t)&qword_6500A8;
  qword_6500B8 = 0x6F757470766F6C64;
  dword_6500C0 = 0;
  qword_6500D0 = 0;
  unk_6500D8 = 0;
  qword_6500C8 = 0;
  int v0 = operator new(8uLL);
  qword_6500C8 = (uint64_t)v0;
  *int v0 = 0x7061327470687042;
  qword_6500D0 = (uint64_t)(v0 + 1);
  unk_6500D8 = v0 + 1;
  qword_6500E8 = 0;
  unk_6500F0 = 0;
  qword_6500E0 = 0;
  unsigned int v1 = (char *)operator new(0xCuLL);
  qword_6500E8 = (uint64_t)(v1 + 12);
  unk_6500F0 = v1 + 12;
  qmemcpy(v1, "bphptbmptfhp", 12);
  qword_6500E0 = (uint64_t)v1;
  qword_650100 = 0;
  unk_650108 = 0;
  qword_6500F8 = 0;
  double result = (char *)operator new(0xCuLL);
  qword_650100 = (uint64_t)(result + 12);
  unk_650108 = result + 12;
  qmemcpy(result, "oelpielptelp", 12);
  qword_6500F8 = (uint64_t)result;
  return result;
}

uint64_t **sub_4810E0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_650110, (unsigned int *)v1, 8);
}

uint64_t sub_481174()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_650128, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_650140, (unsigned int *)v1, 1);
  qword_650168 = 0;
  qword_650160 = 0;
  qword_650158 = (uint64_t)&qword_650160;
  return result;
}

void *sub_481244()
{
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_650170, (unsigned int *)v5, 1);
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_650188, (unsigned int *)v5, 8);
  qword_6501B0 = 0;
  qword_6501A8 = 0;
  qword_6501A0 = (uint64_t)&qword_6501A8;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_6501B8 = 3;
  sub_6367C((uint64_t)&qword_6501C0, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_6501D8 = 3;
  sub_6367C((uint64_t)&qword_6501E0, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_6501F8 = 3;
  sub_6367C((uint64_t)&qword_650200, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_650218 = 3;
  sub_6367C((uint64_t)&qword_650220, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_650238 = 3;
  sub_6367C((uint64_t)&qword_650240, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_650258 = 3;
  sub_6367C((uint64_t)&unk_650260, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_650278 = 2;
  sub_6367C((uint64_t)&qword_650280, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_650298 = 2;
  sub_6367C((uint64_t)&qword_6502A0, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_6502B8 = 2;
  sub_6367C((uint64_t)&qword_6502C0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_6502D8 = 2;
  sub_6367C((uint64_t)&unk_6502E0, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_6502F8 = 2;
  sub_6367C((uint64_t)&qword_650300, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_650318 = 2;
  sub_6367C((uint64_t)&qword_650320, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_650338 = 2;
  sub_6367C((uint64_t)&unk_650340, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_650358 = 2;
  sub_6367C((uint64_t)&unk_650360, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_650378 = 2;
  sub_6367C((uint64_t)&qword_650380, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_650398 = 3;
  sub_6367C((uint64_t)&unk_6503A0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_6503B8 = 2;
  sub_6367C((uint64_t)&unk_6503C0, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_6503D8 = 2;
  sub_6367C((uint64_t)&qword_6503E0, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_6503F8 = 2;
  sub_6367C((uint64_t)&qword_650400, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_650418 = 3;
  sub_6367C((uint64_t)&qword_650420, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_650438 = 2;
  sub_6367C((uint64_t)&qword_650440, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_650458 = 3;
  sub_6367C((uint64_t)&qword_650460, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_650478 = 2;
  sub_6367C((uint64_t)&unk_650480, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_650498 = 3;
  sub_6367C((uint64_t)&unk_6504A0, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_6504B8 = 2;
  sub_6367C((uint64_t)&unk_6504C0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_6504D8 = 3;
  sub_6367C((uint64_t)&unk_6504E0, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_6504F8 = 2;
  sub_6367C((uint64_t)&unk_650500, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_650518 = 3;
  sub_6367C((uint64_t)&unk_650520, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_650538 = 2;
  sub_6AEC0(&qword_650540, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_650558 = 3;
  sub_6AEC0(&qword_650560, (int *)v5, 1);
  *(void *)long long v5 = off_6329E8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_650578, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_632A30;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_6505C0, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  int v0 = operator new(0x10uLL);
  *int v0 = &unk_650578;
  v0[1] = &unk_6505C0;
  qword_650608 = (uint64_t)off_63E0B0;
  qword_650618 = 0;
  unk_650620 = 0;
  qword_650610 = 0;
  sub_6B058(&qword_650610, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_632A78;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_650628, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_632AC0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_650670, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_632B08;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_6506B8, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_632B50;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_650700, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_632B98;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_650748, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_650790 = (uint64_t)off_63E0E0;
  dword_650798 = 6;
  qword_6507A0 = (uint64_t)off_63E110;
  *(void *)algn_6507A8 = &qword_650790;
  return result;
}

void sub_481B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t **sub_481BB4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_658828, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_658840, (unsigned int *)v1, 8);
  qword_658868 = 0;
  qword_658860 = 0;
  qword_658858 = (uint64_t)&qword_658860;
  return result;
}

void sub_481C84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_481D3C(_Unwind_Exception *a1)
{
}

void sub_481D54()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_658870, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_658888, (unsigned int *)v2, 8);
  qword_6588B0 = 0;
  qword_6588A8 = 0;
  qword_6588A0 = (uint64_t)&qword_6588A8;
  if (MGGetSInt32Answer() == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_6588B8 = v1;
  strcpy((char *)&xmmword_6588C0, "vascfdmi");
  BYTE12(xmmword_6588C0) = 0;
}

uint64_t **sub_481E7C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_658960, (unsigned int *)v1, 8);
}

uint64_t sub_481F10()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_658978, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_658990, (unsigned int *)v1, 1);
  qword_6589B8 = 0;
  qword_6589B0 = 0;
  qword_6589A8 = (uint64_t)&qword_6589B0;
  return result;
}

uint64_t sub_481FE0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_658C40, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_658C58, (unsigned int *)v1, 1);
  qword_658C80 = 0;
  qword_658C78 = 0;
  qword_658C70 = (uint64_t)&qword_658C78;
  return result;
}

uint64_t sub_4820B0()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_658C88, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_658CA0, (unsigned int *)v2, 8);
  qword_658CC8 = 0;
  qword_658CC0 = 0;
  qword_658CB8 = (uint64_t)&qword_658CC0;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_658CD0 = v1;
  return result;
}

uint64_t sub_4821A4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_658D00, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_658D18, (unsigned int *)v1, 1);
  qword_658D40 = 0;
  qword_658D38 = 0;
  qword_658D30 = (uint64_t)&qword_658D38;
  return result;
}

uint64_t sub_482274()
{
  long long v15 = *(_OWORD *)"lovc";
  long long v16 = xmmword_641360;
  long long v17 = *(_OWORD *)&off_641370;
  long long v10 = xmmword_641300;
  long long v11 = *(_OWORD *)&off_641310;
  long long v12 = *(_OWORD *)"lovl";
  long long v13 = unk_641330;
  long long v14 = off_641340;
  *(_OWORD *)long long v8 = *(_OWORD *)"ulov";
  *(_OWORD *)&unsigned char v8[16] = unk_6412D0;
  *(_OWORD *)&v8[32] = off_6412E0;
  long long v9 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_658D48, (unsigned int *)v8, 8);
  *(_DWORD *)long long v8 = 1986295651;
  sub_6367C((uint64_t)&unk_658D60, (unsigned int *)v8, 1);
  qword_658D88 = 0;
  qword_658D80 = 0;
  qword_658D78 = (uint64_t)&qword_658D80;
  qmemcpy(v5, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v5));
  qmemcpy(v8, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_658D90 = 3;
  sub_6367C((uint64_t)&unk_658D98, (unsigned int *)v8, 8);
  qmemcpy(v8, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_658DB0 = 3;
  sub_6367C((uint64_t)&unk_658DB8, (unsigned int *)v8, 9);
  *(_OWORD *)long long v8 = xmmword_4E7850;
  dword_658DD0 = 3;
  sub_6367C((uint64_t)&unk_658DD8, (unsigned int *)v8, 4);
  *(_OWORD *)long long v8 = xmmword_4E7860;
  dword_658DF0 = 3;
  sub_6367C((uint64_t)&unk_658DF8, (unsigned int *)v8, 4);
  qmemcpy(v8, "cgpvivpvovpvcvmrsibi", 20);
  dword_658E10 = 3;
  sub_6367C((uint64_t)&unk_658E18, (unsigned int *)v8, 5);
  qmemcpy(v8, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_658E30 = 3;
  sub_6367C((uint64_t)&unk_658E38, (unsigned int *)v8, 7);
  *(_OWORD *)long long v8 = v5[1];
  *(_OWORD *)&unsigned char v8[16] = v5[0];
  dword_658E50 = 2;
  sub_6367C((uint64_t)&unk_658E58, (unsigned int *)v8, 8);
  *(_OWORD *)long long v8 = xmmword_4E7870;
  dword_658E70 = 2;
  sub_6367C((uint64_t)&unk_658E78, (unsigned int *)v8, 4);
  *(_DWORD *)long long v8 = 1918990112;
  dword_658E90 = 2;
  sub_6367C((uint64_t)&unk_658E98, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1836281204;
  dword_658EB0 = 2;
  sub_6367C((uint64_t)&unk_658EB8, (unsigned int *)v8, 1);
  *(void *)long long v8 = 0x7670766976706763;
  dword_658ED0 = 2;
  sub_6367C((uint64_t)&unk_658ED8, (unsigned int *)v8, 2);
  *(_DWORD *)long long v8 = 1987080813;
  dword_658EF0 = 2;
  sub_6367C((uint64_t)&unk_658EF8, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1987208039;
  dword_658F10 = 2;
  sub_6367C((uint64_t)&unk_658F18, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1919776355;
  dword_658F30 = 2;
  sub_6367C((uint64_t)&unk_658F38, (unsigned int *)v8, 1);
  qmemcpy(v8, "plmirvmierpspcpspcts", 20);
  dword_658F50 = 2;
  sub_6367C((uint64_t)&unk_658F58, (unsigned int *)v8, 5);
  *(_DWORD *)long long v8 = 1768778864;
  dword_658F70 = 3;
  sub_6367C((uint64_t)&unk_658F78, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1768776806;
  dword_658F90 = 2;
  sub_6367C((uint64_t)&unk_658F98, (unsigned int *)v8, 1);
  qmemcpy(v8, "pctspcpserps", 12);
  dword_658FB0 = 2;
  sub_6367C((uint64_t)&unk_658FB8, (unsigned int *)v8, 3);
  *(_DWORD *)long long v8 = 1751212899;
  dword_658FD0 = 2;
  sub_6367C((uint64_t)&unk_658FD8, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1751212899;
  dword_658FF0 = 3;
  sub_6367C((uint64_t)&unk_658FF8, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1986556788;
  dword_659010 = 2;
  sub_6367C((uint64_t)&unk_659018, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1986556788;
  dword_659030 = 3;
  sub_6367C((uint64_t)&unk_659038, (unsigned int *)v8, 1);
  qmemcpy(v8, "gcrvmorvtshvisrvtsav", 20);
  dword_659050 = 2;
  sub_6367C((uint64_t)&unk_659058, (unsigned int *)v8, 5);
  qmemcpy(v8, "gcrvmorvtshvisrvtsav", 20);
  dword_659070 = 3;
  sub_6367C((uint64_t)&unk_659078, (unsigned int *)v8, 5);
  *(_DWORD *)long long v8 = 1986098036;
  dword_659090 = 2;
  sub_6367C((uint64_t)&unk_659098, (unsigned int *)v8, 1);
  *(_DWORD *)long long v8 = 1986098036;
  dword_6590B0 = 3;
  sub_6367C((uint64_t)&unk_6590B8, (unsigned int *)v8, 1);
  *(void *)long long v8 = 0x6563692065637620;
  dword_6590D0 = 2;
  sub_6367C((uint64_t)&unk_6590D8, (unsigned int *)v8, 2);
  *(void *)long long v8 = 0x6563692065637620;
  dword_6590F0 = 3;
  sub_6367C((uint64_t)&unk_6590F8, (unsigned int *)v8, 2);
  *(_DWORD *)long long v8 = 0;
  dword_659110 = 2;
  sub_6AEC0(qword_659118, (int *)v8, 1);
  *(_DWORD *)long long v8 = 0;
  dword_659130 = 3;
  sub_6AEC0(qword_659138, (int *)v8, 1);
  *(void *)long long v8 = off_6336E8;
  *(void *)&v8[24] = v8;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_659150, (uint64_t)v8, (long long *)__p, 0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v8);
  *(void *)long long v8 = off_633730;
  *(void *)&v8[24] = v8;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_659198, (uint64_t)v8, (long long *)__p, 0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v8);
  int v0 = operator new(0x10uLL);
  *int v0 = &unk_659150;
  v0[1] = &unk_659198;
  qword_6591E0 = (uint64_t)off_63E0B0;
  qword_6591F0 = 0;
  unk_6591F8 = 0;
  qword_6591E8 = 0;
  sub_6B058(&qword_6591E8, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v8 = off_633778;
  *(void *)&v8[24] = v8;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_659200, (uint64_t)v8, (long long *)__p, 0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v8);
  *(void *)long long v8 = off_6337C0;
  *(void *)&v8[24] = v8;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_659248, (uint64_t)v8, (long long *)__p, 1);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v8);
  *(void *)long long v8 = off_633808;
  *(void *)&v8[24] = v8;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_659290, (uint64_t)v8, (long long *)__p, 1);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v8);
  *(void *)long long v8 = off_633850;
  *(void *)&v8[24] = v8;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_6592D8, (uint64_t)v8, (long long *)__p, 0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v8);
  *(void *)long long v8 = off_633898;
  *(void *)&v8[24] = v8;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_659320, (uint64_t)v8, (long long *)__p, 0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v8);
  qword_659368 = (uint64_t)off_63E0E0;
  dword_659370 = 6;
  qword_659378 = (uint64_t)off_63E110;
  unk_659380 = &qword_659368;
  qword_659390 = 0;
  unk_659398 = 0;
  qword_659388 = 0;
  int v1 = operator new(8uLL);
  qword_659388 = (uint64_t)v1;
  *int v1 = 0x400FFFFFFFFLL;
  qword_659390 = (uint64_t)(v1 + 1);
  unk_659398 = v1 + 1;
  byte_6593A0 = 0;
  byte_6593A8 = 0;
  qword_6593B8 = 0;
  unk_6593C0 = 0;
  qword_6593B0 = 0;
  long long v2 = operator new(8uLL);
  qword_6593B0 = (uint64_t)v2;
  void *v2 = 0x400FFFFFFFFLL;
  qword_6593B8 = (uint64_t)(v2 + 1);
  unk_6593C0 = v2 + 1;
  byte_6593C8 = 0;
  byte_6593D0 = 0;
  qword_6593E0 = 0;
  unk_6593E8 = 0;
  qword_6593D8 = 0;
  long long v3 = operator new(8uLL);
  qword_6593D8 = (uint64_t)v3;
  *long long v3 = 0x200FFFFFFFFLL;
  uint64_t result = (uint64_t)(v3 + 1);
  qword_6593E0 = result;
  unk_6593E8 = result;
  byte_6593F0 = 0;
  byte_6593F8 = 0;
  return result;
}

void sub_482C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

void sub_482C78()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659460, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_659460))
    {
      v0[6] = off_633930;
      v0[7] = *(_OWORD *)&off_633940;
      v0[8] = off_633950;
      v0[2] = off_6338F0;
      v0[3] = *(_OWORD *)&off_633900;
      v0[4] = off_633910;
      v0[5] = *(_OWORD *)&off_633920;
      v0[0] = off_6338D0;
      v0[1] = *(_OWORD *)&off_6338E0;
      sub_F44F8((uint64_t)v0, 9);
      __cxa_guard_release(&qword_659460);
    }
  }
}

void sub_482D30(_Unwind_Exception *a1)
{
}

uint64_t **sub_482D48()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_659400, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_659418, (unsigned int *)v1, 8);
  qword_659440 = 0;
  qword_659438 = 0;
  qword_659430 = (uint64_t)&qword_659438;
  return result;
}

uint64_t sub_482E18()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_659480, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_659498, (unsigned int *)v2, 1);
  qword_6594C0 = 0;
  qword_6594B8 = 0;
  qword_6594B0 = (uint64_t)&qword_6594B8;
  qword_6594D0 = 0;
  unk_6594D8 = 0;
  qword_6594C8 = 0;
  int v0 = operator new(0x10uLL);
  qword_6594C8 = (uint64_t)v0;
  *int v0 = xmmword_4E7B00;
  uint64_t result = (uint64_t)(v0 + 1);
  qword_6594D0 = result;
  unk_6594D8 = result;
  return result;
}

void *sub_482F1C()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6594E0, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_6594F8, (unsigned int *)v5, 1);
  qword_659520 = 0;
  qword_659518 = 0;
  qword_659510 = (uint64_t)&qword_659518;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_659528 = 3;
  sub_6367C((uint64_t)&unk_659530, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_659548 = 3;
  sub_6367C((uint64_t)&unk_659550, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_659568 = 3;
  sub_6367C((uint64_t)&unk_659570, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_659588 = 3;
  sub_6367C((uint64_t)&unk_659590, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_6595A8 = 3;
  sub_6367C((uint64_t)&unk_6595B0, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_6595C8 = 3;
  sub_6367C((uint64_t)&unk_6595D0, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_6595E8 = 2;
  sub_6367C((uint64_t)&unk_6595F0, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_659608 = 2;
  sub_6367C((uint64_t)&unk_659610, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_659628 = 2;
  sub_6367C((uint64_t)&unk_659630, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_659648 = 2;
  sub_6367C((uint64_t)&unk_659650, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_659668 = 2;
  sub_6367C((uint64_t)&unk_659670, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_659688 = 2;
  sub_6367C((uint64_t)&unk_659690, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_6596A8 = 2;
  sub_6367C((uint64_t)&unk_6596B0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_6596C8 = 2;
  sub_6367C((uint64_t)&unk_6596D0, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_6596E8 = 2;
  sub_6367C((uint64_t)&unk_6596F0, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_659708 = 3;
  sub_6367C((uint64_t)&unk_659710, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_659728 = 2;
  sub_6367C((uint64_t)&unk_659730, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_659748 = 2;
  sub_6367C((uint64_t)&unk_659750, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_659768 = 2;
  sub_6367C((uint64_t)&unk_659770, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_659788 = 3;
  sub_6367C((uint64_t)&unk_659790, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_6597A8 = 2;
  sub_6367C((uint64_t)&unk_6597B0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_6597C8 = 3;
  sub_6367C((uint64_t)&unk_6597D0, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_6597E8 = 2;
  sub_6367C((uint64_t)&unk_6597F0, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_659808 = 3;
  sub_6367C((uint64_t)&unk_659810, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_659828 = 2;
  sub_6367C((uint64_t)&unk_659830, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_659848 = 3;
  sub_6367C((uint64_t)&unk_659850, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_659868 = 2;
  sub_6367C((uint64_t)&unk_659870, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_659888 = 3;
  sub_6367C((uint64_t)&unk_659890, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_6598A8 = 2;
  sub_6AEC0(qword_6598B0, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_6598C8 = 3;
  sub_6AEC0(qword_6598D0, (int *)v5, 1);
  *(void *)long long v5 = off_633970;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_6598E8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_6339B8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_659930, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  int v0 = operator new(0x10uLL);
  *int v0 = &unk_6598E8;
  v0[1] = &unk_659930;
  qword_659978 = (uint64_t)off_63E0B0;
  qword_659988 = 0;
  unk_659990 = 0;
  qword_659980 = 0;
  sub_6B058(&qword_659980, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_633A00;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_659998, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633A48;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_6599E0, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633A90;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_659A28, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633AD8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_659A70, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633B20;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_659AB8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_659B00 = (uint64_t)off_63E0E0;
  dword_659B08 = 6;
  qword_659B10 = (uint64_t)off_63E110;
  *(void *)algn_659B18 = &qword_659B00;
  return result;
}

void sub_483818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_48388C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_659B28, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_659B40, (unsigned int *)v1, 1);
  qword_659B68 = 0;
  qword_659B60 = 0;
  qword_659B58 = (uint64_t)&qword_659B60;
  return result;
}

uint64_t **sub_48395C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_659B70, (unsigned int *)v1, 8);
}

double sub_4839F0()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_659B88, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_659BA0, (unsigned int *)v2, 1);
  qword_659BC8 = 0;
  qword_659BC0 = 0;
  qword_659BB8 = (uint64_t)&qword_659BC0;
  qword_659BD0 = 0x7063776970646C6ELL;
  dword_659BD8 = 0;
  byte_659BDC = 0;
  sub_46A4C(qword_659BE0, (uint64_t)&unk_659BA0);
  word_659BF8 = word_659BF8 & 0xF800 | 0x421;
  qword_659C00 = 0x7063776970756C6ELL;
  dword_659C08 = 0;
  byte_659C0C = 0;
  sub_46A4C(qword_659C10, (uint64_t)&unk_659BA0);
  word_659C28 = word_659C28 & 0xF800 | 0x420;
  qword_659C38 = 0;
  unk_659C40 = 0;
  qword_659C30 = 0;
  int v0 = operator new(0x24uLL);
  qword_659C38 = (uint64_t)v0 + 36;
  unk_659C40 = (char *)v0 + 36;
  double result = 1.58366013e190;
  *int v0 = xmmword_4E7B10;
  v0[1] = xmmword_4E7B20;
  *((_DWORD *)v0 + 8) = 0;
  qword_659C30 = (uint64_t)v0;
  return result;
}

void *sub_483B8C()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_659C48, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_659C60, (unsigned int *)v5, 1);
  qword_659C88 = 0;
  qword_659C80 = 0;
  qword_659C78 = (uint64_t)&qword_659C80;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_659C90 = 3;
  sub_6367C((uint64_t)&unk_659C98, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_659CB0 = 3;
  sub_6367C((uint64_t)&unk_659CB8, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_659CD0 = 3;
  sub_6367C((uint64_t)&unk_659CD8, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_659CF0 = 3;
  sub_6367C((uint64_t)&unk_659CF8, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_659D10 = 3;
  sub_6367C((uint64_t)&unk_659D18, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_659D30 = 3;
  sub_6367C((uint64_t)&unk_659D38, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_659D50 = 2;
  sub_6367C((uint64_t)&unk_659D58, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_659D70 = 2;
  sub_6367C((uint64_t)&unk_659D78, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_659D90 = 2;
  sub_6367C((uint64_t)&unk_659D98, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_659DB0 = 2;
  sub_6367C((uint64_t)&unk_659DB8, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_659DD0 = 2;
  sub_6367C((uint64_t)&unk_659DD8, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_659DF0 = 2;
  sub_6367C((uint64_t)&unk_659DF8, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_659E10 = 2;
  sub_6367C((uint64_t)&unk_659E18, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_659E30 = 2;
  sub_6367C((uint64_t)&unk_659E38, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_659E50 = 2;
  sub_6367C((uint64_t)&unk_659E58, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_659E70 = 3;
  sub_6367C((uint64_t)&unk_659E78, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_659E90 = 2;
  sub_6367C((uint64_t)&unk_659E98, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_659EB0 = 2;
  sub_6367C((uint64_t)&unk_659EB8, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_659ED0 = 2;
  sub_6367C((uint64_t)&unk_659ED8, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_659EF0 = 3;
  sub_6367C((uint64_t)&unk_659EF8, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_659F10 = 2;
  sub_6367C((uint64_t)&unk_659F18, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_659F30 = 3;
  sub_6367C((uint64_t)&unk_659F38, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_659F50 = 2;
  sub_6367C((uint64_t)&unk_659F58, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_659F70 = 3;
  sub_6367C((uint64_t)&unk_659F78, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_659F90 = 2;
  sub_6367C((uint64_t)&unk_659F98, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_659FB0 = 3;
  sub_6367C((uint64_t)&unk_659FB8, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_659FD0 = 2;
  sub_6367C((uint64_t)&unk_659FD8, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_659FF0 = 3;
  sub_6367C((uint64_t)&unk_659FF8, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_65A010 = 2;
  sub_6AEC0(qword_65A018, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_65A030 = 3;
  sub_6AEC0(qword_65A038, (int *)v5, 1);
  *(void *)long long v5 = off_633E08;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_65A050, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633E50;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_65A098, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  int v0 = operator new(0x10uLL);
  *int v0 = &unk_65A050;
  v0[1] = &unk_65A098;
  qword_65A0E0 = (uint64_t)off_63E0B0;
  qword_65A0F0 = 0;
  unk_65A0F8 = 0;
  qword_65A0E8 = 0;
  sub_6B058(&qword_65A0E8, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_633E98;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65A100, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633EE0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65A148, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633F28;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_65A190, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633F70;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65A1D8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_633FB8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65A220, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  double result = sub_6AFD4(v5);
  qword_65A268 = (uint64_t)off_63E0E0;
  dword_65A270 = 6;
  qword_65A278 = (uint64_t)off_63E110;
  unk_65A280 = &qword_65A268;
  return result;
}

void sub_484488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t **sub_4844FC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65A288, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_636F8((uint64_t **)&unk_65A2A0, (unsigned int *)v1, 8);
  qword_65A2C8 = 0;
  qword_65A2C0 = 0;
  qword_65A2B8 = (uint64_t)&qword_65A2C0;
  return result;
}

uint64_t **sub_4845CC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65CDA0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_636F8((uint64_t **)&unk_65CDB8, (unsigned int *)v1, 8);
  qword_65CDE0 = 0;
  qword_65CDD8 = 0;
  qword_65CDD0 = (uint64_t)&qword_65CDD8;
  return result;
}

uint64_t sub_48469C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65CDE8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65CE00, (unsigned int *)v1, 1);
  qword_65CE28 = 0;
  qword_65CE20 = 0;
  qword_65CE18 = (uint64_t)&qword_65CE20;
  return result;
}

float sub_48476C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D0B0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D0C8, (unsigned int *)v1, 8);
  qword_65D0F0 = 0;
  qword_65D0E8 = 0;
  qword_65D0E0 = (uint64_t)&qword_65D0E8;
  return sub_16FEBC((uint64_t)&unk_65D0F8, 0, -96.0, 0.0);
}

uint64_t sub_484858()
{
  unsigned int v1 = 1986295651;
  return sub_6367C((uint64_t)&unk_65D128, &v1, 1);
}

uint64_t sub_484894()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D140, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  return sub_6367C((uint64_t)&unk_65D158, (unsigned int *)v1, 1);
}

uint64_t **sub_484948()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D180, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65D198, (unsigned int *)v1, 8);
  qword_65D1C0 = 0;
  qword_65D1B8 = 0;
  qword_65D1B0 = (uint64_t)&qword_65D1B8;
  return result;
}

uint64_t sub_484A18()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D1C8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D1E0, (unsigned int *)v1, 1);
  qword_65D208 = 0;
  qword_65D200 = 0;
  qword_65D1F8 = (uint64_t)&qword_65D200;
  return result;
}

uint64_t **sub_484AE8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D260, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65D278, (unsigned int *)v1, 8);
  qword_65D2A0 = 0;
  qword_65D298 = 0;
  qword_65D290 = (uint64_t)&qword_65D298;
  return result;
}

uint64_t sub_484BB8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D2A8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D2C0, (unsigned int *)v1, 1);
  qword_65D2E8 = 0;
  qword_65D2E0 = 0;
  qword_65D2D8 = (uint64_t)&qword_65D2E0;
  return result;
}

uint64_t sub_484C88()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D300, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D318, (unsigned int *)v1, 1);
  qword_65D340 = 0;
  qword_65D338 = 0;
  qword_65D330 = (uint64_t)&qword_65D338;
  return result;
}

uint64_t sub_484D58()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D348, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D360, (unsigned int *)v1, 1);
  qword_65D388 = 0;
  qword_65D380 = 0;
  qword_65D378 = (uint64_t)&qword_65D380;
  return result;
}

uint64_t sub_484E28()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D390, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D3A8, (unsigned int *)v1, 1);
  qword_65D3D0 = 0;
  qword_65D3C8 = 0;
  qword_65D3C0 = (uint64_t)&qword_65D3C8;
  return result;
}

uint64_t **sub_484EF8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D3D8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65D3F0, (unsigned int *)v1, 8);
  qword_65D418 = 0;
  qword_65D410 = 0;
  qword_65D408 = (uint64_t)&qword_65D410;
  return result;
}

double sub_484FC8()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D420, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D438, (unsigned int *)v1, 1);
  qword_65D460 = 0;
  qword_65D458 = 0;
  qword_65D450 = (uint64_t)&qword_65D458;
  qword_65D468 = 0x696E707473737263;
  dword_65D470 = 0;
  qword_65D478 = 0x6F75747053436873;
  dword_65D480 = 0;
  qword_65D488 = 0x6F75747053434474;
  dword_65D490 = 0;
  qword_65D498 = 0x6F75747053434465;
  dword_65D4A0 = 0;
  double result = 8.13208634e228;
  qword_65D4A8 = 0x6F75747053434461;
  dword_65D4B0 = 0;
  return result;
}

uint64_t sub_485110()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D4C0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D4D8, (unsigned int *)v1, 1);
  qword_65D500 = 0;
  qword_65D4F8 = 0;
  qword_65D4F0 = (uint64_t)&qword_65D4F8;
  return result;
}

uint64_t sub_4851E0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D508, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D520, (unsigned int *)v1, 8);
  qword_65D548 = 0;
  qword_65D540 = 0;
  qword_65D538 = (uint64_t)&qword_65D540;
  sub_E5310((uint64_t)&dword_668D98, 0, 1836412020, 1836412020);
  sub_E5310((uint64_t)&unk_65D550, 1, 1836412020, 1836412020);
  qword_668D60 = 0x696D646600000001;
  xmmword_668D68 = *(_OWORD *)sub_3AEE60();
  dword_668D78 = 0;
  qword_668D88 = 0;
  unk_668D90 = 0;
  qword_668D80 = 0;
  qword_6680B8 = 0x696D646600000000;
  xmmword_6680C0 = *(_OWORD *)sub_3AEE60();
  dword_6680D0 = 0;
  qword_6680E0 = 0;
  unk_6680E8 = 0;
  qword_6680D8 = 0;
  qword_668DD8 = 0;
  qword_668DD0 = (uint64_t)&qword_668DD8;
  qword_668DF0 = 0;
  qword_668DE0 = 0;
  unk_668DE8 = &qword_668DF0;
  qword_668E08 = 0;
  qword_668DF8 = 0;
  unk_668E00 = &qword_668E08;
  qword_668E10 = 0;
  qword_65D598 = 0;
  qword_65D590 = 0;
  qword_65D588 = (uint64_t)&qword_65D590;
  return sub_3747F4((uint64_t)&unk_6678A8, 0, &qword_57392C, &qword_573934, &qword_57393C, (uint64_t *)&unk_573948, &xmmword_573958, (uint64_t)&unk_573968);
}

uint64_t **sub_4853D8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D5C0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_65D5D8, (unsigned int *)v1, 8);
}

uint64_t sub_48548C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D5F0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D608, (unsigned int *)v1, 1);
  qword_65D630 = 0;
  qword_65D628 = 0;
  qword_65D620 = (uint64_t)&qword_65D628;
  return result;
}

void *sub_48555C()
{
  qword_65D638 = 0;
  qword_65D640 = 0;
  qword_65D648 = 0;
  qword_65D638 = (uint64_t)operator new(0x600uLL);
  uint64_t v0 = qword_65D638 + 1536;
  qword_65D648 = qword_65D638 + 1536;
  uint64_t result = memcpy((void *)qword_65D638, &unk_636218, 0x600uLL);
  qword_65D640 = v0;
  return result;
}

uint64_t sub_4855B0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D650, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  return sub_6367C((uint64_t)&unk_65D668, (unsigned int *)v1, 1);
}

uint64_t sub_485664()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D690, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D6A8, (unsigned int *)v1, 1);
  qword_65D6D0 = 0;
  qword_65D6C8 = 0;
  qword_65D6C0 = (uint64_t)&qword_65D6C8;
  return result;
}

uint64_t sub_485734()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D6D8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D6F0, (unsigned int *)v1, 1);
  qword_65D718 = 0;
  qword_65D710 = 0;
  qword_65D708 = (uint64_t)&qword_65D710;
  return result;
}

uint64_t **sub_485804()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D720, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_65D738, (unsigned int *)v1, 8);
}

double sub_4858B8()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D750, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D768, (unsigned int *)v2, 8);
  qword_65D790 = 0;
  qword_65D788 = 0;
  qword_65D780 = (uint64_t)&qword_65D788;
  if (MGGetSInt32Answer() == 6) {
    int v0 = 1;
  }
  else {
    int v0 = 3;
  }
  dword_65D798 = v0;
  qword_65D7A0 = 0x676C6F6261766170;
  dword_65D7A8 = 0;
  qword_65D7B0 = 0x676C6F6277736167;
  dword_65D7B8 = 0;
  qword_65D7C0 = 0x6F75747064697663;
  dword_65D7C8 = 0;
  double result = 8.13208713e228;
  qword_65D7D0 = 0x6F757470766F6C64;
  dword_65D7D8 = 0;
  return result;
}

uint64_t **sub_485A0C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D860, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_636F8((uint64_t **)&unk_65D878, (unsigned int *)v1, 8);
  qword_65D8A0 = 0;
  qword_65D898 = 0;
  qword_65D890 = (uint64_t)&qword_65D898;
  return result;
}

void sub_485ADC()
{
  sub_21C8C(&v7, "PRAM0");
  LODWORD(v9) = 0;
  sub_21C8C(&v10, "PRAM1");
  LODWORD(v12) = 0;
  sub_21C8C(&v13, "PRAM2");
  LODWORD(v15) = 0;
  sub_21C8C(&v16, "PRAM3");
  LODWORD(v19) = 0;
  sub_21C8C(v20, "PRAM4");
  int v21 = 0;
  sub_21C8C(v22, "XRAM0");
  int v23 = 1;
  sub_21C8C(v24, "XRAM1");
  int v25 = 1;
  sub_21C8C(v26, "XRAM2");
  int v27 = 1;
  sub_21C8C(v28, "XRAM3");
  int v29 = 1;
  sub_21C8C(v30, "YRAM0");
  int v31 = 2;
  sub_21C8C(v32, "YRAM1");
  int v33 = 2;
  sub_21C8C(v34, "YRAM2");
  int v35 = 2;
  sub_21C8C(v36, "YRAM3");
  int v37 = 2;
  sub_21C8C(v38, "ZRAM");
  int v39 = 3;
  sub_21C8C(v40, "ZREGS");
  int v41 = 5;
  sub_21C8C(v42, "STREAM_ARB");
  int v43 = 4;
  sub_2045C8((uint64_t **)&unk_65D8A8, &v7, 16);
  uint64_t v0 = 512;
  do
  {
    if (*((char *)&v7 + v0 - 9) < 0) {
      operator delete(*(void **)((char *)&v7 + v0 - 32));
    }
    v0 -= 32;
  }
  while (v0);
  unsigned int v1 = operator new(8uLL);
  *unsigned int v1 = 0x500000003;
  *(void *)&long long v7 = @"Registers";
  *((void *)&v7 + 1) = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_20478C((void *)&v7 + 1, v1, (uint64_t)(v1 + 1), 2uLL);
  long long v2 = operator new(8uLL);
  void *v2 = 0x500000003;
  CFStringRef v10 = @"Oversight";
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  sub_20478C(v11, v2, (uint64_t)(v2 + 1), 2uLL);
  long long v3 = operator new(8uLL);
  *long long v3 = 0x500000003;
  CFStringRef v13 = @"Filters";
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  sub_20478C(v14, v3, (uint64_t)(v3 + 1), 2uLL);
  char v4 = operator new(0x20uLL);
  _OWORD *v4 = xmmword_573A54;
  v4[1] = unk_573A64;
  CFStringRef v16 = @"FIR filters";
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_20478C(&v17, v4, (uint64_t)(v4 + 2), 8uLL);
  sub_204830((uint64_t **)&unk_65D8C0, (uint64_t)&v7, 4);
  for (uint64_t i = 0; i != -128; i -= 32)
  {
    long long v6 = *(void **)((char *)&v17 + i);
    if (v6)
    {
      *(uint64_t *)((char *)&v18 + i) = (uint64_t)v6;
      operator delete(v6);
    }
  }
  operator delete(v4);
  operator delete(v3);
  operator delete(v2);
  operator delete(v1);
}

void sub_485E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = *(void **)(v14 + v16 + 104);
    if (v17)
    {
      *(void *)(v14 + v16 + 112) = v17;
      operator delete(v17);
    }
    v16 -= 32;
    if (v16 == -128)
    {
      operator delete(v13);
      operator delete(v12);
      operator delete(v11);
      operator delete(v10);
      _Unwind_Resume(a1);
    }
  }
}

void sub_485FDC()
{
}

uint64_t **sub_485FE4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65D8D8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  double result = sub_636F8((uint64_t **)&unk_65D8F0, (unsigned int *)v1, 8);
  qword_65D918 = 0;
  qword_65D910 = 0;
  qword_65D908 = (uint64_t)&qword_65D910;
  return result;
}

uint64_t sub_4860B4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D998, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D9B0, (unsigned int *)v1, 1);
  qword_65D9D8 = 0;
  qword_65D9D0 = 0;
  qword_65D9C8 = (uint64_t)&qword_65D9D0;
  return result;
}

uint64_t sub_486184()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65D9E0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65D9F8, (unsigned int *)v1, 1);
  qword_65DA20 = 0;
  qword_65DA18 = 0;
  qword_65DA10 = (uint64_t)&qword_65DA18;
  return result;
}

uint64_t **sub_486254()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65DA28, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65DA40, (unsigned int *)v1, 8);
  qword_65DA68 = 0;
  qword_65DA60 = 0;
  qword_65DA58 = (uint64_t)&qword_65DA60;
  return result;
}

uint64_t **sub_486324()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65DA70, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65DA88, (unsigned int *)v1, 8);
  qword_65DAB0 = 0;
  qword_65DAA8 = 0;
  qword_65DAA0 = (uint64_t)&qword_65DAA8;
  return result;
}

uint64_t sub_4863F4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65DAB8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65DAD0, (unsigned int *)v1, 1);
  qword_65DAF8 = 0;
  qword_65DAF0 = 0;
  qword_65DAE8 = (uint64_t)&qword_65DAF0;
  return result;
}

uint64_t sub_4864C4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65DC50, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65DC68, (unsigned int *)v1, 1);
  qword_65DC90 = 0;
  qword_65DC88 = 0;
  qword_65DC80 = (uint64_t)&qword_65DC88;
  return result;
}

uint64_t **sub_486594()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65DC98, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65DCB0, (unsigned int *)v1, 8);
  qword_65DCD8 = 0;
  qword_65DCD0 = 0;
  qword_65DCC8 = (uint64_t)&qword_65DCD0;
  return result;
}

uint64_t sub_486664()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65DD38, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65DD50, (unsigned int *)v2, 1);
  qword_65DD78 = 0;
  qword_65DD70 = 0;
  qword_65DD68 = (uint64_t)&qword_65DD70;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_65DD80 = v1;
  return result;
}

void sub_486758()
{
  v0[8] = off_641340;
  _OWORD v0[9] = *(_OWORD *)"lovc";
  v0[10] = xmmword_641360;
  v0[11] = *(_OWORD *)&off_641370;
  v0[4] = xmmword_641300;
  v0[5] = *(_OWORD *)&off_641310;
  v0[6] = *(_OWORD *)"lovl";
  v0[7] = unk_641330;
  v0[0] = *(_OWORD *)"ulov";
  v0[1] = unk_6412D0;
  v0[2] = off_6412E0;
  v0[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65DD88, (unsigned int *)v0, 8);
  LODWORD(v0[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65DDA0, (unsigned int *)v0, 1);
  qword_65DDC0 = 0;
  qword_65DDC8 = 0;
  qword_65DDB8 = (uint64_t)&qword_65DDC0;
  xmmword_65DE20 = xmmword_4E78A0;
  xmmword_65DE40 = xmmword_4E78A0;
  xmmword_65E0A0 = xmmword_4E78B0;
  xmmword_65DF18 = xmmword_4E78B0;
  operator new();
}

double sub_4869D8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65E298, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65E2B0, (unsigned int *)v1, 8);
  qword_65E2D8 = 0;
  qword_65E2D0 = 0;
  qword_65E2C8 = (uint64_t)&qword_65E2D0;
  qword_65E2E0 = 0x7063787870737072;
  dword_65E2E8 = 0;
  byte_65E2EC = 0;
  sub_46A4C(qword_65E2F0, (uint64_t)&unk_65E298);
  word_65E308 = word_65E308 & 0xF800 | 0x21;
  double result = 7.28117508e199;
  qword_65E310 = 0x696E707473737263;
  dword_65E318 = 0;
  return result;
}

uint64_t **sub_486B04()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_65E320, (unsigned int *)v1, 8);
}

uint64_t sub_486B98()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65E448, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65E460, (unsigned int *)v2, 1);
  qword_65E488 = 0;
  qword_65E480 = 0;
  qword_65E478 = (uint64_t)&qword_65E480;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_65E490 = v1;
  return result;
}

uint64_t sub_486C8C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65E498, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65E4B0, (unsigned int *)v1, 1);
  qword_65E4D8 = 0;
  qword_65E4D0 = 0;
  qword_65E4C8 = (uint64_t)&qword_65E4D0;
  return result;
}

void *sub_486D5C()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65E4E0, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_65E4F8, (unsigned int *)v5, 1);
  qword_65E520 = 0;
  qword_65E518 = 0;
  qword_65E510 = (uint64_t)&qword_65E518;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_65E528 = 3;
  sub_6367C((uint64_t)&unk_65E530, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_65E548 = 3;
  sub_6367C((uint64_t)&unk_65E550, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_65E568 = 3;
  sub_6367C((uint64_t)&unk_65E570, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_65E588 = 3;
  sub_6367C((uint64_t)&unk_65E590, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_65E5A8 = 3;
  sub_6367C((uint64_t)&unk_65E5B0, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_65E5C8 = 3;
  sub_6367C((uint64_t)&unk_65E5D0, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_65E5E8 = 2;
  sub_6367C((uint64_t)&unk_65E5F0, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_65E608 = 2;
  sub_6367C((uint64_t)&unk_65E610, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_65E628 = 2;
  sub_6367C((uint64_t)&unk_65E630, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_65E648 = 2;
  sub_6367C((uint64_t)&unk_65E650, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_65E668 = 2;
  sub_6367C((uint64_t)&unk_65E670, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_65E688 = 2;
  sub_6367C((uint64_t)&unk_65E690, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_65E6A8 = 2;
  sub_6367C((uint64_t)&unk_65E6B0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_65E6C8 = 2;
  sub_6367C((uint64_t)&unk_65E6D0, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_65E6E8 = 2;
  sub_6367C((uint64_t)&unk_65E6F0, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_65E708 = 3;
  sub_6367C((uint64_t)&unk_65E710, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_65E728 = 2;
  sub_6367C((uint64_t)&unk_65E730, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_65E748 = 2;
  sub_6367C((uint64_t)&unk_65E750, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65E768 = 2;
  sub_6367C((uint64_t)&unk_65E770, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65E788 = 3;
  sub_6367C((uint64_t)&unk_65E790, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65E7A8 = 2;
  sub_6367C((uint64_t)&unk_65E7B0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65E7C8 = 3;
  sub_6367C((uint64_t)&unk_65E7D0, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65E7E8 = 2;
  sub_6367C((uint64_t)&unk_65E7F0, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65E808 = 3;
  sub_6367C((uint64_t)&unk_65E810, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_65E828 = 2;
  sub_6367C((uint64_t)&unk_65E830, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_65E848 = 3;
  sub_6367C((uint64_t)&unk_65E850, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_65E868 = 2;
  sub_6367C((uint64_t)&unk_65E870, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_65E888 = 3;
  sub_6367C((uint64_t)&unk_65E890, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_65E8A8 = 2;
  sub_6AEC0(qword_65E8B0, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_65E8C8 = 3;
  sub_6AEC0(qword_65E8D0, (int *)v5, 1);
  *(void *)long long v5 = off_63AD18;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_65E8E8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63AD60;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_65E930, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  uint64_t v0 = operator new(0x10uLL);
  *uint64_t v0 = &unk_65E8E8;
  v0[1] = &unk_65E930;
  qword_65E978 = (uint64_t)off_63E0B0;
  qword_65E988 = 0;
  unk_65E990 = 0;
  qword_65E980 = 0;
  sub_6B058(&qword_65E980, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_63ADA8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65E998, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63ADF0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65E9E0, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63AE38;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_65EA28, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63AE80;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65EA70, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63AEC8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65EAB8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_65EB00 = (uint64_t)off_63E0E0;
  dword_65EB08 = 6;
  qword_65EB10 = (uint64_t)off_63E110;
  *(void *)algn_65EB18 = &qword_65EB00;
  return result;
}

void sub_487658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t *sub_4876CC()
{
  unsigned int v1 = 1986295651;
  sub_6367C((uint64_t)&unk_65EB20, &v1, 1);
  qword_65EB38 = 0x7063776970687774;
  dword_65EB40 = 0;
  byte_65EB44 = 0;
  uint64_t result = sub_46A4C((uint64_t *)&algn_65EB45[3], (uint64_t)&unk_65EB20);
  word_65EB60 = word_65EB60 & 0xF800 | 0x407;
  return result;
}

uint64_t sub_487750()
{
  LODWORD(v1) = 1986295651;
  sub_6367C((uint64_t)&unk_65EB68, (unsigned int *)&v1, 1);
  qword_65EB80 = 0x706362696C70696ELL;
  dword_65EB88 = 0;
  byte_65EB8C = 0;
  uint64_t v1 = 0x766D696E766F6464;
  sub_6367C((uint64_t)&unk_65EB90, (unsigned int *)&v1, 2);
  word_65EBA8 = word_65EBA8 & 0xF800 | 0x630;
  qword_65EBB0 = 0x706362696870696ELL;
  dword_65EBB8 = 0;
  byte_65EBBC = 0;
  LODWORD(v1) = 1987011684;
  uint64_t result = sub_6367C((uint64_t)&unk_65EBC0, (unsigned int *)&v1, 1);
  word_65EBD8 = word_65EBD8 & 0xF800 | 0x630;
  return result;
}

void *sub_487854()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65EBE0, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_65EBF8, (unsigned int *)v5, 1);
  qword_65EC20 = 0;
  qword_65EC18 = 0;
  qword_65EC10 = (uint64_t)&qword_65EC18;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_65EC28 = 3;
  sub_6367C((uint64_t)&unk_65EC30, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_65EC48 = 3;
  sub_6367C((uint64_t)&unk_65EC50, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_65EC68 = 3;
  sub_6367C((uint64_t)&unk_65EC70, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_65EC88 = 3;
  sub_6367C((uint64_t)&unk_65EC90, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_65ECA8 = 3;
  sub_6367C((uint64_t)&unk_65ECB0, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_65ECC8 = 3;
  sub_6367C((uint64_t)&unk_65ECD0, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_65ECE8 = 2;
  sub_6367C((uint64_t)&unk_65ECF0, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_65ED08 = 2;
  sub_6367C((uint64_t)&unk_65ED10, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_65ED28 = 2;
  sub_6367C((uint64_t)&unk_65ED30, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_65ED48 = 2;
  sub_6367C((uint64_t)&unk_65ED50, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_65ED68 = 2;
  sub_6367C((uint64_t)&unk_65ED70, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_65ED88 = 2;
  sub_6367C((uint64_t)&unk_65ED90, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_65EDA8 = 2;
  sub_6367C((uint64_t)&unk_65EDB0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_65EDC8 = 2;
  sub_6367C((uint64_t)&unk_65EDD0, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_65EDE8 = 2;
  sub_6367C((uint64_t)&unk_65EDF0, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_65EE08 = 3;
  sub_6367C((uint64_t)&unk_65EE10, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_65EE28 = 2;
  sub_6367C((uint64_t)&unk_65EE30, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_65EE48 = 2;
  sub_6367C((uint64_t)&unk_65EE50, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65EE68 = 2;
  sub_6367C((uint64_t)&unk_65EE70, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65EE88 = 3;
  sub_6367C((uint64_t)&unk_65EE90, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65EEA8 = 2;
  sub_6367C((uint64_t)&unk_65EEB0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65EEC8 = 3;
  sub_6367C((uint64_t)&unk_65EED0, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65EEE8 = 2;
  sub_6367C((uint64_t)&unk_65EEF0, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65EF08 = 3;
  sub_6367C((uint64_t)&unk_65EF10, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_65EF28 = 2;
  sub_6367C((uint64_t)&unk_65EF30, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_65EF48 = 3;
  sub_6367C((uint64_t)&unk_65EF50, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_65EF68 = 2;
  sub_6367C((uint64_t)&unk_65EF70, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_65EF88 = 3;
  sub_6367C((uint64_t)&unk_65EF90, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_65EFA8 = 2;
  sub_6AEC0(qword_65EFB0, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_65EFC8 = 3;
  sub_6AEC0(qword_65EFD0, (int *)v5, 1);
  *(void *)long long v5 = off_63B370;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_65EFE8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B3B8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_65F030, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  uint64_t v0 = operator new(0x10uLL);
  *uint64_t v0 = &unk_65EFE8;
  v0[1] = &unk_65F030;
  qword_65F078 = (uint64_t)off_63E0B0;
  qword_65F088 = 0;
  unk_65F090 = 0;
  qword_65F080 = 0;
  sub_6B058(&qword_65F080, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_63B400;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65F098, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B448;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65F0E0, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B490;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_65F128, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B4D8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65F170, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B520;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65F1B8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_65F200 = (uint64_t)off_63E0E0;
  dword_65F208 = 6;
  qword_65F210 = (uint64_t)off_63E110;
  *(void *)algn_65F218 = &qword_65F200;
  return result;
}

void sub_488150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

void *sub_4881C4()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65F220, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_65F238, (unsigned int *)v5, 1);
  qword_65F260 = 0;
  qword_65F258 = 0;
  qword_65F250 = (uint64_t)&qword_65F258;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_65F268 = 3;
  sub_6367C((uint64_t)&unk_65F270, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_65F288 = 3;
  sub_6367C((uint64_t)&unk_65F290, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_65F2A8 = 3;
  sub_6367C((uint64_t)&unk_65F2B0, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_65F2C8 = 3;
  sub_6367C((uint64_t)&unk_65F2D0, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_65F2E8 = 3;
  sub_6367C((uint64_t)&unk_65F2F0, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_65F308 = 3;
  sub_6367C((uint64_t)&unk_65F310, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_65F328 = 2;
  sub_6367C((uint64_t)&unk_65F330, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_65F348 = 2;
  sub_6367C((uint64_t)&unk_65F350, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_65F368 = 2;
  sub_6367C((uint64_t)&unk_65F370, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_65F388 = 2;
  sub_6367C((uint64_t)&unk_65F390, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_65F3A8 = 2;
  sub_6367C((uint64_t)&unk_65F3B0, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_65F3C8 = 2;
  sub_6367C((uint64_t)&unk_65F3D0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_65F3E8 = 2;
  sub_6367C((uint64_t)&unk_65F3F0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_65F408 = 2;
  sub_6367C((uint64_t)&unk_65F410, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_65F428 = 2;
  sub_6367C((uint64_t)&unk_65F430, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_65F448 = 3;
  sub_6367C((uint64_t)&unk_65F450, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_65F468 = 2;
  sub_6367C((uint64_t)&unk_65F470, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_65F488 = 2;
  sub_6367C((uint64_t)&unk_65F490, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65F4A8 = 2;
  sub_6367C((uint64_t)&unk_65F4B0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65F4C8 = 3;
  sub_6367C((uint64_t)&unk_65F4D0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65F4E8 = 2;
  sub_6367C((uint64_t)&unk_65F4F0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65F508 = 3;
  sub_6367C((uint64_t)&unk_65F510, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65F528 = 2;
  sub_6367C((uint64_t)&unk_65F530, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65F548 = 3;
  sub_6367C((uint64_t)&unk_65F550, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_65F568 = 2;
  sub_6367C((uint64_t)&unk_65F570, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_65F588 = 3;
  sub_6367C((uint64_t)&unk_65F590, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_65F5A8 = 2;
  sub_6367C((uint64_t)&unk_65F5B0, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_65F5C8 = 3;
  sub_6367C((uint64_t)&unk_65F5D0, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_65F5E8 = 2;
  sub_6AEC0(qword_65F5F0, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_65F608 = 3;
  sub_6AEC0(qword_65F610, (int *)v5, 1);
  *(void *)long long v5 = off_63B568;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_65F628, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B5B0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_65F670, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  uint64_t v0 = operator new(0x10uLL);
  *uint64_t v0 = &unk_65F628;
  v0[1] = &unk_65F670;
  qword_65F6B8 = (uint64_t)off_63E0B0;
  qword_65F6C8 = 0;
  unk_65F6D0 = 0;
  qword_65F6C0 = 0;
  sub_6B058(&qword_65F6C0, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_63B5F8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65F6D8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B640;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_65F720, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B688;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_65F768, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B6D0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65F7B0, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63B718;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_65F7F8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_65F840 = (uint64_t)off_63E0E0;
  dword_65F848 = 6;
  qword_65F850 = (uint64_t)off_63E110;
  *(void *)algn_65F858 = &qword_65F840;
  return result;
}

void sub_488AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t **sub_488B34()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65F860, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65F878, (unsigned int *)v1, 8);
  qword_65F8A0 = 0;
  qword_65F898 = 0;
  qword_65F890 = (uint64_t)&qword_65F898;
  return result;
}

uint64_t sub_488C04()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65F8A8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65F8C0, (unsigned int *)v1, 1);
  qword_65F8E8 = 0;
  qword_65F8E0 = 0;
  qword_65F8D8 = (uint64_t)&qword_65F8E0;
  return result;
}

uint64_t **sub_488CD4()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65F8F0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65F908, (unsigned int *)v1, 8);
  qword_65F930 = 0;
  qword_65F928 = 0;
  qword_65F920 = (uint64_t)&qword_65F928;
  return result;
}

uint64_t **sub_488DA4()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_65F938, (unsigned int *)v1, 8);
}

uint64_t sub_488E38()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65F950, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65F968, (unsigned int *)v1, 1);
  qword_65F990 = 0;
  qword_65F988 = 0;
  qword_65F980 = (uint64_t)&qword_65F988;
  return result;
}

uint64_t sub_488F08()
{
  unsigned int v1 = 1986295651;
  return sub_6367C((uint64_t)&unk_65F998, &v1, 1);
}

uint64_t *sub_488F44()
{
  v3[8] = off_641340;
  v3[9] = *(_OWORD *)"lovc";
  v3[10] = xmmword_641360;
  v3[11] = *(_OWORD *)&off_641370;
  v3[4] = xmmword_641300;
  v3[5] = *(_OWORD *)&off_641310;
  v3[6] = *(_OWORD *)"lovl";
  v3[7] = unk_641330;
  v3[0] = *(_OWORD *)"ulov";
  v3[1] = unk_6412D0;
  _OWORD v3[2] = off_6412E0;
  uint64_t v3[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65F9C0, (unsigned int *)v3, 8);
  LODWORD(v3[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65F9D8, (unsigned int *)v3, 1);
  qword_65F9F8 = 0;
  qword_65FA00 = 0;
  qword_65F9F0 = (uint64_t)&qword_65F9F8;
  qword_65FA08 = 0x7063776970647370;
  if (sub_20ACA4())
  {
    dword_65FA10 = 1701867895;
    byte_65FA14 = 1;
  }
  else
  {
    byte_65FA14 = 1;
    dword_65FA10 = 1701868910;
  }
  sub_46A4C(&qword_65FA18, (uint64_t)&unk_65F9D8);
  word_65FA30 = word_65FA30 & 0xFFC0 | 0x1E;
  if (sub_20ACA4()) {
    __int16 v0 = 1600;
  }
  else {
    __int16 v0 = 1536;
  }
  word_65FA30 = word_65FA30 & 0xF83F | v0;
  qword_65FA38 = 0x706377697068646DLL;
  if (sub_20ACA4())
  {
    dword_65FA40 = 1701867895;
    byte_65FA44 = 1;
  }
  else
  {
    byte_65FA44 = 1;
    dword_65FA40 = 1701868910;
  }
  sub_46A4C(&qword_65FA48, (uint64_t)&unk_65F9D8);
  word_65FA60 = word_65FA60 & 0xFFC0 | 0x1E;
  if (sub_20ACA4()) {
    __int16 v1 = 1600;
  }
  else {
    __int16 v1 = 1536;
  }
  word_65FA60 = word_65FA60 & 0xF83F | v1;
  qmemcpy(&qword_65FA68, "tdhpxxcpnupe", 12);
  byte_65FA74 = 1;
  uint64_t result = sub_46A4C(qword_65FA78, (uint64_t)&unk_65F9D8);
  word_65FA90 = word_65FA90 & 0xF800 | 0x68F;
  return result;
}

void sub_489198(_Unwind_Exception *a1)
{
}

uint64_t sub_4891CC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FA98, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65FAB0, (unsigned int *)v1, 1);
  qword_65FAD8 = 0;
  qword_65FAD0 = 0;
  qword_65FAC8 = (uint64_t)&qword_65FAD0;
  return result;
}

uint64_t **sub_48929C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65FB00, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_65FB18, (unsigned int *)v1, 8);
  qword_65FB40 = 0;
  qword_65FB38 = 0;
  qword_65FB30 = (uint64_t)&qword_65FB38;
  return result;
}

void sub_48936C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FB48, (unsigned int *)v1, 8);
}

uint64_t sub_489418()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FB60, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65FB78, (unsigned int *)v1, 1);
  qword_65FBA0 = 0;
  qword_65FB98 = 0;
  qword_65FB90 = (uint64_t)&qword_65FB98;
  return result;
}

void sub_4894E8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65FBA8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FBC0, (unsigned int *)v1, 8);
  qword_65FBE8 = 0;
  qword_65FBE0 = 0;
  qword_65FBD8 = (uint64_t)&qword_65FBE0;
}

uint64_t sub_4895D0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FBF0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65FC08, (unsigned int *)v1, 1);
  qword_65FC30 = 0;
  qword_65FC28 = 0;
  qword_65FC20 = (uint64_t)&qword_65FC28;
  return result;
}

void sub_4896A0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_65FC38, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FC50, (unsigned int *)v1, 8);
}

uint64_t sub_48976C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FC68, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_65FC80, (unsigned int *)v1, 1);
  qword_65FCA8 = 0;
  qword_65FCA0 = 0;
  qword_65FC98 = (uint64_t)&qword_65FCA0;
  return result;
}

void *sub_48983C()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_65FCB0, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_65FCC8, (unsigned int *)v5, 1);
  qword_65FCF0 = 0;
  qword_65FCE8 = 0;
  qword_65FCE0 = (uint64_t)&qword_65FCE8;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_65FCF8 = 3;
  sub_6367C((uint64_t)&unk_65FD00, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_65FD18 = 3;
  sub_6367C((uint64_t)&unk_65FD20, (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_65FD38 = 3;
  sub_6367C((uint64_t)&unk_65FD40, (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_65FD58 = 3;
  sub_6367C((uint64_t)&unk_65FD60, (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_65FD78 = 3;
  sub_6367C((uint64_t)&unk_65FD80, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_65FD98 = 3;
  sub_6367C((uint64_t)&unk_65FDA0, (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_65FDB8 = 2;
  sub_6367C((uint64_t)&unk_65FDC0, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_65FDD8 = 2;
  sub_6367C((uint64_t)&unk_65FDE0, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_65FDF8 = 2;
  sub_6367C((uint64_t)&unk_65FE00, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_65FE18 = 2;
  sub_6367C((uint64_t)&unk_65FE20, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_65FE38 = 2;
  sub_6367C((uint64_t)&unk_65FE40, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_65FE58 = 2;
  sub_6367C((uint64_t)&unk_65FE60, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_65FE78 = 2;
  sub_6367C((uint64_t)&unk_65FE80, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_65FE98 = 2;
  sub_6367C((uint64_t)&unk_65FEA0, (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_65FEB8 = 2;
  sub_6367C((uint64_t)&unk_65FEC0, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_65FED8 = 3;
  sub_6367C((uint64_t)&unk_65FEE0, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_65FEF8 = 2;
  sub_6367C((uint64_t)&unk_65FF00, (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_65FF18 = 2;
  sub_6367C((uint64_t)&unk_65FF20, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65FF38 = 2;
  sub_6367C((uint64_t)&unk_65FF40, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_65FF58 = 3;
  sub_6367C((uint64_t)&unk_65FF60, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65FF78 = 2;
  sub_6367C((uint64_t)&unk_65FF80, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_65FF98 = 3;
  sub_6367C((uint64_t)&unk_65FFA0, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65FFB8 = 2;
  sub_6367C((uint64_t)&unk_65FFC0, (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_65FFD8 = 3;
  sub_6367C((uint64_t)&unk_65FFE0, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_65FFF8 = 2;
  sub_6367C((uint64_t)&unk_660000, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_660018 = 3;
  sub_6367C((uint64_t)&unk_660020, (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_660038 = 2;
  sub_6367C((uint64_t)&unk_660040, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_660058 = 3;
  sub_6367C((uint64_t)&unk_660060, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_660078 = 2;
  sub_6AEC0(qword_660080, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_660098 = 3;
  sub_6AEC0(qword_6600A0, (int *)v5, 1);
  *(void *)long long v5 = off_63C490;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_6600B8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63C4D8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_660100, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  __int16 v0 = operator new(0x10uLL);
  *__int16 v0 = &unk_6600B8;
  v0[1] = &unk_660100;
  qword_660148 = (uint64_t)off_63E0B0;
  qword_660158 = 0;
  unk_660160 = 0;
  qword_660150 = 0;
  sub_6B058(&qword_660150, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_63C520;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_660168, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63C568;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_6601B0, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63C5B0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_6601F8, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63C5F8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_660240, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63C640;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_660288, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_6602D0 = (uint64_t)off_63E0E0;
  dword_6602D8 = 6;
  qword_6602E0 = (uint64_t)off_63E110;
  *(void *)algn_6602E8 = &qword_6602D0;
  return result;
}

void sub_48A138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_48A1AC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6602F0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_660308, (unsigned int *)v1, 1);
  qword_660330 = 0;
  qword_660328 = 0;
  qword_660320 = (uint64_t)&qword_660328;
  return result;
}

uint64_t **sub_48A27C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_660338, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_660350, (unsigned int *)v1, 8);
  qword_660378 = 0;
  qword_660370 = 0;
  qword_660368 = (uint64_t)&qword_660370;
  return result;
}

uint64_t sub_48A34C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6603F8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_660410, (unsigned int *)v1, 1);
  qword_660438 = 0;
  qword_660430 = 0;
  qword_660428 = (uint64_t)&qword_660430;
  return result;
}

uint64_t **sub_48A41C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_660440, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_660458, (unsigned int *)v1, 8);
  qword_660480 = 0;
  qword_660478 = 0;
  qword_660470 = (uint64_t)&qword_660478;
  return result;
}

uint64_t sub_48A4EC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6604A0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_6604B8, (unsigned int *)v1, 1);
  qword_6604E0 = 0;
  qword_6604D8 = 0;
  qword_6604D0 = (uint64_t)&qword_6604D8;
  return result;
}

uint64_t *sub_48A5BC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6604E8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_660500, (unsigned int *)v1, 8);
  qword_660528 = 0;
  qword_660520 = 0;
  qword_660518 = (uint64_t)&qword_660520;
  qword_660530 = 0x6F757470734D7574;
  dword_660538 = 0;
  qword_660540 = 0x706362697073706BLL;
  dword_660548 = 0;
  byte_66054C = 0;
  uint64_t result = sub_46A4C(qword_660550, (uint64_t)&unk_6604E8);
  word_660568 = word_660568 & 0xF800 | 0x43C;
  return result;
}

uint64_t **sub_48A6E8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_660570, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_660588, (unsigned int *)v1, 8);
  qword_6605B0 = 0;
  qword_6605A8 = 0;
  qword_6605A0 = (uint64_t)&qword_6605A8;
  return result;
}

uint64_t **sub_48A7B8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_660BD0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_660BE8, (unsigned int *)v1, 8);
}

uint64_t sub_48A86C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_660C60, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_660C78, (unsigned int *)v1, 1);
  qword_660CA0 = 0;
  qword_660C98 = 0;
  qword_660C90 = (uint64_t)&qword_660C98;
  return result;
}

uint64_t sub_48A93C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_660CA8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_660CC0, (unsigned int *)v1, 1);
  qword_660CE8 = 0;
  qword_660CE0 = 0;
  qword_660CD8 = (uint64_t)&qword_660CE0;
  return result;
}

uint64_t sub_48AA0C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_660CF0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_660D08, (unsigned int *)v1, 1);
  qword_660D30 = 0;
  qword_660D28 = 0;
  qword_660D20 = (uint64_t)&qword_660D28;
  return result;
}

uint64_t **sub_48AADC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_660D38, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_660D50, (unsigned int *)v1, 8);
  qword_660D78 = 0;
  qword_660D70 = 0;
  qword_660D68 = (uint64_t)&qword_660D70;
  return result;
}

uint64_t sub_48ABAC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_660D80, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_660D98, (unsigned int *)v1, 1);
  qword_660DC0 = 0;
  qword_660DB8 = 0;
  qword_660DB0 = (uint64_t)&qword_660DB8;
  return result;
}

uint64_t **sub_48AC7C()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_660DC8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_660DE0, (unsigned int *)v1, 8);
  qword_660E08 = 0;
  qword_660E00 = 0;
  qword_660DF8 = (uint64_t)&qword_660E00;
  return result;
}

uint64_t sub_48AD4C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_660E10, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_660E28, (unsigned int *)v1, 1);
  qword_660E50 = 0;
  qword_660E48 = 0;
  qword_660E40 = (uint64_t)&qword_660E48;
  return result;
}

void *sub_48AE1C()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_660E58, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_660E70, (unsigned int *)v5, 1);
  qword_660E98 = 0;
  qword_660E90 = 0;
  qword_660E88 = (uint64_t)&qword_660E90;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_660EA0 = 3;
  sub_6367C((uint64_t)&algn_660EA4[4], (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_660EC0 = 3;
  sub_6367C((uint64_t)&algn_660EC4[4], (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_660EE0 = 3;
  sub_6367C((uint64_t)&algn_660EE4[4], (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_660F00 = 3;
  sub_6367C((uint64_t)&algn_660F04[4], (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_660F20 = 3;
  sub_6367C((uint64_t)&algn_660F24[4], (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_660F40 = 3;
  sub_6367C((uint64_t)&algn_660F44[4], (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_660F60 = 2;
  sub_6367C((uint64_t)&algn_660F64[4], (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_660F80 = 2;
  sub_6367C((uint64_t)&algn_660F84[4], (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_660FA0 = 2;
  sub_6367C((uint64_t)&algn_660FA4[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_660FC0 = 2;
  sub_6367C((uint64_t)&algn_660FC4[4], (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_660FE0 = 2;
  sub_6367C((uint64_t)&algn_660FE4[4], (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_661000 = 2;
  sub_6367C((uint64_t)&algn_661004[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_661020 = 2;
  sub_6367C((uint64_t)&algn_661024[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_661040 = 2;
  sub_6367C((uint64_t)&algn_661044[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_661060 = 2;
  sub_6367C((uint64_t)&algn_661064[4], (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_661080 = 3;
  sub_6367C((uint64_t)&algn_661084[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_6610A0 = 2;
  sub_6367C((uint64_t)&algn_6610A4[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_6610C0 = 2;
  sub_6367C((uint64_t)&algn_6610C4[4], (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_6610E0 = 2;
  sub_6367C((uint64_t)&algn_6610E4[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_661100 = 3;
  sub_6367C((uint64_t)&algn_661104[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_661120 = 2;
  sub_6367C((uint64_t)&algn_661124[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_661140 = 3;
  sub_6367C((uint64_t)&algn_661144[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_661160 = 2;
  sub_6367C((uint64_t)&algn_661164[4], (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_661180 = 3;
  sub_6367C((uint64_t)&algn_661184[4], (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_6611A0 = 2;
  sub_6367C((uint64_t)&algn_6611A4[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_6611C0 = 3;
  sub_6367C((uint64_t)&algn_6611C4[4], (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_6611E0 = 2;
  sub_6367C((uint64_t)&algn_6611E4[4], (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_661200 = 3;
  sub_6367C((uint64_t)&algn_661204[4], (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_661220 = 2;
  sub_6AEC0((uint64_t *)&algn_661224[4], (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_661240 = 3;
  sub_6AEC0((uint64_t *)&algn_661244[4], (int *)v5, 1);
  *(void *)long long v5 = off_63D2E8;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_661260, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63D330;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_6612A8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  __int16 v0 = operator new(0x10uLL);
  *__int16 v0 = &unk_661260;
  v0[1] = &unk_6612A8;
  qword_6612F0 = (uint64_t)off_63E0B0;
  qword_661300 = 0;
  unk_661308 = 0;
  qword_6612F8 = 0;
  sub_6B058(&qword_6612F8, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_63D378;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_661310, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63D3C0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_661358, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63D408;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_6613A0, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63D450;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_6613E8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63D498;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_661430, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_661478 = (uint64_t)off_63E0E0;
  dword_661480 = 6;
  qword_661488 = (uint64_t)off_63E110;
  unk_661490 = &qword_661478;
  return result;
}

void sub_48B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_48B78C()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_661498, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6614B0, (unsigned int *)v2, 8);
  qword_6614D8 = 0;
  qword_6614D0 = 0;
  qword_6614C8 = (uint64_t)&qword_6614D0;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_6614E0 = v1;
  return result;
}

uint64_t sub_48B880()
{
  unsigned int v1 = 1986295651;
  return sub_6367C((uint64_t)&unk_661558, &v1, 1);
}

uint64_t **sub_48B8BC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_661570, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_661588, (unsigned int *)v1, 8);
}

uint64_t **sub_48B970()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6615C8, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_6615E0, (unsigned int *)v1, 8);
  qword_661608 = 0;
  qword_661600 = 0;
  qword_6615F8 = (uint64_t)&qword_661600;
  return result;
}

void sub_48BA40()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_661610, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_661628, (unsigned int *)v1, 1);
  qword_661650 = 0;
  qword_661648 = 0;
  qword_661640 = (uint64_t)&qword_661648;
}

void *sub_48BB28()
{
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v11 = off_641340;
  *(_OWORD *)long long v5 = *(_OWORD *)"ulov";
  *(_OWORD *)&char v5[16] = unk_6412D0;
  *(_OWORD *)&v5[32] = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_661678, (unsigned int *)v5, 8);
  *(_DWORD *)long long v5 = 1986295651;
  sub_6367C((uint64_t)&unk_661690, (unsigned int *)v5, 1);
  qword_6616B8 = 0;
  qword_6616B0 = 0;
  qword_6616A8 = (uint64_t)&qword_6616B0;
  qmemcpy(v2, "ivpvovpvcvmrsibitcmgcvmicomicgpv", sizeof(v2));
  qmemcpy(v5, "tcmgcvmicomicgpvivpvovpvcvmrsibi", 32);
  dword_6616C0 = 3;
  sub_6367C((uint64_t)&qword_6616C8, (unsigned int *)v5, 8);
  qmemcpy(v5, "plmitcmgcvmicomicgpvivpvovpvcvmrsibi", 36);
  dword_6616E0 = 3;
  sub_6367C((uint64_t)&algn_6616E4[4], (unsigned int *)v5, 9);
  *(_OWORD *)long long v5 = xmmword_4E7850;
  dword_661700 = 3;
  sub_6367C((uint64_t)&algn_661704[4], (unsigned int *)v5, 4);
  *(_OWORD *)long long v5 = xmmword_4E7860;
  dword_661720 = 3;
  sub_6367C((uint64_t)&algn_661724[4], (unsigned int *)v5, 4);
  qmemcpy(v5, "cgpvivpvovpvcvmrsibi", 20);
  dword_661740 = 3;
  sub_6367C((uint64_t)&qword_661748, (unsigned int *)v5, 5);
  qmemcpy(v5, "tcmgcgpvcvmiivpvovpvcvmrsibi", 28);
  dword_661760 = 3;
  sub_6367C((uint64_t)&algn_661764[4], (unsigned int *)v5, 7);
  *(_OWORD *)long long v5 = v2[1];
  *(_OWORD *)&char v5[16] = v2[0];
  dword_661780 = 2;
  sub_6367C((uint64_t)&qword_661788, (unsigned int *)v5, 8);
  *(_OWORD *)long long v5 = xmmword_4E7870;
  dword_6617A0 = 2;
  sub_6367C((uint64_t)&qword_6617A8, (unsigned int *)v5, 4);
  *(_DWORD *)long long v5 = 1918990112;
  dword_6617C0 = 2;
  sub_6367C((uint64_t)&qword_6617C8, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1836281204;
  dword_6617E0 = 2;
  sub_6367C((uint64_t)&algn_6617E4[4], (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x7670766976706763;
  dword_661800 = 2;
  sub_6367C((uint64_t)&qword_661808, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 1987080813;
  dword_661820 = 2;
  sub_6367C((uint64_t)&qword_661828, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1987208039;
  dword_661840 = 2;
  sub_6367C((uint64_t)&algn_661844[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1919776355;
  dword_661860 = 2;
  sub_6367C((uint64_t)&algn_661864[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "plmirvmierpspcpspcts", 20);
  dword_661880 = 2;
  sub_6367C((uint64_t)&qword_661888, (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1768778864;
  dword_6618A0 = 3;
  sub_6367C((uint64_t)&qword_6618A8, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1768776806;
  dword_6618C0 = 2;
  sub_6367C((uint64_t)&algn_6618C4[4], (unsigned int *)v5, 1);
  qmemcpy(v5, "pctspcpserps", 12);
  dword_6618E0 = 2;
  sub_6367C((uint64_t)&qword_6618E8, (unsigned int *)v5, 3);
  *(_DWORD *)long long v5 = 1751212899;
  dword_661900 = 2;
  sub_6367C((uint64_t)&qword_661908, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1751212899;
  dword_661920 = 3;
  sub_6367C((uint64_t)&qword_661928, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_661940 = 2;
  sub_6367C((uint64_t)&qword_661948, (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986556788;
  dword_661960 = 3;
  sub_6367C((uint64_t)&qword_661968, (unsigned int *)v5, 1);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_661980 = 2;
  sub_6367C((uint64_t)&algn_661984[4], (unsigned int *)v5, 5);
  qmemcpy(v5, "gcrvmorvtshvisrvtsav", 20);
  dword_6619A0 = 3;
  sub_6367C((uint64_t)&algn_6619A4[4], (unsigned int *)v5, 5);
  *(_DWORD *)long long v5 = 1986098036;
  dword_6619C0 = 2;
  sub_6367C((uint64_t)&algn_6619C4[4], (unsigned int *)v5, 1);
  *(_DWORD *)long long v5 = 1986098036;
  dword_6619E0 = 3;
  sub_6367C((uint64_t)&algn_6619E4[4], (unsigned int *)v5, 1);
  *(void *)long long v5 = 0x6563692065637620;
  dword_661A00 = 2;
  sub_6367C((uint64_t)&qword_661A08, (unsigned int *)v5, 2);
  *(void *)long long v5 = 0x6563692065637620;
  dword_661A20 = 3;
  sub_6367C((uint64_t)&qword_661A28, (unsigned int *)v5, 2);
  *(_DWORD *)long long v5 = 0;
  dword_661A40 = 2;
  sub_6AEC0(&qword_661A48, (int *)v5, 1);
  *(_DWORD *)long long v5 = 0;
  dword_661A60 = 3;
  sub_6AEC0(&qword_661A68, (int *)v5, 1);
  *(void *)long long v5 = off_63E178;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require out of band speech input support");
  sub_6AF3C((uint64_t)&unk_661A80, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63E1C0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require wireless splitter not in use");
  sub_6AF3C((uint64_t)&unk_661AC8, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  __int16 v0 = operator new(0x10uLL);
  *__int16 v0 = &unk_661A80;
  v0[1] = &unk_661AC8;
  qword_661B10 = (uint64_t)off_63E0B0;
  qword_661B20 = 0;
  unk_661B28 = 0;
  qword_661B18 = 0;
  sub_6B058(&qword_661B18, v0, (uint64_t)(v0 + 2));
  operator delete(v0);
  *(void *)long long v5 = off_63E208;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_661B30, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63E250;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Require telephony support");
  sub_6AF3C((uint64_t)&unk_661B78, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63E298;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Tap Requires Apple Display SubPort Type");
  sub_6AF3C((uint64_t)&unk_661BC0, (uint64_t)v5, (long long *)__p, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63E2E0;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeUSBDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_661C08, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_6AFD4(v5);
  *(void *)long long v5 = off_63E328;
  *(void *)&v5[24] = v5;
  sub_21C8C(__p, "Sub port type kVirtualAudioPortSubTypeHeadsetWiredDefault is forbidden");
  sub_6AF3C((uint64_t)&unk_661C50, (uint64_t)v5, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = sub_6AFD4(v5);
  qword_661C98 = (uint64_t)off_63E0E0;
  dword_661CA0 = 6;
  qword_661CA8 = (uint64_t)off_63E110;
  unk_661CB0 = &qword_661C98;
  return result;
}

void sub_48C424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_6AFD4(&a20);
  _Unwind_Resume(a1);
}

uint64_t **sub_48C498()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668930, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_668948, (unsigned int *)v1, 8);
  qword_668970 = 0;
  qword_668968 = 0;
  qword_668960 = (uint64_t)&qword_668968;
  return result;
}

void sub_48C568()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668978, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668990, (unsigned int *)v2, 1);
  qword_6689B8 = 0;
  qword_6689B0 = 0;
  qword_6689A8 = (uint64_t)&qword_6689B0;
  if (MGGetSInt32Answer() == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_6689C0 = v1;
  qword_6689C8 = 0x706362696C70696ELL;
  dword_6689D0 = 0;
  byte_6689D4 = 0;
  *(void *)&v2[0] = 0x766D696E766F6464;
  sub_6367C((uint64_t)&unk_6689D8, (unsigned int *)v2, 2);
  word_6689F0 = word_6689F0 & 0xF800 | 0x630;
  qword_6689F8 = 0x706362696870696ELL;
  dword_668A00 = 0;
  byte_668A04 = 0;
  LODWORD(v2[0]) = 1987011684;
  sub_6367C((uint64_t)&algn_668A05[3], (unsigned int *)v2, 1);
  word_668A20 = word_668A20 & 0xF800 | 0x630;
}

double sub_48C710()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668A28, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668A40, (unsigned int *)v1, 1);
  qword_668A68 = 0;
  qword_668A60 = 0;
  qword_668A58 = (uint64_t)&qword_668A60;
  qword_668A70 = 1735159650;
  *(void *)&double result = 1869968496;
  qword_668A78 = 1869968496;
  return result;
}

uint64_t sub_48C800()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668A80, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668A98, (unsigned int *)v2, 8);
  qword_668AC0 = 0;
  qword_668AB8 = 0;
  qword_668AB0 = (uint64_t)&qword_668AB8;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_668AC8 = v1;
  return result;
}

uint64_t sub_48C8F4()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668AD0, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668AE8, (unsigned int *)v2, 1);
  qword_668B10 = 0;
  qword_668B08 = 0;
  qword_668B00 = (uint64_t)&qword_668B08;
  if (MGGetSInt32Answer() == 6) {
    int v0 = 1;
  }
  else {
    int v0 = 3;
  }
  dword_668B18 = v0;
  qword_668B20 = 0x706362696C70696ELL;
  dword_668B28 = 0;
  byte_668B2C = 0;
  *(void *)&v2[0] = 0x766D696E766F6464;
  sub_6367C((uint64_t)&unk_668B30, (unsigned int *)v2, 2);
  word_668B48 = word_668B48 & 0xF800 | 0x630;
  qword_668B50 = 0x706362696870696ELL;
  dword_668B58 = 0;
  byte_668B5C = 0;
  LODWORD(v2[0]) = 1987011684;
  uint64_t result = sub_6367C((uint64_t)&unk_668B60, (unsigned int *)v2, 1);
  word_668B78 = word_668B78 & 0xF800 | 0x630;
  return result;
}

uint64_t sub_48CA8C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668B80, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668B98, (unsigned int *)v1, 1);
  qword_668BC0 = 0;
  qword_668BB8 = 0;
  qword_668BB0 = (uint64_t)&qword_668BB8;
  qword_668BC8 = 0x7063626970686B69;
  dword_668BD0 = 0;
  byte_668BD4 = 0;
  LODWORD(v1[0]) = 1986552183;
  uint64_t result = sub_6367C((uint64_t)&unk_668BD8, (unsigned int *)v1, 1);
  word_668BF0 = word_668BF0 & 0xF800 | 0x421;
  return result;
}

uint64_t sub_48CBAC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668BF8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_668C10, (unsigned int *)v1, 1);
  qword_668C38 = 0;
  qword_668C30 = 0;
  qword_668C28 = (uint64_t)&qword_668C30;
  return result;
}

uint64_t sub_48CC7C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668C40, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_668C58, (unsigned int *)v1, 1);
  qword_668C80 = 0;
  qword_668C78 = 0;
  qword_668C70 = (uint64_t)&qword_668C78;
  return result;
}

uint64_t sub_48CD4C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668C88, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_668CA0, (unsigned int *)v1, 1);
  qword_668CC8 = 0;
  qword_668CC0 = 0;
  qword_668CB8 = (uint64_t)&qword_668CC0;
  return result;
}

uint64_t sub_48CE1C()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668CD0, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_668CE8, (unsigned int *)v1, 1);
  qword_668D10 = 0;
  qword_668D08 = 0;
  qword_668D00 = (uint64_t)&qword_668D08;
  return result;
}

uint64_t **sub_48CEEC()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668D18, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_668D30, (unsigned int *)v1, 8);
  qword_668D58 = 0;
  qword_668D50 = 0;
  qword_668D48 = (uint64_t)&qword_668D50;
  return result;
}

uint64_t sub_48CFBC()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668E18, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_668E30, (unsigned int *)v1, 1);
  qword_668E58 = 0;
  qword_668E50 = 0;
  qword_668E48 = (uint64_t)&qword_668E50;
  return result;
}

uint64_t *sub_48D08C()
{
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_668ED8, (unsigned int *)v2, 1);
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_668EF0, (unsigned int *)v2, 8);
  qword_668F18 = 0;
  qword_668F10 = 0;
  qword_668F08 = (uint64_t)&qword_668F10;
  if (MGGetSInt32Answer() == 6) {
    int v0 = 1;
  }
  else {
    int v0 = 3;
  }
  dword_668F20 = v0;
  qmemcpy(&qword_668F28, "uolpiwcpnupe", 12);
  byte_668F34 = 1;
  sub_46A4C(qword_668F38, (uint64_t)&unk_668ED8);
  word_668F50 = word_668F50 & 0xF800 | 0x41E;
  qword_668F58 = 0x6F757470766F6C6DLL;
  dword_668F60 = 6;
  qword_668F68 = 0x6F757470766F6C64;
  dword_668F70 = 6;
  qword_668F78 = 0x6F75747076637370;
  dword_668F80 = 6;
  qword_668F88 = 0x696E707469656E64;
  dword_668F90 = 0;
  qword_668F98 = 0x7063626970726563;
  dword_668FA0 = 0;
  byte_668FA4 = 0;
  sub_46A4C((uint64_t *)&algn_668FA5[3], (uint64_t)&unk_668ED8);
  word_668FC0 = word_668FC0 & 0xF800 | 0x434;
  qword_668FC8 = 0x706362697073706BLL;
  dword_668FD0 = 0;
  byte_668FD4 = 0;
  sub_46A4C(qword_668FD8, (uint64_t)&unk_668ED8);
  word_668FF0 = word_668FF0 & 0xF800 | 0x43C;
  qword_668FF8 = 0x7063626970686163;
  dword_669000 = 0;
  byte_669004 = 0;
  uint64_t result = sub_46A4C((uint64_t *)&algn_669005[3], (uint64_t)&unk_668ED8);
  word_669020 = word_669020 & 0xF800 | 0x424;
  return result;
}

uint64_t **sub_48D300()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669058, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_669070, (unsigned int *)v1, 8);
  qword_669098 = 0;
  qword_669090 = 0;
  qword_669088 = (uint64_t)&qword_669090;
  return result;
}

double sub_48D3D0()
{
  LODWORD(v4[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6690A0, (unsigned int *)v4, 1);
  int v4[8] = off_641340;
  v4[9] = *(_OWORD *)"lovc";
  v4[10] = xmmword_641360;
  v4[11] = *(_OWORD *)&off_641370;
  v4[4] = xmmword_641300;
  v4[5] = *(_OWORD *)&off_641310;
  v4[6] = *(_OWORD *)"lovl";
  v4[7] = unk_641330;
  v4[0] = *(_OWORD *)"ulov";
  v4[1] = unk_6412D0;
  uint64_t v4[2] = off_6412E0;
  v4[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6690B8, (unsigned int *)v4, 8);
  qword_6690E0 = 0;
  qword_6690D8 = 0;
  qword_6690D0 = (uint64_t)&qword_6690D8;
  qword_6690F0 = 0;
  unk_6690F8 = 0;
  qword_6690E8 = 0;
  int v0 = (char *)operator new(0x1CuLL);
  qword_6690F0 = (uint64_t)(v0 + 28);
  unk_6690F8 = v0 + 28;
  qmemcpy(v0, "ivpvovpvcgpvcvmrgcrvgsmvpcps", 28);
  qword_6690E8 = (uint64_t)v0;
  qword_669108 = 0;
  unk_669110 = 0;
  qword_669100 = 0;
  int v1 = operator new(0x10uLL);
  qword_669100 = (uint64_t)v1;
  *int v1 = xmmword_4E7890;
  qword_669108 = (uint64_t)(v1 + 1);
  unk_669110 = v1 + 1;
  qword_669120 = 0;
  unk_669128 = 0;
  qword_669118 = 0;
  long long v2 = (char *)operator new(0x44uLL);
  qword_669120 = (uint64_t)(v2 + 68);
  unk_669128 = v2 + 68;
  qmemcpy(v2, " wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmgcvmrplminkpstmsmmacmpcpspcts", 68);
  double result = *(double *)"cgpvtcmgcvmrplminkpstmsmmacmpcpspcts";
  qword_669118 = (uint64_t)v2;
  return result;
}

uint64_t **sub_48D558()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6696B0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  return sub_636F8((uint64_t **)&unk_6696C8, (unsigned int *)v1, 8);
}

uint64_t sub_48D60C()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6696E0, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6696F8, (unsigned int *)v2, 1);
  qword_669720 = 0;
  qword_669718 = 0;
  qword_669710 = (uint64_t)&qword_669718;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_669728 = v1;
  return result;
}

uint64_t *sub_48D700()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669730, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669748, (unsigned int *)v1, 1);
  qword_669770 = 0;
  qword_669768 = 0;
  qword_669760 = (uint64_t)&qword_669768;
  qword_669778 = 0x7063776970737164;
  dword_669780 = 0;
  byte_669784 = 0;
  uint64_t result = sub_46A4C((uint64_t *)&algn_669785[3], (uint64_t)&unk_669748);
  word_6697A0 = word_6697A0 & 0xF800 | 0x617;
  return result;
}

uint64_t sub_48D814()
{
  v2[8] = off_641340;
  v2[9] = *(_OWORD *)"lovc";
  v2[10] = xmmword_641360;
  v2[11] = *(_OWORD *)&off_641370;
  v2[4] = xmmword_641300;
  void v2[5] = *(_OWORD *)&off_641310;
  void v2[6] = *(_OWORD *)"lovl";
  v2[7] = unk_641330;
  v2[0] = *(_OWORD *)"ulov";
  v2[1] = unk_6412D0;
  _OWORD v2[2] = off_6412E0;
  v2[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6697A8, (unsigned int *)v2, 8);
  LODWORD(v2[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_6697C0, (unsigned int *)v2, 1);
  qword_6697E8 = 0;
  qword_6697E0 = 0;
  qword_6697D8 = (uint64_t)&qword_6697E0;
  uint64_t result = MGGetSInt32Answer();
  if (result == 6) {
    int v1 = 1;
  }
  else {
    int v1 = 3;
  }
  dword_6697F0 = v1;
  return result;
}

uint64_t sub_48D908()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_6697F8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_669810, (unsigned int *)v1, 1);
  qword_669838 = 0;
  qword_669830 = 0;
  qword_669828 = (uint64_t)&qword_669830;
  return result;
}

uint64_t *sub_48D9D8()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669840, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669858, (unsigned int *)v1, 8);
  qword_669880 = 0;
  qword_669878 = 0;
  qword_669870 = (uint64_t)&qword_669878;
  qword_669888 = 0x70636269706D6269;
  dword_669890 = 0;
  byte_669894 = 0;
  uint64_t result = sub_46A4C(qword_669898, (uint64_t)&unk_669840);
  word_6698B0 = word_6698B0 & 0xF800 | 0x435;
  return result;
}

uint64_t *sub_48DAEC()
{
  unsigned int v1 = 1986295651;
  sub_6367C((uint64_t)&unk_6698B8, &v1, 1);
  qword_6698D0 = 0x7063787870727470;
  dword_6698D8 = 0;
  byte_6698DC = 0;
  uint64_t result = sub_46A4C(qword_6698E0, (uint64_t)&unk_6698B8);
  word_6698F8 = word_6698F8 & 0xF800 | 0x21;
  return result;
}

void sub_48DB70()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  qword_669910 = 0;
  qword_669908 = 0;
  long long v2 = &qword_669908;
  qword_669900 = (uint64_t)&qword_669908;
  while (1)
  {
    long long v3 = (unsigned int *)((char *)&unk_640378 + 16 * v1);
    if (v2 == &qword_669908)
    {
      long long v5 = &qword_669908;
    }
    else
    {
      char v4 = (uint64_t *)v0;
      if (v0)
      {
        do
        {
          long long v5 = v4;
          char v4 = (uint64_t *)v4[1];
        }
        while (v4);
      }
      else
      {
        long long v6 = &qword_669908;
        do
        {
          long long v5 = (uint64_t *)v6[2];
          BOOL v7 = *v5 == (void)v6;
          long long v6 = v5;
        }
        while (v7);
      }
      unsigned int v8 = *v3;
      if (*((_DWORD *)v5 + 8) >= *v3)
      {
        if (v0)
        {
          long long v10 = &qword_669908;
          while (1)
          {
            while (1)
            {
              long long v9 = (uint64_t *)v0;
              unsigned int v12 = *(_DWORD *)(v0 + 32);
              if (v8 >= v12) {
                break;
              }
              uint64_t v0 = *v9;
              long long v10 = v9;
              if (!*v9) {
                goto LABEL_17;
              }
            }
            if (v12 >= v8) {
              break;
            }
            long long v10 = v9 + 1;
            uint64_t v0 = v9[1];
            if (!v0) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          long long v9 = &qword_669908;
          long long v10 = &qword_669908;
        }
        goto LABEL_16;
      }
    }
    long long v9 = v0 ? v5 : &qword_669908;
    long long v10 = v0 ? v5 + 1 : &qword_669908;
LABEL_16:
    if (!*v10)
    {
LABEL_17:
      long long v11 = operator new(0x30uLL);
      void v11[2] = *(_OWORD *)v3;
      *(void *)long long v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v9;
      *long long v10 = (uint64_t)v11;
      if (*(void *)qword_669900)
      {
        qword_669900 = *(void *)qword_669900;
        long long v11 = (_OWORD *)*v10;
      }
      sub_46D00((uint64_t *)qword_669908, (uint64_t *)v11);
      ++qword_669910;
    }
    if (++v1 == 8) {
      break;
    }
    long long v2 = (uint64_t *)qword_669900;
    uint64_t v0 = qword_669908;
  }
}

void sub_48DCEC(_Unwind_Exception *a1)
{
}

uint64_t *sub_48DD04()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&qword_669918, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669930, (unsigned int *)v1, 1);
  qword_669958 = 0;
  qword_669950 = 0;
  qword_669948 = (uint64_t)&qword_669950;
  qword_669960 = 0x7063776970617263;
  dword_669968 = 0;
  byte_66996C = 0;
  uint64_t result = sub_46A4C(qword_669970, (uint64_t)&unk_669930);
  word_669988 = word_669988 & 0xF800 | 0x617;
  return result;
}

void *sub_48DE18()
{
  long long v11 = off_641340;
  long long v12 = *(_OWORD *)"lovc";
  long long v13 = xmmword_641360;
  long long v14 = *(_OWORD *)&off_641370;
  long long v7 = xmmword_641300;
  long long v8 = *(_OWORD *)&off_641310;
  long long v9 = *(_OWORD *)"lovl";
  long long v10 = unk_641330;
  long long v3 = *(_OWORD *)"ulov";
  long long v4 = unk_6412D0;
  long long v5 = off_6412E0;
  long long v6 = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669990, (unsigned int *)&v3, 8);
  LODWORD(v3) = 1986295651;
  sub_6367C((uint64_t)&unk_6699A8, (unsigned int *)&v3, 1);
  LODWORD(v3) = 1885500772;
  *((void *)&v3 + 1) = off_6405F0;
  *(void *)&long long v4 = sub_15F064;
  *(void *)&long long v5 = (char *)&v3 + 8;
  DWORD2(v5) = 1718186601;
  *(void *)&long long v6 = off_6405F0;
  *((void *)&v6 + 1) = sub_15E3D0;
  *((void *)&v7 + 1) = &v6;
  LODWORD(v8) = 1651074168;
  *((void *)&v8 + 1) = off_6405F0;
  *(void *)&long long v9 = sub_15DF94;
  *(void *)&long long v10 = (char *)&v8 + 8;
  DWORD2(v10) = 1735287906;
  *(void *)&long long v11 = off_6405F0;
  *((void *)&v11 + 1) = sub_15D974;
  *((void *)&v12 + 1) = &v11;
  LODWORD(v13) = 21;
  *((void *)&v13 + 1) = off_6405F0;
  *(void *)&long long v14 = sub_15D028;
  uint64_t v15 = (char *)&v13 + 8;
  int v16 = 1920365171;
  uint64_t v17 = off_6405F0;
  uint64_t v18 = sub_15CD24;
  uint64_t v19 = &v17;
  int v20 = 1684303986;
  int v21 = off_6405F0;
  uint64_t v22 = sub_15C1B0;
  int v23 = &v21;
  int v24 = 1667789676;
  int v25 = off_6405F0;
  __int16 v26 = sub_15BE08;
  int v27 = &v25;
  int v28 = 1768907891;
  v29[0] = off_6405F0;
  v29[1] = sub_15B254;
  uint64_t v29[3] = v29;
  int v30 = 1936749683;
  v31[0] = off_6405F0;
  v31[1] = sub_15A268;
  v31[3] = v31;
  int v32 = 14;
  v33[0] = off_6405F0;
  v33[1] = sub_159E94;
  v33[3] = v33;
  int v34 = 1936746861;
  v35[0] = off_6405F0;
  v35[1] = sub_159DF8;
  v35[3] = v35;
  int v36 = 1835235437;
  v37[0] = off_6405F0;
  v37[1] = sub_159D5C;
  void v37[3] = v37;
  int v38 = 1886548852;
  v39[0] = off_6405F0;
  v39[1] = sub_159C94;
  void v39[3] = v39;
  int v40 = 1886610801;
  v41[0] = off_6405F0;
  v41[1] = sub_159BF8;
  v41[3] = v41;
  int v42 = 1886352244;
  v43[0] = off_6405F0;
  v43[1] = sub_159B5C;
  void v43[3] = v43;
  int v44 = 1701737068;
  v45[0] = off_6405F0;
  v45[1] = sub_159A88;
  uint64_t v45[3] = v45;
  int v46 = 1818326117;
  v47[0] = off_6405F0;
  v47[1] = sub_1599B4;
  v47[3] = v47;
  int v48 = 1701080167;
  v49[0] = off_6405F0;
  v49[1] = sub_1598E0;
  void v49[3] = v49;
  int v50 = 1633972835;
  v51[0] = off_6405F0;
  v51[1] = sub_1590D0;
  v51[3] = v51;
  int v52 = 1668248691;
  v53[0] = off_6405F0;
  v53[1] = sub_159034;
  v53[3] = v53;
  int v54 = 1634625388;
  v55[0] = off_6405F0;
  v55[1] = sub_158D44;
  v55[3] = v55;
  sub_14DFAC((uint64_t)&qword_6699C0, (unsigned int *)&v3, 22);
  for (uint64_t i = 848; i != -32; i -= 40)
    sub_14E474((long long *)((char *)&v3 + i));
  LODWORD(v3) = 1987405668;
  *((void *)&v3 + 1) = off_640638;
  *(void *)&long long v4 = sub_158B30;
  *(void *)&long long v5 = (char *)&v3 + 8;
  DWORD2(v5) = 1987013749;
  *(void *)&long long v6 = off_640638;
  *((void *)&v6 + 1) = sub_15462C;
  *((void *)&v7 + 1) = &v6;
  LODWORD(v8) = 1668706156;
  *((void *)&v8 + 1) = off_640638;
  *(void *)&long long v9 = sub_15440C;
  *(void *)&long long v10 = (char *)&v8 + 8;
  DWORD2(v10) = 1819701100;
  *(void *)&long long v11 = off_640638;
  *((void *)&v11 + 1) = sub_1541C8;
  *((void *)&v12 + 1) = &v11;
  LODWORD(v13) = 1953918828;
  *((void *)&v13 + 1) = off_640638;
  *(void *)&long long v14 = sub_153E4C;
  uint64_t v15 = (char *)&v13 + 8;
  int v16 = 1752659567;
  uint64_t v17 = off_640638;
  uint64_t v18 = sub_153B0C;
  uint64_t v19 = &v17;
  int v20 = 1987343987;
  int v21 = off_640638;
  uint64_t v22 = sub_151960;
  int v23 = &v21;
  int v24 = 1651275122;
  int v25 = off_640638;
  __int16 v26 = sub_150890;
  int v27 = &v25;
  sub_14E4F8((uint64_t)&qword_6699E8, (unsigned int *)&v3, 8);
  for (uint64_t j = 288; j != -32; j -= 40)
    uint64_t result = sub_14E9C0((long long *)((char *)&v3 + j));
  return result;
}

void sub_48E6B0(_Unwind_Exception *a1)
{
  for (uint64_t i = 288; i != -32; i -= 40)
    sub_14E9C0((void *)(v1 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_48E700()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669A18, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_669A30, (unsigned int *)v1, 1);
  qword_669A58 = 0;
  qword_669A50 = 0;
  qword_669A48 = (uint64_t)&qword_669A50;
  return result;
}

uint64_t **sub_48E7D0()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669A60, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_669A78, (unsigned int *)v1, 8);
  qword_669AA0 = 0;
  qword_669A98 = 0;
  qword_669A90 = (uint64_t)&qword_669A98;
  return result;
}

uint64_t sub_48E8A0()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669AA8, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_669AC0, (unsigned int *)v1, 1);
  qword_669AE8 = 0;
  qword_669AE0 = 0;
  qword_669AD8 = (uint64_t)&qword_669AE0;
  return result;
}

uint64_t **sub_48E970()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669AF0, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  uint64_t result = sub_636F8((uint64_t **)&unk_669B08, (unsigned int *)v1, 8);
  qword_669B30 = 0;
  qword_669B28 = 0;
  qword_669B20 = (uint64_t)&qword_669B28;
  return result;
}

uint64_t sub_48EA40()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669B40, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  uint64_t result = sub_6367C((uint64_t)&unk_669B58, (unsigned int *)v1, 1);
  qword_669B80 = 0;
  qword_669B78 = 0;
  qword_669B70 = (uint64_t)&qword_669B78;
  return result;
}

double sub_48EB10()
{
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669B88, (unsigned int *)v1, 8);
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669BA0, (unsigned int *)v1, 1);
  qword_669BC8 = 0;
  qword_669BC0 = 0;
  qword_669BB8 = (uint64_t)&qword_669BC0;
  qmemcpy(&qword_669BD0, "uolpiwcpnupe", 12);
  byte_669BDC = 1;
  sub_46A4C(qword_669BE0, (uint64_t)&unk_669BA0);
  word_669BF8 = word_669BF8 & 0xF800 | 0x41E;
  qmemcpy(&qword_669C00, "wphpiwcpphpe", 12);
  byte_669C0C = 1;
  sub_46A4C(qword_669C10, (uint64_t)&unk_669BA0);
  word_669C28 = word_669C28 & 0xF800 | 0x616;
  qword_669C30 = 0x70637769706D7769;
  dword_669C38 = 0;
  byte_669C3C = 0;
  sub_46A4C(qword_669C40, (uint64_t)&unk_669BA0);
  word_669C58 = word_669C58 & 0xF800 | 0x617;
  qword_669C60 = 0x6F757470766F6C6DLL;
  dword_669C68 = 1;
  qword_669C70 = 0x6F757470766F6C64;
  dword_669C78 = 1;
  double result = 8.13208713e228;
  qword_669C80 = 0x6F75747076637370;
  dword_669C88 = 1;
  return result;
}

void sub_48ED18()
{
  LODWORD(v1[0]) = 1986295651;
  sub_6367C((uint64_t)&unk_669C90, (unsigned int *)v1, 1);
  int v1[8] = off_641340;
  v1[9] = *(_OWORD *)"lovc";
  v1[10] = xmmword_641360;
  v1[11] = *(_OWORD *)&off_641370;
  v1[4] = xmmword_641300;
  v1[5] = *(_OWORD *)&off_641310;
  v1[6] = *(_OWORD *)"lovl";
  v1[7] = unk_641330;
  v1[0] = *(_OWORD *)"ulov";
  v1[1] = unk_6412D0;
  v1[2] = off_6412E0;
  v1[3] = *(_OWORD *)"dguv";
  sub_636F8((uint64_t **)&unk_669CA8, (unsigned int *)v1, 8);
  qword_669CD0 = 0;
  qword_669CC8 = 0;
  qword_669CC0 = (uint64_t)&qword_669CC8;
}

uint64_t sub_48EE00()
{
  return type metadata accessor for InferenceMonitor.AsyncIterator();
}

uint64_t sub_48EE10()
{
  return InferenceMonitor.makeAsyncIterator()();
}

uint64_t sub_48EE20()
{
  return static InferenceMonitor.Event.== infix(_:_:)();
}

uint64_t sub_48EE30()
{
  return type metadata accessor for InferenceMonitor.Event();
}

uint64_t sub_48EE40()
{
  return InferenceMonitor.init()();
}

uint64_t sub_48EE50()
{
  return type metadata accessor for InferenceMonitor();
}

uint64_t sub_48EE80()
{
  return type metadata accessor for Assertion();
}

uint64_t sub_48EE90()
{
  return Logger.logObject.getter();
}

uint64_t sub_48EEA0()
{
  return type metadata accessor for Logger();
}

uint64_t sub_48EEB0()
{
  return Logger.init(_:)();
}

uint64_t sub_48EEC0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_48EED0()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t sub_48EEF0()
{
  return TaskPriority.rawValue.getter();
}

uint64_t sub_48EF00()
{
  return type metadata accessor for TaskPriority();
}

void sub_48EF10()
{
}

uint64_t sub_48EF20()
{
  return static Task<>.isCancelled.getter();
}

uint64_t sub_48EF30()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_48EF40()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t sub_48EF50()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_48EF60()
{
  return _HashTable.previousHole(before:)();
}

uint64_t sub_48EF70()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t sub_48EF80()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t sub_48EF90()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_48EFA0()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_48EFB0()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t AUPBPropertiesChanged()
{
  return _AUPBPropertiesChanged();
}

uint64_t AUPBRegister()
{
  return _AUPBRegister();
}

uint64_t AUPBRegisterAU()
{
  return _AUPBRegisterAU();
}

uint64_t AUPBUnregister()
{
  return _AUPBUnregister();
}

uint64_t AUPBUnregisterAU()
{
  return _AUPBUnregisterAU();
}

uint64_t AVGestaltGetBoolAnswer()
{
  return _AVGestaltGetBoolAnswer();
}

OSStatus AudioComponentCopyName(AudioComponent inComponent, CFStringRef *outName)
{
  return _AudioComponentCopyName(inComponent, outName);
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return _AudioComponentFindNext(inComponent, inDesc);
}

OSStatus AudioComponentGetDescription(AudioComponent inComponent, AudioComponentDescription *outDesc)
{
  return _AudioComponentGetDescription(inComponent, outDesc);
}

Boolean AudioComponentInstanceCanDo(AudioComponentInstance inInstance, SInt16 inSelectorID)
{
  return _AudioComponentInstanceCanDo(inInstance, inSelectorID);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return _AudioComponentInstanceDispose(inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return _AudioComponentInstanceNew(inComponent, outInstance);
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return _AudioConverterConvertComplexBuffer(inAudioConverter, inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return _AudioConverterDispose(inAudioConverter);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return _AudioConverterNew(inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return _AudioConverterSetProperty(inAudioConverter, inPropertyID, inPropertyDataSize, inPropertyData);
}

OSStatus AudioDeviceCreateIOProcID(AudioObjectID inDevice, AudioDeviceIOProc inProc, void *inClientData, AudioDeviceIOProcID *outIOProcID)
{
  return _AudioDeviceCreateIOProcID(inDevice, inProc, inClientData, outIOProcID);
}

OSStatus AudioDeviceDestroyIOProcID(AudioObjectID inDevice, AudioDeviceIOProcID inIOProcID)
{
  return _AudioDeviceDestroyIOProcID(inDevice, inIOProcID);
}

OSStatus AudioDeviceGetCurrentTime(AudioObjectID inDevice, AudioTimeStamp *outTime)
{
  return _AudioDeviceGetCurrentTime(inDevice, outTime);
}

OSStatus AudioDeviceGetNearestStartTime(AudioObjectID inDevice, AudioTimeStamp *ioRequestedStartTime, UInt32 inFlags)
{
  return _AudioDeviceGetNearestStartTime(inDevice, ioRequestedStartTime, inFlags);
}

OSStatus AudioDeviceStart(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  return _AudioDeviceStart(inDevice, inProcID);
}

OSStatus AudioDeviceStartAtTime(AudioObjectID inDevice, AudioDeviceIOProcID inProcID, AudioTimeStamp *ioRequestedStartTime, UInt32 inFlags)
{
  return _AudioDeviceStartAtTime(inDevice, inProcID, ioRequestedStartTime, inFlags);
}

OSStatus AudioDeviceStop(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  return _AudioDeviceStop(inDevice, inProcID);
}

OSStatus AudioDeviceTranslateTime(AudioObjectID inDevice, const AudioTimeStamp *inTime, AudioTimeStamp *outTime)
{
  return _AudioDeviceTranslateTime(inDevice, inTime, outTime);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return _AudioFormatGetProperty(inPropertyID, inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioObjectAddPropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return _AudioObjectAddPropertyListener(inObjectID, inAddress, inListener, inClientData);
}

uint64_t AudioObjectCreate()
{
  return _AudioObjectCreate();
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return _AudioObjectGetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

OSStatus AudioObjectGetPropertyDataSize(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *outDataSize)
{
  return _AudioObjectGetPropertyDataSize(inObjectID, inAddress, inQualifierDataSize, inQualifierData, outDataSize);
}

Boolean AudioObjectHasProperty(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  return _AudioObjectHasProperty(inObjectID, inAddress);
}

uint64_t AudioObjectIsOnListenerThread()
{
  return _AudioObjectIsOnListenerThread();
}

OSStatus AudioObjectIsPropertySettable(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, Boolean *outIsSettable)
{
  return _AudioObjectIsPropertySettable(inObjectID, inAddress, outIsSettable);
}

uint64_t AudioObjectPropertiesChanged()
{
  return _AudioObjectPropertiesChanged();
}

OSStatus AudioObjectRemovePropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return _AudioObjectRemovePropertyListener(inObjectID, inAddress, inListener, inClientData);
}

OSStatus AudioObjectSetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 inDataSize, const void *inData)
{
  return _AudioObjectSetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, inDataSize, inData);
}

uint64_t AudioObjectsPublishedAndDied()
{
  return _AudioObjectsPublishedAndDied();
}

OSStatus AudioUnitGetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue *outValue)
{
  return _AudioUnitGetParameter(inUnit, inID, inScope, inElement, outValue);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return _AudioUnitGetProperty(inUnit, inID, inScope, inElement, outData, ioDataSize);
}

OSStatus AudioUnitGetPropertyInfo(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, UInt32 *outDataSize, Boolean *outWritable)
{
  return _AudioUnitGetPropertyInfo(inUnit, inID, inScope, inElement, outDataSize, outWritable);
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  return _AudioUnitInitialize(inUnit);
}

OSStatus AudioUnitProcess(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return _AudioUnitProcess(inUnit, ioActionFlags, inTimeStamp, inNumberFrames, ioData);
}

OSStatus AudioUnitProcessMultiple(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, UInt32 inNumberInputBufferLists, const AudioBufferList **inInputBufferLists, UInt32 inNumberOutputBufferLists, AudioBufferList **ioOutputBufferLists)
{
  return _AudioUnitProcessMultiple(inUnit, ioActionFlags, inTimeStamp, inNumberFrames, inNumberInputBufferLists, inInputBufferLists, inNumberOutputBufferLists, ioOutputBufferLists);
}

OSStatus AudioUnitReset(AudioUnit inUnit, AudioUnitScope inScope, AudioUnitElement inElement)
{
  return _AudioUnitReset(inUnit, inScope, inElement);
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  return _AudioUnitSetParameter(inUnit, inID, inScope, inElement, inValue, inBufferOffsetInFrames);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return _AudioUnitSetProperty(inUnit, inID, inScope, inElement, inData, inDataSize);
}

OSStatus AudioUnitUninitialize(AudioUnit inUnit)
{
  return _AudioUnitUninitialize(inUnit);
}

uint64_t CACentralStateDumpRegisterSubsystem()
{
  return _CACentralStateDumpRegisterSubsystem();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  CFGregorianDate GregorianDate = _CFAbsoluteTimeGetGregorianDate(at, tz);
  double second = GregorianDate.second;
  uint64_t v2 = *(void *)&GregorianDate.year;
  result.double second = second;
  result.year = v2;
  result.month = BYTE4(v2);
  result.day = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return _CFBundleCopyLocalizedString(bundle, key, value, tableName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return _CFBundleGetBundleWithIdentifier(bundleID);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return _CFCopyDescription(cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return _CFDictionaryGetValueIfPresent(theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return _CFGetRetainCount(cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return _CFLocaleGetSystem();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return _CFNotificationCenterGetLocalCenter();
}

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFTypeID CFNullGetTypeID(void)
{
  return _CFNullGetTypeID();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return _CFNumberFormatterCreate(allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return _CFNumberFormatterCreateNumberFromString(allocator, formatter, string, rangep, options);
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return _CFNumberGetByteSize(number);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return _CFNumberGetType(number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return _CFNumberIsFloatType(number);
}

void CFPlugInAddInstanceForFactory(CFUUIDRef factoryID)
{
}

void CFPlugInRemoveInstanceForFactory(CFUUIDRef factoryID)
{
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppIntegerValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithStream(allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return _CFReadStreamCreateWithFile(alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return _CFReadStreamOpen(stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return _CFRunLoopSourceCreate(allocator, order, context);
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return _CFSetCreateMutable(allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return _CFStringCreateArrayBySeparatingStrings(alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return _CFStringCreateByCombiningStrings(alloc, theArray, separatorString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return _CFStringCreateMutable(alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return _CFStringCreateMutableCopy(alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return _CFStringCreateWithBytesNoCopy(alloc, bytes, numBytes, encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return _CFStringCreateWithCStringNoCopy(alloc, cStr, encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return _CFStringCreateWithFormatAndArguments(alloc, formatOptions, format, arguments);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFRange v5 = _CFStringFind(theString, stringToFind, compareOptions);
  CFIndex length = v5.length;
  locatiouint64_t n = v5.location;
  result.CFIndex length = length;
  result.locatiouint64_t n = location;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return _CFStringFindAndReplace(theString, stringToFind, replacementString, rangeToSearch, compareOptions);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return _CFStringHasSuffix(theString, suffix);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return _CFTimeZoneCopySystem();
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return _CFURLCreateFromFileSystemRepresentation(allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return _CFURLCreateWithFileSystemPath(allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return _CFUUIDCreateFromUUIDBytes(alloc, bytes);
}

CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
{
  return _CFUUIDGetConstantUUIDWithBytes(alloc, byte0, byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8, byte9, byte10, byte11, byte12, byte13, byte14, byte15);
}

uint64_t FigCaptureSpeakerInterferenceMitigationIsRequired()
{
  return _FigCaptureSpeakerInterferenceMitigationIsRequired();
}

uint64_t IAPAudioCopyDeviceStates()
{
  return _IAPAudioCopyDeviceStates();
}

uint64_t IAPAudioGetVolumeForTransport()
{
  return _IAPAudioGetVolumeForTransport();
}

uint64_t IAPAudioIsVolumeControlSupportedForTransport()
{
  return _IAPAudioIsVolumeControlSupportedForTransport();
}

uint64_t IAPAudioRegisterDeviceStateChangedCallback()
{
  return _IAPAudioRegisterDeviceStateChangedCallback();
}

uint64_t IAPAudioRegisterVolumeControlSupportChangedCallback()
{
  return _IAPAudioRegisterVolumeControlSupportChangedCallback();
}

uint64_t IAPAudioSetVolumeForTransport()
{
  return _IAPAudioSetVolumeForTransport();
}

uint64_t IAPAudioStartPlaybackForTransport()
{
  return _IAPAudioStartPlaybackForTransport();
}

uint64_t IAPAudioStopPlaybackForTransport()
{
  return _IAPAudioStopPlaybackForTransport();
}

uint64_t IAPAudioUnregisterDeviceStateChangedCallback()
{
  return _IAPAudioUnregisterDeviceStateChangedCallback();
}

uint64_t IAPAudioUnregisterVolumeControlSupportChangedCallback()
{
  return _IAPAudioUnregisterVolumeControlSupportChangedCallback();
}

uint64_t IAPDigitalAudioCopySupportSampleRates()
{
  return _IAPDigitalAudioCopySupportSampleRates();
}

uint64_t IAPDigitalAudioSetSampleRate()
{
  return _IAPDigitalAudioSetSampleRate();
}

uint64_t IAPDigitalAudioSupportedSampleRate()
{
  return _IAPDigitalAudioSupportedSampleRate();
}

void IOHIDDeviceActivate(IOHIDDeviceRef device)
{
}

void IOHIDDeviceCancel(IOHIDDeviceRef device)
{
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return _IOHIDDeviceClose(device, options);
}

IOHIDDeviceRef IOHIDDeviceCreate(CFAllocatorRef allocator, io_service_t service)
{
  return _IOHIDDeviceCreate(allocator, service);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return _IOHIDDeviceOpen(device, options);
}

void IOHIDDeviceRegisterInputReportCallback(IOHIDDeviceRef device, uint8_t *report, CFIndex reportLength, IOHIDReportCallback callback, void *context)
{
}

void IOHIDDeviceSetCancelHandler(IOHIDDeviceRef device, dispatch_block_t handler)
{
}

void IOHIDDeviceSetDispatchQueue(IOHIDDeviceRef device, dispatch_queue_t queue)
{
}

IOReturn IOHIDDeviceSetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, const uint8_t *report, CFIndex reportLength)
{
  return _IOHIDDeviceSetReport(device, reportType, reportID, report, reportLength);
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return _IOHIDEventCreateKeyboardEvent();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventSystemClientActivate()
{
  return _IOHIDEventSystemClientActivate();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return _IOHIDEventSystemClientCopyServices(client);
}

uint64_t IOHIDEventSystemClientCreate()
{
  return _IOHIDEventSystemClientCreate();
}

uint64_t IOHIDEventSystemClientRegisterDeviceMatchingCallback()
{
  return _IOHIDEventSystemClientRegisterDeviceMatchingCallback();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return _IOHIDEventSystemClientRegisterEventCallback();
}

uint64_t IOHIDEventSystemClientSetDispatchQueue()
{
  return _IOHIDEventSystemClientSetDispatchQueue();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return _IOHIDEventSystemClientSetMatching();
}

uint64_t IOHIDServiceClientCopyEvent()
{
  return _IOHIDServiceClientCopyEvent();
}

uint64_t IOHIDServiceClientRegisterRemovalCallback()
{
  return _IOHIDServiceClientRegisterRemovalCallback();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

CFDictionaryRef IOPSCopyExternalPowerAdapterDetails(void)
{
  return _IOPSCopyExternalPowerAdapterDetails();
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return _IORegistryEntryFromPath(mainPort, path);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return _IORegistryEntryGetRegistryEntryID(entry, entryID);
}

CFMutableDictionaryRef IORegistryEntryIDMatching(uint64_t entryID)
{
  return _IORegistryEntryIDMatching(entryID);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

uint64_t MGCancelNotifications()
{
  return _MGCancelNotifications();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGCopyAnswerWithError()
{
  return _MGCopyAnswerWithError();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetProductType()
{
  return _MGGetProductType();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MGIsQuestionValid()
{
  return _MGIsQuestionValid();
}

uint64_t MGRegisterForUpdates()
{
  return _MGRegisterForUpdates();
}

uint64_t TimeSyncAddgPTPServices()
{
  return _TimeSyncAddgPTPServices();
}

uint64_t TimeSyncSystemDomainClockIdentifier()
{
  return _TimeSyncSystemDomainClockIdentifier();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CTServerConnectionAudioSampleRateSwitchDidComplete()
{
  return __CTServerConnectionAudioSampleRateSwitchDidComplete();
}

uint64_t _CTServerConnectionCopyAudioVocoderInfo()
{
  return __CTServerConnectionCopyAudioVocoderInfo();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return __CTServerConnectionCreateOnTargetQueue();
}

uint64_t _CTServerConnectionGetCommCenterInitializationState()
{
  return __CTServerConnectionGetCommCenterInitializationState();
}

uint64_t _CTServerConnectionRegisterForNotification()
{
  return __CTServerConnectionRegisterForNotification();
}

uint64_t _CTServerConnectionSetActiveAudioSystemConfiguration()
{
  return __CTServerConnectionSetActiveAudioSystemConfiguration();
}

uint64_t _CTServerConnectionSetTTYMode()
{
  return __CTServerConnectionSetTTYMode();
}

uint64_t _CTServerConnectionUnregisterForNotification()
{
  return __CTServerConnectionUnregisterForNotification();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
}

uint64_t caulk::concurrent::messenger::drain(caulk::concurrent::messenger *this)
{
  return caulk::concurrent::messenger::drain(this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return caulk::concurrent::messenger::enqueue(this, a2);
}

uint64_t caulk::concurrent::messenger::messenger(caulk::concurrent::messenger *this, const queue *a2)
{
  return caulk::concurrent::messenger::messenger(this, a2);
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
}

uint64_t caulk::mach::os_workgroup_interval_managed::make_with_workload_id()
{
  return caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
}

void caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(caulk::mach::os_workgroup_interval_managed *this)
{
}

uint64_t caulk::mach::details::retain_os_object(caulk::mach::details *this, void *a2)
{
  return caulk::mach::details::retain_os_object(this, a2);
}

uint64_t caulk::mach::details::release_os_object(caulk::mach::details *this, void *a2)
{
  return caulk::mach::details::release_os_object(this, a2);
}

uint64_t caulk::semaphore::timed_wait(caulk::semaphore *this, double a2)
{
  return caulk::semaphore::timed_wait(this, a2);
}

uint64_t caulk::semaphore::signal(caulk::semaphore *this)
{
  return caulk::semaphore::signal(this);
}

uint64_t caulk::semaphore::semaphore(caulk::semaphore *this, unsigned int a2)
{
  return caulk::semaphore::semaphore(this, a2);
}

void caulk::semaphore::~semaphore(caulk::semaphore *this)
{
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return std::string::compare(this, __s);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(this);
  std::basic_string_view<_CharT, _Traits>::size_type size = v3.__size_;
  int data = v3.__data_;
  result.__size_ = size;
  result.__data_ = data;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(this);
  std::basic_string_view<_CharT, _Traits>::size_type size = v3.__size_;
  int data = v3.__data_;
  result.__size_ = size;
  result.__data_ = data;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__root_directory(this);
  std::basic_string_view<_CharT, _Traits>::size_type size = v3.__size_;
  int data = v3.__data_;
  result.__size_ = size;
  result.__data_ = data;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

{
  return std::logic_error::logic_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::erase(this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::insert(this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return std::string::replace(this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return std::string::basic_string(this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return std::random_device::random_device(this, __token);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return std::random_device::operator()(this);
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return std::recursive_mutex::recursive_mutex(this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::shared_timed_mutex::lock_shared(std::shared_timed_mutex *this)
{
}

void std::shared_timed_mutex::unlock_shared(std::shared_timed_mutex *this)
{
}

void std::shared_timed_mutex::lock(std::shared_timed_mutex *this)
{
}

void std::shared_timed_mutex::unlock(std::shared_timed_mutex *this)
{
}

std::shared_timed_mutex *__cdecl std::shared_timed_mutex::shared_timed_mutex(std::shared_timed_mutex *this)
{
  return std::shared_timed_mutex::shared_timed_mutex(this);
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

BOOL std::__shared_mutex_base::try_lock_shared(std::__shared_mutex_base *this)
{
  return std::__shared_mutex_base::try_lock_shared(this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return std::__shared_mutex_base::__shared_mutex_base(this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return std::__shared_weak_count::lock(this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::replace_extension(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__replacement)
{
  return std::__fs::filesystem::path::replace_extension(this, __replacement);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return std::__fs::filesystem::__status(a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return std::stoul(__str, __idx, __base);
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return std::__sort<std::__less<int,int> &,int *>();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return std::__sort<std::__less<long long,long long> &,long long *>();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return std::chrono::steady_clock::now();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return std::chrono::system_clock::now();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return std::to_string(retstr, __val);
}

{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return std::to_string(retstr, __val);
}

uint64_t std::operator+<char>()
{
  return std::operator+<char>();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return std::bad_cast::bad_cast(this);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return std::bad_alloc::bad_alloc(this);
}

void std::exception::~exception(std::exception *this)
{
}

int std::uncaught_exceptions(void)
{
  return std::uncaught_exceptions();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return ___cxa_get_exception_ptr(a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return ___error();
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

float __exp10f(float a1)
{
  return ___exp10f(a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

uint64_t __udivti3()
{
  return ___udivti3();
}

uint64_t _os_assert_log()
{
  return __os_assert_log();
}

uint64_t _os_crash()
{
  return __os_crash();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return _close(a1);
}

long double cos(long double __x)
{
  return _cos(__x);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return _dispatch_data_apply(data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return _dispatch_data_create(buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return _dispatch_data_create_map(data, buffer_ptr, size_ptr);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return _dispatch_get_specific(key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_read(dispatch_fd_t fd, size_t length, dispatch_queue_t queue, void *handler)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

void dispatch_write(dispatch_fd_t fd, dispatch_data_t data, dispatch_queue_t queue, void *handler)
{
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return _fputs(a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return _fseek(a1, a2, a3);
}

uint64_t ftell(FILE *a1)
{
  return _ftell(a1);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

float log10f(float a1)
{
  return _log10f(a1);
}

float logf(float a1)
{
  return _logf(a1);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_release(void *object)
{
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return _os_signpost_id_generate(log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_workgroup_attr_set_telemetry_flavor()
{
  return _os_workgroup_attr_set_telemetry_flavor();
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return _pthread_attr_destroy(a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return _pthread_attr_getschedparam(a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return _pthread_attr_init(a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return _pthread_attr_setdetachstate(a1, a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return _pthread_attr_setschedparam(a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return _pthread_attr_setschedpolicy(a1, a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return _pthread_cond_broadcast(a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return _pthread_cond_destroy(a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return _pthread_cond_init(a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return _pthread_cond_signal(a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return _pthread_cond_timedwait_relative_np(a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return _pthread_cond_wait(a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return _pthread_create(a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return _pthread_equal(a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return _pthread_mach_thread_np(a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return _pthread_mutex_destroy(a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return _pthread_mutex_init(a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return _pthread_mutex_trylock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

pthread_t pthread_self(void)
{
  return _pthread_self();
}

int pthread_setname_np(const char *a1)
{
  return _pthread_setname_np(a1);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

long double sin(long double __x)
{
  return _sin(__x);
}

long double sinh(long double __x)
{
  return _sinh(__x);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return _strrchr(__s, __c);
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_isCurrentExecutor()
{
  return _swift_task_isCurrentExecutor();
}

uint64_t swift_task_reportUnexpectedExecutor()
{
  return _swift_task_reportUnexpectedExecutor();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  return _tan(__x);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return _thread_info(target_act, flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return _thread_policy_set(thread, flavor, policy_info, policy_infoCnt);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

void vDSP_vasm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

int vdprintf(int a1, const char *a2, va_list a3)
{
  return _vdprintf(a1, a2, a3);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return _vm_allocate(target_task, address, size, flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return _vm_deallocate(target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return _wmemchr(__s, __c, __n);
}

id objc_msgSend_ServiceIsRunning(void *a1, const char *a2, ...)
{
  return [a1 ServiceIsRunning];
}

id objc_msgSend_StartService(void *a1, const char *a2, ...)
{
  return [a1 StartService];
}

id objc_msgSend_StopService(void *a1, const char *a2, ...)
{
  return [a1 StopService];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend__fire(void *a1, const char *a2, ...)
{
  return [a1 _fire];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_cameraAttributions(void *a1, const char *a2, ...)
{
  return [a1 cameraAttributions];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_currentEnrollmentProgress(void *a1, const char *a2, ...)
{
  return [a1 currentEnrollmentProgress];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return [a1 data];
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return [a1 defaultCStringEncoding];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return [a1 invalidate];
}

id objc_msgSend_isNr41Enabled(void *a1, const char *a2, ...)
{
  return [a1 isNr41Enabled];
}

id objc_msgSend_isNr7xEnabled(void *a1, const char *a2, ...)
{
  return [a1 isNr7xEnabled];
}

id objc_msgSend_mediaPureToneAverage(void *a1, const char *a2, ...)
{
  return [a1 mediaPureToneAverage];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return [a1 path];
}

id objc_msgSend_personalAudioAccommodationTypes(void *a1, const char *a2, ...)
{
  return [a1 personalAudioAccommodationTypes];
}

id objc_msgSend_personalMediaConfiguration(void *a1, const char *a2, ...)
{
  return [a1 personalMediaConfiguration];
}

id objc_msgSend_personalMediaEnabled(void *a1, const char *a2, ...)
{
  return [a1 personalMediaEnabled];
}

id objc_msgSend_preset(void *a1, const char *a2, ...)
{
  return [a1 preset];
}

id objc_msgSend_presetAdjustments(void *a1, const char *a2, ...)
{
  return [a1 presetAdjustments];
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return [a1 productName];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return [a1 sharedInstance];
}

id objc_msgSend_startObserving(void *a1, const char *a2, ...)
{
  return [a1 startObserving];
}

id objc_msgSend_stopObserving(void *a1, const char *a2, ...)
{
  return [a1 stopObserving];
}

id objc_msgSend_temporaryDirectory(void *a1, const char *a2, ...)
{
  return [a1 temporaryDirectory];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}